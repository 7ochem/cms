{"version":3,"sources":["Craft.min.js","Craft.js","BaseElementEditor.js","BaseElementIndex.js","BaseElementIndexView.js","BaseElementSelectInput.js","BaseElementSelectorModal.js","BaseInputGenerator.js","Tabs.js","AdminTable.js","AssetEditor.js","AssetImageEditor.js","AssetIndex.js","AssetSelectInput.js","AssetSelectorModal.js","AuthManager.js","CP.js","CategoryIndex.js","CategorySelectInput.js","Chart.js","ColorInput.js","CustomizeSourcesModal.js","DataTableSorter.js","DeleteUserModal.js","DraftEditor.js","DynamicGenerator.js","EditableTable.js","ElementActionTrigger.js","ElementThumbLoader.js","ElevatedSessionForm.js","ElevatedSessionManager.js","EntryIndex.js","FieldLayoutDesigner.js","FieldToggle.js","Grid.js","HandleGenerator.js","ImageUpload.js","InfoIcon.js","LightSwitch.js","Listbox.js","LivePreview.js","PasswordInput.js","Preview.js","PreviewFileModal.js","ProgressBar.js","PromptHandler.js","SlidePicker.js","SlideRuleInput.js","Slideout.js","SlugGenerator.js","Structure.js","StructureDrag.js","StructureTableSorter.js","TableElementIndexView.js","TagSelectInput.js","ThumbsElementIndexView.js","UI.js","Uploader.js","UriFormatGenerator.js"],"names":["$","rxhtmlTag","jQuery","htmlPrefilter","html","replace","extend","Craft","navHeight","index","arr","key","isArray","reduce","obj","i","group","grouped","thisKey","hasOwnProperty","push","t","category","message","params","translations","this","formatMessage","pattern","args","tokens","_tokenizePattern","length","token","_parseToken","join","start","pos","depth","chars","indexOf","slice","open","close","split","param","trim","arg","type","format","number","formatNumber","substr","select","c","Garnish","selector","plural","offset","selectorChars","substring","parseInt","map","p","formatDate","date","Date","datepicker","datepickerOptions","dateFormat","d3","formatLocale","d3FormatLocaleDefinition","formatter","shortcutText","shift","alt","clientOs","escapeHtml","str","text","escapeRegex","getText","encodeUriComponent","encodeURIComponent","differences","!","*","'","(",")","chr","re","RegExp","selectFullValue","input","$input","val","setSelectionRange","formatInputId","inputName","rtrim","getUrl","path","baseUrl","anchor","isPlainObject","aParams","name","value","apos","url","qpos","search","pathParam","pathMatch","match","omitScriptNameInUrls","usePathInfo","scriptName","basePath","endPath","getCpUrl","baseCpUrl","getSiteUrl","baseSiteUrl","getActionUrl","actionUrl","redirectTo","document","location","href","getCsrfInput","csrfTokenName","csrfTokenValue","postActionRequest","action","data","callback","options","contentType","JSON","stringify","jqXHR","ajax","dataType","headers","_actionHeaders","success","error","textStatus","errorThrown","readyState","cp","displayError","alert","send","_waitingOnAjax","_ajaxQueue","queueActionRequest","undefined","_postNextActionRequestInQueue","X-Registered-Asset-Bundles","Object","keys","registeredAssetBundles","X-Registered-Js-Files","registeredJsFiles","sendActionRequest","method","Promise","resolve","reject","X-Requested-With","v","getTime","axios","request","then","catch","sendApiRequest","uri","cancelToken","_getApiHeaders","apiHeaders","baseURL","baseApiUrl","apiParams","_apiHeaders","processCraftHeaders","httpProxy","proxy","apiResponse","_processApiHeaders","_loadingApiHeaders","_apiHeaderWaitlist","response","e","_rejectApiRequests","clearCachedApiHeaders","downloadFromUrl","body","XMLHttpRequest","setRequestHeader","responseType","onload","status","disposition","getResponseHeader","matches","exec","filename","blob","Blob","link","createElement","window","URL","createObjectURL","download","appendChild","click","removeChild","stringToArray","findDeltaData","oldData","newData","deltaNames","initialDeltaValues","sort","a","b","groupedOldParams","_groupParamsByDeltaNames","groupedNewParams","__root__","n","inArray","modifiedDeltaNames","concat","withRoot","initialValues","encodeURIComponentExceptEqualChar","o","decodeURIComponent","paramLoop","paramName","expandPostArray","expanded","m","unshift","parentElem","createForm","$form","attr","accept-charset","chunks","values","appendTo","compare","obj1","obj2","sortObjectKeys","Array","getObjectKeys","escapeChars","escaped","ltrim","startsWith","filterArray","filtered","elem","includes","removeFromArray","splice","getLast","uppercaseFirst","charAt","toUpperCase","lowercaseFirst","toLowerCase","parseUrl","scheme","host","hostname","port","query","hash","isSameHost","requestUrlInfo","urlInfo","secondsToHumanTimeDuration","seconds","showSeconds","weeks","Math","floor","days","minutes","hours","round","timeComponents","asciiString","charMap","normalize","char","asciiStr","asciiCharMap","randomString","result","random","createErrorList","errors","$ul","addClass","$li","appendHeadHtml","$existingCss","existingCss","eq","regexp","append","appendFootHtml","$existingJs","src","existingJs","$bod","initUiElements","$container","grid","infoicon","checkboxselect","fieldtoggle","lightswitch","nicetext","formsubmit","menubtn","disclosureMenu","datetime","datetimeinput","each","_elementIndexClasses","_elementSelectorModalClasses","_elementEditorClasses","registerElementIndexClass","elementType","func","registerElementSelectorModalClass","registerElementEditorClass","createElementIndex","settings","BaseElementIndex","createElementSelectorModal","BaseElementSelectorModal","createElementEditor","element","BaseElementEditor","getLocalStorage","defaultValue","systemUid","localStorage","parse","setLocalStorage","removeLocalStorage","removeItem","getCookie","cookie","setCookie","defaultCookieOptions","domain","maxAge","expires","toUTCString","secure","removeCookie","getElementInfo","$element","hasClass","find","id","siteId","label","hasThumb","setElementSize","size","otherSize","removeClass","$oldImg","$newImg","sizes","srcset","replaceWith","picturefill","elements","submitForm","confirm","redirect","retainScroll","scrollY","trigger","trapFocusWithin","container","on","ev","keyCode","$focusableElements","activeElement","shiftKey","preventDefault","stopPropagation","last","focus","first","setFocusWithin","fn","animateLeft","duration","easing","complete","orientation","velocity","left","right","animateRight","disable","$elem","removeAttr","enable","itemSelector","cols","maxCols","minColWidth","mode","fillMode","colClass","snapToGrid","Grid","InfoIcon","CheckboxSelect","FieldToggle","settingName","settingValue","setSettings","thisSettings","hasAttr","indeterminateValue","LightSwitch","NiceText","$btn","currentTarget","$anchor","closest","customTrigger","next","menuAnchor","MenuBtn","$trigger","DisclosureMenu","$wrapper","$inputs","checkValue","hasValue","children","class","title","aria-label","remove","filter","charsLeftHtml","charsLeft","$doc","ready","Base","elementId","initialData","$header","$toolbar","$tabContainer","$editLink","$sidebarBtn","$loadSpinner","$body","$fieldsContainer","$sidebar","$footer","$siteSelectContainer","$siteSelect","$siteSpinner","$cancelBtn","$saveBtn","$saveSpinner","slideout","tabManager","showingSidebar","ignoreFailedRequest","init","defaults","target","data-icon","ltr","addListener","hideSidebar","showSidebar","$siteSelectOuterContainer","$contents","add","Slideout","containerElement","containerAttributes","novalidate","closeOnEsc","closeOnShadeClick","destroy","shortcutManager","registerShortcut","S_KEY","ctrl","saveElement","ESC_KEY","maybeCloseSlideout","$shade","$target","event","load","onShowHud","onCreateForm","setElementAttribute","attributes","getBaseData","prevalidate","showLoadSpinner","onBeginLoading","cancel","CancelToken","source","includeSites","isMultiSite","showSiteSwitcher","hideLoadSpinner","onEndLoading","updateForm","showHeader","hideHeader","switchSite","isDirty","newSiteId","refreshInitialData","fieldHtml","sites","siteInfo","$option","tabHtml","Tabs","$tab","$win","editUrl","sidebarHtml","ElementThumbLoader","requestAnimationFrame","headHtml","footHtml","serialize","isMobileBrowser","scrollTop","off","css","_closedSidebarStyles","offsetWidth","_openedSidebarStyles","one","addLayer","removeLayer","[object Object]","validators","isFunction","call","$title","$a","cpEditUrl","newTitle","elementTypeNames","displayNotice","closeSlideout","onSaveElement","runQueue","shake","isOpen","onHideHud","base","loadHud","maybeCloseHud","closeHud","reloadForm","elementIndex","noop","initialized","instanceState","sourceStates","sourceStatesStorageKey","searchTimeout","sourceSelect","$main","isIndexBusy","sourceKey","sourceViewModes","$source","sourcesByKey","$visibleSources","$customizeSourcesBtn","customizeSourcesModal","toolbarOffset","$search","searching","searchText","trashed","drafts","$clearSearchBtn","$statusMenuBtn","$statusMenuContainer","statusMenu","$siteMenuBtn","siteMenu","$sortMenuBtn","sortMenu","$sortAttributesList","$sortDirectionsList","$scoreSortAttribute","$structureSortAttribute","$elements","$viewModeBtnContainer","viewModeBtns","viewMode","view","_autoSelectElements","$countSpinner","$countContainer","page","resultSet","totalResults","$exportBtn","actions","actionsHeadHtml","actionsFootHtml","$selectAllContainer","$selectAllCheckbox","showingActionTriggers","exporters","exportersByType","_$detachedToolbarItems","_$triggers","_ignoreFailedRequest","_cancelToken","getDefaultInstanceState","storageKey","context","toolbarSelector","parent","hide","initSources","menu","_handleStatusChange","bind","$options","_setSite","criteria","_handleSiteChange","defaultSiteId","getSiteId","$storedSiteOption","startSearching","stopSearching","clearTimeout","setTimeout","updateElementsIfSearchTextChanged","RETURN_KEY","_handleSortChange","afterInit","selectDefaultSource","setPage","pageNum","updateElements","onAfterInit","_createCancelToken","_cancelRequests","getSourceContainer","$sources","$items","getSite","s","_getSourcesInList","Select","multi","allowEmpty","vertical","onSelectionChange","_handleSourceSelectionChange","initSource","getDefaultSourceKey","getSourceByKey","selectSource","refreshSources","removeAllItems","setIndexBusy","refreshSourcesAction","setIndexAvailable","addItems","initSourceToggle","expandedSources","_expandSource","deinitSourceToggle","$toggle","_getSourceToggle","deinitSource","removeItems","removeListener","removeData","selectedSource","defaultSource","paths","getDefaultExpandedSources","addOptions","prependTo","_updateStructureSortOption","setSortAttribute","detach","setInstanceState","storeInstanceState","getSourceState","getSelectedSourceState","setSelecetedSourceState","viewState","storeSortAttributeAndDirection","getSelectedSortAttribute","order","getSelectedSortDirection","max","pageTrigger","history","replaceState","_resetCount","getViewParams","batchSize","limit","canHaveDrafts","savedDraftsOnly","draftOf","disabledElementIds","paginated","_isViewPaginated","collapsedElementIds","preservePagination","updateElementsAction","$scrollContainer","_updateView","showActionTriggers","height","_createTriggers","submitAction","actionParams","selectedElementIds","getSelectedElementIds","_findAction","viewParams","elementAction","elementIds","submitActionsAction","badgeCounts","_updateBadgeCounts","afterAction","actionClass","onAfterAction","hideActionTriggers","updateActionTriggers","totalSelected","getSelectedElements","getEnabledElements","setStatus","selectOption","getSortAttributeOption","attribute","setSortDirection","getSortDirectionOption","dir","getSelectedViewMode","selectItem","updateSidebarMenuLabel","sortOptions","data-extra","data-attr","setStoredSortOptionsForSource","$firstOption","getViewModesForSource","sourceViewMode","$viewModeBtn","className","data-view","icon","selectViewMode","doesSourceHaveViewMode","onSelectSource","selectSourceByKey","sortAttr","sortDir","getDefaultSort","viewModes","force","createView","getViewClass","TableElementIndexView","ThumbsElementIndexView","rememberDisabledElementId","forgetDisabledElementId","enableElements","parents","onEnableElements","disableElements","onDisableElements","getElementById","enableElementsById","ids","makeArray","disableElementsById","selectElementAfterUpdate","addButton","$button","getButtonContainer","isShowingSidebar","buttonContainer","createCustomizeSourcesModal","modal","CustomizeSourcesModal","onHide","onSelectSite","onUpdateElements","$selectedItems","_handleActionTriggerSubmit","getPostData","_handleMenuActionTriggerSubmit","option","selectedOption","firstSite","$firstVisibleSource","selectNewSource","toString","get","$heading","$headings","nextUntil","setSiteId","is","_handleSelectionChange","_handleSourceDblClick","_toggleSource","_handleSourceToggleClick","prev","$list","_getChildSources","siblings","_collapseSource","aria-expanded","$childSources","not","_countResults","total","itemLabel","itemsLabel","min","countLabel","item","items","$paginationContainer","totalPages","ceil","$prevBtn","$nextBtn","role","tabindex","aria-checked","selectAllElements","deselectAllElements","SPACE_KEY","selectable","multiSelect","checkboxMode","selectElementById","$badge","countElementsAction","count","triggers","safeMenuActions","destructiveMenuActions","destructive","$menuTrigger","$menu","$safeList","_createMenuTriggerList","$destructiveList","$div","_showExportHud","typeOptions","$typeField","ui","createSelectField","$formatField","$typeSelect","formattable","$limitField","createTextField","placeholder","$spinner","HUD","submitting","isNaN","BaseElementIndexView","$loadingMoreSpinner","$elementContainer","$scroller","thumbLoader","elementSelect","loadingMore","_totalVisible","_morePending","_handleEnableElements","_handleDisableElements","insertAfter","getElementContainer","setTotalVisible","setMorePending","isVerticalList","handle","_handleElementEditing","prop","isTouchCapable","maybeLoadMore","getAllElements","$selectedElements","selectElement","selectAll","deselectAll","getTotalVisible","totalVisible","getMorePending","morePending","canLoadMore","loadMore","innerHeight","top","outerHeight","loadMoreElementsAction","getLoadMoreParams","$newElements","appendElements","onAppendElements","newElements","BaseElementSelectInput","elementSort","elementEditor","$elementsContainer","$addElementBtn","$addElementBtnContainer","_initialized","normalizedSettings","arguments","modalStorageKey","sortable","getContainer","getElementsContainer","getAddElementsBtn","initElementSelect","initElementSort","resetElements","getElements","DragSort","$targetItem","getSelectedItems","ignoreHandleSelector","axis","getElementSortAxis","collapseDraggees","magnetStrength","helperLagBase","onSortChange","resetItemOrder","canAddMoreElements","updateAddElementsBtn","enableAddElementsBtn","disableAddElementsBtn","removeElements","addElements","editable","_handleShowElementEditor","removeElement","onAddElements","onRemoveElements","animateElementAway","animateCss","opacity","outerWidth","draftEditor","pause","REMOVE_FX_DURATION","resume","showModal","show","createModal","getModalSettings","closeOtherModals","sources","showSiteMenu","getDisabledElementIds","onSelect","onModalSelect","modalSettings","allowSelfRelations","sourceElementId","slotsLeft","selectElements","updateDisabledElementsInModal","elementInfo","createNewElement","appendElement","animateElementIntoPlace","onSelectElements","clone","prepend","single","$modalElement","$inputElement","origOffset","destOffset","$helper","position","zIndex","ADD_FX_DURATION","checkForm","fieldId","editorSettings","Modal","$selectBtn","$sourceToggles","$tbody","$primaryButtons","$secondaryButtons","$footerSpinner","onFadeIn","_createElementIndex","updateSelectBtnState","enableSelectBtn","disableSelectBtn","enableCancelBtn","disableCancelBtn","showFooterSpinner","hideFooterSpinner","clearMouseUpTimeout","disableElementsOnSelect","hideOnSelect","info","has","touchData","firstTap","secondTap","resizable","onCancel","BaseInputGenerator","listening","timeout","startListening","setNewSource","stopListening","removeAllListeners","onSourceTextChange","updateTarget","onTargetTextChange","onFormSubmit","sourceVal","targetVal","generateTargetValue","dispatchEvent","InputEvent","inputType","Event","$menuBtn","$tabs","$selectedTab","$focusableTab","log","selectTab","makeTabFocusable","LOCATION_HASH","$initialTab","LEFT_KEY","RIGHT_KEY","contains","scrollToTab","updateMenuBtn","tab","_getTab","deselectTab","scrollLeft","elemScrollOffset","targetScrollLeft","tabWidth","ulWidth","HTMLElement","AdminTable","totalItems","sorter","$noItems","$table","$deleteBtns","allowDeleteAll","minItems","noItemsSelector","tableSelector","DataTableSorter","reorderItems","updateUI","addRow","row","maxItems","$row","$deleteBtn","idAttribute","reorderAction","onReorderItems","reorderSuccessMessage","reorderFailMessage","handleDeleteBtnClick","confirmDeleteItem","deleteItem","getItemName","confirmDeleteMessage","getItemId","deleteAction","handleDeleteItemResponse","onDeleteItem","deleteSuccessMessage","deleteFailMessage","nameAttribute","$moveButtons","newItemBtnSelector","AssetEditor","$filenameInput","originalBasename","originalExtension","reloadIndex","replaceAsset","replaceElement","refreshThumbnail","validateExtension","showImageEditor","AssetImageEditor","onSave","showImagePreview","startingWidth","startingHeight","PreviewFileModal","selectFilename","selectionStart","basename","extension","_parseFilename","selectionEnd","oldExt","newExt","originalFilename","ext","parts","pop","$imageTools","$buttons","$replaceBtn","$editorContainer","$straighten","$croppingCanvas","$spinnerCanvas","canvas","image","viewport","focalPoint","croppingCanvas","clipper","croppingRectangle","cropperHandles","cropperGrid","croppingShade","croppingAreaText","imageStraightenAngle","viewportRotation","originalWidth","originalHeight","imageVerticeCoords","zoomRatio","animationInProgress","currentView","assetId","cacheBust","draggingCropper","scalingCropper","draggingFocal","previousMouseX","previousMouseY","shiftKeyHeld","editorHeight","editorWidth","cropperState","scaleFactor","flipData","focalPointState","spinnerInterval","maxImageSize","lastLoadedDimensions","imageIsLoading","mouseMoveEvent","croppingConstraint","constraintOrientation","showingCustomConstraint","renderImage","renderCropper","now","allowDegreeFractions","isImagick","x","y","allowSavingAsNew","saveImage","getMaxImageSize","loadEditor","browserViewportWidth","documentElement","clientWidth","browserViewportHeight","clientHeight","devicePixelRatio","$viewsContainer","$views","innerWidth","_showSpinner","updateSizeAndPosition","fabric","StaticCanvas","width","enableRetinaScaling","renderAll","imageUrl","Image","fromURL","imageObject","set","originX","originY","getHeight","getWidth","getScaledImageDimensions","_setFittedImageVerticeCoordinates","_repositionEditorElements","focalState","imageDimensions","offsetX","offsetY","focal","focalData","adjustedX","adjustedY","storeFocalPointState","_createFocalPoint","_createViewport","storeCropperState","_addControlListeners","_handleMouseMove","_handleMouseDown","_handleMouseUp","_handleMouseOut","_hideSpinner","_reloadImage","setSrc","min-width","min-height","previousEditorDimensions","setDimensions","currentScaledDimensions","getZoomToFitRatio","previouslyOccupiedArea","_getBoundingRectangle","_repositionCropper","getZoomToCoverRatio","_repositionImage","_repositionViewport","_repositionFocalPoint","_zoomImage","Rect","fill","globalCompositeOperation","sizeFactor","focalX","focalY","deltaX","deltaY","Group","Circle","radius","strokeWidth","stroke","toggleFocalPoint","dimensions","state","currentWidth","ratio","hasOrientationChanged","_","imageRatio","editorRatio","_handleTabClick","rotateImage","flipImage","straighteningInput","SlideRuleInput","onStart","_showGrid","onChange","slider","straighten","onEnd","_hideGrid","_cleanupFocalPointAfterStraighten","SHIFT_KEY","_handleConstraintClick","_handleOrientationClick","_applyCustomConstraint","constraint","_showCustomConstraint","_hideCustomConstraint","setCroppingConstraint","enforceCroppingConstraint","$constraints","$constraint","reverse","_getCustomConstraint","w","h","parseFloat","_setCustomConstraint","showView","enableSlider","disableSlider","disableCropMode","enableCropMode","zoomFactor","degrees","imageZoomRatio","newAngle","angle","scaledImageDimensions","viewportProperties","imageProperties","angleInRadians","PI","newDeltaX","cos","sin","newDeltaY","modifiedDeltaX","modifiedDeltaY","temp","animate","animationDuration","onComplete","cleanAngle","_adjustFocalPointByAngle","_resetFocalPointPosition","editorCenter","setValue","properties","scaleY","scaleX","previousAngle","_adjustEditorElementsOnStraighten","newCenterX","newCenterY","angleDelta","currentZoomRatio","adjustmentRatio","cropperCenterX","cropperCenterY","imageVertices","getImageVerticeCoords","rectangle","_getZoomRatioToFitRectangle","_isCenterInside","object","containingObject","newFocalX","newFocalY","adjustedFocalX","adjustedFocalY","containingVertices","vertex","rectangleVertices","_getRectangleVertices","verticeIndex","arePointsInsideRectangle","edge","_getEdgeCrossed","rectangleCenter","distanceFromVertexToEdge","abs","sqrt","pow","distanceFromCenterToEdge","postData","imageRotation","cropData","zoom","end","scaledWidth","scaledHeight","boundingBox","_getImageBoundingBox","scale","vertScale","horiScale","getCombinedZoomRatio","strokeOptions","gridWidth","gridHeight","xStep","yStep","Line","onFadeOut","_editorModeTransition","cropperData","_showCropper","_hideCropper","targetZoom","inverseZoomFactor","imageOffsetX","imageOffsetY","getContext","cW","cH","setInterval","rotation","save","clearRect","translate","rotate","beginPath","moveTo","lineTo","lineWidth","strokeStyle","restore","clearInterval","clipperData","_setupCropperLayer","_redrawCropperElements","backgroundColor","hoverCursor","selection","rectangleRatio","rectWidth","rectHeight","lineOptions","gridOptions","pathGroup","Path","cropTextTop","cropTextBackgroundColor","Textbox","fontSize","font","textAlign","previousImageArea","currentOffset","areaFactor","coordinateSet","d","_isMouseOver","move","_cropperHandleHitTest","pageX","pageY","_handleMouseMoveInternal","_handleFocalDrag","_handleCropperDrag","_handleCropperResize","_setMouseCursor","vertices","dxi","dyi","furthest","furthestDeltas","newX","newY","previousHeight","previousWidth","startingRectangle","_calculateNewCropperSizeByDeltas","cropperDirection","topDelta","leftDelta","change","cursor","parentOffset","mouseX","mouseY","lb","rb","tb","bb","topLeft","topRight","bottomRight","bottomLeft","zoomMode","topVerticalSegment","bottomVerticalSegment","rightHorizontalSegment","leftHorizontalSegment","verticalOffset","horizontalOffset","_debug","fabricObj","debugger","points","ab","_getVector","bc","scalarAbAb","_getScalarProduct","scalarBcBc","point","ap","bp","scalarAbAp","scalarBcBp","projectsOnAB","projectsOnBC","_getVectorMagnitude","vector","_getAngleBetweenVectors","acos","edgePoints","centerPoint","smallestDiff","edgeCrossed","edgeIndex","toCenter","edgeVector","toVertex","diff","box","proportion","AssetIndex","$includeSubfoldersContainer","$includeSubfoldersCheckbox","showingIncludeSubfoldersCheckbox","$uploadButton","$uploadInput","$progressBar","$folders","uploader","promptHandler","progressBar","_uploadTotalFiles","_uploadFileProgress","_uploadedAssetIds","_currentUploaderSettings","_assetDrag","_folderDrag","_expandDropTargetFolderTimeout","_tempExpandedFolders","_fileConflictTemplate","choices","_folderConflictTemplate","_initIndexPageMode","_positionProgressBar","_createFolderContextMenu","_getSourceLevel","updateDropTargets","contextMenu","parentsUntil","DragDrop","activeDropTargetClass","helperOpacity","helper","$file","_getFileDragHelper","dropTargets","$draggee","targets","onDragStart","_onDragStart","onDropTargetChange","_onDropTargetChange","onDragStop","_onFileDragStop","helperBaseZindex","$selected","draggees","_getFolderUidFromSourceKey","$draggeeHelper","$helperSidebar","$helperNav","$helperUl","padding-top","padding-right","padding-bottom","padding-left","draggedSourceIds","_onFolderDragStop","$activeDropTarget","originatingSource","targetFolderId","originalAssetIds","originalAssetId","resetProgressBar","setItemCount","showProgressBar","parameterArray","folderId","onMoveFinish","responseArray","resetPrompts","conflict","addPrompt","suggestedFilename","prompt","hideProgressBar","performAfterMoveActions","_collapseExtraExpandedFolders","getPromptCount","fadeOutHelpers","showBatchPrompts","returnData","newParameterArray","choice","apply","_performBatchRequests","returnHelpersToDraggees","folderIds","parentId","requestId","fileMoveList","newSourceKey","transferList","newFolderId","newFolderUid","merge","_performActualFolderMove","folderDeleteList","moveCallback","counter","_getRootSource","$parent","_getParentSource","_selectSourceByFolderId","$targetSource","_getSourceByKey","$parentSources","$parentSource","style","insertBefore","PromptHandler","ProgressBar","fileInput","dropZone","events","fileuploadstart","_onUploadStart","fileuploadprogressall","_onUploadProgress","fileuploaddone","_onUploadComplete","kind","allowedKinds","Uploader","defaultSourceParts","volumeSource","toArray","subfolderSource","setParams","_updateUrl","nestedSources","$thisSource","forEach","$s","$subContainer","checked","marginBottom","includeSubfolders","progress","loaded","setProgressPercentage","files","doReload","file","isLastUpload","_uploadFollowup","_updateAfterUpload","doFollowup","parameterIndex","followupCallback","incrementProcessedItemCount","updateProgressBar","sourceAssetId","conflictingAssetId","targetFilename","_onUpdateElements","_onKeyDown","_onElementFocus","openInstance","selfDestruct","$focusedItem","_loadPreview","$outerContainer","$innerContainer","_$firstRowCells","$helperCells","$helperCell","$firstRowCell","$dropTarget","dropTargetFolder","_hasSubfolders","_isExpanded","_expandFolder","dropTargetFolderId","$excludedSources","_collapseFolder","menuOptions","onClick","_createSubfolder","_renameFolder","_deleteFolder","ContextMenu","menuClass","$parentFolder","subfolderName","folderName","_prepareParentForChildren","$subfolder","folderUid","_appendSubfolder","$targetFolder","folder","_cleanUpTree","$label","oldName","newName","finally","$existingChildren","subfolderLabel","folderInserted","$existingChild","before","windowHeight","finalCallback","doRequest","parameters","AssetSelectInput","hud","$uploadBtn","canUpload","_attachUploader","openPreview","focusItem","minGutter","defaultFieldLayoutId","formData","multiple","canAddMoreFiles","replaceWithId","$existing","selectUploadedFile","$newElement","margin","slotsTaken","AssetSelectorModal","$selectTransformBtn","_selectedTransform","transforms","createSelectTransformButton","$btnGroup","$menuList","MenuButton","onOptionSelect","onSelectTransform","allowTransforms","transform","selectImagesWithTransform","transformUrls","imageIdsWithMissingUrls","$item","fetchMissingTransformUrls","canSelectImageTransforms","AuthManager","remainingSessionTime","checkRemainingSessionTimer","showLoginModalTimer","decrementLogoutWarningInterval","showingLogoutWarningModal","showingLoginModal","logoutWarningModal","loginModal","$logoutWarningPara","$passwordInput","$passwordSpinner","$loginBtn","$loginErrorPara","submitLoginIfLoggedOut","updateRemainingSessionTime","setCheckRemainingSessionTimer","checkRemainingSessionTime","extendSession","responseJSON","minSafeSessionTime","showLogoutWarningModal","checkInterval","showLoginModal","submitLogin","hideLogoutWarningModal","hideLoginModal","quickShow","$logoutBtn","$renewSessionBtn","autoShow","hideOnEsc","hideOnShadeClick","shadeClass","updateLogoutWarningMessage","decrementLogoutWarning","time","quick","quickHide","$inputContainer","$inputsFlexContainer","$passwordContainer","$buttonContainer","$passwordWrapper","PasswordInput","onToggleInput","$newPasswordInput","logout","renewSession","validatePassword","login","clearLoginError","loginName","username","password","showLoginError","CP","authManager","$nav","$navToggle","$globalSidebar","$globalContainer","$mainContainer","$alerts","$crumbs","$breadcrumbList","$breadcrumbItems","$notificationContainer","$primaryForm","$headerContainer","$mainContent","$details","$sidebarContainer","$contentContainer","$edition","$confirmUnloadForms","$deltaForms","$collapsibleTables","isMobile","fixedHeader","breadcrumbListWidth","breadcrumbDisclosureItem","enableQueue","totalJobs","jobInfo","displayedJobInfo","displayedJobInfoUnchanged","trackJobProgressTimeout","jobProgressIcon","checkingForUpdates","forcingRefreshOnUpdatesCheck","includingDetailsOnUpdatesCheck","checkForUpdatesCallbacks","resizeTimeout","$allInstructions","$instructions","updateFixedHeader","handleWindowResize","setSidebarNavAttributes","$errorNotifications","$otherNotifications","delay","notificationDuration","initSpecialForms","initAlerts","shortcuts","shortcut","submitPrimaryForm","initTabs","scrollTo","_handleInputFocus","_handleInputBlur","announcements","hasUnreads","some","unread","contents","heading","onShow","serialized","$forms","submit","confirmUnload","livePreview","inPreviewMode","originalEvent","returnValue","saveShortcut","toggleNav","isExpanded","navIsExpanded","disableGlobalSidebarLinks","enableGlobalSidebarLinks","focusableItems","isAlwaysVisible","getComputedStyle","getPropertyValue","toggleSidebar","toggleClass","menuBtn","$tabsContainer","$tabsList","selectedTabIndex","updateResponsiveTables","handleBreadcrumbVisibility","breadcrumbItemsWrap","listWidth","totalItemWidth","finalIndex","newWidth","visibleItemWidth","shownItems","hiddenItems","_i","_$table","_containerWidth","_check","_isCollapsed","getBoundingClientRect","headerHeight","max-height","displayNotification","$notification","fadedMargin","margin-left","margin-right","display","notificationType","fetchAlerts","displayAlerts","alerts","margin-top","$shunnableAlerts","$link","checkForUpdates","forceRefresh","includeDetails","realCallback","_checkForUpdates","updateUtilitiesBadge","callbacks","updateInfo","_getUpdates","_checkForCachedUpdates","cached","onlyIfCached","updates","_cacheUpdates","$utilitiesLink","badgeCount","runQueueAutomatically","trackJobProgress","_trackJobProgressInternal","setJobInfo","jobs","oldInfo","getDisplayedJobInfo","progressLabel","updateJobIcon","statuses","JOB_STATUS_RESERVED","JOB_STATUS_FAILED","JOB_STATUS_WAITING","j","JobProgressIcon","hideFailMode","setDescription","description","setProgress","showFailMode","JOB_STATUS_DONE","$progressLabel","failMode","_$bgCanvas","_$staticCanvas","_$hoverCanvas","_$failCanvas","_staticCtx","_hoverCtx","_canvasSize","_arcPos","_arcRadius","_lineWidth","_arcStartPos","_arcEndPos","_arcStartStepSize","_arcEndStepSize","_arcStep","_arcStepTimeout","_arcAnimateCallback","_progressBar","canAccessQueueManager","$canvasContainer","$labelContainer","_createCanvas","_drawArc","_animateArc","_setArc","color","$canvas","ctx","lineCap","startPos","endPos","arc","closePath","targetStartPos","targetEndPos","_takeNextArcStep","CategoryIndex","editableGroups","$newCategoryBtnGroup","$newCategoryBtn","updateButton","editableCategoryGroups","uid","defaultGroupHandle","selectedSourceHandle","selectedGroup","_getGroupTriggerHref","_openCreateCategoryModal","getAttribute","menuHtml","site","groupId","newCategoryBtnText","hudTrigger","groupSourceKey","CategorySelectInput","selectedCategoryIds","categoryIds","branchLimit","selectionLabel","$newElementsContainer","filteredElements","$allCategories","_animateCategoryAway","charts","DataTable","columns","rows","cellIndex","parseTime","timeParse","Tip","$tip","setContent","setPosition","BaseChart","$chart","chartBaseClass","dataTable","timeFormatLocale","svg","globalSettings","formats","d3Formats","formatLocaleDefinition","timeFormatLocaleDefinition","d3TimeFormatLocaleDefinition","resize","baseSettings","draw","chartClass","onAfterDrawTicks","tickKey","tick","$tickText","numberFormat","percentFormat","currencyFormat","shortDateFormats","day","month","year","bottom","colors","Area","tip","drawingArea","getChartMargin","translateX","translateY","drawTicks","drawAxes","drawChart","drawTipTriggers","getX","xAxis","axisBottom","tickFormat","getXFormatter","ticks","yAxis","getY","axisLeft","getYFormatter","tickValues","getYTickValues","axisRight","showAxis","tickSizeOuter","gridlines","xLineAxis","tickSize","yLineAxis","line","datum","area","y0","y1","plots","enter","tips","chartMargin","xAxisTickInterval","node","getTotalLength","tipTriggerWidth","$content","$xValue","$yValue","content","yTicksMaxWidth","computedTickWidth","padded","xDomainMin","xDomainMax","xDomain","scaleTime","range","yDomain","getYMaxValue","scaleLinear","utils","getTimeFormatter","getNumberFormatter","maxValue","getDuration","secondsNum","chartSettings","dataScale","ColorInput","$colorContainer","$colorPreview","$colorInput","createColorInput","handleTextChange","setAttribute","aria-controls","updateColor","repeat","_browserSupportsColorInputs","doesBrowserSupportColorInputs","$elementIndexSourcesContainer","$sourcesContainer","$sourceSettingsContainer","$newHeadingBtn","$footerBtnContainer","$loadingSpinner","sourceSort","updateSourcesOnSave","availableTableAttributes","setContainer","buildModal","addSource","sourceData","$itemLabel","$itemInput","Heading","updateItemLabel","Source","handleNewHeadingBtnClick","scrollContainerToElement","$pendingHeading","$lastSource","$indexSource","getIndexSource","isHeading","appendSource","$extraSources","nextAll","BaseSource","$settingsContainer","isSelected","deselect","createSettings","$settings","tableAttributes","createTableColumnsField","$columnCheckboxes","selectedAttributes","createTableColumnOption","createField","instructions","createCheckbox","$labelField","$labelInput","handleLabelInputChange","deleteHeading","table","$rows","getHelper","caboose","Y_AXIS","$helperRow","helperClass","$cells","DeleteUserModal","userId","$deleteActionRadios","$deleteSpinner","userSelect","_deleting","contentSummary","idParam","$deleteSubmitBtn","_submitBtnLabel","validateDeleteInputs","withContent","num","validates","handleSubmit","onSubmit","DraftEditor","$revisionBtn","$revisionLabel","$expandSiteStatusesBtn","$statusIcon","$editMetaBtn","metaHud","$nameTextInput","$saveMetaBtn","$siteStatusPane","$globalLightswitch","$siteLightswitches","$addlSiteField","siteIds","newSiteIds","enableAutosave","lastSerializedValue","listeningForChanges","pauseLevel","saving","queue","submittingForm","duplicatedElements","httpStatus","httpError","openingPreview","preview","previewToken","createdProvisionalDraft","autosaveDrafts","siteStatuses","canEditMultipleSites","previewTargets","enablePreview","$shareBtn","openShareLink","createShareMenu","revisionId","serializeForm","isProvisionalDraft","initForProvisionalDraft","draftId","isUnpublishedDraft","initForDraft","canUpdateSource","createDraft","listenForChanges","showStatusHud","BroadcastChannel","onmessage","canonicalId","sourceId","reload","saveDraftAction","statusIcons","stopListeningForChanges","deleteDraftAction","hashedCpEditUrl","provisional","createEditMetaBtn","publishDraftAction","expandSiteStatuses","$enabledForSiteField","_getOtherSupportedSites","_createSiteStatusField","$globalField","createLightswitchField","_showField","siteStatusValues","hasEnabled","hasDisabled","originalEnabledValue","originalSerializedStatus","enabledForSite","_updateGlobalStatus","serializedStatuses","addlSites","_createAddlSiteField","_updateSiteStatuses","$field","overflow","_removeField","allEnabled","allDisabled","turnOn","turnOff","turnIndeterminate","enabled","disabled","$lightswitch","$addlSiteSelectContainer","createSelect","$addlSiteSelect","addlSiteInfo","enabledByDefault","bodyHtml","_saveSuccessMessage","_saveFailMessage","hudClass","spinners","getPreviewToken","getTokenizedPreviewUrl","randoParam","isLive","siteToken","tokenParam","getPreview","Preview","$statusIcons","ensureIsDraftOrRevision","onlyIfChanged","removeActionParams","isPreviewActive","$editor","saveDraft","console","warn","isActive","modifiedFieldNames","preparedData","prepareData","deltaName","content-type","_afterSaveRequest","_showFailStatus","docTitle","draftName","revisionMenu","creator","timestamp","updatePreviewTargets","checkMetaValues","oldId","selectors","modifiedAttributes","$fields","afterUpdate","postMessage","deltaCallback","swapDuplicatedElementIds","idsRE","pre","post","newTarget","nextInQueue","showMetaHud","createMetaHud","onMetaHudShow","$hudBody","$nameField","$nameInputContainer","saveMeta","onMetaHudHide","onMetaHudEscape","shakeMetaHud","$hud","handleFormSubmit","autosave","hashedAddAnotherRedirectUrl","DynamicGenerator","EditableTable","baseName","biggestId","$addRowBtn","rowCount","hasMaxRows","hasMinRows","radioCheckboxes","copyDraggeeInputValuesToHelper","isVisible","initialize","initializeIfVisible","minRows","createRowObj","updateAddRowButton","canAddRow","canDeleteRow","deleteRow","$tr","onDeleteRow","staticRows","maxRows","rowId","rowIdPrefix","createRow","defaultValues","onAddRow","Row","focusOnPrevRow","tdIndex","blurTd","prevRow","$prevTr","$tds","focusOnNextRow","nextRow","$nextTr","importData","lines","textualColTypes","data-id","colId","$cell","col","scope","code","small","createDateInput","createLightswitch","default","createTimeInput","createTextInput","niceTexts","tds","$textareas","tr","td","$textarea","$checkbox","textareasByColId","onHeightChange","onTextareaHeightChange","radioMode","toggle","applyToggleCheckbox","autopopulate","HandleGenerator","allowNonAlphaStart","onTextareaFocus","onRadioCheckboxChange","checkbox","checkboxColId","neg","checkboxCol","colum","ignoreNextTextareaFocus","handleKeypress","charCode","isCtrlKeyPressed","numericKeyCodes","handlePaste","clipboardData","getData","validateValue","safeValue","tallestTextareaHeight","tdHeight","ElementActionTrigger","maxLevels","newChildUrl","triggerEnabled","activate","updateTrigger","validateSelection","enableTrigger","disableTrigger","valid","batch","handleTriggerActivation","workers","Worker","$thumbs","$thumb","$scrollParent","scrollParent","addToQueue","invisibleThumbs","thumb","active","loadNext","scrollParentOffset","scrollParentHeight","thumbOffset","retryAll","loader","$img","ElevatedSessionForm","inputs","form","getInputPostVal","elevatedSessionManager","fetchingTimeout","stopImmediatePropagation","inputsChanged","$currentInput","requireElevatedSession","ElevatedSessionManager","passwordModal","$submitBtn","$errorPara","minSafeElevatedSessionTimeout","showPasswordModal","$passwordModal","focusPasswordInput","submitPassword","currentPassword","showPasswordError","EntryIndex","publishableSections","$newEntryBtnGroup","$newEntryBtn","section","defaultSectionHandle","selectedSection","_getSectionTriggerHref","_openCreateEntryModal","sectionId","newEntryBtnText","typeId","entryTypes","canPublish","sectionSourceKey","FieldLayoutDesigner","$newTabBtn","$libraryToggle","$selectedLibrary","$fieldLibrary","$uiLibrary","$uiLibraryElements","$fieldSearch","$clearFieldSearchBtn","$fieldGroups","tabGrid","elementDrag","$workspace","$fieldSearchContainer","initTab","elementPlacementInputName","ElementDrag","customizableTabs","tabDrag","TabDrag","customizableUi","$libraryPicker","Listbox","$selectedOption","$matches","$group","$editBtn","data-action","onTabOptionSelect","initElement","Element","renameTab","removeTab","$prev","$next","$labelSpan","promptForTabName","getElementPlacementInputName","removeFieldByHandle","removeField","refreshCols","addTab","tabName","elementConfigInputName","designer","$placementInput","$configInput","config","isField","requirable","hasCustomWidth","hasSettings","settingsHtml","isRequired","createSettingsHud","initUi","updatePlacementInput","updateConfigInput","SlidePicker","step","valueLabel","pct","applyHudSettings","serializeArray","updateRequiredClass","required","BaseDrag","Drag","$insertion","showingInsertion","$caboose","findItems","createInsertion","createCaboose","removeCaboose","swapDraggeeWithInsertion","swapInsertionWithDraggee","setMidpoints","getClosestItem","_closestItem","_closestItemMouseDiff","_$item","_midpoint","_mouseDiff","getDist","checkForNewClosestItem","draggeeDisplay","visibility","FX_DURATION","helpers","_showDraggee","onDrag","draggingLibraryElement","draggingField","isDraggeeMandatory","isHoveringOverTab","hitTest","$fieldContainers","$libraryElement","targetPrefix","targetSelector","reverseTargetSelector","_$target","_$reverseTarget","getType","normalizeTargetSelector","findTargets","onToggleChange","nodeName","getToggleVal","postVal","hideTarget","showTarget","_show","_currentHeight","$t","_targetHeight","totalCols","colGutterDrop","colPctWidth","possibleItemColspans","possibleItemPositionsByColspan","itemPositions","itemColspansByPosition","layouts","layout","itemHeights","leftPadding","_refreshingCols","_refreshColsAfterRefresh","_forceRefreshColsAfterRefresh","handleContainerHeightProxy","setItems","oldHeight","scrollHeight","gutter","itemIndex","tallestItemHeight","colIndex","itemHeight","remainder","itemHeightsByColspan","positionRight","positionLeft","minColspan","maxColspan","colspan","getItemWidthCss","minPosition","maxPosition","colHeights","createLayouts","layoutTotalCols","highestTotalCols","layoutHeights","shortestHeight","shortestLayouts","emptySpaces","emptySpace","colspans","getItemLeftPosCss","positions","isSimpleLayout","margin-bottom","positionItems","completeRefreshCols","onRefreshCols","getItemWidth","getItemWidthInPx","getItemLeftPosInPx","prevPositions","prevColspans","prevColHeights","prevEmptySpace","LayoutGenerator","endingCol","affectedColHeights","onItemResize","newHeight","tallestColHeightsByPosition","colHeightsForPosition","tallestColHeight","words","handleCasing","ImageUpload","initImageUpload","containerSelector","uploadAction","postParameters","fileInputSelector","uploadParamName","fileuploadfail","_onUploadError","initButtons","uploadButtonSelector","deleteButtonSelector","refreshImage","onAfterRefreshImage","$icon","previousSibling","nodeType","Node","TEXT_NODE","nodeValue","showHud","showing","closeOtherHUDs","indeterminate","dragger","dragStartMargin","outerContainer","X_AXIS","_onDrag","_onDragStop","muteEvent","changed","_onSettle","_getOffMargin","_onMouseDown","_onMouseUp","dragging","_getMargin","mouseDistX","selectedOptionIndex","UP_KEY","selectPrev","DOWN_KEY","selectNext","selectedClass","focusClass","LivePreview","$extraFields","$dragHandle","$previewContainer","$iframeContainer","$iframe","$fieldPlaceholder","previewUrl","basePostData","fields","lastPostData","updateIframeInterval","loading","checkAgain","dragStartEditorWidth","_slideInOnIframeLoad","_forceUpdateIframeProxy","_scrollX","_scrollY","_editorWidth","_editorWidthInPx","protocol","previewParams","forceUpdateIframe","extraFields","defaultEditorWidth","moveFieldsBack","editorWidthInPx","inPx","minEditorWidthInPx","exit","$editorHeader","$closeBtn","getIframeWidth","$clone","_getClone","updateIframe","slideIn","createToken","previewAction","updateWidths","$newClone","field","contentWindow","X-Craft-Token","xhrFields","withCredentials","crossDomain","handleSuccess","handleError","write","onResponse","copyInputValues","$textInput","$showPasswordToggle","showingPassword","passwordInput","initInputFocusEvents","hidePassword","setCurrentInput","updateToggleLabel","showPassword","autocapitalize","togglePassword","onKeyDown","ALT_KEY","onKeyUp","onInputChange","$previewHeader","$targetBtn","$targetMenu","$deviceTypeContainer","$orientationBtn","$refreshBtn","$deviceMask","$devicePreviewContainer","iframeLoaded","$tempInput","activeTarget","isDeviceUpdating","deviceAnimationTimeout","currentDeviceType","deviceOrientation","deviceWidth","deviceHeight","deviceMaskDimensions","phone","tablet","iframeHeight","_updateIframeProxy","Pro","switchTarget","aria-selected","deviceType","aria-hidden","_updateRefreshBtn","_activeTarget","refresh","previewTarget","resetDevicePreview","_devicePreviewIsActive","updateDevicePreview","_useIframeResizer","previewIframeResizerOptions","resetScroll","sameHost","frameborder","wrap","iFrameResize","checkOrigin","scrolling","onInit","iframe","switchDeviceType","newDeviceType","switchOrientation","hZoom","wZoom","previewHeight","previewWidth","maskHeight","maskWidth","rotationDeg","marginTop","marginLeft","iFrameResizer","removeListeners","defaultSettings","_onHide","instance","loadAsset","destruct","empty","desiredHeight","desiredWidth","containerHeight","containerWidth","_resizeContainer","previewHtml","max-width","$innerProgressBar","$progressBarStatus","_itemCount","_processedItemCount","_displaySteps","displaySteps","setProcessedItemCount","fadeTo","incrementItemCount","percentage","$modalContainerDiv","$prompt","$promptApplyToRemainingContainer","$promptApplyToRemainingCheckbox","$promptApplyToRemainingLabel","$pomptChoices","_prompts","_promptBatchCallback","_promptBatchReturnData","_promptBatchNum","_showNextPromptInBatch","remainingInBatch","_showPrompt","_handleBatchPromptSelection","applyToRemaining","choiceData","itemsToGo","_promptCallback","$promptMessage","$promptChoices","$promptButtons","$radioButton","_selectPromptChoice","fadeOut","_cancelPrompt","totalSteps","_min","_max","Number","isInteger","prevAll","triggerEvent","aria-valuenow","aria-valuetext","$activeButton","startPositionX","graduationsMin","graduationsMax","slideMin","slideMax","$overlay","$cursor","$graduations","$graduationsUl","_handleResize","_handleTapStart","_handleTapMove","_handleTapEnd","graduationsCalculatedWidth","valueToPosition","touch","startLeft","curX","positionToValue","scaleMin","scaleMax","autoOpen","_cancelTransitionListeners","addPanel","removePanel","openPanels","panel","updateStyles","totalPanels","SlugGenerator","allowUppercaseInSlug","limitAutoSlugsToAscii","XRegExp","matchChain","slugWordSeparator","Structure","structureDrag","$parents","initToggle","StructureDrag","initNewChildMenus","viewStateKey","$addBtns","onNewChildMenuClick","showMenu","getIndent","level","baseIndent","nestedIndent","addElement","$addBtn","$parentUl","_removeUl","structure","draggeeLevel","$helperLi","$targets","draggeeHeight","$level","cancelDrag","$lis","$closestTarget","closestTargetPos","closestTargetYDiff","closestTargetOffset","closestTargetHeight","targetOffset","targetHeight","targetYMidpoint","targetYDiff","$closestTargetLi","closestTargetLevel","$nextTargetLi","nextTargetLevel","hoveringBetweenRows","draggeeX","targetItemMouseDiffX","$parentLis","$closestParentLi","closestParentLiXDiff","closestParentLevel","$parentLi","parentLiX","parentLiXDiff","parentLevel","onMouseUp","$draggeeParent","moved","$closestSiblings","newLevel","setLevel","structureId","prevId","indent","$childLis","StructureTableSorter","tableView","_basePadding","_helperMargin","_$titleHelperCell","_titleHelperCellOuterWidth","_ancestors","_updateAncestorsFrame","_draggeeLevel","_draggeeLevelDelta","draggingLastElements","_loadingDraggeeLevelDelta","_targetLevel","_targetLevelBounds","_positionChanged","singleHelper","helperSpacingY","findDraggee","$nextRow","nextRowLevel","nextRowLevelDelta","_getAjaxBaseData","delta","drag","canInsertBefore","_getLevelBounds","canInsertAfter","_getAncestors","_setTargetLevelBounds","_updateIndent","onInsertionPointChange","_updateAncestorsBeforeRepaint","levelDiff","padding","_getLevelIndent","$prevRow","prevRowLevel","$spinnerRow","_createSpinnerRowAfter","onPositionChange","_expandElement","onReturnHelpersToDraggees","newDraggeeIndexes","oldDraggeeIndexes","$postDraggeeItems","_minLevel","_maxLevel","forcePositionChange","_mouseDist","realMouseX","mousedownX","_indentationDist","LEVEL_INDENT","_targetLevelMouseDiff","_magnetImpact","MAX_GIVE","_closestLevelMagnetIndent","targetLevel","_level","_$prevRow","cancelAnimationFrame","_updateAncestors","_$ancestor","_newAncestors","HELPER_MARGIN","$selectedSortHeader","structureTableSort","_totalVisiblePostStructureTableDraggee","_morePendingPostStructureTableDraggee","initTableHeaders","_collapseElement","selectedSortAttr","$tableHeaders","selectedSortDir","_handleSelectedSortHeaderClick","_handleUnselectedSortHeaderClick","_isStructureTableDraggingLastElements","positionedAfter","includeTableAttributesForSource","_updateTableAttributes","$nextNextRow","descendantOf","$nextRows","newSortDir","_handleSortHeaderClick","TagSelectInput","searchMenu","$addTagInput","_ignoreBlur","searchForTags","selectTag","$hoverOption","$nextOption","focusOption","$prevOption","killSearchMenu","excludeIds","tagGroupId","tags","exclude","exactMatch","Menu","attachToElement","data-site-id","targetSiteId","data-label","data-editable","$titleContainer","autocomplete","inputmode","maxlength","autofocus","getAutofocusValue","getDisabledValue","readonly","showCharsLeft","createCopyTextInput","buttonId","execCommand","createCopyTextField","createCopyTextPrompt","createTextarea","createTextareaField","$select","data-target-prefix","optgroup","$optgroup","selected","data-target","data-reverse-target","reverseToggle","for","createCheckboxField","createCheckboxSelect","allValue","allChecked","showAllOption","allLabel","createCheckboxSelectField","fieldset","data-value","data-indeterminate-value","aria-labelledby","labelId","containerId","$colorPreviewContainer","createColorField","getMonth","formattedValue","timezone","defaultDate","createDateField","createDateRangePicker","today","getFullYear","getDate","startDate","endDate","$allOption","firstDayOffset","getDay","firstDay","$flex","$startDate","$endDate","$dateInputs","dpDiv","setPositionRelativeToAnchor","startTime","endTime","foundOption","btnClasses","timepicker","timepickerOptions","getHours","getMinutes","getSeconds","createTimeField","warning","addErrorsToField","addErrorsToList","$errors","clearErrorsFromField","_rejectedFiles","_extensionList","_totalFileCounter","_validFileCounter","autoUpload","fileupload","onFileAdd","paramObject","getInProgress","_createExtensionList","process","done","pass","fileExtension","maxFileSize","originalFiles","processErrorMessages","kinds","humanFileSize","maxUploadSize","bytes","u","toFixed","allowedKind","fileKinds","extensions","pasteZone","sequentialUploads","Accept","UriFormatGenerator","uriFormat","suffix"],"mappings":"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","file":"Craft.min.js","sourcesContent":["(function($){\n\n/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function(html) {\n    return html.replace(rxhtmlTag, \"<$1></$2>\");\n};\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Groups an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        group: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.group() must be an array.';\n            }\n\n            let index = {};\n\n            return arr.reduce((grouped, obj, i) => {\n                const thisKey = typeof key === 'string' ? obj[key] : key(obj, i);\n                if (!index.hasOwnProperty(thisKey)) {\n                    index[thisKey] = [[], thisKey];\n                    grouped.push(index[thisKey]);\n                }\n                index[thisKey][0].push(obj);\n                return grouped;\n            }, []);\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    return (() => {\n                        let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                        if (format !== null && format !== 'integer') {\n                            throw `Message format 'number' is only supported for integer values.`;\n                        }\n                        let number = Craft.formatNumber(arg);\n                        let pos;\n                        if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                            number += `.${arg.substr(pos + 1)}`;\n                        }\n                        return number;\n                    })();\n                case 'none':\n                    return arg;\n                case 'select':\n                    return (() => {\n                        /* http://icu-project.org/apiref/icu4c/classicu_1_1SelectFormat.html\n                        selectStyle = (selector '{' message '}')+\n                        */\n                        if (typeof token[2] === 'undefined') {\n                            return false;\n                        }\n                        let select = this._tokenizePattern(token[2]);\n                        let c = select.length;\n                        let message = false;\n                        for (let i = 0; i + 1 < c; i++) {\n                            if (Garnish.isArray(select[i]) || !Garnish.isArray(select[i + 1])) {\n                                return false;\n                            }\n                            let selector = Craft.trim(select[i++]);\n                            if (message === false && selector === 'other' || selector == arg) {\n                                message = select[i].join(',');\n                            }\n                        }\n                        if (message === false) {\n                            return false;\n                        }\n                        return this.formatMessage(message, args);\n                    })();\n                case 'plural':\n                    return (() => {\n                        /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                        pluralStyle = [offsetValue] (selector '{' message '}')+\n                        offsetValue = \"offset:\" number\n                        selector = explicitValue | keyword\n                        explicitValue = '=' number  // adjacent, no white space in between\n                        keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                        message: see MessageFormat\n                        */\n                        if (typeof token[2] === 'undefined') {\n                            return false;\n                        }\n                        let plural = this._tokenizePattern(token[2]);\n                        const c = plural.length;\n                        let message = false;\n                        let offset = 0;\n                        for (let i = 0; i + 1 < c; i++) {\n                            if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                                return false;\n                            }\n                            let selector = Craft.trim(plural[i++]);\n                            let selectorChars = [...selector];\n\n                            if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                                let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                                if (pos === -1) {\n                                    throw 'Message pattern is invalid.';\n                                }\n                                offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                                selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                            }\n                            if (\n                              message === false &&\n                              selector === 'other' ||\n                              selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                              selector === 'one' && arg - offset === 1\n                            ) {\n                                message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                    return p.replace('#', arg - offset);\n                                }).join(',');\n                            }\n                        }\n                        if (message === false) {\n                            return false;\n                        }\n                        return this.formatMessage(message, args);\n                    })();\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} shift\n         * @param {boolean} alt\n         */\n        shortcutText: function (key, shift, alt) {\n            if (Craft.clientOs === 'Mac') {\n                return (alt ? '⌥' : '') + (shift ? '⇧' : '') + '⌘' + key;\n            }\n            return 'Ctrl+' + (alt ? 'Alt+' : '') + (shift ? 'Shift+' : '') + key;\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[^\\w]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n\n                // Get the latest headers\n                this._getApiHeaders(cancelToken).then(apiHeaders => {\n                    // Send the API request\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    // Force the API to process the Craft headers if this is the first API request\n                    if (!this._apiHeaders) {\n                        options.params.processCraftHeaders = 1;\n                    }\n\n                    if (Craft.httpProxy) {\n                        options.proxy = Craft.httpProxy;\n                    }\n\n                    axios.request(options).then((apiResponse) => {\n                        // Process the response headers\n                        this._processApiHeaders(apiResponse.headers, cancelToken).then(() => {\n                            // Finally return the API response data\n                            resolve(apiResponse.data);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        _getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    resolve(response.data);\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _processApiHeaders: function(headers, cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Have we already processed them?\n                if (this._apiHeaders) {\n                    resolve();\n                    return;\n                }\n\n                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                    data: {\n                        headers: headers,\n                    },\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    this._loadingApiHeaders = false;\n\n                    resolve();\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                    }\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _rejectApiRequests: function(reject, e) {\n            this._loadingApiHeaders = false;\n            reject(e);\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1](e);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = () => {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                };\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         * @param {function} [callback] Callback function that should be called whenever a new group of modified params has been found\n         * @param {object} [initialDeltaValues] Initial delta values. If undefined, `Craft.initialDeltaValues` will be used.\n         * @return {string}\n         */\n        findDeltaData: function(oldData, newData, deltaNames, callback, initialDeltaValues) {\n            // Make sure oldData and newData are always strings. This is important because further below String.split is called.\n            oldData = typeof oldData === 'string' ? oldData : '';\n            newData = typeof newData === 'string' ? newData : '';\n\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            if (typeof initialDeltaValues === 'undefined') {\n                initialDeltaValues = Craft.initialDeltaValues;\n            }\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, initialDeltaValues);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                    if (callback) {\n                        callback(deltaNames[n], groupedNewParams[deltaNames[n]]);\n                    }\n                }\n            }\n\n            return params.join('&');\n        },\n\n        /**\n         * @param {object} params\n         * @param {object} deltaNames\n         * @param {boolean} withRoot\n         * @param {boolean|object} initialValues\n         * @returns {{}}\n         * @private\n         */\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, initialValues) {\n            const grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            const encodeURIComponentExceptEqualChar = o => encodeURIComponent(o).replace('%3D', '=');\n\n            params = params.map(p => decodeURIComponent(p));\n\n            paramLoop: for (let p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (let n = deltaNames.length - 1; n >= 0; n--) {\n                    const paramName = params[p].substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(encodeURIComponentExceptEqualChar(params[p]));\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(encodeURIComponentExceptEqualChar(params[p]));\n                }\n            }\n\n            if (initialValues) {\n                for (let name in initialValues) {\n                    if (initialValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(initialValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return arr.includes(elem);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn:not([data-disclosure-trigger])', $container).menubtn();\n            $('[data-disclosure-trigger]', $container).disclosureMenu();\n            $('.datetimewrapper', $container).datetime();\n            $('.datewrapper > input[type=\"date\"], .timewrapper > input[type=\"time\"]', $container).datetimeinput();\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a', $container).each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n\n        /**\n         * Traps focus within a container, so when focus is tabbed out of it, it’s cycled back into it.\n         * @param {Object} container\n         */\n        trapFocusWithin: function(container) {\n            const $container = $(container);\n            $container.on('keydown.focus-trap', ev => {\n                // Tab key?\n                if (ev.keyCode === 9) {\n                    const $focusableElements = $container.find(':focusable');\n                    const index = $focusableElements.index(document.activeElement);\n                    if (index !== -1) {\n                        if (index === 0 && ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.last().focus();\n                        } else if (index === $focusableElements.length - 1 && !ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.first().focus();\n                        }\n                    }\n                }\n            });\n        },\n\n        /**\n         * Sets focus to the first focusable element within a container.\n         * @param {Object} container\n         */\n        setFocusWithin: function(container) {\n            $(container).find(':focusable:first').focus();\n        },\n    });\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: $.extend({\n                        customTrigger: $btn,\n                    }, $btn.data('event-data')),\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        disclosureMenu: function() {\n            return this.each(function() {\n                var $trigger = $(this);\n                var $disclosureId = $trigger.attr('aria-controls');\n\n                // Only instantiate element if there is a reference to disclosure content\n                if ($disclosureId) {\n                    var settings = {};\n\n                    new Garnish.DisclosureMenu($trigger, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                                'aria-label': Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('').trigger('input').trigger('change');\n                                    }\n                                    $btn.remove();\n                                    $inputs.first().filter('[type=\"text\"]').focus();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n\n        datetimeinput: function() {\n            return this.each(function() {\n                const $input = $(this);\n                const checkValue = () => {\n                    if ($input.val() === '') {\n                        $input.addClass('empty-value');\n                    } else {\n                        $input.removeClass('empty-value');\n                    }\n                };\n                $input.on('input', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n// Override Garnish.NiceText.charsLeftHtml() to be more accessible\nGarnish.NiceText.charsLeftHtml = charsLeft => {\n    return Craft.t('app', '<span class=\"visually-hidden\">Characters left:</span> {chars, number}', {\n        chars: charsLeft,\n    });\n};\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend({\n    $element: null,\n    elementId: null,\n    siteId: null,\n    deltaNames: null,\n    initialData: null,\n\n    $header: null,\n    $toolbar: null,\n    $tabContainer: null,\n    $editLink: null,\n    $sidebarBtn: null,\n    $loadSpinner: null,\n\n    $body: null,\n    $fieldsContainer: null,\n\n    $sidebar: null,\n\n    $footer: null,\n    $siteSelectContainer: null,\n    $siteSelect: null,\n    $siteSpinner: null,\n    $cancelBtn: null,\n    $saveBtn: null,\n    $saveSpinner: null,\n\n    slideout: null,\n    tabManager: null,\n    showingSidebar: false,\n\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    initialDeltaValues: null,\n\n    init: function(element, settings) {\n        // Param mapping\n        if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n            // (settings)\n            settings = element;\n            element = null;\n        }\n\n        this.$element = $(element);\n        this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n        // Header\n        this.$header = $('<header/>', {class: 'pane-header'});\n        this.$toolbar = $('<div/>', {class: 'ee-toolbar'}).appendTo(this.$header);\n        this.$tabContainer = $('<div/>', {class: 'pane-tabs'}).appendTo(this.$toolbar);\n        this.$loadSpinner = $('<div/>', {\n            class: 'spinner',\n            title: Craft.t('app', 'Loading'),\n            'aria-label': Craft.t('app', 'Loading'),\n        }).appendTo(this.$toolbar);\n        this.$editLink = $('<a/>', {\n            target: '_blank',\n            class: 'btn hidden',\n            title: Craft.t('app', 'Open the full edit page in a new tab'),\n            'aria-label': Craft.t('app', 'Open the full edit page in a new tab'),\n            'data-icon': 'external',\n        }).appendTo(this.$toolbar);\n        this.$sidebarBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn hidden sidebar-btn',\n            title: Craft.t('app', 'Show sidebar'),\n            'aria-label': Craft.t('app', 'Show sidebar'),\n            'data-icon': `sidebar-${Garnish.ltr ? 'right' : 'left'}`,\n        }).appendTo(this.$toolbar);\n\n        this.addListener(this.$sidebarBtn, 'click', ev => {\n            ev.preventDefault();\n            if (!this.showingSidebar) {\n                this.showSidebar();\n            } else {\n                this.hideSidebar();\n            }\n        });\n\n        // Body\n        this.$body = $('<div/>', {class: 'ee-body'});\n\n        // Fields\n        this.$fieldsContainer = $('<div/>', {class: 'fields'}).appendTo(this.$body);\n\n        // Sidebar\n        this.$sidebar = $('<div/>', {class: 'ee-sidebar hidden'}).appendTo(this.$body);\n        Craft.trapFocusWithin(this.$sidebar);\n\n        // Footer\n        this.$footer = $('<div/>', {class: 'ee-footer hidden'});\n        const $siteSelectOuterContainer = $('<div/>', {class: 'ee-site-select'}).appendTo(this.$footer);\n        this.$siteSelectContainer = $('<div/>', {class: 'select hidden'}).appendTo($siteSelectOuterContainer);\n        this.$siteSelect = $('<select/>').appendTo(this.$siteSelectContainer);\n        this.$siteSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo($siteSelectOuterContainer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footer);\n        this.$saveBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footer);\n        this.$saveSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo(this.$footer);\n\n        let $contents = this.$header.add(this.$body).add(this.$footer);\n\n        // Create the slideout\n        this.slideout = new Craft.Slideout($contents, {\n            containerElement: 'form',\n            containerAttributes: {\n                action: '',\n                method: 'post',\n                novalidate: '',\n                class: 'element-editor',\n            },\n            closeOnEsc: false,\n            closeOnShadeClick: false,\n        });\n        this.slideout.$container.data('elementEditor', this);\n        this.slideout.on('beforeClose', () => {\n            this.hideSidebar();\n        });\n        this.slideout.on('close', () => {\n            this.trigger('closeSlideout');\n            this.destroy();\n        });\n\n        // Register shortcuts & events\n        Garnish.shortcutManager.registerShortcut({\n            keyCode: Garnish.S_KEY,\n            ctrl: true,\n        }, () => {\n            this.saveElement();\n        });\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.$cancelBtn, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$shade, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$container, 'click', ev => {\n            const $target = $(event.target);\n\n            if (\n                this.showingSidebar &&\n                !$target.closest(this.$sidebarBtn).length &&\n                !$target.closest(this.$sidebar).length\n            ) {\n                this.hideSidebar();\n            }\n        });\n        this.addListener(this.slideout.$container, 'submit', ev => {\n            ev.preventDefault();\n            this.saveElement();\n        });\n        this.addListener(this.$siteSelect, 'change', 'switchSite');\n\n        this.load().then(() => {\n            this.onShowHud();\n            this.onCreateForm(this.$body);\n        });\n    },\n\n    setElementAttribute: function(name, value) {\n        if (!this.settings.attributes) {\n            this.settings.attributes = {};\n        }\n\n        if (value === null) {\n            delete this.settings.attributes[name];\n        } else {\n            this.settings.attributes[name] = value;\n        }\n    },\n\n    getBaseData: function() {\n        const data = $.extend({}, this.settings.params);\n\n        if (this.settings.siteId) {\n            data.siteId = this.settings.siteId;\n        } else if (this.$element && this.$element.data('site-id')) {\n            data.siteId = this.$element.data('site-id');\n        }\n\n        if (this.settings.elementId) {\n            data.elementId = this.settings.elementId;\n        } else if (this.$element && this.$element.data('id')) {\n            data.elementId = this.$element.data('id');\n        }\n\n        if (this.settings.elementType) {\n            data.elementType = this.settings.elementType;\n        }\n\n        if (this.settings.attributes) {\n            data.attributes = this.settings.attributes;\n        }\n\n        if (this.settings.prevalidate) {\n            data.prevalidate = 1;\n        }\n\n        return data;\n    },\n\n    load: function(data) {\n        return new Promise((resolve, reject) => {\n            this.trigger('beforeLoad');\n            // todo: remove this in Craft 4\n            this.trigger('beginLoading');\n            this.showLoadSpinner();\n            this.onBeginLoading();\n\n            if (this.cancelToken) {\n                this.ignoreFailedRequest = true;\n                this.cancelToken.cancel();\n            }\n\n            this.cancelToken = axios.CancelToken.source();\n\n            Craft.sendActionRequest('POST', 'elements/get-editor-html', {\n                cancelToken: this.cancelToken.token,\n                data: $.extend(this.getBaseData(), data || {}, {\n                    includeSites: Craft.isMultiSite && this.settings.showSiteSwitcher,\n                }),\n            }).then(response => {\n                this.hideLoadSpinner();\n                this.trigger('load');\n                // todo: remove this in Craft 4\n                this.trigger('endLoading');\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (this.initialDeltaValues === null) {\n                    this.initialDeltaValues = response.data.initialDeltaValues;\n                }\n                this.updateForm(response.data, true);\n                this.cancelToken = null;\n                resolve();\n            }).catch(e => {\n                this.hideLoadSpinner();\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (!this.ignoreFailedRequest) {\n                    Craft.cp.displayError();\n                    reject(e);\n                }\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    showHeader: function() {\n        this.$header.removeClass('hidden');\n    },\n\n    hideHeader: function() {\n        this.$header.addClass('hidden');\n    },\n\n    showLoadSpinner: function() {\n        this.showHeader();\n        this.$loadSpinner.removeClass('hidden');\n    },\n\n    hideLoadSpinner: function() {\n        this.$loadSpinner.addClass('hidden');\n    },\n\n    switchSite: function() {\n        if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n            this.$siteSelect.val(this.siteId);\n            return;\n        }\n\n        const newSiteId = this.$siteSelect.val();\n\n        if (newSiteId == this.siteId) {\n            return;\n        }\n\n        this.$siteSpinner.removeClass('hidden');\n\n        this.load({siteId: newSiteId}).then(() => {\n            this.$siteSpinner.addClass('hidden');\n        }).catch(() => {\n            this.$siteSpinner.addClass('hidden');\n            // Reset the site select\n            this.$siteSelect.val(this.siteId);\n        });\n    },\n\n    updateForm: function(data, refreshInitialData) {\n        // Cleanup\n        if (this.tabManager) {\n            this.$tabContainer.html('');\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        this.siteId = data.siteId;\n        this.$fieldsContainer.html(data.fieldHtml);\n\n        let showHeader = false;\n\n        if (data.sites && data.sites.length > 1) {\n            showHeader = true;\n            this.$siteSelectContainer.removeClass('hidden');\n            this.$siteSelect.html('');\n\n            for (let i = 0; i < data.sites.length; i++) {\n                const siteInfo = data.sites[i];\n                const $option = $('<option/>', {\n                    value: siteInfo.id,\n                    text: siteInfo.name\n                }).appendTo(this.$siteSelect);\n                if (siteInfo.id == data.siteId) {\n                    $option.attr('selected', 'selected');\n                }\n            }\n        } else {\n            this.$siteSelectContainer.addClass('hidden');\n        }\n\n        if (data.tabHtml) {\n            showHeader = true;\n            this.$tabContainer.replaceWith(this.$tabContainer = $(data.tabHtml));\n            this.tabManager = new Craft.Tabs(this.$tabContainer);\n            this.tabManager.on('deselectTab', ev => {\n                $(ev.$tab.attr('href')).addClass('hidden');\n            });\n            this.tabManager.on('selectTab', ev => {\n                $(ev.$tab.attr('href')).removeClass('hidden');\n                Garnish.$win.trigger('resize');\n                this.$body.trigger('scroll');\n            });\n        }\n\n        if (data.editUrl) {\n            showHeader = true;\n            this.$editLink\n                .removeClass('hidden')\n                .attr('href', data.editUrl);\n        } else if (this.$editLink) {\n            this.$editLink.addClass('hidden');\n        }\n\n        if (data.sidebarHtml) {\n            showHeader = true;\n            this.$sidebarBtn.removeClass('hidden');\n            this.$sidebar.html(data.sidebarHtml);\n            Craft.initUiElements(this.$sidebar);\n            new Craft.ElementThumbLoader().load($(this.$sidebar));\n\n            // Open outbound links in new windows\n            this.$sidebar.find('a').each(function() {\n                if (this.hostname.length && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('target', '_blank')\n                }\n            });\n        } else if (this.$sidebarBtn) {\n            this.$sidebarBtn.addClass('hidden');\n            this.$sidebar.addClass('hidden');\n        }\n\n        if (showHeader) {\n            this.showHeader();\n        } else {\n            this.hideHeader();\n        }\n\n        this.$footer.removeClass('hidden');\n\n        if (refreshInitialData !== false) {\n            this.deltaNames = data.deltaNames;\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            Craft.appendHeadHtml(data.headHtml);\n            Craft.appendFootHtml(data.footHtml);\n            Craft.initUiElements(this.$fieldsContainer);\n\n            if (refreshInitialData) {\n                this.initialData = this.slideout.$container.serialize();\n            }\n\n            if (!Garnish.isMobileBrowser()) {\n                Craft.setFocusWithin(this.$fieldsContainer);\n            }\n\n            this.trigger('updateForm');\n        });\n    },\n\n    showSidebar: function() {\n        if (this.showingSidebar) {\n            return;\n        }\n\n        this.$body.scrollTop(0).addClass('no-scroll');\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .removeClass('hidden');\n\n        // Hack to force CSS animations\n        this.$sidebar[0].offsetWidth;\n\n        this.$sidebar.css(this._openedSidebarStyles());\n\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebar.one('transitionend.element-editor', () => {\n                Craft.setFocusWithin(this.$sidebar);\n            });\n        }\n\n        this.$sidebarBtn\n            .addClass('active')\n            .attr({\n                title: Craft.t('app', 'Hide sidebar'),\n                'aria-label': Craft.t('app', 'Hide sidebar'),\n            });\n\n        Garnish.$win.trigger('resize');\n        this.$sidebar.trigger('scroll');\n\n        Garnish.shortcutManager.addLayer();\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.hideSidebar();\n        });\n\n        this.showingSidebar = true;\n    },\n\n    hideSidebar: function() {\n        if (!this.showingSidebar) {\n            return;\n        }\n\n        this.$body.removeClass('no-scroll');\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .one('transitionend.element-editor', () => {\n                this.$sidebar.addClass('hidden');\n            });\n\n        this.$sidebarBtn\n            .removeClass('active')\n            .attr({\n                title: Craft.t('app', 'Show sidebar'),\n                'aria-label': Craft.t('app', 'Show sidebar'),\n            });\n\n        Garnish.shortcutManager.removeLayer();\n\n        this.showingSidebar = false;\n    },\n\n    _openedSidebarStyles: function() {\n        return {\n            [Garnish.ltr ? 'right' : 'left']: '0',\n        };\n    },\n\n    _closedSidebarStyles: function() {\n        return {\n            [Garnish.ltr ? 'right' : 'left']: '-350px',\n        };\n    },\n\n    saveElement: function() {\n        const validators = this.settings.validators;\n\n        if ($.isArray(validators)) {\n            for (let i = 0; i < validators.length; i++) {\n                if ($.isFunction(validators[i]) && !validators[i].call()) {\n                    return false;\n                }\n            }\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n\n        let data = $.param(this.getBaseData()) + '&' + this.slideout.$container.serialize();\n        data = Craft.findDeltaData(this.initialData, data, this.deltaNames, null, this.initialDeltaValues);\n\n        Craft.postActionRequest('elements/save-element', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (this.$element && this.siteId == this.$element.data('site-id')) {\n                        // Update the label\n                        const $title = this.$element.find('.title');\n                        const $a = $title.find('a');\n\n                        if ($a.length && response.cpEditUrl) {\n                            $a.attr('href', response.cpEditUrl);\n                            $a.text(response.newTitle);\n                        } else {\n                            $title.text(response.newTitle);\n                        }\n                    }\n\n                    if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                        Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                            type: Craft.elementTypeNames[this.settings.elementType][0],\n                        }));\n                    }\n\n                    this.closeSlideout();\n                    this.trigger('saveElement', {\n                        response: response\n                    });\n                    this.onSaveElement(response);\n                    this.settings.onSaveElement(response);\n\n                    // There may be a new background job that needs to be run\n                    Craft.cp.runQueue();\n                } else {\n                    this.updateForm(response, false);\n                    Garnish.shake(this.slideout.$container);\n                }\n            }\n        });\n    },\n\n    isDirty: function() {\n        return this.initialData !== null && this.slideout.$container.serialize() !== this.initialData;\n    },\n\n    maybeCloseSlideout: function() {\n        if (!this.slideout.isOpen) {\n            return;\n        }\n\n        if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n            this.closeSlideout();\n        }\n    },\n\n    closeSlideout: function() {\n        this.slideout.close();\n        this.onHideHud();\n\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n    },\n\n    destroy: function() {\n        this.slideout.destroy();\n        delete this.slideout;\n        this.base();\n    },\n\n    // Deprecated Methods\n    // -------------------------------------------------------------------------\n\n    /** @deprecated in 3.7.0 */\n    loadHud: function() {\n        this.load();\n    },\n    /** @deprecated in 3.7.0 */\n    maybeCloseHud: function() {\n        this.maybeCloseSlideout();\n    },\n    /** @deprecated in 3.7.0 */\n    closeHud: function() {\n        this.closeSlideout();\n    },\n    /** @deprecated */\n    reloadForm: function(data, callback) {\n        this.load(data).then(() => {\n            callback('success');\n        }).catch(() => {\n            callback('error');\n        });\n    },\n    /** @deprecated in 3.7.0 */\n    onBeginLoading: function() {\n        this.settings.onBeginLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onEndLoading: function() {\n        this.settings.onEndLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onSaveElement: function(response) {\n    },\n    /** @deprecated in 3.7.0 */\n    onCreateForm: function($form) {\n        this.settings.onCreateForm($form);\n    },\n    /** @deprecated in 3.7.0 */\n    onShowHud: function() {\n        this.trigger('showHud');\n        this.settings.onShowHud();\n    },\n    /** @deprecated in 3.7.0 */\n    onHideHud: function() {\n        this.trigger('hideHud');\n        this.settings.onHideHud();\n    },\n}, {\n    defaults: {\n        showSiteSwitcher: true,\n        elementId: null,\n        elementType: null,\n        siteId: null,\n        attributes: null,\n        params: null,\n        prevalidate: false,\n        elementIndex: null,\n        onSaveElement: $.noop,\n        validators: [],\n\n        /** @deprecated in 3.7.0 */\n        onShowHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onHideHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onBeginLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onEndLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onCreateForm: $.noop,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend({\n    initialized: false,\n    elementType: null,\n\n    instanceState: null,\n    sourceStates: null,\n    sourceStatesStorageKey: null,\n\n    searchTimeout: null,\n    sourceSelect: null,\n\n    $container: null,\n    $main: null,\n    isIndexBusy: false,\n\n    $sidebar: null,\n    showingSidebar: null,\n    sourceKey: null,\n    sourceViewModes: null,\n    $source: null,\n    sourcesByKey: null,\n    $visibleSources: null,\n\n    $customizeSourcesBtn: null,\n    customizeSourcesModal: null,\n\n    $toolbar: null,\n    toolbarOffset: null,\n\n    $search: null,\n    searching: false,\n    searchText: null,\n    trashed: false,\n    drafts: false,\n    $clearSearchBtn: null,\n\n    $statusMenuBtn: null,\n    $statusMenuContainer: null,\n    statusMenu: null,\n    status: null,\n\n    $siteMenuBtn: null,\n    siteMenu: null,\n    siteId: null,\n\n    $sortMenuBtn: null,\n    sortMenu: null,\n    $sortAttributesList: null,\n    $sortDirectionsList: null,\n    $scoreSortAttribute: null,\n    $structureSortAttribute: null,\n\n    $elements: null,\n    $viewModeBtnContainer: null,\n    viewModeBtns: null,\n    viewMode: null,\n    view: null,\n    _autoSelectElements: null,\n    $countSpinner: null,\n    $countContainer: null,\n    page: 1,\n    resultSet: null,\n    totalResults: null,\n    $exportBtn: null,\n\n    actions: null,\n    actionsHeadHtml: null,\n    actionsFootHtml: null,\n    $selectAllContainer: null,\n    $selectAllCheckbox: null,\n    showingActionTriggers: false,\n    exporters: null,\n    exportersByType: null,\n    _$detachedToolbarItems: null,\n    _$triggers: null,\n\n    _ignoreFailedRequest: false,\n    _cancelToken: null,\n\n    /**\n     * Constructor\n     */\n    init: function(elementType, $container, settings) {\n        this.elementType = elementType;\n        this.$container = $container;\n        this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n        // Set the state objects\n        // ---------------------------------------------------------------------\n\n        this.instanceState = this.getDefaultInstanceState();\n\n        this.sourceStates = {};\n\n        // Instance states (selected source) are stored by a custom storage key defined in the settings\n        if (this.settings.storageKey) {\n            $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n        }\n\n        // Source states (view mode, etc.) are stored by the element type and context\n        this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n        $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n        // Find the DOM elements\n        // ---------------------------------------------------------------------\n\n        this.$main = this.$container.find('.main');\n        this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n        this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n        this.$statusMenuContainer = this.$statusMenuBtn.parent();\n        this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n        this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n        this.$search = this.$toolbar.find('.search:first input:first');\n        this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n        this.$sidebar = this.$container.find('.sidebar:first');\n        this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n        this.$elements = this.$container.find('.elements:first');\n        this.$countSpinner = this.$container.find('#count-spinner');\n        this.$countContainer = this.$container.find('#count-container');\n        this.$exportBtn = this.$container.find('#export-btn');\n\n        // Hide sidebar if needed\n        if (this.settings.hideSidebar) {\n            this.$sidebar.hide();\n            $('.body, .content', this.$container).removeClass('has-sidebar');\n        }\n\n        // Initialize the sources\n        // ---------------------------------------------------------------------\n\n        if (!this.initSources()) {\n            return;\n        }\n\n        // Customize button\n        if (this.$customizeSourcesBtn.length) {\n            this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n        }\n\n        // Initialize the status menu\n        // ---------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n            this.statusMenu.on('optionselect', this._handleStatusChange.bind(this));\n        }\n\n        // Initialize the site menu\n        // ---------------------------------------------------------------------\n\n        // Is there a site menu?\n        if (this.$siteMenuBtn.length) {\n            this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n            // Figure out the initial site\n            var $option = this.siteMenu.$options.filter('.sel:first');\n\n            if (!$option.length) {\n                $option = this.siteMenu.$options.first();\n            }\n\n            if ($option.length) {\n                this._setSite($option.data('site-id'));\n            } else {\n                // No site options -- they must not have any site permissions\n                this.settings.criteria = {id: '0'};\n            }\n\n            this.siteMenu.on('optionselect', this._handleSiteChange.bind(this));\n\n            if (this.siteId) {\n                // Should we be using a different default site?\n                var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                if (defaultSiteId && defaultSiteId != this.siteId) {\n                    // Is that one available here?\n                    var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                    if ($storedSiteOption.length) {\n                        // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                        $storedSiteOption.trigger('click');\n                    }\n                }\n            }\n        } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n            this._setSite(this.settings.criteria.siteId);\n        } else {\n            this._setSite(Craft.siteId);\n        }\n\n        // Don't let the criteria override the selected site\n        if (this.settings.criteria && this.settings.criteria.siteId) {\n            delete this.settings.criteria.siteId;\n        }\n\n        // Initialize the search input\n        // ---------------------------------------------------------------------\n\n        // Automatically update the elements after new search text has been sitting for a 1/2 second\n        this.addListener(this.$search, 'input', () => {\n            if (!this.searching && this.$search.val()) {\n                this.startSearching();\n            } else if (this.searching && !this.$search.val()) {\n                this.stopSearching();\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.updateElementsIfSearchTextChanged.bind(this), 500);\n        });\n\n        // Update the elements when the Return key is pressed\n        this.addListener(this.$search, 'keypress', ev => {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.updateElementsIfSearchTextChanged();\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearSearchBtn, 'click', () => {\n            this.$search.val('');\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            this.stopSearching();\n\n            this.updateElementsIfSearchTextChanged();\n        });\n\n        // Auto-focus the Search box\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$search.trigger('focus');\n        }\n\n        // Initialize the sort menu\n        // ---------------------------------------------------------------------\n\n        // Is there a sort menu?\n        if (this.$sortMenuBtn.length) {\n            this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n            this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n            this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n            this.sortMenu.on('optionselect', this._handleSortChange.bind(this));\n        }\n\n        // Initialize the Export button\n        // ---------------------------------------------------------------------\n\n        this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n        // Let everyone know that the UI is initialized\n        // ---------------------------------------------------------------------\n\n        this.initialized = true;\n        this.afterInit();\n\n        // Select the initial source\n        // ---------------------------------------------------------------------\n\n        this.selectDefaultSource();\n\n        // Load the first batch of elements!\n        // ---------------------------------------------------------------------\n\n        // Default to whatever page is in the URL\n        this.setPage(Craft.pageNum);\n\n        this.updateElements(true);\n    },\n\n    afterInit: function() {\n        this.onAfterInit();\n    },\n\n    _createCancelToken: function() {\n        this._cancelToken = axios.CancelToken.source();\n        return this._cancelToken.token;\n    },\n\n    _cancelRequests: function() {\n        if (this._cancelToken) {\n            this._ignoreFailedRequest = true;\n            this._cancelToken.cancel();\n            Garnish.requestAnimationFrame(() => {\n                this._ignoreFailedRequest = false;\n            });\n        }\n    },\n\n    getSourceContainer: function() {\n        return this.$sidebar.find('nav > ul');\n    },\n\n    get $sources() {\n        if (!this.sourceSelect) {\n            return undefined;\n        }\n\n        return this.sourceSelect.$items;\n    },\n\n    getSite: function() {\n        if (!this.siteId) {\n            return undefined;\n        }\n        return Craft.sites.find(s => s.id == this.siteId);\n    },\n\n    initSources: function() {\n        var $sources = this._getSourcesInList(this.getSourceContainer());\n\n        // No source, no party.\n        if ($sources.length === 0) {\n            return false;\n        }\n\n        // The source selector\n        if (!this.sourceSelect) {\n            this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                multi: false,\n                allowEmpty: false,\n                vertical: true,\n                onSelectionChange: this._handleSourceSelectionChange.bind(this)\n            });\n        }\n\n        this.sourcesByKey = {};\n\n        for (let i = 0; i < $sources.length; i++) {\n            this.initSource($($sources[i]));\n        }\n\n        return true;\n    },\n\n    selectDefaultSource: function() {\n        var sourceKey = this.getDefaultSourceKey(),\n            $source;\n\n        if (sourceKey) {\n            $source = this.getSourceByKey(sourceKey);\n\n            // Make sure it's visible\n            if (this.$visibleSources.index($source) === -1) {\n                $source = null;\n            }\n        }\n\n        if (!sourceKey || !$source) {\n            // Select the first source by default\n            $source = this.$visibleSources.first();\n        }\n\n        return this.selectSource($source);\n    },\n\n    refreshSources: function() {\n        this.sourceSelect.removeAllItems();\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n            data: {\n                context: this.settings.context,\n                elementType: this.elementType,\n            }\n        }).then((response) => {\n            this.setIndexAvailable();\n            this.getSourceContainer().replaceWith(response.data.html);\n            this.initSources();\n            this.selectDefaultSource();\n        }).catch(() => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    initSource: function($source) {\n        this.sourceSelect.addItems($source);\n        this.initSourceToggle($source);\n        this.sourcesByKey[$source.data('key')] = $source;\n\n        if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n            this._expandSource($source);\n        }\n    },\n\n    initSourceToggle: function($source) {\n        // Remove handlers for the same thing. Just in case.\n        this.deinitSourceToggle($source);\n\n        var $toggle = this._getSourceToggle($source);\n\n        if ($toggle.length) {\n            this.addListener($source, 'dblclick', '_handleSourceDblClick');\n            this.addListener($toggle, 'click', '_handleSourceToggleClick');\n            $source.data('hasNestedSources', true);\n        } else {\n            $source.data('hasNestedSources', false);\n        }\n    },\n\n    deinitSource: function($source) {\n        this.sourceSelect.removeItems($source);\n        this.deinitSourceToggle($source);\n        delete this.sourcesByKey[$source.data('key')];\n    },\n\n    deinitSourceToggle: function($source) {\n        if ($source.data('hasNestedSources')) {\n            this.removeListener($source, 'dblclick');\n            this.removeListener(this._getSourceToggle($source), 'click');\n        }\n\n        $source.removeData('hasNestedSources');\n    },\n\n    getDefaultInstanceState: function() {\n        return {\n            selectedSource: null,\n            expandedSources: []\n        };\n    },\n\n    getDefaultSourceKey: function() {\n        if (this.settings.defaultSource) {\n            var paths = this.settings.defaultSource.split('/'),\n                path = '';\n\n            // Expand the tree\n            for (var i = 0; i < paths.length; i++) {\n                path += paths[i];\n                var $source = this.getSourceByKey(path);\n\n                // If the folder can't be found, then just go to the stored instance source.\n                if (!$source) {\n                    return this.instanceState.selectedSource;\n                }\n\n                this._expandSource($source);\n                path += '/';\n            }\n\n            // Just make sure that the modal is aware of the newly expanded sources, too.\n            this._setSite(this.siteId);\n\n            return this.settings.defaultSource;\n        }\n\n        return this.instanceState.selectedSource;\n    },\n\n    getDefaultExpandedSources: function() {\n        return this.instanceState.expandedSources;\n    },\n\n    startSearching: function() {\n        // Show the clear button and add/select the Score sort option\n        this.$clearSearchBtn.removeClass('hidden');\n\n        if (!this.$scoreSortAttribute) {\n            this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n            this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n        }\n\n        this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n        this.searching = true;\n\n        this._updateStructureSortOption();\n        this.setSortAttribute('score');\n    },\n\n    stopSearching: function() {\n        // Hide the clear button and Score sort option\n        this.$clearSearchBtn.addClass('hidden');\n\n        this.$scoreSortAttribute.detach();\n\n        this.searching = false;\n\n        this._updateStructureSortOption();\n    },\n\n    setInstanceState: function(key, value) {\n        if (typeof key === 'object') {\n            $.extend(this.instanceState, key);\n        } else {\n            this.instanceState[key] = value;\n        }\n\n        this.storeInstanceState();\n    },\n\n    storeInstanceState: function() {\n        if (this.settings.storageKey) {\n            Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n        }\n    },\n\n    getSourceState: function(source, key, defaultValue) {\n        if (typeof this.sourceStates[source] === 'undefined') {\n            // Set it now so any modifications to it by whoever's calling this will be stored.\n            this.sourceStates[source] = {};\n        }\n\n        if (typeof key === 'undefined') {\n            return this.sourceStates[source];\n        } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n            return this.sourceStates[source][key];\n        } else {\n            return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n        }\n    },\n\n    getSelectedSourceState: function(key, defaultValue) {\n        return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n    },\n\n    setSelecetedSourceState: function(key, value) {\n        var viewState = this.getSelectedSourceState();\n\n        if (typeof key === 'object') {\n            $.extend(viewState, key);\n        } else {\n            viewState[key] = value;\n        }\n\n        this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n        // Store it in localStorage too\n        Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n    },\n\n    storeSortAttributeAndDirection: function() {\n        var attr = this.getSelectedSortAttribute();\n\n        if (attr !== 'score') {\n            this.setSelecetedSourceState({\n                order: attr,\n                sort: this.getSelectedSortDirection()\n            });\n        }\n    },\n\n    /**\n     * Sets the page number.\n     */\n    setPage: function(page) {\n        if (this.settings.context !== 'index') {\n            return;\n        }\n\n        page = Math.max(page, 1);\n        this.page = page;\n\n        // Update the URL\n        var url = document.location.href\n            .replace(/\\?.*$/, '')\n            .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n            .replace(/\\/+$/, '');\n\n        if (this.page !== 1) {\n            if (Craft.pageTrigger[0] !== '?') {\n                url += '/';\n            }\n            url += Craft.pageTrigger + this.page;\n        }\n\n        history.replaceState({}, '', url);\n    },\n\n    _resetCount: function() {\n        this.resultSet = null;\n        this.totalResults = null;\n    },\n\n    /**\n     * Returns the data that should be passed to the elementIndex/getElements controller action\n     * when loading elements.\n     */\n    getViewParams: function() {\n        var criteria = {\n            siteId: this.siteId,\n            search: this.searchText,\n            offset: this.settings.batchSize * (this.page - 1),\n            limit: this.settings.batchSize,\n        };\n\n        // Only set drafts/draftOf/trashed params when needed, so we don't potentially override a source's criteria\n        if (\n            this.settings.canHaveDrafts &&\n            (this.drafts || (this.settings.context === 'index' && !this.status))\n        ) {\n            criteria.drafts = this.drafts || null;\n            criteria.savedDraftsOnly = true;\n            if (!this.drafts) {\n                criteria.draftOf = false;\n            }\n        }\n        if (this.trashed) {\n            criteria.trashed = true;\n        }\n\n        if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n            criteria.status = this.status;\n        }\n\n        $.extend(criteria, this.settings.criteria);\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType,\n            source: this.instanceState.selectedSource,\n            criteria: criteria,\n            disabledElementIds: this.settings.disabledElementIds,\n            viewState: $.extend({}, this.getSelectedSourceState()),\n            paginated: this._isViewPaginated() ? 1 : 0,\n        };\n\n        // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n        params.viewState.order = this.getSelectedSortAttribute();\n        params.viewState.sort = this.getSelectedSortDirection();\n\n        if (this.getSelectedSortAttribute() === 'structure') {\n            if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                this.instanceState.collapsedElementIds = [];\n            }\n            params.collapsedElementIds = this.instanceState.collapsedElementIds;\n        }\n\n        // Give plugins a chance to hook in here\n        this.trigger('registerViewParams', {\n            params: params,\n        });\n\n        return params;\n    },\n\n    updateElements: function(preservePagination) {\n        // Ignore if we're not fully initialized yet\n        if (!this.initialized) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        this.setIndexBusy();\n\n        // Kill the old view class\n        if (this.view) {\n            this.view.destroy();\n            delete this.view;\n        }\n\n        if (preservePagination !== true) {\n            this.setPage(1);\n            this._resetCount();\n        }\n\n        var params = this.getViewParams();\n\n        Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n            data: params,\n            cancelToken: this._createCancelToken(),\n        }).then((response) => {\n            this.setIndexAvailable();\n            (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n            this._updateView(params, response.data);\n        }).catch(e => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    updateElementsIfSearchTextChanged: function() {\n        if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n            this.updateElements();\n        }\n    },\n\n    showActionTriggers: function() {\n        // Ignore if they're already shown\n        if (this.showingActionTriggers) {\n            return;\n        }\n\n        // Hard-code the min toolbar height in case it was taller than the actions toolbar\n        // (prevents the elements from jumping if this ends up being a double-click)\n        this.$toolbar.css('min-height', this.$toolbar.height());\n\n        // Hide any toolbar inputs\n        this._$detachedToolbarItems = this.$toolbar.children();\n        this._$detachedToolbarItems.detach();\n\n        if (!this._$triggers) {\n            this._createTriggers();\n        } else {\n            this._$triggers.appendTo(this.$toolbar);\n        }\n\n        this.showingActionTriggers = true;\n    },\n\n    submitAction: function(action, actionParams) {\n        // Make sure something's selected\n        var selectedElementIds = this.view.getSelectedElementIds(),\n            totalSelected = selectedElementIds.length;\n\n        if (totalSelected === 0) {\n            return;\n        }\n\n        if (typeof action === 'string') {\n            action = this._findAction(action);\n        }\n\n        if (action.confirm && !confirm(action.confirm)) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        // Get ready to submit\n        var viewParams = this.getViewParams();\n\n        actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n        var params = $.extend(viewParams, action.settings || {}, actionParams, {\n            elementAction: action.type,\n            elementIds: selectedElementIds\n        });\n\n        // Do it\n        this.setIndexBusy();\n        this._autoSelectElements = selectedElementIds;\n\n        if (action.download) {\n            if (Craft.csrfTokenName) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n            Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                this.setIndexAvailable();\n            }).catch(e => {\n                this.setIndexAvailable();\n            });\n        } else {\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (typeof response.data.badgeCounts !== 'undefined') {\n                        this._updateBadgeCounts(response.data.badgeCounts);\n                    }\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        }\n    },\n\n    _findAction: function(actionClass) {\n        for (var i = 0; i < this.actions.length; i++) {\n            if (this.actions[i].type === actionClass) {\n                return this.actions[i];\n            }\n        }\n        throw `Invalid element action: ${actionClass}`;\n    },\n\n    afterAction: function(action, params) {\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n\n        this.onAfterAction(action, params);\n    },\n\n    hideActionTriggers: function() {\n        // Ignore if there aren't any\n        if (!this.showingActionTriggers) {\n            return;\n        }\n\n        this._$detachedToolbarItems.appendTo(this.$toolbar);\n        this._$triggers.detach();\n        // this._$detachedToolbarItems.removeClass('hidden');\n\n        // Unset the min toolbar height\n        this.$toolbar.css('min-height', '');\n\n        this.showingActionTriggers = false;\n    },\n\n    updateActionTriggers: function() {\n        // Do we have an action UI to update?\n        if (this.actions) {\n            var totalSelected = this.view.getSelectedElements().length;\n\n            if (totalSelected !== 0) {\n                if (totalSelected === this.view.getEnabledElements().length) {\n                    this.$selectAllCheckbox.removeClass('indeterminate');\n                    this.$selectAllCheckbox.addClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'true');\n                } else {\n                    this.$selectAllCheckbox.addClass('indeterminate');\n                    this.$selectAllCheckbox.removeClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'mixed');\n                }\n\n                this.showActionTriggers();\n            } else {\n                this.$selectAllCheckbox.removeClass('indeterminate checked');\n                this.$selectAllContainer.attr('aria-checked', 'false');\n                this.hideActionTriggers();\n            }\n        }\n    },\n\n    getSelectedElements: function() {\n        return this.view ? this.view.getSelectedElements() : $();\n    },\n\n    getSelectedElementIds: function() {\n        return this.view ? this.view.getSelectedElementIds() : [];\n    },\n\n    setStatus: function(status) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n        if ($option.length) {\n            this.statusMenu.selectOption($option[0]);\n        }\n    },\n\n    getSortAttributeOption: function(attr) {\n        return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n    },\n\n    getSelectedSortAttribute: function() {\n        return this.$sortAttributesList.find('a.sel:first').data('attr');\n    },\n\n    setSortAttribute: function(attr) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.getSortAttributeOption(attr);\n\n        if ($option.length) {\n            this.$sortAttributesList.find('a.sel').removeClass('sel');\n            $option.addClass('sel');\n\n            var label = $option.text();\n            this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n            this.$sortMenuBtn.text(label);\n\n            if (attr === 'score') {\n                this.setSortDirection('desc');\n            } else {\n                this.setSortDirection($option.data('default-dir') || 'asc');\n            }\n\n            if (attr === 'structure') {\n                this.$sortDirectionsList.find('a').addClass('disabled');\n            } else {\n                this.$sortDirectionsList.find('a').removeClass('disabled');\n            }\n        }\n    },\n\n    getSortDirectionOption: function(dir) {\n        return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n    },\n\n    getSelectedSortDirection: function() {\n        return this.$sortDirectionsList.find('a.sel:first').data('dir');\n    },\n\n    getSelectedViewMode: function() {\n        return this.getSelectedSourceState('mode') || 'table';\n    },\n\n    setSortDirection: function(dir) {\n        if (dir !== 'desc') {\n            dir = 'asc';\n        }\n\n        this.$sortMenuBtn.attr('data-icon', dir);\n        this.$sortDirectionsList.find('a.sel').removeClass('sel');\n        this.getSortDirectionOption(dir).addClass('sel');\n    },\n\n    getSourceByKey: function(key) {\n        if (typeof this.sourcesByKey[key] === 'undefined') {\n            return null;\n        }\n\n        return this.sourcesByKey[key];\n    },\n\n    selectSource: function($source) {\n        if (!$source || !$source.length) {\n            return false;\n        }\n\n        if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n            return false;\n        }\n\n        // Hide action triggers if they're currently being shown\n        this.hideActionTriggers();\n\n        this.$source = $source;\n        this.sourceKey = $source.data('key');\n        this.setInstanceState('selectedSource', this.sourceKey);\n        this.sourceSelect.selectItem($source);\n\n        Craft.cp.updateSidebarMenuLabel();\n\n        if (this.searching) {\n            // Clear the search value without causing it to update elements\n            this.searchText = null;\n            this.$search.val('');\n            this.stopSearching();\n        }\n\n        // Sort menu\n        // ----------------------------------------------------------------------\n\n        // Remove any existing custom sort options from the menu\n        this.$sortAttributesList.children('li[data-extra]').remove();\n\n        // Does this source have any custom sort options?\n        let $topSource = this.$source.closest('nav > ul > li').children('a');\n        let sortOptions = $topSource.data('sort-options')\n        if (sortOptions) {\n            for (let i = 0; i < sortOptions.length; i++) {\n                let $option = $('<li/>', {\n                    'data-extra': true,\n                })\n                    .append(\n                        $('<a/>', {\n                            text: sortOptions[i][0],\n                            'data-attr': sortOptions[i][1],\n                        })\n                    )\n                    .appendTo(this.$sortAttributesList);\n                this.sortMenu.addOptions($option.children());\n            }\n        }\n\n        // Does this source have a structure?\n        if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n            if (!this.$structureSortAttribute) {\n                this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                this.sortMenu.addOptions(this.$structureSortAttribute.children());\n            }\n\n            this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n        } else if (this.$structureSortAttribute) {\n            this.$structureSortAttribute.removeClass('sel').detach();\n        }\n\n        this.setStoredSortOptionsForSource();\n\n        // Status menu\n        // ----------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                this.$statusMenuContainer.addClass('hidden');\n            } else {\n                this.$statusMenuContainer.removeClass('hidden');\n            }\n\n            if (this.trashed) {\n                // Swap to the initial status\n                var $firstOption = this.statusMenu.$options.first();\n                this.setStatus($firstOption.data('status'));\n            }\n        }\n\n        // View mode buttons\n        // ----------------------------------------------------------------------\n\n        // Clear out any previous view mode data\n        if (this.$viewModeBtnContainer) {\n            this.$viewModeBtnContainer.remove();\n        }\n\n        this.viewModeBtns = {};\n        this.viewMode = null;\n\n        // Get the new list of view modes\n        this.sourceViewModes = this.getViewModesForSource();\n\n        // Create the buttons if there's more than one mode available to this source\n        if (this.sourceViewModes.length > 1) {\n            this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                let sourceViewMode = this.sourceViewModes[i];\n\n                let $viewModeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                    'data-view': sourceViewMode.mode,\n                    'data-icon': sourceViewMode.icon,\n                    'aria-label': sourceViewMode.title,\n                    title: sourceViewMode.title,\n                }).appendTo(this.$viewModeBtnContainer);\n\n                this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                    this.selectViewMode(ev.data.mode);\n                    this.updateElements();\n                });\n            }\n        }\n\n        // Figure out which mode we should start with\n        var viewMode = this.getSelectedViewMode();\n\n        if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n            // Try to keep using the current view mode\n            if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                viewMode = this.viewMode;\n            }\n            // Just use the first one\n            else {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n        }\n\n        this.selectViewMode(viewMode);\n\n        this.onSelectSource();\n\n        return true;\n    },\n\n    selectSourceByKey: function(key) {\n        var $source = this.getSourceByKey(key);\n\n        if ($source) {\n            return this.selectSource($source);\n        } else {\n            return false;\n        }\n    },\n\n    setStoredSortOptionsForSource: function() {\n        var sortAttr = this.getSelectedSourceState('order'),\n            sortDir = this.getSelectedSourceState('sort');\n\n        if (!sortAttr || !sortDir) {\n            // Get the default\n            sortAttr = this.getDefaultSort();\n\n            if (Garnish.isArray(sortAttr)) {\n                sortDir = sortAttr[1];\n                sortAttr = sortAttr[0];\n            }\n        }\n\n        if (sortDir !== 'asc' && sortDir !== 'desc') {\n            sortDir = 'asc';\n        }\n\n        this.setSortAttribute(sortAttr);\n        this.setSortDirection(sortDir);\n    },\n\n    getDefaultSort: function() {\n        // Does the source specify what to do?\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n            return this.$source.attr('data-default-sort').split(':');\n        } else {\n            // Default to whatever's first\n            return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n        }\n    },\n\n    getViewModesForSource: function() {\n        var viewModes = [\n            {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n        ];\n\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n            viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n        }\n\n        return viewModes;\n    },\n\n    doesSourceHaveViewMode: function(viewMode) {\n        for (var i = 0; i < this.sourceViewModes.length; i++) {\n            if (this.sourceViewModes[i].mode === viewMode) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    selectViewMode: function(viewMode, force) {\n        // Make sure that the current source supports it\n        if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n            viewMode = this.sourceViewModes[0].mode;\n        }\n\n        // Has anything changed?\n        if (viewMode === this.viewMode) {\n            return;\n        }\n\n        // Deselect the previous view mode\n        if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].removeClass('active');\n        }\n\n        this.viewMode = viewMode;\n        this.setSelecetedSourceState('mode', this.viewMode);\n\n        if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].addClass('active');\n        }\n    },\n\n    createView: function(mode, settings) {\n        var viewClass = this.getViewClass(mode);\n        return new viewClass(this, this.$elements, settings);\n    },\n\n    getViewClass: function(mode) {\n        switch (mode) {\n            case 'table':\n                return Craft.TableElementIndexView;\n            case 'thumbs':\n                return Craft.ThumbsElementIndexView;\n            default:\n                throw `View mode \"${mode}\" not supported.`;\n        }\n    },\n\n    rememberDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index === -1) {\n            this.settings.disabledElementIds.push(id);\n        }\n    },\n\n    forgetDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index !== -1) {\n            this.settings.disabledElementIds.splice(index, 1);\n        }\n    },\n\n    enableElements: function($elements) {\n        $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.forgetDisabledElementId(id);\n        }\n\n        this.onEnableElements($elements);\n    },\n\n    disableElements: function($elements) {\n        $elements.removeClass('sel').addClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.rememberDisabledElementId(id);\n        }\n\n        this.onDisableElements($elements);\n    },\n\n    getElementById: function(id) {\n        return this.view.getElementById(id);\n    },\n\n    enableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.enableElements($element);\n            } else {\n                this.forgetDisabledElementId(id);\n            }\n        }\n    },\n\n    disableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.disableElements($element);\n            } else {\n                this.rememberDisabledElementId(id);\n            }\n        }\n    },\n\n    selectElementAfterUpdate: function(id) {\n        if (this._autoSelectElements === null) {\n            this._autoSelectElements = [];\n        }\n\n        this._autoSelectElements.push(id);\n    },\n\n    addButton: function($button) {\n        this.getButtonContainer().append($button);\n    },\n\n    isShowingSidebar: function() {\n        if (this.showingSidebar === null) {\n            this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n        }\n\n        return this.showingSidebar;\n    },\n\n    getButtonContainer: function() {\n        // Is there a predesignated place where buttons should go?\n        if (this.settings.buttonContainer) {\n            return $(this.settings.buttonContainer);\n        } else {\n            var $container = $('#action-button');\n\n            if (!$container.length) {\n                $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n            }\n\n            return $container;\n        }\n    },\n\n    setIndexBusy: function() {\n        this.$elements.addClass('busy');\n        this.isIndexBusy = true;\n    },\n\n    setIndexAvailable: function() {\n        this.$elements.removeClass('busy');\n        this.isIndexBusy = false;\n    },\n\n    createCustomizeSourcesModal: function() {\n        // Recreate it each time\n        var modal = new Craft.CustomizeSourcesModal(this, {\n            onHide: function() {\n                modal.destroy();\n            }\n        });\n\n        return modal;\n    },\n\n    disable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.disable();\n        }\n\n        if (this.view) {\n            this.view.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.enable();\n        }\n\n        if (this.view) {\n            this.view.enable();\n        }\n\n        this.base();\n    },\n\n    onAfterInit: function() {\n        this.settings.onAfterInit();\n        this.trigger('afterInit');\n    },\n\n    onSelectSource: function() {\n        this.settings.onSelectSource(this.sourceKey);\n        this.trigger('selectSource', {sourceKey: this.sourceKey});\n    },\n\n    onSelectSite: function() {\n        this.settings.onSelectSite(this.siteId);\n        this.trigger('selectSite', {siteId: this.siteId});\n    },\n\n    onUpdateElements: function() {\n        this.settings.onUpdateElements();\n        this.trigger('updateElements');\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    onEnableElements: function($elements) {\n        this.settings.onEnableElements($elements);\n        this.trigger('enableElements', {elements: $elements});\n    },\n\n    onDisableElements: function($elements) {\n        this.settings.onDisableElements($elements);\n        this.trigger('disableElements', {elements: $elements});\n    },\n\n    onAfterAction: function(action, params) {\n        this.settings.onAfterAction(action, params);\n        this.trigger('afterAction', {action: action, params: params});\n    },\n\n    // UI state handlers\n    // -------------------------------------------------------------------------\n\n    _handleSourceSelectionChange: function() {\n        // If the selected source was just removed (maybe because its parent was collapsed),\n        // there won't be a selected source\n        if (!this.sourceSelect.totalSelected) {\n            this.sourceSelect.selectItem(this.$visibleSources.first());\n            return;\n        }\n\n        if (this.selectSource(this.sourceSelect.$selectedItems)) {\n            this.updateElements();\n        }\n    },\n\n    _handleActionTriggerSubmit: function(ev) {\n        ev.preventDefault();\n\n        var $form = $(ev.currentTarget);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($form.data('action'), Garnish.getPostData($form));\n    },\n\n    _handleMenuActionTriggerSubmit: function(ev) {\n        var $option = $(ev.option);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($option.data('action'));\n    },\n\n    _handleStatusChange: function(ev) {\n        this.statusMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$statusMenuBtn.html($option.html());\n\n        this.trashed = false;\n        this.drafts = false;\n        this.status = null;\n\n        if (Garnish.hasAttr($option, 'data-trashed')) {\n            this.trashed = true;\n        } else if (Garnish.hasAttr($option, 'data-drafts')) {\n            this.drafts = true;\n        } else {\n            this.status = $option.data('status');\n        }\n\n        this._updateStructureSortOption();\n        this.updateElements();\n    },\n\n    _handleSiteChange: function(ev) {\n        this.siteMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$siteMenuBtn.html($option.html());\n        this._setSite($option.data('site-id'));\n        this.onSelectSite();\n    },\n\n    _setSite: function(siteId) {\n        let firstSite = this.siteId === null;\n        this.siteId = siteId;\n        this.$visibleSources = $();\n\n        // Hide any sources that aren't available for this site\n        var $firstVisibleSource;\n        var $source;\n        // Select a new source automatically if a site is already selected, but we don't have a selected source\n        // (or if the currently selected source ends up not supporting the new site)\n        var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n        for (var i = 0; i < this.$sources.length; i++) {\n            $source = this.$sources.eq(i);\n            if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                $source.parent().removeClass('hidden');\n                this.$visibleSources = this.$visibleSources.add($source);\n                if (!$firstVisibleSource) {\n                    $firstVisibleSource = $source;\n                }\n            } else {\n                $source.parent().addClass('hidden');\n\n                // Is this the currently selected source?\n                if (this.$source && this.$source.get(0) == $source.get(0)) {\n                    selectNewSource = true;\n                }\n            }\n        }\n\n        if (this.initialized && selectNewSource) {\n            this.selectSource($firstVisibleSource);\n        }\n\n        // Hide any empty-nester headings\n        var $headings = this.getSourceContainer().children('.heading');\n        var $heading;\n\n        for (i = 0; i < $headings.length; i++) {\n            $heading = $headings.eq(i);\n            if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                $heading.removeClass('hidden');\n            } else {\n                $heading.addClass('hidden');\n            }\n        }\n\n        if (this.initialized) {\n            if (this.settings.context === 'index') {\n                // Remember this site for later\n                Craft.cp.setSiteId(siteId);\n            }\n\n            // Update the elements\n            this.updateElements();\n        }\n    },\n\n    _handleSortChange: function(ev) {\n        var $option = $(ev.selectedOption);\n\n        if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n            return;\n        }\n\n        // Is this an attribute or a direction?\n        if ($option.parent().parent().is(this.$sortAttributesList)) {\n            this.setSortAttribute($option.data('attr'));\n        } else {\n            this.setSortDirection($option.data('dir'));\n        }\n\n        this.storeSortAttributeAndDirection();\n        this.updateElements();\n    },\n\n    _handleSelectionChange: function() {\n        this.updateActionTriggers();\n        this.onSelectionChange();\n    },\n\n    _handleSourceDblClick: function(ev) {\n        this._toggleSource($(ev.currentTarget));\n        ev.stopPropagation();\n    },\n\n    _handleSourceToggleClick: function(ev) {\n        this._toggleSource($(ev.currentTarget).prev('a'));\n        ev.stopPropagation();\n    },\n\n    _updateStructureSortOption: function() {\n        var $option = this.getSortAttributeOption('structure');\n\n        if (!$option.length) {\n            return;\n        }\n\n        if (this.trashed || this.drafts || this.searching) {\n            $option.addClass('disabled');\n            if (this.getSelectedSortAttribute() === 'structure') {\n                // Temporarily set the sort to the first option\n                var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                this.setSortAttribute($firstOption.data('attr'));\n                this.setSortDirection('asc');\n            }\n        } else {\n            $option.removeClass('disabled');\n            this.setStoredSortOptionsForSource();\n        }\n    },\n\n    // Source managemnet\n    // -------------------------------------------------------------------------\n\n    _getSourcesInList: function($list) {\n        return $list.children('li').children('a');\n    },\n\n    _getChildSources: function($source) {\n        var $list = $source.siblings('ul');\n        return this._getSourcesInList($list);\n    },\n\n    _getSourceToggle: function($source) {\n        return $source.siblings('.toggle');\n    },\n\n    _toggleSource: function($source) {\n        if ($source.parent('li').hasClass('expanded')) {\n            this._collapseSource($source);\n        } else {\n            this._expandSource($source);\n        }\n    },\n\n    _expandSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'true',\n            'aria-label': Craft.t('app', 'Hide nested sources'),\n        });\n        $source.parent('li').addClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        for (let i = 0; i < $childSources.length; i++) {\n            this.initSource($($childSources[i]));\n            if (this.$visibleSources) {\n                this.$visibleSources = this.$visibleSources.add($childSources[i]);\n            }\n        }\n\n        var key = $source.data('key');\n        if (this.instanceState.expandedSources.indexOf(key) === -1) {\n            this.instanceState.expandedSources.push(key);\n            this.storeInstanceState();\n        }\n    },\n\n    _collapseSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'false',\n            'aria-label': Craft.t('app', 'Show nested sources'),\n        });\n        $source.parent('li').removeClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        for (let i = 0; i < $childSources.length; i++) {\n            this.deinitSource($($childSources[i]));\n            this.$visibleSources = this.$visibleSources.not($childSources[i]);\n        }\n\n        var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n        if (i !== -1) {\n            this.instanceState.expandedSources.splice(i, 1);\n            this.storeInstanceState();\n        }\n    },\n\n    // View\n    // -------------------------------------------------------------------------\n\n    _isViewPaginated: function() {\n        return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n    },\n\n    _updateView: function(params, response) {\n        // Cleanup\n        // -------------------------------------------------------------\n\n        // Get rid of the old action triggers regardless of whether the new batch has actions or not\n        if (this.actions) {\n            this.hideActionTriggers();\n            this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n        }\n\n        // Update the count text\n        // -------------------------------------------------------------\n\n        if (this.$countContainer.length) {\n            this.$countSpinner.removeClass('hidden');\n            this.$countContainer.html('');\n\n            this._countResults()\n                .then((total) => {\n                    this.$countSpinner.addClass('hidden');\n\n                    let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                    let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                    if (!this._isViewPaginated()) {\n                        let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n                        this.$countContainer.text(countLabel);\n                    } else {\n                        let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                        let last = Math.min(first + (this.settings.batchSize - 1), total);\n                        let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            first: first,\n                            last: last,\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n\n                        let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                        let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                        let $prevBtn = $('<div/>', {\n                            'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                            title: Craft.t('app', 'Previous Page')\n                        }).appendTo($paginationContainer);\n                        let $nextBtn = $('<div/>', {\n                            'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                            title: Craft.t('app', 'Next Page')\n                        }).appendTo($paginationContainer);\n\n                        $('<div/>', {\n                            'class': 'page-info',\n                            text: countLabel\n                        }).appendTo($paginationContainer);\n\n                        if (this.page > 1) {\n                            this.addListener($prevBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page - 1);\n                                this.updateElements(true);\n                            });\n                        }\n\n                        if (this.page < totalPages) {\n                            this.addListener($nextBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page + 1);\n                                this.updateElements(true);\n                            });\n                        }\n                    }\n                })\n                .catch(() => {\n                    this.$countSpinner.addClass('hidden');\n                });\n        }\n\n        // Update the view with the new container + elements HTML\n        // -------------------------------------------------------------\n\n        this.$elements.html(response.html);\n        Craft.appendHeadHtml(response.headHtml);\n        Craft.appendFootHtml(response.footHtml);\n\n        // Batch actions setup\n        // -------------------------------------------------------------\n\n        this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n        if (response.actions && response.actions.length) {\n            if (this.$selectAllContainer.length) {\n                this.actions = response.actions;\n                this.actionsHeadHtml = response.actionsHeadHtml;\n                this.actionsFootHtml = response.actionsFootHtml;\n\n                // Create the select all checkbox\n                this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                this.$selectAllContainer.attr({\n                    'role': 'checkbox',\n                    'tabindex': '0',\n                    'aria-checked': 'false',\n                    'aria-label': Craft.t('app', 'Select all'),\n                });\n\n                this.addListener(this.$selectAllContainer, 'click', function() {\n                    if (this.view.getSelectedElements().length === 0) {\n                        this.view.selectAllElements();\n                    } else {\n                        this.view.deselectAllElements();\n                    }\n                });\n\n                this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                    if (ev.keyCode === Garnish.SPACE_KEY) {\n                        ev.preventDefault();\n\n                        $(ev.currentTarget).trigger('click');\n                    }\n                });\n            }\n        } else {\n            if (!this.$selectAllContainer.siblings().length) {\n                this.$selectAllContainer.parent('.header').remove();\n            }\n            this.$selectAllContainer.remove();\n        }\n\n        // Exporters setup\n        // -------------------------------------------------------------\n\n        this.exporters = response.exporters;\n        this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n        if (this.exporters && this.exporters.length) {\n            this.$exportBtn.removeClass('hidden');\n        } else {\n            this.$exportBtn.addClass('hidden');\n        }\n\n        // Create the view\n        // -------------------------------------------------------------\n\n        // Should we make the view selectable?\n        var selectable = (this.actions || this.settings.selectable);\n\n        this.view = this.createView(this.getSelectedViewMode(), {\n            context: this.settings.context,\n            batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n            params: params,\n            selectable: selectable,\n            multiSelect: (this.actions || this.settings.multiSelect),\n            checkboxMode: !!this.actions,\n            onSelectionChange: this._handleSelectionChange.bind(this)\n        });\n\n        // Auto-select elements\n        // -------------------------------------------------------------\n\n        if (this._autoSelectElements) {\n            if (selectable) {\n                for (var i = 0; i < this._autoSelectElements.length; i++) {\n                    this.view.selectElementById(this._autoSelectElements[i]);\n                }\n            }\n\n            this._autoSelectElements = null;\n        }\n\n        // Trigger the event\n        // -------------------------------------------------------------\n\n        this.onUpdateElements();\n    },\n\n    _updateBadgeCounts: function(badgeCounts) {\n        for (let sourceKey in badgeCounts) {\n            if (badgeCounts.hasOwnProperty(sourceKey)) {\n                const $source = this.getSourceByKey(sourceKey);\n                if ($source) {\n                    let $badge = $source.children('.badge');\n                    if (badgeCounts[sourceKey] !== null) {\n                        if (!$badge.length) {\n                            $badge = $('<span class=\"badge\"/>').appendTo($source);\n                        }\n                        $badge.text(badgeCounts[sourceKey]);\n                    } else if ($badge) {\n                        $badge.remove();\n                    }\n                }\n            }\n        }\n    },\n\n    _countResults: function() {\n        return new Promise((resolve, reject) => {\n            if (this.totalResults !== null) {\n                resolve(this.totalResults);\n            } else {\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                // Make sure we've got an active result set ID\n                if (this.resultSet === null) {\n                    this.resultSet = Math.floor(Math.random() * 100000000);\n                }\n                params.resultSet = this.resultSet;\n\n                Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    if (response.data.resultSet == this.resultSet) {\n                        this.totalResults = response.data.count;\n                        resolve(response.data.count);\n                    } else {\n                        reject();\n                    }\n                }).catch(reject);\n            }\n        });\n    },\n\n    _createTriggers: function() {\n        var triggers = [],\n            safeMenuActions = [],\n            destructiveMenuActions = [];\n\n        var i;\n\n        for (i = 0; i < this.actions.length; i++) {\n            var action = this.actions[i];\n\n            if (action.trigger) {\n                var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                    .data('action', action)\n                    .append(action.trigger);\n\n                this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                triggers.push($form);\n            } else {\n                if (!action.destructive) {\n                    safeMenuActions.push(action);\n                } else {\n                    destructiveMenuActions.push(action);\n                }\n            }\n        }\n\n        var $btn;\n\n        if (safeMenuActions.length || destructiveMenuActions.length) {\n            var $menuTrigger = $('<form/>');\n\n            $btn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn',\n                'data-icon': 'settings',\n                title: Craft.t('app', 'Actions'),\n            }).appendTo($menuTrigger);\n\n            var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n            if ($safeList) {\n                $safeList.appendTo($menu);\n            }\n\n            if ($safeList && $destructiveList) {\n                $('<hr/>').appendTo($menu);\n            }\n\n            if ($destructiveList) {\n                $destructiveList.appendTo($menu);\n            }\n\n            triggers.push($menuTrigger);\n        }\n\n        this._$triggers = $();\n\n        for (i = 0; i < triggers.length; i++) {\n            var $div = $('<div/>').append(triggers[i]);\n            this._$triggers = this._$triggers.add($div);\n        }\n\n        this._$triggers.appendTo(this.$toolbar);\n        Craft.appendHeadHtml(this.actionsHeadHtml);\n        Craft.appendFootHtml(this.actionsFootHtml);\n\n        Craft.initUiElements(this._$triggers);\n\n        if ($btn) {\n            $btn.data('menubtn').on('optionSelect', this._handleMenuActionTriggerSubmit.bind(this));\n        }\n    },\n\n    _showExportHud: function() {\n        this.$exportBtn.addClass('active');\n\n        var $form = $('<form/>', {\n            'class': 'export-form'\n        });\n\n        var typeOptions = [];\n        for (var i = 0; i < this.exporters.length; i++) {\n            typeOptions.push({label: this.exporters[i].name, value: this.exporters[i].type});\n        }\n        var $typeField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Export Type'),\n            options: typeOptions,\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        var $formatField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Format'),\n            options: [\n                {label: 'CSV', value: 'csv'}, {label: 'JSON', value: 'json'}, {label: 'XML', value: 'xml'},\n            ],\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        let $typeSelect = $typeField.find('select');\n        this.addListener($typeSelect, 'change', () => {\n            let type = $typeSelect.val();\n            if (this.exportersByType[type].formattable) {\n                $formatField.removeClass('hidden');\n            } else {\n                $formatField.addClass('hidden');\n            }\n        });\n        $typeSelect.trigger('change');\n\n        // Only show the Limit field if there aren't any selected elements\n        var selectedElementIds = this.view.getSelectedElementIds();\n\n        if (!selectedElementIds.length) {\n            var $limitField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Limit'),\n                placeholder: Craft.t('app', 'No limit'),\n                type: 'number',\n                min: 1\n            }).appendTo($form);\n        }\n\n        $('<button/>', {\n            type: 'submit',\n            'class': 'btn submit fullwidth',\n            text: Craft.t('app', 'Export')\n        }).appendTo($form)\n\n        var $spinner = $('<div/>', {\n            'class': 'spinner hidden'\n        }).appendTo($form);\n\n        var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n        hud.on('hide', () => {\n            this.$exportBtn.removeClass('active');\n        });\n\n        var submitting = false;\n\n        this.addListener($form, 'submit', function(ev) {\n            ev.preventDefault();\n            if (submitting) {\n                return;\n            }\n\n            submitting = true;\n            $spinner.removeClass('hidden');\n\n            var params = this.getViewParams();\n            delete params.criteria.offset;\n            delete params.criteria.limit;\n            delete params.collapsedElementIds;\n\n            params.type = $typeField.find('select').val();\n            params.format = $formatField.find('select').val();\n\n            if (selectedElementIds.length) {\n                params.criteria.id = selectedElementIds;\n            } else {\n                var limit = parseInt($limitField.find('input').val());\n                if (limit && !isNaN(limit)) {\n                    params.criteria.limit = limit;\n                }\n            }\n\n            if (Craft.csrfTokenValue) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                .then(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                })\n                .catch(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                });\n        });\n    },\n\n    _createMenuTriggerList: function(actions, destructive) {\n        if (actions && actions.length) {\n            var $ul = $('<ul/>');\n\n            for (var i = 0; i < actions.length; i++) {\n                $('<li/>').append($('<a/>', {\n                    id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                    'class': (destructive ? 'error' : null),\n                    data: {\n                        action: actions[i],\n                    },\n                    text: actions[i].name\n                })).appendTo($ul);\n            }\n\n            return $ul;\n        }\n    }\n}, {\n    defaults: {\n        context: 'index',\n        modal: null,\n        storageKey: null,\n        criteria: null,\n        batchSize: 100,\n        disabledElementIds: [],\n        selectable: false,\n        multiSelect: false,\n        buttonContainer: null,\n        hideSidebar: false,\n        toolbarSelector: '.toolbar:first',\n        refreshSourcesAction: 'element-indexes/get-source-tree-html',\n        updateElementsAction: 'element-indexes/get-elements',\n        countElementsAction: 'element-indexes/count-elements',\n        submitActionsAction: 'element-indexes/perform-action',\n        defaultSiteId: null,\n        defaultSource: null,\n        canHaveDrafts: false,\n\n        onAfterInit: $.noop,\n        onSelectSource: $.noop,\n        onSelectSite: $.noop,\n        onUpdateElements: $.noop,\n        onSelectionChange: $.noop,\n        onEnableElements: $.noop,\n        onDisableElements: $.noop,\n        onAfterAction: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend({\n    $container: null,\n    $loadingMoreSpinner: null,\n    $elementContainer: null,\n    $scroller: null,\n\n    elementIndex: null,\n    thumbLoader: null,\n    elementSelect: null,\n\n    loadingMore: false,\n\n    _totalVisible: null,\n    _morePending: null,\n    _handleEnableElements: null,\n    _handleDisableElements: null,\n\n    init: function(elementIndex, container, settings) {\n        this.elementIndex = elementIndex;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n        // Create a \"loading-more\" spinner\n        this.$loadingMoreSpinner = $(\n            '<div class=\"centeralign hidden\">' +\n            '<div class=\"spinner loadingmore\"></div>' +\n            '</div>'\n        ).insertAfter(this.$container);\n\n        // Get the actual elements container and its child elements\n        this.$elementContainer = this.getElementContainer();\n        var $elements = this.$elementContainer.children();\n\n        this.setTotalVisible($elements.length);\n        this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n        // Instantiate the thumb loader\n        this.thumbLoader = new Craft.ElementThumbLoader();\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select(\n                this.$elementContainer,\n                $elements.filter(':not(.disabled)'),\n                {\n                    multi: this.settings.multiSelect,\n                    vertical: this.isVerticalList(),\n                    handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                    filter: ':not(a):not(.toggle)',\n                    checkboxMode: this.settings.checkboxMode,\n                    onSelectionChange: this.onSelectionChange.bind(this)\n                });\n\n            this._handleEnableElements = ev => {\n                this.elementSelect.addItems(ev.elements);\n            };\n\n            this._handleDisableElements = ev => {\n                this.elementSelect.removeItems(ev.elements);\n            };\n\n            this.elementIndex.on('enableElements', this._handleEnableElements);\n            this.elementIndex.on('disableElements', this._handleDisableElements);\n        }\n\n        // Enable inline element editing if this is an index page\n        if (this.settings.context === 'index') {\n            this._handleElementEditing = ev => {\n                var $target = $(ev.target);\n\n                if ($target.prop('nodeName') === 'A') {\n                    // Let the link do its thing\n                    return;\n                }\n\n                var $element;\n\n                if ($target.hasClass('element')) {\n                    $element = $target;\n                } else {\n                    $element = $target.closest('.element');\n\n                    if (!$element.length) {\n                        return;\n                    }\n                }\n\n                if (Garnish.hasAttr($element, 'data-editable')) {\n                    this.createElementEditor($element);\n                }\n            };\n\n            if (!this.elementIndex.trashed) {\n                this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                if ($.isTouchCapable()) {\n                    this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                }\n            }\n        }\n\n        // Give sub-classes a chance to do post-initialization stuff here\n        this.afterInit();\n\n        // Set up lazy-loading\n        if (this.settings.batchSize) {\n            if (this.settings.context === 'index') {\n                this.$scroller = Garnish.$scrollContainer;\n            } else {\n                this.$scroller = this.elementIndex.$main;\n            }\n\n            this.$scroller.scrollTop(0);\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }\n    },\n\n    getElementContainer: function() {\n        throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n    },\n\n    afterInit: function() {\n    },\n\n    getAllElements: function() {\n        return this.$elementContainer.children();\n    },\n\n    getEnabledElements: function() {\n        return this.$elementContainer.children(':not(.disabled)');\n    },\n\n    getElementById: function(id) {\n        var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n        if ($element.length) {\n            return $element;\n        } else {\n            return null;\n        }\n    },\n\n    getSelectedElements: function() {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        return this.elementSelect.$selectedItems;\n    },\n\n    getSelectedElementIds: function() {\n        let $selectedElements;\n        try {\n            $selectedElements = this.getSelectedElements();\n        } catch (e) {\n        }\n\n        let ids = [];\n        if ($selectedElements) {\n            for (var i = 0; i < $selectedElements.length; i++) {\n                ids.push($selectedElements.eq(i).data('id'));\n            }\n        }\n        return ids;\n    },\n\n    selectElement: function($element) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        this.elementSelect.selectItem($element, true);\n        return true;\n    },\n\n    selectElementById: function(id) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        var $element = this.getElementById(id);\n\n        if ($element) {\n            this.elementSelect.selectItem($element, true);\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    selectAllElements: function() {\n        this.elementSelect.selectAll();\n    },\n\n    deselectAllElements: function() {\n        this.elementSelect.deselectAll();\n    },\n\n    isVerticalList: function() {\n        return false;\n    },\n\n    getTotalVisible: function() {\n        return this._totalVisible;\n    },\n\n    setTotalVisible: function(totalVisible) {\n        this._totalVisible = totalVisible;\n    },\n\n    getMorePending: function() {\n        return this._morePending;\n    },\n\n    setMorePending: function(morePending) {\n        this._morePending = morePending;\n    },\n\n    /**\n     * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n     */\n    maybeLoadMore: function() {\n        if (this.canLoadMore()) {\n            this.loadMore();\n        }\n    },\n\n    /**\n     * Returns whether the user has reached the bottom of the scroll area.\n     */\n    canLoadMore: function() {\n        if (!this.getMorePending() || !this.settings.batchSize) {\n            return false;\n        }\n\n        // Check if the user has reached the bottom of the scroll area\n        var containerHeight;\n\n        if (this.$scroller[0] === Garnish.$win[0]) {\n            var winHeight = Garnish.$win.innerHeight(),\n                winScrollTop = Garnish.$win.scrollTop(),\n                containerOffset = this.$container.offset().top;\n            containerHeight = this.$container.height();\n\n            return (winHeight + winScrollTop >= containerOffset + containerHeight);\n        } else {\n            var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                containerScrollTop = this.$scroller.scrollTop();\n            containerHeight = this.$scroller.outerHeight();\n\n            return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n        }\n    },\n\n    /**\n     * Loads the next batch of elements.\n     */\n    loadMore: function() {\n        if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n            return;\n        }\n\n        this.loadingMore = true;\n        this.$loadingMoreSpinner.removeClass('hidden');\n        this.removeListener(this.$scroller, 'scroll');\n\n        Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {\n            data: this.getLoadMoreParams(),\n        }).then(response => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n\n            let $newElements = $(response.data.html);\n\n            this.appendElements($newElements);\n            Craft.appendHeadHtml(response.data.headHtml);\n            Craft.appendFootHtml(response.data.footHtml);\n\n            if (this.elementSelect) {\n                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                this.elementIndex.updateActionTriggers();\n            }\n\n            this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n            this.setMorePending($newElements.length == this.settings.batchSize);\n\n            // Is there room to load more right now?\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }).catch(e => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n        });\n    },\n\n    getLoadMoreParams: function() {\n        // Use the same params that were passed when initializing this view\n        var params = $.extend(true, {}, this.settings.params);\n        params.criteria.offset = this.getTotalVisible();\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        $newElements.appendTo(this.$elementContainer);\n        this.thumbLoader.load($newElements);\n        this.onAppendElements($newElements);\n    },\n\n    onAppendElements: function($newElements) {\n        this.settings.onAppendElements($newElements);\n        this.trigger('appendElements', {\n            newElements: $newElements\n        });\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            elementIndex: this.elementIndex\n        });\n    },\n\n    disable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.disable();\n        }\n    },\n\n    enable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.enable();\n        }\n    },\n\n    destroy: function() {\n        // Remove the \"loading-more\" spinner, since we added that outside of the view container\n        this.$loadingMoreSpinner.remove();\n\n        // Kill the thumb loader\n        this.thumbLoader.destroy();\n        delete this.thumbLoader;\n\n        // Delete the element select\n        if (this.elementSelect) {\n            this.elementIndex.off('enableElements', this._handleEnableElements);\n            this.elementIndex.off('disableElements', this._handleDisableElements);\n\n            this.elementSelect.destroy();\n            delete this.elementSelect;\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        context: 'index',\n        batchSize: null,\n        params: null,\n        selectable: false,\n        multiSelect: false,\n        checkboxMode: false,\n        loadMoreElementsAction: 'element-indexes/get-more-elements',\n        onAppendElements: $.noop,\n        onSelectionChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend({\n    thumbLoader: null,\n    elementSelect: null,\n    elementSort: null,\n    modal: null,\n    elementEditor: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addElementBtn: null,\n    $addElementBtnContainer: null,\n\n    _initialized: false,\n\n    init: function(settings) {\n        // Normalize the settings and set them\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n        // Apply the storage key prefix\n        if (this.settings.modalStorageKey) {\n            this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n        }\n\n        // No reason for this to be sortable if we're only allowing 1 selection\n        if (this.settings.limit == 1) {\n            this.settings.sortable = false;\n        }\n\n        this.$container = this.getContainer();\n\n        // Store a reference to this class\n        this.$container.data('elementSelect', this);\n\n        this.$elementsContainer = this.getElementsContainer();\n\n        this.$addElementBtn = this.getAddElementsBtn();\n        if (this.$addElementBtn) {\n            this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n            if (!this.$addElementBtnContainer.length) {\n                this.$addElementBtnContainer = null;\n            }\n        }\n\n        this.thumbLoader = new Craft.ElementThumbLoader();\n\n        this.initElementSelect();\n        this.initElementSort();\n        this.resetElements();\n\n        if (this.$addElementBtn) {\n            this.addListener(this.$addElementBtn, 'activate', 'showModal');\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            this._initialized = true;\n        });\n    },\n\n    get totalSelected() {\n        return this.$elements.length;\n    },\n\n    getContainer: function() {\n        return $('#' + this.settings.id);\n    },\n\n    getElementsContainer: function() {\n        return this.$container.children('.elements');\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.children();\n    },\n\n    getAddElementsBtn: function() {\n        return this.$container.find('.btn.add:first');\n    },\n\n    initElementSelect: function() {\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select({\n                multi: this.settings.sortable,\n                filter: ':not(.delete)'\n            });\n        }\n    },\n\n    initElementSort: function() {\n        if (this.settings.sortable) {\n            this.elementSort = new Garnish.DragSort({\n                container: this.$elementsContainer,\n                filter: (this.settings.selectable ? () => {\n                    // Only return all the selected items if the target item is selected\n                    if (this.elementSort.$targetItem.hasClass('sel')) {\n                        return this.elementSelect.getSelectedItems();\n                    } else {\n                        return this.elementSort.$targetItem;\n                    }\n                } : null),\n                ignoreHandleSelector: '.delete',\n                axis: this.getElementSortAxis(),\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                onSortChange: (this.settings.selectable ? () => {\n                    this.elementSelect.resetItemOrder();\n                } : null)\n            });\n        }\n    },\n\n    getElementSortAxis: function() {\n        return (this.settings.viewMode === 'list' ? 'y' : null);\n    },\n\n    canAddMoreElements: function() {\n        return (!this.settings.limit || this.$elements.length < this.settings.limit);\n    },\n\n    updateAddElementsBtn: function() {\n        if (this.canAddMoreElements()) {\n            this.enableAddElementsBtn();\n        } else {\n            this.disableAddElementsBtn();\n        }\n    },\n\n    disableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.addClass('hidden');\n        }\n    },\n\n    enableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.removeClass('hidden');\n        }\n    },\n\n    resetElements: function() {\n        if (this.$elements !== null) {\n            this.removeElements(this.$elements);\n        } else {\n            this.$elements = $();\n        }\n\n        this.addElements(this.getElements());\n    },\n\n    addElements: function($elements) {\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect.addItems($elements);\n        }\n\n        if (this.settings.sortable) {\n            this.elementSort.addItems($elements);\n        }\n\n        if (this.settings.editable) {\n            this._handleShowElementEditor = ev => {\n                var $element = $(ev.currentTarget);\n                if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                    this.elementEditor = this.createElementEditor($element);\n                }\n            };\n\n            this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n            if ($.isTouchCapable()) {\n                this.addListener($elements, 'taphold', this._handleShowElementEditor);\n            }\n        }\n\n        $elements.find('.delete').on('click dblclick', ev => {\n            this.removeElement($(ev.currentTarget).closest('.element'));\n            // Prevent this from acting as one of a double-click\n            ev.stopPropagation();\n        });\n\n        this.$elements = this.$elements.add($elements);\n\n        this.updateAddElementsBtn();\n\n        this.onAddElements();\n    },\n\n    createElementEditor: function($element, settings) {\n        if (!settings) {\n            settings = {};\n        }\n        settings.prevalidate = this.settings.prevalidate;\n        return Craft.createElementEditor(this.settings.elementType, $element, settings);\n    },\n\n    removeElements: function($elements) {\n        if (this.settings.selectable) {\n            this.elementSelect.removeItems($elements);\n        }\n\n        if (this.modal) {\n            var ids = [];\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $elements.eq(i).data('id');\n\n                if (id) {\n                    ids.push(id);\n                }\n            }\n\n            if (ids.length) {\n                this.modal.elementIndex.enableElementsById(ids);\n            }\n        }\n\n        // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n        $elements.children('input').prop('disabled', true);\n\n        this.$elements = this.$elements.not($elements);\n        this.updateAddElementsBtn();\n\n        this.onRemoveElements();\n    },\n\n    removeElement: function($element) {\n        this.removeElements($element);\n        this.animateElementAway($element, () => {\n            $element.remove();\n        });\n    },\n\n    animateElementAway: function($element, callback) {\n        $element.css('z-index', 0);\n\n        var animateCss = {\n            opacity: -1\n        };\n        animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n        if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n            animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n        }\n\n        // Pause the draft editor\n        if (window.draftEditor) {\n            window.draftEditor.pause();\n        }\n\n        $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n            callback();\n\n            // Resume the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.resume();\n            }\n        });\n    },\n\n    showModal: function() {\n        // Make sure we haven't reached the limit\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        if (!this.modal) {\n            this.modal = this.createModal();\n        } else {\n            this.modal.show();\n        }\n    },\n\n    createModal: function() {\n        return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n    },\n\n    getModalSettings: function() {\n        return $.extend({\n            closeOtherModals: false,\n            storageKey: this.modalStorageKey,\n            sources: this.settings.sources,\n            criteria: this.settings.criteria,\n            multiSelect: (this.settings.limit != 1),\n            showSiteMenu: this.settings.showSiteMenu,\n            disabledElementIds: this.getDisabledElementIds(),\n            onSelect: this.onModalSelect.bind(this)\n        }, this.settings.modalSettings);\n    },\n\n    getSelectedElementIds: function() {\n        var ids = [];\n\n        for (var i = 0; i < this.$elements.length; i++) {\n            ids.push(this.$elements.eq(i).data('id'));\n        }\n\n        return ids;\n    },\n\n    getDisabledElementIds: function() {\n        var ids = this.getSelectedElementIds();\n\n        if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n            ids.push(this.settings.sourceElementId);\n        }\n\n        if (this.settings.disabledElementIds) {\n            ids.push(...this.settings.disabledElementIds);\n        }\n\n        return ids;\n    },\n\n    onModalSelect: function(elements) {\n        if (this.settings.limit) {\n            // Cut off any excess elements\n            var slotsLeft = this.settings.limit - this.$elements.length;\n\n            if (elements.length > slotsLeft) {\n                elements = elements.slice(0, slotsLeft);\n            }\n        }\n\n        this.selectElements(elements);\n        this.updateDisabledElementsInModal();\n    },\n\n    selectElements: function(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            let elementInfo = elements[i],\n                $element = this.createNewElement(elementInfo);\n\n            this.appendElement($element);\n            this.addElements($element);\n            this.animateElementIntoPlace(elementInfo.$element, $element);\n\n            // Override the element reference with the new one\n            elementInfo.$element = $element;\n        }\n\n        this.onSelectElements(elements);\n    },\n\n    createNewElement: function(elementInfo) {\n        var $element = elementInfo.$element.clone();\n\n        // Make a couple tweaks\n        Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n        $element.addClass('removable');\n        $element.prepend(`<input type=\"hidden\" name=\"${this.settings.name}${this.settings.single ? '' : '[]'}\" value=\"${elementInfo.id}\">` +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        return $element;\n    },\n\n    appendElement: function($element) {\n        $element.appendTo(this.$elementsContainer);\n    },\n\n    animateElementIntoPlace: function($modalElement, $inputElement) {\n        var origOffset = $modalElement.offset(),\n            destOffset = $inputElement.offset(),\n            $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n        $inputElement.css('visibility', 'hidden');\n\n        $helper.css({\n            position: 'absolute',\n            zIndex: 10000,\n            top: origOffset.top,\n            left: origOffset.left\n        });\n\n        var animateCss = {\n            top: destOffset.top,\n            left: destOffset.left\n        };\n\n        $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n            $helper.remove();\n            $inputElement.css('visibility', 'visible');\n        });\n    },\n\n    updateDisabledElementsInModal: function() {\n        if (this.modal.elementIndex) {\n            this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n        }\n    },\n\n    getElementById: function(id) {\n        for (var i = 0; i < this.$elements.length; i++) {\n            var $element = this.$elements.eq(i);\n\n            if ($element.data('id') == id) {\n                return $element;\n            }\n        }\n    },\n\n    onSelectElements: function(elements) {\n        this.trigger('selectElements', {elements});\n        this.settings.onSelectElements(elements);\n\n        if (window.draftEditor) {\n            window.draftEditor.checkForm();\n        }\n    },\n\n    onAddElements: function () {\n        this.trigger('addElements');\n        this.settings.onAddElements();\n    },\n\n    onRemoveElements: function() {\n        this.trigger('removeElements');\n        this.settings.onRemoveElements();\n    }\n}, {\n    ADD_FX_DURATION: 200,\n    REMOVE_FX_DURATION: 200,\n\n    defaults: {\n        id: null,\n        name: null,\n        fieldId: null,\n        elementType: null,\n        sources: null,\n        criteria: {},\n        allowSelfRelations: false,\n        sourceElementId: null,\n        disabledElementIds: null,\n        viewMode: 'list',\n        single: false,\n        limit: null,\n        showSiteMenu: false,\n        modalStorageKey: null,\n        modalSettings: {},\n        onAddElements: $.noop,\n        onSelectElements: $.noop,\n        onRemoveElements: $.noop,\n        sortable: true,\n        selectable: true,\n        editable: true,\n        prevalidate: false,\n        editorSettings: {}\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend({\n    elementType: null,\n    elementIndex: null,\n\n    $body: null,\n    $selectBtn: null,\n    $sidebar: null,\n    $sources: null,\n    $sourceToggles: null,\n    $main: null,\n    $search: null,\n    $elements: null,\n    $tbody: null,\n    $primaryButtons: null,\n    $secondaryButtons: null,\n    $cancelBtn: null,\n    $footerSpinner: null,\n\n    init: function(elementType, settings) {\n        this.elementType = elementType;\n        this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n        // Build the modal\n        var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n            $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n            $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n        this.base($container, this.settings);\n\n        this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n        this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$primaryButtons);\n        this.$selectBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn disabled submit',\n            text: Craft.t('app', 'Select'),\n        }).appendTo(this.$primaryButtons);\n\n        this.$body = $body;\n\n        this.addListener(this.$cancelBtn, 'activate', 'cancel');\n        this.addListener(this.$selectBtn, 'activate', 'selectElements');\n    },\n\n    onFadeIn: function() {\n        if (!this.elementIndex) {\n            this._createElementIndex();\n        } else {\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.elementIndex.$search.trigger('focus');\n            }\n        }\n\n        this.base();\n    },\n\n    onSelectionChange: function() {\n        this.updateSelectBtnState();\n    },\n\n    updateSelectBtnState: function() {\n        if (this.$selectBtn) {\n            if (this.elementIndex.getSelectedElements().length) {\n                this.enableSelectBtn();\n            } else {\n                this.disableSelectBtn();\n            }\n        }\n    },\n\n    enableSelectBtn: function() {\n        this.$selectBtn.removeClass('disabled');\n    },\n\n    disableSelectBtn: function() {\n        this.$selectBtn.addClass('disabled');\n    },\n\n    enableCancelBtn: function() {\n        this.$cancelBtn.removeClass('disabled');\n    },\n\n    disableCancelBtn: function() {\n        this.$cancelBtn.addClass('disabled');\n    },\n\n    showFooterSpinner: function() {\n        this.$footerSpinner.removeClass('hidden');\n    },\n\n    hideFooterSpinner: function() {\n        this.$footerSpinner.addClass('hidden');\n    },\n\n    cancel: function() {\n        if (!this.$cancelBtn.hasClass('disabled')) {\n            this.hide();\n        }\n    },\n\n    selectElements: function() {\n        if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n            // TODO: This code shouldn't know about views' elementSelect objects\n            this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                elementInfo = this.getElementInfo($selectedElements);\n\n            this.onSelect(elementInfo);\n\n            if (this.settings.disableElementsOnSelect) {\n                this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n            }\n\n            if (this.settings.hideOnSelect) {\n                this.hide();\n            }\n        }\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $element = $($selectedElements[i]);\n            var elementInfo = Craft.getElementInfo($element);\n\n            info.push(elementInfo);\n        }\n\n        return info;\n    },\n\n    show: function() {\n        this.updateSelectBtnState();\n        this.base();\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo);\n    },\n\n    disable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.enable();\n        }\n\n        this.base();\n    },\n\n    _createElementIndex: function() {\n        // Get the modal body HTML based on the settings\n        var data = {\n            context: 'modal',\n            elementType: this.elementType,\n            sources: this.settings.sources\n        };\n\n        if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n            data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n        }\n\n        Craft.postActionRequest('elements/get-modal-body', data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.$body.html(response.html);\n\n                if (this.$body.has('.sidebar:not(.hidden)').length) {\n                    this.$body.addClass('has-sidebar');\n                }\n\n                // Initialize the element index\n                this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                    context: 'modal',\n                    modal: this,\n                    storageKey: this.settings.storageKey,\n                    criteria: this.settings.criteria,\n                    disabledElementIds: this.settings.disabledElementIds,\n                    selectable: true,\n                    multiSelect: this.settings.multiSelect,\n                    buttonContainer: this.$secondaryButtons,\n                    onSelectionChange: this.onSelectionChange.bind(this),\n                    hideSidebar: this.settings.hideSidebar,\n                    defaultSiteId: this.settings.defaultSiteId,\n                    defaultSource: this.settings.defaultSource\n                });\n\n                // Double-clicking or double-tapping should select the elements\n                this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                    // Make sure the touch targets are the same\n                    // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                    if (touchData.firstTap.target === touchData.secondTap.target) {\n                        this.selectElements();\n                    }\n                });\n            }\n        });\n    }\n}, {\n    defaults: {\n        resizable: true,\n        storageKey: null,\n        sources: null,\n        criteria: null,\n        multiSelect: false,\n        showSiteMenu: null,\n        disabledElementIds: [],\n        disableElementsOnSelect: false,\n        hideOnSelect: true,\n        onCancel: $.noop,\n        onSelect: $.noop,\n        hideSidebar: false,\n        defaultSiteId: null,\n        defaultSource: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend({\n    $source: null,\n    $target: null,\n    $form: null,\n    settings: null,\n\n    listening: null,\n    timeout: null,\n\n    init: function(source, target, settings) {\n        this.$source = $(source);\n        this.$target = $(target);\n        this.$form = this.$source.closest('form');\n\n        this.setSettings(settings);\n\n        this.startListening();\n    },\n\n    setNewSource: function(source) {\n        var listening = this.listening;\n        this.stopListening();\n\n        this.$source = $(source);\n\n        if (listening) {\n            this.startListening();\n        }\n    },\n\n    startListening: function() {\n        if (this.listening) {\n            return;\n        }\n\n        this.listening = true;\n\n        this.addListener(this.$source, 'input', 'onSourceTextChange');\n        this.addListener(this.$target, 'input', 'onTargetTextChange');\n        this.addListener(this.$form, 'submit', 'onFormSubmit');\n    },\n\n    stopListening: function() {\n        if (!this.listening) {\n            return;\n        }\n\n        this.listening = false;\n\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.removeAllListeners(this.$source);\n        this.removeAllListeners(this.$target);\n        this.removeAllListeners(this.$form);\n    },\n\n    onSourceTextChange: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout(this.updateTarget.bind(this), 250);\n    },\n\n    onTargetTextChange: function() {\n        if (this.$target.get(0) === document.activeElement) {\n            this.stopListening();\n        }\n    },\n\n    onFormSubmit: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.updateTarget();\n    },\n\n    updateTarget: function() {\n        if (!this.$target.is(':visible')) {\n            return;\n        }\n\n        var sourceVal = this.$source.val();\n\n        if (typeof sourceVal === 'undefined') {\n            // The source input may not exist anymore\n            return;\n        }\n\n        var targetVal = this.generateTargetValue(sourceVal);\n\n        this.$target.val(targetVal);\n\n        for (let i = 0; i < this.$target.length; i++) {\n            this.$target[i].dispatchEvent(new InputEvent('input', {\n                inputType: 'insertText',\n            }));\n            this.$target[i].dispatchEvent(new Event('input'));\n        }\n\n        // If the target already has focus, select its whole value to mimic\n        // the behavior if the value had already been generated and they just tabbed in\n        if (this.$target.is(':focus')) {\n            Craft.selectFullValue(this.$target);\n        }\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return sourceVal;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Tab manager\n */\nCraft.Tabs = Garnish.Base.extend({\n    $container: null,\n    $ul: null,\n    $menuBtn: null,\n    $tabs: null,\n    $selectedTab: null,\n    $focusableTab: null,\n    menu: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$ul = this.$container.find('> ul:first');\n        this.$tabs = this.$ul.find('> li > a');\n        this.$selectedTab = this.$tabs.filter('.sel:first');\n        this.$focusableTab = this.$tabs.filter('[tabindex=0]:first');\n        this.$menuBtn = this.$container.find('> .menubtn:first').menubtn();\n        this.menu = this.$menuBtn.data('menubtn').menu;\n\n        // Is there already a tab manager?\n        if (this.$container.data('tabs')) {\n            Garnish.log('Double-instantiating a tab manager on an element');\n            this.$container.data('tabs').destroy();\n        }\n\n        this.$container.data('tabs', this);\n\n        for (let i = 0; i < this.$tabs.length; i++) {\n            const $a = this.$tabs.eq(i);\n\n            // Does it link to an anchor?\n            const href = $a.attr('href');\n            if (href && href.charAt(0) === '#') {\n                this.addListener($a, 'keydown', ev => {\n                    if ([Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    }\n                });\n                this.addListener($a, 'click', ev => {\n                    ev.preventDefault();\n                    const $a = $(ev.currentTarget);\n                    this.selectTab(ev.currentTarget);\n                    this.makeTabFocusable(ev.currentTarget);\n                });\n\n                if (href.substr(1) === window.LOCATION_HASH) {\n                    $initialTab = $a;\n                }\n            }\n\n            this.addListener($a, 'keydown', ev => {\n                if (\n                    [Garnish.LEFT_KEY, Garnish.RIGHT_KEY].includes(ev.keyCode) &&\n                    $.contains(this.$ul[0], ev.currentTarget)\n                ) {\n                    let $tab;\n                    if (ev.keyCode === (Craft.orientation === 'ltr' ? Garnish.LEFT_KEY : Garnish.RIGHT_KEY)) {\n                        $tab = $(ev.currentTarget).parent().prev('li').children('a');\n                    } else {\n                        $tab = $(ev.currentTarget).parent().next('li').children('a');\n                    }\n                    if ($tab.length) {\n                        ev.preventDefault();\n                        this.makeTabFocusable($tab);\n                        $tab.focus();\n                        this.scrollToTab($tab);\n                    }\n                }\n            });\n        }\n\n        this.updateMenuBtn();\n\n        Garnish.$win.on('resize', () => {\n            this.updateMenuBtn();\n        });\n\n        // Prevent menu options from updating the URL\n        this.menu.$options.on('click', ev => {\n            const $option = $(ev.currentTarget);\n            if ($option.attr('href').charAt(0) === '#') {\n                ev.preventDefault();\n            }\n        });\n\n        this.menu.on('optionselect', ev => {\n            this.selectTab($(ev.selectedOption).data('id'))\n        });\n    },\n\n    selectTab: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$selectedTab[0]) {\n            return;\n        }\n\n        this.deselectTab();\n        this.$selectedTab = $tab.addClass('sel');\n        this.makeTabFocusable($tab);\n        this.scrollToTab($tab);\n\n        this.menu.$options.removeClass('sel');\n        this.menu.$options.filter(`[data-id=\"${$tab.data('id')}\"]`).addClass('sel');\n\n        this.trigger('selectTab', {\n            $tab: $tab,\n        });\n    },\n\n    deselectTab: function() {\n        const $tab = this.$selectedTab.removeClass('sel');\n        this.$selectedTab = null;\n\n        this.trigger('deselectTab', {\n            $tab: $tab,\n        });\n    },\n\n    makeTabFocusable: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$focusableTab[0]) {\n            return;\n        }\n\n        this.$focusableTab.attr('tabindex', '-1');\n        this.$focusableTab = $tab.attr('tabindex', '0');\n    },\n\n    scrollToTab: function(tab) {\n        const $tab = this._getTab(tab);\n        const scrollLeft = this.$ul.scrollLeft();\n        const tabOffset = $tab.offset().left;\n        const elemScrollOffset = tabOffset - this.$ul.offset().left;\n        let targetScrollLeft = false;\n\n        // Is the tab hidden on the left?\n        if (elemScrollOffset < 0) {\n            targetScrollLeft = scrollLeft + elemScrollOffset - 24;\n        } else {\n            const tabWidth = $tab.outerWidth();\n            const ulWidth = this.$ul.prop('clientWidth');\n\n            // Is it hidden to the right?\n            if (elemScrollOffset + tabWidth > ulWidth) {\n                targetScrollLeft = scrollLeft + (elemScrollOffset - (ulWidth - tabWidth)) + 24;\n            }\n        }\n\n        if (targetScrollLeft !== false) {\n            this.$ul.scrollLeft(targetScrollLeft);\n        }\n    },\n\n    updateMenuBtn: function() {\n        if (Math.floor(this.$ul.prop('scrollWidth') - 48) > this.$container.prop('clientWidth')) {\n            this.$ul.addClass('scrollable');\n            this.$menuBtn.removeClass('hidden');\n        } else {\n            this.$ul.removeClass('scrollable');\n            this.$menuBtn.addClass('hidden');\n        }\n    },\n\n    _getTab: function(tab) {\n        if (tab instanceof jQuery) {\n            return tab;\n        }\n\n        if (tab instanceof HTMLElement) {\n            return $(tab);\n        }\n\n        if (typeof tab !== 'string') {\n            throw 'Invalid tab ID';\n        }\n\n        const $tab = this.$tabs.filter(`[data-id=\"${tab}\"]`);\n\n        if (!$tab.length) {\n            throw `Invalid tab ID: ${tab}`;\n        }\n\n        return $tab;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend({\n    settings: null,\n    totalItems: null,\n    sorter: null,\n\n    $noItems: null,\n    $table: null,\n    $tbody: null,\n    $deleteBtns: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.AdminTable.defaults);\n\n        if (!this.settings.allowDeleteAll) {\n            this.settings.minItems = 1;\n        }\n\n        this.$noItems = $(this.settings.noItemsSelector);\n        this.$table = $(this.settings.tableSelector);\n        this.$tbody = this.$table.children('tbody');\n        this.totalItems = this.$tbody.children().length;\n\n        if (this.settings.sortable) {\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                onSortChange: this.reorderItems.bind(this),\n            });\n        }\n\n        this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n        this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n        this.updateUI();\n    },\n\n    addRow: function(row) {\n        if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(row).appendTo(this.$tbody),\n            $deleteBtn = $row.find('.delete');\n\n        if (this.settings.sortable) {\n            this.sorter.addItems($row);\n        }\n\n        this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n        this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n        this.totalItems++;\n\n        this.updateUI();\n    },\n\n    reorderItems: function() {\n        if (!this.settings.sortable) {\n            return;\n        }\n\n        // Get the new field order\n        var ids = [];\n\n        for (var i = 0; i < this.sorter.$items.length; i++) {\n            var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n            ids.push(id);\n        }\n\n        // Send it to the server\n        var data = {\n            ids: JSON.stringify(ids)\n        };\n\n        Craft.postActionRequest(this.settings.reorderAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.onReorderItems(ids);\n                    Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                } else {\n                    Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                }\n            }\n        });\n    },\n\n    handleDeleteBtnClick: function(event) {\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(event.target).closest('tr');\n\n        if (this.confirmDeleteItem($row)) {\n            this.deleteItem($row);\n        }\n    },\n\n    confirmDeleteItem: function($row) {\n        var name = this.getItemName($row);\n        return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name}));\n    },\n\n    deleteItem: function($row) {\n        var data = {\n            id: this.getItemId($row)\n        };\n\n        Craft.postActionRequest(this.settings.deleteAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.handleDeleteItemResponse(response, $row);\n            }\n        });\n    },\n\n    handleDeleteItemResponse: function(response, $row) {\n        var id = this.getItemId($row),\n            name = this.getItemName($row);\n\n        if (response.success) {\n            if (this.sorter) {\n                this.sorter.removeItems($row);\n            }\n\n            $row.remove();\n            this.totalItems--;\n            this.updateUI();\n            this.onDeleteItem(id);\n\n            Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name}));\n        } else {\n            Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name}));\n        }\n    },\n\n    onReorderItems: function(ids) {\n        this.settings.onReorderItems(ids);\n    },\n\n    onDeleteItem: function(id) {\n        this.settings.onDeleteItem(id);\n    },\n\n    getItemId: function($row) {\n        return $row.attr(this.settings.idAttribute);\n    },\n\n    getItemName: function($row) {\n        return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n    },\n\n    updateUI: function() {\n        // Show the \"No Whatever Exists\" message if there aren't any\n        if (this.totalItems === 0) {\n            this.$table.hide();\n            this.$noItems.removeClass('hidden');\n        } else {\n            this.$table.show();\n            this.$noItems.addClass('hidden');\n        }\n\n        // Disable the sort buttons if there's only one row\n        if (this.settings.sortable) {\n            var $moveButtons = this.$table.find('.move');\n\n            if (this.totalItems === 1) {\n                $moveButtons.addClass('disabled');\n            } else {\n                $moveButtons.removeClass('disabled');\n            }\n        }\n\n        // Disable the delete buttons if we've reached the minimum items\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            this.$deleteBtns.addClass('disabled');\n        } else {\n            this.$deleteBtns.removeClass('disabled');\n        }\n\n        // Hide the New Whatever button if we've reached the maximum items\n        if (this.settings.newItemBtnSelector) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                $(this.settings.newItemBtnSelector).addClass('hidden');\n            } else {\n                $(this.settings.newItemBtnSelector).removeClass('hidden');\n            }\n        }\n    }\n}, {\n    defaults: {\n        tableSelector: null,\n        noItemsSelector: null,\n        newItemBtnSelector: null,\n        idAttribute: 'data-id',\n        nameAttribute: 'data-name',\n        sortable: false,\n        allowDeleteAll: true,\n        minItems: 0,\n        maxItems: null,\n        reorderAction: null,\n        deleteAction: null,\n        reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n        reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n        confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n        deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n        deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n        onReorderItems: $.noop,\n        onDeleteItem: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend({\n    $filenameInput: null,\n\n    originalBasename: null,\n    originalExtension: null,\n    reloadIndex: false,\n    replaceAsset: null,\n\n    init: function(element, settings) {\n        this.on('updateForm', () => {\n            this.addListener(this.$sidebar.find('.preview-thumb-container .edit-btn'), 'click', 'showImageEditor');\n            this.addListener(this.$sidebar.find('.preview-thumb-container .preview-btn'), 'click', 'showImagePreview');\n\n            this.$filenameInput = this.$sidebar.find('.filename');\n            this.addListener(this.$filenameInput, 'focus', 'selectFilename');\n        });\n\n        this.on('closeSlideout', () => {\n            if (this.reloadIndex) {\n                if (this.settings.elementIndex) {\n                    this.settings.elementIndex.updateElements();\n                } else if (this.settings.input) {\n                    if (this.replaceAsset) {\n                        this.settings.input.replaceElement(this.$element.data('id'), this.replaceAsset);\n                    } else {\n                        this.settings.input.refreshThumbnail(this.$element.data('id'));\n                    }\n                }\n            }\n        });\n\n        this.base(element, settings);\n\n        this.settings.validators.push(() => this.validateExtension());\n    },\n\n    showImageEditor: function() {\n        new Craft.AssetImageEditor(this.$element.data('id'), {\n\n            onSave: (data) => {\n                if (data.elementId) {\n                    this.settings.elementId = this.replaceAsset = data.elementId;\n                }\n\n                this.reloadIndex = true;\n                this.load();\n            },\n        });\n    },\n\n    showImagePreview: function() {\n        var settings = {};\n\n        if (this.$element.data('image-width')) {\n            settings.startingWidth = this.$element.data('image-width');\n            settings.startingHeight = this.$element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal(this.$element.data('id'), null, settings);\n    },\n\n    selectFilename: function() {\n        if (typeof this.$filenameInput[0].selectionStart === 'undefined') {\n            return;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (this.originalBasename === null) {\n            this.originalBasename = basename;\n            this.originalExtension = extension;\n        }\n\n        this.$filenameInput[0].selectionStart = 0;\n        this.$filenameInput[0].selectionEnd = basename.length;\n\n        // Prevent the selection from changing by the mouseup event\n        this.$filenameInput.one('mouseup.keepselection', ev => {\n            ev.preventDefault();\n        });\n        setTimeout(() => {\n            this.$filenameInput.off('mouseup.keepselection');\n        }, 500);\n    },\n\n    validateExtension: function() {\n        if (this.originalBasename === null) {\n            return true;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (extension === this.originalExtension) {\n            return true;\n        }\n\n        // No extension?\n        if (!extension) {\n            // If filename changed as well, assume removal of extension a mistake\n            if (this.originalFilename !== basename) {\n                this.$filenameInput.val(`${Craft.rtrim(basename, '.')}.${this.originalExtension}`);\n                return true;\n            }\n\n            // If filename hasn't changed, make sure they want to remove extension\n            return confirm(Craft.t('app', 'Are you sure you want to remove the extension “.{ext}”?', {\n                ext: this.originalExtension,\n            }));\n        }\n\n        // If the extension has changed, make sure it's intentional\n        return confirm(Craft.t('app', 'Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?', {\n            oldExt: this.originalExtension,\n            newExt: extension\n        }));\n    },\n\n    _parseFilename: function() {\n        const parts = this.$filenameInput.val().split('.');\n        const extension = parts.length > 1 ? parts.pop() : null;\n        const basename = parts.join('.');\n        return {basename, extension};\n    },\n});\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend({\n    // jQuery objects\n    $body: null,\n    $footer: null,\n    $imageTools: null,\n    $buttons: null,\n    $cancelBtn: null,\n    $replaceBtn: null,\n    $saveBtn: null,\n    $editorContainer: null,\n    $straighten: null,\n    $croppingCanvas: null,\n    $spinnerCanvas: null,\n\n    // FabricJS objects\n    canvas: null,\n    image: null,\n    viewport: null,\n    focalPoint: null,\n    grid: null,\n    croppingCanvas: null,\n    clipper: null,\n    croppingRectangle: null,\n    cropperHandles: null,\n    cropperGrid: null,\n    croppingShade: null,\n    croppingAreaText: null,\n\n    // Image state attributes\n    imageStraightenAngle: 0,\n    viewportRotation: 0,\n    originalWidth: 0,\n    originalHeight: 0,\n    imageVerticeCoords: null,\n    zoomRatio: 1,\n\n    // Editor state attributes\n    animationInProgress: false,\n    currentView: '',\n    assetId: null,\n    cacheBust: null,\n    draggingCropper: false,\n    scalingCropper: false,\n    draggingFocal: false,\n    previousMouseX: 0,\n    previousMouseY: 0,\n    shiftKeyHeld: false,\n    editorHeight: 0,\n    editorWidth: 0,\n    cropperState: false,\n    scaleFactor: 1,\n    flipData: {},\n    focalPointState: false,\n    spinnerInterval: null,\n    maxImageSize: null,\n    lastLoadedDimensions: null,\n    imageIsLoading: false,\n    mouseMoveEvent: null,\n    croppingConstraint: false,\n    constraintOrientation: 'landscape',\n    showingCustomConstraint: false,\n\n    // Rendering proxy functions\n    renderImage: null,\n    renderCropper: null,\n\n    init: function(assetId, settings) {\n        this.cacheBust = Date.now();\n\n        this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n        if (this.settings.allowDegreeFractions === null) {\n            this.settings.allowDegreeFractions = Craft.isImagick;\n        }\n\n        this.assetId = assetId;\n        this.flipData = {x: 0, y: 0};\n\n        // Build the modal\n        this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n        this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n        this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n        this.base(this.$container, this.settings);\n\n        this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn cancel',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$buttons);\n        this.$replaceBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit save replace',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$buttons);\n\n        if (this.settings.allowSavingAsNew) {\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save copy',\n                text: Craft.t('app', 'Save as a new asset'),\n            }).appendTo(this.$buttons);\n            this.addListener(this.$saveBtn, 'activate', this.saveImage);\n        }\n\n        this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n        this.addListener(this.$cancelBtn, 'activate', this.hide);\n        this.removeListener(this.$shade, 'click');\n\n        this.maxImageSize = this.getMaxImageSize();\n        Craft.postActionRequest('assets/image-editor', {assetId}, this.loadEditor.bind(this));\n    },\n\n    /**\n     * Get the max image size that is viewable in the editor currently\n     */\n    getMaxImageSize: function() {\n        var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n        var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n        return Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n    },\n\n    /**\n     * Load the editor markup and start loading components and the image.\n     *\n     * @param data\n     */\n    loadEditor: function(data) {\n        if (!data.html) {\n            alert(Craft.t('app', 'Could not load the image editor.'));\n        }\n\n        this.$body.html(data.html);\n        this.$tabs = $('.tabs li', this.$body);\n        this.$viewsContainer = $('.views', this.$body);\n        this.$views = $('> div', this.$viewsContainer);\n        this.$imageTools = $('.image-container .image-tools', this.$body);\n        this.$editorContainer = $('.image-container .image', this.$body);\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this._showSpinner();\n\n        this.updateSizeAndPosition();\n\n        // Load the canvas on which we'll host our image and set up the proxy render function\n        this.canvas = new fabric.StaticCanvas('image-canvas');\n\n        // Set up the cropping canvas jquery element for tracking all the nice events\n        this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n        this.$croppingCanvas.width(this.editorWidth);\n        this.$croppingCanvas.height(this.editorHeight);\n\n        this.canvas.enableRetinaScaling = true;\n        this.renderImage = () => {\n            Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n        };\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        // Load image and set up the initial properties\n        fabric.Image.fromURL(imageUrl, imageObject => {\n            this.image = imageObject;\n            this.image.set({\n                originX: 'center',\n                originY: 'center',\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n            this.canvas.add(this.image);\n\n            this.originalHeight = this.image.getHeight();\n            this.originalWidth = this.image.getWidth();\n            this.zoomRatio = 1;\n\n            this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n            // Set up the image bounding box, viewport and position everything\n            this._setFittedImageVerticeCoordinates();\n            this._repositionEditorElements();\n\n            // Set up the focal point\n            var focalState = {\n                imageDimensions: this.getScaledImageDimensions(),\n                offsetX: 0,\n                offsetY: 0\n            };\n\n            var focal = false;\n            if (data.focalPoint) {\n                // Transform the focal point coordinates from relative to absolute\n                var focalData = data.focalPoint;\n\n                // Resolve for the current image dimensions.\n                var adjustedX = focalState.imageDimensions.width * focalData.x;\n                var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                focal = true;\n            }\n\n            this.storeFocalPointState(focalState);\n\n            if (focal) {\n                this._createFocalPoint();\n            }\n\n            this._createViewport();\n            this.storeCropperState();\n\n            // Add listeners to buttons\n            this._addControlListeners();\n\n            // Add mouse event listeners\n            this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n            this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n            this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n            this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n            this._hideSpinner();\n\n            // Render it, finally\n            this.renderImage();\n\n            // Make sure verything gets fired for the first tab\n            this.$tabs.first().trigger('click');\n        });\n    },\n\n    /**\n     * Reload the image to better fit the current available image editor viewport.\n     */\n    _reloadImage: function() {\n        if (this.imageIsLoading) {\n            return;\n        }\n\n        this.imageIsLoading = true;\n        this.maxImageSize = this.getMaxImageSize();\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        this.image.setSrc(imageUrl, imageObject => {\n            this.originalHeight = imageObject.getHeight();\n            this.originalWidth = imageObject.getWidth();\n            this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n            this.updateSizeAndPosition();\n            this.renderImage();\n            this.imageIsLoading = false;\n        });\n    },\n\n    /**\n     * Update the modal size and position on browser resize\n     */\n    updateSizeAndPosition: function() {\n        if (!this.$container) {\n            return;\n        }\n\n        // Fullscreen modal\n        var innerWidth = window.innerWidth;\n        var innerHeight = window.innerHeight;\n\n        this.$container.css({\n            'width': innerWidth,\n            'min-width': innerWidth,\n            'left': 0,\n\n            'height': innerHeight,\n            'min-height': innerHeight,\n            'top': 0\n        });\n\n        this.$body.css({\n            'height': innerHeight - 62\n        });\n\n        if (innerWidth < innerHeight) {\n            this.$container.addClass('vertical');\n        } else {\n            this.$container.removeClass('vertical');\n        }\n\n        if (this.$spinnerCanvas) {\n            this.$spinnerCanvas.css({\n                left: ((this.$spinnerCanvas.parent().width() / 2) - (this.$spinnerCanvas.width() / 2)) + 'px',\n                top: ((this.$spinnerCanvas.parent().height() / 2) - (this.$spinnerCanvas.height() / 2)) + 'px'\n            });\n        }\n\n        // If image is already loaded, make sure it looks pretty.\n        if (this.$editorContainer && this.image) {\n            this._repositionEditorElements();\n        }\n    },\n\n    /**\n     * Reposition the editor elements to accurately reflect the editor state with current dimensions\n     */\n    _repositionEditorElements: function() {\n        // Remember what the dimensions were before the resize took place\n        var previousEditorDimensions = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this.canvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        var currentScaledDimensions = this.getScaledImageDimensions();\n\n        // If we're cropping now, we have to reposition the cropper correctly in case\n        // the area for image changes, forcing the image size to change as well.\n        if (this.currentView === 'crop') {\n            this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n            var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            this._setFittedImageVerticeCoordinates();\n            this._repositionCropper(previouslyOccupiedArea);\n        } else {\n            // Otherwise just recalculate the image zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n        }\n\n        // Reposition the image relatively to the previous editor dimensions.\n        this._repositionImage(previousEditorDimensions);\n        this._repositionViewport();\n        this._repositionFocalPoint(previousEditorDimensions);\n        this._zoomImage();\n\n        this.renderImage();\n\n        if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n            this._reloadImage();\n        }\n    },\n\n    /**\n     * Reposition image based on how the editor dimensions have changed.\n     * This ensures keeping the image center offset, if there is any.\n     *\n     * @param previousEditorDimensions\n     */\n    _repositionImage: function(previousEditorDimensions) {\n        this.image.set({\n            left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n            top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n        });\n    },\n\n    /**\n     * Create the viewport for image editor.\n     */\n    _createViewport: function() {\n        this.viewport = new fabric.Rect({\n            width: this.image.width,\n            height: this.image.height,\n            fill: 'rgba(127,0,0,1)',\n            originX: 'center',\n            originY: 'center',\n            globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n            left: this.image.left,\n            top: this.image.top\n        });\n        this.canvas.add(this.viewport);\n        this.renderImage();\n    },\n\n    /**\n     * Create the focal point.\n     */\n    _createFocalPoint: function() {\n        var focalPointState = this.focalPointState;\n        var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n        var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n        var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n        // Adjust by image margins\n        focalX += this.image.left;\n        focalY += this.image.top;\n\n        var deltaX = 0;\n        var deltaY = 0;\n\n        // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n        if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n            if (this.currentView !== 'crop') {\n                deltaX = this.viewport.left - this.image.left;\n                deltaY = this.viewport.top - this.image.top;\n            } else {\n                // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                deltaX = this.clipper.left - this.image.left;\n                deltaY = this.clipper.top - this.image.top;\n            }\n\n            // Bump focal to middle of viewport\n            focalX += deltaX;\n            focalY += deltaY;\n\n            // Reflect changes in saved state\n            focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n        }\n\n        this.focalPoint = new fabric.Group([\n            new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n            new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n        ], {\n            originX: 'center',\n            originY: 'center',\n            left: focalX,\n            top: focalY\n        });\n\n        this.storeFocalPointState(focalPointState);\n        this.canvas.add(this.focalPoint);\n    },\n\n    /**\n     * Toggle focal point\n     */\n    toggleFocalPoint: function() {\n        if (!this.focalPoint) {\n            this._createFocalPoint();\n        } else {\n            this.canvas.remove(this.focalPoint);\n            this.focalPoint = null;\n        }\n\n        this.renderImage();\n    },\n\n    /**\n     * Reposition the viewport to handle editor resizing.\n     */\n    _repositionViewport: function() {\n        if (this.viewport) {\n            var dimensions = {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            // If we're cropping, nothing exciting happens for the viewport\n            if (this.currentView === 'crop') {\n                dimensions.width = this.editorWidth;\n                dimensions.height = this.editorHeight;\n            } else {\n                // If this is the first initial reposition, no cropper state yet\n                if (this.cropperState) {\n                    // Recall the state\n                    var state = this.cropperState;\n\n                    var scaledImageDimensions = this.getScaledImageDimensions();\n                    // Make sure we have the correct current image size\n                    var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                    // Set the viewport dimensions\n                    dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                    dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                    // Adjust the image position to show the correct part of the image in the viewport\n                    this.image.set({\n                        left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                        top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                    });\n                } else {\n                    $.extend(dimensions, this.getScaledImageDimensions());\n                }\n            }\n            this.viewport.set(dimensions);\n        }\n    },\n\n    _repositionFocalPoint: function(previousEditorDimensions) {\n        if (this.focalPoint) {\n            var offsetX = this.focalPoint.left - this.editorWidth / 2;\n            var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n            var currentWidth = this.image.width;\n            var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n            var ratio = newWidth / currentWidth / this.scaleFactor;\n\n            offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n            offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n            offsetX *= ratio;\n            offsetY *= ratio;\n\n            this.focalPoint.set({\n                left: this.editorWidth / 2 + offsetX,\n                top: this.editorHeight / 2 + offsetY\n            });\n        }\n    },\n\n    /**\n     * Return true if the image orientation has changed\n     */\n    hasOrientationChanged: function() {\n        return this.viewportRotation % 180 !== 0;\n    },\n\n    /**\n     * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n     */\n    getScaledImageDimensions: function() {\n        if (typeof this.getScaledImageDimensions._ === 'undefined') {\n            this.getScaledImageDimensions._ = {};\n        }\n\n        this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n        this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n        this.getScaledImageDimensions._.dimensions = {};\n        if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n            this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n            this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n        } else {\n            this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n            this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n        }\n\n        return this.getScaledImageDimensions._.dimensions;\n    },\n\n    /**\n     * Set the image dimensions to reflect the current zoom ratio.\n     */\n    _zoomImage: function() {\n        if (typeof this._zoomImage._ === 'undefined') {\n            this._zoomImage._ = {};\n        }\n\n        this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n        this.image.set({\n            width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n            height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n        });\n    },\n\n    /**\n     * Set up listeners for the controls.\n     */\n    _addControlListeners: function() {\n        // Tabs\n        this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n        // Focal point\n        this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n        // Rotate controls\n        this.addListener($('.rotate-left'), 'click', function() {\n            this.rotateImage(-90);\n        });\n        this.addListener($('.rotate-right'), 'click', function() {\n            this.rotateImage(90);\n        });\n        this.addListener($('.flip-vertical'), 'click', function() {\n            this.flipImage('y');\n        });\n        this.addListener($('.flip-horizontal'), 'click', function() {\n            this.flipImage('x');\n        });\n\n        // Straighten slider\n        this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n            onStart: () => {\n                this._showGrid();\n            },\n            onChange: slider => {\n                this.straighten(slider);\n            },\n            onEnd: () => {\n                this._hideGrid();\n                this._cleanupFocalPointAfterStraighten();\n            },\n        });\n\n        // Cropper scale modifier key\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = true;\n            }\n        });\n        this.addListener(Garnish.$doc, 'keyup', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = false;\n            }\n        });\n\n        this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n        this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n        this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n    },\n\n    /**\n     * Handle a constraint button click.\n     *\n     * @param ev\n     */\n    _handleConstraintClick: function(ev) {\n        var constraint = $(ev.currentTarget).data('constraint');\n        var $target = $(ev.currentTarget);\n        $target.siblings().removeClass('active');\n        $target.addClass('active');\n\n        if (constraint == 'custom') {\n            this._showCustomConstraint();\n            this._applyCustomConstraint();\n            return;\n        }\n\n        this._hideCustomConstraint();\n\n        this.setCroppingConstraint(constraint);\n        this.enforceCroppingConstraint();\n    },\n\n    /**\n     * Handle an orientation switch click.\n     *\n     * @param ev\n     */\n    _handleOrientationClick: function(ev) {\n        if (ev.currentTarget.value === this.constraintOrientation) {\n            return;\n        }\n        this.constraintOrientation = ev.currentTarget.value;\n\n        var $constraints = $('.constraint.flip', this.$container);\n\n        for (var i = 0; i < $constraints.length; i++) {\n            var $constraint = $($constraints[i]);\n            $constraint.data('constraint', 1 / $constraint.data('constraint'));\n            $constraint.html($constraint.html().split(':').reverse().join(':'));\n        }\n\n        $constraints.filter('.active').click();\n    },\n\n    /**\n     * Apply the custom ratio set in the inputs\n     */\n    _applyCustomConstraint: function() {\n        var constraint = this._getCustomConstraint();\n\n        if (constraint.w > 0 && constraint.h > 0) {\n            this.setCroppingConstraint(constraint.w / constraint.h);\n            this.enforceCroppingConstraint();\n        }\n    },\n\n    /**\n     * Get the custom constraint.\n     *\n     * @returns {{w: *, h: *}}\n     */\n    _getCustomConstraint: function() {\n        var w = parseFloat($('.custom-constraint-w').val());\n        var h = parseFloat($('.custom-constraint-h').val());\n        return {\n            w: isNaN(w) ? 0 : w,\n            h: isNaN(h) ? 0 : h,\n        }\n    },\n\n    /**\n     * Set the custom constraint.\n     *\n     * @param w\n     * @param h\n     */\n    _setCustomConstraint: function(w, h) {\n        $('.custom-constraint-w').val(parseFloat(w));\n        $('.custom-constraint-h').val(parseFloat(h));\n    },\n\n    /**\n     * Hide the custom constraint inputs.\n     */\n    _hideCustomConstraint: function() {\n        this.showingCustomConstraint = false;\n        $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n        $('.orientation', this.$container).removeClass('hidden');\n    },\n\n    /**\n     * Show the custom constraint inputs.\n     */\n    _showCustomConstraint: function() {\n        if (this.showingCustomConstraint) {\n            return;\n        }\n\n        this.showingCustomConstraint = true;\n        $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n        $('.orientation', this.$container).addClass('hidden');\n    },\n\n    /**\n     * Handle tab click.\n     *\n     * @param ev\n     */\n    _handleTabClick: function(ev) {\n        if (!this.animationInProgress) {\n            var $tab = $(ev.currentTarget);\n            var view = $tab.data('view');\n            this.$tabs.removeClass('selected');\n            $tab.addClass('selected');\n            this.showView(view);\n        }\n    },\n\n    /**\n     * Show a view.\n     *\n     * @param view\n     */\n    showView: function(view) {\n        if (this.currentView === view) {\n            return;\n        }\n\n        this.$views.addClass('hidden');\n        var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n        $view.removeClass('hidden');\n\n        if (view === 'rotate') {\n            this.enableSlider();\n        } else {\n            this.disableSlider();\n        }\n\n        // Now that most likely our editor dimensions have changed, time to reposition stuff\n        this.updateSizeAndPosition();\n\n        // See if we have to enable or disable crop mode as we transition between tabs\n        if (this.currentView === 'crop' && view !== 'crop') {\n            this.disableCropMode();\n        } else if (this.currentView !== 'crop' && view === 'crop') {\n            this.enableCropMode();\n        }\n\n        // Mark the current view\n        this.currentView = view;\n    },\n\n    /**\n     * Store the current cropper state.\n     *\n     * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n     * as the basis for recalculating the cropper position and dimensions.\n     *\n     * @param [state]\n     */\n    storeCropperState: function(state) {\n        if (typeof this.storeCropperState._ === 'undefined') {\n            this.storeCropperState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.cropperState = state;\n        } else if (this.clipper) {\n            this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n            this.cropperState = {\n                offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        } else {\n            this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n            this.cropperState = {\n                offsetX: 0,\n                offsetY: 0,\n                height: this.storeCropperState._.dimensions.height,\n                width: this.storeCropperState._.dimensions.width,\n                imageDimensions: this.storeCropperState._.dimensions\n            };\n        }\n    },\n\n    /**\n     * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n     */\n    storeFocalPointState: function(state) {\n        if (typeof this.storeFocalPointState._ === 'undefined') {\n            this.storeFocalPointState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.focalPointState = state;\n        } else if (this.focalPoint) {\n            this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n            this.focalPointState = {\n                offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        }\n    },\n\n    /**\n     * Rotate the image along with the viewport.\n     *\n     * @param degrees\n     */\n    rotateImage: function(degrees) {\n        if (!this.animationInProgress) {\n            // We're not that kind of an establishment, sir.\n            if (degrees !== 90 && degrees !== -90) {\n                return false;\n            }\n\n            this.animationInProgress = true;\n            this.viewportRotation += degrees;\n\n            // Normalize the viewport rotation angle so it's between 0 and 359\n            this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n            var newAngle = this.image.angle + degrees;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var imageZoomRatio;\n\n            if (this.hasOrientationChanged()) {\n                imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n            } else {\n                imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n            }\n\n            // In cases when for some reason we've already zoomed in on the image,\n            // use existing zoom.\n            if (this.zoomRatio > imageZoomRatio) {\n                imageZoomRatio = this.zoomRatio;\n            }\n\n            var viewportProperties = {\n                angle: degrees === 90 ? '+=90' : '-=90'\n            };\n\n            var imageProperties = {\n                angle: newAngle,\n                width: scaledImageDimensions.width * imageZoomRatio,\n                height: scaledImageDimensions.height * imageZoomRatio\n            };\n\n            var scaleFactor = 1;\n            if (this.scaleFactor < 1) {\n                scaleFactor = 1 / this.scaleFactor;\n                this.scaleFactor = 1;\n            } else {\n                if (this.viewport.width > this.editorHeight) {\n                    scaleFactor = this.editorHeight / this.viewport.width;\n                } else if (this.viewport.height > this.editorWidth) {\n                    scaleFactor = this.editorWidth / this.viewport.height;\n                }\n                this.scaleFactor = scaleFactor;\n            }\n\n            if (scaleFactor < 1) {\n                imageProperties.width *= scaleFactor;\n                imageProperties.height *= scaleFactor;\n            }\n\n            var state = this.cropperState;\n\n            // Make sure we reposition the image as well to focus on the same image area\n            var deltaX = state.offsetX;\n            var deltaY = state.offsetY;\n            var angleInRadians = degrees * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n            var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n            imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n            state.offsetX = newDeltaX;\n            state.offsetY = newDeltaY;\n\n            var temp = state.width;\n            state.width = state.height;\n            state.height = temp;\n\n            this.storeCropperState(state);\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            }\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    // If we're zooming the image in or out, better do the same to viewport\n                    var temp = this.viewport.height * scaleFactor;\n                    this.viewport.height = this.viewport.width * scaleFactor;\n                    this.viewport.width = temp;\n                    this.viewport.set({angle: 0});\n                },\n            });\n\n            // Animate the rotation and dimension change\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                    this.image.set({angle: cleanAngle});\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        this._adjustFocalPointByAngle(degrees);\n                        this.straighten(this.straighteningInput);\n                        this.canvas.add(this.focalPoint);\n                    } else {\n                        this._resetFocalPointPosition();\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Flip an image along an axis.\n     *\n     * @param axis\n     */\n    flipImage: function(axis) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            if (this.hasOrientationChanged()) {\n                axis = axis === 'y' ? 'x' : 'y';\n            }\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            } else {\n                this._resetFocalPointPosition();\n            }\n\n            var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            this.straighteningInput.setValue(-this.imageStraightenAngle);\n            this.imageStraightenAngle = -this.imageStraightenAngle;\n            var properties = {\n                angle: this.viewportRotation + this.imageStraightenAngle\n            };\n\n            var deltaY, deltaX;\n            var cropperState = this.cropperState;\n            var focalPointState = this.focalPointState;\n\n            // Reposition the image, viewport, and stored cropper and focal point states.\n            if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                cropperState.offsetX = -cropperState.offsetX;\n                focalPointState.offsetX = -focalPointState.offsetX;\n                deltaX = this.image.left - editorCenter.x;\n                properties.left = editorCenter.x - deltaX;\n            } else {\n                cropperState.offsetY = -cropperState.offsetY;\n                focalPointState.offsetY = -focalPointState.offsetY;\n                deltaY = this.image.top - editorCenter.y;\n                properties.top = editorCenter.y - deltaY;\n            }\n\n            if (axis === 'y') {\n                properties.scaleY = this.image.scaleY * -1;\n                this.flipData.y = 1 - this.flipData.y;\n            } else {\n                properties.scaleX = this.image.scaleX * -1;\n                this.flipData.x = 1 - this.flipData.x;\n            }\n\n            this.storeCropperState(cropperState);\n            this.storeFocalPointState(focalPointState);\n\n            this.image.animate(properties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        // Well this is handy\n                        this._adjustFocalPointByAngle(0);\n                        this.canvas.add(this.focalPoint);\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Perform the straightening with input slider.\n     *\n     * @param {Craft.SlideRuleInput} slider\n     */\n    straighten: function(slider) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            var previousAngle = this.image.angle;\n\n            this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n            // Straighten the image\n            this.image.set({\n                angle: this.viewportRotation + this.imageStraightenAngle\n            });\n\n            // Set the new zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            this._zoomImage();\n\n            if (this.cropperState) {\n                this._adjustEditorElementsOnStraighten(previousAngle);\n            }\n\n            this.renderImage();\n\n            this.animationInProgress = false;\n        }\n    },\n\n    /**\n     * Adjust the cropped viewport when straightening the image to correct for\n     * bumping into edges, keeping focus on the cropped area center and to\n     * maintain the illusion that the image is being straightened relative to the viewport center.\n     *\n     * @param {integer} previousAngle integer the previous image angle before straightening\n     */\n    _adjustEditorElementsOnStraighten: function(previousAngle) {\n        var scaledImageDimensions = this.getScaledImageDimensions();\n        var angleDelta = this.image.angle - previousAngle;\n        var state = this.cropperState;\n\n        var currentZoomRatio = this.zoomRatio;\n        var adjustmentRatio = 1;\n\n        var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n        do {\n            // Get the cropper center coordinates\n            var cropperCenterX = state.offsetX;\n            var cropperCenterY = state.offsetY;\n            var angleInRadians = angleDelta * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n            newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n            sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Figure out the final image offset to keep the viewport focused where we need it\n            deltaX = newCenterX * currentZoomRatio * sizeFactor;\n            deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n            // If the image would creep in the viewport, figure out how to math around it.\n            var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n            var rectangle = {\n                width: this.viewport.width,\n                height: this.viewport.height,\n                left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n            };\n            adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n            currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n            // If we had to make adjustments, do the calculations again\n        } while (adjustmentRatio !== 1);\n\n        // Reposition the image correctly\n        this.image.set({\n            left: this.editorWidth / 2 - deltaX,\n            top: this.editorHeight / 2 - deltaY\n        });\n\n        // Finally, store the new cropper state to reflect the rotation change.\n        state.offsetX = newCenterX;\n        state.offsetY = newCenterY;\n        state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n        state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n        this.storeCropperState(state);\n\n        // Zoom the image in and we're done.\n        this.zoomRatio = currentZoomRatio;\n\n        if (this.focalPoint) {\n            this._adjustFocalPointByAngle(angleDelta);\n\n            if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 0});\n            } else {\n                this.focalPoint.set({opacity: 1});\n            }\n        } else if (angleDelta !== 0) {\n            this._resetFocalPointPosition();\n        }\n\n        this._zoomImage();\n    },\n\n    /**\n     * If focal point is active and outside of viewport after straightening, reset it.\n     */\n    _cleanupFocalPointAfterStraighten: function() {\n        if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n            this.focalPoint.set({opacity: 1});\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n            this.toggleFocalPoint();\n        }\n    },\n\n    /**\n     * Reset focal point to the middle of image.\n     */\n    _resetFocalPointPosition: function() {\n        var state = this.focalPointState;\n        state.offsetX = 0;\n        state.offsetY = 0;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n     *\n     * @param object\n     * @param containingObject\n     *\n     * @returns {boolean}\n     */\n    _isCenterInside: function(object, containingObject) {\n        return (object.left > containingObject.left - containingObject.width / 2\n            && object.top > containingObject.top - containingObject.height / 2\n            && object.left < containingObject.left + containingObject.width / 2\n            && object.top < containingObject.top + containingObject.height / 2\n        );\n    },\n\n    /**\n     * Adjust the focal point by an angle in degrees.\n     * @param angle\n     */\n    _adjustFocalPointByAngle: function(angle) {\n        var angleInRadians = angle * (Math.PI / 180);\n        var state = this.focalPointState;\n\n        var focalX = state.offsetX;\n        var focalY = state.offsetY;\n\n        // Calculate how the focal point would need to move in a circle to keep on the same spot\n        // on the image if it was rotated with zoom intact.\n        var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n        var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n        var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n        var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n        var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n        this.focalPoint.left = this.image.left + adjustedFocalX;\n        this.focalPoint.top = this.image.top + adjustedFocalY;\n\n        state.offsetX = newFocalX;\n        state.offsetY = newFocalY;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n     * If the rectangle fits, 1 will be returned.\n     *\n     * @param rectangle\n     * @param containingVertices\n     */\n    _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n        var rectangleVertices = this._getRectangleVertices(rectangle);\n        var vertex;\n\n        // Check if any of the viewport vertices end up out of bounds\n        for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n            vertex = rectangleVertices[verticeIndex];\n\n            if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                break;\n            }\n\n            vertex = false;\n        }\n\n        // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n        var adjustmentRatio;\n\n        if (!vertex) {\n            adjustmentRatio = 1;\n        } else {\n            // Find out which edge got crossed by the vertex\n            var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n            var rectangleCenter = {\n                x: rectangle.left + rectangle.width / 2,\n                y: rectangle.top + rectangle.height / 2\n            };\n\n            // Calculate how much further that edge needs to be.\n            // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n            var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n            var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n            // Adjust the zoom ratio\n            adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n        }\n\n        return adjustmentRatio;\n    },\n\n    /**\n     * Save the image.\n     *\n     * @param ev\n     */\n    saveImage: function(ev) {\n        var $button = $(ev.currentTarget);\n        if ($button.hasClass('disabled')) {\n            return false;\n        }\n\n        $('.btn', this.$buttons).addClass('disabled');\n        this.$buttons.append('<div class=\"spinner\"></div>');\n\n        var postData = {\n            assetId: this.assetId,\n            viewportRotation: this.viewportRotation,\n            imageRotation: this.imageStraightenAngle,\n            replace: $button.hasClass('replace') ? 1 : 0\n        };\n\n        if (this.cropperState) {\n            var cropData = {};\n\n            cropData.height = this.cropperState.height;\n            cropData.width = this.cropperState.width;\n            cropData.offsetX = this.cropperState.offsetX;\n            cropData.offsetY = this.cropperState.offsetY;\n\n            postData.imageDimensions = this.cropperState.imageDimensions;\n\n            postData.cropData = cropData;\n        } else {\n            postData.imageDimensions = this.getScaledImageDimensions();\n        }\n\n        if (this.focalPoint) {\n            postData.focalPoint = this.focalPointState;\n        }\n\n        postData.flipData = this.flipData;\n        postData.zoom = this.zoomRatio;\n\n        Craft.postActionRequest('assets/save-image', postData, data => {\n            this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n            if (data.error) {\n                alert(data.error);\n                return;\n            }\n\n            this.onSave(data);\n            this.hide();\n            Craft.cp.runQueue();\n        });\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToCoverRatio: function(dimensions) {\n        // Convert the angle to radians\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        // Calculate the dimensions of the scaled image using the magic of math\n        var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n        var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n        // Calculate the ratio\n        return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToFitRatio: function(dimensions) {\n        // Get the bounding box for a rotated image\n        var boundingBox = this._getImageBoundingBox(dimensions);\n\n        // Scale the bounding box to fit\n        var scale = 1;\n        if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n            var vertScale = this.editorHeight / boundingBox.height;\n            var horiScale = this.editorWidth / boundingBox.width;\n            scale = Math.min(horiScale, vertScale);\n        }\n\n        return scale;\n    },\n\n    /**\n     * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n     */\n    getCombinedZoomRatio: function(dimensions) {\n        return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n    },\n\n    /**\n     * Draw the grid.\n     *\n     * @private\n     */\n    _showGrid: function() {\n        if (!this.grid) {\n            var strokeOptions = {\n                strokeWidth: 1,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            var lineCount = 8;\n            var gridWidth = this.viewport.width;\n            var gridHeight = this.viewport.height;\n            var xStep = gridWidth / (lineCount + 1);\n            var yStep = gridHeight / (lineCount + 1);\n\n            var grid = [\n                new fabric.Rect({\n                    strokeWidth: 2,\n                    stroke: 'rgba(255,255,255,1)',\n                    originX: 'center',\n                    originY: 'center',\n                    width: gridWidth,\n                    height: gridHeight,\n                    left: gridWidth / 2,\n                    top: gridHeight / 2,\n                    fill: 'rgba(255,255,255,0)'\n                })\n            ];\n\n            var i;\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n            }\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n            }\n\n            this.grid = new fabric.Group(grid, {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                angle: this.viewport.angle\n            });\n\n            this.canvas.add(this.grid);\n            this.renderImage();\n        }\n    },\n\n    /**\n     * Hide the grid\n     */\n    _hideGrid: function() {\n        this.canvas.remove(this.grid);\n        this.grid = null;\n        this.renderImage();\n    },\n\n    /**\n     * Remove all the events when hiding the editor.\n     */\n    onFadeOut: function() {\n        this.destroy();\n    },\n\n    /**\n     * Make sure underlying content is not scrolled by accident.\n     */\n    show: function() {\n        this.base();\n        Garnish.$bod.addClass('no-scroll');\n    },\n\n    /**\n     * Allow the content to scroll.\n     */\n    hide: function() {\n        this.removeAllListeners();\n        this.straighteningInput.removeAllListeners();\n        Garnish.$bod.removeClass('no-scroll');\n        this.base();\n    },\n\n    /**\n     * onSave callback.\n     */\n    onSave: function(data) {\n        this.settings.onSave(data);\n        this.trigger('save');\n    },\n\n    /**\n     * Enable the rotation slider.\n     */\n    enableSlider: function() {\n        this.$imageTools.removeClass('hidden');\n    },\n\n    /**\n     * Disable the rotation slider.\n     */\n    disableSlider: function() {\n        this.$imageTools.addClass('hidden');\n    },\n\n    /**\n     * Switch to crop mode.\n     */\n    enableCropMode: function() {\n        var imageDimensions = this.getScaledImageDimensions();\n        this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n        var viewportProperties = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var callback = () => {\n            this._setFittedImageVerticeCoordinates();\n\n            // Restore cropper\n            var state = this.cropperState;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Restore based on the stored information\n            var cropperData = {\n                left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                width: state.width * sizeFactor * this.zoomRatio,\n                height: state.height * sizeFactor * this.zoomRatio\n            };\n\n            this._showCropper(cropperData);\n\n            if (this.focalPoint) {\n                sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Switch out of crop mode.\n     */\n    disableCropMode: function() {\n        var viewportProperties = {};\n\n        this._hideCropper();\n        var imageDimensions = this.getScaledImageDimensions();\n        var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n        var inverseZoomFactor = targetZoom / this.zoomRatio;\n        this.zoomRatio = targetZoom;\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var offsetX = this.clipper.left - this.image.left;\n        var offsetY = this.clipper.top - this.image.top;\n\n        var imageOffsetX = offsetX * inverseZoomFactor;\n        var imageOffsetY = offsetY * inverseZoomFactor;\n        imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n        imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n        // Calculate the cropper dimensions after all the zooming\n        viewportProperties.height = this.clipper.height * inverseZoomFactor;\n        viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n        if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n            if (this.focalPoint) {\n                this.toggleFocalPoint();\n            }\n\n            this._resetFocalPointPosition();\n        }\n\n        var callback = () => {\n            // Reposition focal point correctly\n            if (this.focalPoint) {\n                var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Transition between cropping end editor modes\n     *\n     * @param callback\n     * @param imageProperties\n     * @param viewportProperties\n     * @private\n     */\n    _editorModeTransition: function(callback, imageProperties, viewportProperties) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            // Without this it looks semi-broken during animation\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n                this.renderImage();\n            }\n\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    callback();\n                    this.animationInProgress = false;\n                    this.renderImage();\n                },\n            });\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration\n            });\n        }\n    },\n\n    _showSpinner: function() {\n        this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n        var canvas = document.getElementById('spinner-canvas');\n        var context = canvas.getContext('2d');\n        var start = new Date();\n        var lines = 16,\n            cW = context.canvas.width,\n            cH = context.canvas.height;\n\n        var draw = function() {\n            var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n            context.save();\n            context.clearRect(0, 0, cW, cH);\n            context.translate(cW / 2, cH / 2);\n            context.rotate(Math.PI * 2 * rotation);\n            for (var i = 0; i < lines; i++) {\n                context.beginPath();\n                context.rotate(Math.PI * 2 / lines);\n                context.moveTo(cW / 10, 0);\n                context.lineTo(cW / 4, 0);\n                context.lineWidth = cW / 30;\n                context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                context.stroke();\n            }\n            context.restore();\n        };\n        this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n    },\n\n    _hideSpinner: function() {\n        window.clearInterval(this.spinnerInterval);\n        this.$spinnerCanvas.remove();\n        this.$spinnerCanvas = null;\n    },\n\n    /**\n     * Show the cropper.\n     *\n     * @param clipperData\n     */\n    _showCropper: function(clipperData) {\n        this._setupCropperLayer(clipperData);\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Hide the cropper.\n     */\n    _hideCropper: function() {\n        if (this.clipper) {\n            this.croppingCanvas.remove(this.clipper);\n            this.croppingCanvas.remove(this.croppingShade);\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n\n            this.croppingCanvas = null;\n            this.renderCropper = null;\n        }\n    },\n\n    /**\n     * Draw the cropper.\n     *\n     * @param clipperData\n     */\n    _setupCropperLayer: function(clipperData) {\n        // Set up the canvas for cropper\n        this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n            backgroundColor: 'rgba(0,0,0,0)',\n            hoverCursor: 'default',\n            selection: false\n        });\n\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        this.renderCropper = () => Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n\n        $('#cropping-canvas', this.$editorContainer).css({\n            position: 'absolute',\n            top: 0,\n            left: 0\n        });\n\n        this.croppingShade = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: this.editorWidth,\n            height: this.editorHeight,\n            fill: 'rgba(0,0,0,0.7)'\n        });\n\n        // Calculate the cropping rectangle size\n        var imageDimensions = this.getScaledImageDimensions();\n        var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n        var rectWidth = imageDimensions.width / rectangleRatio;\n        var rectHeight = imageDimensions.height / rectangleRatio;\n\n        if (this.hasOrientationChanged()) {\n            var temp = rectHeight;\n            rectHeight = rectWidth;\n            rectWidth = temp;\n        }\n\n        // Set up the cropping viewport rectangle\n        this.clipper = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: rectWidth,\n            height: rectHeight,\n            stroke: 'black',\n            fill: 'rgba(128,0,0,1)',\n            strokeWidth: 0\n        });\n\n        // Set from clipper data\n        if (clipperData) {\n            this.clipper.set(clipperData);\n        }\n\n        this.clipper.globalCompositeOperation = 'destination-out';\n        this.croppingCanvas.add(this.croppingShade);\n        this.croppingCanvas.add(this.clipper);\n    },\n\n    /**\n     * Redraw the cropper boundaries\n     */\n    _redrawCropperElements: function() {\n        if (typeof this._redrawCropperElements._ === 'undefined') {\n            this._redrawCropperElements._ = {};\n        }\n\n        if (this.cropperHandles) {\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n        }\n        this._redrawCropperElements._.lineOptions = {\n            strokeWidth: 4,\n            stroke: 'rgb(255,255,255)',\n            fill: false\n        };\n\n        this._redrawCropperElements._.gridOptions = {\n            strokeWidth: 2,\n            stroke: 'rgba(255,255,255,0.5)'\n        };\n\n        // Draw the handles\n        this._redrawCropperElements._.pathGroup = [\n            new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n        ];\n\n        this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n            left: this.clipper.left,\n            top: this.clipper.top,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        // Don't forget the rectangle\n        this.croppingRectangle = new fabric.Rect({\n            left: this.clipper.left,\n            top: this.clipper.top,\n            width: this.clipper.width,\n            height: this.clipper.height,\n            fill: 'rgba(0,0,0,0)',\n            stroke: 'rgba(255,255,255,0.8)',\n            strokeWidth: 2,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        this.cropperGrid = new fabric.Group(\n            [\n                new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n            ], {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n        this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n        this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n        if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n            this._redrawCropperElements._.cropTextTop -= 24;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n        }\n\n        this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n            left: this.croppingRectangle.left,\n            top: this._redrawCropperElements._.cropTextTop,\n            fontSize: 13,\n            fill: 'rgb(200,200,200)',\n            backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n            font: 'Craft',\n            width: 70,\n            height: 15,\n            originX: 'center',\n            originY: 'center',\n            textAlign: 'center'\n        });\n\n        this.croppingCanvas.add(this.cropperHandles);\n        this.croppingCanvas.add(this.cropperGrid);\n        this.croppingCanvas.add(this.croppingRectangle);\n        this.croppingCanvas.add(this.croppingAreaText);\n    },\n\n    /**\n     * Reposition the cropper when the image editor dimensions change.\n     *\n     * @param previousImageArea\n     */\n    _repositionCropper: function(previousImageArea) {\n        if (!this.croppingCanvas) {\n            return;\n        }\n\n        // Get the current clipper offset relative to center\n        var currentOffset = {\n            x: this.clipper.left - this.croppingCanvas.width / 2,\n            y: this.clipper.top - this.croppingCanvas.height / 2\n        };\n\n        // Resize the cropping canvas\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        // Check by what factor will the new final bounding box be different\n        var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n        var areaFactor = currentArea.width / previousImageArea.width;\n\n        // Adjust the cropper size to scale along with the bounding box\n        this.clipper.width = Math.round(this.clipper.width * areaFactor);\n        this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n        // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n        // for editor size changes and then multiply by the size factor to adjust for image size changes\n        this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n        this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n        // Resize the cropping shade\n        this.croppingShade.set({\n            width: this.editorWidth,\n            height: this.editorHeight,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        });\n\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Get the dimensions of a bounding rectangle by a set of four coordinates.\n     *\n     * @param coordinateSet\n     */\n    _getBoundingRectangle: function(coordinateSet) {\n        return {\n            width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n            height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n        };\n    },\n\n    /**\n     * Handle the mouse being clicked.\n     *\n     * @param ev\n     */\n    _handleMouseDown: function(ev) {\n        // Focal before resize before dragging\n        var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n        var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n        var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n        if (handle || move || focal) {\n            this.previousMouseX = ev.pageX;\n            this.previousMouseY = ev.pageY;\n\n            if (focal) {\n                this.draggingFocal = true;\n            } else if (handle) {\n                this.scalingCropper = handle;\n            } else if (move) {\n                this.draggingCropper = true;\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse being moved.\n     *\n     * @param ev\n     */\n    _handleMouseMove: function(ev) {\n        if (this.mouseMoveEvent !== null) {\n            Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n        }\n        this.mouseMoveEvent = ev;\n    },\n\n    _handleMouseMoveInternal: function() {\n        if (this.mouseMoveEvent === null) {\n            return;\n        }\n\n        if (this.focalPoint && this.draggingFocal) {\n            this._handleFocalDrag(this.mouseMoveEvent);\n            this.storeFocalPointState();\n            this.renderImage();\n        } else if (this.draggingCropper || this.scalingCropper) {\n            if (this.draggingCropper) {\n                this._handleCropperDrag(this.mouseMoveEvent);\n            } else {\n                this._handleCropperResize(this.mouseMoveEvent);\n            }\n\n            this._redrawCropperElements();\n\n            this.storeCropperState();\n            this.renderCropper();\n        } else {\n            this._setMouseCursor(this.mouseMoveEvent);\n        }\n\n        this.previousMouseX = this.mouseMoveEvent.pageX;\n        this.previousMouseY = this.mouseMoveEvent.pageY;\n\n        this.mouseMoveEvent = null;\n    },\n\n    /**\n     * Handle mouse being released.\n     *\n     * @param ev\n     */\n    _handleMouseUp: function(ev) {\n        this.draggingCropper = false;\n        this.scalingCropper = false;\n        this.draggingFocal = false;\n    },\n\n    /**\n     * Handle mouse out\n     *\n     * @param ev\n     */\n    _handleMouseOut: function(ev) {\n        this._handleMouseUp(ev);\n        this.mouseMoveEvent = ev;\n        this._handleMouseMoveInternal();\n    },\n\n    /**\n     * Handle cropper being dragged.\n     *\n     * @param ev\n     */\n    _handleCropperDrag: function(ev) {\n        if (typeof this._handleCropperDrag._ === 'undefined') {\n            this._handleCropperDrag._ = {};\n        }\n\n        this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n            return false;\n        }\n\n        this._handleCropperDrag._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n        // If this would drag it outside of the image\n        if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n            // Try to find the furthest point in the same general direction where we can drag it\n\n            // Delta iterator setup\n            this._handleCropperDrag._.dxi = 0;\n            this._handleCropperDrag._.dyi = 0;\n            this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n            this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n            // The furthest we can move\n            this._handleCropperDrag._.furthest = 0;\n            this._handleCropperDrag._.furthestDeltas = {};\n\n            // Loop through every combination of dragging it not so far\n            for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                    this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                    if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                        if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                            this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                            this._handleCropperDrag._.furthestDeltas = {\n                                x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                            }\n                        }\n                    }\n                }\n            }\n\n            // REALLY can't drag along the cursor movement\n            if (this._handleCropperDrag._.furthest == 0) {\n                return;\n            } else {\n                this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n            }\n        }\n\n        this.clipper.set({\n            left: this.clipper.left + this._handleCropperDrag._.deltaX,\n            top: this.clipper.top + this._handleCropperDrag._.deltaY\n        });\n    },\n\n    /**\n     * Handle focal point being dragged.\n     *\n     * @param ev\n     */\n    _handleFocalDrag: function(ev) {\n        if (typeof this._handleFocalDrag._ === 'undefined') {\n            this._handleFocalDrag._ = {};\n        }\n\n        if (this.focalPoint) {\n            this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                return;\n            }\n\n            this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n            this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n            // Just make sure that the focal point stays inside the image\n            if (this.currentView === 'crop') {\n                if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                    return;\n                }\n            } else {\n                if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                    && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                    return;\n                }\n            }\n\n            this.focalPoint.set({\n                left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n            });\n        }\n    },\n\n    /**\n     * Set the cropping constraint\n     * @param constraint\n     */\n    setCroppingConstraint: function(constraint) {\n        // In case this caused the sidebar width to change.\n        this.updateSizeAndPosition();\n\n        switch (constraint) {\n            case 'none':\n                this.croppingConstraint = false;\n                break;\n\n            case 'original':\n                this.croppingConstraint = this.originalWidth / this.originalHeight;\n                break;\n\n            case 'current':\n                this.croppingConstraint = this.clipper.width / this.clipper.height;\n                break;\n\n            case 'custom':\n\n                break;\n            default:\n                this.croppingConstraint = parseFloat(constraint);\n\n                break;\n        }\n    },\n\n    /**\n     * Enforce the cropping constraint\n     */\n    enforceCroppingConstraint: function() {\n        if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n            this.enforceCroppingConstraint._ = {};\n        }\n\n        if (this.animationInProgress || !this.croppingConstraint) {\n            return;\n        }\n\n        this.animationInProgress = true;\n\n        // Mock the clipping rectangle for collision tests\n        this.enforceCroppingConstraint._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        // If wider than it should be\n        if (this.clipper.width > this.clipper.height * this.croppingConstraint) {\n            this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n            // Make it taller!\n            this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n            // Getting really awkward having to convert between 0;0 being center or top-left corner.\n            this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n            // If the clipper would end up out of bounds, make it narrower instead.\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n            }\n        } else {\n            // Follow the same pattern, if taller than it should be.\n            this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n            this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n            this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n            }\n        }\n\n        this.enforceCroppingConstraint._.properties = {\n            height: this.enforceCroppingConstraint._.rectangle.height,\n            width: this.enforceCroppingConstraint._.rectangle.width\n        };\n\n        // Make sure to redraw cropper handles and gridlines when resizing\n        this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n            onChange: () => {\n                this._redrawCropperElements();\n                this.croppingCanvas.renderAll();\n            },\n            duration: this.settings.animationDuration,\n            onComplete: () => {\n                this._redrawCropperElements();\n                this.animationInProgress = false;\n                this.renderCropper();\n                this.storeCropperState();\n            },\n        });\n    },\n\n    /**\n     * Handle cropper being resized.\n     *\n     * @param ev\n     */\n    _handleCropperResize: function(ev) {\n        if (typeof this._handleCropperResize._ === 'undefined') {\n            this._handleCropperResize._ = {};\n        }\n\n        // Size deltas\n        this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n            this._handleCropperResize._.deltaX = 0;\n        }\n\n        if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n            this._handleCropperResize._.deltaY = 0;\n        }\n\n        if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n            return;\n        }\n\n        // Translate from center-center origin to absolute coords\n        this._handleCropperResize._.startingRectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        }\n\n        this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n        if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n            return;\n        }\n\n        if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n            return;\n        }\n\n        // Translate back to center-center origin.\n        this.clipper.set({\n            top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n            left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n            width: this._handleCropperResize._.rectangle.width,\n            height: this._handleCropperResize._.rectangle.height\n        });\n\n        this._redrawCropperElements();\n    },\n\n    _calculateNewCropperSizeByDeltas: function(startingRectangle, deltaX, deltaY, cropperDirection) {\n        if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n            this._calculateNewCropperSizeByDeltas._ = {};\n        }\n\n        // Center deltas\n        this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n        this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n        this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n        this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n        this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n        // Lock the aspect ratio if needed\n        if (this.croppingConstraint) {\n            this._calculateNewCropperSizeByDeltas._.change = 0;\n\n            // Take into account the mouse direction and figure out the \"real\" change in cropper size\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'br':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n\n            if (this.croppingConstraint > 1) {\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n            } else {\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n            // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n        } else {\n            // Lock the aspect ratio\n            if (this.shiftKeyHeld &&\n                (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                    cropperDirection === 'bl' || cropperDirection === 'br')\n            ) {\n                this._calculateNewCropperSizeByDeltas._.ratio;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                }\n            }\n\n            if (cropperDirection.match(/t/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/b/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/r/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n            if (cropperDirection.match(/l/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n        }\n\n        this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n        this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n        this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n        this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n        return this._calculateNewCropperSizeByDeltas._.rectangle;\n    },\n\n    /**\n     * Set mouse cursor by it's position over cropper.\n     *\n     * @param ev\n     */\n    _setMouseCursor: function(ev) {\n        if (typeof this._setMouseCursor._ === 'undefined') {\n            this._setMouseCursor._ = {};\n        }\n\n        if (Garnish.isMobileBrowser(true)) {\n            return;\n        }\n        this._setMouseCursor._.cursor = 'default';\n        this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n        if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n            this._setMouseCursor._.cursor = 'pointer';\n        } else if (this._setMouseCursor._.handle) {\n            if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                this._setMouseCursor._.cursor = 'ns-resize';\n            } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                this._setMouseCursor._.cursor = 'ew-resize';\n            } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                this._setMouseCursor._.cursor = 'nwse-resize';\n            } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                this._setMouseCursor._.cursor = 'nesw-resize';\n            }\n        } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n            this._setMouseCursor._.cursor = 'move';\n        }\n\n        $('.body').css('cursor', this._setMouseCursor._.cursor);\n    },\n\n    /**\n     * Test whether the mouse cursor is on any cropper handles.\n     *\n     * @param ev\n     */\n    _cropperHandleHitTest: function(ev) {\n        if (typeof this._cropperHandleHitTest._ === 'undefined') {\n            this._cropperHandleHitTest._ = {};\n        }\n\n        this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n        this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n        this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n        this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n        this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n        this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n        // Left side top/bottom\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tl';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'bl';\n            }\n        }\n        // Right side top/bottom\n        if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tr';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'br';\n            }\n        }\n\n        // Left or right\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'l';\n        }\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'r';\n        }\n\n        // Top or bottom\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 't';\n        }\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 'b';\n        }\n\n        return false;\n    },\n\n    /**\n     * Test whether the mouse cursor is on a fabricJS object.\n     *\n     * @param object\n     * @param event\n     *\n     * @return boolean\n     */\n\n    _isMouseOver: function(event, object) {\n        if (typeof this._isMouseOver._ === 'undefined') {\n            this._isMouseOver._ = {};\n        }\n\n        this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n        this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n        this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._isMouseOver._.lb = object.left - object.width / 2;\n        this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n        this._isMouseOver._.tb = object.top - object.height / 2;\n        this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n        return (\n            this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n            this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n            this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n            this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n        );\n    },\n\n    /**\n     * Get vertices of a rectangle defined by left,top,height and width properties.\n     * Optionally it's possible to provide offsetX and offsetY values.\n     * Left and top properties of rectangle reference the top-left corner.\n     *\n     * @param rectangle\n     * @param [offsetX]\n     * @param [offsetY]\n     */\n    _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n        if (typeof this._getRectangleVertices._ === 'undefined') {\n            this._getRectangleVertices._ = {};\n        }\n\n        if (typeof offsetX === 'undefined') {\n            offsetX = 0;\n        }\n        if (typeof offsetY === 'undefined') {\n            offsetY = 0;\n        }\n\n        this._getRectangleVertices._.topLeft = {\n            x: rectangle.left + offsetX,\n            y: rectangle.top + offsetY\n        };\n\n        this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n        this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n        this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n        return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n    },\n\n    /**\n     * Set image vertice coordinates for an image that's been zoomed to fit.\n     */\n    _setFittedImageVerticeCoordinates: function() {\n        this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n    },\n\n    /**\n     * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n     * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n     *\n     * @param zoomMode\n     */\n    getImageVerticeCoords: function(zoomMode) {\n        var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n        var imageDimensions = this.getScaledImageDimensions();\n\n        var ratio;\n\n        if (typeof zoomMode === \"number\") {\n            ratio = zoomMode;\n        } else if (zoomMode === \"cover\") {\n            ratio = this.getZoomToCoverRatio(imageDimensions);\n        } else {\n            ratio = this.getZoomToFitRatio(imageDimensions);\n        }\n\n        // Get the dimensions of the scaled image\n        var scaledHeight = imageDimensions.height * ratio;\n        var scaledWidth = imageDimensions.width * ratio;\n\n        // Calculate the segments of the containing box for the image.\n        // When referring to top/bottom or right/left segments, these are on the\n        // right-side and bottom projection of the containing box for the zoomed out image.\n        var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n        var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n        var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n        var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n        // Calculate the offsets from editor box for the image-containing box\n        var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n        var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n        // Finally, calculate the image vertice coordinates\n        return {\n            a: {\n                x: horizontalOffset + rightHorizontalSegment,\n                y: verticalOffset\n            },\n            b: {\n                x: this.editorWidth - horizontalOffset,\n                y: verticalOffset + topVerticalSegment\n            },\n            c: {\n                x: horizontalOffset + leftHorizontalSegment,\n                y: this.editorHeight - verticalOffset\n            },\n            d: {\n                x: horizontalOffset,\n                y: verticalOffset + bottomVerticalSegment\n            }\n        };\n    },\n\n    /**\n     * Debug stuff by continuously rendering a fabric object on canvas.\n     *\n     * @param fabricObj\n     */\n    _debug: function(fabricObj) {\n        this.canvas.remove(this.debugger);\n        this.debugger = fabricObj;\n        this.canvas.add(this.debugger);\n    },\n\n    /**\n     * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n     * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n     * return true if the point is in the rectangle.\n     *\n     * Adapted from: http://stackoverflow.com/a/2763387/2040791\n     *\n     * @param points\n     * @param rectangle\n     */\n    arePointsInsideRectangle: function(points, rectangle) {\n        if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n            this.arePointsInsideRectangle._ = {};\n        }\n\n        // Pre-calculate the vectors and scalar products for two rectangle edges\n        this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n        this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n        this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n        this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n        for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n            this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n            // Calculate the vectors for two rectangle sides and for\n            // the vector from vertices a and b to the point P\n            this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n            this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n            // Calculate scalar or dot products for some vector combinations\n            this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n            this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n            this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n            this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n            if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    /**\n     * Returns an object representing the vector between points a and b.\n     *\n     * @param a\n     * @param b\n     */\n    _getVector: function(a, b) {\n        return {x: b.x - a.x, y: b.y - a.y};\n    },\n\n    /**\n     * Returns the scalar product of two vectors\n     *\n     * @param a\n     * @param b\n     */\n    _getScalarProduct: function(a, b) {\n        return a.x * b.x + a.y * b.y;\n    },\n\n    /**\n     * Returns the magnitude of a vector_redrawCropperElements\n     * .\n     *\n     * @param vector\n     */\n    _getVectorMagnitude: function(vector) {\n        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    },\n\n    /**\n     * Returns the angle between two vectors in degrees with two decimal points\n     *\n     * @param a\n     * @param b\n     */\n    _getAngleBetweenVectors: function(a, b) {\n        return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n    },\n\n    /**\n     * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n     *\n     * @param rectangle\n     * @param vertex\n     *\n     * @returns {*}\n     */\n    _getEdgeCrossed: function(rectangle, vertex) {\n        // Determine over which edge the vertex is\n        var edgePoints = [\n            [rectangle.a, rectangle.b],\n            [rectangle.b, rectangle.c],\n            [rectangle.c, rectangle.d],\n            [rectangle.d, rectangle.a]\n        ];\n\n        var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n        var smallestDiff = 180;\n        var edgeCrossed = null;\n\n        // Test each edge\n        for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n            var edge = edgePoints[edgeIndex];\n            var toCenter = this._getVector(edge[0], centerPoint);\n            var edgeVector = this._getVector(edge[0], edge[1]);\n            var toVertex = this._getVector(edge[0], vertex);\n\n            // If the angle between toCenter/toVertex is the sum of\n            // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n            // the edgeVector is between the other two meaning that this is the offending vertex.\n            // To avoid the rounding errors, we'll take the closest match\n            var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n            if (diff < smallestDiff) {\n                smallestDiff = diff;\n                edgeCrossed = edge;\n            }\n        }\n\n        return edgeCrossed;\n    },\n\n    /**\n     * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n     *\n     * @param dimensions\n     */\n    _getImageBoundingBox: function(dimensions) {\n        var box = {};\n\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        var proportion = dimensions.height / dimensions.width;\n        box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n        box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n        if (this.hasOrientationChanged()) {\n            var temp = box.width;\n            box.width = box.height;\n            box.height = temp;\n        }\n\n        return box;\n    }\n}, {\n    defaults: {\n        animationDuration: 100,\n        allowSavingAsNew: true,\n        onSave: $.noop,\n        allowDegreeFractions: null,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend({\n    $includeSubfoldersContainer: null,\n    $includeSubfoldersCheckbox: null,\n    showingIncludeSubfoldersCheckbox: false,\n\n    $uploadButton: null,\n    $uploadInput: null,\n    $progressBar: null,\n    $folders: null,\n\n    uploader: null,\n    promptHandler: null,\n    progressBar: null,\n\n    _uploadTotalFiles: 0,\n    _uploadFileProgress: {},\n    _uploadedAssetIds: [],\n    _currentUploaderSettings: {},\n\n    _assetDrag: null,\n    _folderDrag: null,\n    _expandDropTargetFolderTimeout: null,\n    _tempExpandedFolders: [],\n\n    _fileConflictTemplate: {\n        choices: [\n            {value: 'keepBoth', title: Craft.t('app', 'Keep both')}, {value: 'replace', title: Craft.t('app', 'Replace it')}\n        ]\n    },\n    _folderConflictTemplate: {\n        choices: [\n            {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')}, {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n        ]\n    },\n\n    init: function(elementType, $container, settings) {\n        this.base(elementType, $container, settings);\n\n        if (this.settings.context === 'index') {\n            if (!this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n        } else {\n            this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n            if (this.settings.modal) {\n                this.settings.modal.on('updateSizeAndPosition', this._positionProgressBar.bind(this));\n            }\n        }\n    },\n\n    initSources: function() {\n        if (this.settings.context === 'index' && !this._folderDrag) {\n            this._initIndexPageMode();\n        }\n\n        return this.base();\n    },\n\n    initSource: function($source) {\n        this.base($source);\n\n        this._createFolderContextMenu($source);\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                if ($source.data('folder-id')) {\n                    this._folderDrag.addItems($source.parent());\n                }\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    deinitSource: function($source) {\n        this.base($source);\n\n        // Does this source have a context menu?\n        var contextMenu = $source.data('contextmenu');\n\n        if (contextMenu) {\n            contextMenu.destroy();\n        }\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                this._folderDrag.removeItems($source.parent());\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    _getSourceLevel: function($source) {\n        return $source.parentsUntil('nav', 'ul').length;\n    },\n\n    /**\n     * Initialize the index page-specific features\n     */\n    _initIndexPageMode: function() {\n        if (this._folderDrag) {\n            return;\n        }\n\n        // Make the elements selectable\n        this.settings.selectable = true;\n        this.settings.multiSelect = true;\n\n        // Asset dragging\n        // ---------------------------------------------------------------------\n\n        this._assetDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n            filter: () => this.view.getSelectedElements().has('div.element[data-movable]'),\n            helper: $file => this._getFileDragHelper($file),\n            dropTargets: () => {\n                // Which data attribute should we be checking?\n                var attr;\n                if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                    attr = 'data-can-move-peer-files-to';\n                } else {\n                    attr = 'data-can-move-to';\n                }\n\n                var targets = [];\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder\n                    var $source = this.$sources.eq(i);\n                    if (Garnish.hasAttr($source, attr)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFileDragStop.bind(this),\n            helperBaseZindex: 800\n        });\n\n        // Folder dragging\n        // ---------------------------------------------------------------------\n\n        this._folderDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: () => {\n                // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                var $selected = this.sourceSelect.getSelectedItems(),\n                    draggees = [];\n\n                for (var i = 0; i < $selected.length; i++) {\n                    var $source = $selected.eq(i);\n\n                    if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                        continue;\n                    }\n\n                    if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                        draggees.push($source.parent()[0]);\n                    }\n                }\n\n                return $(draggees);\n            },\n\n            helper: $draggeeHelper => {\n                var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                    $helperNav = $('<nav/>').appendTo($helperSidebar),\n                    $helperUl = $('<ul/>').appendTo($helperNav);\n\n                $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                $draggeeHelper.children('a').addClass('sel');\n\n                // Match the style\n                $draggeeHelper.css({\n                    'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                    'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                    'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                    'padding-left': this._folderDrag.$draggee.css('padding-left')\n                });\n\n                return $helperSidebar;\n            },\n\n            dropTargets: () => {\n                var targets = [];\n\n                // Tag the dragged folder and it's subfolders\n                var draggedSourceIds = [];\n                this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                    draggedSourceIds.push($(this).data('key'));\n                });\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder and not one of the dragged folders\n                    var $source = this.$sources.eq(i),\n                        key = $source.data('key');\n\n                    if (!this._getFolderUidFromSourceKey(key)) {\n                        continue;\n                    }\n\n                    if (!Craft.inArray(key, draggedSourceIds)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFolderDragStop.bind(this),\n        });\n    },\n\n    /**\n     * On file drag stop\n     */\n    _onFileDragStop: function() {\n        if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n            // Keep it selected\n            var originatingSource = this.$source;\n\n            var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                originalAssetIds = [];\n\n            // For each file, prepare array data.\n            for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                originalAssetIds.push(originalAssetId);\n            }\n\n            // Are any files actually getting moved?\n            if (originalAssetIds.length) {\n                this.setIndexBusy();\n\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(originalAssetIds.length);\n                this.progressBar.showProgressBar();\n\n                // For each file to move a separate request\n                var parameterArray = [];\n                for (i = 0; i < originalAssetIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: {\n                            assetId: originalAssetIds[i],\n                            folderId: targetFolderId\n                        }\n                    });\n                }\n\n                // Define the callback for when all file moves are complete\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var response = responseArray[i];\n\n                        // Push prompt into prompt array\n                        if (response.conflict) {\n                            this.promptHandler.addPrompt({\n                                assetId: response.assetId,\n                                suggestedFilename: response.suggestedFilename,\n                                prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                            });\n                        }\n\n                        if (response.error) {\n                            alert(response.error);\n                        }\n                    }\n\n                    this.setIndexAvailable();\n                    this.progressBar.hideProgressBar();\n                    var reloadIndex = false;\n\n                    var performAfterMoveActions = function() {\n                        // Select original source\n                        this.sourceSelect.selectItem(originatingSource);\n\n                        // Make sure we use the correct offset when fetching the next page\n                        this._totalVisible -= this._assetDrag.$draggee.length;\n\n                        // And remove the elements that have been moved away\n                        for (var i = 0; i < originalAssetIds.length; i++) {\n                            $('[data-id=' + originalAssetIds[i] + ']').remove();\n                        }\n\n                        this.view.deselectAllElements();\n                        this._collapseExtraExpandedFolders(targetFolderId);\n\n                        if (reloadIndex) {\n                            this.updateElements();\n                        }\n                    };\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            var newParameterArray = [];\n\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    reloadIndex = true;\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'keepBoth') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            filename: returnData[i].suggestedFilename\n                                        }\n                                    });\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            force: true\n                                        }\n                                    });\n                                }\n                            }\n\n                            // Nothing to do, carry on\n                            if (newParameterArray.length === 0) {\n                                performAfterMoveActions.apply(this);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                // Move conflicting files again with resolutions now\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this._assetDrag.fadeOutHelpers();\n                        this.promptHandler.showBatchPrompts(promptCallback);\n                    } else {\n                        performAfterMoveActions.apply(this);\n                        this._assetDrag.fadeOutHelpers();\n                    }\n                };\n\n                // Initiate the file move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._assetDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * On folder drag stop\n     */\n    _onFolderDragStop: function() {\n        // Only move if we have a valid target and we're not trying to move into our direct parent\n        if (\n            this._folderDrag.$activeDropTarget &&\n            this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n        ) {\n            var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n            this._collapseExtraExpandedFolders(targetFolderId);\n\n            // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n            var folderIds = [];\n\n            for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                    folderId = $a.data('folder-id');\n\n                // Make sure it's not already in the target folder and use this single folder Id.\n                if (folderId != targetFolderId) {\n                    folderIds.push(folderId);\n                    break;\n                }\n            }\n\n            if (folderIds.length) {\n                folderIds.sort();\n                folderIds.reverse();\n\n                this.setIndexBusy();\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(folderIds.length);\n                this.progressBar.showProgressBar();\n\n                var parameterArray = [];\n\n                for (i = 0; i < folderIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-folder',\n                        params: {\n                            folderId: folderIds[i],\n                            parentId: targetFolderId\n                        }\n                    });\n                }\n\n                // Increment, so to avoid displaying folder files that are being moved\n                this.requestId++;\n\n                /*\n                 Here's the rundown:\n                 1) Send all the folders being moved\n                 2) Get results:\n                 a) For all conflicting, receive prompts and resolve them to get:\n                 b) For all valid move operations: by now server has created the needed folders\n                 in target destination. Server returns an array of file move operations\n                 c) server also returns a list of all the folder id changes\n                 d) and the data-id of node to be removed, in case of conflict\n                 e) and a list of folders to delete after the move\n                 3) From data in 2) build a large file move operation array\n                 4) Create a request loop based on this, so we can display progress bar\n                 5) when done, delete all the folders and perform other maintenance\n                 6) Champagne\n                 */\n\n                // This will hold the final list of files to move\n                var fileMoveList = [];\n\n                var newSourceKey = '';\n\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var data = responseArray[i];\n\n                        // If successful and have data, then update\n                        if (data.success) {\n                            if (data.transferList) {\n                                fileMoveList = data.transferList;\n                            }\n\n                            if (data.newFolderId) {\n                                newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                            }\n                        }\n\n                        // Push prompt into prompt array\n                        if (data.conflict) {\n                            data.prompt = {\n                                message: data.conflict,\n                                choices: this._folderConflictTemplate.choices\n                            };\n\n                            this.promptHandler.addPrompt(data);\n                        }\n\n                        if (data.error) {\n                            alert(data.error);\n                        }\n                    }\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            this.promptHandler.resetPrompts();\n\n                            var newParameterArray = [];\n\n                            var params = {};\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    params.force = true;\n                                }\n\n                                if (returnData[i].choice === 'merge') {\n                                    params.merge = true;\n                                }\n\n                                params.folderId = data.folderId;\n                                params.parentId = data.parentId;\n\n                                newParameterArray.push({\n                                    action: 'assets/move-folder',\n                                    params: params\n                                });\n                            }\n\n                            // Start working on them lists, baby\n                            if (newParameterArray.length === 0) {\n                                this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this.promptHandler.showBatchPrompts(promptCallback);\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                    } else {\n                        this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                    }\n                };\n\n                // Initiate the folder move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees until we get the Ajax response\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._folderDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * Really move the folder. Like really. For real.\n     */\n    _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n        this.progressBar.setItemCount(1);\n        this.progressBar.showProgressBar();\n\n        var moveCallback = folderDeleteList => {\n            // Delete the old folders\n            var counter = 0;\n            var limit = folderDeleteList.length;\n            for (var i = 0; i < folderDeleteList.length; i++) {\n                // When all folders are deleted, reload the sources.\n                Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, () => {\n                    if (++counter === limit) {\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        this._folderDrag.returnHelpersToDraggees();\n                        this.setInstanceState('selectedSource', newSourceKey);\n                        this.refreshSources();\n                    }\n                });\n            }\n        };\n\n        if (fileMoveList.length > 0) {\n            var parameterArray = [];\n\n            for (var i = 0; i < fileMoveList.length; i++) {\n                parameterArray.push({\n                    action: 'assets/move-asset',\n                    params: fileMoveList[i]\n                });\n            }\n            this._performBatchRequests(parameterArray, function() {\n                moveCallback(folderDeleteList);\n            });\n        } else {\n            moveCallback(folderDeleteList);\n        }\n    },\n\n    /**\n     * Returns the root level source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getRootSource: function($source) {\n        var $parent;\n        while (($parent = this._getParentSource($source)) && $parent.length) {\n            $source = $parent;\n        }\n        return $source;\n    },\n\n    /**\n     * Get parent source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getParentSource: function($source) {\n        if (this._getSourceLevel($source) > 1) {\n            return $source.parent().parent().siblings('a');\n        }\n    },\n\n    _selectSourceByFolderId: function(targetFolderId) {\n        var $targetSource = this._getSourceByKey(targetFolderId);\n\n        // Make sure that all the parent sources are expanded and this source is visible.\n        var $parentSources = $targetSource.parent().parents('li');\n\n        for (var i = 0; i < $parentSources.length; i++) {\n            var $parentSource = $($parentSources[i]);\n\n            if (!$parentSource.hasClass('expanded')) {\n                $parentSource.children('.toggle').trigger('click');\n            }\n        }\n\n        this.selectSource($targetSource);\n        this.updateElements();\n    },\n\n    /**\n     * Initialize the uploader.\n     *\n     * @private\n     */\n    afterInit: function() {\n        if (!this.$uploadButton) {\n            this.$uploadButton = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                'data-icon': 'upload',\n                style: 'position: relative; overflow: hidden;',\n                text: Craft.t('app', 'Upload files'),\n            });\n            this.addButton(this.$uploadButton);\n\n            this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n        }\n\n        this.promptHandler = new Craft.PromptHandler();\n        this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            fileInput: this.$uploadInput,\n            dropZone: this.$container\n        };\n\n        options.events = {\n            fileuploadstart: this._onUploadStart.bind(this),\n            fileuploadprogressall: this._onUploadProgress.bind(this),\n            fileuploaddone: this._onUploadComplete.bind(this),\n        };\n\n        if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        this._currentUploaderSettings = options;\n\n        this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n        this.$uploadButton.on('click', () => {\n            if (this.$uploadButton.hasClass('disabled')) {\n                return;\n            }\n            if (!this.isIndexBusy) {\n                this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n            }\n        });\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific volume in the URL?\n        if (this.settings.context === 'index' && typeof window.defaultSource !== 'undefined') {\n            let defaultSourceParts = window.defaultSource.split('/');\n            let volumeSource = this.$sources.toArray().find(s => {\n                return $(s).data('volume-handle') === defaultSourceParts[0];\n            });\n            if (volumeSource) {\n                let $source = $(volumeSource);\n\n                for (let i = 1; i < defaultSourceParts.length; i++) {\n                    // does $source have a subfolder with this path name?\n                    let subfolderSource = this._getChildSources($source).toArray().find(s => {\n                        return $('> .label', s).text() === defaultSourceParts[i];\n                    });\n                    if (!subfolderSource) {\n                        break;\n                    }\n                    this._expandSource($source);\n                    $source = $(subfolderSource);\n                }\n\n                return $source.data('key');\n            }\n        }\n\n        return this.base();\n    },\n\n    onSelectSource: function() {\n        var $source = this._getSourceByKey(this.sourceKey);\n        var folderId = $source.data('folder-id');\n\n        if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n            this.uploader.setParams({\n                folderId: this.$source.attr('data-folder-id')\n            });\n            this.$uploadButton.removeClass('disabled');\n        } else {\n            this.$uploadButton.addClass('disabled');\n        }\n\n        // Update the URL if we're on the Assets index\n        if ($source.length && this.settings.context === 'index') {\n            this._updateUrl($source);\n        }\n\n        this.base();\n    },\n\n    _updateUrl: function($source) {\n        if (typeof history === 'undefined') {\n            return;\n        }\n\n        // Find all the subfolder sources. At the end, $thisSource will be the root volume source\n        let nestedSources = [];\n        let $thisSource = $source;\n        let $parent;\n        while (($parent = this._getParentSource($thisSource)) && $parent.length) {\n            nestedSources.unshift($thisSource);\n            $thisSource = $parent;\n        }\n\n        let uri = 'assets';\n        if ($thisSource.data('volume-handle')) {\n            uri += '/' + $thisSource.data('volume-handle');\n            nestedSources.forEach($s => {\n                uri += '/' + $s.children('.label').text();\n            });\n        }\n\n        history.replaceState({}, '', Craft.getUrl(uri));\n    },\n\n    _getFolderUidFromSourceKey: function(sourceKey) {\n        var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n        return m ? m[1] : null;\n    },\n\n    startSearching: function() {\n        // Does this source have subfolders?\n        if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n            if (this.$includeSubfoldersContainer === null) {\n                var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                    this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                    this.updateElements();\n                });\n            } else {\n                this.$includeSubfoldersContainer.velocity('stop');\n            }\n\n            var checked = this.getSelectedSourceState('includeSubfolders', false);\n            this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: 0,\n                opacity: 1\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = true;\n        }\n\n        this.base();\n    },\n\n    stopSearching: function() {\n        if (this.showingIncludeSubfoldersCheckbox) {\n            this.$includeSubfoldersContainer.velocity('stop');\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: -25,\n                opacity: 0\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = false;\n        }\n\n        this.base();\n    },\n\n    getViewParams: function() {\n        var data = this.base();\n\n        if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n            data.criteria.includeSubfolders = true;\n        }\n\n        return data;\n    },\n\n    /**\n     * React on upload submit.\n     *\n     * @private\n     */\n    _onUploadStart: function() {\n        this.setIndexBusy();\n\n        // Initial values\n        this._positionProgressBar();\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n\n        this.promptHandler.resetPrompts();\n    },\n\n    /**\n     * Update uploaded byte count.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On Upload Complete.\n     */\n    _onUploadComplete: function(event, data) {\n        var response = data.result;\n        var filename = data.files[0].name;\n\n        var doReload = true;\n\n        if (response.success || response.conflict) {\n            // Add the uploaded file to the selected ones, if appropriate\n            this._uploadedAssetIds.push(response.assetId);\n\n            // If there is a prompt, add it to the queue\n            if (response.conflict) {\n                response.prompt = {\n                    message: Craft.t('app', response.conflict, {file: response.filename}),\n                    choices: this._fileConflictTemplate.choices\n                };\n\n                this.promptHandler.addPrompt(response);\n            }\n\n            Craft.cp.runQueue();\n        } else {\n            if (response.error) {\n                alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n            } else {\n                alert(Craft.t('app', 'Upload failed for {filename}.', {filename}));\n            }\n\n            doReload = false;\n        }\n\n        // For the last file, display prompts, if any. If not - just update the element view.\n        if (this.uploader.isLastUpload()) {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n\n            if (this.promptHandler.getPromptCount()) {\n                this.promptHandler.showBatchPrompts(this._uploadFollowup.bind(this));\n            } else {\n                if (doReload) {\n                    this._updateAfterUpload();\n                }\n            }\n        }\n    },\n\n    /**\n     * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n     *\n     * @private\n     */\n    _updateAfterUpload: function() {\n        if (this.settings.context !== 'index') {\n            this.setSortAttribute('dateModified');\n            this.setSortDirection('desc');\n        }\n        this.updateElements();\n    },\n\n    /**\n     * Follow up to an upload that triggered at least one conflict resolution prompt.\n     *\n     * @param returnData\n     * @private\n     */\n    _uploadFollowup: function(returnData) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n\n        this.promptHandler.resetPrompts();\n\n        var finalCallback = () => {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n            this._updateAfterUpload();\n        };\n\n        this.progressBar.setItemCount(returnData.length);\n\n        var doFollowup = (parameterArray, parameterIndex, callback) => {\n            var postData = {};\n            var action = null;\n\n            var followupCallback = (data, textStatus) => {\n                if (textStatus === 'success' && data.assetId) {\n                    this._uploadedAssetIds.push(data.assetId);\n                } else if (data.error) {\n                    alert(data.error);\n                }\n                parameterIndex++;\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (parameterIndex === parameterArray.length) {\n                    callback();\n                } else {\n                    doFollowup(parameterArray, parameterIndex, callback);\n                }\n            };\n\n            if (parameterArray[parameterIndex].choice === 'replace') {\n                action = 'assets/replace-file';\n                postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                if (parameterArray[parameterIndex].conflictingAssetId) {\n                    postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                } else {\n                    postData.targetFilename = parameterArray[parameterIndex].filename;\n                }\n            } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                action = 'assets/delete-asset';\n                postData.assetId = parameterArray[parameterIndex].assetId;\n            }\n\n            if (!action) {\n                // We don't really need to do another request, so let's pretend that already happened\n                followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n            } else {\n                Craft.postActionRequest(action, postData, followupCallback);\n            }\n        };\n\n        this.progressBar.showProgressBar();\n        doFollowup(returnData, 0, finalCallback);\n    },\n\n    /**\n     * Perform actions after updating elements\n     * @private\n     */\n    onUpdateElements: function() {\n        this._onUpdateElements(false, this.view.getAllElements());\n        this.view.on('appendElements', ev => {\n            this._onUpdateElements(true, ev.newElements);\n        });\n\n        this.base();\n    },\n\n    /**\n     * Do the after-update initializations\n     * @private\n     */\n    _onUpdateElements: function(append, $newElements) {\n        if (this.settings.context === 'index') {\n            if (!append) {\n                this._assetDrag.removeAllItems();\n            }\n\n            this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n        }\n\n        // See if we have freshly uploaded files to add to selection\n        if (this._uploadedAssetIds.length) {\n            if (this.view.settings.selectable) {\n                for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                    this.view.selectElementById(this._uploadedAssetIds[i]);\n                }\n            }\n\n            // Reset the list.\n            this._uploadedAssetIds = [];\n        }\n\n        this.base(append, $newElements);\n\n        this.removeListener(this.$elements, 'keydown');\n        this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n        this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item).find('.element');\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    _onDragStart: function() {\n        this._tempExpandedFolders = [];\n    },\n\n    /**\n     * Get File Drag Helper\n     */\n    _getFileDragHelper: function($element) {\n        var currentView = this.getSelectedSourceState('mode');\n        var $outerContainer;\n        var $innerContainer;\n\n        switch (currentView) {\n            case 'table': {\n                $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                var $tbody = $('<tbody/>').appendTo($table);\n\n                $element.appendTo($tbody);\n\n                // Copy the column widths\n                this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                var $helperCells = $element.children();\n\n                for (var i = 0; i < $helperCells.length; i++) {\n                    // Hard-set the cell widths\n                    var $helperCell = $($helperCells[i]);\n\n                    // Skip the checkbox cell\n                    if ($helperCell.hasClass('checkbox-cell')) {\n                        $helperCell.remove();\n                        $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                        continue;\n                    }\n\n                    var $firstRowCell = $(this._$firstRowCells[i]),\n                        width = $firstRowCell.width();\n\n                    $firstRowCell.width(width);\n                    $helperCell.width(width);\n                }\n\n                return $outerContainer;\n            }\n            case 'thumbs': {\n                $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                $element.appendTo($innerContainer);\n\n                return $outerContainer;\n            }\n        }\n\n        return $();\n    },\n\n    /**\n     * On Drop Target Change\n     */\n    _onDropTargetChange: function($dropTarget) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        if ($dropTarget) {\n            var folderId = $dropTarget.data('folder-id');\n\n            if (folderId) {\n                this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                    this._expandDropTargetFolderTimeout = setTimeout(this._expandFolder.bind(this), 500);\n                }\n            } else {\n                this.dropTargetFolder = null;\n            }\n        }\n\n        if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n            // Temporarily remove the .sel class on the active source\n            this.$source.removeClass('sel');\n        } else {\n            this.$source.addClass('sel');\n        }\n    },\n\n    /**\n     * Collapse Extra Expanded Folders\n     */\n    _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        // If a source ID is passed in, exclude its parents\n        var $excludedSources;\n\n        if (dropTargetFolderId) {\n            $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n        }\n\n        for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n            var $source = this._tempExpandedFolders[i];\n\n            // Check the parent list, if a source id is passed in\n            if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                this._collapseFolder($source);\n                this._tempExpandedFolders.splice(i, 1);\n            }\n        }\n    },\n\n    _getSourceByKey: function(key) {\n        return this.$sources.filter('[data-key$=\"' + key + '\"]');\n    },\n\n    _hasSubfolders: function($source) {\n        return $source.siblings('ul').find('li').length;\n    },\n\n    _isExpanded: function($source) {\n        return $source.parent('li').hasClass('expanded');\n    },\n\n    _expandFolder: function() {\n        // Collapse any temp-expanded drop targets that aren't parents of this one\n        this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n        this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n        // Keep a record of that\n        this._tempExpandedFolders.push(this.dropTargetFolder);\n    },\n\n    _collapseFolder: function($source) {\n        if ($source.parent().hasClass('expanded')) {\n            $source.siblings('.toggle').trigger('click');\n        }\n    },\n\n    _createFolderContextMenu: function($source) {\n        // Make sure it's a volume folder\n        if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n            return;\n        }\n\n        var menuOptions = [\n            {\n                label: Craft.t('app', 'New subfolder'),\n                onClick: () => {\n                    this._createSubfolder($source);\n                },\n            },\n        ];\n\n        // For all folders that are not top folders\n        if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n            menuOptions.push({\n                label: Craft.t('app', 'Rename folder'),\n                onClick: () => {\n                    this._renameFolder($source);\n                },\n            });\n            menuOptions.push({\n                label: Craft.t('app', 'Delete folder'),\n                onClick: () => {\n                    this._deleteFolder($source);\n                },\n            });\n        }\n\n        new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n    },\n\n    _createSubfolder: function($parentFolder) {\n        var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n        if (subfolderName) {\n            var params = {\n                parentId: $parentFolder.data('folder-id'),\n                folderName: subfolderName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/create-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    this._prepareParentForChildren($parentFolder);\n\n                    var $subfolder = $(\n                        '<li>' +\n                        '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                        ' data-folder-id=\"' + data.folderId + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                        '>' +\n                        data.folderName +\n                        '</a>' +\n                        '</li>'\n                    );\n\n                    var $a = $subfolder.children('a:first');\n                    this._appendSubfolder($parentFolder, $subfolder);\n                    this.initSource($a);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    _deleteFolder: function($targetFolder) {\n        if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n            var params = {\n                folderId: $targetFolder.data('folder-id')\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/delete-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    var $parentFolder = this._getParentSource($targetFolder);\n\n                    // Remove folder and any trace from its parent, if needed\n                    this.deinitSource($targetFolder);\n\n                    $targetFolder.parent().remove();\n                    this._cleanUpTree($parentFolder);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    /**\n     * Rename\n     */\n    _renameFolder: function($source) {\n        const $label = $source.children('.label');\n        const oldName = Craft.trim($label.text())\n        const newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n        if (!newName || newName === oldName) {\n            return;\n        }\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', 'assets/rename-folder', {\n            data: {\n                folderId: $source.data('folder-id'),\n                newName: newName,\n            },\n        }).then(response => {\n            if (response.data.success) {\n                $label.text(response.data.newName);\n\n                // Is this the selected source?\n                if ($source.data('key') === this.$source.data('key')) {\n                    this.updateElements();\n\n                    // Update the URL if we're on the Assets index\n                    if (this.settings.context === 'index') {\n                        this._updateUrl($source);\n                    }\n                }\n            } else if (response.data.error) {\n                alert(response.data.error);\n            }\n        }).finally(() => {\n            this.setIndexAvailable();\n        });\n    },\n\n    /**\n     * Prepare a source folder for children folder.\n     *\n     * @param $parentFolder\n     * @private\n     */\n    _prepareParentForChildren: function($parentFolder) {\n        if (!this._hasSubfolders($parentFolder)) {\n            $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n            this.initSourceToggle($parentFolder);\n        }\n    },\n\n    /**\n     * Appends a subfolder to the parent folder at the correct spot.\n     *\n     * @param $parentFolder\n     * @param $subfolder\n     * @private\n     */\n    _appendSubfolder: function($parentFolder, $subfolder) {\n        var $subfolderList = $parentFolder.siblings('ul'),\n            $existingChildren = $subfolderList.children('li'),\n            subfolderLabel = $.trim($subfolder.children('a:first').text()),\n            folderInserted = false;\n\n        for (var i = 0; i < $existingChildren.length; i++) {\n            var $existingChild = $($existingChildren[i]);\n\n            if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                $existingChild.before($subfolder);\n                folderInserted = true;\n                break;\n            }\n        }\n\n        if (!folderInserted) {\n            $parentFolder.siblings('ul').append($subfolder);\n        }\n    },\n\n    _cleanUpTree: function($parentFolder) {\n        if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n            this.deinitSourceToggle($parentFolder);\n            $parentFolder.siblings('ul').remove();\n            $parentFolder.siblings('.toggle').remove();\n            $parentFolder.parent().removeClass('expanded');\n        }\n    },\n\n    _positionProgressBar: function() {\n        if (!this.progressBar) {\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n        }\n\n        var $container = $(),\n            scrollTop = 0,\n            offset = 0;\n\n        if (this.settings.context === 'index') {\n            $container = this.progressBar.$progressBar.closest('#content');\n            scrollTop = Garnish.$win.scrollTop();\n        } else {\n            $container = this.progressBar.$progressBar.closest('.main');\n            scrollTop = this.$main.scrollTop();\n        }\n\n        var containerTop = $container.offset().top;\n        var diff = scrollTop - containerTop;\n        var windowHeight = Garnish.$win.height();\n\n        if ($container.height() > windowHeight) {\n            offset = (windowHeight / 2) - 6 + diff;\n        } else {\n            offset = ($container.height() / 2) - 6;\n        }\n\n        if (this.settings.context !== 'index') {\n            offset = scrollTop + (($container.height() / 2) - 6);\n        }\n\n        this.progressBar.$progressBar.css({\n            top: offset\n        });\n    },\n\n    _performBatchRequests: function(parameterArray, finalCallback) {\n        var responseArray = [];\n\n        var doRequest = parameters => {\n            Craft.postActionRequest(parameters.action, parameters.params, (data, textStatus) => {\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (textStatus === 'success') {\n                    responseArray.push(data);\n\n                    // If assets were just merged we should get the reference tags updated right away\n                    Craft.cp.runQueue();\n                }\n\n                if (responseArray.length >= parameterArray.length) {\n                    finalCallback(responseArray);\n                }\n            });\n        };\n\n        for (var i = 0; i < parameterArray.length; i++) {\n            doRequest(parameterArray[i]);\n        }\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend({\n    requestId: 0,\n    hud: null,\n    $uploadBtn: null,\n    uploader: null,\n    progressBar: null,\n\n    init: function() {\n        this.base.apply(this, arguments);\n\n        if (this.settings.canUpload) {\n            this._attachUploader();\n        }\n\n        this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n        this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            this.openPreview();\n            ev.stopPropagation();\n            return false;\n        }\n    },\n    \n    onAddElements: function () {\n        this.$elements.find('.elementthumb').addClass('open-preview').on('mousedown touchstart', (ev) => {\n            this.elementSelect.focusItem($(ev.target).parent());\n            this.openPreview();\n            ev.stopPropagation();\n        });\n        this.base();\n    },\n\n    openPreview: function() {\n        if (Craft.PreviewFileModal.openInstance) {\n            Craft.PreviewFileModal.openInstance.selfDestruct();\n        } else {\n            var $element = this.elementSelect.$focusedItem;\n\n            if ($element.length) {\n                this._loadPreview($element);\n            }\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item);\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {\n            minGutter: 50\n        };\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n    },\n\n    /**\n     * Create the element editor\n     */\n    createElementEditor: function($element) {\n        return this.base($element, {\n            params: {\n                defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n            },\n            input: this\n        });\n    },\n\n    /**\n     * Attach the uploader with drag event handler\n     */\n    _attachUploader: function() {\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            dropZone: this.$container,\n            formData: {\n                fieldId: this.settings.fieldId,\n            }\n        };\n\n        if (this.settings.sourceElementId) {\n            options.formData.elementId = this.settings.sourceElementId;\n        }\n\n        if (this.settings.criteria.siteId) {\n            options.formData.siteId = this.settings.criteria.siteId;\n        }\n\n        if (this.$addElementBtn) {\n            this.$uploadBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn dashed',\n                'data-icon': 'upload',\n                text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n            }).insertAfter(this.$addElementBtn);\n            options.fileInput = $('<input/>', {\n                type: 'file',\n                class: 'hidden',\n                multiple: this.settings.limit != 1,\n            }).insertAfter(this.$uploadBtn);\n\n            // Trigger a window resize in case the field is inside an element editor HUD\n            Garnish.$win.trigger('resize');\n        }\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        if (typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        options.canAddMoreFiles = this.canAddMoreFiles.bind(this);\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        if (this.$uploadBtn) {\n            this.$uploadBtn.on('click', ev => {\n                // We can't store a reference to the file input, because it gets replaced with a new input\n                // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                this.$uploadBtn.next('input[type=file]').trigger('click');\n            });\n        }\n    },\n\n    replaceElement: function(elementId, replaceWithId) {\n        var parameters = {\n            elementId: replaceWithId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, data => {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                this.removeElement($existing);\n                let elementInfo = Craft.getElementInfo(data.html);\n                this.selectElements([elementInfo]);\n            }\n        });\n    },\n\n    refreshThumbnail: function(elementId) {\n        var parameters = {\n            elementId: elementId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, data => {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                this.thumbLoader.load($existing);\n            }\n        });\n    },\n\n    /**\n     * Add the freshly uploaded file to the input field.\n     */\n    selectUploadedFile: function(element) {\n        // Check if we're able to add new elements\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        var $newElement = element.$element;\n\n        // Make a couple tweaks\n        $newElement.addClass('removable');\n        $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        $newElement.appendTo(this.$elementsContainer);\n\n        var margin = -($newElement.outerWidth() + 10);\n\n        this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addElementBtn.velocity(animateCss, 'fast');\n\n        this.addElements($newElement);\n\n        delete this.modal;\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function() {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var parameters = {\n                elementId: data.result.assetId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, data => {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var html = $(data.html);\n                    Craft.appendHeadHtml(data.headHtml);\n                    this.selectUploadedFile(Craft.getElementInfo(html));\n                }\n\n                // Last file\n                if (this.uploader.isLastUpload()) {\n                    this.progressBar.hideProgressBar();\n                    this.$container.removeClass('uploading');\n\n                    if (window.draftEditor) {\n                        window.draftEditor.checkForm();\n                    }\n                }\n            });\n\n            Craft.cp.runQueue();\n        }\n    },\n\n    /**\n     * We have to take into account files about to be added as well\n     */\n    canAddMoreFiles: function(slotsTaken) {\n        return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n    },\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend({\n    $selectTransformBtn: null,\n    _selectedTransform: null,\n\n    init: function(elementType, settings) {\n        settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n        this.base(elementType, settings);\n\n        if (settings.transforms.length) {\n            this.createSelectTransformButton(settings.transforms);\n        }\n    },\n\n    createSelectTransformButton: function(transforms) {\n        if (!transforms || !transforms.length) {\n            return;\n        }\n\n        var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n        this.$selectBtn.appendTo($btnGroup);\n\n        this.$selectTransformBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn disabled',\n            text: Craft.t('app', 'Select transform'),\n        }).appendTo($btnGroup);\n\n        var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n            $menuList = $('<ul></ul>').appendTo($menu);\n\n        for (var i = 0; i < transforms.length; i++) {\n            $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n        }\n\n        var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n            onOptionSelect: this.onSelectTransform.bind(this),\n        });\n        MenuButton.disable();\n\n        this.$selectTransformBtn.data('menuButton', MenuButton);\n    },\n\n    onSelectionChange: function(ev) {\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            allowTransforms = false;\n\n        if ($selectedElements.length && this.settings.transforms.length) {\n            allowTransforms = true;\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                    break;\n                }\n            }\n        }\n\n        var MenuBtn = null;\n\n        if (this.$selectTransformBtn) {\n            MenuBtn = this.$selectTransformBtn.data('menuButton');\n        }\n\n        if (allowTransforms) {\n            if (MenuBtn) {\n                MenuBtn.enable();\n            }\n\n            this.$selectTransformBtn.removeClass('disabled');\n        } else if (this.$selectTransformBtn) {\n            if (MenuBtn) {\n                MenuBtn.disable();\n            }\n\n            this.$selectTransformBtn.addClass('disabled');\n        }\n\n        this.base();\n    },\n\n    onSelectTransform: function(option) {\n        var transform = $(option).data('transform');\n        this.selectImagesWithTransform(transform);\n    },\n\n    selectImagesWithTransform: function(transform) {\n        // First we must get any missing transform URLs\n        if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n            Craft.AssetSelectorModal.transformUrls[transform] = {};\n        }\n\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            imageIdsWithMissingUrls = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $item = $($selectedElements[i]),\n                elementId = Craft.getElementInfo($item).id;\n\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                imageIdsWithMissingUrls.push(elementId);\n            }\n        }\n\n        if (imageIdsWithMissingUrls.length) {\n            this.showFooterSpinner();\n\n            this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, () => {\n                this.hideFooterSpinner();\n                this.selectImagesWithTransform(transform);\n            });\n        } else {\n            this._selectedTransform = transform;\n            this.selectElements();\n            this._selectedTransform = null;\n        }\n    },\n\n    fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n        var elementId = imageIdsWithMissingUrls.pop();\n\n        var data = {\n            assetId: elementId,\n            handle: transform\n        };\n\n        Craft.postActionRequest('assets/generate-transform', data, (response, textStatus) => {\n            Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n            if (textStatus === 'success') {\n                if (response.url) {\n                    Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                }\n            }\n\n            // More to load?\n            if (imageIdsWithMissingUrls.length) {\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n            } else {\n                callback();\n            }\n        });\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = this.base($selectedElements);\n\n        if (this._selectedTransform) {\n            for (var i = 0; i < info.length; i++) {\n                var elementId = info[i].id;\n\n                if (\n                    typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                    Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                ) {\n                    info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                }\n            }\n        }\n\n        return info;\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo, this._selectedTransform);\n    }\n}, {\n    defaults: {\n        canSelectImageTransforms: false,\n        transforms: []\n    },\n\n    transformUrls: {}\n});\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend({\n    remainingSessionTime: null,\n    checkRemainingSessionTimer: null,\n    showLoginModalTimer: null,\n    decrementLogoutWarningInterval: null,\n\n    showingLogoutWarningModal: false,\n    showingLoginModal: false,\n\n    logoutWarningModal: null,\n    loginModal: null,\n\n    $logoutWarningPara: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $loginBtn: null,\n    $loginErrorPara: null,\n\n    submitLoginIfLoggedOut: false,\n\n    /**\n     * Init\n     */\n    init: function() {\n        this.updateRemainingSessionTime(Craft.remainingSessionTime);\n    },\n\n    /**\n     * Sets a timer for the next time to check the auth timeout.\n     */\n    setCheckRemainingSessionTimer: function(seconds) {\n        if (this.checkRemainingSessionTimer) {\n            clearTimeout(this.checkRemainingSessionTimer);\n        }\n\n        this.checkRemainingSessionTimer = setTimeout(this.checkRemainingSessionTime.bind(this), seconds * 1000);\n    },\n\n    /**\n     * Pings the server to see how many seconds are left on the current user session, and handles the response.\n     */\n    checkRemainingSessionTime: function(extendSession) {\n        $.ajax({\n            url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n            type: 'GET',\n            dataType: 'json',\n            complete: (jqXHR, textStatus) => {\n                if (textStatus === 'success') {\n                    if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                        Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                    }\n\n                    this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                    this.submitLoginIfLoggedOut = false;\n                } else {\n                    this.updateRemainingSessionTime(-1);\n                }\n            },\n        });\n    },\n\n    /**\n     * Updates our record of the auth timeout, and handles it.\n     */\n    updateRemainingSessionTime: function(remainingSessionTime) {\n        this.remainingSessionTime = parseInt(remainingSessionTime);\n\n        // Are we within the warning window?\n        if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n            // Is there still time to renew the session?\n            if (this.remainingSessionTime) {\n                if (!this.showingLogoutWarningModal) {\n                    // Show the warning modal\n                    this.showLogoutWarningModal();\n                }\n\n                // Will the session expire before the next checkup?\n                if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                    if (this.showLoginModalTimer) {\n                        clearTimeout(this.showLoginModalTimer);\n                    }\n\n                    this.showLoginModalTimer = setTimeout(this.showLoginModal.bind(this), this.remainingSessionTime * 1000);\n                }\n            } else {\n                if (this.showingLoginModal) {\n                    if (this.submitLoginIfLoggedOut) {\n                        this.submitLogin();\n                    }\n                } else {\n                    // Show the login modal\n                    this.showLoginModal();\n                }\n            }\n\n            this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n        } else {\n            // Everything's good!\n            this.hideLogoutWarningModal();\n            this.hideLoginModal();\n\n            // Will be be within the minSafeSessionTime before the next update?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n            } else {\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the logout warning modal.\n     */\n    showLogoutWarningModal: function() {\n        var quickShow;\n\n        if (this.showingLoginModal) {\n            this.hideLoginModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLogoutWarningModal = true;\n\n        if (!this.logoutWarningModal) {\n            let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n            let $body = $('<div class=\"body\"/>').appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $logoutBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Log out now'),\n            }).appendTo($buttons);\n            let $renewSessionBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Keep me logged in'),\n            }).appendTo($buttons);\n\n            this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n            this.logoutWarningModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                onFadeIn: function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the renew button\n                        setTimeout(function() {\n                            $renewSessionBtn.trigger('focus');\n                        }, 100);\n                    }\n                }\n            });\n\n            this.addListener($logoutBtn, 'activate', 'logout');\n            this.addListener($form, 'submit', 'renewSession');\n        }\n\n        if (quickShow) {\n            this.logoutWarningModal.quickShow();\n        } else {\n            this.logoutWarningModal.show();\n        }\n\n        this.updateLogoutWarningMessage();\n\n        this.decrementLogoutWarningInterval = setInterval(this.decrementLogoutWarning.bind(this), 1000);\n    },\n\n    /**\n     * Updates the logout warning message indicating that the session is about to expire.\n     */\n    updateLogoutWarningMessage: function() {\n        this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n            time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n        }));\n\n        this.logoutWarningModal.updateSizeAndPosition();\n    },\n\n    decrementLogoutWarning: function() {\n        if (this.remainingSessionTime > 0) {\n            this.remainingSessionTime--;\n            this.updateLogoutWarningMessage();\n        }\n\n        if (this.remainingSessionTime === 0) {\n            clearInterval(this.decrementLogoutWarningInterval);\n        }\n    },\n\n    /**\n     * Hides the logout warning modal.\n     */\n    hideLogoutWarningModal: function(quick) {\n        this.showingLogoutWarningModal = false;\n\n        if (this.logoutWarningModal) {\n            if (quick) {\n                this.logoutWarningModal.quickHide();\n            } else {\n                this.logoutWarningModal.hide();\n            }\n\n            if (this.decrementLogoutWarningInterval) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the login modal.\n     */\n    showLoginModal: function() {\n        var quickShow;\n\n        if (this.showingLogoutWarningModal) {\n            this.hideLogoutWarningModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLoginModal = true;\n\n        if (!this.loginModal) {\n            var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$loginBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Login'),\n            }).appendTo($buttonContainer);\n            this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.loginModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark loginmodalshade',\n                onFadeIn: () => {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the password input\n                        setTimeout(() => {\n                            this.$passwordInput.trigger('focus');\n                        }, 100);\n                    }\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($form, 'submit', 'login');\n        }\n\n        if (quickShow) {\n            this.loginModal.quickShow();\n        } else {\n            this.loginModal.show();\n        }\n    },\n\n    /**\n     * Hides the login modal.\n     */\n    hideLoginModal: function(quick) {\n        this.showingLoginModal = false;\n\n        if (this.loginModal) {\n            if (quick) {\n                this.loginModal.quickHide();\n            } else {\n                this.loginModal.hide();\n            }\n        }\n    },\n\n    logout: function() {\n        $.get({\n            url: Craft.getActionUrl('users/logout'),\n            dataType: 'json',\n            success: () => {\n                Craft.redirectTo('');\n            },\n        });\n    },\n\n    renewSession: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        this.hideLogoutWarningModal();\n        this.checkRemainingSessionTime(true);\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$loginBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$loginBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    login: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.validatePassword()) {\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            if (typeof Craft.csrfTokenValue !== 'undefined') {\n                // Check the auth status one last time before sending this off,\n                // in case the user has already logged back in from another window/tab\n                this.submitLoginIfLoggedOut = true;\n                this.checkRemainingSessionTime();\n            } else {\n                this.submitLogin();\n            }\n        }\n    },\n\n    submitLogin: function() {\n        var data = {\n            loginName: Craft.username,\n            password: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/login', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.hideLoginModal();\n                    this.checkRemainingSessionTime();\n                } else {\n                    this.showLoginError(response.error);\n                    Garnish.shake(this.loginModal.$container);\n\n                    if (!Garnish.isMobileBrowser(true)) {\n                        this.$passwordInput.trigger('focus');\n                    }\n                }\n            } else {\n                this.showLoginError();\n            }\n        });\n    },\n\n    showLoginError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$loginErrorPara.text(error);\n        this.loginModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showLoginError('');\n    }\n}, {\n    checkInterval: 60,\n    minSafeSessionTime: 120\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend({\n    authManager: null,\n\n    $nav: null,\n    $navToggle: null,\n    $globalSidebar: null,\n    $globalContainer: null,\n    $mainContainer: null,\n    $alerts: null,\n    $crumbs: null,\n    $breadcrumbList: null,\n    $breadcrumbItems: null,\n    $notificationContainer: null,\n    $main: null,\n    $primaryForm: null,\n    $headerContainer: null,\n    $header: null,\n    $mainContent: null,\n    $details: null,\n    $sidebarContainer: null,\n    $sidebar: null,\n    $contentContainer: null,\n    $edition: null,\n\n    $confirmUnloadForms: null,\n    $deltaForms: null,\n    $collapsibleTables: null,\n\n    isMobile: null,\n    fixedHeader: false,\n\n    breadcrumbListWidth: 0,\n    breadcrumbDisclosureItem: `<li class=\"breadcrumb-toggle-wrapper\" data-disclosure-item data-wrapper><button data-disclosure-trigger aria-controls=\"breadcrumb-disclosure\" aria-haspopup=\"true\">${Craft.t('app', 'More')}…</button><div id=\"breadcrumb-disclosure\" class=\"menu menu--disclosure\" data-disclosure-menu><ul></ul></div></li>`,\n\n    tabManager: null,\n\n    enableQueue: true,\n    totalJobs: 0,\n    jobInfo: null,\n    displayedJobInfo: null,\n    displayedJobInfoUnchanged: 1,\n    trackJobProgressTimeout: null,\n    jobProgressIcon: null,\n\n    checkingForUpdates: false,\n    forcingRefreshOnUpdatesCheck: false,\n    includingDetailsOnUpdatesCheck: false,\n    checkForUpdatesCallbacks: null,\n\n    resizeTimeout: null,\n\n    init: function() {\n        // Is this session going to expire?\n        if (Craft.remainingSessionTime !== 0) {\n            this.authManager = new Craft.AuthManager();\n        }\n\n        // Find all the key elements\n        this.$nav = $('#nav');\n        this.$navToggle = $('#nav-toggle');\n        this.$globalSidebar = $('#global-sidebar');\n        this.$globalContainer = $('#global-container');\n        this.$mainContainer = $('#main-container');\n        this.$alerts = $('#alerts');\n        this.$crumbs = $('#crumbs');\n        this.$breadcrumbList = $('.breadcrumb-list');\n        this.$breadcrumbItems = $('.breadcrumb-list li');\n        this.$notificationContainer = $('#notifications');\n        this.$main = $('#main');\n        this.$primaryForm = $('#main-form');\n        this.$headerContainer = $('#header-container');\n        this.$header = $('#header');\n        this.$mainContent = $('#main-content');\n        this.$details = $('#details');\n        this.$sidebarContainer = $('#sidebar-container');\n        this.$sidebar = $('#sidebar');\n        this.$contentContainer = $('#content-container');\n        this.$collapsibleTables = $('table.collapsible');\n\n        this.isMobile = Garnish.isMobileBrowser();\n\n        this.updateSidebarMenuLabel();\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        if (!this.isMobile && this.$header.length) {\n            this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n            this.updateFixedHeader();\n        }\n\n        Garnish.$doc.ready(() => {\n            // Update responsive tables on window resize\n            this.addListener(Garnish.$win, 'resize', ev => {\n                // Ignore element resizes\n                if (ev.target === window) {\n                    this.handleWindowResize();\n\n                    clearTimeout(this.resizeTimeout);\n                    var cp = this;\n                    this.resizeTimeout = setTimeout(function() {\n                        cp.setSidebarNavAttributes();\n                    }, 100);\n                }\n            });\n            this.handleWindowResize();\n            this.setSidebarNavAttributes();\n\n            // Fade the notification out two seconds after page load\n            var $errorNotifications = this.$notificationContainer.children('.error'),\n                $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n            $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n            $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n            // Wait a frame before initializing any confirm-unload forms,\n            // so other JS that runs on ready() has a chance to initialize\n            Garnish.requestAnimationFrame(this.initSpecialForms.bind(this));\n        });\n\n        // Alerts\n        if (this.$alerts.length) {\n            this.initAlerts();\n        }\n\n        // Toggles\n        this.addListener(this.$navToggle, 'click', 'toggleNav');\n        this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n        // Does this page have a primary form?\n        if (!this.$primaryForm.length) {\n            this.$primaryForm = $('form[data-saveshortcut]:first');\n        }\n\n        // Does the primary form support the save shortcut?\n        if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n            let shortcuts = [];\n            let actions = this.$primaryForm.data('actions');\n            if (typeof actions === 'undefined') {\n                shortcuts.push([\n                    {\n                        keyCode: Garnish.S_KEY,\n                        ctrl: true,\n                    }, {\n                        redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                        retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                    }\n                ]);\n            } else {\n                for (let i = 0; i < actions.length; i++) {\n                    let action = actions[i];\n                    if (!action.shortcut) {\n                        continue;\n                    }\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                            shift: !!action.shift,\n                        }, {\n                            action: action.action,\n                            redirect: action.redirect,\n                            confirm: action.confirm,\n                            params: action.params,\n                            data: action.data,\n                            retainScroll: action.retainScroll,\n                        }\n                    ]);\n                }\n            }\n            for (let i = 0; i < shortcuts.length; i++) {\n                Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                    this.submitPrimaryForm(shortcuts[i][1]);\n                });\n            }\n        }\n\n        this.initTabs();\n\n        // Should we match the previous scroll position?\n        let scrollY = Craft.getLocalStorage('scrollY');\n        if (typeof scrollY !== 'undefined') {\n            Craft.removeLocalStorage('scrollY');\n            Garnish.$doc.ready(() => {\n                Garnish.requestAnimationFrame(() => {\n                    window.scrollTo(0, scrollY);\n                });\n            });\n        }\n\n        if ($.isTouchCapable()) {\n            this.$mainContainer.on('focus', 'input, textarea, .focusable-input', this._handleInputFocus.bind(this));\n            this.$mainContainer.on('blur', 'input, textarea, .focusable-input', this._handleInputBlur.bind(this));\n        }\n\n        // Announcements HUD\n        if (Craft.announcements.length) {\n            let $btn = $('#announcements-btn').removeClass('hidden');\n            const hasUnreads = Craft.announcements.some(a => a.unread);\n            if (hasUnreads) {\n                $btn.addClass('unread');\n            }\n            let hud;\n            this.addListener($btn, 'click', () => {\n                if (!hud) {\n                    let contents = '';\n                    Craft.announcements.forEach(a => {\n                        contents += `<div class=\"announcement ${a.unread ? 'unread' : ''}\">` +\n                            '<div class=\"announcement-label-container\">' +\n                            `<div class=\"announcement-icon\">${a.icon}</div>` +\n                            `<div class=\"announcement-label\">${a.label}</div>` +\n                            '</div>' +\n                            `<h2>${a.heading}</h2>` +\n                            `<p>${a.body}</p>` +\n                            '</div>';\n                    });\n                    hud = new Garnish.HUD($btn, `<div id=\"announcements\">${contents}</div>`, {\n                        onShow: () => {\n                            $btn.addClass('active');\n                        },\n                        onHide: () => {\n                            $btn.removeClass('active');\n                        },\n                    });\n\n                    // Open outbound links in new windows\n                    $('a', hud.$main).each(function() {\n                        if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                            $(this).attr('rel', 'noopener').attr('target', '_blank')\n                        }\n                    });\n\n                    if (hasUnreads) {\n                        $btn.removeClass('unread');\n                        Craft.sendActionRequest('POST', 'users/mark-announcements-as-read', {\n                            data: {\n                                ids: Craft.announcements.map(a => a.id),\n                            },\n                        });\n                    }\n                } else {\n                    hud.show();\n                }\n            });\n        }\n    },\n\n    initSpecialForms: function() {\n        // Look for forms that we should watch for changes on\n        this.$confirmUnloadForms = $('form[data-confirm-unload]');\n        this.$deltaForms = $('form[data-delta]');\n\n        if (!this.$confirmUnloadForms.length) {\n            return;\n        }\n\n        var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n        var $form, serialized;\n\n        for (var i = 0; i < $forms.length; i++) {\n            $form = $forms.eq(i);\n            if (!$form.data('initialSerializedValue')) {\n                if (typeof $form.data('serializer') === 'function') {\n                    serialized = $form.data('serializer')();\n                } else {\n                    serialized = $form.serialize();\n                }\n                $form.data('initialSerializedValue', serialized);\n            }\n            this.addListener($form, 'submit', function(ev) {\n                if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                    this.removeListener(Garnish.$win, 'beforeunload');\n                }\n                if (Garnish.hasAttr($form, 'data-delta')) {\n                    ev.preventDefault();\n                    var serialized;\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                    Craft.createForm(data)\n                        .appendTo(Garnish.$bod)\n                        .submit();\n                }\n            });\n        }\n\n        this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n            var confirmUnload = false;\n            var $form, serialized;\n            if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                confirmUnload = true;\n            } else {\n                for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                    $form = this.$confirmUnloadForms.eq(i);\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    if ($form.data('initialSerializedValue') !== serialized) {\n                        confirmUnload = true;\n                        break;\n                    }\n                }\n            }\n\n            if (confirmUnload) {\n                var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                if (ev) {\n                    ev.originalEvent.returnValue = message;\n                } else {\n                    window.event.returnValue = message;\n                }\n\n                return message;\n            }\n        });\n    },\n\n    _handleInputFocus: function() {\n        this.updateFixedHeader();\n    },\n\n    _handleInputBlur: function() {\n        this.updateFixedHeader();\n    },\n\n    /**\n     * Submits a form.\n     * @param {Object} [options]\n     * @param {string} [options.action] The `action` param value override\n     * @param {string} [options.redirect] The `redirect` param value override\n     * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n     * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n     * @param {Object} [options.data] Additional data to be passed to the submit event\n     * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n     */\n    submitPrimaryForm: function(options) {\n        // Give other stuff on the page a chance to prepare\n        this.trigger('beforeSaveShortcut');\n\n        if (typeof options !== 'object' || !$.isPlainObject(options)) {\n            options = {};\n        }\n\n        if (!options.redirect) {\n            options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n        }\n\n        if (!options.data) {\n            options.data = {};\n        }\n        options.data.saveShortcut = true;\n\n        Craft.submitForm(this.$primaryForm, options);\n    },\n\n    updateSidebarMenuLabel: function() {\n        var $item = this.$sidebar.find('a.sel:first');\n        var $label = $item.children('.label');\n        $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n        Garnish.$bod.removeClass('showing-sidebar');\n    },\n\n    toggleNav: function() {\n        const isExpanded = this.navIsExpanded();\n\n        if (isExpanded === null) return;\n\n        if (isExpanded) {\n            this.disableGlobalSidebarLinks();\n            this.$navToggle.focus();\n            this.$navToggle.attr('aria-expanded', 'false');\n            Garnish.$bod.removeClass('showing-nav');\n        } else {\n            this.enableGlobalSidebarLinks();\n            this.$globalSidebar.find(':focusable')[0].focus();\n            this.$navToggle.attr('aria-expanded', 'true');\n            Garnish.$bod.addClass('showing-nav');\n        }\n    },\n\n    enableGlobalSidebarLinks: function() {\n        const focusableItems = this.$globalSidebar.find(':focusable');\n        \n        $(focusableItems).each(function() {\n            $(this).attr('tabindex', '0');\n        });\n    },\n\n    disableGlobalSidebarLinks: function() {\n        const focusableItems = this.$globalSidebar.find(':focusable');\n        \n        $(focusableItems).each(function() {\n            $(this).attr('tabindex', '-1');\n        });\n    },\n\n    setSidebarNavAttributes: function() {\n        const isExpanded = this.navIsExpanded();\n\n        if (isExpanded === null) return;\n\n        if (!isExpanded) {\n            this.disableGlobalSidebarLinks();\n        } else {\n            this.enableGlobalSidebarLinks();\n        }\n    },\n\n    navIsExpanded: function() {\n        if (!this.$globalSidebar[0]) return null;\n\n        const isAlwaysVisible = getComputedStyle(this.$globalSidebar[0]).getPropertyValue('--is-always-visible').trim();\n\n        return this.$navToggle.attr('aria-expanded') === 'true'\n            || isAlwaysVisible === 'true';\n    },\n\n    toggleSidebar: function() {\n        Garnish.$bod.toggleClass('showing-sidebar');\n    },\n\n    initTabs: function() {\n        if (this.tabManager) {\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        const $tabs = $('#tabs');\n        if (!$tabs.length) {\n            return;\n        }\n\n        this.tabManager = new Craft.Tabs($tabs);\n\n        this.tabManager.on('selectTab', ev => {\n            const href = ev.$tab.attr('href');\n\n            // Show its content area\n            if (href.charAt(0) === '#') {\n                $(href).removeClass('hidden');\n            }\n\n            // Trigger a resize event to update any UI components that are listening for it\n            Garnish.$win.trigger('resize');\n\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n\n            // If there is a revision menu, set its links to this tab ID\n            if (href && href.charAt(0) === '#') {\n                const menuBtn = $('#context-btn').menubtn().data('menubtn');\n                if (menuBtn) {\n                    for (let i = 0; i < menuBtn.menu.$options.length; i++) {\n                        let a = menuBtn.menu.$options[i];\n                        if (a.href) {\n                            a.href = a.href.match(/^[^#]*/)[0] + href;\n                        }\n                    }\n                }\n            }\n\n            if (typeof history !== 'undefined') {\n                // Delay changing the hash so it doesn't cause the browser to jump on page load\n                Garnish.requestAnimationFrame(() => {\n                    history.replaceState(undefined, undefined, href);\n                });\n            }\n        });\n\n        this.tabManager.on('deselectTab', ev => {\n            if (ev.$tab.attr('href').charAt(0) === '#') {\n                // Hide its content area\n                $(ev.$tab.attr('href')).addClass('hidden');\n            }\n        });\n\n        if (window.LOCATION_HASH) {\n            const $tab = this.tabManager.$tabs.filter(`[href=\"#${window.LOCATION_HASH}\"]`);\n            if ($tab.length) {\n                this.tabManager.selectTab($tab);\n            }\n        }\n    },\n\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsContainer() {\n        return this.tabManager ? this.tabManager.$container : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsList() {\n        return this.tabManager ? this.tabManager.$ul : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabs() {\n        return this.tabManager ? this.tabManager.$ul.find('> li') : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $selectedTab() {\n        return this.tabManager ? this.tabManager.$selectedTab : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get selectedTabIndex() {\n        return this.tabManager ? this.tabManager.$tabs.index(this.tabManager.$selectedTab) : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $focusableTab() {\n        return this.tabManager ? this.tabManager.$focusableTab : undefined;\n    },\n    /**\n     * @param {object} tab\n     * @deprecated in 3.7.0\n     */\n    selectTab: function(tab) {\n        if (this.tabManager) {\n            this.tabManager.selectTab(tab);\n        }\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    deselectTab: function() {\n        if (this.tabManager) {\n            this.tabManager.deselectTab();\n        }\n    },\n\n    handleWindowResize: function() {\n        this.updateResponsiveTables();\n        this.handleBreadcrumbVisibility();\n    },\n\n    breadcrumbItemsWrap: function() {\n        if (!this.$breadcrumbItems[0]) return;\n\n        const listWidth = this.$breadcrumbList[0].offsetWidth;\n        let totalItemWidth = 0;\n        \n        // Iterate through all list items (inclusive of more button)\n        this.$breadcrumbList.find('li').each(function() {\n            totalItemWidth += $(this)[0].offsetWidth;\n        });\n\n        this.breadcrumbListWidth = listWidth;\n\n        return totalItemWidth > listWidth;\n    },\n\n    handleBreadcrumbVisibility: function() {\n        if (!this.breadcrumbItemsWrap()) return;\n\n        if (this.$breadcrumbList.find('[data-disclosure-item]').length === 0) {\n            this.$breadcrumbList.append(this.breadcrumbDisclosureItem);\n        }\n\n        const triggerWidth = this.$breadcrumbList.find('[data-disclosure-item]')[0].offsetWidth;\n        let visibleItemWidth = triggerWidth;\n        let finalIndex;\n        let newWidth;\n        const listWidth = this.breadcrumbListWidth;\n\n        // Find breadcrumbs that should remain visible without overflowing\n        this.$breadcrumbItems.each(function(index) {\n            newWidth = visibleItemWidth + this.offsetWidth;\n\n            if (newWidth < listWidth) {\n                finalIndex = index;\n                visibleItemWidth += this.offsetWidth;\n            } else {\n                return false;\n            }\n        });\n\n        // Separate breadcrums that should remain visible vs. hidden\n        const shownItems = this.$breadcrumbItems.slice(0, finalIndex + 1);\n        const hiddenItems = this.$breadcrumbItems.slice(finalIndex + 1);\n        \n        // Empty list DOM and add shown items and trigger item\n        this.$breadcrumbList.html('');\n        this.$breadcrumbList.append(shownItems);\n        this.$breadcrumbList.append(this.breadcrumbDisclosureItem);\n        \n        // Add hidden items to disclosure menu and initialize\n        this.$breadcrumbList.find('[data-disclosure-menu] ul').append(hiddenItems);\n        this.$breadcrumbList.find('[data-disclosure-trigger]').disclosureMenu();\n    },\n\n    updateResponsiveTables: function() {\n        for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n            this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n            this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n            this.updateResponsiveTables._check = false;\n\n            if (this.updateResponsiveTables._containerWidth > 0) {\n                // Is this the first time we've checked this table?\n                if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                    this.updateResponsiveTables._check = true;\n                } else {\n                    this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                    // Getting wider?\n                    if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                        if (this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._$table.removeClass('collapsed');\n                            this.updateResponsiveTables._check = true;\n                        }\n                    } else if (!this.updateResponsiveTables._isCollapsed) {\n                        this.updateResponsiveTables._check = true;\n                    }\n                }\n\n                // Are we checking the table width?\n                if (this.updateResponsiveTables._check) {\n                    if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                        this.updateResponsiveTables._$table.addClass('collapsed');\n                    }\n                }\n\n                // Remember the container width for next time\n                this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n            }\n        }\n    },\n\n    updateFixedHeader: function() {\n        if (this.isMobile) {\n            return;\n        }\n\n        // Have we scrolled passed the top of #main?\n        if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n            if (!this.fixedHeader) {\n                var headerHeight = this.$headerContainer.height();\n\n                // Hard-set the minimum content container height\n                this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                // Hard-set the header container height\n                this.$headerContainer.height(headerHeight);\n                Garnish.$bod.addClass('fixed-header');\n\n                // Fix the sidebar and details pane positions if they are taller than #content-container\n                var contentHeight = this.$contentContainer.outerHeight();\n                var $detailsHeight = this.$details.outerHeight();\n                var css = {\n                    top: headerHeight + 'px',\n                    'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                };\n                this.$sidebar.addClass('fixed').css(css);\n                this.$details.addClass('fixed').css(css);\n                this.fixedHeader = true;\n            }\n        } else if (this.fixedHeader) {\n            this.$headerContainer.height('auto');\n            Garnish.$bod.removeClass('fixed-header');\n            this.$contentContainer.css('min-height', '');\n            this.$sidebar.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.$details.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.fixedHeader = false;\n        }\n    },\n\n    /**\n     * Dispays a notification.\n     *\n     * @param {string} type\n     * @param {string} message\n     */\n    displayNotification: function(type, message) {\n        var notificationDuration = Craft.CP.notificationDuration;\n\n        if (['cp-error', 'error'].includes(type)) {\n            notificationDuration *= 2;\n            icon = 'alert';\n            label = Craft.t('app', 'Error');\n        } else {\n            icon = 'info';\n            label = Craft.t('app', 'Notice');\n        }\n\n        var $notification = $(`\n            <div class=\"notification ${ type.replace('cp-', '') }\">\n                <span data-icon=\"${ icon }\" aria-label=\"${ label }\"></span>\n                ${ message }\n            </div>\n            `)\n            .appendTo(this.$notificationContainer);\n\n        var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n        $notification\n            .hide()\n            .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n            .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n            .delay(notificationDuration)\n            .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                complete: function() {\n                    $notification.remove();\n                }\n            });\n\n        this.trigger('displayNotification', {\n            notificationType: type,\n            message: message\n        });\n    },\n\n    /**\n     * Displays a notice.\n     *\n     * @param {string} message\n     */\n    displayNotice: function(message) {\n        this.displayNotification('notice', message);\n    },\n\n    /**\n     * Displays an error.\n     *\n     * @param {string} message\n     */\n    displayError: function(message) {\n        if (!message) {\n            message = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.displayNotification('error', message);\n    },\n\n    fetchAlerts: function() {\n        var data = {\n            path: Craft.path\n        };\n\n        Craft.queueActionRequest('app/get-cp-alerts', data, this.displayAlerts.bind(this));\n    },\n\n    displayAlerts: function(alerts) {\n        this.$alerts.remove();\n\n        if (Garnish.isArray(alerts) && alerts.length) {\n            this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n            for (var i = 0; i < alerts.length; i++) {\n                $(`<li><span data-icon=\"alert\" aria-label=\"${ Craft.t('app', 'Error') }\"></span> ${ alerts[i] }</li>`).appendTo(this.$alerts);\n            }\n\n            var height = this.$alerts.outerHeight();\n            this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n            this.initAlerts();\n        }\n    },\n\n    initAlerts: function() {\n        // Are there any shunnable alerts?\n        var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n        for (var i = 0; i < $shunnableAlerts.length; i++) {\n            this.addListener($shunnableAlerts[i], 'click', ev => {\n                ev.preventDefault();\n\n                var $link = $(ev.currentTarget);\n\n                var data = {\n                    message: $link.prop('className').substr(5)\n                };\n\n                Craft.queueActionRequest('app/shun-cp-alert', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            $link.parent().remove();\n                        } else {\n                            this.displayError(response.error);\n                        }\n                    }\n                });\n            });\n        }\n    },\n\n    checkForUpdates: function(forceRefresh, includeDetails, callback) {\n        // Make 'includeDetails' optional\n        if (typeof includeDetails === 'function') {\n            callback = includeDetails;\n            includeDetails = false;\n        }\n\n        // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n        // then just set a new callback that re-checks for updates when the current one is done.\n        if (this.checkingForUpdates && (\n            (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n            (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n        )) {\n            var realCallback = callback;\n            callback = () => {\n                this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n            };\n        }\n\n        // Callback function?\n        if (typeof callback === 'function') {\n            if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                this.checkForUpdatesCallbacks = [];\n            }\n\n            this.checkForUpdatesCallbacks.push(callback);\n        }\n\n        if (!this.checkingForUpdates) {\n            this.checkingForUpdates = true;\n            this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n            this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n            this._checkForUpdates(forceRefresh, includeDetails)\n                .then(info => {\n                    this.updateUtilitiesBadge();\n                    this.checkingForUpdates = false;\n\n                    if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                        var callbacks = this.checkForUpdatesCallbacks;\n                        this.checkForUpdatesCallbacks = null;\n\n                        for (var i = 0; i < callbacks.length; i++) {\n                            callbacks[i](info);\n                        }\n                    }\n\n                    this.trigger('checkForUpdates', {\n                        updateInfo: info\n                    });\n                });\n        }\n    },\n\n    _checkForUpdates: function(forceRefresh, includeDetails) {\n        return new Promise((resolve, reject) => {\n            if (!forceRefresh) {\n                this._checkForCachedUpdates(includeDetails)\n                    .then(info => {\n                        if (info.cached !== false) {\n                            resolve(info);\n                        }\n\n                        this._getUpdates(includeDetails)\n                            .then(info => {\n                                resolve(info);\n                            });\n                    });\n            } else {\n                this._getUpdates(includeDetails)\n                    .then(info => {\n                        resolve(info);\n                    });\n            }\n        });\n    },\n\n    _checkForCachedUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            var data = {\n                onlyIfCached: true,\n                includeDetails: includeDetails,\n            };\n            Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    resolve({cached: false});\n                }\n            });\n        });\n    },\n\n    _getUpdates: function(includeDetails) {\n        return new Promise((resolve, reject) => {\n            Craft.sendApiRequest('GET', 'updates')\n                .then(updates => {\n                    this._cacheUpdates(updates, includeDetails).then(resolve);\n                })\n                .catch(e => {\n                    this._cacheUpdates({}).then(resolve);\n                });\n        });\n    },\n\n    _cacheUpdates: function(updates, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.postActionRequest('app/cache-updates', {\n                updates: updates,\n                includeDetails: includeDetails,\n            }, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    reject();\n                }\n            }, {\n                contentType: 'json'\n            });\n        });\n    },\n\n    updateUtilitiesBadge: function() {\n        var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n        // Ignore if there is no (non-selected) Utilities nav item\n        if (!$utilitiesLink.length) {\n            return;\n        }\n\n        Craft.queueActionRequest('app/get-utilities-badge-count', response => {\n            // Get the existing utility nav badge, if any\n            var $badge = $utilitiesLink.children('.badge');\n\n            if (response.badgeCount) {\n                if (!$badge.length) {\n                    $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                }\n                $badge.text(response.badgeCount);\n            } else if ($badge.length) {\n                $badge.remove();\n            }\n        });\n    },\n\n    runQueue: function() {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        if (Craft.runQueueAutomatically) {\n            Craft.queueActionRequest('queue/run', (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this.trackJobProgress(false, true);\n                }\n            });\n        } else {\n            this.trackJobProgress(false, true);\n        }\n    },\n\n    trackJobProgress: function(delay, force) {\n        if (force && this.trackJobProgressTimeout) {\n            clearTimeout(this.trackJobProgressTimeout);\n            this.trackJobProgressTimeout = null;\n        }\n\n        // Ignore if we're already tracking jobs, or the queue is disabled\n        if (this.trackJobProgressTimeout || !this.enableQueue) {\n            return;\n        }\n\n        if (delay === true) {\n            // Determine the delay based on how long the displayed job info has remained unchanged\n            var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n            this.trackJobProgressTimeout = setTimeout(this._trackJobProgressInternal.bind(this), timeout);\n        } else {\n            this._trackJobProgressInternal();\n        }\n    },\n\n    _trackJobProgressInternal: function() {\n        Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.trackJobProgressTimeout = null;\n                this.totalJobs = response.total;\n                this.setJobInfo(response.jobs);\n\n                if (this.jobInfo.length) {\n                    // Check again after a delay\n                    this.trackJobProgress(true);\n                }\n            }\n        });\n    },\n\n    setJobInfo: function(jobInfo) {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        this.jobInfo = jobInfo;\n\n        // Update the displayed job info\n        var oldInfo = this.displayedJobInfo;\n        this.displayedJobInfo = this.getDisplayedJobInfo();\n\n        // Same old same old?\n        if (\n            oldInfo &&\n            this.displayedJobInfo &&\n            oldInfo.id === this.displayedJobInfo.id &&\n            oldInfo.progress === this.displayedJobInfo.progress &&\n            oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n            oldInfo.status === this.displayedJobInfo.status\n        ) {\n            this.displayedJobInfoUnchanged++;\n        } else {\n            // Reset the counter\n            this.displayedJobInfoUnchanged = 1;\n        }\n\n        this.updateJobIcon();\n\n        // Fire a setJobInfo event\n        this.trigger('setJobInfo');\n    },\n\n    /**\n     * Returns info for the job that should be displayed in the CP sidebar\n     */\n    getDisplayedJobInfo: function() {\n        if (!this.enableQueue) {\n            return null;\n        }\n\n        // Set the status preference order\n        var statuses = [\n            Craft.CP.JOB_STATUS_RESERVED,\n            Craft.CP.JOB_STATUS_FAILED,\n            Craft.CP.JOB_STATUS_WAITING\n        ];\n\n        for (var i = 0; i < statuses.length; i++) {\n            for (var j = 0; j < this.jobInfo.length; j++) {\n                if (\n                    this.jobInfo[j].status === statuses[i] &&\n                    (statuses[i] !== Craft.CP.JOB_STATUS_WAITING || !this.jobInfo[j].delay)\n                ) {\n                    return this.jobInfo[j];\n                }\n            }\n        }\n\n        return null;\n    },\n\n    updateJobIcon: function() {\n        if (!this.enableQueue || !this.$nav.length) {\n            return;\n        }\n\n        if (this.displayedJobInfo) {\n            if (!this.jobProgressIcon) {\n                this.jobProgressIcon = new JobProgressIcon();\n            }\n\n            if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n            } else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n            }\n        } else {\n            if (this.jobProgressIcon) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.complete();\n                delete this.jobProgressIcon;\n            }\n        }\n    },\n\n    /**\n     * Returns the active site for the control panel\n     *\n     * @return {number}\n     */\n    getSiteId: function() {\n        // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n        let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n        if (typeof siteId !== 'undefined') {\n            Craft.removeLocalStorage('BaseElementIndex.siteId');\n            this.setSiteId(siteId);\n            return siteId;\n        }\n        return Craft.getCookie('siteId');\n    },\n\n    /**\n     * Sets the active site for the control panel\n     * @param {number} siteId\n     */\n    setSiteId: function(siteId) {\n        Craft.setCookie('siteId', siteId, {\n            maxAge: 31536000 // 1 year\n        });\n    }\n}, {\n    //maxWidth: 1051, //1024,\n    notificationDuration: 2000,\n\n    JOB_STATUS_WAITING: 1,\n    JOB_STATUS_RESERVED: 2,\n    JOB_STATUS_DONE: 3,\n    JOB_STATUS_FAILED: 4\n});\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend({\n    $li: null,\n    $a: null,\n    $label: null,\n    $progressLabel: null,\n\n    progress: null,\n    failMode: false,\n\n    _$bgCanvas: null,\n    _$staticCanvas: null,\n    _$hoverCanvas: null,\n    _$failCanvas: null,\n\n    _staticCtx: null,\n    _hoverCtx: null,\n    _canvasSize: null,\n    _arcPos: null,\n    _arcRadius: null,\n    _lineWidth: null,\n\n    _arcStartPos: 0,\n    _arcEndPos: 0,\n    _arcStartStepSize: null,\n    _arcEndStepSize: null,\n    _arcStep: null,\n    _arcStepTimeout: null,\n    _arcAnimateCallback: null,\n\n    _progressBar: null,\n\n    init: function() {\n        this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n        this.$a = $('<a/>', {\n            id: 'job-icon',\n            href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n        }).appendTo(this.$li);\n        this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n        var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n        this.$label = $('<span/>').appendTo($labelContainer);\n        this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n        let m = (window.devicePixelRatio > 1 ? 2 : 1);\n        this._canvasSize = 18 * m;\n        this._arcPos = this._canvasSize / 2;\n        this._arcRadius = 7 * m;\n        this._lineWidth = 3 * m;\n\n        this._$bgCanvas = this._createCanvas('bg', '#61666b');\n        this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n        this._$hoverCanvas = this._createCanvas('hover', '#fff');\n        this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n        this._staticCtx = this._$staticCanvas[0].getContext('2d');\n        this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n        this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n        this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n    },\n\n    setDescription: function(description, progressLabel) {\n        this.$a.attr('title', description);\n        this.$label.text(description);\n        if (progressLabel) {\n            this.$progressLabel.text(progressLabel).show();\n        } else {\n            this.$progressLabel.hide();\n        }\n    },\n\n    setProgress: function(progress) {\n        if (progress == 0) {\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n        } else {\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            if (this.progress && progress > this.progress) {\n                this._animateArc(0, progress / 100);\n            } else {\n                this._setArc(0, progress / 100);\n            }\n        }\n\n        this.progress = progress;\n    },\n\n    complete: function() {\n        this._animateArc(0, 1, () => {\n            this._$bgCanvas.velocity('fadeOut');\n\n            this._animateArc(1, 1, () => {\n                this.$a.remove();\n                this.destroy();\n            });\n        });\n    },\n\n    showFailMode: function(message) {\n        if (this.failMode) {\n            return;\n        }\n\n        this.failMode = true;\n        this.progress = null;\n\n        this._$bgCanvas.hide();\n        this._$staticCanvas.hide();\n        this._$hoverCanvas.hide();\n        this._$failCanvas.show();\n\n        this.setDescription(message);\n    },\n\n    hideFailMode: function() {\n        if (!this.failMode) {\n            return;\n        }\n\n        this.failMode = false;\n\n        this._$bgCanvas.show();\n        this._$staticCanvas.show();\n        this._$hoverCanvas.show();\n        this._$failCanvas.hide();\n    },\n\n    _createCanvas: function(id, color) {\n        var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n            ctx = $canvas[0].getContext('2d');\n\n        ctx.strokeStyle = color;\n        ctx.lineWidth = this._lineWidth;\n        ctx.lineCap = 'round';\n        return $canvas;\n    },\n\n    _setArc: function(startPos, endPos) {\n        this._arcStartPos = startPos;\n        this._arcEndPos = endPos;\n\n        this._drawArc(this._staticCtx, startPos, endPos);\n        this._drawArc(this._hoverCtx, startPos, endPos);\n    },\n\n    _drawArc: function(ctx, startPos, endPos) {\n        ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n        ctx.beginPath();\n        ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n    },\n\n    _animateArc: function(targetStartPos, targetEndPos, callback) {\n        if (this._arcStepTimeout) {\n            clearTimeout(this._arcStepTimeout);\n        }\n\n        this._arcStep = 0;\n        this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n        this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n        this._arcAnimateCallback = callback;\n        this._takeNextArcStep();\n    },\n\n    _takeNextArcStep: function() {\n        this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n        this._arcStep++;\n\n        if (this._arcStep < 10) {\n            this._arcStepTimeout = setTimeout(this._takeNextArcStep.bind(this), 50);\n        } else if (this._arcAnimateCallback) {\n            this._arcAnimateCallback();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend({\n    editableGroups: null,\n    $newCategoryBtnGroup: null,\n    $newCategoryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible groups the user has permission to create new categories in\n        this.editableGroups = [];\n\n        for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n            var group = Craft.editableCategoryGroups[i];\n\n            if (this.getSourceByKey('group:' + group.uid)) {\n                this.editableGroups.push(group);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific category group in the URL?\n        if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n\n                if ($source.data('handle') === defaultGroupHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        // Get the handle of the selected source\n        var selectedSourceHandle = this.$source.data('handle');\n\n        var i, href, label;\n\n        // Update the New Category button\n        // ---------------------------------------------------------------------\n\n        if (this.editableGroups.length) {\n            // Remove the old button, if there is one\n            if (this.$newCategoryBtnGroup) {\n                this.$newCategoryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a group that they have permission to create categories in\n            var selectedGroup;\n\n            if (selectedSourceHandle) {\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    if (this.editableGroups[i].handle === selectedSourceHandle) {\n                        selectedGroup = this.editableGroups[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n            // Otherwise only show a menu button\n            if (selectedGroup) {\n                href = this._getGroupTriggerHref(selectedGroup);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                        this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.editableGroups.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n            } else {\n                this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New category'),\n                }).appendTo(this.$newCategoryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    var group = this.editableGroups[i];\n\n                    if (this.settings.context === 'index' || group !== selectedGroup) {\n                        href = this._getGroupTriggerHref(group);\n                        label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newCategoryBtnGroup);\n        }\n\n        // Update the URL if we're on the Categories index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'categories';\n\n            if (selectedSourceHandle) {\n                uri += '/' + selectedSourceHandle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getGroupTriggerHref: function(group) {\n        if (this.settings.context === 'index') {\n            const uri = `categories/${group.handle}/new`;\n            const site = this.getSite();\n            const params = site ? {site: site.handle} : undefined;\n            return `href=\"${Craft.getUrl(uri, params)}\"`;\n        }\n\n        return `data-id=\"${group.id}\"`;\n    },\n\n    _openCreateCategoryModal: function(groupId) {\n        if (this.$newCategoryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the group\n        var group;\n\n        for (var i = 0; i < this.editableGroups.length; i++) {\n            if (this.editableGroups[i].id == groupId) {\n                group = this.editableGroups[i];\n                break;\n            }\n        }\n\n        if (!group) {\n            return;\n        }\n\n        this.$newCategoryBtn.addClass('inactive');\n        var newCategoryBtnText = this.$newCategoryBtn.text();\n        this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newCategoryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                groupId: groupId\n            },\n            onHideHud: () => {\n                this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right group is selected\n                var groupSourceKey = 'group:' + group.uid;\n\n                if (this.sourceKey !== groupSourceKey) {\n                    this.selectSourceByKey(groupSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend({\n    setSettings: function() {\n        this.base.apply(this, arguments);\n        this.settings.sortable = false;\n    },\n\n    getModalSettings: function() {\n        var settings = this.base();\n        settings.hideOnSelect = false;\n        return settings;\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.find('.element');\n    },\n\n    onModalSelect: function(elements) {\n        // Disable the modal\n        this.modal.disable();\n        this.modal.disableCancelBtn();\n        this.modal.disableSelectBtn();\n        this.modal.showFooterSpinner();\n\n        // Get the new category HTML\n        var selectedCategoryIds = this.getSelectedElementIds();\n\n        for (var i = 0; i < elements.length; i++) {\n            selectedCategoryIds.push(elements[i].id);\n        }\n\n        var data = {\n            categoryIds: selectedCategoryIds,\n            siteId: elements[0].siteId,\n            id: this.settings.id,\n            name: this.settings.name,\n            branchLimit: this.settings.branchLimit,\n            selectionLabel: this.settings.selectionLabel\n        };\n\n        Craft.postActionRequest('elements/get-categories-input-html', data, (response, textStatus) => {\n            this.modal.enable();\n            this.modal.enableCancelBtn();\n            this.modal.enableSelectBtn();\n            this.modal.hideFooterSpinner();\n\n            if (textStatus === 'success') {\n                var $newInput = $(response.html),\n                    $newElementsContainer = $newInput.children('.elements');\n\n                this.$elementsContainer.replaceWith($newElementsContainer);\n                this.$elementsContainer = $newElementsContainer;\n                this.resetElements();\n\n                var filteredElements = [];\n\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i],\n                        $element = this.getElementById(element.id);\n\n                    if ($element) {\n                        this.animateElementIntoPlace(element.$element, $element);\n                        filteredElements.push(element);\n                    }\n                }\n\n                this.updateDisabledElementsInModal();\n                this.modal.hide();\n                this.onSelectElements(filteredElements);\n            }\n        });\n    },\n\n    removeElement: function($element) {\n        // Find any descendants this category might have\n        var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n        // Remove our record of them all at once\n        this.removeElements($allCategories);\n\n        // Animate them away one at a time\n        for (var i = 0; i < $allCategories.length; i++) {\n            this._animateCategoryAway($allCategories, i);\n        }\n    },\n\n    _animateCategoryAway: function($allCategories, i) {\n        var callback;\n\n        // Is this the last one?\n        if (i === $allCategories.length - 1) {\n            callback = () => {\n                var $li = $allCategories.first().parent().parent(),\n                    $ul = $li.parent();\n\n                if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                    $li.remove();\n                } else {\n                    $ul.remove();\n                }\n            };\n        }\n\n        var func = () => {\n            this.animateElementAway($allCategories.eq(i), callback);\n        };\n\n        if (i === 0) {\n            func();\n        } else {\n            setTimeout(func, 100 * i);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend({\n    columns: null,\n    rows: null,\n\n    init: function(data) {\n        let columns = data.columns;\n        let rows = data.rows;\n\n        rows.forEach(d => {\n            $.each(d, function(cellIndex) {\n                var column = columns[cellIndex];\n\n                var parseTime;\n\n                switch (column.type) {\n                    case 'date':\n                        parseTime = d3.timeParse('%Y-%m-%d');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'datetime':\n                        parseTime = d3.timeParse('%Y-%m-%d %H:00:00');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'percent':\n                        d[cellIndex] = d[cellIndex] / 100;\n                        break;\n\n                    case 'number':\n                        d[cellIndex] = +d[cellIndex];\n                        break;\n\n                    default:\n                    // do nothing\n                }\n            });\n        });\n\n        this.columns = columns;\n        this.rows = rows;\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend({\n    $container: null,\n    $tip: null,\n\n    init: function($container) {\n        this.$container = $container;\n\n        this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n        this.hide();\n    },\n\n    setContent: function(html) {\n        this.$tip.html(html);\n    },\n\n    setPosition: function(position) {\n        this.$tip.css('left', `${position.left}px`);\n        this.$tip.css('top', `${position.top}px`);\n    },\n\n    show: function() {\n        this.$tip.css('display', 'block');\n    },\n\n    hide: function() {\n        this.$tip.css('display', 'none');\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend({\n    $container: null,\n    $chart: null,\n\n    chartBaseClass: 'cp-chart',\n    dataTable: null,\n\n    formatLocale: null,\n    timeFormatLocale: null,\n    orientation: null,\n\n    svg: null,\n    width: null,\n    height: null,\n\n    init: function(container, settings) {\n        this.$container = container;\n\n        this.setSettings(Craft.charts.BaseChart.defaults);\n        this.setSettings(settings);\n\n        var globalSettings = {\n            formats: window.d3Formats,\n            formatLocaleDefinition: window.d3FormatLocaleDefinition,\n            timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n        };\n\n        this.setSettings(globalSettings);\n\n        d3.select(window).on('resize', () => {\n            this.resize();\n        });\n    },\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n    },\n\n    draw: function(dataTable, settings) {\n        // Settings and chart attributes\n\n        this.setSettings(settings);\n\n        this.dataTable = dataTable;\n        this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n        this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n        this.orientation = this.settings.orientation;\n\n        // Set (or reset) the chart element\n\n        if (this.$chart) {\n            this.$chart.remove();\n        }\n\n        var className = this.chartBaseClass;\n\n        if (this.settings.chartClass) {\n            className += ' ' + this.settings.chartClass;\n        }\n\n        this.$chart = $(`<div class=\"${className}\" />`).appendTo(this.$container);\n    },\n\n    resize: function() {\n        this.draw(this.dataTable, this.settings);\n    },\n\n    onAfterDrawTicks: function() {\n        // White border for ticks' text\n        $('.tick', this.$chart).each(function(tickKey, tick) {\n            var $tickText = $('text', tick);\n\n            var $clone = $tickText.clone();\n            $clone.appendTo(tick);\n\n            $tickText.attr('stroke', '#ffffff');\n            $tickText.attr('stroke-width', 3);\n        });\n    }\n}, {\n    defaults: {\n        formatLocaleDefinition: null,\n        timeFormatLocaleDefinition: null,\n        formats: {\n            numberFormat: ',.2f',\n            percentFormat: ',.2%',\n            currencyFormat: '$,.2f',\n            shortDateFormats: {\n                day: '%-m/%-d',\n                month: '%-m/%y',\n                year: '%Y'\n            }\n        },\n        margin: {top: 0, right: 0, bottom: 0, left: 0},\n        chartClass: null,\n        colors: ['#0594D1', '#DE3800', '#FF9A00', '#009802', '#9B009B']\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend({\n    tip: null,\n    drawingArea: null,\n\n    init: function(container, settings) {\n        this.base(container, Craft.charts.Area.defaults);\n\n        this.setSettings(settings);\n    },\n\n    draw: function(dataTable, settings) {\n        this.base(dataTable, settings);\n\n        if (this.tip) {\n            this.tip = null;\n        }\n\n        var margin = this.getChartMargin();\n\n        this.width = this.$chart.width() - margin.left - margin.right;\n        this.height = this.$chart.height() - margin.top - margin.bottom;\n\n        // Append SVG to chart element\n\n        var svg = {\n            width: this.width + (margin.left + margin.right),\n            height: this.height + (margin.top + margin.bottom),\n            translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n            translateY: margin.top\n        };\n\n        this.svg = d3.select(this.$chart.get(0)).append('svg')\n            .attr('width', svg.width)\n            .attr('height', svg.height);\n\n        this.drawingArea = this.svg.append('g')\n            .attr('transform', `translate(${svg.translateX},${svg.translateY})`);\n\n        // Draw elements\n\n        this.drawTicks();\n        this.drawAxes();\n        this.drawChart();\n        this.drawTipTriggers();\n    },\n\n    drawTicks: function() {\n        // Draw X ticks\n\n        var x = this.getX(true);\n        var xTicks = 3;\n        var xAxis = d3.axisBottom(x)\n            .tickFormat(this.getXFormatter())\n            .ticks(xTicks);\n\n        this.drawingArea.append('g')\n            .attr('class', 'x ticks-axis')\n            .attr('transform', `translate(0, ${this.height})`)\n            .call(xAxis);\n\n        // Draw Y ticks\n\n        var y = this.getY();\n        var yTicks = 2;\n        var yAxis;\n\n        if (this.orientation !== 'rtl') {\n            yAxis = d3.axisLeft(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .call(yAxis);\n        } else {\n            yAxis = d3.axisRight(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .attr('transform', `translate(${this.width},0)`)\n                .call(yAxis);\n        }\n\n        // On after draw ticks\n\n        this.onAfterDrawTicks();\n    },\n\n    drawAxes: function() {\n        if (this.settings.xAxis.showAxis) {\n            var x = this.getX();\n            var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n            this.drawingArea.append('g')\n                .attr('class', 'x axis')\n                .attr('transform', `translate(0, ${this.height})`)\n                .call(xAxis);\n        }\n\n        if (this.settings.yAxis.showAxis) {\n            var y = this.getY();\n            var chartPadding = 0;\n            var yAxis;\n\n            if (this.orientation === 'rtl') {\n                yAxis = d3.axisLeft(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${this.width - chartPadding}, 0)`)\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${chartPadding}, 0)`)\n                    .call(yAxis);\n            }\n        }\n    },\n\n    drawChart: function() {\n        var x = this.getX(true);\n        var y = this.getY();\n\n        // X & Y grid lines\n\n        if (this.settings.xAxis.gridlines) {\n            var xLineAxis = d3.axisBottom(x);\n\n            this.drawingArea.append('g')\n                .attr('class', 'x grid-line')\n                .attr('transform', `translate(0,${this.height})`)\n                .call(xLineAxis\n                    .tickSize(-this.height, 0, 0)\n                    .tickFormat('')\n                );\n        }\n\n        var yTicks = 2;\n\n        if (this.settings.yAxis.gridlines) {\n            var yLineAxis = d3.axisLeft(y);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y grid-line')\n                .attr('transform', 'translate(0 , 0)')\n                .call(yLineAxis\n                    .tickSize(-(this.width), 0)\n                    .tickFormat('')\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks)\n                );\n        }\n\n        // Line\n\n        var line = d3.line()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-line')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', 'none')\n            .style('stroke', this.settings.colors[0])\n            .style('stroke-width', '3px')\n            .attr('d', line);\n\n        // Area\n\n        var area = d3.area()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y0(this.height)\n            .y1(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-area')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', this.settings.colors[0])\n            .style('fill-opacity', '0.3')\n            .attr('d', area);\n\n        // Plots\n\n        if (this.settings.plots) {\n            this.drawingArea.append('g')\n                .attr('class', 'plots')\n                .selectAll('circle')\n                .data(this.dataTable.rows)\n                .enter()\n                .append('circle')\n                .style('fill', this.settings.colors[0])\n                .attr('class', (d, index) => `plot plot-${index}`)\n                .attr('r', 4)\n                .attr('cx', d => x(d[0]))\n                .attr('cy', d => y(d[1]));\n        }\n    },\n\n    drawTipTriggers: function() {\n        if (this.settings.tips) {\n            if (!this.tip) {\n                this.tip = new Craft.charts.Tip(this.$chart);\n            }\n\n            // Define xAxisTickInterval\n\n            var chartMargin = this.getChartMargin();\n            var tickSizeOuter = 6;\n            var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n            var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n            // Tip trigger width\n\n            var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n            // Draw triggers\n\n            var x = this.getX(true);\n            var y = this.getY();\n\n            this.drawingArea.append('g')\n                .attr('class', 'tip-triggers')\n                .selectAll('rect')\n                .data(this.dataTable.rows)\n                .enter().append('rect')\n                .attr('class', 'tip-trigger')\n                .style('fill', 'transparent')\n                .style('fill-opacity', '1')\n                .attr('width', tipTriggerWidth)\n                .attr('height', this.height)\n                .attr('x', d => x(d[0]) - tipTriggerWidth / 2)\n                .on('mouseover', (d, index) => {\n                    // Expand plot\n\n                    this.drawingArea.select('.plot-' + index).attr('r', 5);\n\n                    // Set tip content\n\n                    var $content = $('<div />');\n                    var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                    var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                    $xValue.html(this.getXFormatter()(d[0]));\n                    $yValue.html(this.getYFormatter()(d[1]));\n\n                    var content = $content.get(0);\n\n                    this.tip.setContent(content);\n\n                    // Set tip position\n\n                    var margin = this.getChartMargin();\n\n                    var offset = 24;\n                    var top = (y(d[1]) + offset);\n                    var left;\n\n                    if (this.orientation !== 'rtl') {\n                        left = (x(d[0]) + margin.left + offset);\n\n                        var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                        var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                        if (calcLeft > maxLeft) {\n                            left = x(d[0]) - (this.tip.$tip.width() + offset);\n                        }\n                    } else {\n                        left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                    }\n\n                    if (left < 0) {\n                        left = (x(d[0]) + margin.left + offset);\n                    }\n\n                    var position = {\n                        top: top,\n                        left: left\n                    };\n\n                    this.tip.setPosition(position);\n\n                    // Show tip\n\n                    this.tip.show();\n                })\n                .on('mouseout', (d, index) => {\n                    // Unexpand Plot\n                    this.drawingArea.select('.plot-' + index).attr('r', 4);\n\n                    // Hide tip\n                    this.tip.hide();\n                });\n        }\n    },\n\n    getChartMargin: function() {\n        var margin = this.settings.margin;\n\n        // Estimate the max width of y ticks and set it as the left margin\n\n        var values = this.getYTickValues();\n        var yTicksMaxWidth = 0;\n\n        $.each(values, (key, value) => {\n            var characterWidth = 8;\n\n            var formatter = this.getYFormatter();\n\n            var formattedValue = formatter(value);\n            var computedTickWidth = formattedValue.length * characterWidth;\n\n            if (computedTickWidth > yTicksMaxWidth) {\n                yTicksMaxWidth = computedTickWidth;\n            }\n        });\n\n        yTicksMaxWidth += 10;\n\n        margin.left = yTicksMaxWidth;\n\n        return margin;\n    },\n\n    getX: function(padded) {\n        var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomain = [xDomainMin, xDomainMax];\n\n        if (this.orientation === 'rtl') {\n            xDomain = [xDomainMax, xDomainMin];\n        }\n\n        var left = 0;\n        var right = 0;\n\n        if (padded) {\n            left = 0;\n            right = 0;\n        }\n\n        var x = d3.scaleTime().range([left, (this.width - right)]);\n\n        x.domain(xDomain);\n\n        return x;\n    },\n\n    getY: function() {\n        var yDomain = [0, this.getYMaxValue()];\n\n        var y = d3.scaleLinear().range([this.height, 0]);\n\n        y.domain(yDomain);\n\n        return y;\n    },\n\n    getXFormatter: function() {\n        var formatter;\n\n        if (this.settings.xAxis.formatter !== $.noop) {\n            formatter = this.settings.xAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYFormatter: function() {\n        var formatter;\n\n        if (this.settings.yAxis.formatter !== $.noop) {\n            formatter = this.settings.yAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYMaxValue: function() {\n        return d3.max(this.dataTable.rows, function(d) {\n            return d[1];\n        });\n    },\n\n    getYTickValues: function() {\n        var maxValue = this.getYMaxValue();\n\n        if (maxValue > 1) {\n            return [(maxValue / 2), maxValue];\n        } else {\n            return [0, maxValue];\n        }\n    }\n}, {\n    defaults: {\n        chartClass: 'area',\n        margin: {top: 25, right: 5, bottom: 25, left: 0},\n        plots: true,\n        tips: true,\n        xAxis: {\n            gridlines: false,\n            showAxis: true,\n            formatter: $.noop\n        },\n        yAxis: {\n            gridlines: true,\n            showAxis: false,\n            formatter: $.noop\n        }\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = `0${duration.hours}`;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = `0${duration.minutes}`;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = `0${duration.seconds}`;\n        }\n\n        return `${duration.hours}:${duration.minutes}:${duration.seconds}`;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(`${chartSettings.formats.shortDateFormats.day} %H:00:00`);\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.find('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .attr({\n                'aria-controls': this.$input.attr('id'),\n                'aria-label': Craft.t('app', 'Color picker'),\n            })\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorInput, 'click', function (ev) {\n            ev.stopPropagation();\n        });\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'input', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        let val = this.$input.val();\n\n        if (val !== (val = Craft.trim(val))) {\n            this.$input.val(val);\n        }\n\n        // Chop off the #\n        if (val.length && val[0] === '#') {\n            val = val.substr(1);\n            this.$input.val(val);\n        }\n\n        // If empty, set the preview to transparent\n        if (!val.length) {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Now normalize it for the UI stuff\n        if (val.length === 3) {\n            val = val[0].repeat(2) + val[1].repeat(2) + val[2].repeat(2);\n        }\n\n        if (val.match(/^[0-9a-f]{6}$/i)) {\n            this.$colorPreview.css('background-color', `#${val}`);\n            if (this.$colorInput) {\n                this.$colorInput.val(`#${val}`);\n            }\n        } else {\n            this.$colorPreview.css('background-color', '');\n        }\n    },\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function() {\n        if (Craft.ColorInput._browserSupportsColorInputs === null) {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend({\n    elementIndex: null,\n    $elementIndexSourcesContainer: null,\n\n    $sidebar: null,\n    $sourcesContainer: null,\n    $sourceSettingsContainer: null,\n    $newHeadingBtn: null,\n    $footer: null,\n    $footerBtnContainer: null,\n    $saveBtn: null,\n    $cancelBtn: null,\n    $saveSpinner: null,\n    $loadingSpinner: null,\n\n    sourceSort: null,\n    sources: null,\n    selectedSource: null,\n    updateSourcesOnSave: false,\n\n    availableTableAttributes: null,\n\n    init: function(elementIndex, settings) {\n        this.base();\n\n        this.setSettings(settings, {\n            resizable: true\n        });\n\n        this.elementIndex = elementIndex;\n        this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n        var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n        this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n        this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n        this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n        this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n        this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n        this.$newHeadingBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit add icon',\n            text: Craft.t('app', 'New heading'),\n        }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n        this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n        this.setContainer($container);\n        this.show();\n\n        var data = {\n            elementType: this.elementIndex.elementType\n        };\n\n        Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, (response, textStatus) => {\n            this.$loadingSpinner.remove();\n\n            if (textStatus === 'success') {\n                this.$saveBtn.removeClass('disabled');\n                this.buildModal(response);\n            }\n        });\n\n        this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n        this.addListener(this.$cancelBtn, 'click', 'hide');\n        this.addListener(this.$saveBtn, 'click', 'save');\n        this.addListener(this.$container, 'submit', 'save');\n    },\n\n    buildModal: function(response) {\n        // Store the available table attribute options\n        this.availableTableAttributes = response.availableTableAttributes;\n\n        // Create the source item sorter\n        this.sourceSort = new Garnish.DragSort({\n            handle: '.move',\n            axis: 'y',\n            onSortChange: () => {\n                this.updateSourcesOnSave = true;\n            },\n        });\n\n        // Create the sources\n        this.sources = [];\n\n        for (var i = 0; i < response.sources.length; i++) {\n            var source = this.addSource(response.sources[i]);\n            this.sources.push(source);\n        }\n\n        if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n            this.sources[0].select();\n        }\n    },\n\n    addSource: function(sourceData) {\n        var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n        var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n        var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n        $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n        var source;\n\n        // Is this a heading?\n        if (typeof sourceData.heading !== 'undefined') {\n            $item.addClass('heading');\n            $itemInput.attr('name', 'sourceOrder[][heading]');\n            source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.heading);\n        } else {\n            $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n            source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.label);\n\n            // Select this by default?\n            if ((this.elementIndex.sourceKey + '/').substr(0, sourceData.key.length + 1) === sourceData.key + '/') {\n                source.select();\n            }\n        }\n\n        this.sourceSort.addItems($item);\n\n        return source;\n    },\n\n    handleNewHeadingBtnClick: function() {\n        var source = this.addSource({\n            heading: ''\n        });\n\n        Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n        source.select();\n        this.updateSourcesOnSave = true;\n    },\n\n    save: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n            return;\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n        var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n        Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success' && response.success) {\n                // Have any changes been made to the source list?\n                if (this.updateSourcesOnSave) {\n                    if (this.$elementIndexSourcesContainer.length) {\n                        var $lastSource = null,\n                            $pendingHeading;\n\n                        for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                            var $item = this.sourceSort.$items.eq(i),\n                                source = $item.data('source'),\n                                $indexSource = source.getIndexSource();\n\n                            if (!$indexSource) {\n                                continue;\n                            }\n\n                            if (source.isHeading()) {\n                                $pendingHeading = $indexSource;\n                            } else {\n                                if ($pendingHeading) {\n                                    this.appendSource($pendingHeading, $lastSource);\n                                    $lastSource = $pendingHeading;\n                                    $pendingHeading = null;\n                                }\n\n                                this.appendSource($indexSource, $lastSource);\n                                $lastSource = $indexSource;\n                            }\n                        }\n\n                        // Remove any additional sources (most likely just old headings)\n                        if ($lastSource) {\n                            var $extraSources = $lastSource.nextAll();\n                            this.elementIndex.sourceSelect.removeItems($extraSources);\n                            $extraSources.remove();\n                        }\n                    }\n                }\n\n                // If a source is selected, have the element index select that one by default on the next request\n                if (this.selectedSource && this.selectedSource.sourceData.key) {\n                    this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                    this.elementIndex.updateElements();\n                }\n\n                Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                this.hide();\n            } else {\n                var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                Craft.cp.displayError(error);\n            }\n        });\n    },\n\n    appendSource: function($source, $lastSource) {\n        if (!$lastSource) {\n            $source.prependTo(this.$elementIndexSourcesContainer);\n        } else {\n            $source.insertAfter($lastSource);\n        }\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.sources.length; i++) {\n            this.sources[i].destroy();\n        }\n\n        delete this.sources;\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend({\n    modal: null,\n\n    $item: null,\n    $itemLabel: null,\n    $itemInput: null,\n    $settingsContainer: null,\n\n    sourceData: null,\n\n    init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n        this.modal = modal;\n        this.$item = $item;\n        this.$itemLabel = $itemLabel;\n        this.$itemInput = $itemInput;\n        this.sourceData = sourceData;\n\n        this.$item.data('source', this);\n\n        this.addListener(this.$item, 'click', 'select');\n    },\n\n    isHeading: function() {\n        return false;\n    },\n\n    isSelected: function() {\n        return (this.modal.selectedSource === this);\n    },\n\n    select: function() {\n        if (this.isSelected()) {\n            return;\n        }\n\n        if (this.modal.selectedSource) {\n            this.modal.selectedSource.deselect();\n        }\n\n        this.$item.addClass('sel');\n        this.modal.selectedSource = this;\n\n        if (!this.$settingsContainer) {\n            this.$settingsContainer = this.createSettings()\n                .appendTo(this.modal.$sourceSettingsContainer);\n        } else {\n            this.$settingsContainer.removeClass('hidden');\n        }\n\n        this.modal.$sourceSettingsContainer.scrollTop(0);\n    },\n\n    createSettings: function() {\n        return $('<div/>');\n    },\n\n    getIndexSource: function() {\n    },\n\n    deselect: function() {\n        this.$item.removeClass('sel');\n        this.modal.selectedSource = null;\n        this.$settingsContainer.addClass('hidden');\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.text(val);\n    },\n\n    destroy: function() {\n        this.$item.data('source', null);\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend({\n    createSettings: function() {\n        let $settings = $('<div/>');\n\n        if (this.sourceData.tableAttributes.length) {\n            $settings.append(this.createTableColumnsField());\n        }\n\n        return $settings;\n    },\n\n    createTableColumnsField: function() {\n        let $columnCheckboxes = $('<div/>');\n        let selectedAttributes = [];\n\n        $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n        // Add the selected columns, in the selected order\n        for (let i = 0; i < this.sourceData.tableAttributes.length; i++) {\n            let [key, label] = this.sourceData.tableAttributes[i];\n            $columnCheckboxes.append(this.createTableColumnOption(key, label, true));\n            selectedAttributes.push(key);\n        }\n\n        // Add the rest\n        let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n        availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n        for (let i = 0; i < availableTableAttributes.length; i++) {\n            let [key, label] = availableTableAttributes[i];\n            if (!Craft.inArray(key, selectedAttributes)) {\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false));\n            }\n        }\n\n        new Garnish.DragSort($columnCheckboxes.children(), {\n            handle: '.move',\n            axis: 'y'\n        });\n\n        return Craft.ui.createField($columnCheckboxes, {\n            label: Craft.t('app', 'Table Columns'),\n            instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n        });\n    },\n\n    createTableColumnOption: function(key, label, checked) {\n        return $('<div class=\"customize-sources-table-column\"/>')\n            .append('<div class=\"icon move\"/>')\n            .append(\n                Craft.ui.createCheckbox({\n                    label: Craft.escapeHtml(label),\n                    name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                    value: key,\n                    checked: checked,\n                })\n            );\n    },\n\n    getIndexSource: function() {\n        var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n        if ($source) {\n            return $source.closest('li');\n        }\n    }\n});\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend({\n    $labelField: null,\n    $labelInput: null,\n    $deleteBtn: null,\n\n    isHeading: function() {\n        return true;\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.trigger('focus');\n    },\n\n    createSettings: function() {\n        let $settings = $('<div/>');\n\n        this.$labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Heading'),\n            instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n            value: this.sourceData.heading\n        }).appendTo($settings);\n\n        this.$labelInput = this.$labelField.find('.text');\n\n        $settings.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n            .appendTo($settings);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n        return $settings;\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n        this.$itemInput.val(val);\n    },\n\n    deleteHeading: function() {\n        this.modal.sourceSort.removeItems(this.$item);\n        this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n        this.modal.updateSourcesOnSave = true;\n\n        if (this.isSelected()) {\n            this.deselect();\n\n            if (this.modal.sources.length) {\n                this.modal.sources[0].select();\n            }\n        }\n\n        this.$item.remove();\n        this.$settingsContainer.remove();\n        this.destroy();\n    },\n\n    getIndexSource: function() {\n        var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n        return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend({\n    $table: null,\n\n    init: function(table, settings) {\n        this.$table = $(table);\n        var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n        settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n        settings.container = this.$table.children('tbody');\n        settings.helper = this.getHelper.bind(this);\n        settings.caboose = '<tr/>';\n        settings.axis = Garnish.Y_AXIS;\n        settings.magnetStrength = 4;\n        settings.helperLagBase = 1.5;\n\n        this.base($rows, settings);\n    },\n\n    getHelper: function($helperRow) {\n        var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n            $table = $('<table/>').appendTo($helper),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the table width and classes\n        $table.width(this.$table.width());\n        $table.prop('className', this.$table.prop('className'));\n\n        // Copy the column widths\n        var $firstRow = this.$table.find('tr:first'),\n            $cells = $firstRow.children(),\n            $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            $($helperCells[i]).width($($cells[i]).width());\n        }\n\n        return $helper;\n    }\n}, {\n    defaults: {\n        handle: '.move',\n        helperClass: 'datatablesorthelper'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend({\n    id: null,\n    userId: null,\n\n    $deleteActionRadios: null,\n    $deleteSpinner: null,\n\n    userSelect: null,\n    _deleting: false,\n\n    init: function(userId, settings) {\n        this.id = Math.floor(Math.random() * 1000000000);\n        this.userId = userId;\n        settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n        let $form = $(\n            '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n            Craft.getCsrfInput() +\n            '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n            (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n            (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n            '</form>'\n        ).appendTo(Garnish.$bod);\n        let $body = $(\n            '<div class=\"body\">' +\n            '<div class=\"content-summary\">' +\n            '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n            '<ul class=\"bullets\"></ul>' +\n            '</div>' +\n            '<div class=\"options\">' +\n            '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n            '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n            '<div class=\"elements\"></div>' +\n            '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n            '</div>' +\n            '</div>' +\n            '<div>' +\n            '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n            '</div>' +\n            '</div>'\n        ).appendTo($form);\n        let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo($buttons);\n\n        if (settings.contentSummary.length) {\n            for (let i = 0; i < settings.contentSummary.length; i++) {\n                $body.find('ul').append($('<li/>', {text: settings.contentSummary[i]}));\n            }\n        } else {\n            $body.find('ul').remove();\n        }\n\n        this.$deleteActionRadios = $body.find('input[type=radio]');\n        this.$deleteSubmitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: this._submitBtnLabel(false),\n        }).appendTo($buttons);\n        this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n        var idParam;\n\n        if (Garnish.isArray(this.userId)) {\n            idParam = ['and'];\n\n            for (let i = 0; i < this.userId.length; i++) {\n                idParam.push('not ' + this.userId[i]);\n            }\n        } else {\n            idParam = 'not ' + this.userId;\n        }\n\n        this.userSelect = new Craft.BaseElementSelectInput({\n            id: 'transferselect' + this.id,\n            name: 'transferContentTo',\n            elementType: 'craft\\\\elements\\\\User',\n            criteria: {\n                id: idParam\n            },\n            limit: 1,\n            modalSettings: {\n                closeOtherModals: false\n            },\n            onSelectElements: () => {\n                this.updateSizeAndPosition();\n\n                if (!this.$deleteActionRadios.first().prop('checked')) {\n                    this.$deleteActionRadios.first().trigger('click');\n                } else {\n                    this.validateDeleteInputs();\n                }\n            },\n            onRemoveElements: this.validateDeleteInputs.bind(this),\n            selectable: false,\n            editable: false\n        });\n\n        this.addListener($cancelBtn, 'click', 'hide');\n\n        this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n        this.addListener($form, 'submit', 'handleSubmit');\n\n        this.base($form, settings);\n    },\n\n    _submitBtnLabel: function(withContent) {\n        let message = withContent\n            ? 'Delete {num, plural, =1{user} other{users}} and content'\n            : 'Delete {num, plural, =1{user} other{users}}';\n\n        return Craft.t('app', message, {\n            num: Garnish.isArray(this.userId) ? this.userId.length : 1,\n        });\n    },\n\n    validateDeleteInputs: function() {\n        var validates = false;\n\n        if (this.$deleteActionRadios.eq(1).prop('checked')) {\n            validates = true;\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(true));\n        } else {\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(false));\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n        }\n\n        this.updateSizeAndPosition();\n\n        if (validates) {\n            this.$deleteSubmitBtn.removeClass('disabled');\n        } else {\n            this.$deleteSubmitBtn.addClass('disabled');\n        }\n\n        return validates;\n    },\n\n    handleSubmit: function(ev) {\n        if (this._deleting || !this.validateDeleteInputs()) {\n            ev.preventDefault();\n            return;\n        }\n\n        this.$deleteSubmitBtn.addClass('active');\n        this.$deleteSpinner.removeClass('hidden');\n        this.disable();\n        this.userSelect.disable();\n        this._deleting = true;\n\n        // Let the onSubmit callback prevent the form from getting submitted\n        try {\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        } catch (e) {\n            ev.preventDefault();\n            this.$deleteSpinner.addClass('hidden');\n            throw e;\n        }\n    },\n\n    onFadeIn: function() {\n        // Auto-focus the first radio\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$deleteActionRadios.first().trigger('focus');\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        contentSummary: [],\n        onSubmit: $.noop,\n        redirect: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element draft editor\n */\nCraft.DraftEditor = Garnish.Base.extend({\n    $revisionBtn: null,\n    $revisionLabel: null,\n    $spinner: null,\n    $expandSiteStatusesBtn: null,\n    $statusIcon: null,\n\n    $editMetaBtn: null,\n    metaHud: null,\n    $nameTextInput: null,\n    $saveMetaBtn: null,\n\n    $siteStatusPane: null,\n    $globalLightswitch: null,\n    $siteLightswitches: null,\n    $addlSiteField: null,\n\n    siteIds: null,\n    newSiteIds: null,\n\n    enableAutosave: null,\n    lastSerializedValue: null,\n    listeningForChanges: false,\n    pauseLevel: 0,\n    timeout: null,\n    saving: false,\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    queue: null,\n    submittingForm: false,\n\n    duplicatedElements: null,\n    errors: null,\n    httpStatus: null,\n    httpError: null,\n\n    openingPreview: false,\n    preview: null,\n    previewToken: null,\n    scrollY: null,\n    createdProvisionalDraft: false,\n\n    bc: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.DraftEditor.defaults);\n\n        this.queue = [];\n        this.duplicatedElements = {};\n        this.enableAutosave = Craft.autosaveDrafts;\n\n        this.siteIds = Object.keys(this.settings.siteStatuses).map(siteId => {\n            return parseInt(siteId)\n        });\n\n        this.$revisionBtn = $('#context-btn');\n        this.$revisionLabel = $('#revision-label');\n        this.$spinner = $('#revision-spinner');\n        this.$expandSiteStatusesBtn = $('#expand-status-btn');\n        this.$statusIcon = $('#revision-status');\n\n        if (this.settings.canEditMultipleSites) {\n            this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n        }\n\n        if (this.settings.previewTargets.length) {\n            if (this.settings.enablePreview) {\n                this.addListener($('#preview-btn'), 'click', 'openPreview');\n            }\n\n            const $shareBtn = $('#share-btn');\n\n            if (this.settings.previewTargets.length === 1) {\n                this.addListener($shareBtn, 'click', function() {\n                    this.openShareLink(this.settings.previewTargets[0].url);\n                });\n            } else {\n                this.createShareMenu($shareBtn);\n            }\n        }\n\n        // If this is a revision, we're done here\n        if (this.settings.revisionId) {\n            return;\n        }\n\n        // Override the serializer to use our own\n        Craft.cp.$primaryForm.data('serializer', () => this.serializeForm(true));\n\n        this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n        if (this.settings.isProvisionalDraft) {\n            this.initForProvisionalDraft();\n        } else if (this.settings.draftId && !this.settings.isUnpublishedDraft) {\n            this.initForDraft();\n        } else if (!this.settings.canUpdateSource) {\n            // Override the save shortcut to create a draft too\n            this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', ev => {\n                if (ev.saveShortcut) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }\n            });\n        }\n\n        this.listenForChanges();\n\n        this.addListener(this.$statusIcon, 'click', () => {\n            this.showStatusHud(this.$statusIcon);\n        });\n\n        if (typeof BroadcastChannel !== 'undefined' && !this.settings.revisionId) {\n            this.bc = new BroadcastChannel('DraftEditor');\n            this.bc.onmessage = ev => {\n                if (\n                  ev.data.event === 'saveDraft' &&\n                  ev.data.canonicalId === this.settings.sourceId &&\n                  (\n                    ev.data.draftId === this.settings.draftId ||\n                    (ev.data.isProvisionalDraft && !this.settings.draftId)\n                  )\n                ) {\n                    window.location.reload();\n                }\n            };\n        }\n    },\n\n    listenForChanges: function() {\n        if (this.listeningForChanges || this.pauseLevel > 0 || !this.enableAutosave || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        this.listeningForChanges = true;\n\n        this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n            if ($(ev.target).is(this.statusIcons())) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            // If they are typing, wait half a second before checking the form\n            if (['keypress', 'keyup', 'change'].includes(ev.type)) {\n                this.timeout = setTimeout(this.checkForm.bind(this), 500);\n            } else {\n                this.checkForm();\n            }\n        });\n    },\n\n    stopListeningForChanges: function() {\n        if (!this.listeningForChanges) {\n            return;\n        }\n\n        this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n        clearTimeout(this.timeout);\n        this.listeningForChanges = false;\n    },\n\n    pause: function() {\n        this.pauseLevel++;\n        this.stopListeningForChanges();\n    },\n\n    resume: function() {\n        if (this.pauseLevel === 0) {\n            throw 'Craft.DraftEditor::resume() should only be called after pause().';\n        }\n\n        // Only actually resume operation if this has been called the same\n        // number of times that pause() was called\n        this.pauseLevel--;\n        if (this.pauseLevel === 0) {\n            if (this.enableAutosave) {\n                this.checkForm();\n                this.listenForChanges();\n            }\n        }\n    },\n\n    initForProvisionalDraft: function() {\n        let $button = $('#discard-changes');\n        if (!$button.length) {\n            $button = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu.$container.find('#discard-changes') : null;\n        }\n        if ($button && $button.length) {\n            this.addListener($button, 'click', () => {\n                if (confirm(Craft.t('app', 'Are you sure you want to discard your changes?'))) {\n                    Craft.submitForm(Craft.cp.$primaryForm, {\n                        action: this.settings.deleteDraftAction,\n                        redirect: this.settings.hashedCpEditUrl,\n                        params: {\n                            draftId: this.settings.draftId,\n                            provisional: this.settings.isProvisionalDraft,\n                        },\n                    });\n                }\n            });\n        }\n    },\n\n    initForDraft: function() {\n        // Create the edit draft button\n        this.createEditMetaBtn();\n\n        if (this.settings.canUpdateSource) {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n                alt: true\n            }, () => {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.publishDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }, 0);\n        }\n    },\n\n    expandSiteStatuses: function() {\n        this.removeListener(this.$expandSiteStatusesBtn, 'click');\n        this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', () => {\n            this.$expandSiteStatusesBtn.remove();\n        });\n\n        const $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n        this.$siteStatusPane = $enabledForSiteField.parent();\n\n        // If this is a revision, just show the site statuses statically and be done\n        if (this.settings.revisionId) {\n            this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n            return;\n        }\n\n        $enabledForSiteField.addClass('nested');\n        const $globalField = Craft.ui.createLightswitchField({\n            id: 'enabled',\n            label: Craft.t('app', 'Enabled'),\n            name: 'enabled',\n        }).insertBefore($enabledForSiteField);\n        $globalField.find('label').css('font-weight', 'bold');\n        this.$globalLightswitch = $globalField.find('.lightswitch');\n\n        if (!this.settings.revisionId) {\n            this._showField($globalField);\n        }\n\n        // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n        const siteStatusValues = Object.values(this.settings.siteStatuses);\n        const hasEnabled = siteStatusValues.includes(true);\n        const hasDisabled = siteStatusValues.includes(false);\n        const originalEnabledValue = (hasEnabled && hasDisabled) ? '-' : (hasEnabled ? '1' : '');\n        const originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n            '=' + (this.settings.enabledForSite ? '1' : '');\n\n        this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n            .on('change', this._updateGlobalStatus.bind(this));\n\n        this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n\n        let serializedStatuses = `enabled=${originalEnabledValue}`;\n        for (let i = 0; i < this.$siteLightswitches.length; i++) {\n            const $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n            serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n        }\n\n        Craft.cp.$primaryForm.data('initialSerializedValue',\n            Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n        if (this.lastSerializedValue) {\n            this.lastSerializedValue = this.lastSerializedValue.replace(originalSerializedStatus, serializedStatuses);\n        }\n\n        // Are there additional sites that can be added?\n        if (this.settings.addlSites && this.settings.addlSites.length) {\n            this._createAddlSiteField();\n        }\n\n        this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n        this._updateGlobalStatus();\n    },\n\n    /**\n     * @returns {Array}\n     */\n    _getOtherSupportedSites: function() {\n        return Craft.sites.filter(s => s.id != this.settings.siteId && this.siteIds.includes(s.id));\n    },\n\n    _showField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .height(0)\n            .velocity({height}, 'fast', () => {\n                $field.css({\n                    overflow: '',\n                    height: '',\n                });\n            });\n    },\n\n    _removeField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .velocity({height: 0}, 'fast', () => {\n                $field.remove();\n            });\n    },\n\n    _updateGlobalStatus: function() {\n        let allEnabled = true, allDisabled = true;\n        this.$siteLightswitches.each(function() {\n            const enabled = $(this).data('lightswitch').on;\n            if (enabled) {\n                allDisabled = false;\n            } else {\n                allEnabled = false;\n            }\n            if (!allEnabled && !allDisabled) {\n                return false;\n            }\n        });\n        if (allEnabled) {\n            this.$globalLightswitch.data('lightswitch').turnOn(true);\n        } else if (allDisabled) {\n            this.$globalLightswitch.data('lightswitch').turnOff(true);\n        } else {\n            this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n        }\n    },\n\n    _updateSiteStatuses: function() {\n        const enabled = this.$globalLightswitch.data('lightswitch').on;\n        this.$siteLightswitches.each(function() {\n            if (enabled) {\n                $(this).data('lightswitch').turnOn(true);\n            } else {\n                $(this).data('lightswitch').turnOff(true);\n            }\n        });\n    },\n\n    _createSiteStatusField: function(site, status) {\n        const $field = Craft.ui.createLightswitchField({\n            id: `enabledForSite-${site.id}`,\n            label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n            name: `enabledForSite[${site.id}]`,\n            on: typeof status != 'undefined'\n                ? status\n                : (this.settings.siteStatuses.hasOwnProperty(site.id) ? this.settings.siteStatuses[site.id] : true),\n            disabled: !!this.settings.revisionId,\n        });\n\n        if (this.$addlSiteField) {\n            $field.insertBefore(this.$addlSiteField);\n        } else {\n            $field.appendTo(this.$siteStatusPane);\n        }\n\n        if (!this.settings.revisionId) {\n            $field.addClass('nested');\n            const $lightswitch = $field.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n        }\n\n        this._showField($field);\n\n        return $field;\n    },\n\n    _createAddlSiteField: function() {\n        const addlSites = Craft.sites.filter(site => {\n            return !this.siteIds.includes(site.id) && this.settings.addlSites.some(s => s.siteId == site.id);\n        });\n\n        if (!addlSites.length) {\n            return;\n        }\n\n        const $addlSiteSelectContainer = Craft.ui.createSelect({\n            options: [\n                {label: Craft.t('app', 'Add a site…')},\n                ...addlSites.map(s => {\n                    return {label: s.name, value: s.id};\n                }),\n            ],\n        }).addClass('fullwidth');\n\n        this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n            .addClass('nested add')\n            .appendTo(this.$siteStatusPane);\n\n        const $addlSiteSelect = $addlSiteSelectContainer.find('select');\n\n        $addlSiteSelect.on('change', () => {\n            const siteId = parseInt($addlSiteSelect.val());\n            const site = Craft.sites.find(s => s.id === siteId);\n\n            if (!site) {\n                return;\n            }\n\n            const addlSiteInfo = this.settings.addlSites.find(s => s.siteId == site.id);\n            this._createSiteStatusField(site, addlSiteInfo.enabledByDefault);\n            this._updateGlobalStatus();\n\n            $addlSiteSelect\n                .val('')\n                .find(`option[value=\"${siteId}\"]`).remove();\n\n            if (this.newSiteIds === null) {\n                this.newSiteIds = [];\n            }\n\n            this.siteIds.push(siteId);\n            this.newSiteIds.push(siteId);\n\n            // Was that the last site?\n            if ($addlSiteSelect.find('option').length === 1) {\n                this._removeField(this.$addlSiteField);\n            }\n        });\n\n        this._showField(this.$addlSiteField);\n    },\n\n    showStatusHud: function(target) {\n        let bodyHtml;\n\n        if (this.errors === null) {\n            bodyHtml = `<p>${this._saveSuccessMessage()}</p>`;\n        } else {\n            bodyHtml = `<p class=\"error\"><strong>${this._saveFailMessage()}</strong></p>`;\n\n            if (this.errors.length) {\n                bodyHtml += '<ul class=\"errors\">' +\n                    this.errors.map(e => `<li>${Craft.escapeHtml(e)}</li>`).join('') +\n                    '</ul>';\n            }\n\n            if (this.httpError) {\n                bodyHtml += `<p class=\"http-error code\">${Craft.escapeHtml(this.httpError)}</p>`;\n            }\n\n            if (this.httpStatus === 400) {\n                bodyHtml += `<button class=\"btn refresh-btn\">${Craft.t('app', 'Refresh')}</button>`;\n            }\n        }\n\n        const hud = new Garnish.HUD(target, bodyHtml, {\n            hudClass: 'hud revision-status-hud',\n            onHide: function() {\n                hud.destroy();\n            }\n        });\n\n        hud.$mainContainer.find('.refresh-btn').on('click', () => {\n            window.location.reload();\n        });\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveSuccessMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes have been stored.')\n            : Craft.t('app', 'The draft has been saved.');\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveFailMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes could not be stored.')\n            : Craft.t('app', 'The draft could not be saved.');\n    },\n\n    spinners: function() {\n        return this.preview\n            ? this.$spinner.add(this.preview.$spinner)\n            : this.$spinner;\n    },\n\n    statusIcons: function() {\n        return this.preview\n            ? this.$statusIcon.add(this.preview.$statusIcon)\n            : this.$statusIcon;\n    },\n\n    createEditMetaBtn: function() {\n        this.$editMetaBtn = $('<button/>', {\n            type: 'button',\n            'class': 'btn edit icon',\n            title: Craft.t('app', 'Edit draft settings'),\n        }).appendTo($('#context-btngroup'));\n        this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n    },\n\n    createShareMenu: function($shareBtn) {\n        $shareBtn.addClass('menubtn');\n\n        const $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n        const $ul = $('<ul/>').appendTo($menu);\n\n        this.settings.previewTargets.forEach(target => {\n            const $li = $('<li/>').appendTo($ul);\n            const $a = $('<a/>', {\n                text: target.label,\n            }).appendTo($li);\n            this.addListener($a, 'click', () => {\n                this.openShareLink(target.url);\n            });\n        });\n    },\n\n    getPreviewToken: function() {\n        return new Promise((resolve, reject) => {\n            if (this.previewToken) {\n                resolve(this.previewToken);\n                return;\n            }\n\n            Craft.sendActionRequest('POST', 'preview/create-token', {\n                data: {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                    provisional: this.settings.isProvisionalDraft,\n                },\n            }).then(response => {\n                this.previewToken = response.data.token;\n                resolve(this.previewToken);\n            }).catch(reject);\n        });\n    },\n\n    getTokenizedPreviewUrl: function(url, randoParam) {\n        return new Promise((resolve, reject) => {\n            const params = {};\n\n            if (randoParam || !this.settings.isLive) {\n                // Randomize the URL so CDNs don't return cached pages\n                params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n            }\n\n            if (this.settings.siteToken) {\n                params[Craft.siteToken] = this.settings.siteToken;\n            }\n\n            // No need for a token if we're looking at a live element\n            if (this.settings.isLive) {\n                resolve(Craft.getUrl(url, params));\n                return;\n            }\n\n            this.getPreviewToken().then(function(token) {\n                params[Craft.tokenParam] = token;\n                resolve(Craft.getUrl(url, params));\n            }).catch(reject);\n        });\n    },\n\n    openShareLink: function(url) {\n        this.getTokenizedPreviewUrl(url).then(function(url) {\n            window.open(url);\n        });\n    },\n\n    getPreview: function() {\n        if (!this.preview) {\n            this.preview = new Craft.Preview(this);\n            if (!this.enableAutosave) {\n                this.preview.on('open', () => {\n                    this.enableAutosave = true;\n                    this.listenForChanges();\n                });\n                this.preview.on('close', () => {\n                    this.enableAutosave = false;\n                    this.stopListeningForChanges();\n\n                    // Hide the status icon if the save was successful\n                    const $statusIcons = this.statusIcons();\n                    if ($statusIcons.hasClass('checkmark-icon')) {\n                        $statusIcons.addClass('hidden');\n                    }\n                });\n            }\n            this.preview.on('close', () => {\n                if (this.scrollY) {\n                    window.scrollTo(0, this.scrollY);\n                    this.scrollY = null;\n                }\n            });\n        }\n        return this.preview;\n    },\n\n    openPreview: function() {\n        return new Promise((resolve, reject) => {\n            this.openingPreview = true;\n            this.ensureIsDraftOrRevision(true)\n                .then(() => {\n                    this.scrollY = window.scrollY;\n                    this.getPreview().open();\n                    this.openingPreview = false;\n                    resolve();\n                })\n                .catch(reject);\n        })\n    },\n\n    ensureIsDraftOrRevision: function(onlyIfChanged) {\n        return new Promise((resolve, reject) => {\n            if (!this.settings.draftId && !this.settings.revisionId) {\n                if (\n                    onlyIfChanged &&\n                    this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                ) {\n                    resolve();\n                    return;\n                }\n\n                this.createDraft()\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                resolve();\n            }\n        });\n    },\n\n    serializeForm: function(removeActionParams) {\n        let data = Craft.cp.$primaryForm.serialize();\n\n        if (this.isPreviewActive()) {\n            // Replace the temp input with the preview form data\n            data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n        }\n\n        if (removeActionParams && !this.settings.isUnpublishedDraft) {\n            // Remove action and redirect params\n            data = data.replace(/&action=[^&]*/, '');\n            data = data.replace(/&redirect=[^&]*/, '');\n        }\n\n        return data;\n    },\n\n    checkForm: function(force) {\n        // If this isn't a draft and there's no active preview, then there's nothing to check\n        if (this.settings.revisionId || this.pauseLevel > 0 || !this.enableAutosave || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        clearTimeout(this.timeout);\n        this.timeout = null;\n\n        // Has anything changed?\n        const data = this.serializeForm(true);\n        if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n            const provisional = (!this.settings.draftId || this.settings.isProvisionalDraft) && !this.settings.revisionId;\n            this.saveDraft(data, provisional)\n              .catch(e => {\n                  console.warn('Couldn’t save draft:', e);\n              });\n        }\n    },\n\n    isPreviewActive: function() {\n        return this.preview && this.preview.isActive;\n    },\n\n    createDraft: function() {\n        return new Promise((resolve, reject) => {\n            this.saveDraft(this.serializeForm(true))\n                .then(resolve)\n                .catch(reject);\n        });\n    },\n\n    /**\n     * @param {object} data\n     * @returns {Promise<unknown>}\n     */\n    saveDraft: function(data) {\n        return new Promise((resolve, reject) => {\n            // Ignore if we're already submitting the main form\n            if (this.submittingForm) {\n                reject('Form already being submitted.');\n                return;\n            }\n\n            if (this.saving) {\n                this.queue.push(() => {\n                    this.checkForm()\n                });\n                return;\n            }\n\n            this.lastSerializedValue = data;\n            this.saving = true;\n            this.errors = null;\n            this.httpStatus = null;\n            this.httpError = null;\n            this.cancelToken = axios.CancelToken.source();\n            this.spinners().removeClass('hidden');\n\n            this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('invisible checkmark-icon alert-icon fade-out')\n                .addClass('hidden');\n\n            if (this.$saveMetaBtn) {\n                this.$saveMetaBtn.addClass('active');\n            }\n\n            // Prep the data to be saved, keeping track of the first input name for each delta group\n            let modifiedFieldNames = [];\n            let preparedData = this.prepareData(data, !this.settings.isUnpublishedDraft ? (deltaName, params)  => {\n                if (params.length) {\n                    modifiedFieldNames.push(decodeURIComponent(params[0].split('=')[0]));\n                }\n            } : undefined);\n\n            // Are we saving a provisional draft?\n            if (this.settings.isProvisionalDraft || !this.settings.draftId) {\n                preparedData += '&provisional=1';\n            }\n\n            Craft.sendActionRequest('POST', this.settings.saveDraftAction, {\n                cancelToken: this.cancelToken.token,\n                headers: {\n                    'content-type': 'application/x-www-form-urlencoded',\n                },\n                data: preparedData,\n            }).then(response => {\n                this._afterSaveRequest();\n\n                if (response.data.errors) {\n                    this.errors = response.data.errors;\n                    this._showFailStatus();\n                    reject(response.data.errors);\n                }\n\n                const createdProvisionalDraft = !this.settings.draftId;\n\n                if (createdProvisionalDraft) {\n                    this.settings.isProvisionalDraft = true;\n                    this.createdProvisionalDraft = true;\n                }\n\n                if (response.data.title) {\n                    $('#header h1').text(response.data.title);\n                }\n\n                if (response.data.docTitle) {\n                    document.title = response.data.docTitle;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        this.$revisionLabel.append(\n                            $('<span/>', {\n                                text: ` — ${Craft.t('app', 'Edited')}`,\n                            })\n                        );\n                    }\n                } else {\n                    this.$revisionLabel.text(response.data.draftName);\n                    this.settings.draftName = response.data.draftName;\n                }\n\n                let revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                // Did we just add a site?\n                if (this.newSiteIds) {\n                    // Do we need to create the revision menu?\n                    if (!revisionMenu) {\n                        this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                        new Garnish.MenuBtn(this.$revisionBtn);\n                        revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                        revisionMenu.$container.removeClass('hidden');\n                    }\n                    this.newSiteIds.forEach(siteId => {\n                        const $option = revisionMenu.$options.filter(`[data-site-id=${siteId}]`);\n                        $option.find('.status').removeClass('disabled').addClass('enabled');\n                        const $li = $option.parent().removeClass('hidden');\n                        $li.closest('.site-group').removeClass('hidden');\n                    });\n                    revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                    this.newSiteIds = null;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        // Replace the action\n                        const $actionInput = $('#action').attr('value', this.settings.publishDraftAction);\n\n                        // Update the editor settings\n                        this.settings.draftId = response.data.draftId;\n                        this.settings.isLive = false;\n                        this.previewToken = null;\n\n                        if (revisionMenu) {\n                            // Add edited description to the “Current” option\n                            revisionMenu.$container.find('#current-revision').append(\n                                $('<div/>', {\n                                    class: 'edited-desc',\n                                }).append(\n                                    $('<p/>', {\n                                        text: Craft.t('app', 'Showing your unsaved changes.'),\n                                    })\n                                ).append(\n                                    $('<button/>', {\n                                        id: 'discard-changes',\n                                        class: 'btn',\n                                        text: Craft.t('app', 'Discard changes'),\n                                    })\n                                )\n                            );\n                        }\n\n                        this.initForProvisionalDraft();\n                    }\n                } else if (revisionMenu) {\n                    revisionMenu.$options.filter('.sel').find('.draft-name').text(response.data.draftName);\n                    revisionMenu.$options.filter('.sel').find('.draft-meta').text(response.data.creator\n                        ? Craft.t('app', 'Saved {timestamp} by {creator}', {\n                            timestamp: response.data.timestamp,\n                            creator: response.data.creator\n                        })\n                        : Craft.t('app', 'Saved {timestamp}', {\n                            timestamp: response.data.timestamp,\n                        })\n                    );\n                }\n\n                // Did the controller send us updated preview targets?\n                if (\n                    response.data.previewTargets &&\n                    JSON.stringify(response.data.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                ) {\n                    this.updatePreviewTargets(response.data.previewTargets);\n                }\n\n                if (createdProvisionalDraft) {\n                    this.trigger('createProvisionalDraft');\n                }\n\n                if (this.$nameTextInput) {\n                    this.checkMetaValues();\n                }\n\n                for (const oldId in response.data.duplicatedElements) {\n                    if (oldId != this.settings.sourceId && response.data.duplicatedElements.hasOwnProperty(oldId)) {\n                        this.duplicatedElements[oldId] = response.data.duplicatedElements[oldId];\n                    }\n                }\n\n                // Add missing field modified indicators\n                const selectors = response.data.modifiedAttributes.map(attr => `[name=\"${attr}\"],[name^=\"${attr}[\"]`)\n                    .concat(modifiedFieldNames.map(name => `[name=\"${name}\"]`));\n\n                const $fields = $(selectors.join(',')).parents().filter('.field:not(:has(> .status-badge))');\n                for (let i = 0; i < $fields.length; i++) {\n                    $fields.eq(i).prepend(\n                        $('<div/>', {\n                            class: 'status-badge modified',\n                            title: Craft.t('app', 'This field has been modified.'),\n                            'aria-label': Craft.t('app', 'This field has been modified.'),\n                        })\n                    );\n                }\n\n                this.afterUpdate(data);\n\n                if (this.bc) {\n                    this.bc.postMessage({\n                        event: 'saveDraft',\n                        canonicalId: this.settings.sourceId,\n                        draftId: this.settings.draftId,\n                        isProvisionalDraft: this.settings.isProvisionalDraft,\n                    });\n                }\n\n                resolve();\n            }).catch(e => {\n                this._afterSaveRequest();\n\n                if (!this.ignoreFailedRequest) {\n                    this.errors = [];\n                    if (e && e.response) {\n                        this.httpStatus = e.response.status;\n                        this.httpError = e.response.data ? e.response.data.error : null;\n                    }\n                    this._showFailStatus();\n                    reject(e);\n                }\n\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    _afterSaveRequest: function() {\n        this.spinners().addClass('hidden');\n        if (this.$saveMetaBtn) {\n            this.$saveMetaBtn.removeClass('active');\n        }\n        this.saving = false;\n    },\n\n    _showFailStatus: function() {\n        this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden checkmark-icon')\n            .addClass('alert-icon')\n            .attr('title', this._saveFailMessage());\n    },\n\n    /**\n     * @param {string} data\n     * @param {function} [deltaCallback] Callback function that should be passed to `Craft.findDeltaData()`\n     * @returns {string}\n     */\n    prepareData: function(data, deltaCallback) {\n        // Filter out anything that hasn't changed since the last time the form was submitted\n        data = Craft.findDeltaData(Craft.cp.$primaryForm.data('initialSerializedValue'), data, Craft.deltaNames, deltaCallback);\n\n        // Swap out element IDs with their duplicated ones\n        data = this.swapDuplicatedElementIds(data);\n\n        // Add the draft info\n        if (this.settings.draftId) {\n            data += `&draftId=${this.settings.draftId}`;\n            if (this.settings.isProvisionalDraft) {\n                data += '&provisional=1';\n            }\n        }\n\n        if (this.settings.draftName !== null) {\n            data += `&draftName=${this.settings.draftName}`;\n        }\n\n        return data;\n    },\n\n    /**\n     * @param {string} data\n     * @returns {string}\n     */\n    swapDuplicatedElementIds: function(data) {\n        const idsRE = Object.keys(this.duplicatedElements).join('|');\n        if (idsRE === '') {\n            return data;\n        }\n        const lb = encodeURIComponent('[');\n        const rb = encodeURIComponent(']');\n        // Keep replacing field IDs until data stops changing\n        while (true) {\n            if (data === (\n                data = data\n                    // &fields[...][X]\n                    .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                        return pre + this.duplicatedElements[id] + post;\n                    })\n                    // &fields[...=X\n                    .replace(new RegExp(`&(fields${lb}[^=]+)=(${idsRE})\\\\b`, 'g'), (m, name, id) => {\n                        // Ignore param names that end in `[enabled]`, `[type]`, etc.\n                        // (`[sortOrder]` should pass here, which could be set to a specific order index, but *not* `[sortOrder][]`!)\n                        if (name.match(new RegExp(`${lb}(enabled|sordOrder|type|typeId)${rb}$`))) {\n                            return m;\n                        }\n                        return `&${name}=${this.duplicatedElements[id]}`;\n                    })\n            )) {\n                break;\n            }\n        }\n        return data;\n    },\n\n    updatePreviewTargets: function(previewTargets) {\n        previewTargets.forEach(newTarget => {\n            const currentTarget = this.settings.previewTargets.find(t => t.label === newTarget.label);\n            if (currentTarget) {\n                currentTarget.url = newTarget.url;\n            }\n        });\n    },\n\n    afterUpdate: function(data) {\n        Craft.cp.$primaryForm.data('initialSerializedValue', data);\n        Craft.initialDeltaValues = {};\n\n        const $statusIcons = this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden')\n            .addClass('checkmark-icon')\n            .attr('title', this._saveSuccessMessage());\n\n        if (!Craft.autosaveDrafts) {\n            // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n            $statusIcons\n                .velocity('stop')\n                .velocity({\n                    opacity: 0,\n                }, {\n                    delay: 2000,\n                    complete: () => {\n                        $statusIcons.addClass('hidden');\n                    },\n                });\n        }\n\n        this.trigger('update');\n\n        this.nextInQueue();\n    },\n\n    nextInQueue: function() {\n        if (this.queue.length) {\n            this.queue.shift()();\n        }\n    },\n\n    showMetaHud: function() {\n        if (!this.metaHud) {\n            this.createMetaHud();\n            this.onMetaHudShow();\n        } else {\n            this.metaHud.show();\n        }\n\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$nameTextInput.trigger('focus');\n        }\n    },\n\n    createMetaHud: function() {\n        const $hudBody = $('<div/>');\n\n        // Add the Name field\n        const $nameField = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n        const $nameInputContainer = $('<div class=\"input\"/>').appendTo($nameField);\n        this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($nameInputContainer).val(this.settings.draftName);\n\n        // HUD footer\n        const $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n        $('<div class=\"flex-grow\"></div>').appendTo($footer);\n        this.$saveMetaBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo($footer);\n\n        this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n            onSubmit: this.saveMeta.bind(this)\n        });\n\n        this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n\n        this.metaHud.on('show', this.onMetaHudShow.bind(this));\n        this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n        this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n    },\n\n    onMetaHudShow: function() {\n        this.$editMetaBtn.addClass('active');\n    },\n\n    onMetaHudHide: function() {\n        this.$editMetaBtn.removeClass('active');\n    },\n\n    onMetaHudEscape: function() {\n        this.$nameTextInput.val(this.settings.draftName);\n    },\n\n    checkMetaValues: function() {\n        if (\n            this.$nameTextInput.val() &&\n            this.$nameTextInput.val() !== this.settings.draftName\n        ) {\n            this.$saveMetaBtn.removeClass('disabled');\n            return true;\n        }\n\n        this.$saveMetaBtn.addClass('disabled');\n        return false;\n    },\n\n    shakeMetaHud: function() {\n        Garnish.shake(this.metaHud.$hud);\n    },\n\n    saveMeta: function() {\n        if (!this.checkMetaValues()) {\n            this.shakeMetaHud();\n            return;\n        }\n\n        this.settings.draftName = this.$nameTextInput.val();\n\n        this.metaHud.hide();\n        this.checkForm(true);\n    },\n\n    handleFormSubmit: function(ev) {\n        ev.preventDefault();\n\n        // Prevent double form submits\n        if (this.submittingForm) {\n            return;\n        }\n\n        // If this a draft and was this a normal save (either via submit button or save shortcut),\n        // then trigger an autosave\n        if (\n            this.settings.draftId &&\n            !this.settings.isUnpublishedDraft &&\n            !this.settings.isProvisionalDraft &&\n            (typeof ev.autosave === 'undefined' || ev.autosave) &&\n            (ev.saveShortcut || (ev.customTrigger && ev.customTrigger.data('action') === this.settings.saveDraftAction)) &&\n            this.enableAutosave\n        ) {\n            this.checkForm(true);\n            return;\n        }\n\n        // Prevent the normal unload confirmation dialog\n        Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n        // Abort the current save request if there is one\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n\n        // Duplicate the form with normalized data\n        const data = this.prepareData(this.serializeForm(false));\n        const $form = Craft.createForm(data);\n\n        $form.appendTo(Garnish.$bod);\n        $form.submit();\n        this.submittingForm = true;\n    },\n}, {\n    defaults: {\n        elementType: null,\n        sourceId: null,\n        siteId: null,\n        isUnpublishedDraft: false,\n        enabled: false,\n        enabledForSite: false,\n        isLive: false,\n        isProvisionalDraft: false,\n        siteStatuses: null,\n        addlSites: [],\n        cpEditUrl: null,\n        draftId: null,\n        revisionId: null,\n        draftName: null,\n        canEditMultipleSites: false,\n        canUpdateSource: false,\n        saveDraftAction: null,\n        deleteDraftAction: null,\n        publishDraftAction: null,\n        hashedCpEditUrl: null,\n        hashedAddAnotherRedirectUrl: null,\n        enablePreview: false,\n        previewTargets: [],\n        siteToken: null,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend({\n    callback: $.noop,\n\n    init: function(source, target, callback) {\n        this.callback = callback;\n        this.base(source, target);\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return this.callback(sourceVal);\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend({\n    initialized: false,\n\n    id: null,\n    baseName: null,\n    columns: null,\n    sorter: null,\n    biggestId: -1,\n\n    $table: null,\n    $tbody: null,\n    $addRowBtn: null,\n\n    rowCount: 0,\n    hasMaxRows: false,\n    hasMinRows: false,\n\n    radioCheckboxes: null,\n\n    init: function(id, baseName, columns, settings) {\n        this.id = id;\n        this.baseName = baseName;\n        this.columns = columns;\n        this.setSettings(settings, Craft.EditableTable.defaults);\n        this.radioCheckboxes = {};\n\n        this.$table = $('#' + id);\n        this.$tbody = this.$table.children('tbody');\n        this.rowCount = this.$tbody.find('tr').length;\n\n        // Is this already an editable table?\n        if (this.$table.data('editable-table')) {\n            Garnish.log('Double-instantiating an editable table on an element');\n            this.$table.data('editable-table').destroy();\n        }\n\n        this.$table.data('editable-table', this);\n\n        this.sorter = new Craft.DataTableSorter(this.$table, {\n            helperClass: 'editabletablesorthelper',\n            copyDraggeeInputValuesToHelper: true\n        });\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            // Give everything a chance to initialize\n            setTimeout(this.initializeIfVisible.bind(this), 500);\n        }\n\n        if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n            for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                this.addRow()\n            }\n        }\n    },\n\n    isVisible: function() {\n        return (this.$table.parent().height() > 0);\n    },\n\n    initialize: function() {\n        if (this.initialized) {\n            return false;\n        }\n\n        this.initialized = true;\n        this.removeListener(Garnish.$win, 'resize');\n\n        var $rows = this.$tbody.children();\n\n        for (var i = 0; i < $rows.length; i++) {\n            this.createRowObj($rows[i]);\n        }\n\n        this.$addRowBtn = this.$table.next('.add');\n        this.updateAddRowButton();\n        this.addListener(this.$addRowBtn, 'activate', 'addRow');\n        return true;\n    },\n    initializeIfVisible: function() {\n        this.removeListener(Garnish.$win, 'resize');\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n        }\n    },\n    updateAddRowButton: function() {\n        if (!this.canAddRow()) {\n            this.$addRowBtn.css('opacity', '0.2');\n            this.$addRowBtn.css('pointer-events', 'none');\n        } else {\n            this.$addRowBtn.css('opacity', '1');\n            this.$addRowBtn.css('pointer-events', 'auto');\n        }\n    },\n    canDeleteRow: function() {\n        return (this.rowCount > this.settings.minRows);\n    },\n    deleteRow: function(row) {\n        if (!this.canDeleteRow()) {\n            return;\n        }\n\n        this.sorter.removeItems(row.$tr);\n        row.$tr.remove();\n\n        this.rowCount--;\n\n        this.updateAddRowButton();\n        if (this.rowCount === 0) {\n            this.$table.addClass('hidden');\n        }\n\n        // onDeleteRow callback\n        this.settings.onDeleteRow(row.$tr);\n\n        row.destroy();\n    },\n    canAddRow: function() {\n        if (this.settings.staticRows) {\n            return false;\n        }\n\n        if (this.settings.maxRows) {\n            return (this.rowCount < this.settings.maxRows);\n        }\n\n        return true;\n    },\n    addRow: function(focus, prepend) {\n        if (!this.canAddRow()) {\n            return;\n        }\n\n        var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n            $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n        if (prepend) {\n            $tr.prependTo(this.$tbody);\n        } else {\n            $tr.appendTo(this.$tbody);\n        }\n\n        var row = this.createRowObj($tr);\n        this.sorter.addItems($tr);\n\n        // Focus the first input in the row\n        if (focus !== false) {\n            $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n        }\n\n        this.rowCount++;\n        this.updateAddRowButton();\n        this.$table.removeClass('hidden');\n\n        // onAddRow callback\n        this.settings.onAddRow($tr);\n\n        return row;\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n    },\n\n    createRowObj: function($tr) {\n        return new Craft.EditableTable.Row(this, $tr);\n    },\n\n    focusOnPrevRow: function($tr, tdIndex, blurTd) {\n        var $prevTr = $tr.prev('tr');\n        var prevRow;\n\n        if ($prevTr.length) {\n            prevRow = $prevTr.data('editable-table-row');\n        } else {\n            prevRow = this.addRow(false, true);\n        }\n\n        // Focus on the same cell in the previous row\n        if (!prevRow) {\n            return;\n        }\n\n        if (!prevRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($prevTr) {\n                this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    focusOnNextRow: function($tr, tdIndex, blurTd) {\n        var $nextTr = $tr.next('tr');\n        var nextRow;\n\n        if ($nextTr.length) {\n            nextRow = $nextTr.data('editable-table-row');\n        } else {\n            nextRow = this.addRow(false);\n        }\n\n        // Focus on the same cell in the next row\n        if (!nextRow) {\n            return;\n        }\n\n        if (!nextRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($nextTr) {\n                this.focusOnNextRow($nextTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    importData: function(data, row, tdIndex) {\n        let lines = data.split(/\\r?\\n|\\r/);\n        for (let i = 0; i < lines.length; i++) {\n            let values = lines[i].split(\"\\t\");\n            for (let j = 0; j < values.length; j++) {\n                let value = values[j];\n                row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                    .val(value)\n                    .trigger('input');\n            }\n\n            // move onto the next row\n            let $nextTr = row.$tr.next('tr');\n            if ($nextTr.length) {\n                row = $nextTr.data('editable-table-row');\n            } else {\n                row = this.addRow(false);\n            }\n        }\n    },\n}, {\n    textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n    defaults: {\n        rowIdPrefix: '',\n        defaultValues: {},\n        staticRows: false,\n        minRows: null,\n        maxRows: null,\n        onAddRow: $.noop,\n        onDeleteRow: $.noop\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        var $tr = $('<tr/>', {\n            'data-id': rowId\n        });\n\n        for (var colId in columns) {\n            if (!columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            var col = columns[colId],\n                value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                $cell;\n\n            if (col.type === 'heading') {\n                $cell = $('<th/>', {\n                    'scope': 'row',\n                    'class': col['class'],\n                    'html': value\n                });\n            } else {\n                var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                $cell = $('<td/>', {\n                    'class': `${col.class} ${col.type}-cell`,\n                    'width': col.width\n                });\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $cell.addClass('textual');\n                }\n\n                if (col.code) {\n                    $cell.addClass('code');\n                }\n\n                switch (col.type) {\n                    case 'checkbox':\n                        $('<div class=\"checkbox-wrapper\"/>')\n                            .append(Craft.ui.createCheckbox({\n                                    name: name,\n                                    value: col.value || '1',\n                                    checked: !!value\n                                })\n                            )\n                            .appendTo($cell);\n                        break;\n\n                    case 'color':\n                        Craft.ui.createColorInput({\n                            name: name,\n                            value: value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'date':\n                        Craft.ui.createDateInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'lightswitch':\n                        Craft.ui.createLightswitch({\n                            name: name,\n                            value: col.value || '1',\n                            on: !!value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'select':\n                        Craft.ui.createSelect({\n                            name: name,\n                            options: col.options,\n                            value: value || (function() {\n                                for (var key in col.options) {\n                                    if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                        return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                    }\n                                }\n                                return null;\n                            })(),\n                            'class': 'small'\n                        }).appendTo($cell);\n                        break;\n\n                    case 'time':\n                        Craft.ui.createTimeInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'email':\n                    case 'url':\n                        Craft.ui.createTextInput({\n                            name: name,\n                            value: value,\n                            type: col.type,\n                            placeholder: col.placeholder || null,\n                        }).appendTo($cell);\n                        break;\n\n                    default:\n                        $('<textarea/>', {\n                            'name': name,\n                            'rows': col.rows || 1,\n                            'val': value,\n                            'placeholder': col.placeholder\n                        }).appendTo($cell);\n                }\n            }\n\n            $cell.appendTo($tr);\n        }\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'move icon',\n                'title': Craft.t('app', 'Reorder')\n            })\n        ).appendTo($tr);\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Delete')\n            })\n        ).appendTo($tr);\n\n        return $tr;\n    }\n});\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend({\n    table: null,\n    id: null,\n    niceTexts: null,\n\n    $tr: null,\n    $tds: null,\n    tds: null,\n    $textareas: null,\n    $deleteBtn: null,\n\n    init: function(table, tr) {\n        this.table = table;\n        this.$tr = $(tr);\n        this.$tds = this.$tr.children();\n        this.tds = [];\n        this.id = this.$tr.attr('data-id');\n\n        this.$tr.data('editable-table-row', this);\n\n        // Get the row ID, sans prefix\n        var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n        if (id > this.table.biggestId) {\n            this.table.biggestId = id;\n        }\n\n        this.$textareas = $();\n        this.niceTexts = [];\n        var textareasByColId = {};\n\n        var i = 0;\n        var colId, col, td, $textarea, $checkbox;\n\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n            td = this.tds[colId] = this.$tds[i];\n\n            if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                $textarea = $('textarea', td);\n                this.$textareas = this.$textareas.add($textarea);\n\n                this.addListener($textarea, 'focus', 'onTextareaFocus');\n                this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                this.niceTexts.push(new Garnish.NiceText($textarea, {\n                    onHeightChange: this.onTextareaHeightChange.bind(this)\n                }));\n\n                this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                $textarea.trigger('input');\n\n                if (col.type !== 'multiline') {\n                    this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                }\n\n                textareasByColId[colId] = $textarea;\n            } else if (col.type === 'checkbox') {\n                $checkbox = $('input[type=\"checkbox\"]', td);\n\n                if (col.radioMode) {\n                    if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                        this.table.radioCheckboxes[colId] = [];\n                    }\n                    this.table.radioCheckboxes[colId].push($checkbox[0]);\n                    this.addListener($checkbox, 'change', {colId}, 'onRadioCheckboxChange');\n                }\n\n                if (col.toggle) {\n                    this.addListener($checkbox, 'change', {colId}, function(ev) {\n                        this.applyToggleCheckbox(ev.data.colId);\n                    });\n                }\n            }\n\n            if (!$(td).hasClass('disabled')) {\n                this.addListener(td, 'click', {td}, function(ev) {\n                    if (ev.target === ev.data.td) {\n                        $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                    }\n                });\n            }\n\n            i++;\n        }\n\n        // Now that all of the text cells have been nice-ified, let's normalize the heights\n        this.onTextareaHeightChange();\n\n        // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n            col = this.table.columns[colId];\n            if (col.type === 'checkbox' && col.toggle) {\n                this.applyToggleCheckbox(colId);\n            }\n        }\n\n        // Now look for any autopopulate columns\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n\n            if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                    allowNonAlphaStart: true\n                });\n            }\n        }\n\n        var $deleteBtn = this.$tr.children().last().find('.delete');\n        this.addListener($deleteBtn, 'click', 'deleteRow');\n\n        var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n        this.addListener($inputs, 'focus', function(ev) {\n            $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n        });\n        this.addListener($inputs, 'blur', function(ev) {\n            $(ev.currentTarget).closest('td').removeClass('focus');\n        });\n    },\n\n    onTextareaFocus: function(ev) {\n        this.onTextareaHeightChange();\n\n        var $textarea = $(ev.currentTarget);\n\n        if ($textarea.data('ignoreNextFocus')) {\n            $textarea.data('ignoreNextFocus', false);\n            return;\n        }\n\n        setTimeout(function() {\n            Craft.selectFullValue($textarea);\n        }, 0);\n    },\n\n    onRadioCheckboxChange: function(ev) {\n        if (ev.currentTarget.checked) {\n            for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                checkbox.checked = (checkbox === ev.currentTarget);\n            }\n        }\n    },\n\n    applyToggleCheckbox: function(checkboxColId) {\n        var checkboxCol = this.table.columns[checkboxColId];\n        var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n        var colId, colIndex, neg;\n        for (var i = 0; i < checkboxCol.toggle.length; i++) {\n            colId = checkboxCol.toggle[i];\n            colIndex = this.table.colum;\n            neg = colId[0] === '!';\n            if (neg) {\n                colId = colId.substr(1);\n            }\n            if ((checked && !neg) || (!checked && neg)) {\n                $(this.tds[colId])\n                    .removeClass('disabled')\n                    .find('textarea, input').prop('disabled', false);\n            } else {\n                $(this.tds[colId])\n                    .addClass('disabled')\n                    .find('textarea, input').prop('disabled', true);\n            }\n        }\n    },\n\n    ignoreNextTextareaFocus: function(ev) {\n        $.data(ev.currentTarget, 'ignoreNextFocus', true);\n    },\n\n    handleKeypress: function(ev) {\n        var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n        var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n        // Going to the next/previous row?\n        if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n            ev.preventDefault();\n            if (ev.shiftKey) {\n                this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            } else {\n                this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            }\n            return;\n        }\n\n        // Was this an invalid number character?\n        if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n            ev.preventDefault();\n        }\n    },\n\n    handlePaste: function(ev) {\n        let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n        if (!data.match(/[\\t\\r\\n]/)) {\n            return;\n        }\n        ev.preventDefault();\n        this.table.importData(data, this, ev.data.tdIndex);\n    },\n\n    validateValue: function(ev) {\n        if (ev.data.type === 'multiline') {\n            return;\n        }\n\n        var safeValue;\n\n        if (ev.data.type === 'number') {\n            // Only grab the number at the beginning of the value (if any)\n            var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n            if (match !== null) {\n                safeValue = match[1];\n            } else {\n                safeValue = '';\n            }\n        } else {\n            // Just strip any newlines\n            safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n        }\n\n        if (safeValue !== ev.currentTarget.value) {\n            ev.currentTarget.value = safeValue;\n        }\n    },\n\n    onTextareaHeightChange: function() {\n        // Keep all the textareas' heights in sync\n        var tallestTextareaHeight = -1;\n\n        for (var i = 0; i < this.niceTexts.length; i++) {\n            if (this.niceTexts[i].height > tallestTextareaHeight) {\n                tallestTextareaHeight = this.niceTexts[i].height;\n            }\n        }\n\n        this.$textareas.css('min-height', tallestTextareaHeight);\n\n        // If the <td> is still taller, go with that instead\n        var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n        if (tdHeight > tallestTextareaHeight) {\n            this.$textareas.css('min-height', tdHeight);\n        }\n    },\n\n    deleteRow: function() {\n        this.table.deleteRow(this);\n    }\n}, {\n    numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend({\n    maxLevels: null,\n    newChildUrl: null,\n    $trigger: null,\n    $selectedItems: null,\n    triggerEnabled: true,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n        this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n        // Do we have a custom handler?\n        if (this.settings.activate) {\n            // Prevent the element index's click handler\n            this.$trigger.data('custom-handler', true);\n\n            // Is this a custom trigger?\n            if (this.$trigger.prop('nodeName') === 'FORM') {\n                this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n            } else {\n                this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n            }\n        }\n\n        this.updateTrigger();\n        Craft.elementIndex.on('selectionChange', this.updateTrigger.bind(this));\n    },\n\n    updateTrigger: function() {\n        // Ignore if the last element was just unselected\n        if (Craft.elementIndex.getSelectedElements().length === 0) {\n            return;\n        }\n\n        if (this.validateSelection()) {\n            this.enableTrigger();\n        } else {\n            this.disableTrigger();\n        }\n    },\n\n    /**\n     * Determines if this action can be performed on the currently selected elements.\n     *\n     * @return boolean\n     */\n    validateSelection: function() {\n        var valid = true;\n        this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n        if (!this.settings.batch && this.$selectedItems.length > 1) {\n            valid = false;\n        } else if (typeof this.settings.validateSelection === 'function') {\n            valid = this.settings.validateSelection(this.$selectedItems);\n        }\n\n        return valid;\n    },\n\n    enableTrigger: function() {\n        if (this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.removeClass('disabled');\n        this.triggerEnabled = true;\n    },\n\n    disableTrigger: function() {\n        if (!this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.addClass('disabled');\n        this.triggerEnabled = false;\n    },\n\n    handleTriggerActivation: function(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (this.triggerEnabled) {\n            this.settings.activate(this.$selectedItems);\n        }\n    }\n}, {\n    defaults: {\n        type: null,\n        batch: true,\n        validateSelection: null,\n        activate: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend({\n    queue: null,\n    workers: [],\n\n    init: function() {\n        this.queue = [];\n\n        for (var i = 0; i < 3; i++) {\n            this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n        }\n    },\n\n    load: function($elements) {\n        // Only immediately load the visible images\n        let $thumbs = $elements.find('.elementthumb');\n        for (let i = 0; i < $thumbs.length; i++) {\n            let $thumb = $thumbs.eq(i);\n            let $scrollParent = $thumb.scrollParent();\n            if ($scrollParent[0] === document.body) {\n                $scrollParent = Garnish.$doc;\n            }\n            if (this.isVisible($thumb, $scrollParent)) {\n                this.addToQueue($thumb[0]);\n            } else {\n                let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                $scrollParent.on(`scroll.${key}`, {\n                    $thumb: $thumb,\n                    $scrollParent: $scrollParent,\n                    key: key,\n                }, (ev) => {\n                    if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                        delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                        $scrollParent.off(`scroll.${ev.data.key}`);\n                        this.addToQueue(ev.data.$thumb[0]);\n                    }\n                });\n            }\n        }\n    },\n\n    addToQueue: function(thumb) {\n        this.queue.push(thumb);\n\n        // See if there are any inactive workers\n        for (var i = 0; i < this.workers.length; i++) {\n            if (!this.workers[i].active) {\n                this.workers[i].loadNext();\n            }\n        }\n    },\n\n    isVisible: function($thumb, $scrollParent) {\n        let thumbOffset = $thumb.offset().top;\n        let scrollParentOffset, scrollParentHeight;\n        if ($scrollParent[0] === document) {\n            scrollParentOffset = $scrollParent.scrollTop();\n            scrollParentHeight = Garnish.$win.height();\n        } else {\n            scrollParentOffset = $scrollParent.offset().top;\n            scrollParentHeight = $scrollParent.height();\n        }\n        return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.workers.length; i++) {\n            this.workers[i].destroy();\n        }\n\n        this.base();\n    }\n}, {\n    invisibleThumbs: {},\n    retryAll: function() {\n        for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n            let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n            delete Craft.ElementThumbLoader.invisibleThumbs[key];\n            $scrollParent.off(`scroll.${key}`);\n            queue.load($thumb.parent());\n        }\n    }\n});\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend({\n    loader: null,\n    active: false,\n\n    init: function(loader) {\n        this.loader = loader;\n    },\n\n    loadNext: function() {\n        var container = this.loader.queue.shift();\n        if (typeof container === 'undefined') {\n            this.active = false;\n            return;\n        }\n\n        this.active = true;\n        var $container = $(container);\n        if ($container.find('img').length) {\n            this.loadNext();\n            return;\n        }\n        var $img = $('<img/>', {\n            sizes: $container.attr('data-sizes'),\n            srcset: $container.attr('data-srcset'),\n            alt: ''\n        });\n        this.addListener($img, 'load,error', 'loadNext');\n        $img.appendTo($container);\n        picturefill({\n            elements: [$img[0]]\n        });\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend({\n    $form: null,\n    inputs: null,\n\n    init: function(form, inputs) {\n        this.$form = $(form);\n\n        // Only check specific inputs?\n        if (typeof inputs !== 'undefined') {\n            this.inputs = [];\n            inputs = $.makeArray(inputs);\n\n            for (var i = 0; i < inputs.length; i++) {\n                var $inputs = $(inputs[i]);\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $inputs.eq(j);\n\n                    this.inputs.push({\n                        input: $input,\n                        val: Garnish.getInputPostVal($input)\n                    });\n                }\n            }\n        }\n\n        this.addListener(this.$form, 'submit', 'handleFormSubmit');\n    },\n\n    handleFormSubmit: function(ev) {\n        // Ignore if we're in the middle of getting the elevated session timeout\n        if (Craft.elevatedSessionManager.fetchingTimeout) {\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            return;\n        }\n\n        // Are we only interested in certain inputs?\n        if (this.inputs) {\n            var inputsChanged = false;\n            var $input;\n\n            for (var i = 0; i < this.inputs.length; i++) {\n                $input = this.inputs[i].input;\n                // Is this a password input?\n                if ($input.data('passwordInput')) {\n                    $input = $input.data('passwordInput').$currentInput;\n                }\n\n                // Has this input's value changed?\n                if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                    inputsChanged = true;\n                    break;\n                }\n            }\n\n            if (!inputsChanged) {\n                // No need to interrupt the submit\n                return;\n            }\n        }\n\n        // Prevent the form from submitting until the user has an elevated session\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n        Craft.elevatedSessionManager.requireElevatedSession(this.submitForm.bind(this));\n    },\n\n    submitForm: function() {\n        // Don't let handleFormSubmit() interrupt this time\n        this.disable();\n        this.$form.trigger('submit');\n        this.enable();\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend({\n    fetchingTimeout: false,\n\n    passwordModal: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $submitBtn: null,\n    $errorPara: null,\n\n    callback: null,\n\n    /**\n     * Requires that the user has an elevated session.\n     *\n     * @param {function} callback The callback function that should be called once the user has an elevated session\n     */\n    requireElevatedSession: function(callback) {\n        this.callback = callback;\n\n        // Check the time remaining on the user's elevated session (if any)\n        this.fetchingTimeout = true;\n\n        Craft.postActionRequest('users/get-elevated-session-timeout', (response, textStatus) => {\n            this.fetchingTimeout = false;\n\n            if (textStatus === 'success') {\n                // Is there still enough time left or has it been disabled?\n                if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                    this.callback();\n                } else {\n                    // Show the password modal\n                    this.showPasswordModal();\n                }\n            }\n        });\n    },\n\n    showPasswordModal: function() {\n        if (!this.passwordModal) {\n            var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<td/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Submit'),\n            }).appendTo($buttonContainer);\n            this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.passwordModal = new Garnish.Modal($passwordModal, {\n                closeOtherModals: false,\n                onFadeIn: () => {\n                    setTimeout(this.focusPasswordInput.bind(this), 100);\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($passwordModal, 'submit', 'submitPassword');\n        } else {\n            this.passwordModal.show();\n        }\n    },\n\n    focusPasswordInput: function() {\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$passwordInput.trigger('focus');\n        }\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$submitBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$submitBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    submitPassword: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (!this.validatePassword()) {\n            return;\n        }\n\n        this.$passwordSpinner.removeClass('hidden');\n        this.clearLoginError();\n\n        var data = {\n            currentPassword: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/start-elevated-session', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.passwordModal.hide();\n                    this.callback();\n                } else {\n                    this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                    Garnish.shake(this.passwordModal.$container);\n                    this.focusPasswordInput();\n                }\n            } else {\n                this.showPasswordError();\n            }\n        });\n    },\n\n    showPasswordError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$errorPara.text(error);\n        this.passwordModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showPasswordError('');\n    }\n}, {\n    minSafeElevatedSessionTimeout: 5\n});\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend({\n    publishableSections: null,\n    $newEntryBtnGroup: null,\n    $newEntryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible sections the user has permission to create new entries in\n        this.publishableSections = [];\n\n        for (var i = 0; i < Craft.publishableSections.length; i++) {\n            var section = Craft.publishableSections[i];\n\n            if (this.getSourceByKey('section:' + section.uid)) {\n                this.publishableSections.push(section);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific section in the URL?\n        if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n            if (defaultSectionHandle === 'singles') {\n                return 'singles';\n            } else {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultSectionHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        var handle;\n\n        // Get the handle of the selected source\n        if (this.$source.data('key') === 'singles') {\n            handle = 'singles';\n        } else {\n            handle = this.$source.data('handle');\n        }\n\n        // Update the New Entry button\n        // ---------------------------------------------------------------------\n\n        var i, href, label;\n\n        if (this.publishableSections.length) {\n            // Remove the old button, if there is one\n            if (this.$newEntryBtnGroup) {\n                this.$newEntryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a section that they have permission to create entries in\n            var selectedSection;\n\n            if (handle) {\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    if (this.publishableSections[i].handle === handle) {\n                        selectedSection = this.publishableSections[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n            // Otherwise only show a menu button\n            if (selectedSection) {\n                href = this._getSectionTriggerHref(selectedSection);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                        this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.publishableSections.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n            } else {\n                this.$newEntryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New entry'),\n                }).appendTo(this.$newEntryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    var section = this.publishableSections[i];\n\n                    if (\n                        (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                        (this.settings.context !== 'index' && section !== selectedSection)\n                    ) {\n                        href = this._getSectionTriggerHref(section);\n                        label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newEntryBtnGroup);\n        }\n\n        // Update the URL if we're on the Entries index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'entries';\n\n            if (handle) {\n                uri += '/' + handle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getSectionTriggerHref: function(section) {\n        if (this.settings.context === 'index') {\n            const uri = `entries/${section.handle}/new`;\n            const site = this.getSite();\n            const params = site ? {site: site.handle} : undefined;\n            return `href=\"${Craft.getUrl(uri, params)}\"`;\n        }\n\n        return `data-id=\"${section.id}\"`;\n    },\n\n    _openCreateEntryModal: function(sectionId) {\n        if (this.$newEntryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the section\n        var section;\n\n        for (var i = 0; i < this.publishableSections.length; i++) {\n            if (this.publishableSections[i].id == sectionId) {\n                section = this.publishableSections[i];\n                break;\n            }\n        }\n\n        if (!section) {\n            return;\n        }\n\n        this.$newEntryBtn.addClass('inactive');\n        var newEntryBtnText = this.$newEntryBtn.text();\n        this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newEntryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                sectionId: sectionId,\n                typeId: section.entryTypes[0].id,\n                enabled: section.canPublish ? 1 : 0,\n            },\n            onHideHud: () => {\n                this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right section is selected\n                var sectionSourceKey = 'section:' + section.uid;\n\n                if (this.sourceKey !== sectionSourceKey) {\n                    this.selectSourceByKey(sectionSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n\n/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: this.onTabOptionSelect.bind(this)\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const $labelSpan = $tab.find('.tabs .tab span');\n        const oldName = $labelSpan.text();\n        const newName = this.promptForTabName(oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    promptForTabName: function(oldName) {\n        return Craft.escapeHtml(prompt(Craft.t('app', 'Give your tab a name.'), oldName));\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const name = this.promptForTabName();\n        if (!name) {\n            return;\n        }\n\n        const $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>${name}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend({\n    $toggle: null,\n    targetPrefix: null,\n    targetSelector: null,\n    reverseTargetSelector: null,\n\n    _$target: null,\n    _$reverseTarget: null,\n    type: null,\n\n    init: function(toggle) {\n        this.$toggle = $(toggle);\n\n        // Is this already a field toggle?\n        if (this.$toggle.data('fieldtoggle')) {\n            Garnish.log('Double-instantiating a field toggle on an element');\n            this.$toggle.data('fieldtoggle').destroy();\n        }\n\n        this.$toggle.data('fieldtoggle', this);\n\n        this.type = this.getType();\n\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n        } else {\n            this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n            this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n        }\n\n        this.findTargets();\n\n        switch (this.type) {\n            case 'link':\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n                break;\n            case 'fieldset':\n                this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                break;\n            default:\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n                this.onToggleChange();\n        }\n    },\n\n    normalizeTargetSelector: function(selector) {\n        if (selector && !selector.match(/^[#\\.]/)) {\n            selector = '#' + selector;\n        }\n\n        return selector;\n    },\n\n    getType: function() {\n        let nodeName = this.$toggle.prop('nodeName');\n        if (\n            (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n            this.$toggle.attr('role') === 'checkbox' ||\n            this.$toggle.attr('role') === 'switch'\n        ) {\n            return 'checkbox';\n        }\n\n        switch (nodeName) {\n            case 'SELECT':\n                return 'select';\n            case 'A':\n                return 'link';\n            case 'FIELDSET':\n                return 'fieldset';\n        }\n\n        console.warn('Unexpected field toggle:', this.$toggle[0]);\n    },\n\n    findTargets: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            var toggleVal = this.getToggleVal();\n            this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n        } else {\n            if (this.targetSelector) {\n                this._$target = $(this.targetSelector);\n            }\n\n            if (this.reverseTargetSelector) {\n                this._$reverseTarget = $(this.reverseTargetSelector);\n            }\n        }\n    },\n\n    getToggleVal: function() {\n        if (this.type === 'checkbox') {\n            if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                return this.$toggle.prop('checked');\n            }\n            return this.$toggle.attr('aria-checked') === 'true';\n        }\n\n        let postVal;\n        if (this.type === 'fieldset') {\n            postVal = this.$toggle.find('input:checked:first').val();\n        } else {\n            postVal = Garnish.getInputPostVal(this.$toggle);\n        }\n\n        // Normalize the value\n        return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n    },\n\n    onToggleChange: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.hideTarget(this._$target);\n            this.findTargets();\n            this.showTarget(this._$target);\n        } else {\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n            } else {\n                this.onToggleChange._show = !!this.getToggleVal();\n            }\n\n            if (this.onToggleChange._show) {\n                this.showTarget(this._$target);\n                this.hideTarget(this._$reverseTarget);\n            } else {\n                this.hideTarget(this._$target);\n                this.showTarget(this._$reverseTarget);\n            }\n\n            delete this.onToggleChange._show;\n        }\n    },\n\n    showTarget: function($target) {\n        if ($target && $target.length) {\n            this.showTarget._currentHeight = $target.height();\n\n            $target.removeClass('hidden');\n\n            if (this.type !== 'select' && this.type !== 'fieldset') {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('collapsed');\n                    this.$toggle.addClass('expanded');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.prop('nodeName') !== 'SPAN') {\n                            $t.height('auto');\n                            this.showTarget._targetHeight = $t.height();\n                            $t.css({\n                                height: this.showTarget._currentHeight,\n                                overflow: 'hidden'\n                            });\n\n                            $t.velocity('stop');\n\n                            $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                $t.css({\n                                    height: '',\n                                    overflow: ''\n                                });\n                            });\n                        }\n                    })($target.eq(i));\n                }\n\n                delete this.showTarget._targetHeight;\n            }\n\n            delete this.showTarget._currentHeight;\n\n            // Trigger a resize event in case there are any grids in the target that need to initialize\n            Garnish.$win.trigger('resize');\n        }\n    },\n\n    hideTarget: function($target) {\n        if ($target && $target.length) {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                $target.addClass('hidden');\n            } else {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('expanded');\n                    this.$toggle.addClass('collapsed');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.hasClass('hidden')) {\n                            return;\n                        }\n                        if ($t.prop('nodeName') === 'SPAN') {\n                            $t.addClass('hidden');\n                        } else {\n                            $t.css('overflow', 'hidden');\n                            $t.velocity('stop');\n                            $t.velocity({height: 0}, 'fast', function() {\n                                $t.addClass('hidden');\n                            });\n                        }\n                    })($target.eq(i));\n                }\n            }\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend({\n    $container: null,\n\n    $items: null,\n    items: null,\n    totalCols: null,\n    colGutterDrop: null,\n    colPctWidth: null,\n\n    possibleItemColspans: null,\n    possibleItemPositionsByColspan: null,\n\n    itemPositions: null,\n    itemColspansByPosition: null,\n\n    layouts: null,\n    layout: null,\n    itemHeights: null,\n    leftPadding: null,\n\n    _refreshingCols: false,\n    _refreshColsAfterRefresh: false,\n    _forceRefreshColsAfterRefresh: false,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n\n        // Is this already a grid?\n        if (this.$container.data('grid')) {\n            Garnish.log('Double-instantiating a grid on an element');\n            this.$container.data('grid').destroy();\n        }\n\n        this.$container.data('grid', this);\n\n        this.setSettings(settings, Craft.Grid.defaults);\n\n        // Set the refreshCols() proxy that container resizes will trigger\n        this.handleContainerHeightProxy = () => {\n            this.refreshCols(false, true);\n        };\n\n        this.$items = this.$container.children(this.settings.itemSelector);\n        this.setItems();\n        this.refreshCols(true, false);\n\n        Garnish.$doc.ready(() => {\n            this.refreshCols(false, false);\n        });\n    },\n\n    addItems: function(items) {\n        this.$items = $().add(this.$items.add(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    removeItems: function(items) {\n        this.$items = $().add(this.$items.not(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    resetItemOrder: function() {\n        this.$items = $().add(this.$items);\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    setItems: function() {\n        this.setItems._ = {};\n\n        this.items = [];\n\n        for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n            this.items.push($(this.$items[this.setItems._.i]));\n        }\n\n        delete this.setItems._;\n    },\n\n    refreshCols: function(force) {\n        if (this._refreshingCols) {\n            this._refreshColsAfterRefresh = true;\n            if (force) {\n                this._forceRefreshColsAfterRefresh = true;\n            }\n            return;\n        }\n\n        this._refreshingCols = true;\n\n        if (!this.items.length) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.refreshCols._ = {};\n\n        // Check to see if the grid is actually visible\n        this.refreshCols._.oldHeight = this.$container[0].style.height;\n        this.$container[0].style.height = 1;\n        this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n        this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n        if (this.refreshCols._.scrollHeight === 0) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        if (this.settings.cols) {\n            this.refreshCols._.totalCols = this.settings.cols;\n        } else {\n            this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n            // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n            if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n            }\n\n            if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                this.refreshCols._.totalCols = this.settings.maxCols;\n            }\n        }\n\n        if (this.refreshCols._.totalCols === 0) {\n            this.refreshCols._.totalCols = 1;\n        }\n\n        // Same number of columns as before?\n        if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.totalCols = this.refreshCols._.totalCols;\n        this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n        // Temporarily stop listening to container resizes\n        this.removeListener(this.$container, 'resize');\n\n        if (this.settings.fillMode === 'grid') {\n            this.refreshCols._.itemIndex = 0;\n\n            while (this.refreshCols._.itemIndex < this.items.length) {\n                // Append the next X items and figure out which one is the tallest\n                this.refreshCols._.tallestItemHeight = -1;\n                this.refreshCols._.colIndex = 0;\n\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                    if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                        this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                    }\n\n                    this.refreshCols._.colIndex++;\n                }\n\n                if (this.settings.snapToGrid) {\n                    this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                    if (this.refreshCols._.remainder) {\n                        this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                    }\n                }\n\n                // Now set their heights to the tallest one\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                }\n\n                // set the this.refreshCols._.itemIndex pointer to the next one up\n                this.refreshCols._.itemIndex += this.totalCols;\n            }\n        } else {\n            this.removeListener(this.$items, 'resize');\n\n            // If there's only one column, sneak out early\n            if (this.totalCols === 1) {\n                this.$container.height('auto');\n                this.$items\n                    .show()\n                    .css({\n                        position: 'relative',\n                        width: 'auto',\n                        top: 0\n                    })\n                    .css(Craft.left, 0);\n            } else {\n                this.$items.css('position', 'absolute');\n                this.colPctWidth = (100 / this.totalCols);\n\n                // The setup\n\n                this.layouts = [];\n\n                this.itemPositions = [];\n                this.itemColspansByPosition = [];\n\n                // Figure out all of the possible colspans for each item,\n                // as well as all the possible positions for each item at each of its colspans\n\n                this.possibleItemColspans = [];\n                this.possibleItemPositionsByColspan = [];\n                this.itemHeightsByColspan = [];\n\n                for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                    this.possibleItemColspans[this.refreshCols._.item] = [];\n                    this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                    this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                    this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                    this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                    this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                    this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                    this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                    if (this.refreshCols._.minColspan > this.totalCols) {\n                        this.refreshCols._.minColspan = this.totalCols;\n                    }\n                    if (this.refreshCols._.maxColspan > this.totalCols) {\n                        this.refreshCols._.maxColspan = this.totalCols;\n                    }\n\n                    for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                        // Get the height for this colspan\n                        this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                        this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                        this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                        if (this.refreshCols._.positionLeft) {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = 0;\n                        } else if (this.refreshCols._.positionRight) {\n                            this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                            this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                        } else {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                        }\n\n                        for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                        }\n                    }\n                }\n\n                // Find all the possible layouts\n\n                this.refreshCols._.colHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                    this.refreshCols._.colHeights.push(0);\n                }\n\n                this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                // Now find the layout that looks the best.\n\n                // First find the layouts with the highest number of used columns\n                this.refreshCols._.layoutTotalCols = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                    for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                        if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                            this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                        }\n                    }\n                }\n\n                this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                // Filter out the ones that aren't using as many columns as they could be\n                for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                    if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                        this.layouts.splice(this.refreshCols._.i, 1);\n                    }\n                }\n\n                // Find the layout(s) with the least overall height\n                this.refreshCols._.layoutHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                }\n\n                this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                this.refreshCols._.shortestLayouts = [];\n                this.refreshCols._.emptySpaces = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                    if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                        this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                        // Now get its total empty space, including any trailing empty space\n                        this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                        }\n\n                        this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                    }\n                }\n\n                // And the layout with the least empty space is...\n                this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                // Set the item widths and left positions\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                    this.refreshCols._.css = {\n                        width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                    };\n                    this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                    this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                }\n\n                // If every item is at position 0, then let them lay out au naturel\n                if (this.isSimpleLayout()) {\n                    this.$container.height('auto');\n                    this.$items.css({\n                        position: 'relative',\n                        top: 0,\n                        'margin-bottom': this.settings.gutter + 'px'\n                    });\n                } else {\n                    this.$items.css('position', 'absolute');\n\n                    // Now position the items\n                    this.positionItems();\n\n                    // Update the positions as the items' heigthts change\n                    this.addListener(this.$items, 'resize', 'onItemResize');\n                }\n            }\n        }\n\n        this.completeRefreshCols();\n\n        // Resume container resize listening\n        this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n        this.onRefreshCols();\n    },\n\n    completeRefreshCols: function() {\n        // Delete the internal variable object\n        if (typeof this.refreshCols._ !== 'undefined') {\n            delete this.refreshCols._;\n        }\n\n        this._refreshingCols = false;\n\n        if (this._refreshColsAfterRefresh) {\n            var force = this._forceRefreshColsAfterRefresh;\n            this._refreshColsAfterRefresh = false;\n            this._forceRefreshColsAfterRefresh = false;\n\n            Garnish.requestAnimationFrame(() => {\n                this.refreshCols(force);\n            });\n        }\n    },\n\n    getItemWidth: function(colspan) {\n        return (this.colPctWidth * colspan);\n    },\n\n    getItemWidthCss: function(colspan) {\n        return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n    },\n\n    getItemWidthInPx: function(colspan) {\n        return this.getItemWidth(colspan) / 100 * this.$container.width() - this.colGutterDrop;\n    },\n\n    getItemLeftPosCss: function(position) {\n        return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n    },\n\n    getItemLeftPosInPx: function(position) {\n        return (this.getItemWidth(1) / 100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n    },\n\n    isSimpleLayout: function() {\n        this.isSimpleLayout._ = {};\n\n        for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n            if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                delete this.isSimpleLayout._;\n                return false;\n            }\n        }\n\n        delete this.isSimpleLayout._;\n        return true;\n    },\n\n    positionItems: function() {\n        this.positionItems._ = {};\n\n        this.positionItems._.colHeights = [];\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n            this.positionItems._.colHeights.push(0);\n        }\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n            this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n            this.positionItems._.affectedColHeights = [];\n\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n            }\n\n            this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n            if (this.positionItems._.top > 0) {\n                this.positionItems._.top += this.settings.gutter;\n            }\n\n            this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n            // Now add the new heights to those columns\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n            }\n        }\n\n        // Set the container height\n        this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n        delete this.positionItems._;\n    },\n\n    onItemResize: function(ev) {\n        this.onItemResize._ = {};\n\n        // Prevent this from bubbling up to the container, which has its own resize listener\n        ev.stopPropagation();\n\n        this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n        if (this.onItemResize._.item !== -1) {\n            // Update the height and reposition the items\n            this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n            if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                this.positionItems(false);\n            }\n        }\n\n        delete this.onItemResize._;\n    },\n\n    onRefreshCols: function() {\n        this.trigger('refreshCols');\n        this.settings.onRefreshCols();\n    }\n}, {\n    defaults: {\n        itemSelector: '.item',\n        cols: null,\n        maxCols: null,\n        minColWidth: 320,\n        gutter: 14,\n        fillMode: 'top',\n        colClass: 'col',\n        snapToGrid: null,\n\n        onRefreshCols: $.noop\n    }\n});\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend({\n    grid: null,\n    _: null,\n\n    init: function(grid) {\n        this.grid = grid;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        this._ = {};\n\n        // Loop through all possible colspans\n        for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n            this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n            // Loop through all the possible positions for this colspan,\n            // and find the one that is closest to the top\n\n            this._.tallestColHeightsByPosition = [];\n\n            for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                this._.colHeightsForPosition = [];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                }\n\n                this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n            }\n\n            // And the shortest position for this colspan is...\n            this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n            this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n            // Now log the colspan/position placement\n            this._.positions = prevPositions.slice(0);\n            this._.colspans = prevColspans.slice(0);\n            this._.colHeights = prevColHeights.slice(0);\n            this._.emptySpace = prevEmptySpace;\n\n            this._.positions.push(this._.position);\n            this._.colspans.push(this._.colspan);\n\n            // Add the new heights to those columns\n            this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n            this._.endingCol = this._.position + this._.colspan - 1;\n\n            for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n            }\n\n            // If this is the last item, create the layout\n            if (item === this.grid.items.length - 1) {\n                this.grid.layouts.push({\n                    positions: this._.positions,\n                    colspans: this._.colspans,\n                    colHeights: this._.colHeights,\n                    emptySpace: this._.emptySpace\n                });\n            } else {\n                // Dive deeper\n                this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n            }\n        }\n\n        delete this._;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Remove inner-word punctuation\n        handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        handle = handle.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        handle = Craft.asciiString(handle);\n\n        if (!this.settings.allowNonAlphaStart) {\n            // Handle must start with a letter\n            handle = handle.replace(/^[^a-z]+/, '');\n        }\n\n        // Get the \"words\"\n        var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n        handle = '';\n\n        if (Craft.handleCasing === 'snake') {\n            return words.join('_');\n        }\n\n        // Make it camelCase\n        for (let i = 0; i < words.length; i++) {\n            if (Craft.handleCasing !== 'pascal' && i === 0) {\n                handle += words[i];\n            } else {\n                handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n            }\n        }\n\n        return handle;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend({\n    $container: null,\n    progressBar: null,\n    uploader: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ImageUpload.defaults);\n        this.initImageUpload();\n    },\n\n    initImageUpload: function() {\n        this.$container = $(this.settings.containerSelector);\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl(this.settings.uploadAction),\n            formData: this.settings.postParameters,\n            fileInput: this.$container.find(this.settings.fileInputSelector),\n            paramName: this.settings.uploadParamName\n        };\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n        options.events.fileuploadfail = this._onUploadError.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        this.initButtons();\n    },\n\n    initButtons: function() {\n        this.$container.find(this.settings.uploadButtonSelector).on('click', ev => {\n            this.$container.find(this.settings.fileInputSelector).trigger('click');\n        });\n\n        this.$container.find(this.settings.deleteButtonSelector).on('click', ev => {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        this.refreshImage(response);\n                    }\n                });\n            }\n        });\n    },\n\n    refreshImage: function(response) {\n        $(this.settings.containerSelector).replaceWith(response.html);\n        this.settings.onAfterRefreshImage(response);\n        this.initImageUpload();\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function(event) {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var html = $(data.result.html);\n            this.refreshImage(data.result);\n        }\n\n        // Last file\n        if (this.uploader.isLastUpload()) {\n            this.progressBar.hideProgressBar();\n            this.$container.removeClass('uploading');\n        }\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadError: function(event, data) {\n        if (data.jqXHR.responseJSON.error) {\n            alert(data.jqXHR.responseJSON.error);\n            this.$container.removeClass('uploading');\n            this.progressBar.hideProgressBar();\n            this.progressBar.resetProgressBar();\n        }\n    }\n}, {\n    defaults: {\n        postParameters: {},\n        uploadAction: \"\",\n        deleteAction: \"\",\n        fileInputSelector: \"\",\n\n        onAfterRefreshImage: $.noop,\n        containerSelector: null,\n\n        uploadButtonSelector: null,\n        deleteButtonSelector: null,\n\n        uploadParamName: 'files'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend({\n    $icon: null,\n    content: null,\n    hud: null,\n\n    init: function(icon) {\n        this.$icon = $(icon);\n\n        if (this.$icon.data('infoicon')) {\n            Garnish.log('Double-instantiating an info icon on an element');\n            this.content = this.$icon.data('infoicon').content;\n            this.$icon.data('infoicon').destroy();\n        } else {\n            this.content = this.$icon.html();\n            this.$icon\n                .html('')\n                .attr({\n                    tabindex: 0,\n                    'role': 'button',\n                    'aria-label': Craft.t('app', 'Information'),\n                });\n        }\n\n        this.$icon.data('infoicon', this);\n\n        if (this.$icon[0].previousSibling && this.$icon[0].previousSibling.nodeType === Node.TEXT_NODE) {\n            // Make sure it's in a .nowrap container\n            const $parent = this.$icon.parent();\n            if (!$parent.hasClass('nowrap')) {\n                // Find the last word in the text\n                const m = this.$icon[0].previousSibling.nodeValue.match(/[^\\s\\-]+\\s*$/);\n                if (m) {\n                    this.$icon[0].previousSibling.nodeValue = this.$icon[0].previousSibling.nodeValue.substr(0, m.index);\n                    $('<span/>', {\n                        class: 'nowrap',\n                        html: m[0].replace(/\\s+$/, '') + ' ',\n                    })\n                        .insertAfter(this.$icon[0].previousSibling)\n                        .append(this.$icon);\n                }\n            }\n        }\n\n        this.addListener(this.$icon, 'click', ev => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.showHud();\n        });\n\n        this.addListener(this.$icon, 'keydown', ev => {\n            if (!(this.hud && this.hud.showing) && [Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.showHud();\n            }\n        });\n    },\n\n    showHud: function(ev) {\n        if (!this.hud) {\n            this.hud = new Garnish.HUD(this.$icon, this.content, {\n                hudClass: 'hud info-hud',\n                closeOtherHUDs: false,\n                onShow: () => {\n                    Garnish.shortcutManager.registerShortcut(Garnish.SPACE_KEY, () => {\n                        this.hud.hide();\n                    });\n                },\n            });\n            Craft.initUiElements(this.hud.$body);\n        } else {\n            this.hud.show();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend({\n    settings: null,\n    $outerContainer: null,\n    $innerContainer: null,\n    $input: null,\n    small: false,\n    on: false,\n    indeterminate: false,\n    dragger: null,\n\n    dragStartMargin: null,\n\n    init: function(outerContainer, settings) {\n        this.$outerContainer = $(outerContainer);\n\n        // Is this already a lightswitch?\n        if (this.$outerContainer.data('lightswitch')) {\n            Garnish.log('Double-instantiating a lightswitch on an element');\n            this.$outerContainer.data('lightswitch').destroy();\n        }\n\n        this.$outerContainer.data('lightswitch', this);\n\n        this.small = this.$outerContainer.hasClass('small');\n\n        this.setSettings(settings, Craft.LightSwitch.defaults);\n\n        this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n        this.$input = this.$outerContainer.find('input:first');\n\n        // If the input is disabled, go no further\n        if (this.$input.prop('disabled')) {\n            return;\n        }\n\n        this.on = this.$outerContainer.hasClass('on');\n        this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n        this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n        this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n        this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n            axis: Garnish.X_AXIS,\n            ignoreHandleSelector: null,\n            onDragStart: this._onDragStart.bind(this),\n            onDrag: this._onDrag.bind(this),\n            onDragStop: this._onDragStop.bind(this)\n        });\n\n        // Does the input have on/off labels?\n        let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n        if ($wrapper.length) {\n            this.addListener($wrapper.children('span[data-toggle=\"off\"]'), 'click', this.turnOff);\n            this.addListener($wrapper.children('span[data-toggle=\"on\"]'), 'click', this.turnOn);\n        }\n    },\n\n    turnOn: function(muteEvent) {\n        var changed = !this.on;\n\n        this.on = true;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.value);\n        this.$outerContainer.addClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'true');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnOff: function(muteEvent) {\n        var changed = this.on || this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin();\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val('');\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'false');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnIndeterminate: function(muteEvent) {\n        var changed = !this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = true;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.indeterminateValue);\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.addClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'mixed');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    toggle: function() {\n        if (this.indeterminate || !this.on) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    onChange: function() {\n        this.trigger('change');\n        this.settings.onChange(this.on);\n        this.$outerContainer.trigger('change');\n    },\n\n    _onMouseDown: function() {\n        this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n    },\n\n    _onMouseUp: function() {\n        this.removeListener(Garnish.$doc, 'mouseup');\n\n        // Was this a click?\n        if (!this.dragger.dragging) {\n            this.toggle();\n        }\n    },\n\n    _onKeyDown: function(event) {\n        switch (event.keyCode) {\n            case Garnish.SPACE_KEY: {\n                this.toggle();\n                event.preventDefault();\n                break;\n            }\n            case Garnish.RIGHT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOn();\n                } else {\n                    this.turnOff();\n                }\n\n                event.preventDefault();\n                break;\n            }\n            case Garnish.LEFT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOff();\n                } else {\n                    this.turnOn();\n                }\n\n                event.preventDefault();\n                break;\n            }\n        }\n    },\n\n    _getMargin: function() {\n        return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n    },\n\n    _onDragStart: function() {\n        this.$outerContainer.addClass('dragging');\n        this.dragStartMargin = this._getMargin();\n    },\n\n    _onDrag: function() {\n        var margin;\n\n        if (Craft.orientation === 'ltr') {\n            margin = this.dragStartMargin + this.dragger.mouseDistX;\n        } else {\n            margin = this.dragStartMargin - this.dragger.mouseDistX;\n        }\n\n        if (margin < this._getOffMargin()) {\n            margin = this._getOffMargin();\n        } else if (margin > 0) {\n            margin = 0;\n        }\n\n        this.$innerContainer.css('margin-' + Craft.left, margin);\n    },\n\n    _onDragStop: function() {\n        var margin = this._getMargin();\n        console.log(margin);\n\n        if (margin > (this._getOffMargin() / 2)) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    _onSettle: function() {\n        this.$outerContainer.removeClass('dragging');\n    },\n\n    destroy: function() {\n        this.base();\n        this.dragger.destroy();\n    },\n\n    _getOffMargin: function() {\n        return (this.small ? -10 : -12);\n    }\n}, {\n    animationDuration: 100,\n    defaults: {\n        value: '1',\n        indeterminateValue: '-',\n        onChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend({\n    $extraFields: null,\n    $trigger: null,\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $iframe: null,\n    $fieldPlaceholder: null,\n\n    previewUrl: null,\n    token: null,\n    basePostData: null,\n    inPreviewMode: false,\n    fields: null,\n    lastPostData: null,\n    updateIframeInterval: null,\n    loading: false,\n    checkAgain: false,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _slideInOnIframeLoad: false,\n    _forceUpdateIframeProxy: null,\n\n    _scrollX: null,\n    _scrollY: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.LivePreview.defaults);\n\n        // Should preview requests use a specific URL?\n        // This won't affect how the request gets routed (the action param will override it),\n        // but it will allow the templates to change behavior based on the request URI.\n        if (this.settings.previewUrl) {\n            this.previewUrl = this.settings.previewUrl;\n        } else {\n            this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n        }\n\n        // Load the preview over SSL if the current request is\n        if (document.location.protocol === 'https:') {\n            this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n        }\n\n        // Set the base post data\n        this.basePostData = $.extend({}, this.settings.previewParams);\n\n        this._forceUpdateIframeProxy = this.forceUpdateIframe.bind(this);\n\n        // Find the DOM elements\n        this.$extraFields = $(this.settings.extraFields);\n        this.$trigger = $(this.settings.trigger);\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n        // Event Listeners\n        this.addListener(this.$trigger, 'activate', 'toggle');\n\n        Craft.cp.on('beforeSaveShortcut', () => {\n            if (this.inPreviewMode) {\n                this.moveFieldsBack();\n            }\n        });\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n            inPx = Craft.LivePreview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    toggle: function() {\n        if (this.inPreviewMode) {\n            this.exit();\n        } else {\n            this.enter();\n        }\n    },\n\n    enter: function() {\n        if (this.inPreviewMode) {\n            return;\n        }\n\n        if (!this.token) {\n            this.createToken();\n            return;\n        }\n\n        this.trigger('beforeEnter');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            let $saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($editorHeader);\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this)\n            });\n\n            this.addListener($closeBtn, 'click', 'exit');\n            this.addListener($saveBtn, 'click', 'save');\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Move all the fields into the editor rather than copying them\n        // so any JS that's referencing the elements won't break.\n        this.fields = [];\n        var $fields = $(this.settings.fields);\n\n        for (var i = 0; i < $fields.length; i++) {\n            var $field = $($fields[i]),\n                $clone = this._getClone($field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter($field);\n            $field.detach();\n            this.$fieldPlaceholder.replaceWith($clone);\n            $field.appendTo(this.$editor);\n\n            this.fields.push({\n                $field: $field,\n                $clone: $clone\n            });\n        }\n\n        if (this.updateIframe()) {\n            this._slideInOnIframeLoad = true;\n        } else {\n            this.slideIn();\n        }\n\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = true;\n        this.trigger('enter');\n    },\n\n    createToken: function() {\n        Craft.postActionRequest('live-preview/create-token', {\n            previewAction: this.settings.previewAction\n        }, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.token = response.token;\n                this.enter();\n            }\n        });\n    },\n\n    save: function() {\n        Craft.cp.submitPrimaryForm();\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.updateIframeInterval = setInterval(this.updateIframe.bind(this), 1000);\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.exit();\n                }\n            });\n        });\n    },\n\n    exit: function() {\n        if (!this.inPreviewMode) {\n            return;\n        }\n\n        this.trigger('beforeExit');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        if (this.updateIframeInterval) {\n            clearInterval(this.updateIframeInterval);\n        }\n\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n        });\n\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = false;\n        this.trigger('exit');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n    },\n\n    updateIframe: function(force) {\n        if (force) {\n            this.lastPostData = null;\n        }\n\n        if (!this.inPreviewMode) {\n            return false;\n        }\n\n        if (this.loading) {\n            this.checkAgain = true;\n            return false;\n        }\n\n        // Has the post data changed?\n        var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n        if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n            this.lastPostData = postData;\n            this.loading = true;\n\n            var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n            this._scrollX = $doc ? $doc.scrollLeft() : 0;\n            this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n            $.ajax({\n                url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                method: 'POST',\n                data: $.extend({}, postData, this.basePostData),\n                headers: {\n                    'X-Craft-Token': this.token\n                },\n                xhrFields: {\n                    withCredentials: true\n                },\n                crossDomain: true,\n                success: this.handleSuccess.bind(this),\n                error: this.handleError.bind(this),\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    forceUpdateIframe: function() {\n        return this.updateIframe(true);\n    },\n\n    handleSuccess: function(data) {\n        var html = data +\n            '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n        // Create a new iframe\n        var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n        if (this.$iframe) {\n            $iframe.insertBefore(this.$iframe);\n        } else {\n            $iframe.appendTo(this.$iframeContainer);\n        }\n\n        this.addListener($iframe, 'load', function() {\n            if (this.$iframe) {\n                this.$iframe.remove();\n            }\n            this.$iframe = $iframe;\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n\n            this.removeListener($iframe, 'load');\n        });\n\n        Garnish.requestAnimationFrame(() => {\n            $iframe[0].contentWindow.document.open();\n            $iframe[0].contentWindow.document.write(html);\n            $iframe[0].contentWindow.document.close();\n            this.onResponse();\n        });\n    },\n\n    handleError: function() {\n        this.onResponse();\n    },\n\n    onResponse: function() {\n        this.loading = false;\n\n        if (this.checkAgain) {\n            this.checkAgain = false;\n            this.updateIframe();\n        }\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n\n    defaults: {\n        trigger: '.livepreviewbtn',\n        fields: null,\n        extraFields: null,\n        previewUrl: null,\n        previewAction: null,\n        previewParams: {}\n    }\n});\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend({\n    $passwordWrapper: null,\n    $passwordInput: null,\n    $textInput: null,\n    $currentInput: null,\n\n    $showPasswordToggle: null,\n    showingPassword: null,\n\n    init: function(passwordInput, settings) {\n        this.$passwordInput = $(passwordInput);\n        this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n        this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n        // Is this already a password input?\n        if (this.$passwordInput.data('passwordInput')) {\n            Garnish.log('Double-instantiating a password input on an element');\n            this.$passwordInput.data('passwordInput').destroy();\n        }\n\n        this.$passwordInput.data('passwordInput', this);\n\n        this.$showPasswordToggle = $('<button type=\"button\" class=\"invisible\" />');\n        this.$showPasswordToggle.addClass('password-toggle');\n        this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n        this.initInputFocusEvents(this.$passwordInput);\n        this.addListener(this.$showPasswordToggle, 'click', 'onClick');\n        this.hidePassword();\n\n        this.addListener(this.$passwordWrapper.closest('form'), 'submit', 'hidePassword');\n    },\n\n    setCurrentInput: function($input) {\n        if (this.$currentInput) {\n            // Swap the inputs, while preventing the focus animation\n            $input.insertAfter(this.$currentInput);\n            this.$currentInput.detach();\n            $input.trigger('focus');\n\n            // Restore the input value\n            $input.val(this.$currentInput.val());\n        }\n\n        this.$currentInput = $input;\n\n        this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n    },\n\n    updateToggleLabel: function(label) {\n        this.$showPasswordToggle.text(label);\n    },\n\n    initInputFocusEvents: function($input) {\n        this.addListener($input, 'focus', function() {\n            this.$passwordWrapper.addClass('focus');\n        });\n        this.addListener($input, 'blur', function() {\n            this.$passwordWrapper.removeClass('focus');\n        });\n    },\n\n    showPassword: function() {\n        if (this.showingPassword) {\n            return;\n        }\n\n        if (!this.$textInput) {\n            this.$textInput = this.$passwordInput.clone(true);\n            this.$textInput.attr({\n                type: 'text',\n                autocapitalize: 'off',\n            });\n            this.initInputFocusEvents(this.$textInput);\n        }\n\n        this.setCurrentInput(this.$textInput);\n        this.updateToggleLabel(Craft.t('app', 'Hide'));\n        this.showingPassword = true;\n    },\n\n    hidePassword: function() {\n        // showingPassword could be null, which is acceptable\n        if (this.showingPassword === false) {\n            return;\n        }\n\n        this.setCurrentInput(this.$passwordInput);\n        this.updateToggleLabel(Craft.t('app', 'Show'));\n        this.showingPassword = false;\n\n        // Alt key temporarily shows the password\n        this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n    },\n\n    togglePassword: function() {\n        if (this.showingPassword) {\n            this.hidePassword();\n        } else {\n            this.showPassword();\n        }\n\n        this.settings.onToggleInput(this.$currentInput);\n    },\n\n    onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n            this.showPassword();\n            this.$showPasswordToggle.addClass('invisible');\n            this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n        }\n    },\n\n    onKeyUp: function(ev) {\n        ev.preventDefault();\n\n        if (ev.keyCode === Garnish.ALT_KEY) {\n            this.hidePassword();\n            this.$showPasswordToggle.removeClass('invisible');\n        }\n    },\n\n    onInputChange: function() {\n        if (this.$currentInput.val()) {\n            this.$showPasswordToggle.removeClass('invisible');\n        } else {\n            this.$showPasswordToggle.addClass('invisible');\n        }\n    },\n\n    onClick: function(ev) {\n        if (this.$currentInput[0].setSelectionRange) {\n            var selectionStart = this.$currentInput[0].selectionStart,\n                selectionEnd = this.$currentInput[0].selectionEnd;\n\n            this.togglePassword();\n            this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n        } else {\n            this.togglePassword();\n        }\n    }\n}, {\n    defaults: {\n        onToggleInput: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend({\n    draftEditor: null,\n\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $spinner: null,\n    $statusIcon: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $previewHeader: null,\n    $targetBtn: null,\n    $targetMenu: null,\n    $deviceTypeContainer: null,\n    $orientationBtn: null,\n    $refreshBtn: null,\n    $deviceMask: null,\n    $devicePreviewContainer: null,\n    $iframe: null,\n    iframeLoaded: false,\n    $tempInput: null,\n    $fieldPlaceholder: null,\n\n    isActive: false,\n    isVisible: false,\n    activeTarget: 0,\n\n    isDeviceUpdating: false,\n    deviceAnimationTimeout: null,\n    currentDeviceType: 'desktop',\n    deviceOrientation: null,\n    deviceWidth: '',\n    deviceHeight: '',\n    deviceMaskDimensions: {\n        phone: {\n            width: 375,\n            height: 753\n        },\n        tablet: {\n            width: 768,\n            height: 1110\n        }\n    },\n\n    draftId: null,\n    url: null,\n    fields: null,\n\n    iframeHeight: null,\n    scrollTop: null,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _updateIframeProxy: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(draftEditor) {\n        this.draftEditor = draftEditor;\n\n        this._updateIframeProxy = this.updateIframe.bind(this);\n\n        this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.Preview.minEditorWidthInPx) {\n            inPx = Craft.Preview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    open: function() {\n        if (this.isActive) {\n            return;\n        }\n\n        this.isActive = true;\n        this.trigger('beforeOpen');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n            this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n            if (Craft.Pro) {\n                this.$previewHeader = $('<header/>', {'class': 'lp-preview-header'}).appendTo(this.$previewContainer);\n\n                // Preview targets\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo(this.$previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    const $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    let $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n\n                    $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                }\n\n                // Device type buttons\n                this.$deviceTypeContainer = $('<div/>', {\n                    class: 'btngroup lp-device-type',\n                    role: 'listbox',\n                    'aria-label': Craft.t('app', 'Device type'),\n                    tabindex: '0',\n                }).appendTo(this.$previewHeader);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--desktop active',\n                    title: Craft.t('app', 'Desktop'),\n                    'aria-label': Craft.t('app', 'Desktop'),\n                    'aria-selected': 'true',\n                    tabindex: '-1',\n                    data: {\n                        width: '',\n                        height: '',\n                        deviceType: 'desktop'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--tablet',\n                    title: Craft.t('app', 'Tablet'),\n                    'aria-label': Craft.t('app', 'Tablet'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 768,\n                        height: 1024,\n                        deviceType: 'tablet'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--phone',\n                    title: Craft.t('app', 'Mobile'),\n                    'aria-label': Craft.t('app', 'Mobile'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 375,\n                        height: 667,\n                        deviceType: 'phone'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n\n                $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                const $buttonContainer = $('<div class=\"buttons\"/>').appendTo(this.$previewHeader);\n\n                // Orientation toggle\n                this.$orientationBtn = $('<button/>', {\n                    type: 'button',\n                    'class': 'btn disabled',\n                    'data-icon': 'rotate',\n                    disabled: '',\n                    'aria-hidden': '',\n                    'text': Craft.t('app', 'Rotate')\n                }).appendTo($buttonContainer);\n                this.addListener(this.$orientationBtn, 'click', 'switchOrientation');\n\n                // Refresh button\n                this.$refreshBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn hidden',\n                    text: Craft.t('app', 'Refresh'),\n                    'data-icon': 'refresh',\n                }).appendTo($buttonContainer);\n                this._updateRefreshBtn();\n                this.addListener(this.$refreshBtn, 'click', () => {\n                    this.updateIframe(false, true);\n                });\n\n                // Get the last stored orientation\n                this.deviceOrientation = Craft.getLocalStorage('LivePreview.orientation');\n\n                // Device type button click handler\n                this.addListener($('.btn', this.$deviceTypeContainer), 'click', 'switchDeviceType');\n\n                // Device mask\n                this.$deviceMask = $('<div/>', {\n                    'class': 'lp-device-mask'\n                });\n            }\n\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n            if (this.$deviceMask) {\n                this.$iframeContainer.append(this.$deviceMask);\n            }\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this),\n            });\n\n            this.addListener($closeBtn, 'click', 'close');\n            this.addListener(this.$statusIcon, 'click', () => {\n                this.draftEditor.showStatusHud(this.$statusIcon);\n            });\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Find the fields, excluding nested fields\n        this.fields = [];\n        var $fields = $('#content .field').not($('#content .field .field'));\n\n        if ($fields.length) {\n            // Insert our temporary input before the first field so we know where to swap in the serialized form values\n            this.$tempInput.insertBefore($fields.get(0));\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            for (let i = 0; i < $fields.length; i++) {\n                let $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n        }\n\n        this.updateIframe();\n\n        this.draftEditor.on('update', this._updateIframeProxy);\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.trigger('open');\n    },\n\n    _activeTarget: function() {\n        return this.draftEditor.settings.previewTargets[this.activeTarget];\n    },\n\n    _updateRefreshBtn: function() {\n        const target = this._activeTarget();\n        if (target.refresh !== 'undefined' && !target.refresh) {\n            this.$refreshBtn.removeClass('hidden');\n        } else {\n            this.$refreshBtn.addClass('hidden');\n        }\n    },\n\n    switchTarget: function(i) {\n        this.activeTarget = i;\n        this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n        this.$targetMenu.find('a.sel').removeClass('sel');\n        this.$targetMenu.find('a').eq(i).addClass('sel');\n        this.updateIframe(true);\n        this._updateRefreshBtn();\n        this.trigger('switchTarget', {\n            previewTarget: this.draftEditor.settings.previewTargets[i],\n        });\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        if (!this.isActive || this.isVisible) {\n            return;\n        }\n\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.close();\n                }\n            });\n        });\n\n        this.isVisible = true;\n    },\n\n    close: function() {\n        if (!this.isActive || !this.isVisible) {\n            return;\n        }\n\n        this.trigger('beforeClose');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        // Remove our temporary input and move the preview fields back into place\n        this.$tempInput.detach();\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n            this.resetDevicePreview();\n        });\n\n        this.draftEditor.off('update', this._updateIframeProxy);\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.isActive = false;\n        this.isVisible = false;\n        this.trigger('close');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n        Garnish.$doc.trigger('scroll');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n        if (this._devicePreviewIsActive()) {\n            this.updateDevicePreview();\n        }\n    },\n\n    _useIframeResizer: function() {\n        return Craft.previewIframeResizerOptions !== false;\n    },\n\n    updateIframe: function(resetScroll, forceRefresh) {\n        if (!this.isActive) {\n            return false;\n        }\n\n        // Ignore non-boolean resetScroll values\n        resetScroll = resetScroll === true;\n\n        const target = this._activeTarget();\n        const refresh = !!(\n            forceRefresh ||\n            this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n            !this.$iframe ||\n            resetScroll ||\n            typeof target.refresh === 'undefined' ||\n            target.refresh\n        );\n\n        this.trigger('beforeUpdateIframe', {\n            previewTarget: target,\n            resetScroll: resetScroll,\n            refresh: refresh,\n        });\n\n        // If this is an existing preview target, make sure it wants to be refreshed automatically\n        if (!refresh) {\n            this.slideIn();\n            return;\n        }\n\n        this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n            // Maintain the current scroll position?\n            let sameHost;\n            if (resetScroll) {\n                this.scrollTop = null;\n            } else if (this.iframeLoaded && this.$iframe) {\n                if (this._useIframeResizer()) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                } else {\n                    sameHost = Craft.isSameHost(url);\n                    if (sameHost && this.$iframe[0].contentWindow) {\n                        this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                    }\n                }\n            }\n\n            this.iframeLoaded = false;\n\n            var $iframe = $('<iframe/>', {\n                'class': 'lp-preview',\n                frameborder: 0,\n                src: url,\n            });\n\n            if (this.$iframe) {\n                this.$iframe.replaceWith($iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            // If we’re on tablet/phone then wrap the iframe in our own container\n            // so we can keep all the iFrameResizer() stuff working\n            if (this._devicePreviewIsActive()) {\n                if (!this.$devicePreviewContainer) {\n                    this.$devicePreviewContainer = $('<div/>', {\n                        'class': 'lp-device-preview-container'\n                    });\n                    $iframe.wrap('<div class=\"lp-device-preview-container\"></div>');\n                    this.$devicePreviewContainer = this.$iframeContainer.find('.lp-device-preview-container');\n                }\n            }\n\n            // Keep the iframe height consistent with its content\n            if (this._useIframeResizer()) {\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                iFrameResize($.extend({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n            } else {\n                $iframe.on('load', () => {\n                    this.iframeLoaded = true;\n                    if (!resetScroll && sameHost && this.scrollTop !== null) {\n                        $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                    }\n                });\n            }\n\n            this.url = url;\n            this.$iframe = $iframe;\n\n            if (this._devicePreviewIsActive()) {\n                this.updateDevicePreview();\n            }\n\n            this.trigger('afterUpdateIframe', {\n                previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            this.slideIn();\n        });\n    },\n\n    _devicePreviewIsActive: function() {\n        return this.currentDeviceType !== 'desktop';\n    },\n\n    switchDeviceType: function(ev) {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n\n        const $btn = $(ev.target);\n        const newDeviceType = $btn.data('deviceType');\n\n        // Bail if we’re just smashing the same button\n        if (newDeviceType === this.currentDeviceType) {\n            return false;\n        }\n\n        // Store new device type data\n        this.currentDeviceType = newDeviceType;\n        this.deviceWidth = $btn.data('width');\n        this.deviceHeight = $btn.data('height');\n\n        // Set the active state on the button\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n\n        $btn\n            .addClass('active')\n            .attr('aria-selected', 'true');\n\n        // Update or reset\n        if (this.currentDeviceType === 'desktop') {\n            this.resetDevicePreview();\n        } else {\n            this.$iframeContainer.addClass('lp-iframe-container--updating');\n            this.updateIframe(true, true);\n            this.updateDevicePreview();\n        }\n    },\n\n    switchOrientation: function()\n    {\n        if (this.isDeviceUpdating || !this._devicePreviewIsActive()) {\n            return false;\n        }\n\n        // Switch to whichever orientation is currently not stored\n        if (!this.deviceOrientation || this.deviceOrientation === 'portrait') {\n            this.deviceOrientation = 'landscape';\n        } else {\n            this.deviceOrientation = 'portrait';\n        }\n\n        // Store the new one\n        Craft.setLocalStorage('LivePreview.orientation', this.deviceOrientation);\n\n        // Allow the animation to take place\n        this.$iframeContainer.addClass('lp-iframe-container--animating');\n\n        // Update the device preview\n        this.updateDevicePreview();\n    },\n\n    updateDevicePreview: function()\n    {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.isDeviceUpdating = true;\n\n        // Enable the orientation button\n        this.$orientationBtn\n            .removeClass('disabled')\n            .removeAttr('disabled')\n            .removeAttr('aria-hidden');\n\n        // Trigger the resized css mods\n        this.$iframeContainer.addClass('lp-iframe-container--has-device-preview');\n\n        // Add the tablet class if needed\n        if (this.currentDeviceType === 'tablet') {\n            this.$iframeContainer.addClass('lp-iframe-container--tablet');\n        } else {\n            this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n        }\n\n        // Figure out the best zoom\n        let hZoom = 1;\n        let wZoom = 1;\n        let zoom = 1;\n        let previewHeight = (this.$previewContainer.height() - 50) - 48; // 50px for the header bar and 24px clearance\n        let previewWidth = this.$previewContainer.width() - 48;\n        let maskHeight = this.deviceMaskDimensions[this.currentDeviceType].height;\n        let maskWidth = this.deviceMaskDimensions[this.currentDeviceType].width;\n\n        if (this.deviceOrientation === 'landscape') {\n            if (previewWidth < maskHeight) {\n                hZoom = previewWidth / maskHeight;\n            }\n            if (previewHeight < maskWidth) {\n                wZoom = previewHeight / maskWidth;\n            }\n        } else {\n            if (previewHeight < maskHeight) {\n                hZoom = previewHeight / maskHeight;\n            }\n            if (previewWidth < maskWidth) {\n                wZoom = previewWidth / maskWidth;\n            }\n        }\n\n        zoom = hZoom;\n        if (wZoom < hZoom) {\n            zoom = wZoom;\n        }\n\n        // Figure out the css values\n        const translate = -((100/zoom)/2);\n        const rotationDeg = this.deviceOrientation === 'landscape' ? '-90deg' : '0deg';\n\n        // Apply first to the device mask\n        this.$deviceMask.css({\n            width: this.deviceMaskDimensions[this.currentDeviceType].width + 'px',\n            height: this.deviceMaskDimensions[this.currentDeviceType].height + 'px',\n            transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%) rotate('+rotationDeg+')'\n        });\n\n        // After the animation duration we can update the iframe sizes and show it\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.deviceAnimationTimeout = setTimeout(() => {\n            // Then make the size change to the preview container\n            if (this.deviceOrientation === 'landscape') {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceHeight + 'px',\n                    height: this.deviceWidth + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: 0,\n                    marginLeft: '-' + (12*zoom) + 'px'\n                });\n            } else {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceWidth + 'px',\n                    height: this.deviceHeight + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: '-' + (12*zoom) + 'px',\n                    marginLeft: 0\n                });\n            }\n\n            // Remove the animating class and show the iframe\n            this.$iframeContainer.removeClass('lp-iframe-container--animating');\n            this.$iframeContainer.removeClass('lp-iframe-container--updating');\n            this.isDeviceUpdating = false;\n\n        }, 300);\n    },\n\n    resetDevicePreview: function()\n    {\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.currentDeviceType = 'desktop';\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n        this.$deviceTypeContainer.find('.lp-device-type-btn--desktop')\n            .addClass('active')\n            .attr('aria-selected', 'true');\n        this.$orientationBtn\n            .addClass('disabled')\n            .attr('disabled', '')\n            .attr('aria-hidden', '');\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n        this.$iframeContainer.removeClass('lp-iframe-container--has-device-preview');\n        this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n\n        // Flat out remove the iframe and let it get regenerated\n        if (this.$devicePreviewContainer) {\n            // If using iFrameResizer then remove the listeners first so we don’t get zombie instances\n            if (this._useIframeResizer()) {\n                this.$iframe[0].iFrameResizer.removeListeners();\n            }\n            this.$devicePreviewContainer.detach();\n            this.$devicePreviewContainer = null;\n            this.$iframe = null;\n            this.updateIframe(true, true);\n        }\n\n        this.isDeviceUpdating = false;\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        // Disable anything with a name attribute\n        $clone.find('[name]').prop('disabled', true);\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend({\n    assetId: null,\n    $spinner: null,\n    elementSelect: null,\n    type: null,\n    loaded: null,\n    requestId: 0,\n\n    /**\n     * Initialize the preview file modal.\n     * @returns {*|void}\n     */\n    init: function(assetId, elementSelect, settings) {\n        settings = $.extend(this.defaultSettings, settings);\n\n        settings.onHide = this._onHide.bind(this);\n\n        if (Craft.PreviewFileModal.openInstance) {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            if (instance.assetId !== assetId) {\n                instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                instance.elementSelect = elementSelect;\n            }\n\n            return this.destroy();\n        }\n\n        Craft.PreviewFileModal.openInstance = this;\n        this.elementSelect = elementSelect;\n\n        this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n        this.base(this.$container, $.extend({\n            resizable: true\n        }, settings));\n\n        // Cut the flicker, just show the nice person the preview.\n        if (this.$container) {\n            this.$container.velocity('stop');\n            this.$container.show().css('opacity', 1);\n\n            this.$shade.velocity('stop');\n            this.$shade.show().css('opacity', 1);\n        }\n\n        this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n    },\n\n    /**\n     * When hiding, remove all traces and focus last focused element.\n     * @private\n     */\n    _onHide: function() {\n        Craft.PreviewFileModal.openInstance = null;\n        if (this.elementSelect) {\n            this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n        }\n\n        this.$shade.remove();\n\n        return this.destroy();\n    },\n\n    /**\n     * Disappear immediately forever.\n     * @returns {boolean}\n     */\n    selfDestruct: function() {\n        var instance = Craft.PreviewFileModal.openInstance;\n\n        instance.hide();\n        instance.$shade.remove();\n        instance.destroy();\n\n        Craft.PreviewFileModal.openInstance = null;\n        Craft.focalPoint.destruct();\n        Craft.focalPoint = null;\n\n        return true;\n    },\n\n    /**\n     * Load an asset, using starting width and height, if applicable\n     * @param assetId\n     * @param startingWidth\n     * @param startingHeight\n     */\n    loadAsset: function(assetId, startingWidth, startingHeight) {\n        this.assetId = assetId;\n\n        this.$container.empty();\n        this.loaded = false;\n\n        this.desiredHeight = null;\n        this.desiredWidth = null;\n\n        var containerHeight = Garnish.$win.height() * 0.66;\n        var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n        containerHeight = containerWidth / 4 * 3;\n\n        if (startingWidth && startingHeight) {\n            var ratio = startingWidth / startingHeight;\n            containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n            containerWidth = containerHeight * ratio;\n\n            // This might actually have put width over the viewport limits, so doublecheck\n            if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = containerWidth / ratio;\n            }\n        }\n\n        this._resizeContainer(containerWidth, containerHeight);\n\n        this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n        var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n            left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n        this.$spinner.css({left: left, top: top, position: 'absolute'});\n        this.requestId++;\n\n        Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, (response, textStatus) => {\n            this.$container.removeClass('loading');\n            this.$spinner.remove();\n            this.loaded = true;\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (response.requestId != this.requestId) {\n                        return;\n                    }\n\n                    if (!response.previewHtml) {\n                        this.$container.addClass('zilch');\n                        this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                        return;\n                    }\n\n                    this.$container.removeClass('zilch');\n                    this.$container.append(response.previewHtml);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n                } else {\n                    alert(response.error);\n\n                    this.hide();\n                }\n            }\n        });\n    },\n\n    /**\n     * Resize the container to specified dimensions\n     * @param containerWidth\n     * @param containerHeight\n     * @private\n     */\n    _resizeContainer: function(containerWidth, containerHeight) {\n        this.$container.css({\n            'width': containerWidth,\n            'min-width': containerWidth,\n            'max-width': containerWidth,\n            'height': containerHeight,\n            'min-height': containerHeight,\n            'max-height': containerHeight,\n            'top': (Garnish.$win.height() - containerHeight) / 2,\n            'left': (Garnish.$win.width() - containerWidth) / 2\n        });\n    }\n}, {\n    defaultSettings: {\n        startingWidth: null,\n        startingHeight: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend({\n    $progressBar: null,\n    $innerProgressBar: null,\n    $progressBarStatus: null,\n\n    _itemCount: 0,\n    _processedItemCount: 0,\n    _displaySteps: false,\n\n    init: function($element, displaySteps) {\n        if (displaySteps) {\n            this._displaySteps = true;\n        }\n\n        this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n        this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n        this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n        this.resetProgressBar();\n    },\n\n    /**\n     * Reset the progress bar\n     */\n    resetProgressBar: function() {\n        // Since setting the progress percentage implies that there is progress to be shown\n        // It removes the pending class - we must add it back.\n        this.setProgressPercentage(100);\n        this.$progressBar.addClass('pending');\n\n        // Reset all the counters\n        this.setItemCount(1);\n        this.setProcessedItemCount(0);\n        this.$progressBarStatus.html('');\n\n        if (this._displaySteps) {\n            this.$progressBar.addClass('has-status');\n        }\n    },\n\n    /**\n     * Fade to invisible, hide it using a class and reset opacity to visible\n     */\n    hideProgressBar: function() {\n        this.$progressBar.fadeTo('fast', 0.01, () => {\n            this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n        this.$progressBarStatus.fadeTo('fast', 0.01, () => {\n            this.$progressBarStatus.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n    },\n\n    showProgressBar: function() {\n        this.$progressBar.removeClass('hidden');\n        this.$progressBarStatus.removeClass('hidden');\n    },\n\n    setItemCount: function(count) {\n        this._itemCount = count;\n    },\n\n    incrementItemCount: function(count) {\n        this._itemCount += count;\n    },\n\n    setProcessedItemCount: function(count) {\n        this._processedItemCount = count;\n    },\n\n    incrementProcessedItemCount: function(count) {\n        this._processedItemCount += count;\n    },\n\n    updateProgressBar: function() {\n        // Only fools would allow accidental division by zero.\n        this._itemCount = Math.max(this._itemCount, 1);\n\n        var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n        this.setProgressPercentage(width);\n\n        if (this._displaySteps) {\n            this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n        }\n    },\n\n    setProgressPercentage: function(percentage, animate) {\n        if (percentage === 0) {\n            this.$progressBar.addClass('pending');\n        } else {\n            this.$progressBar.removeClass('pending');\n\n            if (animate) {\n                this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n            } else {\n                this.$innerProgressBar.velocity('stop').width(percentage + '%');\n            }\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, this._handleBatchPromptSelection.bind(this), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            } else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        } else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', () => {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        });\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n\n(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n\n/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', this._handleResize.bind(this));\n        this.addListener(this.$container, 'tapstart', this._handleTapStart.bind(this));\n        this.addListener(Garnish.$bod, 'tapmove', this._handleTapMove.bind(this));\n        this.addListener(Garnish.$bod, 'tapend', this._handleTapEnd.bind(this));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout(() => {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        } else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (((this.$graduations.width() / 2) + (position * -1)) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n\n(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.Slideout = Garnish.Base.extend({\n        $outerContainer: null,\n        $container: null,\n        $shade: null,\n        isOpen: false,\n\n        init: function(contents, settings) {\n            this.setSettings(settings, Craft.Slideout.defaults);\n\n            if (!Garnish.isMobileBrowser()) {\n                this.$shade = $('<div class=\"slideout-shade\"/>')\n                    .appendTo(Garnish.$bod);\n\n                if (this.settings.closeOnShadeClick) {\n                    this.addListener(this.$shade, 'click', ev => {\n                        ev.stopPropagation();\n                        this.close();\n                    });\n                }\n            }\n\n            this.$outerContainer = $('<div/>', {class: 'slideout-container hidden'});\n            this.$container = $(`<${this.settings.containerElement}/>`, this.settings.containerAttributes)\n                .addClass('slideout')\n                .append(contents)\n                .data('slideout', this)\n                .appendTo(this.$outerContainer);\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.addClass('so-mobile');\n            }\n\n            Craft.trapFocusWithin(this.$container);\n\n            if (this.settings.autoOpen) {\n                this.open();\n            }\n        },\n\n        open: function() {\n            if (this.isOpen) {\n                return;\n            }\n\n            this._cancelTransitionListeners();\n\n            // Move the shade + container to the end of <body> so they get the highest sub-z-indexes\n            if (this.$shade) {\n                this.$shade\n                    .appendTo(Garnish.$bod)\n                    .show();\n            }\n\n            this.$outerContainer\n                .appendTo(Garnish.$bod)\n                .removeClass('hidden');\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.css('top', '100vh');\n            } else {\n                this.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n            }\n\n            this.$container.one('transitionend.slideout', () => {\n                Craft.setFocusWithin(this.$container);\n            });\n\n            if (this.$shade) {\n                this.$shade[0].offsetWidth;\n                this.$shade.addClass('so-visible');\n            }\n\n            this.$container[0].offsetWidth;\n            Craft.Slideout.addPanel(this);\n\n            this.enable();\n            Garnish.shortcutManager.addLayer();\n\n            if (this.settings.closeOnEsc) {\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n                    this.close();\n                });\n            }\n\n            this.isOpen = true;\n            this.trigger('open');\n        },\n\n        close: function() {\n            if (!this.isOpen) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n            this.disable();\n            this.isOpen = false;\n\n            this._cancelTransitionListeners();\n\n            if (this.$shade) {\n                this.removeListener(this.$shade, 'click');\n                this.$shade\n                    .removeClass('so-visible')\n                    .one('transitionend.slideout', () => {\n                        this.$shade.hide();\n                    });\n            }\n\n            Craft.Slideout.removePanel(this);\n            Garnish.shortcutManager.removeLayer();\n            this.$container.one('transitionend.slideout', () => {\n                this.$outerContainer.addClass('hidden');\n                this.trigger('close');\n            });\n        },\n\n        _cancelTransitionListeners: function() {\n            if (this.$shade) {\n                this.$shade.off('transitionend.slideout');\n            }\n\n            this.$container.off('transitionend.slideout');\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$shade) {\n                this.$shade.remove();\n                this.$shade = null;\n            }\n\n            this.$outerContainer.remove();\n            this.$outerContainer = null;\n            this.$container = null;\n\n            this.base();\n        },\n    }, {\n        defaults: {\n            containerElement: 'div',\n            containerAttributes: {},\n            autoOpen: true,\n            closeOnEsc: true,\n            closeOnShadeClick: true,\n        },\n        openPanels: [],\n        addPanel: function(panel) {\n            Craft.Slideout.openPanels.unshift(panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', 0);\n            } else {\n                Craft.Slideout.updateStyles();\n            }\n        },\n        removePanel: function(panel) {\n            Craft.Slideout.openPanels = Craft.Slideout.openPanels.filter(m => m !== panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', '100vh');\n            } else {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n                Craft.Slideout.updateStyles();\n            }\n        },\n        updateStyles: function() {\n            const totalPanels = Craft.Slideout.openPanels.length;\n            Craft.Slideout.openPanels.forEach((panel, i) => {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', `${50 * ((totalPanels - i) / totalPanels)}vw`);\n            });\n\n            if (totalPanels !== 0) {\n                Garnish.$bod.addClass('no-scroll');\n            } else {\n                Garnish.$bod.removeClass('no-scroll');\n            }\n        },\n    });\n})(jQuery);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n        // Remove inner-word punctuation\n        sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        if (!Craft.allowUppercaseInSlug) {\n            sourceVal = sourceVal.toLowerCase();\n        }\n\n        if (Craft.limitAutoSlugsToAscii) {\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n        }\n\n        // Get the \"words\". Split on anything that is not alphanumeric.\n        // Reference: http://www.regular-expressions.info/unicode.html\n        var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n        if (words.length) {\n            return words.join(Craft.slugWordSeparator);\n        } else {\n            return '';\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend({\n    id: null,\n\n    $container: null,\n    state: null,\n    structureDrag: null,\n\n    /**\n     * Init\n     */\n    init: function(id, container, settings) {\n        this.id = id;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Structure.defaults);\n\n        // Is this already a structure?\n        if (this.$container.data('structure')) {\n            Garnish.log('Double-instantiating a structure on an element');\n            this.$container.data('structure').destroy();\n        }\n\n        this.$container.data('structure', this);\n\n        this.state = {};\n\n        if (this.settings.storageKey) {\n            $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n        }\n\n        if (typeof this.state.collapsedElementIds === 'undefined') {\n            this.state.collapsedElementIds = [];\n        }\n\n        var $parents = this.$container.find('ul').prev('.row');\n\n        for (var i = 0; i < $parents.length; i++) {\n            var $row = $($parents[i]),\n                $li = $row.parent(),\n                $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n            if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                $li.addClass('collapsed');\n            }\n\n            this.initToggle($toggle);\n        }\n\n        if (this.settings.sortable) {\n            this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n        }\n\n        if (this.settings.newChildUrl) {\n            this.initNewChildMenus(this.$container.find('.add'));\n        }\n    },\n\n    initToggle: function($toggle) {\n        $toggle.on('click', ev => {\n            var $li = $(ev.currentTarget).closest('li'),\n                elementId = $li.children('.row').find('.element:first').data('id'),\n                viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n            if ($li.hasClass('collapsed')) {\n                $li.removeClass('collapsed');\n\n                if (viewStateKey !== -1) {\n                    this.state.collapsedElementIds.splice(viewStateKey, 1);\n                }\n            } else {\n                $li.addClass('collapsed');\n\n                if (viewStateKey === -1) {\n                    this.state.collapsedElementIds.push(elementId);\n                }\n            }\n\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.state);\n            }\n        });\n    },\n\n    initNewChildMenus: function($addBtns) {\n        this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n    },\n\n    onNewChildMenuClick: function(ev) {\n        var $btn = $(ev.currentTarget);\n\n        if (!$btn.data('menubtn')) {\n            var elementId = $btn.parent().children('.element').data('id'),\n                newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n            $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n            var menuBtn = new Garnish.MenuBtn($btn);\n            menuBtn.showMenu();\n        }\n    },\n\n    getIndent: function(level) {\n        return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n    },\n\n    addElement: function($element) {\n        var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n            $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n        $row.append($element);\n\n        if (this.settings.sortable) {\n            $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n            this.structureDrag.addItems($li);\n        }\n\n        if (this.settings.newChildUrl) {\n            var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n            this.initNewChildMenus($addBtn);\n        }\n\n        $row.css('margin-bottom', -30);\n        $row.velocity({'margin-bottom': 0}, 'fast');\n    },\n\n    removeElement: function($element) {\n        var $li = $element.parent().parent();\n\n        if (this.settings.sortable) {\n            this.structureDrag.removeItems($li);\n        }\n\n        var $parentUl;\n\n        if (!$li.siblings().length) {\n            $parentUl = $li.parent();\n        }\n\n        $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', () => {\n            $li.remove();\n\n            if (typeof $parentUl !== 'undefined') {\n                this._removeUl($parentUl);\n            }\n        });\n    },\n\n    _removeUl: function($ul) {\n        $ul.siblings('.row').children('.toggle').remove();\n        $ul.remove();\n    }\n}, {\n    baseIndent: 8,\n    nestedIndent: 35,\n\n    defaults: {\n        storageKey: null,\n        sortable: false,\n        newChildUrl: null,\n        maxLevels: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend({\n    structure: null,\n    maxLevels: null,\n    draggeeLevel: null,\n\n    $helperLi: null,\n    $targets: null,\n    draggeeHeight: null,\n\n    init: function(structure, maxLevels) {\n        this.structure = structure;\n        this.maxLevels = maxLevels;\n\n        this.$insertion = $('<li class=\"draginsertion\"/>');\n\n        var $items = this.structure.$container.find('li');\n\n        this.base($items, {\n            handle: '.element:first, .move:first',\n            helper: this.getHelper.bind(this)\n        });\n    },\n\n    getHelper: function($helper) {\n        this.$helperLi = $helper;\n        var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n        $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n        $helper.find('.move').removeAttr('title');\n        return $ul;\n    },\n\n    onDragStart: function() {\n        this.$targets = $();\n\n        // Recursively find each of the targets, in the order they appear to be in\n        this.findTargets(this.structure.$container);\n\n        // How deep does the rabbit hole go?\n        this.draggeeLevel = 0;\n        var $level = this.$draggee;\n        do {\n            this.draggeeLevel++;\n            $level = $level.find('> ul > li');\n        } while ($level.length);\n\n        // Collapse the draggee\n        this.draggeeHeight = this.$draggee.height();\n        this.$draggee.velocity({\n            height: 0\n        }, 'fast', () => {\n            this.$draggee.addClass('hidden');\n        });\n        this.base();\n\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.cancelDrag();\n            }\n        });\n    },\n\n    findTargets: function($ul) {\n        var $lis = $ul.children().not(this.$draggee);\n\n        for (var i = 0; i < $lis.length; i++) {\n            var $li = $($lis[i]);\n            this.$targets = this.$targets.add($li.children('.row'));\n\n            if (!$li.hasClass('collapsed')) {\n                this.findTargets($li.children('ul'));\n            }\n        }\n    },\n\n    onDrag: function() {\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n            this.$insertion.remove();\n        }\n\n        // First let's find the closest target\n        this._.$closestTarget = null;\n        this._.closestTargetPos = null;\n        this._.closestTargetYDiff = null;\n        this._.closestTargetOffset = null;\n        this._.closestTargetHeight = null;\n\n        for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n            this._.$target = $(this.$targets[this._.i]);\n            this._.targetOffset = this._.$target.offset();\n            this._.targetHeight = this._.$target.outerHeight();\n            this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n            this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n            if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                this._.$closestTarget = this._.$target;\n                this._.closestTargetPos = this._.i;\n                this._.closestTargetYDiff = this._.targetYDiff;\n                this._.closestTargetOffset = this._.targetOffset;\n                this._.closestTargetHeight = this._.targetHeight;\n            } else {\n                // Getting colder\n                break;\n            }\n        }\n\n        if (!this._.$closestTarget) {\n            return;\n        }\n\n        // Are we hovering above the first row?\n        if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n            this.$insertion.prependTo(this.structure.$container);\n        } else {\n            this._.$closestTargetLi = this._.$closestTarget.parent();\n            this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n            // Is there a next row?\n            if (this._.closestTargetPos < this.$targets.length - 1) {\n                this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n            } else {\n                this._.$nextTargetLi = null;\n                this._.nextTargetLevel = null;\n            }\n\n            // Are we hovering between this row and the next one?\n            this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n            /**\n             * Scenario 1: Both rows have the same level.\n             *\n             *     * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                if (this._.hoveringBetweenRows) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                        // Position the insertion after the closest target\n                        this.$insertion.insertAfter(this._.$closestTargetLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n\n            /**\n             * Scenario 2: Next row is a child of this one.\n             *\n             *     * Row 1\n             *     ----------------------\n             *         * Row 2\n             */\n\n            else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                    if (this._.hoveringBetweenRows) {\n                        // Position the insertion as the first child of the closest target\n                        this.$insertion.insertBefore(this._.$nextTargetLi);\n                    } else {\n                        this._.$closestTarget.addClass('draghover');\n                        this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                    }\n                }\n            }\n\n            /**\n             * Scenario 3: Next row is a child of a parent node, or there is no next row.\n             *\n             *         * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            else {\n                if (this._.hoveringBetweenRows) {\n                    // Determine which <li> to position the insertion after\n                    this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                    if (Craft.orientation === 'rtl') {\n                        this._.draggeeX += this.$helperLi.width();\n                    }\n\n                    this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                    this._.$closestParentLi = null;\n                    this._.closestParentLiXDiff = null;\n                    this._.closestParentLevel = null;\n\n                    for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                        this._.$parentLi = $(this._.$parentLis[this._.i]);\n                        this._.parentLiX = this._.$parentLi.offset().left;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.parentLiX += this._.$parentLi.width();\n                        }\n\n                        this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                        this._.parentLevel = this._.$parentLi.data('level');\n\n                        if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                            !this._.$closestParentLi || (\n                                this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                            )\n                        )) {\n                            this._.$closestParentLi = this._.$parentLi;\n                            this._.closestParentLiXDiff = this._.parentLiXDiff;\n                            this._.closestParentLevel = this._.parentLevel;\n                        }\n                    }\n\n                    if (this._.$closestParentLi) {\n                        this.$insertion.insertAfter(this._.$closestParentLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n        }\n    },\n\n    cancelDrag: function() {\n        this.$insertion.remove();\n\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n        }\n\n        this.onMouseUp();\n    },\n\n    onDragStop: function() {\n        // Are we repositioning the draggee?\n        if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n            var $draggeeParent,\n                moved;\n\n            // Are we about to leave the draggee's original parent childless?\n            if (!this.$draggee.siblings().length) {\n                $draggeeParent = this.$draggee.parent();\n            }\n\n            if (this.$insertion.parent().length) {\n                // Make sure the insertion isn't right next to the draggee\n                var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                    this.$insertion.replaceWith(this.$draggee);\n                    moved = true;\n                } else {\n                    this.$insertion.remove();\n                    moved = false;\n                }\n            } else {\n                var $ul = this._.$closestTargetLi.children('ul');\n\n                // Make sure this is a different parent than the draggee's\n                if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                    if (!$ul.length) {\n                        var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                        this.structure.initToggle($toggle);\n\n                        $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                    } else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                        this._.$closestTarget.children('.toggle').trigger('click');\n                    }\n\n                    this.$draggee.appendTo($ul);\n                    moved = true;\n                } else {\n                    moved = false;\n                }\n            }\n\n            // Remove the class either way\n            this._.$closestTarget.removeClass('draghover');\n\n            if (moved) {\n                // Now deal with the now-childless parent\n                if ($draggeeParent) {\n                    this.structure._removeUl($draggeeParent);\n                }\n\n                // Has the level changed?\n                var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                var animateCss;\n\n                if (newLevel != this.$draggee.data('level')) {\n                    // Correct the helper's padding if moving to/from level 1\n                    if (this.$draggee.data('level') == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = 38;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    } else if (newLevel == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    }\n\n                    this.setLevel(this.$draggee, newLevel);\n                }\n\n                // Make it real\n                var $element = this.$draggee.children('.row').children('.element');\n\n                var data = {\n                    structureId: this.structure.id,\n                    elementId: $element.data('id'),\n                    siteId: $element.data('site-id'),\n                    prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                    parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                };\n\n                Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                    }\n                });\n            }\n        }\n\n        // Animate things back into place\n        this.$draggee.velocity('stop').removeClass('hidden').velocity({\n            height: this.draggeeHeight\n        }, 'fast', () => {\n            this.$draggee.css('height', 'auto');\n        });\n\n        this.returnHelpersToDraggees();\n\n        this.base();\n    },\n\n    setLevel: function($li, level) {\n        $li.data('level', level);\n\n        var indent = this.structure.getIndent(level);\n\n        var css = {};\n        css['margin-' + Craft.left] = '-' + indent + 'px';\n        css['padding-' + Craft.left] = indent + 'px';\n        this.$draggee.children('.row').css(css);\n\n        var $childLis = $li.children('ul').children();\n\n        for (var i = 0; i < $childLis.length; i++) {\n            this.setLevel($($childLis[i]), level + 1);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n    tableView: null,\n    structureId: null,\n    maxLevels: null,\n\n    _basePadding: null,\n    _helperMargin: null,\n\n    _$firstRowCells: null,\n    _$titleHelperCell: null,\n\n    _titleHelperCellOuterWidth: null,\n\n    _ancestors: null,\n    _updateAncestorsFrame: null,\n\n    _draggeeLevel: null,\n    _draggeeLevelDelta: null,\n    draggingLastElements: null,\n    _loadingDraggeeLevelDelta: false,\n\n    _targetLevel: null,\n    _targetLevelBounds: null,\n\n    _positionChanged: null,\n\n    /**\n     * Constructor\n     */\n    init: function(tableView, $elements, settings) {\n        this.tableView = tableView;\n        this.structureId = this.tableView.$table.data('structure-id');\n        this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n        this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n        this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n        settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n            handle: '.move',\n            collapseDraggees: true,\n            singleHelper: true,\n            helperSpacingY: 2,\n            magnetStrength: 4,\n            helper: this.getHelper.bind(this),\n            helperLagBase: 1.5,\n            axis: Garnish.Y_AXIS\n        });\n\n        this.base($elements, settings);\n    },\n\n    /**\n     * Returns the draggee rows (including any descendent rows).\n     */\n    findDraggee: function() {\n        this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n        this._draggeeLevelDelta = 0;\n\n        var $draggee = $(this.$targetItem),\n            $nextRow = this.$targetItem.next();\n\n        while ($nextRow.length) {\n            // See if this row is a descendant of the draggee\n            var nextRowLevel = $nextRow.data('level');\n\n            if (nextRowLevel <= this._draggeeLevel) {\n                break;\n            }\n\n            // Is this the deepest descendant we've seen so far?\n            var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n            if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                this._draggeeLevelDelta = nextRowLevelDelta;\n            }\n\n            // Add it and prep the next row\n            $draggee = $draggee.add($nextRow);\n            $nextRow = $nextRow.next();\n        }\n\n        // Are we dragging the last elements on the page?\n        this.draggingLastElements = !$nextRow.length;\n\n        // Do we have a maxLevels to enforce,\n        // and does it look like this draggee has descendants we don't know about yet?\n        if (\n            this.maxLevels &&\n            this.draggingLastElements &&\n            this.tableView.getMorePending()\n        ) {\n            // Only way to know the true descendant level delta is to ask PHP\n            this._loadingDraggeeLevelDelta = true;\n\n            var data = this._getAjaxBaseData(this.$targetItem);\n\n            Craft.postActionRequest('structures/get-element-level-delta', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this._loadingDraggeeLevelDelta = false;\n\n                    if (this.dragging) {\n                        this._draggeeLevelDelta = response.delta;\n                        this.drag(false);\n                    }\n                }\n            });\n        }\n\n        return $draggee;\n    },\n\n    /**\n     * Returns the drag helper.\n     */\n    getHelper: function($helperRow) {\n        var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n            $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n            $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the column widths\n        this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n        var $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            var $helperCell = $($helperCells[i]);\n\n            // Skip the checkbox cell\n            if ($helperCell.hasClass('checkbox-cell')) {\n                $helperCell.remove();\n                continue;\n            }\n\n            // Hard-set the cell widths\n            var $firstRowCell = $(this._$firstRowCells[i]);\n            var width = $firstRowCell[0].getBoundingClientRect().width;\n\n            $firstRowCell.css('width', width + 'px');\n            $helperCell.css('width', width + 'px');\n\n            // Is this the title cell?\n            if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                this._$titleHelperCell = $helperCell;\n\n                var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                this._titleHelperCellOuterWidth = width;\n\n                $helperCell.css('padding-' + Craft.left, this._basePadding);\n            }\n        }\n\n        return $outerContainer;\n    },\n\n    /**\n     * Returns whether the draggee can be inserted before a given item.\n     */\n    canInsertBefore: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item.prev(), $item) !== false);\n    },\n\n    /**\n     * Returns whether the draggee can be inserted after a given item.\n     */\n    canInsertAfter: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item, $item.next()) !== false);\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        // Get the initial set of ancestors, before the item gets moved\n        this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n        // Set the initial target level bounds\n        this._setTargetLevelBounds();\n\n        // Check to see if we should load more elements now\n        this.tableView.maybeLoadMore();\n\n        this.base();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.base();\n        this._updateIndent();\n    },\n\n    /**\n     * On Insertion Point Change\n     */\n    onInsertionPointChange: function() {\n        this._setTargetLevelBounds();\n        this._updateAncestorsBeforeRepaint();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this._positionChanged = false;\n        this.base();\n\n        // Update the draggee's padding if the position just changed\n        // ---------------------------------------------------------------------\n\n        if (this._targetLevel != this._draggeeLevel) {\n            var levelDiff = this._targetLevel - this._draggeeLevel;\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                var $draggee = $(this.$draggee[i]),\n                    oldLevel = $draggee.data('level'),\n                    newLevel = oldLevel + levelDiff,\n                    padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                $draggee.data('level', newLevel);\n                $draggee.find('.element').data('level', newLevel);\n                $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n            }\n\n            this._positionChanged = true;\n        }\n\n        // Keep in mind this could have also been set by onSortChange()\n        if (this._positionChanged) {\n            // Tell the server about the new position\n            // -----------------------------------------------------------------\n\n            var data = this._getAjaxBaseData(this.$draggee);\n\n            // Find the previous sibling/parent, if there is one\n            var $prevRow = this.$draggee.first().prev();\n\n            while ($prevRow.length) {\n                var prevRowLevel = $prevRow.data('level');\n\n                if (prevRowLevel == this._targetLevel) {\n                    data.prevId = $prevRow.data('id');\n                    break;\n                }\n\n                if (prevRowLevel < this._targetLevel) {\n                    data.parentId = $prevRow.data('id');\n\n                    // Is this row collapsed?\n                    var $toggle = $prevRow.find('> th > .toggle');\n\n                    if (!$toggle.hasClass('expanded')) {\n                        // Make it look expanded\n                        $toggle.addClass('expanded');\n\n                        // Add a temporary row\n                        var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                        // Remove the target item\n                        if (this.tableView.elementSelect) {\n                            this.tableView.elementSelect.removeItems(this.$targetItem);\n                        }\n\n                        this.removeItems(this.$targetItem);\n                        this.$targetItem.remove();\n                        this.tableView._totalVisible--;\n                    }\n\n                    break;\n                }\n\n                $prevRow = $prevRow.prev();\n            }\n\n            Craft.postActionRequest('structures/move-element', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    if (!response.success) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        this.tableView.elementIndex.updateElements();\n                        return;\n                    }\n                    Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                    this.onPositionChange();\n\n                    // Were we waiting on this to complete so we can expand the new parent?\n                    if ($spinnerRow && $spinnerRow.parent().length) {\n                        $spinnerRow.remove();\n                        this.tableView._expandElement($toggle, true);\n                    }\n\n                    // See if we should run any pending tasks\n                    Craft.cp.runQueue();\n                }\n            });\n        }\n    },\n\n    onSortChange: function() {\n        if (this.tableView.elementSelect) {\n            this.tableView.elementSelect.resetItemOrder();\n        }\n\n        this._positionChanged = true;\n        this.base();\n    },\n\n    onPositionChange: function() {\n        Garnish.requestAnimationFrame(() => {\n            this.trigger('positionChange');\n            this.settings.onPositionChange();\n        });\n    },\n\n    onReturnHelpersToDraggees: function() {\n        this._$firstRowCells.css('width', '');\n\n        // If we were dragging the last elements on the page and ended up loading any additional elements in,\n        // there could be a gap between the last draggee item and whatever now comes after it.\n        // So remove the post-draggee elements and possibly load up the next batch.\n        if (this.draggingLastElements && this.tableView.getMorePending()) {\n            // Update the element index's record of how many items are actually visible\n            this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n            var $postDraggeeItems = this.$draggee.last().nextAll();\n\n            if ($postDraggeeItems.length) {\n                this.removeItems($postDraggeeItems);\n                $postDraggeeItems.remove();\n                this.tableView.maybeLoadMore();\n            }\n        }\n\n        this.base();\n    },\n\n    /**\n     * Returns the min and max levels that the draggee could occupy between\n     * two given rows, or false if it’s not going to work out.\n     */\n    _getLevelBounds: function($prevRow, $nextRow) {\n        // Can't go any lower than the next row, if there is one\n        if ($nextRow && $nextRow.length) {\n            this._getLevelBounds._minLevel = $nextRow.data('level');\n        } else {\n            this._getLevelBounds._minLevel = 1;\n        }\n\n        // Can't go any higher than the previous row + 1\n        if ($prevRow && $prevRow.length) {\n            this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n        } else {\n            this._getLevelBounds._maxLevel = 1;\n        }\n\n        // Does this structure have a max level?\n        if (this.maxLevels) {\n            // Make sure it's going to fit at all here\n            if (\n                this._getLevelBounds._minLevel != 1 &&\n                this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n            ) {\n                return false;\n            }\n\n            // Limit the max level if we have to\n            if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                    this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                }\n            }\n        }\n\n        return {\n            min: this._getLevelBounds._minLevel,\n            max: this._getLevelBounds._maxLevel\n        };\n    },\n\n    /**\n     * Determines the min and max possible levels at the current draggee's position.\n     */\n    _setTargetLevelBounds: function() {\n        this._targetLevelBounds = this._getLevelBounds(\n            this.$draggee.first().prev(),\n            this.$draggee.last().next()\n        );\n    },\n\n    /**\n     * Determines the target level based on the current mouse position.\n     */\n    _updateIndent: function(forcePositionChange) {\n        // Figure out the target level\n        // ---------------------------------------------------------------------\n\n        // How far has the cursor moved?\n        this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n        // Flip that if this is RTL\n        if (Craft.orientation === 'rtl') {\n            this._updateIndent._mouseDist *= -1;\n        }\n\n        // What is that in indentation levels?\n        this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // Combine with the original level to get the new target level\n        this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n        // Contain it within our min/max levels\n        if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n            this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n            this._updateIndent._targetLevel = this._targetLevelBounds.min;\n        } else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n            this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n            this._updateIndent._targetLevel = this._targetLevelBounds.max;\n        }\n\n        // Has the target level changed?\n        if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n            // Target level is changing, so update the ancestors\n            this._updateAncestorsBeforeRepaint();\n        }\n\n        // Update the UI\n        // ---------------------------------------------------------------------\n\n        // How far away is the cursor from the exact target level distance?\n        this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // What's the magnet impact of that?\n        this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n        // Put it on a leash\n        if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n            this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n        }\n\n        // Apply the new margin/width\n        this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n        this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n        this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n    },\n\n    /**\n     * Returns the indent size for a given level\n     */\n    _getLevelIndent: function(level) {\n        return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n    },\n\n    /**\n     * Returns the base data that should be sent with StructureController Ajax requests.\n     */\n    _getAjaxBaseData: function($row) {\n        return {\n            structureId: this.structureId,\n            elementId: $row.data('id'),\n            siteId: $row.find('.element:first').data('site-id')\n        };\n    },\n\n    /**\n     * Returns a row's ancestor rows\n     */\n    _getAncestors: function($row, targetLevel) {\n        this._getAncestors._ancestors = [];\n\n        if (targetLevel != 0) {\n            this._getAncestors._level = targetLevel;\n            this._getAncestors._$prevRow = $row.prev();\n\n            while (this._getAncestors._$prevRow.length) {\n                if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                    this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                    this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                    // Did we just reach the top?\n                    if (this._getAncestors._level == 0) {\n                        break;\n                    }\n                }\n\n                this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n            }\n        }\n\n        return this._getAncestors._ancestors;\n    },\n\n    /**\n     * Prepares to have the ancestors updated before the screen is repainted.\n     */\n    _updateAncestorsBeforeRepaint: function() {\n        if (this._updateAncestorsFrame) {\n            Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n        }\n\n        this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestors.bind(this));\n    },\n\n    _updateAncestors: function() {\n        this._updateAncestorsFrame = null;\n\n        // Update the old ancestors\n        // -----------------------------------------------------------------\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n            // One less descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n            // Is it now childless?\n            if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                // Remove its toggle\n                this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n            }\n        }\n\n        // Update the new ancestors\n        // -----------------------------------------------------------------\n\n        this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n            // One more descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n            // Is this its first child?\n            if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                // Create its toggle\n                $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                    .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n            }\n        }\n\n        this._ancestors = this._updateAncestors._newAncestors;\n\n        delete this._updateAncestors._i;\n        delete this._updateAncestors._$ancestor;\n        delete this._updateAncestors._newAncestors;\n    }\n}, {\n    HELPER_MARGIN: 0,\n    LEVEL_INDENT: 44,\n    MAX_GIVE: 22,\n\n    defaults: {\n        onPositionChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend({\n    $table: null,\n    $selectedSortHeader: null,\n\n    structureTableSort: null,\n\n    _totalVisiblePostStructureTableDraggee: null,\n    _morePendingPostStructureTableDraggee: false,\n\n    getElementContainer: function() {\n        // Save a reference to the table\n        this.$table = this.$container.find('table:first');\n        return this.$table.children('tbody:first');\n    },\n\n    afterInit: function() {\n        // Set the sort header\n        this.initTableHeaders();\n\n        // Create the Structure Table Sorter\n        if (\n            this.elementIndex.settings.context === 'index' &&\n            this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n            Garnish.hasAttr(this.$table, 'data-structure-id')\n        ) {\n            this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements());\n        } else {\n            this.structureTableSort = null;\n        }\n\n        // Handle expand/collapse toggles for Structures\n        if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n            this.addListener(this.$elementContainer, 'click', function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.hasClass('toggle')) {\n                    if (this._collapseElement($target) === false) {\n                        this._expandElement($target);\n                    }\n                }\n            });\n        }\n    },\n\n    initTableHeaders: function() {\n        var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n            $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n        for (var i = 0; i < $tableHeaders.length; i++) {\n            var $header = $tableHeaders.eq(i),\n                attr = $header.attr('data-attribute');\n\n            // Is this the selected sort attribute?\n            if (attr === selectedSortAttr) {\n                this.$selectedSortHeader = $header;\n                var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                $header\n                    .addClass('ordered ' + selectedSortDir)\n                    .on('click', this._handleSelectedSortHeaderClick.bind(this));\n            } else {\n                // Is this attribute sortable?\n                var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                if ($sortAttribute.length) {\n                    $header\n                        .addClass('orderable')\n                        .on('click', this._handleUnselectedSortHeaderClick.bind(this));\n                }\n            }\n        }\n    },\n\n    isVerticalList: function() {\n        return true;\n    },\n\n    getTotalVisible: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._totalVisiblePostStructureTableDraggee;\n        } else {\n            return this._totalVisible;\n        }\n    },\n\n    setTotalVisible: function(totalVisible) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._totalVisiblePostStructureTableDraggee = totalVisible;\n        } else {\n            this._totalVisible = totalVisible;\n        }\n    },\n\n    getMorePending: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._morePendingPostStructureTableDraggee;\n        } else {\n            return this._morePending;\n        }\n    },\n\n    setMorePending: function(morePending) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._morePendingPostStructureTableDraggee = morePending;\n        } else {\n            this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n        }\n    },\n\n    getLoadMoreParams: function() {\n        var params = this.base();\n\n        // If we are dragging the last elements on the page,\n        // tell the controller to only load elements positioned after the draggee.\n        if (this._isStructureTableDraggingLastElements()) {\n            params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n        }\n\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        this.base($newElements);\n\n        if (this.structureTableSort) {\n            this.structureTableSort.addItems($newElements);\n        }\n\n        Craft.cp.updateResponsiveTables();\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            params: {\n                includeTableAttributesForSource: this.elementIndex.sourceKey\n            },\n            onSaveElement: response => {\n                if (response.tableAttributes) {\n                    this._updateTableAttributes($element, response.tableAttributes);\n                }\n            },\n            elementIndex: this.elementIndex\n        });\n    },\n\n    _collapseElement: function($toggle, force) {\n        if (!force && !$toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.removeClass('expanded');\n\n        // Find and remove the descendant rows\n        var $row = $toggle.parent().parent(),\n            id = $row.data('id'),\n            level = $row.data('level'),\n            $nextRow = $row.next();\n\n        while ($nextRow.length) {\n            if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                if ($nextRow.data('level') <= level) {\n                    break;\n                }\n\n                if (this.elementSelect) {\n                    this.elementSelect.removeItems($nextRow);\n                }\n\n                if (this.structureTableSort) {\n                    this.structureTableSort.removeItems($nextRow);\n                }\n\n                this._totalVisible--;\n            }\n\n            var $nextNextRow = $nextRow.next();\n            $nextRow.remove();\n            $nextRow = $nextNextRow;\n        }\n\n        // Remember that this row should be collapsed\n        if (!this.elementIndex.instanceState.collapsedElementIds) {\n            this.elementIndex.instanceState.collapsedElementIds = [];\n        }\n\n        this.elementIndex.instanceState.collapsedElementIds.push(id);\n        this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n        // Bottom of the index might be viewable now\n        this.maybeLoadMore();\n    },\n\n    _expandElement: function($toggle, force) {\n        if (!force && $toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.addClass('expanded');\n\n        // Remove this element from our list of collapsed elements\n        if (this.elementIndex.instanceState.collapsedElementIds) {\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n            if (index !== -1) {\n                this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                // Add a temporary row\n                var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                // Load the nested elements\n                let data = $.extend(true, {}, this.settings.params);\n                data.criteria.descendantOf = id;\n\n                Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {data}).then(response => {\n                    // Do we even care about this anymore?\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n\n                    let $newElements = $(response.data.html);\n\n                    // Are there more descendants we didn't get in this batch?\n                    let totalVisible = (this._totalVisible + $newElements.length);\n                    let morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                    if (morePending) {\n                        // Remove all the elements after it\n                        let $nextRows = $spinnerRow.nextAll();\n\n                        if (this.elementSelect) {\n                            this.elementSelect.removeItems($nextRows);\n                        }\n\n                        if (this.structureTableSort) {\n                            this.structureTableSort.removeItems($nextRows);\n                        }\n\n                        $nextRows.remove();\n                        totalVisible -= $nextRows.length;\n                    } else {\n                        // Maintain the current 'more' status\n                        morePending = this._morePending;\n                    }\n\n                    $spinnerRow.replaceWith($newElements);\n                    this.thumbLoader.load($newElements);\n\n                    if (this.elementIndex.actions || this.settings.selectable) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.addItems($newElements);\n                    }\n\n                    Craft.appendHeadHtml(response.data.headHtml);\n                    Craft.appendFootHtml(response.data.footHtml);\n                    Craft.cp.updateResponsiveTables();\n\n                    this.setTotalVisible(totalVisible);\n                    this.setMorePending(morePending);\n\n                    // Is there room to load more right now?\n                    this.maybeLoadMore();\n                }).catch(e => {\n                    Craft.cp.displayError();\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n                });\n            }\n        }\n    },\n\n    _createSpinnerRowAfter: function($row) {\n        return $(\n            '<tr data-spinnerrow>' +\n            '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n            '<div class=\"spinner\"/>' +\n            '</td>' +\n            '</tr>'\n        ).insertAfter($row);\n    },\n\n    _isStructureTableDraggingLastElements: function() {\n        return (\n            this.structureTableSort &&\n            this.structureTableSort.dragging &&\n            this.structureTableSort.draggingLastElements\n        );\n    },\n\n    _handleSelectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        // Reverse the sort direction\n        var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n            newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n        this.elementIndex.setSortDirection(newSortDir);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleUnselectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        var attr = $header.attr('data-attribute');\n\n        this.elementIndex.setSortAttribute(attr);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleSortHeaderClick: function(ev, $header) {\n        if (this.$selectedSortHeader) {\n            this.$selectedSortHeader.removeClass('ordered asc desc');\n        }\n\n        $header.removeClass('orderable').addClass('ordered loading');\n        this.elementIndex.storeSortAttributeAndDirection();\n        this.elementIndex.updateElements();\n\n        // No need for two spinners\n        this.elementIndex.setIndexAvailable();\n    },\n\n    _updateTableAttributes: function($element, tableAttributes) {\n        var $tr = $element.closest('tr');\n\n        for (var attr in tableAttributes) {\n            if (!tableAttributes.hasOwnProperty(attr)) {\n                continue;\n            }\n\n            $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend({\n    searchTimeout: null,\n    searchMenu: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addTagInput: null,\n    $spinner: null,\n\n    _ignoreBlur: false,\n\n    init: function(settings) {\n        // Normalize the settings\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n        this.$addTagInput = this.$container.children('.add').children('.text');\n        this.$spinner = this.$addTagInput.next();\n\n        this.addListener(this.$addTagInput, 'input', () => {\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.searchForTags.bind(this), 500);\n        });\n\n        this.addListener(this.$addTagInput, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n            }\n\n            let $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options.filter('.hover'));\n                    }\n                    return;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                            if ($nextOption.length) {\n                                this.focusOption($nextOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(0));\n                        }\n                    }\n                    return;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                            if ($prevOption.length) {\n                                this.focusOption($prevOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                        }\n                    }\n                    return;\n                }\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'focus', function() {\n            if (this.searchMenu) {\n                this.searchMenu.show();\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'blur', function() {\n            if (this._ignoreBlur) {\n                this._ignoreBlur = false;\n                return;\n            }\n\n            setTimeout(() => {\n                if (this.searchMenu) {\n                    this.searchMenu.hide();\n                }\n            }, 1);\n        });\n    },\n\n    focusOption: function($option) {\n        this.searchMenu.$options.removeClass('hover');\n        $option.addClass('hover');\n        this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n    },\n\n    // No \"add\" button\n    getAddElementsBtn: $.noop,\n\n    getElementSortAxis: function() {\n        return null;\n    },\n\n    searchForTags: function() {\n        if (this.searchMenu) {\n            this.killSearchMenu();\n        }\n\n        var val = this.$addTagInput.val();\n\n        if (val) {\n            this.$spinner.removeClass('hidden');\n\n            var excludeIds = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                var id = $(this.$elements[i]).data('id');\n\n                if (id) {\n                    excludeIds.push(id);\n                }\n            }\n\n            if (this.settings.sourceElementId) {\n                excludeIds.push(this.settings.sourceElementId);\n            }\n\n            var data = {\n                search: this.$addTagInput.val(),\n                tagGroupId: this.settings.tagGroupId,\n                excludeIds: excludeIds\n            };\n\n            Craft.postActionRequest('tags/search-for-tags', data, (response, textStatus) => {\n                // Just in case\n                if (this.searchMenu) {\n                    this.killSearchMenu();\n                }\n\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                        $ul = $('<ul/>').appendTo($menu);\n\n                    var $li;\n\n                    for (var i = 0; i < response.tags.length; i++) {\n                        $li = $('<li/>')\n                            .appendTo($ul);\n\n                        $('<a data-icon=\"tag\"/>')\n                            .appendTo($li)\n                            .text(response.tags[i].title)\n                            .data('id', response.tags[i].id)\n                            .addClass(response.tags[i].exclude ? 'disabled' : '');\n                    }\n\n                    if (!response.exactMatch) {\n                        $li = $('<li/>').appendTo($ul);\n                        $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                    }\n\n                    $ul.find('a:not(.disabled):first').addClass('hover');\n\n                    this.searchMenu = new Garnish.Menu($menu, {\n                        attachToElement: this.$addTagInput,\n                        onOptionSelect: this.selectTag.bind(this)\n                    });\n\n                    this.addListener($menu, 'mousedown', () => {\n                        this._ignoreBlur = true;\n                    });\n\n                    this.searchMenu.show();\n                }\n            });\n        } else {\n            this.$spinner.addClass('hidden');\n        }\n    },\n\n    selectTag: function(option) {\n        var $option = $(option);\n\n        if ($option.hasClass('disabled')) {\n            return;\n        }\n\n        var id = $option.data('id');\n        var title = $option.text();\n\n        var $element = $('<div/>', {\n            'class': 'element small removable',\n            'data-id': id,\n            'data-site-id': this.settings.targetSiteId,\n            'data-label': title,\n            'data-editable': '1'\n        }).appendTo(this.$elementsContainer);\n\n        var $input = $('<input/>', {\n            'type': 'hidden',\n            'name': this.settings.name + '[]',\n            'value': id\n        }).appendTo($element);\n\n        $('<a/>', {\n            'class': 'delete icon',\n            'title': Craft.t('app', 'Remove')\n        }).appendTo($element);\n\n        var $titleContainer = $('<div/>', {\n            'class': 'label'\n        }).appendTo($element);\n\n        $('<span/>', {\n            'class': 'title',\n            text: title\n        }).appendTo($titleContainer);\n\n        var margin = -($element.outerWidth() + 10);\n        this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addTagInput.velocity(animateCss, 'fast');\n\n        this.$elements = this.$elements.add($element);\n\n        this.addElements($element);\n\n        this.killSearchMenu();\n        this.$addTagInput.val('');\n        this.$addTagInput.trigger('focus');\n\n        if (!id) {\n            // We need to create the tag first\n            $element.addClass('loading disabled');\n\n            var data = {\n                groupId: this.settings.tagGroupId,\n                title: title\n            };\n\n            Craft.postActionRequest('tags/create-tag', data, (response, textStatus) => {\n                if (textStatus === 'success' && response.success) {\n                    $element.attr('data-id', response.id);\n                    $input.val(response.id);\n\n                    $element.removeClass('loading disabled');\n                } else {\n                    this.removeElement($element);\n\n                    if (textStatus === 'success') {\n                        // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                }\n            });\n        }\n    },\n\n    killSearchMenu: function() {\n        this.searchMenu.hide();\n        this.searchMenu.destroy();\n        this.searchMenu = null;\n    }\n}, {\n    defaults: {\n        tagGroupId: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend({\n    getElementContainer: function() {\n        return this.$container.children('ul');\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            config = $.extend({\n                autocomplete: false,\n            }, config);\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: typeof config.autocomplete === 'boolean' ? (config.autocomplete ? 'on' : 'off') : config.autocomplete,\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            } else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n                'aria-label': Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html': option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                html: config.label,\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            } else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: allChecked || (config.values || []).includes(option.value),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            config.fieldset = true;\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<button/>', {\n                'type': 'button',\n                'class': 'lightswitch',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'checkbox',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            const id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            const containerId = config.containerId || id + '-container';\n            const name = config.name || null;\n            const value = config.value || null;\n            const small = config.small || false;\n            const autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            const disabled = config.disabled || false;\n\n            const $container = $('<div/>', {\n                id: containerId,\n                class: 'flex color-container'\n            });\n\n            const $colorPreviewContainer = $('<div/>', {\n                class: 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            const $colorPreview = $('<div/>', {\n                class: 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            const $inputContainer = $('<div/>', {\n                class: 'color-input-container',\n            })\n                .append(\n                    $('<div/>', {\n                        class: 'color-hex-indicator light code',\n                        'aria-hidden': 'true',\n                        text: '#',\n                    })\n                )\n                .appendTo($container);\n\n            const $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: Craft.ltrim(value, '#'),\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled,\n                'aria-label': Craft.t('app', 'Color hex value'),\n            }).appendTo($inputContainer);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            config.fieldset = true;o\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000)) + '-date';\n            var name = config.name || null;\n            var inputName = name ? name + '[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate: null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000)) + '-time';\n            var name = config.name || null;\n            var inputName = name ? name + '[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours() * 3600 + value.getMinutes() * 60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $(config.fieldset ? '<fieldset/>' : '<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $(config.fieldset ? '<legend/>' : '<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-${config.fieldset ? 'legend' : 'label'}` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': !config.fieldset && config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend({\n    uploader: null,\n    allowedKinds: null,\n    $element: null,\n    settings: null,\n    _rejectedFiles: {},\n    _extensionList: null,\n    _totalFileCounter: 0,\n    _validFileCounter: 0,\n\n    init: function($element, settings) {\n        this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n        this.$element = $element;\n        this.allowedKinds = null;\n        this._extensionList = null;\n        this._totalFileCounter = 0;\n        this._validFileCounter = 0;\n\n        settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n        var events = settings.events;\n        delete settings.events;\n\n        if (settings.allowedKinds && settings.allowedKinds.length) {\n            if (typeof settings.allowedKinds === 'string') {\n                settings.allowedKinds = [settings.allowedKinds];\n            }\n\n            this.allowedKinds = settings.allowedKinds;\n            delete settings.allowedKinds;\n        }\n\n        settings.autoUpload = false;\n\n        this.uploader = this.$element.fileupload(settings);\n        for (var event in events) {\n            if (!events.hasOwnProperty(event)) {\n                continue;\n            }\n\n            this.uploader.on(event, events[event]);\n        }\n\n        this.settings = settings;\n\n        this.uploader.on('fileuploadadd', this.onFileAdd.bind(this));\n    },\n\n    /**\n     * Set uploader parameters.\n     */\n    setParams: function(paramObject) {\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        this.uploader.fileupload('option', {formData: paramObject});\n    },\n\n    /**\n     * Get the number of uploads in progress.\n     */\n    getInProgress: function() {\n        return this.uploader.fileupload('active');\n    },\n\n    /**\n     * Return true, if this is the last upload.\n     */\n    isLastUpload: function() {\n        // Processing the last file or not processing at all.\n        return this.getInProgress() < 2;\n    },\n\n    /**\n     * Called on file add.\n     */\n    onFileAdd: function(e, data) {\n        e.stopPropagation();\n\n        var validateExtension = false;\n\n        if (this.allowedKinds) {\n            if (!this._extensionList) {\n                this._createExtensionList();\n            }\n\n            validateExtension = true;\n        }\n\n        // Make sure that file API is there before relying on it\n        data.process().done(() => {\n            var file = data.files[0];\n            var pass = true;\n            if (validateExtension) {\n                var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                var fileExtension = matches[1];\n                if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                    pass = false;\n                    this._rejectedFiles.type.push('“' + file.name + '”');\n                }\n            }\n\n            if (file.size > this.settings.maxFileSize) {\n                this._rejectedFiles.size.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            // If the validation has passed for this file up to now, check if we're not hitting any limits\n            if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                this._rejectedFiles.limit.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            if (pass) {\n                this._validFileCounter++;\n                data.submit();\n            }\n\n            if (++this._totalFileCounter === data.originalFiles.length) {\n                this._totalFileCounter = 0;\n                this._validFileCounter = 0;\n                this.processErrorMessages();\n            }\n        });\n\n        return true;\n    },\n\n    /**\n     * Process error messages.\n     */\n    processErrorMessages: function() {\n        var str;\n\n        if (this._rejectedFiles.type.length) {\n            if (this._rejectedFiles.type.length === 1) {\n                str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            } else {\n                str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n            this._rejectedFiles.type = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.size.length) {\n            if (this._rejectedFiles.size.length === 1) {\n                str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n            this._rejectedFiles.size = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.limit.length) {\n            if (this._rejectedFiles.limit.length === 1) {\n                str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n            this._rejectedFiles.limit = [];\n            alert(str);\n        }\n    },\n\n    humanFileSize: function(bytes) {\n        var threshold = 1024;\n\n        if (bytes < threshold) {\n            return bytes + ' B';\n        }\n\n        var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        var u = -1;\n\n        do {\n            bytes = bytes / threshold;\n            ++u;\n        }\n        while (bytes >= threshold);\n\n        return bytes.toFixed(1) + ' ' + units[u];\n    },\n\n    _createExtensionList: function() {\n        this._extensionList = [];\n\n        for (var i = 0; i < this.allowedKinds.length; i++) {\n            var allowedKind = this.allowedKinds[i];\n\n            if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                    var ext = Craft.fileKinds[allowedKind].extensions[j];\n                    this._extensionList.push(ext);\n                }\n            }\n        }\n    },\n\n    destroy: function() {\n        this.$element.fileupload('destroy');\n        this.base();\n    }\n}, {\n    defaults: {\n        dropZone: null,\n        pasteZone: null,\n        fileInput: null,\n        sequentialUploads: true,\n        maxFileSize: Craft.maxUploadSize,\n        allowedKinds: null,\n        events: {},\n        canAddMoreFiles: null,\n        headers: {'Accept': 'application/json;q=0.9,*/*;q=0.8'},\n        paramName: 'assets-upload'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Make it lowercase\n        sourceVal = sourceVal.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        sourceVal = Craft.asciiString(sourceVal);\n\n        // Handle must start with a letter and end with a letter/number\n        sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n        sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n        // Get the \"words\"\n        var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n        var uriFormat = words.join(Craft.slugWordSeparator);\n\n        if (uriFormat && this.settings.suffix) {\n            uriFormat += this.settings.suffix;\n        }\n\n        return uriFormat;\n    }\n});\n\n})(jQuery);\n","/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function(html) {\n    return html.replace(rxhtmlTag, \"<$1></$2>\");\n};\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Groups an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        group: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.group() must be an array.';\n            }\n\n            let index = {};\n\n            return arr.reduce((grouped, obj, i) => {\n                const thisKey = typeof key === 'string' ? obj[key] : key(obj, i);\n                if (!index.hasOwnProperty(thisKey)) {\n                    index[thisKey] = [[], thisKey];\n                    grouped.push(index[thisKey]);\n                }\n                index[thisKey][0].push(obj);\n                return grouped;\n            }, []);\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    return (() => {\n                        let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                        if (format !== null && format !== 'integer') {\n                            throw `Message format 'number' is only supported for integer values.`;\n                        }\n                        let number = Craft.formatNumber(arg);\n                        let pos;\n                        if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                            number += `.${arg.substr(pos + 1)}`;\n                        }\n                        return number;\n                    })();\n                case 'none':\n                    return arg;\n                case 'select':\n                    return (() => {\n                        /* http://icu-project.org/apiref/icu4c/classicu_1_1SelectFormat.html\n                        selectStyle = (selector '{' message '}')+\n                        */\n                        if (typeof token[2] === 'undefined') {\n                            return false;\n                        }\n                        let select = this._tokenizePattern(token[2]);\n                        let c = select.length;\n                        let message = false;\n                        for (let i = 0; i + 1 < c; i++) {\n                            if (Garnish.isArray(select[i]) || !Garnish.isArray(select[i + 1])) {\n                                return false;\n                            }\n                            let selector = Craft.trim(select[i++]);\n                            if (message === false && selector === 'other' || selector == arg) {\n                                message = select[i].join(',');\n                            }\n                        }\n                        if (message === false) {\n                            return false;\n                        }\n                        return this.formatMessage(message, args);\n                    })();\n                case 'plural':\n                    return (() => {\n                        /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                        pluralStyle = [offsetValue] (selector '{' message '}')+\n                        offsetValue = \"offset:\" number\n                        selector = explicitValue | keyword\n                        explicitValue = '=' number  // adjacent, no white space in between\n                        keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                        message: see MessageFormat\n                        */\n                        if (typeof token[2] === 'undefined') {\n                            return false;\n                        }\n                        let plural = this._tokenizePattern(token[2]);\n                        const c = plural.length;\n                        let message = false;\n                        let offset = 0;\n                        for (let i = 0; i + 1 < c; i++) {\n                            if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                                return false;\n                            }\n                            let selector = Craft.trim(plural[i++]);\n                            let selectorChars = [...selector];\n\n                            if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                                let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                                if (pos === -1) {\n                                    throw 'Message pattern is invalid.';\n                                }\n                                offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                                selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                            }\n                            if (\n                              message === false &&\n                              selector === 'other' ||\n                              selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                              selector === 'one' && arg - offset === 1\n                            ) {\n                                message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                    return p.replace('#', arg - offset);\n                                }).join(',');\n                            }\n                        }\n                        if (message === false) {\n                            return false;\n                        }\n                        return this.formatMessage(message, args);\n                    })();\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} shift\n         * @param {boolean} alt\n         */\n        shortcutText: function (key, shift, alt) {\n            if (Craft.clientOs === 'Mac') {\n                return (alt ? '⌥' : '') + (shift ? '⇧' : '') + '⌘' + key;\n            }\n            return 'Ctrl+' + (alt ? 'Alt+' : '') + (shift ? 'Shift+' : '') + key;\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[^\\w]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n\n                // Get the latest headers\n                this._getApiHeaders(cancelToken).then(apiHeaders => {\n                    // Send the API request\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    // Force the API to process the Craft headers if this is the first API request\n                    if (!this._apiHeaders) {\n                        options.params.processCraftHeaders = 1;\n                    }\n\n                    if (Craft.httpProxy) {\n                        options.proxy = Craft.httpProxy;\n                    }\n\n                    axios.request(options).then((apiResponse) => {\n                        // Process the response headers\n                        this._processApiHeaders(apiResponse.headers, cancelToken).then(() => {\n                            // Finally return the API response data\n                            resolve(apiResponse.data);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        _getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    resolve(response.data);\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _processApiHeaders: function(headers, cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Have we already processed them?\n                if (this._apiHeaders) {\n                    resolve();\n                    return;\n                }\n\n                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                    data: {\n                        headers: headers,\n                    },\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    this._loadingApiHeaders = false;\n\n                    resolve();\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                    }\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _rejectApiRequests: function(reject, e) {\n            this._loadingApiHeaders = false;\n            reject(e);\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1](e);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = () => {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                };\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         * @param {function} [callback] Callback function that should be called whenever a new group of modified params has been found\n         * @param {object} [initialDeltaValues] Initial delta values. If undefined, `Craft.initialDeltaValues` will be used.\n         * @return {string}\n         */\n        findDeltaData: function(oldData, newData, deltaNames, callback, initialDeltaValues) {\n            // Make sure oldData and newData are always strings. This is important because further below String.split is called.\n            oldData = typeof oldData === 'string' ? oldData : '';\n            newData = typeof newData === 'string' ? newData : '';\n\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            if (typeof initialDeltaValues === 'undefined') {\n                initialDeltaValues = Craft.initialDeltaValues;\n            }\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, initialDeltaValues);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                    if (callback) {\n                        callback(deltaNames[n], groupedNewParams[deltaNames[n]]);\n                    }\n                }\n            }\n\n            return params.join('&');\n        },\n\n        /**\n         * @param {object} params\n         * @param {object} deltaNames\n         * @param {boolean} withRoot\n         * @param {boolean|object} initialValues\n         * @returns {{}}\n         * @private\n         */\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, initialValues) {\n            const grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            const encodeURIComponentExceptEqualChar = o => encodeURIComponent(o).replace('%3D', '=');\n\n            params = params.map(p => decodeURIComponent(p));\n\n            paramLoop: for (let p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (let n = deltaNames.length - 1; n >= 0; n--) {\n                    const paramName = params[p].substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(encodeURIComponentExceptEqualChar(params[p]));\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(encodeURIComponentExceptEqualChar(params[p]));\n                }\n            }\n\n            if (initialValues) {\n                for (let name in initialValues) {\n                    if (initialValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(initialValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return arr.includes(elem);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn:not([data-disclosure-trigger])', $container).menubtn();\n            $('[data-disclosure-trigger]', $container).disclosureMenu();\n            $('.datetimewrapper', $container).datetime();\n            $('.datewrapper > input[type=\"date\"], .timewrapper > input[type=\"time\"]', $container).datetimeinput();\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a', $container).each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n\n        /**\n         * Traps focus within a container, so when focus is tabbed out of it, it’s cycled back into it.\n         * @param {Object} container\n         */\n        trapFocusWithin: function(container) {\n            const $container = $(container);\n            $container.on('keydown.focus-trap', ev => {\n                // Tab key?\n                if (ev.keyCode === 9) {\n                    const $focusableElements = $container.find(':focusable');\n                    const index = $focusableElements.index(document.activeElement);\n                    if (index !== -1) {\n                        if (index === 0 && ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.last().focus();\n                        } else if (index === $focusableElements.length - 1 && !ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.first().focus();\n                        }\n                    }\n                }\n            });\n        },\n\n        /**\n         * Sets focus to the first focusable element within a container.\n         * @param {Object} container\n         */\n        setFocusWithin: function(container) {\n            $(container).find(':focusable:first').focus();\n        },\n    });\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: $.extend({\n                        customTrigger: $btn,\n                    }, $btn.data('event-data')),\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        disclosureMenu: function() {\n            return this.each(function() {\n                var $trigger = $(this);\n                var $disclosureId = $trigger.attr('aria-controls');\n\n                // Only instantiate element if there is a reference to disclosure content\n                if ($disclosureId) {\n                    var settings = {};\n\n                    new Garnish.DisclosureMenu($trigger, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                                'aria-label': Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('').trigger('input').trigger('change');\n                                    }\n                                    $btn.remove();\n                                    $inputs.first().filter('[type=\"text\"]').focus();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n\n        datetimeinput: function() {\n            return this.each(function() {\n                const $input = $(this);\n                const checkValue = () => {\n                    if ($input.val() === '') {\n                        $input.addClass('empty-value');\n                    } else {\n                        $input.removeClass('empty-value');\n                    }\n                };\n                $input.on('input', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n// Override Garnish.NiceText.charsLeftHtml() to be more accessible\nGarnish.NiceText.charsLeftHtml = charsLeft => {\n    return Craft.t('app', '<span class=\"visually-hidden\">Characters left:</span> {chars, number}', {\n        chars: charsLeft,\n    });\n};\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend({\n    $element: null,\n    elementId: null,\n    siteId: null,\n    deltaNames: null,\n    initialData: null,\n\n    $header: null,\n    $toolbar: null,\n    $tabContainer: null,\n    $editLink: null,\n    $sidebarBtn: null,\n    $loadSpinner: null,\n\n    $body: null,\n    $fieldsContainer: null,\n\n    $sidebar: null,\n\n    $footer: null,\n    $siteSelectContainer: null,\n    $siteSelect: null,\n    $siteSpinner: null,\n    $cancelBtn: null,\n    $saveBtn: null,\n    $saveSpinner: null,\n\n    slideout: null,\n    tabManager: null,\n    showingSidebar: false,\n\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    initialDeltaValues: null,\n\n    init: function(element, settings) {\n        // Param mapping\n        if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n            // (settings)\n            settings = element;\n            element = null;\n        }\n\n        this.$element = $(element);\n        this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n        // Header\n        this.$header = $('<header/>', {class: 'pane-header'});\n        this.$toolbar = $('<div/>', {class: 'ee-toolbar'}).appendTo(this.$header);\n        this.$tabContainer = $('<div/>', {class: 'pane-tabs'}).appendTo(this.$toolbar);\n        this.$loadSpinner = $('<div/>', {\n            class: 'spinner',\n            title: Craft.t('app', 'Loading'),\n            'aria-label': Craft.t('app', 'Loading'),\n        }).appendTo(this.$toolbar);\n        this.$editLink = $('<a/>', {\n            target: '_blank',\n            class: 'btn hidden',\n            title: Craft.t('app', 'Open the full edit page in a new tab'),\n            'aria-label': Craft.t('app', 'Open the full edit page in a new tab'),\n            'data-icon': 'external',\n        }).appendTo(this.$toolbar);\n        this.$sidebarBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn hidden sidebar-btn',\n            title: Craft.t('app', 'Show sidebar'),\n            'aria-label': Craft.t('app', 'Show sidebar'),\n            'data-icon': `sidebar-${Garnish.ltr ? 'right' : 'left'}`,\n        }).appendTo(this.$toolbar);\n\n        this.addListener(this.$sidebarBtn, 'click', ev => {\n            ev.preventDefault();\n            if (!this.showingSidebar) {\n                this.showSidebar();\n            } else {\n                this.hideSidebar();\n            }\n        });\n\n        // Body\n        this.$body = $('<div/>', {class: 'ee-body'});\n\n        // Fields\n        this.$fieldsContainer = $('<div/>', {class: 'fields'}).appendTo(this.$body);\n\n        // Sidebar\n        this.$sidebar = $('<div/>', {class: 'ee-sidebar hidden'}).appendTo(this.$body);\n        Craft.trapFocusWithin(this.$sidebar);\n\n        // Footer\n        this.$footer = $('<div/>', {class: 'ee-footer hidden'});\n        const $siteSelectOuterContainer = $('<div/>', {class: 'ee-site-select'}).appendTo(this.$footer);\n        this.$siteSelectContainer = $('<div/>', {class: 'select hidden'}).appendTo($siteSelectOuterContainer);\n        this.$siteSelect = $('<select/>').appendTo(this.$siteSelectContainer);\n        this.$siteSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo($siteSelectOuterContainer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footer);\n        this.$saveBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footer);\n        this.$saveSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo(this.$footer);\n\n        let $contents = this.$header.add(this.$body).add(this.$footer);\n\n        // Create the slideout\n        this.slideout = new Craft.Slideout($contents, {\n            containerElement: 'form',\n            containerAttributes: {\n                action: '',\n                method: 'post',\n                novalidate: '',\n                class: 'element-editor',\n            },\n            closeOnEsc: false,\n            closeOnShadeClick: false,\n        });\n        this.slideout.$container.data('elementEditor', this);\n        this.slideout.on('beforeClose', () => {\n            this.hideSidebar();\n        });\n        this.slideout.on('close', () => {\n            this.trigger('closeSlideout');\n            this.destroy();\n        });\n\n        // Register shortcuts & events\n        Garnish.shortcutManager.registerShortcut({\n            keyCode: Garnish.S_KEY,\n            ctrl: true,\n        }, () => {\n            this.saveElement();\n        });\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.$cancelBtn, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$shade, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$container, 'click', ev => {\n            const $target = $(event.target);\n\n            if (\n                this.showingSidebar &&\n                !$target.closest(this.$sidebarBtn).length &&\n                !$target.closest(this.$sidebar).length\n            ) {\n                this.hideSidebar();\n            }\n        });\n        this.addListener(this.slideout.$container, 'submit', ev => {\n            ev.preventDefault();\n            this.saveElement();\n        });\n        this.addListener(this.$siteSelect, 'change', 'switchSite');\n\n        this.load().then(() => {\n            this.onShowHud();\n            this.onCreateForm(this.$body);\n        });\n    },\n\n    setElementAttribute: function(name, value) {\n        if (!this.settings.attributes) {\n            this.settings.attributes = {};\n        }\n\n        if (value === null) {\n            delete this.settings.attributes[name];\n        } else {\n            this.settings.attributes[name] = value;\n        }\n    },\n\n    getBaseData: function() {\n        const data = $.extend({}, this.settings.params);\n\n        if (this.settings.siteId) {\n            data.siteId = this.settings.siteId;\n        } else if (this.$element && this.$element.data('site-id')) {\n            data.siteId = this.$element.data('site-id');\n        }\n\n        if (this.settings.elementId) {\n            data.elementId = this.settings.elementId;\n        } else if (this.$element && this.$element.data('id')) {\n            data.elementId = this.$element.data('id');\n        }\n\n        if (this.settings.elementType) {\n            data.elementType = this.settings.elementType;\n        }\n\n        if (this.settings.attributes) {\n            data.attributes = this.settings.attributes;\n        }\n\n        if (this.settings.prevalidate) {\n            data.prevalidate = 1;\n        }\n\n        return data;\n    },\n\n    load: function(data) {\n        return new Promise((resolve, reject) => {\n            this.trigger('beforeLoad');\n            // todo: remove this in Craft 4\n            this.trigger('beginLoading');\n            this.showLoadSpinner();\n            this.onBeginLoading();\n\n            if (this.cancelToken) {\n                this.ignoreFailedRequest = true;\n                this.cancelToken.cancel();\n            }\n\n            this.cancelToken = axios.CancelToken.source();\n\n            Craft.sendActionRequest('POST', 'elements/get-editor-html', {\n                cancelToken: this.cancelToken.token,\n                data: $.extend(this.getBaseData(), data || {}, {\n                    includeSites: Craft.isMultiSite && this.settings.showSiteSwitcher,\n                }),\n            }).then(response => {\n                this.hideLoadSpinner();\n                this.trigger('load');\n                // todo: remove this in Craft 4\n                this.trigger('endLoading');\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (this.initialDeltaValues === null) {\n                    this.initialDeltaValues = response.data.initialDeltaValues;\n                }\n                this.updateForm(response.data, true);\n                this.cancelToken = null;\n                resolve();\n            }).catch(e => {\n                this.hideLoadSpinner();\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (!this.ignoreFailedRequest) {\n                    Craft.cp.displayError();\n                    reject(e);\n                }\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    showHeader: function() {\n        this.$header.removeClass('hidden');\n    },\n\n    hideHeader: function() {\n        this.$header.addClass('hidden');\n    },\n\n    showLoadSpinner: function() {\n        this.showHeader();\n        this.$loadSpinner.removeClass('hidden');\n    },\n\n    hideLoadSpinner: function() {\n        this.$loadSpinner.addClass('hidden');\n    },\n\n    switchSite: function() {\n        if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n            this.$siteSelect.val(this.siteId);\n            return;\n        }\n\n        const newSiteId = this.$siteSelect.val();\n\n        if (newSiteId == this.siteId) {\n            return;\n        }\n\n        this.$siteSpinner.removeClass('hidden');\n\n        this.load({siteId: newSiteId}).then(() => {\n            this.$siteSpinner.addClass('hidden');\n        }).catch(() => {\n            this.$siteSpinner.addClass('hidden');\n            // Reset the site select\n            this.$siteSelect.val(this.siteId);\n        });\n    },\n\n    updateForm: function(data, refreshInitialData) {\n        // Cleanup\n        if (this.tabManager) {\n            this.$tabContainer.html('');\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        this.siteId = data.siteId;\n        this.$fieldsContainer.html(data.fieldHtml);\n\n        let showHeader = false;\n\n        if (data.sites && data.sites.length > 1) {\n            showHeader = true;\n            this.$siteSelectContainer.removeClass('hidden');\n            this.$siteSelect.html('');\n\n            for (let i = 0; i < data.sites.length; i++) {\n                const siteInfo = data.sites[i];\n                const $option = $('<option/>', {\n                    value: siteInfo.id,\n                    text: siteInfo.name\n                }).appendTo(this.$siteSelect);\n                if (siteInfo.id == data.siteId) {\n                    $option.attr('selected', 'selected');\n                }\n            }\n        } else {\n            this.$siteSelectContainer.addClass('hidden');\n        }\n\n        if (data.tabHtml) {\n            showHeader = true;\n            this.$tabContainer.replaceWith(this.$tabContainer = $(data.tabHtml));\n            this.tabManager = new Craft.Tabs(this.$tabContainer);\n            this.tabManager.on('deselectTab', ev => {\n                $(ev.$tab.attr('href')).addClass('hidden');\n            });\n            this.tabManager.on('selectTab', ev => {\n                $(ev.$tab.attr('href')).removeClass('hidden');\n                Garnish.$win.trigger('resize');\n                this.$body.trigger('scroll');\n            });\n        }\n\n        if (data.editUrl) {\n            showHeader = true;\n            this.$editLink\n                .removeClass('hidden')\n                .attr('href', data.editUrl);\n        } else if (this.$editLink) {\n            this.$editLink.addClass('hidden');\n        }\n\n        if (data.sidebarHtml) {\n            showHeader = true;\n            this.$sidebarBtn.removeClass('hidden');\n            this.$sidebar.html(data.sidebarHtml);\n            Craft.initUiElements(this.$sidebar);\n            new Craft.ElementThumbLoader().load($(this.$sidebar));\n\n            // Open outbound links in new windows\n            this.$sidebar.find('a').each(function() {\n                if (this.hostname.length && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('target', '_blank')\n                }\n            });\n        } else if (this.$sidebarBtn) {\n            this.$sidebarBtn.addClass('hidden');\n            this.$sidebar.addClass('hidden');\n        }\n\n        if (showHeader) {\n            this.showHeader();\n        } else {\n            this.hideHeader();\n        }\n\n        this.$footer.removeClass('hidden');\n\n        if (refreshInitialData !== false) {\n            this.deltaNames = data.deltaNames;\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            Craft.appendHeadHtml(data.headHtml);\n            Craft.appendFootHtml(data.footHtml);\n            Craft.initUiElements(this.$fieldsContainer);\n\n            if (refreshInitialData) {\n                this.initialData = this.slideout.$container.serialize();\n            }\n\n            if (!Garnish.isMobileBrowser()) {\n                Craft.setFocusWithin(this.$fieldsContainer);\n            }\n\n            this.trigger('updateForm');\n        });\n    },\n\n    showSidebar: function() {\n        if (this.showingSidebar) {\n            return;\n        }\n\n        this.$body.scrollTop(0).addClass('no-scroll');\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .removeClass('hidden');\n\n        // Hack to force CSS animations\n        this.$sidebar[0].offsetWidth;\n\n        this.$sidebar.css(this._openedSidebarStyles());\n\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebar.one('transitionend.element-editor', () => {\n                Craft.setFocusWithin(this.$sidebar);\n            });\n        }\n\n        this.$sidebarBtn\n            .addClass('active')\n            .attr({\n                title: Craft.t('app', 'Hide sidebar'),\n                'aria-label': Craft.t('app', 'Hide sidebar'),\n            });\n\n        Garnish.$win.trigger('resize');\n        this.$sidebar.trigger('scroll');\n\n        Garnish.shortcutManager.addLayer();\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.hideSidebar();\n        });\n\n        this.showingSidebar = true;\n    },\n\n    hideSidebar: function() {\n        if (!this.showingSidebar) {\n            return;\n        }\n\n        this.$body.removeClass('no-scroll');\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .one('transitionend.element-editor', () => {\n                this.$sidebar.addClass('hidden');\n            });\n\n        this.$sidebarBtn\n            .removeClass('active')\n            .attr({\n                title: Craft.t('app', 'Show sidebar'),\n                'aria-label': Craft.t('app', 'Show sidebar'),\n            });\n\n        Garnish.shortcutManager.removeLayer();\n\n        this.showingSidebar = false;\n    },\n\n    _openedSidebarStyles: function() {\n        return {\n            [Garnish.ltr ? 'right' : 'left']: '0',\n        };\n    },\n\n    _closedSidebarStyles: function() {\n        return {\n            [Garnish.ltr ? 'right' : 'left']: '-350px',\n        };\n    },\n\n    saveElement: function() {\n        const validators = this.settings.validators;\n\n        if ($.isArray(validators)) {\n            for (let i = 0; i < validators.length; i++) {\n                if ($.isFunction(validators[i]) && !validators[i].call()) {\n                    return false;\n                }\n            }\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n\n        let data = $.param(this.getBaseData()) + '&' + this.slideout.$container.serialize();\n        data = Craft.findDeltaData(this.initialData, data, this.deltaNames, null, this.initialDeltaValues);\n\n        Craft.postActionRequest('elements/save-element', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (this.$element && this.siteId == this.$element.data('site-id')) {\n                        // Update the label\n                        const $title = this.$element.find('.title');\n                        const $a = $title.find('a');\n\n                        if ($a.length && response.cpEditUrl) {\n                            $a.attr('href', response.cpEditUrl);\n                            $a.text(response.newTitle);\n                        } else {\n                            $title.text(response.newTitle);\n                        }\n                    }\n\n                    if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                        Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                            type: Craft.elementTypeNames[this.settings.elementType][0],\n                        }));\n                    }\n\n                    this.closeSlideout();\n                    this.trigger('saveElement', {\n                        response: response\n                    });\n                    this.onSaveElement(response);\n                    this.settings.onSaveElement(response);\n\n                    // There may be a new background job that needs to be run\n                    Craft.cp.runQueue();\n                } else {\n                    this.updateForm(response, false);\n                    Garnish.shake(this.slideout.$container);\n                }\n            }\n        });\n    },\n\n    isDirty: function() {\n        return this.initialData !== null && this.slideout.$container.serialize() !== this.initialData;\n    },\n\n    maybeCloseSlideout: function() {\n        if (!this.slideout.isOpen) {\n            return;\n        }\n\n        if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n            this.closeSlideout();\n        }\n    },\n\n    closeSlideout: function() {\n        this.slideout.close();\n        this.onHideHud();\n\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n    },\n\n    destroy: function() {\n        this.slideout.destroy();\n        delete this.slideout;\n        this.base();\n    },\n\n    // Deprecated Methods\n    // -------------------------------------------------------------------------\n\n    /** @deprecated in 3.7.0 */\n    loadHud: function() {\n        this.load();\n    },\n    /** @deprecated in 3.7.0 */\n    maybeCloseHud: function() {\n        this.maybeCloseSlideout();\n    },\n    /** @deprecated in 3.7.0 */\n    closeHud: function() {\n        this.closeSlideout();\n    },\n    /** @deprecated */\n    reloadForm: function(data, callback) {\n        this.load(data).then(() => {\n            callback('success');\n        }).catch(() => {\n            callback('error');\n        });\n    },\n    /** @deprecated in 3.7.0 */\n    onBeginLoading: function() {\n        this.settings.onBeginLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onEndLoading: function() {\n        this.settings.onEndLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onSaveElement: function(response) {\n    },\n    /** @deprecated in 3.7.0 */\n    onCreateForm: function($form) {\n        this.settings.onCreateForm($form);\n    },\n    /** @deprecated in 3.7.0 */\n    onShowHud: function() {\n        this.trigger('showHud');\n        this.settings.onShowHud();\n    },\n    /** @deprecated in 3.7.0 */\n    onHideHud: function() {\n        this.trigger('hideHud');\n        this.settings.onHideHud();\n    },\n}, {\n    defaults: {\n        showSiteSwitcher: true,\n        elementId: null,\n        elementType: null,\n        siteId: null,\n        attributes: null,\n        params: null,\n        prevalidate: false,\n        elementIndex: null,\n        onSaveElement: $.noop,\n        validators: [],\n\n        /** @deprecated in 3.7.0 */\n        onShowHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onHideHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onBeginLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onEndLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onCreateForm: $.noop,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend({\n    initialized: false,\n    elementType: null,\n\n    instanceState: null,\n    sourceStates: null,\n    sourceStatesStorageKey: null,\n\n    searchTimeout: null,\n    sourceSelect: null,\n\n    $container: null,\n    $main: null,\n    isIndexBusy: false,\n\n    $sidebar: null,\n    showingSidebar: null,\n    sourceKey: null,\n    sourceViewModes: null,\n    $source: null,\n    sourcesByKey: null,\n    $visibleSources: null,\n\n    $customizeSourcesBtn: null,\n    customizeSourcesModal: null,\n\n    $toolbar: null,\n    toolbarOffset: null,\n\n    $search: null,\n    searching: false,\n    searchText: null,\n    trashed: false,\n    drafts: false,\n    $clearSearchBtn: null,\n\n    $statusMenuBtn: null,\n    $statusMenuContainer: null,\n    statusMenu: null,\n    status: null,\n\n    $siteMenuBtn: null,\n    siteMenu: null,\n    siteId: null,\n\n    $sortMenuBtn: null,\n    sortMenu: null,\n    $sortAttributesList: null,\n    $sortDirectionsList: null,\n    $scoreSortAttribute: null,\n    $structureSortAttribute: null,\n\n    $elements: null,\n    $viewModeBtnContainer: null,\n    viewModeBtns: null,\n    viewMode: null,\n    view: null,\n    _autoSelectElements: null,\n    $countSpinner: null,\n    $countContainer: null,\n    page: 1,\n    resultSet: null,\n    totalResults: null,\n    $exportBtn: null,\n\n    actions: null,\n    actionsHeadHtml: null,\n    actionsFootHtml: null,\n    $selectAllContainer: null,\n    $selectAllCheckbox: null,\n    showingActionTriggers: false,\n    exporters: null,\n    exportersByType: null,\n    _$detachedToolbarItems: null,\n    _$triggers: null,\n\n    _ignoreFailedRequest: false,\n    _cancelToken: null,\n\n    /**\n     * Constructor\n     */\n    init: function(elementType, $container, settings) {\n        this.elementType = elementType;\n        this.$container = $container;\n        this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n        // Set the state objects\n        // ---------------------------------------------------------------------\n\n        this.instanceState = this.getDefaultInstanceState();\n\n        this.sourceStates = {};\n\n        // Instance states (selected source) are stored by a custom storage key defined in the settings\n        if (this.settings.storageKey) {\n            $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n        }\n\n        // Source states (view mode, etc.) are stored by the element type and context\n        this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n        $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n        // Find the DOM elements\n        // ---------------------------------------------------------------------\n\n        this.$main = this.$container.find('.main');\n        this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n        this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n        this.$statusMenuContainer = this.$statusMenuBtn.parent();\n        this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n        this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n        this.$search = this.$toolbar.find('.search:first input:first');\n        this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n        this.$sidebar = this.$container.find('.sidebar:first');\n        this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n        this.$elements = this.$container.find('.elements:first');\n        this.$countSpinner = this.$container.find('#count-spinner');\n        this.$countContainer = this.$container.find('#count-container');\n        this.$exportBtn = this.$container.find('#export-btn');\n\n        // Hide sidebar if needed\n        if (this.settings.hideSidebar) {\n            this.$sidebar.hide();\n            $('.body, .content', this.$container).removeClass('has-sidebar');\n        }\n\n        // Initialize the sources\n        // ---------------------------------------------------------------------\n\n        if (!this.initSources()) {\n            return;\n        }\n\n        // Customize button\n        if (this.$customizeSourcesBtn.length) {\n            this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n        }\n\n        // Initialize the status menu\n        // ---------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n            this.statusMenu.on('optionselect', this._handleStatusChange.bind(this));\n        }\n\n        // Initialize the site menu\n        // ---------------------------------------------------------------------\n\n        // Is there a site menu?\n        if (this.$siteMenuBtn.length) {\n            this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n            // Figure out the initial site\n            var $option = this.siteMenu.$options.filter('.sel:first');\n\n            if (!$option.length) {\n                $option = this.siteMenu.$options.first();\n            }\n\n            if ($option.length) {\n                this._setSite($option.data('site-id'));\n            } else {\n                // No site options -- they must not have any site permissions\n                this.settings.criteria = {id: '0'};\n            }\n\n            this.siteMenu.on('optionselect', this._handleSiteChange.bind(this));\n\n            if (this.siteId) {\n                // Should we be using a different default site?\n                var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                if (defaultSiteId && defaultSiteId != this.siteId) {\n                    // Is that one available here?\n                    var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                    if ($storedSiteOption.length) {\n                        // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                        $storedSiteOption.trigger('click');\n                    }\n                }\n            }\n        } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n            this._setSite(this.settings.criteria.siteId);\n        } else {\n            this._setSite(Craft.siteId);\n        }\n\n        // Don't let the criteria override the selected site\n        if (this.settings.criteria && this.settings.criteria.siteId) {\n            delete this.settings.criteria.siteId;\n        }\n\n        // Initialize the search input\n        // ---------------------------------------------------------------------\n\n        // Automatically update the elements after new search text has been sitting for a 1/2 second\n        this.addListener(this.$search, 'input', () => {\n            if (!this.searching && this.$search.val()) {\n                this.startSearching();\n            } else if (this.searching && !this.$search.val()) {\n                this.stopSearching();\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.updateElementsIfSearchTextChanged.bind(this), 500);\n        });\n\n        // Update the elements when the Return key is pressed\n        this.addListener(this.$search, 'keypress', ev => {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.updateElementsIfSearchTextChanged();\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearSearchBtn, 'click', () => {\n            this.$search.val('');\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            this.stopSearching();\n\n            this.updateElementsIfSearchTextChanged();\n        });\n\n        // Auto-focus the Search box\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$search.trigger('focus');\n        }\n\n        // Initialize the sort menu\n        // ---------------------------------------------------------------------\n\n        // Is there a sort menu?\n        if (this.$sortMenuBtn.length) {\n            this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n            this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n            this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n            this.sortMenu.on('optionselect', this._handleSortChange.bind(this));\n        }\n\n        // Initialize the Export button\n        // ---------------------------------------------------------------------\n\n        this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n        // Let everyone know that the UI is initialized\n        // ---------------------------------------------------------------------\n\n        this.initialized = true;\n        this.afterInit();\n\n        // Select the initial source\n        // ---------------------------------------------------------------------\n\n        this.selectDefaultSource();\n\n        // Load the first batch of elements!\n        // ---------------------------------------------------------------------\n\n        // Default to whatever page is in the URL\n        this.setPage(Craft.pageNum);\n\n        this.updateElements(true);\n    },\n\n    afterInit: function() {\n        this.onAfterInit();\n    },\n\n    _createCancelToken: function() {\n        this._cancelToken = axios.CancelToken.source();\n        return this._cancelToken.token;\n    },\n\n    _cancelRequests: function() {\n        if (this._cancelToken) {\n            this._ignoreFailedRequest = true;\n            this._cancelToken.cancel();\n            Garnish.requestAnimationFrame(() => {\n                this._ignoreFailedRequest = false;\n            });\n        }\n    },\n\n    getSourceContainer: function() {\n        return this.$sidebar.find('nav > ul');\n    },\n\n    get $sources() {\n        if (!this.sourceSelect) {\n            return undefined;\n        }\n\n        return this.sourceSelect.$items;\n    },\n\n    getSite: function() {\n        if (!this.siteId) {\n            return undefined;\n        }\n        return Craft.sites.find(s => s.id == this.siteId);\n    },\n\n    initSources: function() {\n        var $sources = this._getSourcesInList(this.getSourceContainer());\n\n        // No source, no party.\n        if ($sources.length === 0) {\n            return false;\n        }\n\n        // The source selector\n        if (!this.sourceSelect) {\n            this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                multi: false,\n                allowEmpty: false,\n                vertical: true,\n                onSelectionChange: this._handleSourceSelectionChange.bind(this)\n            });\n        }\n\n        this.sourcesByKey = {};\n\n        for (let i = 0; i < $sources.length; i++) {\n            this.initSource($($sources[i]));\n        }\n\n        return true;\n    },\n\n    selectDefaultSource: function() {\n        var sourceKey = this.getDefaultSourceKey(),\n            $source;\n\n        if (sourceKey) {\n            $source = this.getSourceByKey(sourceKey);\n\n            // Make sure it's visible\n            if (this.$visibleSources.index($source) === -1) {\n                $source = null;\n            }\n        }\n\n        if (!sourceKey || !$source) {\n            // Select the first source by default\n            $source = this.$visibleSources.first();\n        }\n\n        return this.selectSource($source);\n    },\n\n    refreshSources: function() {\n        this.sourceSelect.removeAllItems();\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n            data: {\n                context: this.settings.context,\n                elementType: this.elementType,\n            }\n        }).then((response) => {\n            this.setIndexAvailable();\n            this.getSourceContainer().replaceWith(response.data.html);\n            this.initSources();\n            this.selectDefaultSource();\n        }).catch(() => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    initSource: function($source) {\n        this.sourceSelect.addItems($source);\n        this.initSourceToggle($source);\n        this.sourcesByKey[$source.data('key')] = $source;\n\n        if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n            this._expandSource($source);\n        }\n    },\n\n    initSourceToggle: function($source) {\n        // Remove handlers for the same thing. Just in case.\n        this.deinitSourceToggle($source);\n\n        var $toggle = this._getSourceToggle($source);\n\n        if ($toggle.length) {\n            this.addListener($source, 'dblclick', '_handleSourceDblClick');\n            this.addListener($toggle, 'click', '_handleSourceToggleClick');\n            $source.data('hasNestedSources', true);\n        } else {\n            $source.data('hasNestedSources', false);\n        }\n    },\n\n    deinitSource: function($source) {\n        this.sourceSelect.removeItems($source);\n        this.deinitSourceToggle($source);\n        delete this.sourcesByKey[$source.data('key')];\n    },\n\n    deinitSourceToggle: function($source) {\n        if ($source.data('hasNestedSources')) {\n            this.removeListener($source, 'dblclick');\n            this.removeListener(this._getSourceToggle($source), 'click');\n        }\n\n        $source.removeData('hasNestedSources');\n    },\n\n    getDefaultInstanceState: function() {\n        return {\n            selectedSource: null,\n            expandedSources: []\n        };\n    },\n\n    getDefaultSourceKey: function() {\n        if (this.settings.defaultSource) {\n            var paths = this.settings.defaultSource.split('/'),\n                path = '';\n\n            // Expand the tree\n            for (var i = 0; i < paths.length; i++) {\n                path += paths[i];\n                var $source = this.getSourceByKey(path);\n\n                // If the folder can't be found, then just go to the stored instance source.\n                if (!$source) {\n                    return this.instanceState.selectedSource;\n                }\n\n                this._expandSource($source);\n                path += '/';\n            }\n\n            // Just make sure that the modal is aware of the newly expanded sources, too.\n            this._setSite(this.siteId);\n\n            return this.settings.defaultSource;\n        }\n\n        return this.instanceState.selectedSource;\n    },\n\n    getDefaultExpandedSources: function() {\n        return this.instanceState.expandedSources;\n    },\n\n    startSearching: function() {\n        // Show the clear button and add/select the Score sort option\n        this.$clearSearchBtn.removeClass('hidden');\n\n        if (!this.$scoreSortAttribute) {\n            this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n            this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n        }\n\n        this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n        this.searching = true;\n\n        this._updateStructureSortOption();\n        this.setSortAttribute('score');\n    },\n\n    stopSearching: function() {\n        // Hide the clear button and Score sort option\n        this.$clearSearchBtn.addClass('hidden');\n\n        this.$scoreSortAttribute.detach();\n\n        this.searching = false;\n\n        this._updateStructureSortOption();\n    },\n\n    setInstanceState: function(key, value) {\n        if (typeof key === 'object') {\n            $.extend(this.instanceState, key);\n        } else {\n            this.instanceState[key] = value;\n        }\n\n        this.storeInstanceState();\n    },\n\n    storeInstanceState: function() {\n        if (this.settings.storageKey) {\n            Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n        }\n    },\n\n    getSourceState: function(source, key, defaultValue) {\n        if (typeof this.sourceStates[source] === 'undefined') {\n            // Set it now so any modifications to it by whoever's calling this will be stored.\n            this.sourceStates[source] = {};\n        }\n\n        if (typeof key === 'undefined') {\n            return this.sourceStates[source];\n        } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n            return this.sourceStates[source][key];\n        } else {\n            return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n        }\n    },\n\n    getSelectedSourceState: function(key, defaultValue) {\n        return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n    },\n\n    setSelecetedSourceState: function(key, value) {\n        var viewState = this.getSelectedSourceState();\n\n        if (typeof key === 'object') {\n            $.extend(viewState, key);\n        } else {\n            viewState[key] = value;\n        }\n\n        this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n        // Store it in localStorage too\n        Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n    },\n\n    storeSortAttributeAndDirection: function() {\n        var attr = this.getSelectedSortAttribute();\n\n        if (attr !== 'score') {\n            this.setSelecetedSourceState({\n                order: attr,\n                sort: this.getSelectedSortDirection()\n            });\n        }\n    },\n\n    /**\n     * Sets the page number.\n     */\n    setPage: function(page) {\n        if (this.settings.context !== 'index') {\n            return;\n        }\n\n        page = Math.max(page, 1);\n        this.page = page;\n\n        // Update the URL\n        var url = document.location.href\n            .replace(/\\?.*$/, '')\n            .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n            .replace(/\\/+$/, '');\n\n        if (this.page !== 1) {\n            if (Craft.pageTrigger[0] !== '?') {\n                url += '/';\n            }\n            url += Craft.pageTrigger + this.page;\n        }\n\n        history.replaceState({}, '', url);\n    },\n\n    _resetCount: function() {\n        this.resultSet = null;\n        this.totalResults = null;\n    },\n\n    /**\n     * Returns the data that should be passed to the elementIndex/getElements controller action\n     * when loading elements.\n     */\n    getViewParams: function() {\n        var criteria = {\n            siteId: this.siteId,\n            search: this.searchText,\n            offset: this.settings.batchSize * (this.page - 1),\n            limit: this.settings.batchSize,\n        };\n\n        // Only set drafts/draftOf/trashed params when needed, so we don't potentially override a source's criteria\n        if (\n            this.settings.canHaveDrafts &&\n            (this.drafts || (this.settings.context === 'index' && !this.status))\n        ) {\n            criteria.drafts = this.drafts || null;\n            criteria.savedDraftsOnly = true;\n            if (!this.drafts) {\n                criteria.draftOf = false;\n            }\n        }\n        if (this.trashed) {\n            criteria.trashed = true;\n        }\n\n        if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n            criteria.status = this.status;\n        }\n\n        $.extend(criteria, this.settings.criteria);\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType,\n            source: this.instanceState.selectedSource,\n            criteria: criteria,\n            disabledElementIds: this.settings.disabledElementIds,\n            viewState: $.extend({}, this.getSelectedSourceState()),\n            paginated: this._isViewPaginated() ? 1 : 0,\n        };\n\n        // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n        params.viewState.order = this.getSelectedSortAttribute();\n        params.viewState.sort = this.getSelectedSortDirection();\n\n        if (this.getSelectedSortAttribute() === 'structure') {\n            if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                this.instanceState.collapsedElementIds = [];\n            }\n            params.collapsedElementIds = this.instanceState.collapsedElementIds;\n        }\n\n        // Give plugins a chance to hook in here\n        this.trigger('registerViewParams', {\n            params: params,\n        });\n\n        return params;\n    },\n\n    updateElements: function(preservePagination) {\n        // Ignore if we're not fully initialized yet\n        if (!this.initialized) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        this.setIndexBusy();\n\n        // Kill the old view class\n        if (this.view) {\n            this.view.destroy();\n            delete this.view;\n        }\n\n        if (preservePagination !== true) {\n            this.setPage(1);\n            this._resetCount();\n        }\n\n        var params = this.getViewParams();\n\n        Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n            data: params,\n            cancelToken: this._createCancelToken(),\n        }).then((response) => {\n            this.setIndexAvailable();\n            (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n            this._updateView(params, response.data);\n        }).catch(e => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    updateElementsIfSearchTextChanged: function() {\n        if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n            this.updateElements();\n        }\n    },\n\n    showActionTriggers: function() {\n        // Ignore if they're already shown\n        if (this.showingActionTriggers) {\n            return;\n        }\n\n        // Hard-code the min toolbar height in case it was taller than the actions toolbar\n        // (prevents the elements from jumping if this ends up being a double-click)\n        this.$toolbar.css('min-height', this.$toolbar.height());\n\n        // Hide any toolbar inputs\n        this._$detachedToolbarItems = this.$toolbar.children();\n        this._$detachedToolbarItems.detach();\n\n        if (!this._$triggers) {\n            this._createTriggers();\n        } else {\n            this._$triggers.appendTo(this.$toolbar);\n        }\n\n        this.showingActionTriggers = true;\n    },\n\n    submitAction: function(action, actionParams) {\n        // Make sure something's selected\n        var selectedElementIds = this.view.getSelectedElementIds(),\n            totalSelected = selectedElementIds.length;\n\n        if (totalSelected === 0) {\n            return;\n        }\n\n        if (typeof action === 'string') {\n            action = this._findAction(action);\n        }\n\n        if (action.confirm && !confirm(action.confirm)) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        // Get ready to submit\n        var viewParams = this.getViewParams();\n\n        actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n        var params = $.extend(viewParams, action.settings || {}, actionParams, {\n            elementAction: action.type,\n            elementIds: selectedElementIds\n        });\n\n        // Do it\n        this.setIndexBusy();\n        this._autoSelectElements = selectedElementIds;\n\n        if (action.download) {\n            if (Craft.csrfTokenName) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n            Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                this.setIndexAvailable();\n            }).catch(e => {\n                this.setIndexAvailable();\n            });\n        } else {\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (typeof response.data.badgeCounts !== 'undefined') {\n                        this._updateBadgeCounts(response.data.badgeCounts);\n                    }\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        }\n    },\n\n    _findAction: function(actionClass) {\n        for (var i = 0; i < this.actions.length; i++) {\n            if (this.actions[i].type === actionClass) {\n                return this.actions[i];\n            }\n        }\n        throw `Invalid element action: ${actionClass}`;\n    },\n\n    afterAction: function(action, params) {\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n\n        this.onAfterAction(action, params);\n    },\n\n    hideActionTriggers: function() {\n        // Ignore if there aren't any\n        if (!this.showingActionTriggers) {\n            return;\n        }\n\n        this._$detachedToolbarItems.appendTo(this.$toolbar);\n        this._$triggers.detach();\n        // this._$detachedToolbarItems.removeClass('hidden');\n\n        // Unset the min toolbar height\n        this.$toolbar.css('min-height', '');\n\n        this.showingActionTriggers = false;\n    },\n\n    updateActionTriggers: function() {\n        // Do we have an action UI to update?\n        if (this.actions) {\n            var totalSelected = this.view.getSelectedElements().length;\n\n            if (totalSelected !== 0) {\n                if (totalSelected === this.view.getEnabledElements().length) {\n                    this.$selectAllCheckbox.removeClass('indeterminate');\n                    this.$selectAllCheckbox.addClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'true');\n                } else {\n                    this.$selectAllCheckbox.addClass('indeterminate');\n                    this.$selectAllCheckbox.removeClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'mixed');\n                }\n\n                this.showActionTriggers();\n            } else {\n                this.$selectAllCheckbox.removeClass('indeterminate checked');\n                this.$selectAllContainer.attr('aria-checked', 'false');\n                this.hideActionTriggers();\n            }\n        }\n    },\n\n    getSelectedElements: function() {\n        return this.view ? this.view.getSelectedElements() : $();\n    },\n\n    getSelectedElementIds: function() {\n        return this.view ? this.view.getSelectedElementIds() : [];\n    },\n\n    setStatus: function(status) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n        if ($option.length) {\n            this.statusMenu.selectOption($option[0]);\n        }\n    },\n\n    getSortAttributeOption: function(attr) {\n        return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n    },\n\n    getSelectedSortAttribute: function() {\n        return this.$sortAttributesList.find('a.sel:first').data('attr');\n    },\n\n    setSortAttribute: function(attr) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.getSortAttributeOption(attr);\n\n        if ($option.length) {\n            this.$sortAttributesList.find('a.sel').removeClass('sel');\n            $option.addClass('sel');\n\n            var label = $option.text();\n            this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n            this.$sortMenuBtn.text(label);\n\n            if (attr === 'score') {\n                this.setSortDirection('desc');\n            } else {\n                this.setSortDirection($option.data('default-dir') || 'asc');\n            }\n\n            if (attr === 'structure') {\n                this.$sortDirectionsList.find('a').addClass('disabled');\n            } else {\n                this.$sortDirectionsList.find('a').removeClass('disabled');\n            }\n        }\n    },\n\n    getSortDirectionOption: function(dir) {\n        return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n    },\n\n    getSelectedSortDirection: function() {\n        return this.$sortDirectionsList.find('a.sel:first').data('dir');\n    },\n\n    getSelectedViewMode: function() {\n        return this.getSelectedSourceState('mode') || 'table';\n    },\n\n    setSortDirection: function(dir) {\n        if (dir !== 'desc') {\n            dir = 'asc';\n        }\n\n        this.$sortMenuBtn.attr('data-icon', dir);\n        this.$sortDirectionsList.find('a.sel').removeClass('sel');\n        this.getSortDirectionOption(dir).addClass('sel');\n    },\n\n    getSourceByKey: function(key) {\n        if (typeof this.sourcesByKey[key] === 'undefined') {\n            return null;\n        }\n\n        return this.sourcesByKey[key];\n    },\n\n    selectSource: function($source) {\n        if (!$source || !$source.length) {\n            return false;\n        }\n\n        if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n            return false;\n        }\n\n        // Hide action triggers if they're currently being shown\n        this.hideActionTriggers();\n\n        this.$source = $source;\n        this.sourceKey = $source.data('key');\n        this.setInstanceState('selectedSource', this.sourceKey);\n        this.sourceSelect.selectItem($source);\n\n        Craft.cp.updateSidebarMenuLabel();\n\n        if (this.searching) {\n            // Clear the search value without causing it to update elements\n            this.searchText = null;\n            this.$search.val('');\n            this.stopSearching();\n        }\n\n        // Sort menu\n        // ----------------------------------------------------------------------\n\n        // Remove any existing custom sort options from the menu\n        this.$sortAttributesList.children('li[data-extra]').remove();\n\n        // Does this source have any custom sort options?\n        let $topSource = this.$source.closest('nav > ul > li').children('a');\n        let sortOptions = $topSource.data('sort-options')\n        if (sortOptions) {\n            for (let i = 0; i < sortOptions.length; i++) {\n                let $option = $('<li/>', {\n                    'data-extra': true,\n                })\n                    .append(\n                        $('<a/>', {\n                            text: sortOptions[i][0],\n                            'data-attr': sortOptions[i][1],\n                        })\n                    )\n                    .appendTo(this.$sortAttributesList);\n                this.sortMenu.addOptions($option.children());\n            }\n        }\n\n        // Does this source have a structure?\n        if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n            if (!this.$structureSortAttribute) {\n                this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                this.sortMenu.addOptions(this.$structureSortAttribute.children());\n            }\n\n            this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n        } else if (this.$structureSortAttribute) {\n            this.$structureSortAttribute.removeClass('sel').detach();\n        }\n\n        this.setStoredSortOptionsForSource();\n\n        // Status menu\n        // ----------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                this.$statusMenuContainer.addClass('hidden');\n            } else {\n                this.$statusMenuContainer.removeClass('hidden');\n            }\n\n            if (this.trashed) {\n                // Swap to the initial status\n                var $firstOption = this.statusMenu.$options.first();\n                this.setStatus($firstOption.data('status'));\n            }\n        }\n\n        // View mode buttons\n        // ----------------------------------------------------------------------\n\n        // Clear out any previous view mode data\n        if (this.$viewModeBtnContainer) {\n            this.$viewModeBtnContainer.remove();\n        }\n\n        this.viewModeBtns = {};\n        this.viewMode = null;\n\n        // Get the new list of view modes\n        this.sourceViewModes = this.getViewModesForSource();\n\n        // Create the buttons if there's more than one mode available to this source\n        if (this.sourceViewModes.length > 1) {\n            this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                let sourceViewMode = this.sourceViewModes[i];\n\n                let $viewModeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                    'data-view': sourceViewMode.mode,\n                    'data-icon': sourceViewMode.icon,\n                    'aria-label': sourceViewMode.title,\n                    title: sourceViewMode.title,\n                }).appendTo(this.$viewModeBtnContainer);\n\n                this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                    this.selectViewMode(ev.data.mode);\n                    this.updateElements();\n                });\n            }\n        }\n\n        // Figure out which mode we should start with\n        var viewMode = this.getSelectedViewMode();\n\n        if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n            // Try to keep using the current view mode\n            if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                viewMode = this.viewMode;\n            }\n            // Just use the first one\n            else {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n        }\n\n        this.selectViewMode(viewMode);\n\n        this.onSelectSource();\n\n        return true;\n    },\n\n    selectSourceByKey: function(key) {\n        var $source = this.getSourceByKey(key);\n\n        if ($source) {\n            return this.selectSource($source);\n        } else {\n            return false;\n        }\n    },\n\n    setStoredSortOptionsForSource: function() {\n        var sortAttr = this.getSelectedSourceState('order'),\n            sortDir = this.getSelectedSourceState('sort');\n\n        if (!sortAttr || !sortDir) {\n            // Get the default\n            sortAttr = this.getDefaultSort();\n\n            if (Garnish.isArray(sortAttr)) {\n                sortDir = sortAttr[1];\n                sortAttr = sortAttr[0];\n            }\n        }\n\n        if (sortDir !== 'asc' && sortDir !== 'desc') {\n            sortDir = 'asc';\n        }\n\n        this.setSortAttribute(sortAttr);\n        this.setSortDirection(sortDir);\n    },\n\n    getDefaultSort: function() {\n        // Does the source specify what to do?\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n            return this.$source.attr('data-default-sort').split(':');\n        } else {\n            // Default to whatever's first\n            return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n        }\n    },\n\n    getViewModesForSource: function() {\n        var viewModes = [\n            {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n        ];\n\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n            viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n        }\n\n        return viewModes;\n    },\n\n    doesSourceHaveViewMode: function(viewMode) {\n        for (var i = 0; i < this.sourceViewModes.length; i++) {\n            if (this.sourceViewModes[i].mode === viewMode) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    selectViewMode: function(viewMode, force) {\n        // Make sure that the current source supports it\n        if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n            viewMode = this.sourceViewModes[0].mode;\n        }\n\n        // Has anything changed?\n        if (viewMode === this.viewMode) {\n            return;\n        }\n\n        // Deselect the previous view mode\n        if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].removeClass('active');\n        }\n\n        this.viewMode = viewMode;\n        this.setSelecetedSourceState('mode', this.viewMode);\n\n        if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].addClass('active');\n        }\n    },\n\n    createView: function(mode, settings) {\n        var viewClass = this.getViewClass(mode);\n        return new viewClass(this, this.$elements, settings);\n    },\n\n    getViewClass: function(mode) {\n        switch (mode) {\n            case 'table':\n                return Craft.TableElementIndexView;\n            case 'thumbs':\n                return Craft.ThumbsElementIndexView;\n            default:\n                throw `View mode \"${mode}\" not supported.`;\n        }\n    },\n\n    rememberDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index === -1) {\n            this.settings.disabledElementIds.push(id);\n        }\n    },\n\n    forgetDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index !== -1) {\n            this.settings.disabledElementIds.splice(index, 1);\n        }\n    },\n\n    enableElements: function($elements) {\n        $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.forgetDisabledElementId(id);\n        }\n\n        this.onEnableElements($elements);\n    },\n\n    disableElements: function($elements) {\n        $elements.removeClass('sel').addClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.rememberDisabledElementId(id);\n        }\n\n        this.onDisableElements($elements);\n    },\n\n    getElementById: function(id) {\n        return this.view.getElementById(id);\n    },\n\n    enableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.enableElements($element);\n            } else {\n                this.forgetDisabledElementId(id);\n            }\n        }\n    },\n\n    disableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.disableElements($element);\n            } else {\n                this.rememberDisabledElementId(id);\n            }\n        }\n    },\n\n    selectElementAfterUpdate: function(id) {\n        if (this._autoSelectElements === null) {\n            this._autoSelectElements = [];\n        }\n\n        this._autoSelectElements.push(id);\n    },\n\n    addButton: function($button) {\n        this.getButtonContainer().append($button);\n    },\n\n    isShowingSidebar: function() {\n        if (this.showingSidebar === null) {\n            this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n        }\n\n        return this.showingSidebar;\n    },\n\n    getButtonContainer: function() {\n        // Is there a predesignated place where buttons should go?\n        if (this.settings.buttonContainer) {\n            return $(this.settings.buttonContainer);\n        } else {\n            var $container = $('#action-button');\n\n            if (!$container.length) {\n                $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n            }\n\n            return $container;\n        }\n    },\n\n    setIndexBusy: function() {\n        this.$elements.addClass('busy');\n        this.isIndexBusy = true;\n    },\n\n    setIndexAvailable: function() {\n        this.$elements.removeClass('busy');\n        this.isIndexBusy = false;\n    },\n\n    createCustomizeSourcesModal: function() {\n        // Recreate it each time\n        var modal = new Craft.CustomizeSourcesModal(this, {\n            onHide: function() {\n                modal.destroy();\n            }\n        });\n\n        return modal;\n    },\n\n    disable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.disable();\n        }\n\n        if (this.view) {\n            this.view.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.enable();\n        }\n\n        if (this.view) {\n            this.view.enable();\n        }\n\n        this.base();\n    },\n\n    onAfterInit: function() {\n        this.settings.onAfterInit();\n        this.trigger('afterInit');\n    },\n\n    onSelectSource: function() {\n        this.settings.onSelectSource(this.sourceKey);\n        this.trigger('selectSource', {sourceKey: this.sourceKey});\n    },\n\n    onSelectSite: function() {\n        this.settings.onSelectSite(this.siteId);\n        this.trigger('selectSite', {siteId: this.siteId});\n    },\n\n    onUpdateElements: function() {\n        this.settings.onUpdateElements();\n        this.trigger('updateElements');\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    onEnableElements: function($elements) {\n        this.settings.onEnableElements($elements);\n        this.trigger('enableElements', {elements: $elements});\n    },\n\n    onDisableElements: function($elements) {\n        this.settings.onDisableElements($elements);\n        this.trigger('disableElements', {elements: $elements});\n    },\n\n    onAfterAction: function(action, params) {\n        this.settings.onAfterAction(action, params);\n        this.trigger('afterAction', {action: action, params: params});\n    },\n\n    // UI state handlers\n    // -------------------------------------------------------------------------\n\n    _handleSourceSelectionChange: function() {\n        // If the selected source was just removed (maybe because its parent was collapsed),\n        // there won't be a selected source\n        if (!this.sourceSelect.totalSelected) {\n            this.sourceSelect.selectItem(this.$visibleSources.first());\n            return;\n        }\n\n        if (this.selectSource(this.sourceSelect.$selectedItems)) {\n            this.updateElements();\n        }\n    },\n\n    _handleActionTriggerSubmit: function(ev) {\n        ev.preventDefault();\n\n        var $form = $(ev.currentTarget);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($form.data('action'), Garnish.getPostData($form));\n    },\n\n    _handleMenuActionTriggerSubmit: function(ev) {\n        var $option = $(ev.option);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($option.data('action'));\n    },\n\n    _handleStatusChange: function(ev) {\n        this.statusMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$statusMenuBtn.html($option.html());\n\n        this.trashed = false;\n        this.drafts = false;\n        this.status = null;\n\n        if (Garnish.hasAttr($option, 'data-trashed')) {\n            this.trashed = true;\n        } else if (Garnish.hasAttr($option, 'data-drafts')) {\n            this.drafts = true;\n        } else {\n            this.status = $option.data('status');\n        }\n\n        this._updateStructureSortOption();\n        this.updateElements();\n    },\n\n    _handleSiteChange: function(ev) {\n        this.siteMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$siteMenuBtn.html($option.html());\n        this._setSite($option.data('site-id'));\n        this.onSelectSite();\n    },\n\n    _setSite: function(siteId) {\n        let firstSite = this.siteId === null;\n        this.siteId = siteId;\n        this.$visibleSources = $();\n\n        // Hide any sources that aren't available for this site\n        var $firstVisibleSource;\n        var $source;\n        // Select a new source automatically if a site is already selected, but we don't have a selected source\n        // (or if the currently selected source ends up not supporting the new site)\n        var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n        for (var i = 0; i < this.$sources.length; i++) {\n            $source = this.$sources.eq(i);\n            if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                $source.parent().removeClass('hidden');\n                this.$visibleSources = this.$visibleSources.add($source);\n                if (!$firstVisibleSource) {\n                    $firstVisibleSource = $source;\n                }\n            } else {\n                $source.parent().addClass('hidden');\n\n                // Is this the currently selected source?\n                if (this.$source && this.$source.get(0) == $source.get(0)) {\n                    selectNewSource = true;\n                }\n            }\n        }\n\n        if (this.initialized && selectNewSource) {\n            this.selectSource($firstVisibleSource);\n        }\n\n        // Hide any empty-nester headings\n        var $headings = this.getSourceContainer().children('.heading');\n        var $heading;\n\n        for (i = 0; i < $headings.length; i++) {\n            $heading = $headings.eq(i);\n            if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                $heading.removeClass('hidden');\n            } else {\n                $heading.addClass('hidden');\n            }\n        }\n\n        if (this.initialized) {\n            if (this.settings.context === 'index') {\n                // Remember this site for later\n                Craft.cp.setSiteId(siteId);\n            }\n\n            // Update the elements\n            this.updateElements();\n        }\n    },\n\n    _handleSortChange: function(ev) {\n        var $option = $(ev.selectedOption);\n\n        if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n            return;\n        }\n\n        // Is this an attribute or a direction?\n        if ($option.parent().parent().is(this.$sortAttributesList)) {\n            this.setSortAttribute($option.data('attr'));\n        } else {\n            this.setSortDirection($option.data('dir'));\n        }\n\n        this.storeSortAttributeAndDirection();\n        this.updateElements();\n    },\n\n    _handleSelectionChange: function() {\n        this.updateActionTriggers();\n        this.onSelectionChange();\n    },\n\n    _handleSourceDblClick: function(ev) {\n        this._toggleSource($(ev.currentTarget));\n        ev.stopPropagation();\n    },\n\n    _handleSourceToggleClick: function(ev) {\n        this._toggleSource($(ev.currentTarget).prev('a'));\n        ev.stopPropagation();\n    },\n\n    _updateStructureSortOption: function() {\n        var $option = this.getSortAttributeOption('structure');\n\n        if (!$option.length) {\n            return;\n        }\n\n        if (this.trashed || this.drafts || this.searching) {\n            $option.addClass('disabled');\n            if (this.getSelectedSortAttribute() === 'structure') {\n                // Temporarily set the sort to the first option\n                var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                this.setSortAttribute($firstOption.data('attr'));\n                this.setSortDirection('asc');\n            }\n        } else {\n            $option.removeClass('disabled');\n            this.setStoredSortOptionsForSource();\n        }\n    },\n\n    // Source managemnet\n    // -------------------------------------------------------------------------\n\n    _getSourcesInList: function($list) {\n        return $list.children('li').children('a');\n    },\n\n    _getChildSources: function($source) {\n        var $list = $source.siblings('ul');\n        return this._getSourcesInList($list);\n    },\n\n    _getSourceToggle: function($source) {\n        return $source.siblings('.toggle');\n    },\n\n    _toggleSource: function($source) {\n        if ($source.parent('li').hasClass('expanded')) {\n            this._collapseSource($source);\n        } else {\n            this._expandSource($source);\n        }\n    },\n\n    _expandSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'true',\n            'aria-label': Craft.t('app', 'Hide nested sources'),\n        });\n        $source.parent('li').addClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        for (let i = 0; i < $childSources.length; i++) {\n            this.initSource($($childSources[i]));\n            if (this.$visibleSources) {\n                this.$visibleSources = this.$visibleSources.add($childSources[i]);\n            }\n        }\n\n        var key = $source.data('key');\n        if (this.instanceState.expandedSources.indexOf(key) === -1) {\n            this.instanceState.expandedSources.push(key);\n            this.storeInstanceState();\n        }\n    },\n\n    _collapseSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'false',\n            'aria-label': Craft.t('app', 'Show nested sources'),\n        });\n        $source.parent('li').removeClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        for (let i = 0; i < $childSources.length; i++) {\n            this.deinitSource($($childSources[i]));\n            this.$visibleSources = this.$visibleSources.not($childSources[i]);\n        }\n\n        var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n        if (i !== -1) {\n            this.instanceState.expandedSources.splice(i, 1);\n            this.storeInstanceState();\n        }\n    },\n\n    // View\n    // -------------------------------------------------------------------------\n\n    _isViewPaginated: function() {\n        return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n    },\n\n    _updateView: function(params, response) {\n        // Cleanup\n        // -------------------------------------------------------------\n\n        // Get rid of the old action triggers regardless of whether the new batch has actions or not\n        if (this.actions) {\n            this.hideActionTriggers();\n            this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n        }\n\n        // Update the count text\n        // -------------------------------------------------------------\n\n        if (this.$countContainer.length) {\n            this.$countSpinner.removeClass('hidden');\n            this.$countContainer.html('');\n\n            this._countResults()\n                .then((total) => {\n                    this.$countSpinner.addClass('hidden');\n\n                    let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                    let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                    if (!this._isViewPaginated()) {\n                        let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n                        this.$countContainer.text(countLabel);\n                    } else {\n                        let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                        let last = Math.min(first + (this.settings.batchSize - 1), total);\n                        let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            first: first,\n                            last: last,\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n\n                        let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                        let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                        let $prevBtn = $('<div/>', {\n                            'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                            title: Craft.t('app', 'Previous Page')\n                        }).appendTo($paginationContainer);\n                        let $nextBtn = $('<div/>', {\n                            'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                            title: Craft.t('app', 'Next Page')\n                        }).appendTo($paginationContainer);\n\n                        $('<div/>', {\n                            'class': 'page-info',\n                            text: countLabel\n                        }).appendTo($paginationContainer);\n\n                        if (this.page > 1) {\n                            this.addListener($prevBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page - 1);\n                                this.updateElements(true);\n                            });\n                        }\n\n                        if (this.page < totalPages) {\n                            this.addListener($nextBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page + 1);\n                                this.updateElements(true);\n                            });\n                        }\n                    }\n                })\n                .catch(() => {\n                    this.$countSpinner.addClass('hidden');\n                });\n        }\n\n        // Update the view with the new container + elements HTML\n        // -------------------------------------------------------------\n\n        this.$elements.html(response.html);\n        Craft.appendHeadHtml(response.headHtml);\n        Craft.appendFootHtml(response.footHtml);\n\n        // Batch actions setup\n        // -------------------------------------------------------------\n\n        this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n        if (response.actions && response.actions.length) {\n            if (this.$selectAllContainer.length) {\n                this.actions = response.actions;\n                this.actionsHeadHtml = response.actionsHeadHtml;\n                this.actionsFootHtml = response.actionsFootHtml;\n\n                // Create the select all checkbox\n                this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                this.$selectAllContainer.attr({\n                    'role': 'checkbox',\n                    'tabindex': '0',\n                    'aria-checked': 'false',\n                    'aria-label': Craft.t('app', 'Select all'),\n                });\n\n                this.addListener(this.$selectAllContainer, 'click', function() {\n                    if (this.view.getSelectedElements().length === 0) {\n                        this.view.selectAllElements();\n                    } else {\n                        this.view.deselectAllElements();\n                    }\n                });\n\n                this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                    if (ev.keyCode === Garnish.SPACE_KEY) {\n                        ev.preventDefault();\n\n                        $(ev.currentTarget).trigger('click');\n                    }\n                });\n            }\n        } else {\n            if (!this.$selectAllContainer.siblings().length) {\n                this.$selectAllContainer.parent('.header').remove();\n            }\n            this.$selectAllContainer.remove();\n        }\n\n        // Exporters setup\n        // -------------------------------------------------------------\n\n        this.exporters = response.exporters;\n        this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n        if (this.exporters && this.exporters.length) {\n            this.$exportBtn.removeClass('hidden');\n        } else {\n            this.$exportBtn.addClass('hidden');\n        }\n\n        // Create the view\n        // -------------------------------------------------------------\n\n        // Should we make the view selectable?\n        var selectable = (this.actions || this.settings.selectable);\n\n        this.view = this.createView(this.getSelectedViewMode(), {\n            context: this.settings.context,\n            batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n            params: params,\n            selectable: selectable,\n            multiSelect: (this.actions || this.settings.multiSelect),\n            checkboxMode: !!this.actions,\n            onSelectionChange: this._handleSelectionChange.bind(this)\n        });\n\n        // Auto-select elements\n        // -------------------------------------------------------------\n\n        if (this._autoSelectElements) {\n            if (selectable) {\n                for (var i = 0; i < this._autoSelectElements.length; i++) {\n                    this.view.selectElementById(this._autoSelectElements[i]);\n                }\n            }\n\n            this._autoSelectElements = null;\n        }\n\n        // Trigger the event\n        // -------------------------------------------------------------\n\n        this.onUpdateElements();\n    },\n\n    _updateBadgeCounts: function(badgeCounts) {\n        for (let sourceKey in badgeCounts) {\n            if (badgeCounts.hasOwnProperty(sourceKey)) {\n                const $source = this.getSourceByKey(sourceKey);\n                if ($source) {\n                    let $badge = $source.children('.badge');\n                    if (badgeCounts[sourceKey] !== null) {\n                        if (!$badge.length) {\n                            $badge = $('<span class=\"badge\"/>').appendTo($source);\n                        }\n                        $badge.text(badgeCounts[sourceKey]);\n                    } else if ($badge) {\n                        $badge.remove();\n                    }\n                }\n            }\n        }\n    },\n\n    _countResults: function() {\n        return new Promise((resolve, reject) => {\n            if (this.totalResults !== null) {\n                resolve(this.totalResults);\n            } else {\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                // Make sure we've got an active result set ID\n                if (this.resultSet === null) {\n                    this.resultSet = Math.floor(Math.random() * 100000000);\n                }\n                params.resultSet = this.resultSet;\n\n                Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    if (response.data.resultSet == this.resultSet) {\n                        this.totalResults = response.data.count;\n                        resolve(response.data.count);\n                    } else {\n                        reject();\n                    }\n                }).catch(reject);\n            }\n        });\n    },\n\n    _createTriggers: function() {\n        var triggers = [],\n            safeMenuActions = [],\n            destructiveMenuActions = [];\n\n        var i;\n\n        for (i = 0; i < this.actions.length; i++) {\n            var action = this.actions[i];\n\n            if (action.trigger) {\n                var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                    .data('action', action)\n                    .append(action.trigger);\n\n                this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                triggers.push($form);\n            } else {\n                if (!action.destructive) {\n                    safeMenuActions.push(action);\n                } else {\n                    destructiveMenuActions.push(action);\n                }\n            }\n        }\n\n        var $btn;\n\n        if (safeMenuActions.length || destructiveMenuActions.length) {\n            var $menuTrigger = $('<form/>');\n\n            $btn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn',\n                'data-icon': 'settings',\n                title: Craft.t('app', 'Actions'),\n            }).appendTo($menuTrigger);\n\n            var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n            if ($safeList) {\n                $safeList.appendTo($menu);\n            }\n\n            if ($safeList && $destructiveList) {\n                $('<hr/>').appendTo($menu);\n            }\n\n            if ($destructiveList) {\n                $destructiveList.appendTo($menu);\n            }\n\n            triggers.push($menuTrigger);\n        }\n\n        this._$triggers = $();\n\n        for (i = 0; i < triggers.length; i++) {\n            var $div = $('<div/>').append(triggers[i]);\n            this._$triggers = this._$triggers.add($div);\n        }\n\n        this._$triggers.appendTo(this.$toolbar);\n        Craft.appendHeadHtml(this.actionsHeadHtml);\n        Craft.appendFootHtml(this.actionsFootHtml);\n\n        Craft.initUiElements(this._$triggers);\n\n        if ($btn) {\n            $btn.data('menubtn').on('optionSelect', this._handleMenuActionTriggerSubmit.bind(this));\n        }\n    },\n\n    _showExportHud: function() {\n        this.$exportBtn.addClass('active');\n\n        var $form = $('<form/>', {\n            'class': 'export-form'\n        });\n\n        var typeOptions = [];\n        for (var i = 0; i < this.exporters.length; i++) {\n            typeOptions.push({label: this.exporters[i].name, value: this.exporters[i].type});\n        }\n        var $typeField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Export Type'),\n            options: typeOptions,\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        var $formatField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Format'),\n            options: [\n                {label: 'CSV', value: 'csv'}, {label: 'JSON', value: 'json'}, {label: 'XML', value: 'xml'},\n            ],\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        let $typeSelect = $typeField.find('select');\n        this.addListener($typeSelect, 'change', () => {\n            let type = $typeSelect.val();\n            if (this.exportersByType[type].formattable) {\n                $formatField.removeClass('hidden');\n            } else {\n                $formatField.addClass('hidden');\n            }\n        });\n        $typeSelect.trigger('change');\n\n        // Only show the Limit field if there aren't any selected elements\n        var selectedElementIds = this.view.getSelectedElementIds();\n\n        if (!selectedElementIds.length) {\n            var $limitField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Limit'),\n                placeholder: Craft.t('app', 'No limit'),\n                type: 'number',\n                min: 1\n            }).appendTo($form);\n        }\n\n        $('<button/>', {\n            type: 'submit',\n            'class': 'btn submit fullwidth',\n            text: Craft.t('app', 'Export')\n        }).appendTo($form)\n\n        var $spinner = $('<div/>', {\n            'class': 'spinner hidden'\n        }).appendTo($form);\n\n        var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n        hud.on('hide', () => {\n            this.$exportBtn.removeClass('active');\n        });\n\n        var submitting = false;\n\n        this.addListener($form, 'submit', function(ev) {\n            ev.preventDefault();\n            if (submitting) {\n                return;\n            }\n\n            submitting = true;\n            $spinner.removeClass('hidden');\n\n            var params = this.getViewParams();\n            delete params.criteria.offset;\n            delete params.criteria.limit;\n            delete params.collapsedElementIds;\n\n            params.type = $typeField.find('select').val();\n            params.format = $formatField.find('select').val();\n\n            if (selectedElementIds.length) {\n                params.criteria.id = selectedElementIds;\n            } else {\n                var limit = parseInt($limitField.find('input').val());\n                if (limit && !isNaN(limit)) {\n                    params.criteria.limit = limit;\n                }\n            }\n\n            if (Craft.csrfTokenValue) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                .then(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                })\n                .catch(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                });\n        });\n    },\n\n    _createMenuTriggerList: function(actions, destructive) {\n        if (actions && actions.length) {\n            var $ul = $('<ul/>');\n\n            for (var i = 0; i < actions.length; i++) {\n                $('<li/>').append($('<a/>', {\n                    id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                    'class': (destructive ? 'error' : null),\n                    data: {\n                        action: actions[i],\n                    },\n                    text: actions[i].name\n                })).appendTo($ul);\n            }\n\n            return $ul;\n        }\n    }\n}, {\n    defaults: {\n        context: 'index',\n        modal: null,\n        storageKey: null,\n        criteria: null,\n        batchSize: 100,\n        disabledElementIds: [],\n        selectable: false,\n        multiSelect: false,\n        buttonContainer: null,\n        hideSidebar: false,\n        toolbarSelector: '.toolbar:first',\n        refreshSourcesAction: 'element-indexes/get-source-tree-html',\n        updateElementsAction: 'element-indexes/get-elements',\n        countElementsAction: 'element-indexes/count-elements',\n        submitActionsAction: 'element-indexes/perform-action',\n        defaultSiteId: null,\n        defaultSource: null,\n        canHaveDrafts: false,\n\n        onAfterInit: $.noop,\n        onSelectSource: $.noop,\n        onSelectSite: $.noop,\n        onUpdateElements: $.noop,\n        onSelectionChange: $.noop,\n        onEnableElements: $.noop,\n        onDisableElements: $.noop,\n        onAfterAction: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend({\n    $container: null,\n    $loadingMoreSpinner: null,\n    $elementContainer: null,\n    $scroller: null,\n\n    elementIndex: null,\n    thumbLoader: null,\n    elementSelect: null,\n\n    loadingMore: false,\n\n    _totalVisible: null,\n    _morePending: null,\n    _handleEnableElements: null,\n    _handleDisableElements: null,\n\n    init: function(elementIndex, container, settings) {\n        this.elementIndex = elementIndex;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n        // Create a \"loading-more\" spinner\n        this.$loadingMoreSpinner = $(\n            '<div class=\"centeralign hidden\">' +\n            '<div class=\"spinner loadingmore\"></div>' +\n            '</div>'\n        ).insertAfter(this.$container);\n\n        // Get the actual elements container and its child elements\n        this.$elementContainer = this.getElementContainer();\n        var $elements = this.$elementContainer.children();\n\n        this.setTotalVisible($elements.length);\n        this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n        // Instantiate the thumb loader\n        this.thumbLoader = new Craft.ElementThumbLoader();\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select(\n                this.$elementContainer,\n                $elements.filter(':not(.disabled)'),\n                {\n                    multi: this.settings.multiSelect,\n                    vertical: this.isVerticalList(),\n                    handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                    filter: ':not(a):not(.toggle)',\n                    checkboxMode: this.settings.checkboxMode,\n                    onSelectionChange: this.onSelectionChange.bind(this)\n                });\n\n            this._handleEnableElements = ev => {\n                this.elementSelect.addItems(ev.elements);\n            };\n\n            this._handleDisableElements = ev => {\n                this.elementSelect.removeItems(ev.elements);\n            };\n\n            this.elementIndex.on('enableElements', this._handleEnableElements);\n            this.elementIndex.on('disableElements', this._handleDisableElements);\n        }\n\n        // Enable inline element editing if this is an index page\n        if (this.settings.context === 'index') {\n            this._handleElementEditing = ev => {\n                var $target = $(ev.target);\n\n                if ($target.prop('nodeName') === 'A') {\n                    // Let the link do its thing\n                    return;\n                }\n\n                var $element;\n\n                if ($target.hasClass('element')) {\n                    $element = $target;\n                } else {\n                    $element = $target.closest('.element');\n\n                    if (!$element.length) {\n                        return;\n                    }\n                }\n\n                if (Garnish.hasAttr($element, 'data-editable')) {\n                    this.createElementEditor($element);\n                }\n            };\n\n            if (!this.elementIndex.trashed) {\n                this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                if ($.isTouchCapable()) {\n                    this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                }\n            }\n        }\n\n        // Give sub-classes a chance to do post-initialization stuff here\n        this.afterInit();\n\n        // Set up lazy-loading\n        if (this.settings.batchSize) {\n            if (this.settings.context === 'index') {\n                this.$scroller = Garnish.$scrollContainer;\n            } else {\n                this.$scroller = this.elementIndex.$main;\n            }\n\n            this.$scroller.scrollTop(0);\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }\n    },\n\n    getElementContainer: function() {\n        throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n    },\n\n    afterInit: function() {\n    },\n\n    getAllElements: function() {\n        return this.$elementContainer.children();\n    },\n\n    getEnabledElements: function() {\n        return this.$elementContainer.children(':not(.disabled)');\n    },\n\n    getElementById: function(id) {\n        var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n        if ($element.length) {\n            return $element;\n        } else {\n            return null;\n        }\n    },\n\n    getSelectedElements: function() {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        return this.elementSelect.$selectedItems;\n    },\n\n    getSelectedElementIds: function() {\n        let $selectedElements;\n        try {\n            $selectedElements = this.getSelectedElements();\n        } catch (e) {\n        }\n\n        let ids = [];\n        if ($selectedElements) {\n            for (var i = 0; i < $selectedElements.length; i++) {\n                ids.push($selectedElements.eq(i).data('id'));\n            }\n        }\n        return ids;\n    },\n\n    selectElement: function($element) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        this.elementSelect.selectItem($element, true);\n        return true;\n    },\n\n    selectElementById: function(id) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        var $element = this.getElementById(id);\n\n        if ($element) {\n            this.elementSelect.selectItem($element, true);\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    selectAllElements: function() {\n        this.elementSelect.selectAll();\n    },\n\n    deselectAllElements: function() {\n        this.elementSelect.deselectAll();\n    },\n\n    isVerticalList: function() {\n        return false;\n    },\n\n    getTotalVisible: function() {\n        return this._totalVisible;\n    },\n\n    setTotalVisible: function(totalVisible) {\n        this._totalVisible = totalVisible;\n    },\n\n    getMorePending: function() {\n        return this._morePending;\n    },\n\n    setMorePending: function(morePending) {\n        this._morePending = morePending;\n    },\n\n    /**\n     * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n     */\n    maybeLoadMore: function() {\n        if (this.canLoadMore()) {\n            this.loadMore();\n        }\n    },\n\n    /**\n     * Returns whether the user has reached the bottom of the scroll area.\n     */\n    canLoadMore: function() {\n        if (!this.getMorePending() || !this.settings.batchSize) {\n            return false;\n        }\n\n        // Check if the user has reached the bottom of the scroll area\n        var containerHeight;\n\n        if (this.$scroller[0] === Garnish.$win[0]) {\n            var winHeight = Garnish.$win.innerHeight(),\n                winScrollTop = Garnish.$win.scrollTop(),\n                containerOffset = this.$container.offset().top;\n            containerHeight = this.$container.height();\n\n            return (winHeight + winScrollTop >= containerOffset + containerHeight);\n        } else {\n            var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                containerScrollTop = this.$scroller.scrollTop();\n            containerHeight = this.$scroller.outerHeight();\n\n            return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n        }\n    },\n\n    /**\n     * Loads the next batch of elements.\n     */\n    loadMore: function() {\n        if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n            return;\n        }\n\n        this.loadingMore = true;\n        this.$loadingMoreSpinner.removeClass('hidden');\n        this.removeListener(this.$scroller, 'scroll');\n\n        Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {\n            data: this.getLoadMoreParams(),\n        }).then(response => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n\n            let $newElements = $(response.data.html);\n\n            this.appendElements($newElements);\n            Craft.appendHeadHtml(response.data.headHtml);\n            Craft.appendFootHtml(response.data.footHtml);\n\n            if (this.elementSelect) {\n                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                this.elementIndex.updateActionTriggers();\n            }\n\n            this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n            this.setMorePending($newElements.length == this.settings.batchSize);\n\n            // Is there room to load more right now?\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }).catch(e => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n        });\n    },\n\n    getLoadMoreParams: function() {\n        // Use the same params that were passed when initializing this view\n        var params = $.extend(true, {}, this.settings.params);\n        params.criteria.offset = this.getTotalVisible();\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        $newElements.appendTo(this.$elementContainer);\n        this.thumbLoader.load($newElements);\n        this.onAppendElements($newElements);\n    },\n\n    onAppendElements: function($newElements) {\n        this.settings.onAppendElements($newElements);\n        this.trigger('appendElements', {\n            newElements: $newElements\n        });\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            elementIndex: this.elementIndex\n        });\n    },\n\n    disable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.disable();\n        }\n    },\n\n    enable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.enable();\n        }\n    },\n\n    destroy: function() {\n        // Remove the \"loading-more\" spinner, since we added that outside of the view container\n        this.$loadingMoreSpinner.remove();\n\n        // Kill the thumb loader\n        this.thumbLoader.destroy();\n        delete this.thumbLoader;\n\n        // Delete the element select\n        if (this.elementSelect) {\n            this.elementIndex.off('enableElements', this._handleEnableElements);\n            this.elementIndex.off('disableElements', this._handleDisableElements);\n\n            this.elementSelect.destroy();\n            delete this.elementSelect;\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        context: 'index',\n        batchSize: null,\n        params: null,\n        selectable: false,\n        multiSelect: false,\n        checkboxMode: false,\n        loadMoreElementsAction: 'element-indexes/get-more-elements',\n        onAppendElements: $.noop,\n        onSelectionChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend({\n    thumbLoader: null,\n    elementSelect: null,\n    elementSort: null,\n    modal: null,\n    elementEditor: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addElementBtn: null,\n    $addElementBtnContainer: null,\n\n    _initialized: false,\n\n    init: function(settings) {\n        // Normalize the settings and set them\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n        // Apply the storage key prefix\n        if (this.settings.modalStorageKey) {\n            this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n        }\n\n        // No reason for this to be sortable if we're only allowing 1 selection\n        if (this.settings.limit == 1) {\n            this.settings.sortable = false;\n        }\n\n        this.$container = this.getContainer();\n\n        // Store a reference to this class\n        this.$container.data('elementSelect', this);\n\n        this.$elementsContainer = this.getElementsContainer();\n\n        this.$addElementBtn = this.getAddElementsBtn();\n        if (this.$addElementBtn) {\n            this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n            if (!this.$addElementBtnContainer.length) {\n                this.$addElementBtnContainer = null;\n            }\n        }\n\n        this.thumbLoader = new Craft.ElementThumbLoader();\n\n        this.initElementSelect();\n        this.initElementSort();\n        this.resetElements();\n\n        if (this.$addElementBtn) {\n            this.addListener(this.$addElementBtn, 'activate', 'showModal');\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            this._initialized = true;\n        });\n    },\n\n    get totalSelected() {\n        return this.$elements.length;\n    },\n\n    getContainer: function() {\n        return $('#' + this.settings.id);\n    },\n\n    getElementsContainer: function() {\n        return this.$container.children('.elements');\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.children();\n    },\n\n    getAddElementsBtn: function() {\n        return this.$container.find('.btn.add:first');\n    },\n\n    initElementSelect: function() {\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select({\n                multi: this.settings.sortable,\n                filter: ':not(.delete)'\n            });\n        }\n    },\n\n    initElementSort: function() {\n        if (this.settings.sortable) {\n            this.elementSort = new Garnish.DragSort({\n                container: this.$elementsContainer,\n                filter: (this.settings.selectable ? () => {\n                    // Only return all the selected items if the target item is selected\n                    if (this.elementSort.$targetItem.hasClass('sel')) {\n                        return this.elementSelect.getSelectedItems();\n                    } else {\n                        return this.elementSort.$targetItem;\n                    }\n                } : null),\n                ignoreHandleSelector: '.delete',\n                axis: this.getElementSortAxis(),\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                onSortChange: (this.settings.selectable ? () => {\n                    this.elementSelect.resetItemOrder();\n                } : null)\n            });\n        }\n    },\n\n    getElementSortAxis: function() {\n        return (this.settings.viewMode === 'list' ? 'y' : null);\n    },\n\n    canAddMoreElements: function() {\n        return (!this.settings.limit || this.$elements.length < this.settings.limit);\n    },\n\n    updateAddElementsBtn: function() {\n        if (this.canAddMoreElements()) {\n            this.enableAddElementsBtn();\n        } else {\n            this.disableAddElementsBtn();\n        }\n    },\n\n    disableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.addClass('hidden');\n        }\n    },\n\n    enableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.removeClass('hidden');\n        }\n    },\n\n    resetElements: function() {\n        if (this.$elements !== null) {\n            this.removeElements(this.$elements);\n        } else {\n            this.$elements = $();\n        }\n\n        this.addElements(this.getElements());\n    },\n\n    addElements: function($elements) {\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect.addItems($elements);\n        }\n\n        if (this.settings.sortable) {\n            this.elementSort.addItems($elements);\n        }\n\n        if (this.settings.editable) {\n            this._handleShowElementEditor = ev => {\n                var $element = $(ev.currentTarget);\n                if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                    this.elementEditor = this.createElementEditor($element);\n                }\n            };\n\n            this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n            if ($.isTouchCapable()) {\n                this.addListener($elements, 'taphold', this._handleShowElementEditor);\n            }\n        }\n\n        $elements.find('.delete').on('click dblclick', ev => {\n            this.removeElement($(ev.currentTarget).closest('.element'));\n            // Prevent this from acting as one of a double-click\n            ev.stopPropagation();\n        });\n\n        this.$elements = this.$elements.add($elements);\n\n        this.updateAddElementsBtn();\n\n        this.onAddElements();\n    },\n\n    createElementEditor: function($element, settings) {\n        if (!settings) {\n            settings = {};\n        }\n        settings.prevalidate = this.settings.prevalidate;\n        return Craft.createElementEditor(this.settings.elementType, $element, settings);\n    },\n\n    removeElements: function($elements) {\n        if (this.settings.selectable) {\n            this.elementSelect.removeItems($elements);\n        }\n\n        if (this.modal) {\n            var ids = [];\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $elements.eq(i).data('id');\n\n                if (id) {\n                    ids.push(id);\n                }\n            }\n\n            if (ids.length) {\n                this.modal.elementIndex.enableElementsById(ids);\n            }\n        }\n\n        // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n        $elements.children('input').prop('disabled', true);\n\n        this.$elements = this.$elements.not($elements);\n        this.updateAddElementsBtn();\n\n        this.onRemoveElements();\n    },\n\n    removeElement: function($element) {\n        this.removeElements($element);\n        this.animateElementAway($element, () => {\n            $element.remove();\n        });\n    },\n\n    animateElementAway: function($element, callback) {\n        $element.css('z-index', 0);\n\n        var animateCss = {\n            opacity: -1\n        };\n        animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n        if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n            animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n        }\n\n        // Pause the draft editor\n        if (window.draftEditor) {\n            window.draftEditor.pause();\n        }\n\n        $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n            callback();\n\n            // Resume the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.resume();\n            }\n        });\n    },\n\n    showModal: function() {\n        // Make sure we haven't reached the limit\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        if (!this.modal) {\n            this.modal = this.createModal();\n        } else {\n            this.modal.show();\n        }\n    },\n\n    createModal: function() {\n        return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n    },\n\n    getModalSettings: function() {\n        return $.extend({\n            closeOtherModals: false,\n            storageKey: this.modalStorageKey,\n            sources: this.settings.sources,\n            criteria: this.settings.criteria,\n            multiSelect: (this.settings.limit != 1),\n            showSiteMenu: this.settings.showSiteMenu,\n            disabledElementIds: this.getDisabledElementIds(),\n            onSelect: this.onModalSelect.bind(this)\n        }, this.settings.modalSettings);\n    },\n\n    getSelectedElementIds: function() {\n        var ids = [];\n\n        for (var i = 0; i < this.$elements.length; i++) {\n            ids.push(this.$elements.eq(i).data('id'));\n        }\n\n        return ids;\n    },\n\n    getDisabledElementIds: function() {\n        var ids = this.getSelectedElementIds();\n\n        if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n            ids.push(this.settings.sourceElementId);\n        }\n\n        if (this.settings.disabledElementIds) {\n            ids.push(...this.settings.disabledElementIds);\n        }\n\n        return ids;\n    },\n\n    onModalSelect: function(elements) {\n        if (this.settings.limit) {\n            // Cut off any excess elements\n            var slotsLeft = this.settings.limit - this.$elements.length;\n\n            if (elements.length > slotsLeft) {\n                elements = elements.slice(0, slotsLeft);\n            }\n        }\n\n        this.selectElements(elements);\n        this.updateDisabledElementsInModal();\n    },\n\n    selectElements: function(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            let elementInfo = elements[i],\n                $element = this.createNewElement(elementInfo);\n\n            this.appendElement($element);\n            this.addElements($element);\n            this.animateElementIntoPlace(elementInfo.$element, $element);\n\n            // Override the element reference with the new one\n            elementInfo.$element = $element;\n        }\n\n        this.onSelectElements(elements);\n    },\n\n    createNewElement: function(elementInfo) {\n        var $element = elementInfo.$element.clone();\n\n        // Make a couple tweaks\n        Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n        $element.addClass('removable');\n        $element.prepend(`<input type=\"hidden\" name=\"${this.settings.name}${this.settings.single ? '' : '[]'}\" value=\"${elementInfo.id}\">` +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        return $element;\n    },\n\n    appendElement: function($element) {\n        $element.appendTo(this.$elementsContainer);\n    },\n\n    animateElementIntoPlace: function($modalElement, $inputElement) {\n        var origOffset = $modalElement.offset(),\n            destOffset = $inputElement.offset(),\n            $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n        $inputElement.css('visibility', 'hidden');\n\n        $helper.css({\n            position: 'absolute',\n            zIndex: 10000,\n            top: origOffset.top,\n            left: origOffset.left\n        });\n\n        var animateCss = {\n            top: destOffset.top,\n            left: destOffset.left\n        };\n\n        $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n            $helper.remove();\n            $inputElement.css('visibility', 'visible');\n        });\n    },\n\n    updateDisabledElementsInModal: function() {\n        if (this.modal.elementIndex) {\n            this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n        }\n    },\n\n    getElementById: function(id) {\n        for (var i = 0; i < this.$elements.length; i++) {\n            var $element = this.$elements.eq(i);\n\n            if ($element.data('id') == id) {\n                return $element;\n            }\n        }\n    },\n\n    onSelectElements: function(elements) {\n        this.trigger('selectElements', {elements});\n        this.settings.onSelectElements(elements);\n\n        if (window.draftEditor) {\n            window.draftEditor.checkForm();\n        }\n    },\n\n    onAddElements: function () {\n        this.trigger('addElements');\n        this.settings.onAddElements();\n    },\n\n    onRemoveElements: function() {\n        this.trigger('removeElements');\n        this.settings.onRemoveElements();\n    }\n}, {\n    ADD_FX_DURATION: 200,\n    REMOVE_FX_DURATION: 200,\n\n    defaults: {\n        id: null,\n        name: null,\n        fieldId: null,\n        elementType: null,\n        sources: null,\n        criteria: {},\n        allowSelfRelations: false,\n        sourceElementId: null,\n        disabledElementIds: null,\n        viewMode: 'list',\n        single: false,\n        limit: null,\n        showSiteMenu: false,\n        modalStorageKey: null,\n        modalSettings: {},\n        onAddElements: $.noop,\n        onSelectElements: $.noop,\n        onRemoveElements: $.noop,\n        sortable: true,\n        selectable: true,\n        editable: true,\n        prevalidate: false,\n        editorSettings: {}\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend({\n    elementType: null,\n    elementIndex: null,\n\n    $body: null,\n    $selectBtn: null,\n    $sidebar: null,\n    $sources: null,\n    $sourceToggles: null,\n    $main: null,\n    $search: null,\n    $elements: null,\n    $tbody: null,\n    $primaryButtons: null,\n    $secondaryButtons: null,\n    $cancelBtn: null,\n    $footerSpinner: null,\n\n    init: function(elementType, settings) {\n        this.elementType = elementType;\n        this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n        // Build the modal\n        var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n            $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n            $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n        this.base($container, this.settings);\n\n        this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n        this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$primaryButtons);\n        this.$selectBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn disabled submit',\n            text: Craft.t('app', 'Select'),\n        }).appendTo(this.$primaryButtons);\n\n        this.$body = $body;\n\n        this.addListener(this.$cancelBtn, 'activate', 'cancel');\n        this.addListener(this.$selectBtn, 'activate', 'selectElements');\n    },\n\n    onFadeIn: function() {\n        if (!this.elementIndex) {\n            this._createElementIndex();\n        } else {\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.elementIndex.$search.trigger('focus');\n            }\n        }\n\n        this.base();\n    },\n\n    onSelectionChange: function() {\n        this.updateSelectBtnState();\n    },\n\n    updateSelectBtnState: function() {\n        if (this.$selectBtn) {\n            if (this.elementIndex.getSelectedElements().length) {\n                this.enableSelectBtn();\n            } else {\n                this.disableSelectBtn();\n            }\n        }\n    },\n\n    enableSelectBtn: function() {\n        this.$selectBtn.removeClass('disabled');\n    },\n\n    disableSelectBtn: function() {\n        this.$selectBtn.addClass('disabled');\n    },\n\n    enableCancelBtn: function() {\n        this.$cancelBtn.removeClass('disabled');\n    },\n\n    disableCancelBtn: function() {\n        this.$cancelBtn.addClass('disabled');\n    },\n\n    showFooterSpinner: function() {\n        this.$footerSpinner.removeClass('hidden');\n    },\n\n    hideFooterSpinner: function() {\n        this.$footerSpinner.addClass('hidden');\n    },\n\n    cancel: function() {\n        if (!this.$cancelBtn.hasClass('disabled')) {\n            this.hide();\n        }\n    },\n\n    selectElements: function() {\n        if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n            // TODO: This code shouldn't know about views' elementSelect objects\n            this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                elementInfo = this.getElementInfo($selectedElements);\n\n            this.onSelect(elementInfo);\n\n            if (this.settings.disableElementsOnSelect) {\n                this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n            }\n\n            if (this.settings.hideOnSelect) {\n                this.hide();\n            }\n        }\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $element = $($selectedElements[i]);\n            var elementInfo = Craft.getElementInfo($element);\n\n            info.push(elementInfo);\n        }\n\n        return info;\n    },\n\n    show: function() {\n        this.updateSelectBtnState();\n        this.base();\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo);\n    },\n\n    disable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.enable();\n        }\n\n        this.base();\n    },\n\n    _createElementIndex: function() {\n        // Get the modal body HTML based on the settings\n        var data = {\n            context: 'modal',\n            elementType: this.elementType,\n            sources: this.settings.sources\n        };\n\n        if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n            data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n        }\n\n        Craft.postActionRequest('elements/get-modal-body', data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.$body.html(response.html);\n\n                if (this.$body.has('.sidebar:not(.hidden)').length) {\n                    this.$body.addClass('has-sidebar');\n                }\n\n                // Initialize the element index\n                this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                    context: 'modal',\n                    modal: this,\n                    storageKey: this.settings.storageKey,\n                    criteria: this.settings.criteria,\n                    disabledElementIds: this.settings.disabledElementIds,\n                    selectable: true,\n                    multiSelect: this.settings.multiSelect,\n                    buttonContainer: this.$secondaryButtons,\n                    onSelectionChange: this.onSelectionChange.bind(this),\n                    hideSidebar: this.settings.hideSidebar,\n                    defaultSiteId: this.settings.defaultSiteId,\n                    defaultSource: this.settings.defaultSource\n                });\n\n                // Double-clicking or double-tapping should select the elements\n                this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                    // Make sure the touch targets are the same\n                    // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                    if (touchData.firstTap.target === touchData.secondTap.target) {\n                        this.selectElements();\n                    }\n                });\n            }\n        });\n    }\n}, {\n    defaults: {\n        resizable: true,\n        storageKey: null,\n        sources: null,\n        criteria: null,\n        multiSelect: false,\n        showSiteMenu: null,\n        disabledElementIds: [],\n        disableElementsOnSelect: false,\n        hideOnSelect: true,\n        onCancel: $.noop,\n        onSelect: $.noop,\n        hideSidebar: false,\n        defaultSiteId: null,\n        defaultSource: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend({\n    $source: null,\n    $target: null,\n    $form: null,\n    settings: null,\n\n    listening: null,\n    timeout: null,\n\n    init: function(source, target, settings) {\n        this.$source = $(source);\n        this.$target = $(target);\n        this.$form = this.$source.closest('form');\n\n        this.setSettings(settings);\n\n        this.startListening();\n    },\n\n    setNewSource: function(source) {\n        var listening = this.listening;\n        this.stopListening();\n\n        this.$source = $(source);\n\n        if (listening) {\n            this.startListening();\n        }\n    },\n\n    startListening: function() {\n        if (this.listening) {\n            return;\n        }\n\n        this.listening = true;\n\n        this.addListener(this.$source, 'input', 'onSourceTextChange');\n        this.addListener(this.$target, 'input', 'onTargetTextChange');\n        this.addListener(this.$form, 'submit', 'onFormSubmit');\n    },\n\n    stopListening: function() {\n        if (!this.listening) {\n            return;\n        }\n\n        this.listening = false;\n\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.removeAllListeners(this.$source);\n        this.removeAllListeners(this.$target);\n        this.removeAllListeners(this.$form);\n    },\n\n    onSourceTextChange: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout(this.updateTarget.bind(this), 250);\n    },\n\n    onTargetTextChange: function() {\n        if (this.$target.get(0) === document.activeElement) {\n            this.stopListening();\n        }\n    },\n\n    onFormSubmit: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.updateTarget();\n    },\n\n    updateTarget: function() {\n        if (!this.$target.is(':visible')) {\n            return;\n        }\n\n        var sourceVal = this.$source.val();\n\n        if (typeof sourceVal === 'undefined') {\n            // The source input may not exist anymore\n            return;\n        }\n\n        var targetVal = this.generateTargetValue(sourceVal);\n\n        this.$target.val(targetVal);\n\n        for (let i = 0; i < this.$target.length; i++) {\n            this.$target[i].dispatchEvent(new InputEvent('input', {\n                inputType: 'insertText',\n            }));\n            this.$target[i].dispatchEvent(new Event('input'));\n        }\n\n        // If the target already has focus, select its whole value to mimic\n        // the behavior if the value had already been generated and they just tabbed in\n        if (this.$target.is(':focus')) {\n            Craft.selectFullValue(this.$target);\n        }\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return sourceVal;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Tab manager\n */\nCraft.Tabs = Garnish.Base.extend({\n    $container: null,\n    $ul: null,\n    $menuBtn: null,\n    $tabs: null,\n    $selectedTab: null,\n    $focusableTab: null,\n    menu: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$ul = this.$container.find('> ul:first');\n        this.$tabs = this.$ul.find('> li > a');\n        this.$selectedTab = this.$tabs.filter('.sel:first');\n        this.$focusableTab = this.$tabs.filter('[tabindex=0]:first');\n        this.$menuBtn = this.$container.find('> .menubtn:first').menubtn();\n        this.menu = this.$menuBtn.data('menubtn').menu;\n\n        // Is there already a tab manager?\n        if (this.$container.data('tabs')) {\n            Garnish.log('Double-instantiating a tab manager on an element');\n            this.$container.data('tabs').destroy();\n        }\n\n        this.$container.data('tabs', this);\n\n        for (let i = 0; i < this.$tabs.length; i++) {\n            const $a = this.$tabs.eq(i);\n\n            // Does it link to an anchor?\n            const href = $a.attr('href');\n            if (href && href.charAt(0) === '#') {\n                this.addListener($a, 'keydown', ev => {\n                    if ([Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    }\n                });\n                this.addListener($a, 'click', ev => {\n                    ev.preventDefault();\n                    const $a = $(ev.currentTarget);\n                    this.selectTab(ev.currentTarget);\n                    this.makeTabFocusable(ev.currentTarget);\n                });\n\n                if (href.substr(1) === window.LOCATION_HASH) {\n                    $initialTab = $a;\n                }\n            }\n\n            this.addListener($a, 'keydown', ev => {\n                if (\n                    [Garnish.LEFT_KEY, Garnish.RIGHT_KEY].includes(ev.keyCode) &&\n                    $.contains(this.$ul[0], ev.currentTarget)\n                ) {\n                    let $tab;\n                    if (ev.keyCode === (Craft.orientation === 'ltr' ? Garnish.LEFT_KEY : Garnish.RIGHT_KEY)) {\n                        $tab = $(ev.currentTarget).parent().prev('li').children('a');\n                    } else {\n                        $tab = $(ev.currentTarget).parent().next('li').children('a');\n                    }\n                    if ($tab.length) {\n                        ev.preventDefault();\n                        this.makeTabFocusable($tab);\n                        $tab.focus();\n                        this.scrollToTab($tab);\n                    }\n                }\n            });\n        }\n\n        this.updateMenuBtn();\n\n        Garnish.$win.on('resize', () => {\n            this.updateMenuBtn();\n        });\n\n        // Prevent menu options from updating the URL\n        this.menu.$options.on('click', ev => {\n            const $option = $(ev.currentTarget);\n            if ($option.attr('href').charAt(0) === '#') {\n                ev.preventDefault();\n            }\n        });\n\n        this.menu.on('optionselect', ev => {\n            this.selectTab($(ev.selectedOption).data('id'))\n        });\n    },\n\n    selectTab: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$selectedTab[0]) {\n            return;\n        }\n\n        this.deselectTab();\n        this.$selectedTab = $tab.addClass('sel');\n        this.makeTabFocusable($tab);\n        this.scrollToTab($tab);\n\n        this.menu.$options.removeClass('sel');\n        this.menu.$options.filter(`[data-id=\"${$tab.data('id')}\"]`).addClass('sel');\n\n        this.trigger('selectTab', {\n            $tab: $tab,\n        });\n    },\n\n    deselectTab: function() {\n        const $tab = this.$selectedTab.removeClass('sel');\n        this.$selectedTab = null;\n\n        this.trigger('deselectTab', {\n            $tab: $tab,\n        });\n    },\n\n    makeTabFocusable: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$focusableTab[0]) {\n            return;\n        }\n\n        this.$focusableTab.attr('tabindex', '-1');\n        this.$focusableTab = $tab.attr('tabindex', '0');\n    },\n\n    scrollToTab: function(tab) {\n        const $tab = this._getTab(tab);\n        const scrollLeft = this.$ul.scrollLeft();\n        const tabOffset = $tab.offset().left;\n        const elemScrollOffset = tabOffset - this.$ul.offset().left;\n        let targetScrollLeft = false;\n\n        // Is the tab hidden on the left?\n        if (elemScrollOffset < 0) {\n            targetScrollLeft = scrollLeft + elemScrollOffset - 24;\n        } else {\n            const tabWidth = $tab.outerWidth();\n            const ulWidth = this.$ul.prop('clientWidth');\n\n            // Is it hidden to the right?\n            if (elemScrollOffset + tabWidth > ulWidth) {\n                targetScrollLeft = scrollLeft + (elemScrollOffset - (ulWidth - tabWidth)) + 24;\n            }\n        }\n\n        if (targetScrollLeft !== false) {\n            this.$ul.scrollLeft(targetScrollLeft);\n        }\n    },\n\n    updateMenuBtn: function() {\n        if (Math.floor(this.$ul.prop('scrollWidth') - 48) > this.$container.prop('clientWidth')) {\n            this.$ul.addClass('scrollable');\n            this.$menuBtn.removeClass('hidden');\n        } else {\n            this.$ul.removeClass('scrollable');\n            this.$menuBtn.addClass('hidden');\n        }\n    },\n\n    _getTab: function(tab) {\n        if (tab instanceof jQuery) {\n            return tab;\n        }\n\n        if (tab instanceof HTMLElement) {\n            return $(tab);\n        }\n\n        if (typeof tab !== 'string') {\n            throw 'Invalid tab ID';\n        }\n\n        const $tab = this.$tabs.filter(`[data-id=\"${tab}\"]`);\n\n        if (!$tab.length) {\n            throw `Invalid tab ID: ${tab}`;\n        }\n\n        return $tab;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend({\n    settings: null,\n    totalItems: null,\n    sorter: null,\n\n    $noItems: null,\n    $table: null,\n    $tbody: null,\n    $deleteBtns: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.AdminTable.defaults);\n\n        if (!this.settings.allowDeleteAll) {\n            this.settings.minItems = 1;\n        }\n\n        this.$noItems = $(this.settings.noItemsSelector);\n        this.$table = $(this.settings.tableSelector);\n        this.$tbody = this.$table.children('tbody');\n        this.totalItems = this.$tbody.children().length;\n\n        if (this.settings.sortable) {\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                onSortChange: this.reorderItems.bind(this),\n            });\n        }\n\n        this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n        this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n        this.updateUI();\n    },\n\n    addRow: function(row) {\n        if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(row).appendTo(this.$tbody),\n            $deleteBtn = $row.find('.delete');\n\n        if (this.settings.sortable) {\n            this.sorter.addItems($row);\n        }\n\n        this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n        this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n        this.totalItems++;\n\n        this.updateUI();\n    },\n\n    reorderItems: function() {\n        if (!this.settings.sortable) {\n            return;\n        }\n\n        // Get the new field order\n        var ids = [];\n\n        for (var i = 0; i < this.sorter.$items.length; i++) {\n            var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n            ids.push(id);\n        }\n\n        // Send it to the server\n        var data = {\n            ids: JSON.stringify(ids)\n        };\n\n        Craft.postActionRequest(this.settings.reorderAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.onReorderItems(ids);\n                    Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                } else {\n                    Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                }\n            }\n        });\n    },\n\n    handleDeleteBtnClick: function(event) {\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(event.target).closest('tr');\n\n        if (this.confirmDeleteItem($row)) {\n            this.deleteItem($row);\n        }\n    },\n\n    confirmDeleteItem: function($row) {\n        var name = this.getItemName($row);\n        return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name}));\n    },\n\n    deleteItem: function($row) {\n        var data = {\n            id: this.getItemId($row)\n        };\n\n        Craft.postActionRequest(this.settings.deleteAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.handleDeleteItemResponse(response, $row);\n            }\n        });\n    },\n\n    handleDeleteItemResponse: function(response, $row) {\n        var id = this.getItemId($row),\n            name = this.getItemName($row);\n\n        if (response.success) {\n            if (this.sorter) {\n                this.sorter.removeItems($row);\n            }\n\n            $row.remove();\n            this.totalItems--;\n            this.updateUI();\n            this.onDeleteItem(id);\n\n            Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name}));\n        } else {\n            Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name}));\n        }\n    },\n\n    onReorderItems: function(ids) {\n        this.settings.onReorderItems(ids);\n    },\n\n    onDeleteItem: function(id) {\n        this.settings.onDeleteItem(id);\n    },\n\n    getItemId: function($row) {\n        return $row.attr(this.settings.idAttribute);\n    },\n\n    getItemName: function($row) {\n        return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n    },\n\n    updateUI: function() {\n        // Show the \"No Whatever Exists\" message if there aren't any\n        if (this.totalItems === 0) {\n            this.$table.hide();\n            this.$noItems.removeClass('hidden');\n        } else {\n            this.$table.show();\n            this.$noItems.addClass('hidden');\n        }\n\n        // Disable the sort buttons if there's only one row\n        if (this.settings.sortable) {\n            var $moveButtons = this.$table.find('.move');\n\n            if (this.totalItems === 1) {\n                $moveButtons.addClass('disabled');\n            } else {\n                $moveButtons.removeClass('disabled');\n            }\n        }\n\n        // Disable the delete buttons if we've reached the minimum items\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            this.$deleteBtns.addClass('disabled');\n        } else {\n            this.$deleteBtns.removeClass('disabled');\n        }\n\n        // Hide the New Whatever button if we've reached the maximum items\n        if (this.settings.newItemBtnSelector) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                $(this.settings.newItemBtnSelector).addClass('hidden');\n            } else {\n                $(this.settings.newItemBtnSelector).removeClass('hidden');\n            }\n        }\n    }\n}, {\n    defaults: {\n        tableSelector: null,\n        noItemsSelector: null,\n        newItemBtnSelector: null,\n        idAttribute: 'data-id',\n        nameAttribute: 'data-name',\n        sortable: false,\n        allowDeleteAll: true,\n        minItems: 0,\n        maxItems: null,\n        reorderAction: null,\n        deleteAction: null,\n        reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n        reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n        confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n        deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n        deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n        onReorderItems: $.noop,\n        onDeleteItem: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend({\n    $filenameInput: null,\n\n    originalBasename: null,\n    originalExtension: null,\n    reloadIndex: false,\n    replaceAsset: null,\n\n    init: function(element, settings) {\n        this.on('updateForm', () => {\n            this.addListener(this.$sidebar.find('.preview-thumb-container .edit-btn'), 'click', 'showImageEditor');\n            this.addListener(this.$sidebar.find('.preview-thumb-container .preview-btn'), 'click', 'showImagePreview');\n\n            this.$filenameInput = this.$sidebar.find('.filename');\n            this.addListener(this.$filenameInput, 'focus', 'selectFilename');\n        });\n\n        this.on('closeSlideout', () => {\n            if (this.reloadIndex) {\n                if (this.settings.elementIndex) {\n                    this.settings.elementIndex.updateElements();\n                } else if (this.settings.input) {\n                    if (this.replaceAsset) {\n                        this.settings.input.replaceElement(this.$element.data('id'), this.replaceAsset);\n                    } else {\n                        this.settings.input.refreshThumbnail(this.$element.data('id'));\n                    }\n                }\n            }\n        });\n\n        this.base(element, settings);\n\n        this.settings.validators.push(() => this.validateExtension());\n    },\n\n    showImageEditor: function() {\n        new Craft.AssetImageEditor(this.$element.data('id'), {\n\n            onSave: (data) => {\n                if (data.elementId) {\n                    this.settings.elementId = this.replaceAsset = data.elementId;\n                }\n\n                this.reloadIndex = true;\n                this.load();\n            },\n        });\n    },\n\n    showImagePreview: function() {\n        var settings = {};\n\n        if (this.$element.data('image-width')) {\n            settings.startingWidth = this.$element.data('image-width');\n            settings.startingHeight = this.$element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal(this.$element.data('id'), null, settings);\n    },\n\n    selectFilename: function() {\n        if (typeof this.$filenameInput[0].selectionStart === 'undefined') {\n            return;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (this.originalBasename === null) {\n            this.originalBasename = basename;\n            this.originalExtension = extension;\n        }\n\n        this.$filenameInput[0].selectionStart = 0;\n        this.$filenameInput[0].selectionEnd = basename.length;\n\n        // Prevent the selection from changing by the mouseup event\n        this.$filenameInput.one('mouseup.keepselection', ev => {\n            ev.preventDefault();\n        });\n        setTimeout(() => {\n            this.$filenameInput.off('mouseup.keepselection');\n        }, 500);\n    },\n\n    validateExtension: function() {\n        if (this.originalBasename === null) {\n            return true;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (extension === this.originalExtension) {\n            return true;\n        }\n\n        // No extension?\n        if (!extension) {\n            // If filename changed as well, assume removal of extension a mistake\n            if (this.originalFilename !== basename) {\n                this.$filenameInput.val(`${Craft.rtrim(basename, '.')}.${this.originalExtension}`);\n                return true;\n            }\n\n            // If filename hasn't changed, make sure they want to remove extension\n            return confirm(Craft.t('app', 'Are you sure you want to remove the extension “.{ext}”?', {\n                ext: this.originalExtension,\n            }));\n        }\n\n        // If the extension has changed, make sure it's intentional\n        return confirm(Craft.t('app', 'Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?', {\n            oldExt: this.originalExtension,\n            newExt: extension\n        }));\n    },\n\n    _parseFilename: function() {\n        const parts = this.$filenameInput.val().split('.');\n        const extension = parts.length > 1 ? parts.pop() : null;\n        const basename = parts.join('.');\n        return {basename, extension};\n    },\n});\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend({\n    // jQuery objects\n    $body: null,\n    $footer: null,\n    $imageTools: null,\n    $buttons: null,\n    $cancelBtn: null,\n    $replaceBtn: null,\n    $saveBtn: null,\n    $editorContainer: null,\n    $straighten: null,\n    $croppingCanvas: null,\n    $spinnerCanvas: null,\n\n    // FabricJS objects\n    canvas: null,\n    image: null,\n    viewport: null,\n    focalPoint: null,\n    grid: null,\n    croppingCanvas: null,\n    clipper: null,\n    croppingRectangle: null,\n    cropperHandles: null,\n    cropperGrid: null,\n    croppingShade: null,\n    croppingAreaText: null,\n\n    // Image state attributes\n    imageStraightenAngle: 0,\n    viewportRotation: 0,\n    originalWidth: 0,\n    originalHeight: 0,\n    imageVerticeCoords: null,\n    zoomRatio: 1,\n\n    // Editor state attributes\n    animationInProgress: false,\n    currentView: '',\n    assetId: null,\n    cacheBust: null,\n    draggingCropper: false,\n    scalingCropper: false,\n    draggingFocal: false,\n    previousMouseX: 0,\n    previousMouseY: 0,\n    shiftKeyHeld: false,\n    editorHeight: 0,\n    editorWidth: 0,\n    cropperState: false,\n    scaleFactor: 1,\n    flipData: {},\n    focalPointState: false,\n    spinnerInterval: null,\n    maxImageSize: null,\n    lastLoadedDimensions: null,\n    imageIsLoading: false,\n    mouseMoveEvent: null,\n    croppingConstraint: false,\n    constraintOrientation: 'landscape',\n    showingCustomConstraint: false,\n\n    // Rendering proxy functions\n    renderImage: null,\n    renderCropper: null,\n\n    init: function(assetId, settings) {\n        this.cacheBust = Date.now();\n\n        this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n        if (this.settings.allowDegreeFractions === null) {\n            this.settings.allowDegreeFractions = Craft.isImagick;\n        }\n\n        this.assetId = assetId;\n        this.flipData = {x: 0, y: 0};\n\n        // Build the modal\n        this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n        this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n        this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n        this.base(this.$container, this.settings);\n\n        this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn cancel',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$buttons);\n        this.$replaceBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit save replace',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$buttons);\n\n        if (this.settings.allowSavingAsNew) {\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save copy',\n                text: Craft.t('app', 'Save as a new asset'),\n            }).appendTo(this.$buttons);\n            this.addListener(this.$saveBtn, 'activate', this.saveImage);\n        }\n\n        this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n        this.addListener(this.$cancelBtn, 'activate', this.hide);\n        this.removeListener(this.$shade, 'click');\n\n        this.maxImageSize = this.getMaxImageSize();\n        Craft.postActionRequest('assets/image-editor', {assetId}, this.loadEditor.bind(this));\n    },\n\n    /**\n     * Get the max image size that is viewable in the editor currently\n     */\n    getMaxImageSize: function() {\n        var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n        var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n        return Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n    },\n\n    /**\n     * Load the editor markup and start loading components and the image.\n     *\n     * @param data\n     */\n    loadEditor: function(data) {\n        if (!data.html) {\n            alert(Craft.t('app', 'Could not load the image editor.'));\n        }\n\n        this.$body.html(data.html);\n        this.$tabs = $('.tabs li', this.$body);\n        this.$viewsContainer = $('.views', this.$body);\n        this.$views = $('> div', this.$viewsContainer);\n        this.$imageTools = $('.image-container .image-tools', this.$body);\n        this.$editorContainer = $('.image-container .image', this.$body);\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this._showSpinner();\n\n        this.updateSizeAndPosition();\n\n        // Load the canvas on which we'll host our image and set up the proxy render function\n        this.canvas = new fabric.StaticCanvas('image-canvas');\n\n        // Set up the cropping canvas jquery element for tracking all the nice events\n        this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n        this.$croppingCanvas.width(this.editorWidth);\n        this.$croppingCanvas.height(this.editorHeight);\n\n        this.canvas.enableRetinaScaling = true;\n        this.renderImage = () => {\n            Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n        };\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        // Load image and set up the initial properties\n        fabric.Image.fromURL(imageUrl, imageObject => {\n            this.image = imageObject;\n            this.image.set({\n                originX: 'center',\n                originY: 'center',\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n            this.canvas.add(this.image);\n\n            this.originalHeight = this.image.getHeight();\n            this.originalWidth = this.image.getWidth();\n            this.zoomRatio = 1;\n\n            this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n            // Set up the image bounding box, viewport and position everything\n            this._setFittedImageVerticeCoordinates();\n            this._repositionEditorElements();\n\n            // Set up the focal point\n            var focalState = {\n                imageDimensions: this.getScaledImageDimensions(),\n                offsetX: 0,\n                offsetY: 0\n            };\n\n            var focal = false;\n            if (data.focalPoint) {\n                // Transform the focal point coordinates from relative to absolute\n                var focalData = data.focalPoint;\n\n                // Resolve for the current image dimensions.\n                var adjustedX = focalState.imageDimensions.width * focalData.x;\n                var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                focal = true;\n            }\n\n            this.storeFocalPointState(focalState);\n\n            if (focal) {\n                this._createFocalPoint();\n            }\n\n            this._createViewport();\n            this.storeCropperState();\n\n            // Add listeners to buttons\n            this._addControlListeners();\n\n            // Add mouse event listeners\n            this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n            this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n            this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n            this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n            this._hideSpinner();\n\n            // Render it, finally\n            this.renderImage();\n\n            // Make sure verything gets fired for the first tab\n            this.$tabs.first().trigger('click');\n        });\n    },\n\n    /**\n     * Reload the image to better fit the current available image editor viewport.\n     */\n    _reloadImage: function() {\n        if (this.imageIsLoading) {\n            return;\n        }\n\n        this.imageIsLoading = true;\n        this.maxImageSize = this.getMaxImageSize();\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        this.image.setSrc(imageUrl, imageObject => {\n            this.originalHeight = imageObject.getHeight();\n            this.originalWidth = imageObject.getWidth();\n            this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n            this.updateSizeAndPosition();\n            this.renderImage();\n            this.imageIsLoading = false;\n        });\n    },\n\n    /**\n     * Update the modal size and position on browser resize\n     */\n    updateSizeAndPosition: function() {\n        if (!this.$container) {\n            return;\n        }\n\n        // Fullscreen modal\n        var innerWidth = window.innerWidth;\n        var innerHeight = window.innerHeight;\n\n        this.$container.css({\n            'width': innerWidth,\n            'min-width': innerWidth,\n            'left': 0,\n\n            'height': innerHeight,\n            'min-height': innerHeight,\n            'top': 0\n        });\n\n        this.$body.css({\n            'height': innerHeight - 62\n        });\n\n        if (innerWidth < innerHeight) {\n            this.$container.addClass('vertical');\n        } else {\n            this.$container.removeClass('vertical');\n        }\n\n        if (this.$spinnerCanvas) {\n            this.$spinnerCanvas.css({\n                left: ((this.$spinnerCanvas.parent().width() / 2) - (this.$spinnerCanvas.width() / 2)) + 'px',\n                top: ((this.$spinnerCanvas.parent().height() / 2) - (this.$spinnerCanvas.height() / 2)) + 'px'\n            });\n        }\n\n        // If image is already loaded, make sure it looks pretty.\n        if (this.$editorContainer && this.image) {\n            this._repositionEditorElements();\n        }\n    },\n\n    /**\n     * Reposition the editor elements to accurately reflect the editor state with current dimensions\n     */\n    _repositionEditorElements: function() {\n        // Remember what the dimensions were before the resize took place\n        var previousEditorDimensions = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this.canvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        var currentScaledDimensions = this.getScaledImageDimensions();\n\n        // If we're cropping now, we have to reposition the cropper correctly in case\n        // the area for image changes, forcing the image size to change as well.\n        if (this.currentView === 'crop') {\n            this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n            var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            this._setFittedImageVerticeCoordinates();\n            this._repositionCropper(previouslyOccupiedArea);\n        } else {\n            // Otherwise just recalculate the image zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n        }\n\n        // Reposition the image relatively to the previous editor dimensions.\n        this._repositionImage(previousEditorDimensions);\n        this._repositionViewport();\n        this._repositionFocalPoint(previousEditorDimensions);\n        this._zoomImage();\n\n        this.renderImage();\n\n        if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n            this._reloadImage();\n        }\n    },\n\n    /**\n     * Reposition image based on how the editor dimensions have changed.\n     * This ensures keeping the image center offset, if there is any.\n     *\n     * @param previousEditorDimensions\n     */\n    _repositionImage: function(previousEditorDimensions) {\n        this.image.set({\n            left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n            top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n        });\n    },\n\n    /**\n     * Create the viewport for image editor.\n     */\n    _createViewport: function() {\n        this.viewport = new fabric.Rect({\n            width: this.image.width,\n            height: this.image.height,\n            fill: 'rgba(127,0,0,1)',\n            originX: 'center',\n            originY: 'center',\n            globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n            left: this.image.left,\n            top: this.image.top\n        });\n        this.canvas.add(this.viewport);\n        this.renderImage();\n    },\n\n    /**\n     * Create the focal point.\n     */\n    _createFocalPoint: function() {\n        var focalPointState = this.focalPointState;\n        var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n        var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n        var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n        // Adjust by image margins\n        focalX += this.image.left;\n        focalY += this.image.top;\n\n        var deltaX = 0;\n        var deltaY = 0;\n\n        // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n        if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n            if (this.currentView !== 'crop') {\n                deltaX = this.viewport.left - this.image.left;\n                deltaY = this.viewport.top - this.image.top;\n            } else {\n                // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                deltaX = this.clipper.left - this.image.left;\n                deltaY = this.clipper.top - this.image.top;\n            }\n\n            // Bump focal to middle of viewport\n            focalX += deltaX;\n            focalY += deltaY;\n\n            // Reflect changes in saved state\n            focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n        }\n\n        this.focalPoint = new fabric.Group([\n            new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n            new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n        ], {\n            originX: 'center',\n            originY: 'center',\n            left: focalX,\n            top: focalY\n        });\n\n        this.storeFocalPointState(focalPointState);\n        this.canvas.add(this.focalPoint);\n    },\n\n    /**\n     * Toggle focal point\n     */\n    toggleFocalPoint: function() {\n        if (!this.focalPoint) {\n            this._createFocalPoint();\n        } else {\n            this.canvas.remove(this.focalPoint);\n            this.focalPoint = null;\n        }\n\n        this.renderImage();\n    },\n\n    /**\n     * Reposition the viewport to handle editor resizing.\n     */\n    _repositionViewport: function() {\n        if (this.viewport) {\n            var dimensions = {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            // If we're cropping, nothing exciting happens for the viewport\n            if (this.currentView === 'crop') {\n                dimensions.width = this.editorWidth;\n                dimensions.height = this.editorHeight;\n            } else {\n                // If this is the first initial reposition, no cropper state yet\n                if (this.cropperState) {\n                    // Recall the state\n                    var state = this.cropperState;\n\n                    var scaledImageDimensions = this.getScaledImageDimensions();\n                    // Make sure we have the correct current image size\n                    var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                    // Set the viewport dimensions\n                    dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                    dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                    // Adjust the image position to show the correct part of the image in the viewport\n                    this.image.set({\n                        left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                        top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                    });\n                } else {\n                    $.extend(dimensions, this.getScaledImageDimensions());\n                }\n            }\n            this.viewport.set(dimensions);\n        }\n    },\n\n    _repositionFocalPoint: function(previousEditorDimensions) {\n        if (this.focalPoint) {\n            var offsetX = this.focalPoint.left - this.editorWidth / 2;\n            var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n            var currentWidth = this.image.width;\n            var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n            var ratio = newWidth / currentWidth / this.scaleFactor;\n\n            offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n            offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n            offsetX *= ratio;\n            offsetY *= ratio;\n\n            this.focalPoint.set({\n                left: this.editorWidth / 2 + offsetX,\n                top: this.editorHeight / 2 + offsetY\n            });\n        }\n    },\n\n    /**\n     * Return true if the image orientation has changed\n     */\n    hasOrientationChanged: function() {\n        return this.viewportRotation % 180 !== 0;\n    },\n\n    /**\n     * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n     */\n    getScaledImageDimensions: function() {\n        if (typeof this.getScaledImageDimensions._ === 'undefined') {\n            this.getScaledImageDimensions._ = {};\n        }\n\n        this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n        this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n        this.getScaledImageDimensions._.dimensions = {};\n        if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n            this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n            this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n        } else {\n            this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n            this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n        }\n\n        return this.getScaledImageDimensions._.dimensions;\n    },\n\n    /**\n     * Set the image dimensions to reflect the current zoom ratio.\n     */\n    _zoomImage: function() {\n        if (typeof this._zoomImage._ === 'undefined') {\n            this._zoomImage._ = {};\n        }\n\n        this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n        this.image.set({\n            width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n            height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n        });\n    },\n\n    /**\n     * Set up listeners for the controls.\n     */\n    _addControlListeners: function() {\n        // Tabs\n        this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n        // Focal point\n        this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n        // Rotate controls\n        this.addListener($('.rotate-left'), 'click', function() {\n            this.rotateImage(-90);\n        });\n        this.addListener($('.rotate-right'), 'click', function() {\n            this.rotateImage(90);\n        });\n        this.addListener($('.flip-vertical'), 'click', function() {\n            this.flipImage('y');\n        });\n        this.addListener($('.flip-horizontal'), 'click', function() {\n            this.flipImage('x');\n        });\n\n        // Straighten slider\n        this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n            onStart: () => {\n                this._showGrid();\n            },\n            onChange: slider => {\n                this.straighten(slider);\n            },\n            onEnd: () => {\n                this._hideGrid();\n                this._cleanupFocalPointAfterStraighten();\n            },\n        });\n\n        // Cropper scale modifier key\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = true;\n            }\n        });\n        this.addListener(Garnish.$doc, 'keyup', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = false;\n            }\n        });\n\n        this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n        this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n        this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n    },\n\n    /**\n     * Handle a constraint button click.\n     *\n     * @param ev\n     */\n    _handleConstraintClick: function(ev) {\n        var constraint = $(ev.currentTarget).data('constraint');\n        var $target = $(ev.currentTarget);\n        $target.siblings().removeClass('active');\n        $target.addClass('active');\n\n        if (constraint == 'custom') {\n            this._showCustomConstraint();\n            this._applyCustomConstraint();\n            return;\n        }\n\n        this._hideCustomConstraint();\n\n        this.setCroppingConstraint(constraint);\n        this.enforceCroppingConstraint();\n    },\n\n    /**\n     * Handle an orientation switch click.\n     *\n     * @param ev\n     */\n    _handleOrientationClick: function(ev) {\n        if (ev.currentTarget.value === this.constraintOrientation) {\n            return;\n        }\n        this.constraintOrientation = ev.currentTarget.value;\n\n        var $constraints = $('.constraint.flip', this.$container);\n\n        for (var i = 0; i < $constraints.length; i++) {\n            var $constraint = $($constraints[i]);\n            $constraint.data('constraint', 1 / $constraint.data('constraint'));\n            $constraint.html($constraint.html().split(':').reverse().join(':'));\n        }\n\n        $constraints.filter('.active').click();\n    },\n\n    /**\n     * Apply the custom ratio set in the inputs\n     */\n    _applyCustomConstraint: function() {\n        var constraint = this._getCustomConstraint();\n\n        if (constraint.w > 0 && constraint.h > 0) {\n            this.setCroppingConstraint(constraint.w / constraint.h);\n            this.enforceCroppingConstraint();\n        }\n    },\n\n    /**\n     * Get the custom constraint.\n     *\n     * @returns {{w: *, h: *}}\n     */\n    _getCustomConstraint: function() {\n        var w = parseFloat($('.custom-constraint-w').val());\n        var h = parseFloat($('.custom-constraint-h').val());\n        return {\n            w: isNaN(w) ? 0 : w,\n            h: isNaN(h) ? 0 : h,\n        }\n    },\n\n    /**\n     * Set the custom constraint.\n     *\n     * @param w\n     * @param h\n     */\n    _setCustomConstraint: function(w, h) {\n        $('.custom-constraint-w').val(parseFloat(w));\n        $('.custom-constraint-h').val(parseFloat(h));\n    },\n\n    /**\n     * Hide the custom constraint inputs.\n     */\n    _hideCustomConstraint: function() {\n        this.showingCustomConstraint = false;\n        $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n        $('.orientation', this.$container).removeClass('hidden');\n    },\n\n    /**\n     * Show the custom constraint inputs.\n     */\n    _showCustomConstraint: function() {\n        if (this.showingCustomConstraint) {\n            return;\n        }\n\n        this.showingCustomConstraint = true;\n        $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n        $('.orientation', this.$container).addClass('hidden');\n    },\n\n    /**\n     * Handle tab click.\n     *\n     * @param ev\n     */\n    _handleTabClick: function(ev) {\n        if (!this.animationInProgress) {\n            var $tab = $(ev.currentTarget);\n            var view = $tab.data('view');\n            this.$tabs.removeClass('selected');\n            $tab.addClass('selected');\n            this.showView(view);\n        }\n    },\n\n    /**\n     * Show a view.\n     *\n     * @param view\n     */\n    showView: function(view) {\n        if (this.currentView === view) {\n            return;\n        }\n\n        this.$views.addClass('hidden');\n        var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n        $view.removeClass('hidden');\n\n        if (view === 'rotate') {\n            this.enableSlider();\n        } else {\n            this.disableSlider();\n        }\n\n        // Now that most likely our editor dimensions have changed, time to reposition stuff\n        this.updateSizeAndPosition();\n\n        // See if we have to enable or disable crop mode as we transition between tabs\n        if (this.currentView === 'crop' && view !== 'crop') {\n            this.disableCropMode();\n        } else if (this.currentView !== 'crop' && view === 'crop') {\n            this.enableCropMode();\n        }\n\n        // Mark the current view\n        this.currentView = view;\n    },\n\n    /**\n     * Store the current cropper state.\n     *\n     * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n     * as the basis for recalculating the cropper position and dimensions.\n     *\n     * @param [state]\n     */\n    storeCropperState: function(state) {\n        if (typeof this.storeCropperState._ === 'undefined') {\n            this.storeCropperState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.cropperState = state;\n        } else if (this.clipper) {\n            this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n            this.cropperState = {\n                offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        } else {\n            this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n            this.cropperState = {\n                offsetX: 0,\n                offsetY: 0,\n                height: this.storeCropperState._.dimensions.height,\n                width: this.storeCropperState._.dimensions.width,\n                imageDimensions: this.storeCropperState._.dimensions\n            };\n        }\n    },\n\n    /**\n     * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n     */\n    storeFocalPointState: function(state) {\n        if (typeof this.storeFocalPointState._ === 'undefined') {\n            this.storeFocalPointState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.focalPointState = state;\n        } else if (this.focalPoint) {\n            this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n            this.focalPointState = {\n                offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        }\n    },\n\n    /**\n     * Rotate the image along with the viewport.\n     *\n     * @param degrees\n     */\n    rotateImage: function(degrees) {\n        if (!this.animationInProgress) {\n            // We're not that kind of an establishment, sir.\n            if (degrees !== 90 && degrees !== -90) {\n                return false;\n            }\n\n            this.animationInProgress = true;\n            this.viewportRotation += degrees;\n\n            // Normalize the viewport rotation angle so it's between 0 and 359\n            this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n            var newAngle = this.image.angle + degrees;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var imageZoomRatio;\n\n            if (this.hasOrientationChanged()) {\n                imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n            } else {\n                imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n            }\n\n            // In cases when for some reason we've already zoomed in on the image,\n            // use existing zoom.\n            if (this.zoomRatio > imageZoomRatio) {\n                imageZoomRatio = this.zoomRatio;\n            }\n\n            var viewportProperties = {\n                angle: degrees === 90 ? '+=90' : '-=90'\n            };\n\n            var imageProperties = {\n                angle: newAngle,\n                width: scaledImageDimensions.width * imageZoomRatio,\n                height: scaledImageDimensions.height * imageZoomRatio\n            };\n\n            var scaleFactor = 1;\n            if (this.scaleFactor < 1) {\n                scaleFactor = 1 / this.scaleFactor;\n                this.scaleFactor = 1;\n            } else {\n                if (this.viewport.width > this.editorHeight) {\n                    scaleFactor = this.editorHeight / this.viewport.width;\n                } else if (this.viewport.height > this.editorWidth) {\n                    scaleFactor = this.editorWidth / this.viewport.height;\n                }\n                this.scaleFactor = scaleFactor;\n            }\n\n            if (scaleFactor < 1) {\n                imageProperties.width *= scaleFactor;\n                imageProperties.height *= scaleFactor;\n            }\n\n            var state = this.cropperState;\n\n            // Make sure we reposition the image as well to focus on the same image area\n            var deltaX = state.offsetX;\n            var deltaY = state.offsetY;\n            var angleInRadians = degrees * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n            var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n            imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n            state.offsetX = newDeltaX;\n            state.offsetY = newDeltaY;\n\n            var temp = state.width;\n            state.width = state.height;\n            state.height = temp;\n\n            this.storeCropperState(state);\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            }\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    // If we're zooming the image in or out, better do the same to viewport\n                    var temp = this.viewport.height * scaleFactor;\n                    this.viewport.height = this.viewport.width * scaleFactor;\n                    this.viewport.width = temp;\n                    this.viewport.set({angle: 0});\n                },\n            });\n\n            // Animate the rotation and dimension change\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                    this.image.set({angle: cleanAngle});\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        this._adjustFocalPointByAngle(degrees);\n                        this.straighten(this.straighteningInput);\n                        this.canvas.add(this.focalPoint);\n                    } else {\n                        this._resetFocalPointPosition();\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Flip an image along an axis.\n     *\n     * @param axis\n     */\n    flipImage: function(axis) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            if (this.hasOrientationChanged()) {\n                axis = axis === 'y' ? 'x' : 'y';\n            }\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            } else {\n                this._resetFocalPointPosition();\n            }\n\n            var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            this.straighteningInput.setValue(-this.imageStraightenAngle);\n            this.imageStraightenAngle = -this.imageStraightenAngle;\n            var properties = {\n                angle: this.viewportRotation + this.imageStraightenAngle\n            };\n\n            var deltaY, deltaX;\n            var cropperState = this.cropperState;\n            var focalPointState = this.focalPointState;\n\n            // Reposition the image, viewport, and stored cropper and focal point states.\n            if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                cropperState.offsetX = -cropperState.offsetX;\n                focalPointState.offsetX = -focalPointState.offsetX;\n                deltaX = this.image.left - editorCenter.x;\n                properties.left = editorCenter.x - deltaX;\n            } else {\n                cropperState.offsetY = -cropperState.offsetY;\n                focalPointState.offsetY = -focalPointState.offsetY;\n                deltaY = this.image.top - editorCenter.y;\n                properties.top = editorCenter.y - deltaY;\n            }\n\n            if (axis === 'y') {\n                properties.scaleY = this.image.scaleY * -1;\n                this.flipData.y = 1 - this.flipData.y;\n            } else {\n                properties.scaleX = this.image.scaleX * -1;\n                this.flipData.x = 1 - this.flipData.x;\n            }\n\n            this.storeCropperState(cropperState);\n            this.storeFocalPointState(focalPointState);\n\n            this.image.animate(properties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        // Well this is handy\n                        this._adjustFocalPointByAngle(0);\n                        this.canvas.add(this.focalPoint);\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Perform the straightening with input slider.\n     *\n     * @param {Craft.SlideRuleInput} slider\n     */\n    straighten: function(slider) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            var previousAngle = this.image.angle;\n\n            this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n            // Straighten the image\n            this.image.set({\n                angle: this.viewportRotation + this.imageStraightenAngle\n            });\n\n            // Set the new zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            this._zoomImage();\n\n            if (this.cropperState) {\n                this._adjustEditorElementsOnStraighten(previousAngle);\n            }\n\n            this.renderImage();\n\n            this.animationInProgress = false;\n        }\n    },\n\n    /**\n     * Adjust the cropped viewport when straightening the image to correct for\n     * bumping into edges, keeping focus on the cropped area center and to\n     * maintain the illusion that the image is being straightened relative to the viewport center.\n     *\n     * @param {integer} previousAngle integer the previous image angle before straightening\n     */\n    _adjustEditorElementsOnStraighten: function(previousAngle) {\n        var scaledImageDimensions = this.getScaledImageDimensions();\n        var angleDelta = this.image.angle - previousAngle;\n        var state = this.cropperState;\n\n        var currentZoomRatio = this.zoomRatio;\n        var adjustmentRatio = 1;\n\n        var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n        do {\n            // Get the cropper center coordinates\n            var cropperCenterX = state.offsetX;\n            var cropperCenterY = state.offsetY;\n            var angleInRadians = angleDelta * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n            newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n            sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Figure out the final image offset to keep the viewport focused where we need it\n            deltaX = newCenterX * currentZoomRatio * sizeFactor;\n            deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n            // If the image would creep in the viewport, figure out how to math around it.\n            var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n            var rectangle = {\n                width: this.viewport.width,\n                height: this.viewport.height,\n                left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n            };\n            adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n            currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n            // If we had to make adjustments, do the calculations again\n        } while (adjustmentRatio !== 1);\n\n        // Reposition the image correctly\n        this.image.set({\n            left: this.editorWidth / 2 - deltaX,\n            top: this.editorHeight / 2 - deltaY\n        });\n\n        // Finally, store the new cropper state to reflect the rotation change.\n        state.offsetX = newCenterX;\n        state.offsetY = newCenterY;\n        state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n        state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n        this.storeCropperState(state);\n\n        // Zoom the image in and we're done.\n        this.zoomRatio = currentZoomRatio;\n\n        if (this.focalPoint) {\n            this._adjustFocalPointByAngle(angleDelta);\n\n            if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 0});\n            } else {\n                this.focalPoint.set({opacity: 1});\n            }\n        } else if (angleDelta !== 0) {\n            this._resetFocalPointPosition();\n        }\n\n        this._zoomImage();\n    },\n\n    /**\n     * If focal point is active and outside of viewport after straightening, reset it.\n     */\n    _cleanupFocalPointAfterStraighten: function() {\n        if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n            this.focalPoint.set({opacity: 1});\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n            this.toggleFocalPoint();\n        }\n    },\n\n    /**\n     * Reset focal point to the middle of image.\n     */\n    _resetFocalPointPosition: function() {\n        var state = this.focalPointState;\n        state.offsetX = 0;\n        state.offsetY = 0;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n     *\n     * @param object\n     * @param containingObject\n     *\n     * @returns {boolean}\n     */\n    _isCenterInside: function(object, containingObject) {\n        return (object.left > containingObject.left - containingObject.width / 2\n            && object.top > containingObject.top - containingObject.height / 2\n            && object.left < containingObject.left + containingObject.width / 2\n            && object.top < containingObject.top + containingObject.height / 2\n        );\n    },\n\n    /**\n     * Adjust the focal point by an angle in degrees.\n     * @param angle\n     */\n    _adjustFocalPointByAngle: function(angle) {\n        var angleInRadians = angle * (Math.PI / 180);\n        var state = this.focalPointState;\n\n        var focalX = state.offsetX;\n        var focalY = state.offsetY;\n\n        // Calculate how the focal point would need to move in a circle to keep on the same spot\n        // on the image if it was rotated with zoom intact.\n        var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n        var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n        var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n        var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n        var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n        this.focalPoint.left = this.image.left + adjustedFocalX;\n        this.focalPoint.top = this.image.top + adjustedFocalY;\n\n        state.offsetX = newFocalX;\n        state.offsetY = newFocalY;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n     * If the rectangle fits, 1 will be returned.\n     *\n     * @param rectangle\n     * @param containingVertices\n     */\n    _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n        var rectangleVertices = this._getRectangleVertices(rectangle);\n        var vertex;\n\n        // Check if any of the viewport vertices end up out of bounds\n        for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n            vertex = rectangleVertices[verticeIndex];\n\n            if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                break;\n            }\n\n            vertex = false;\n        }\n\n        // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n        var adjustmentRatio;\n\n        if (!vertex) {\n            adjustmentRatio = 1;\n        } else {\n            // Find out which edge got crossed by the vertex\n            var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n            var rectangleCenter = {\n                x: rectangle.left + rectangle.width / 2,\n                y: rectangle.top + rectangle.height / 2\n            };\n\n            // Calculate how much further that edge needs to be.\n            // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n            var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n            var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n            // Adjust the zoom ratio\n            adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n        }\n\n        return adjustmentRatio;\n    },\n\n    /**\n     * Save the image.\n     *\n     * @param ev\n     */\n    saveImage: function(ev) {\n        var $button = $(ev.currentTarget);\n        if ($button.hasClass('disabled')) {\n            return false;\n        }\n\n        $('.btn', this.$buttons).addClass('disabled');\n        this.$buttons.append('<div class=\"spinner\"></div>');\n\n        var postData = {\n            assetId: this.assetId,\n            viewportRotation: this.viewportRotation,\n            imageRotation: this.imageStraightenAngle,\n            replace: $button.hasClass('replace') ? 1 : 0\n        };\n\n        if (this.cropperState) {\n            var cropData = {};\n\n            cropData.height = this.cropperState.height;\n            cropData.width = this.cropperState.width;\n            cropData.offsetX = this.cropperState.offsetX;\n            cropData.offsetY = this.cropperState.offsetY;\n\n            postData.imageDimensions = this.cropperState.imageDimensions;\n\n            postData.cropData = cropData;\n        } else {\n            postData.imageDimensions = this.getScaledImageDimensions();\n        }\n\n        if (this.focalPoint) {\n            postData.focalPoint = this.focalPointState;\n        }\n\n        postData.flipData = this.flipData;\n        postData.zoom = this.zoomRatio;\n\n        Craft.postActionRequest('assets/save-image', postData, data => {\n            this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n            if (data.error) {\n                alert(data.error);\n                return;\n            }\n\n            this.onSave(data);\n            this.hide();\n            Craft.cp.runQueue();\n        });\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToCoverRatio: function(dimensions) {\n        // Convert the angle to radians\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        // Calculate the dimensions of the scaled image using the magic of math\n        var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n        var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n        // Calculate the ratio\n        return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToFitRatio: function(dimensions) {\n        // Get the bounding box for a rotated image\n        var boundingBox = this._getImageBoundingBox(dimensions);\n\n        // Scale the bounding box to fit\n        var scale = 1;\n        if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n            var vertScale = this.editorHeight / boundingBox.height;\n            var horiScale = this.editorWidth / boundingBox.width;\n            scale = Math.min(horiScale, vertScale);\n        }\n\n        return scale;\n    },\n\n    /**\n     * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n     */\n    getCombinedZoomRatio: function(dimensions) {\n        return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n    },\n\n    /**\n     * Draw the grid.\n     *\n     * @private\n     */\n    _showGrid: function() {\n        if (!this.grid) {\n            var strokeOptions = {\n                strokeWidth: 1,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            var lineCount = 8;\n            var gridWidth = this.viewport.width;\n            var gridHeight = this.viewport.height;\n            var xStep = gridWidth / (lineCount + 1);\n            var yStep = gridHeight / (lineCount + 1);\n\n            var grid = [\n                new fabric.Rect({\n                    strokeWidth: 2,\n                    stroke: 'rgba(255,255,255,1)',\n                    originX: 'center',\n                    originY: 'center',\n                    width: gridWidth,\n                    height: gridHeight,\n                    left: gridWidth / 2,\n                    top: gridHeight / 2,\n                    fill: 'rgba(255,255,255,0)'\n                })\n            ];\n\n            var i;\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n            }\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n            }\n\n            this.grid = new fabric.Group(grid, {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                angle: this.viewport.angle\n            });\n\n            this.canvas.add(this.grid);\n            this.renderImage();\n        }\n    },\n\n    /**\n     * Hide the grid\n     */\n    _hideGrid: function() {\n        this.canvas.remove(this.grid);\n        this.grid = null;\n        this.renderImage();\n    },\n\n    /**\n     * Remove all the events when hiding the editor.\n     */\n    onFadeOut: function() {\n        this.destroy();\n    },\n\n    /**\n     * Make sure underlying content is not scrolled by accident.\n     */\n    show: function() {\n        this.base();\n        Garnish.$bod.addClass('no-scroll');\n    },\n\n    /**\n     * Allow the content to scroll.\n     */\n    hide: function() {\n        this.removeAllListeners();\n        this.straighteningInput.removeAllListeners();\n        Garnish.$bod.removeClass('no-scroll');\n        this.base();\n    },\n\n    /**\n     * onSave callback.\n     */\n    onSave: function(data) {\n        this.settings.onSave(data);\n        this.trigger('save');\n    },\n\n    /**\n     * Enable the rotation slider.\n     */\n    enableSlider: function() {\n        this.$imageTools.removeClass('hidden');\n    },\n\n    /**\n     * Disable the rotation slider.\n     */\n    disableSlider: function() {\n        this.$imageTools.addClass('hidden');\n    },\n\n    /**\n     * Switch to crop mode.\n     */\n    enableCropMode: function() {\n        var imageDimensions = this.getScaledImageDimensions();\n        this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n        var viewportProperties = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var callback = () => {\n            this._setFittedImageVerticeCoordinates();\n\n            // Restore cropper\n            var state = this.cropperState;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Restore based on the stored information\n            var cropperData = {\n                left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                width: state.width * sizeFactor * this.zoomRatio,\n                height: state.height * sizeFactor * this.zoomRatio\n            };\n\n            this._showCropper(cropperData);\n\n            if (this.focalPoint) {\n                sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Switch out of crop mode.\n     */\n    disableCropMode: function() {\n        var viewportProperties = {};\n\n        this._hideCropper();\n        var imageDimensions = this.getScaledImageDimensions();\n        var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n        var inverseZoomFactor = targetZoom / this.zoomRatio;\n        this.zoomRatio = targetZoom;\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var offsetX = this.clipper.left - this.image.left;\n        var offsetY = this.clipper.top - this.image.top;\n\n        var imageOffsetX = offsetX * inverseZoomFactor;\n        var imageOffsetY = offsetY * inverseZoomFactor;\n        imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n        imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n        // Calculate the cropper dimensions after all the zooming\n        viewportProperties.height = this.clipper.height * inverseZoomFactor;\n        viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n        if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n            if (this.focalPoint) {\n                this.toggleFocalPoint();\n            }\n\n            this._resetFocalPointPosition();\n        }\n\n        var callback = () => {\n            // Reposition focal point correctly\n            if (this.focalPoint) {\n                var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Transition between cropping end editor modes\n     *\n     * @param callback\n     * @param imageProperties\n     * @param viewportProperties\n     * @private\n     */\n    _editorModeTransition: function(callback, imageProperties, viewportProperties) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            // Without this it looks semi-broken during animation\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n                this.renderImage();\n            }\n\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    callback();\n                    this.animationInProgress = false;\n                    this.renderImage();\n                },\n            });\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration\n            });\n        }\n    },\n\n    _showSpinner: function() {\n        this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n        var canvas = document.getElementById('spinner-canvas');\n        var context = canvas.getContext('2d');\n        var start = new Date();\n        var lines = 16,\n            cW = context.canvas.width,\n            cH = context.canvas.height;\n\n        var draw = function() {\n            var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n            context.save();\n            context.clearRect(0, 0, cW, cH);\n            context.translate(cW / 2, cH / 2);\n            context.rotate(Math.PI * 2 * rotation);\n            for (var i = 0; i < lines; i++) {\n                context.beginPath();\n                context.rotate(Math.PI * 2 / lines);\n                context.moveTo(cW / 10, 0);\n                context.lineTo(cW / 4, 0);\n                context.lineWidth = cW / 30;\n                context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                context.stroke();\n            }\n            context.restore();\n        };\n        this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n    },\n\n    _hideSpinner: function() {\n        window.clearInterval(this.spinnerInterval);\n        this.$spinnerCanvas.remove();\n        this.$spinnerCanvas = null;\n    },\n\n    /**\n     * Show the cropper.\n     *\n     * @param clipperData\n     */\n    _showCropper: function(clipperData) {\n        this._setupCropperLayer(clipperData);\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Hide the cropper.\n     */\n    _hideCropper: function() {\n        if (this.clipper) {\n            this.croppingCanvas.remove(this.clipper);\n            this.croppingCanvas.remove(this.croppingShade);\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n\n            this.croppingCanvas = null;\n            this.renderCropper = null;\n        }\n    },\n\n    /**\n     * Draw the cropper.\n     *\n     * @param clipperData\n     */\n    _setupCropperLayer: function(clipperData) {\n        // Set up the canvas for cropper\n        this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n            backgroundColor: 'rgba(0,0,0,0)',\n            hoverCursor: 'default',\n            selection: false\n        });\n\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        this.renderCropper = () => Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n\n        $('#cropping-canvas', this.$editorContainer).css({\n            position: 'absolute',\n            top: 0,\n            left: 0\n        });\n\n        this.croppingShade = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: this.editorWidth,\n            height: this.editorHeight,\n            fill: 'rgba(0,0,0,0.7)'\n        });\n\n        // Calculate the cropping rectangle size\n        var imageDimensions = this.getScaledImageDimensions();\n        var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n        var rectWidth = imageDimensions.width / rectangleRatio;\n        var rectHeight = imageDimensions.height / rectangleRatio;\n\n        if (this.hasOrientationChanged()) {\n            var temp = rectHeight;\n            rectHeight = rectWidth;\n            rectWidth = temp;\n        }\n\n        // Set up the cropping viewport rectangle\n        this.clipper = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: rectWidth,\n            height: rectHeight,\n            stroke: 'black',\n            fill: 'rgba(128,0,0,1)',\n            strokeWidth: 0\n        });\n\n        // Set from clipper data\n        if (clipperData) {\n            this.clipper.set(clipperData);\n        }\n\n        this.clipper.globalCompositeOperation = 'destination-out';\n        this.croppingCanvas.add(this.croppingShade);\n        this.croppingCanvas.add(this.clipper);\n    },\n\n    /**\n     * Redraw the cropper boundaries\n     */\n    _redrawCropperElements: function() {\n        if (typeof this._redrawCropperElements._ === 'undefined') {\n            this._redrawCropperElements._ = {};\n        }\n\n        if (this.cropperHandles) {\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n        }\n        this._redrawCropperElements._.lineOptions = {\n            strokeWidth: 4,\n            stroke: 'rgb(255,255,255)',\n            fill: false\n        };\n\n        this._redrawCropperElements._.gridOptions = {\n            strokeWidth: 2,\n            stroke: 'rgba(255,255,255,0.5)'\n        };\n\n        // Draw the handles\n        this._redrawCropperElements._.pathGroup = [\n            new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n        ];\n\n        this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n            left: this.clipper.left,\n            top: this.clipper.top,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        // Don't forget the rectangle\n        this.croppingRectangle = new fabric.Rect({\n            left: this.clipper.left,\n            top: this.clipper.top,\n            width: this.clipper.width,\n            height: this.clipper.height,\n            fill: 'rgba(0,0,0,0)',\n            stroke: 'rgba(255,255,255,0.8)',\n            strokeWidth: 2,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        this.cropperGrid = new fabric.Group(\n            [\n                new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n            ], {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n        this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n        this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n        if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n            this._redrawCropperElements._.cropTextTop -= 24;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n        }\n\n        this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n            left: this.croppingRectangle.left,\n            top: this._redrawCropperElements._.cropTextTop,\n            fontSize: 13,\n            fill: 'rgb(200,200,200)',\n            backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n            font: 'Craft',\n            width: 70,\n            height: 15,\n            originX: 'center',\n            originY: 'center',\n            textAlign: 'center'\n        });\n\n        this.croppingCanvas.add(this.cropperHandles);\n        this.croppingCanvas.add(this.cropperGrid);\n        this.croppingCanvas.add(this.croppingRectangle);\n        this.croppingCanvas.add(this.croppingAreaText);\n    },\n\n    /**\n     * Reposition the cropper when the image editor dimensions change.\n     *\n     * @param previousImageArea\n     */\n    _repositionCropper: function(previousImageArea) {\n        if (!this.croppingCanvas) {\n            return;\n        }\n\n        // Get the current clipper offset relative to center\n        var currentOffset = {\n            x: this.clipper.left - this.croppingCanvas.width / 2,\n            y: this.clipper.top - this.croppingCanvas.height / 2\n        };\n\n        // Resize the cropping canvas\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        // Check by what factor will the new final bounding box be different\n        var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n        var areaFactor = currentArea.width / previousImageArea.width;\n\n        // Adjust the cropper size to scale along with the bounding box\n        this.clipper.width = Math.round(this.clipper.width * areaFactor);\n        this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n        // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n        // for editor size changes and then multiply by the size factor to adjust for image size changes\n        this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n        this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n        // Resize the cropping shade\n        this.croppingShade.set({\n            width: this.editorWidth,\n            height: this.editorHeight,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        });\n\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Get the dimensions of a bounding rectangle by a set of four coordinates.\n     *\n     * @param coordinateSet\n     */\n    _getBoundingRectangle: function(coordinateSet) {\n        return {\n            width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n            height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n        };\n    },\n\n    /**\n     * Handle the mouse being clicked.\n     *\n     * @param ev\n     */\n    _handleMouseDown: function(ev) {\n        // Focal before resize before dragging\n        var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n        var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n        var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n        if (handle || move || focal) {\n            this.previousMouseX = ev.pageX;\n            this.previousMouseY = ev.pageY;\n\n            if (focal) {\n                this.draggingFocal = true;\n            } else if (handle) {\n                this.scalingCropper = handle;\n            } else if (move) {\n                this.draggingCropper = true;\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse being moved.\n     *\n     * @param ev\n     */\n    _handleMouseMove: function(ev) {\n        if (this.mouseMoveEvent !== null) {\n            Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n        }\n        this.mouseMoveEvent = ev;\n    },\n\n    _handleMouseMoveInternal: function() {\n        if (this.mouseMoveEvent === null) {\n            return;\n        }\n\n        if (this.focalPoint && this.draggingFocal) {\n            this._handleFocalDrag(this.mouseMoveEvent);\n            this.storeFocalPointState();\n            this.renderImage();\n        } else if (this.draggingCropper || this.scalingCropper) {\n            if (this.draggingCropper) {\n                this._handleCropperDrag(this.mouseMoveEvent);\n            } else {\n                this._handleCropperResize(this.mouseMoveEvent);\n            }\n\n            this._redrawCropperElements();\n\n            this.storeCropperState();\n            this.renderCropper();\n        } else {\n            this._setMouseCursor(this.mouseMoveEvent);\n        }\n\n        this.previousMouseX = this.mouseMoveEvent.pageX;\n        this.previousMouseY = this.mouseMoveEvent.pageY;\n\n        this.mouseMoveEvent = null;\n    },\n\n    /**\n     * Handle mouse being released.\n     *\n     * @param ev\n     */\n    _handleMouseUp: function(ev) {\n        this.draggingCropper = false;\n        this.scalingCropper = false;\n        this.draggingFocal = false;\n    },\n\n    /**\n     * Handle mouse out\n     *\n     * @param ev\n     */\n    _handleMouseOut: function(ev) {\n        this._handleMouseUp(ev);\n        this.mouseMoveEvent = ev;\n        this._handleMouseMoveInternal();\n    },\n\n    /**\n     * Handle cropper being dragged.\n     *\n     * @param ev\n     */\n    _handleCropperDrag: function(ev) {\n        if (typeof this._handleCropperDrag._ === 'undefined') {\n            this._handleCropperDrag._ = {};\n        }\n\n        this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n            return false;\n        }\n\n        this._handleCropperDrag._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n        // If this would drag it outside of the image\n        if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n            // Try to find the furthest point in the same general direction where we can drag it\n\n            // Delta iterator setup\n            this._handleCropperDrag._.dxi = 0;\n            this._handleCropperDrag._.dyi = 0;\n            this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n            this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n            // The furthest we can move\n            this._handleCropperDrag._.furthest = 0;\n            this._handleCropperDrag._.furthestDeltas = {};\n\n            // Loop through every combination of dragging it not so far\n            for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                    this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                    if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                        if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                            this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                            this._handleCropperDrag._.furthestDeltas = {\n                                x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                            }\n                        }\n                    }\n                }\n            }\n\n            // REALLY can't drag along the cursor movement\n            if (this._handleCropperDrag._.furthest == 0) {\n                return;\n            } else {\n                this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n            }\n        }\n\n        this.clipper.set({\n            left: this.clipper.left + this._handleCropperDrag._.deltaX,\n            top: this.clipper.top + this._handleCropperDrag._.deltaY\n        });\n    },\n\n    /**\n     * Handle focal point being dragged.\n     *\n     * @param ev\n     */\n    _handleFocalDrag: function(ev) {\n        if (typeof this._handleFocalDrag._ === 'undefined') {\n            this._handleFocalDrag._ = {};\n        }\n\n        if (this.focalPoint) {\n            this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                return;\n            }\n\n            this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n            this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n            // Just make sure that the focal point stays inside the image\n            if (this.currentView === 'crop') {\n                if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                    return;\n                }\n            } else {\n                if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                    && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                    return;\n                }\n            }\n\n            this.focalPoint.set({\n                left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n            });\n        }\n    },\n\n    /**\n     * Set the cropping constraint\n     * @param constraint\n     */\n    setCroppingConstraint: function(constraint) {\n        // In case this caused the sidebar width to change.\n        this.updateSizeAndPosition();\n\n        switch (constraint) {\n            case 'none':\n                this.croppingConstraint = false;\n                break;\n\n            case 'original':\n                this.croppingConstraint = this.originalWidth / this.originalHeight;\n                break;\n\n            case 'current':\n                this.croppingConstraint = this.clipper.width / this.clipper.height;\n                break;\n\n            case 'custom':\n\n                break;\n            default:\n                this.croppingConstraint = parseFloat(constraint);\n\n                break;\n        }\n    },\n\n    /**\n     * Enforce the cropping constraint\n     */\n    enforceCroppingConstraint: function() {\n        if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n            this.enforceCroppingConstraint._ = {};\n        }\n\n        if (this.animationInProgress || !this.croppingConstraint) {\n            return;\n        }\n\n        this.animationInProgress = true;\n\n        // Mock the clipping rectangle for collision tests\n        this.enforceCroppingConstraint._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        // If wider than it should be\n        if (this.clipper.width > this.clipper.height * this.croppingConstraint) {\n            this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n            // Make it taller!\n            this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n            // Getting really awkward having to convert between 0;0 being center or top-left corner.\n            this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n            // If the clipper would end up out of bounds, make it narrower instead.\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n            }\n        } else {\n            // Follow the same pattern, if taller than it should be.\n            this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n            this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n            this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n            }\n        }\n\n        this.enforceCroppingConstraint._.properties = {\n            height: this.enforceCroppingConstraint._.rectangle.height,\n            width: this.enforceCroppingConstraint._.rectangle.width\n        };\n\n        // Make sure to redraw cropper handles and gridlines when resizing\n        this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n            onChange: () => {\n                this._redrawCropperElements();\n                this.croppingCanvas.renderAll();\n            },\n            duration: this.settings.animationDuration,\n            onComplete: () => {\n                this._redrawCropperElements();\n                this.animationInProgress = false;\n                this.renderCropper();\n                this.storeCropperState();\n            },\n        });\n    },\n\n    /**\n     * Handle cropper being resized.\n     *\n     * @param ev\n     */\n    _handleCropperResize: function(ev) {\n        if (typeof this._handleCropperResize._ === 'undefined') {\n            this._handleCropperResize._ = {};\n        }\n\n        // Size deltas\n        this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n            this._handleCropperResize._.deltaX = 0;\n        }\n\n        if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n            this._handleCropperResize._.deltaY = 0;\n        }\n\n        if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n            return;\n        }\n\n        // Translate from center-center origin to absolute coords\n        this._handleCropperResize._.startingRectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        }\n\n        this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n        if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n            return;\n        }\n\n        if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n            return;\n        }\n\n        // Translate back to center-center origin.\n        this.clipper.set({\n            top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n            left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n            width: this._handleCropperResize._.rectangle.width,\n            height: this._handleCropperResize._.rectangle.height\n        });\n\n        this._redrawCropperElements();\n    },\n\n    _calculateNewCropperSizeByDeltas: function(startingRectangle, deltaX, deltaY, cropperDirection) {\n        if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n            this._calculateNewCropperSizeByDeltas._ = {};\n        }\n\n        // Center deltas\n        this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n        this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n        this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n        this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n        this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n        // Lock the aspect ratio if needed\n        if (this.croppingConstraint) {\n            this._calculateNewCropperSizeByDeltas._.change = 0;\n\n            // Take into account the mouse direction and figure out the \"real\" change in cropper size\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'br':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n\n            if (this.croppingConstraint > 1) {\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n            } else {\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n            // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n        } else {\n            // Lock the aspect ratio\n            if (this.shiftKeyHeld &&\n                (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                    cropperDirection === 'bl' || cropperDirection === 'br')\n            ) {\n                this._calculateNewCropperSizeByDeltas._.ratio;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                }\n            }\n\n            if (cropperDirection.match(/t/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/b/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/r/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n            if (cropperDirection.match(/l/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n        }\n\n        this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n        this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n        this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n        this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n        return this._calculateNewCropperSizeByDeltas._.rectangle;\n    },\n\n    /**\n     * Set mouse cursor by it's position over cropper.\n     *\n     * @param ev\n     */\n    _setMouseCursor: function(ev) {\n        if (typeof this._setMouseCursor._ === 'undefined') {\n            this._setMouseCursor._ = {};\n        }\n\n        if (Garnish.isMobileBrowser(true)) {\n            return;\n        }\n        this._setMouseCursor._.cursor = 'default';\n        this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n        if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n            this._setMouseCursor._.cursor = 'pointer';\n        } else if (this._setMouseCursor._.handle) {\n            if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                this._setMouseCursor._.cursor = 'ns-resize';\n            } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                this._setMouseCursor._.cursor = 'ew-resize';\n            } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                this._setMouseCursor._.cursor = 'nwse-resize';\n            } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                this._setMouseCursor._.cursor = 'nesw-resize';\n            }\n        } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n            this._setMouseCursor._.cursor = 'move';\n        }\n\n        $('.body').css('cursor', this._setMouseCursor._.cursor);\n    },\n\n    /**\n     * Test whether the mouse cursor is on any cropper handles.\n     *\n     * @param ev\n     */\n    _cropperHandleHitTest: function(ev) {\n        if (typeof this._cropperHandleHitTest._ === 'undefined') {\n            this._cropperHandleHitTest._ = {};\n        }\n\n        this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n        this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n        this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n        this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n        this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n        this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n        // Left side top/bottom\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tl';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'bl';\n            }\n        }\n        // Right side top/bottom\n        if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tr';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'br';\n            }\n        }\n\n        // Left or right\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'l';\n        }\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'r';\n        }\n\n        // Top or bottom\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 't';\n        }\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 'b';\n        }\n\n        return false;\n    },\n\n    /**\n     * Test whether the mouse cursor is on a fabricJS object.\n     *\n     * @param object\n     * @param event\n     *\n     * @return boolean\n     */\n\n    _isMouseOver: function(event, object) {\n        if (typeof this._isMouseOver._ === 'undefined') {\n            this._isMouseOver._ = {};\n        }\n\n        this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n        this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n        this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._isMouseOver._.lb = object.left - object.width / 2;\n        this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n        this._isMouseOver._.tb = object.top - object.height / 2;\n        this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n        return (\n            this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n            this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n            this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n            this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n        );\n    },\n\n    /**\n     * Get vertices of a rectangle defined by left,top,height and width properties.\n     * Optionally it's possible to provide offsetX and offsetY values.\n     * Left and top properties of rectangle reference the top-left corner.\n     *\n     * @param rectangle\n     * @param [offsetX]\n     * @param [offsetY]\n     */\n    _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n        if (typeof this._getRectangleVertices._ === 'undefined') {\n            this._getRectangleVertices._ = {};\n        }\n\n        if (typeof offsetX === 'undefined') {\n            offsetX = 0;\n        }\n        if (typeof offsetY === 'undefined') {\n            offsetY = 0;\n        }\n\n        this._getRectangleVertices._.topLeft = {\n            x: rectangle.left + offsetX,\n            y: rectangle.top + offsetY\n        };\n\n        this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n        this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n        this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n        return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n    },\n\n    /**\n     * Set image vertice coordinates for an image that's been zoomed to fit.\n     */\n    _setFittedImageVerticeCoordinates: function() {\n        this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n    },\n\n    /**\n     * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n     * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n     *\n     * @param zoomMode\n     */\n    getImageVerticeCoords: function(zoomMode) {\n        var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n        var imageDimensions = this.getScaledImageDimensions();\n\n        var ratio;\n\n        if (typeof zoomMode === \"number\") {\n            ratio = zoomMode;\n        } else if (zoomMode === \"cover\") {\n            ratio = this.getZoomToCoverRatio(imageDimensions);\n        } else {\n            ratio = this.getZoomToFitRatio(imageDimensions);\n        }\n\n        // Get the dimensions of the scaled image\n        var scaledHeight = imageDimensions.height * ratio;\n        var scaledWidth = imageDimensions.width * ratio;\n\n        // Calculate the segments of the containing box for the image.\n        // When referring to top/bottom or right/left segments, these are on the\n        // right-side and bottom projection of the containing box for the zoomed out image.\n        var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n        var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n        var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n        var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n        // Calculate the offsets from editor box for the image-containing box\n        var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n        var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n        // Finally, calculate the image vertice coordinates\n        return {\n            a: {\n                x: horizontalOffset + rightHorizontalSegment,\n                y: verticalOffset\n            },\n            b: {\n                x: this.editorWidth - horizontalOffset,\n                y: verticalOffset + topVerticalSegment\n            },\n            c: {\n                x: horizontalOffset + leftHorizontalSegment,\n                y: this.editorHeight - verticalOffset\n            },\n            d: {\n                x: horizontalOffset,\n                y: verticalOffset + bottomVerticalSegment\n            }\n        };\n    },\n\n    /**\n     * Debug stuff by continuously rendering a fabric object on canvas.\n     *\n     * @param fabricObj\n     */\n    _debug: function(fabricObj) {\n        this.canvas.remove(this.debugger);\n        this.debugger = fabricObj;\n        this.canvas.add(this.debugger);\n    },\n\n    /**\n     * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n     * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n     * return true if the point is in the rectangle.\n     *\n     * Adapted from: http://stackoverflow.com/a/2763387/2040791\n     *\n     * @param points\n     * @param rectangle\n     */\n    arePointsInsideRectangle: function(points, rectangle) {\n        if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n            this.arePointsInsideRectangle._ = {};\n        }\n\n        // Pre-calculate the vectors and scalar products for two rectangle edges\n        this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n        this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n        this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n        this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n        for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n            this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n            // Calculate the vectors for two rectangle sides and for\n            // the vector from vertices a and b to the point P\n            this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n            this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n            // Calculate scalar or dot products for some vector combinations\n            this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n            this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n            this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n            this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n            if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    /**\n     * Returns an object representing the vector between points a and b.\n     *\n     * @param a\n     * @param b\n     */\n    _getVector: function(a, b) {\n        return {x: b.x - a.x, y: b.y - a.y};\n    },\n\n    /**\n     * Returns the scalar product of two vectors\n     *\n     * @param a\n     * @param b\n     */\n    _getScalarProduct: function(a, b) {\n        return a.x * b.x + a.y * b.y;\n    },\n\n    /**\n     * Returns the magnitude of a vector_redrawCropperElements\n     * .\n     *\n     * @param vector\n     */\n    _getVectorMagnitude: function(vector) {\n        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    },\n\n    /**\n     * Returns the angle between two vectors in degrees with two decimal points\n     *\n     * @param a\n     * @param b\n     */\n    _getAngleBetweenVectors: function(a, b) {\n        return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n    },\n\n    /**\n     * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n     *\n     * @param rectangle\n     * @param vertex\n     *\n     * @returns {*}\n     */\n    _getEdgeCrossed: function(rectangle, vertex) {\n        // Determine over which edge the vertex is\n        var edgePoints = [\n            [rectangle.a, rectangle.b],\n            [rectangle.b, rectangle.c],\n            [rectangle.c, rectangle.d],\n            [rectangle.d, rectangle.a]\n        ];\n\n        var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n        var smallestDiff = 180;\n        var edgeCrossed = null;\n\n        // Test each edge\n        for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n            var edge = edgePoints[edgeIndex];\n            var toCenter = this._getVector(edge[0], centerPoint);\n            var edgeVector = this._getVector(edge[0], edge[1]);\n            var toVertex = this._getVector(edge[0], vertex);\n\n            // If the angle between toCenter/toVertex is the sum of\n            // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n            // the edgeVector is between the other two meaning that this is the offending vertex.\n            // To avoid the rounding errors, we'll take the closest match\n            var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n            if (diff < smallestDiff) {\n                smallestDiff = diff;\n                edgeCrossed = edge;\n            }\n        }\n\n        return edgeCrossed;\n    },\n\n    /**\n     * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n     *\n     * @param dimensions\n     */\n    _getImageBoundingBox: function(dimensions) {\n        var box = {};\n\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        var proportion = dimensions.height / dimensions.width;\n        box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n        box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n        if (this.hasOrientationChanged()) {\n            var temp = box.width;\n            box.width = box.height;\n            box.height = temp;\n        }\n\n        return box;\n    }\n}, {\n    defaults: {\n        animationDuration: 100,\n        allowSavingAsNew: true,\n        onSave: $.noop,\n        allowDegreeFractions: null,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend({\n    $includeSubfoldersContainer: null,\n    $includeSubfoldersCheckbox: null,\n    showingIncludeSubfoldersCheckbox: false,\n\n    $uploadButton: null,\n    $uploadInput: null,\n    $progressBar: null,\n    $folders: null,\n\n    uploader: null,\n    promptHandler: null,\n    progressBar: null,\n\n    _uploadTotalFiles: 0,\n    _uploadFileProgress: {},\n    _uploadedAssetIds: [],\n    _currentUploaderSettings: {},\n\n    _assetDrag: null,\n    _folderDrag: null,\n    _expandDropTargetFolderTimeout: null,\n    _tempExpandedFolders: [],\n\n    _fileConflictTemplate: {\n        choices: [\n            {value: 'keepBoth', title: Craft.t('app', 'Keep both')}, {value: 'replace', title: Craft.t('app', 'Replace it')}\n        ]\n    },\n    _folderConflictTemplate: {\n        choices: [\n            {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')}, {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n        ]\n    },\n\n    init: function(elementType, $container, settings) {\n        this.base(elementType, $container, settings);\n\n        if (this.settings.context === 'index') {\n            if (!this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n        } else {\n            this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n            if (this.settings.modal) {\n                this.settings.modal.on('updateSizeAndPosition', this._positionProgressBar.bind(this));\n            }\n        }\n    },\n\n    initSources: function() {\n        if (this.settings.context === 'index' && !this._folderDrag) {\n            this._initIndexPageMode();\n        }\n\n        return this.base();\n    },\n\n    initSource: function($source) {\n        this.base($source);\n\n        this._createFolderContextMenu($source);\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                if ($source.data('folder-id')) {\n                    this._folderDrag.addItems($source.parent());\n                }\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    deinitSource: function($source) {\n        this.base($source);\n\n        // Does this source have a context menu?\n        var contextMenu = $source.data('contextmenu');\n\n        if (contextMenu) {\n            contextMenu.destroy();\n        }\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                this._folderDrag.removeItems($source.parent());\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    _getSourceLevel: function($source) {\n        return $source.parentsUntil('nav', 'ul').length;\n    },\n\n    /**\n     * Initialize the index page-specific features\n     */\n    _initIndexPageMode: function() {\n        if (this._folderDrag) {\n            return;\n        }\n\n        // Make the elements selectable\n        this.settings.selectable = true;\n        this.settings.multiSelect = true;\n\n        // Asset dragging\n        // ---------------------------------------------------------------------\n\n        this._assetDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n            filter: () => this.view.getSelectedElements().has('div.element[data-movable]'),\n            helper: $file => this._getFileDragHelper($file),\n            dropTargets: () => {\n                // Which data attribute should we be checking?\n                var attr;\n                if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                    attr = 'data-can-move-peer-files-to';\n                } else {\n                    attr = 'data-can-move-to';\n                }\n\n                var targets = [];\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder\n                    var $source = this.$sources.eq(i);\n                    if (Garnish.hasAttr($source, attr)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFileDragStop.bind(this),\n            helperBaseZindex: 800\n        });\n\n        // Folder dragging\n        // ---------------------------------------------------------------------\n\n        this._folderDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: () => {\n                // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                var $selected = this.sourceSelect.getSelectedItems(),\n                    draggees = [];\n\n                for (var i = 0; i < $selected.length; i++) {\n                    var $source = $selected.eq(i);\n\n                    if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                        continue;\n                    }\n\n                    if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                        draggees.push($source.parent()[0]);\n                    }\n                }\n\n                return $(draggees);\n            },\n\n            helper: $draggeeHelper => {\n                var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                    $helperNav = $('<nav/>').appendTo($helperSidebar),\n                    $helperUl = $('<ul/>').appendTo($helperNav);\n\n                $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                $draggeeHelper.children('a').addClass('sel');\n\n                // Match the style\n                $draggeeHelper.css({\n                    'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                    'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                    'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                    'padding-left': this._folderDrag.$draggee.css('padding-left')\n                });\n\n                return $helperSidebar;\n            },\n\n            dropTargets: () => {\n                var targets = [];\n\n                // Tag the dragged folder and it's subfolders\n                var draggedSourceIds = [];\n                this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                    draggedSourceIds.push($(this).data('key'));\n                });\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder and not one of the dragged folders\n                    var $source = this.$sources.eq(i),\n                        key = $source.data('key');\n\n                    if (!this._getFolderUidFromSourceKey(key)) {\n                        continue;\n                    }\n\n                    if (!Craft.inArray(key, draggedSourceIds)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFolderDragStop.bind(this),\n        });\n    },\n\n    /**\n     * On file drag stop\n     */\n    _onFileDragStop: function() {\n        if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n            // Keep it selected\n            var originatingSource = this.$source;\n\n            var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                originalAssetIds = [];\n\n            // For each file, prepare array data.\n            for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                originalAssetIds.push(originalAssetId);\n            }\n\n            // Are any files actually getting moved?\n            if (originalAssetIds.length) {\n                this.setIndexBusy();\n\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(originalAssetIds.length);\n                this.progressBar.showProgressBar();\n\n                // For each file to move a separate request\n                var parameterArray = [];\n                for (i = 0; i < originalAssetIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: {\n                            assetId: originalAssetIds[i],\n                            folderId: targetFolderId\n                        }\n                    });\n                }\n\n                // Define the callback for when all file moves are complete\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var response = responseArray[i];\n\n                        // Push prompt into prompt array\n                        if (response.conflict) {\n                            this.promptHandler.addPrompt({\n                                assetId: response.assetId,\n                                suggestedFilename: response.suggestedFilename,\n                                prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                            });\n                        }\n\n                        if (response.error) {\n                            alert(response.error);\n                        }\n                    }\n\n                    this.setIndexAvailable();\n                    this.progressBar.hideProgressBar();\n                    var reloadIndex = false;\n\n                    var performAfterMoveActions = function() {\n                        // Select original source\n                        this.sourceSelect.selectItem(originatingSource);\n\n                        // Make sure we use the correct offset when fetching the next page\n                        this._totalVisible -= this._assetDrag.$draggee.length;\n\n                        // And remove the elements that have been moved away\n                        for (var i = 0; i < originalAssetIds.length; i++) {\n                            $('[data-id=' + originalAssetIds[i] + ']').remove();\n                        }\n\n                        this.view.deselectAllElements();\n                        this._collapseExtraExpandedFolders(targetFolderId);\n\n                        if (reloadIndex) {\n                            this.updateElements();\n                        }\n                    };\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            var newParameterArray = [];\n\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    reloadIndex = true;\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'keepBoth') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            filename: returnData[i].suggestedFilename\n                                        }\n                                    });\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            force: true\n                                        }\n                                    });\n                                }\n                            }\n\n                            // Nothing to do, carry on\n                            if (newParameterArray.length === 0) {\n                                performAfterMoveActions.apply(this);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                // Move conflicting files again with resolutions now\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this._assetDrag.fadeOutHelpers();\n                        this.promptHandler.showBatchPrompts(promptCallback);\n                    } else {\n                        performAfterMoveActions.apply(this);\n                        this._assetDrag.fadeOutHelpers();\n                    }\n                };\n\n                // Initiate the file move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._assetDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * On folder drag stop\n     */\n    _onFolderDragStop: function() {\n        // Only move if we have a valid target and we're not trying to move into our direct parent\n        if (\n            this._folderDrag.$activeDropTarget &&\n            this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n        ) {\n            var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n            this._collapseExtraExpandedFolders(targetFolderId);\n\n            // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n            var folderIds = [];\n\n            for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                    folderId = $a.data('folder-id');\n\n                // Make sure it's not already in the target folder and use this single folder Id.\n                if (folderId != targetFolderId) {\n                    folderIds.push(folderId);\n                    break;\n                }\n            }\n\n            if (folderIds.length) {\n                folderIds.sort();\n                folderIds.reverse();\n\n                this.setIndexBusy();\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(folderIds.length);\n                this.progressBar.showProgressBar();\n\n                var parameterArray = [];\n\n                for (i = 0; i < folderIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-folder',\n                        params: {\n                            folderId: folderIds[i],\n                            parentId: targetFolderId\n                        }\n                    });\n                }\n\n                // Increment, so to avoid displaying folder files that are being moved\n                this.requestId++;\n\n                /*\n                 Here's the rundown:\n                 1) Send all the folders being moved\n                 2) Get results:\n                 a) For all conflicting, receive prompts and resolve them to get:\n                 b) For all valid move operations: by now server has created the needed folders\n                 in target destination. Server returns an array of file move operations\n                 c) server also returns a list of all the folder id changes\n                 d) and the data-id of node to be removed, in case of conflict\n                 e) and a list of folders to delete after the move\n                 3) From data in 2) build a large file move operation array\n                 4) Create a request loop based on this, so we can display progress bar\n                 5) when done, delete all the folders and perform other maintenance\n                 6) Champagne\n                 */\n\n                // This will hold the final list of files to move\n                var fileMoveList = [];\n\n                var newSourceKey = '';\n\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var data = responseArray[i];\n\n                        // If successful and have data, then update\n                        if (data.success) {\n                            if (data.transferList) {\n                                fileMoveList = data.transferList;\n                            }\n\n                            if (data.newFolderId) {\n                                newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                            }\n                        }\n\n                        // Push prompt into prompt array\n                        if (data.conflict) {\n                            data.prompt = {\n                                message: data.conflict,\n                                choices: this._folderConflictTemplate.choices\n                            };\n\n                            this.promptHandler.addPrompt(data);\n                        }\n\n                        if (data.error) {\n                            alert(data.error);\n                        }\n                    }\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            this.promptHandler.resetPrompts();\n\n                            var newParameterArray = [];\n\n                            var params = {};\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    params.force = true;\n                                }\n\n                                if (returnData[i].choice === 'merge') {\n                                    params.merge = true;\n                                }\n\n                                params.folderId = data.folderId;\n                                params.parentId = data.parentId;\n\n                                newParameterArray.push({\n                                    action: 'assets/move-folder',\n                                    params: params\n                                });\n                            }\n\n                            // Start working on them lists, baby\n                            if (newParameterArray.length === 0) {\n                                this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this.promptHandler.showBatchPrompts(promptCallback);\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                    } else {\n                        this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                    }\n                };\n\n                // Initiate the folder move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees until we get the Ajax response\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._folderDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * Really move the folder. Like really. For real.\n     */\n    _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n        this.progressBar.setItemCount(1);\n        this.progressBar.showProgressBar();\n\n        var moveCallback = folderDeleteList => {\n            // Delete the old folders\n            var counter = 0;\n            var limit = folderDeleteList.length;\n            for (var i = 0; i < folderDeleteList.length; i++) {\n                // When all folders are deleted, reload the sources.\n                Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, () => {\n                    if (++counter === limit) {\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        this._folderDrag.returnHelpersToDraggees();\n                        this.setInstanceState('selectedSource', newSourceKey);\n                        this.refreshSources();\n                    }\n                });\n            }\n        };\n\n        if (fileMoveList.length > 0) {\n            var parameterArray = [];\n\n            for (var i = 0; i < fileMoveList.length; i++) {\n                parameterArray.push({\n                    action: 'assets/move-asset',\n                    params: fileMoveList[i]\n                });\n            }\n            this._performBatchRequests(parameterArray, function() {\n                moveCallback(folderDeleteList);\n            });\n        } else {\n            moveCallback(folderDeleteList);\n        }\n    },\n\n    /**\n     * Returns the root level source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getRootSource: function($source) {\n        var $parent;\n        while (($parent = this._getParentSource($source)) && $parent.length) {\n            $source = $parent;\n        }\n        return $source;\n    },\n\n    /**\n     * Get parent source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getParentSource: function($source) {\n        if (this._getSourceLevel($source) > 1) {\n            return $source.parent().parent().siblings('a');\n        }\n    },\n\n    _selectSourceByFolderId: function(targetFolderId) {\n        var $targetSource = this._getSourceByKey(targetFolderId);\n\n        // Make sure that all the parent sources are expanded and this source is visible.\n        var $parentSources = $targetSource.parent().parents('li');\n\n        for (var i = 0; i < $parentSources.length; i++) {\n            var $parentSource = $($parentSources[i]);\n\n            if (!$parentSource.hasClass('expanded')) {\n                $parentSource.children('.toggle').trigger('click');\n            }\n        }\n\n        this.selectSource($targetSource);\n        this.updateElements();\n    },\n\n    /**\n     * Initialize the uploader.\n     *\n     * @private\n     */\n    afterInit: function() {\n        if (!this.$uploadButton) {\n            this.$uploadButton = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                'data-icon': 'upload',\n                style: 'position: relative; overflow: hidden;',\n                text: Craft.t('app', 'Upload files'),\n            });\n            this.addButton(this.$uploadButton);\n\n            this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n        }\n\n        this.promptHandler = new Craft.PromptHandler();\n        this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            fileInput: this.$uploadInput,\n            dropZone: this.$container\n        };\n\n        options.events = {\n            fileuploadstart: this._onUploadStart.bind(this),\n            fileuploadprogressall: this._onUploadProgress.bind(this),\n            fileuploaddone: this._onUploadComplete.bind(this),\n        };\n\n        if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        this._currentUploaderSettings = options;\n\n        this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n        this.$uploadButton.on('click', () => {\n            if (this.$uploadButton.hasClass('disabled')) {\n                return;\n            }\n            if (!this.isIndexBusy) {\n                this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n            }\n        });\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific volume in the URL?\n        if (this.settings.context === 'index' && typeof window.defaultSource !== 'undefined') {\n            let defaultSourceParts = window.defaultSource.split('/');\n            let volumeSource = this.$sources.toArray().find(s => {\n                return $(s).data('volume-handle') === defaultSourceParts[0];\n            });\n            if (volumeSource) {\n                let $source = $(volumeSource);\n\n                for (let i = 1; i < defaultSourceParts.length; i++) {\n                    // does $source have a subfolder with this path name?\n                    let subfolderSource = this._getChildSources($source).toArray().find(s => {\n                        return $('> .label', s).text() === defaultSourceParts[i];\n                    });\n                    if (!subfolderSource) {\n                        break;\n                    }\n                    this._expandSource($source);\n                    $source = $(subfolderSource);\n                }\n\n                return $source.data('key');\n            }\n        }\n\n        return this.base();\n    },\n\n    onSelectSource: function() {\n        var $source = this._getSourceByKey(this.sourceKey);\n        var folderId = $source.data('folder-id');\n\n        if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n            this.uploader.setParams({\n                folderId: this.$source.attr('data-folder-id')\n            });\n            this.$uploadButton.removeClass('disabled');\n        } else {\n            this.$uploadButton.addClass('disabled');\n        }\n\n        // Update the URL if we're on the Assets index\n        if ($source.length && this.settings.context === 'index') {\n            this._updateUrl($source);\n        }\n\n        this.base();\n    },\n\n    _updateUrl: function($source) {\n        if (typeof history === 'undefined') {\n            return;\n        }\n\n        // Find all the subfolder sources. At the end, $thisSource will be the root volume source\n        let nestedSources = [];\n        let $thisSource = $source;\n        let $parent;\n        while (($parent = this._getParentSource($thisSource)) && $parent.length) {\n            nestedSources.unshift($thisSource);\n            $thisSource = $parent;\n        }\n\n        let uri = 'assets';\n        if ($thisSource.data('volume-handle')) {\n            uri += '/' + $thisSource.data('volume-handle');\n            nestedSources.forEach($s => {\n                uri += '/' + $s.children('.label').text();\n            });\n        }\n\n        history.replaceState({}, '', Craft.getUrl(uri));\n    },\n\n    _getFolderUidFromSourceKey: function(sourceKey) {\n        var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n        return m ? m[1] : null;\n    },\n\n    startSearching: function() {\n        // Does this source have subfolders?\n        if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n            if (this.$includeSubfoldersContainer === null) {\n                var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                    this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                    this.updateElements();\n                });\n            } else {\n                this.$includeSubfoldersContainer.velocity('stop');\n            }\n\n            var checked = this.getSelectedSourceState('includeSubfolders', false);\n            this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: 0,\n                opacity: 1\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = true;\n        }\n\n        this.base();\n    },\n\n    stopSearching: function() {\n        if (this.showingIncludeSubfoldersCheckbox) {\n            this.$includeSubfoldersContainer.velocity('stop');\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: -25,\n                opacity: 0\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = false;\n        }\n\n        this.base();\n    },\n\n    getViewParams: function() {\n        var data = this.base();\n\n        if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n            data.criteria.includeSubfolders = true;\n        }\n\n        return data;\n    },\n\n    /**\n     * React on upload submit.\n     *\n     * @private\n     */\n    _onUploadStart: function() {\n        this.setIndexBusy();\n\n        // Initial values\n        this._positionProgressBar();\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n\n        this.promptHandler.resetPrompts();\n    },\n\n    /**\n     * Update uploaded byte count.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On Upload Complete.\n     */\n    _onUploadComplete: function(event, data) {\n        var response = data.result;\n        var filename = data.files[0].name;\n\n        var doReload = true;\n\n        if (response.success || response.conflict) {\n            // Add the uploaded file to the selected ones, if appropriate\n            this._uploadedAssetIds.push(response.assetId);\n\n            // If there is a prompt, add it to the queue\n            if (response.conflict) {\n                response.prompt = {\n                    message: Craft.t('app', response.conflict, {file: response.filename}),\n                    choices: this._fileConflictTemplate.choices\n                };\n\n                this.promptHandler.addPrompt(response);\n            }\n\n            Craft.cp.runQueue();\n        } else {\n            if (response.error) {\n                alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n            } else {\n                alert(Craft.t('app', 'Upload failed for {filename}.', {filename}));\n            }\n\n            doReload = false;\n        }\n\n        // For the last file, display prompts, if any. If not - just update the element view.\n        if (this.uploader.isLastUpload()) {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n\n            if (this.promptHandler.getPromptCount()) {\n                this.promptHandler.showBatchPrompts(this._uploadFollowup.bind(this));\n            } else {\n                if (doReload) {\n                    this._updateAfterUpload();\n                }\n            }\n        }\n    },\n\n    /**\n     * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n     *\n     * @private\n     */\n    _updateAfterUpload: function() {\n        if (this.settings.context !== 'index') {\n            this.setSortAttribute('dateModified');\n            this.setSortDirection('desc');\n        }\n        this.updateElements();\n    },\n\n    /**\n     * Follow up to an upload that triggered at least one conflict resolution prompt.\n     *\n     * @param returnData\n     * @private\n     */\n    _uploadFollowup: function(returnData) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n\n        this.promptHandler.resetPrompts();\n\n        var finalCallback = () => {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n            this._updateAfterUpload();\n        };\n\n        this.progressBar.setItemCount(returnData.length);\n\n        var doFollowup = (parameterArray, parameterIndex, callback) => {\n            var postData = {};\n            var action = null;\n\n            var followupCallback = (data, textStatus) => {\n                if (textStatus === 'success' && data.assetId) {\n                    this._uploadedAssetIds.push(data.assetId);\n                } else if (data.error) {\n                    alert(data.error);\n                }\n                parameterIndex++;\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (parameterIndex === parameterArray.length) {\n                    callback();\n                } else {\n                    doFollowup(parameterArray, parameterIndex, callback);\n                }\n            };\n\n            if (parameterArray[parameterIndex].choice === 'replace') {\n                action = 'assets/replace-file';\n                postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                if (parameterArray[parameterIndex].conflictingAssetId) {\n                    postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                } else {\n                    postData.targetFilename = parameterArray[parameterIndex].filename;\n                }\n            } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                action = 'assets/delete-asset';\n                postData.assetId = parameterArray[parameterIndex].assetId;\n            }\n\n            if (!action) {\n                // We don't really need to do another request, so let's pretend that already happened\n                followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n            } else {\n                Craft.postActionRequest(action, postData, followupCallback);\n            }\n        };\n\n        this.progressBar.showProgressBar();\n        doFollowup(returnData, 0, finalCallback);\n    },\n\n    /**\n     * Perform actions after updating elements\n     * @private\n     */\n    onUpdateElements: function() {\n        this._onUpdateElements(false, this.view.getAllElements());\n        this.view.on('appendElements', ev => {\n            this._onUpdateElements(true, ev.newElements);\n        });\n\n        this.base();\n    },\n\n    /**\n     * Do the after-update initializations\n     * @private\n     */\n    _onUpdateElements: function(append, $newElements) {\n        if (this.settings.context === 'index') {\n            if (!append) {\n                this._assetDrag.removeAllItems();\n            }\n\n            this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n        }\n\n        // See if we have freshly uploaded files to add to selection\n        if (this._uploadedAssetIds.length) {\n            if (this.view.settings.selectable) {\n                for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                    this.view.selectElementById(this._uploadedAssetIds[i]);\n                }\n            }\n\n            // Reset the list.\n            this._uploadedAssetIds = [];\n        }\n\n        this.base(append, $newElements);\n\n        this.removeListener(this.$elements, 'keydown');\n        this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n        this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item).find('.element');\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    _onDragStart: function() {\n        this._tempExpandedFolders = [];\n    },\n\n    /**\n     * Get File Drag Helper\n     */\n    _getFileDragHelper: function($element) {\n        var currentView = this.getSelectedSourceState('mode');\n        var $outerContainer;\n        var $innerContainer;\n\n        switch (currentView) {\n            case 'table': {\n                $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                var $tbody = $('<tbody/>').appendTo($table);\n\n                $element.appendTo($tbody);\n\n                // Copy the column widths\n                this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                var $helperCells = $element.children();\n\n                for (var i = 0; i < $helperCells.length; i++) {\n                    // Hard-set the cell widths\n                    var $helperCell = $($helperCells[i]);\n\n                    // Skip the checkbox cell\n                    if ($helperCell.hasClass('checkbox-cell')) {\n                        $helperCell.remove();\n                        $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                        continue;\n                    }\n\n                    var $firstRowCell = $(this._$firstRowCells[i]),\n                        width = $firstRowCell.width();\n\n                    $firstRowCell.width(width);\n                    $helperCell.width(width);\n                }\n\n                return $outerContainer;\n            }\n            case 'thumbs': {\n                $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                $element.appendTo($innerContainer);\n\n                return $outerContainer;\n            }\n        }\n\n        return $();\n    },\n\n    /**\n     * On Drop Target Change\n     */\n    _onDropTargetChange: function($dropTarget) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        if ($dropTarget) {\n            var folderId = $dropTarget.data('folder-id');\n\n            if (folderId) {\n                this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                    this._expandDropTargetFolderTimeout = setTimeout(this._expandFolder.bind(this), 500);\n                }\n            } else {\n                this.dropTargetFolder = null;\n            }\n        }\n\n        if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n            // Temporarily remove the .sel class on the active source\n            this.$source.removeClass('sel');\n        } else {\n            this.$source.addClass('sel');\n        }\n    },\n\n    /**\n     * Collapse Extra Expanded Folders\n     */\n    _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        // If a source ID is passed in, exclude its parents\n        var $excludedSources;\n\n        if (dropTargetFolderId) {\n            $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n        }\n\n        for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n            var $source = this._tempExpandedFolders[i];\n\n            // Check the parent list, if a source id is passed in\n            if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                this._collapseFolder($source);\n                this._tempExpandedFolders.splice(i, 1);\n            }\n        }\n    },\n\n    _getSourceByKey: function(key) {\n        return this.$sources.filter('[data-key$=\"' + key + '\"]');\n    },\n\n    _hasSubfolders: function($source) {\n        return $source.siblings('ul').find('li').length;\n    },\n\n    _isExpanded: function($source) {\n        return $source.parent('li').hasClass('expanded');\n    },\n\n    _expandFolder: function() {\n        // Collapse any temp-expanded drop targets that aren't parents of this one\n        this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n        this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n        // Keep a record of that\n        this._tempExpandedFolders.push(this.dropTargetFolder);\n    },\n\n    _collapseFolder: function($source) {\n        if ($source.parent().hasClass('expanded')) {\n            $source.siblings('.toggle').trigger('click');\n        }\n    },\n\n    _createFolderContextMenu: function($source) {\n        // Make sure it's a volume folder\n        if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n            return;\n        }\n\n        var menuOptions = [\n            {\n                label: Craft.t('app', 'New subfolder'),\n                onClick: () => {\n                    this._createSubfolder($source);\n                },\n            },\n        ];\n\n        // For all folders that are not top folders\n        if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n            menuOptions.push({\n                label: Craft.t('app', 'Rename folder'),\n                onClick: () => {\n                    this._renameFolder($source);\n                },\n            });\n            menuOptions.push({\n                label: Craft.t('app', 'Delete folder'),\n                onClick: () => {\n                    this._deleteFolder($source);\n                },\n            });\n        }\n\n        new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n    },\n\n    _createSubfolder: function($parentFolder) {\n        var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n        if (subfolderName) {\n            var params = {\n                parentId: $parentFolder.data('folder-id'),\n                folderName: subfolderName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/create-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    this._prepareParentForChildren($parentFolder);\n\n                    var $subfolder = $(\n                        '<li>' +\n                        '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                        ' data-folder-id=\"' + data.folderId + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                        '>' +\n                        data.folderName +\n                        '</a>' +\n                        '</li>'\n                    );\n\n                    var $a = $subfolder.children('a:first');\n                    this._appendSubfolder($parentFolder, $subfolder);\n                    this.initSource($a);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    _deleteFolder: function($targetFolder) {\n        if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n            var params = {\n                folderId: $targetFolder.data('folder-id')\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/delete-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    var $parentFolder = this._getParentSource($targetFolder);\n\n                    // Remove folder and any trace from its parent, if needed\n                    this.deinitSource($targetFolder);\n\n                    $targetFolder.parent().remove();\n                    this._cleanUpTree($parentFolder);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    /**\n     * Rename\n     */\n    _renameFolder: function($source) {\n        const $label = $source.children('.label');\n        const oldName = Craft.trim($label.text())\n        const newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n        if (!newName || newName === oldName) {\n            return;\n        }\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', 'assets/rename-folder', {\n            data: {\n                folderId: $source.data('folder-id'),\n                newName: newName,\n            },\n        }).then(response => {\n            if (response.data.success) {\n                $label.text(response.data.newName);\n\n                // Is this the selected source?\n                if ($source.data('key') === this.$source.data('key')) {\n                    this.updateElements();\n\n                    // Update the URL if we're on the Assets index\n                    if (this.settings.context === 'index') {\n                        this._updateUrl($source);\n                    }\n                }\n            } else if (response.data.error) {\n                alert(response.data.error);\n            }\n        }).finally(() => {\n            this.setIndexAvailable();\n        });\n    },\n\n    /**\n     * Prepare a source folder for children folder.\n     *\n     * @param $parentFolder\n     * @private\n     */\n    _prepareParentForChildren: function($parentFolder) {\n        if (!this._hasSubfolders($parentFolder)) {\n            $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n            this.initSourceToggle($parentFolder);\n        }\n    },\n\n    /**\n     * Appends a subfolder to the parent folder at the correct spot.\n     *\n     * @param $parentFolder\n     * @param $subfolder\n     * @private\n     */\n    _appendSubfolder: function($parentFolder, $subfolder) {\n        var $subfolderList = $parentFolder.siblings('ul'),\n            $existingChildren = $subfolderList.children('li'),\n            subfolderLabel = $.trim($subfolder.children('a:first').text()),\n            folderInserted = false;\n\n        for (var i = 0; i < $existingChildren.length; i++) {\n            var $existingChild = $($existingChildren[i]);\n\n            if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                $existingChild.before($subfolder);\n                folderInserted = true;\n                break;\n            }\n        }\n\n        if (!folderInserted) {\n            $parentFolder.siblings('ul').append($subfolder);\n        }\n    },\n\n    _cleanUpTree: function($parentFolder) {\n        if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n            this.deinitSourceToggle($parentFolder);\n            $parentFolder.siblings('ul').remove();\n            $parentFolder.siblings('.toggle').remove();\n            $parentFolder.parent().removeClass('expanded');\n        }\n    },\n\n    _positionProgressBar: function() {\n        if (!this.progressBar) {\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n        }\n\n        var $container = $(),\n            scrollTop = 0,\n            offset = 0;\n\n        if (this.settings.context === 'index') {\n            $container = this.progressBar.$progressBar.closest('#content');\n            scrollTop = Garnish.$win.scrollTop();\n        } else {\n            $container = this.progressBar.$progressBar.closest('.main');\n            scrollTop = this.$main.scrollTop();\n        }\n\n        var containerTop = $container.offset().top;\n        var diff = scrollTop - containerTop;\n        var windowHeight = Garnish.$win.height();\n\n        if ($container.height() > windowHeight) {\n            offset = (windowHeight / 2) - 6 + diff;\n        } else {\n            offset = ($container.height() / 2) - 6;\n        }\n\n        if (this.settings.context !== 'index') {\n            offset = scrollTop + (($container.height() / 2) - 6);\n        }\n\n        this.progressBar.$progressBar.css({\n            top: offset\n        });\n    },\n\n    _performBatchRequests: function(parameterArray, finalCallback) {\n        var responseArray = [];\n\n        var doRequest = parameters => {\n            Craft.postActionRequest(parameters.action, parameters.params, (data, textStatus) => {\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (textStatus === 'success') {\n                    responseArray.push(data);\n\n                    // If assets were just merged we should get the reference tags updated right away\n                    Craft.cp.runQueue();\n                }\n\n                if (responseArray.length >= parameterArray.length) {\n                    finalCallback(responseArray);\n                }\n            });\n        };\n\n        for (var i = 0; i < parameterArray.length; i++) {\n            doRequest(parameterArray[i]);\n        }\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend({\n    requestId: 0,\n    hud: null,\n    $uploadBtn: null,\n    uploader: null,\n    progressBar: null,\n\n    init: function() {\n        this.base.apply(this, arguments);\n\n        if (this.settings.canUpload) {\n            this._attachUploader();\n        }\n\n        this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n        this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            this.openPreview();\n            ev.stopPropagation();\n            return false;\n        }\n    },\n    \n    onAddElements: function () {\n        this.$elements.find('.elementthumb').addClass('open-preview').on('mousedown touchstart', (ev) => {\n            this.elementSelect.focusItem($(ev.target).parent());\n            this.openPreview();\n            ev.stopPropagation();\n        });\n        this.base();\n    },\n\n    openPreview: function() {\n        if (Craft.PreviewFileModal.openInstance) {\n            Craft.PreviewFileModal.openInstance.selfDestruct();\n        } else {\n            var $element = this.elementSelect.$focusedItem;\n\n            if ($element.length) {\n                this._loadPreview($element);\n            }\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item);\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {\n            minGutter: 50\n        };\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n    },\n\n    /**\n     * Create the element editor\n     */\n    createElementEditor: function($element) {\n        return this.base($element, {\n            params: {\n                defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n            },\n            input: this\n        });\n    },\n\n    /**\n     * Attach the uploader with drag event handler\n     */\n    _attachUploader: function() {\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            dropZone: this.$container,\n            formData: {\n                fieldId: this.settings.fieldId,\n            }\n        };\n\n        if (this.settings.sourceElementId) {\n            options.formData.elementId = this.settings.sourceElementId;\n        }\n\n        if (this.settings.criteria.siteId) {\n            options.formData.siteId = this.settings.criteria.siteId;\n        }\n\n        if (this.$addElementBtn) {\n            this.$uploadBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn dashed',\n                'data-icon': 'upload',\n                text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n            }).insertAfter(this.$addElementBtn);\n            options.fileInput = $('<input/>', {\n                type: 'file',\n                class: 'hidden',\n                multiple: this.settings.limit != 1,\n            }).insertAfter(this.$uploadBtn);\n\n            // Trigger a window resize in case the field is inside an element editor HUD\n            Garnish.$win.trigger('resize');\n        }\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        if (typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        options.canAddMoreFiles = this.canAddMoreFiles.bind(this);\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        if (this.$uploadBtn) {\n            this.$uploadBtn.on('click', ev => {\n                // We can't store a reference to the file input, because it gets replaced with a new input\n                // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                this.$uploadBtn.next('input[type=file]').trigger('click');\n            });\n        }\n    },\n\n    replaceElement: function(elementId, replaceWithId) {\n        var parameters = {\n            elementId: replaceWithId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, data => {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                this.removeElement($existing);\n                let elementInfo = Craft.getElementInfo(data.html);\n                this.selectElements([elementInfo]);\n            }\n        });\n    },\n\n    refreshThumbnail: function(elementId) {\n        var parameters = {\n            elementId: elementId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, data => {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                this.thumbLoader.load($existing);\n            }\n        });\n    },\n\n    /**\n     * Add the freshly uploaded file to the input field.\n     */\n    selectUploadedFile: function(element) {\n        // Check if we're able to add new elements\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        var $newElement = element.$element;\n\n        // Make a couple tweaks\n        $newElement.addClass('removable');\n        $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        $newElement.appendTo(this.$elementsContainer);\n\n        var margin = -($newElement.outerWidth() + 10);\n\n        this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addElementBtn.velocity(animateCss, 'fast');\n\n        this.addElements($newElement);\n\n        delete this.modal;\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function() {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var parameters = {\n                elementId: data.result.assetId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, data => {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var html = $(data.html);\n                    Craft.appendHeadHtml(data.headHtml);\n                    this.selectUploadedFile(Craft.getElementInfo(html));\n                }\n\n                // Last file\n                if (this.uploader.isLastUpload()) {\n                    this.progressBar.hideProgressBar();\n                    this.$container.removeClass('uploading');\n\n                    if (window.draftEditor) {\n                        window.draftEditor.checkForm();\n                    }\n                }\n            });\n\n            Craft.cp.runQueue();\n        }\n    },\n\n    /**\n     * We have to take into account files about to be added as well\n     */\n    canAddMoreFiles: function(slotsTaken) {\n        return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n    },\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend({\n    $selectTransformBtn: null,\n    _selectedTransform: null,\n\n    init: function(elementType, settings) {\n        settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n        this.base(elementType, settings);\n\n        if (settings.transforms.length) {\n            this.createSelectTransformButton(settings.transforms);\n        }\n    },\n\n    createSelectTransformButton: function(transforms) {\n        if (!transforms || !transforms.length) {\n            return;\n        }\n\n        var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n        this.$selectBtn.appendTo($btnGroup);\n\n        this.$selectTransformBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn disabled',\n            text: Craft.t('app', 'Select transform'),\n        }).appendTo($btnGroup);\n\n        var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n            $menuList = $('<ul></ul>').appendTo($menu);\n\n        for (var i = 0; i < transforms.length; i++) {\n            $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n        }\n\n        var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n            onOptionSelect: this.onSelectTransform.bind(this),\n        });\n        MenuButton.disable();\n\n        this.$selectTransformBtn.data('menuButton', MenuButton);\n    },\n\n    onSelectionChange: function(ev) {\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            allowTransforms = false;\n\n        if ($selectedElements.length && this.settings.transforms.length) {\n            allowTransforms = true;\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                    break;\n                }\n            }\n        }\n\n        var MenuBtn = null;\n\n        if (this.$selectTransformBtn) {\n            MenuBtn = this.$selectTransformBtn.data('menuButton');\n        }\n\n        if (allowTransforms) {\n            if (MenuBtn) {\n                MenuBtn.enable();\n            }\n\n            this.$selectTransformBtn.removeClass('disabled');\n        } else if (this.$selectTransformBtn) {\n            if (MenuBtn) {\n                MenuBtn.disable();\n            }\n\n            this.$selectTransformBtn.addClass('disabled');\n        }\n\n        this.base();\n    },\n\n    onSelectTransform: function(option) {\n        var transform = $(option).data('transform');\n        this.selectImagesWithTransform(transform);\n    },\n\n    selectImagesWithTransform: function(transform) {\n        // First we must get any missing transform URLs\n        if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n            Craft.AssetSelectorModal.transformUrls[transform] = {};\n        }\n\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            imageIdsWithMissingUrls = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $item = $($selectedElements[i]),\n                elementId = Craft.getElementInfo($item).id;\n\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                imageIdsWithMissingUrls.push(elementId);\n            }\n        }\n\n        if (imageIdsWithMissingUrls.length) {\n            this.showFooterSpinner();\n\n            this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, () => {\n                this.hideFooterSpinner();\n                this.selectImagesWithTransform(transform);\n            });\n        } else {\n            this._selectedTransform = transform;\n            this.selectElements();\n            this._selectedTransform = null;\n        }\n    },\n\n    fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n        var elementId = imageIdsWithMissingUrls.pop();\n\n        var data = {\n            assetId: elementId,\n            handle: transform\n        };\n\n        Craft.postActionRequest('assets/generate-transform', data, (response, textStatus) => {\n            Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n            if (textStatus === 'success') {\n                if (response.url) {\n                    Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                }\n            }\n\n            // More to load?\n            if (imageIdsWithMissingUrls.length) {\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n            } else {\n                callback();\n            }\n        });\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = this.base($selectedElements);\n\n        if (this._selectedTransform) {\n            for (var i = 0; i < info.length; i++) {\n                var elementId = info[i].id;\n\n                if (\n                    typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                    Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                ) {\n                    info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                }\n            }\n        }\n\n        return info;\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo, this._selectedTransform);\n    }\n}, {\n    defaults: {\n        canSelectImageTransforms: false,\n        transforms: []\n    },\n\n    transformUrls: {}\n});\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend({\n    remainingSessionTime: null,\n    checkRemainingSessionTimer: null,\n    showLoginModalTimer: null,\n    decrementLogoutWarningInterval: null,\n\n    showingLogoutWarningModal: false,\n    showingLoginModal: false,\n\n    logoutWarningModal: null,\n    loginModal: null,\n\n    $logoutWarningPara: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $loginBtn: null,\n    $loginErrorPara: null,\n\n    submitLoginIfLoggedOut: false,\n\n    /**\n     * Init\n     */\n    init: function() {\n        this.updateRemainingSessionTime(Craft.remainingSessionTime);\n    },\n\n    /**\n     * Sets a timer for the next time to check the auth timeout.\n     */\n    setCheckRemainingSessionTimer: function(seconds) {\n        if (this.checkRemainingSessionTimer) {\n            clearTimeout(this.checkRemainingSessionTimer);\n        }\n\n        this.checkRemainingSessionTimer = setTimeout(this.checkRemainingSessionTime.bind(this), seconds * 1000);\n    },\n\n    /**\n     * Pings the server to see how many seconds are left on the current user session, and handles the response.\n     */\n    checkRemainingSessionTime: function(extendSession) {\n        $.ajax({\n            url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n            type: 'GET',\n            dataType: 'json',\n            complete: (jqXHR, textStatus) => {\n                if (textStatus === 'success') {\n                    if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                        Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                    }\n\n                    this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                    this.submitLoginIfLoggedOut = false;\n                } else {\n                    this.updateRemainingSessionTime(-1);\n                }\n            },\n        });\n    },\n\n    /**\n     * Updates our record of the auth timeout, and handles it.\n     */\n    updateRemainingSessionTime: function(remainingSessionTime) {\n        this.remainingSessionTime = parseInt(remainingSessionTime);\n\n        // Are we within the warning window?\n        if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n            // Is there still time to renew the session?\n            if (this.remainingSessionTime) {\n                if (!this.showingLogoutWarningModal) {\n                    // Show the warning modal\n                    this.showLogoutWarningModal();\n                }\n\n                // Will the session expire before the next checkup?\n                if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                    if (this.showLoginModalTimer) {\n                        clearTimeout(this.showLoginModalTimer);\n                    }\n\n                    this.showLoginModalTimer = setTimeout(this.showLoginModal.bind(this), this.remainingSessionTime * 1000);\n                }\n            } else {\n                if (this.showingLoginModal) {\n                    if (this.submitLoginIfLoggedOut) {\n                        this.submitLogin();\n                    }\n                } else {\n                    // Show the login modal\n                    this.showLoginModal();\n                }\n            }\n\n            this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n        } else {\n            // Everything's good!\n            this.hideLogoutWarningModal();\n            this.hideLoginModal();\n\n            // Will be be within the minSafeSessionTime before the next update?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n            } else {\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the logout warning modal.\n     */\n    showLogoutWarningModal: function() {\n        var quickShow;\n\n        if (this.showingLoginModal) {\n            this.hideLoginModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLogoutWarningModal = true;\n\n        if (!this.logoutWarningModal) {\n            let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n            let $body = $('<div class=\"body\"/>').appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $logoutBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Log out now'),\n            }).appendTo($buttons);\n            let $renewSessionBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Keep me logged in'),\n            }).appendTo($buttons);\n\n            this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n            this.logoutWarningModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                onFadeIn: function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the renew button\n                        setTimeout(function() {\n                            $renewSessionBtn.trigger('focus');\n                        }, 100);\n                    }\n                }\n            });\n\n            this.addListener($logoutBtn, 'activate', 'logout');\n            this.addListener($form, 'submit', 'renewSession');\n        }\n\n        if (quickShow) {\n            this.logoutWarningModal.quickShow();\n        } else {\n            this.logoutWarningModal.show();\n        }\n\n        this.updateLogoutWarningMessage();\n\n        this.decrementLogoutWarningInterval = setInterval(this.decrementLogoutWarning.bind(this), 1000);\n    },\n\n    /**\n     * Updates the logout warning message indicating that the session is about to expire.\n     */\n    updateLogoutWarningMessage: function() {\n        this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n            time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n        }));\n\n        this.logoutWarningModal.updateSizeAndPosition();\n    },\n\n    decrementLogoutWarning: function() {\n        if (this.remainingSessionTime > 0) {\n            this.remainingSessionTime--;\n            this.updateLogoutWarningMessage();\n        }\n\n        if (this.remainingSessionTime === 0) {\n            clearInterval(this.decrementLogoutWarningInterval);\n        }\n    },\n\n    /**\n     * Hides the logout warning modal.\n     */\n    hideLogoutWarningModal: function(quick) {\n        this.showingLogoutWarningModal = false;\n\n        if (this.logoutWarningModal) {\n            if (quick) {\n                this.logoutWarningModal.quickHide();\n            } else {\n                this.logoutWarningModal.hide();\n            }\n\n            if (this.decrementLogoutWarningInterval) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the login modal.\n     */\n    showLoginModal: function() {\n        var quickShow;\n\n        if (this.showingLogoutWarningModal) {\n            this.hideLogoutWarningModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLoginModal = true;\n\n        if (!this.loginModal) {\n            var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$loginBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Login'),\n            }).appendTo($buttonContainer);\n            this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.loginModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark loginmodalshade',\n                onFadeIn: () => {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the password input\n                        setTimeout(() => {\n                            this.$passwordInput.trigger('focus');\n                        }, 100);\n                    }\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($form, 'submit', 'login');\n        }\n\n        if (quickShow) {\n            this.loginModal.quickShow();\n        } else {\n            this.loginModal.show();\n        }\n    },\n\n    /**\n     * Hides the login modal.\n     */\n    hideLoginModal: function(quick) {\n        this.showingLoginModal = false;\n\n        if (this.loginModal) {\n            if (quick) {\n                this.loginModal.quickHide();\n            } else {\n                this.loginModal.hide();\n            }\n        }\n    },\n\n    logout: function() {\n        $.get({\n            url: Craft.getActionUrl('users/logout'),\n            dataType: 'json',\n            success: () => {\n                Craft.redirectTo('');\n            },\n        });\n    },\n\n    renewSession: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        this.hideLogoutWarningModal();\n        this.checkRemainingSessionTime(true);\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$loginBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$loginBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    login: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.validatePassword()) {\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            if (typeof Craft.csrfTokenValue !== 'undefined') {\n                // Check the auth status one last time before sending this off,\n                // in case the user has already logged back in from another window/tab\n                this.submitLoginIfLoggedOut = true;\n                this.checkRemainingSessionTime();\n            } else {\n                this.submitLogin();\n            }\n        }\n    },\n\n    submitLogin: function() {\n        var data = {\n            loginName: Craft.username,\n            password: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/login', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.hideLoginModal();\n                    this.checkRemainingSessionTime();\n                } else {\n                    this.showLoginError(response.error);\n                    Garnish.shake(this.loginModal.$container);\n\n                    if (!Garnish.isMobileBrowser(true)) {\n                        this.$passwordInput.trigger('focus');\n                    }\n                }\n            } else {\n                this.showLoginError();\n            }\n        });\n    },\n\n    showLoginError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$loginErrorPara.text(error);\n        this.loginModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showLoginError('');\n    }\n}, {\n    checkInterval: 60,\n    minSafeSessionTime: 120\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend({\n    authManager: null,\n\n    $nav: null,\n    $navToggle: null,\n    $globalSidebar: null,\n    $globalContainer: null,\n    $mainContainer: null,\n    $alerts: null,\n    $crumbs: null,\n    $breadcrumbList: null,\n    $breadcrumbItems: null,\n    $notificationContainer: null,\n    $main: null,\n    $primaryForm: null,\n    $headerContainer: null,\n    $header: null,\n    $mainContent: null,\n    $details: null,\n    $sidebarContainer: null,\n    $sidebar: null,\n    $contentContainer: null,\n    $edition: null,\n\n    $confirmUnloadForms: null,\n    $deltaForms: null,\n    $collapsibleTables: null,\n\n    isMobile: null,\n    fixedHeader: false,\n\n    breadcrumbListWidth: 0,\n    breadcrumbDisclosureItem: `<li class=\"breadcrumb-toggle-wrapper\" data-disclosure-item data-wrapper><button data-disclosure-trigger aria-controls=\"breadcrumb-disclosure\" aria-haspopup=\"true\">${Craft.t('app', 'More')}…</button><div id=\"breadcrumb-disclosure\" class=\"menu menu--disclosure\" data-disclosure-menu><ul></ul></div></li>`,\n\n    tabManager: null,\n\n    enableQueue: true,\n    totalJobs: 0,\n    jobInfo: null,\n    displayedJobInfo: null,\n    displayedJobInfoUnchanged: 1,\n    trackJobProgressTimeout: null,\n    jobProgressIcon: null,\n\n    checkingForUpdates: false,\n    forcingRefreshOnUpdatesCheck: false,\n    includingDetailsOnUpdatesCheck: false,\n    checkForUpdatesCallbacks: null,\n\n    resizeTimeout: null,\n\n    init: function() {\n        // Is this session going to expire?\n        if (Craft.remainingSessionTime !== 0) {\n            this.authManager = new Craft.AuthManager();\n        }\n\n        // Find all the key elements\n        this.$nav = $('#nav');\n        this.$navToggle = $('#nav-toggle');\n        this.$globalSidebar = $('#global-sidebar');\n        this.$globalContainer = $('#global-container');\n        this.$mainContainer = $('#main-container');\n        this.$alerts = $('#alerts');\n        this.$crumbs = $('#crumbs');\n        this.$breadcrumbList = $('.breadcrumb-list');\n        this.$breadcrumbItems = $('.breadcrumb-list li');\n        this.$notificationContainer = $('#notifications');\n        this.$main = $('#main');\n        this.$primaryForm = $('#main-form');\n        this.$headerContainer = $('#header-container');\n        this.$header = $('#header');\n        this.$mainContent = $('#main-content');\n        this.$details = $('#details');\n        this.$sidebarContainer = $('#sidebar-container');\n        this.$sidebar = $('#sidebar');\n        this.$contentContainer = $('#content-container');\n        this.$collapsibleTables = $('table.collapsible');\n\n        this.isMobile = Garnish.isMobileBrowser();\n\n        this.updateSidebarMenuLabel();\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        if (!this.isMobile && this.$header.length) {\n            this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n            this.updateFixedHeader();\n        }\n\n        Garnish.$doc.ready(() => {\n            // Update responsive tables on window resize\n            this.addListener(Garnish.$win, 'resize', ev => {\n                // Ignore element resizes\n                if (ev.target === window) {\n                    this.handleWindowResize();\n\n                    clearTimeout(this.resizeTimeout);\n                    var cp = this;\n                    this.resizeTimeout = setTimeout(function() {\n                        cp.setSidebarNavAttributes();\n                    }, 100);\n                }\n            });\n            this.handleWindowResize();\n            this.setSidebarNavAttributes();\n\n            // Fade the notification out two seconds after page load\n            var $errorNotifications = this.$notificationContainer.children('.error'),\n                $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n            $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n            $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n            // Wait a frame before initializing any confirm-unload forms,\n            // so other JS that runs on ready() has a chance to initialize\n            Garnish.requestAnimationFrame(this.initSpecialForms.bind(this));\n        });\n\n        // Alerts\n        if (this.$alerts.length) {\n            this.initAlerts();\n        }\n\n        // Toggles\n        this.addListener(this.$navToggle, 'click', 'toggleNav');\n        this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n        // Does this page have a primary form?\n        if (!this.$primaryForm.length) {\n            this.$primaryForm = $('form[data-saveshortcut]:first');\n        }\n\n        // Does the primary form support the save shortcut?\n        if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n            let shortcuts = [];\n            let actions = this.$primaryForm.data('actions');\n            if (typeof actions === 'undefined') {\n                shortcuts.push([\n                    {\n                        keyCode: Garnish.S_KEY,\n                        ctrl: true,\n                    }, {\n                        redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                        retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                    }\n                ]);\n            } else {\n                for (let i = 0; i < actions.length; i++) {\n                    let action = actions[i];\n                    if (!action.shortcut) {\n                        continue;\n                    }\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                            shift: !!action.shift,\n                        }, {\n                            action: action.action,\n                            redirect: action.redirect,\n                            confirm: action.confirm,\n                            params: action.params,\n                            data: action.data,\n                            retainScroll: action.retainScroll,\n                        }\n                    ]);\n                }\n            }\n            for (let i = 0; i < shortcuts.length; i++) {\n                Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                    this.submitPrimaryForm(shortcuts[i][1]);\n                });\n            }\n        }\n\n        this.initTabs();\n\n        // Should we match the previous scroll position?\n        let scrollY = Craft.getLocalStorage('scrollY');\n        if (typeof scrollY !== 'undefined') {\n            Craft.removeLocalStorage('scrollY');\n            Garnish.$doc.ready(() => {\n                Garnish.requestAnimationFrame(() => {\n                    window.scrollTo(0, scrollY);\n                });\n            });\n        }\n\n        if ($.isTouchCapable()) {\n            this.$mainContainer.on('focus', 'input, textarea, .focusable-input', this._handleInputFocus.bind(this));\n            this.$mainContainer.on('blur', 'input, textarea, .focusable-input', this._handleInputBlur.bind(this));\n        }\n\n        // Announcements HUD\n        if (Craft.announcements.length) {\n            let $btn = $('#announcements-btn').removeClass('hidden');\n            const hasUnreads = Craft.announcements.some(a => a.unread);\n            if (hasUnreads) {\n                $btn.addClass('unread');\n            }\n            let hud;\n            this.addListener($btn, 'click', () => {\n                if (!hud) {\n                    let contents = '';\n                    Craft.announcements.forEach(a => {\n                        contents += `<div class=\"announcement ${a.unread ? 'unread' : ''}\">` +\n                            '<div class=\"announcement-label-container\">' +\n                            `<div class=\"announcement-icon\">${a.icon}</div>` +\n                            `<div class=\"announcement-label\">${a.label}</div>` +\n                            '</div>' +\n                            `<h2>${a.heading}</h2>` +\n                            `<p>${a.body}</p>` +\n                            '</div>';\n                    });\n                    hud = new Garnish.HUD($btn, `<div id=\"announcements\">${contents}</div>`, {\n                        onShow: () => {\n                            $btn.addClass('active');\n                        },\n                        onHide: () => {\n                            $btn.removeClass('active');\n                        },\n                    });\n\n                    // Open outbound links in new windows\n                    $('a', hud.$main).each(function() {\n                        if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                            $(this).attr('rel', 'noopener').attr('target', '_blank')\n                        }\n                    });\n\n                    if (hasUnreads) {\n                        $btn.removeClass('unread');\n                        Craft.sendActionRequest('POST', 'users/mark-announcements-as-read', {\n                            data: {\n                                ids: Craft.announcements.map(a => a.id),\n                            },\n                        });\n                    }\n                } else {\n                    hud.show();\n                }\n            });\n        }\n    },\n\n    initSpecialForms: function() {\n        // Look for forms that we should watch for changes on\n        this.$confirmUnloadForms = $('form[data-confirm-unload]');\n        this.$deltaForms = $('form[data-delta]');\n\n        if (!this.$confirmUnloadForms.length) {\n            return;\n        }\n\n        var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n        var $form, serialized;\n\n        for (var i = 0; i < $forms.length; i++) {\n            $form = $forms.eq(i);\n            if (!$form.data('initialSerializedValue')) {\n                if (typeof $form.data('serializer') === 'function') {\n                    serialized = $form.data('serializer')();\n                } else {\n                    serialized = $form.serialize();\n                }\n                $form.data('initialSerializedValue', serialized);\n            }\n            this.addListener($form, 'submit', function(ev) {\n                if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                    this.removeListener(Garnish.$win, 'beforeunload');\n                }\n                if (Garnish.hasAttr($form, 'data-delta')) {\n                    ev.preventDefault();\n                    var serialized;\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                    Craft.createForm(data)\n                        .appendTo(Garnish.$bod)\n                        .submit();\n                }\n            });\n        }\n\n        this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n            var confirmUnload = false;\n            var $form, serialized;\n            if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                confirmUnload = true;\n            } else {\n                for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                    $form = this.$confirmUnloadForms.eq(i);\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    if ($form.data('initialSerializedValue') !== serialized) {\n                        confirmUnload = true;\n                        break;\n                    }\n                }\n            }\n\n            if (confirmUnload) {\n                var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                if (ev) {\n                    ev.originalEvent.returnValue = message;\n                } else {\n                    window.event.returnValue = message;\n                }\n\n                return message;\n            }\n        });\n    },\n\n    _handleInputFocus: function() {\n        this.updateFixedHeader();\n    },\n\n    _handleInputBlur: function() {\n        this.updateFixedHeader();\n    },\n\n    /**\n     * Submits a form.\n     * @param {Object} [options]\n     * @param {string} [options.action] The `action` param value override\n     * @param {string} [options.redirect] The `redirect` param value override\n     * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n     * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n     * @param {Object} [options.data] Additional data to be passed to the submit event\n     * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n     */\n    submitPrimaryForm: function(options) {\n        // Give other stuff on the page a chance to prepare\n        this.trigger('beforeSaveShortcut');\n\n        if (typeof options !== 'object' || !$.isPlainObject(options)) {\n            options = {};\n        }\n\n        if (!options.redirect) {\n            options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n        }\n\n        if (!options.data) {\n            options.data = {};\n        }\n        options.data.saveShortcut = true;\n\n        Craft.submitForm(this.$primaryForm, options);\n    },\n\n    updateSidebarMenuLabel: function() {\n        var $item = this.$sidebar.find('a.sel:first');\n        var $label = $item.children('.label');\n        $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n        Garnish.$bod.removeClass('showing-sidebar');\n    },\n\n    toggleNav: function() {\n        const isExpanded = this.navIsExpanded();\n\n        if (isExpanded === null) return;\n\n        if (isExpanded) {\n            this.disableGlobalSidebarLinks();\n            this.$navToggle.focus();\n            this.$navToggle.attr('aria-expanded', 'false');\n            Garnish.$bod.removeClass('showing-nav');\n        } else {\n            this.enableGlobalSidebarLinks();\n            this.$globalSidebar.find(':focusable')[0].focus();\n            this.$navToggle.attr('aria-expanded', 'true');\n            Garnish.$bod.addClass('showing-nav');\n        }\n    },\n\n    enableGlobalSidebarLinks: function() {\n        const focusableItems = this.$globalSidebar.find(':focusable');\n        \n        $(focusableItems).each(function() {\n            $(this).attr('tabindex', '0');\n        });\n    },\n\n    disableGlobalSidebarLinks: function() {\n        const focusableItems = this.$globalSidebar.find(':focusable');\n        \n        $(focusableItems).each(function() {\n            $(this).attr('tabindex', '-1');\n        });\n    },\n\n    setSidebarNavAttributes: function() {\n        const isExpanded = this.navIsExpanded();\n\n        if (isExpanded === null) return;\n\n        if (!isExpanded) {\n            this.disableGlobalSidebarLinks();\n        } else {\n            this.enableGlobalSidebarLinks();\n        }\n    },\n\n    navIsExpanded: function() {\n        if (!this.$globalSidebar[0]) return null;\n\n        const isAlwaysVisible = getComputedStyle(this.$globalSidebar[0]).getPropertyValue('--is-always-visible').trim();\n\n        return this.$navToggle.attr('aria-expanded') === 'true'\n            || isAlwaysVisible === 'true';\n    },\n\n    toggleSidebar: function() {\n        Garnish.$bod.toggleClass('showing-sidebar');\n    },\n\n    initTabs: function() {\n        if (this.tabManager) {\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        const $tabs = $('#tabs');\n        if (!$tabs.length) {\n            return;\n        }\n\n        this.tabManager = new Craft.Tabs($tabs);\n\n        this.tabManager.on('selectTab', ev => {\n            const href = ev.$tab.attr('href');\n\n            // Show its content area\n            if (href.charAt(0) === '#') {\n                $(href).removeClass('hidden');\n            }\n\n            // Trigger a resize event to update any UI components that are listening for it\n            Garnish.$win.trigger('resize');\n\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n\n            // If there is a revision menu, set its links to this tab ID\n            if (href && href.charAt(0) === '#') {\n                const menuBtn = $('#context-btn').menubtn().data('menubtn');\n                if (menuBtn) {\n                    for (let i = 0; i < menuBtn.menu.$options.length; i++) {\n                        let a = menuBtn.menu.$options[i];\n                        if (a.href) {\n                            a.href = a.href.match(/^[^#]*/)[0] + href;\n                        }\n                    }\n                }\n            }\n\n            if (typeof history !== 'undefined') {\n                // Delay changing the hash so it doesn't cause the browser to jump on page load\n                Garnish.requestAnimationFrame(() => {\n                    history.replaceState(undefined, undefined, href);\n                });\n            }\n        });\n\n        this.tabManager.on('deselectTab', ev => {\n            if (ev.$tab.attr('href').charAt(0) === '#') {\n                // Hide its content area\n                $(ev.$tab.attr('href')).addClass('hidden');\n            }\n        });\n\n        if (window.LOCATION_HASH) {\n            const $tab = this.tabManager.$tabs.filter(`[href=\"#${window.LOCATION_HASH}\"]`);\n            if ($tab.length) {\n                this.tabManager.selectTab($tab);\n            }\n        }\n    },\n\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsContainer() {\n        return this.tabManager ? this.tabManager.$container : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsList() {\n        return this.tabManager ? this.tabManager.$ul : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabs() {\n        return this.tabManager ? this.tabManager.$ul.find('> li') : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $selectedTab() {\n        return this.tabManager ? this.tabManager.$selectedTab : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get selectedTabIndex() {\n        return this.tabManager ? this.tabManager.$tabs.index(this.tabManager.$selectedTab) : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $focusableTab() {\n        return this.tabManager ? this.tabManager.$focusableTab : undefined;\n    },\n    /**\n     * @param {object} tab\n     * @deprecated in 3.7.0\n     */\n    selectTab: function(tab) {\n        if (this.tabManager) {\n            this.tabManager.selectTab(tab);\n        }\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    deselectTab: function() {\n        if (this.tabManager) {\n            this.tabManager.deselectTab();\n        }\n    },\n\n    handleWindowResize: function() {\n        this.updateResponsiveTables();\n        this.handleBreadcrumbVisibility();\n    },\n\n    breadcrumbItemsWrap: function() {\n        if (!this.$breadcrumbItems[0]) return;\n\n        const listWidth = this.$breadcrumbList[0].offsetWidth;\n        let totalItemWidth = 0;\n        \n        // Iterate through all list items (inclusive of more button)\n        this.$breadcrumbList.find('li').each(function() {\n            totalItemWidth += $(this)[0].offsetWidth;\n        });\n\n        this.breadcrumbListWidth = listWidth;\n\n        return totalItemWidth > listWidth;\n    },\n\n    handleBreadcrumbVisibility: function() {\n        if (!this.breadcrumbItemsWrap()) return;\n\n        if (this.$breadcrumbList.find('[data-disclosure-item]').length === 0) {\n            this.$breadcrumbList.append(this.breadcrumbDisclosureItem);\n        }\n\n        const triggerWidth = this.$breadcrumbList.find('[data-disclosure-item]')[0].offsetWidth;\n        let visibleItemWidth = triggerWidth;\n        let finalIndex;\n        let newWidth;\n        const listWidth = this.breadcrumbListWidth;\n\n        // Find breadcrumbs that should remain visible without overflowing\n        this.$breadcrumbItems.each(function(index) {\n            newWidth = visibleItemWidth + this.offsetWidth;\n\n            if (newWidth < listWidth) {\n                finalIndex = index;\n                visibleItemWidth += this.offsetWidth;\n            } else {\n                return false;\n            }\n        });\n\n        // Separate breadcrums that should remain visible vs. hidden\n        const shownItems = this.$breadcrumbItems.slice(0, finalIndex + 1);\n        const hiddenItems = this.$breadcrumbItems.slice(finalIndex + 1);\n        \n        // Empty list DOM and add shown items and trigger item\n        this.$breadcrumbList.html('');\n        this.$breadcrumbList.append(shownItems);\n        this.$breadcrumbList.append(this.breadcrumbDisclosureItem);\n        \n        // Add hidden items to disclosure menu and initialize\n        this.$breadcrumbList.find('[data-disclosure-menu] ul').append(hiddenItems);\n        this.$breadcrumbList.find('[data-disclosure-trigger]').disclosureMenu();\n    },\n\n    updateResponsiveTables: function() {\n        for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n            this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n            this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n            this.updateResponsiveTables._check = false;\n\n            if (this.updateResponsiveTables._containerWidth > 0) {\n                // Is this the first time we've checked this table?\n                if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                    this.updateResponsiveTables._check = true;\n                } else {\n                    this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                    // Getting wider?\n                    if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                        if (this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._$table.removeClass('collapsed');\n                            this.updateResponsiveTables._check = true;\n                        }\n                    } else if (!this.updateResponsiveTables._isCollapsed) {\n                        this.updateResponsiveTables._check = true;\n                    }\n                }\n\n                // Are we checking the table width?\n                if (this.updateResponsiveTables._check) {\n                    if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                        this.updateResponsiveTables._$table.addClass('collapsed');\n                    }\n                }\n\n                // Remember the container width for next time\n                this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n            }\n        }\n    },\n\n    updateFixedHeader: function() {\n        if (this.isMobile) {\n            return;\n        }\n\n        // Have we scrolled passed the top of #main?\n        if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n            if (!this.fixedHeader) {\n                var headerHeight = this.$headerContainer.height();\n\n                // Hard-set the minimum content container height\n                this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                // Hard-set the header container height\n                this.$headerContainer.height(headerHeight);\n                Garnish.$bod.addClass('fixed-header');\n\n                // Fix the sidebar and details pane positions if they are taller than #content-container\n                var contentHeight = this.$contentContainer.outerHeight();\n                var $detailsHeight = this.$details.outerHeight();\n                var css = {\n                    top: headerHeight + 'px',\n                    'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                };\n                this.$sidebar.addClass('fixed').css(css);\n                this.$details.addClass('fixed').css(css);\n                this.fixedHeader = true;\n            }\n        } else if (this.fixedHeader) {\n            this.$headerContainer.height('auto');\n            Garnish.$bod.removeClass('fixed-header');\n            this.$contentContainer.css('min-height', '');\n            this.$sidebar.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.$details.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.fixedHeader = false;\n        }\n    },\n\n    /**\n     * Dispays a notification.\n     *\n     * @param {string} type\n     * @param {string} message\n     */\n    displayNotification: function(type, message) {\n        var notificationDuration = Craft.CP.notificationDuration;\n\n        if (['cp-error', 'error'].includes(type)) {\n            notificationDuration *= 2;\n            icon = 'alert';\n            label = Craft.t('app', 'Error');\n        } else {\n            icon = 'info';\n            label = Craft.t('app', 'Notice');\n        }\n\n        var $notification = $(`\n            <div class=\"notification ${ type.replace('cp-', '') }\">\n                <span data-icon=\"${ icon }\" aria-label=\"${ label }\"></span>\n                ${ message }\n            </div>\n            `)\n            .appendTo(this.$notificationContainer);\n\n        var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n        $notification\n            .hide()\n            .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n            .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n            .delay(notificationDuration)\n            .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                complete: function() {\n                    $notification.remove();\n                }\n            });\n\n        this.trigger('displayNotification', {\n            notificationType: type,\n            message: message\n        });\n    },\n\n    /**\n     * Displays a notice.\n     *\n     * @param {string} message\n     */\n    displayNotice: function(message) {\n        this.displayNotification('notice', message);\n    },\n\n    /**\n     * Displays an error.\n     *\n     * @param {string} message\n     */\n    displayError: function(message) {\n        if (!message) {\n            message = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.displayNotification('error', message);\n    },\n\n    fetchAlerts: function() {\n        var data = {\n            path: Craft.path\n        };\n\n        Craft.queueActionRequest('app/get-cp-alerts', data, this.displayAlerts.bind(this));\n    },\n\n    displayAlerts: function(alerts) {\n        this.$alerts.remove();\n\n        if (Garnish.isArray(alerts) && alerts.length) {\n            this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n            for (var i = 0; i < alerts.length; i++) {\n                $(`<li><span data-icon=\"alert\" aria-label=\"${ Craft.t('app', 'Error') }\"></span> ${ alerts[i] }</li>`).appendTo(this.$alerts);\n            }\n\n            var height = this.$alerts.outerHeight();\n            this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n            this.initAlerts();\n        }\n    },\n\n    initAlerts: function() {\n        // Are there any shunnable alerts?\n        var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n        for (var i = 0; i < $shunnableAlerts.length; i++) {\n            this.addListener($shunnableAlerts[i], 'click', ev => {\n                ev.preventDefault();\n\n                var $link = $(ev.currentTarget);\n\n                var data = {\n                    message: $link.prop('className').substr(5)\n                };\n\n                Craft.queueActionRequest('app/shun-cp-alert', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            $link.parent().remove();\n                        } else {\n                            this.displayError(response.error);\n                        }\n                    }\n                });\n            });\n        }\n    },\n\n    checkForUpdates: function(forceRefresh, includeDetails, callback) {\n        // Make 'includeDetails' optional\n        if (typeof includeDetails === 'function') {\n            callback = includeDetails;\n            includeDetails = false;\n        }\n\n        // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n        // then just set a new callback that re-checks for updates when the current one is done.\n        if (this.checkingForUpdates && (\n            (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n            (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n        )) {\n            var realCallback = callback;\n            callback = () => {\n                this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n            };\n        }\n\n        // Callback function?\n        if (typeof callback === 'function') {\n            if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                this.checkForUpdatesCallbacks = [];\n            }\n\n            this.checkForUpdatesCallbacks.push(callback);\n        }\n\n        if (!this.checkingForUpdates) {\n            this.checkingForUpdates = true;\n            this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n            this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n            this._checkForUpdates(forceRefresh, includeDetails)\n                .then(info => {\n                    this.updateUtilitiesBadge();\n                    this.checkingForUpdates = false;\n\n                    if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                        var callbacks = this.checkForUpdatesCallbacks;\n                        this.checkForUpdatesCallbacks = null;\n\n                        for (var i = 0; i < callbacks.length; i++) {\n                            callbacks[i](info);\n                        }\n                    }\n\n                    this.trigger('checkForUpdates', {\n                        updateInfo: info\n                    });\n                });\n        }\n    },\n\n    _checkForUpdates: function(forceRefresh, includeDetails) {\n        return new Promise((resolve, reject) => {\n            if (!forceRefresh) {\n                this._checkForCachedUpdates(includeDetails)\n                    .then(info => {\n                        if (info.cached !== false) {\n                            resolve(info);\n                        }\n\n                        this._getUpdates(includeDetails)\n                            .then(info => {\n                                resolve(info);\n                            });\n                    });\n            } else {\n                this._getUpdates(includeDetails)\n                    .then(info => {\n                        resolve(info);\n                    });\n            }\n        });\n    },\n\n    _checkForCachedUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            var data = {\n                onlyIfCached: true,\n                includeDetails: includeDetails,\n            };\n            Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    resolve({cached: false});\n                }\n            });\n        });\n    },\n\n    _getUpdates: function(includeDetails) {\n        return new Promise((resolve, reject) => {\n            Craft.sendApiRequest('GET', 'updates')\n                .then(updates => {\n                    this._cacheUpdates(updates, includeDetails).then(resolve);\n                })\n                .catch(e => {\n                    this._cacheUpdates({}).then(resolve);\n                });\n        });\n    },\n\n    _cacheUpdates: function(updates, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.postActionRequest('app/cache-updates', {\n                updates: updates,\n                includeDetails: includeDetails,\n            }, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    reject();\n                }\n            }, {\n                contentType: 'json'\n            });\n        });\n    },\n\n    updateUtilitiesBadge: function() {\n        var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n        // Ignore if there is no (non-selected) Utilities nav item\n        if (!$utilitiesLink.length) {\n            return;\n        }\n\n        Craft.queueActionRequest('app/get-utilities-badge-count', response => {\n            // Get the existing utility nav badge, if any\n            var $badge = $utilitiesLink.children('.badge');\n\n            if (response.badgeCount) {\n                if (!$badge.length) {\n                    $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                }\n                $badge.text(response.badgeCount);\n            } else if ($badge.length) {\n                $badge.remove();\n            }\n        });\n    },\n\n    runQueue: function() {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        if (Craft.runQueueAutomatically) {\n            Craft.queueActionRequest('queue/run', (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this.trackJobProgress(false, true);\n                }\n            });\n        } else {\n            this.trackJobProgress(false, true);\n        }\n    },\n\n    trackJobProgress: function(delay, force) {\n        if (force && this.trackJobProgressTimeout) {\n            clearTimeout(this.trackJobProgressTimeout);\n            this.trackJobProgressTimeout = null;\n        }\n\n        // Ignore if we're already tracking jobs, or the queue is disabled\n        if (this.trackJobProgressTimeout || !this.enableQueue) {\n            return;\n        }\n\n        if (delay === true) {\n            // Determine the delay based on how long the displayed job info has remained unchanged\n            var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n            this.trackJobProgressTimeout = setTimeout(this._trackJobProgressInternal.bind(this), timeout);\n        } else {\n            this._trackJobProgressInternal();\n        }\n    },\n\n    _trackJobProgressInternal: function() {\n        Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.trackJobProgressTimeout = null;\n                this.totalJobs = response.total;\n                this.setJobInfo(response.jobs);\n\n                if (this.jobInfo.length) {\n                    // Check again after a delay\n                    this.trackJobProgress(true);\n                }\n            }\n        });\n    },\n\n    setJobInfo: function(jobInfo) {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        this.jobInfo = jobInfo;\n\n        // Update the displayed job info\n        var oldInfo = this.displayedJobInfo;\n        this.displayedJobInfo = this.getDisplayedJobInfo();\n\n        // Same old same old?\n        if (\n            oldInfo &&\n            this.displayedJobInfo &&\n            oldInfo.id === this.displayedJobInfo.id &&\n            oldInfo.progress === this.displayedJobInfo.progress &&\n            oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n            oldInfo.status === this.displayedJobInfo.status\n        ) {\n            this.displayedJobInfoUnchanged++;\n        } else {\n            // Reset the counter\n            this.displayedJobInfoUnchanged = 1;\n        }\n\n        this.updateJobIcon();\n\n        // Fire a setJobInfo event\n        this.trigger('setJobInfo');\n    },\n\n    /**\n     * Returns info for the job that should be displayed in the CP sidebar\n     */\n    getDisplayedJobInfo: function() {\n        if (!this.enableQueue) {\n            return null;\n        }\n\n        // Set the status preference order\n        var statuses = [\n            Craft.CP.JOB_STATUS_RESERVED,\n            Craft.CP.JOB_STATUS_FAILED,\n            Craft.CP.JOB_STATUS_WAITING\n        ];\n\n        for (var i = 0; i < statuses.length; i++) {\n            for (var j = 0; j < this.jobInfo.length; j++) {\n                if (\n                    this.jobInfo[j].status === statuses[i] &&\n                    (statuses[i] !== Craft.CP.JOB_STATUS_WAITING || !this.jobInfo[j].delay)\n                ) {\n                    return this.jobInfo[j];\n                }\n            }\n        }\n\n        return null;\n    },\n\n    updateJobIcon: function() {\n        if (!this.enableQueue || !this.$nav.length) {\n            return;\n        }\n\n        if (this.displayedJobInfo) {\n            if (!this.jobProgressIcon) {\n                this.jobProgressIcon = new JobProgressIcon();\n            }\n\n            if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n            } else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n            }\n        } else {\n            if (this.jobProgressIcon) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.complete();\n                delete this.jobProgressIcon;\n            }\n        }\n    },\n\n    /**\n     * Returns the active site for the control panel\n     *\n     * @return {number}\n     */\n    getSiteId: function() {\n        // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n        let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n        if (typeof siteId !== 'undefined') {\n            Craft.removeLocalStorage('BaseElementIndex.siteId');\n            this.setSiteId(siteId);\n            return siteId;\n        }\n        return Craft.getCookie('siteId');\n    },\n\n    /**\n     * Sets the active site for the control panel\n     * @param {number} siteId\n     */\n    setSiteId: function(siteId) {\n        Craft.setCookie('siteId', siteId, {\n            maxAge: 31536000 // 1 year\n        });\n    }\n}, {\n    //maxWidth: 1051, //1024,\n    notificationDuration: 2000,\n\n    JOB_STATUS_WAITING: 1,\n    JOB_STATUS_RESERVED: 2,\n    JOB_STATUS_DONE: 3,\n    JOB_STATUS_FAILED: 4\n});\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend({\n    $li: null,\n    $a: null,\n    $label: null,\n    $progressLabel: null,\n\n    progress: null,\n    failMode: false,\n\n    _$bgCanvas: null,\n    _$staticCanvas: null,\n    _$hoverCanvas: null,\n    _$failCanvas: null,\n\n    _staticCtx: null,\n    _hoverCtx: null,\n    _canvasSize: null,\n    _arcPos: null,\n    _arcRadius: null,\n    _lineWidth: null,\n\n    _arcStartPos: 0,\n    _arcEndPos: 0,\n    _arcStartStepSize: null,\n    _arcEndStepSize: null,\n    _arcStep: null,\n    _arcStepTimeout: null,\n    _arcAnimateCallback: null,\n\n    _progressBar: null,\n\n    init: function() {\n        this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n        this.$a = $('<a/>', {\n            id: 'job-icon',\n            href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n        }).appendTo(this.$li);\n        this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n        var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n        this.$label = $('<span/>').appendTo($labelContainer);\n        this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n        let m = (window.devicePixelRatio > 1 ? 2 : 1);\n        this._canvasSize = 18 * m;\n        this._arcPos = this._canvasSize / 2;\n        this._arcRadius = 7 * m;\n        this._lineWidth = 3 * m;\n\n        this._$bgCanvas = this._createCanvas('bg', '#61666b');\n        this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n        this._$hoverCanvas = this._createCanvas('hover', '#fff');\n        this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n        this._staticCtx = this._$staticCanvas[0].getContext('2d');\n        this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n        this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n        this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n    },\n\n    setDescription: function(description, progressLabel) {\n        this.$a.attr('title', description);\n        this.$label.text(description);\n        if (progressLabel) {\n            this.$progressLabel.text(progressLabel).show();\n        } else {\n            this.$progressLabel.hide();\n        }\n    },\n\n    setProgress: function(progress) {\n        if (progress == 0) {\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n        } else {\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            if (this.progress && progress > this.progress) {\n                this._animateArc(0, progress / 100);\n            } else {\n                this._setArc(0, progress / 100);\n            }\n        }\n\n        this.progress = progress;\n    },\n\n    complete: function() {\n        this._animateArc(0, 1, () => {\n            this._$bgCanvas.velocity('fadeOut');\n\n            this._animateArc(1, 1, () => {\n                this.$a.remove();\n                this.destroy();\n            });\n        });\n    },\n\n    showFailMode: function(message) {\n        if (this.failMode) {\n            return;\n        }\n\n        this.failMode = true;\n        this.progress = null;\n\n        this._$bgCanvas.hide();\n        this._$staticCanvas.hide();\n        this._$hoverCanvas.hide();\n        this._$failCanvas.show();\n\n        this.setDescription(message);\n    },\n\n    hideFailMode: function() {\n        if (!this.failMode) {\n            return;\n        }\n\n        this.failMode = false;\n\n        this._$bgCanvas.show();\n        this._$staticCanvas.show();\n        this._$hoverCanvas.show();\n        this._$failCanvas.hide();\n    },\n\n    _createCanvas: function(id, color) {\n        var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n            ctx = $canvas[0].getContext('2d');\n\n        ctx.strokeStyle = color;\n        ctx.lineWidth = this._lineWidth;\n        ctx.lineCap = 'round';\n        return $canvas;\n    },\n\n    _setArc: function(startPos, endPos) {\n        this._arcStartPos = startPos;\n        this._arcEndPos = endPos;\n\n        this._drawArc(this._staticCtx, startPos, endPos);\n        this._drawArc(this._hoverCtx, startPos, endPos);\n    },\n\n    _drawArc: function(ctx, startPos, endPos) {\n        ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n        ctx.beginPath();\n        ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n    },\n\n    _animateArc: function(targetStartPos, targetEndPos, callback) {\n        if (this._arcStepTimeout) {\n            clearTimeout(this._arcStepTimeout);\n        }\n\n        this._arcStep = 0;\n        this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n        this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n        this._arcAnimateCallback = callback;\n        this._takeNextArcStep();\n    },\n\n    _takeNextArcStep: function() {\n        this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n        this._arcStep++;\n\n        if (this._arcStep < 10) {\n            this._arcStepTimeout = setTimeout(this._takeNextArcStep.bind(this), 50);\n        } else if (this._arcAnimateCallback) {\n            this._arcAnimateCallback();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend({\n    editableGroups: null,\n    $newCategoryBtnGroup: null,\n    $newCategoryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible groups the user has permission to create new categories in\n        this.editableGroups = [];\n\n        for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n            var group = Craft.editableCategoryGroups[i];\n\n            if (this.getSourceByKey('group:' + group.uid)) {\n                this.editableGroups.push(group);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific category group in the URL?\n        if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n\n                if ($source.data('handle') === defaultGroupHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        // Get the handle of the selected source\n        var selectedSourceHandle = this.$source.data('handle');\n\n        var i, href, label;\n\n        // Update the New Category button\n        // ---------------------------------------------------------------------\n\n        if (this.editableGroups.length) {\n            // Remove the old button, if there is one\n            if (this.$newCategoryBtnGroup) {\n                this.$newCategoryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a group that they have permission to create categories in\n            var selectedGroup;\n\n            if (selectedSourceHandle) {\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    if (this.editableGroups[i].handle === selectedSourceHandle) {\n                        selectedGroup = this.editableGroups[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n            // Otherwise only show a menu button\n            if (selectedGroup) {\n                href = this._getGroupTriggerHref(selectedGroup);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                        this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.editableGroups.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n            } else {\n                this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New category'),\n                }).appendTo(this.$newCategoryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    var group = this.editableGroups[i];\n\n                    if (this.settings.context === 'index' || group !== selectedGroup) {\n                        href = this._getGroupTriggerHref(group);\n                        label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newCategoryBtnGroup);\n        }\n\n        // Update the URL if we're on the Categories index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'categories';\n\n            if (selectedSourceHandle) {\n                uri += '/' + selectedSourceHandle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getGroupTriggerHref: function(group) {\n        if (this.settings.context === 'index') {\n            const uri = `categories/${group.handle}/new`;\n            const site = this.getSite();\n            const params = site ? {site: site.handle} : undefined;\n            return `href=\"${Craft.getUrl(uri, params)}\"`;\n        }\n\n        return `data-id=\"${group.id}\"`;\n    },\n\n    _openCreateCategoryModal: function(groupId) {\n        if (this.$newCategoryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the group\n        var group;\n\n        for (var i = 0; i < this.editableGroups.length; i++) {\n            if (this.editableGroups[i].id == groupId) {\n                group = this.editableGroups[i];\n                break;\n            }\n        }\n\n        if (!group) {\n            return;\n        }\n\n        this.$newCategoryBtn.addClass('inactive');\n        var newCategoryBtnText = this.$newCategoryBtn.text();\n        this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newCategoryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                groupId: groupId\n            },\n            onHideHud: () => {\n                this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right group is selected\n                var groupSourceKey = 'group:' + group.uid;\n\n                if (this.sourceKey !== groupSourceKey) {\n                    this.selectSourceByKey(groupSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend({\n    setSettings: function() {\n        this.base.apply(this, arguments);\n        this.settings.sortable = false;\n    },\n\n    getModalSettings: function() {\n        var settings = this.base();\n        settings.hideOnSelect = false;\n        return settings;\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.find('.element');\n    },\n\n    onModalSelect: function(elements) {\n        // Disable the modal\n        this.modal.disable();\n        this.modal.disableCancelBtn();\n        this.modal.disableSelectBtn();\n        this.modal.showFooterSpinner();\n\n        // Get the new category HTML\n        var selectedCategoryIds = this.getSelectedElementIds();\n\n        for (var i = 0; i < elements.length; i++) {\n            selectedCategoryIds.push(elements[i].id);\n        }\n\n        var data = {\n            categoryIds: selectedCategoryIds,\n            siteId: elements[0].siteId,\n            id: this.settings.id,\n            name: this.settings.name,\n            branchLimit: this.settings.branchLimit,\n            selectionLabel: this.settings.selectionLabel\n        };\n\n        Craft.postActionRequest('elements/get-categories-input-html', data, (response, textStatus) => {\n            this.modal.enable();\n            this.modal.enableCancelBtn();\n            this.modal.enableSelectBtn();\n            this.modal.hideFooterSpinner();\n\n            if (textStatus === 'success') {\n                var $newInput = $(response.html),\n                    $newElementsContainer = $newInput.children('.elements');\n\n                this.$elementsContainer.replaceWith($newElementsContainer);\n                this.$elementsContainer = $newElementsContainer;\n                this.resetElements();\n\n                var filteredElements = [];\n\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i],\n                        $element = this.getElementById(element.id);\n\n                    if ($element) {\n                        this.animateElementIntoPlace(element.$element, $element);\n                        filteredElements.push(element);\n                    }\n                }\n\n                this.updateDisabledElementsInModal();\n                this.modal.hide();\n                this.onSelectElements(filteredElements);\n            }\n        });\n    },\n\n    removeElement: function($element) {\n        // Find any descendants this category might have\n        var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n        // Remove our record of them all at once\n        this.removeElements($allCategories);\n\n        // Animate them away one at a time\n        for (var i = 0; i < $allCategories.length; i++) {\n            this._animateCategoryAway($allCategories, i);\n        }\n    },\n\n    _animateCategoryAway: function($allCategories, i) {\n        var callback;\n\n        // Is this the last one?\n        if (i === $allCategories.length - 1) {\n            callback = () => {\n                var $li = $allCategories.first().parent().parent(),\n                    $ul = $li.parent();\n\n                if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                    $li.remove();\n                } else {\n                    $ul.remove();\n                }\n            };\n        }\n\n        var func = () => {\n            this.animateElementAway($allCategories.eq(i), callback);\n        };\n\n        if (i === 0) {\n            func();\n        } else {\n            setTimeout(func, 100 * i);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend({\n    columns: null,\n    rows: null,\n\n    init: function(data) {\n        let columns = data.columns;\n        let rows = data.rows;\n\n        rows.forEach(d => {\n            $.each(d, function(cellIndex) {\n                var column = columns[cellIndex];\n\n                var parseTime;\n\n                switch (column.type) {\n                    case 'date':\n                        parseTime = d3.timeParse('%Y-%m-%d');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'datetime':\n                        parseTime = d3.timeParse('%Y-%m-%d %H:00:00');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'percent':\n                        d[cellIndex] = d[cellIndex] / 100;\n                        break;\n\n                    case 'number':\n                        d[cellIndex] = +d[cellIndex];\n                        break;\n\n                    default:\n                    // do nothing\n                }\n            });\n        });\n\n        this.columns = columns;\n        this.rows = rows;\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend({\n    $container: null,\n    $tip: null,\n\n    init: function($container) {\n        this.$container = $container;\n\n        this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n        this.hide();\n    },\n\n    setContent: function(html) {\n        this.$tip.html(html);\n    },\n\n    setPosition: function(position) {\n        this.$tip.css('left', `${position.left}px`);\n        this.$tip.css('top', `${position.top}px`);\n    },\n\n    show: function() {\n        this.$tip.css('display', 'block');\n    },\n\n    hide: function() {\n        this.$tip.css('display', 'none');\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend({\n    $container: null,\n    $chart: null,\n\n    chartBaseClass: 'cp-chart',\n    dataTable: null,\n\n    formatLocale: null,\n    timeFormatLocale: null,\n    orientation: null,\n\n    svg: null,\n    width: null,\n    height: null,\n\n    init: function(container, settings) {\n        this.$container = container;\n\n        this.setSettings(Craft.charts.BaseChart.defaults);\n        this.setSettings(settings);\n\n        var globalSettings = {\n            formats: window.d3Formats,\n            formatLocaleDefinition: window.d3FormatLocaleDefinition,\n            timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n        };\n\n        this.setSettings(globalSettings);\n\n        d3.select(window).on('resize', () => {\n            this.resize();\n        });\n    },\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n    },\n\n    draw: function(dataTable, settings) {\n        // Settings and chart attributes\n\n        this.setSettings(settings);\n\n        this.dataTable = dataTable;\n        this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n        this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n        this.orientation = this.settings.orientation;\n\n        // Set (or reset) the chart element\n\n        if (this.$chart) {\n            this.$chart.remove();\n        }\n\n        var className = this.chartBaseClass;\n\n        if (this.settings.chartClass) {\n            className += ' ' + this.settings.chartClass;\n        }\n\n        this.$chart = $(`<div class=\"${className}\" />`).appendTo(this.$container);\n    },\n\n    resize: function() {\n        this.draw(this.dataTable, this.settings);\n    },\n\n    onAfterDrawTicks: function() {\n        // White border for ticks' text\n        $('.tick', this.$chart).each(function(tickKey, tick) {\n            var $tickText = $('text', tick);\n\n            var $clone = $tickText.clone();\n            $clone.appendTo(tick);\n\n            $tickText.attr('stroke', '#ffffff');\n            $tickText.attr('stroke-width', 3);\n        });\n    }\n}, {\n    defaults: {\n        formatLocaleDefinition: null,\n        timeFormatLocaleDefinition: null,\n        formats: {\n            numberFormat: ',.2f',\n            percentFormat: ',.2%',\n            currencyFormat: '$,.2f',\n            shortDateFormats: {\n                day: '%-m/%-d',\n                month: '%-m/%y',\n                year: '%Y'\n            }\n        },\n        margin: {top: 0, right: 0, bottom: 0, left: 0},\n        chartClass: null,\n        colors: ['#0594D1', '#DE3800', '#FF9A00', '#009802', '#9B009B']\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend({\n    tip: null,\n    drawingArea: null,\n\n    init: function(container, settings) {\n        this.base(container, Craft.charts.Area.defaults);\n\n        this.setSettings(settings);\n    },\n\n    draw: function(dataTable, settings) {\n        this.base(dataTable, settings);\n\n        if (this.tip) {\n            this.tip = null;\n        }\n\n        var margin = this.getChartMargin();\n\n        this.width = this.$chart.width() - margin.left - margin.right;\n        this.height = this.$chart.height() - margin.top - margin.bottom;\n\n        // Append SVG to chart element\n\n        var svg = {\n            width: this.width + (margin.left + margin.right),\n            height: this.height + (margin.top + margin.bottom),\n            translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n            translateY: margin.top\n        };\n\n        this.svg = d3.select(this.$chart.get(0)).append('svg')\n            .attr('width', svg.width)\n            .attr('height', svg.height);\n\n        this.drawingArea = this.svg.append('g')\n            .attr('transform', `translate(${svg.translateX},${svg.translateY})`);\n\n        // Draw elements\n\n        this.drawTicks();\n        this.drawAxes();\n        this.drawChart();\n        this.drawTipTriggers();\n    },\n\n    drawTicks: function() {\n        // Draw X ticks\n\n        var x = this.getX(true);\n        var xTicks = 3;\n        var xAxis = d3.axisBottom(x)\n            .tickFormat(this.getXFormatter())\n            .ticks(xTicks);\n\n        this.drawingArea.append('g')\n            .attr('class', 'x ticks-axis')\n            .attr('transform', `translate(0, ${this.height})`)\n            .call(xAxis);\n\n        // Draw Y ticks\n\n        var y = this.getY();\n        var yTicks = 2;\n        var yAxis;\n\n        if (this.orientation !== 'rtl') {\n            yAxis = d3.axisLeft(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .call(yAxis);\n        } else {\n            yAxis = d3.axisRight(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .attr('transform', `translate(${this.width},0)`)\n                .call(yAxis);\n        }\n\n        // On after draw ticks\n\n        this.onAfterDrawTicks();\n    },\n\n    drawAxes: function() {\n        if (this.settings.xAxis.showAxis) {\n            var x = this.getX();\n            var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n            this.drawingArea.append('g')\n                .attr('class', 'x axis')\n                .attr('transform', `translate(0, ${this.height})`)\n                .call(xAxis);\n        }\n\n        if (this.settings.yAxis.showAxis) {\n            var y = this.getY();\n            var chartPadding = 0;\n            var yAxis;\n\n            if (this.orientation === 'rtl') {\n                yAxis = d3.axisLeft(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${this.width - chartPadding}, 0)`)\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${chartPadding}, 0)`)\n                    .call(yAxis);\n            }\n        }\n    },\n\n    drawChart: function() {\n        var x = this.getX(true);\n        var y = this.getY();\n\n        // X & Y grid lines\n\n        if (this.settings.xAxis.gridlines) {\n            var xLineAxis = d3.axisBottom(x);\n\n            this.drawingArea.append('g')\n                .attr('class', 'x grid-line')\n                .attr('transform', `translate(0,${this.height})`)\n                .call(xLineAxis\n                    .tickSize(-this.height, 0, 0)\n                    .tickFormat('')\n                );\n        }\n\n        var yTicks = 2;\n\n        if (this.settings.yAxis.gridlines) {\n            var yLineAxis = d3.axisLeft(y);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y grid-line')\n                .attr('transform', 'translate(0 , 0)')\n                .call(yLineAxis\n                    .tickSize(-(this.width), 0)\n                    .tickFormat('')\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks)\n                );\n        }\n\n        // Line\n\n        var line = d3.line()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-line')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', 'none')\n            .style('stroke', this.settings.colors[0])\n            .style('stroke-width', '3px')\n            .attr('d', line);\n\n        // Area\n\n        var area = d3.area()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y0(this.height)\n            .y1(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-area')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', this.settings.colors[0])\n            .style('fill-opacity', '0.3')\n            .attr('d', area);\n\n        // Plots\n\n        if (this.settings.plots) {\n            this.drawingArea.append('g')\n                .attr('class', 'plots')\n                .selectAll('circle')\n                .data(this.dataTable.rows)\n                .enter()\n                .append('circle')\n                .style('fill', this.settings.colors[0])\n                .attr('class', (d, index) => `plot plot-${index}`)\n                .attr('r', 4)\n                .attr('cx', d => x(d[0]))\n                .attr('cy', d => y(d[1]));\n        }\n    },\n\n    drawTipTriggers: function() {\n        if (this.settings.tips) {\n            if (!this.tip) {\n                this.tip = new Craft.charts.Tip(this.$chart);\n            }\n\n            // Define xAxisTickInterval\n\n            var chartMargin = this.getChartMargin();\n            var tickSizeOuter = 6;\n            var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n            var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n            // Tip trigger width\n\n            var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n            // Draw triggers\n\n            var x = this.getX(true);\n            var y = this.getY();\n\n            this.drawingArea.append('g')\n                .attr('class', 'tip-triggers')\n                .selectAll('rect')\n                .data(this.dataTable.rows)\n                .enter().append('rect')\n                .attr('class', 'tip-trigger')\n                .style('fill', 'transparent')\n                .style('fill-opacity', '1')\n                .attr('width', tipTriggerWidth)\n                .attr('height', this.height)\n                .attr('x', d => x(d[0]) - tipTriggerWidth / 2)\n                .on('mouseover', (d, index) => {\n                    // Expand plot\n\n                    this.drawingArea.select('.plot-' + index).attr('r', 5);\n\n                    // Set tip content\n\n                    var $content = $('<div />');\n                    var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                    var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                    $xValue.html(this.getXFormatter()(d[0]));\n                    $yValue.html(this.getYFormatter()(d[1]));\n\n                    var content = $content.get(0);\n\n                    this.tip.setContent(content);\n\n                    // Set tip position\n\n                    var margin = this.getChartMargin();\n\n                    var offset = 24;\n                    var top = (y(d[1]) + offset);\n                    var left;\n\n                    if (this.orientation !== 'rtl') {\n                        left = (x(d[0]) + margin.left + offset);\n\n                        var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                        var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                        if (calcLeft > maxLeft) {\n                            left = x(d[0]) - (this.tip.$tip.width() + offset);\n                        }\n                    } else {\n                        left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                    }\n\n                    if (left < 0) {\n                        left = (x(d[0]) + margin.left + offset);\n                    }\n\n                    var position = {\n                        top: top,\n                        left: left\n                    };\n\n                    this.tip.setPosition(position);\n\n                    // Show tip\n\n                    this.tip.show();\n                })\n                .on('mouseout', (d, index) => {\n                    // Unexpand Plot\n                    this.drawingArea.select('.plot-' + index).attr('r', 4);\n\n                    // Hide tip\n                    this.tip.hide();\n                });\n        }\n    },\n\n    getChartMargin: function() {\n        var margin = this.settings.margin;\n\n        // Estimate the max width of y ticks and set it as the left margin\n\n        var values = this.getYTickValues();\n        var yTicksMaxWidth = 0;\n\n        $.each(values, (key, value) => {\n            var characterWidth = 8;\n\n            var formatter = this.getYFormatter();\n\n            var formattedValue = formatter(value);\n            var computedTickWidth = formattedValue.length * characterWidth;\n\n            if (computedTickWidth > yTicksMaxWidth) {\n                yTicksMaxWidth = computedTickWidth;\n            }\n        });\n\n        yTicksMaxWidth += 10;\n\n        margin.left = yTicksMaxWidth;\n\n        return margin;\n    },\n\n    getX: function(padded) {\n        var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomain = [xDomainMin, xDomainMax];\n\n        if (this.orientation === 'rtl') {\n            xDomain = [xDomainMax, xDomainMin];\n        }\n\n        var left = 0;\n        var right = 0;\n\n        if (padded) {\n            left = 0;\n            right = 0;\n        }\n\n        var x = d3.scaleTime().range([left, (this.width - right)]);\n\n        x.domain(xDomain);\n\n        return x;\n    },\n\n    getY: function() {\n        var yDomain = [0, this.getYMaxValue()];\n\n        var y = d3.scaleLinear().range([this.height, 0]);\n\n        y.domain(yDomain);\n\n        return y;\n    },\n\n    getXFormatter: function() {\n        var formatter;\n\n        if (this.settings.xAxis.formatter !== $.noop) {\n            formatter = this.settings.xAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYFormatter: function() {\n        var formatter;\n\n        if (this.settings.yAxis.formatter !== $.noop) {\n            formatter = this.settings.yAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYMaxValue: function() {\n        return d3.max(this.dataTable.rows, function(d) {\n            return d[1];\n        });\n    },\n\n    getYTickValues: function() {\n        var maxValue = this.getYMaxValue();\n\n        if (maxValue > 1) {\n            return [(maxValue / 2), maxValue];\n        } else {\n            return [0, maxValue];\n        }\n    }\n}, {\n    defaults: {\n        chartClass: 'area',\n        margin: {top: 25, right: 5, bottom: 25, left: 0},\n        plots: true,\n        tips: true,\n        xAxis: {\n            gridlines: false,\n            showAxis: true,\n            formatter: $.noop\n        },\n        yAxis: {\n            gridlines: true,\n            showAxis: false,\n            formatter: $.noop\n        }\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = `0${duration.hours}`;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = `0${duration.minutes}`;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = `0${duration.seconds}`;\n        }\n\n        return `${duration.hours}:${duration.minutes}:${duration.seconds}`;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(`${chartSettings.formats.shortDateFormats.day} %H:00:00`);\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.find('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .attr({\n                'aria-controls': this.$input.attr('id'),\n                'aria-label': Craft.t('app', 'Color picker'),\n            })\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorInput, 'click', function (ev) {\n            ev.stopPropagation();\n        });\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'input', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        let val = this.$input.val();\n\n        if (val !== (val = Craft.trim(val))) {\n            this.$input.val(val);\n        }\n\n        // Chop off the #\n        if (val.length && val[0] === '#') {\n            val = val.substr(1);\n            this.$input.val(val);\n        }\n\n        // If empty, set the preview to transparent\n        if (!val.length) {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Now normalize it for the UI stuff\n        if (val.length === 3) {\n            val = val[0].repeat(2) + val[1].repeat(2) + val[2].repeat(2);\n        }\n\n        if (val.match(/^[0-9a-f]{6}$/i)) {\n            this.$colorPreview.css('background-color', `#${val}`);\n            if (this.$colorInput) {\n                this.$colorInput.val(`#${val}`);\n            }\n        } else {\n            this.$colorPreview.css('background-color', '');\n        }\n    },\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function() {\n        if (Craft.ColorInput._browserSupportsColorInputs === null) {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend({\n    elementIndex: null,\n    $elementIndexSourcesContainer: null,\n\n    $sidebar: null,\n    $sourcesContainer: null,\n    $sourceSettingsContainer: null,\n    $newHeadingBtn: null,\n    $footer: null,\n    $footerBtnContainer: null,\n    $saveBtn: null,\n    $cancelBtn: null,\n    $saveSpinner: null,\n    $loadingSpinner: null,\n\n    sourceSort: null,\n    sources: null,\n    selectedSource: null,\n    updateSourcesOnSave: false,\n\n    availableTableAttributes: null,\n\n    init: function(elementIndex, settings) {\n        this.base();\n\n        this.setSettings(settings, {\n            resizable: true\n        });\n\n        this.elementIndex = elementIndex;\n        this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n        var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n        this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n        this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n        this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n        this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n        this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n        this.$newHeadingBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit add icon',\n            text: Craft.t('app', 'New heading'),\n        }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n        this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n        this.setContainer($container);\n        this.show();\n\n        var data = {\n            elementType: this.elementIndex.elementType\n        };\n\n        Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, (response, textStatus) => {\n            this.$loadingSpinner.remove();\n\n            if (textStatus === 'success') {\n                this.$saveBtn.removeClass('disabled');\n                this.buildModal(response);\n            }\n        });\n\n        this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n        this.addListener(this.$cancelBtn, 'click', 'hide');\n        this.addListener(this.$saveBtn, 'click', 'save');\n        this.addListener(this.$container, 'submit', 'save');\n    },\n\n    buildModal: function(response) {\n        // Store the available table attribute options\n        this.availableTableAttributes = response.availableTableAttributes;\n\n        // Create the source item sorter\n        this.sourceSort = new Garnish.DragSort({\n            handle: '.move',\n            axis: 'y',\n            onSortChange: () => {\n                this.updateSourcesOnSave = true;\n            },\n        });\n\n        // Create the sources\n        this.sources = [];\n\n        for (var i = 0; i < response.sources.length; i++) {\n            var source = this.addSource(response.sources[i]);\n            this.sources.push(source);\n        }\n\n        if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n            this.sources[0].select();\n        }\n    },\n\n    addSource: function(sourceData) {\n        var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n        var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n        var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n        $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n        var source;\n\n        // Is this a heading?\n        if (typeof sourceData.heading !== 'undefined') {\n            $item.addClass('heading');\n            $itemInput.attr('name', 'sourceOrder[][heading]');\n            source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.heading);\n        } else {\n            $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n            source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.label);\n\n            // Select this by default?\n            if ((this.elementIndex.sourceKey + '/').substr(0, sourceData.key.length + 1) === sourceData.key + '/') {\n                source.select();\n            }\n        }\n\n        this.sourceSort.addItems($item);\n\n        return source;\n    },\n\n    handleNewHeadingBtnClick: function() {\n        var source = this.addSource({\n            heading: ''\n        });\n\n        Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n        source.select();\n        this.updateSourcesOnSave = true;\n    },\n\n    save: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n            return;\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n        var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n        Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success' && response.success) {\n                // Have any changes been made to the source list?\n                if (this.updateSourcesOnSave) {\n                    if (this.$elementIndexSourcesContainer.length) {\n                        var $lastSource = null,\n                            $pendingHeading;\n\n                        for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                            var $item = this.sourceSort.$items.eq(i),\n                                source = $item.data('source'),\n                                $indexSource = source.getIndexSource();\n\n                            if (!$indexSource) {\n                                continue;\n                            }\n\n                            if (source.isHeading()) {\n                                $pendingHeading = $indexSource;\n                            } else {\n                                if ($pendingHeading) {\n                                    this.appendSource($pendingHeading, $lastSource);\n                                    $lastSource = $pendingHeading;\n                                    $pendingHeading = null;\n                                }\n\n                                this.appendSource($indexSource, $lastSource);\n                                $lastSource = $indexSource;\n                            }\n                        }\n\n                        // Remove any additional sources (most likely just old headings)\n                        if ($lastSource) {\n                            var $extraSources = $lastSource.nextAll();\n                            this.elementIndex.sourceSelect.removeItems($extraSources);\n                            $extraSources.remove();\n                        }\n                    }\n                }\n\n                // If a source is selected, have the element index select that one by default on the next request\n                if (this.selectedSource && this.selectedSource.sourceData.key) {\n                    this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                    this.elementIndex.updateElements();\n                }\n\n                Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                this.hide();\n            } else {\n                var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                Craft.cp.displayError(error);\n            }\n        });\n    },\n\n    appendSource: function($source, $lastSource) {\n        if (!$lastSource) {\n            $source.prependTo(this.$elementIndexSourcesContainer);\n        } else {\n            $source.insertAfter($lastSource);\n        }\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.sources.length; i++) {\n            this.sources[i].destroy();\n        }\n\n        delete this.sources;\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend({\n    modal: null,\n\n    $item: null,\n    $itemLabel: null,\n    $itemInput: null,\n    $settingsContainer: null,\n\n    sourceData: null,\n\n    init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n        this.modal = modal;\n        this.$item = $item;\n        this.$itemLabel = $itemLabel;\n        this.$itemInput = $itemInput;\n        this.sourceData = sourceData;\n\n        this.$item.data('source', this);\n\n        this.addListener(this.$item, 'click', 'select');\n    },\n\n    isHeading: function() {\n        return false;\n    },\n\n    isSelected: function() {\n        return (this.modal.selectedSource === this);\n    },\n\n    select: function() {\n        if (this.isSelected()) {\n            return;\n        }\n\n        if (this.modal.selectedSource) {\n            this.modal.selectedSource.deselect();\n        }\n\n        this.$item.addClass('sel');\n        this.modal.selectedSource = this;\n\n        if (!this.$settingsContainer) {\n            this.$settingsContainer = this.createSettings()\n                .appendTo(this.modal.$sourceSettingsContainer);\n        } else {\n            this.$settingsContainer.removeClass('hidden');\n        }\n\n        this.modal.$sourceSettingsContainer.scrollTop(0);\n    },\n\n    createSettings: function() {\n        return $('<div/>');\n    },\n\n    getIndexSource: function() {\n    },\n\n    deselect: function() {\n        this.$item.removeClass('sel');\n        this.modal.selectedSource = null;\n        this.$settingsContainer.addClass('hidden');\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.text(val);\n    },\n\n    destroy: function() {\n        this.$item.data('source', null);\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend({\n    createSettings: function() {\n        let $settings = $('<div/>');\n\n        if (this.sourceData.tableAttributes.length) {\n            $settings.append(this.createTableColumnsField());\n        }\n\n        return $settings;\n    },\n\n    createTableColumnsField: function() {\n        let $columnCheckboxes = $('<div/>');\n        let selectedAttributes = [];\n\n        $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n        // Add the selected columns, in the selected order\n        for (let i = 0; i < this.sourceData.tableAttributes.length; i++) {\n            let [key, label] = this.sourceData.tableAttributes[i];\n            $columnCheckboxes.append(this.createTableColumnOption(key, label, true));\n            selectedAttributes.push(key);\n        }\n\n        // Add the rest\n        let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n        availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n        for (let i = 0; i < availableTableAttributes.length; i++) {\n            let [key, label] = availableTableAttributes[i];\n            if (!Craft.inArray(key, selectedAttributes)) {\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false));\n            }\n        }\n\n        new Garnish.DragSort($columnCheckboxes.children(), {\n            handle: '.move',\n            axis: 'y'\n        });\n\n        return Craft.ui.createField($columnCheckboxes, {\n            label: Craft.t('app', 'Table Columns'),\n            instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n        });\n    },\n\n    createTableColumnOption: function(key, label, checked) {\n        return $('<div class=\"customize-sources-table-column\"/>')\n            .append('<div class=\"icon move\"/>')\n            .append(\n                Craft.ui.createCheckbox({\n                    label: Craft.escapeHtml(label),\n                    name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                    value: key,\n                    checked: checked,\n                })\n            );\n    },\n\n    getIndexSource: function() {\n        var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n        if ($source) {\n            return $source.closest('li');\n        }\n    }\n});\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend({\n    $labelField: null,\n    $labelInput: null,\n    $deleteBtn: null,\n\n    isHeading: function() {\n        return true;\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.trigger('focus');\n    },\n\n    createSettings: function() {\n        let $settings = $('<div/>');\n\n        this.$labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Heading'),\n            instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n            value: this.sourceData.heading\n        }).appendTo($settings);\n\n        this.$labelInput = this.$labelField.find('.text');\n\n        $settings.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n            .appendTo($settings);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n        return $settings;\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n        this.$itemInput.val(val);\n    },\n\n    deleteHeading: function() {\n        this.modal.sourceSort.removeItems(this.$item);\n        this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n        this.modal.updateSourcesOnSave = true;\n\n        if (this.isSelected()) {\n            this.deselect();\n\n            if (this.modal.sources.length) {\n                this.modal.sources[0].select();\n            }\n        }\n\n        this.$item.remove();\n        this.$settingsContainer.remove();\n        this.destroy();\n    },\n\n    getIndexSource: function() {\n        var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n        return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend({\n    $table: null,\n\n    init: function(table, settings) {\n        this.$table = $(table);\n        var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n        settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n        settings.container = this.$table.children('tbody');\n        settings.helper = this.getHelper.bind(this);\n        settings.caboose = '<tr/>';\n        settings.axis = Garnish.Y_AXIS;\n        settings.magnetStrength = 4;\n        settings.helperLagBase = 1.5;\n\n        this.base($rows, settings);\n    },\n\n    getHelper: function($helperRow) {\n        var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n            $table = $('<table/>').appendTo($helper),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the table width and classes\n        $table.width(this.$table.width());\n        $table.prop('className', this.$table.prop('className'));\n\n        // Copy the column widths\n        var $firstRow = this.$table.find('tr:first'),\n            $cells = $firstRow.children(),\n            $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            $($helperCells[i]).width($($cells[i]).width());\n        }\n\n        return $helper;\n    }\n}, {\n    defaults: {\n        handle: '.move',\n        helperClass: 'datatablesorthelper'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend({\n    id: null,\n    userId: null,\n\n    $deleteActionRadios: null,\n    $deleteSpinner: null,\n\n    userSelect: null,\n    _deleting: false,\n\n    init: function(userId, settings) {\n        this.id = Math.floor(Math.random() * 1000000000);\n        this.userId = userId;\n        settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n        let $form = $(\n            '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n            Craft.getCsrfInput() +\n            '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n            (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n            (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n            '</form>'\n        ).appendTo(Garnish.$bod);\n        let $body = $(\n            '<div class=\"body\">' +\n            '<div class=\"content-summary\">' +\n            '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n            '<ul class=\"bullets\"></ul>' +\n            '</div>' +\n            '<div class=\"options\">' +\n            '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n            '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n            '<div class=\"elements\"></div>' +\n            '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n            '</div>' +\n            '</div>' +\n            '<div>' +\n            '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n            '</div>' +\n            '</div>'\n        ).appendTo($form);\n        let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo($buttons);\n\n        if (settings.contentSummary.length) {\n            for (let i = 0; i < settings.contentSummary.length; i++) {\n                $body.find('ul').append($('<li/>', {text: settings.contentSummary[i]}));\n            }\n        } else {\n            $body.find('ul').remove();\n        }\n\n        this.$deleteActionRadios = $body.find('input[type=radio]');\n        this.$deleteSubmitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: this._submitBtnLabel(false),\n        }).appendTo($buttons);\n        this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n        var idParam;\n\n        if (Garnish.isArray(this.userId)) {\n            idParam = ['and'];\n\n            for (let i = 0; i < this.userId.length; i++) {\n                idParam.push('not ' + this.userId[i]);\n            }\n        } else {\n            idParam = 'not ' + this.userId;\n        }\n\n        this.userSelect = new Craft.BaseElementSelectInput({\n            id: 'transferselect' + this.id,\n            name: 'transferContentTo',\n            elementType: 'craft\\\\elements\\\\User',\n            criteria: {\n                id: idParam\n            },\n            limit: 1,\n            modalSettings: {\n                closeOtherModals: false\n            },\n            onSelectElements: () => {\n                this.updateSizeAndPosition();\n\n                if (!this.$deleteActionRadios.first().prop('checked')) {\n                    this.$deleteActionRadios.first().trigger('click');\n                } else {\n                    this.validateDeleteInputs();\n                }\n            },\n            onRemoveElements: this.validateDeleteInputs.bind(this),\n            selectable: false,\n            editable: false\n        });\n\n        this.addListener($cancelBtn, 'click', 'hide');\n\n        this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n        this.addListener($form, 'submit', 'handleSubmit');\n\n        this.base($form, settings);\n    },\n\n    _submitBtnLabel: function(withContent) {\n        let message = withContent\n            ? 'Delete {num, plural, =1{user} other{users}} and content'\n            : 'Delete {num, plural, =1{user} other{users}}';\n\n        return Craft.t('app', message, {\n            num: Garnish.isArray(this.userId) ? this.userId.length : 1,\n        });\n    },\n\n    validateDeleteInputs: function() {\n        var validates = false;\n\n        if (this.$deleteActionRadios.eq(1).prop('checked')) {\n            validates = true;\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(true));\n        } else {\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(false));\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n        }\n\n        this.updateSizeAndPosition();\n\n        if (validates) {\n            this.$deleteSubmitBtn.removeClass('disabled');\n        } else {\n            this.$deleteSubmitBtn.addClass('disabled');\n        }\n\n        return validates;\n    },\n\n    handleSubmit: function(ev) {\n        if (this._deleting || !this.validateDeleteInputs()) {\n            ev.preventDefault();\n            return;\n        }\n\n        this.$deleteSubmitBtn.addClass('active');\n        this.$deleteSpinner.removeClass('hidden');\n        this.disable();\n        this.userSelect.disable();\n        this._deleting = true;\n\n        // Let the onSubmit callback prevent the form from getting submitted\n        try {\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        } catch (e) {\n            ev.preventDefault();\n            this.$deleteSpinner.addClass('hidden');\n            throw e;\n        }\n    },\n\n    onFadeIn: function() {\n        // Auto-focus the first radio\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$deleteActionRadios.first().trigger('focus');\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        contentSummary: [],\n        onSubmit: $.noop,\n        redirect: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element draft editor\n */\nCraft.DraftEditor = Garnish.Base.extend({\n    $revisionBtn: null,\n    $revisionLabel: null,\n    $spinner: null,\n    $expandSiteStatusesBtn: null,\n    $statusIcon: null,\n\n    $editMetaBtn: null,\n    metaHud: null,\n    $nameTextInput: null,\n    $saveMetaBtn: null,\n\n    $siteStatusPane: null,\n    $globalLightswitch: null,\n    $siteLightswitches: null,\n    $addlSiteField: null,\n\n    siteIds: null,\n    newSiteIds: null,\n\n    enableAutosave: null,\n    lastSerializedValue: null,\n    listeningForChanges: false,\n    pauseLevel: 0,\n    timeout: null,\n    saving: false,\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    queue: null,\n    submittingForm: false,\n\n    duplicatedElements: null,\n    errors: null,\n    httpStatus: null,\n    httpError: null,\n\n    openingPreview: false,\n    preview: null,\n    previewToken: null,\n    scrollY: null,\n    createdProvisionalDraft: false,\n\n    bc: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.DraftEditor.defaults);\n\n        this.queue = [];\n        this.duplicatedElements = {};\n        this.enableAutosave = Craft.autosaveDrafts;\n\n        this.siteIds = Object.keys(this.settings.siteStatuses).map(siteId => {\n            return parseInt(siteId)\n        });\n\n        this.$revisionBtn = $('#context-btn');\n        this.$revisionLabel = $('#revision-label');\n        this.$spinner = $('#revision-spinner');\n        this.$expandSiteStatusesBtn = $('#expand-status-btn');\n        this.$statusIcon = $('#revision-status');\n\n        if (this.settings.canEditMultipleSites) {\n            this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n        }\n\n        if (this.settings.previewTargets.length) {\n            if (this.settings.enablePreview) {\n                this.addListener($('#preview-btn'), 'click', 'openPreview');\n            }\n\n            const $shareBtn = $('#share-btn');\n\n            if (this.settings.previewTargets.length === 1) {\n                this.addListener($shareBtn, 'click', function() {\n                    this.openShareLink(this.settings.previewTargets[0].url);\n                });\n            } else {\n                this.createShareMenu($shareBtn);\n            }\n        }\n\n        // If this is a revision, we're done here\n        if (this.settings.revisionId) {\n            return;\n        }\n\n        // Override the serializer to use our own\n        Craft.cp.$primaryForm.data('serializer', () => this.serializeForm(true));\n\n        this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n        if (this.settings.isProvisionalDraft) {\n            this.initForProvisionalDraft();\n        } else if (this.settings.draftId && !this.settings.isUnpublishedDraft) {\n            this.initForDraft();\n        } else if (!this.settings.canUpdateSource) {\n            // Override the save shortcut to create a draft too\n            this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', ev => {\n                if (ev.saveShortcut) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }\n            });\n        }\n\n        this.listenForChanges();\n\n        this.addListener(this.$statusIcon, 'click', () => {\n            this.showStatusHud(this.$statusIcon);\n        });\n\n        if (typeof BroadcastChannel !== 'undefined' && !this.settings.revisionId) {\n            this.bc = new BroadcastChannel('DraftEditor');\n            this.bc.onmessage = ev => {\n                if (\n                  ev.data.event === 'saveDraft' &&\n                  ev.data.canonicalId === this.settings.sourceId &&\n                  (\n                    ev.data.draftId === this.settings.draftId ||\n                    (ev.data.isProvisionalDraft && !this.settings.draftId)\n                  )\n                ) {\n                    window.location.reload();\n                }\n            };\n        }\n    },\n\n    listenForChanges: function() {\n        if (this.listeningForChanges || this.pauseLevel > 0 || !this.enableAutosave || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        this.listeningForChanges = true;\n\n        this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n            if ($(ev.target).is(this.statusIcons())) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            // If they are typing, wait half a second before checking the form\n            if (['keypress', 'keyup', 'change'].includes(ev.type)) {\n                this.timeout = setTimeout(this.checkForm.bind(this), 500);\n            } else {\n                this.checkForm();\n            }\n        });\n    },\n\n    stopListeningForChanges: function() {\n        if (!this.listeningForChanges) {\n            return;\n        }\n\n        this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n        clearTimeout(this.timeout);\n        this.listeningForChanges = false;\n    },\n\n    pause: function() {\n        this.pauseLevel++;\n        this.stopListeningForChanges();\n    },\n\n    resume: function() {\n        if (this.pauseLevel === 0) {\n            throw 'Craft.DraftEditor::resume() should only be called after pause().';\n        }\n\n        // Only actually resume operation if this has been called the same\n        // number of times that pause() was called\n        this.pauseLevel--;\n        if (this.pauseLevel === 0) {\n            if (this.enableAutosave) {\n                this.checkForm();\n                this.listenForChanges();\n            }\n        }\n    },\n\n    initForProvisionalDraft: function() {\n        let $button = $('#discard-changes');\n        if (!$button.length) {\n            $button = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu.$container.find('#discard-changes') : null;\n        }\n        if ($button && $button.length) {\n            this.addListener($button, 'click', () => {\n                if (confirm(Craft.t('app', 'Are you sure you want to discard your changes?'))) {\n                    Craft.submitForm(Craft.cp.$primaryForm, {\n                        action: this.settings.deleteDraftAction,\n                        redirect: this.settings.hashedCpEditUrl,\n                        params: {\n                            draftId: this.settings.draftId,\n                            provisional: this.settings.isProvisionalDraft,\n                        },\n                    });\n                }\n            });\n        }\n    },\n\n    initForDraft: function() {\n        // Create the edit draft button\n        this.createEditMetaBtn();\n\n        if (this.settings.canUpdateSource) {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n                alt: true\n            }, () => {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.publishDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }, 0);\n        }\n    },\n\n    expandSiteStatuses: function() {\n        this.removeListener(this.$expandSiteStatusesBtn, 'click');\n        this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', () => {\n            this.$expandSiteStatusesBtn.remove();\n        });\n\n        const $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n        this.$siteStatusPane = $enabledForSiteField.parent();\n\n        // If this is a revision, just show the site statuses statically and be done\n        if (this.settings.revisionId) {\n            this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n            return;\n        }\n\n        $enabledForSiteField.addClass('nested');\n        const $globalField = Craft.ui.createLightswitchField({\n            id: 'enabled',\n            label: Craft.t('app', 'Enabled'),\n            name: 'enabled',\n        }).insertBefore($enabledForSiteField);\n        $globalField.find('label').css('font-weight', 'bold');\n        this.$globalLightswitch = $globalField.find('.lightswitch');\n\n        if (!this.settings.revisionId) {\n            this._showField($globalField);\n        }\n\n        // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n        const siteStatusValues = Object.values(this.settings.siteStatuses);\n        const hasEnabled = siteStatusValues.includes(true);\n        const hasDisabled = siteStatusValues.includes(false);\n        const originalEnabledValue = (hasEnabled && hasDisabled) ? '-' : (hasEnabled ? '1' : '');\n        const originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n            '=' + (this.settings.enabledForSite ? '1' : '');\n\n        this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n            .on('change', this._updateGlobalStatus.bind(this));\n\n        this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n\n        let serializedStatuses = `enabled=${originalEnabledValue}`;\n        for (let i = 0; i < this.$siteLightswitches.length; i++) {\n            const $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n            serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n        }\n\n        Craft.cp.$primaryForm.data('initialSerializedValue',\n            Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n        if (this.lastSerializedValue) {\n            this.lastSerializedValue = this.lastSerializedValue.replace(originalSerializedStatus, serializedStatuses);\n        }\n\n        // Are there additional sites that can be added?\n        if (this.settings.addlSites && this.settings.addlSites.length) {\n            this._createAddlSiteField();\n        }\n\n        this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n        this._updateGlobalStatus();\n    },\n\n    /**\n     * @returns {Array}\n     */\n    _getOtherSupportedSites: function() {\n        return Craft.sites.filter(s => s.id != this.settings.siteId && this.siteIds.includes(s.id));\n    },\n\n    _showField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .height(0)\n            .velocity({height}, 'fast', () => {\n                $field.css({\n                    overflow: '',\n                    height: '',\n                });\n            });\n    },\n\n    _removeField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .velocity({height: 0}, 'fast', () => {\n                $field.remove();\n            });\n    },\n\n    _updateGlobalStatus: function() {\n        let allEnabled = true, allDisabled = true;\n        this.$siteLightswitches.each(function() {\n            const enabled = $(this).data('lightswitch').on;\n            if (enabled) {\n                allDisabled = false;\n            } else {\n                allEnabled = false;\n            }\n            if (!allEnabled && !allDisabled) {\n                return false;\n            }\n        });\n        if (allEnabled) {\n            this.$globalLightswitch.data('lightswitch').turnOn(true);\n        } else if (allDisabled) {\n            this.$globalLightswitch.data('lightswitch').turnOff(true);\n        } else {\n            this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n        }\n    },\n\n    _updateSiteStatuses: function() {\n        const enabled = this.$globalLightswitch.data('lightswitch').on;\n        this.$siteLightswitches.each(function() {\n            if (enabled) {\n                $(this).data('lightswitch').turnOn(true);\n            } else {\n                $(this).data('lightswitch').turnOff(true);\n            }\n        });\n    },\n\n    _createSiteStatusField: function(site, status) {\n        const $field = Craft.ui.createLightswitchField({\n            id: `enabledForSite-${site.id}`,\n            label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n            name: `enabledForSite[${site.id}]`,\n            on: typeof status != 'undefined'\n                ? status\n                : (this.settings.siteStatuses.hasOwnProperty(site.id) ? this.settings.siteStatuses[site.id] : true),\n            disabled: !!this.settings.revisionId,\n        });\n\n        if (this.$addlSiteField) {\n            $field.insertBefore(this.$addlSiteField);\n        } else {\n            $field.appendTo(this.$siteStatusPane);\n        }\n\n        if (!this.settings.revisionId) {\n            $field.addClass('nested');\n            const $lightswitch = $field.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n        }\n\n        this._showField($field);\n\n        return $field;\n    },\n\n    _createAddlSiteField: function() {\n        const addlSites = Craft.sites.filter(site => {\n            return !this.siteIds.includes(site.id) && this.settings.addlSites.some(s => s.siteId == site.id);\n        });\n\n        if (!addlSites.length) {\n            return;\n        }\n\n        const $addlSiteSelectContainer = Craft.ui.createSelect({\n            options: [\n                {label: Craft.t('app', 'Add a site…')},\n                ...addlSites.map(s => {\n                    return {label: s.name, value: s.id};\n                }),\n            ],\n        }).addClass('fullwidth');\n\n        this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n            .addClass('nested add')\n            .appendTo(this.$siteStatusPane);\n\n        const $addlSiteSelect = $addlSiteSelectContainer.find('select');\n\n        $addlSiteSelect.on('change', () => {\n            const siteId = parseInt($addlSiteSelect.val());\n            const site = Craft.sites.find(s => s.id === siteId);\n\n            if (!site) {\n                return;\n            }\n\n            const addlSiteInfo = this.settings.addlSites.find(s => s.siteId == site.id);\n            this._createSiteStatusField(site, addlSiteInfo.enabledByDefault);\n            this._updateGlobalStatus();\n\n            $addlSiteSelect\n                .val('')\n                .find(`option[value=\"${siteId}\"]`).remove();\n\n            if (this.newSiteIds === null) {\n                this.newSiteIds = [];\n            }\n\n            this.siteIds.push(siteId);\n            this.newSiteIds.push(siteId);\n\n            // Was that the last site?\n            if ($addlSiteSelect.find('option').length === 1) {\n                this._removeField(this.$addlSiteField);\n            }\n        });\n\n        this._showField(this.$addlSiteField);\n    },\n\n    showStatusHud: function(target) {\n        let bodyHtml;\n\n        if (this.errors === null) {\n            bodyHtml = `<p>${this._saveSuccessMessage()}</p>`;\n        } else {\n            bodyHtml = `<p class=\"error\"><strong>${this._saveFailMessage()}</strong></p>`;\n\n            if (this.errors.length) {\n                bodyHtml += '<ul class=\"errors\">' +\n                    this.errors.map(e => `<li>${Craft.escapeHtml(e)}</li>`).join('') +\n                    '</ul>';\n            }\n\n            if (this.httpError) {\n                bodyHtml += `<p class=\"http-error code\">${Craft.escapeHtml(this.httpError)}</p>`;\n            }\n\n            if (this.httpStatus === 400) {\n                bodyHtml += `<button class=\"btn refresh-btn\">${Craft.t('app', 'Refresh')}</button>`;\n            }\n        }\n\n        const hud = new Garnish.HUD(target, bodyHtml, {\n            hudClass: 'hud revision-status-hud',\n            onHide: function() {\n                hud.destroy();\n            }\n        });\n\n        hud.$mainContainer.find('.refresh-btn').on('click', () => {\n            window.location.reload();\n        });\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveSuccessMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes have been stored.')\n            : Craft.t('app', 'The draft has been saved.');\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveFailMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes could not be stored.')\n            : Craft.t('app', 'The draft could not be saved.');\n    },\n\n    spinners: function() {\n        return this.preview\n            ? this.$spinner.add(this.preview.$spinner)\n            : this.$spinner;\n    },\n\n    statusIcons: function() {\n        return this.preview\n            ? this.$statusIcon.add(this.preview.$statusIcon)\n            : this.$statusIcon;\n    },\n\n    createEditMetaBtn: function() {\n        this.$editMetaBtn = $('<button/>', {\n            type: 'button',\n            'class': 'btn edit icon',\n            title: Craft.t('app', 'Edit draft settings'),\n        }).appendTo($('#context-btngroup'));\n        this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n    },\n\n    createShareMenu: function($shareBtn) {\n        $shareBtn.addClass('menubtn');\n\n        const $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n        const $ul = $('<ul/>').appendTo($menu);\n\n        this.settings.previewTargets.forEach(target => {\n            const $li = $('<li/>').appendTo($ul);\n            const $a = $('<a/>', {\n                text: target.label,\n            }).appendTo($li);\n            this.addListener($a, 'click', () => {\n                this.openShareLink(target.url);\n            });\n        });\n    },\n\n    getPreviewToken: function() {\n        return new Promise((resolve, reject) => {\n            if (this.previewToken) {\n                resolve(this.previewToken);\n                return;\n            }\n\n            Craft.sendActionRequest('POST', 'preview/create-token', {\n                data: {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                    provisional: this.settings.isProvisionalDraft,\n                },\n            }).then(response => {\n                this.previewToken = response.data.token;\n                resolve(this.previewToken);\n            }).catch(reject);\n        });\n    },\n\n    getTokenizedPreviewUrl: function(url, randoParam) {\n        return new Promise((resolve, reject) => {\n            const params = {};\n\n            if (randoParam || !this.settings.isLive) {\n                // Randomize the URL so CDNs don't return cached pages\n                params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n            }\n\n            if (this.settings.siteToken) {\n                params[Craft.siteToken] = this.settings.siteToken;\n            }\n\n            // No need for a token if we're looking at a live element\n            if (this.settings.isLive) {\n                resolve(Craft.getUrl(url, params));\n                return;\n            }\n\n            this.getPreviewToken().then(function(token) {\n                params[Craft.tokenParam] = token;\n                resolve(Craft.getUrl(url, params));\n            }).catch(reject);\n        });\n    },\n\n    openShareLink: function(url) {\n        this.getTokenizedPreviewUrl(url).then(function(url) {\n            window.open(url);\n        });\n    },\n\n    getPreview: function() {\n        if (!this.preview) {\n            this.preview = new Craft.Preview(this);\n            if (!this.enableAutosave) {\n                this.preview.on('open', () => {\n                    this.enableAutosave = true;\n                    this.listenForChanges();\n                });\n                this.preview.on('close', () => {\n                    this.enableAutosave = false;\n                    this.stopListeningForChanges();\n\n                    // Hide the status icon if the save was successful\n                    const $statusIcons = this.statusIcons();\n                    if ($statusIcons.hasClass('checkmark-icon')) {\n                        $statusIcons.addClass('hidden');\n                    }\n                });\n            }\n            this.preview.on('close', () => {\n                if (this.scrollY) {\n                    window.scrollTo(0, this.scrollY);\n                    this.scrollY = null;\n                }\n            });\n        }\n        return this.preview;\n    },\n\n    openPreview: function() {\n        return new Promise((resolve, reject) => {\n            this.openingPreview = true;\n            this.ensureIsDraftOrRevision(true)\n                .then(() => {\n                    this.scrollY = window.scrollY;\n                    this.getPreview().open();\n                    this.openingPreview = false;\n                    resolve();\n                })\n                .catch(reject);\n        })\n    },\n\n    ensureIsDraftOrRevision: function(onlyIfChanged) {\n        return new Promise((resolve, reject) => {\n            if (!this.settings.draftId && !this.settings.revisionId) {\n                if (\n                    onlyIfChanged &&\n                    this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                ) {\n                    resolve();\n                    return;\n                }\n\n                this.createDraft()\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                resolve();\n            }\n        });\n    },\n\n    serializeForm: function(removeActionParams) {\n        let data = Craft.cp.$primaryForm.serialize();\n\n        if (this.isPreviewActive()) {\n            // Replace the temp input with the preview form data\n            data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n        }\n\n        if (removeActionParams && !this.settings.isUnpublishedDraft) {\n            // Remove action and redirect params\n            data = data.replace(/&action=[^&]*/, '');\n            data = data.replace(/&redirect=[^&]*/, '');\n        }\n\n        return data;\n    },\n\n    checkForm: function(force) {\n        // If this isn't a draft and there's no active preview, then there's nothing to check\n        if (this.settings.revisionId || this.pauseLevel > 0 || !this.enableAutosave || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        clearTimeout(this.timeout);\n        this.timeout = null;\n\n        // Has anything changed?\n        const data = this.serializeForm(true);\n        if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n            const provisional = (!this.settings.draftId || this.settings.isProvisionalDraft) && !this.settings.revisionId;\n            this.saveDraft(data, provisional)\n              .catch(e => {\n                  console.warn('Couldn’t save draft:', e);\n              });\n        }\n    },\n\n    isPreviewActive: function() {\n        return this.preview && this.preview.isActive;\n    },\n\n    createDraft: function() {\n        return new Promise((resolve, reject) => {\n            this.saveDraft(this.serializeForm(true))\n                .then(resolve)\n                .catch(reject);\n        });\n    },\n\n    /**\n     * @param {object} data\n     * @returns {Promise<unknown>}\n     */\n    saveDraft: function(data) {\n        return new Promise((resolve, reject) => {\n            // Ignore if we're already submitting the main form\n            if (this.submittingForm) {\n                reject('Form already being submitted.');\n                return;\n            }\n\n            if (this.saving) {\n                this.queue.push(() => {\n                    this.checkForm()\n                });\n                return;\n            }\n\n            this.lastSerializedValue = data;\n            this.saving = true;\n            this.errors = null;\n            this.httpStatus = null;\n            this.httpError = null;\n            this.cancelToken = axios.CancelToken.source();\n            this.spinners().removeClass('hidden');\n\n            this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('invisible checkmark-icon alert-icon fade-out')\n                .addClass('hidden');\n\n            if (this.$saveMetaBtn) {\n                this.$saveMetaBtn.addClass('active');\n            }\n\n            // Prep the data to be saved, keeping track of the first input name for each delta group\n            let modifiedFieldNames = [];\n            let preparedData = this.prepareData(data, !this.settings.isUnpublishedDraft ? (deltaName, params)  => {\n                if (params.length) {\n                    modifiedFieldNames.push(decodeURIComponent(params[0].split('=')[0]));\n                }\n            } : undefined);\n\n            // Are we saving a provisional draft?\n            if (this.settings.isProvisionalDraft || !this.settings.draftId) {\n                preparedData += '&provisional=1';\n            }\n\n            Craft.sendActionRequest('POST', this.settings.saveDraftAction, {\n                cancelToken: this.cancelToken.token,\n                headers: {\n                    'content-type': 'application/x-www-form-urlencoded',\n                },\n                data: preparedData,\n            }).then(response => {\n                this._afterSaveRequest();\n\n                if (response.data.errors) {\n                    this.errors = response.data.errors;\n                    this._showFailStatus();\n                    reject(response.data.errors);\n                }\n\n                const createdProvisionalDraft = !this.settings.draftId;\n\n                if (createdProvisionalDraft) {\n                    this.settings.isProvisionalDraft = true;\n                    this.createdProvisionalDraft = true;\n                }\n\n                if (response.data.title) {\n                    $('#header h1').text(response.data.title);\n                }\n\n                if (response.data.docTitle) {\n                    document.title = response.data.docTitle;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        this.$revisionLabel.append(\n                            $('<span/>', {\n                                text: ` — ${Craft.t('app', 'Edited')}`,\n                            })\n                        );\n                    }\n                } else {\n                    this.$revisionLabel.text(response.data.draftName);\n                    this.settings.draftName = response.data.draftName;\n                }\n\n                let revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                // Did we just add a site?\n                if (this.newSiteIds) {\n                    // Do we need to create the revision menu?\n                    if (!revisionMenu) {\n                        this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                        new Garnish.MenuBtn(this.$revisionBtn);\n                        revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                        revisionMenu.$container.removeClass('hidden');\n                    }\n                    this.newSiteIds.forEach(siteId => {\n                        const $option = revisionMenu.$options.filter(`[data-site-id=${siteId}]`);\n                        $option.find('.status').removeClass('disabled').addClass('enabled');\n                        const $li = $option.parent().removeClass('hidden');\n                        $li.closest('.site-group').removeClass('hidden');\n                    });\n                    revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                    this.newSiteIds = null;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        // Replace the action\n                        const $actionInput = $('#action').attr('value', this.settings.publishDraftAction);\n\n                        // Update the editor settings\n                        this.settings.draftId = response.data.draftId;\n                        this.settings.isLive = false;\n                        this.previewToken = null;\n\n                        if (revisionMenu) {\n                            // Add edited description to the “Current” option\n                            revisionMenu.$container.find('#current-revision').append(\n                                $('<div/>', {\n                                    class: 'edited-desc',\n                                }).append(\n                                    $('<p/>', {\n                                        text: Craft.t('app', 'Showing your unsaved changes.'),\n                                    })\n                                ).append(\n                                    $('<button/>', {\n                                        id: 'discard-changes',\n                                        class: 'btn',\n                                        text: Craft.t('app', 'Discard changes'),\n                                    })\n                                )\n                            );\n                        }\n\n                        this.initForProvisionalDraft();\n                    }\n                } else if (revisionMenu) {\n                    revisionMenu.$options.filter('.sel').find('.draft-name').text(response.data.draftName);\n                    revisionMenu.$options.filter('.sel').find('.draft-meta').text(response.data.creator\n                        ? Craft.t('app', 'Saved {timestamp} by {creator}', {\n                            timestamp: response.data.timestamp,\n                            creator: response.data.creator\n                        })\n                        : Craft.t('app', 'Saved {timestamp}', {\n                            timestamp: response.data.timestamp,\n                        })\n                    );\n                }\n\n                // Did the controller send us updated preview targets?\n                if (\n                    response.data.previewTargets &&\n                    JSON.stringify(response.data.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                ) {\n                    this.updatePreviewTargets(response.data.previewTargets);\n                }\n\n                if (createdProvisionalDraft) {\n                    this.trigger('createProvisionalDraft');\n                }\n\n                if (this.$nameTextInput) {\n                    this.checkMetaValues();\n                }\n\n                for (const oldId in response.data.duplicatedElements) {\n                    if (oldId != this.settings.sourceId && response.data.duplicatedElements.hasOwnProperty(oldId)) {\n                        this.duplicatedElements[oldId] = response.data.duplicatedElements[oldId];\n                    }\n                }\n\n                // Add missing field modified indicators\n                const selectors = response.data.modifiedAttributes.map(attr => `[name=\"${attr}\"],[name^=\"${attr}[\"]`)\n                    .concat(modifiedFieldNames.map(name => `[name=\"${name}\"]`));\n\n                const $fields = $(selectors.join(',')).parents().filter('.field:not(:has(> .status-badge))');\n                for (let i = 0; i < $fields.length; i++) {\n                    $fields.eq(i).prepend(\n                        $('<div/>', {\n                            class: 'status-badge modified',\n                            title: Craft.t('app', 'This field has been modified.'),\n                            'aria-label': Craft.t('app', 'This field has been modified.'),\n                        })\n                    );\n                }\n\n                this.afterUpdate(data);\n\n                if (this.bc) {\n                    this.bc.postMessage({\n                        event: 'saveDraft',\n                        canonicalId: this.settings.sourceId,\n                        draftId: this.settings.draftId,\n                        isProvisionalDraft: this.settings.isProvisionalDraft,\n                    });\n                }\n\n                resolve();\n            }).catch(e => {\n                this._afterSaveRequest();\n\n                if (!this.ignoreFailedRequest) {\n                    this.errors = [];\n                    if (e && e.response) {\n                        this.httpStatus = e.response.status;\n                        this.httpError = e.response.data ? e.response.data.error : null;\n                    }\n                    this._showFailStatus();\n                    reject(e);\n                }\n\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    _afterSaveRequest: function() {\n        this.spinners().addClass('hidden');\n        if (this.$saveMetaBtn) {\n            this.$saveMetaBtn.removeClass('active');\n        }\n        this.saving = false;\n    },\n\n    _showFailStatus: function() {\n        this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden checkmark-icon')\n            .addClass('alert-icon')\n            .attr('title', this._saveFailMessage());\n    },\n\n    /**\n     * @param {string} data\n     * @param {function} [deltaCallback] Callback function that should be passed to `Craft.findDeltaData()`\n     * @returns {string}\n     */\n    prepareData: function(data, deltaCallback) {\n        // Filter out anything that hasn't changed since the last time the form was submitted\n        data = Craft.findDeltaData(Craft.cp.$primaryForm.data('initialSerializedValue'), data, Craft.deltaNames, deltaCallback);\n\n        // Swap out element IDs with their duplicated ones\n        data = this.swapDuplicatedElementIds(data);\n\n        // Add the draft info\n        if (this.settings.draftId) {\n            data += `&draftId=${this.settings.draftId}`;\n            if (this.settings.isProvisionalDraft) {\n                data += '&provisional=1';\n            }\n        }\n\n        if (this.settings.draftName !== null) {\n            data += `&draftName=${this.settings.draftName}`;\n        }\n\n        return data;\n    },\n\n    /**\n     * @param {string} data\n     * @returns {string}\n     */\n    swapDuplicatedElementIds: function(data) {\n        const idsRE = Object.keys(this.duplicatedElements).join('|');\n        if (idsRE === '') {\n            return data;\n        }\n        const lb = encodeURIComponent('[');\n        const rb = encodeURIComponent(']');\n        // Keep replacing field IDs until data stops changing\n        while (true) {\n            if (data === (\n                data = data\n                    // &fields[...][X]\n                    .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                        return pre + this.duplicatedElements[id] + post;\n                    })\n                    // &fields[...=X\n                    .replace(new RegExp(`&(fields${lb}[^=]+)=(${idsRE})\\\\b`, 'g'), (m, name, id) => {\n                        // Ignore param names that end in `[enabled]`, `[type]`, etc.\n                        // (`[sortOrder]` should pass here, which could be set to a specific order index, but *not* `[sortOrder][]`!)\n                        if (name.match(new RegExp(`${lb}(enabled|sordOrder|type|typeId)${rb}$`))) {\n                            return m;\n                        }\n                        return `&${name}=${this.duplicatedElements[id]}`;\n                    })\n            )) {\n                break;\n            }\n        }\n        return data;\n    },\n\n    updatePreviewTargets: function(previewTargets) {\n        previewTargets.forEach(newTarget => {\n            const currentTarget = this.settings.previewTargets.find(t => t.label === newTarget.label);\n            if (currentTarget) {\n                currentTarget.url = newTarget.url;\n            }\n        });\n    },\n\n    afterUpdate: function(data) {\n        Craft.cp.$primaryForm.data('initialSerializedValue', data);\n        Craft.initialDeltaValues = {};\n\n        const $statusIcons = this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden')\n            .addClass('checkmark-icon')\n            .attr('title', this._saveSuccessMessage());\n\n        if (!Craft.autosaveDrafts) {\n            // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n            $statusIcons\n                .velocity('stop')\n                .velocity({\n                    opacity: 0,\n                }, {\n                    delay: 2000,\n                    complete: () => {\n                        $statusIcons.addClass('hidden');\n                    },\n                });\n        }\n\n        this.trigger('update');\n\n        this.nextInQueue();\n    },\n\n    nextInQueue: function() {\n        if (this.queue.length) {\n            this.queue.shift()();\n        }\n    },\n\n    showMetaHud: function() {\n        if (!this.metaHud) {\n            this.createMetaHud();\n            this.onMetaHudShow();\n        } else {\n            this.metaHud.show();\n        }\n\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$nameTextInput.trigger('focus');\n        }\n    },\n\n    createMetaHud: function() {\n        const $hudBody = $('<div/>');\n\n        // Add the Name field\n        const $nameField = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n        const $nameInputContainer = $('<div class=\"input\"/>').appendTo($nameField);\n        this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($nameInputContainer).val(this.settings.draftName);\n\n        // HUD footer\n        const $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n        $('<div class=\"flex-grow\"></div>').appendTo($footer);\n        this.$saveMetaBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo($footer);\n\n        this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n            onSubmit: this.saveMeta.bind(this)\n        });\n\n        this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n\n        this.metaHud.on('show', this.onMetaHudShow.bind(this));\n        this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n        this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n    },\n\n    onMetaHudShow: function() {\n        this.$editMetaBtn.addClass('active');\n    },\n\n    onMetaHudHide: function() {\n        this.$editMetaBtn.removeClass('active');\n    },\n\n    onMetaHudEscape: function() {\n        this.$nameTextInput.val(this.settings.draftName);\n    },\n\n    checkMetaValues: function() {\n        if (\n            this.$nameTextInput.val() &&\n            this.$nameTextInput.val() !== this.settings.draftName\n        ) {\n            this.$saveMetaBtn.removeClass('disabled');\n            return true;\n        }\n\n        this.$saveMetaBtn.addClass('disabled');\n        return false;\n    },\n\n    shakeMetaHud: function() {\n        Garnish.shake(this.metaHud.$hud);\n    },\n\n    saveMeta: function() {\n        if (!this.checkMetaValues()) {\n            this.shakeMetaHud();\n            return;\n        }\n\n        this.settings.draftName = this.$nameTextInput.val();\n\n        this.metaHud.hide();\n        this.checkForm(true);\n    },\n\n    handleFormSubmit: function(ev) {\n        ev.preventDefault();\n\n        // Prevent double form submits\n        if (this.submittingForm) {\n            return;\n        }\n\n        // If this a draft and was this a normal save (either via submit button or save shortcut),\n        // then trigger an autosave\n        if (\n            this.settings.draftId &&\n            !this.settings.isUnpublishedDraft &&\n            !this.settings.isProvisionalDraft &&\n            (typeof ev.autosave === 'undefined' || ev.autosave) &&\n            (ev.saveShortcut || (ev.customTrigger && ev.customTrigger.data('action') === this.settings.saveDraftAction)) &&\n            this.enableAutosave\n        ) {\n            this.checkForm(true);\n            return;\n        }\n\n        // Prevent the normal unload confirmation dialog\n        Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n        // Abort the current save request if there is one\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n\n        // Duplicate the form with normalized data\n        const data = this.prepareData(this.serializeForm(false));\n        const $form = Craft.createForm(data);\n\n        $form.appendTo(Garnish.$bod);\n        $form.submit();\n        this.submittingForm = true;\n    },\n}, {\n    defaults: {\n        elementType: null,\n        sourceId: null,\n        siteId: null,\n        isUnpublishedDraft: false,\n        enabled: false,\n        enabledForSite: false,\n        isLive: false,\n        isProvisionalDraft: false,\n        siteStatuses: null,\n        addlSites: [],\n        cpEditUrl: null,\n        draftId: null,\n        revisionId: null,\n        draftName: null,\n        canEditMultipleSites: false,\n        canUpdateSource: false,\n        saveDraftAction: null,\n        deleteDraftAction: null,\n        publishDraftAction: null,\n        hashedCpEditUrl: null,\n        hashedAddAnotherRedirectUrl: null,\n        enablePreview: false,\n        previewTargets: [],\n        siteToken: null,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend({\n    callback: $.noop,\n\n    init: function(source, target, callback) {\n        this.callback = callback;\n        this.base(source, target);\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return this.callback(sourceVal);\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend({\n    initialized: false,\n\n    id: null,\n    baseName: null,\n    columns: null,\n    sorter: null,\n    biggestId: -1,\n\n    $table: null,\n    $tbody: null,\n    $addRowBtn: null,\n\n    rowCount: 0,\n    hasMaxRows: false,\n    hasMinRows: false,\n\n    radioCheckboxes: null,\n\n    init: function(id, baseName, columns, settings) {\n        this.id = id;\n        this.baseName = baseName;\n        this.columns = columns;\n        this.setSettings(settings, Craft.EditableTable.defaults);\n        this.radioCheckboxes = {};\n\n        this.$table = $('#' + id);\n        this.$tbody = this.$table.children('tbody');\n        this.rowCount = this.$tbody.find('tr').length;\n\n        // Is this already an editable table?\n        if (this.$table.data('editable-table')) {\n            Garnish.log('Double-instantiating an editable table on an element');\n            this.$table.data('editable-table').destroy();\n        }\n\n        this.$table.data('editable-table', this);\n\n        this.sorter = new Craft.DataTableSorter(this.$table, {\n            helperClass: 'editabletablesorthelper',\n            copyDraggeeInputValuesToHelper: true\n        });\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            // Give everything a chance to initialize\n            setTimeout(this.initializeIfVisible.bind(this), 500);\n        }\n\n        if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n            for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                this.addRow()\n            }\n        }\n    },\n\n    isVisible: function() {\n        return (this.$table.parent().height() > 0);\n    },\n\n    initialize: function() {\n        if (this.initialized) {\n            return false;\n        }\n\n        this.initialized = true;\n        this.removeListener(Garnish.$win, 'resize');\n\n        var $rows = this.$tbody.children();\n\n        for (var i = 0; i < $rows.length; i++) {\n            this.createRowObj($rows[i]);\n        }\n\n        this.$addRowBtn = this.$table.next('.add');\n        this.updateAddRowButton();\n        this.addListener(this.$addRowBtn, 'activate', 'addRow');\n        return true;\n    },\n    initializeIfVisible: function() {\n        this.removeListener(Garnish.$win, 'resize');\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n        }\n    },\n    updateAddRowButton: function() {\n        if (!this.canAddRow()) {\n            this.$addRowBtn.css('opacity', '0.2');\n            this.$addRowBtn.css('pointer-events', 'none');\n        } else {\n            this.$addRowBtn.css('opacity', '1');\n            this.$addRowBtn.css('pointer-events', 'auto');\n        }\n    },\n    canDeleteRow: function() {\n        return (this.rowCount > this.settings.minRows);\n    },\n    deleteRow: function(row) {\n        if (!this.canDeleteRow()) {\n            return;\n        }\n\n        this.sorter.removeItems(row.$tr);\n        row.$tr.remove();\n\n        this.rowCount--;\n\n        this.updateAddRowButton();\n        if (this.rowCount === 0) {\n            this.$table.addClass('hidden');\n        }\n\n        // onDeleteRow callback\n        this.settings.onDeleteRow(row.$tr);\n\n        row.destroy();\n    },\n    canAddRow: function() {\n        if (this.settings.staticRows) {\n            return false;\n        }\n\n        if (this.settings.maxRows) {\n            return (this.rowCount < this.settings.maxRows);\n        }\n\n        return true;\n    },\n    addRow: function(focus, prepend) {\n        if (!this.canAddRow()) {\n            return;\n        }\n\n        var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n            $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n        if (prepend) {\n            $tr.prependTo(this.$tbody);\n        } else {\n            $tr.appendTo(this.$tbody);\n        }\n\n        var row = this.createRowObj($tr);\n        this.sorter.addItems($tr);\n\n        // Focus the first input in the row\n        if (focus !== false) {\n            $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n        }\n\n        this.rowCount++;\n        this.updateAddRowButton();\n        this.$table.removeClass('hidden');\n\n        // onAddRow callback\n        this.settings.onAddRow($tr);\n\n        return row;\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n    },\n\n    createRowObj: function($tr) {\n        return new Craft.EditableTable.Row(this, $tr);\n    },\n\n    focusOnPrevRow: function($tr, tdIndex, blurTd) {\n        var $prevTr = $tr.prev('tr');\n        var prevRow;\n\n        if ($prevTr.length) {\n            prevRow = $prevTr.data('editable-table-row');\n        } else {\n            prevRow = this.addRow(false, true);\n        }\n\n        // Focus on the same cell in the previous row\n        if (!prevRow) {\n            return;\n        }\n\n        if (!prevRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($prevTr) {\n                this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    focusOnNextRow: function($tr, tdIndex, blurTd) {\n        var $nextTr = $tr.next('tr');\n        var nextRow;\n\n        if ($nextTr.length) {\n            nextRow = $nextTr.data('editable-table-row');\n        } else {\n            nextRow = this.addRow(false);\n        }\n\n        // Focus on the same cell in the next row\n        if (!nextRow) {\n            return;\n        }\n\n        if (!nextRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($nextTr) {\n                this.focusOnNextRow($nextTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    importData: function(data, row, tdIndex) {\n        let lines = data.split(/\\r?\\n|\\r/);\n        for (let i = 0; i < lines.length; i++) {\n            let values = lines[i].split(\"\\t\");\n            for (let j = 0; j < values.length; j++) {\n                let value = values[j];\n                row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                    .val(value)\n                    .trigger('input');\n            }\n\n            // move onto the next row\n            let $nextTr = row.$tr.next('tr');\n            if ($nextTr.length) {\n                row = $nextTr.data('editable-table-row');\n            } else {\n                row = this.addRow(false);\n            }\n        }\n    },\n}, {\n    textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n    defaults: {\n        rowIdPrefix: '',\n        defaultValues: {},\n        staticRows: false,\n        minRows: null,\n        maxRows: null,\n        onAddRow: $.noop,\n        onDeleteRow: $.noop\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        var $tr = $('<tr/>', {\n            'data-id': rowId\n        });\n\n        for (var colId in columns) {\n            if (!columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            var col = columns[colId],\n                value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                $cell;\n\n            if (col.type === 'heading') {\n                $cell = $('<th/>', {\n                    'scope': 'row',\n                    'class': col['class'],\n                    'html': value\n                });\n            } else {\n                var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                $cell = $('<td/>', {\n                    'class': `${col.class} ${col.type}-cell`,\n                    'width': col.width\n                });\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $cell.addClass('textual');\n                }\n\n                if (col.code) {\n                    $cell.addClass('code');\n                }\n\n                switch (col.type) {\n                    case 'checkbox':\n                        $('<div class=\"checkbox-wrapper\"/>')\n                            .append(Craft.ui.createCheckbox({\n                                    name: name,\n                                    value: col.value || '1',\n                                    checked: !!value\n                                })\n                            )\n                            .appendTo($cell);\n                        break;\n\n                    case 'color':\n                        Craft.ui.createColorInput({\n                            name: name,\n                            value: value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'date':\n                        Craft.ui.createDateInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'lightswitch':\n                        Craft.ui.createLightswitch({\n                            name: name,\n                            value: col.value || '1',\n                            on: !!value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'select':\n                        Craft.ui.createSelect({\n                            name: name,\n                            options: col.options,\n                            value: value || (function() {\n                                for (var key in col.options) {\n                                    if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                        return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                    }\n                                }\n                                return null;\n                            })(),\n                            'class': 'small'\n                        }).appendTo($cell);\n                        break;\n\n                    case 'time':\n                        Craft.ui.createTimeInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'email':\n                    case 'url':\n                        Craft.ui.createTextInput({\n                            name: name,\n                            value: value,\n                            type: col.type,\n                            placeholder: col.placeholder || null,\n                        }).appendTo($cell);\n                        break;\n\n                    default:\n                        $('<textarea/>', {\n                            'name': name,\n                            'rows': col.rows || 1,\n                            'val': value,\n                            'placeholder': col.placeholder\n                        }).appendTo($cell);\n                }\n            }\n\n            $cell.appendTo($tr);\n        }\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'move icon',\n                'title': Craft.t('app', 'Reorder')\n            })\n        ).appendTo($tr);\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Delete')\n            })\n        ).appendTo($tr);\n\n        return $tr;\n    }\n});\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend({\n    table: null,\n    id: null,\n    niceTexts: null,\n\n    $tr: null,\n    $tds: null,\n    tds: null,\n    $textareas: null,\n    $deleteBtn: null,\n\n    init: function(table, tr) {\n        this.table = table;\n        this.$tr = $(tr);\n        this.$tds = this.$tr.children();\n        this.tds = [];\n        this.id = this.$tr.attr('data-id');\n\n        this.$tr.data('editable-table-row', this);\n\n        // Get the row ID, sans prefix\n        var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n        if (id > this.table.biggestId) {\n            this.table.biggestId = id;\n        }\n\n        this.$textareas = $();\n        this.niceTexts = [];\n        var textareasByColId = {};\n\n        var i = 0;\n        var colId, col, td, $textarea, $checkbox;\n\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n            td = this.tds[colId] = this.$tds[i];\n\n            if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                $textarea = $('textarea', td);\n                this.$textareas = this.$textareas.add($textarea);\n\n                this.addListener($textarea, 'focus', 'onTextareaFocus');\n                this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                this.niceTexts.push(new Garnish.NiceText($textarea, {\n                    onHeightChange: this.onTextareaHeightChange.bind(this)\n                }));\n\n                this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                $textarea.trigger('input');\n\n                if (col.type !== 'multiline') {\n                    this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                }\n\n                textareasByColId[colId] = $textarea;\n            } else if (col.type === 'checkbox') {\n                $checkbox = $('input[type=\"checkbox\"]', td);\n\n                if (col.radioMode) {\n                    if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                        this.table.radioCheckboxes[colId] = [];\n                    }\n                    this.table.radioCheckboxes[colId].push($checkbox[0]);\n                    this.addListener($checkbox, 'change', {colId}, 'onRadioCheckboxChange');\n                }\n\n                if (col.toggle) {\n                    this.addListener($checkbox, 'change', {colId}, function(ev) {\n                        this.applyToggleCheckbox(ev.data.colId);\n                    });\n                }\n            }\n\n            if (!$(td).hasClass('disabled')) {\n                this.addListener(td, 'click', {td}, function(ev) {\n                    if (ev.target === ev.data.td) {\n                        $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                    }\n                });\n            }\n\n            i++;\n        }\n\n        // Now that all of the text cells have been nice-ified, let's normalize the heights\n        this.onTextareaHeightChange();\n\n        // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n            col = this.table.columns[colId];\n            if (col.type === 'checkbox' && col.toggle) {\n                this.applyToggleCheckbox(colId);\n            }\n        }\n\n        // Now look for any autopopulate columns\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n\n            if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                    allowNonAlphaStart: true\n                });\n            }\n        }\n\n        var $deleteBtn = this.$tr.children().last().find('.delete');\n        this.addListener($deleteBtn, 'click', 'deleteRow');\n\n        var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n        this.addListener($inputs, 'focus', function(ev) {\n            $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n        });\n        this.addListener($inputs, 'blur', function(ev) {\n            $(ev.currentTarget).closest('td').removeClass('focus');\n        });\n    },\n\n    onTextareaFocus: function(ev) {\n        this.onTextareaHeightChange();\n\n        var $textarea = $(ev.currentTarget);\n\n        if ($textarea.data('ignoreNextFocus')) {\n            $textarea.data('ignoreNextFocus', false);\n            return;\n        }\n\n        setTimeout(function() {\n            Craft.selectFullValue($textarea);\n        }, 0);\n    },\n\n    onRadioCheckboxChange: function(ev) {\n        if (ev.currentTarget.checked) {\n            for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                checkbox.checked = (checkbox === ev.currentTarget);\n            }\n        }\n    },\n\n    applyToggleCheckbox: function(checkboxColId) {\n        var checkboxCol = this.table.columns[checkboxColId];\n        var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n        var colId, colIndex, neg;\n        for (var i = 0; i < checkboxCol.toggle.length; i++) {\n            colId = checkboxCol.toggle[i];\n            colIndex = this.table.colum;\n            neg = colId[0] === '!';\n            if (neg) {\n                colId = colId.substr(1);\n            }\n            if ((checked && !neg) || (!checked && neg)) {\n                $(this.tds[colId])\n                    .removeClass('disabled')\n                    .find('textarea, input').prop('disabled', false);\n            } else {\n                $(this.tds[colId])\n                    .addClass('disabled')\n                    .find('textarea, input').prop('disabled', true);\n            }\n        }\n    },\n\n    ignoreNextTextareaFocus: function(ev) {\n        $.data(ev.currentTarget, 'ignoreNextFocus', true);\n    },\n\n    handleKeypress: function(ev) {\n        var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n        var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n        // Going to the next/previous row?\n        if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n            ev.preventDefault();\n            if (ev.shiftKey) {\n                this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            } else {\n                this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            }\n            return;\n        }\n\n        // Was this an invalid number character?\n        if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n            ev.preventDefault();\n        }\n    },\n\n    handlePaste: function(ev) {\n        let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n        if (!data.match(/[\\t\\r\\n]/)) {\n            return;\n        }\n        ev.preventDefault();\n        this.table.importData(data, this, ev.data.tdIndex);\n    },\n\n    validateValue: function(ev) {\n        if (ev.data.type === 'multiline') {\n            return;\n        }\n\n        var safeValue;\n\n        if (ev.data.type === 'number') {\n            // Only grab the number at the beginning of the value (if any)\n            var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n            if (match !== null) {\n                safeValue = match[1];\n            } else {\n                safeValue = '';\n            }\n        } else {\n            // Just strip any newlines\n            safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n        }\n\n        if (safeValue !== ev.currentTarget.value) {\n            ev.currentTarget.value = safeValue;\n        }\n    },\n\n    onTextareaHeightChange: function() {\n        // Keep all the textareas' heights in sync\n        var tallestTextareaHeight = -1;\n\n        for (var i = 0; i < this.niceTexts.length; i++) {\n            if (this.niceTexts[i].height > tallestTextareaHeight) {\n                tallestTextareaHeight = this.niceTexts[i].height;\n            }\n        }\n\n        this.$textareas.css('min-height', tallestTextareaHeight);\n\n        // If the <td> is still taller, go with that instead\n        var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n        if (tdHeight > tallestTextareaHeight) {\n            this.$textareas.css('min-height', tdHeight);\n        }\n    },\n\n    deleteRow: function() {\n        this.table.deleteRow(this);\n    }\n}, {\n    numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend({\n    maxLevels: null,\n    newChildUrl: null,\n    $trigger: null,\n    $selectedItems: null,\n    triggerEnabled: true,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n        this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n        // Do we have a custom handler?\n        if (this.settings.activate) {\n            // Prevent the element index's click handler\n            this.$trigger.data('custom-handler', true);\n\n            // Is this a custom trigger?\n            if (this.$trigger.prop('nodeName') === 'FORM') {\n                this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n            } else {\n                this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n            }\n        }\n\n        this.updateTrigger();\n        Craft.elementIndex.on('selectionChange', this.updateTrigger.bind(this));\n    },\n\n    updateTrigger: function() {\n        // Ignore if the last element was just unselected\n        if (Craft.elementIndex.getSelectedElements().length === 0) {\n            return;\n        }\n\n        if (this.validateSelection()) {\n            this.enableTrigger();\n        } else {\n            this.disableTrigger();\n        }\n    },\n\n    /**\n     * Determines if this action can be performed on the currently selected elements.\n     *\n     * @return boolean\n     */\n    validateSelection: function() {\n        var valid = true;\n        this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n        if (!this.settings.batch && this.$selectedItems.length > 1) {\n            valid = false;\n        } else if (typeof this.settings.validateSelection === 'function') {\n            valid = this.settings.validateSelection(this.$selectedItems);\n        }\n\n        return valid;\n    },\n\n    enableTrigger: function() {\n        if (this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.removeClass('disabled');\n        this.triggerEnabled = true;\n    },\n\n    disableTrigger: function() {\n        if (!this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.addClass('disabled');\n        this.triggerEnabled = false;\n    },\n\n    handleTriggerActivation: function(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (this.triggerEnabled) {\n            this.settings.activate(this.$selectedItems);\n        }\n    }\n}, {\n    defaults: {\n        type: null,\n        batch: true,\n        validateSelection: null,\n        activate: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend({\n    queue: null,\n    workers: [],\n\n    init: function() {\n        this.queue = [];\n\n        for (var i = 0; i < 3; i++) {\n            this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n        }\n    },\n\n    load: function($elements) {\n        // Only immediately load the visible images\n        let $thumbs = $elements.find('.elementthumb');\n        for (let i = 0; i < $thumbs.length; i++) {\n            let $thumb = $thumbs.eq(i);\n            let $scrollParent = $thumb.scrollParent();\n            if ($scrollParent[0] === document.body) {\n                $scrollParent = Garnish.$doc;\n            }\n            if (this.isVisible($thumb, $scrollParent)) {\n                this.addToQueue($thumb[0]);\n            } else {\n                let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                $scrollParent.on(`scroll.${key}`, {\n                    $thumb: $thumb,\n                    $scrollParent: $scrollParent,\n                    key: key,\n                }, (ev) => {\n                    if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                        delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                        $scrollParent.off(`scroll.${ev.data.key}`);\n                        this.addToQueue(ev.data.$thumb[0]);\n                    }\n                });\n            }\n        }\n    },\n\n    addToQueue: function(thumb) {\n        this.queue.push(thumb);\n\n        // See if there are any inactive workers\n        for (var i = 0; i < this.workers.length; i++) {\n            if (!this.workers[i].active) {\n                this.workers[i].loadNext();\n            }\n        }\n    },\n\n    isVisible: function($thumb, $scrollParent) {\n        let thumbOffset = $thumb.offset().top;\n        let scrollParentOffset, scrollParentHeight;\n        if ($scrollParent[0] === document) {\n            scrollParentOffset = $scrollParent.scrollTop();\n            scrollParentHeight = Garnish.$win.height();\n        } else {\n            scrollParentOffset = $scrollParent.offset().top;\n            scrollParentHeight = $scrollParent.height();\n        }\n        return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.workers.length; i++) {\n            this.workers[i].destroy();\n        }\n\n        this.base();\n    }\n}, {\n    invisibleThumbs: {},\n    retryAll: function() {\n        for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n            let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n            delete Craft.ElementThumbLoader.invisibleThumbs[key];\n            $scrollParent.off(`scroll.${key}`);\n            queue.load($thumb.parent());\n        }\n    }\n});\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend({\n    loader: null,\n    active: false,\n\n    init: function(loader) {\n        this.loader = loader;\n    },\n\n    loadNext: function() {\n        var container = this.loader.queue.shift();\n        if (typeof container === 'undefined') {\n            this.active = false;\n            return;\n        }\n\n        this.active = true;\n        var $container = $(container);\n        if ($container.find('img').length) {\n            this.loadNext();\n            return;\n        }\n        var $img = $('<img/>', {\n            sizes: $container.attr('data-sizes'),\n            srcset: $container.attr('data-srcset'),\n            alt: ''\n        });\n        this.addListener($img, 'load,error', 'loadNext');\n        $img.appendTo($container);\n        picturefill({\n            elements: [$img[0]]\n        });\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend({\n    $form: null,\n    inputs: null,\n\n    init: function(form, inputs) {\n        this.$form = $(form);\n\n        // Only check specific inputs?\n        if (typeof inputs !== 'undefined') {\n            this.inputs = [];\n            inputs = $.makeArray(inputs);\n\n            for (var i = 0; i < inputs.length; i++) {\n                var $inputs = $(inputs[i]);\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $inputs.eq(j);\n\n                    this.inputs.push({\n                        input: $input,\n                        val: Garnish.getInputPostVal($input)\n                    });\n                }\n            }\n        }\n\n        this.addListener(this.$form, 'submit', 'handleFormSubmit');\n    },\n\n    handleFormSubmit: function(ev) {\n        // Ignore if we're in the middle of getting the elevated session timeout\n        if (Craft.elevatedSessionManager.fetchingTimeout) {\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            return;\n        }\n\n        // Are we only interested in certain inputs?\n        if (this.inputs) {\n            var inputsChanged = false;\n            var $input;\n\n            for (var i = 0; i < this.inputs.length; i++) {\n                $input = this.inputs[i].input;\n                // Is this a password input?\n                if ($input.data('passwordInput')) {\n                    $input = $input.data('passwordInput').$currentInput;\n                }\n\n                // Has this input's value changed?\n                if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                    inputsChanged = true;\n                    break;\n                }\n            }\n\n            if (!inputsChanged) {\n                // No need to interrupt the submit\n                return;\n            }\n        }\n\n        // Prevent the form from submitting until the user has an elevated session\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n        Craft.elevatedSessionManager.requireElevatedSession(this.submitForm.bind(this));\n    },\n\n    submitForm: function() {\n        // Don't let handleFormSubmit() interrupt this time\n        this.disable();\n        this.$form.trigger('submit');\n        this.enable();\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend({\n    fetchingTimeout: false,\n\n    passwordModal: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $submitBtn: null,\n    $errorPara: null,\n\n    callback: null,\n\n    /**\n     * Requires that the user has an elevated session.\n     *\n     * @param {function} callback The callback function that should be called once the user has an elevated session\n     */\n    requireElevatedSession: function(callback) {\n        this.callback = callback;\n\n        // Check the time remaining on the user's elevated session (if any)\n        this.fetchingTimeout = true;\n\n        Craft.postActionRequest('users/get-elevated-session-timeout', (response, textStatus) => {\n            this.fetchingTimeout = false;\n\n            if (textStatus === 'success') {\n                // Is there still enough time left or has it been disabled?\n                if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                    this.callback();\n                } else {\n                    // Show the password modal\n                    this.showPasswordModal();\n                }\n            }\n        });\n    },\n\n    showPasswordModal: function() {\n        if (!this.passwordModal) {\n            var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<td/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Submit'),\n            }).appendTo($buttonContainer);\n            this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.passwordModal = new Garnish.Modal($passwordModal, {\n                closeOtherModals: false,\n                onFadeIn: () => {\n                    setTimeout(this.focusPasswordInput.bind(this), 100);\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($passwordModal, 'submit', 'submitPassword');\n        } else {\n            this.passwordModal.show();\n        }\n    },\n\n    focusPasswordInput: function() {\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$passwordInput.trigger('focus');\n        }\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$submitBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$submitBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    submitPassword: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (!this.validatePassword()) {\n            return;\n        }\n\n        this.$passwordSpinner.removeClass('hidden');\n        this.clearLoginError();\n\n        var data = {\n            currentPassword: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/start-elevated-session', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.passwordModal.hide();\n                    this.callback();\n                } else {\n                    this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                    Garnish.shake(this.passwordModal.$container);\n                    this.focusPasswordInput();\n                }\n            } else {\n                this.showPasswordError();\n            }\n        });\n    },\n\n    showPasswordError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$errorPara.text(error);\n        this.passwordModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showPasswordError('');\n    }\n}, {\n    minSafeElevatedSessionTimeout: 5\n});\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend({\n    publishableSections: null,\n    $newEntryBtnGroup: null,\n    $newEntryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible sections the user has permission to create new entries in\n        this.publishableSections = [];\n\n        for (var i = 0; i < Craft.publishableSections.length; i++) {\n            var section = Craft.publishableSections[i];\n\n            if (this.getSourceByKey('section:' + section.uid)) {\n                this.publishableSections.push(section);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific section in the URL?\n        if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n            if (defaultSectionHandle === 'singles') {\n                return 'singles';\n            } else {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultSectionHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        var handle;\n\n        // Get the handle of the selected source\n        if (this.$source.data('key') === 'singles') {\n            handle = 'singles';\n        } else {\n            handle = this.$source.data('handle');\n        }\n\n        // Update the New Entry button\n        // ---------------------------------------------------------------------\n\n        var i, href, label;\n\n        if (this.publishableSections.length) {\n            // Remove the old button, if there is one\n            if (this.$newEntryBtnGroup) {\n                this.$newEntryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a section that they have permission to create entries in\n            var selectedSection;\n\n            if (handle) {\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    if (this.publishableSections[i].handle === handle) {\n                        selectedSection = this.publishableSections[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n            // Otherwise only show a menu button\n            if (selectedSection) {\n                href = this._getSectionTriggerHref(selectedSection);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                        this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.publishableSections.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n            } else {\n                this.$newEntryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New entry'),\n                }).appendTo(this.$newEntryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    var section = this.publishableSections[i];\n\n                    if (\n                        (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                        (this.settings.context !== 'index' && section !== selectedSection)\n                    ) {\n                        href = this._getSectionTriggerHref(section);\n                        label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newEntryBtnGroup);\n        }\n\n        // Update the URL if we're on the Entries index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'entries';\n\n            if (handle) {\n                uri += '/' + handle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getSectionTriggerHref: function(section) {\n        if (this.settings.context === 'index') {\n            const uri = `entries/${section.handle}/new`;\n            const site = this.getSite();\n            const params = site ? {site: site.handle} : undefined;\n            return `href=\"${Craft.getUrl(uri, params)}\"`;\n        }\n\n        return `data-id=\"${section.id}\"`;\n    },\n\n    _openCreateEntryModal: function(sectionId) {\n        if (this.$newEntryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the section\n        var section;\n\n        for (var i = 0; i < this.publishableSections.length; i++) {\n            if (this.publishableSections[i].id == sectionId) {\n                section = this.publishableSections[i];\n                break;\n            }\n        }\n\n        if (!section) {\n            return;\n        }\n\n        this.$newEntryBtn.addClass('inactive');\n        var newEntryBtnText = this.$newEntryBtn.text();\n        this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newEntryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                sectionId: sectionId,\n                typeId: section.entryTypes[0].id,\n                enabled: section.canPublish ? 1 : 0,\n            },\n            onHideHud: () => {\n                this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right section is selected\n                var sectionSourceKey = 'section:' + section.uid;\n\n                if (this.sourceKey !== sectionSourceKey) {\n                    this.selectSourceByKey(sectionSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n","/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: this.onTabOptionSelect.bind(this)\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const $labelSpan = $tab.find('.tabs .tab span');\n        const oldName = $labelSpan.text();\n        const newName = this.promptForTabName(oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    promptForTabName: function(oldName) {\n        return Craft.escapeHtml(prompt(Craft.t('app', 'Give your tab a name.'), oldName));\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const name = this.promptForTabName();\n        if (!name) {\n            return;\n        }\n\n        const $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>${name}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend({\n    $toggle: null,\n    targetPrefix: null,\n    targetSelector: null,\n    reverseTargetSelector: null,\n\n    _$target: null,\n    _$reverseTarget: null,\n    type: null,\n\n    init: function(toggle) {\n        this.$toggle = $(toggle);\n\n        // Is this already a field toggle?\n        if (this.$toggle.data('fieldtoggle')) {\n            Garnish.log('Double-instantiating a field toggle on an element');\n            this.$toggle.data('fieldtoggle').destroy();\n        }\n\n        this.$toggle.data('fieldtoggle', this);\n\n        this.type = this.getType();\n\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n        } else {\n            this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n            this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n        }\n\n        this.findTargets();\n\n        switch (this.type) {\n            case 'link':\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n                break;\n            case 'fieldset':\n                this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                break;\n            default:\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n                this.onToggleChange();\n        }\n    },\n\n    normalizeTargetSelector: function(selector) {\n        if (selector && !selector.match(/^[#\\.]/)) {\n            selector = '#' + selector;\n        }\n\n        return selector;\n    },\n\n    getType: function() {\n        let nodeName = this.$toggle.prop('nodeName');\n        if (\n            (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n            this.$toggle.attr('role') === 'checkbox' ||\n            this.$toggle.attr('role') === 'switch'\n        ) {\n            return 'checkbox';\n        }\n\n        switch (nodeName) {\n            case 'SELECT':\n                return 'select';\n            case 'A':\n                return 'link';\n            case 'FIELDSET':\n                return 'fieldset';\n        }\n\n        console.warn('Unexpected field toggle:', this.$toggle[0]);\n    },\n\n    findTargets: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            var toggleVal = this.getToggleVal();\n            this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n        } else {\n            if (this.targetSelector) {\n                this._$target = $(this.targetSelector);\n            }\n\n            if (this.reverseTargetSelector) {\n                this._$reverseTarget = $(this.reverseTargetSelector);\n            }\n        }\n    },\n\n    getToggleVal: function() {\n        if (this.type === 'checkbox') {\n            if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                return this.$toggle.prop('checked');\n            }\n            return this.$toggle.attr('aria-checked') === 'true';\n        }\n\n        let postVal;\n        if (this.type === 'fieldset') {\n            postVal = this.$toggle.find('input:checked:first').val();\n        } else {\n            postVal = Garnish.getInputPostVal(this.$toggle);\n        }\n\n        // Normalize the value\n        return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n    },\n\n    onToggleChange: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.hideTarget(this._$target);\n            this.findTargets();\n            this.showTarget(this._$target);\n        } else {\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n            } else {\n                this.onToggleChange._show = !!this.getToggleVal();\n            }\n\n            if (this.onToggleChange._show) {\n                this.showTarget(this._$target);\n                this.hideTarget(this._$reverseTarget);\n            } else {\n                this.hideTarget(this._$target);\n                this.showTarget(this._$reverseTarget);\n            }\n\n            delete this.onToggleChange._show;\n        }\n    },\n\n    showTarget: function($target) {\n        if ($target && $target.length) {\n            this.showTarget._currentHeight = $target.height();\n\n            $target.removeClass('hidden');\n\n            if (this.type !== 'select' && this.type !== 'fieldset') {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('collapsed');\n                    this.$toggle.addClass('expanded');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.prop('nodeName') !== 'SPAN') {\n                            $t.height('auto');\n                            this.showTarget._targetHeight = $t.height();\n                            $t.css({\n                                height: this.showTarget._currentHeight,\n                                overflow: 'hidden'\n                            });\n\n                            $t.velocity('stop');\n\n                            $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                $t.css({\n                                    height: '',\n                                    overflow: ''\n                                });\n                            });\n                        }\n                    })($target.eq(i));\n                }\n\n                delete this.showTarget._targetHeight;\n            }\n\n            delete this.showTarget._currentHeight;\n\n            // Trigger a resize event in case there are any grids in the target that need to initialize\n            Garnish.$win.trigger('resize');\n        }\n    },\n\n    hideTarget: function($target) {\n        if ($target && $target.length) {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                $target.addClass('hidden');\n            } else {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('expanded');\n                    this.$toggle.addClass('collapsed');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.hasClass('hidden')) {\n                            return;\n                        }\n                        if ($t.prop('nodeName') === 'SPAN') {\n                            $t.addClass('hidden');\n                        } else {\n                            $t.css('overflow', 'hidden');\n                            $t.velocity('stop');\n                            $t.velocity({height: 0}, 'fast', function() {\n                                $t.addClass('hidden');\n                            });\n                        }\n                    })($target.eq(i));\n                }\n            }\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend({\n    $container: null,\n\n    $items: null,\n    items: null,\n    totalCols: null,\n    colGutterDrop: null,\n    colPctWidth: null,\n\n    possibleItemColspans: null,\n    possibleItemPositionsByColspan: null,\n\n    itemPositions: null,\n    itemColspansByPosition: null,\n\n    layouts: null,\n    layout: null,\n    itemHeights: null,\n    leftPadding: null,\n\n    _refreshingCols: false,\n    _refreshColsAfterRefresh: false,\n    _forceRefreshColsAfterRefresh: false,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n\n        // Is this already a grid?\n        if (this.$container.data('grid')) {\n            Garnish.log('Double-instantiating a grid on an element');\n            this.$container.data('grid').destroy();\n        }\n\n        this.$container.data('grid', this);\n\n        this.setSettings(settings, Craft.Grid.defaults);\n\n        // Set the refreshCols() proxy that container resizes will trigger\n        this.handleContainerHeightProxy = () => {\n            this.refreshCols(false, true);\n        };\n\n        this.$items = this.$container.children(this.settings.itemSelector);\n        this.setItems();\n        this.refreshCols(true, false);\n\n        Garnish.$doc.ready(() => {\n            this.refreshCols(false, false);\n        });\n    },\n\n    addItems: function(items) {\n        this.$items = $().add(this.$items.add(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    removeItems: function(items) {\n        this.$items = $().add(this.$items.not(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    resetItemOrder: function() {\n        this.$items = $().add(this.$items);\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    setItems: function() {\n        this.setItems._ = {};\n\n        this.items = [];\n\n        for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n            this.items.push($(this.$items[this.setItems._.i]));\n        }\n\n        delete this.setItems._;\n    },\n\n    refreshCols: function(force) {\n        if (this._refreshingCols) {\n            this._refreshColsAfterRefresh = true;\n            if (force) {\n                this._forceRefreshColsAfterRefresh = true;\n            }\n            return;\n        }\n\n        this._refreshingCols = true;\n\n        if (!this.items.length) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.refreshCols._ = {};\n\n        // Check to see if the grid is actually visible\n        this.refreshCols._.oldHeight = this.$container[0].style.height;\n        this.$container[0].style.height = 1;\n        this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n        this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n        if (this.refreshCols._.scrollHeight === 0) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        if (this.settings.cols) {\n            this.refreshCols._.totalCols = this.settings.cols;\n        } else {\n            this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n            // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n            if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n            }\n\n            if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                this.refreshCols._.totalCols = this.settings.maxCols;\n            }\n        }\n\n        if (this.refreshCols._.totalCols === 0) {\n            this.refreshCols._.totalCols = 1;\n        }\n\n        // Same number of columns as before?\n        if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.totalCols = this.refreshCols._.totalCols;\n        this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n        // Temporarily stop listening to container resizes\n        this.removeListener(this.$container, 'resize');\n\n        if (this.settings.fillMode === 'grid') {\n            this.refreshCols._.itemIndex = 0;\n\n            while (this.refreshCols._.itemIndex < this.items.length) {\n                // Append the next X items and figure out which one is the tallest\n                this.refreshCols._.tallestItemHeight = -1;\n                this.refreshCols._.colIndex = 0;\n\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                    if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                        this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                    }\n\n                    this.refreshCols._.colIndex++;\n                }\n\n                if (this.settings.snapToGrid) {\n                    this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                    if (this.refreshCols._.remainder) {\n                        this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                    }\n                }\n\n                // Now set their heights to the tallest one\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                }\n\n                // set the this.refreshCols._.itemIndex pointer to the next one up\n                this.refreshCols._.itemIndex += this.totalCols;\n            }\n        } else {\n            this.removeListener(this.$items, 'resize');\n\n            // If there's only one column, sneak out early\n            if (this.totalCols === 1) {\n                this.$container.height('auto');\n                this.$items\n                    .show()\n                    .css({\n                        position: 'relative',\n                        width: 'auto',\n                        top: 0\n                    })\n                    .css(Craft.left, 0);\n            } else {\n                this.$items.css('position', 'absolute');\n                this.colPctWidth = (100 / this.totalCols);\n\n                // The setup\n\n                this.layouts = [];\n\n                this.itemPositions = [];\n                this.itemColspansByPosition = [];\n\n                // Figure out all of the possible colspans for each item,\n                // as well as all the possible positions for each item at each of its colspans\n\n                this.possibleItemColspans = [];\n                this.possibleItemPositionsByColspan = [];\n                this.itemHeightsByColspan = [];\n\n                for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                    this.possibleItemColspans[this.refreshCols._.item] = [];\n                    this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                    this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                    this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                    this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                    this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                    this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                    this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                    if (this.refreshCols._.minColspan > this.totalCols) {\n                        this.refreshCols._.minColspan = this.totalCols;\n                    }\n                    if (this.refreshCols._.maxColspan > this.totalCols) {\n                        this.refreshCols._.maxColspan = this.totalCols;\n                    }\n\n                    for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                        // Get the height for this colspan\n                        this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                        this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                        this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                        if (this.refreshCols._.positionLeft) {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = 0;\n                        } else if (this.refreshCols._.positionRight) {\n                            this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                            this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                        } else {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                        }\n\n                        for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                        }\n                    }\n                }\n\n                // Find all the possible layouts\n\n                this.refreshCols._.colHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                    this.refreshCols._.colHeights.push(0);\n                }\n\n                this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                // Now find the layout that looks the best.\n\n                // First find the layouts with the highest number of used columns\n                this.refreshCols._.layoutTotalCols = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                    for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                        if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                            this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                        }\n                    }\n                }\n\n                this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                // Filter out the ones that aren't using as many columns as they could be\n                for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                    if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                        this.layouts.splice(this.refreshCols._.i, 1);\n                    }\n                }\n\n                // Find the layout(s) with the least overall height\n                this.refreshCols._.layoutHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                }\n\n                this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                this.refreshCols._.shortestLayouts = [];\n                this.refreshCols._.emptySpaces = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                    if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                        this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                        // Now get its total empty space, including any trailing empty space\n                        this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                        }\n\n                        this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                    }\n                }\n\n                // And the layout with the least empty space is...\n                this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                // Set the item widths and left positions\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                    this.refreshCols._.css = {\n                        width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                    };\n                    this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                    this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                }\n\n                // If every item is at position 0, then let them lay out au naturel\n                if (this.isSimpleLayout()) {\n                    this.$container.height('auto');\n                    this.$items.css({\n                        position: 'relative',\n                        top: 0,\n                        'margin-bottom': this.settings.gutter + 'px'\n                    });\n                } else {\n                    this.$items.css('position', 'absolute');\n\n                    // Now position the items\n                    this.positionItems();\n\n                    // Update the positions as the items' heigthts change\n                    this.addListener(this.$items, 'resize', 'onItemResize');\n                }\n            }\n        }\n\n        this.completeRefreshCols();\n\n        // Resume container resize listening\n        this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n        this.onRefreshCols();\n    },\n\n    completeRefreshCols: function() {\n        // Delete the internal variable object\n        if (typeof this.refreshCols._ !== 'undefined') {\n            delete this.refreshCols._;\n        }\n\n        this._refreshingCols = false;\n\n        if (this._refreshColsAfterRefresh) {\n            var force = this._forceRefreshColsAfterRefresh;\n            this._refreshColsAfterRefresh = false;\n            this._forceRefreshColsAfterRefresh = false;\n\n            Garnish.requestAnimationFrame(() => {\n                this.refreshCols(force);\n            });\n        }\n    },\n\n    getItemWidth: function(colspan) {\n        return (this.colPctWidth * colspan);\n    },\n\n    getItemWidthCss: function(colspan) {\n        return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n    },\n\n    getItemWidthInPx: function(colspan) {\n        return this.getItemWidth(colspan) / 100 * this.$container.width() - this.colGutterDrop;\n    },\n\n    getItemLeftPosCss: function(position) {\n        return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n    },\n\n    getItemLeftPosInPx: function(position) {\n        return (this.getItemWidth(1) / 100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n    },\n\n    isSimpleLayout: function() {\n        this.isSimpleLayout._ = {};\n\n        for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n            if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                delete this.isSimpleLayout._;\n                return false;\n            }\n        }\n\n        delete this.isSimpleLayout._;\n        return true;\n    },\n\n    positionItems: function() {\n        this.positionItems._ = {};\n\n        this.positionItems._.colHeights = [];\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n            this.positionItems._.colHeights.push(0);\n        }\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n            this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n            this.positionItems._.affectedColHeights = [];\n\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n            }\n\n            this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n            if (this.positionItems._.top > 0) {\n                this.positionItems._.top += this.settings.gutter;\n            }\n\n            this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n            // Now add the new heights to those columns\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n            }\n        }\n\n        // Set the container height\n        this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n        delete this.positionItems._;\n    },\n\n    onItemResize: function(ev) {\n        this.onItemResize._ = {};\n\n        // Prevent this from bubbling up to the container, which has its own resize listener\n        ev.stopPropagation();\n\n        this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n        if (this.onItemResize._.item !== -1) {\n            // Update the height and reposition the items\n            this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n            if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                this.positionItems(false);\n            }\n        }\n\n        delete this.onItemResize._;\n    },\n\n    onRefreshCols: function() {\n        this.trigger('refreshCols');\n        this.settings.onRefreshCols();\n    }\n}, {\n    defaults: {\n        itemSelector: '.item',\n        cols: null,\n        maxCols: null,\n        minColWidth: 320,\n        gutter: 14,\n        fillMode: 'top',\n        colClass: 'col',\n        snapToGrid: null,\n\n        onRefreshCols: $.noop\n    }\n});\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend({\n    grid: null,\n    _: null,\n\n    init: function(grid) {\n        this.grid = grid;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        this._ = {};\n\n        // Loop through all possible colspans\n        for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n            this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n            // Loop through all the possible positions for this colspan,\n            // and find the one that is closest to the top\n\n            this._.tallestColHeightsByPosition = [];\n\n            for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                this._.colHeightsForPosition = [];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                }\n\n                this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n            }\n\n            // And the shortest position for this colspan is...\n            this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n            this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n            // Now log the colspan/position placement\n            this._.positions = prevPositions.slice(0);\n            this._.colspans = prevColspans.slice(0);\n            this._.colHeights = prevColHeights.slice(0);\n            this._.emptySpace = prevEmptySpace;\n\n            this._.positions.push(this._.position);\n            this._.colspans.push(this._.colspan);\n\n            // Add the new heights to those columns\n            this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n            this._.endingCol = this._.position + this._.colspan - 1;\n\n            for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n            }\n\n            // If this is the last item, create the layout\n            if (item === this.grid.items.length - 1) {\n                this.grid.layouts.push({\n                    positions: this._.positions,\n                    colspans: this._.colspans,\n                    colHeights: this._.colHeights,\n                    emptySpace: this._.emptySpace\n                });\n            } else {\n                // Dive deeper\n                this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n            }\n        }\n\n        delete this._;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Remove inner-word punctuation\n        handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        handle = handle.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        handle = Craft.asciiString(handle);\n\n        if (!this.settings.allowNonAlphaStart) {\n            // Handle must start with a letter\n            handle = handle.replace(/^[^a-z]+/, '');\n        }\n\n        // Get the \"words\"\n        var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n        handle = '';\n\n        if (Craft.handleCasing === 'snake') {\n            return words.join('_');\n        }\n\n        // Make it camelCase\n        for (let i = 0; i < words.length; i++) {\n            if (Craft.handleCasing !== 'pascal' && i === 0) {\n                handle += words[i];\n            } else {\n                handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n            }\n        }\n\n        return handle;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend({\n    $container: null,\n    progressBar: null,\n    uploader: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ImageUpload.defaults);\n        this.initImageUpload();\n    },\n\n    initImageUpload: function() {\n        this.$container = $(this.settings.containerSelector);\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl(this.settings.uploadAction),\n            formData: this.settings.postParameters,\n            fileInput: this.$container.find(this.settings.fileInputSelector),\n            paramName: this.settings.uploadParamName\n        };\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n        options.events.fileuploadfail = this._onUploadError.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        this.initButtons();\n    },\n\n    initButtons: function() {\n        this.$container.find(this.settings.uploadButtonSelector).on('click', ev => {\n            this.$container.find(this.settings.fileInputSelector).trigger('click');\n        });\n\n        this.$container.find(this.settings.deleteButtonSelector).on('click', ev => {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        this.refreshImage(response);\n                    }\n                });\n            }\n        });\n    },\n\n    refreshImage: function(response) {\n        $(this.settings.containerSelector).replaceWith(response.html);\n        this.settings.onAfterRefreshImage(response);\n        this.initImageUpload();\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function(event) {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var html = $(data.result.html);\n            this.refreshImage(data.result);\n        }\n\n        // Last file\n        if (this.uploader.isLastUpload()) {\n            this.progressBar.hideProgressBar();\n            this.$container.removeClass('uploading');\n        }\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadError: function(event, data) {\n        if (data.jqXHR.responseJSON.error) {\n            alert(data.jqXHR.responseJSON.error);\n            this.$container.removeClass('uploading');\n            this.progressBar.hideProgressBar();\n            this.progressBar.resetProgressBar();\n        }\n    }\n}, {\n    defaults: {\n        postParameters: {},\n        uploadAction: \"\",\n        deleteAction: \"\",\n        fileInputSelector: \"\",\n\n        onAfterRefreshImage: $.noop,\n        containerSelector: null,\n\n        uploadButtonSelector: null,\n        deleteButtonSelector: null,\n\n        uploadParamName: 'files'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend({\n    $icon: null,\n    content: null,\n    hud: null,\n\n    init: function(icon) {\n        this.$icon = $(icon);\n\n        if (this.$icon.data('infoicon')) {\n            Garnish.log('Double-instantiating an info icon on an element');\n            this.content = this.$icon.data('infoicon').content;\n            this.$icon.data('infoicon').destroy();\n        } else {\n            this.content = this.$icon.html();\n            this.$icon\n                .html('')\n                .attr({\n                    tabindex: 0,\n                    'role': 'button',\n                    'aria-label': Craft.t('app', 'Information'),\n                });\n        }\n\n        this.$icon.data('infoicon', this);\n\n        if (this.$icon[0].previousSibling && this.$icon[0].previousSibling.nodeType === Node.TEXT_NODE) {\n            // Make sure it's in a .nowrap container\n            const $parent = this.$icon.parent();\n            if (!$parent.hasClass('nowrap')) {\n                // Find the last word in the text\n                const m = this.$icon[0].previousSibling.nodeValue.match(/[^\\s\\-]+\\s*$/);\n                if (m) {\n                    this.$icon[0].previousSibling.nodeValue = this.$icon[0].previousSibling.nodeValue.substr(0, m.index);\n                    $('<span/>', {\n                        class: 'nowrap',\n                        html: m[0].replace(/\\s+$/, '') + ' ',\n                    })\n                        .insertAfter(this.$icon[0].previousSibling)\n                        .append(this.$icon);\n                }\n            }\n        }\n\n        this.addListener(this.$icon, 'click', ev => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.showHud();\n        });\n\n        this.addListener(this.$icon, 'keydown', ev => {\n            if (!(this.hud && this.hud.showing) && [Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.showHud();\n            }\n        });\n    },\n\n    showHud: function(ev) {\n        if (!this.hud) {\n            this.hud = new Garnish.HUD(this.$icon, this.content, {\n                hudClass: 'hud info-hud',\n                closeOtherHUDs: false,\n                onShow: () => {\n                    Garnish.shortcutManager.registerShortcut(Garnish.SPACE_KEY, () => {\n                        this.hud.hide();\n                    });\n                },\n            });\n            Craft.initUiElements(this.hud.$body);\n        } else {\n            this.hud.show();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend({\n    settings: null,\n    $outerContainer: null,\n    $innerContainer: null,\n    $input: null,\n    small: false,\n    on: false,\n    indeterminate: false,\n    dragger: null,\n\n    dragStartMargin: null,\n\n    init: function(outerContainer, settings) {\n        this.$outerContainer = $(outerContainer);\n\n        // Is this already a lightswitch?\n        if (this.$outerContainer.data('lightswitch')) {\n            Garnish.log('Double-instantiating a lightswitch on an element');\n            this.$outerContainer.data('lightswitch').destroy();\n        }\n\n        this.$outerContainer.data('lightswitch', this);\n\n        this.small = this.$outerContainer.hasClass('small');\n\n        this.setSettings(settings, Craft.LightSwitch.defaults);\n\n        this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n        this.$input = this.$outerContainer.find('input:first');\n\n        // If the input is disabled, go no further\n        if (this.$input.prop('disabled')) {\n            return;\n        }\n\n        this.on = this.$outerContainer.hasClass('on');\n        this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n        this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n        this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n        this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n            axis: Garnish.X_AXIS,\n            ignoreHandleSelector: null,\n            onDragStart: this._onDragStart.bind(this),\n            onDrag: this._onDrag.bind(this),\n            onDragStop: this._onDragStop.bind(this)\n        });\n\n        // Does the input have on/off labels?\n        let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n        if ($wrapper.length) {\n            this.addListener($wrapper.children('span[data-toggle=\"off\"]'), 'click', this.turnOff);\n            this.addListener($wrapper.children('span[data-toggle=\"on\"]'), 'click', this.turnOn);\n        }\n    },\n\n    turnOn: function(muteEvent) {\n        var changed = !this.on;\n\n        this.on = true;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.value);\n        this.$outerContainer.addClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'true');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnOff: function(muteEvent) {\n        var changed = this.on || this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin();\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val('');\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'false');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnIndeterminate: function(muteEvent) {\n        var changed = !this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = true;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.indeterminateValue);\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.addClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'mixed');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    toggle: function() {\n        if (this.indeterminate || !this.on) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    onChange: function() {\n        this.trigger('change');\n        this.settings.onChange(this.on);\n        this.$outerContainer.trigger('change');\n    },\n\n    _onMouseDown: function() {\n        this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n    },\n\n    _onMouseUp: function() {\n        this.removeListener(Garnish.$doc, 'mouseup');\n\n        // Was this a click?\n        if (!this.dragger.dragging) {\n            this.toggle();\n        }\n    },\n\n    _onKeyDown: function(event) {\n        switch (event.keyCode) {\n            case Garnish.SPACE_KEY: {\n                this.toggle();\n                event.preventDefault();\n                break;\n            }\n            case Garnish.RIGHT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOn();\n                } else {\n                    this.turnOff();\n                }\n\n                event.preventDefault();\n                break;\n            }\n            case Garnish.LEFT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOff();\n                } else {\n                    this.turnOn();\n                }\n\n                event.preventDefault();\n                break;\n            }\n        }\n    },\n\n    _getMargin: function() {\n        return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n    },\n\n    _onDragStart: function() {\n        this.$outerContainer.addClass('dragging');\n        this.dragStartMargin = this._getMargin();\n    },\n\n    _onDrag: function() {\n        var margin;\n\n        if (Craft.orientation === 'ltr') {\n            margin = this.dragStartMargin + this.dragger.mouseDistX;\n        } else {\n            margin = this.dragStartMargin - this.dragger.mouseDistX;\n        }\n\n        if (margin < this._getOffMargin()) {\n            margin = this._getOffMargin();\n        } else if (margin > 0) {\n            margin = 0;\n        }\n\n        this.$innerContainer.css('margin-' + Craft.left, margin);\n    },\n\n    _onDragStop: function() {\n        var margin = this._getMargin();\n        console.log(margin);\n\n        if (margin > (this._getOffMargin() / 2)) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    _onSettle: function() {\n        this.$outerContainer.removeClass('dragging');\n    },\n\n    destroy: function() {\n        this.base();\n        this.dragger.destroy();\n    },\n\n    _getOffMargin: function() {\n        return (this.small ? -10 : -12);\n    }\n}, {\n    animationDuration: 100,\n    defaults: {\n        value: '1',\n        indeterminateValue: '-',\n        onChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend({\n    $extraFields: null,\n    $trigger: null,\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $iframe: null,\n    $fieldPlaceholder: null,\n\n    previewUrl: null,\n    token: null,\n    basePostData: null,\n    inPreviewMode: false,\n    fields: null,\n    lastPostData: null,\n    updateIframeInterval: null,\n    loading: false,\n    checkAgain: false,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _slideInOnIframeLoad: false,\n    _forceUpdateIframeProxy: null,\n\n    _scrollX: null,\n    _scrollY: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.LivePreview.defaults);\n\n        // Should preview requests use a specific URL?\n        // This won't affect how the request gets routed (the action param will override it),\n        // but it will allow the templates to change behavior based on the request URI.\n        if (this.settings.previewUrl) {\n            this.previewUrl = this.settings.previewUrl;\n        } else {\n            this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n        }\n\n        // Load the preview over SSL if the current request is\n        if (document.location.protocol === 'https:') {\n            this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n        }\n\n        // Set the base post data\n        this.basePostData = $.extend({}, this.settings.previewParams);\n\n        this._forceUpdateIframeProxy = this.forceUpdateIframe.bind(this);\n\n        // Find the DOM elements\n        this.$extraFields = $(this.settings.extraFields);\n        this.$trigger = $(this.settings.trigger);\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n        // Event Listeners\n        this.addListener(this.$trigger, 'activate', 'toggle');\n\n        Craft.cp.on('beforeSaveShortcut', () => {\n            if (this.inPreviewMode) {\n                this.moveFieldsBack();\n            }\n        });\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n            inPx = Craft.LivePreview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    toggle: function() {\n        if (this.inPreviewMode) {\n            this.exit();\n        } else {\n            this.enter();\n        }\n    },\n\n    enter: function() {\n        if (this.inPreviewMode) {\n            return;\n        }\n\n        if (!this.token) {\n            this.createToken();\n            return;\n        }\n\n        this.trigger('beforeEnter');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            let $saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($editorHeader);\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this)\n            });\n\n            this.addListener($closeBtn, 'click', 'exit');\n            this.addListener($saveBtn, 'click', 'save');\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Move all the fields into the editor rather than copying them\n        // so any JS that's referencing the elements won't break.\n        this.fields = [];\n        var $fields = $(this.settings.fields);\n\n        for (var i = 0; i < $fields.length; i++) {\n            var $field = $($fields[i]),\n                $clone = this._getClone($field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter($field);\n            $field.detach();\n            this.$fieldPlaceholder.replaceWith($clone);\n            $field.appendTo(this.$editor);\n\n            this.fields.push({\n                $field: $field,\n                $clone: $clone\n            });\n        }\n\n        if (this.updateIframe()) {\n            this._slideInOnIframeLoad = true;\n        } else {\n            this.slideIn();\n        }\n\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = true;\n        this.trigger('enter');\n    },\n\n    createToken: function() {\n        Craft.postActionRequest('live-preview/create-token', {\n            previewAction: this.settings.previewAction\n        }, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.token = response.token;\n                this.enter();\n            }\n        });\n    },\n\n    save: function() {\n        Craft.cp.submitPrimaryForm();\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.updateIframeInterval = setInterval(this.updateIframe.bind(this), 1000);\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.exit();\n                }\n            });\n        });\n    },\n\n    exit: function() {\n        if (!this.inPreviewMode) {\n            return;\n        }\n\n        this.trigger('beforeExit');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        if (this.updateIframeInterval) {\n            clearInterval(this.updateIframeInterval);\n        }\n\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n        });\n\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = false;\n        this.trigger('exit');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n    },\n\n    updateIframe: function(force) {\n        if (force) {\n            this.lastPostData = null;\n        }\n\n        if (!this.inPreviewMode) {\n            return false;\n        }\n\n        if (this.loading) {\n            this.checkAgain = true;\n            return false;\n        }\n\n        // Has the post data changed?\n        var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n        if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n            this.lastPostData = postData;\n            this.loading = true;\n\n            var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n            this._scrollX = $doc ? $doc.scrollLeft() : 0;\n            this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n            $.ajax({\n                url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                method: 'POST',\n                data: $.extend({}, postData, this.basePostData),\n                headers: {\n                    'X-Craft-Token': this.token\n                },\n                xhrFields: {\n                    withCredentials: true\n                },\n                crossDomain: true,\n                success: this.handleSuccess.bind(this),\n                error: this.handleError.bind(this),\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    forceUpdateIframe: function() {\n        return this.updateIframe(true);\n    },\n\n    handleSuccess: function(data) {\n        var html = data +\n            '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n        // Create a new iframe\n        var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n        if (this.$iframe) {\n            $iframe.insertBefore(this.$iframe);\n        } else {\n            $iframe.appendTo(this.$iframeContainer);\n        }\n\n        this.addListener($iframe, 'load', function() {\n            if (this.$iframe) {\n                this.$iframe.remove();\n            }\n            this.$iframe = $iframe;\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n\n            this.removeListener($iframe, 'load');\n        });\n\n        Garnish.requestAnimationFrame(() => {\n            $iframe[0].contentWindow.document.open();\n            $iframe[0].contentWindow.document.write(html);\n            $iframe[0].contentWindow.document.close();\n            this.onResponse();\n        });\n    },\n\n    handleError: function() {\n        this.onResponse();\n    },\n\n    onResponse: function() {\n        this.loading = false;\n\n        if (this.checkAgain) {\n            this.checkAgain = false;\n            this.updateIframe();\n        }\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n\n    defaults: {\n        trigger: '.livepreviewbtn',\n        fields: null,\n        extraFields: null,\n        previewUrl: null,\n        previewAction: null,\n        previewParams: {}\n    }\n});\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend({\n    $passwordWrapper: null,\n    $passwordInput: null,\n    $textInput: null,\n    $currentInput: null,\n\n    $showPasswordToggle: null,\n    showingPassword: null,\n\n    init: function(passwordInput, settings) {\n        this.$passwordInput = $(passwordInput);\n        this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n        this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n        // Is this already a password input?\n        if (this.$passwordInput.data('passwordInput')) {\n            Garnish.log('Double-instantiating a password input on an element');\n            this.$passwordInput.data('passwordInput').destroy();\n        }\n\n        this.$passwordInput.data('passwordInput', this);\n\n        this.$showPasswordToggle = $('<button type=\"button\" class=\"invisible\" />');\n        this.$showPasswordToggle.addClass('password-toggle');\n        this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n        this.initInputFocusEvents(this.$passwordInput);\n        this.addListener(this.$showPasswordToggle, 'click', 'onClick');\n        this.hidePassword();\n\n        this.addListener(this.$passwordWrapper.closest('form'), 'submit', 'hidePassword');\n    },\n\n    setCurrentInput: function($input) {\n        if (this.$currentInput) {\n            // Swap the inputs, while preventing the focus animation\n            $input.insertAfter(this.$currentInput);\n            this.$currentInput.detach();\n            $input.trigger('focus');\n\n            // Restore the input value\n            $input.val(this.$currentInput.val());\n        }\n\n        this.$currentInput = $input;\n\n        this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n    },\n\n    updateToggleLabel: function(label) {\n        this.$showPasswordToggle.text(label);\n    },\n\n    initInputFocusEvents: function($input) {\n        this.addListener($input, 'focus', function() {\n            this.$passwordWrapper.addClass('focus');\n        });\n        this.addListener($input, 'blur', function() {\n            this.$passwordWrapper.removeClass('focus');\n        });\n    },\n\n    showPassword: function() {\n        if (this.showingPassword) {\n            return;\n        }\n\n        if (!this.$textInput) {\n            this.$textInput = this.$passwordInput.clone(true);\n            this.$textInput.attr({\n                type: 'text',\n                autocapitalize: 'off',\n            });\n            this.initInputFocusEvents(this.$textInput);\n        }\n\n        this.setCurrentInput(this.$textInput);\n        this.updateToggleLabel(Craft.t('app', 'Hide'));\n        this.showingPassword = true;\n    },\n\n    hidePassword: function() {\n        // showingPassword could be null, which is acceptable\n        if (this.showingPassword === false) {\n            return;\n        }\n\n        this.setCurrentInput(this.$passwordInput);\n        this.updateToggleLabel(Craft.t('app', 'Show'));\n        this.showingPassword = false;\n\n        // Alt key temporarily shows the password\n        this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n    },\n\n    togglePassword: function() {\n        if (this.showingPassword) {\n            this.hidePassword();\n        } else {\n            this.showPassword();\n        }\n\n        this.settings.onToggleInput(this.$currentInput);\n    },\n\n    onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n            this.showPassword();\n            this.$showPasswordToggle.addClass('invisible');\n            this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n        }\n    },\n\n    onKeyUp: function(ev) {\n        ev.preventDefault();\n\n        if (ev.keyCode === Garnish.ALT_KEY) {\n            this.hidePassword();\n            this.$showPasswordToggle.removeClass('invisible');\n        }\n    },\n\n    onInputChange: function() {\n        if (this.$currentInput.val()) {\n            this.$showPasswordToggle.removeClass('invisible');\n        } else {\n            this.$showPasswordToggle.addClass('invisible');\n        }\n    },\n\n    onClick: function(ev) {\n        if (this.$currentInput[0].setSelectionRange) {\n            var selectionStart = this.$currentInput[0].selectionStart,\n                selectionEnd = this.$currentInput[0].selectionEnd;\n\n            this.togglePassword();\n            this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n        } else {\n            this.togglePassword();\n        }\n    }\n}, {\n    defaults: {\n        onToggleInput: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend({\n    draftEditor: null,\n\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $spinner: null,\n    $statusIcon: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $previewHeader: null,\n    $targetBtn: null,\n    $targetMenu: null,\n    $deviceTypeContainer: null,\n    $orientationBtn: null,\n    $refreshBtn: null,\n    $deviceMask: null,\n    $devicePreviewContainer: null,\n    $iframe: null,\n    iframeLoaded: false,\n    $tempInput: null,\n    $fieldPlaceholder: null,\n\n    isActive: false,\n    isVisible: false,\n    activeTarget: 0,\n\n    isDeviceUpdating: false,\n    deviceAnimationTimeout: null,\n    currentDeviceType: 'desktop',\n    deviceOrientation: null,\n    deviceWidth: '',\n    deviceHeight: '',\n    deviceMaskDimensions: {\n        phone: {\n            width: 375,\n            height: 753\n        },\n        tablet: {\n            width: 768,\n            height: 1110\n        }\n    },\n\n    draftId: null,\n    url: null,\n    fields: null,\n\n    iframeHeight: null,\n    scrollTop: null,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _updateIframeProxy: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(draftEditor) {\n        this.draftEditor = draftEditor;\n\n        this._updateIframeProxy = this.updateIframe.bind(this);\n\n        this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.Preview.minEditorWidthInPx) {\n            inPx = Craft.Preview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    open: function() {\n        if (this.isActive) {\n            return;\n        }\n\n        this.isActive = true;\n        this.trigger('beforeOpen');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n            this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n            if (Craft.Pro) {\n                this.$previewHeader = $('<header/>', {'class': 'lp-preview-header'}).appendTo(this.$previewContainer);\n\n                // Preview targets\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo(this.$previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    const $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    let $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n\n                    $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                }\n\n                // Device type buttons\n                this.$deviceTypeContainer = $('<div/>', {\n                    class: 'btngroup lp-device-type',\n                    role: 'listbox',\n                    'aria-label': Craft.t('app', 'Device type'),\n                    tabindex: '0',\n                }).appendTo(this.$previewHeader);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--desktop active',\n                    title: Craft.t('app', 'Desktop'),\n                    'aria-label': Craft.t('app', 'Desktop'),\n                    'aria-selected': 'true',\n                    tabindex: '-1',\n                    data: {\n                        width: '',\n                        height: '',\n                        deviceType: 'desktop'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--tablet',\n                    title: Craft.t('app', 'Tablet'),\n                    'aria-label': Craft.t('app', 'Tablet'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 768,\n                        height: 1024,\n                        deviceType: 'tablet'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--phone',\n                    title: Craft.t('app', 'Mobile'),\n                    'aria-label': Craft.t('app', 'Mobile'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 375,\n                        height: 667,\n                        deviceType: 'phone'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n\n                $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                const $buttonContainer = $('<div class=\"buttons\"/>').appendTo(this.$previewHeader);\n\n                // Orientation toggle\n                this.$orientationBtn = $('<button/>', {\n                    type: 'button',\n                    'class': 'btn disabled',\n                    'data-icon': 'rotate',\n                    disabled: '',\n                    'aria-hidden': '',\n                    'text': Craft.t('app', 'Rotate')\n                }).appendTo($buttonContainer);\n                this.addListener(this.$orientationBtn, 'click', 'switchOrientation');\n\n                // Refresh button\n                this.$refreshBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn hidden',\n                    text: Craft.t('app', 'Refresh'),\n                    'data-icon': 'refresh',\n                }).appendTo($buttonContainer);\n                this._updateRefreshBtn();\n                this.addListener(this.$refreshBtn, 'click', () => {\n                    this.updateIframe(false, true);\n                });\n\n                // Get the last stored orientation\n                this.deviceOrientation = Craft.getLocalStorage('LivePreview.orientation');\n\n                // Device type button click handler\n                this.addListener($('.btn', this.$deviceTypeContainer), 'click', 'switchDeviceType');\n\n                // Device mask\n                this.$deviceMask = $('<div/>', {\n                    'class': 'lp-device-mask'\n                });\n            }\n\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n            if (this.$deviceMask) {\n                this.$iframeContainer.append(this.$deviceMask);\n            }\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this),\n            });\n\n            this.addListener($closeBtn, 'click', 'close');\n            this.addListener(this.$statusIcon, 'click', () => {\n                this.draftEditor.showStatusHud(this.$statusIcon);\n            });\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Find the fields, excluding nested fields\n        this.fields = [];\n        var $fields = $('#content .field').not($('#content .field .field'));\n\n        if ($fields.length) {\n            // Insert our temporary input before the first field so we know where to swap in the serialized form values\n            this.$tempInput.insertBefore($fields.get(0));\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            for (let i = 0; i < $fields.length; i++) {\n                let $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n        }\n\n        this.updateIframe();\n\n        this.draftEditor.on('update', this._updateIframeProxy);\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.trigger('open');\n    },\n\n    _activeTarget: function() {\n        return this.draftEditor.settings.previewTargets[this.activeTarget];\n    },\n\n    _updateRefreshBtn: function() {\n        const target = this._activeTarget();\n        if (target.refresh !== 'undefined' && !target.refresh) {\n            this.$refreshBtn.removeClass('hidden');\n        } else {\n            this.$refreshBtn.addClass('hidden');\n        }\n    },\n\n    switchTarget: function(i) {\n        this.activeTarget = i;\n        this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n        this.$targetMenu.find('a.sel').removeClass('sel');\n        this.$targetMenu.find('a').eq(i).addClass('sel');\n        this.updateIframe(true);\n        this._updateRefreshBtn();\n        this.trigger('switchTarget', {\n            previewTarget: this.draftEditor.settings.previewTargets[i],\n        });\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        if (!this.isActive || this.isVisible) {\n            return;\n        }\n\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.close();\n                }\n            });\n        });\n\n        this.isVisible = true;\n    },\n\n    close: function() {\n        if (!this.isActive || !this.isVisible) {\n            return;\n        }\n\n        this.trigger('beforeClose');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        // Remove our temporary input and move the preview fields back into place\n        this.$tempInput.detach();\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n            this.resetDevicePreview();\n        });\n\n        this.draftEditor.off('update', this._updateIframeProxy);\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.isActive = false;\n        this.isVisible = false;\n        this.trigger('close');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n        Garnish.$doc.trigger('scroll');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n        if (this._devicePreviewIsActive()) {\n            this.updateDevicePreview();\n        }\n    },\n\n    _useIframeResizer: function() {\n        return Craft.previewIframeResizerOptions !== false;\n    },\n\n    updateIframe: function(resetScroll, forceRefresh) {\n        if (!this.isActive) {\n            return false;\n        }\n\n        // Ignore non-boolean resetScroll values\n        resetScroll = resetScroll === true;\n\n        const target = this._activeTarget();\n        const refresh = !!(\n            forceRefresh ||\n            this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n            !this.$iframe ||\n            resetScroll ||\n            typeof target.refresh === 'undefined' ||\n            target.refresh\n        );\n\n        this.trigger('beforeUpdateIframe', {\n            previewTarget: target,\n            resetScroll: resetScroll,\n            refresh: refresh,\n        });\n\n        // If this is an existing preview target, make sure it wants to be refreshed automatically\n        if (!refresh) {\n            this.slideIn();\n            return;\n        }\n\n        this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n            // Maintain the current scroll position?\n            let sameHost;\n            if (resetScroll) {\n                this.scrollTop = null;\n            } else if (this.iframeLoaded && this.$iframe) {\n                if (this._useIframeResizer()) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                } else {\n                    sameHost = Craft.isSameHost(url);\n                    if (sameHost && this.$iframe[0].contentWindow) {\n                        this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                    }\n                }\n            }\n\n            this.iframeLoaded = false;\n\n            var $iframe = $('<iframe/>', {\n                'class': 'lp-preview',\n                frameborder: 0,\n                src: url,\n            });\n\n            if (this.$iframe) {\n                this.$iframe.replaceWith($iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            // If we’re on tablet/phone then wrap the iframe in our own container\n            // so we can keep all the iFrameResizer() stuff working\n            if (this._devicePreviewIsActive()) {\n                if (!this.$devicePreviewContainer) {\n                    this.$devicePreviewContainer = $('<div/>', {\n                        'class': 'lp-device-preview-container'\n                    });\n                    $iframe.wrap('<div class=\"lp-device-preview-container\"></div>');\n                    this.$devicePreviewContainer = this.$iframeContainer.find('.lp-device-preview-container');\n                }\n            }\n\n            // Keep the iframe height consistent with its content\n            if (this._useIframeResizer()) {\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                iFrameResize($.extend({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n            } else {\n                $iframe.on('load', () => {\n                    this.iframeLoaded = true;\n                    if (!resetScroll && sameHost && this.scrollTop !== null) {\n                        $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                    }\n                });\n            }\n\n            this.url = url;\n            this.$iframe = $iframe;\n\n            if (this._devicePreviewIsActive()) {\n                this.updateDevicePreview();\n            }\n\n            this.trigger('afterUpdateIframe', {\n                previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            this.slideIn();\n        });\n    },\n\n    _devicePreviewIsActive: function() {\n        return this.currentDeviceType !== 'desktop';\n    },\n\n    switchDeviceType: function(ev) {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n\n        const $btn = $(ev.target);\n        const newDeviceType = $btn.data('deviceType');\n\n        // Bail if we’re just smashing the same button\n        if (newDeviceType === this.currentDeviceType) {\n            return false;\n        }\n\n        // Store new device type data\n        this.currentDeviceType = newDeviceType;\n        this.deviceWidth = $btn.data('width');\n        this.deviceHeight = $btn.data('height');\n\n        // Set the active state on the button\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n\n        $btn\n            .addClass('active')\n            .attr('aria-selected', 'true');\n\n        // Update or reset\n        if (this.currentDeviceType === 'desktop') {\n            this.resetDevicePreview();\n        } else {\n            this.$iframeContainer.addClass('lp-iframe-container--updating');\n            this.updateIframe(true, true);\n            this.updateDevicePreview();\n        }\n    },\n\n    switchOrientation: function()\n    {\n        if (this.isDeviceUpdating || !this._devicePreviewIsActive()) {\n            return false;\n        }\n\n        // Switch to whichever orientation is currently not stored\n        if (!this.deviceOrientation || this.deviceOrientation === 'portrait') {\n            this.deviceOrientation = 'landscape';\n        } else {\n            this.deviceOrientation = 'portrait';\n        }\n\n        // Store the new one\n        Craft.setLocalStorage('LivePreview.orientation', this.deviceOrientation);\n\n        // Allow the animation to take place\n        this.$iframeContainer.addClass('lp-iframe-container--animating');\n\n        // Update the device preview\n        this.updateDevicePreview();\n    },\n\n    updateDevicePreview: function()\n    {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.isDeviceUpdating = true;\n\n        // Enable the orientation button\n        this.$orientationBtn\n            .removeClass('disabled')\n            .removeAttr('disabled')\n            .removeAttr('aria-hidden');\n\n        // Trigger the resized css mods\n        this.$iframeContainer.addClass('lp-iframe-container--has-device-preview');\n\n        // Add the tablet class if needed\n        if (this.currentDeviceType === 'tablet') {\n            this.$iframeContainer.addClass('lp-iframe-container--tablet');\n        } else {\n            this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n        }\n\n        // Figure out the best zoom\n        let hZoom = 1;\n        let wZoom = 1;\n        let zoom = 1;\n        let previewHeight = (this.$previewContainer.height() - 50) - 48; // 50px for the header bar and 24px clearance\n        let previewWidth = this.$previewContainer.width() - 48;\n        let maskHeight = this.deviceMaskDimensions[this.currentDeviceType].height;\n        let maskWidth = this.deviceMaskDimensions[this.currentDeviceType].width;\n\n        if (this.deviceOrientation === 'landscape') {\n            if (previewWidth < maskHeight) {\n                hZoom = previewWidth / maskHeight;\n            }\n            if (previewHeight < maskWidth) {\n                wZoom = previewHeight / maskWidth;\n            }\n        } else {\n            if (previewHeight < maskHeight) {\n                hZoom = previewHeight / maskHeight;\n            }\n            if (previewWidth < maskWidth) {\n                wZoom = previewWidth / maskWidth;\n            }\n        }\n\n        zoom = hZoom;\n        if (wZoom < hZoom) {\n            zoom = wZoom;\n        }\n\n        // Figure out the css values\n        const translate = -((100/zoom)/2);\n        const rotationDeg = this.deviceOrientation === 'landscape' ? '-90deg' : '0deg';\n\n        // Apply first to the device mask\n        this.$deviceMask.css({\n            width: this.deviceMaskDimensions[this.currentDeviceType].width + 'px',\n            height: this.deviceMaskDimensions[this.currentDeviceType].height + 'px',\n            transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%) rotate('+rotationDeg+')'\n        });\n\n        // After the animation duration we can update the iframe sizes and show it\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.deviceAnimationTimeout = setTimeout(() => {\n            // Then make the size change to the preview container\n            if (this.deviceOrientation === 'landscape') {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceHeight + 'px',\n                    height: this.deviceWidth + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: 0,\n                    marginLeft: '-' + (12*zoom) + 'px'\n                });\n            } else {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceWidth + 'px',\n                    height: this.deviceHeight + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: '-' + (12*zoom) + 'px',\n                    marginLeft: 0\n                });\n            }\n\n            // Remove the animating class and show the iframe\n            this.$iframeContainer.removeClass('lp-iframe-container--animating');\n            this.$iframeContainer.removeClass('lp-iframe-container--updating');\n            this.isDeviceUpdating = false;\n\n        }, 300);\n    },\n\n    resetDevicePreview: function()\n    {\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.currentDeviceType = 'desktop';\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n        this.$deviceTypeContainer.find('.lp-device-type-btn--desktop')\n            .addClass('active')\n            .attr('aria-selected', 'true');\n        this.$orientationBtn\n            .addClass('disabled')\n            .attr('disabled', '')\n            .attr('aria-hidden', '');\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n        this.$iframeContainer.removeClass('lp-iframe-container--has-device-preview');\n        this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n\n        // Flat out remove the iframe and let it get regenerated\n        if (this.$devicePreviewContainer) {\n            // If using iFrameResizer then remove the listeners first so we don’t get zombie instances\n            if (this._useIframeResizer()) {\n                this.$iframe[0].iFrameResizer.removeListeners();\n            }\n            this.$devicePreviewContainer.detach();\n            this.$devicePreviewContainer = null;\n            this.$iframe = null;\n            this.updateIframe(true, true);\n        }\n\n        this.isDeviceUpdating = false;\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        // Disable anything with a name attribute\n        $clone.find('[name]').prop('disabled', true);\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend({\n    assetId: null,\n    $spinner: null,\n    elementSelect: null,\n    type: null,\n    loaded: null,\n    requestId: 0,\n\n    /**\n     * Initialize the preview file modal.\n     * @returns {*|void}\n     */\n    init: function(assetId, elementSelect, settings) {\n        settings = $.extend(this.defaultSettings, settings);\n\n        settings.onHide = this._onHide.bind(this);\n\n        if (Craft.PreviewFileModal.openInstance) {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            if (instance.assetId !== assetId) {\n                instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                instance.elementSelect = elementSelect;\n            }\n\n            return this.destroy();\n        }\n\n        Craft.PreviewFileModal.openInstance = this;\n        this.elementSelect = elementSelect;\n\n        this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n        this.base(this.$container, $.extend({\n            resizable: true\n        }, settings));\n\n        // Cut the flicker, just show the nice person the preview.\n        if (this.$container) {\n            this.$container.velocity('stop');\n            this.$container.show().css('opacity', 1);\n\n            this.$shade.velocity('stop');\n            this.$shade.show().css('opacity', 1);\n        }\n\n        this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n    },\n\n    /**\n     * When hiding, remove all traces and focus last focused element.\n     * @private\n     */\n    _onHide: function() {\n        Craft.PreviewFileModal.openInstance = null;\n        if (this.elementSelect) {\n            this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n        }\n\n        this.$shade.remove();\n\n        return this.destroy();\n    },\n\n    /**\n     * Disappear immediately forever.\n     * @returns {boolean}\n     */\n    selfDestruct: function() {\n        var instance = Craft.PreviewFileModal.openInstance;\n\n        instance.hide();\n        instance.$shade.remove();\n        instance.destroy();\n\n        Craft.PreviewFileModal.openInstance = null;\n        Craft.focalPoint.destruct();\n        Craft.focalPoint = null;\n\n        return true;\n    },\n\n    /**\n     * Load an asset, using starting width and height, if applicable\n     * @param assetId\n     * @param startingWidth\n     * @param startingHeight\n     */\n    loadAsset: function(assetId, startingWidth, startingHeight) {\n        this.assetId = assetId;\n\n        this.$container.empty();\n        this.loaded = false;\n\n        this.desiredHeight = null;\n        this.desiredWidth = null;\n\n        var containerHeight = Garnish.$win.height() * 0.66;\n        var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n        containerHeight = containerWidth / 4 * 3;\n\n        if (startingWidth && startingHeight) {\n            var ratio = startingWidth / startingHeight;\n            containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n            containerWidth = containerHeight * ratio;\n\n            // This might actually have put width over the viewport limits, so doublecheck\n            if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = containerWidth / ratio;\n            }\n        }\n\n        this._resizeContainer(containerWidth, containerHeight);\n\n        this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n        var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n            left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n        this.$spinner.css({left: left, top: top, position: 'absolute'});\n        this.requestId++;\n\n        Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, (response, textStatus) => {\n            this.$container.removeClass('loading');\n            this.$spinner.remove();\n            this.loaded = true;\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (response.requestId != this.requestId) {\n                        return;\n                    }\n\n                    if (!response.previewHtml) {\n                        this.$container.addClass('zilch');\n                        this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                        return;\n                    }\n\n                    this.$container.removeClass('zilch');\n                    this.$container.append(response.previewHtml);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n                } else {\n                    alert(response.error);\n\n                    this.hide();\n                }\n            }\n        });\n    },\n\n    /**\n     * Resize the container to specified dimensions\n     * @param containerWidth\n     * @param containerHeight\n     * @private\n     */\n    _resizeContainer: function(containerWidth, containerHeight) {\n        this.$container.css({\n            'width': containerWidth,\n            'min-width': containerWidth,\n            'max-width': containerWidth,\n            'height': containerHeight,\n            'min-height': containerHeight,\n            'max-height': containerHeight,\n            'top': (Garnish.$win.height() - containerHeight) / 2,\n            'left': (Garnish.$win.width() - containerWidth) / 2\n        });\n    }\n}, {\n    defaultSettings: {\n        startingWidth: null,\n        startingHeight: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend({\n    $progressBar: null,\n    $innerProgressBar: null,\n    $progressBarStatus: null,\n\n    _itemCount: 0,\n    _processedItemCount: 0,\n    _displaySteps: false,\n\n    init: function($element, displaySteps) {\n        if (displaySteps) {\n            this._displaySteps = true;\n        }\n\n        this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n        this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n        this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n        this.resetProgressBar();\n    },\n\n    /**\n     * Reset the progress bar\n     */\n    resetProgressBar: function() {\n        // Since setting the progress percentage implies that there is progress to be shown\n        // It removes the pending class - we must add it back.\n        this.setProgressPercentage(100);\n        this.$progressBar.addClass('pending');\n\n        // Reset all the counters\n        this.setItemCount(1);\n        this.setProcessedItemCount(0);\n        this.$progressBarStatus.html('');\n\n        if (this._displaySteps) {\n            this.$progressBar.addClass('has-status');\n        }\n    },\n\n    /**\n     * Fade to invisible, hide it using a class and reset opacity to visible\n     */\n    hideProgressBar: function() {\n        this.$progressBar.fadeTo('fast', 0.01, () => {\n            this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n        this.$progressBarStatus.fadeTo('fast', 0.01, () => {\n            this.$progressBarStatus.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n    },\n\n    showProgressBar: function() {\n        this.$progressBar.removeClass('hidden');\n        this.$progressBarStatus.removeClass('hidden');\n    },\n\n    setItemCount: function(count) {\n        this._itemCount = count;\n    },\n\n    incrementItemCount: function(count) {\n        this._itemCount += count;\n    },\n\n    setProcessedItemCount: function(count) {\n        this._processedItemCount = count;\n    },\n\n    incrementProcessedItemCount: function(count) {\n        this._processedItemCount += count;\n    },\n\n    updateProgressBar: function() {\n        // Only fools would allow accidental division by zero.\n        this._itemCount = Math.max(this._itemCount, 1);\n\n        var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n        this.setProgressPercentage(width);\n\n        if (this._displaySteps) {\n            this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n        }\n    },\n\n    setProgressPercentage: function(percentage, animate) {\n        if (percentage === 0) {\n            this.$progressBar.addClass('pending');\n        } else {\n            this.$progressBar.removeClass('pending');\n\n            if (animate) {\n                this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n            } else {\n                this.$innerProgressBar.velocity('stop').width(percentage + '%');\n            }\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, this._handleBatchPromptSelection.bind(this), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            } else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        } else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', () => {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        });\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n","/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', this._handleResize.bind(this));\n        this.addListener(this.$container, 'tapstart', this._handleTapStart.bind(this));\n        this.addListener(Garnish.$bod, 'tapmove', this._handleTapMove.bind(this));\n        this.addListener(Garnish.$bod, 'tapend', this._handleTapEnd.bind(this));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout(() => {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        } else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (((this.$graduations.width() / 2) + (position * -1)) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.Slideout = Garnish.Base.extend({\n        $outerContainer: null,\n        $container: null,\n        $shade: null,\n        isOpen: false,\n\n        init: function(contents, settings) {\n            this.setSettings(settings, Craft.Slideout.defaults);\n\n            if (!Garnish.isMobileBrowser()) {\n                this.$shade = $('<div class=\"slideout-shade\"/>')\n                    .appendTo(Garnish.$bod);\n\n                if (this.settings.closeOnShadeClick) {\n                    this.addListener(this.$shade, 'click', ev => {\n                        ev.stopPropagation();\n                        this.close();\n                    });\n                }\n            }\n\n            this.$outerContainer = $('<div/>', {class: 'slideout-container hidden'});\n            this.$container = $(`<${this.settings.containerElement}/>`, this.settings.containerAttributes)\n                .addClass('slideout')\n                .append(contents)\n                .data('slideout', this)\n                .appendTo(this.$outerContainer);\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.addClass('so-mobile');\n            }\n\n            Craft.trapFocusWithin(this.$container);\n\n            if (this.settings.autoOpen) {\n                this.open();\n            }\n        },\n\n        open: function() {\n            if (this.isOpen) {\n                return;\n            }\n\n            this._cancelTransitionListeners();\n\n            // Move the shade + container to the end of <body> so they get the highest sub-z-indexes\n            if (this.$shade) {\n                this.$shade\n                    .appendTo(Garnish.$bod)\n                    .show();\n            }\n\n            this.$outerContainer\n                .appendTo(Garnish.$bod)\n                .removeClass('hidden');\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.css('top', '100vh');\n            } else {\n                this.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n            }\n\n            this.$container.one('transitionend.slideout', () => {\n                Craft.setFocusWithin(this.$container);\n            });\n\n            if (this.$shade) {\n                this.$shade[0].offsetWidth;\n                this.$shade.addClass('so-visible');\n            }\n\n            this.$container[0].offsetWidth;\n            Craft.Slideout.addPanel(this);\n\n            this.enable();\n            Garnish.shortcutManager.addLayer();\n\n            if (this.settings.closeOnEsc) {\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n                    this.close();\n                });\n            }\n\n            this.isOpen = true;\n            this.trigger('open');\n        },\n\n        close: function() {\n            if (!this.isOpen) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n            this.disable();\n            this.isOpen = false;\n\n            this._cancelTransitionListeners();\n\n            if (this.$shade) {\n                this.removeListener(this.$shade, 'click');\n                this.$shade\n                    .removeClass('so-visible')\n                    .one('transitionend.slideout', () => {\n                        this.$shade.hide();\n                    });\n            }\n\n            Craft.Slideout.removePanel(this);\n            Garnish.shortcutManager.removeLayer();\n            this.$container.one('transitionend.slideout', () => {\n                this.$outerContainer.addClass('hidden');\n                this.trigger('close');\n            });\n        },\n\n        _cancelTransitionListeners: function() {\n            if (this.$shade) {\n                this.$shade.off('transitionend.slideout');\n            }\n\n            this.$container.off('transitionend.slideout');\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$shade) {\n                this.$shade.remove();\n                this.$shade = null;\n            }\n\n            this.$outerContainer.remove();\n            this.$outerContainer = null;\n            this.$container = null;\n\n            this.base();\n        },\n    }, {\n        defaults: {\n            containerElement: 'div',\n            containerAttributes: {},\n            autoOpen: true,\n            closeOnEsc: true,\n            closeOnShadeClick: true,\n        },\n        openPanels: [],\n        addPanel: function(panel) {\n            Craft.Slideout.openPanels.unshift(panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', 0);\n            } else {\n                Craft.Slideout.updateStyles();\n            }\n        },\n        removePanel: function(panel) {\n            Craft.Slideout.openPanels = Craft.Slideout.openPanels.filter(m => m !== panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', '100vh');\n            } else {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n                Craft.Slideout.updateStyles();\n            }\n        },\n        updateStyles: function() {\n            const totalPanels = Craft.Slideout.openPanels.length;\n            Craft.Slideout.openPanels.forEach((panel, i) => {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', `${50 * ((totalPanels - i) / totalPanels)}vw`);\n            });\n\n            if (totalPanels !== 0) {\n                Garnish.$bod.addClass('no-scroll');\n            } else {\n                Garnish.$bod.removeClass('no-scroll');\n            }\n        },\n    });\n})(jQuery);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n        // Remove inner-word punctuation\n        sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        if (!Craft.allowUppercaseInSlug) {\n            sourceVal = sourceVal.toLowerCase();\n        }\n\n        if (Craft.limitAutoSlugsToAscii) {\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n        }\n\n        // Get the \"words\". Split on anything that is not alphanumeric.\n        // Reference: http://www.regular-expressions.info/unicode.html\n        var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n        if (words.length) {\n            return words.join(Craft.slugWordSeparator);\n        } else {\n            return '';\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend({\n    id: null,\n\n    $container: null,\n    state: null,\n    structureDrag: null,\n\n    /**\n     * Init\n     */\n    init: function(id, container, settings) {\n        this.id = id;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Structure.defaults);\n\n        // Is this already a structure?\n        if (this.$container.data('structure')) {\n            Garnish.log('Double-instantiating a structure on an element');\n            this.$container.data('structure').destroy();\n        }\n\n        this.$container.data('structure', this);\n\n        this.state = {};\n\n        if (this.settings.storageKey) {\n            $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n        }\n\n        if (typeof this.state.collapsedElementIds === 'undefined') {\n            this.state.collapsedElementIds = [];\n        }\n\n        var $parents = this.$container.find('ul').prev('.row');\n\n        for (var i = 0; i < $parents.length; i++) {\n            var $row = $($parents[i]),\n                $li = $row.parent(),\n                $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n            if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                $li.addClass('collapsed');\n            }\n\n            this.initToggle($toggle);\n        }\n\n        if (this.settings.sortable) {\n            this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n        }\n\n        if (this.settings.newChildUrl) {\n            this.initNewChildMenus(this.$container.find('.add'));\n        }\n    },\n\n    initToggle: function($toggle) {\n        $toggle.on('click', ev => {\n            var $li = $(ev.currentTarget).closest('li'),\n                elementId = $li.children('.row').find('.element:first').data('id'),\n                viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n            if ($li.hasClass('collapsed')) {\n                $li.removeClass('collapsed');\n\n                if (viewStateKey !== -1) {\n                    this.state.collapsedElementIds.splice(viewStateKey, 1);\n                }\n            } else {\n                $li.addClass('collapsed');\n\n                if (viewStateKey === -1) {\n                    this.state.collapsedElementIds.push(elementId);\n                }\n            }\n\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.state);\n            }\n        });\n    },\n\n    initNewChildMenus: function($addBtns) {\n        this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n    },\n\n    onNewChildMenuClick: function(ev) {\n        var $btn = $(ev.currentTarget);\n\n        if (!$btn.data('menubtn')) {\n            var elementId = $btn.parent().children('.element').data('id'),\n                newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n            $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n            var menuBtn = new Garnish.MenuBtn($btn);\n            menuBtn.showMenu();\n        }\n    },\n\n    getIndent: function(level) {\n        return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n    },\n\n    addElement: function($element) {\n        var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n            $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n        $row.append($element);\n\n        if (this.settings.sortable) {\n            $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n            this.structureDrag.addItems($li);\n        }\n\n        if (this.settings.newChildUrl) {\n            var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n            this.initNewChildMenus($addBtn);\n        }\n\n        $row.css('margin-bottom', -30);\n        $row.velocity({'margin-bottom': 0}, 'fast');\n    },\n\n    removeElement: function($element) {\n        var $li = $element.parent().parent();\n\n        if (this.settings.sortable) {\n            this.structureDrag.removeItems($li);\n        }\n\n        var $parentUl;\n\n        if (!$li.siblings().length) {\n            $parentUl = $li.parent();\n        }\n\n        $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', () => {\n            $li.remove();\n\n            if (typeof $parentUl !== 'undefined') {\n                this._removeUl($parentUl);\n            }\n        });\n    },\n\n    _removeUl: function($ul) {\n        $ul.siblings('.row').children('.toggle').remove();\n        $ul.remove();\n    }\n}, {\n    baseIndent: 8,\n    nestedIndent: 35,\n\n    defaults: {\n        storageKey: null,\n        sortable: false,\n        newChildUrl: null,\n        maxLevels: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend({\n    structure: null,\n    maxLevels: null,\n    draggeeLevel: null,\n\n    $helperLi: null,\n    $targets: null,\n    draggeeHeight: null,\n\n    init: function(structure, maxLevels) {\n        this.structure = structure;\n        this.maxLevels = maxLevels;\n\n        this.$insertion = $('<li class=\"draginsertion\"/>');\n\n        var $items = this.structure.$container.find('li');\n\n        this.base($items, {\n            handle: '.element:first, .move:first',\n            helper: this.getHelper.bind(this)\n        });\n    },\n\n    getHelper: function($helper) {\n        this.$helperLi = $helper;\n        var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n        $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n        $helper.find('.move').removeAttr('title');\n        return $ul;\n    },\n\n    onDragStart: function() {\n        this.$targets = $();\n\n        // Recursively find each of the targets, in the order they appear to be in\n        this.findTargets(this.structure.$container);\n\n        // How deep does the rabbit hole go?\n        this.draggeeLevel = 0;\n        var $level = this.$draggee;\n        do {\n            this.draggeeLevel++;\n            $level = $level.find('> ul > li');\n        } while ($level.length);\n\n        // Collapse the draggee\n        this.draggeeHeight = this.$draggee.height();\n        this.$draggee.velocity({\n            height: 0\n        }, 'fast', () => {\n            this.$draggee.addClass('hidden');\n        });\n        this.base();\n\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.cancelDrag();\n            }\n        });\n    },\n\n    findTargets: function($ul) {\n        var $lis = $ul.children().not(this.$draggee);\n\n        for (var i = 0; i < $lis.length; i++) {\n            var $li = $($lis[i]);\n            this.$targets = this.$targets.add($li.children('.row'));\n\n            if (!$li.hasClass('collapsed')) {\n                this.findTargets($li.children('ul'));\n            }\n        }\n    },\n\n    onDrag: function() {\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n            this.$insertion.remove();\n        }\n\n        // First let's find the closest target\n        this._.$closestTarget = null;\n        this._.closestTargetPos = null;\n        this._.closestTargetYDiff = null;\n        this._.closestTargetOffset = null;\n        this._.closestTargetHeight = null;\n\n        for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n            this._.$target = $(this.$targets[this._.i]);\n            this._.targetOffset = this._.$target.offset();\n            this._.targetHeight = this._.$target.outerHeight();\n            this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n            this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n            if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                this._.$closestTarget = this._.$target;\n                this._.closestTargetPos = this._.i;\n                this._.closestTargetYDiff = this._.targetYDiff;\n                this._.closestTargetOffset = this._.targetOffset;\n                this._.closestTargetHeight = this._.targetHeight;\n            } else {\n                // Getting colder\n                break;\n            }\n        }\n\n        if (!this._.$closestTarget) {\n            return;\n        }\n\n        // Are we hovering above the first row?\n        if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n            this.$insertion.prependTo(this.structure.$container);\n        } else {\n            this._.$closestTargetLi = this._.$closestTarget.parent();\n            this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n            // Is there a next row?\n            if (this._.closestTargetPos < this.$targets.length - 1) {\n                this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n            } else {\n                this._.$nextTargetLi = null;\n                this._.nextTargetLevel = null;\n            }\n\n            // Are we hovering between this row and the next one?\n            this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n            /**\n             * Scenario 1: Both rows have the same level.\n             *\n             *     * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                if (this._.hoveringBetweenRows) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                        // Position the insertion after the closest target\n                        this.$insertion.insertAfter(this._.$closestTargetLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n\n            /**\n             * Scenario 2: Next row is a child of this one.\n             *\n             *     * Row 1\n             *     ----------------------\n             *         * Row 2\n             */\n\n            else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                    if (this._.hoveringBetweenRows) {\n                        // Position the insertion as the first child of the closest target\n                        this.$insertion.insertBefore(this._.$nextTargetLi);\n                    } else {\n                        this._.$closestTarget.addClass('draghover');\n                        this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                    }\n                }\n            }\n\n            /**\n             * Scenario 3: Next row is a child of a parent node, or there is no next row.\n             *\n             *         * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            else {\n                if (this._.hoveringBetweenRows) {\n                    // Determine which <li> to position the insertion after\n                    this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                    if (Craft.orientation === 'rtl') {\n                        this._.draggeeX += this.$helperLi.width();\n                    }\n\n                    this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                    this._.$closestParentLi = null;\n                    this._.closestParentLiXDiff = null;\n                    this._.closestParentLevel = null;\n\n                    for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                        this._.$parentLi = $(this._.$parentLis[this._.i]);\n                        this._.parentLiX = this._.$parentLi.offset().left;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.parentLiX += this._.$parentLi.width();\n                        }\n\n                        this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                        this._.parentLevel = this._.$parentLi.data('level');\n\n                        if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                            !this._.$closestParentLi || (\n                                this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                            )\n                        )) {\n                            this._.$closestParentLi = this._.$parentLi;\n                            this._.closestParentLiXDiff = this._.parentLiXDiff;\n                            this._.closestParentLevel = this._.parentLevel;\n                        }\n                    }\n\n                    if (this._.$closestParentLi) {\n                        this.$insertion.insertAfter(this._.$closestParentLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n        }\n    },\n\n    cancelDrag: function() {\n        this.$insertion.remove();\n\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n        }\n\n        this.onMouseUp();\n    },\n\n    onDragStop: function() {\n        // Are we repositioning the draggee?\n        if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n            var $draggeeParent,\n                moved;\n\n            // Are we about to leave the draggee's original parent childless?\n            if (!this.$draggee.siblings().length) {\n                $draggeeParent = this.$draggee.parent();\n            }\n\n            if (this.$insertion.parent().length) {\n                // Make sure the insertion isn't right next to the draggee\n                var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                    this.$insertion.replaceWith(this.$draggee);\n                    moved = true;\n                } else {\n                    this.$insertion.remove();\n                    moved = false;\n                }\n            } else {\n                var $ul = this._.$closestTargetLi.children('ul');\n\n                // Make sure this is a different parent than the draggee's\n                if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                    if (!$ul.length) {\n                        var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                        this.structure.initToggle($toggle);\n\n                        $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                    } else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                        this._.$closestTarget.children('.toggle').trigger('click');\n                    }\n\n                    this.$draggee.appendTo($ul);\n                    moved = true;\n                } else {\n                    moved = false;\n                }\n            }\n\n            // Remove the class either way\n            this._.$closestTarget.removeClass('draghover');\n\n            if (moved) {\n                // Now deal with the now-childless parent\n                if ($draggeeParent) {\n                    this.structure._removeUl($draggeeParent);\n                }\n\n                // Has the level changed?\n                var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                var animateCss;\n\n                if (newLevel != this.$draggee.data('level')) {\n                    // Correct the helper's padding if moving to/from level 1\n                    if (this.$draggee.data('level') == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = 38;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    } else if (newLevel == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    }\n\n                    this.setLevel(this.$draggee, newLevel);\n                }\n\n                // Make it real\n                var $element = this.$draggee.children('.row').children('.element');\n\n                var data = {\n                    structureId: this.structure.id,\n                    elementId: $element.data('id'),\n                    siteId: $element.data('site-id'),\n                    prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                    parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                };\n\n                Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                    }\n                });\n            }\n        }\n\n        // Animate things back into place\n        this.$draggee.velocity('stop').removeClass('hidden').velocity({\n            height: this.draggeeHeight\n        }, 'fast', () => {\n            this.$draggee.css('height', 'auto');\n        });\n\n        this.returnHelpersToDraggees();\n\n        this.base();\n    },\n\n    setLevel: function($li, level) {\n        $li.data('level', level);\n\n        var indent = this.structure.getIndent(level);\n\n        var css = {};\n        css['margin-' + Craft.left] = '-' + indent + 'px';\n        css['padding-' + Craft.left] = indent + 'px';\n        this.$draggee.children('.row').css(css);\n\n        var $childLis = $li.children('ul').children();\n\n        for (var i = 0; i < $childLis.length; i++) {\n            this.setLevel($($childLis[i]), level + 1);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n    tableView: null,\n    structureId: null,\n    maxLevels: null,\n\n    _basePadding: null,\n    _helperMargin: null,\n\n    _$firstRowCells: null,\n    _$titleHelperCell: null,\n\n    _titleHelperCellOuterWidth: null,\n\n    _ancestors: null,\n    _updateAncestorsFrame: null,\n\n    _draggeeLevel: null,\n    _draggeeLevelDelta: null,\n    draggingLastElements: null,\n    _loadingDraggeeLevelDelta: false,\n\n    _targetLevel: null,\n    _targetLevelBounds: null,\n\n    _positionChanged: null,\n\n    /**\n     * Constructor\n     */\n    init: function(tableView, $elements, settings) {\n        this.tableView = tableView;\n        this.structureId = this.tableView.$table.data('structure-id');\n        this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n        this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n        this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n        settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n            handle: '.move',\n            collapseDraggees: true,\n            singleHelper: true,\n            helperSpacingY: 2,\n            magnetStrength: 4,\n            helper: this.getHelper.bind(this),\n            helperLagBase: 1.5,\n            axis: Garnish.Y_AXIS\n        });\n\n        this.base($elements, settings);\n    },\n\n    /**\n     * Returns the draggee rows (including any descendent rows).\n     */\n    findDraggee: function() {\n        this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n        this._draggeeLevelDelta = 0;\n\n        var $draggee = $(this.$targetItem),\n            $nextRow = this.$targetItem.next();\n\n        while ($nextRow.length) {\n            // See if this row is a descendant of the draggee\n            var nextRowLevel = $nextRow.data('level');\n\n            if (nextRowLevel <= this._draggeeLevel) {\n                break;\n            }\n\n            // Is this the deepest descendant we've seen so far?\n            var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n            if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                this._draggeeLevelDelta = nextRowLevelDelta;\n            }\n\n            // Add it and prep the next row\n            $draggee = $draggee.add($nextRow);\n            $nextRow = $nextRow.next();\n        }\n\n        // Are we dragging the last elements on the page?\n        this.draggingLastElements = !$nextRow.length;\n\n        // Do we have a maxLevels to enforce,\n        // and does it look like this draggee has descendants we don't know about yet?\n        if (\n            this.maxLevels &&\n            this.draggingLastElements &&\n            this.tableView.getMorePending()\n        ) {\n            // Only way to know the true descendant level delta is to ask PHP\n            this._loadingDraggeeLevelDelta = true;\n\n            var data = this._getAjaxBaseData(this.$targetItem);\n\n            Craft.postActionRequest('structures/get-element-level-delta', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this._loadingDraggeeLevelDelta = false;\n\n                    if (this.dragging) {\n                        this._draggeeLevelDelta = response.delta;\n                        this.drag(false);\n                    }\n                }\n            });\n        }\n\n        return $draggee;\n    },\n\n    /**\n     * Returns the drag helper.\n     */\n    getHelper: function($helperRow) {\n        var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n            $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n            $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the column widths\n        this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n        var $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            var $helperCell = $($helperCells[i]);\n\n            // Skip the checkbox cell\n            if ($helperCell.hasClass('checkbox-cell')) {\n                $helperCell.remove();\n                continue;\n            }\n\n            // Hard-set the cell widths\n            var $firstRowCell = $(this._$firstRowCells[i]);\n            var width = $firstRowCell[0].getBoundingClientRect().width;\n\n            $firstRowCell.css('width', width + 'px');\n            $helperCell.css('width', width + 'px');\n\n            // Is this the title cell?\n            if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                this._$titleHelperCell = $helperCell;\n\n                var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                this._titleHelperCellOuterWidth = width;\n\n                $helperCell.css('padding-' + Craft.left, this._basePadding);\n            }\n        }\n\n        return $outerContainer;\n    },\n\n    /**\n     * Returns whether the draggee can be inserted before a given item.\n     */\n    canInsertBefore: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item.prev(), $item) !== false);\n    },\n\n    /**\n     * Returns whether the draggee can be inserted after a given item.\n     */\n    canInsertAfter: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item, $item.next()) !== false);\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        // Get the initial set of ancestors, before the item gets moved\n        this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n        // Set the initial target level bounds\n        this._setTargetLevelBounds();\n\n        // Check to see if we should load more elements now\n        this.tableView.maybeLoadMore();\n\n        this.base();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.base();\n        this._updateIndent();\n    },\n\n    /**\n     * On Insertion Point Change\n     */\n    onInsertionPointChange: function() {\n        this._setTargetLevelBounds();\n        this._updateAncestorsBeforeRepaint();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this._positionChanged = false;\n        this.base();\n\n        // Update the draggee's padding if the position just changed\n        // ---------------------------------------------------------------------\n\n        if (this._targetLevel != this._draggeeLevel) {\n            var levelDiff = this._targetLevel - this._draggeeLevel;\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                var $draggee = $(this.$draggee[i]),\n                    oldLevel = $draggee.data('level'),\n                    newLevel = oldLevel + levelDiff,\n                    padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                $draggee.data('level', newLevel);\n                $draggee.find('.element').data('level', newLevel);\n                $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n            }\n\n            this._positionChanged = true;\n        }\n\n        // Keep in mind this could have also been set by onSortChange()\n        if (this._positionChanged) {\n            // Tell the server about the new position\n            // -----------------------------------------------------------------\n\n            var data = this._getAjaxBaseData(this.$draggee);\n\n            // Find the previous sibling/parent, if there is one\n            var $prevRow = this.$draggee.first().prev();\n\n            while ($prevRow.length) {\n                var prevRowLevel = $prevRow.data('level');\n\n                if (prevRowLevel == this._targetLevel) {\n                    data.prevId = $prevRow.data('id');\n                    break;\n                }\n\n                if (prevRowLevel < this._targetLevel) {\n                    data.parentId = $prevRow.data('id');\n\n                    // Is this row collapsed?\n                    var $toggle = $prevRow.find('> th > .toggle');\n\n                    if (!$toggle.hasClass('expanded')) {\n                        // Make it look expanded\n                        $toggle.addClass('expanded');\n\n                        // Add a temporary row\n                        var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                        // Remove the target item\n                        if (this.tableView.elementSelect) {\n                            this.tableView.elementSelect.removeItems(this.$targetItem);\n                        }\n\n                        this.removeItems(this.$targetItem);\n                        this.$targetItem.remove();\n                        this.tableView._totalVisible--;\n                    }\n\n                    break;\n                }\n\n                $prevRow = $prevRow.prev();\n            }\n\n            Craft.postActionRequest('structures/move-element', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    if (!response.success) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        this.tableView.elementIndex.updateElements();\n                        return;\n                    }\n                    Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                    this.onPositionChange();\n\n                    // Were we waiting on this to complete so we can expand the new parent?\n                    if ($spinnerRow && $spinnerRow.parent().length) {\n                        $spinnerRow.remove();\n                        this.tableView._expandElement($toggle, true);\n                    }\n\n                    // See if we should run any pending tasks\n                    Craft.cp.runQueue();\n                }\n            });\n        }\n    },\n\n    onSortChange: function() {\n        if (this.tableView.elementSelect) {\n            this.tableView.elementSelect.resetItemOrder();\n        }\n\n        this._positionChanged = true;\n        this.base();\n    },\n\n    onPositionChange: function() {\n        Garnish.requestAnimationFrame(() => {\n            this.trigger('positionChange');\n            this.settings.onPositionChange();\n        });\n    },\n\n    onReturnHelpersToDraggees: function() {\n        this._$firstRowCells.css('width', '');\n\n        // If we were dragging the last elements on the page and ended up loading any additional elements in,\n        // there could be a gap between the last draggee item and whatever now comes after it.\n        // So remove the post-draggee elements and possibly load up the next batch.\n        if (this.draggingLastElements && this.tableView.getMorePending()) {\n            // Update the element index's record of how many items are actually visible\n            this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n            var $postDraggeeItems = this.$draggee.last().nextAll();\n\n            if ($postDraggeeItems.length) {\n                this.removeItems($postDraggeeItems);\n                $postDraggeeItems.remove();\n                this.tableView.maybeLoadMore();\n            }\n        }\n\n        this.base();\n    },\n\n    /**\n     * Returns the min and max levels that the draggee could occupy between\n     * two given rows, or false if it’s not going to work out.\n     */\n    _getLevelBounds: function($prevRow, $nextRow) {\n        // Can't go any lower than the next row, if there is one\n        if ($nextRow && $nextRow.length) {\n            this._getLevelBounds._minLevel = $nextRow.data('level');\n        } else {\n            this._getLevelBounds._minLevel = 1;\n        }\n\n        // Can't go any higher than the previous row + 1\n        if ($prevRow && $prevRow.length) {\n            this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n        } else {\n            this._getLevelBounds._maxLevel = 1;\n        }\n\n        // Does this structure have a max level?\n        if (this.maxLevels) {\n            // Make sure it's going to fit at all here\n            if (\n                this._getLevelBounds._minLevel != 1 &&\n                this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n            ) {\n                return false;\n            }\n\n            // Limit the max level if we have to\n            if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                    this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                }\n            }\n        }\n\n        return {\n            min: this._getLevelBounds._minLevel,\n            max: this._getLevelBounds._maxLevel\n        };\n    },\n\n    /**\n     * Determines the min and max possible levels at the current draggee's position.\n     */\n    _setTargetLevelBounds: function() {\n        this._targetLevelBounds = this._getLevelBounds(\n            this.$draggee.first().prev(),\n            this.$draggee.last().next()\n        );\n    },\n\n    /**\n     * Determines the target level based on the current mouse position.\n     */\n    _updateIndent: function(forcePositionChange) {\n        // Figure out the target level\n        // ---------------------------------------------------------------------\n\n        // How far has the cursor moved?\n        this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n        // Flip that if this is RTL\n        if (Craft.orientation === 'rtl') {\n            this._updateIndent._mouseDist *= -1;\n        }\n\n        // What is that in indentation levels?\n        this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // Combine with the original level to get the new target level\n        this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n        // Contain it within our min/max levels\n        if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n            this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n            this._updateIndent._targetLevel = this._targetLevelBounds.min;\n        } else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n            this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n            this._updateIndent._targetLevel = this._targetLevelBounds.max;\n        }\n\n        // Has the target level changed?\n        if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n            // Target level is changing, so update the ancestors\n            this._updateAncestorsBeforeRepaint();\n        }\n\n        // Update the UI\n        // ---------------------------------------------------------------------\n\n        // How far away is the cursor from the exact target level distance?\n        this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // What's the magnet impact of that?\n        this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n        // Put it on a leash\n        if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n            this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n        }\n\n        // Apply the new margin/width\n        this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n        this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n        this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n    },\n\n    /**\n     * Returns the indent size for a given level\n     */\n    _getLevelIndent: function(level) {\n        return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n    },\n\n    /**\n     * Returns the base data that should be sent with StructureController Ajax requests.\n     */\n    _getAjaxBaseData: function($row) {\n        return {\n            structureId: this.structureId,\n            elementId: $row.data('id'),\n            siteId: $row.find('.element:first').data('site-id')\n        };\n    },\n\n    /**\n     * Returns a row's ancestor rows\n     */\n    _getAncestors: function($row, targetLevel) {\n        this._getAncestors._ancestors = [];\n\n        if (targetLevel != 0) {\n            this._getAncestors._level = targetLevel;\n            this._getAncestors._$prevRow = $row.prev();\n\n            while (this._getAncestors._$prevRow.length) {\n                if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                    this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                    this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                    // Did we just reach the top?\n                    if (this._getAncestors._level == 0) {\n                        break;\n                    }\n                }\n\n                this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n            }\n        }\n\n        return this._getAncestors._ancestors;\n    },\n\n    /**\n     * Prepares to have the ancestors updated before the screen is repainted.\n     */\n    _updateAncestorsBeforeRepaint: function() {\n        if (this._updateAncestorsFrame) {\n            Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n        }\n\n        this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestors.bind(this));\n    },\n\n    _updateAncestors: function() {\n        this._updateAncestorsFrame = null;\n\n        // Update the old ancestors\n        // -----------------------------------------------------------------\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n            // One less descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n            // Is it now childless?\n            if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                // Remove its toggle\n                this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n            }\n        }\n\n        // Update the new ancestors\n        // -----------------------------------------------------------------\n\n        this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n            // One more descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n            // Is this its first child?\n            if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                // Create its toggle\n                $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                    .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n            }\n        }\n\n        this._ancestors = this._updateAncestors._newAncestors;\n\n        delete this._updateAncestors._i;\n        delete this._updateAncestors._$ancestor;\n        delete this._updateAncestors._newAncestors;\n    }\n}, {\n    HELPER_MARGIN: 0,\n    LEVEL_INDENT: 44,\n    MAX_GIVE: 22,\n\n    defaults: {\n        onPositionChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend({\n    $table: null,\n    $selectedSortHeader: null,\n\n    structureTableSort: null,\n\n    _totalVisiblePostStructureTableDraggee: null,\n    _morePendingPostStructureTableDraggee: false,\n\n    getElementContainer: function() {\n        // Save a reference to the table\n        this.$table = this.$container.find('table:first');\n        return this.$table.children('tbody:first');\n    },\n\n    afterInit: function() {\n        // Set the sort header\n        this.initTableHeaders();\n\n        // Create the Structure Table Sorter\n        if (\n            this.elementIndex.settings.context === 'index' &&\n            this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n            Garnish.hasAttr(this.$table, 'data-structure-id')\n        ) {\n            this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements());\n        } else {\n            this.structureTableSort = null;\n        }\n\n        // Handle expand/collapse toggles for Structures\n        if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n            this.addListener(this.$elementContainer, 'click', function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.hasClass('toggle')) {\n                    if (this._collapseElement($target) === false) {\n                        this._expandElement($target);\n                    }\n                }\n            });\n        }\n    },\n\n    initTableHeaders: function() {\n        var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n            $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n        for (var i = 0; i < $tableHeaders.length; i++) {\n            var $header = $tableHeaders.eq(i),\n                attr = $header.attr('data-attribute');\n\n            // Is this the selected sort attribute?\n            if (attr === selectedSortAttr) {\n                this.$selectedSortHeader = $header;\n                var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                $header\n                    .addClass('ordered ' + selectedSortDir)\n                    .on('click', this._handleSelectedSortHeaderClick.bind(this));\n            } else {\n                // Is this attribute sortable?\n                var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                if ($sortAttribute.length) {\n                    $header\n                        .addClass('orderable')\n                        .on('click', this._handleUnselectedSortHeaderClick.bind(this));\n                }\n            }\n        }\n    },\n\n    isVerticalList: function() {\n        return true;\n    },\n\n    getTotalVisible: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._totalVisiblePostStructureTableDraggee;\n        } else {\n            return this._totalVisible;\n        }\n    },\n\n    setTotalVisible: function(totalVisible) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._totalVisiblePostStructureTableDraggee = totalVisible;\n        } else {\n            this._totalVisible = totalVisible;\n        }\n    },\n\n    getMorePending: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._morePendingPostStructureTableDraggee;\n        } else {\n            return this._morePending;\n        }\n    },\n\n    setMorePending: function(morePending) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._morePendingPostStructureTableDraggee = morePending;\n        } else {\n            this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n        }\n    },\n\n    getLoadMoreParams: function() {\n        var params = this.base();\n\n        // If we are dragging the last elements on the page,\n        // tell the controller to only load elements positioned after the draggee.\n        if (this._isStructureTableDraggingLastElements()) {\n            params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n        }\n\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        this.base($newElements);\n\n        if (this.structureTableSort) {\n            this.structureTableSort.addItems($newElements);\n        }\n\n        Craft.cp.updateResponsiveTables();\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            params: {\n                includeTableAttributesForSource: this.elementIndex.sourceKey\n            },\n            onSaveElement: response => {\n                if (response.tableAttributes) {\n                    this._updateTableAttributes($element, response.tableAttributes);\n                }\n            },\n            elementIndex: this.elementIndex\n        });\n    },\n\n    _collapseElement: function($toggle, force) {\n        if (!force && !$toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.removeClass('expanded');\n\n        // Find and remove the descendant rows\n        var $row = $toggle.parent().parent(),\n            id = $row.data('id'),\n            level = $row.data('level'),\n            $nextRow = $row.next();\n\n        while ($nextRow.length) {\n            if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                if ($nextRow.data('level') <= level) {\n                    break;\n                }\n\n                if (this.elementSelect) {\n                    this.elementSelect.removeItems($nextRow);\n                }\n\n                if (this.structureTableSort) {\n                    this.structureTableSort.removeItems($nextRow);\n                }\n\n                this._totalVisible--;\n            }\n\n            var $nextNextRow = $nextRow.next();\n            $nextRow.remove();\n            $nextRow = $nextNextRow;\n        }\n\n        // Remember that this row should be collapsed\n        if (!this.elementIndex.instanceState.collapsedElementIds) {\n            this.elementIndex.instanceState.collapsedElementIds = [];\n        }\n\n        this.elementIndex.instanceState.collapsedElementIds.push(id);\n        this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n        // Bottom of the index might be viewable now\n        this.maybeLoadMore();\n    },\n\n    _expandElement: function($toggle, force) {\n        if (!force && $toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.addClass('expanded');\n\n        // Remove this element from our list of collapsed elements\n        if (this.elementIndex.instanceState.collapsedElementIds) {\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n            if (index !== -1) {\n                this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                // Add a temporary row\n                var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                // Load the nested elements\n                let data = $.extend(true, {}, this.settings.params);\n                data.criteria.descendantOf = id;\n\n                Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {data}).then(response => {\n                    // Do we even care about this anymore?\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n\n                    let $newElements = $(response.data.html);\n\n                    // Are there more descendants we didn't get in this batch?\n                    let totalVisible = (this._totalVisible + $newElements.length);\n                    let morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                    if (morePending) {\n                        // Remove all the elements after it\n                        let $nextRows = $spinnerRow.nextAll();\n\n                        if (this.elementSelect) {\n                            this.elementSelect.removeItems($nextRows);\n                        }\n\n                        if (this.structureTableSort) {\n                            this.structureTableSort.removeItems($nextRows);\n                        }\n\n                        $nextRows.remove();\n                        totalVisible -= $nextRows.length;\n                    } else {\n                        // Maintain the current 'more' status\n                        morePending = this._morePending;\n                    }\n\n                    $spinnerRow.replaceWith($newElements);\n                    this.thumbLoader.load($newElements);\n\n                    if (this.elementIndex.actions || this.settings.selectable) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.addItems($newElements);\n                    }\n\n                    Craft.appendHeadHtml(response.data.headHtml);\n                    Craft.appendFootHtml(response.data.footHtml);\n                    Craft.cp.updateResponsiveTables();\n\n                    this.setTotalVisible(totalVisible);\n                    this.setMorePending(morePending);\n\n                    // Is there room to load more right now?\n                    this.maybeLoadMore();\n                }).catch(e => {\n                    Craft.cp.displayError();\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n                });\n            }\n        }\n    },\n\n    _createSpinnerRowAfter: function($row) {\n        return $(\n            '<tr data-spinnerrow>' +\n            '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n            '<div class=\"spinner\"/>' +\n            '</td>' +\n            '</tr>'\n        ).insertAfter($row);\n    },\n\n    _isStructureTableDraggingLastElements: function() {\n        return (\n            this.structureTableSort &&\n            this.structureTableSort.dragging &&\n            this.structureTableSort.draggingLastElements\n        );\n    },\n\n    _handleSelectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        // Reverse the sort direction\n        var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n            newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n        this.elementIndex.setSortDirection(newSortDir);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleUnselectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        var attr = $header.attr('data-attribute');\n\n        this.elementIndex.setSortAttribute(attr);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleSortHeaderClick: function(ev, $header) {\n        if (this.$selectedSortHeader) {\n            this.$selectedSortHeader.removeClass('ordered asc desc');\n        }\n\n        $header.removeClass('orderable').addClass('ordered loading');\n        this.elementIndex.storeSortAttributeAndDirection();\n        this.elementIndex.updateElements();\n\n        // No need for two spinners\n        this.elementIndex.setIndexAvailable();\n    },\n\n    _updateTableAttributes: function($element, tableAttributes) {\n        var $tr = $element.closest('tr');\n\n        for (var attr in tableAttributes) {\n            if (!tableAttributes.hasOwnProperty(attr)) {\n                continue;\n            }\n\n            $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend({\n    searchTimeout: null,\n    searchMenu: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addTagInput: null,\n    $spinner: null,\n\n    _ignoreBlur: false,\n\n    init: function(settings) {\n        // Normalize the settings\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n        this.$addTagInput = this.$container.children('.add').children('.text');\n        this.$spinner = this.$addTagInput.next();\n\n        this.addListener(this.$addTagInput, 'input', () => {\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.searchForTags.bind(this), 500);\n        });\n\n        this.addListener(this.$addTagInput, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n            }\n\n            let $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options.filter('.hover'));\n                    }\n                    return;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                            if ($nextOption.length) {\n                                this.focusOption($nextOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(0));\n                        }\n                    }\n                    return;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                            if ($prevOption.length) {\n                                this.focusOption($prevOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                        }\n                    }\n                    return;\n                }\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'focus', function() {\n            if (this.searchMenu) {\n                this.searchMenu.show();\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'blur', function() {\n            if (this._ignoreBlur) {\n                this._ignoreBlur = false;\n                return;\n            }\n\n            setTimeout(() => {\n                if (this.searchMenu) {\n                    this.searchMenu.hide();\n                }\n            }, 1);\n        });\n    },\n\n    focusOption: function($option) {\n        this.searchMenu.$options.removeClass('hover');\n        $option.addClass('hover');\n        this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n    },\n\n    // No \"add\" button\n    getAddElementsBtn: $.noop,\n\n    getElementSortAxis: function() {\n        return null;\n    },\n\n    searchForTags: function() {\n        if (this.searchMenu) {\n            this.killSearchMenu();\n        }\n\n        var val = this.$addTagInput.val();\n\n        if (val) {\n            this.$spinner.removeClass('hidden');\n\n            var excludeIds = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                var id = $(this.$elements[i]).data('id');\n\n                if (id) {\n                    excludeIds.push(id);\n                }\n            }\n\n            if (this.settings.sourceElementId) {\n                excludeIds.push(this.settings.sourceElementId);\n            }\n\n            var data = {\n                search: this.$addTagInput.val(),\n                tagGroupId: this.settings.tagGroupId,\n                excludeIds: excludeIds\n            };\n\n            Craft.postActionRequest('tags/search-for-tags', data, (response, textStatus) => {\n                // Just in case\n                if (this.searchMenu) {\n                    this.killSearchMenu();\n                }\n\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                        $ul = $('<ul/>').appendTo($menu);\n\n                    var $li;\n\n                    for (var i = 0; i < response.tags.length; i++) {\n                        $li = $('<li/>')\n                            .appendTo($ul);\n\n                        $('<a data-icon=\"tag\"/>')\n                            .appendTo($li)\n                            .text(response.tags[i].title)\n                            .data('id', response.tags[i].id)\n                            .addClass(response.tags[i].exclude ? 'disabled' : '');\n                    }\n\n                    if (!response.exactMatch) {\n                        $li = $('<li/>').appendTo($ul);\n                        $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                    }\n\n                    $ul.find('a:not(.disabled):first').addClass('hover');\n\n                    this.searchMenu = new Garnish.Menu($menu, {\n                        attachToElement: this.$addTagInput,\n                        onOptionSelect: this.selectTag.bind(this)\n                    });\n\n                    this.addListener($menu, 'mousedown', () => {\n                        this._ignoreBlur = true;\n                    });\n\n                    this.searchMenu.show();\n                }\n            });\n        } else {\n            this.$spinner.addClass('hidden');\n        }\n    },\n\n    selectTag: function(option) {\n        var $option = $(option);\n\n        if ($option.hasClass('disabled')) {\n            return;\n        }\n\n        var id = $option.data('id');\n        var title = $option.text();\n\n        var $element = $('<div/>', {\n            'class': 'element small removable',\n            'data-id': id,\n            'data-site-id': this.settings.targetSiteId,\n            'data-label': title,\n            'data-editable': '1'\n        }).appendTo(this.$elementsContainer);\n\n        var $input = $('<input/>', {\n            'type': 'hidden',\n            'name': this.settings.name + '[]',\n            'value': id\n        }).appendTo($element);\n\n        $('<a/>', {\n            'class': 'delete icon',\n            'title': Craft.t('app', 'Remove')\n        }).appendTo($element);\n\n        var $titleContainer = $('<div/>', {\n            'class': 'label'\n        }).appendTo($element);\n\n        $('<span/>', {\n            'class': 'title',\n            text: title\n        }).appendTo($titleContainer);\n\n        var margin = -($element.outerWidth() + 10);\n        this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addTagInput.velocity(animateCss, 'fast');\n\n        this.$elements = this.$elements.add($element);\n\n        this.addElements($element);\n\n        this.killSearchMenu();\n        this.$addTagInput.val('');\n        this.$addTagInput.trigger('focus');\n\n        if (!id) {\n            // We need to create the tag first\n            $element.addClass('loading disabled');\n\n            var data = {\n                groupId: this.settings.tagGroupId,\n                title: title\n            };\n\n            Craft.postActionRequest('tags/create-tag', data, (response, textStatus) => {\n                if (textStatus === 'success' && response.success) {\n                    $element.attr('data-id', response.id);\n                    $input.val(response.id);\n\n                    $element.removeClass('loading disabled');\n                } else {\n                    this.removeElement($element);\n\n                    if (textStatus === 'success') {\n                        // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                }\n            });\n        }\n    },\n\n    killSearchMenu: function() {\n        this.searchMenu.hide();\n        this.searchMenu.destroy();\n        this.searchMenu = null;\n    }\n}, {\n    defaults: {\n        tagGroupId: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend({\n    getElementContainer: function() {\n        return this.$container.children('ul');\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            config = $.extend({\n                autocomplete: false,\n            }, config);\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: typeof config.autocomplete === 'boolean' ? (config.autocomplete ? 'on' : 'off') : config.autocomplete,\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            } else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n                'aria-label': Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html': option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                html: config.label,\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            } else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: allChecked || (config.values || []).includes(option.value),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            config.fieldset = true;\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<button/>', {\n                'type': 'button',\n                'class': 'lightswitch',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'checkbox',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            const id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            const containerId = config.containerId || id + '-container';\n            const name = config.name || null;\n            const value = config.value || null;\n            const small = config.small || false;\n            const autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            const disabled = config.disabled || false;\n\n            const $container = $('<div/>', {\n                id: containerId,\n                class: 'flex color-container'\n            });\n\n            const $colorPreviewContainer = $('<div/>', {\n                class: 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            const $colorPreview = $('<div/>', {\n                class: 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            const $inputContainer = $('<div/>', {\n                class: 'color-input-container',\n            })\n                .append(\n                    $('<div/>', {\n                        class: 'color-hex-indicator light code',\n                        'aria-hidden': 'true',\n                        text: '#',\n                    })\n                )\n                .appendTo($container);\n\n            const $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: Craft.ltrim(value, '#'),\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled,\n                'aria-label': Craft.t('app', 'Color hex value'),\n            }).appendTo($inputContainer);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            config.fieldset = true;o\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000)) + '-date';\n            var name = config.name || null;\n            var inputName = name ? name + '[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate: null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000)) + '-time';\n            var name = config.name || null;\n            var inputName = name ? name + '[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours() * 3600 + value.getMinutes() * 60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $(config.fieldset ? '<fieldset/>' : '<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $(config.fieldset ? '<legend/>' : '<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-${config.fieldset ? 'legend' : 'label'}` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': !config.fieldset && config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend({\n    uploader: null,\n    allowedKinds: null,\n    $element: null,\n    settings: null,\n    _rejectedFiles: {},\n    _extensionList: null,\n    _totalFileCounter: 0,\n    _validFileCounter: 0,\n\n    init: function($element, settings) {\n        this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n        this.$element = $element;\n        this.allowedKinds = null;\n        this._extensionList = null;\n        this._totalFileCounter = 0;\n        this._validFileCounter = 0;\n\n        settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n        var events = settings.events;\n        delete settings.events;\n\n        if (settings.allowedKinds && settings.allowedKinds.length) {\n            if (typeof settings.allowedKinds === 'string') {\n                settings.allowedKinds = [settings.allowedKinds];\n            }\n\n            this.allowedKinds = settings.allowedKinds;\n            delete settings.allowedKinds;\n        }\n\n        settings.autoUpload = false;\n\n        this.uploader = this.$element.fileupload(settings);\n        for (var event in events) {\n            if (!events.hasOwnProperty(event)) {\n                continue;\n            }\n\n            this.uploader.on(event, events[event]);\n        }\n\n        this.settings = settings;\n\n        this.uploader.on('fileuploadadd', this.onFileAdd.bind(this));\n    },\n\n    /**\n     * Set uploader parameters.\n     */\n    setParams: function(paramObject) {\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        this.uploader.fileupload('option', {formData: paramObject});\n    },\n\n    /**\n     * Get the number of uploads in progress.\n     */\n    getInProgress: function() {\n        return this.uploader.fileupload('active');\n    },\n\n    /**\n     * Return true, if this is the last upload.\n     */\n    isLastUpload: function() {\n        // Processing the last file or not processing at all.\n        return this.getInProgress() < 2;\n    },\n\n    /**\n     * Called on file add.\n     */\n    onFileAdd: function(e, data) {\n        e.stopPropagation();\n\n        var validateExtension = false;\n\n        if (this.allowedKinds) {\n            if (!this._extensionList) {\n                this._createExtensionList();\n            }\n\n            validateExtension = true;\n        }\n\n        // Make sure that file API is there before relying on it\n        data.process().done(() => {\n            var file = data.files[0];\n            var pass = true;\n            if (validateExtension) {\n                var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                var fileExtension = matches[1];\n                if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                    pass = false;\n                    this._rejectedFiles.type.push('“' + file.name + '”');\n                }\n            }\n\n            if (file.size > this.settings.maxFileSize) {\n                this._rejectedFiles.size.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            // If the validation has passed for this file up to now, check if we're not hitting any limits\n            if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                this._rejectedFiles.limit.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            if (pass) {\n                this._validFileCounter++;\n                data.submit();\n            }\n\n            if (++this._totalFileCounter === data.originalFiles.length) {\n                this._totalFileCounter = 0;\n                this._validFileCounter = 0;\n                this.processErrorMessages();\n            }\n        });\n\n        return true;\n    },\n\n    /**\n     * Process error messages.\n     */\n    processErrorMessages: function() {\n        var str;\n\n        if (this._rejectedFiles.type.length) {\n            if (this._rejectedFiles.type.length === 1) {\n                str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            } else {\n                str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n            this._rejectedFiles.type = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.size.length) {\n            if (this._rejectedFiles.size.length === 1) {\n                str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n            this._rejectedFiles.size = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.limit.length) {\n            if (this._rejectedFiles.limit.length === 1) {\n                str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n            this._rejectedFiles.limit = [];\n            alert(str);\n        }\n    },\n\n    humanFileSize: function(bytes) {\n        var threshold = 1024;\n\n        if (bytes < threshold) {\n            return bytes + ' B';\n        }\n\n        var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        var u = -1;\n\n        do {\n            bytes = bytes / threshold;\n            ++u;\n        }\n        while (bytes >= threshold);\n\n        return bytes.toFixed(1) + ' ' + units[u];\n    },\n\n    _createExtensionList: function() {\n        this._extensionList = [];\n\n        for (var i = 0; i < this.allowedKinds.length; i++) {\n            var allowedKind = this.allowedKinds[i];\n\n            if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                    var ext = Craft.fileKinds[allowedKind].extensions[j];\n                    this._extensionList.push(ext);\n                }\n            }\n        }\n    },\n\n    destroy: function() {\n        this.$element.fileupload('destroy');\n        this.base();\n    }\n}, {\n    defaults: {\n        dropZone: null,\n        pasteZone: null,\n        fileInput: null,\n        sequentialUploads: true,\n        maxFileSize: Craft.maxUploadSize,\n        allowedKinds: null,\n        events: {},\n        canAddMoreFiles: null,\n        headers: {'Accept': 'application/json;q=0.9,*/*;q=0.8'},\n        paramName: 'assets-upload'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Make it lowercase\n        sourceVal = sourceVal.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        sourceVal = Craft.asciiString(sourceVal);\n\n        // Handle must start with a letter and end with a letter/number\n        sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n        sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n        // Get the \"words\"\n        var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n        var uriFormat = words.join(Craft.slugWordSeparator);\n\n        if (uriFormat && this.settings.suffix) {\n            uriFormat += this.settings.suffix;\n        }\n\n        return uriFormat;\n    }\n});\n"]}