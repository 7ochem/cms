{"version":3,"sources":["Craft.min.js","Craft.js","BaseElementEditor.js","BaseElementIndex.js","BaseElementIndexView.js","BaseElementSelectInput.js","BaseElementSelectorModal.js","BaseInputGenerator.js","AdminTable.js","AssetEditor.js","AssetImageEditor.js","AssetIndex.js","AssetSelectInput.js","AssetSelectorModal.js","AuthManager.js","CP.js","CategoryIndex.js","CategorySelectInput.js","Chart.js","ColorInput.js","CustomizeSourcesModal.js","DataTableSorter.js","DeleteUserModal.js","DraftEditor.js","DynamicGenerator.js","EditableTable.js","ElementActionTrigger.js","ElementThumbLoader.js","ElevatedSessionForm.js","ElevatedSessionManager.js","EntryIndex.js","FieldLayoutDesigner.js","FieldToggle.js","Grid.js","HandleGenerator.js","ImageUpload.js","InfoIcon.js","LightSwitch.js","Listbox.js","LivePreview.js","PasswordInput.js","Preview.js","PreviewFileModal.js","ProgressBar.js","PromptHandler.js","SlidePicker.js","SlideRuleInput.js","SlugGenerator.js","Structure.js","StructureDrag.js","StructureTableSorter.js","TableElementIndexView.js","TagSelectInput.js","ThumbsElementIndexView.js","UI.js","Uploader.js","UriFormatGenerator.js"],"names":["$","rxhtmlTag","jQuery","htmlPrefilter","html","replace","extend","Craft","navHeight","index","arr","key","isArray","reduce","obj","i","t","category","message","params","translations","this","formatMessage","pattern","args","tokens","_tokenizePattern","length","token","_parseToken","join","start","pos","depth","chars","indexOf","slice","open","close","push","split","param","trim","arg","type","format","number","formatNumber","substr","plural","c","offset","selector","selectorChars","substring","parseInt","map","p","formatDate","date","Date","datepicker","datepickerOptions","dateFormat","d3","formatLocale","d3FormatLocaleDefinition","formatter","escapeHtml","str","text","escapeRegex","getText","encodeUriComponent","encodeURIComponent","differences","!","*","'","(",")","chr","re","RegExp","selectFullValue","input","$input","val","setSelectionRange","formatInputId","inputName","rtrim","getUrl","path","baseUrl","anchor","isPlainObject","aParams","name","hasOwnProperty","value","Garnish","apos","url","qpos","search","pathParam","pathMatch","match","omitScriptNameInUrls","usePathInfo","scriptName","basePath","endPath","getCpUrl","baseCpUrl","getSiteUrl","baseSiteUrl","getActionUrl","actionUrl","redirectTo","document","location","href","getCsrfInput","csrfTokenName","csrfTokenValue","postActionRequest","action","data","callback","options","contentType","JSON","stringify","jqXHR","ajax","dataType","headers","_actionHeaders","success","error","textStatus","errorThrown","readyState","cp","displayError","alert","send","_waitingOnAjax","_ajaxQueue","queueActionRequest","undefined","_postNextActionRequestInQueue","shift","X-Registered-Asset-Bundles","Object","keys","registeredAssetBundles","X-Registered-Js-Files","registeredJsFiles","sendActionRequest","method","Promise","resolve","reject","X-Requested-With","v","getTime","axios","request","then","catch","_processedApiHeaders","sendApiRequest","uri","cancelToken","getApiHeaders","apiHeaders","baseURL","baseApiUrl","apiParams","apiResponse","_apiHeaders","window","cmsLicenseKey","_resolveHeaderWaitlist","_apiHeaderWaitlist","_loadingApiHeaders","response","e","clearCachedApiHeaders","downloadFromUrl","body","XMLHttpRequest","setRequestHeader","responseType","onload","status","disposition","getResponseHeader","matches","exec","filename","blob","Blob","link","createElement","URL","createObjectURL","download","appendChild","click","removeChild","bind","stringToArray","findDeltaData","oldData","newData","deltaNames","sort","a","b","groupedOldParams","_groupParamsByDeltaNames","groupedNewParams","__root__","n","inArray","modifiedDeltaNames","concat","withRoot","useInitialValues","paramName","grouped","paramLoop","decodeURIComponent","initialDeltaValues","expandPostArray","expanded","m","unshift","parentElem","createForm","$form","attr","accept-charset","chunks","values","appendTo","compare","obj1","obj2","sortObjectKeys","Array","getObjectKeys","escapeChars","escaped","ltrim","startsWith","filterArray","filtered","elem","includes","removeFromArray","splice","getLast","uppercaseFirst","charAt","toUpperCase","lowercaseFirst","toLowerCase","parseUrl","scheme","host","hostname","port","query","hash","isSameHost","requestUrlInfo","urlInfo","secondsToHumanTimeDuration","seconds","showSeconds","weeks","Math","floor","days","minutes","hours","round","timeComponents","asciiString","charMap","normalize","char","asciiStr","asciiCharMap","randomString","result","random","preventOutlineOnMouseFocus","$elem","namespace","on","addClass","trigger","event","keyCode","SHIFT_KEY","CTRL_KEY","CMD_KEY","removeClass","createErrorList","errors","$ul","$li","appendHeadHtml","$existingCss","existingCss","eq","regexp","append","appendFootHtml","$existingJs","src","existingJs","$bod","initUiElements","$container","grid","infoicon","checkboxselect","fieldtoggle","lightswitch","nicetext","pill","formsubmit","menubtn","datetime","_elementIndexClasses","_elementSelectorModalClasses","_elementEditorClasses","registerElementIndexClass","elementType","func","registerElementSelectorModalClass","registerElementEditorClass","createElementIndex","settings","BaseElementIndex","createElementSelectorModal","BaseElementSelectorModal","createElementEditor","element","BaseElementEditor","getLocalStorage","defaultValue","systemUid","localStorage","parse","setLocalStorage","removeLocalStorage","removeItem","getCookie","cookie","setCookie","defaultCookieOptions","domain","maxAge","expires","toUTCString","secure","removeCookie","getElementInfo","$element","hasClass","find","id","siteId","label","hasThumb","setElementSize","size","otherSize","$oldImg","$newImg","sizes","srcset","replaceWith","picturefill","elements","submitForm","confirm","redirect","retainScroll","scrollY","fn","animateLeft","duration","easing","complete","orientation","velocity","left","right","animateRight","disable","each","removeAttr","enable","itemSelector","cols","maxCols","minColWidth","mode","fillMode","colClass","snapToGrid","Grid","InfoIcon","CheckboxSelect","FieldToggle","settingName","settingValue","setSettings","thisSettings","hasAttr","indeterminateValue","LightSwitch","NiceText","Pill","ev","$btn","currentTarget","$anchor","closest","customTrigger","next","menuAnchor","MenuBtn","$wrapper","$inputs","checkValue","hasValue","children","class","title","remove","$doc","ready","Base","elementId","initialData","$fieldsContainer","$cancelBtn","$saveBtn","$spinner","$siteSelect","$siteSpinner","hud","init","defaults","loadHud","setElementAttribute","attributes","getBaseData","prevalidate","onBeginLoading","includeSites","isMultiSite","showSiteSwitcher","proxy","showHud","onEndLoading","$hudContents","sites","$header","$siteSelectContainer","siteInfo","addListener","add","updateForm","onCreateForm","$footer","$buttonsContainer","updateBody","updateSizeAndPosition","hudTrigger","HUD","bodyClass","closeOtherHUDs","hideOnEsc","hideOnShadeClick","onShow","onShowHud","onHide","onHideHud","onSubmit","saveElement","shortcutManager","registerShortcut","ESC_KEY","maybeCloseHud","$shade","$hud","$body","hide","switchSite","isDirty","newSiteId","reloadForm","refreshInitialData","$allInstructions","$instructions","$label","siblings","requestAnimationFrame","headHtml","footHtml","serialize","validators","isFunction","call","$title","$a","cpEditUrl","newTitle","elementTypeNames","displayNotice","closeHud","onSaveElement","shake","showing","S_KEY","ctrl","runQueue","elementIndex","noop","initialized","instanceState","sourceStates","sourceStatesStorageKey","searchTimeout","sourceSelect","$main","isIndexBusy","$sidebar","showingSidebar","sourceKey","sourceViewModes","$source","sourcesByKey","$visibleSources","$customizeSourcesBtn","customizeSourcesModal","$toolbar","toolbarOffset","$search","searching","searchText","trashed","drafts","$clearSearchBtn","$statusMenuBtn","$statusMenuContainer","statusMenu","$siteMenuBtn","siteMenu","$sortMenuBtn","sortMenu","$sortAttributesList","$sortDirectionsList","$scoreSortAttribute","$structureSortAttribute","$elements","$viewModeBtnContainer","viewModeBtns","viewMode","view","_autoSelectElements","$countSpinner","$countContainer","page","resultSet","totalResults","$exportBtn","actions","actionsHeadHtml","actionsFootHtml","$selectAllContainer","$selectAllCheckbox","showingActionTriggers","exporters","exportersByType","_$detachedToolbarItems","_$triggers","_ignoreFailedRequest","_cancelToken","getDefaultInstanceState","storageKey","context","toolbarSelector","parent","hideSidebar","initSources","menu","$option","$options","filter","first","_setSite","criteria","defaultSiteId","getSiteId","$storedSiteOption","startSearching","stopSearching","clearTimeout","setTimeout","RETURN_KEY","preventDefault","updateElementsIfSearchTextChanged","isMobileBrowser","afterInit","selectDefaultSource","setPage","pageNum","updateElements","onAfterInit","_createCancelToken","CancelToken","source","_cancelRequests","cancel","getSourceContainer","$sources","$items","_getSourcesInList","Select","multi","allowEmpty","vertical","onSelectionChange","_initSources","getDefaultSourceKey","getSourceByKey","selectSource","refreshSources","removeAllItems","setIndexBusy","refreshSourcesAction","setIndexAvailable","initSource","addItems","initSourceToggle","expandedSources","_expandSource","deinitSourceToggle","$toggle","_getSourceToggle","deinitSource","removeItems","removeListener","removeData","selectedSource","defaultSource","paths","getDefaultExpandedSources","addOptions","prependTo","_updateStructureSortOption","setSortAttribute","detach","setInstanceState","storeInstanceState","getSourceState","getSelectedSourceState","setSelecetedSourceState","viewState","storeSortAttributeAndDirection","getSelectedSortAttribute","order","getSelectedSortDirection","max","pageTrigger","history","replaceState","_resetCount","getViewParams","batchSize","limit","draftOf","disabledElementIds","paginated","_isViewPaginated","collapsedElementIds","preservePagination","destroy","updateElementsAction","$scrollContainer","scrollTop","_updateView","showActionTriggers","css","height","_createTriggers","submitAction","actionParams","selectedElementIds","getSelectedElementIds","_findAction","viewParams","elementAction","elementIds","submitActionsAction","afterAction","actionClass","onAfterAction","hideActionTriggers","updateActionTriggers","totalSelected","getSelectedElements","getEnabledElements","setStatus","selectOption","getSortAttributeOption","attribute","setSortDirection","getSortDirectionOption","dir","getSelectedViewMode","selectItem","updateSidebarMenuLabel","sortOptions","data-extra","data-attr","setStoredSortOptionsForSource","$firstOption","getViewModesForSource","sourceViewMode","$viewModeBtn","className","data-view","data-icon","icon","selectViewMode","doesSourceHaveViewMode","onSelectSource","selectSourceByKey","sortAttr","sortDir","getDefaultSort","viewModes","force","createView","getViewClass","TableElementIndexView","ThumbsElementIndexView","rememberDisabledElementId","forgetDisabledElementId","enableElements","parents","onEnableElements","disableElements","onDisableElements","getElementById","enableElementsById","ids","makeArray","disableElementsById","selectElementAfterUpdate","addButton","$button","getButtonContainer","isShowingSidebar","buttonContainer","createCustomizeSourcesModal","modal","CustomizeSourcesModal","base","onSelectSite","onUpdateElements","_handleSourceSelectionChange","$selectedItems","_handleActionTriggerSubmit","getPostData","_handleMenuActionTriggerSubmit","option","_handleStatusChange","selectedOption","_handleSiteChange","firstSite","$firstVisibleSource","selectNewSource","toString","get","$heading","$headings","nextUntil","setSiteId","_handleSortChange","is","_handleSelectionChange","_handleSourceDblClick","_toggleSource","stopPropagation","_handleSourceToggleClick","prev","$list","_getChildSources","_deinitSources","_collapseSource","aria-expanded","aria-label","$childSources","_countResults","total","itemLabel","itemsLabel","min","last","countLabel","item","items","$paginationContainer","totalPages","ceil","$prevBtn","$nextBtn","role","tabindex","aria-checked","selectAllElements","deselectAllElements","SPACE_KEY","selectable","multiSelect","checkboxMode","selectElementById","countElementsAction","count","triggers","safeMenuActions","destructiveMenuActions","destructive","$menuTrigger","$menu","$safeList","_createMenuTriggerList","$destructiveList","$div","_showExportHud","typeOptions","$typeField","ui","createSelectField","$formatField","$typeSelect","formattable","$limitField","createTextField","placeholder","submitting","isNaN","BaseElementIndexView","$loadingMoreSpinner","$elementContainer","$scroller","thumbLoader","elementSelect","loadingMore","_totalVisible","_morePending","_handleEnableElements","_handleDisableElements","container","insertAfter","getElementContainer","setTotalVisible","setMorePending","ElementThumbLoader","load","isVerticalList","handle","_handleElementEditing","$target","target","prop","isTouchCapable","maybeLoadMore","getAllElements","$selectedElements","selectElement","selectAll","deselectAll","getTotalVisible","totalVisible","getMorePending","morePending","canLoadMore","loadMore","$win","innerHeight","top","outerHeight","getLoadMoreParams","loadMoreElementsAction","$newElements","appendElements","onAppendElements","newElements","off","BaseElementSelectInput","elementSort","elementEditor","$elementsContainer","$addElementBtn","$addElementBtnContainer","_initialized","normalizedSettings","arguments","modalStorageKey","sortable","getContainer","getElementsContainer","getAddElementsBtn","initElementSelect","initElementSort","resetElements","getElements","DragSort","$targetItem","getSelectedItems","ignoreHandleSelector","axis","getElementSortAxis","collapseDraggees","magnetStrength","helperLagBase","onSortChange","resetItemOrder","canAddMoreElements","updateAddElementsBtn","enableAddElementsBtn","disableAddElementsBtn","removeElements","addElements","editable","_handleShowElementEditor","removeElement","not","onRemoveElements","animateElementAway","animateCss","opacity","outerWidth","draftEditor","pause","REMOVE_FX_DURATION","resume","showModal","show","createModal","getModalSettings","closeOtherModals","sources","showSiteMenu","getDisabledElementIds","onSelect","modalSettings","allowSelfRelations","sourceElementId","onModalSelect","slotsLeft","selectElements","updateDisabledElementsInModal","elementInfo","createNewElement","appendElement","animateElementIntoPlace","onSelectElements","clone","prepend","$modalElement","$inputElement","origOffset","destOffset","$helper","position","zIndex","ADD_FX_DURATION","checkForm","fieldId","editorSettings","Modal","$selectBtn","$sourceToggles","$tbody","$primaryButtons","$secondaryButtons","$footerSpinner","onFadeIn","_createElementIndex","updateSelectBtnState","enableSelectBtn","disableSelectBtn","enableCancelBtn","disableCancelBtn","showFooterSpinner","hideFooterSpinner","clearMouseUpTimeout","disableElementsOnSelect","hideOnSelect","info","has","touchData","firstTap","secondTap","resizable","onCancel","BaseInputGenerator","listening","timeout","startListening","setNewSource","stopListening","removeAllListeners","onSourceTextChange","onTargetTextChange","activeElement","onFormSubmit","updateTarget","sourceVal","targetVal","generateTargetValue","AdminTable","totalItems","sorter","$noItems","$table","$deleteBtns","allowDeleteAll","minItems","noItemsSelector","tableSelector","DataTableSorter","updateUI","addRow","row","maxItems","$row","$deleteBtn","reorderItems","idAttribute","reorderAction","onReorderItems","reorderSuccessMessage","reorderFailMessage","handleDeleteBtnClick","confirmDeleteItem","deleteItem","getItemName","confirmDeleteMessage","getItemId","deleteAction","handleDeleteItemResponse","onDeleteItem","deleteSuccessMessage","deleteFailMessage","nameAttribute","$moveButtons","newItemBtnSelector","AssetEditor","reloadIndex","$imageEditorTrigger","showImageEditor","AssetImageEditor","onSave","refreshThumbnail","$imageTools","$buttons","$replaceBtn","$editorContainer","$straighten","$croppingCanvas","$spinnerCanvas","canvas","image","viewport","focalPoint","croppingCanvas","clipper","croppingRectangle","cropperHandles","cropperGrid","croppingShade","croppingAreaText","imageStraightenAngle","viewportRotation","originalWidth","originalHeight","imageVerticeCoords","zoomRatio","animationInProgress","currentView","assetId","cacheBust","draggingCropper","scalingCropper","draggingFocal","previousMouseX","previousMouseY","shiftKeyHeld","editorHeight","editorWidth","cropperState","scaleFactor","flipData","focalPointState","spinnerInterval","maxImageSize","lastLoadedDimensions","imageIsLoading","mouseMoveEvent","croppingConstraint","constraintOrientation","showingCustomConstraint","renderImage","renderCropper","now","allowDegreeFractions","isImagick","x","y","allowSavingAsNew","saveImage","getMaxImageSize","browserViewportWidth","documentElement","clientWidth","browserViewportHeight","clientHeight","devicePixelRatio","loadEditor","$tabs","$viewsContainer","$views","innerWidth","_showSpinner","fabric","StaticCanvas","width","enableRetinaScaling","renderAll","imageUrl","Image","fromURL","imageObject","set","originX","originY","getHeight","getWidth","getScaledImageDimensions","_setFittedImageVerticeCoordinates","_repositionEditorElements","focalState","imageDimensions","offsetX","offsetY","focal","focalData","adjustedX","adjustedY","storeFocalPointState","_createFocalPoint","_createViewport","storeCropperState","_addControlListeners","_handleMouseMove","_handleMouseDown","_handleMouseUp","_handleMouseOut","_hideSpinner","_reloadImage","setSrc","min-width","min-height","previousEditorDimensions","setDimensions","currentScaledDimensions","getZoomToFitRatio","previouslyOccupiedArea","_getBoundingRectangle","_repositionCropper","getZoomToCoverRatio","_repositionImage","_repositionViewport","_repositionFocalPoint","_zoomImage","Rect","fill","globalCompositeOperation","sizeFactor","focalX","focalY","deltaX","deltaY","Group","Circle","radius","strokeWidth","stroke","toggleFocalPoint","dimensions","state","currentWidth","ratio","hasOrientationChanged","_","imageRatio","editorRatio","_handleTabClick","rotateImage","flipImage","straighteningInput","SlideRuleInput","onStart","_showGrid","onChange","slider","straighten","onEnd","_hideGrid","_cleanupFocalPointAfterStraighten","_handleConstraintClick","_handleOrientationClick","_applyCustomConstraint","constraint","_showCustomConstraint","_hideCustomConstraint","setCroppingConstraint","enforceCroppingConstraint","$constraints","$constraint","reverse","_getCustomConstraint","w","h","parseFloat","_setCustomConstraint","$tab","showView","enableSlider","disableSlider","disableCropMode","enableCropMode","zoomFactor","degrees","imageZoomRatio","newAngle","angle","scaledImageDimensions","viewportProperties","imageProperties","angleInRadians","PI","newDeltaX","cos","sin","newDeltaY","modifiedDeltaX","modifiedDeltaY","temp","animate","animationDuration","onComplete","cleanAngle","_adjustFocalPointByAngle","_resetFocalPointPosition","editorCenter","setValue","properties","scaleY","scaleX","previousAngle","_adjustEditorElementsOnStraighten","newCenterX","newCenterY","angleDelta","currentZoomRatio","adjustmentRatio","cropperCenterX","cropperCenterY","imageVertices","getImageVerticeCoords","rectangle","_getZoomRatioToFitRectangle","_isCenterInside","object","containingObject","newFocalX","newFocalY","adjustedFocalX","adjustedFocalY","containingVertices","vertex","rectangleVertices","_getRectangleVertices","verticeIndex","arePointsInsideRectangle","edge","_getEdgeCrossed","rectangleCenter","distanceFromVertexToEdge","abs","sqrt","pow","distanceFromCenterToEdge","postData","imageRotation","cropData","zoom","end","scaledWidth","scaledHeight","boundingBox","_getImageBoundingBox","scale","vertScale","horiScale","getCombinedZoomRatio","strokeOptions","gridWidth","gridHeight","xStep","yStep","Line","onFadeOut","cropperData","_showCropper","_editorModeTransition","_hideCropper","targetZoom","inverseZoomFactor","imageOffsetX","imageOffsetY","getContext","cW","cH","setInterval","rotation","save","clearRect","translate","rotate","beginPath","moveTo","lineTo","lineWidth","strokeStyle","restore","clearInterval","clipperData","_setupCropperLayer","_redrawCropperElements","backgroundColor","hoverCursor","selection","rectangleRatio","rectWidth","rectHeight","lineOptions","gridOptions","pathGroup","Path","cropTextTop","cropTextBackgroundColor","Textbox","fontSize","font","textAlign","previousImageArea","currentOffset","areaFactor","coordinateSet","d","_isMouseOver","move","_cropperHandleHitTest","pageX","pageY","_handleMouseMoveInternal","_handleFocalDrag","_handleCropperDrag","_handleCropperResize","_setMouseCursor","vertices","dxi","dyi","furthest","furthestDeltas","newX","newY","previousHeight","previousWidth","startingRectangle","_calculateNewCropperSizeByDeltas","cropperDirection","topDelta","leftDelta","change","cursor","parentOffset","mouseX","mouseY","lb","rb","tb","bb","topLeft","topRight","bottomRight","bottomLeft","zoomMode","topVerticalSegment","bottomVerticalSegment","rightHorizontalSegment","leftHorizontalSegment","verticalOffset","horizontalOffset","_debug","fabricObj","debugger","points","ab","_getVector","bc","scalarAbAb","_getScalarProduct","scalarBcBc","point","ap","bp","scalarAbAp","scalarBcBp","projectsOnAB","projectsOnBC","_getVectorMagnitude","vector","_getAngleBetweenVectors","acos","edgePoints","centerPoint","smallestDiff","edgeCrossed","edgeIndex","toCenter","edgeVector","toVertex","diff","box","proportion","AssetIndex","$includeSubfoldersContainer","$includeSubfoldersCheckbox","showingIncludeSubfoldersCheckbox","$uploadButton","$uploadInput","$progressBar","$folders","uploader","promptHandler","progressBar","_uploadTotalFiles","_uploadFileProgress","_uploadedAssetIds","_currentUploaderSettings","_assetDrag","_folderDrag","_expandDropTargetFolderTimeout","_tempExpandedFolders","_fileConflictTemplate","choices","_folderConflictTemplate","_initIndexPageMode","_createFolderContextMenu","_getSourceLevel","updateDropTargets","contextMenu","parentsUntil","onDragStartProxy","onDropTargetChangeProxy","DragDrop","activeDropTargetClass","helperOpacity","helper","$file","_getFileDragHelper","dropTargets","$draggee","targets","onDragStart","onDropTargetChange","onDragStop","helperBaseZindex","$selected","draggees","_getFolderUidFromSourceKey","$draggeeHelper","$helperSidebar","$helperNav","$helperUl","padding-top","padding-right","padding-bottom","padding-left","draggedSourceIds","_onFileDragStop","$activeDropTarget","originatingSource","targetFolderId","originalAssetIds","originalAssetId","_positionProgressBar","resetProgressBar","setItemCount","showProgressBar","parameterArray","folderId","onMoveFinish","responseArray","resetPrompts","conflict","addPrompt","suggestedFilename","prompt","hideProgressBar","performAfterMoveActions","_collapseExtraExpandedFolders","getPromptCount","promptCallback","returnData","newParameterArray","choice","apply","_performBatchRequests","fadeOutHelpers","showBatchPrompts","returnHelpersToDraggees","_onFolderDragStop","folderIds","parentId","requestId","fileMoveList","newSourceKey","transferList","newFolderId","newFolderUid","merge","_performActualFolderMove","folderDeleteList","moveCallback","counter","_getRootSource","$parent","_getParentSource","_selectSourceByFolderId","$targetSource","_getSourceByKey","$parentSources","$parentSource","style","insertBefore","PromptHandler","ProgressBar","fileInput","dropZone","events","fileuploadstart","fileuploadprogressall","fileuploaddone","kind","allowedKinds","Uploader","defaultVolumeHandle","setParams","$rootSource","$subContainer","checked","marginBottom","includeSubfolders","_onUploadStart","_onUploadProgress","progress","loaded","setProgressPercentage","_onUploadComplete","files","doReload","file","isLastUpload","_updateAfterUpload","_uploadFollowup","finalCallback","doFollowup","parameterIndex","followupCallback","incrementProcessedItemCount","updateProgressBar","sourceAssetId","conflictingAssetId","targetFilename","_onUpdateElements","_onKeyDown","_onElementFocus","shiftKey","PreviewFileModal","openInstance","selfDestruct","$focusedItem","_loadPreview","startingWidth","startingHeight","_onDragStart","$outerContainer","$innerContainer","_$firstRowCells","$helperCells","$helperCell","$firstRowCell","_onDropTargetChange","$dropTarget","dropTargetFolder","_hasSubfolders","_isExpanded","dropTargetFolderId","$excludedSources","_collapseFolder","_expandFolder","menuOptions","onClick","ContextMenu","menuClass","_createSubfolder","$parentFolder","subfolderName","folderName","_prepareParentForChildren","$subfolder","folderUid","_appendSubfolder","_deleteFolder","$targetFolder","folder","_cleanUpTree","_renameFolder","oldName","newName","$existingChildren","subfolderLabel","folderInserted","$existingChild","before","windowHeight","doRequest","parameters","AssetSelectInput","$uploadBtn","originalFilename","originalExtension","resetOriginalFilename","_renameHelper","validateElementForm","canUpload","_attachUploader","defaultFieldLayoutId","formData","multiple","canAddMoreFiles","$existing","selectUploadedFile","$newElement","margin","slotsTaken","_parseFilename","parts","extension","pop","baseFileName","endPos","selectionStart","selectionEnd","createRange","select","range","collapse","moveEnd","moveStart","$filenameField","ext","oldExt","newExt","AssetSelectorModal","$selectTransformBtn","_selectedTransform","transforms","createSelectTransformButton","$btnGroup","$menuList","MenuButton","onOptionSelect","allowTransforms","onSelectTransform","transform","selectImagesWithTransform","transformUrls","imageIdsWithMissingUrls","$item","fetchMissingTransformUrls","canSelectImageTransforms","AuthManager","remainingSessionTime","checkRemainingSessionTimer","showLoginModalTimer","decrementLogoutWarningInterval","showingLogoutWarningModal","showingLoginModal","logoutWarningModal","loginModal","$logoutWarningPara","$passwordInput","$passwordSpinner","$loginBtn","$loginErrorPara","submitLoginIfLoggedOut","updateRemainingSessionTime","setCheckRemainingSessionTimer","checkRemainingSessionTime","extendSession","responseJSON","minSafeSessionTime","showLogoutWarningModal","checkInterval","submitLogin","showLoginModal","hideLogoutWarningModal","hideLoginModal","quickShow","$logoutBtn","$renewSessionBtn","autoShow","shadeClass","updateLogoutWarningMessage","time","decrementLogoutWarning","quick","quickHide","$inputContainer","$inputsFlexContainer","$passwordContainer","$buttonContainer","$passwordWrapper","PasswordInput","onToggleInput","$newPasswordInput","logout","renewSession","validatePassword","login","clearLoginError","loginName","username","password","showLoginError","CP","authManager","$nav","$mainContainer","$alerts","$crumbs","$notificationContainer","$primaryForm","$headerContainer","$mainContent","$details","$tabsContainer","$tabsList","$overflowTabBtn","$overflowTabList","$selectedTab","selectedTabIndex","$sidebarContainer","$contentContainer","$edition","$confirmUnloadForms","$deltaForms","$collapsibleTables","fixedHeader","enableQueue","totalJobs","jobInfo","displayedJobInfo","displayedJobInfoUnchanged","trackJobProgressTimeout","jobProgressIcon","checkingForUpdates","forcingRefreshOnUpdatesCheck","includingDetailsOnUpdatesCheck","checkForUpdatesCallbacks","updateFixedHeader","handleWindowResize","$errorNotifications","$otherNotifications","delay","notificationDuration","initAlerts","shortcuts","shortcut","submitPrimaryForm","initTabs","scrollTo","initSpecialForms","serialized","$forms","submit","confirmUnload","livePreview","inPreviewMode","originalEvent","returnValue","_handleInputFocus","_handleInputBlur","saveShortcut","toggleNav","toggleClass","toggleSidebar","selectTab","_selectTab","tab","deselectTab","updateTabs","updateResponsiveTables","maxWidth","totalWidth","showOverflowMenu","tabMargin","_i","_$table","_containerWidth","_check","_isCollapsed","getBoundingClientRect","headerHeight","max-height","displayNotification","$notification","fadedMargin","margin-left","margin-right","display","notificationType","fetchAlerts","displayAlerts","alerts","margin-top","$shunnableAlerts","$link","checkForUpdates","forceRefresh","includeDetails","realCallback","_checkForUpdates","updateUtilitiesBadge","callbacks","updateInfo","_getUpdates","_checkForCachedUpdates","cached","onlyIfCached","updates","_cacheUpdates","$utilitiesLink","$badge","badgeCount","runQueueAutomatically","trackJobProgress","_trackJobProgressInternal","setJobInfo","jobs","oldInfo","getDisplayedJobInfo","progressLabel","updateJobIcon","statuses","JOB_STATUS_RESERVED","JOB_STATUS_FAILED","JOB_STATUS_WAITING","j","JobProgressIcon","hideFailMode","setDescription","description","setProgress","showFailMode","JOB_STATUS_DONE","$progressLabel","failMode","_$bgCanvas","_$staticCanvas","_$hoverCanvas","_$failCanvas","_staticCtx","_hoverCtx","_canvasSize","_arcPos","_arcRadius","_lineWidth","_arcStartPos","_arcEndPos","_arcStartStepSize","_arcEndStepSize","_arcStep","_arcStepTimeout","_arcAnimateCallback","_progressBar","canAccessQueueManager","$canvasContainer","$labelContainer","_createCanvas","_drawArc","_animateArc","_setArc","color","$canvas","ctx","lineCap","startPos","arc","closePath","targetStartPos","targetEndPos","_takeNextArcStep","CategoryIndex","editableGroups","$newCategoryBtnGroup","$newCategoryBtn","editableCategoryGroups","group","uid","defaultGroupHandle","updateButton","selectedSourceHandle","selectedGroup","$menuBtn","_getGroupTriggerHref","_openCreateCategoryModal","getAttribute","menuHtml","menuBtn","primarySiteId","groupId","newCategoryBtnText","groupSourceKey","CategorySelectInput","selectedCategoryIds","categoryIds","branchLimit","selectionLabel","$newElementsContainer","filteredElements","$allCategories","_animateCategoryAway","charts","DataTable","columns","rows","forEach","cellIndex","parseTime","timeParse","Tip","$tip","setContent","setPosition","BaseChart","$chart","chartBaseClass","dataTable","timeFormatLocale","svg","globalSettings","formats","d3Formats","formatLocaleDefinition","timeFormatLocaleDefinition","d3TimeFormatLocaleDefinition","resize","baseSettings","draw","chartClass","onAfterDrawTicks","tickKey","tick","$tickText","numberFormat","percentFormat","currencyFormat","shortDateFormats","day","month","year","bottom","colors","Area","tip","drawingArea","getChartMargin","translateX","translateY","drawTicks","drawAxes","drawChart","drawTipTriggers","getX","xAxis","axisBottom","tickFormat","getXFormatter","ticks","yAxis","getY","axisLeft","getYFormatter","tickValues","getYTickValues","axisRight","showAxis","tickSizeOuter","gridlines","xLineAxis","tickSize","yLineAxis","line","datum","area","y0","y1","plots","enter","tips","chartMargin","xAxisTickInterval","node","getTotalLength","tipTriggerWidth","$content","$xValue","$yValue","content","yTicksMaxWidth","computedTickWidth","padded","xDomainMin","xDomainMax","xDomain","scaleTime","yDomain","getYMaxValue","scaleLinear","utils","getTimeFormatter","getNumberFormatter","maxValue","getDuration","secondsNum","chartSettings","dataScale","ColorInput","$colorContainer","$colorPreview","$colorInput","createColorInput","handleTextChange","setAttribute","updateColor","_browserSupportsColorInputs","doesBrowserSupportColorInputs","$elementIndexSourcesContainer","$sourcesContainer","$sourceSettingsContainer","$newHeadingBtn","$footerBtnContainer","$saveSpinner","$loadingSpinner","sourceSort","updateSourcesOnSave","availableTableAttributes","setContainer","buildModal","addSource","sourceData","$itemLabel","$itemInput","heading","Heading","updateItemLabel","Source","handleNewHeadingBtnClick","scrollContainerToElement","$pendingHeading","$lastSource","$indexSource","getIndexSource","isHeading","appendSource","$extraSources","nextAll","BaseSource","$settingsContainer","isSelected","deselect","createSettings","$settings","headerColHeading","defaultHeaderColHeading","tableAttributes","createTableColumnsField","firstKey","firstLabel","$titleColumnCheckbox","createTableColumnOption","$columnCheckboxes","selectedAttributes","createField","instructions","createCheckbox","disabled","$labelField","$labelInput","handleLabelInputChange","deleteHeading","table","$rows","caboose","Y_AXIS","getHelper","$helperRow","helperClass","$cells","DeleteUserModal","userId","$deleteActionRadios","$deleteSpinner","userSelect","_deleting","contentSummary","idParam","$deleteSubmitBtn","_submitBtnLabel","validateDeleteInputs","withContent","num","validates","handleSubmit","DraftEditor","$revisionBtn","$revisionLabel","$expandSiteStatusesBtn","$statusIcon","$editMetaBtn","metaHud","$nameTextInput","$saveMetaBtn","$siteStatusPane","$globalLightswitch","$siteLightswitches","$addlSiteField","siteIds","newSiteIds","enableAutosave","lastSerializedValue","listeningForChanges","pauseLevel","saving","saveXhr","queue","submittingForm","duplicatedElements","preview","previewToken","autosaveDrafts","siteStatuses","canEditMultipleSites","previewTargets","enablePreview","$shareBtn","openShareLink","createShareMenu","revisionId","serializeForm","draftId","initForDraft","createDraft","canUpdateSource","listenForChanges","statusIcons","stopListeningForChanges","createEditMetaBtn","showStatusHud","mergeChanges","reload","expandSiteStatuses","$enabledForSiteField","_getOtherSupportedSites","s","_createSiteStatusField","$globalField","createLightswitchField","_showField","originalEnabledValue","enabled","enabledForSite","originalSerializedStatus","_updateGlobalStatus","serializedStatuses","addlSiteIds","_createAddlSiteField","_updateSiteStatuses","$field","overflow","_removeField","allEnabled","allDisabled","turnOn","turnOff","turnIndeterminate","site","$lightswitch","addlSites","$addlSiteSelectContainer","createSelect","$addlSiteSelect","bodyHtml","spinners","getPreviewToken","sourceId","getTokenizedPreviewUrl","randoParam","isLive","siteToken","tokenParam","getPreview","Preview","$statusIcons","openPreview","ensureIsDraftOrRevision","onlyIfChanged","removeActionParams","isPreviewActive","$editor","isUnpublishedDraft","saveDraft","isActive","$spinners","saveDraftAction","prepareData","docTitle","draftName","revisionMenu","draftCreated","newHref","anchorPos","$actionButtonContainer","publishDraftAction","hashedCpEditUrl","$saveBtnContainer","deleteDraftAction","data-align","clientOs","hashedAddAnotherRedirectUrl","$draftsUl","$draftHeading","$draftLi","$draftA","$siteOptions","$siteOption","creator","timestamp","updatePreviewTargets","afterUpdate","checkMetaValues","oldId","swapDuplicatedElementIds","getDeltaNames","idsRE","pre","post","newTarget","nextInQueue","showMetaHud","createMetaHud","onMetaHudShow","$hudBody","$nameField","$nameInputContainer","saveMeta","onMetaHudHide","onMetaHudEscape","shakeMetaHud","handleFormSubmit","autosave","abort","DynamicGenerator","EditableTable","baseName","biggestId","$addRowBtn","rowCount","hasMaxRows","hasMinRows","radioCheckboxes","log","copyDraggeeInputValuesToHelper","isVisible","initialize","minRows","createRowObj","updateAddRowButton","initializeIfVisible","canAddRow","canDeleteRow","deleteRow","$tr","onDeleteRow","staticRows","maxRows","focus","rowId","rowIdPrefix","createRow","defaultValues","onAddRow","Row","focusOnPrevRow","tdIndex","blurTd","prevRow","$prevTr","$tds","focusOnNextRow","nextRow","$nextTr","importData","lines","textualColTypes","data-id","colId","$cell","col","scope","code","small","createDateInput","createLightswitch","default","createTimeInput","createTextInput","niceTexts","tds","$textareas","tr","td","$textarea","$checkbox","textareasByColId","onHeightChange","radioMode","toggle","applyToggleCheckbox","onTextareaHeightChange","autopopulate","HandleGenerator","allowNonAlphaStart","onTextareaFocus","onRadioCheckboxChange","checkbox","checkboxColId","neg","checkboxCol","colum","ignoreNextTextareaFocus","handleKeypress","charCode","isCtrlKeyPressed","numericKeyCodes","handlePaste","clipboardData","getData","validateValue","safeValue","tallestTextareaHeight","tdHeight","ElementActionTrigger","maxLevels","newChildUrl","$trigger","triggerEnabled","activate","updateTrigger","validateSelection","enableTrigger","disableTrigger","valid","batch","handleTriggerActivation","workers","Worker","$thumbs","$thumb","$scrollParent","scrollParent","addToQueue","invisibleThumbs","thumb","active","loadNext","scrollParentOffset","scrollParentHeight","thumbOffset","retryAll","loader","$img","alt","ElevatedSessionForm","inputs","form","getInputPostVal","elevatedSessionManager","fetchingTimeout","stopImmediatePropagation","inputsChanged","$currentInput","requireElevatedSession","ElevatedSessionManager","passwordModal","$submitBtn","$errorPara","minSafeElevatedSessionTimeout","showPasswordModal","$passwordModal","focusPasswordInput","submitPassword","currentPassword","showPasswordError","EntryIndex","publishableSections","$newEntryBtnGroup","$newEntryBtn","section","defaultSectionHandle","selectedSection","_getSectionTriggerHref","_openCreateEntryModal","sectionId","newEntryBtnText","typeId","entryTypes","canPublish","sectionSourceKey","FieldLayoutDesigner","$tabContainer","$newTabBtn","$libraryToggle","$selectedLibrary","$fieldLibrary","$uiLibrary","$uiLibraryElements","$fieldSearch","$clearFieldSearchBtn","$fieldGroups","$fields","tabGrid","elementDrag","$workspace","$fieldSearchContainer","initTab","elementPlacementInputName","ElementDrag","customizableTabs","tabDrag","TabDrag","customizableUi","$libraryPicker","Listbox","$selectedOption","$matches","$group","$editBtn","data-action","initElement","Element","onTabOptionSelect","renameTab","removeTab","$prev","$next","$labelSpan","getElementPlacementInputName","removeFieldByHandle","removeField","refreshCols","addTab","tabName","elementConfigInputName","designer","$placementInput","$configInput","config","isField","requirable","hasCustomWidth","hasSettings","settingsHtml","isRequired","createSettingsHud","initUi","updatePlacementInput","updateConfigInput","SlidePicker","step","valueLabel","pct","applyHudSettings","serializeArray","updateRequiredClass","console","required","BaseDrag","Drag","$insertion","showingInsertion","$caboose","findItems","createInsertion","createCaboose","removeCaboose","swapDraggeeWithInsertion","swapInsertionWithDraggee","setMidpoints","getClosestItem","_closestItem","_closestItemMouseDiff","_$item","_midpoint","_mouseDiff","getDist","checkForNewClosestItem","draggeeDisplay","visibility","FX_DURATION","helpers","_showDraggee","onDrag","draggingLibraryElement","draggingField","isDraggeeMandatory","isHoveringOverTab","hitTest","$fieldContainers","$libraryElement","targetPrefix","targetSelector","reverseTargetSelector","_$target","_$reverseTarget","getType","normalizeTargetSelector","findTargets","onToggleChange","nodeName","warn","getToggleVal","postVal","hideTarget","showTarget","_show","_currentHeight","$t","_targetHeight","totalCols","colGutterDrop","colPctWidth","possibleItemColspans","possibleItemPositionsByColspan","itemPositions","itemColspansByPosition","layouts","layout","itemHeights","leftPadding","_refreshingCols","_refreshColsAfterRefresh","_forceRefreshColsAfterRefresh","handleContainerHeightProxy","setItems","oldHeight","scrollHeight","gutter","itemIndex","tallestItemHeight","colIndex","itemHeight","remainder","itemHeightsByColspan","positionRight","positionLeft","minColspan","maxColspan","colspan","getItemWidthCss","minPosition","maxPosition","colHeights","createLayouts","layoutTotalCols","highestTotalCols","layoutHeights","shortestHeight","shortestLayouts","emptySpaces","emptySpace","colspans","getItemLeftPosCss","positions","isSimpleLayout","margin-bottom","positionItems","completeRefreshCols","onRefreshCols","getItemWidth","getItemWidthInPx","getItemLeftPosInPx","prevPositions","prevColspans","prevColHeights","prevEmptySpace","LayoutGenerator","endingCol","affectedColHeights","onItemResize","newHeight","tallestColHeightsByPosition","colHeightsForPosition","tallestColHeight","words","ImageUpload","initImageUpload","containerSelector","uploadAction","postParameters","fileInputSelector","uploadParamName","fileuploadfail","initButtons","uploadButtonSelector","deleteButtonSelector","refreshImage","onAfterRefreshImage","_onUploadError","$icon","hudClass","indeterminate","dragger","dragStartMargin","outerContainer","X_AXIS","muteEvent","changed","_getOffMargin","_onMouseDown","_onMouseUp","dragging","RIGHT_KEY","LEFT_KEY","_getMargin","_onDrag","mouseDistX","_onDragStop","_onSettle","selectedOptionIndex","UP_KEY","selectPrev","DOWN_KEY","selectNext","selectedClass","focusClass","LivePreview","$extraFields","$dragHandle","$previewContainer","$iframeContainer","$iframe","$fieldPlaceholder","previewUrl","basePostData","fields","lastPostData","updateIframeInterval","loading","checkAgain","dragStartEditorWidth","_slideInOnIframeLoad","_handleSuccessProxy","_handleErrorProxy","_forceUpdateIframeProxy","_scrollX","_scrollY","_editorWidth","_editorWidthInPx","protocol","previewParams","extraFields","defaultEditorWidth","moveFieldsBack","editorWidthInPx","inPx","minEditorWidthInPx","exit","$editorHeader","$closeBtn","getIframeWidth","$clone","_getClone","updateIframe","slideIn","createToken","previewAction","updateWidths","$newClone","field","contentWindow","scrollLeft","X-Craft-Token","xhrFields","withCredentials","crossDomain","forceUpdateIframe","handleSuccess","write","onResponse","handleError","copyInputValues","$textInput","$showPasswordToggle","showingPassword","passwordInput","initInputFocusEvents","hidePassword","setCurrentInput","updateToggleLabel","showPassword","togglePassword","onKeyDown","ALT_KEY","onKeyUp","onInputChange","onToggleMouseDown","$targetBtn","$targetMenu","iframeLoaded","$tempInput","activeTarget","iframeHeight","_updateIframeProxy","$previewHeader","switchTarget","previewTarget","_useIframeResizer","previewIframeResizerOptions","resetScroll","refresh","sameHost","frameborder","iFrameResize","checkOrigin","scrolling","onInit","iframe","defaultSettings","_onHide","instance","loadAsset","focusItem","empty","desiredHeight","desiredWidth","containerHeight","containerWidth","minGutter","_resizeContainer","previewHtml","max-width","$innerProgressBar","$progressBarStatus","_itemCount","_processedItemCount","_displaySteps","displaySteps","setProcessedItemCount","fadeTo","incrementItemCount","percentage","$modalContainerDiv","$prompt","$promptApplyToRemainingContainer","$promptApplyToRemainingCheckbox","$promptApplyToRemainingLabel","$pomptChoices","_prompts","_promptBatchCallback","_promptBatchReturnData","_promptBatchNum","_showNextPromptInBatch","remainingInBatch","_showPrompt","_handleBatchPromptSelection","applyToRemaining","choiceData","itemsToGo","_promptCallback","$promptMessage","$promptChoices","$promptButtons","$radioButton","_selectPromptChoice","fadeOut","_cancelPrompt","totalSteps","_min","_max","Number","isInteger","prevAll","triggerEvent","aria-valuenow","aria-valuetext","$activeButton","startPositionX","graduationsMin","graduationsMax","slideMin","slideMax","$overlay","$cursor","$graduations","$graduationsUl","graduationsCalculatedWidth","_handleResize","valueToPosition","_handleTapStart","touch","startLeft","_handleTapMove","curX","positionToValue","_handleTapEnd","scaleMin","scaleMax","SlugGenerator","allowUppercaseInSlug","limitAutoSlugsToAscii","XRegExp","matchChain","slugWordSeparator","Structure","structureDrag","$parents","initToggle","StructureDrag","initNewChildMenus","viewStateKey","$addBtns","onNewChildMenuClick","showMenu","getIndent","level","baseIndent","nestedIndent","addElement","$addBtn","$parentUl","_removeUl","structure","draggeeLevel","$helperLi","$targets","draggeeHeight","$level","cancelDrag","$lis","$closestTarget","closestTargetPos","closestTargetYDiff","closestTargetOffset","closestTargetHeight","targetOffset","targetHeight","targetYMidpoint","targetYDiff","$closestTargetLi","closestTargetLevel","$nextTargetLi","nextTargetLevel","hoveringBetweenRows","draggeeX","targetItemMouseDiffX","$parentLis","$closestParentLi","closestParentLiXDiff","closestParentLevel","$parentLi","parentLiX","parentLiXDiff","parentLevel","onMouseUp","$draggeeParent","moved","$closestSiblings","newLevel","setLevel","structureId","prevId","indent","$childLis","StructureTableSorter","tableView","_basePadding","_helperMargin","_$titleHelperCell","_titleHelperCellOuterWidth","_ancestors","_updateAncestorsFrame","_updateAncestorsProxy","_draggeeLevel","_draggeeLevelDelta","draggingLastElements","_loadingDraggeeLevelDelta","_targetLevel","_targetLevelBounds","_positionChanged","singleHelper","helperSpacingY","findDraggee","$nextRow","nextRowLevel","nextRowLevelDelta","_getAjaxBaseData","delta","drag","canInsertBefore","_getLevelBounds","canInsertAfter","_getAncestors","_setTargetLevelBounds","_updateIndent","onInsertionPointChange","_updateAncestorsBeforeRepaint","levelDiff","padding","_getLevelIndent","$prevRow","prevRowLevel","$spinnerRow","_createSpinnerRowAfter","onPositionChange","_expandElement","onReturnHelpersToDraggees","newDraggeeIndexes","oldDraggeeIndexes","$postDraggeeItems","_minLevel","_maxLevel","forcePositionChange","_mouseDist","realMouseX","mousedownX","_indentationDist","LEVEL_INDENT","_targetLevelMouseDiff","_magnetImpact","MAX_GIVE","_closestLevelMagnetIndent","targetLevel","_level","_$prevRow","cancelAnimationFrame","_updateAncestors","_$ancestor","_newAncestors","HELPER_MARGIN","$selectedSortHeader","structureTableSort","_totalVisiblePostStructureTableDraggee","_morePendingPostStructureTableDraggee","initTableHeaders","_collapseElement","selectedSortAttr","$tableHeaders","selectedSortDir","_isStructureTableDraggingLastElements","positionedAfter","includeTableAttributesForSource","_updateTableAttributes","$nextNextRow","descendantOf","$nextRows","_handleSelectedSortHeaderClick","newSortDir","_handleSortHeaderClick","_handleUnselectedSortHeaderClick","TagSelectInput","searchMenu","$addTagInput","_ignoreBlur","selectTag","$hoverOption","$nextOption","focusOption","$prevOption","searchForTags","killSearchMenu","excludeIds","tagGroupId","tags","exclude","exactMatch","Menu","attachToElement","data-site-id","targetSiteId","data-label","data-editable","$titleContainer","inputmode","maxlength","autofocus","getAutofocusValue","autocomplete","getDisabledValue","readonly","showCharsLeft","createCopyTextInput","buttonId","execCommand","createCopyTextField","createCopyTextPrompt","createTextarea","createTextareaField","$select","data-target-prefix","optgroup","$optgroup","selected","data-target","data-reverse-target","reverseToggle","for","createCheckboxField","createCheckboxSelect","allValue","allChecked","showAllOption","allLabel","createCheckboxSelectField","data-value","data-indeterminate-value","aria-labelledby","labelId","containerId","$colorPreviewContainer","createColorField","getMonth","formattedValue","timezone","defaultDate","createDateField","createDateRangePicker","today","getFullYear","getDate","startDate","endDate","$allOption","firstDayOffset","getDay","firstDay","$flex","$startDate","$endDate","$dateInputs","dpDiv","setPositionRelativeToAnchor","startTime","endTime","foundOption","btnClasses","timepicker","timepickerOptions","getHours","getMinutes","getSeconds","createTimeField","warning","addErrorsToField","addErrorsToList","$errors","clearErrorsFromField","_rejectedFiles","_extensionList","_totalFileCounter","_validFileCounter","autoUpload","fileupload","paramObject","getInProgress","onFileAdd","validateExtension","_createExtensionList","process","done","pass","fileExtension","maxFileSize","originalFiles","processErrorMessages","kinds","humanFileSize","maxUploadSize","bytes","u","toFixed","allowedKind","fileKinds","extensions","pasteZone","sequentialUploads","Accept","UriFormatGenerator","uriFormat","suffix"],"mappings":"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","file":"Craft.min.js","sourcesContent":["(function($){\n\n/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function( html ) {\n    return html.replace( rxhtmlTag, \"<$1></$2>\" );\n};\n\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        _processedApiHeaders: false,\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n                // Get the latest headers\n                this.getApiHeaders(cancelToken).then(apiHeaders => {\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    axios.request(options).then((apiResponse) => {\n                        // Send the API response back immediately\n                        resolve(apiResponse.data);\n\n                        if (!this._processedApiHeaders) {\n                            if (apiResponse.headers['x-craft-license-status']) {\n                                this._processedApiHeaders = true;\n                                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                                    data: {\n                                        headers: apiResponse.headers,\n                                    },\n                                    cancelToken: cancelToken,\n                                });\n\n                                // If we just got a new license key, set it and then resolve the header waitlist\n                                if (this._apiHeaders && this._apiHeaders['X-Craft-License'] === '__REQUEST__') {\n                                    this._apiHeaders['X-Craft-License'] = window.cmsLicenseKey = apiResponse.headers['x-craft-license'];\n                                    this._resolveHeaderWaitlist();\n                                }\n                            } else if (\n                                this._apiHeaders &&\n                                this._apiHeaders['X-Craft-License'] === '__REQUEST__' &&\n                                this._apiHeaderWaitlist.length\n                            ) {\n                                // The request didn't send headers. Go ahead and resolve the next request on the\n                                // header waitlist.\n                                this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                            }\n                        }\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    resolve(this._apiHeaders);\n\n                    // If we are requesting a new Craft license, hold off on\n                    // resolving other API requests until we have one\n                    if (response.data['X-Craft-License'] !== '__REQUEST__') {\n                        this._resolveHeaderWaitlist();\n                    }\n                }).catch(e => {\n                    this._loadingApiHeaders = false;\n                    reject(e)\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[1](e);\n                    }\n                });\n            });\n        },\n\n        _resolveHeaderWaitlist: function() {\n            this._loadingApiHeaders = false;\n\n            // Was anything else waiting for them?\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._processedApiHeaders = false;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = function() {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                }.bind(this);\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         */\n        findDeltaData: function(oldData, newData, deltaNames) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, true);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                }\n            }\n\n            return params.join('&');\n        },\n\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, useInitialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = decodeURIComponent(params[p]).substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(params[p]);\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(params[p]);\n                }\n            }\n\n            if (useInitialValues) {\n                for (let name in Craft.initialDeltaValues) {\n                    if (Craft.initialDeltaValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(Craft.initialDeltaValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return arr.includes(elem);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Prevents the outline when an element is focused by the mouse.\n         *\n         * @param elem Either an actual element or a jQuery collection.\n         */\n        preventOutlineOnMouseFocus: function(elem) {\n            var $elem = $(elem),\n                namespace = '.preventOutlineOnMouseFocus';\n\n            $elem.on('mousedown' + namespace, function() {\n                    $elem.addClass('no-outline');\n                    $elem.trigger('focus');\n                })\n                .on('keydown' + namespace + ' blur' + namespace, function(event) {\n                    if (event.keyCode !== Garnish.SHIFT_KEY && event.keyCode !== Garnish.CTRL_KEY && event.keyCode !== Garnish.CMD_KEY) {\n                        $elem.removeClass('no-outline');\n                    }\n                });\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.pill', $container).pill();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n    });\n\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        pill: function() {\n            return this.each(function() {\n                if (!$.data(this, 'pill')) {\n                    new Garnish.Pill(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: {\n                        customTrigger: $btn,\n                    }\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend(\n    {\n        $element: null,\n        elementId: null,\n        siteId: null,\n        deltaNames: null,\n        initialData: null,\n\n        $form: null,\n        $fieldsContainer: null,\n        $cancelBtn: null,\n        $saveBtn: null,\n        $spinner: null,\n\n        $siteSelect: null,\n        $siteSpinner: null,\n\n        hud: null,\n\n        init: function(element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            }\n\n            this.$element = $(element);\n            this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n            this.loadHud();\n        },\n\n        setElementAttribute: function(name, value) {\n            if (!this.settings.attributes) {\n                this.settings.attributes = {};\n            }\n\n            if (value === null) {\n                delete this.settings.attributes[name];\n            } else {\n                this.settings.attributes[name] = value;\n            }\n        },\n\n        getBaseData: function() {\n            var data = $.extend({}, this.settings.params);\n\n            if (this.settings.siteId) {\n                data.siteId = this.settings.siteId;\n            } else if (this.$element && this.$element.data('site-id')) {\n                data.siteId = this.$element.data('site-id');\n            }\n\n            if (this.settings.elementId) {\n                data.elementId = this.settings.elementId;\n            } else if (this.$element && this.$element.data('id')) {\n                data.elementId = this.$element.data('id');\n            }\n\n            if (this.settings.elementType) {\n                data.elementType = this.settings.elementType;\n            }\n\n            if (this.settings.attributes) {\n                data.attributes = this.settings.attributes;\n            }\n\n            if (this.settings.prevalidate) {\n                data.prevalidate = 1;\n            }\n\n            return data;\n        },\n\n        loadHud: function() {\n            this.onBeginLoading();\n            var data = this.getBaseData();\n            data.includeSites = Craft.isMultiSite && this.settings.showSiteSwitcher;\n            Craft.postActionRequest('elements/get-editor-html', data, $.proxy(this, 'showHud'));\n        },\n\n        showHud: function(response, textStatus) {\n            this.onEndLoading();\n\n            if (textStatus === 'success') {\n                var $hudContents = $();\n\n                if (response.sites) {\n                    var $header = $('<div class=\"hud-header\"/>');\n\n                    if (response.sites.length === 1) {\n                        $('<h5/>', {text: response.sites[0].name}).appendTo($header);\n                    } else {\n                        var $siteSelectContainer = $('<div class=\"select\"/>').appendTo($header);\n\n                        this.$siteSelect = $('<select/>').appendTo($siteSelectContainer);\n                        this.$siteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($header);\n\n                        for (var i = 0; i < response.sites.length; i++) {\n                            var siteInfo = response.sites[i];\n                            $('<option value=\"' + siteInfo.id + '\"' + (siteInfo.id == response.siteId ? ' selected=\"selected\"' : '') + '>' + siteInfo.name + '</option>').appendTo(this.$siteSelect);\n                        }\n\n                        this.addListener(this.$siteSelect, 'change', 'switchSite');\n                    }\n\n                    $hudContents = $hudContents.add($header);\n                }\n\n                this.$form = $('<div/>');\n                this.$fieldsContainer = $('<div class=\"fields\"/>').appendTo(this.$form);\n\n                this.updateForm(response, true);\n\n                this.onCreateForm(this.$form);\n\n                var $footer = $('<div class=\"hud-footer\"/>').appendTo(this.$form),\n                    $buttonsContainer = $('<div class=\"buttons right\"/>').appendTo($footer);\n                this.$cancelBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Cancel'),\n                }).appendTo($buttonsContainer);\n                this.$saveBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Save'),\n                }).appendTo($buttonsContainer);\n                this.$spinner = $('<div class=\"spinner hidden\"/>').appendTo($buttonsContainer);\n\n                $hudContents = $hudContents.add(this.$form);\n\n                if (!this.hud) {\n                    var hudTrigger = (this.settings.hudTrigger || this.$element);\n\n                    this.hud = new Garnish.HUD(hudTrigger, $hudContents, {\n                        bodyClass: 'body elementeditor',\n                        closeOtherHUDs: false,\n                        hideOnEsc: false,\n                        hideOnShadeClick: false,\n                        onShow: this.onShowHud.bind(this),\n                        onHide: this.onHideHud.bind(this),\n                        onSubmit: this.saveElement.bind(this),\n                    });\n\n                    Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.maybeCloseHud.bind(this));\n                    this.hud.addListener(this.hud.$shade, 'click', this.maybeCloseHud.bind(this));\n\n                    this.hud.$hud.data('elementEditor', this);\n\n                    // Disable browser input validation\n                    this.hud.$body.attr('novalidate', '');\n\n                    this.hud.on('hide', $.proxy(function() {\n                        delete this.hud;\n                    }, this));\n                } else {\n                    this.hud.updateBody($hudContents);\n                    this.hud.updateSizeAndPosition();\n                }\n\n                // Focus on the first text input\n                $hudContents.find('.text:first').trigger('focus');\n\n                this.addListener(this.$cancelBtn, 'click', function() {\n                    this.hud.hide();\n                });\n            }\n        },\n\n        switchSite: function() {\n            if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n                this.$siteSelect.val(this.siteId);\n                return;\n            }\n\n            var newSiteId = this.$siteSelect.val();\n\n            if (newSiteId == this.siteId) {\n                return;\n            }\n\n            this.$siteSpinner.removeClass('hidden');\n\n            this.reloadForm({siteId: newSiteId}, $.proxy(function(textStatus) {\n                this.$siteSpinner.addClass('hidden');\n                if (textStatus !== 'success') {\n                    // Reset the site select\n                    this.$siteSelect.val(this.siteId);\n                }\n            }, this));\n        },\n\n        reloadForm: function(data, callback) {\n            data = $.extend(this.getBaseData(), data);\n\n            Craft.postActionRequest('elements/get-editor-html', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.updateForm(response, true);\n                }\n\n                if (callback) {\n                    callback(textStatus);\n                }\n            }, this));\n        },\n\n        updateForm: function(response, refreshInitialData) {\n            this.siteId = response.siteId;\n            this.$fieldsContainer.html(response.html);\n\n            if (refreshInitialData !== false) {\n                this.deltaNames = response.deltaNames;\n            }\n\n            // Swap any instruction text with info icons\n            let $allInstructions = this.$fieldsContainer.find('> .meta > .field > .instructions');\n\n            for (let i = 0; i < $allInstructions.length; i++) {\n                let $instructions = $allInstructions.eq(i);\n                let $label = $instructions.siblings('.heading').children('label');\n                $('<span/>', {\n                    'class': 'info',\n                    'html': $instructions.children().html()\n                }).appendTo($label);\n                $instructions.remove();\n            }\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                Craft.appendHeadHtml(response.headHtml);\n                Craft.appendFootHtml(response.footHtml);\n                Craft.initUiElements(this.$fieldsContainer);\n\n                if (refreshInitialData) {\n                    this.initialData = this.hud.$body.serialize();\n                }\n            }, this));\n        },\n\n        saveElement: function() {\n            var validators = this.settings.validators;\n\n            if ($.isArray(validators)) {\n                for (var i = 0; i < validators.length; i++) {\n                    if ($.isFunction(validators[i]) && !validators[i].call()) {\n                        return false;\n                    }\n                }\n            }\n\n            this.$spinner.removeClass('hidden');\n\n            var data = $.param(this.getBaseData()) + '&' + this.hud.$body.serialize();\n            data = Craft.findDeltaData(this.initialData, data, this.deltaNames);\n\n            Craft.postActionRequest('elements/save-element', data, $.proxy(function(response, textStatus) {\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        if (this.$element && this.siteId == this.$element.data('site-id')) {\n                            // Update the label\n                            var $title = this.$element.find('.title'),\n                                $a = $title.find('a');\n\n                            if ($a.length && response.cpEditUrl) {\n                                $a.attr('href', response.cpEditUrl);\n                                $a.text(response.newTitle);\n                            } else {\n                                $title.text(response.newTitle);\n                            }\n                        }\n\n                        if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                            Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                                type: Craft.elementTypeNames[this.settings.elementType][0],\n                            }));\n                        }\n\n                        this.closeHud();\n                        this.onSaveElement(response);\n                    } else {\n                        this.updateForm(response, false);\n                        Garnish.shake(this.hud.$hud);\n                    }\n                }\n            }, this));\n        },\n\n        isDirty: function() {\n            return this.hud.$body.serialize() !== this.initialData;\n        },\n\n        maybeCloseHud: function(ev) {\n            if (!this.hud || !this.hud.showing) {\n                return;\n            }\n\n            if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n                this.closeHud();\n            }\n        },\n\n        closeHud: function() {\n            if (!this.hud || !this.hud.showing) {\n                return;\n            }\n\n            this.hud.hide();\n            delete this.hud;\n        },\n\n        // Events\n        // -------------------------------------------------------------------------\n\n        onShowHud: function() {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n            }, this.saveElement.bind(this));\n            this.settings.onShowHud();\n            this.trigger('showHud');\n        },\n\n        onHideHud: function() {\n            this.settings.onHideHud();\n            this.trigger('hideHud');\n        },\n\n        onBeginLoading: function() {\n            if (this.$element) {\n                this.$element.addClass('loading');\n            }\n\n            this.settings.onBeginLoading();\n            this.trigger('beginLoading');\n        },\n\n        onEndLoading: function() {\n            if (this.$element) {\n                this.$element.removeClass('loading');\n            }\n\n            this.settings.onEndLoading();\n            this.trigger('endLoading');\n        },\n\n        onSaveElement: function(response) {\n            this.settings.onSaveElement(response);\n            this.trigger('saveElement', {\n                response: response\n            });\n\n            // There may be a new background job that needs to be run\n            Craft.cp.runQueue();\n        },\n\n        onCreateForm: function($form) {\n            this.settings.onCreateForm($form);\n        }\n    },\n    {\n        defaults: {\n            hudTrigger: null,\n            showSiteSwitcher: true,\n            elementId: null,\n            elementType: null,\n            siteId: null,\n            attributes: null,\n            params: null,\n            prevalidate: false,\n            elementIndex: null,\n\n            onShowHud: $.noop,\n            onHideHud: $.noop,\n            onBeginLoading: $.noop,\n            onEndLoading: $.noop,\n            onCreateForm: $.noop,\n            onSaveElement: $.noop,\n\n            validators: []\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend(\n    {\n        initialized: false,\n        elementType: null,\n\n        instanceState: null,\n        sourceStates: null,\n        sourceStatesStorageKey: null,\n\n        searchTimeout: null,\n        sourceSelect: null,\n\n        $container: null,\n        $main: null,\n        isIndexBusy: false,\n\n        $sidebar: null,\n        showingSidebar: null,\n        sourceKey: null,\n        sourceViewModes: null,\n        $source: null,\n        sourcesByKey: null,\n        $visibleSources: null,\n\n        $customizeSourcesBtn: null,\n        customizeSourcesModal: null,\n\n        $toolbar: null,\n        toolbarOffset: null,\n\n        $search: null,\n        searching: false,\n        searchText: null,\n        trashed: false,\n        drafts: false,\n        $clearSearchBtn: null,\n\n        $statusMenuBtn: null,\n        $statusMenuContainer: null,\n        statusMenu: null,\n        status: null,\n\n        $siteMenuBtn: null,\n        siteMenu: null,\n        siteId: null,\n\n        $sortMenuBtn: null,\n        sortMenu: null,\n        $sortAttributesList: null,\n        $sortDirectionsList: null,\n        $scoreSortAttribute: null,\n        $structureSortAttribute: null,\n\n        $elements: null,\n        $viewModeBtnContainer: null,\n        viewModeBtns: null,\n        viewMode: null,\n        view: null,\n        _autoSelectElements: null,\n        $countSpinner: null,\n        $countContainer: null,\n        page: 1,\n        resultSet: null,\n        totalResults: null,\n        $exportBtn: null,\n\n        actions: null,\n        actionsHeadHtml: null,\n        actionsFootHtml: null,\n        $selectAllContainer: null,\n        $selectAllCheckbox: null,\n        showingActionTriggers: false,\n        exporters: null,\n        exportersByType: null,\n        _$detachedToolbarItems: null,\n        _$triggers: null,\n\n        _ignoreFailedRequest: false,\n        _cancelToken: null,\n\n        /**\n         * Constructor\n         */\n        init: function(elementType, $container, settings) {\n            this.elementType = elementType;\n            this.$container = $container;\n            this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n            // Set the state objects\n            // ---------------------------------------------------------------------\n\n            this.instanceState = this.getDefaultInstanceState();\n\n            this.sourceStates = {};\n\n            // Instance states (selected source) are stored by a custom storage key defined in the settings\n            if (this.settings.storageKey) {\n                $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n            }\n\n            // Source states (view mode, etc.) are stored by the element type and context\n            this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n            $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n            // Find the DOM elements\n            // ---------------------------------------------------------------------\n\n            this.$main = this.$container.find('.main');\n            this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n            this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n            this.$statusMenuContainer = this.$statusMenuBtn.parent();\n            this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n            this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n            this.$search = this.$toolbar.find('.search:first input:first');\n            this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n            this.$sidebar = this.$container.find('.sidebar:first');\n            this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n            this.$elements = this.$container.find('.elements:first');\n            this.$countSpinner = this.$container.find('#count-spinner');\n            this.$countContainer = this.$container.find('#count-container');\n            this.$exportBtn = this.$container.find('#export-btn');\n\n            // Hide sidebar if needed\n            if (this.settings.hideSidebar) {\n                this.$sidebar.hide();\n                $('.body, .content', this.$container).removeClass('has-sidebar');\n            }\n\n            // Initialize the sources\n            // ---------------------------------------------------------------------\n\n            if (!this.initSources()) {\n                return;\n            }\n\n            // Customize button\n            if (this.$customizeSourcesBtn.length) {\n                this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n            }\n\n            // Initialize the status menu\n            // ---------------------------------------------------------------------\n\n            if (this.$statusMenuBtn.length) {\n                this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n                this.statusMenu.on('optionselect', $.proxy(this, '_handleStatusChange'));\n            }\n\n            // Initialize the site menu\n            // ---------------------------------------------------------------------\n\n            // Is there a site menu?\n            if (this.$siteMenuBtn.length) {\n                this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n                // Figure out the initial site\n                var $option = this.siteMenu.$options.filter('.sel:first');\n\n                if (!$option.length) {\n                    $option = this.siteMenu.$options.first();\n                }\n\n                if ($option.length) {\n                    this._setSite($option.data('site-id'));\n                } else {\n                    // No site options -- they must not have any site permissions\n                    this.settings.criteria = {id: '0'};\n                }\n\n                this.siteMenu.on('optionselect', $.proxy(this, '_handleSiteChange'));\n\n                if (this.siteId) {\n                    // Should we be using a different default site?\n                    var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                    if (defaultSiteId && defaultSiteId != this.siteId) {\n                        // Is that one available here?\n                        var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                        if ($storedSiteOption.length) {\n                            // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                            $storedSiteOption.trigger('click');\n                        }\n                    }\n                }\n            } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n                this._setSite(this.settings.criteria.siteId);\n            } else {\n                this._setSite(Craft.siteId);\n            }\n\n            // Don't let the criteria override the selected site\n            if (this.settings.criteria && this.settings.criteria.siteId) {\n                delete this.settings.criteria.siteId;\n            }\n\n            // Initialize the search input\n            // ---------------------------------------------------------------------\n\n            // Automatically update the elements after new search text has been sitting for a 1/2 second\n            this.addListener(this.$search, 'input', $.proxy(function() {\n                if (!this.searching && this.$search.val()) {\n                    this.startSearching();\n                } else if (this.searching && !this.$search.val()) {\n                    this.stopSearching();\n                }\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.searchTimeout = setTimeout($.proxy(this, 'updateElementsIfSearchTextChanged'), 500);\n            }, this));\n\n            // Update the elements when the Return key is pressed\n            this.addListener(this.$search, 'keypress', $.proxy(function(ev) {\n                if (ev.keyCode === Garnish.RETURN_KEY) {\n                    ev.preventDefault();\n\n                    if (this.searchTimeout) {\n                        clearTimeout(this.searchTimeout);\n                    }\n\n                    this.updateElementsIfSearchTextChanged();\n                }\n            }, this));\n\n            // Clear the search when the X button is clicked\n            this.addListener(this.$clearSearchBtn, 'click', $.proxy(function() {\n                this.$search.val('');\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                if (!Garnish.isMobileBrowser(true)) {\n                    this.$search.trigger('focus');\n                }\n\n                this.stopSearching();\n\n                this.updateElementsIfSearchTextChanged();\n            }, this));\n\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            // Initialize the sort menu\n            // ---------------------------------------------------------------------\n\n            // Is there a sort menu?\n            if (this.$sortMenuBtn.length) {\n                this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n                this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n                this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n                this.sortMenu.on('optionselect', $.proxy(this, '_handleSortChange'));\n            }\n\n            // Initialize the Export button\n            // ---------------------------------------------------------------------\n\n            this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n            // Let everyone know that the UI is initialized\n            // ---------------------------------------------------------------------\n\n            this.initialized = true;\n            this.afterInit();\n\n            // Select the initial source\n            // ---------------------------------------------------------------------\n\n            this.selectDefaultSource();\n\n            // Load the first batch of elements!\n            // ---------------------------------------------------------------------\n\n            // Default to whatever page is in the URL\n            this.setPage(Craft.pageNum);\n\n            this.updateElements(true);\n        },\n\n        afterInit: function() {\n            this.onAfterInit();\n        },\n\n        _createCancelToken: function() {\n            this._cancelToken = axios.CancelToken.source();\n            return this._cancelToken.token;\n        },\n\n        _cancelRequests: function() {\n            if (this._cancelToken) {\n                this._ignoreFailedRequest = true;\n                this._cancelToken.cancel();\n                Garnish.requestAnimationFrame(() => {\n                    this._ignoreFailedRequest = false;\n                });\n            }\n        },\n\n        getSourceContainer: function() {\n            return this.$sidebar.find('nav > ul');\n        },\n\n        get $sources() {\n            if (!this.sourceSelect) {\n                return undefined;\n            }\n\n            return this.sourceSelect.$items;\n        },\n\n        initSources: function() {\n            var $sources = this._getSourcesInList(this.getSourceContainer());\n\n            // No source, no party.\n            if ($sources.length === 0) {\n                return false;\n            }\n\n            // The source selector\n            if (!this.sourceSelect) {\n                this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                    multi: false,\n                    allowEmpty: false,\n                    vertical: true,\n                    onSelectionChange: $.proxy(this, '_handleSourceSelectionChange')\n                });\n            }\n\n            this.sourcesByKey = {};\n            this._initSources($sources);\n\n            return true;\n        },\n\n        selectDefaultSource: function() {\n            var sourceKey = this.getDefaultSourceKey(),\n                $source;\n\n            if (sourceKey) {\n                $source = this.getSourceByKey(sourceKey);\n\n                // Make sure it's visible\n                if (this.$visibleSources.index($source) === -1) {\n                    $source = null;\n                }\n            }\n\n            if (!sourceKey || !$source) {\n                // Select the first source by default\n                $source = this.$visibleSources.first();\n            }\n\n            return this.selectSource($source);\n        },\n\n        refreshSources: function() {\n            this.sourceSelect.removeAllItems();\n\n            var params = {\n                context: this.settings.context,\n                elementType: this.elementType\n            };\n\n            this.setIndexBusy();\n\n            Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n                data: params,\n            }).then((response) => {\n                this.setIndexAvailable();\n                this.getSourceContainer().replaceWith(response.data.html);\n                this.initSources();\n                this.selectDefaultSource();\n            }).catch(() => {\n                this.setIndexAvailable();\n                if (!this._ignoreFailedRequest) {\n                    Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                }\n            });\n        },\n\n        initSource: function($source) {\n            this.sourceSelect.addItems($source);\n            this.initSourceToggle($source);\n            this.sourcesByKey[$source.data('key')] = $source;\n\n            if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n                this._expandSource($source);\n            }\n        },\n\n        initSourceToggle: function($source) {\n            // Remove handlers for the same thing. Just in case.\n            this.deinitSourceToggle($source);\n\n            var $toggle = this._getSourceToggle($source);\n\n            if ($toggle.length) {\n                this.addListener($source, 'dblclick', '_handleSourceDblClick');\n                this.addListener($toggle, 'click', '_handleSourceToggleClick');\n                $source.data('hasNestedSources', true);\n            } else {\n                $source.data('hasNestedSources', false);\n            }\n        },\n\n        deinitSource: function($source) {\n            this.sourceSelect.removeItems($source);\n            this.deinitSourceToggle($source);\n            delete this.sourcesByKey[$source.data('key')];\n        },\n\n        deinitSourceToggle: function($source) {\n            if ($source.data('hasNestedSources')) {\n                this.removeListener($source, 'dblclick');\n                this.removeListener(this._getSourceToggle($source), 'click');\n            }\n\n            $source.removeData('hasNestedSources');\n        },\n\n        getDefaultInstanceState: function() {\n            return {\n                selectedSource: null,\n                expandedSources: []\n            };\n        },\n\n        getDefaultSourceKey: function() {\n            if (this.settings.defaultSource) {\n                var paths = this.settings.defaultSource.split('/'),\n                    path = '';\n\n                // Expand the tree\n                for (var i = 0; i < paths.length; i++) {\n                    path += paths[i];\n                    var $source = this.getSourceByKey(path);\n\n                    // If the folder can't be found, then just go to the stored instance source.\n                    if (!$source) {\n                        return this.instanceState.selectedSource;\n                    }\n\n                    this._expandSource($source);\n                    path += '/';\n                }\n\n                // Just make sure that the modal is aware of the newly expanded sources, too.\n                this._setSite(this.siteId);\n\n                return this.settings.defaultSource;\n            }\n\n            return this.instanceState.selectedSource;\n        },\n\n        getDefaultExpandedSources: function() {\n            return this.instanceState.expandedSources;\n        },\n\n        startSearching: function() {\n            // Show the clear button and add/select the Score sort option\n            this.$clearSearchBtn.removeClass('hidden');\n\n            if (!this.$scoreSortAttribute) {\n                this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n                this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n            }\n\n            this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n            this.searching = true;\n\n            this._updateStructureSortOption();\n            this.setSortAttribute('score');\n        },\n\n        stopSearching: function() {\n            // Hide the clear button and Score sort option\n            this.$clearSearchBtn.addClass('hidden');\n\n            this.$scoreSortAttribute.detach();\n\n            this.searching = false;\n\n            this._updateStructureSortOption();\n        },\n\n        setInstanceState: function(key, value) {\n            if (typeof key === 'object') {\n                $.extend(this.instanceState, key);\n            } else {\n                this.instanceState[key] = value;\n            }\n\n            this.storeInstanceState();\n        },\n\n        storeInstanceState: function() {\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n            }\n        },\n\n        getSourceState: function(source, key, defaultValue) {\n            if (typeof this.sourceStates[source] === 'undefined') {\n                // Set it now so any modifications to it by whoever's calling this will be stored.\n                this.sourceStates[source] = {};\n            }\n\n            if (typeof key === 'undefined') {\n                return this.sourceStates[source];\n            } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n                return this.sourceStates[source][key];\n            } else {\n                return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n            }\n        },\n\n        getSelectedSourceState: function(key, defaultValue) {\n            return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n        },\n\n        setSelecetedSourceState: function(key, value) {\n            var viewState = this.getSelectedSourceState();\n\n            if (typeof key === 'object') {\n                $.extend(viewState, key);\n            } else {\n                viewState[key] = value;\n            }\n\n            this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n            // Store it in localStorage too\n            Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n        },\n\n        storeSortAttributeAndDirection: function() {\n            var attr = this.getSelectedSortAttribute();\n\n            if (attr !== 'score') {\n                this.setSelecetedSourceState({\n                    order: attr,\n                    sort: this.getSelectedSortDirection()\n                });\n            }\n        },\n\n        /**\n         * Sets the page number.\n         */\n        setPage: function(page) {\n            if (this.settings.context !== 'index') {\n                return;\n            }\n\n            page = Math.max(page, 1);\n            this.page = page;\n\n            // Update the URL\n            var url = document.location.href\n                .replace(/\\?.*$/, '')\n                .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n                .replace(/\\/+$/, '');\n\n            if (this.page !== 1) {\n                if (Craft.pageTrigger[0] !== '?') {\n                    url += '/';\n                }\n                url += Craft.pageTrigger + this.page;\n            }\n\n            history.replaceState({}, '', url);\n        },\n\n        _resetCount: function() {\n            this.resultSet = null;\n            this.totalResults = null;\n        },\n\n        /**\n         * Returns the data that should be passed to the elementIndex/getElements controller action\n         * when loading elements.\n         */\n        getViewParams: function() {\n            var criteria = {\n                siteId: this.siteId,\n                search: this.searchText,\n                offset: this.settings.batchSize * (this.page - 1),\n                limit: this.settings.batchSize,\n            };\n\n            // Only set trashed/drafts/draftOf params when needed, so we don't potentially override a source's criteria\n            if (this.trashed) {\n                criteria.trashed = true;\n            }\n            if (this.drafts) {\n                criteria.drafts = true;\n                criteria.draftOf = false;\n            }\n\n            if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n                criteria.status = this.status;\n            }\n\n            $.extend(criteria, this.settings.criteria);\n\n            var params = {\n                context: this.settings.context,\n                elementType: this.elementType,\n                source: this.instanceState.selectedSource,\n                criteria: criteria,\n                disabledElementIds: this.settings.disabledElementIds,\n                viewState: $.extend({}, this.getSelectedSourceState()),\n                paginated: this._isViewPaginated() ? 1 : 0,\n            };\n\n            // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n            params.viewState.order = this.getSelectedSortAttribute();\n            params.viewState.sort = this.getSelectedSortDirection();\n\n            if (this.getSelectedSortAttribute() === 'structure') {\n                if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                    this.instanceState.collapsedElementIds = [];\n                }\n                params.collapsedElementIds = this.instanceState.collapsedElementIds;\n            }\n\n            // Give plugins a chance to hook in here\n            this.trigger('registerViewParams', {\n                params: params,\n            });\n\n            return params;\n        },\n\n        updateElements: function(preservePagination) {\n            // Ignore if we're not fully initialized yet\n            if (!this.initialized) {\n                return;\n            }\n\n            // Cancel any ongoing requests\n            this._cancelRequests();\n\n            this.setIndexBusy();\n\n            // Kill the old view class\n            if (this.view) {\n                this.view.destroy();\n                delete this.view;\n            }\n\n            if (preservePagination !== true) {\n                this.setPage(1);\n                this._resetCount();\n            }\n\n            var params = this.getViewParams();\n\n            Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n                this._updateView(params, response.data);\n            }).catch(e => {\n                this.setIndexAvailable();\n                if (!this._ignoreFailedRequest) {\n                    Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                }\n            });\n        },\n\n        updateElementsIfSearchTextChanged: function() {\n            if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n                this.updateElements();\n            }\n        },\n\n        showActionTriggers: function() {\n            // Ignore if they're already shown\n            if (this.showingActionTriggers) {\n                return;\n            }\n\n            // Hard-code the min toolbar height in case it was taller than the actions toolbar\n            // (prevents the elements from jumping if this ends up being a double-click)\n            this.$toolbar.css('min-height', this.$toolbar.height());\n\n            // Hide any toolbar inputs\n            this._$detachedToolbarItems = this.$toolbar.children();\n            this._$detachedToolbarItems.detach();\n\n            if (!this._$triggers) {\n                this._createTriggers();\n            } else {\n                this._$triggers.appendTo(this.$toolbar);\n            }\n\n            this.showingActionTriggers = true;\n        },\n\n        submitAction: function(action, actionParams) {\n            // Make sure something's selected\n            var selectedElementIds = this.view.getSelectedElementIds(),\n                totalSelected = selectedElementIds.length;\n\n            if (totalSelected === 0) {\n                return;\n            }\n\n            if (typeof action === 'string') {\n                action = this._findAction(action);\n            }\n\n            if (action.confirm && !confirm(action.confirm)) {\n                return;\n            }\n\n            // Cancel any ongoing requests\n            this._cancelRequests();\n\n            // Get ready to submit\n            var viewParams = this.getViewParams();\n\n            actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n            var params = $.extend(viewParams, action.settings || {}, actionParams, {\n                elementAction: action.type,\n                elementIds: selectedElementIds\n            });\n\n            // Do it\n            this.setIndexBusy();\n            this._autoSelectElements = selectedElementIds;\n\n            if (action.download) {\n                if (Craft.csrfTokenName) {\n                    params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n                }\n                Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                    this.setIndexAvailable();\n                }).catch(e => {\n                    this.setIndexAvailable();\n                });\n            } else {\n                Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    this.setIndexAvailable();\n                    if (response.data.success) {\n                        // Update the count text too\n                        this._resetCount();\n                        this._updateView(viewParams, response.data);\n\n                        if (response.data.message) {\n                            Craft.cp.displayNotice(response.data.message);\n                        }\n\n                        this.afterAction(action, params);\n                    } else {\n                        Craft.cp.displayError(response.data.message);\n                    }\n                }).catch(() => {\n                    this.setIndexAvailable();\n                });\n            }\n        },\n\n        _findAction: function(actionClass) {\n            for (var i = 0; i < this.actions.length; i++) {\n                if (this.actions[i].type === actionClass) {\n                    return this.actions[i];\n                }\n            }\n            throw `Invalid element action: ${actionClass}`;\n        },\n\n        afterAction: function(action, params) {\n            // There may be a new background job that needs to be run\n            Craft.cp.runQueue();\n\n            this.onAfterAction(action, params);\n        },\n\n        hideActionTriggers: function() {\n            // Ignore if there aren't any\n            if (!this.showingActionTriggers) {\n                return;\n            }\n\n            this._$detachedToolbarItems.appendTo(this.$toolbar);\n            this._$triggers.detach();\n            // this._$detachedToolbarItems.removeClass('hidden');\n\n            // Unset the min toolbar height\n            this.$toolbar.css('min-height', '');\n\n            this.showingActionTriggers = false;\n        },\n\n        updateActionTriggers: function() {\n            // Do we have an action UI to update?\n            if (this.actions) {\n                var totalSelected = this.view.getSelectedElements().length;\n\n                if (totalSelected !== 0) {\n                    if (totalSelected === this.view.getEnabledElements().length) {\n                        this.$selectAllCheckbox.removeClass('indeterminate');\n                        this.$selectAllCheckbox.addClass('checked');\n                        this.$selectAllContainer.attr('aria-checked', 'true');\n                    } else {\n                        this.$selectAllCheckbox.addClass('indeterminate');\n                        this.$selectAllCheckbox.removeClass('checked');\n                        this.$selectAllContainer.attr('aria-checked', 'mixed');\n                    }\n\n                    this.showActionTriggers();\n                } else {\n                    this.$selectAllCheckbox.removeClass('indeterminate checked');\n                    this.$selectAllContainer.attr('aria-checked', 'false');\n                    this.hideActionTriggers();\n                }\n            }\n        },\n\n        getSelectedElements: function() {\n            return this.view ? this.view.getSelectedElements() : $();\n        },\n\n        getSelectedElementIds: function() {\n            return this.view ? this.view.getSelectedElementIds() : [];\n        },\n\n        setStatus: function(status) {\n            // Find the option (and make sure it actually exists)\n            var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n            if ($option.length) {\n                this.statusMenu.selectOption($option[0]);\n            }\n        },\n\n        getSortAttributeOption: function(attr) {\n            return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n        },\n\n        getSelectedSortAttribute: function() {\n            return this.$sortAttributesList.find('a.sel:first').data('attr');\n        },\n\n        setSortAttribute: function(attr) {\n            // Find the option (and make sure it actually exists)\n            var $option = this.getSortAttributeOption(attr);\n\n            if ($option.length) {\n                this.$sortAttributesList.find('a.sel').removeClass('sel');\n                $option.addClass('sel');\n\n                var label = $option.text();\n                this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n                this.$sortMenuBtn.text(label);\n\n                if (attr === 'score') {\n                    this.setSortDirection('desc');\n                } else {\n                    this.setSortDirection($option.data('default-dir') || 'asc');\n                }\n\n                if (attr === 'structure') {\n                    this.$sortDirectionsList.find('a').addClass('disabled');\n                } else {\n                    this.$sortDirectionsList.find('a').removeClass('disabled');\n                }\n            }\n        },\n\n        getSortDirectionOption: function(dir) {\n            return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n        },\n\n        getSelectedSortDirection: function() {\n            return this.$sortDirectionsList.find('a.sel:first').data('dir');\n        },\n\n        getSelectedViewMode: function() {\n            return this.getSelectedSourceState('mode') || 'table';\n        },\n\n        setSortDirection: function(dir) {\n            if (dir !== 'desc') {\n                dir = 'asc';\n            }\n\n            this.$sortMenuBtn.attr('data-icon', dir);\n            this.$sortDirectionsList.find('a.sel').removeClass('sel');\n            this.getSortDirectionOption(dir).addClass('sel');\n        },\n\n        getSourceByKey: function(key) {\n            if (typeof this.sourcesByKey[key] === 'undefined') {\n                return null;\n            }\n\n            return this.sourcesByKey[key];\n        },\n\n        selectSource: function($source) {\n            if (!$source || !$source.length) {\n                return false;\n            }\n\n            if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n                return false;\n            }\n\n            // Hide action triggers if they're currently being shown\n            this.hideActionTriggers();\n\n            this.$source = $source;\n            this.sourceKey = $source.data('key');\n            this.setInstanceState('selectedSource', this.sourceKey);\n            this.sourceSelect.selectItem($source);\n\n            Craft.cp.updateSidebarMenuLabel();\n\n            if (this.searching) {\n                // Clear the search value without causing it to update elements\n                this.searchText = null;\n                this.$search.val('');\n                this.stopSearching();\n            }\n\n            // Sort menu\n            // ----------------------------------------------------------------------\n\n            // Remove any existing custom sort options from the menu\n            this.$sortAttributesList.children('li[data-extra]').remove();\n\n            // Does this source have any custom sort options?\n            let sortOptions = this.$source.data('sort-options')\n            if (sortOptions) {\n                for (let i = 0; i < sortOptions.length; i++) {\n                    let $option = $('<li/>', {\n                        'data-extra': true,\n                    })\n                        .append(\n                            $('<a/>', {\n                                text: sortOptions[i][0],\n                                'data-attr': sortOptions[i][1],\n                            })\n                        )\n                        .appendTo(this.$sortAttributesList);\n                    this.sortMenu.addOptions($option.children());\n                }\n            }\n\n            // Does this source have a structure?\n            if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n                if (!this.$structureSortAttribute) {\n                    this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                    this.sortMenu.addOptions(this.$structureSortAttribute.children());\n                }\n\n                this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n            } else if (this.$structureSortAttribute) {\n                this.$structureSortAttribute.removeClass('sel').detach();\n            }\n\n            this.setStoredSortOptionsForSource();\n\n            // Status menu\n            // ----------------------------------------------------------------------\n\n            if (this.$statusMenuBtn.length) {\n                if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                    this.$statusMenuContainer.addClass('hidden');\n                } else {\n                    this.$statusMenuContainer.removeClass('hidden');\n                }\n\n                if (this.trashed) {\n                    // Swap to the initial status\n                    var $firstOption = this.statusMenu.$options.first();\n                    this.setStatus($firstOption.data('status'));\n                }\n            }\n\n            // View mode buttons\n            // ----------------------------------------------------------------------\n\n            // Clear out any previous view mode data\n            if (this.$viewModeBtnContainer) {\n                this.$viewModeBtnContainer.remove();\n            }\n\n            this.viewModeBtns = {};\n            this.viewMode = null;\n\n            // Get the new list of view modes\n            this.sourceViewModes = this.getViewModesForSource();\n\n            // Create the buttons if there's more than one mode available to this source\n            if (this.sourceViewModes.length > 1) {\n                this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n                for (var i = 0; i < this.sourceViewModes.length; i++) {\n                    let sourceViewMode = this.sourceViewModes[i];\n\n                    let $viewModeBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                        'data-view': sourceViewMode.mode,\n                        'data-icon': sourceViewMode.icon,\n                    }).appendTo(this.$viewModeBtnContainer);\n\n                    this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                    this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                        this.selectViewMode(ev.data.mode);\n                        this.updateElements();\n                    });\n                }\n            }\n\n            // Figure out which mode we should start with\n            var viewMode = this.getSelectedViewMode();\n\n            if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n                // Try to keep using the current view mode\n                if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                    viewMode = this.viewMode;\n                }\n                // Just use the first one\n                else {\n                    viewMode = this.sourceViewModes[0].mode;\n                }\n            }\n\n            this.selectViewMode(viewMode);\n\n            this.onSelectSource();\n\n            return true;\n        },\n\n        selectSourceByKey: function(key) {\n            var $source = this.getSourceByKey(key);\n\n            if ($source) {\n                return this.selectSource($source);\n            } else {\n                return false;\n            }\n        },\n\n        setStoredSortOptionsForSource: function() {\n            var sortAttr = this.getSelectedSourceState('order'),\n                sortDir = this.getSelectedSourceState('sort');\n\n            if (!sortAttr || !sortDir) {\n                // Get the default\n                sortAttr = this.getDefaultSort();\n\n                if (Garnish.isArray(sortAttr)) {\n                    sortDir = sortAttr[1];\n                    sortAttr = sortAttr[0];\n                }\n            }\n\n            if (sortDir !== 'asc' && sortDir !== 'desc') {\n                sortDir = 'asc';\n            }\n\n            this.setSortAttribute(sortAttr);\n            this.setSortDirection(sortDir);\n        },\n\n        getDefaultSort: function() {\n            // Does the source specify what to do?\n            if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n                return this.$source.attr('data-default-sort').split(':');\n            } else {\n                // Default to whatever's first\n                return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n            }\n        },\n\n        getViewModesForSource: function() {\n            var viewModes = [\n                {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n            ];\n\n            if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n                viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n            }\n\n            return viewModes;\n        },\n\n        doesSourceHaveViewMode: function(viewMode) {\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                if (this.sourceViewModes[i].mode === viewMode) {\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        selectViewMode: function(viewMode, force) {\n            // Make sure that the current source supports it\n            if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n\n            // Has anything changed?\n            if (viewMode === this.viewMode) {\n                return;\n            }\n\n            // Deselect the previous view mode\n            if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n                this.viewModeBtns[this.viewMode].removeClass('active');\n            }\n\n            this.viewMode = viewMode;\n            this.setSelecetedSourceState('mode', this.viewMode);\n\n            if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n                this.viewModeBtns[this.viewMode].addClass('active');\n            }\n        },\n\n        createView: function(mode, settings) {\n            var viewClass = this.getViewClass(mode);\n            return new viewClass(this, this.$elements, settings);\n        },\n\n        getViewClass: function(mode) {\n            switch (mode) {\n                case 'table':\n                    return Craft.TableElementIndexView;\n                case 'thumbs':\n                    return Craft.ThumbsElementIndexView;\n                default:\n                    throw `View mode \"${mode}\" not supported.`;\n            }\n        },\n\n        rememberDisabledElementId: function(id) {\n            var index = $.inArray(id, this.settings.disabledElementIds);\n\n            if (index === -1) {\n                this.settings.disabledElementIds.push(id);\n            }\n        },\n\n        forgetDisabledElementId: function(id) {\n            var index = $.inArray(id, this.settings.disabledElementIds);\n\n            if (index !== -1) {\n                this.settings.disabledElementIds.splice(index, 1);\n            }\n        },\n\n        enableElements: function($elements) {\n            $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $($elements[i]).data('id');\n                this.forgetDisabledElementId(id);\n            }\n\n            this.onEnableElements($elements);\n        },\n\n        disableElements: function($elements) {\n            $elements.removeClass('sel').addClass('disabled');\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $($elements[i]).data('id');\n                this.rememberDisabledElementId(id);\n            }\n\n            this.onDisableElements($elements);\n        },\n\n        getElementById: function(id) {\n            return this.view.getElementById(id);\n        },\n\n        enableElementsById: function(ids) {\n            ids = $.makeArray(ids);\n\n            for (var i = 0; i < ids.length; i++) {\n                var id = ids[i],\n                    $element = this.getElementById(id);\n\n                if ($element && $element.length) {\n                    this.enableElements($element);\n                } else {\n                    this.forgetDisabledElementId(id);\n                }\n            }\n        },\n\n        disableElementsById: function(ids) {\n            ids = $.makeArray(ids);\n\n            for (var i = 0; i < ids.length; i++) {\n                var id = ids[i],\n                    $element = this.getElementById(id);\n\n                if ($element && $element.length) {\n                    this.disableElements($element);\n                } else {\n                    this.rememberDisabledElementId(id);\n                }\n            }\n        },\n\n        selectElementAfterUpdate: function(id) {\n            if (this._autoSelectElements === null) {\n                this._autoSelectElements = [];\n            }\n\n            this._autoSelectElements.push(id);\n        },\n\n        addButton: function($button) {\n            this.getButtonContainer().append($button);\n        },\n\n        isShowingSidebar: function() {\n            if (this.showingSidebar === null) {\n                this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n            }\n\n            return this.showingSidebar;\n        },\n\n        getButtonContainer: function() {\n            // Is there a predesignated place where buttons should go?\n            if (this.settings.buttonContainer) {\n                return $(this.settings.buttonContainer);\n            } else {\n                var $container = $('#action-button');\n\n                if (!$container.length) {\n                    $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n                }\n\n                return $container;\n            }\n        },\n\n        setIndexBusy: function() {\n            this.$elements.addClass('busy');\n            this.isIndexBusy = true;\n        },\n\n        setIndexAvailable: function() {\n            this.$elements.removeClass('busy');\n            this.isIndexBusy = false;\n        },\n\n        createCustomizeSourcesModal: function() {\n            // Recreate it each time\n            var modal = new Craft.CustomizeSourcesModal(this, {\n                onHide: function() {\n                    modal.destroy();\n                }\n            });\n\n            return modal;\n        },\n\n        disable: function() {\n            if (this.sourceSelect) {\n                this.sourceSelect.disable();\n            }\n\n            if (this.view) {\n                this.view.disable();\n            }\n\n            this.base();\n        },\n\n        enable: function() {\n            if (this.sourceSelect) {\n                this.sourceSelect.enable();\n            }\n\n            if (this.view) {\n                this.view.enable();\n            }\n\n            this.base();\n        },\n\n        onAfterInit: function() {\n            this.settings.onAfterInit();\n            this.trigger('afterInit');\n        },\n\n        onSelectSource: function() {\n            this.settings.onSelectSource(this.sourceKey);\n            this.trigger('selectSource', {sourceKey: this.sourceKey});\n        },\n\n        onSelectSite: function() {\n            this.settings.onSelectSite(this.siteId);\n            this.trigger('selectSite', {siteId: this.siteId});\n        },\n\n        onUpdateElements: function() {\n            this.settings.onUpdateElements();\n            this.trigger('updateElements');\n        },\n\n        onSelectionChange: function() {\n            this.settings.onSelectionChange();\n            this.trigger('selectionChange');\n        },\n\n        onEnableElements: function($elements) {\n            this.settings.onEnableElements($elements);\n            this.trigger('enableElements', {elements: $elements});\n        },\n\n        onDisableElements: function($elements) {\n            this.settings.onDisableElements($elements);\n            this.trigger('disableElements', {elements: $elements});\n        },\n\n        onAfterAction: function(action, params) {\n            this.settings.onAfterAction(action, params);\n            this.trigger('afterAction', {action: action, params: params});\n        },\n\n        // UI state handlers\n        // -------------------------------------------------------------------------\n\n        _handleSourceSelectionChange: function() {\n            // If the selected source was just removed (maybe because its parent was collapsed),\n            // there won't be a selected source\n            if (!this.sourceSelect.totalSelected) {\n                this.sourceSelect.selectItem(this.$visibleSources.first());\n                return;\n            }\n\n            if (this.selectSource(this.sourceSelect.$selectedItems)) {\n                this.updateElements();\n            }\n        },\n\n        _handleActionTriggerSubmit: function(ev) {\n            ev.preventDefault();\n\n            var $form = $(ev.currentTarget);\n\n            // Make sure Craft.ElementActionTrigger isn't overriding this\n            if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n                return;\n            }\n\n            this.submitAction($form.data('action'), Garnish.getPostData($form));\n        },\n\n        _handleMenuActionTriggerSubmit: function(ev) {\n            var $option = $(ev.option);\n\n            // Make sure Craft.ElementActionTrigger isn't overriding this\n            if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n                return;\n            }\n\n            this.submitAction($option.data('action'));\n        },\n\n        _handleStatusChange: function(ev) {\n            this.statusMenu.$options.removeClass('sel');\n            var $option = $(ev.selectedOption).addClass('sel');\n            this.$statusMenuBtn.html($option.html());\n\n            this.trashed = false;\n            this.drafts = false;\n            this.status = null;\n\n            if (Garnish.hasAttr($option, 'data-trashed')) {\n                this.trashed = true;\n            } else if (Garnish.hasAttr($option, 'data-drafts')) {\n                this.drafts = true;\n            } else {\n                this.status = $option.data('status');\n            }\n\n            this._updateStructureSortOption();\n            this.updateElements();\n        },\n\n        _handleSiteChange: function(ev) {\n            this.siteMenu.$options.removeClass('sel');\n            var $option = $(ev.selectedOption).addClass('sel');\n            this.$siteMenuBtn.html($option.html());\n            this._setSite($option.data('site-id'));\n            this.onSelectSite();\n        },\n\n        _setSite: function(siteId) {\n            let firstSite = this.siteId === null;\n            this.siteId = siteId;\n            this.$visibleSources = $();\n\n            // Hide any sources that aren't available for this site\n            var $firstVisibleSource;\n            var $source;\n            // Select a new source automatically if a site is already selected, but we don't have a selected source\n            // (or if the currently selected source ends up not supporting the new site)\n            var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n            for (var i = 0; i < this.$sources.length; i++) {\n                $source = this.$sources.eq(i);\n                if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                    $source.parent().removeClass('hidden');\n                    this.$visibleSources = this.$visibleSources.add($source);\n                    if (!$firstVisibleSource) {\n                        $firstVisibleSource = $source;\n                    }\n                } else {\n                    $source.parent().addClass('hidden');\n\n                    // Is this the currently selected source?\n                    if (this.$source && this.$source.get(0) == $source.get(0)) {\n                        selectNewSource = true;\n                    }\n                }\n            }\n\n            if (this.initialized && selectNewSource) {\n                this.selectSource($firstVisibleSource);\n            }\n\n            // Hide any empty-nester headings\n            var $headings = this.getSourceContainer().children('.heading');\n            var $heading;\n\n            for (i = 0; i < $headings.length; i++) {\n                $heading = $headings.eq(i);\n                if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                    $heading.removeClass('hidden');\n                } else {\n                    $heading.addClass('hidden');\n                }\n            }\n\n            if (this.initialized) {\n                if (this.settings.context === 'index') {\n                    // Remember this site for later\n                    Craft.cp.setSiteId(siteId);\n                }\n\n                // Update the elements\n                this.updateElements();\n            }\n        },\n\n        _handleSortChange: function(ev) {\n            var $option = $(ev.selectedOption);\n\n            if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n                return;\n            }\n\n            // Is this an attribute or a direction?\n            if ($option.parent().parent().is(this.$sortAttributesList)) {\n                this.setSortAttribute($option.data('attr'));\n            } else {\n                this.setSortDirection($option.data('dir'));\n            }\n\n            this.storeSortAttributeAndDirection();\n            this.updateElements();\n        },\n\n        _handleSelectionChange: function() {\n            this.updateActionTriggers();\n            this.onSelectionChange();\n        },\n\n        _handleSourceDblClick: function(ev) {\n            this._toggleSource($(ev.currentTarget));\n            ev.stopPropagation();\n        },\n\n        _handleSourceToggleClick: function(ev) {\n            this._toggleSource($(ev.currentTarget).prev('a'));\n            ev.stopPropagation();\n        },\n\n        _updateStructureSortOption: function() {\n            var $option = this.getSortAttributeOption('structure');\n\n            if (!$option.length) {\n                return;\n            }\n\n            if (this.trashed || this.drafts || this.searching) {\n                $option.addClass('disabled');\n                if (this.getSelectedSortAttribute() === 'structure') {\n                    // Temporarily set the sort to the first option\n                    var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                    this.setSortAttribute($firstOption.data('attr'));\n                    this.setSortDirection('asc');\n                }\n            } else {\n                $option.removeClass('disabled');\n                this.setStoredSortOptionsForSource();\n            }\n        },\n\n        // Source managemnet\n        // -------------------------------------------------------------------------\n\n        _getSourcesInList: function($list) {\n            return $list.children('li').children('a');\n        },\n\n        _getChildSources: function($source) {\n            var $list = $source.siblings('ul');\n            return this._getSourcesInList($list);\n        },\n\n        _getSourceToggle: function($source) {\n            return $source.siblings('.toggle');\n        },\n\n        _initSources: function($sources) {\n            for (var i = 0; i < $sources.length; i++) {\n                this.initSource($($sources[i]));\n            }\n        },\n\n        _deinitSources: function($sources) {\n            for (var i = 0; i < $sources.length; i++) {\n                this.deinitSource($($sources[i]));\n            }\n        },\n\n        _toggleSource: function($source) {\n            if ($source.parent('li').hasClass('expanded')) {\n                this._collapseSource($source);\n            } else {\n                this._expandSource($source);\n            }\n        },\n\n        _expandSource: function($source) {\n            $source.next('.toggle').attr({\n                'aria-expanded': 'true',\n                'aria-label': Craft.t('app', 'Hide nested sources'),\n            });\n            $source.parent('li').addClass('expanded');\n\n            var $childSources = this._getChildSources($source);\n            this._initSources($childSources);\n\n            var key = $source.data('key');\n            if (this.instanceState.expandedSources.indexOf(key) === -1) {\n                this.instanceState.expandedSources.push(key);\n                this.storeInstanceState();\n            }\n        },\n\n        _collapseSource: function($source) {\n            $source.next('.toggle').attr({\n                'aria-expanded': 'false',\n                'aria-label': Craft.t('app', 'Show nested sources'),\n            });\n            $source.parent('li').removeClass('expanded');\n\n            var $childSources = this._getChildSources($source);\n            this._deinitSources($childSources);\n\n            var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n            if (i !== -1) {\n                this.instanceState.expandedSources.splice(i, 1);\n                this.storeInstanceState();\n            }\n        },\n\n        // View\n        // -------------------------------------------------------------------------\n\n        _isViewPaginated: function() {\n            return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n        },\n\n        _updateView: function(params, response) {\n            // Cleanup\n            // -------------------------------------------------------------\n\n            // Get rid of the old action triggers regardless of whether the new batch has actions or not\n            if (this.actions) {\n                this.hideActionTriggers();\n                this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n            }\n\n            // Update the count text\n            // -------------------------------------------------------------\n\n            if (this.$countContainer.length) {\n                this.$countSpinner.removeClass('hidden');\n                this.$countContainer.html('');\n\n                this._countResults()\n                    .then((total) => {\n                        this.$countSpinner.addClass('hidden');\n\n                        let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                        let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                        if (!this._isViewPaginated()) {\n                            let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                                total: total,\n                                item: itemLabel,\n                                items: itemsLabel,\n                            });\n                            this.$countContainer.text(countLabel);\n                        } else {\n                            let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                            let last = Math.min(first + (this.settings.batchSize - 1), total);\n                            let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                                first: first,\n                                last: last,\n                                total: total,\n                                item: itemLabel,\n                                items: itemsLabel,\n                            });\n\n                            let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                            let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                            let $prevBtn = $('<div/>', {\n                                'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                                title: Craft.t('app', 'Previous Page')\n                            }).appendTo($paginationContainer);\n                            let $nextBtn = $('<div/>', {\n                                'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                                title: Craft.t('app', 'Next Page')\n                            }).appendTo($paginationContainer);\n\n                            $('<div/>', {\n                                'class': 'page-info',\n                                text: countLabel\n                            }).appendTo($paginationContainer);\n\n                            if (this.page > 1) {\n                                this.addListener($prevBtn, 'click', function() {\n                                    this.removeListener($prevBtn, 'click');\n                                    this.removeListener($nextBtn, 'click');\n                                    this.setPage(this.page - 1);\n                                    this.updateElements(true);\n                                });\n                            }\n\n                            if (this.page < totalPages) {\n                                this.addListener($nextBtn, 'click', function() {\n                                    this.removeListener($prevBtn, 'click');\n                                    this.removeListener($nextBtn, 'click');\n                                    this.setPage(this.page + 1);\n                                    this.updateElements(true);\n                                });\n                            }\n                        }\n                    })\n                    .catch(() => {\n                        this.$countSpinner.addClass('hidden');\n                    });\n            }\n\n            // Update the view with the new container + elements HTML\n            // -------------------------------------------------------------\n\n            this.$elements.html(response.html);\n            Craft.appendHeadHtml(response.headHtml);\n            Craft.appendFootHtml(response.footHtml);\n\n            // Batch actions setup\n            // -------------------------------------------------------------\n\n            this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n            if (response.actions && response.actions.length) {\n                if (this.$selectAllContainer.length) {\n                    this.actions = response.actions;\n                    this.actionsHeadHtml = response.actionsHeadHtml;\n                    this.actionsFootHtml = response.actionsFootHtml;\n\n                    // Create the select all checkbox\n                    this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                    this.$selectAllContainer.attr({\n                        'role': 'checkbox',\n                        'tabindex': '0',\n                        'aria-checked': 'false'\n                    });\n\n                    this.addListener(this.$selectAllContainer, 'click', function() {\n                        if (this.view.getSelectedElements().length === 0) {\n                            this.view.selectAllElements();\n                        } else {\n                            this.view.deselectAllElements();\n                        }\n                    });\n\n                    this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                        if (ev.keyCode === Garnish.SPACE_KEY) {\n                            ev.preventDefault();\n\n                            $(ev.currentTarget).trigger('click');\n                        }\n                    });\n                }\n            } else {\n                if (!this.$selectAllContainer.siblings().length) {\n                    this.$selectAllContainer.parent('.header').remove();\n                }\n                this.$selectAllContainer.remove();\n            }\n\n            // Exporters setup\n            // -------------------------------------------------------------\n\n            this.exporters = response.exporters;\n            this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n            if (this.exporters && this.exporters.length) {\n                this.$exportBtn.removeClass('hidden');\n            } else {\n                this.$exportBtn.addClass('hidden');\n            }\n\n            // Create the view\n            // -------------------------------------------------------------\n\n            // Should we make the view selectable?\n            var selectable = (this.actions || this.settings.selectable);\n\n            this.view = this.createView(this.getSelectedViewMode(), {\n                context: this.settings.context,\n                batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n                params: params,\n                selectable: selectable,\n                multiSelect: (this.actions || this.settings.multiSelect),\n                checkboxMode: !!this.actions,\n                onSelectionChange: $.proxy(this, '_handleSelectionChange')\n            });\n\n            // Auto-select elements\n            // -------------------------------------------------------------\n\n            if (this._autoSelectElements) {\n                if (selectable) {\n                    for (var i = 0; i < this._autoSelectElements.length; i++) {\n                        this.view.selectElementById(this._autoSelectElements[i]);\n                    }\n                }\n\n                this._autoSelectElements = null;\n            }\n\n            // Trigger the event\n            // -------------------------------------------------------------\n\n            this.onUpdateElements();\n        },\n\n        _countResults: function() {\n            return new Promise((resolve, reject) => {\n                if (this.totalResults !== null) {\n                    resolve(this.totalResults);\n                } else {\n                    var params = this.getViewParams();\n                    delete params.criteria.offset;\n                    delete params.criteria.limit;\n\n                    // Make sure we've got an active result set ID\n                    if (this.resultSet === null) {\n                        this.resultSet = Math.floor(Math.random() * 100000000);\n                    }\n                    params.resultSet = this.resultSet;\n\n                    Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                        data: params,\n                        cancelToken: this._createCancelToken(),\n                    }).then((response) => {\n                        if (response.data.resultSet == this.resultSet) {\n                            this.totalResults = response.data.count;\n                            resolve(response.data.count);\n                        } else {\n                            reject();\n                        }\n                    }).catch(reject);\n                }\n            });\n        },\n\n        _createTriggers: function() {\n            var triggers = [],\n                safeMenuActions = [],\n                destructiveMenuActions = [];\n\n            var i;\n\n            for (i = 0; i < this.actions.length; i++) {\n                var action = this.actions[i];\n\n                if (action.trigger) {\n                    var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                        .data('action', action)\n                        .append(action.trigger);\n\n                    this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                    triggers.push($form);\n                } else {\n                    if (!action.destructive) {\n                        safeMenuActions.push(action);\n                    } else {\n                        destructiveMenuActions.push(action);\n                    }\n                }\n            }\n\n            var $btn;\n\n            if (safeMenuActions.length || destructiveMenuActions.length) {\n                var $menuTrigger = $('<form/>');\n\n                $btn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn menubtn',\n                    'data-icon': 'settings',\n                    title: Craft.t('app', 'Actions'),\n                }).appendTo($menuTrigger);\n\n                var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                    $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                    $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n                if ($safeList) {\n                    $safeList.appendTo($menu);\n                }\n\n                if ($safeList && $destructiveList) {\n                    $('<hr/>').appendTo($menu);\n                }\n\n                if ($destructiveList) {\n                    $destructiveList.appendTo($menu);\n                }\n\n                triggers.push($menuTrigger);\n            }\n\n            this._$triggers = $();\n\n            for (i = 0; i < triggers.length; i++) {\n                var $div = $('<div/>').append(triggers[i]);\n                this._$triggers = this._$triggers.add($div);\n            }\n\n            this._$triggers.appendTo(this.$toolbar);\n            Craft.appendHeadHtml(this.actionsHeadHtml);\n            Craft.appendFootHtml(this.actionsFootHtml);\n\n            Craft.initUiElements(this._$triggers);\n\n            if ($btn) {\n                $btn.data('menubtn').on('optionSelect', $.proxy(this, '_handleMenuActionTriggerSubmit'));\n            }\n        },\n\n        _showExportHud: function() {\n            this.$exportBtn.addClass('active');\n\n            var $form = $('<form/>', {\n                'class': 'export-form'\n            });\n\n            var typeOptions = [];\n            for (var i = 0; i < this.exporters.length; i++) {\n                typeOptions.push({ label: this.exporters[i].name, value: this.exporters[i].type });\n            }\n            var $typeField = Craft.ui.createSelectField({\n                label: Craft.t('app', 'Export Type'),\n                options: typeOptions,\n                'class': 'fullwidth',\n            }).appendTo($form);\n\n            var $formatField = Craft.ui.createSelectField({\n                label: Craft.t('app', 'Format'),\n                options: [\n                    { label: 'CSV', value: 'csv' },\n                    { label: 'JSON', value: 'json' },\n                    { label: 'XML', value: 'xml' },\n                ],\n                'class': 'fullwidth',\n            }).appendTo($form);\n\n            let $typeSelect = $typeField.find('select');\n            this.addListener($typeSelect, 'change', () => {\n                let type = $typeSelect.val();\n                if (this.exportersByType[type].formattable) {\n                    $formatField.removeClass('hidden');\n                } else {\n                    $formatField.addClass('hidden');\n                }\n            });\n            $typeSelect.trigger('change');\n\n            // Only show the Limit field if there aren't any selected elements\n            var selectedElementIds = this.view.getSelectedElementIds();\n\n            if (!selectedElementIds.length) {\n                var $limitField = Craft.ui.createTextField({\n                    label: Craft.t('app', 'Limit'),\n                    placeholder: Craft.t('app', 'No limit'),\n                    type: 'number',\n                    min: 1\n                }).appendTo($form);\n            }\n\n            $('<button/>', {\n                type: 'submit',\n                'class': 'btn submit fullwidth',\n                text: Craft.t('app', 'Export')\n            }).appendTo($form)\n\n            var $spinner = $('<div/>', {\n                'class': 'spinner hidden'\n            }).appendTo($form);\n\n            var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n            hud.on('hide', $.proxy(function() {\n                this.$exportBtn.removeClass('active');\n            }, this));\n\n            var submitting = false;\n\n            this.addListener($form, 'submit', function(ev) {\n                ev.preventDefault();\n                if (submitting) {\n                    return;\n                }\n\n                submitting = true;\n                $spinner.removeClass('hidden');\n\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                params.type = $typeField.find('select').val();\n                params.format = $formatField.find('select').val();\n\n                if (selectedElementIds.length) {\n                    params.criteria.id = selectedElementIds;\n                } else {\n                    var limit = parseInt($limitField.find('input').val());\n                    if (limit && !isNaN(limit)) {\n                        params.criteria.limit = limit;\n                    }\n                }\n\n                if (Craft.csrfTokenValue) {\n                    params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n                }\n\n                Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                    .then(function() {\n                        submitting = false;\n                        $spinner.addClass('hidden');\n                    })\n                    .catch(function() {\n                        submitting = false;\n                        $spinner.addClass('hidden');\n                        if (!this._ignoreFailedRequest) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                    });\n            });\n        },\n\n        _createMenuTriggerList: function(actions, destructive) {\n            if (actions && actions.length) {\n                var $ul = $('<ul/>');\n\n                for (var i = 0; i < actions.length; i++) {\n                    $('<li/>').append($('<a/>', {\n                        id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                        'class': (destructive ? 'error' : null),\n                        data: {\n                            action: actions[i],\n                        },\n                        text: actions[i].name\n                    })).appendTo($ul);\n                }\n\n                return $ul;\n            }\n        }\n    },\n    {\n        defaults: {\n            context: 'index',\n            modal: null,\n            storageKey: null,\n            criteria: null,\n            batchSize: 100,\n            disabledElementIds: [],\n            selectable: false,\n            multiSelect: false,\n            buttonContainer: null,\n            hideSidebar: false,\n            toolbarSelector: '.toolbar:first',\n            refreshSourcesAction: 'element-indexes/get-source-tree-html',\n            updateElementsAction: 'element-indexes/get-elements',\n            countElementsAction: 'element-indexes/count-elements',\n            submitActionsAction: 'element-indexes/perform-action',\n            defaultSiteId: null,\n            defaultSource: null,\n\n            onAfterInit: $.noop,\n            onSelectSource: $.noop,\n            onSelectSite: $.noop,\n            onUpdateElements: $.noop,\n            onSelectionChange: $.noop,\n            onEnableElements: $.noop,\n            onDisableElements: $.noop,\n            onAfterAction: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend(\n    {\n        $container: null,\n        $loadingMoreSpinner: null,\n        $elementContainer: null,\n        $scroller: null,\n\n        elementIndex: null,\n        thumbLoader: null,\n        elementSelect: null,\n\n        loadingMore: false,\n\n        _totalVisible: null,\n        _morePending: null,\n        _handleEnableElements: null,\n        _handleDisableElements: null,\n\n        init: function(elementIndex, container, settings) {\n            this.elementIndex = elementIndex;\n            this.$container = $(container);\n            this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n            // Create a \"loading-more\" spinner\n            this.$loadingMoreSpinner = $(\n                '<div class=\"centeralign hidden\">' +\n                '<div class=\"spinner loadingmore\"></div>' +\n                '</div>'\n            ).insertAfter(this.$container);\n\n            // Get the actual elements container and its child elements\n            this.$elementContainer = this.getElementContainer();\n            var $elements = this.$elementContainer.children();\n\n            this.setTotalVisible($elements.length);\n            this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n            // Instantiate the thumb loader\n            this.thumbLoader = new Craft.ElementThumbLoader();\n            this.thumbLoader.load($elements);\n\n            if (this.settings.selectable) {\n                this.elementSelect = new Garnish.Select(\n                    this.$elementContainer,\n                    $elements.filter(':not(.disabled)'),\n                    {\n                        multi: this.settings.multiSelect,\n                        vertical: this.isVerticalList(),\n                        handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                        filter: ':not(a):not(.toggle)',\n                        checkboxMode: this.settings.checkboxMode,\n                        onSelectionChange: $.proxy(this, 'onSelectionChange')\n                    }\n                );\n\n                this._handleEnableElements = $.proxy(function(ev) {\n                    this.elementSelect.addItems(ev.elements);\n                }, this);\n\n                this._handleDisableElements = $.proxy(function(ev) {\n                    this.elementSelect.removeItems(ev.elements);\n                }, this);\n\n                this.elementIndex.on('enableElements', this._handleEnableElements);\n                this.elementIndex.on('disableElements', this._handleDisableElements);\n            }\n\n            // Enable inline element editing if this is an index page\n            if (this.settings.context === 'index') {\n                this._handleElementEditing = $.proxy(function(ev) {\n                    var $target = $(ev.target);\n\n                    if ($target.prop('nodeName') === 'A') {\n                        // Let the link do its thing\n                        return;\n                    }\n\n                    var $element;\n\n                    if ($target.hasClass('element')) {\n                        $element = $target;\n                    }\n                    else {\n                        $element = $target.closest('.element');\n\n                        if (!$element.length) {\n                            return;\n                        }\n                    }\n\n                    if (Garnish.hasAttr($element, 'data-editable')) {\n                        this.createElementEditor($element);\n                    }\n                }, this);\n\n                if (!this.elementIndex.trashed) {\n                    this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                    if ($.isTouchCapable()) {\n                        this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                    }\n                }\n            }\n\n            // Give sub-classes a chance to do post-initialization stuff here\n            this.afterInit();\n\n            // Set up lazy-loading\n            if (this.settings.batchSize) {\n                if (this.settings.context === 'index') {\n                    this.$scroller = Garnish.$scrollContainer;\n                }\n                else {\n                    this.$scroller = this.elementIndex.$main;\n                }\n\n                this.$scroller.scrollTop(0);\n                this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                this.maybeLoadMore();\n            }\n        },\n\n        getElementContainer: function() {\n            throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n        },\n\n        afterInit: function() {\n        },\n\n        getAllElements: function() {\n            return this.$elementContainer.children();\n        },\n\n        getEnabledElements: function() {\n            return this.$elementContainer.children(':not(.disabled)');\n        },\n\n        getElementById: function(id) {\n            var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n            if ($element.length) {\n                return $element;\n            }\n            else {\n                return null;\n            }\n        },\n\n        getSelectedElements: function() {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            return this.elementSelect.$selectedItems;\n        },\n\n        getSelectedElementIds: function() {\n            let $selectedElements;\n            try {\n                $selectedElements = this.getSelectedElements();\n            } catch (e) {\n            }\n\n            let ids = [];\n            if ($selectedElements) {\n                for (var i = 0; i < $selectedElements.length; i++) {\n                    ids.push($selectedElements.eq(i).data('id'));\n                }\n            }\n            return ids;\n        },\n\n        selectElement: function($element) {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            this.elementSelect.selectItem($element, true);\n            return true;\n        },\n\n        selectElementById: function(id) {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            var $element = this.getElementById(id);\n\n            if ($element) {\n                this.elementSelect.selectItem($element, true);\n                return true;\n            }\n            else {\n                return false;\n            }\n        },\n\n        selectAllElements: function() {\n            this.elementSelect.selectAll();\n        },\n\n        deselectAllElements: function() {\n            this.elementSelect.deselectAll();\n        },\n\n        isVerticalList: function() {\n            return false;\n        },\n\n        getTotalVisible: function() {\n            return this._totalVisible;\n        },\n\n        setTotalVisible: function(totalVisible) {\n            this._totalVisible = totalVisible;\n        },\n\n        getMorePending: function() {\n            return this._morePending;\n        },\n\n        setMorePending: function(morePending) {\n            this._morePending = morePending;\n        },\n\n        /**\n         * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n         */\n        maybeLoadMore: function() {\n            if (this.canLoadMore()) {\n                this.loadMore();\n            }\n        },\n\n        /**\n         * Returns whether the user has reached the bottom of the scroll area.\n         */\n        canLoadMore: function() {\n            if (!this.getMorePending() || !this.settings.batchSize) {\n                return false;\n            }\n\n            // Check if the user has reached the bottom of the scroll area\n            var containerHeight;\n\n            if (this.$scroller[0] === Garnish.$win[0]) {\n                var winHeight = Garnish.$win.innerHeight(),\n                    winScrollTop = Garnish.$win.scrollTop(),\n                    containerOffset = this.$container.offset().top;\n                containerHeight = this.$container.height();\n\n                return (winHeight + winScrollTop >= containerOffset + containerHeight);\n            }\n            else {\n                var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                    containerScrollTop = this.$scroller.scrollTop();\n                containerHeight = this.$scroller.outerHeight();\n\n                return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n            }\n        },\n\n        /**\n         * Loads the next batch of elements.\n         */\n        loadMore: function() {\n            if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n                return;\n            }\n\n            this.loadingMore = true;\n            this.$loadingMoreSpinner.removeClass('hidden');\n            this.removeListener(this.$scroller, 'scroll');\n\n            var data = this.getLoadMoreParams();\n\n            Craft.postActionRequest(this.settings.loadMoreElementsAction, data, $.proxy(function(response, textStatus) {\n                this.loadingMore = false;\n                this.$loadingMoreSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $newElements = $(response.html);\n\n                    this.appendElements($newElements);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n\n                    if (this.elementSelect) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n                    this.setMorePending($newElements.length == this.settings.batchSize);\n\n                    // Is there room to load more right now?\n                    this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                    this.maybeLoadMore();\n                }\n            }, this));\n        },\n\n        getLoadMoreParams: function() {\n            // Use the same params that were passed when initializing this view\n            var params = $.extend(true, {}, this.settings.params);\n            params.criteria.offset = this.getTotalVisible();\n            return params;\n        },\n\n        appendElements: function($newElements) {\n            $newElements.appendTo(this.$elementContainer);\n            this.thumbLoader.load($newElements);\n            this.onAppendElements($newElements);\n        },\n\n        onAppendElements: function($newElements) {\n            this.settings.onAppendElements($newElements);\n            this.trigger('appendElements', {\n                newElements: $newElements\n            });\n        },\n\n        onSelectionChange: function() {\n            this.settings.onSelectionChange();\n            this.trigger('selectionChange');\n        },\n\n        createElementEditor: function($element) {\n            Craft.createElementEditor($element.data('type'), $element, {\n                elementIndex: this.elementIndex\n            });\n        },\n\n        disable: function() {\n            if (this.elementSelect) {\n                this.elementSelect.disable();\n            }\n        },\n\n        enable: function() {\n            if (this.elementSelect) {\n                this.elementSelect.enable();\n            }\n        },\n\n        destroy: function() {\n            // Remove the \"loading-more\" spinner, since we added that outside of the view container\n            this.$loadingMoreSpinner.remove();\n\n            // Kill the thumb loader\n            this.thumbLoader.destroy();\n            delete this.thumbLoader;\n\n            // Delete the element select\n            if (this.elementSelect) {\n                this.elementIndex.off('enableElements', this._handleEnableElements);\n                this.elementIndex.off('disableElements', this._handleDisableElements);\n\n                this.elementSelect.destroy();\n                delete this.elementSelect;\n            }\n\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            context: 'index',\n            batchSize: null,\n            params: null,\n            selectable: false,\n            multiSelect: false,\n            checkboxMode: false,\n            loadMoreElementsAction: 'element-indexes/get-more-elements',\n            onAppendElements: $.noop,\n            onSelectionChange: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend(\n    {\n        thumbLoader: null,\n        elementSelect: null,\n        elementSort: null,\n        modal: null,\n        elementEditor: null,\n\n        $container: null,\n        $elementsContainer: null,\n        $elements: null,\n        $addElementBtn: null,\n        $addElementBtnContainer: null,\n\n        _initialized: false,\n\n        init: function(settings) {\n            // Normalize the settings and set them\n            // ---------------------------------------------------------------------\n\n            // Are they still passing in a bunch of arguments?\n            if (!$.isPlainObject(settings)) {\n                // Loop through all of the old arguments and apply them to the settings\n                var normalizedSettings = {},\n                    args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n                for (var i = 0; i < args.length; i++) {\n                    if (typeof arguments[i] !== 'undefined') {\n                        normalizedSettings[args[i]] = arguments[i];\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                settings = normalizedSettings;\n            }\n\n            this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n            // Apply the storage key prefix\n            if (this.settings.modalStorageKey) {\n                this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n            }\n\n            // No reason for this to be sortable if we're only allowing 1 selection\n            if (this.settings.limit == 1) {\n                this.settings.sortable = false;\n            }\n\n            this.$container = this.getContainer();\n\n            // Store a reference to this class\n            this.$container.data('elementSelect', this);\n\n            this.$elementsContainer = this.getElementsContainer();\n\n            this.$addElementBtn = this.getAddElementsBtn();\n            if (this.$addElementBtn) {\n                this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n                if (!this.$addElementBtnContainer.length) {\n                    this.$addElementBtnContainer = null;\n                }\n            }\n\n            this.thumbLoader = new Craft.ElementThumbLoader();\n\n            this.initElementSelect();\n            this.initElementSort();\n            this.resetElements();\n\n            if (this.$addElementBtn) {\n                this.addListener(this.$addElementBtn, 'activate', 'showModal');\n            }\n\n            Garnish.requestAnimationFrame(() => {\n                this._initialized = true;\n            });\n        },\n\n        get totalSelected() {\n            return this.$elements.length;\n        },\n\n        getContainer: function() {\n            return $('#' + this.settings.id);\n        },\n\n        getElementsContainer: function() {\n            return this.$container.children('.elements');\n        },\n\n        getElements: function() {\n            return this.$elementsContainer.children();\n        },\n\n        getAddElementsBtn: function() {\n            return this.$container.find('.btn.add:first');\n        },\n\n        initElementSelect: function() {\n            if (this.settings.selectable) {\n                this.elementSelect = new Garnish.Select({\n                    multi: this.settings.sortable,\n                    filter: ':not(.delete)'\n                });\n            }\n        },\n\n        initElementSort: function() {\n            if (this.settings.sortable) {\n                this.elementSort = new Garnish.DragSort({\n                    container: this.$elementsContainer,\n                    filter: (this.settings.selectable ? $.proxy(function() {\n                            // Only return all the selected items if the target item is selected\n                            if (this.elementSort.$targetItem.hasClass('sel')) {\n                                return this.elementSelect.getSelectedItems();\n                            }\n                            else {\n                                return this.elementSort.$targetItem;\n                            }\n                        }, this) : null),\n                    ignoreHandleSelector: '.delete',\n                    axis: this.getElementSortAxis(),\n                    collapseDraggees: true,\n                    magnetStrength: 4,\n                    helperLagBase: 1.5,\n                    onSortChange: (this.settings.selectable ? $.proxy(function() {\n                            this.elementSelect.resetItemOrder();\n                        }, this) : null)\n                });\n            }\n        },\n\n        getElementSortAxis: function() {\n            return (this.settings.viewMode === 'list' ? 'y' : null);\n        },\n\n        canAddMoreElements: function() {\n            return (!this.settings.limit || this.$elements.length < this.settings.limit);\n        },\n\n        updateAddElementsBtn: function() {\n            if (this.canAddMoreElements()) {\n                this.enableAddElementsBtn();\n            }\n            else {\n                this.disableAddElementsBtn();\n            }\n        },\n\n        disableAddElementsBtn: function() {\n            let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n            if ($btn) {\n                $btn.addClass('hidden');\n            }\n        },\n\n        enableAddElementsBtn: function() {\n            let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n            if ($btn) {\n                $btn.removeClass('hidden');\n            }\n        },\n\n        resetElements: function() {\n            if (this.$elements !== null) {\n                this.removeElements(this.$elements);\n            } else {\n                this.$elements = $();\n            }\n\n            this.addElements(this.getElements());\n        },\n\n        addElements: function($elements) {\n            this.thumbLoader.load($elements);\n\n            if (this.settings.selectable) {\n                this.elementSelect.addItems($elements);\n            }\n\n            if (this.settings.sortable) {\n                this.elementSort.addItems($elements);\n            }\n\n            if (this.settings.editable) {\n                this._handleShowElementEditor = $.proxy(function(ev) {\n                    var $element = $(ev.currentTarget);\n                    if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                        this.elementEditor = this.createElementEditor($element);\n                    }\n                }, this);\n\n                this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n                if ($.isTouchCapable()) {\n                    this.addListener($elements, 'taphold', this._handleShowElementEditor);\n                }\n            }\n\n            $elements.find('.delete').on('click dblclick', $.proxy(function(ev) {\n                this.removeElement($(ev.currentTarget).closest('.element'));\n                // Prevent this from acting as one of a double-click\n                ev.stopPropagation();\n            }, this));\n\n            this.$elements = this.$elements.add($elements);\n            this.updateAddElementsBtn();\n        },\n\n        createElementEditor: function($element, settings) {\n            if (!settings) {\n                settings = {};\n            }\n            settings.prevalidate = this.settings.prevalidate;\n            return Craft.createElementEditor(this.settings.elementType, $element, settings);\n        },\n\n        removeElements: function($elements) {\n            if (this.settings.selectable) {\n                this.elementSelect.removeItems($elements);\n            }\n\n            if (this.modal) {\n                var ids = [];\n\n                for (var i = 0; i < $elements.length; i++) {\n                    var id = $elements.eq(i).data('id');\n\n                    if (id) {\n                        ids.push(id);\n                    }\n                }\n\n                if (ids.length) {\n                    this.modal.elementIndex.enableElementsById(ids);\n                }\n            }\n\n            // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n            $elements.children('input').prop('disabled', true);\n\n            this.$elements = this.$elements.not($elements);\n            this.updateAddElementsBtn();\n\n            this.onRemoveElements();\n        },\n\n        removeElement: function($element) {\n            this.removeElements($element);\n            this.animateElementAway($element, () => {\n                $element.remove();\n            });\n        },\n\n        animateElementAway: function($element, callback) {\n            $element.css('z-index', 0);\n\n            var animateCss = {\n                opacity: -1\n            };\n            animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n            if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n                animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n            }\n\n            // Pause the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.pause();\n            }\n\n            $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n                callback();\n\n                // Resume the draft editor\n                if (window.draftEditor) {\n                    window.draftEditor.resume();\n                }\n            });\n        },\n\n        showModal: function() {\n            // Make sure we haven't reached the limit\n            if (!this.canAddMoreElements()) {\n                return;\n            }\n\n            if (!this.modal) {\n                this.modal = this.createModal();\n            }\n            else {\n                this.modal.show();\n            }\n        },\n\n        createModal: function() {\n            return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n        },\n\n        getModalSettings: function() {\n            return $.extend({\n                closeOtherModals: false,\n                storageKey: this.modalStorageKey,\n                sources: this.settings.sources,\n                criteria: this.settings.criteria,\n                multiSelect: (this.settings.limit != 1),\n                showSiteMenu: this.settings.showSiteMenu,\n                disabledElementIds: this.getDisabledElementIds(),\n                onSelect: $.proxy(this, 'onModalSelect')\n            }, this.settings.modalSettings);\n        },\n\n        getSelectedElementIds: function() {\n            var ids = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                ids.push(this.$elements.eq(i).data('id'));\n            }\n\n            return ids;\n        },\n\n        getDisabledElementIds: function() {\n            var ids = this.getSelectedElementIds();\n\n            if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n                ids.push(this.settings.sourceElementId);\n            }\n\n            if (this.settings.disabledElementIds) {\n                ids.push(...this.settings.disabledElementIds);\n            }\n\n            return ids;\n        },\n\n        onModalSelect: function(elements) {\n            if (this.settings.limit) {\n                // Cut off any excess elements\n                var slotsLeft = this.settings.limit - this.$elements.length;\n\n                if (elements.length > slotsLeft) {\n                    elements = elements.slice(0, slotsLeft);\n                }\n            }\n\n            this.selectElements(elements);\n            this.updateDisabledElementsInModal();\n        },\n\n        selectElements: function(elements) {\n            for (let i = 0; i < elements.length; i++) {\n                let elementInfo = elements[i],\n                    $element = this.createNewElement(elementInfo);\n\n                this.appendElement($element);\n                this.addElements($element);\n                this.animateElementIntoPlace(elementInfo.$element, $element);\n\n                // Override the element reference with the new one\n                elementInfo.$element = $element;\n            }\n\n            this.onSelectElements(elements);\n        },\n\n        createNewElement: function(elementInfo) {\n            var $element = elementInfo.$element.clone();\n\n            // Make a couple tweaks\n            Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n            $element.addClass('removable');\n            $element.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + elementInfo.id + '\">' +\n                '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n            return $element;\n        },\n\n        appendElement: function($element) {\n            $element.appendTo(this.$elementsContainer);\n        },\n\n        animateElementIntoPlace: function($modalElement, $inputElement) {\n            var origOffset = $modalElement.offset(),\n                destOffset = $inputElement.offset(),\n                $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n            $inputElement.css('visibility', 'hidden');\n\n            $helper.css({\n                position: 'absolute',\n                zIndex: 10000,\n                top: origOffset.top,\n                left: origOffset.left\n            });\n\n            var animateCss = {\n                top: destOffset.top,\n                left: destOffset.left\n            };\n\n            $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n                $helper.remove();\n                $inputElement.css('visibility', 'visible');\n            });\n        },\n\n        updateDisabledElementsInModal: function() {\n            if (this.modal.elementIndex) {\n                this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n            }\n        },\n\n        getElementById: function(id) {\n            for (var i = 0; i < this.$elements.length; i++) {\n                var $element = this.$elements.eq(i);\n\n                if ($element.data('id') == id) {\n                    return $element;\n                }\n            }\n        },\n\n        onSelectElements: function(elements) {\n            this.trigger('selectElements', {elements: elements});\n            this.settings.onSelectElements(elements);\n\n            if (window.draftEditor) {\n                window.draftEditor.checkForm();\n            }\n        },\n\n        onRemoveElements: function() {\n            this.trigger('removeElements');\n            this.settings.onRemoveElements();\n        }\n    },\n    {\n        ADD_FX_DURATION: 200,\n        REMOVE_FX_DURATION: 200,\n\n        defaults: {\n            id: null,\n            name: null,\n            fieldId: null,\n            elementType: null,\n            sources: null,\n            criteria: {},\n            allowSelfRelations: false,\n            sourceElementId: null,\n            disabledElementIds: null,\n            viewMode: 'list',\n            limit: null,\n            showSiteMenu: false,\n            modalStorageKey: null,\n            modalSettings: {},\n            onSelectElements: $.noop,\n            onRemoveElements: $.noop,\n            sortable: true,\n            selectable: true,\n            editable: true,\n            prevalidate: false,\n            editorSettings: {}\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend(\n    {\n        elementType: null,\n        elementIndex: null,\n\n        $body: null,\n        $selectBtn: null,\n        $sidebar: null,\n        $sources: null,\n        $sourceToggles: null,\n        $main: null,\n        $search: null,\n        $elements: null,\n        $tbody: null,\n        $primaryButtons: null,\n        $secondaryButtons: null,\n        $cancelBtn: null,\n        $footerSpinner: null,\n\n        init: function(elementType, settings) {\n            this.elementType = elementType;\n            this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n            // Build the modal\n            var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n                $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n                $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n            this.base($container, this.settings);\n\n            this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n            this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n            this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$primaryButtons);\n            this.$selectBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn disabled submit',\n                text: Craft.t('app', 'Select'),\n            }).appendTo(this.$primaryButtons);\n\n            this.$body = $body;\n\n            this.addListener(this.$cancelBtn, 'activate', 'cancel');\n            this.addListener(this.$selectBtn, 'activate', 'selectElements');\n        },\n\n        onFadeIn: function() {\n            if (!this.elementIndex) {\n                this._createElementIndex();\n            }\n            else {\n                // Auto-focus the Search box\n                if (!Garnish.isMobileBrowser(true)) {\n                    this.elementIndex.$search.trigger('focus');\n                }\n            }\n\n            this.base();\n        },\n\n        onSelectionChange: function() {\n            this.updateSelectBtnState();\n        },\n\n        updateSelectBtnState: function() {\n            if (this.$selectBtn) {\n                if (this.elementIndex.getSelectedElements().length) {\n                    this.enableSelectBtn();\n                }\n                else {\n                    this.disableSelectBtn();\n                }\n            }\n        },\n\n        enableSelectBtn: function() {\n            this.$selectBtn.removeClass('disabled');\n        },\n\n        disableSelectBtn: function() {\n            this.$selectBtn.addClass('disabled');\n        },\n\n        enableCancelBtn: function() {\n            this.$cancelBtn.removeClass('disabled');\n        },\n\n        disableCancelBtn: function() {\n            this.$cancelBtn.addClass('disabled');\n        },\n\n        showFooterSpinner: function() {\n            this.$footerSpinner.removeClass('hidden');\n        },\n\n        hideFooterSpinner: function() {\n            this.$footerSpinner.addClass('hidden');\n        },\n\n        cancel: function() {\n            if (!this.$cancelBtn.hasClass('disabled')) {\n                this.hide();\n            }\n        },\n\n        selectElements: function() {\n            if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n                // TODO: This code shouldn't know about views' elementSelect objects\n                this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n                var $selectedElements = this.elementIndex.getSelectedElements(),\n                    elementInfo = this.getElementInfo($selectedElements);\n\n                this.onSelect(elementInfo);\n\n                if (this.settings.disableElementsOnSelect) {\n                    this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n                }\n\n                if (this.settings.hideOnSelect) {\n                    this.hide();\n                }\n            }\n        },\n\n        getElementInfo: function($selectedElements) {\n            var info = [];\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                var $element = $($selectedElements[i]);\n                var elementInfo = Craft.getElementInfo($element);\n\n                info.push(elementInfo);\n            }\n\n            return info;\n        },\n\n        show: function() {\n            this.updateSelectBtnState();\n            this.base();\n        },\n\n        onSelect: function(elementInfo) {\n            this.settings.onSelect(elementInfo);\n        },\n\n        disable: function() {\n            if (this.elementIndex) {\n                this.elementIndex.disable();\n            }\n\n            this.base();\n        },\n\n        enable: function() {\n            if (this.elementIndex) {\n                this.elementIndex.enable();\n            }\n\n            this.base();\n        },\n\n        _createElementIndex: function() {\n            // Get the modal body HTML based on the settings\n            var data = {\n                context: 'modal',\n                elementType: this.elementType,\n                sources: this.settings.sources\n            };\n\n            if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n                data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n            }\n\n            Craft.postActionRequest('elements/get-modal-body', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.$body.html(response.html);\n\n                    if (this.$body.has('.sidebar:not(.hidden)').length) {\n                        this.$body.addClass('has-sidebar');\n                    }\n\n                    // Initialize the element index\n                    this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                        context: 'modal',\n                        modal: this,\n                        storageKey: this.settings.storageKey,\n                        criteria: this.settings.criteria,\n                        disabledElementIds: this.settings.disabledElementIds,\n                        selectable: true,\n                        multiSelect: this.settings.multiSelect,\n                        buttonContainer: this.$secondaryButtons,\n                        onSelectionChange: $.proxy(this, 'onSelectionChange'),\n                        hideSidebar: this.settings.hideSidebar,\n                        defaultSiteId: this.settings.defaultSiteId,\n                        defaultSource: this.settings.defaultSource\n                    });\n\n                    // Double-clicking or double-tapping should select the elements\n                    this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                        // Make sure the touch targets are the same\n                        // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                        if (touchData.firstTap.target === touchData.secondTap.target) {\n                            this.selectElements();\n                        }\n                    });\n                }\n            }, this));\n        }\n    },\n    {\n        defaults: {\n            resizable: true,\n            storageKey: null,\n            sources: null,\n            criteria: null,\n            multiSelect: false,\n            showSiteMenu: null,\n            disabledElementIds: [],\n            disableElementsOnSelect: false,\n            hideOnSelect: true,\n            onCancel: $.noop,\n            onSelect: $.noop,\n            hideSidebar: false,\n            defaultSiteId: null,\n            defaultSource: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend(\n    {\n        $source: null,\n        $target: null,\n        $form: null,\n        settings: null,\n\n        listening: null,\n        timeout: null,\n\n        init: function(source, target, settings) {\n            this.$source = $(source);\n            this.$target = $(target);\n            this.$form = this.$source.closest('form');\n\n            this.setSettings(settings);\n\n            this.startListening();\n        },\n\n        setNewSource: function(source) {\n            var listening = this.listening;\n            this.stopListening();\n\n            this.$source = $(source);\n\n            if (listening) {\n                this.startListening();\n            }\n        },\n\n        startListening: function() {\n            if (this.listening) {\n                return;\n            }\n\n            this.listening = true;\n\n            this.addListener(this.$source, 'input', 'onSourceTextChange');\n            this.addListener(this.$target, 'input', 'onTargetTextChange');\n            this.addListener(this.$form, 'submit', 'onFormSubmit');\n        },\n\n        stopListening: function() {\n            if (!this.listening) {\n                return;\n            }\n\n            this.listening = false;\n\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.removeAllListeners(this.$source);\n            this.removeAllListeners(this.$target);\n            this.removeAllListeners(this.$form);\n        },\n\n        onSourceTextChange: function() {\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.timeout = setTimeout($.proxy(this, 'updateTarget'), 250);\n        },\n\n        onTargetTextChange: function() {\n            if (this.$target.get(0) === document.activeElement) {\n                this.stopListening();\n            }\n        },\n\n        onFormSubmit: function() {\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.updateTarget();\n        },\n\n        updateTarget: function() {\n            if (!this.$target.is(':visible')) {\n                return;\n            }\n\n            var sourceVal = this.$source.val();\n\n            if (typeof sourceVal === 'undefined') {\n                // The source input may not exist anymore\n                return;\n            }\n\n            var targetVal = this.generateTargetValue(sourceVal);\n\n            this.$target.val(targetVal);\n            this.$target.trigger('change');\n            this.$target.trigger('input');\n\n            // If the target already has focus, select its whole value to mimic\n            // the behavior if the value had already been generated and they just tabbed in\n            if (this.$target.is(':focus')) {\n                Craft.selectFullValue(this.$target);\n            }\n        },\n\n        generateTargetValue: function(sourceVal) {\n            return sourceVal;\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend(\n    {\n        settings: null,\n        totalItems: null,\n        sorter: null,\n\n        $noItems: null,\n        $table: null,\n        $tbody: null,\n        $deleteBtns: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.AdminTable.defaults);\n\n            if (!this.settings.allowDeleteAll) {\n                this.settings.minItems = 1;\n            }\n\n            this.$noItems = $(this.settings.noItemsSelector);\n            this.$table = $(this.settings.tableSelector);\n            this.$tbody = this.$table.children('tbody');\n            this.totalItems = this.$tbody.children().length;\n\n            if (this.settings.sortable) {\n                this.sorter = new Craft.DataTableSorter(this.$table, {\n                    onSortChange: $.proxy(this, 'reorderItems')\n                });\n            }\n\n            this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n            this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n            this.updateUI();\n        },\n\n        addRow: function(row) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                // Sorry pal.\n                return;\n            }\n\n            var $row = $(row).appendTo(this.$tbody),\n                $deleteBtn = $row.find('.delete');\n\n            if (this.settings.sortable) {\n                this.sorter.addItems($row);\n            }\n\n            this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n            this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n            this.totalItems++;\n\n            this.updateUI();\n        },\n\n        reorderItems: function() {\n            if (!this.settings.sortable) {\n                return;\n            }\n\n            // Get the new field order\n            var ids = [];\n\n            for (var i = 0; i < this.sorter.$items.length; i++) {\n                var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n                ids.push(id);\n            }\n\n            // Send it to the server\n            var data = {\n                ids: JSON.stringify(ids)\n            };\n\n            Craft.postActionRequest(this.settings.reorderAction, data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.onReorderItems(ids);\n                        Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                    }\n                    else {\n                        Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                    }\n                }\n            }, this));\n        },\n\n        handleDeleteBtnClick: function(event) {\n            if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n                // Sorry pal.\n                return;\n            }\n\n            var $row = $(event.target).closest('tr');\n\n            if (this.confirmDeleteItem($row)) {\n                this.deleteItem($row);\n            }\n        },\n\n        confirmDeleteItem: function($row) {\n            var name = this.getItemName($row);\n            return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name: name}));\n        },\n\n        deleteItem: function($row) {\n            var data = {\n                id: this.getItemId($row)\n            };\n\n            Craft.postActionRequest(this.settings.deleteAction, data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.handleDeleteItemResponse(response, $row);\n                }\n            }, this));\n        },\n\n        handleDeleteItemResponse: function(response, $row) {\n            var id = this.getItemId($row),\n                name = this.getItemName($row);\n\n            if (response.success) {\n                if (this.sorter) {\n                    this.sorter.removeItems($row);\n                }\n\n                $row.remove();\n                this.totalItems--;\n                this.updateUI();\n                this.onDeleteItem(id);\n\n                Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name: name}));\n            }\n            else {\n                Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name: name}));\n            }\n        },\n\n        onReorderItems: function(ids) {\n            this.settings.onReorderItems(ids);\n        },\n\n        onDeleteItem: function(id) {\n            this.settings.onDeleteItem(id);\n        },\n\n        getItemId: function($row) {\n            return $row.attr(this.settings.idAttribute);\n        },\n\n        getItemName: function($row) {\n            return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n        },\n\n        updateUI: function() {\n            // Show the \"No Whatever Exists\" message if there aren't any\n            if (this.totalItems === 0) {\n                this.$table.hide();\n                this.$noItems.removeClass('hidden');\n            }\n            else {\n                this.$table.show();\n                this.$noItems.addClass('hidden');\n            }\n\n            // Disable the sort buttons if there's only one row\n            if (this.settings.sortable) {\n                var $moveButtons = this.$table.find('.move');\n\n                if (this.totalItems === 1) {\n                    $moveButtons.addClass('disabled');\n                }\n                else {\n                    $moveButtons.removeClass('disabled');\n                }\n            }\n\n            // Disable the delete buttons if we've reached the minimum items\n            if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n                this.$deleteBtns.addClass('disabled');\n            }\n            else {\n                this.$deleteBtns.removeClass('disabled');\n            }\n\n            // Hide the New Whatever button if we've reached the maximum items\n            if (this.settings.newItemBtnSelector) {\n                if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                    $(this.settings.newItemBtnSelector).addClass('hidden');\n                }\n                else {\n                    $(this.settings.newItemBtnSelector).removeClass('hidden');\n                }\n            }\n        }\n    },\n    {\n        defaults: {\n            tableSelector: null,\n            noItemsSelector: null,\n            newItemBtnSelector: null,\n            idAttribute: 'data-id',\n            nameAttribute: 'data-name',\n            sortable: false,\n            allowDeleteAll: true,\n            minItems: 0,\n            maxItems: null,\n            reorderAction: null,\n            deleteAction: null,\n            reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n            reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n            confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n            deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n            deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n            onReorderItems: $.noop,\n            onDeleteItem: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend(\n    {\n        reloadIndex: false,\n\n        updateForm: function(response, refreshInitialData) {\n            this.base(response, refreshInitialData);\n\n            if (this.$element.data('id')) {\n                var $imageEditorTrigger = this.$fieldsContainer.find('> .meta > .preview-thumb-container.editable');\n\n                if ($imageEditorTrigger.length) {\n                    this.addListener($imageEditorTrigger, 'click', 'showImageEditor');\n                }\n            }\n        },\n\n        showImageEditor: function()\n        {\n            new Craft.AssetImageEditor(this.$element.data('id'), {\n                onSave: function () {\n                    this.reloadIndex = true;\n                    this.reloadForm();\n                }.bind(this),\n            });\n        },\n\n        onHideHud: function () {\n            if (this.reloadIndex && this.settings.elementIndex) {\n                this.settings.elementIndex.updateElements();\n            } else if (this.reloadIndex && this.settings.input) {\n                this.settings.input.refreshThumbnail(this.$element.data('id'));\n            }\n\n            this.base();\n        }\n    });\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend(\n    {\n        // jQuery objects\n        $body: null,\n        $footer: null,\n        $imageTools: null,\n        $buttons: null,\n        $cancelBtn: null,\n        $replaceBtn: null,\n        $saveBtn: null,\n        $editorContainer: null,\n        $straighten: null,\n        $croppingCanvas: null,\n        $spinnerCanvas: null,\n\n        // FabricJS objects\n        canvas: null,\n        image: null,\n        viewport: null,\n        focalPoint: null,\n        grid: null,\n        croppingCanvas: null,\n        clipper: null,\n        croppingRectangle: null,\n        cropperHandles: null,\n        cropperGrid: null,\n        croppingShade: null,\n        croppingAreaText: null,\n\n        // Image state attributes\n        imageStraightenAngle: 0,\n        viewportRotation: 0,\n        originalWidth: 0,\n        originalHeight: 0,\n        imageVerticeCoords: null,\n        zoomRatio: 1,\n\n        // Editor state attributes\n        animationInProgress: false,\n        currentView: '',\n        assetId: null,\n        cacheBust: null,\n        draggingCropper: false,\n        scalingCropper: false,\n        draggingFocal: false,\n        previousMouseX: 0,\n        previousMouseY: 0,\n        shiftKeyHeld: false,\n        editorHeight: 0,\n        editorWidth: 0,\n        cropperState: false,\n        scaleFactor: 1,\n        flipData: {},\n        focalPointState: false,\n        spinnerInterval: null,\n        maxImageSize: null,\n        lastLoadedDimensions: null,\n        imageIsLoading: false,\n        mouseMoveEvent: null,\n        croppingConstraint: false,\n        constraintOrientation: 'landscape',\n        showingCustomConstraint: false,\n\n        // Rendering proxy functions\n        renderImage: null,\n        renderCropper: null,\n\n        init: function(assetId, settings) {\n            this.cacheBust = Date.now();\n\n            this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n            if (this.settings.allowDegreeFractions === null) {\n                this.settings.allowDegreeFractions = Craft.isImagick;\n            }\n\n            this.assetId = assetId;\n            this.flipData = {x: 0, y: 0};\n\n            // Build the modal\n            this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n            this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n            this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n            this.base(this.$container, this.settings);\n\n            this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn cancel',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$buttons);\n            this.$replaceBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save replace',\n                text: Craft.t('app', 'Save'),\n            }).appendTo(this.$buttons);\n\n            if (this.settings.allowSavingAsNew) {\n                this.$saveBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit save copy',\n                    text: Craft.t('app', 'Save as a new asset'),\n                }).appendTo(this.$buttons);\n                this.addListener(this.$saveBtn, 'activate', this.saveImage);\n            }\n\n            this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n            this.addListener(this.$cancelBtn, 'activate', this.hide);\n            this.removeListener(this.$shade, 'click');\n\n            this.maxImageSize = this.getMaxImageSize();\n\n            Craft.postActionRequest('assets/image-editor', {assetId: assetId}, $.proxy(this, 'loadEditor'));\n        },\n\n        /**\n         * Get the max image size that is viewable in the editor currently\n         */\n        getMaxImageSize: function() {\n            var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n            var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n            return  Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n        },\n\n        /**\n         * Load the editor markup and start loading components and the image.\n         *\n         * @param data\n         */\n        loadEditor: function(data) {\n            if (!data.html) {\n                alert(Craft.t('app', 'Could not load the image editor.'));\n            }\n\n            this.$body.html(data.html);\n            this.$tabs = $('.tabs li', this.$body);\n            this.$viewsContainer = $('.views', this.$body);\n            this.$views = $('> div', this.$viewsContainer);\n            this.$imageTools = $('.image-container .image-tools', this.$body);\n            this.$editorContainer = $('.image-container .image', this.$body);\n            this.editorHeight = this.$editorContainer.innerHeight();\n            this.editorWidth = this.$editorContainer.innerWidth();\n\n            this._showSpinner();\n\n            this.updateSizeAndPosition();\n\n            // Load the canvas on which we'll host our image and set up the proxy render function\n            this.canvas = new fabric.StaticCanvas('image-canvas');\n\n            // Set up the cropping canvas jquery element for tracking all the nice events\n            this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n            this.$croppingCanvas.width(this.editorWidth);\n            this.$croppingCanvas.height(this.editorHeight);\n\n            this.canvas.enableRetinaScaling = true;\n            this.renderImage = function() {\n                Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n            }.bind(this);\n\n            // Load the image from URL\n            var imageUrl = Craft.getActionUrl('assets/edit-image', {\n                assetId: this.assetId,\n                size: this.maxImageSize,\n                cacheBust: this.cacheBust\n            });\n\n            // Load image and set up the initial properties\n            fabric.Image.fromURL(imageUrl, $.proxy(function(imageObject) {\n                this.image = imageObject;\n                this.image.set({\n                    originX: 'center',\n                    originY: 'center',\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2\n                });\n                this.canvas.add(this.image);\n\n                this.originalHeight = this.image.getHeight();\n                this.originalWidth = this.image.getWidth();\n                this.zoomRatio = 1;\n\n                this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n                // Set up the image bounding box, viewport and position everything\n                this._setFittedImageVerticeCoordinates();\n                this._repositionEditorElements();\n\n                // Set up the focal point\n                var focalState = {\n                    imageDimensions: this.getScaledImageDimensions(),\n                    offsetX: 0,\n                    offsetY: 0\n                };\n\n                var focal = false;\n                if (data.focalPoint) {\n                    // Transform the focal point coordinates from relative to absolute\n                    var focalData = data.focalPoint;\n\n                    // Resolve for the current image dimensions.\n                    var adjustedX = focalState.imageDimensions.width * focalData.x;\n                    var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                    focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                    focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                    focal = true;\n                }\n\n                this.storeFocalPointState(focalState);\n\n                if (focal) {\n                    this._createFocalPoint();\n                }\n\n                this._createViewport();\n                this.storeCropperState();\n\n                // Add listeners to buttons\n                this._addControlListeners();\n\n                // Add mouse event listeners\n                this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n                this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n                this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n                this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n                this._hideSpinner();\n\n                // Render it, finally\n                this.renderImage();\n\n                // Make sure verything gets fired for the first tab\n                this.$tabs.first().trigger('click');\n            }, this));\n        },\n\n        /**\n         * Reload the image to better fit the current available image editor viewport.\n         */\n        _reloadImage: function () {\n            if (this.imageIsLoading) {\n                return;\n            }\n\n            this.imageIsLoading = true;\n            this.maxImageSize = this.getMaxImageSize();\n\n            // Load the image from URL\n            var imageUrl = Craft.getActionUrl('assets/edit-image', {\n                assetId: this.assetId,\n                size: this.maxImageSize,\n                cacheBust: this.cacheBust\n            });\n\n            this.image.setSrc(imageUrl, function(imageObject) {\n                this.originalHeight = imageObject.getHeight();\n                this.originalWidth = imageObject.getWidth();\n                this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n                this.updateSizeAndPosition();\n                this.renderImage();\n                this.imageIsLoading = false;\n            }.bind(this));\n        },\n\n        /**\n         * Update the modal size and position on browser resize\n         */\n        updateSizeAndPosition: function() {\n            if (!this.$container) {\n                return;\n            }\n\n            // Fullscreen modal\n            var innerWidth = window.innerWidth;\n            var innerHeight = window.innerHeight;\n\n            this.$container.css({\n                'width': innerWidth,\n                'min-width': innerWidth,\n                'left': 0,\n\n                'height': innerHeight,\n                'min-height': innerHeight,\n                'top': 0\n            });\n\n            this.$body.css({\n                'height': innerHeight - 62\n            });\n\n            if (innerWidth < innerHeight) {\n                this.$container.addClass('vertical');\n            }\n            else {\n                this.$container.removeClass('vertical');\n            }\n\n            if (this.$spinnerCanvas) {\n                this.$spinnerCanvas.css({\n                    left: ((this.$spinnerCanvas.parent().width()/2)-(this.$spinnerCanvas.width()/2))+'px',\n                    top: ((this.$spinnerCanvas.parent().height()/2)-(this.$spinnerCanvas.height()/2))+'px'\n                });\n            }\n\n            // If image is already loaded, make sure it looks pretty.\n            if (this.$editorContainer && this.image) {\n                this._repositionEditorElements();\n            }\n        },\n\n        /**\n         * Reposition the editor elements to accurately reflect the editor state with current dimensions\n         */\n        _repositionEditorElements: function() {\n            // Remember what the dimensions were before the resize took place\n            var previousEditorDimensions = {\n                width: this.editorWidth,\n                height: this.editorHeight\n            };\n\n            this.editorHeight = this.$editorContainer.innerHeight();\n            this.editorWidth = this.$editorContainer.innerWidth();\n\n            this.canvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            var currentScaledDimensions = this.getScaledImageDimensions();\n\n            // If we're cropping now, we have to reposition the cropper correctly in case\n            // the area for image changes, forcing the image size to change as well.\n            if (this.currentView === 'crop') {\n                this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n                var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n                this._setFittedImageVerticeCoordinates();\n                this._repositionCropper(previouslyOccupiedArea);\n            } else {\n                // Otherwise just recalculate the image zoom ratio\n                this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            }\n\n            // Reposition the image relatively to the previous editor dimensions.\n            this._repositionImage(previousEditorDimensions);\n            this._repositionViewport();\n            this._repositionFocalPoint(previousEditorDimensions);\n            this._zoomImage();\n\n            this.renderImage();\n\n            if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n                this._reloadImage();\n            }\n        },\n\n        /**\n         * Reposition image based on how the editor dimensions have changed.\n         * This ensures keeping the image center offset, if there is any.\n         *\n         * @param previousEditorDimensions\n         */\n        _repositionImage: function(previousEditorDimensions) {\n            this.image.set({\n                left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n                top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n            });\n        },\n\n        /**\n         * Create the viewport for image editor.\n         */\n        _createViewport: function() {\n            this.viewport = new fabric.Rect({\n                width: this.image.width,\n                height: this.image.height,\n                fill: 'rgba(127,0,0,1)',\n                originX: 'center',\n                originY: 'center',\n                globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n                left: this.image.left,\n                top: this.image.top\n            });\n            this.canvas.add(this.viewport);\n            this.renderImage();\n        },\n\n        /**\n         * Create the focal point.\n         */\n        _createFocalPoint: function() {\n            var focalPointState = this.focalPointState;\n            var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n            var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            // Adjust by image margins\n            focalX += this.image.left;\n            focalY += this.image.top;\n\n            var deltaX = 0;\n            var deltaY = 0;\n\n            // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n            if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n                if (this.currentView !== 'crop') {\n                    deltaX = this.viewport.left - this.image.left;\n                    deltaY = this.viewport.top - this.image.top;\n                } else {\n                    // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                    deltaX = this.clipper.left - this.image.left;\n                    deltaY = this.clipper.top - this.image.top;\n                }\n\n                // Bump focal to middle of viewport\n                focalX += deltaX;\n                focalY += deltaY;\n\n                // Reflect changes in saved state\n                focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n                focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            }\n\n            this.focalPoint = new fabric.Group([\n                new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n                new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n            ], {\n                originX: 'center',\n                originY: 'center',\n                left: focalX,\n                top: focalY\n            });\n\n            this.storeFocalPointState(focalPointState);\n            this.canvas.add(this.focalPoint);\n        },\n\n        /**\n         * Toggle focal point\n         */\n        toggleFocalPoint: function() {\n            if (!this.focalPoint) {\n                this._createFocalPoint();\n            } else {\n                this.canvas.remove(this.focalPoint);\n                this.focalPoint = null;\n            }\n\n            this.renderImage();\n        },\n\n        /**\n         * Reposition the viewport to handle editor resizing.\n         */\n        _repositionViewport: function() {\n            if (this.viewport) {\n                var dimensions = {\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2\n                };\n\n                // If we're cropping, nothing exciting happens for the viewport\n                if (this.currentView === 'crop') {\n                    dimensions.width = this.editorWidth;\n                    dimensions.height = this.editorHeight;\n                } else {\n                    // If this is the first initial reposition, no cropper state yet\n                    if (this.cropperState) {\n                        // Recall the state\n                        var state = this.cropperState;\n\n                        var scaledImageDimensions = this.getScaledImageDimensions();\n                        // Make sure we have the correct current image size\n                        var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                        // Set the viewport dimensions\n                        dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                        dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                        // Adjust the image position to show the correct part of the image in the viewport\n                        this.image.set({\n                            left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                            top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                        });\n                    } else {\n                        $.extend(dimensions, this.getScaledImageDimensions());\n                    }\n                }\n                this.viewport.set(dimensions);\n            }\n        },\n\n        _repositionFocalPoint: function(previousEditorDimensions) {\n            if (this.focalPoint) {\n                var offsetX = this.focalPoint.left - this.editorWidth / 2;\n                var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n                var currentWidth = this.image.width;\n                var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n                var ratio = newWidth / currentWidth / this.scaleFactor;\n\n                offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n                offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n                offsetX *= ratio;\n                offsetY *= ratio;\n\n                this.focalPoint.set({\n                    left: this.editorWidth / 2 + offsetX,\n                    top: this.editorHeight / 2 + offsetY\n                });\n            }\n        },\n\n        /**\n         * Return true if the image orientation has changed\n         */\n        hasOrientationChanged: function() {\n            return this.viewportRotation % 180 !== 0;\n        },\n\n        /**\n         * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n         */\n        getScaledImageDimensions: function() {\n            if (typeof this.getScaledImageDimensions._ === 'undefined') {\n                this.getScaledImageDimensions._ = {};\n            }\n\n            this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n            this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n            this.getScaledImageDimensions._.dimensions = {};\n            if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n                this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n                this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n            } else {\n                this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n                this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n            }\n\n            return this.getScaledImageDimensions._.dimensions;\n        },\n\n        /**\n         * Set the image dimensions to reflect the current zoom ratio.\n         */\n        _zoomImage: function() {\n            if (typeof this._zoomImage._ === 'undefined') {\n                this._zoomImage._ = {};\n            }\n\n            this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n            this.image.set({\n                width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n                height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n            });\n        },\n\n        /**\n         * Set up listeners for the controls.\n         */\n        _addControlListeners: function() {\n            // Tabs\n            this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n            // Focal point\n            this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n            // Rotate controls\n            this.addListener($('.rotate-left'), 'click', function() {\n                this.rotateImage(-90);\n            });\n            this.addListener($('.rotate-right'), 'click', function() {\n                this.rotateImage(90);\n            });\n            this.addListener($('.flip-vertical'), 'click', function() {\n                this.flipImage('y');\n            });\n            this.addListener($('.flip-horizontal'), 'click', function() {\n                this.flipImage('x');\n            });\n\n            // Straighten slider\n            this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n                onStart: function() {\n                    this._showGrid();\n                }.bind(this),\n                onChange: function(slider) {\n                    this.straighten(slider);\n                }.bind(this),\n                onEnd: function() {\n                    this._hideGrid();\n                    this._cleanupFocalPointAfterStraighten();\n                }.bind(this)\n            });\n\n            // Cropper scale modifier key\n            this.addListener(Garnish.$doc, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.SHIFT_KEY) {\n                    this.shiftKeyHeld = true;\n                }\n            });\n            this.addListener(Garnish.$doc, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.SHIFT_KEY) {\n                    this.shiftKeyHeld = false;\n                }\n            });\n\n            this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n            this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n            this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n        },\n\n        /**\n         * Handle a constraint button click.\n         *\n         * @param ev\n         */\n        _handleConstraintClick: function (ev) {\n            var constraint = $(ev.currentTarget).data('constraint');\n            var $target = $(ev.currentTarget);\n            $target.siblings().removeClass('active');\n            $target.addClass('active');\n\n            if (constraint == 'custom') {\n                this._showCustomConstraint();\n                this._applyCustomConstraint();\n                return;\n            }\n\n            this._hideCustomConstraint();\n\n            this.setCroppingConstraint(constraint);\n            this.enforceCroppingConstraint();\n        },\n\n        /**\n         * Handle an orientation switch click.\n         *\n         * @param ev\n         */\n        _handleOrientationClick: function (ev) {\n            if (ev.currentTarget.value === this.constraintOrientation) {\n                return;\n            }\n            this.constraintOrientation = ev.currentTarget.value;\n\n            var $constraints = $('.constraint.flip', this.$container);\n\n            for (var i = 0; i < $constraints.length; i++) {\n                var $constraint = $($constraints[i]);\n                $constraint.data('constraint', 1 / $constraint.data('constraint'));\n                $constraint.html($constraint.html().split(':').reverse().join(':'));\n            }\n\n            $constraints.filter('.active').click();\n        },\n\n        /**\n         * Apply the custom ratio set in the inputs\n         */\n        _applyCustomConstraint: function () {\n            var constraint = this._getCustomConstraint();\n\n            if (constraint.w > 0 && constraint.h > 0) {\n                this.setCroppingConstraint(constraint.w / constraint.h);\n                this.enforceCroppingConstraint();\n            }\n        },\n\n        /**\n         * Get the custom constraint.\n         *\n         * @returns {{w: *, h: *}}\n         */\n        _getCustomConstraint: function () {\n            var w = parseFloat($('.custom-constraint-w').val());\n            var h = parseFloat($('.custom-constraint-h').val());\n            return {\n                w: isNaN(w) ? 0 : w,\n                h: isNaN(h) ? 0 : h,\n            }\n        },\n\n        /**\n         * Set the custom constraint.\n         *\n         * @param w\n         * @param h\n         */\n        _setCustomConstraint: function (w, h) {\n            $('.custom-constraint-w').val(parseFloat(w));\n            $('.custom-constraint-h').val(parseFloat(h));\n        },\n\n        /**\n         * Hide the custom constraint inputs.\n         */\n        _hideCustomConstraint: function () {\n            this.showingCustomConstraint = false;\n            $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n            $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n            $('.orientation', this.$container).removeClass('hidden');\n        },\n\n        /**\n         * Show the custom constraint inputs.\n         */\n        _showCustomConstraint: function () {\n            if (this.showingCustomConstraint) {\n                return;\n            }\n\n            this.showingCustomConstraint = true;\n            $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n            $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n            $('.orientation', this.$container).addClass('hidden');\n        },\n\n        /**\n         * Handle tab click.\n         *\n         * @param ev\n         */\n        _handleTabClick: function(ev) {\n            if (!this.animationInProgress) {\n                var $tab = $(ev.currentTarget);\n                var view = $tab.data('view');\n                this.$tabs.removeClass('selected');\n                $tab.addClass('selected');\n                this.showView(view);\n            }\n        },\n\n        /**\n         * Show a view.\n         *\n         * @param view\n         */\n        showView: function(view) {\n            if (this.currentView === view) {\n                return;\n            }\n\n            this.$views.addClass('hidden');\n            var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n            $view.removeClass('hidden');\n\n            if (view === 'rotate') {\n                this.enableSlider();\n            } else {\n                this.disableSlider();\n            }\n\n\n            // Now that most likely our editor dimensions have changed, time to reposition stuff\n            this.updateSizeAndPosition();\n\n            // See if we have to enable or disable crop mode as we transition between tabs\n            if (this.currentView === 'crop' && view !== 'crop') {\n                this.disableCropMode();\n            } else if (this.currentView !== 'crop' && view === 'crop') {\n                this.enableCropMode();\n            }\n\n            // Mark the current view\n            this.currentView = view;\n        },\n\n        /**\n         * Store the current cropper state.\n         *\n         * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n         * as the basis for recalculating the cropper position and dimensions.\n         *\n         * @param [state]\n         */\n        storeCropperState: function(state) {\n            if (typeof this.storeCropperState._ === 'undefined') {\n                this.storeCropperState._ = {};\n            }\n\n            // If we're asked to store a specific state.\n            if (state) {\n                this.cropperState = state;\n            } else if (this.clipper) {\n                this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n                this.cropperState = {\n                    offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                    offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                    height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                    width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                    imageDimensions: this.getScaledImageDimensions()\n                };\n            } else {\n                this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n                this.cropperState = {\n                    offsetX: 0,\n                    offsetY: 0,\n                    height: this.storeCropperState._.dimensions.height,\n                    width: this.storeCropperState._.dimensions.width,\n                    imageDimensions: this.storeCropperState._.dimensions\n                };\n            }\n        },\n\n        /**\n         * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n         */\n        storeFocalPointState: function(state) {\n            if (typeof this.storeFocalPointState._ === 'undefined') {\n                this.storeFocalPointState._ = {};\n            }\n\n            // If we're asked to store a specific state.\n            if (state) {\n                this.focalPointState = state;\n            } else if (this.focalPoint) {\n                this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n                this.focalPointState = {\n                    offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                    offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                    imageDimensions: this.getScaledImageDimensions()\n                };\n            }\n        },\n\n        /**\n         * Rotate the image along with the viewport.\n         *\n         * @param degrees\n         */\n        rotateImage: function(degrees) {\n            if (!this.animationInProgress) {\n                // We're not that kind of an establishment, sir.\n                if (degrees !== 90 && degrees !== -90) {\n                    return false;\n                }\n\n                this.animationInProgress = true;\n                this.viewportRotation += degrees;\n\n                // Normalize the viewport rotation angle so it's between 0 and 359\n                this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n                var newAngle = this.image.angle + degrees;\n                var scaledImageDimensions = this.getScaledImageDimensions();\n                var imageZoomRatio;\n\n                if (this.hasOrientationChanged()) {\n                    imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n                } else {\n                    imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n                }\n\n                // In cases when for some reason we've already zoomed in on the image,\n                // use existing zoom.\n                if (this.zoomRatio > imageZoomRatio) {\n                    imageZoomRatio = this.zoomRatio;\n                }\n\n                var viewportProperties = {\n                    angle: degrees === 90 ? '+=90' : '-=90'\n                };\n\n                var imageProperties = {\n                    angle: newAngle,\n                    width: scaledImageDimensions.width * imageZoomRatio,\n                    height: scaledImageDimensions.height * imageZoomRatio\n                };\n\n                var scaleFactor = 1;\n                if (this.scaleFactor < 1) {\n                    scaleFactor = 1 / this.scaleFactor;\n                    this.scaleFactor = 1;\n                } else {\n                    if (this.viewport.width > this.editorHeight) {\n                        scaleFactor = this.editorHeight / this.viewport.width;\n                    } else if (this.viewport.height > this.editorWidth) {\n                        scaleFactor = this.editorWidth / this.viewport.height;\n                    }\n                    this.scaleFactor = scaleFactor;\n                }\n\n                if (scaleFactor < 1) {\n                    imageProperties.width *= scaleFactor;\n                    imageProperties.height *= scaleFactor;\n                }\n\n                var state = this.cropperState;\n\n                // Make sure we reposition the image as well to focus on the same image area\n                var deltaX = state.offsetX;\n                var deltaY = state.offsetY;\n                var angleInRadians = degrees * (Math.PI / 180);\n\n                // Calculate how the cropper would need to move in a circle to maintain\n                // the focus on the same region if the image was rotated with zoom intact.\n                var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n                var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n                var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n                var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n                imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n                imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n                state.offsetX = newDeltaX;\n                state.offsetY = newDeltaY;\n\n                var temp = state.width;\n                state.width = state.height;\n                state.height = temp;\n\n                this.storeCropperState(state);\n\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                }\n\n                this.viewport.animate(viewportProperties, {\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        // If we're zooming the image in or out, better do the same to viewport\n                        var temp = this.viewport.height * scaleFactor;\n                        this.viewport.height = this.viewport.width * scaleFactor;\n                        this.viewport.width = temp;\n                        this.viewport.set({angle: 0});\n                    }.bind(this)\n                });\n\n                // Animate the rotation and dimension change\n                this.image.animate(imageProperties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                        this.image.set({angle: cleanAngle});\n                        this.animationInProgress = false;\n                        if (this.focalPoint) {\n                            this._adjustFocalPointByAngle(degrees);\n                            this.straighten(this.straighteningInput);\n                            this.canvas.add(this.focalPoint);\n                        } else {\n                            this._resetFocalPointPosition();\n                        }\n                    }.bind(this)\n                });\n            }\n        },\n\n        /**\n         * Flip an image along an axis.\n         *\n         * @param axis\n         */\n        flipImage: function(axis) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                if (this.hasOrientationChanged()) {\n                    axis = axis === 'y' ? 'x' : 'y';\n                }\n\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                } else {\n                    this._resetFocalPointPosition();\n                }\n\n                var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n                this.straighteningInput.setValue(-this.imageStraightenAngle);\n                this.imageStraightenAngle = -this.imageStraightenAngle;\n                var properties = {\n                    angle: this.viewportRotation + this.imageStraightenAngle\n                };\n\n                var deltaY, deltaX;\n                var cropperState = this.cropperState;\n                var focalPointState = this.focalPointState;\n\n                // Reposition the image, viewport, and stored cropper and focal point states.\n                if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                    cropperState.offsetX = -cropperState.offsetX;\n                    focalPointState.offsetX = -focalPointState.offsetX;\n                    deltaX = this.image.left - editorCenter.x;\n                    properties.left = editorCenter.x - deltaX;\n                } else {\n                    cropperState.offsetY = -cropperState.offsetY;\n                    focalPointState.offsetY = -focalPointState.offsetY;\n                    deltaY = this.image.top - editorCenter.y;\n                    properties.top = editorCenter.y - deltaY;\n                }\n\n                if (axis === 'y') {\n                    properties.scaleY = this.image.scaleY * -1;\n                    this.flipData.y = 1 - this.flipData.y;\n                } else {\n                    properties.scaleX = this.image.scaleX * -1;\n                    this.flipData.x = 1 - this.flipData.x;\n                }\n\n                this.storeCropperState(cropperState);\n                this.storeFocalPointState(focalPointState);\n\n                this.image.animate(properties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        this.animationInProgress = false;\n                        if (this.focalPoint) {\n                            // Well this is handy\n                            this._adjustFocalPointByAngle(0);\n                            this.canvas.add(this.focalPoint);\n                        }\n                    }.bind(this)\n                });\n            }\n        },\n\n        /**\n         * Perform the straightening with input slider.\n         *\n         * @param {Craft.SlideRuleInput} slider\n         */\n        straighten: function(slider) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                var previousAngle = this.image.angle;\n\n                this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n                // Straighten the image\n                this.image.set({\n                    angle: this.viewportRotation + this.imageStraightenAngle\n                });\n\n                // Set the new zoom ratio\n                this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n                this._zoomImage();\n\n                if (this.cropperState) {\n                    this._adjustEditorElementsOnStraighten(previousAngle);\n                }\n\n                this.renderImage();\n\n                this.animationInProgress = false;\n            }\n        },\n\n        /**\n         * Adjust the cropped viewport when straightening the image to correct for\n         * bumping into edges, keeping focus on the cropped area center and to\n         * maintain the illusion that the image is being straightened relative to the viewport center.\n         *\n         * @param {integer} previousAngle integer the previous image angle before straightening\n         */\n        _adjustEditorElementsOnStraighten: function(previousAngle) {\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var angleDelta = this.image.angle - previousAngle;\n            var state = this.cropperState;\n\n            var currentZoomRatio = this.zoomRatio;\n            var adjustmentRatio = 1;\n\n            var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n            do {\n                // Get the cropper center coordinates\n                var cropperCenterX = state.offsetX;\n                var cropperCenterY = state.offsetY;\n                var angleInRadians = angleDelta * (Math.PI / 180);\n\n                // Calculate how the cropper would need to move in a circle to maintain\n                // the focus on the same region if the image was rotated with zoom intact.\n                newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n                newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n                sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                // Figure out the final image offset to keep the viewport focused where we need it\n                deltaX = newCenterX * currentZoomRatio * sizeFactor;\n                deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n                // If the image would creep in the viewport, figure out how to math around it.\n                var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n                var rectangle = {\n                    width: this.viewport.width,\n                    height: this.viewport.height,\n                    left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                    top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n                };\n                adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n                currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n                // If we had to make adjustments, do the calculations again\n            } while (adjustmentRatio !== 1);\n\n            // Reposition the image correctly\n            this.image.set({\n                left: this.editorWidth / 2 - deltaX,\n                top: this.editorHeight / 2 - deltaY\n            });\n\n            // Finally, store the new cropper state to reflect the rotation change.\n            state.offsetX = newCenterX;\n            state.offsetY = newCenterY;\n            state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n            state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n            this.storeCropperState(state);\n\n            // Zoom the image in and we're done.\n            this.zoomRatio = currentZoomRatio;\n\n            if (this.focalPoint) {\n                this._adjustFocalPointByAngle(angleDelta);\n\n                if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                    this.focalPoint.set({opacity: 0});\n                } else {\n                    this.focalPoint.set({opacity: 1});\n                }\n            } else if (angleDelta !== 0) {\n                this._resetFocalPointPosition();\n            }\n\n            this._zoomImage();\n        },\n\n        /**\n         * If focal point is active and outside of viewport after straightening, reset it.\n         */\n        _cleanupFocalPointAfterStraighten: function() {\n            if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 1});\n                var state = this.focalPointState;\n                state.offsetX = 0;\n                state.offsetY = 0;\n                this.storeFocalPointState(state);\n                this.toggleFocalPoint();\n            }\n        },\n\n        /**\n         * Reset focal point to the middle of image.\n         */\n        _resetFocalPointPosition: function () {\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n        },\n\n        /**\n         * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n         *\n         * @param object\n         * @param containingObject\n         *\n         * @returns {boolean}\n         */\n        _isCenterInside: function(object, containingObject) {\n            return (object.left > containingObject.left - containingObject.width / 2\n                && object.top > containingObject.top - containingObject.height / 2\n                && object.left < containingObject.left + containingObject.width / 2\n                && object.top < containingObject.top + containingObject.height / 2\n            );\n        },\n\n        /**\n         * Adjust the focal point by an angle in degrees.\n         * @param angle\n         */\n        _adjustFocalPointByAngle: function(angle) {\n            var angleInRadians = angle * (Math.PI / 180);\n            var state = this.focalPointState;\n\n            var focalX = state.offsetX;\n            var focalY = state.offsetY;\n\n            // Calculate how the focal point would need to move in a circle to keep on the same spot\n            // on the image if it was rotated with zoom intact.\n            var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n            var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n            var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n            var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n            var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n            this.focalPoint.left = this.image.left + adjustedFocalX;\n            this.focalPoint.top = this.image.top + adjustedFocalY;\n\n            state.offsetX = newFocalX;\n            state.offsetY = newFocalY;\n            this.storeFocalPointState(state);\n        },\n\n        /**\n         * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n         * If the rectangle fits, 1 will be returned.\n         *\n         * @param rectangle\n         * @param containingVertices\n         */\n        _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n            var rectangleVertices = this._getRectangleVertices(rectangle);\n            var vertex;\n\n            // Check if any of the viewport vertices end up out of bounds\n            for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n                vertex = rectangleVertices[verticeIndex];\n\n                if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                    break;\n                }\n\n                vertex = false;\n            }\n\n            // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n            var adjustmentRatio;\n\n            if (!vertex) {\n                adjustmentRatio = 1;\n            } else {\n                // Find out which edge got crossed by the vertex\n                var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n                var rectangleCenter = {\n                    x: rectangle.left + rectangle.width / 2,\n                    y: rectangle.top + rectangle.height / 2\n                };\n\n                // Calculate how much further that edge needs to be.\n                // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n                var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n                var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n                // Adjust the zoom ratio\n                adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n            }\n\n            return adjustmentRatio;\n        },\n\n        /**\n         * Save the image.\n         *\n         * @param ev\n         */\n        saveImage: function(ev) {\n            var $button = $(ev.currentTarget);\n            if ($button.hasClass('disabled')) {\n                return false;\n            }\n\n            $('.btn', this.$buttons).addClass('disabled');\n            this.$buttons.append('<div class=\"spinner\"></div>');\n\n            var postData = {\n                assetId: this.assetId,\n                viewportRotation: this.viewportRotation,\n                imageRotation: this.imageStraightenAngle,\n                replace: $button.hasClass('replace') ? 1 : 0\n            };\n\n            if (this.cropperState) {\n                var cropData = {};\n\n                cropData.height = this.cropperState.height;\n                cropData.width = this.cropperState.width;\n                cropData.offsetX = this.cropperState.offsetX;\n                cropData.offsetY = this.cropperState.offsetY;\n\n                postData.imageDimensions = this.cropperState.imageDimensions;\n\n                postData.cropData = cropData;\n            } else {\n                postData.imageDimensions = this.getScaledImageDimensions();\n            }\n\n            if (this.focalPoint) {\n                postData.focalPoint = this.focalPointState;\n            }\n\n            postData.flipData = this.flipData;\n            postData.zoom = this.zoomRatio;\n\n            Craft.postActionRequest('assets/save-image', postData, function(data) {\n                this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n                if (data.error) {\n                    alert(data.error);\n                    return;\n                }\n\n                this.onSave();\n                this.hide();\n                Craft.cp.runQueue();\n            }.bind(this));\n        },\n\n        /**\n         * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n         *\n         * @param dimensions\n         */\n        getZoomToCoverRatio: function(dimensions) {\n            // Convert the angle to radians\n            var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n            // Calculate the dimensions of the scaled image using the magic of math\n            var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n            var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n            // Calculate the ratio\n            return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n        },\n\n        /**\n         * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n         *\n         * @param dimensions\n         */\n        getZoomToFitRatio: function(dimensions) {\n            // Get the bounding box for a rotated image\n            var boundingBox = this._getImageBoundingBox(dimensions);\n\n            // Scale the bounding box to fit\n            var scale = 1;\n            if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n                var vertScale = this.editorHeight / boundingBox.height;\n                var horiScale = this.editorWidth / boundingBox.width;\n                scale = Math.min(horiScale, vertScale);\n            }\n\n            return scale;\n        },\n\n        /**\n         * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n         */\n        getCombinedZoomRatio: function(dimensions) {\n            return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n        },\n\n        /**\n         * Draw the grid.\n         *\n         * @private\n         */\n        _showGrid: function() {\n            if (!this.grid) {\n                var strokeOptions = {\n                    strokeWidth: 1,\n                    stroke: 'rgba(255,255,255,0.5)'\n                };\n\n                var lineCount = 8;\n                var gridWidth = this.viewport.width;\n                var gridHeight = this.viewport.height;\n                var xStep = gridWidth / (lineCount + 1);\n                var yStep = gridHeight / (lineCount + 1);\n\n                var grid = [\n                    new fabric.Rect({\n                        strokeWidth: 2,\n                        stroke: 'rgba(255,255,255,1)',\n                        originX: 'center',\n                        originY: 'center',\n                        width: gridWidth,\n                        height: gridHeight,\n                        left: gridWidth / 2,\n                        top: gridHeight / 2,\n                        fill: 'rgba(255,255,255,0)'\n                    })\n                ];\n\n                var i;\n                for (i = 1; i <= lineCount; i++) {\n                    grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n                }\n                for (i = 1; i <= lineCount; i++) {\n                    grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n                }\n\n                this.grid = new fabric.Group(grid, {\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2,\n                    originX: 'center',\n                    originY: 'center',\n                    angle: this.viewport.angle\n                });\n\n                this.canvas.add(this.grid);\n                this.renderImage();\n            }\n        },\n\n        /**\n         * Hide the grid\n         */\n        _hideGrid: function() {\n            this.canvas.remove(this.grid);\n            this.grid = null;\n            this.renderImage();\n        },\n\n        /**\n         * Remove all the events when hiding the editor.\n         */\n        onFadeOut: function() {\n            this.destroy();\n        },\n\n        /**\n         * Make sure underlying content is not scrolled by accident.\n         */\n        show: function() {\n            this.base();\n\n            $('html').addClass('noscroll');\n        },\n\n        /**\n         * Allow the content to scroll.\n         */\n        hide: function() {\n            this.removeAllListeners();\n            this.straighteningInput.removeAllListeners();\n            $('html').removeClass('noscroll');\n            this.base();\n        },\n\n        /**\n         * onSave callback.\n         */\n        onSave: function() {\n            this.settings.onSave();\n            this.trigger('save');\n        },\n\n        /**\n         * Enable the rotation slider.\n         */\n        enableSlider: function() {\n            this.$imageTools.removeClass('hidden');\n        },\n\n        /**\n         * Disable the rotation slider.\n         */\n        disableSlider: function() {\n            this.$imageTools.addClass('hidden');\n        },\n\n        /**\n         * Switch to crop mode.\n         */\n        enableCropMode: function() {\n            var imageDimensions = this.getScaledImageDimensions();\n            this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n            var viewportProperties = {\n                width: this.editorWidth,\n                height: this.editorHeight\n            };\n\n            var imageProperties = {\n                width: imageDimensions.width * this.zoomRatio,\n                height: imageDimensions.height * this.zoomRatio,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            var callback = function() {\n                this._setFittedImageVerticeCoordinates();\n\n                // Restore cropper\n                var state = this.cropperState;\n                var scaledImageDimensions = this.getScaledImageDimensions();\n                var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                // Restore based on the stored information\n                var cropperData = {\n                    left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                    top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                    width: state.width * sizeFactor * this.zoomRatio,\n                    height: state.height * sizeFactor * this.zoomRatio\n                };\n\n                this._showCropper(cropperData);\n\n                if (this.focalPoint) {\n                    sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                    this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                    this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                    this.canvas.add(this.focalPoint);\n                }\n            }.bind(this);\n\n            this._editorModeTransition(callback, imageProperties, viewportProperties);\n        },\n\n        /**\n         * Switch out of crop mode.\n         */\n        disableCropMode: function() {\n            var viewportProperties = {};\n\n            this._hideCropper();\n            var imageDimensions = this.getScaledImageDimensions();\n            var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n            var inverseZoomFactor = targetZoom / this.zoomRatio;\n            this.zoomRatio = targetZoom;\n\n            var imageProperties = {\n                width: imageDimensions.width * this.zoomRatio,\n                height: imageDimensions.height * this.zoomRatio,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            var offsetX = this.clipper.left - this.image.left;\n            var offsetY = this.clipper.top - this.image.top;\n\n            var imageOffsetX = offsetX * inverseZoomFactor;\n            var imageOffsetY = offsetY * inverseZoomFactor;\n            imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n            imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n            // Calculate the cropper dimensions after all the zooming\n            viewportProperties.height = this.clipper.height * inverseZoomFactor;\n            viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n            if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n                if (this.focalPoint) {\n                    this.toggleFocalPoint();\n                }\n\n                this._resetFocalPointPosition();\n            }\n\n            var callback = function() {\n                // Reposition focal point correctly\n                if (this.focalPoint) {\n                    var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                    this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                    this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                    this.canvas.add(this.focalPoint);\n                }\n            }.bind(this);\n\n            this._editorModeTransition(callback, imageProperties, viewportProperties);\n        },\n\n        /**\n         * Transition between cropping end editor modes\n         *\n         * @param callback\n         * @param imageProperties\n         * @param viewportProperties\n         * @private\n         */\n        _editorModeTransition: function (callback, imageProperties, viewportProperties) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                // Without this it looks semi-broken during animation\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                    this.renderImage();\n                }\n\n                this.image.animate(imageProperties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        callback();\n                        this.animationInProgress = false;\n                        this.renderImage();\n                    }.bind(this)\n                });\n\n                this.viewport.animate(viewportProperties, {\n                    duration: this.settings.animationDuration\n                });\n            }\n        },\n\n        _showSpinner: function() {\n            this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n            var canvas = document.getElementById('spinner-canvas');\n            var context = canvas.getContext('2d');\n            var start = new Date();\n            var lines = 16,\n                cW = context.canvas.width,\n                cH = context.canvas.height;\n\n            var draw = function() {\n                var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n                context.save();\n                context.clearRect(0, 0, cW, cH);\n                context.translate(cW / 2, cH / 2);\n                context.rotate(Math.PI * 2 * rotation);\n                for (var i = 0; i < lines; i++) {\n                    context.beginPath();\n                    context.rotate(Math.PI * 2 / lines);\n                    context.moveTo(cW / 10, 0);\n                    context.lineTo(cW / 4, 0);\n                    context.lineWidth = cW / 30;\n                    context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                    context.stroke();\n                }\n                context.restore();\n            };\n            this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n        },\n\n        _hideSpinner: function () {\n            window.clearInterval(this.spinnerInterval);\n            this.$spinnerCanvas.remove();\n            this.$spinnerCanvas = null;\n        },\n\n        /**\n         * Show the cropper.\n         *\n         * @param clipperData\n         */\n        _showCropper: function(clipperData) {\n            this._setupCropperLayer(clipperData);\n            this._redrawCropperElements();\n            this.renderCropper();\n        },\n\n        /**\n         * Hide the cropper.\n         */\n        _hideCropper: function() {\n            if (this.clipper) {\n                this.croppingCanvas.remove(this.clipper);\n                this.croppingCanvas.remove(this.croppingShade);\n                this.croppingCanvas.remove(this.cropperHandles);\n                this.croppingCanvas.remove(this.cropperGrid);\n                this.croppingCanvas.remove(this.croppingRectangle);\n                this.croppingCanvas.remove(this.croppingAreaText);\n\n                this.croppingCanvas = null;\n                this.renderCropper = null;\n            }\n        },\n\n        /**\n         * Draw the cropper.\n         *\n         * @param clipperData\n         */\n        _setupCropperLayer: function(clipperData) {\n            // Set up the canvas for cropper\n            this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n                backgroundColor: 'rgba(0,0,0,0)',\n                hoverCursor: 'default',\n                selection: false\n            });\n\n            this.croppingCanvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            this.renderCropper = function() {\n                Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n            }.bind(this);\n\n\n            $('#cropping-canvas', this.$editorContainer).css({\n                position: 'absolute',\n                top: 0,\n                left: 0\n            });\n\n            this.croppingShade = new fabric.Rect({\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                width: this.editorWidth,\n                height: this.editorHeight,\n                fill: 'rgba(0,0,0,0.7)'\n            });\n\n            // Calculate the cropping rectangle size\n            var imageDimensions = this.getScaledImageDimensions();\n            var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n            var rectWidth = imageDimensions.width / rectangleRatio;\n            var rectHeight = imageDimensions.height / rectangleRatio;\n\n            if (this.hasOrientationChanged()) {\n                var temp = rectHeight;\n                rectHeight = rectWidth;\n                rectWidth = temp;\n            }\n\n            // Set up the cropping viewport rectangle\n            this.clipper = new fabric.Rect({\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                width: rectWidth,\n                height: rectHeight,\n                stroke: 'black',\n                fill: 'rgba(128,0,0,1)',\n                strokeWidth: 0\n            });\n\n            // Set from clipper data\n            if (clipperData) {\n                this.clipper.set(clipperData);\n            }\n\n            this.clipper.globalCompositeOperation = 'destination-out';\n            this.croppingCanvas.add(this.croppingShade);\n            this.croppingCanvas.add(this.clipper);\n        },\n\n        /**\n         * Redraw the cropper boundaries\n         */\n        _redrawCropperElements: function() {\n            if (typeof this._redrawCropperElements._ === 'undefined') {\n                this._redrawCropperElements._ = {};\n            }\n\n            if (this.cropperHandles) {\n                this.croppingCanvas.remove(this.cropperHandles);\n                this.croppingCanvas.remove(this.cropperGrid);\n                this.croppingCanvas.remove(this.croppingRectangle);\n                this.croppingCanvas.remove(this.croppingAreaText);\n            }\n            this._redrawCropperElements._.lineOptions = {\n                strokeWidth: 4,\n                stroke: 'rgb(255,255,255)',\n                fill: false\n            };\n\n            this._redrawCropperElements._.gridOptions = {\n                strokeWidth: 2,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            // Draw the handles\n            this._redrawCropperElements._.pathGroup = [\n                new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n            ];\n\n            this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n            // Don't forget the rectangle\n            this.croppingRectangle = new fabric.Rect({\n                left: this.clipper.left,\n                top: this.clipper.top,\n                width: this.clipper.width,\n                height: this.clipper.height,\n                fill: 'rgba(0,0,0,0)',\n                stroke: 'rgba(255,255,255,0.8)',\n                strokeWidth: 2,\n                originX: 'center',\n                originY: 'center'\n            });\n\n            this.cropperGrid = new fabric.Group(\n                [\n                    new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n                ], {\n                    left: this.clipper.left,\n                    top: this.clipper.top,\n                    originX: 'center',\n                    originY: 'center'\n                }\n            );\n\n            this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n            if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n                this._redrawCropperElements._.cropTextTop -= 24;\n                this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n            }\n\n            this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n                left: this.croppingRectangle.left,\n                top: this._redrawCropperElements._.cropTextTop,\n                fontSize: 13,\n                fill: 'rgb(200,200,200)',\n                backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n                font: 'Craft',\n                width: 70,\n                height: 15,\n                originX: 'center',\n                originY: 'center',\n                textAlign: 'center'\n            });\n\n            this.croppingCanvas.add(this.cropperHandles);\n            this.croppingCanvas.add(this.cropperGrid);\n            this.croppingCanvas.add(this.croppingRectangle);\n            this.croppingCanvas.add(this.croppingAreaText);\n        },\n\n        /**\n         * Reposition the cropper when the image editor dimensions change.\n         *\n         * @param previousImageArea\n         */\n        _repositionCropper: function(previousImageArea) {\n            if (!this.croppingCanvas) {\n                return;\n            }\n\n            // Get the current clipper offset relative to center\n            var currentOffset = {\n                x: this.clipper.left - this.croppingCanvas.width / 2,\n                y: this.clipper.top - this.croppingCanvas.height / 2\n            };\n\n            // Resize the cropping canvas\n            this.croppingCanvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            // Check by what factor will the new final bounding box be different\n            var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            var areaFactor = currentArea.width / previousImageArea.width;\n\n            // Adjust the cropper size to scale along with the bounding box\n            this.clipper.width = Math.round(this.clipper.width * areaFactor);\n            this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n            // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n            // for editor size changes and then multiply by the size factor to adjust for image size changes\n            this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n            this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n            // Resize the cropping shade\n            this.croppingShade.set({\n                width: this.editorWidth,\n                height: this.editorHeight,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n\n            this._redrawCropperElements();\n            this.renderCropper();\n        },\n\n        /**\n         * Get the dimensions of a bounding rectangle by a set of four coordinates.\n         *\n         * @param coordinateSet\n         */\n        _getBoundingRectangle: function(coordinateSet) {\n            return {\n                width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n                height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n            };\n        },\n\n        /**\n         * Handle the mouse being clicked.\n         *\n         * @param ev\n         */\n        _handleMouseDown: function(ev) {\n            // Focal before resize before dragging\n            var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n            var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n            var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n            if (handle || move || focal) {\n                this.previousMouseX = ev.pageX;\n                this.previousMouseY = ev.pageY;\n\n                if (focal) {\n                    this.draggingFocal = true;\n                } else if (handle) {\n                    this.scalingCropper = handle;\n                } else if (move) {\n                    this.draggingCropper = true;\n                }\n            }\n        },\n\n        /**\n         * Handle the mouse being moved.\n         *\n         * @param ev\n         */\n        _handleMouseMove: function(ev) {\n            if (this.mouseMoveEvent !== null) {\n                Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n            }\n            this.mouseMoveEvent = ev;\n        },\n\n        _handleMouseMoveInternal: function() {\n            if (this.mouseMoveEvent === null) {\n                return;\n            }\n\n            if (this.focalPoint && this.draggingFocal) {\n                this._handleFocalDrag(this.mouseMoveEvent);\n                this.storeFocalPointState();\n                this.renderImage();\n            } else if (this.draggingCropper || this.scalingCropper) {\n                if (this.draggingCropper) {\n                    this._handleCropperDrag(this.mouseMoveEvent);\n                } else {\n                    this._handleCropperResize(this.mouseMoveEvent);\n                }\n\n                this._redrawCropperElements();\n\n                this.storeCropperState();\n                this.renderCropper();\n            } else {\n                this._setMouseCursor(this.mouseMoveEvent);\n            }\n\n            this.previousMouseX = this.mouseMoveEvent.pageX;\n            this.previousMouseY = this.mouseMoveEvent.pageY;\n\n            this.mouseMoveEvent = null;\n        },\n\n        /**\n         * Handle mouse being released.\n         *\n         * @param ev\n         */\n        _handleMouseUp: function(ev) {\n            this.draggingCropper = false;\n            this.scalingCropper = false;\n            this.draggingFocal = false;\n        },\n\n        /**\n         * Handle mouse out\n         *\n         * @param ev\n         */\n        _handleMouseOut: function(ev) {\n            this._handleMouseUp(ev);\n            this.mouseMoveEvent = ev;\n            this._handleMouseMoveInternal();\n        },\n\n        /**\n         * Handle cropper being dragged.\n         *\n         * @param ev\n         */\n        _handleCropperDrag: function(ev) {\n            if (typeof this._handleCropperDrag._ === 'undefined') {\n                this._handleCropperDrag._ = {};\n            }\n\n            this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n                return false;\n            }\n\n            this._handleCropperDrag._.rectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            };\n\n            this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n            // If this would drag it outside of the image\n            if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                // Try to find the furthest point in the same general direction where we can drag it\n\n                // Delta iterator setup\n                this._handleCropperDrag._.dxi = 0;\n                this._handleCropperDrag._.dyi = 0;\n                this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n                this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n                // The furthest we can move\n                this._handleCropperDrag._.furthest = 0;\n                this._handleCropperDrag._.furthestDeltas = {};\n\n                // Loop through every combination of dragging it not so far\n                for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                    for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                        if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                            if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                                this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                                this._handleCropperDrag._.furthestDeltas = {\n                                    x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                    y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // REALLY can't drag along the cursor movement\n                if (this._handleCropperDrag._.furthest == 0) {\n                    return;\n                } else {\n                    this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                    this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n                }\n            }\n\n            this.clipper.set({\n                left: this.clipper.left + this._handleCropperDrag._.deltaX,\n                top: this.clipper.top + this._handleCropperDrag._.deltaY\n            });\n        },\n\n        /**\n         * Handle focal point being dragged.\n         *\n         * @param ev\n         */\n        _handleFocalDrag: function(ev) {\n            if (typeof this._handleFocalDrag._ === 'undefined') {\n                this._handleFocalDrag._ = {};\n            }\n\n            if (this.focalPoint) {\n                this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n                this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n                if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                    return;\n                }\n\n                this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n                this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n                // Just make sure that the focal point stays inside the image\n                if (this.currentView === 'crop') {\n                    if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                        return;\n                    }\n                } else {\n                    if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                        && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                        return;\n                    }\n                }\n\n                this.focalPoint.set({\n                    left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                    top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n                });\n            }\n        },\n\n        /**\n         * Set the cropping constraint\n         * @param constraint\n         */\n        setCroppingConstraint: function(constraint) {\n            // In case this caused the sidebar width to change.\n            this.updateSizeAndPosition();\n\n            switch (constraint) {\n                case 'none':\n                    this.croppingConstraint = false;\n                    break;\n\n                case 'original':\n                    this.croppingConstraint = this.originalWidth / this.originalHeight;\n                    break;\n\n                case 'current':\n                    this.croppingConstraint = this.clipper.width / this.clipper.height;\n                    break;\n\n                case 'custom':\n\n                    break;\n                default:\n                    this.croppingConstraint = parseFloat(constraint);\n\n                    break;\n            }\n        },\n\n        /**\n         * Enforce the cropping constraint\n         */\n        enforceCroppingConstraint: function () {\n            if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n                this.enforceCroppingConstraint._ = {};\n            }\n\n            if (this.animationInProgress || !this.croppingConstraint) {\n                return;\n            }\n\n            this.animationInProgress = true;\n\n            // Mock the clipping rectangle for collision tests\n            this.enforceCroppingConstraint._.rectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            };\n\n            // If wider than it should be\n            if (this.clipper.width > this.clipper.height * this.croppingConstraint)\n            {\n                this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n                // Make it taller!\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n                // Getting really awkward having to convert between 0;0 being center or top-left corner.\n                this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n                // If the clipper would end up out of bounds, make it narrower instead.\n                if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                    this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                    this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n                }\n            } else {\n                // Follow the same pattern, if taller than it should be.\n                this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n                if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                    this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                    this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n                }\n            }\n\n            this.enforceCroppingConstraint._.properties = {\n                height: this.enforceCroppingConstraint._.rectangle.height,\n                width: this.enforceCroppingConstraint._.rectangle.width\n            };\n\n            // Make sure to redraw cropper handles and gridlines when resizing\n            this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n                onChange: function() {\n                    this._redrawCropperElements();\n                    this.croppingCanvas.renderAll();\n                }.bind(this),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    this._redrawCropperElements();\n                    this.animationInProgress = false;\n                    this.renderCropper();\n                    this.storeCropperState();\n                }.bind(this)\n            });\n        },\n\n        /**\n         * Handle cropper being resized.\n         *\n         * @param ev\n         */\n        _handleCropperResize: function(ev) {\n            if (typeof this._handleCropperResize._ === 'undefined') {\n                this._handleCropperResize._ = {};\n            }\n\n            // Size deltas\n            this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n                this._handleCropperResize._.deltaX = 0;\n            }\n\n            if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n                this._handleCropperResize._.deltaY = 0;\n            }\n\n            if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n                return;\n            }\n\n            // Translate from center-center origin to absolute coords\n            this._handleCropperResize._.startingRectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            }\n\n            this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n            if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n                return;\n            }\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n                return;\n            }\n\n            // Translate back to center-center origin.\n            this.clipper.set({\n                top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n                left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n                width: this._handleCropperResize._.rectangle.width,\n                height: this._handleCropperResize._.rectangle.height\n            });\n\n            this._redrawCropperElements();\n        },\n\n        _calculateNewCropperSizeByDeltas: function (startingRectangle, deltaX, deltaY, cropperDirection) {\n            if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n                this._calculateNewCropperSizeByDeltas._ = {};\n            }\n\n            // Center deltas\n            this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n            this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n            this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n            this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n            this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n            // Lock the aspect ratio if needed\n            if (this.croppingConstraint) {\n                this._calculateNewCropperSizeByDeltas._.change = 0;\n\n                // Take into account the mouse direction and figure out the \"real\" change in cropper size\n                switch (cropperDirection) {\n                    case 't':\n                        this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'b':\n                        this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'r':\n                        this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'l':\n                        this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tr':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tl':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'br':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'bl':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                }\n\n                if (this.croppingConstraint > 1) {\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n                }\n\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n                // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n                switch (cropperDirection) {\n                    case 't':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                        break;\n                    case 'b':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                        break;\n                    case 'r':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                        break;\n                    case 'l':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tr':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'tl':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'bl':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                }\n            } else {\n                // Lock the aspect ratio\n                if (this.shiftKeyHeld &&\n                    (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                        cropperDirection === 'bl' || cropperDirection === 'br')\n                ) {\n                    this._calculateNewCropperSizeByDeltas._.ratio;\n                    if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                        this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                        this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                        this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                    } else {\n                        this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                        this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                        this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                    }\n                }\n\n                if (cropperDirection.match(/t/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                }\n                if (cropperDirection.match(/b/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n                }\n                if (cropperDirection.match(/r/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n                }\n                if (cropperDirection.match(/l/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                }\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n            this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n            this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n            return this._calculateNewCropperSizeByDeltas._.rectangle;\n        },\n\n        /**\n         * Set mouse cursor by it's position over cropper.\n         *\n         * @param ev\n         */\n        _setMouseCursor: function(ev) {\n            if (typeof this._setMouseCursor._ === 'undefined') {\n                this._setMouseCursor._ = {};\n            }\n\n            if (Garnish.isMobileBrowser(true)) {\n                return;\n            }\n            this._setMouseCursor._.cursor = 'default';\n            this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n            if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n                this._setMouseCursor._.cursor = 'pointer';\n            } else if (this._setMouseCursor._.handle) {\n                if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                    this._setMouseCursor._.cursor = 'ns-resize';\n                } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                    this._setMouseCursor._.cursor = 'ew-resize';\n                } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                    this._setMouseCursor._.cursor = 'nwse-resize';\n                } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                    this._setMouseCursor._.cursor = 'nesw-resize';\n                }\n            } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n                this._setMouseCursor._.cursor = 'move';\n            }\n\n            $('.body').css('cursor', this._setMouseCursor._.cursor);\n        },\n\n        /**\n         * Test whether the mouse cursor is on any cropper handles.\n         *\n         * @param ev\n         */\n        _cropperHandleHitTest: function(ev) {\n            if (typeof this._cropperHandleHitTest._ === 'undefined') {\n                this._cropperHandleHitTest._ = {};\n            }\n\n            this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n            this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n            this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n            // Compensate for center origin coordinate-wise\n            this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n            this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n            this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n            this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n            // Left side top/bottom\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n                if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                    return 'tl';\n                } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                    return 'bl';\n                }\n            }\n            // Right side top/bottom\n            if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n                if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                    return 'tr';\n                } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                    return 'br';\n                }\n            }\n\n            // Left or right\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n                return 'l';\n            }\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n                return 'r';\n            }\n\n            // Top or bottom\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n                return 't';\n            }\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n                return 'b';\n            }\n\n            return false;\n        },\n\n        /**\n         * Test whether the mouse cursor is on a fabricJS object.\n         *\n         * @param object\n         * @param event\n         *\n         * @return boolean\n         */\n\n        _isMouseOver: function(event, object) {\n            if (typeof this._isMouseOver._ === 'undefined') {\n                this._isMouseOver._ = {};\n            }\n\n            this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n            this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n            this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n            // Compensate for center origin coordinate-wise\n            this._isMouseOver._.lb = object.left - object.width / 2;\n            this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n            this._isMouseOver._.tb = object.top - object.height / 2;\n            this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n            return (\n                this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n                this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n                this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n                this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n            );\n        },\n\n        /**\n         * Get vertices of a rectangle defined by left,top,height and width properties.\n         * Optionally it's possible to provide offsetX and offsetY values.\n         * Left and top properties of rectangle reference the top-left corner.\n         *\n         * @param rectangle\n         * @param [offsetX]\n         * @param [offsetY]\n         */\n        _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n            if (typeof this._getRectangleVertices._ === 'undefined') {\n                this._getRectangleVertices._ = {};\n            }\n\n            if (typeof offsetX === 'undefined') {\n                offsetX = 0;\n            }\n            if (typeof offsetY === 'undefined') {\n                offsetY = 0;\n            }\n\n            this._getRectangleVertices._.topLeft = {\n                x: rectangle.left + offsetX,\n                y: rectangle.top + offsetY\n            };\n\n            this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n            this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n            this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n            return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n        },\n\n        /**\n         * Set image vertice coordinates for an image that's been zoomed to fit.\n         */\n        _setFittedImageVerticeCoordinates: function() {\n            this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n        },\n\n        /**\n         * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n         * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n         *\n         * @param zoomMode\n         */\n        getImageVerticeCoords: function(zoomMode) {\n            var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n            var imageDimensions = this.getScaledImageDimensions();\n\n            var ratio;\n\n            if (typeof zoomMode === \"number\") {\n                ratio = zoomMode;\n            } else if (zoomMode === \"cover\") {\n                ratio = this.getZoomToCoverRatio(imageDimensions);\n            } else {\n                ratio = this.getZoomToFitRatio(imageDimensions);\n            }\n\n            // Get the dimensions of the scaled image\n            var scaledHeight = imageDimensions.height * ratio;\n            var scaledWidth = imageDimensions.width * ratio;\n\n            // Calculate the segments of the containing box for the image.\n            // When referring to top/bottom or right/left segments, these are on the\n            // right-side and bottom projection of the containing box for the zoomed out image.\n            var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n            var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n            var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n            var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n            // Calculate the offsets from editor box for the image-containing box\n            var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n            var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n            // Finally, calculate the image vertice coordinates\n            return {\n                a: {\n                    x: horizontalOffset + rightHorizontalSegment,\n                    y: verticalOffset\n                },\n                b: {\n                    x: this.editorWidth - horizontalOffset,\n                    y: verticalOffset + topVerticalSegment\n                },\n                c: {\n                    x: horizontalOffset + leftHorizontalSegment,\n                    y: this.editorHeight - verticalOffset\n                },\n                d: {\n                    x: horizontalOffset,\n                    y: verticalOffset + bottomVerticalSegment\n                }\n            };\n        },\n\n        /**\n         * Debug stuff by continuously rendering a fabric object on canvas.\n         *\n         * @param fabricObj\n         */\n        _debug: function(fabricObj) {\n            this.canvas.remove(this.debugger);\n            this.debugger = fabricObj;\n            this.canvas.add(this.debugger);\n        },\n\n        /**\n         * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n         * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n         * return true if the point is in the rectangle.\n         *\n         * Adapted from: http://stackoverflow.com/a/2763387/2040791\n         *\n         * @param points\n         * @param rectangle\n         */\n        arePointsInsideRectangle: function(points, rectangle) {\n            if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n                this.arePointsInsideRectangle._ = {};\n            }\n\n            // Pre-calculate the vectors and scalar products for two rectangle edges\n            this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n            this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n            this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n            this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n            for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n                this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n                // Calculate the vectors for two rectangle sides and for\n                // the vector from vertices a and b to the point P\n                this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n                this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n                // Calculate scalar or dot products for some vector combinations\n                this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n                this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n                this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n                this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n                if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * Returns an object representing the vector between points a and b.\n         *\n         * @param a\n         * @param b\n         */\n        _getVector: function(a, b) {\n            return {x: b.x - a.x, y: b.y - a.y};\n        },\n\n        /**\n         * Returns the scalar product of two vectors\n         *\n         * @param a\n         * @param b\n         */\n        _getScalarProduct: function(a, b) {\n            return a.x * b.x + a.y * b.y;\n        },\n\n        /**\n         * Returns the magnitude of a vector_redrawCropperElements\n         * .\n         *\n         * @param vector\n         */\n        _getVectorMagnitude: function(vector) {\n            return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n        },\n\n        /**\n         * Returns the angle between two vectors in degrees with two decimal points\n         *\n         * @param a\n         * @param b\n         */\n        _getAngleBetweenVectors: function(a, b) {\n            return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n        },\n\n        /**\n         * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n         *\n         * @param rectangle\n         * @param vertex\n         *\n         * @returns {*}\n         */\n        _getEdgeCrossed: function(rectangle, vertex) {\n            // Determine over which edge the vertex is\n            var edgePoints = [\n                [rectangle.a, rectangle.b],\n                [rectangle.b, rectangle.c],\n                [rectangle.c, rectangle.d],\n                [rectangle.d, rectangle.a]\n            ];\n\n            var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            var smallestDiff = 180;\n            var edgeCrossed = null;\n\n            // Test each edge\n            for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n                var edge = edgePoints[edgeIndex];\n                var toCenter = this._getVector(edge[0], centerPoint);\n                var edgeVector = this._getVector(edge[0], edge[1]);\n                var toVertex = this._getVector(edge[0], vertex);\n\n                // If the angle between toCenter/toVertex is the sum of\n                // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n                // the edgeVector is between the other two meaning that this is the offending vertex.\n                // To avoid the rounding errors, we'll take the closest match\n                var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n                if (diff < smallestDiff) {\n                    smallestDiff = diff;\n                    edgeCrossed = edge;\n                }\n            }\n\n            return edgeCrossed;\n        },\n\n        /**\n         * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n         *\n         * @param dimensions\n         */\n        _getImageBoundingBox: function(dimensions) {\n            var box = {};\n\n            var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n            var proportion = dimensions.height / dimensions.width;\n            box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n            box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n            if (this.hasOrientationChanged()) {\n                var temp = box.width;\n                box.width = box.height;\n                box.height = temp;\n            }\n\n            return box;\n        }\n    },\n    {\n        defaults: {\n            animationDuration: 100,\n            allowSavingAsNew: true,\n            onSave: $.noop,\n            allowDegreeFractions: null,\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend(\n    {\n        $includeSubfoldersContainer: null,\n        $includeSubfoldersCheckbox: null,\n        showingIncludeSubfoldersCheckbox: false,\n\n        $uploadButton: null,\n        $uploadInput: null,\n        $progressBar: null,\n        $folders: null,\n\n        uploader: null,\n        promptHandler: null,\n        progressBar: null,\n\n        _uploadTotalFiles: 0,\n        _uploadFileProgress: {},\n        _uploadedAssetIds: [],\n        _currentUploaderSettings: {},\n\n        _assetDrag: null,\n        _folderDrag: null,\n        _expandDropTargetFolderTimeout: null,\n        _tempExpandedFolders: [],\n\n        _fileConflictTemplate: {\n            choices: [\n                {value: 'keepBoth', title: Craft.t('app', 'Keep both')},\n                {value: 'replace', title: Craft.t('app', 'Replace it')}\n            ]\n        },\n        _folderConflictTemplate: {\n            choices: [\n                {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')},\n                {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n            ]\n        },\n\n        init: function(elementType, $container, settings) {\n            this.base(elementType, $container, settings);\n\n            if (this.settings.context === 'index') {\n                if (!this._folderDrag) {\n                    this._initIndexPageMode();\n                }\n\n                this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n            } else {\n                this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n                if (this.settings.modal) {\n                    this.settings.modal.on('updateSizeAndPosition', $.proxy(this, '_positionProgressBar'));\n                }\n            }\n        },\n\n        initSources: function() {\n            if (this.settings.context === 'index' && !this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            return this.base();\n        },\n\n        initSource: function($source) {\n            this.base($source);\n\n            this._createFolderContextMenu($source);\n\n            if (this.settings.context === 'index') {\n                if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                    if ($source.data('folder-id')) {\n                        this._folderDrag.addItems($source.parent());\n                    }\n                }\n\n                if (this._assetDrag) {\n                    this._assetDrag.updateDropTargets();\n                }\n            }\n        },\n\n        deinitSource: function($source) {\n            this.base($source);\n\n            // Does this source have a context menu?\n            var contextMenu = $source.data('contextmenu');\n\n            if (contextMenu) {\n                contextMenu.destroy();\n            }\n\n            if (this.settings.context === 'index') {\n                if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                    this._folderDrag.removeItems($source.parent());\n                }\n\n                if (this._assetDrag) {\n                    this._assetDrag.updateDropTargets();\n                }\n            }\n        },\n\n        _getSourceLevel: function($source) {\n            return $source.parentsUntil('nav', 'ul').length;\n        },\n\n        /**\n         * Initialize the index page-specific features\n         */\n        _initIndexPageMode: function() {\n            if (this._folderDrag) {\n                return;\n            }\n\n            // Make the elements selectable\n            this.settings.selectable = true;\n            this.settings.multiSelect = true;\n\n            var onDragStartProxy = $.proxy(this, '_onDragStart'),\n                onDropTargetChangeProxy = $.proxy(this, '_onDropTargetChange');\n\n            // Asset dragging\n            // ---------------------------------------------------------------------\n\n            this._assetDrag = new Garnish.DragDrop({\n                activeDropTargetClass: 'sel',\n                helperOpacity: 0.75,\n\n                filter: $.proxy(function() {\n                    return this.view.getSelectedElements().has('div.element[data-movable]');\n                }, this),\n\n                helper: $.proxy(function($file) {\n                    return this._getFileDragHelper($file);\n                }, this),\n\n                dropTargets: $.proxy(function() {\n                    // Which data attribute should we be checking?\n                    var attr;\n                    if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                        attr = 'data-can-move-peer-files-to';\n                    } else {\n                        attr = 'data-can-move-to';\n                    }\n\n                    var targets = [];\n\n                    for (var i = 0; i < this.$sources.length; i++) {\n                        // Make sure it's a volume folder\n                        var $source = this.$sources.eq(i);\n                        if (Garnish.hasAttr($source, attr)) {\n                            targets.push($source);\n                        }\n                    }\n\n                    return targets;\n                }, this),\n\n                onDragStart: onDragStartProxy,\n                onDropTargetChange: onDropTargetChangeProxy,\n                onDragStop: $.proxy(this, '_onFileDragStop'),\n                helperBaseZindex: 800\n            });\n\n            // Folder dragging\n            // ---------------------------------------------------------------------\n\n            this._folderDrag = new Garnish.DragDrop(\n                {\n                    activeDropTargetClass: 'sel',\n                    helperOpacity: 0.75,\n\n                    filter: $.proxy(function() {\n                        // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                        var $selected = this.sourceSelect.getSelectedItems(),\n                            draggees = [];\n\n                        for (var i = 0; i < $selected.length; i++) {\n                            var $source = $selected.eq(i);\n\n                            if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                                continue;\n                            }\n\n                            if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                                draggees.push($source.parent()[0]);\n                            }\n                        }\n\n                        return $(draggees);\n                    }, this),\n\n                    helper: $.proxy(function($draggeeHelper) {\n                        var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                            $helperNav = $('<nav/>').appendTo($helperSidebar),\n                            $helperUl = $('<ul/>').appendTo($helperNav);\n\n                        $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                        $draggeeHelper.children('a').addClass('sel');\n\n                        // Match the style\n                        $draggeeHelper.css({\n                            'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                            'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                            'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                            'padding-left': this._folderDrag.$draggee.css('padding-left')\n                        });\n\n                        return $helperSidebar;\n                    }, this),\n\n                    dropTargets: $.proxy(function() {\n                        var targets = [];\n\n                        // Tag the dragged folder and it's subfolders\n                        var draggedSourceIds = [];\n                        this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                            draggedSourceIds.push($(this).data('key'));\n                        });\n\n                        for (var i = 0; i < this.$sources.length; i++) {\n                            // Make sure it's a volume folder and not one of the dragged folders\n                            var $source = this.$sources.eq(i),\n                                key = $source.data('key');\n\n                            if (!this._getFolderUidFromSourceKey(key)) {\n                                continue;\n                            }\n\n                            if (!Craft.inArray(key, draggedSourceIds)) {\n                                targets.push($source);\n                            }\n                        }\n\n                        return targets;\n                    }, this),\n\n                    onDragStart: onDragStartProxy,\n                    onDropTargetChange: onDropTargetChangeProxy,\n                    onDragStop: $.proxy(this, '_onFolderDragStop')\n                });\n        },\n\n        /**\n         * On file drag stop\n         */\n        _onFileDragStop: function() {\n            if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n                // Keep it selected\n                var originatingSource = this.$source;\n\n                var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                    originalAssetIds = [];\n\n                // For each file, prepare array data.\n                for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                    var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                    originalAssetIds.push(originalAssetId);\n                }\n\n                // Are any files actually getting moved?\n                if (originalAssetIds.length) {\n                    this.setIndexBusy();\n\n                    this._positionProgressBar();\n                    this.progressBar.resetProgressBar();\n                    this.progressBar.setItemCount(originalAssetIds.length);\n                    this.progressBar.showProgressBar();\n\n\n                    // For each file to move a separate request\n                    var parameterArray = [];\n                    for (i = 0; i < originalAssetIds.length; i++) {\n                        parameterArray.push({\n                            action: 'assets/move-asset',\n                            params: {\n                                assetId: originalAssetIds[i],\n                                folderId: targetFolderId\n                            }\n                        });\n                    }\n\n                    // Define the callback for when all file moves are complete\n                    var onMoveFinish = $.proxy(function(responseArray) {\n                        this.promptHandler.resetPrompts();\n\n                        // Loop trough all the responses\n                        for (var i = 0; i < responseArray.length; i++) {\n                            var response = responseArray[i];\n\n                            // Push prompt into prompt array\n                            if (response.conflict) {\n                                this.promptHandler.addPrompt({\n                                    assetId: response.assetId,\n                                    suggestedFilename: response.suggestedFilename,\n                                    prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                                });\n                            }\n\n                            if (response.error) {\n                                alert(response.error);\n                            }\n                        }\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        var reloadIndex = false;\n\n                        var performAfterMoveActions = function() {\n                            // Select original source\n                            this.sourceSelect.selectItem(originatingSource);\n\n                            // Make sure we use the correct offset when fetching the next page\n                            this._totalVisible -= this._assetDrag.$draggee.length;\n\n                            // And remove the elements that have been moved away\n                            for (var i = 0; i < originalAssetIds.length; i++) {\n                                $('[data-id=' + originalAssetIds[i] + ']').remove();\n                            }\n\n                            this.view.deselectAllElements();\n                            this._collapseExtraExpandedFolders(targetFolderId);\n\n                            if (reloadIndex) {\n                                this.updateElements();\n                            }\n                        };\n\n                        if (this.promptHandler.getPromptCount()) {\n                            // Define callback for completing all prompts\n                            var promptCallback = $.proxy(function(returnData) {\n                                var newParameterArray = [];\n\n                                // Loop trough all returned data and prepare a new request array\n                                for (var i = 0; i < returnData.length; i++) {\n                                    if (returnData[i].choice === 'cancel') {\n                                        reloadIndex = true;\n                                        continue;\n                                    }\n\n                                    if (returnData[i].choice === 'keepBoth') {\n                                        newParameterArray.push({\n                                            action: 'assets/move-asset',\n                                            params: {\n                                                folderId: targetFolderId,\n                                                assetId: returnData[i].assetId,\n                                                filename: returnData[i].suggestedFilename\n                                            }\n                                        });\n                                    }\n\n                                    if (returnData[i].choice === 'replace') {\n                                        newParameterArray.push({\n                                            action: 'assets/move-asset',\n                                            params: {\n                                                folderId: targetFolderId,\n                                                assetId: returnData[i].assetId,\n                                                force: true\n                                            }\n                                        });\n                                    }\n                                }\n\n                                // Nothing to do, carry on\n                                if (newParameterArray.length === 0) {\n                                    performAfterMoveActions.apply(this);\n                                }\n                                else {\n                                    // Start working\n                                    this.setIndexBusy();\n                                    this.progressBar.resetProgressBar();\n                                    this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                    this.progressBar.showProgressBar();\n\n                                    // Move conflicting files again with resolutions now\n                                    this._performBatchRequests(newParameterArray, onMoveFinish);\n                                }\n                            }, this);\n\n                            this._assetDrag.fadeOutHelpers();\n                            this.promptHandler.showBatchPrompts(promptCallback);\n                        }\n                        else {\n                            performAfterMoveActions.apply(this);\n                            this._assetDrag.fadeOutHelpers();\n                        }\n                    }, this);\n\n                    // Initiate the file move with the built array, index of 0 and callback to use when done\n                    this._performBatchRequests(parameterArray, onMoveFinish);\n\n                    // Skip returning dragees\n                    return;\n                }\n            }\n            else {\n                // Add the .sel class back on the selected source\n                this.$source.addClass('sel');\n\n                this._collapseExtraExpandedFolders();\n            }\n\n            this._assetDrag.returnHelpersToDraggees();\n        },\n\n        /**\n         * On folder drag stop\n         */\n        _onFolderDragStop: function() {\n            // Only move if we have a valid target and we're not trying to move into our direct parent\n            if (\n                this._folderDrag.$activeDropTarget &&\n                this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n            ) {\n                var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n                this._collapseExtraExpandedFolders(targetFolderId);\n\n                // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n                var folderIds = [];\n\n                for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                    var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                        folderId = $a.data('folder-id');\n\n                    // Make sure it's not already in the target folder and use this single folder Id.\n                    if (folderId != targetFolderId) {\n                        folderIds.push(folderId);\n                        break;\n                    }\n                }\n\n                if (folderIds.length) {\n                    folderIds.sort();\n                    folderIds.reverse();\n\n                    this.setIndexBusy();\n                    this._positionProgressBar();\n                    this.progressBar.resetProgressBar();\n                    this.progressBar.setItemCount(folderIds.length);\n                    this.progressBar.showProgressBar();\n\n                    var parameterArray = [];\n\n                    for (i = 0; i < folderIds.length; i++) {\n                        parameterArray.push({\n                            action: 'assets/move-folder',\n                            params: {\n                                folderId: folderIds[i],\n                                parentId: targetFolderId\n                            }\n                        });\n                    }\n\n                    // Increment, so to avoid displaying folder files that are being moved\n                    this.requestId++;\n\n                    /*\n                     Here's the rundown:\n                     1) Send all the folders being moved\n                     2) Get results:\n                     a) For all conflicting, receive prompts and resolve them to get:\n                     b) For all valid move operations: by now server has created the needed folders\n                     in target destination. Server returns an array of file move operations\n                     c) server also returns a list of all the folder id changes\n                     d) and the data-id of node to be removed, in case of conflict\n                     e) and a list of folders to delete after the move\n                     3) From data in 2) build a large file move operation array\n                     4) Create a request loop based on this, so we can display progress bar\n                     5) when done, delete all the folders and perform other maintenance\n                     6) Champagne\n                     */\n\n                    // This will hold the final list of files to move\n                    var fileMoveList = [];\n\n                    var newSourceKey = '';\n\n                    var onMoveFinish = function(responseArray) {\n                        this.promptHandler.resetPrompts();\n\n                        // Loop trough all the responses\n                        for (var i = 0; i < responseArray.length; i++) {\n                            var data = responseArray[i];\n\n                            // If successful and have data, then update\n                            if (data.success) {\n                                if (data.transferList) {\n                                    fileMoveList = data.transferList;\n                                }\n\n                                if (data.newFolderId) {\n                                    newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                                }\n                            }\n\n                            // Push prompt into prompt array\n                            if (data.conflict) {\n                                data.prompt = {\n                                    message: data.conflict,\n                                    choices: this._folderConflictTemplate.choices\n                                };\n\n                                this.promptHandler.addPrompt(data);\n                            }\n\n                            if (data.error) {\n                                alert(data.error);\n                            }\n                        }\n\n                        if (this.promptHandler.getPromptCount()) {\n                            // Define callback for completing all prompts\n                            var promptCallback = $.proxy(function(returnData) {\n                                this.promptHandler.resetPrompts();\n\n                                var newParameterArray = [];\n\n                                var params = {};\n                                // Loop trough all returned data and prepare a new request array\n                                for (var i = 0; i < returnData.length; i++) {\n                                    if (returnData[i].choice === 'cancel') {\n                                        continue;\n                                    }\n\n                                    if (returnData[i].choice === 'replace') {\n                                        params.force = true;\n                                    }\n\n                                    if (returnData[i].choice === 'merge') {\n                                        params.merge = true;\n                                    }\n\n                                    params.folderId = data.folderId;\n                                    params.parentId = data.parentId;\n\n                                    newParameterArray.push({\n                                        action: 'assets/move-folder',\n                                        params: params\n                                    });\n                                }\n\n                                // Start working on them lists, baby\n                                if (newParameterArray.length === 0) {\n                                    $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                                }\n                                else {\n                                    // Start working\n                                    this.setIndexBusy();\n                                    this.progressBar.resetProgressBar();\n                                    this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                    this.progressBar.showProgressBar();\n\n                                    this._performBatchRequests(newParameterArray, onMoveFinish);\n                                }\n                            }, this);\n\n                            this.promptHandler.showBatchPrompts(promptCallback);\n\n                            this.setIndexAvailable();\n                            this.progressBar.hideProgressBar();\n                        }\n                        else {\n                            $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                        }\n                    }.bind(this);\n\n                    // Initiate the folder move with the built array, index of 0 and callback to use when done\n                    this._performBatchRequests(parameterArray, onMoveFinish);\n\n                    // Skip returning dragees until we get the Ajax response\n                    return;\n                }\n            }\n            else {\n                // Add the .sel class back on the selected source\n                this.$source.addClass('sel');\n\n                this._collapseExtraExpandedFolders();\n            }\n\n            this._folderDrag.returnHelpersToDraggees();\n        },\n\n        /**\n         * Really move the folder. Like really. For real.\n         */\n        _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n            this.setIndexBusy();\n            this.progressBar.resetProgressBar();\n            this.progressBar.setItemCount(1);\n            this.progressBar.showProgressBar();\n\n            var moveCallback = function(folderDeleteList) {\n                // Delete the old folders\n                var counter = 0;\n                var limit = folderDeleteList.length;\n                for (var i = 0; i < folderDeleteList.length; i++) {\n                    // When all folders are deleted, reload the sources.\n                    Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, function() {\n                        if (++counter === limit) {\n                            this.setIndexAvailable();\n                            this.progressBar.hideProgressBar();\n                            this._folderDrag.returnHelpersToDraggees();\n                            this.setInstanceState('selectedSource', newSourceKey);\n                            this.refreshSources();\n                        }\n                    }.bind(this));\n                }\n            }.bind(this);\n\n\n            if (fileMoveList.length > 0) {\n                var parameterArray =[];\n\n                for (var i = 0; i < fileMoveList.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: fileMoveList[i]\n                    });\n                }\n                this._performBatchRequests(parameterArray, function() {\n                    moveCallback(folderDeleteList);\n                });\n            }\n            else {\n                moveCallback(folderDeleteList);\n            }\n        },\n\n        /**\n         * Returns the root level source for a source.\n         *\n         * @param $source\n         * @returns {*}\n         * @private\n         */\n        _getRootSource: function($source) {\n            var $parent;\n            while (($parent = this._getParentSource($source)) && $parent.length) {\n                $source = $parent;\n            }\n            return $source;\n        },\n\n        /**\n         * Get parent source for a source.\n         *\n         * @param $source\n         * @returns {*}\n         * @private\n         */\n        _getParentSource: function($source) {\n            if (this._getSourceLevel($source) > 1) {\n                return $source.parent().parent().siblings('a');\n            }\n        },\n\n        _selectSourceByFolderId: function(targetFolderId) {\n            var $targetSource = this._getSourceByKey(targetFolderId);\n\n            // Make sure that all the parent sources are expanded and this source is visible.\n            var $parentSources = $targetSource.parent().parents('li');\n\n            for (var i = 0; i < $parentSources.length; i++) {\n                var $parentSource = $($parentSources[i]);\n\n                if (!$parentSource.hasClass('expanded')) {\n                    $parentSource.children('.toggle').trigger('click');\n                }\n            }\n\n            this.selectSource($targetSource);\n            this.updateElements();\n        },\n\n        /**\n         * Initialize the uploader.\n         *\n         * @private\n         */\n        afterInit: function() {\n            if (!this.$uploadButton) {\n                this.$uploadButton = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit',\n                    'data-icon': 'upload',\n                    style: 'position: relative; overflow: hidden;',\n                    text: Craft.t('app', 'Upload files'),\n                });\n                this.addButton(this.$uploadButton);\n\n                this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n            }\n\n            this.promptHandler = new Craft.PromptHandler();\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n            var options = {\n                url: Craft.getActionUrl('assets/upload'),\n                fileInput: this.$uploadInput,\n                dropZone: this.$container\n            };\n\n            options.events = {\n                fileuploadstart: $.proxy(this, '_onUploadStart'),\n                fileuploadprogressall: $.proxy(this, '_onUploadProgress'),\n                fileuploaddone: $.proxy(this, '_onUploadComplete')\n            };\n\n            if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n                options.allowedKinds = this.settings.criteria.kind;\n            }\n\n            this._currentUploaderSettings = options;\n\n            this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n            this.$uploadButton.on('click', $.proxy(function() {\n                if (this.$uploadButton.hasClass('disabled')) {\n                    return;\n                }\n                if (!this.isIndexBusy) {\n                    this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n                }\n            }, this));\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific volume in the URL?\n            if (this.settings.context === 'index' && typeof defaultVolumeHandle !== 'undefined') {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n                    if ($source.data('volume-handle') === defaultVolumeHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        onSelectSource: function() {\n            var $source = this._getSourceByKey(this.sourceKey);\n            var folderId = $source.data('folder-id');\n\n            if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n                this.uploader.setParams({\n                    folderId: this.$source.attr('data-folder-id')\n                });\n                this.$uploadButton.removeClass('disabled');\n            } else {\n                this.$uploadButton.addClass('disabled');\n            }\n\n            // Update the URL if we're on the Assets index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'assets';\n                var $rootSource = this._getRootSource($source);\n                if ($rootSource && $rootSource.data('volume-handle')) {\n                    uri += '/' + $rootSource.data('volume-handle');\n                }\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n\n            this.base();\n        },\n\n        _getFolderUidFromSourceKey: function(sourceKey) {\n            var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n            return m ? m[1] : null;\n        },\n\n        startSearching: function() {\n            // Does this source have subfolders?\n            if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n                if (this.$includeSubfoldersContainer === null) {\n                    var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                    this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                    var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                    this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                    $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                    this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                        this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                        this.updateElements();\n                    });\n                }\n                else {\n                    this.$includeSubfoldersContainer.velocity('stop');\n                }\n\n                var checked = this.getSelectedSourceState('includeSubfolders', false);\n                this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n                this.$includeSubfoldersContainer.velocity({\n                    marginBottom: 0,\n                    opacity: 1\n                }, 'fast');\n\n                this.showingIncludeSubfoldersCheckbox = true;\n            }\n\n            this.base();\n        },\n\n        stopSearching: function() {\n            if (this.showingIncludeSubfoldersCheckbox) {\n                this.$includeSubfoldersContainer.velocity('stop');\n\n                this.$includeSubfoldersContainer.velocity({\n                    marginBottom: -25,\n                    opacity: 0\n                }, 'fast');\n\n                this.showingIncludeSubfoldersCheckbox = false;\n            }\n\n            this.base();\n        },\n\n        getViewParams: function() {\n            var data = this.base();\n\n            if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n                data.criteria.includeSubfolders = true;\n            }\n\n            return data;\n        },\n\n        /**\n         * React on upload submit.\n         *\n         * @private\n         */\n        _onUploadStart: function() {\n            this.setIndexBusy();\n\n            // Initial values\n            this._positionProgressBar();\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n\n            this.promptHandler.resetPrompts();\n        },\n\n        /**\n         * Update uploaded byte count.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On Upload Complete.\n         */\n        _onUploadComplete: function(event, data) {\n            var response = data.result;\n            var filename = data.files[0].name;\n\n            var doReload = true;\n\n            if (response.success || response.conflict) {\n                // Add the uploaded file to the selected ones, if appropriate\n                this._uploadedAssetIds.push(response.assetId);\n\n                // If there is a prompt, add it to the queue\n                if (response.conflict) {\n                    response.prompt =  {\n                        message: Craft.t('app', response.conflict, {file: response.filename}),\n                        choices: this._fileConflictTemplate.choices\n                    };\n\n                    this.promptHandler.addPrompt(response);\n                }\n\n                Craft.cp.runQueue();\n            }\n            else {\n                if (response.error) {\n                    alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n                }\n                else {\n                    alert(Craft.t('app', 'Upload failed for {filename}.', {filename: filename}));\n                }\n\n                doReload = false;\n            }\n\n            // For the last file, display prompts, if any. If not - just update the element view.\n            if (this.uploader.isLastUpload()) {\n                this.setIndexAvailable();\n                this.progressBar.hideProgressBar();\n\n                if (this.promptHandler.getPromptCount()) {\n                    this.promptHandler.showBatchPrompts($.proxy(this, '_uploadFollowup'));\n                }\n                else {\n                    if (doReload) {\n                        this._updateAfterUpload();\n                    }\n                }\n            }\n        },\n\n        /**\n         * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n         *\n         * @private\n         */\n        _updateAfterUpload: function () {\n            if (this.settings.context !== 'index') {\n                this.setSortAttribute('dateModified');\n                this.setSortDirection('desc');\n            }\n            this.updateElements();\n        },\n\n        /**\n         * Follow up to an upload that triggered at least one conflict resolution prompt.\n         *\n         * @param returnData\n         * @private\n         */\n        _uploadFollowup: function(returnData) {\n            this.setIndexBusy();\n            this.progressBar.resetProgressBar();\n\n            this.promptHandler.resetPrompts();\n\n            var finalCallback = function() {\n                this.setIndexAvailable();\n                this.progressBar.hideProgressBar();\n                this._updateAfterUpload();\n            }.bind(this);\n\n            this.progressBar.setItemCount(returnData.length);\n\n            var doFollowup = function(parameterArray, parameterIndex, callback) {\n                var postData = {};\n                var action = null;\n\n                var followupCallback = function (data, textStatus) {\n                    if (textStatus === 'success' && data.assetId) {\n                        this._uploadedAssetIds.push(data.assetId);\n                    } else if (data.error) {\n                        alert(data.error);\n                    }\n                    parameterIndex++;\n                    this.progressBar.incrementProcessedItemCount(1);\n                    this.progressBar.updateProgressBar();\n\n                    if (parameterIndex === parameterArray.length) {\n                        callback();\n                    }\n                    else {\n                        doFollowup(parameterArray, parameterIndex, callback);\n                    }\n                }.bind(this);\n\n                if (parameterArray[parameterIndex].choice === 'replace') {\n                    action = 'assets/replace-file';\n                    postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                    if (parameterArray[parameterIndex].conflictingAssetId) {\n                        postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                    } else {\n                        postData.targetFilename = parameterArray[parameterIndex].filename;\n                    }\n                } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                    action = 'assets/delete-asset';\n                    postData.assetId = parameterArray[parameterIndex].assetId;\n                }\n\n                if (!action) {\n                    // We don't really need to do another request, so let's pretend that already happened\n                    followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n                } else {\n                    Craft.postActionRequest(action, postData, followupCallback);\n                }\n            }.bind(this);\n\n            this.progressBar.showProgressBar();\n            doFollowup(returnData, 0, finalCallback);\n        },\n\n        /**\n         * Perform actions after updating elements\n         * @private\n         */\n        onUpdateElements: function() {\n            this._onUpdateElements(false, this.view.getAllElements());\n            this.view.on('appendElements', $.proxy(function(ev) {\n                this._onUpdateElements(true, ev.newElements);\n            }, this));\n\n            this.base();\n        },\n\n        /**\n         * Do the after-update initializations\n         * @private\n         */\n        _onUpdateElements: function(append, $newElements) {\n            if (this.settings.context === 'index') {\n                if (!append) {\n                    this._assetDrag.removeAllItems();\n                }\n\n                this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n            }\n\n            // See if we have freshly uploaded files to add to selection\n            if (this._uploadedAssetIds.length) {\n                if (this.view.settings.selectable) {\n                    for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                        this.view.selectElementById(this._uploadedAssetIds[i]);\n                    }\n                }\n\n                // Reset the list.\n                this._uploadedAssetIds = [];\n            }\n\n            this.base(append, $newElements);\n\n            this.removeListener(this.$elements, 'keydown');\n            this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n            this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n        },\n\n        /**\n         * Handle a keypress\n         * @private\n         */\n        _onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n                if (Craft.PreviewFileModal.openInstance) {\n                    Craft.PreviewFileModal.openInstance.selfDestruct();\n                } else {\n                    var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                    if ($element.length) {\n                        this._loadPreview($element);\n                    }\n                }\n\n                ev.stopPropagation();\n                return false;\n            }\n        },\n\n        /**\n         * Handle element being focused\n         * @private\n         */\n        _onElementFocus: function (ev) {\n            var $element = $(ev.item).find('.element');\n\n            if (Craft.PreviewFileModal.openInstance && $element.length) {\n                this._loadPreview($element);\n            }\n        },\n\n        /**\n         * Load the preview for an Asset element\n         * @private\n         */\n        _loadPreview: function($element) {\n            var settings = {};\n\n            if ($element.data('image-width')) {\n                settings.startingWidth = $element.data('image-width');\n                settings.startingHeight = $element.data('image-height');\n            }\n\n            new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n        },\n\n        /**\n         * On Drag Start\n         */\n        _onDragStart: function() {\n            this._tempExpandedFolders = [];\n        },\n\n        /**\n         * Get File Drag Helper\n         */\n        _getFileDragHelper: function($element) {\n            var currentView = this.getSelectedSourceState('mode');\n            var $outerContainer;\n            var $innerContainer;\n\n            switch (currentView) {\n                case 'table': {\n                    $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                    $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                    var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                    var $tbody = $('<tbody/>').appendTo($table);\n\n                    $element.appendTo($tbody);\n\n                    // Copy the column widths\n                    this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                    var $helperCells = $element.children();\n\n                    for (var i = 0; i < $helperCells.length; i++) {\n                        // Hard-set the cell widths\n                        var $helperCell = $($helperCells[i]);\n\n                        // Skip the checkbox cell\n                        if ($helperCell.hasClass('checkbox-cell')) {\n                            $helperCell.remove();\n                            $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                            continue;\n                        }\n\n                        var $firstRowCell = $(this._$firstRowCells[i]),\n                            width = $firstRowCell.width();\n\n                        $firstRowCell.width(width);\n                        $helperCell.width(width);\n                    }\n\n                    return $outerContainer;\n                }\n                case 'thumbs': {\n                    $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                    $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                    $element.appendTo($innerContainer);\n\n                    return $outerContainer;\n                }\n            }\n\n            return $();\n        },\n\n        /**\n         * On Drop Target Change\n         */\n        _onDropTargetChange: function($dropTarget) {\n            clearTimeout(this._expandDropTargetFolderTimeout);\n\n            if ($dropTarget) {\n                var folderId = $dropTarget.data('folder-id');\n\n                if (folderId) {\n                    this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                    if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                        this._expandDropTargetFolderTimeout = setTimeout($.proxy(this, '_expandFolder'), 500);\n                    }\n                }\n                else {\n                    this.dropTargetFolder = null;\n                }\n            }\n\n            if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n                // Temporarily remove the .sel class on the active source\n                this.$source.removeClass('sel');\n            }\n            else {\n                this.$source.addClass('sel');\n            }\n        },\n\n        /**\n         * Collapse Extra Expanded Folders\n         */\n        _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n            clearTimeout(this._expandDropTargetFolderTimeout);\n\n            // If a source ID is passed in, exclude its parents\n            var $excludedSources;\n\n            if (dropTargetFolderId) {\n                $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n            }\n\n            for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n                var $source = this._tempExpandedFolders[i];\n\n                // Check the parent list, if a source id is passed in\n                if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                    this._collapseFolder($source);\n                    this._tempExpandedFolders.splice(i, 1);\n                }\n            }\n        },\n\n        _getSourceByKey: function(key) {\n            return this.$sources.filter('[data-key$=\"' + key + '\"]');\n        },\n\n        _hasSubfolders: function($source) {\n            return $source.siblings('ul').find('li').length;\n        },\n\n        _isExpanded: function($source) {\n            return $source.parent('li').hasClass('expanded');\n        },\n\n        _expandFolder: function() {\n            // Collapse any temp-expanded drop targets that aren't parents of this one\n            this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n            this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n            // Keep a record of that\n            this._tempExpandedFolders.push(this.dropTargetFolder);\n        },\n\n        _collapseFolder: function($source) {\n            if ($source.parent().hasClass('expanded')) {\n                $source.siblings('.toggle').trigger('click');\n            }\n        },\n\n        _createFolderContextMenu: function($source) {\n            // Make sure it's a volume folder\n            if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                return;\n            }\n\n            var menuOptions = [{label: Craft.t('app', 'New subfolder'), onClick: $.proxy(this, '_createSubfolder', $source)}];\n\n            // For all folders that are not top folders\n            if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n                menuOptions.push({label: Craft.t('app', 'Rename folder'), onClick: $.proxy(this, '_renameFolder', $source)});\n                menuOptions.push({label: Craft.t('app', 'Delete folder'), onClick: $.proxy(this, '_deleteFolder', $source)});\n            }\n\n            new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n        },\n\n        _createSubfolder: function($parentFolder) {\n            var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n            if (subfolderName) {\n                var params = {\n                    parentId: $parentFolder.data('folder-id'),\n                    folderName: subfolderName\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/create-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        this._prepareParentForChildren($parentFolder);\n\n                        var $subfolder = $(\n                            '<li>' +\n                            '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                            (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                            ' data-folder-id=\"' + data.folderId + '\"' +\n                            (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                            (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                            (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                            '>' +\n                            data.folderName +\n                            '</a>' +\n                            '</li>'\n                        );\n\n                        var $a = $subfolder.children('a:first');\n                        this._appendSubfolder($parentFolder, $subfolder);\n                        this.initSource($a);\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this));\n            }\n        },\n\n        _deleteFolder: function($targetFolder) {\n            if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n                var params = {\n                    folderId: $targetFolder.data('folder-id')\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/delete-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        var $parentFolder = this._getParentSource($targetFolder);\n\n                        // Remove folder and any trace from its parent, if needed\n                        this.deinitSource($targetFolder);\n\n                        $targetFolder.parent().remove();\n                        this._cleanUpTree($parentFolder);\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this));\n            }\n        },\n\n        /**\n         * Rename\n         */\n        _renameFolder: function($targetFolder) {\n            var oldName = $.trim($targetFolder.text()),\n                newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n            if (newName && newName !== oldName) {\n                var params = {\n                    folderId: $targetFolder.data('folder-id'),\n                    newName: newName\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/rename-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        $targetFolder.text(data.newName);\n\n                        // If the current folder was renamed.\n                        if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                            this.updateElements();\n                        }\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this), 'json');\n            }\n        },\n\n        /**\n         * Prepare a source folder for children folder.\n         *\n         * @param $parentFolder\n         * @private\n         */\n        _prepareParentForChildren: function($parentFolder) {\n            if (!this._hasSubfolders($parentFolder)) {\n                $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n                this.initSourceToggle($parentFolder);\n            }\n        },\n\n        /**\n         * Appends a subfolder to the parent folder at the correct spot.\n         *\n         * @param $parentFolder\n         * @param $subfolder\n         * @private\n         */\n        _appendSubfolder: function($parentFolder, $subfolder) {\n            var $subfolderList = $parentFolder.siblings('ul'),\n                $existingChildren = $subfolderList.children('li'),\n                subfolderLabel = $.trim($subfolder.children('a:first').text()),\n                folderInserted = false;\n\n            for (var i = 0; i < $existingChildren.length; i++) {\n                var $existingChild = $($existingChildren[i]);\n\n                if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                    $existingChild.before($subfolder);\n                    folderInserted = true;\n                    break;\n                }\n            }\n\n            if (!folderInserted) {\n                $parentFolder.siblings('ul').append($subfolder);\n            }\n        },\n\n        _cleanUpTree: function($parentFolder) {\n            if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n                this.deinitSourceToggle($parentFolder);\n                $parentFolder.siblings('ul').remove();\n                $parentFolder.siblings('.toggle').remove();\n                $parentFolder.parent().removeClass('expanded');\n            }\n        },\n\n        _positionProgressBar: function() {\n            if (!this.progressBar) {\n                this.progressBar = new Craft.ProgressBar(this.$main, true);\n            }\n\n            var $container = $(),\n                scrollTop = 0,\n                offset = 0;\n\n            if (this.settings.context === 'index') {\n                $container = this.progressBar.$progressBar.closest('#content');\n                scrollTop = Garnish.$win.scrollTop();\n            } else {\n                $container = this.progressBar.$progressBar.closest('.main');\n                scrollTop = this.$main.scrollTop();\n            }\n\n            var containerTop = $container.offset().top;\n            var diff = scrollTop - containerTop;\n            var windowHeight = Garnish.$win.height();\n\n            if ($container.height() > windowHeight) {\n                offset = (windowHeight / 2) - 6 + diff;\n            } else {\n                offset = ($container.height() / 2) - 6;\n            }\n\n            if (this.settings.context !== 'index') {\n                offset = scrollTop + (($container.height() / 2) - 6);\n            }\n\n            this.progressBar.$progressBar.css({\n                top: offset\n            });\n        },\n\n        _performBatchRequests: function(parameterArray, finalCallback) {\n            var responseArray = [];\n\n            var doRequest = function (parameters) {\n                Craft.postActionRequest(parameters.action, parameters.params, function (data, textStatus) {\n                    this.progressBar.incrementProcessedItemCount(1);\n                    this.progressBar.updateProgressBar();\n\n                    if (textStatus === 'success') {\n                        responseArray.push(data);\n\n                        // If assets were just merged we should get the reference tags updated right away\n                        Craft.cp.runQueue();\n                    }\n\n                    if (responseArray.length >= parameterArray.length) {\n                        finalCallback(responseArray);\n                    }\n                }.bind(this));\n            }.bind(this);\n\n            for (var i = 0; i < parameterArray.length; i++) {\n                doRequest(parameterArray[i]);\n            }\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        requestId: 0,\n        hud: null,\n        $uploadBtn: null,\n        uploader: null,\n        progressBar: null,\n\n        originalFilename: '',\n        originalExtension: '',\n\n        init: function() {\n            if (arguments.length > 0 && typeof arguments[0] === 'object') {\n                arguments[0].editorSettings = {\n                    onShowHud: $.proxy(this.resetOriginalFilename, this),\n                    onCreateForm: $.proxy(this._renameHelper, this),\n                    validators: [$.proxy(this.validateElementForm, this)]\n                };\n            }\n\n            this.base.apply(this, arguments);\n\n            if (this.settings.canUpload) {\n                this._attachUploader();\n            }\n\n            this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n            this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n        },\n\n        /**\n         * Handle a keypress\n         * @private\n         */\n        _onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n                if (Craft.PreviewFileModal.openInstance) {\n                    Craft.PreviewFileModal.openInstance.selfDestruct();\n                } else {\n                    var $element = this.elementSelect.$focusedItem;\n\n                    if ($element.length) {\n                        this._loadPreview($element);\n                    }\n                }\n\n                ev.stopPropagation();\n\n                return false;\n            }\n        },\n\n        /**\n         * Handle element being focused\n         * @private\n         */\n        _onElementFocus: function(ev) {\n            var $element = $(ev.item);\n\n            if (Craft.PreviewFileModal.openInstance && $element.length) {\n                this._loadPreview($element);\n            }\n        },\n\n        /**\n         * Load the preview for an Asset element\n         * @private\n         */\n        _loadPreview: function($element) {\n            var settings = {};\n\n            if ($element.data('image-width')) {\n                settings.startingWidth = $element.data('image-width');\n                settings.startingHeight = $element.data('image-height');\n            }\n\n            new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n        },\n\n        /**\n         * Create the element editor\n         */\n        createElementEditor: function($element) {\n            return this.base($element, {\n                params: {\n                    defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n                },\n                input: this\n            });\n        },\n\n        /**\n         * Attach the uploader with drag event handler\n         */\n        _attachUploader: function() {\n            this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n            var options = {\n                url: Craft.getActionUrl('assets/upload'),\n                dropZone: this.$container,\n                formData: {\n                    fieldId: this.settings.fieldId,\n                    elementId: this.settings.sourceElementId,\n                    siteId: this.settings.criteria.siteId,\n                }\n            };\n\n            if (this.$addElementBtn) {\n                this.$uploadBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn dashed',\n                    'data-icon': 'upload',\n                    text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n                }).insertAfter(this.$addElementBtn);\n                options.fileInput = $('<input/>', {\n                    type: 'file',\n                    class: 'hidden',\n                    multiple: this.settings.limit != 1,\n                }).insertAfter(this.$uploadBtn);\n\n                // Trigger a window resize in case the field is inside an element editor HUD\n                Garnish.$win.trigger('resize');\n            }\n\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            if (typeof this.settings.criteria.kind !== 'undefined') {\n                options.allowedKinds = this.settings.criteria.kind;\n            }\n\n            options.canAddMoreFiles = $.proxy(this, 'canAddMoreFiles');\n\n            options.events = {};\n            options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n            options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n            options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n\n            this.uploader = new Craft.Uploader(this.$container, options);\n\n            if (this.$uploadBtn) {\n                this.$uploadBtn.on('click', $.proxy(function(ev) {\n                    // We can't store a reference to the file input, because it gets replaced with a new input\n                    // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                    this.$uploadBtn.next('input[type=file]').trigger('click');\n                }, this));\n            }\n        },\n\n        refreshThumbnail: function(elementId) {\n            var parameters = {\n                elementId: elementId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                    $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                    this.thumbLoader.load($existing);\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Add the freshly uploaded file to the input field.\n         */\n        selectUploadedFile: function(element) {\n            // Check if we're able to add new elements\n            if (!this.canAddMoreElements()) {\n                return;\n            }\n\n            var $newElement = element.$element;\n\n            // Make a couple tweaks\n            $newElement.addClass('removable');\n            $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n                '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n            $newElement.appendTo(this.$elementsContainer);\n\n            var margin = -($newElement.outerWidth() + 10);\n\n            this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$addElementBtn.velocity(animateCss, 'fast');\n\n            this.addElements($newElement);\n\n            delete this.modal;\n        },\n\n        /**\n         * On upload start.\n         */\n        _onUploadStart: function() {\n            this.progressBar.$progressBar.css({\n                top: Math.round(this.$container.outerHeight() / 2) - 6\n            });\n\n            this.$container.addClass('uploading');\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n        },\n\n        /**\n         * On upload progress.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadComplete: function(event, data) {\n            if (data.result.error) {\n                alert(data.result.error);\n            } else {\n                var parameters = {\n                    elementId: data.result.assetId,\n                    siteId: this.settings.criteria.siteId,\n                    size: this.settings.viewMode\n                };\n\n                Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                    if (data.error) {\n                        alert(data.error);\n                    } else {\n                        var html = $(data.html);\n                        Craft.appendHeadHtml(data.headHtml);\n                        this.selectUploadedFile(Craft.getElementInfo(html));\n                    }\n\n                    // Last file\n                    if (this.uploader.isLastUpload()) {\n                        this.progressBar.hideProgressBar();\n                        this.$container.removeClass('uploading');\n\n                        if (window.draftEditor) {\n                            window.draftEditor.checkForm();\n                        }\n                    }\n                }.bind(this));\n\n                Craft.cp.runQueue();\n            }\n        },\n\n        /**\n         * We have to take into account files about to be added as well\n         */\n        canAddMoreFiles: function(slotsTaken) {\n            return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n        },\n\n        /**\n         * Parse the passed filename into the base filename and extension.\n         *\n         * @param filename\n         * @returns {{extension: string, baseFileName: string}}\n         */\n        _parseFilename: function(filename) {\n            var parts = filename.split('.'),\n                extension = '';\n\n            if (parts.length > 1) {\n                extension = parts.pop();\n            }\n            var baseFileName = parts.join('.');\n            return {extension: extension, baseFileName: baseFileName};\n        },\n\n        /**\n         * A helper function or the filename field.\n         * @private\n         */\n        _renameHelper: function($form) {\n            $('.renameHelper', $form).on('focus', $.proxy(function(e) {\n                var input = e.currentTarget,\n                    filename = this._parseFilename(input.value);\n\n                if (this.originalFilename === '' && this.originalExtension === '') {\n                    this.originalFilename = filename.baseFileName;\n                    this.originalExtension = filename.extension;\n                }\n\n                var startPos = 0,\n                    endPos = filename.baseFileName.length;\n\n                if (typeof input.selectionStart !== 'undefined') {\n                    input.selectionStart = startPos;\n                    input.selectionEnd = endPos;\n                } else if (document.selection && document.selection.createRange) {\n                    // IE branch\n                    input.select();\n                    var range = document.selection.createRange();\n                    range.collapse(true);\n                    range.moveEnd(\"character\", endPos);\n                    range.moveStart(\"character\", startPos);\n                    range.select();\n                }\n            }, this));\n        },\n\n        resetOriginalFilename: function() {\n            this.originalFilename = \"\";\n            this.originalExtension = \"\";\n        },\n\n        validateElementForm: function() {\n            var $filenameField = $('.renameHelper', this.elementEditor.hud.$hud.data('elementEditor').$form);\n            var filename = this._parseFilename($filenameField.val());\n\n            if (filename.extension !== this.originalExtension) {\n                // Blank extension\n                if (filename.extension === '') {\n                    // If filename changed as well, assume removal of extension a mistake\n                    if (this.originalFilename !== filename.baseFileName) {\n                        $filenameField.val(filename.baseFileName + '.' + this.originalExtension);\n                        return true;\n                    } else {\n                        // If filename hasn't changed, make sure they want to remove extension\n                        return confirm(Craft.t('app', \"Are you sure you want to remove the extension “.{ext}”?\", {ext: this.originalExtension}));\n                    }\n                } else {\n                    // If the extension has changed, make sure it s intentional\n                    return confirm(Craft.t('app', \"Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?\",\n                        {\n                            oldExt: this.originalExtension,\n                            newExt: filename.extension\n                        }));\n                }\n            }\n            return true;\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend(\n    {\n        $selectTransformBtn: null,\n        _selectedTransform: null,\n\n        init: function(elementType, settings) {\n            settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n            this.base(elementType, settings);\n\n            if (settings.transforms.length) {\n                this.createSelectTransformButton(settings.transforms);\n            }\n        },\n\n        createSelectTransformButton: function(transforms) {\n            if (!transforms || !transforms.length) {\n                return;\n            }\n\n            var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n            this.$selectBtn.appendTo($btnGroup);\n\n            this.$selectTransformBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn disabled',\n                text: Craft.t('app', 'Select transform'),\n            }).appendTo($btnGroup);\n\n            var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n                $menuList = $('<ul></ul>').appendTo($menu);\n\n            for (var i = 0; i < transforms.length; i++) {\n                $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n            }\n\n            var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n                onOptionSelect: $.proxy(this, 'onSelectTransform')\n            });\n            MenuButton.disable();\n\n            this.$selectTransformBtn.data('menuButton', MenuButton);\n        },\n\n        onSelectionChange: function(ev) {\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                allowTransforms = false;\n\n            if ($selectedElements.length && this.settings.transforms.length) {\n                allowTransforms = true;\n\n                for (var i = 0; i < $selectedElements.length; i++) {\n                    if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                        break;\n                    }\n                }\n            }\n\n            var MenuBtn = null;\n\n            if (this.$selectTransformBtn) {\n                MenuBtn = this.$selectTransformBtn.data('menuButton');\n            }\n\n            if (allowTransforms) {\n                if (MenuBtn) {\n                    MenuBtn.enable();\n                }\n\n                this.$selectTransformBtn.removeClass('disabled');\n            }\n            else if (this.$selectTransformBtn) {\n                if (MenuBtn) {\n                    MenuBtn.disable();\n                }\n\n                this.$selectTransformBtn.addClass('disabled');\n            }\n\n            this.base();\n        },\n\n        onSelectTransform: function(option) {\n            var transform = $(option).data('transform');\n            this.selectImagesWithTransform(transform);\n        },\n\n        selectImagesWithTransform: function(transform) {\n            // First we must get any missing transform URLs\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n                Craft.AssetSelectorModal.transformUrls[transform] = {};\n            }\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                imageIdsWithMissingUrls = [];\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                var $item = $($selectedElements[i]),\n                    elementId = Craft.getElementInfo($item).id;\n\n                if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                    imageIdsWithMissingUrls.push(elementId);\n                }\n            }\n\n            if (imageIdsWithMissingUrls.length) {\n                this.showFooterSpinner();\n\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, $.proxy(function() {\n                    this.hideFooterSpinner();\n                    this.selectImagesWithTransform(transform);\n                }, this));\n            }\n            else {\n                this._selectedTransform = transform;\n                this.selectElements();\n                this._selectedTransform = null;\n            }\n        },\n\n        fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n            var elementId = imageIdsWithMissingUrls.pop();\n\n            var data = {\n                assetId: elementId,\n                handle: transform\n            };\n\n            Craft.postActionRequest('assets/generate-transform', data, $.proxy(function(response, textStatus) {\n                Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n                if (textStatus === 'success') {\n                    if (response.url) {\n                        Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                    }\n                }\n\n                // More to load?\n                if (imageIdsWithMissingUrls.length) {\n                    this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n                }\n                else {\n                    callback();\n                }\n            }, this));\n        },\n\n        getElementInfo: function($selectedElements) {\n            var info = this.base($selectedElements);\n\n            if (this._selectedTransform) {\n                for (var i = 0; i < info.length; i++) {\n                    var elementId = info[i].id;\n\n                    if (\n                        typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                        Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                    ) {\n                        info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                    }\n                }\n            }\n\n            return info;\n        },\n\n        onSelect: function(elementInfo) {\n            this.settings.onSelect(elementInfo, this._selectedTransform);\n        }\n    },\n    {\n        defaults: {\n            canSelectImageTransforms: false,\n            transforms: []\n        },\n\n        transformUrls: {}\n    });\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend(\n    {\n        remainingSessionTime: null,\n        checkRemainingSessionTimer: null,\n        showLoginModalTimer: null,\n        decrementLogoutWarningInterval: null,\n\n        showingLogoutWarningModal: false,\n        showingLoginModal: false,\n\n        logoutWarningModal: null,\n        loginModal: null,\n\n        $logoutWarningPara: null,\n        $passwordInput: null,\n        $passwordSpinner: null,\n        $loginBtn: null,\n        $loginErrorPara: null,\n\n        submitLoginIfLoggedOut: false,\n\n        /**\n         * Init\n         */\n        init: function() {\n            this.updateRemainingSessionTime(Craft.remainingSessionTime);\n        },\n\n        /**\n         * Sets a timer for the next time to check the auth timeout.\n         */\n        setCheckRemainingSessionTimer: function(seconds) {\n            if (this.checkRemainingSessionTimer) {\n                clearTimeout(this.checkRemainingSessionTimer);\n            }\n\n            this.checkRemainingSessionTimer = setTimeout($.proxy(this, 'checkRemainingSessionTime'), seconds * 1000);\n        },\n\n        /**\n         * Pings the server to see how many seconds are left on the current user session, and handles the response.\n         */\n        checkRemainingSessionTime: function(extendSession) {\n            $.ajax({\n                url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n                type: 'GET',\n                dataType: 'json',\n                complete: $.proxy(function(jqXHR, textStatus) {\n                    if (textStatus === 'success') {\n                        if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                            Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                        }\n\n                        this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                        this.submitLoginIfLoggedOut = false;\n                    }\n                    else {\n                        this.updateRemainingSessionTime(-1);\n                    }\n                }, this)\n            });\n        },\n\n        /**\n         * Updates our record of the auth timeout, and handles it.\n         */\n        updateRemainingSessionTime: function(remainingSessionTime) {\n            this.remainingSessionTime = parseInt(remainingSessionTime);\n\n            // Are we within the warning window?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n                // Is there still time to renew the session?\n                if (this.remainingSessionTime) {\n                    if (!this.showingLogoutWarningModal) {\n                        // Show the warning modal\n                        this.showLogoutWarningModal();\n                    }\n\n                    // Will the session expire before the next checkup?\n                    if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                        if (this.showLoginModalTimer) {\n                            clearTimeout(this.showLoginModalTimer);\n                        }\n\n                        this.showLoginModalTimer = setTimeout($.proxy(this, 'showLoginModal'), this.remainingSessionTime * 1000);\n                    }\n                }\n                else {\n                    if (this.showingLoginModal) {\n                        if (this.submitLoginIfLoggedOut) {\n                            this.submitLogin();\n                        }\n                    }\n                    else {\n                        // Show the login modal\n                        this.showLoginModal();\n                    }\n                }\n\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n            else {\n                // Everything's good!\n                this.hideLogoutWarningModal();\n                this.hideLoginModal();\n\n                // Will be be within the minSafeSessionTime before the next update?\n                if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                    this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n                }\n                else {\n                    this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n                }\n            }\n        },\n\n        /**\n         * Shows the logout warning modal.\n         */\n        showLogoutWarningModal: function() {\n            var quickShow;\n\n            if (this.showingLoginModal) {\n                this.hideLoginModal(true);\n                quickShow = true;\n            }\n            else {\n                quickShow = false;\n            }\n\n            this.showingLogoutWarningModal = true;\n\n            if (!this.logoutWarningModal) {\n                let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n                let $body = $('<div class=\"body\"/>').appendTo($form);\n                let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n                let $logoutBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Log out now'),\n                }).appendTo($buttons);\n                let $renewSessionBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Keep me logged in'),\n                }).appendTo($buttons);\n\n                this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n                this.logoutWarningModal = new Garnish.Modal($form, {\n                    autoShow: false,\n                    closeOtherModals: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                    onFadeIn: function() {\n                        if (!Garnish.isMobileBrowser(true)) {\n                            // Auto-focus the renew button\n                            setTimeout(function() {\n                                $renewSessionBtn.trigger('focus');\n                            }, 100);\n                        }\n                    }\n                });\n\n                this.addListener($logoutBtn, 'activate', 'logout');\n                this.addListener($form, 'submit', 'renewSession');\n            }\n\n            if (quickShow) {\n                this.logoutWarningModal.quickShow();\n            }\n            else {\n                this.logoutWarningModal.show();\n            }\n\n            this.updateLogoutWarningMessage();\n\n            this.decrementLogoutWarningInterval = setInterval($.proxy(this, 'decrementLogoutWarning'), 1000);\n        },\n\n        /**\n         * Updates the logout warning message indicating that the session is about to expire.\n         */\n        updateLogoutWarningMessage: function() {\n            this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n                time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n            }));\n\n            this.logoutWarningModal.updateSizeAndPosition();\n        },\n\n        decrementLogoutWarning: function() {\n            if (this.remainingSessionTime > 0) {\n                this.remainingSessionTime--;\n                this.updateLogoutWarningMessage();\n            }\n\n            if (this.remainingSessionTime === 0) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        },\n\n        /**\n         * Hides the logout warning modal.\n         */\n        hideLogoutWarningModal: function(quick) {\n            this.showingLogoutWarningModal = false;\n\n            if (this.logoutWarningModal) {\n                if (quick) {\n                    this.logoutWarningModal.quickHide();\n                }\n                else {\n                    this.logoutWarningModal.hide();\n                }\n\n                if (this.decrementLogoutWarningInterval) {\n                    clearInterval(this.decrementLogoutWarningInterval);\n                }\n            }\n        },\n\n        /**\n         * Shows the login modal.\n         */\n        showLoginModal: function() {\n            var quickShow;\n\n            if (this.showingLogoutWarningModal) {\n                this.hideLogoutWarningModal(true);\n                quickShow = true;\n            }\n            else {\n                quickShow = false;\n            }\n\n            this.showingLoginModal = true;\n\n            if (!this.loginModal) {\n                var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                    $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                    $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                    $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                    $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                    $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                    $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n                this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n                this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n                this.$loginBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit disabled',\n                    text: Craft.t('app', 'Login'),\n                }).appendTo($buttonContainer);\n                this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n                this.loginModal = new Garnish.Modal($form, {\n                    autoShow: false,\n                    closeOtherModals: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    shadeClass: 'modal-shade dark loginmodalshade',\n                    onFadeIn: $.proxy(function() {\n                        if (!Garnish.isMobileBrowser(true)) {\n                            // Auto-focus the password input\n                            setTimeout($.proxy(function() {\n                                this.$passwordInput.trigger('focus');\n                            }, this), 100);\n                        }\n                    }, this),\n                    onFadeOut: $.proxy(function() {\n                        this.$passwordInput.val('');\n                    }, this)\n                });\n\n                new Craft.PasswordInput(this.$passwordInput, {\n                    onToggleInput: $.proxy(function($newPasswordInput) {\n                        this.$passwordInput = $newPasswordInput;\n                    }, this)\n                });\n\n                this.addListener(this.$passwordInput, 'input', 'validatePassword');\n                this.addListener($form, 'submit', 'login');\n            }\n\n            if (quickShow) {\n                this.loginModal.quickShow();\n            }\n            else {\n                this.loginModal.show();\n            }\n        },\n\n        /**\n         * Hides the login modal.\n         */\n        hideLoginModal: function(quick) {\n            this.showingLoginModal = false;\n\n            if (this.loginModal) {\n                if (quick) {\n                    this.loginModal.quickHide();\n                }\n                else {\n                    this.loginModal.hide();\n                }\n            }\n        },\n\n        logout: function() {\n            $.get({\n                url: Craft.getActionUrl('users/logout'),\n                dataType: 'json',\n                success: $.proxy(function() {\n                    Craft.redirectTo('');\n                }, this)\n            });\n        },\n\n        renewSession: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            this.hideLogoutWarningModal();\n            this.checkRemainingSessionTime(true);\n        },\n\n        validatePassword: function() {\n            if (this.$passwordInput.val().length >= 6) {\n                this.$loginBtn.removeClass('disabled');\n                return true;\n            }\n            else {\n                this.$loginBtn.addClass('disabled');\n                return false;\n            }\n        },\n\n        login: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (this.validatePassword()) {\n                this.$passwordSpinner.removeClass('hidden');\n                this.clearLoginError();\n\n                if (typeof Craft.csrfTokenValue !== 'undefined') {\n                    // Check the auth status one last time before sending this off,\n                    // in case the user has already logged back in from another window/tab\n                    this.submitLoginIfLoggedOut = true;\n                    this.checkRemainingSessionTime();\n                }\n                else {\n                    this.submitLogin();\n                }\n            }\n        },\n\n        submitLogin: function() {\n            var data = {\n                loginName: Craft.username,\n                password: this.$passwordInput.val()\n            };\n\n            Craft.postActionRequest('users/login', data, $.proxy(function(response, textStatus) {\n                this.$passwordSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.hideLoginModal();\n                        this.checkRemainingSessionTime();\n                    }\n                    else {\n                        this.showLoginError(response.error);\n                        Garnish.shake(this.loginModal.$container);\n\n                        if (!Garnish.isMobileBrowser(true)) {\n                            this.$passwordInput.trigger('focus');\n                        }\n                    }\n                }\n                else {\n                    this.showLoginError();\n                }\n            }, this));\n        },\n\n        showLoginError: function(error) {\n            if (error === null || typeof error === 'undefined') {\n                error = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.$loginErrorPara.text(error);\n            this.loginModal.updateSizeAndPosition();\n        },\n\n        clearLoginError: function() {\n            this.showLoginError('');\n        }\n    },\n    {\n        checkInterval: 60,\n        minSafeSessionTime: 120\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend(\n    {\n        authManager: null,\n\n        $nav: null,\n        $mainContainer: null,\n        $alerts: null,\n        $crumbs: null,\n        $notificationContainer: null,\n        $main: null,\n        $primaryForm: null,\n        $headerContainer: null,\n        $header: null,\n        $mainContent: null,\n        $details: null,\n        $tabsContainer: null,\n        $tabsList: null,\n        $tabs: null,\n        $overflowTabBtn: null,\n        $overflowTabList: null,\n        $selectedTab: null,\n        selectedTabIndex: null,\n        $sidebarContainer: null,\n        $sidebar: null,\n        $contentContainer: null,\n        $edition: null,\n\n        $confirmUnloadForms: null,\n        $deltaForms: null,\n        $collapsibleTables: null,\n\n        fixedHeader: false,\n\n        enableQueue: true,\n        totalJobs: 0,\n        jobInfo: null,\n        displayedJobInfo: null,\n        displayedJobInfoUnchanged: 1,\n        trackJobProgressTimeout: null,\n        jobProgressIcon: null,\n\n        checkingForUpdates: false,\n        forcingRefreshOnUpdatesCheck: false,\n        includingDetailsOnUpdatesCheck: false,\n        checkForUpdatesCallbacks: null,\n\n        init: function() {\n            // Is this session going to expire?\n            if (Craft.remainingSessionTime !== 0) {\n                this.authManager = new Craft.AuthManager();\n            }\n\n            // Find all the key elements\n            this.$nav = $('#nav');\n            this.$mainContainer = $('#main-container');\n            this.$alerts = $('#alerts');\n            this.$crumbs = $('#crumbs');\n            this.$notificationContainer = $('#notifications');\n            this.$main = $('#main');\n            this.$primaryForm = $('#main-form');\n            this.$headerContainer = $('#header-container');\n            this.$header = $('#header');\n            this.$mainContent = $('#main-content');\n            this.$details = $('#details');\n            this.$sidebarContainer = $('#sidebar-container');\n            this.$sidebar = $('#sidebar');\n            this.$contentContainer = $('#content-container');\n            this.$collapsibleTables = $('table.collapsible');\n\n            this.updateSidebarMenuLabel();\n\n            // Swap any instruction text with info icons\n            let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n            for (let i = 0; i < $allInstructions.length; i++) {\n                let $instructions = $allInstructions.eq(i);\n                let $label = $instructions.siblings('.heading').children('label');\n                $('<span/>', {\n                    'class': 'info',\n                    'html': $instructions.children().html()\n                }).appendTo($label);\n                $instructions.remove();\n            }\n\n            if (this.$header.length) {\n                this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n                this.updateFixedHeader();\n            }\n\n            Garnish.$doc.ready($.proxy(function() {\n                // Update responsive tables on window resize\n                this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n                this.handleWindowResize();\n\n                // Fade the notification out two seconds after page load\n                var $errorNotifications = this.$notificationContainer.children('.error'),\n                    $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n                $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n                $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n                // Wait a frame before initializing any confirm-unload forms,\n                // so other JS that runs on ready() has a chance to initialize\n                Garnish.requestAnimationFrame($.proxy(this, 'initSpecialForms'));\n            }, this));\n\n            // Alerts\n            if (this.$alerts.length) {\n                this.initAlerts();\n            }\n\n            // Toggles\n            this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n            this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n            // Does this page have a primary form?\n            if (!this.$primaryForm.length) {\n                this.$primaryForm = $('form[data-saveshortcut]:first');\n            }\n\n            // Does the primary form support the save shortcut?\n            if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n                let shortcuts = [];\n                let actions = this.$primaryForm.data('actions');\n                if (typeof actions === 'undefined') {\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                        },\n                        {\n                            redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                            retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                        }\n                    ]);\n                } else {\n                    for (let i = 0; i < actions.length; i++) {\n                        let action = actions[i];\n                        if (!action.shortcut) {\n                            continue;\n                        }\n                        shortcuts.push([\n                            {\n                                keyCode: Garnish.S_KEY,\n                                ctrl: true,\n                                shift: !!action.shift,\n                            },\n                            {\n                                action: action.action,\n                                redirect: action.redirect,\n                                confirm: action.confirm,\n                                params: action.params,\n                                data: action.data,\n                                retainScroll: action.retainScroll,\n                            }\n                        ]);\n                    }\n                }\n                for (let i = 0; i < shortcuts.length; i++) {\n                    Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                        this.submitPrimaryForm(shortcuts[i][1]);\n                    });\n                }\n            }\n\n            this.initTabs();\n\n            // Should we match the previous scroll position?\n            let scrollY = Craft.getLocalStorage('scrollY');\n            if (typeof scrollY !== 'undefined') {\n                Craft.removeLocalStorage('scrollY');\n                Garnish.$doc.ready(() => {\n                    Garnish.requestAnimationFrame(() => {\n                        window.scrollTo(0, scrollY);\n                    });\n                });\n            }\n\n            if ($.isTouchCapable()) {\n                this.$mainContainer.on('focus', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputFocus'));\n                this.$mainContainer.on('blur', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputBlur'));\n            }\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a').each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        initSpecialForms: function() {\n            // Look for forms that we should watch for changes on\n            this.$confirmUnloadForms = $('form[data-confirm-unload]');\n            this.$deltaForms = $('form[data-delta]');\n\n            if (!this.$confirmUnloadForms.length) {\n                return;\n            }\n\n            var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n            var $form, serialized;\n\n            for (var i = 0; i < $forms.length; i++) {\n                $form = $forms.eq(i);\n                if (!$form.data('initialSerializedValue')) {\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    $form.data('initialSerializedValue', serialized);\n                }\n                this.addListener($form, 'submit', function(ev) {\n                    if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                        this.removeListener(Garnish.$win, 'beforeunload');\n                    }\n                    if (Garnish.hasAttr($form, 'data-delta')) {\n                        ev.preventDefault();\n                        var serialized;\n                        if (typeof $form.data('serializer') === 'function') {\n                            serialized = $form.data('serializer')();\n                        } else {\n                            serialized = $form.serialize();\n                        }\n                        var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                        Craft.createForm(data)\n                            .appendTo(Garnish.$bod)\n                            .submit();\n                    }\n                });\n            }\n\n            this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n                var confirmUnload = false;\n                var $form, serialized;\n                if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                    confirmUnload = true;\n                } else {\n                    for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                        $form = this.$confirmUnloadForms.eq(i);\n                        if (typeof $form.data('serializer') === 'function') {\n                            serialized = $form.data('serializer')();\n                        } else {\n                            serialized = $form.serialize();\n                        }\n                        if ($form.data('initialSerializedValue') !== serialized) {\n                            confirmUnload = true;\n                            break;\n                        }\n                    }\n                }\n\n                if (confirmUnload) {\n                    var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                    if (ev) {\n                        ev.originalEvent.returnValue = message;\n                    }\n                    else {\n                        window.event.returnValue = message;\n                    }\n\n                    return message;\n                }\n            });\n        },\n\n        _handleInputFocus: function() {\n            this.updateFixedHeader();\n        },\n\n        _handleInputBlur: function() {\n            this.updateFixedHeader();\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitPrimaryForm: function(options) {\n            // Give other stuff on the page a chance to prepare\n            this.trigger('beforeSaveShortcut');\n\n            if (typeof options !== 'object' || !$.isPlainObject(options)) {\n                options = {};\n            }\n\n            if (!options.redirect) {\n                options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n            }\n\n            if (!options.data) {\n                options.data = {};\n            }\n            options.data.saveShortcut = true;\n\n            Craft.submitForm(this.$primaryForm, options);\n        },\n\n        updateSidebarMenuLabel: function() {\n            var $item = this.$sidebar.find('a.sel:first');\n            var $label = $item.children('.label');\n            $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n            Garnish.$bod.removeClass('showing-sidebar');\n        },\n\n        toggleNav: function() {\n            Garnish.$bod.toggleClass('showing-nav');\n        },\n\n        toggleSidebar: function() {\n            Garnish.$bod.toggleClass('showing-sidebar');\n        },\n\n        initTabs: function() {\n            // Clear out all our old info in case the tabs were just replaced\n            this.$tabsList = this.$tabs = this.$overflowTabBtn = this.$overflowTabList = this.$selectedTab =\n                this.selectedTabIndex = null;\n\n            this.$tabsContainer = $('#tabs');\n            if (!this.$tabsContainer.length) {\n                this.$tabsContainer = null;\n                return;\n            }\n\n            this.$tabsList = this.$tabsContainer.find('> ul');\n            this.$tabs = this.$tabsList.find('> li');\n            this.$overflowTabBtn = $('#overflow-tab-btn');\n            if (!this.$overflowTabBtn.data('menubtn')) {\n                new Garnish.MenuBtn(this.$overflowTabBtn);\n            }\n            this.$overflowTabList = this.$overflowTabBtn.data('menubtn').menu.$container.find('> ul');\n            var i, $tab, $a, href;\n\n            for (i = 0; i < this.$tabs.length; i++) {\n                $tab = this.$tabs.eq(i);\n\n                // Does it link to an anchor?\n                $a = $tab.children('a');\n                href = $a.attr('href');\n                if (href && href.charAt(0) === '#') {\n                    this.addListener($a, 'click', function(ev) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    });\n\n                    if (encodeURIComponent(href.substr(1)) === document.location.hash.substr(1)) {\n                        this.selectTab($a);\n                    }\n                }\n\n                if (!this.$selectedTab && $a.hasClass('sel')) {\n                    this._selectTab($a, i);\n                }\n            }\n        },\n\n        selectTab: function(tab) {\n            var $tab = $(tab);\n\n            if (this.$selectedTab) {\n                if (this.$selectedTab.get(0) === $tab.get(0)) {\n                    return;\n                }\n                this.deselectTab();\n            }\n\n            $tab.addClass('sel');\n            var href = $tab.attr('href')\n            $(href).removeClass('hidden');\n            if (typeof history !== 'undefined') {\n                history.replaceState(undefined, undefined, href);\n            }\n            this._selectTab($tab, this.$tabs.index($tab.parent()));\n            this.updateTabs();\n            this.$overflowTabBtn.data('menubtn').menu.hide();\n        },\n\n        _selectTab: function($tab, index) {\n            if ($tab === this.$selectedTab) {\n                return;\n            }\n\n            this.$selectedTab = $tab;\n            this.selectedTabIndex = index;\n            if (index === 0) {\n                $('#content').addClass('square');\n            } else {\n                $('#content').removeClass('square');\n            }\n\n            Garnish.$win.trigger('resize');\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n\n            // If there is a revision menu, set its links to this tab ID\n            let href = $tab && $tab.attr('href');\n            if (href && href.charAt(0) === '#') {\n                let menubtn = $('#context-btn').menubtn().data('menubtn');\n                if (menubtn) {\n                    for (let i = 0; i < menubtn.menu.$options.length; i++) {\n                        let a = menubtn.menu.$options[i];\n                        if (a.href) {\n                            a.href = a.href.match(/^[^#]*/)[0] + href;\n                        }\n                    }\n                }\n            }\n        },\n\n        deselectTab: function() {\n            if (!this.$selectedTab) {\n                return;\n            }\n\n            this.$selectedTab.removeClass('sel');\n            if (this.$selectedTab.attr('href').charAt(0) === '#') {\n                $(this.$selectedTab.attr('href')).addClass('hidden');\n            }\n            this._selectTab(null, null);\n        },\n\n        handleWindowResize: function() {\n            this.updateTabs();\n            this.updateResponsiveTables();\n        },\n\n        updateTabs: function() {\n            if (!this.$tabsContainer) {\n                return;\n            }\n\n            var maxWidth = Math.floor(this.$tabsContainer.width()) - 40;\n            var totalWidth = 0;\n            var showOverflowMenu = false;\n            var tabMargin = Garnish.$bod.width() >= 768 ? -12 : -7;\n            var $tab;\n\n            // Start with the selected tab, because that needs to be visible\n            if (this.$selectedTab) {\n                this.$selectedTab.parent('li').appendTo(this.$tabsList);\n                totalWidth = Math.ceil(this.$selectedTab.parent('li').width());\n            }\n\n            for (var i = 0; i < this.$tabs.length; i++) {\n                $tab = this.$tabs.eq(i).appendTo(this.$tabsList);\n                if (i !== this.selectedTabIndex) {\n                    totalWidth += Math.ceil($tab.width());\n                    // account for the negative margin\n                    if (i !== 0 || this.$selectedTab) {\n                        totalWidth += tabMargin;\n                    }\n                }\n\n                if (i === this.selectedTabIndex || totalWidth <= maxWidth) {\n                    $tab.find('> a').removeAttr('role');\n                } else {\n                    $tab.appendTo(this.$overflowTabList).find('> a').attr('role', 'option');\n                    showOverflowMenu = true;\n                }\n            }\n\n            if (showOverflowMenu) {\n                this.$overflowTabBtn.removeClass('hidden');\n            } else {\n                this.$overflowTabBtn.addClass('hidden');\n            }\n        },\n\n        updateResponsiveTables: function() {\n            for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n                this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n                this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n                this.updateResponsiveTables._check = false;\n\n                if (this.updateResponsiveTables._containerWidth > 0) {\n                    // Is this the first time we've checked this table?\n                    if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                        this.updateResponsiveTables._check = true;\n                    }\n                    else {\n                        this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                        // Getting wider?\n                        if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                            if (this.updateResponsiveTables._isCollapsed) {\n                                this.updateResponsiveTables._$table.removeClass('collapsed');\n                                this.updateResponsiveTables._check = true;\n                            }\n                        }\n                        else if (!this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._check = true;\n                        }\n                    }\n\n                    // Are we checking the table width?\n                    if (this.updateResponsiveTables._check) {\n                        if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                            this.updateResponsiveTables._$table.addClass('collapsed');\n                        }\n                    }\n\n                    // Remember the container width for next time\n                    this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n                }\n            }\n        },\n\n        updateFixedHeader: function() {\n            // Have we scrolled passed the top of #main?\n            if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n                if (!this.fixedHeader) {\n                    var headerHeight = this.$headerContainer.height();\n\n                    // Hard-set the minimum content container height\n                    this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                    // Hard-set the header container height\n                    this.$headerContainer.height(headerHeight);\n                    Garnish.$bod.addClass('fixed-header');\n\n                    // Fix the sidebar and details pane positions if they are taller than #content-container\n                    var contentHeight = this.$contentContainer.outerHeight();\n                    var $detailsHeight = this.$details.outerHeight();\n                    var css = {\n                        top: headerHeight + 'px',\n                        'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                    };\n                    this.$sidebar.addClass('fixed').css(css);\n                    this.$details.addClass('fixed').css(css);\n                    this.fixedHeader = true;\n                }\n            }\n            else if (this.fixedHeader) {\n                this.$headerContainer.height('auto');\n                Garnish.$bod.removeClass('fixed-header');\n                this.$contentContainer.css('min-height', '');\n                this.$sidebar.removeClass('fixed').css({\n                    top: '',\n                    'max-height': ''\n                });\n                this.$details.removeClass('fixed').css({\n                    top: '',\n                    'max-height': ''\n                });\n                this.fixedHeader = false;\n            }\n        },\n\n        /**\n         * Dispays a notification.\n         *\n         * @param {string} type\n         * @param {string} message\n         */\n        displayNotification: function(type, message) {\n            var notificationDuration = Craft.CP.notificationDuration;\n\n            if (type === 'error') {\n                notificationDuration *= 2;\n            }\n\n            var $notification = $('<div class=\"notification ' + type + '\">' + message + '</div>')\n                .appendTo(this.$notificationContainer);\n\n            var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n            $notification\n                .hide()\n                .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n                .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n                .delay(notificationDuration)\n                .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                    complete: function() {\n                        $notification.remove();\n                    }\n                });\n\n            this.trigger('displayNotification', {\n                notificationType: type,\n                message: message\n            });\n        },\n\n        /**\n         * Displays a notice.\n         *\n         * @param {string} message\n         */\n        displayNotice: function(message) {\n            this.displayNotification('notice', message);\n        },\n\n        /**\n         * Displays an error.\n         *\n         * @param {string} message\n         */\n        displayError: function(message) {\n            if (!message) {\n                message = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.displayNotification('error', message);\n        },\n\n        fetchAlerts: function() {\n            var data = {\n                path: Craft.path\n            };\n\n            Craft.queueActionRequest('app/get-cp-alerts', data, $.proxy(this, 'displayAlerts'));\n        },\n\n        displayAlerts: function(alerts) {\n            this.$alerts.remove();\n\n            if (Garnish.isArray(alerts) && alerts.length) {\n                this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n                for (var i = 0; i < alerts.length; i++) {\n                    $('<li>' + alerts[i] + '</li>').appendTo(this.$alerts);\n                }\n\n                var height = this.$alerts.outerHeight();\n                this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n                this.initAlerts();\n            }\n        },\n\n        initAlerts: function() {\n            // Are there any shunnable alerts?\n            var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n            for (var i = 0; i < $shunnableAlerts.length; i++) {\n                this.addListener($shunnableAlerts[i], 'click', $.proxy(function(ev) {\n                    ev.preventDefault();\n\n                    var $link = $(ev.currentTarget);\n\n                    var data = {\n                        message: $link.prop('className').substr(5)\n                    };\n\n                    Craft.queueActionRequest('app/shun-cp-alert', data, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            if (response.success) {\n                                $link.parent().remove();\n                            }\n                            else {\n                                this.displayError(response.error);\n                            }\n                        }\n                    }, this));\n                }, this));\n            }\n        },\n\n        checkForUpdates: function(forceRefresh, includeDetails, callback) {\n            // Make 'includeDetails' optional\n            if (typeof includeDetails === 'function') {\n                callback = includeDetails;\n                includeDetails = false;\n            }\n\n            // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n            // then just set a new callback that re-checks for updates when the current one is done.\n            if (this.checkingForUpdates && (\n                (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n                (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n            )) {\n                var realCallback = callback;\n\n                callback = function() {\n                    this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n                }.bind(this);\n            }\n\n            // Callback function?\n            if (typeof callback === 'function') {\n                if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                    this.checkForUpdatesCallbacks = [];\n                }\n\n                this.checkForUpdatesCallbacks.push(callback);\n            }\n\n            if (!this.checkingForUpdates) {\n                this.checkingForUpdates = true;\n                this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n                this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n                this._checkForUpdates(forceRefresh, includeDetails)\n                    .then(function(info) {\n                        this.updateUtilitiesBadge();\n                        this.checkingForUpdates = false;\n\n                        if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                            var callbacks = this.checkForUpdatesCallbacks;\n                            this.checkForUpdatesCallbacks = null;\n\n                            for (var i = 0; i < callbacks.length; i++) {\n                                callbacks[i](info);\n                            }\n                        }\n\n                        this.trigger('checkForUpdates', {\n                            updateInfo: info\n                        });\n                    }.bind(this));\n            }\n        },\n\n        _checkForUpdates: function(forceRefresh, includeDetails) {\n            return new Promise(function(resolve, reject) {\n                if (!forceRefresh) {\n                    this._checkForCachedUpdates(includeDetails)\n                        .then(function(info) {\n                            if (info.cached !== false) {\n                                resolve(info);\n                            }\n\n                            this._getUpdates(includeDetails)\n                                .then(function(info) {\n                                    resolve(info);\n                                });\n                        }.bind(this));\n                } else {\n                    this._getUpdates(includeDetails)\n                        .then(function(info) {\n                            resolve(info);\n                        });\n                }\n            }.bind(this));\n        },\n\n        _checkForCachedUpdates: function(includeDetails) {\n            return new Promise(function(resolve, reject) {\n                var data = {\n                    onlyIfCached: true,\n                    includeDetails: includeDetails,\n                };\n                Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                    if (textStatus === 'success') {\n                        resolve(info);\n                    } else {\n                        resolve({ cached: false });\n                    }\n                });\n            });\n        },\n\n        _getUpdates: function(includeDetails) {\n            return new Promise(function(resolve, reject) {\n                Craft.sendApiRequest('GET', 'updates')\n                    .then(function(updates) {\n                        this._cacheUpdates(updates, includeDetails).then(resolve);\n                    }.bind(this))\n                    .catch(function(e) {\n                        this._cacheUpdates({}).then(resolve);\n                    }.bind(this));\n            }.bind(this));\n        },\n\n        _cacheUpdates: function(updates, includeDetails) {\n            return new Promise(function(resolve, reject) {\n                Craft.postActionRequest('app/cache-updates', {\n                    updates: updates,\n                    includeDetails: includeDetails,\n                }, function(info, textStatus) {\n                    if (textStatus === 'success') {\n                        resolve(info);\n                    } else {\n                        reject();\n                    }\n                }, {\n                    contentType: 'json'\n                });\n            });\n        },\n\n        updateUtilitiesBadge: function() {\n            var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n            // Ignore if there is no (non-selected) Utilities nav item\n            if (!$utilitiesLink.length) {\n                return;\n            }\n\n            Craft.queueActionRequest('app/get-utilities-badge-count', $.proxy(function(response) {\n                // Get the existing utility nav badge, if any\n                var $badge = $utilitiesLink.children('.badge');\n\n                if (response.badgeCount) {\n                    if (!$badge.length) {\n                        $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                    }\n                    $badge.text(response.badgeCount);\n                } else if ($badge.length) {\n                    $badge.remove();\n                }\n            }, this));\n        },\n\n        runQueue: function() {\n            if (!this.enableQueue) {\n                return;\n            }\n\n            if (Craft.runQueueAutomatically) {\n                Craft.queueActionRequest('queue/run', $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.trackJobProgress(false, true);\n                    }\n                }, this));\n            }\n            else {\n                this.trackJobProgress(false, true);\n            }\n        },\n\n        trackJobProgress: function(delay, force) {\n            if (force && this.trackJobProgressTimeout) {\n                clearTimeout(this.trackJobProgressTimeout);\n                this.trackJobProgressTimeout = null;\n            }\n\n            // Ignore if we're already tracking jobs, or the queue is disabled\n            if (this.trackJobProgressTimeout || !this.enableQueue) {\n                return;\n            }\n\n            if (delay === true) {\n                // Determine the delay based on how long the displayed job info has remained unchanged\n                var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n                this.trackJobProgressTimeout = setTimeout($.proxy(this, '_trackJobProgressInternal'), timeout);\n            } else {\n                this._trackJobProgressInternal();\n            }\n        },\n\n        _trackJobProgressInternal: function() {\n            Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.trackJobProgressTimeout = null;\n                    this.totalJobs = response.total;\n                    this.setJobInfo(response.jobs);\n\n                    if (this.jobInfo.length) {\n                        // Check again after a delay\n                        this.trackJobProgress(true);\n                    }\n                }\n            }, this));\n        },\n\n        setJobInfo: function(jobInfo) {\n            if (!this.enableQueue) {\n                return;\n            }\n\n            this.jobInfo = jobInfo;\n\n            // Update the displayed job info\n            var oldInfo = this.displayedJobInfo;\n            this.displayedJobInfo = this.getDisplayedJobInfo();\n\n            // Same old same old?\n            if (\n                oldInfo &&\n                this.displayedJobInfo &&\n                oldInfo.id === this.displayedJobInfo.id &&\n                oldInfo.progress === this.displayedJobInfo.progress &&\n                oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n                oldInfo.status === this.displayedJobInfo.status\n            ) {\n                this.displayedJobInfoUnchanged++;\n            } else {\n                // Reset the counter\n                this.displayedJobInfoUnchanged = 1;\n            }\n\n            this.updateJobIcon();\n\n            // Fire a setJobInfo event\n            this.trigger('setJobInfo');\n        },\n\n        /**\n         * Returns info for the job that should be displayed in the CP sidebar\n         */\n        getDisplayedJobInfo: function() {\n            if (!this.enableQueue) {\n                return null;\n            }\n\n            // Set the status preference order\n            var statuses = [\n                Craft.CP.JOB_STATUS_RESERVED,\n                Craft.CP.JOB_STATUS_FAILED,\n                Craft.CP.JOB_STATUS_WAITING\n            ];\n\n            for (var i = 0; i < statuses.length; i++) {\n                for (var j = 0; j < this.jobInfo.length; j++) {\n                    if (this.jobInfo[j].status === statuses[i]) {\n                        return this.jobInfo[j];\n                    }\n                }\n            }\n        },\n\n        updateJobIcon: function() {\n            if (!this.enableQueue || !this.$nav.length) {\n                return;\n            }\n\n            if (this.displayedJobInfo) {\n                if (!this.jobProgressIcon) {\n                    this.jobProgressIcon = new JobProgressIcon();\n                }\n\n                if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                    this.jobProgressIcon.hideFailMode();\n                    this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                    this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n                }\n                else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                    this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n                }\n            }\n            else {\n                if (this.jobProgressIcon) {\n                    this.jobProgressIcon.hideFailMode();\n                    this.jobProgressIcon.complete();\n                    delete this.jobProgressIcon;\n                }\n            }\n        },\n\n        /**\n         * Returns the active site for the control panel\n         *\n         * @return {number}\n         */\n        getSiteId: function() {\n            // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n            let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n            if (typeof siteId !== 'undefined') {\n                Craft.removeLocalStorage('BaseElementIndex.siteId');\n                this.setSiteId(siteId);\n                return siteId;\n            }\n            return Craft.getCookie('siteId');\n        },\n\n        /**\n         * Sets the active site for the control panel\n         * @param {number} siteId\n         */\n        setSiteId: function(siteId) {\n            Craft.setCookie('siteId', siteId, {\n                maxAge: 31536000 // 1 year\n            });\n        }\n    },\n    {\n        //maxWidth: 1051, //1024,\n        notificationDuration: 2000,\n\n        JOB_STATUS_WAITING: 1,\n        JOB_STATUS_RESERVED: 2,\n        JOB_STATUS_DONE: 3,\n        JOB_STATUS_FAILED: 4\n    });\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend(\n    {\n        $li: null,\n        $a: null,\n        $label: null,\n        $progressLabel: null,\n\n        progress: null,\n        failMode: false,\n\n        _$bgCanvas: null,\n        _$staticCanvas: null,\n        _$hoverCanvas: null,\n        _$failCanvas: null,\n\n        _staticCtx: null,\n        _hoverCtx: null,\n        _canvasSize: null,\n        _arcPos: null,\n        _arcRadius: null,\n        _lineWidth: null,\n\n        _arcStartPos: 0,\n        _arcEndPos: 0,\n        _arcStartStepSize: null,\n        _arcEndStepSize: null,\n        _arcStep: null,\n        _arcStepTimeout: null,\n        _arcAnimateCallback: null,\n\n        _progressBar: null,\n\n        init: function() {\n            this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n            this.$a = $('<a/>', {\n                id: 'job-icon',\n                href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n            }).appendTo(this.$li);\n            this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n            var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n            this.$label = $('<span/>').appendTo($labelContainer);\n            this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n            let m = (window.devicePixelRatio > 1 ? 2 : 1);\n            this._canvasSize = 18 * m;\n            this._arcPos = this._canvasSize / 2;\n            this._arcRadius = 7 * m;\n            this._lineWidth = 3 * m;\n\n            this._$bgCanvas = this._createCanvas('bg', '#61666b');\n            this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n            this._$hoverCanvas = this._createCanvas('hover', '#fff');\n            this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n            this._staticCtx = this._$staticCanvas[0].getContext('2d');\n            this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n            this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n            this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n        },\n\n        setDescription: function(description, progressLabel) {\n            this.$a.attr('title', description);\n            this.$label.text(description);\n            if (progressLabel) {\n                this.$progressLabel.text(progressLabel).show();\n            } else {\n                this.$progressLabel.hide();\n            }\n        },\n\n        setProgress: function(progress) {\n            if (progress == 0) {\n                this._$staticCanvas.hide();\n                this._$hoverCanvas.hide();\n            } else {\n                this._$staticCanvas.show();\n                this._$hoverCanvas.show();\n                if (this.progress && progress > this.progress) {\n                    this._animateArc(0, progress / 100);\n                }\n                else {\n                    this._setArc(0, progress / 100);\n                }\n            }\n\n            this.progress = progress;\n        },\n\n        complete: function() {\n            this._animateArc(0, 1, $.proxy(function() {\n                this._$bgCanvas.velocity('fadeOut');\n\n                this._animateArc(1, 1, $.proxy(function() {\n                    this.$a.remove();\n                    this.destroy();\n                }, this));\n            }, this));\n        },\n\n        showFailMode: function(message) {\n            if (this.failMode) {\n                return;\n            }\n\n            this.failMode = true;\n            this.progress = null;\n\n            this._$bgCanvas.hide();\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n            this._$failCanvas.show();\n\n            this.setDescription(message);\n        },\n\n        hideFailMode: function() {\n            if (!this.failMode) {\n                return;\n            }\n\n            this.failMode = false;\n\n            this._$bgCanvas.show();\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            this._$failCanvas.hide();\n        },\n\n        _createCanvas: function(id, color) {\n            var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n                ctx = $canvas[0].getContext('2d');\n\n            ctx.strokeStyle = color;\n            ctx.lineWidth = this._lineWidth;\n            ctx.lineCap = 'round';\n            return $canvas;\n        },\n\n        _setArc: function(startPos, endPos) {\n            this._arcStartPos = startPos;\n            this._arcEndPos = endPos;\n\n            this._drawArc(this._staticCtx, startPos, endPos);\n            this._drawArc(this._hoverCtx, startPos, endPos);\n        },\n\n        _drawArc: function(ctx, startPos, endPos) {\n            ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n            ctx.beginPath();\n            ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n            ctx.stroke();\n            ctx.closePath();\n        },\n\n        _animateArc: function(targetStartPos, targetEndPos, callback) {\n            if (this._arcStepTimeout) {\n                clearTimeout(this._arcStepTimeout);\n            }\n\n            this._arcStep = 0;\n            this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n            this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n            this._arcAnimateCallback = callback;\n            this._takeNextArcStep();\n        },\n\n        _takeNextArcStep: function() {\n            this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n            this._arcStep++;\n\n            if (this._arcStep < 10) {\n                this._arcStepTimeout = setTimeout($.proxy(this, '_takeNextArcStep'), 50);\n            }\n            else if (this._arcAnimateCallback) {\n                this._arcAnimateCallback();\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend(\n    {\n        editableGroups: null,\n        $newCategoryBtnGroup: null,\n        $newCategoryBtn: null,\n\n        init: function(elementType, $container, settings) {\n            this.on('selectSource', $.proxy(this, 'updateButton'));\n            this.on('selectSite', $.proxy(this, 'updateButton'));\n            this.base(elementType, $container, settings);\n        },\n\n        afterInit: function() {\n            // Find which of the visible groups the user has permission to create new categories in\n            this.editableGroups = [];\n\n            for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n                var group = Craft.editableCategoryGroups[i];\n\n                if (this.getSourceByKey('group:' + group.uid)) {\n                    this.editableGroups.push(group);\n                }\n            }\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific category group in the URL?\n            if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultGroupHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        updateButton: function() {\n            if (!this.$source) {\n                return;\n            }\n\n            // Get the handle of the selected source\n            var selectedSourceHandle = this.$source.data('handle');\n\n            var i, href, label;\n\n            // Update the New Category button\n            // ---------------------------------------------------------------------\n\n            if (this.editableGroups.length) {\n                // Remove the old button, if there is one\n                if (this.$newCategoryBtnGroup) {\n                    this.$newCategoryBtnGroup.remove();\n                }\n\n                // Determine if they are viewing a group that they have permission to create categories in\n                var selectedGroup;\n\n                if (selectedSourceHandle) {\n                    for (i = 0; i < this.editableGroups.length; i++) {\n                        if (this.editableGroups[i].handle === selectedSourceHandle) {\n                            selectedGroup = this.editableGroups[i];\n                            break;\n                        }\n                    }\n                }\n\n                this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n                var $menuBtn;\n\n                // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n                // Otherwise only show a menu button\n                if (selectedGroup) {\n                    href = this._getGroupTriggerHref(selectedGroup);\n                    label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                    this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                    if (this.settings.context !== 'index') {\n                        this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                            this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                        });\n                    }\n\n                    if (this.editableGroups.length > 1) {\n                        $menuBtn = $('<button/>', {\n                            type: 'button',\n                            class: 'btn submit menubtn',\n                        }).appendTo(this.$newCategoryBtnGroup);\n                    }\n                }\n                else {\n                    this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit add icon menubtn',\n                        text: Craft.t('app', 'New category'),\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n\n                if ($menuBtn) {\n                    var menuHtml = '<div class=\"menu\"><ul>';\n\n                    for (i = 0; i < this.editableGroups.length; i++) {\n                        var group = this.editableGroups[i];\n\n                        if (this.settings.context === 'index' || group !== selectedGroup) {\n                            href = this._getGroupTriggerHref(group);\n                            label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                            menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                        }\n                    }\n\n                    menuHtml += '</ul></div>';\n\n                    $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                    var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                    if (this.settings.context !== 'index') {\n                        menuBtn.on('optionSelect', $.proxy(function(ev) {\n                            this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                        }, this));\n                    }\n                }\n\n                this.addButton(this.$newCategoryBtnGroup);\n            }\n\n            // Update the URL if we're on the Categories index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'categories';\n\n                if (selectedSourceHandle) {\n                    uri += '/' + selectedSourceHandle;\n                }\n\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n        },\n\n        _getGroupTriggerHref: function(group) {\n            if (this.settings.context === 'index') {\n                var uri = 'categories/' + group.handle + '/new';\n                if (this.siteId && this.siteId != Craft.primarySiteId) {\n                    for (var i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == this.siteId) {\n                            uri += '/'+Craft.sites[i].handle;\n                        }\n                    }\n                }\n                return 'href=\"' + Craft.getUrl(uri) + '\"';\n            }\n            else {\n                return 'data-id=\"' + group.id + '\"';\n            }\n        },\n\n        _openCreateCategoryModal: function(groupId) {\n            if (this.$newCategoryBtn.hasClass('loading')) {\n                return;\n            }\n\n            // Find the group\n            var group;\n\n            for (var i = 0; i < this.editableGroups.length; i++) {\n                if (this.editableGroups[i].id == groupId) {\n                    group = this.editableGroups[i];\n                    break;\n                }\n            }\n\n            if (!group) {\n                return;\n            }\n\n            this.$newCategoryBtn.addClass('inactive');\n            var newCategoryBtnText = this.$newCategoryBtn.text();\n            this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n            Craft.createElementEditor(this.elementType, {\n                hudTrigger: this.$newCategoryBtnGroup,\n                siteId: this.siteId,\n                attributes: {\n                    groupId: groupId\n                },\n                onBeginLoading: $.proxy(function() {\n                    this.$newCategoryBtn.addClass('loading');\n                }, this),\n                onEndLoading: $.proxy(function() {\n                    this.$newCategoryBtn.removeClass('loading');\n                }, this),\n                onHideHud: $.proxy(function() {\n                    this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n                }, this),\n                onSaveElement: $.proxy(function(response) {\n                    // Make sure the right group is selected\n                    var groupSourceKey = 'group:' + group.uid;\n\n                    if (this.sourceKey !== groupSourceKey) {\n                        this.selectSourceByKey(groupSourceKey);\n                    }\n\n                    this.selectElementAfterUpdate(response.id);\n                    this.updateElements();\n                }, this)\n            });\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        setSettings: function() {\n            this.base.apply(this, arguments);\n            this.settings.sortable = false;\n        },\n\n        getModalSettings: function() {\n            var settings = this.base();\n            settings.hideOnSelect = false;\n            return settings;\n        },\n\n        getElements: function() {\n            return this.$elementsContainer.find('.element');\n        },\n\n        onModalSelect: function(elements) {\n            // Disable the modal\n            this.modal.disable();\n            this.modal.disableCancelBtn();\n            this.modal.disableSelectBtn();\n            this.modal.showFooterSpinner();\n\n            // Get the new category HTML\n            var selectedCategoryIds = this.getSelectedElementIds();\n\n            for (var i = 0; i < elements.length; i++) {\n                selectedCategoryIds.push(elements[i].id);\n            }\n\n            var data = {\n                categoryIds: selectedCategoryIds,\n                siteId: elements[0].siteId,\n                id: this.settings.id,\n                name: this.settings.name,\n                branchLimit: this.settings.branchLimit,\n                selectionLabel: this.settings.selectionLabel\n            };\n\n            Craft.postActionRequest('elements/get-categories-input-html', data, $.proxy(function(response, textStatus) {\n                this.modal.enable();\n                this.modal.enableCancelBtn();\n                this.modal.enableSelectBtn();\n                this.modal.hideFooterSpinner();\n\n                if (textStatus === 'success') {\n                    var $newInput = $(response.html),\n                        $newElementsContainer = $newInput.children('.elements');\n\n                    this.$elementsContainer.replaceWith($newElementsContainer);\n                    this.$elementsContainer = $newElementsContainer;\n                    this.resetElements();\n\n                    var filteredElements = [];\n\n                    for (var i = 0; i < elements.length; i++) {\n                        var element = elements[i],\n                            $element = this.getElementById(element.id);\n\n                        if ($element) {\n                            this.animateElementIntoPlace(element.$element, $element);\n                            filteredElements.push(element);\n                        }\n                    }\n\n                    this.updateDisabledElementsInModal();\n                    this.modal.hide();\n                    this.onSelectElements(filteredElements);\n                }\n            }, this));\n        },\n\n        removeElement: function($element) {\n            // Find any descendants this category might have\n            var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n            // Remove our record of them all at once\n            this.removeElements($allCategories);\n\n            // Animate them away one at a time\n            for (var i = 0; i < $allCategories.length; i++) {\n                this._animateCategoryAway($allCategories, i);\n            }\n        },\n\n        _animateCategoryAway: function($allCategories, i) {\n            var callback;\n\n            // Is this the last one?\n            if (i === $allCategories.length - 1) {\n                callback = $.proxy(function() {\n                    var $li = $allCategories.first().parent().parent(),\n                        $ul = $li.parent();\n\n                    if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                        $li.remove();\n                    }\n                    else {\n                        $ul.remove();\n                    }\n                }, this);\n            }\n\n            var func = $.proxy(function() {\n                this.animateElementAway($allCategories.eq(i), callback);\n            }, this);\n\n            if (i === 0) {\n                func();\n            }\n            else {\n                setTimeout(func, 100 * i);\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend(\n    {\n        columns: null,\n        rows: null,\n\n        init: function(data) {\n            let columns = data.columns;\n            let rows = data.rows;\n\n            rows.forEach($.proxy(function(d) {\n                $.each(d, function(cellIndex) {\n                    var column = columns[cellIndex];\n\n                    var parseTime;\n\n                    switch (column.type) {\n                        case 'date':\n                            parseTime = d3.timeParse(\"%Y-%m-%d\");\n                            d[cellIndex] = parseTime(d[cellIndex]);\n                            break;\n\n                        case 'datetime':\n                            parseTime = d3.timeParse(\"%Y-%m-%d %H:00:00\");\n                            d[cellIndex] = parseTime(d[cellIndex]);\n                            break;\n\n                        case 'percent':\n                            d[cellIndex] = d[cellIndex] / 100;\n                            break;\n\n                        case 'number':\n                            d[cellIndex] = +d[cellIndex];\n                            break;\n\n                        default:\n                        // do nothing\n                    }\n                });\n            }, this));\n\n            this.columns = columns;\n            this.rows = rows;\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend(\n    {\n        $container: null,\n        $tip: null,\n\n        init: function($container) {\n            this.$container = $container;\n\n            this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n            this.hide();\n        },\n\n        setContent: function(html) {\n            this.$tip.html(html);\n        },\n\n        setPosition: function(position) {\n            this.$tip.css(\"left\", position.left + \"px\");\n            this.$tip.css(\"top\", position.top + \"px\");\n        },\n\n        show: function() {\n            this.$tip.css(\"display\", 'block');\n        },\n\n        hide: function() {\n            this.$tip.css(\"display\", 'none');\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend(\n    {\n        $container: null,\n        $chart: null,\n\n        chartBaseClass: 'cp-chart',\n        dataTable: null,\n\n        formatLocale: null,\n        timeFormatLocale: null,\n        orientation: null,\n\n        svg: null,\n        width: null,\n        height: null,\n\n        init: function(container, settings) {\n            this.$container = container;\n\n            this.setSettings(Craft.charts.BaseChart.defaults);\n            this.setSettings(settings);\n\n            var globalSettings = {\n                formats: window.d3Formats,\n                formatLocaleDefinition: window.d3FormatLocaleDefinition,\n                timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n            };\n\n            this.setSettings(globalSettings);\n\n            d3.select(window).on('resize', $.proxy(function() {\n                this.resize();\n            }, this));\n        },\n\n        setSettings: function(settings, defaults) {\n            var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n            this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n        },\n\n        draw: function(dataTable, settings) {\n            // Settings and chart attributes\n\n            this.setSettings(settings);\n\n            this.dataTable = dataTable;\n            this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n            this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n            this.orientation = this.settings.orientation;\n\n\n            // Set (or reset) the chart element\n\n            if (this.$chart) {\n                this.$chart.remove();\n            }\n\n            var className = this.chartBaseClass;\n\n            if (this.settings.chartClass) {\n                className += ' ' + this.settings.chartClass;\n            }\n\n            this.$chart = $('<div class=\"' + className + '\" />').appendTo(this.$container);\n        },\n\n        resize: function() {\n            this.draw(this.dataTable, this.settings);\n        },\n\n        onAfterDrawTicks: function() {\n            // White border for ticks' text\n            $('.tick', this.$chart).each(function(tickKey, tick) {\n                var $tickText = $('text', tick);\n\n                var $clone = $tickText.clone();\n                $clone.appendTo(tick);\n\n                $tickText.attr('stroke', '#ffffff');\n                $tickText.attr('stroke-width', 3);\n            });\n        }\n    },\n    {\n        defaults: {\n            formatLocaleDefinition: null,\n            timeFormatLocaleDefinition: null,\n            formats: {\n                numberFormat: ',.2f',\n                percentFormat: ',.2%',\n                currencyFormat: '$,.2f',\n                shortDateFormats: {\n                    day: \"%-m/%-d\",\n                    month: \"%-m/%y\",\n                    year: \"%Y\"\n                }\n            },\n            margin: {top: 0, right: 0, bottom: 0, left: 0},\n            chartClass: null,\n            colors: [\"#0594D1\", \"#DE3800\", \"#FF9A00\", \"#009802\", \"#9B009B\"]\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend(\n    {\n        tip: null,\n        drawingArea: null,\n\n        init: function(container, settings) {\n            this.base(container, Craft.charts.Area.defaults);\n\n            this.setSettings(settings);\n        },\n\n        draw: function(dataTable, settings) {\n            this.base(dataTable, settings);\n\n            if (this.tip) {\n                this.tip = null;\n            }\n\n            var margin = this.getChartMargin();\n\n            this.width = this.$chart.width() - margin.left - margin.right;\n            this.height = this.$chart.height() - margin.top - margin.bottom;\n\n\n            // Append SVG to chart element\n\n            var svg = {\n                width: this.width + (margin.left + margin.right),\n                height: this.height + (margin.top + margin.bottom),\n                translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n                translateY: margin.top\n            };\n\n            this.svg = d3.select(this.$chart.get(0)).append(\"svg\")\n                .attr(\"width\", svg.width)\n                .attr(\"height\", svg.height);\n\n            this.drawingArea = this.svg.append(\"g\")\n                .attr(\"transform\", \"translate(\" + svg.translateX + \",\" + svg.translateY + \")\");\n\n\n            // Draw elements\n\n            this.drawTicks();\n            this.drawAxes();\n            this.drawChart();\n            this.drawTipTriggers();\n        },\n\n        drawTicks: function() {\n            // Draw X ticks\n\n            var x = this.getX(true);\n            var xTicks = 3;\n            var xAxis = d3.axisBottom(x)\n                .tickFormat(this.getXFormatter())\n                .ticks(xTicks);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"x ticks-axis\")\n                .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                .call(xAxis);\n\n\n            // Draw Y ticks\n\n            var y = this.getY();\n            var yTicks = 2;\n            var yAxis;\n\n            if (this.orientation !== 'rtl') {\n                yAxis = d3.axisLeft(y)\n                    .tickFormat(this.getYFormatter())\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y ticks-axis\")\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y)\n                    .tickFormat(this.getYFormatter())\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y ticks-axis\")\n                    .attr(\"transform\", \"translate(\" + this.width + \",0)\")\n                    .call(yAxis);\n            }\n\n\n            // On after draw ticks\n\n            this.onAfterDrawTicks();\n        },\n\n        drawAxes: function() {\n            if (this.settings.xAxis.showAxis) {\n                var x = this.getX();\n                var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"x axis\")\n                    .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                    .call(xAxis);\n            }\n\n            if (this.settings.yAxis.showAxis) {\n                var y = this.getY();\n                var chartPadding = 0;\n                var yAxis;\n\n                if (this.orientation === 'rtl') {\n                    yAxis = d3.axisLeft(y).ticks(0);\n                    this.drawingArea.append(\"g\")\n                        .attr(\"class\", \"y axis\")\n                        .attr(\"transform\", \"translate(\" + (this.width - chartPadding) + \", 0)\")\n                        .call(yAxis);\n                } else {\n                    yAxis = d3.axisRight(y).ticks(0);\n                    this.drawingArea.append(\"g\")\n                        .attr(\"class\", \"y axis\")\n                        .attr(\"transform\", \"translate(\" + chartPadding + \", 0)\")\n                        .call(yAxis);\n                }\n            }\n        },\n\n        drawChart: function() {\n            var x = this.getX(true);\n            var y = this.getY();\n\n\n            // X & Y grid lines\n\n            if (this.settings.xAxis.gridlines) {\n                var xLineAxis = d3.axisBottom(x);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"x grid-line\")\n                    .attr(\"transform\", \"translate(0,\" + this.height + \")\")\n                    .call(xLineAxis\n                        .tickSize(-this.height, 0, 0)\n                        .tickFormat(\"\")\n                    );\n            }\n\n            var yTicks = 2;\n\n            if (this.settings.yAxis.gridlines) {\n                var yLineAxis = d3.axisLeft(y);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y grid-line\")\n                    .attr(\"transform\", \"translate(0 , 0)\")\n                    .call(yLineAxis\n                        .tickSize(-(this.width), 0)\n                        .tickFormat(\"\")\n                        .tickValues(this.getYTickValues())\n                        .ticks(yTicks)\n                    );\n            }\n\n            // Line\n\n            var line = d3.line()\n                .x(function(d) {\n                    return x(d[0]);\n                })\n                .y(function(d) {\n                    return y(d[1]);\n                });\n\n            this.drawingArea\n                .append(\"g\")\n                .attr(\"class\", \"chart-line\")\n                .append(\"path\")\n                .datum(this.dataTable.rows)\n                .style('fill', 'none')\n                .style('stroke', this.settings.colors[0])\n                .style('stroke-width', '3px')\n                .attr(\"d\", line);\n\n\n            // Area\n\n            var area = d3.area()\n                .x(function(d) {\n                    return x(d[0]);\n                })\n                .y0(this.height)\n                .y1(function(d) {\n                    return y(d[1]);\n                });\n\n            this.drawingArea\n                .append(\"g\")\n                .attr(\"class\", \"chart-area\")\n                .append(\"path\")\n                .datum(this.dataTable.rows)\n                .style('fill', this.settings.colors[0])\n                .style('fill-opacity', '0.3')\n                .attr(\"d\", area);\n\n\n            // Plots\n\n            if (this.settings.plots) {\n                this.drawingArea.append('g')\n                    .attr(\"class\", \"plots\")\n                    .selectAll(\"circle\")\n                    .data(this.dataTable.rows)\n                    .enter()\n                    .append(\"circle\")\n                    .style('fill', this.settings.colors[0])\n                    .attr(\"class\", $.proxy(function(d, index) {\n                        return 'plot plot-' + index;\n                    }, this))\n                    .attr(\"r\", 4)\n                    .attr(\"cx\", $.proxy(function(d) {\n                        return x(d[0]);\n                    }, this))\n                    .attr(\"cy\", $.proxy(function(d) {\n                        return y(d[1]);\n                    }, this));\n            }\n        },\n\n        drawTipTriggers: function() {\n            if (this.settings.tips) {\n                if (!this.tip) {\n                    this.tip = new Craft.charts.Tip(this.$chart);\n                }\n\n\n                // Define xAxisTickInterval\n\n                var chartMargin = this.getChartMargin();\n                var tickSizeOuter = 6;\n                var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n                var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n\n                // Tip trigger width\n\n                var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n\n                // Draw triggers\n\n                var x = this.getX(true);\n                var y = this.getY();\n\n                this.drawingArea.append('g')\n                    .attr(\"class\", \"tip-triggers\")\n                    .selectAll(\"rect\")\n                    .data(this.dataTable.rows)\n                    .enter().append(\"rect\")\n                    .attr(\"class\", \"tip-trigger\")\n                    .style('fill', 'transparent')\n                    .style('fill-opacity', '1')\n                    .attr(\"width\", tipTriggerWidth)\n                    .attr(\"height\", this.height)\n                    .attr(\"x\", $.proxy(function(d) {\n                        return x(d[0]) - tipTriggerWidth / 2;\n                    }, this))\n                    .on(\"mouseover\", $.proxy(function(d, index) {\n                        // Expand plot\n\n                        this.drawingArea.select('.plot-' + index).attr(\"r\", 5);\n\n\n                        // Set tip content\n\n                        var $content = $('<div />');\n                        var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                        var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                        $xValue.html(this.getXFormatter()(d[0]));\n                        $yValue.html(this.getYFormatter()(d[1]));\n\n                        var content = $content.get(0);\n\n                        this.tip.setContent(content);\n\n\n                        // Set tip position\n\n                        var margin = this.getChartMargin();\n\n                        var offset = 24;\n                        var top = (y(d[1]) + offset);\n                        var left;\n\n                        if (this.orientation !== 'rtl') {\n                            left = (x(d[0]) + margin.left + offset);\n\n                            var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                            var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                            if (calcLeft > maxLeft) {\n                                left = x(d[0]) - (this.tip.$tip.width() + offset);\n                            }\n                        } else {\n                            left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                        }\n\n                        if (left < 0) {\n                            left = (x(d[0]) + margin.left + offset);\n                        }\n\n                        var position = {\n                            top: top,\n                            left: left\n                        };\n\n                        this.tip.setPosition(position);\n\n\n                        // Show tip\n\n                        this.tip.show();\n                    }, this))\n                    .on(\"mouseout\", $.proxy(function(d, index) {\n                        // Unexpand Plot\n                        this.drawingArea.select('.plot-' + index).attr(\"r\", 4);\n\n                        // Hide tip\n                        this.tip.hide();\n                    }, this));\n            }\n        },\n\n        getChartMargin: function() {\n            var margin = this.settings.margin;\n\n\n            // Estimate the max width of y ticks and set it as the left margin\n\n            var values = this.getYTickValues();\n            var yTicksMaxWidth = 0;\n\n            $.each(values, $.proxy(function(key, value) {\n                var characterWidth = 8;\n\n                var formatter = this.getYFormatter();\n\n                var formattedValue = formatter(value);\n                var computedTickWidth = formattedValue.length * characterWidth;\n\n                if (computedTickWidth > yTicksMaxWidth) {\n                    yTicksMaxWidth = computedTickWidth;\n                }\n            }, this));\n\n            yTicksMaxWidth += 10;\n\n            margin.left = yTicksMaxWidth;\n\n            return margin;\n        },\n\n        getX: function(padded) {\n            var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n                return d[0];\n            });\n\n            var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n                return d[0];\n            });\n\n            var xDomain = [xDomainMin, xDomainMax];\n\n            if (this.orientation === 'rtl') {\n                xDomain = [xDomainMax, xDomainMin];\n            }\n\n            var left = 0;\n            var right = 0;\n\n            if (padded) {\n                left = 0;\n                right = 0;\n            }\n\n            var x = d3.scaleTime().range([left, (this.width - right)]);\n\n            x.domain(xDomain);\n\n            return x;\n        },\n\n        getY: function() {\n            var yDomain = [0, this.getYMaxValue()];\n\n            var y = d3.scaleLinear().range([this.height, 0]);\n\n            y.domain(yDomain);\n\n            return y;\n        },\n\n        getXFormatter: function() {\n            var formatter;\n\n            if (this.settings.xAxis.formatter !== $.noop) {\n                formatter = this.settings.xAxis.formatter(this);\n            } else {\n                formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n            }\n\n            return formatter;\n        },\n\n        getYFormatter: function() {\n            var formatter;\n\n            if (this.settings.yAxis.formatter !== $.noop) {\n                formatter = this.settings.yAxis.formatter(this);\n            } else {\n                formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n            }\n\n            return formatter;\n        },\n\n        getYMaxValue: function() {\n            return d3.max(this.dataTable.rows, function(d) {\n                return d[1];\n            });\n        },\n\n        getYTickValues: function() {\n            var maxValue = this.getYMaxValue();\n\n            if (maxValue > 1) {\n                return [(maxValue / 2), maxValue];\n            } else {\n                return [0, maxValue];\n            }\n        }\n    },\n    {\n        defaults: {\n            chartClass: 'area',\n            margin: {top: 25, right: 5, bottom: 25, left: 0},\n            plots: true,\n            tips: true,\n            xAxis: {\n                gridlines: false,\n                showAxis: true,\n                formatter: $.noop\n            },\n            yAxis: {\n                gridlines: true,\n                showAxis: false,\n                formatter: $.noop\n            }\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = \"0\" + duration.hours;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = \"0\" + duration.minutes;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = \"0\" + duration.seconds;\n        }\n\n        return duration.hours + ':' + duration.minutes + ':' + duration.seconds;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day + \" %H:00:00\");\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.children('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'change', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        var val = this.$input.val();\n\n        // If empty, set the preview to transparent\n        if (!val.length || val === '#') {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Make sure the value starts with a #\n        if (val[0] !== '#') {\n            val = '#'+val;\n            this.$input.val(val);\n        }\n\n        this.$colorPreview.css('background-color', val);\n\n        if (this.$colorInput) {\n            this.$colorInput.val(val);\n        }\n    }\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function()\n    {\n        if (Craft.ColorInput._browserSupportsColorInputs === null)\n        {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend(\n    {\n        elementIndex: null,\n        $elementIndexSourcesContainer: null,\n\n        $sidebar: null,\n        $sourcesContainer: null,\n        $sourceSettingsContainer: null,\n        $newHeadingBtn: null,\n        $footer: null,\n        $footerBtnContainer: null,\n        $saveBtn: null,\n        $cancelBtn: null,\n        $saveSpinner: null,\n        $loadingSpinner: null,\n\n        sourceSort: null,\n        sources: null,\n        selectedSource: null,\n        updateSourcesOnSave: false,\n\n        availableTableAttributes: null,\n\n        init: function(elementIndex, settings) {\n            this.base();\n\n            this.setSettings(settings, {\n                resizable: true\n            });\n\n            this.elementIndex = elementIndex;\n            this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n            var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n            this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n            this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n            this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n            this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n            this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$footerBtnContainer);\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Save'),\n            }).appendTo(this.$footerBtnContainer);\n            this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n            this.$newHeadingBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit add icon',\n                text: Craft.t('app', 'New heading'),\n            }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n            this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n            this.setContainer($container);\n            this.show();\n\n            var data = {\n                elementType: this.elementIndex.elementType\n            };\n\n            Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, $.proxy(function(response, textStatus) {\n                this.$loadingSpinner.remove();\n\n                if (textStatus === 'success') {\n                    this.$saveBtn.removeClass('disabled');\n                    this.buildModal(response);\n                }\n            }, this));\n\n            this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n            this.addListener(this.$cancelBtn, 'click', 'hide');\n            this.addListener(this.$saveBtn, 'click', 'save');\n            this.addListener(this.$container, 'submit', 'save');\n        },\n\n        buildModal: function(response) {\n            // Store the available table attribute options\n            this.availableTableAttributes = response.availableTableAttributes;\n\n            // Create the source item sorter\n            this.sourceSort = new Garnish.DragSort({\n                handle: '.move',\n                axis: 'y',\n                onSortChange: $.proxy(function() {\n                    this.updateSourcesOnSave = true;\n                }, this)\n            });\n\n            // Create the sources\n            this.sources = [];\n\n            for (var i = 0; i < response.sources.length; i++) {\n                var source = this.addSource(response.sources[i]);\n                this.sources.push(source);\n            }\n\n            if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n                this.sources[0].select();\n            }\n        },\n\n        addSource: function(sourceData) {\n            var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n            var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n            var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n            $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n            var source;\n\n            // Is this a heading?\n            if (typeof sourceData.heading !== 'undefined') {\n                $item.addClass('heading');\n                $itemInput.attr('name', 'sourceOrder[][heading]');\n                source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n                source.updateItemLabel(sourceData.heading);\n            }\n            else {\n                $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n                source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n                source.updateItemLabel(sourceData.label);\n\n                // Select this by default?\n                if ((this.elementIndex.sourceKey+'/').substr(0, sourceData.key.length+1) === sourceData.key+'/') {\n                    source.select();\n                }\n            }\n\n            this.sourceSort.addItems($item);\n\n            return source;\n        },\n\n        handleNewHeadingBtnClick: function() {\n            var source = this.addSource({\n                heading: ''\n            });\n\n            Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n            source.select();\n            this.updateSourcesOnSave = true;\n        },\n\n        save: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n                return;\n            }\n\n            this.$saveSpinner.removeClass('hidden');\n            var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n            Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, $.proxy(function(response, textStatus) {\n                this.$saveSpinner.addClass('hidden');\n\n                if (textStatus === 'success' && response.success) {\n                    // Have any changes been made to the source list?\n                    if (this.updateSourcesOnSave) {\n                        if (this.$elementIndexSourcesContainer.length) {\n                            var $lastSource = null,\n                                $pendingHeading;\n\n                            for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                                var $item = this.sourceSort.$items.eq(i),\n                                    source = $item.data('source'),\n                                    $indexSource = source.getIndexSource();\n\n                                if (!$indexSource) {\n                                    continue;\n                                }\n\n                                if (source.isHeading()) {\n                                    $pendingHeading = $indexSource;\n                                }\n                                else {\n                                    if ($pendingHeading) {\n                                        this.appendSource($pendingHeading, $lastSource);\n                                        $lastSource = $pendingHeading;\n                                        $pendingHeading = null;\n                                    }\n\n                                    this.appendSource($indexSource, $lastSource);\n                                    $lastSource = $indexSource;\n                                }\n                            }\n\n                            // Remove any additional sources (most likely just old headings)\n                            if ($lastSource) {\n                                var $extraSources = $lastSource.nextAll();\n                                this.elementIndex.sourceSelect.removeItems($extraSources);\n                                $extraSources.remove();\n                            }\n                        }\n                    }\n\n                    // If a source is selected, have the element index select that one by default on the next request\n                    if (this.selectedSource && this.selectedSource.sourceData.key) {\n                        this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                        this.elementIndex.updateElements();\n                    }\n\n                    Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                    this.hide();\n                }\n                else {\n                    var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                    Craft.cp.displayError(error);\n                }\n            }, this));\n        },\n\n        appendSource: function($source, $lastSource) {\n            if (!$lastSource) {\n                $source.prependTo(this.$elementIndexSourcesContainer);\n            }\n            else {\n                $source.insertAfter($lastSource);\n            }\n        },\n\n        destroy: function() {\n            for (var i = 0; i < this.sources.length; i++) {\n                this.sources[i].destroy();\n            }\n\n            delete this.sources;\n            this.base();\n        }\n    });\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend(\n    {\n        modal: null,\n\n        $item: null,\n        $itemLabel: null,\n        $itemInput: null,\n        $settingsContainer: null,\n\n        sourceData: null,\n\n        init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n            this.modal = modal;\n            this.$item = $item;\n            this.$itemLabel = $itemLabel;\n            this.$itemInput = $itemInput;\n            this.sourceData = sourceData;\n\n            this.$item.data('source', this);\n\n            this.addListener(this.$item, 'click', 'select');\n        },\n\n        isHeading: function() {\n            return false;\n        },\n\n        isSelected: function() {\n            return (this.modal.selectedSource === this);\n        },\n\n        select: function() {\n            if (this.isSelected()) {\n                return;\n            }\n\n            if (this.modal.selectedSource) {\n                this.modal.selectedSource.deselect();\n            }\n\n            this.$item.addClass('sel');\n            this.modal.selectedSource = this;\n\n            if (!this.$settingsContainer) {\n                this.$settingsContainer = this.createSettings()\n                    .appendTo(this.modal.$sourceSettingsContainer);\n            }\n            else {\n                this.$settingsContainer.removeClass('hidden');\n            }\n\n            this.modal.$sourceSettingsContainer.scrollTop(0);\n        },\n\n        createSettings: function() {\n            return $('<div/>');\n        },\n\n        getIndexSource: function() {\n        },\n\n        deselect: function() {\n            this.$item.removeClass('sel');\n            this.modal.selectedSource = null;\n            this.$settingsContainer.addClass('hidden');\n        },\n\n        updateItemLabel: function(val) {\n            this.$itemLabel.text(val);\n        },\n\n        destroy: function() {\n            this.$item.data('source', null);\n            this.base();\n        }\n    });\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend(\n    {\n        createSettings: function() {\n            let $settings = $('<div/>').append(Craft.ui.createTextField({\n                label: Craft.t('app', 'Header Column Heading'),\n                id: 'defaultHeaderColHeading' + Math.floor(Math.random() * 100000),\n                name: `sources[${this.sourceData.key}][headerColHeading]`,\n                value: this.sourceData.headerColHeading,\n                placeholder: this.sourceData.defaultHeaderColHeading,\n            }));\n\n            if (this.sourceData.tableAttributes.length) {\n                $settings.append(this.createTableColumnsField());\n            }\n\n            return $settings;\n        },\n\n        createTableColumnsField: function() {\n            // Create the title column option\n            let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n            let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n            // Create the rest of the options\n            let $columnCheckboxes = $('<div/>');\n            let selectedAttributes = [firstKey];\n\n            $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n            // Add the selected columns, in the selected order\n            for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n                let [key, label] = this.sourceData.tableAttributes[i];\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n                selectedAttributes.push(key);\n            }\n\n            // Add the rest\n            let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n            availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n            for (let i = 0; i < availableTableAttributes.length; i++) {\n                let [key, label] = availableTableAttributes[i];\n                if (!Craft.inArray(key, selectedAttributes)) {\n                    $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n                }\n            }\n\n            new Garnish.DragSort($columnCheckboxes.children(), {\n                handle: '.move',\n                axis: 'y'\n            });\n\n            return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n                label: Craft.t('app', 'Table Columns'),\n                instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n            });\n        },\n\n        createTableColumnOption: function(key, label, first, checked) {\n            var $option = $('<div class=\"customize-sources-table-column\"/>')\n                .append('<div class=\"icon move\"/>')\n                .append(\n                    Craft.ui.createCheckbox({\n                        label: label,\n                        name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                        value: key,\n                        checked: checked,\n                        disabled: first\n                    })\n                );\n\n            if (first) {\n                $option.children('.move').addClass('disabled');\n            }\n\n            return $option;\n        },\n\n        getIndexSource: function() {\n            var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n            if ($source) {\n                return $source.closest('li');\n            }\n        }\n    });\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend(\n    {\n        $labelField: null,\n        $labelInput: null,\n        $deleteBtn: null,\n\n        isHeading: function() {\n            return true;\n        },\n\n        select: function() {\n            this.base();\n            this.$labelInput.trigger('focus');\n        },\n\n        createSettings: function() {\n            let $settings = $('<div/>');\n\n            this.$labelField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Heading'),\n                instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n                value: this.sourceData.heading\n            }).appendTo($settings);\n\n            this.$labelInput = this.$labelField.find('.text');\n\n            $settings.append('<hr/>');\n\n            this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n                .appendTo($settings);\n\n            this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n            this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n            return $settings;\n        },\n\n        handleLabelInputChange: function() {\n            this.updateItemLabel(this.$labelInput.val());\n            this.modal.updateSourcesOnSave = true;\n        },\n\n        updateItemLabel: function(val) {\n            this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n            this.$itemInput.val(val);\n        },\n\n        deleteHeading: function() {\n            this.modal.sourceSort.removeItems(this.$item);\n            this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n            this.modal.updateSourcesOnSave = true;\n\n            if (this.isSelected()) {\n                this.deselect();\n\n                if (this.modal.sources.length) {\n                    this.modal.sources[0].select();\n                }\n            }\n\n            this.$item.remove();\n            this.$settingsContainer.remove();\n            this.destroy();\n        },\n\n        getIndexSource: function() {\n            var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n            return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend(\n    {\n        $table: null,\n\n        init: function(table, settings) {\n            this.$table = $(table);\n            var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n            settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n            settings.container = this.$table.children('tbody');\n            settings.helper = $.proxy(this, 'getHelper');\n            settings.caboose = '<tr/>';\n            settings.axis = Garnish.Y_AXIS;\n            settings.magnetStrength = 4;\n            settings.helperLagBase = 1.5;\n\n            this.base($rows, settings);\n        },\n\n        getHelper: function($helperRow) {\n            var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n                $table = $('<table/>').appendTo($helper),\n                $tbody = $('<tbody/>').appendTo($table);\n\n            $helperRow.appendTo($tbody);\n\n            // Copy the table width and classes\n            $table.width(this.$table.width());\n            $table.prop('className', this.$table.prop('className'));\n\n            // Copy the column widths\n            var $firstRow = this.$table.find('tr:first'),\n                $cells = $firstRow.children(),\n                $helperCells = $helperRow.children();\n\n            for (var i = 0; i < $helperCells.length; i++) {\n                $($helperCells[i]).width($($cells[i]).width());\n            }\n\n            return $helper;\n        }\n    },\n    {\n        defaults: {\n            handle: '.move',\n            helperClass: 'datatablesorthelper'\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend(\n    {\n        id: null,\n        userId: null,\n\n        $deleteActionRadios: null,\n        $deleteSpinner: null,\n\n        userSelect: null,\n        _deleting: false,\n\n        init: function(userId, settings) {\n            this.id = Math.floor(Math.random() * 1000000000);\n            this.userId = userId;\n            settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n            let $form = $(\n                    '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n                    Craft.getCsrfInput() +\n                    '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n                    (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n                    (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n                    '</form>'\n                ).appendTo(Garnish.$bod);\n            let $body = $(\n                    '<div class=\"body\">' +\n                    '<div class=\"content-summary\">' +\n                    '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n                    '<ul class=\"bullets\"></ul>' +\n                    '</div>' +\n                    '<div class=\"options\">' +\n                    '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n                    '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n                    '<div class=\"elements\"></div>' +\n                    '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n                    '</div>' +\n                    '</div>' +\n                    '<div>' +\n                    '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n                    '</div>' +\n                    '</div>'\n                ).appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo($buttons);\n\n            if (settings.contentSummary.length) {\n                for (let i = 0; i < settings.contentSummary.length; i++) {\n                    $body.find('ul').append($('<li/>', { text: settings.contentSummary[i] }));\n                }\n            } else {\n                $body.find('ul').remove();\n            }\n\n            this.$deleteActionRadios = $body.find('input[type=radio]');\n            this.$deleteSubmitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: this._submitBtnLabel(false),\n            }).appendTo($buttons);\n            this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n            var idParam;\n\n            if (Garnish.isArray(this.userId)) {\n                idParam = ['and'];\n\n                for (let i = 0; i < this.userId.length; i++) {\n                    idParam.push('not ' + this.userId[i]);\n                }\n            }\n            else {\n                idParam = 'not ' + this.userId;\n            }\n\n            this.userSelect = new Craft.BaseElementSelectInput({\n                id: 'transferselect' + this.id,\n                name: 'transferContentTo',\n                elementType: 'craft\\\\elements\\\\User',\n                criteria: {\n                    id: idParam\n                },\n                limit: 1,\n                modalSettings: {\n                    closeOtherModals: false\n                },\n                onSelectElements: $.proxy(function() {\n                    this.updateSizeAndPosition();\n\n                    if (!this.$deleteActionRadios.first().prop('checked')) {\n                        this.$deleteActionRadios.first().trigger('click');\n                    }\n                    else {\n                        this.validateDeleteInputs();\n                    }\n                }, this),\n                onRemoveElements: $.proxy(this, 'validateDeleteInputs'),\n                selectable: false,\n                editable: false\n            });\n\n            this.addListener($cancelBtn, 'click', 'hide');\n\n            this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n            this.addListener($form, 'submit', 'handleSubmit');\n\n            this.base($form, settings);\n        },\n\n        _submitBtnLabel: function(withContent) {\n            let message = withContent\n                ? 'Delete {num, plural, =1{user} other{users}} and content'\n                : 'Delete {num, plural, =1{user} other{users}}';\n\n            return Craft.t('app', message, {\n                num: Garnish.isArray(this.userId) ? this.userId.length : 1,\n            });\n        },\n\n        validateDeleteInputs: function() {\n            var validates = false;\n\n            if (this.$deleteActionRadios.eq(1).prop('checked')) {\n                validates = true;\n                this.$deleteSubmitBtn.text(this._submitBtnLabel(true));\n            } else {\n                this.$deleteSubmitBtn.text(this._submitBtnLabel(false));\n                if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                    validates = !!this.userSelect.totalSelected;\n                }\n            }\n\n            this.updateSizeAndPosition();\n\n            if (validates) {\n                this.$deleteSubmitBtn.removeClass('disabled');\n            }\n            else {\n                this.$deleteSubmitBtn.addClass('disabled');\n            }\n\n            return validates;\n        },\n\n        handleSubmit: function(ev) {\n            if (this._deleting || !this.validateDeleteInputs()) {\n                ev.preventDefault();\n                return;\n            }\n\n            this.$deleteSubmitBtn.addClass('active');\n            this.$deleteSpinner.removeClass('hidden');\n            this.disable();\n            this.userSelect.disable();\n            this._deleting = true;\n\n            // Let the onSubmit callback prevent the form from getting submitted\n            try {\n                if (this.settings.onSubmit() === false) {\n                    ev.preventDefault();\n                }\n            } catch (e) {\n                ev.preventDefault();\n                this.$deleteSpinner.addClass('hidden');\n                throw e;\n            }\n        },\n\n        onFadeIn: function() {\n            // Auto-focus the first radio\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$deleteActionRadios.first().trigger('focus');\n            }\n\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            contentSummary: [],\n            onSubmit: $.noop,\n            redirect: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend(\n    {\n        $revisionBtn: null,\n        $revisionLabel: null,\n        $spinner: null,\n        $expandSiteStatusesBtn: null,\n        $statusIcon: null,\n\n        $editMetaBtn: null,\n        metaHud: null,\n        $nameTextInput: null,\n        $saveMetaBtn: null,\n\n        $siteStatusPane: null,\n        $globalLightswitch: null,\n        $siteLightswitches: null,\n        $addlSiteField: null,\n\n        siteIds: null,\n        newSiteIds: null,\n\n        enableAutosave: null,\n        lastSerializedValue: null,\n        listeningForChanges: false,\n        pauseLevel: 0,\n        timeout: null,\n        saving: false,\n        saveXhr: null,\n        queue: null,\n        submittingForm: false,\n\n        duplicatedElements: null,\n        errors: null,\n\n        preview: null,\n        previewToken: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.DraftEditor.defaults);\n\n            this.queue = [];\n            this.duplicatedElements = {};\n            this.enableAutosave = Craft.autosaveDrafts;\n\n            this.siteIds = Object.keys(this.settings.siteStatuses).map(siteId => {\n                return parseInt(siteId)\n            });\n\n            this.$revisionBtn = $('#context-btn');\n            this.$revisionLabel = $('#revision-label');\n            this.$spinner = $('#revision-spinner');\n            this.$expandSiteStatusesBtn = $('#expand-status-btn');\n            this.$statusIcon = $('#revision-status');\n\n            if (this.settings.canEditMultipleSites) {\n                this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n            }\n\n            if (this.settings.previewTargets.length) {\n                if (this.settings.enablePreview) {\n                    this.addListener($('#preview-btn'), 'click', 'openPreview');\n                }\n\n                const $shareBtn = $('#share-btn');\n\n                if (this.settings.previewTargets.length === 1) {\n                    this.addListener($shareBtn, 'click', function() {\n                        this.openShareLink(this.settings.previewTargets[0].url);\n                    });\n                } else {\n                    this.createShareMenu($shareBtn);\n                }\n            }\n\n            // If this is a revision, we're done here\n            if (this.settings.revisionId) {\n                return;\n            }\n\n            // Override the serializer to use our own\n            Craft.cp.$primaryForm.data('serializer', function() {\n                return this.serializeForm(true)\n            }.bind(this));\n\n            this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n            if (this.settings.draftId) {\n                this.initForDraft();\n            } else {\n                // If the \"Save as a Draft\" button is a secondary button, then add special handling for it\n                this.addListener($('#save-draft-btn'), 'click', function(ev) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }.bind(this));\n\n                // If they're not allowed to update the source element, override the save shortcut to create a draft too\n                if (!this.settings.canUpdateSource) {\n                    this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', function(ev) {\n                        if (ev.saveShortcut) {\n                            ev.preventDefault();\n                            this.createDraft();\n                            this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                        }\n                    }.bind(this));\n                }\n            }\n        },\n\n        listenForChanges: function() {\n            if (this.listeningForChanges || this.pauseLevel > 0 || !this.enableAutosave) {\n                return;\n            }\n\n            this.listeningForChanges = true;\n\n            this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n                if ($(ev.target).is(this.statusIcons())) {\n                    return;\n                }\n                clearTimeout(this.timeout);\n                // If they are typing, wait half a second before checking the form\n                if (['keypress', 'keyup', 'change'].includes(ev.type)) {\n                    this.timeout = setTimeout(this.checkForm.bind(this), 500);\n                } else {\n                    this.checkForm();\n                }\n            });\n        },\n\n        stopListeningForChanges: function() {\n            if (!this.listeningForChanges) {\n                return;\n            }\n\n            this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n            clearTimeout(this.timeout);\n            this.listeningForChanges = false;\n        },\n\n        pause: function() {\n            this.pauseLevel++;\n            this.stopListeningForChanges();\n        },\n\n        resume: function() {\n            if (this.pauseLevel === 0) {\n                throw 'Craft.DraftEditor::resume() should only be called after pause().';\n            }\n\n            // Only actually resume operation if this has been called the same\n            // number of times that pause() was called\n            this.pauseLevel--;\n            if (this.pauseLevel === 0) {\n                if (this.enableAutosave) {\n                    this.checkForm();\n                }\n                this.listenForChanges();\n            }\n        },\n\n        initForDraft: function() {\n            // Create the edit draft button\n            this.createEditMetaBtn();\n\n            this.addListener(this.$statusIcon, 'click', function() {\n                this.showStatusHud(this.$statusIcon);\n            }.bind(this));\n\n            this.addListener($('#merge-changes-btn'), 'click', this.mergeChanges);\n\n            if (Craft.autosaveDrafts) {\n                this.listenForChanges();\n            }\n        },\n\n        mergeChanges: function() {\n            // Make sure there aren't any unsaved changes\n            this.checkForm();\n\n            // Make sure we aren't currently saving something\n            if (this.saving) {\n                this.queue.push(this.mergeChanges.bind(this));\n                return;\n            }\n\n            this.saving = true;\n            $('#merge-changes-spinner').removeClass('hidden');\n\n            Craft.postActionRequest('drafts/merge-source-changes', {\n                elementType: this.settings.elementType,\n                draftId: this.settings.draftId,\n                siteId: this.settings.siteId,\n            }, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    window.location.reload();\n                } else {\n                    $('#merge-changes-spinner').addClass('hidden');\n                }\n            });\n        },\n\n        expandSiteStatuses: function() {\n            this.removeListener(this.$expandSiteStatusesBtn, 'click');\n            this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', function() {\n                this.$expandSiteStatusesBtn.remove();\n            }.bind(this));\n\n            const $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n            this.$siteStatusPane = $enabledForSiteField.parent();\n\n            // If this is a revision, just show the site statuses statically and be done\n            if (this.settings.revisionId) {\n                this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n                return;\n            }\n\n            $enabledForSiteField.addClass('nested');\n            const $globalField = Craft.ui.createLightswitchField({\n                id: 'enabled',\n                label: Craft.t('app', 'Enabled'),\n                name: 'enabled',\n            }).insertBefore($enabledForSiteField);\n            $globalField.find('label').css('font-weight', 'bold');\n            this.$globalLightswitch = $globalField.find('.lightswitch');\n\n            if (!this.settings.revisionId) {\n                this._showField($globalField);\n            }\n\n            // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n            const originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n              ? '1'\n              : (this.settings.enabledForSite ? '-' : '');\n            const originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n              '=' + (this.settings.enabledForSite ? '1' : '');\n\n            this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n\n            this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n\n            let serializedStatuses = `enabled=${originalEnabledValue}`;\n            for (let i = 0; i < this.$siteLightswitches.length; i++) {\n                const $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n                serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n            }\n\n            Craft.cp.$primaryForm.data('initialSerializedValue',\n                Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n            // Are there additional sites that can be added?\n            if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n                this._createAddlSiteField();\n            }\n\n            this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n            this._updateGlobalStatus();\n        },\n\n        /**\n         * @returns {Array}\n         */\n        _getOtherSupportedSites: function() {\n            return Craft.sites.filter(s => s.id != this.settings.siteId && this.siteIds.includes(s.id));\n        },\n\n        _showField: function($field) {\n            const height = $field.height();\n            $field\n              .css('overflow', 'hidden')\n              .height(0)\n              .velocity({height: height}, 'fast', () => {\n                  $field.css({\n                      overflow: '',\n                      height: '',\n                  });\n              });\n        },\n\n        _removeField: function($field) {\n            const height = $field.height();\n            $field\n              .css('overflow', 'hidden')\n              .velocity({height: 0}, 'fast', () => {\n                  $field.remove();\n              });\n        },\n\n        _updateGlobalStatus: function() {\n            let allEnabled = true, allDisabled = true;\n            this.$siteLightswitches.each(function() {\n                const enabled = $(this).data('lightswitch').on;\n                if (enabled) {\n                    allDisabled = false;\n                } else {\n                    allEnabled = false;\n                }\n                if (!allEnabled && !allDisabled) {\n                    return false;\n                }\n            });\n            if (allEnabled) {\n                this.$globalLightswitch.data('lightswitch').turnOn(true);\n            } else if (allDisabled) {\n                this.$globalLightswitch.data('lightswitch').turnOff(true);\n            } else {\n                this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n            }\n        },\n\n        _updateSiteStatuses: function() {\n            const enabled = this.$globalLightswitch.data('lightswitch').on;\n            this.$siteLightswitches.each(function() {\n                if (enabled) {\n                    $(this).data('lightswitch').turnOn(true);\n                } else {\n                    $(this).data('lightswitch').turnOff(true);\n                }\n            });\n        },\n\n        _createSiteStatusField: function(site) {\n            const $field = Craft.ui.createLightswitchField({\n                id: `enabledForSite-${site.id}`,\n                label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n                name: `enabledForSite[${site.id}]`,\n                on: this.settings.siteStatuses.hasOwnProperty(site.id)\n                    ? this.settings.siteStatuses[site.id]\n                    : true,\n                disabled: !!this.settings.revisionId,\n            });\n\n            if (this.$addlSiteField) {\n                $field.insertBefore(this.$addlSiteField);\n            } else {\n                $field.appendTo(this.$siteStatusPane);\n            }\n\n            if (!this.settings.revisionId) {\n                $field.addClass('nested');\n                const $lightswitch = $field.find('.lightswitch')\n                  .on('change', this._updateGlobalStatus.bind(this));\n                this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n            }\n\n            this._showField($field);\n\n            return $field;\n        },\n\n        _createAddlSiteField: function() {\n            const addlSites = Craft.sites.filter(s => {\n                return !this.siteIds.includes(s.id) && this.settings.addlSiteIds.includes(s.id);\n            });\n\n            if (!addlSites.length) {\n                return;\n            }\n\n            const $addlSiteSelectContainer = Craft.ui.createSelect({\n                options: [\n                    {label: Craft.t('app', 'Add a site…')},\n                    ...addlSites.map(s => {\n                        return {label: s.name, value: s.id};\n                    }),\n                ],\n            }).addClass('fullwidth');\n\n            this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n                .addClass('nested add')\n                .appendTo(this.$siteStatusPane);\n\n            const $addlSiteSelect = $addlSiteSelectContainer.find('select');\n\n            $addlSiteSelect.on('change', () => {\n                const siteId = parseInt($addlSiteSelect.val());\n                const site = Craft.sites.find(s => s.id === siteId);\n\n                if (!site) {\n                    return;\n                }\n\n                this._createSiteStatusField(site);\n\n                $addlSiteSelect\n                    .val('')\n                    .find(`option[value=\"${siteId}\"]`).remove();\n\n                if (this.newSiteIds === null) {\n                    this.newSiteIds = [];\n                }\n\n                this.siteIds.push(siteId);\n                this.newSiteIds.push(siteId);\n\n                // Was that the last site?\n                if ($addlSiteSelect.find('option').length === 1) {\n                    this._removeField(this.$addlSiteField);\n                }\n            });\n\n            this._showField(this.$addlSiteField);\n        },\n\n        showStatusHud: function(target) {\n            let bodyHtml;\n\n            if (this.errors === null) {\n                bodyHtml = '<p>' + Craft.t('app', 'The draft has been saved.') + '</p>';\n            } else {\n                bodyHtml = '<p class=\"error\">' + Craft.t('app', 'The draft could not be saved.') + '</p>';\n\n                if (this.errors.length) {\n                    bodyHtml += '<ul class=\"errors\">' +\n                        this.errors.map(e => `<li>${Craft.escapeHtml(e)}</li>`).join('') +\n                        '</ul>';\n                }\n            }\n\n            const hud = new Garnish.HUD(target, bodyHtml, {\n                onHide: function() {\n                    hud.destroy();\n                }\n            });\n        },\n\n        spinners: function() {\n            return this.preview\n                ? this.$spinner.add(this.preview.$spinner)\n                : this.$spinner;\n        },\n\n        statusIcons: function() {\n            return this.preview\n                ? this.$statusIcon.add(this.preview.$statusIcon)\n                : this.$statusIcon;\n        },\n\n        createEditMetaBtn: function() {\n            this.$editMetaBtn = $('<button/>', {\n                type: 'button',\n                'class': 'btn edit icon',\n                title: Craft.t('app', 'Edit draft settings'),\n            }).appendTo($('#context-btngroup'));\n            this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n        },\n\n        createShareMenu: function($shareBtn) {\n            $shareBtn.addClass('menubtn');\n\n            const $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n            const $ul = $('<ul/>').appendTo($menu);\n\n            this.settings.previewTargets.forEach(target => {\n                const $li = $('<li/>').appendTo($ul);\n                const $a = $('<a/>', {\n                    text: target.label,\n                }).appendTo($li);\n                this.addListener($a, 'click', () => {\n                    this.openShareLink(target.url);\n                });\n            });\n        },\n\n        getPreviewToken: function() {\n            return new Promise(function(resolve, reject) {\n                if (this.previewToken) {\n                    resolve(this.previewToken);\n                    return;\n                }\n\n                Craft.postActionRequest('preview/create-token', {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                }, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.previewToken = response.token;\n                        resolve(this.previewToken);\n                    } else {\n                        reject();\n                    }\n                }.bind(this));\n            }.bind(this));\n        },\n\n        getTokenizedPreviewUrl: function(url, randoParam) {\n            return new Promise(function(resolve, reject) {\n                const params = {};\n\n                if (randoParam || !this.settings.isLive) {\n                    // Randomize the URL so CDNs don't return cached pages\n                    params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n                }\n\n                if (this.settings.siteToken) {\n                    params[Craft.siteToken] = this.settings.siteToken;\n                }\n\n                // No need for a token if we're looking at a live element\n                if (this.settings.isLive) {\n                    resolve(Craft.getUrl(url, params));\n                    return;\n                }\n\n                this.getPreviewToken().then(function(token) {\n                    params[Craft.tokenParam] = token;\n                    resolve(Craft.getUrl(url, params));\n                }).catch(reject);\n            }.bind(this));\n        },\n\n        openShareLink: function(url) {\n            this.getTokenizedPreviewUrl(url).then(function(url) {\n                window.open(url);\n            });\n        },\n\n        getPreview: function() {\n            if (!this.preview) {\n                this.preview = new Craft.Preview(this);\n                this.preview.on('open', function() {\n                    if (!this.settings.draftId || !Craft.autosaveDrafts) {\n                        if (!Craft.autosaveDrafts) {\n                            this.enableAutosave = true;\n                        }\n                        this.listenForChanges();\n                    }\n                }.bind(this));\n                this.preview.on('close', function() {\n                    if (!this.settings.draftId || !Craft.autosaveDrafts) {\n                        if (!Craft.autosaveDrafts) {\n                            this.enableAutosave = false;\n                            const $statusIcons = this.statusIcons();\n                            if ($statusIcons.hasClass('checkmark-icon')) {\n                                $statusIcons.addClass('hidden');\n                            }\n                        }\n                        this.stopListeningForChanges();\n                    }\n                }.bind(this));\n            }\n            return this.preview;\n        },\n\n        openPreview: function() {\n            return new Promise(function(resolve, reject) {\n                this.ensureIsDraftOrRevision(true)\n                    .then(function() {\n                        this.getPreview().open();\n                        resolve();\n                    }.bind(this))\n                    .catch(reject);\n            }.bind(this))\n        },\n\n        ensureIsDraftOrRevision: function(onlyIfChanged) {\n            return new Promise(function(resolve, reject) {\n                if (!this.settings.draftId && !this.settings.revisionId) {\n                    if (\n                        onlyIfChanged &&\n                        this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                    ) {\n                        resolve();\n                        return;\n                    }\n\n                    this.createDraft()\n                        .then(resolve)\n                        .catch(reject);\n                } else {\n                    resolve();\n                }\n            }.bind(this));\n        },\n\n        serializeForm: function(removeActionParams) {\n            let data = Craft.cp.$primaryForm.serialize();\n\n            if (this.isPreviewActive()) {\n                // Replace the temp input with the preview form data\n                data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n            }\n\n            if (removeActionParams && !this.settings.isUnpublishedDraft) {\n                // Remove action and redirect params\n                data = data.replace(/&action=[^&]*/, '');\n                data = data.replace(/&redirect=[^&]*/, '');\n            }\n\n            return data;\n        },\n\n        checkForm: function(force) {\n            // If this isn't a draft and there's no active preview, then there's nothing to check\n            if (\n                this.settings.revisionId ||\n                (!this.settings.draftId && !this.isPreviewActive()) ||\n                this.pauseLevel > 0\n            ) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            this.timeout = null;\n\n            // Has anything changed?\n            const data = this.serializeForm(true);\n            if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n                this.saveDraft(data);\n            }\n        },\n\n        isPreviewActive: function() {\n            return this.preview && this.preview.isActive;\n        },\n\n        createDraft: function() {\n            return new Promise(function(resolve, reject) {\n                this.saveDraft(this.serializeForm(true))\n                    .then(resolve)\n                    .catch(reject);\n            }.bind(this));\n        },\n\n        saveDraft: function(data) {\n            return new Promise(function(resolve, reject) {\n                // Ignore if we're already submitting the main form\n                if (this.submittingForm) {\n                    reject();\n                    return;\n                }\n\n                if (this.saving) {\n                    this.queue.push(function() {\n                        this.checkForm()\n                    }.bind(this));\n                    return;\n                }\n\n                this.lastSerializedValue = data;\n                this.saving = true;\n                const $spinners = this.spinners().removeClass('hidden');\n                const $statusIcons = this.statusIcons()\n                    .velocity('stop')\n                    .css('opacity', '')\n                    .removeClass('invisible checkmark-icon alert-icon fade-out')\n                    .addClass('hidden');\n                if (this.$saveMetaBtn) {\n                    this.$saveMetaBtn.addClass('active');\n                }\n                this.errors = null;\n\n                const url = Craft.getActionUrl(this.settings.saveDraftAction);\n\n                this.saveXhr = Craft.postActionRequest(url, this.prepareData(data), function(response, textStatus) {\n                    $spinners.addClass('hidden');\n                    if (this.$saveMetaBtn) {\n                        this.$saveMetaBtn.removeClass('active');\n                    }\n                    this.saving = false;\n\n                    if (textStatus === 'abort') {\n                        return;\n                    }\n\n                    if (textStatus !== 'success' || response.errors) {\n                        this.errors = (response ? response.errors : null) || [];\n                        $statusIcons\n                            .velocity('stop')\n                            .css('opacity', '')\n                            .removeClass('hidden checkmark-icon')\n                            .addClass('alert-icon')\n                            .attr('title', Craft.t('app', 'The draft could not be saved.'));\n                        reject();\n                        return;\n                    }\n\n                    if (response.title) {\n                        $('#header h1').text(response.title);\n                    }\n\n                    if (response.docTitle) {\n                        document.title = response.docTitle;\n                    }\n\n                    this.$revisionLabel.text(response.draftName);\n\n                    this.settings.draftName = response.draftName;\n\n                    let revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                    // Did we just add a site?\n                    if (this.newSiteIds) {\n                        // Do we need to create the revision menu?\n                        if (!revisionMenu) {\n                            this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                            new Garnish.MenuBtn(this.$revisionBtn);\n                            revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                            revisionMenu.$container.removeClass('hidden');\n                        }\n                        this.newSiteIds.forEach(siteId => {\n                            const $option = revisionMenu.$options.filter(`[data-site-id=${siteId}]`);\n                            $option.find('.status').removeClass('disabled').addClass('enabled');\n                            const $li = $option.parent().removeClass('hidden');\n                            $li.closest('.site-group').removeClass('hidden');\n                        });\n                        revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                        this.newSiteIds = null;\n                    }\n\n                    // Did we just create a draft?\n                    const draftCreated = !this.settings.draftId;\n                    if (draftCreated) {\n                        // Update the document location HREF\n                        let newHref;\n                        const anchorPos = document.location.href.search('#');\n                        if (anchorPos !== -1) {\n                            newHref = document.location.href.substr(0, anchorPos);\n                        } else {\n                            newHref = document.location.href;\n                        }\n                        newHref += (newHref.match(/\\?/) ? '&' : '?') + 'draftId=' + response.draftId;\n                        if (anchorPos !== -1) {\n                            newHref += document.location.href.substr(anchorPos);\n                        }\n                        history.replaceState({}, '', newHref);\n\n                        // Replace the action input\n                        $('#action').remove();\n                        $('<input/>', {\n                            id: 'action',\n                            type: 'hidden',\n                            name: 'action',\n                            value: this.settings.saveDraftAction,\n                        }).appendTo(Craft.cp.$primaryForm);\n\n                        // Remove the \"Save as a Draft\" and \"Save\" buttons\n                        $('#save-draft-btn-container').remove();\n                        $('#save-btn-container').remove();\n\n                        const $actionButtonContainer = $('#action-buttons');\n\n                        // If they're allowed to update the source, add a \"Publish draft\" button\n                        if (this.settings.canUpdateSource) {\n                            $('<button/>', {\n                                type: 'button',\n                                class: 'btn secondary formsubmit',\n                                text: Craft.t('app', 'Publish draft'),\n                                data: {\n                                    action: this.settings.publishDraftAction,\n                                    redirect: this.settings.hashedCpEditUrl,\n                                },\n                            }).appendTo($actionButtonContainer).formsubmit();\n                        }\n\n                        // Add a \"Save draft\" button\n                        const $saveBtnContainer = $('<div/>', {\n                            id: 'save-btn-container',\n                            class: 'btngroup submit',\n                        }).appendTo($actionButtonContainer);\n\n                        $('<button/>', {\n                            type: 'submit',\n                            class: 'btn submit',\n                            text: Craft.t('app', 'Save draft'),\n                        }).appendTo($saveBtnContainer);\n\n                        if (this.settings.saveDraftAction || this.settings.deleteDraftAction) {\n                            const $menuBtn = $('<button/>', {\n                                type: 'button',\n                                class: 'btn submit menubtn',\n                            }).appendTo($saveBtnContainer);\n                            const $menu = $('<div/>', {\n                                class: 'menu',\n                                attr: {\n                                    'data-align': 'right',\n                                },\n                            }).appendTo($saveBtnContainer);\n\n                            if (this.settings.saveDraftAction) {\n                                const $ul = $('<ul/>')\n                                    .appendTo($menu)\n                                    .append(\n                                        $('<li/>')\n                                            .append(\n                                                $('<a/>', {\n                                                    class: 'formsubmit',\n                                                    data: {\n                                                        action: this.settings.saveDraftAction,\n                                                    },\n                                                    text: Craft.t('app', 'Save and continue editing'),\n                                                })\n                                                    .prepend(\n                                                        $('<span/>', {\n                                                            class: 'shortcut',\n                                                            text: (Craft.clientOs === 'Mac' ? '⌘' : 'Ctrl+') + 'S',\n                                                        })\n                                                    )\n                                            )\n                                    );\n                                if (this.settings.canUpdateSource && this.settings.hashedAddAnotherRedirectUrl) {\n                                    $ul.append(\n                                        $('<li/>')\n                                            .append(\n                                                $('<a/>', {\n                                                    class: 'formsubmit',\n                                                    data: {\n                                                        action: this.settings.publishDraftAction,\n                                                        redirect: this.settings.hashedAddAnotherRedirectUrl,\n                                                    },\n                                                    text: Craft.t('app', 'Publish and add another'),\n                                                })\n                                            )\n                                    );\n                                }\n                                if (this.settings.deleteDraftAction) {\n                                    $('<hr/>').appendTo($menu);\n                                }\n                            }\n\n                            if (this.settings.deleteDraftAction) {\n                                $('<ul/>')\n                                    .appendTo($menu)\n                                    .append(\n                                        $('<li/>')\n                                            .append(\n                                                $('<a/>', {\n                                                    class: 'formsubmit error',\n                                                    data: {\n                                                        action: this.settings.deleteDraftAction,\n                                                        redirect: this.settings.hashedCpEditUrl,\n                                                        confirm: Craft.t('app', 'Are you sure you want to delete this draft?'),\n                                                    },\n                                                    text: Craft.t('app', 'Delete draft'),\n                                                })\n                                            )\n                                    )\n                            }\n                        }\n\n                        Craft.initUiElements($saveBtnContainer);\n\n                        // Update the editor settings\n                        this.settings.draftId = response.draftId;\n                        this.settings.isLive = false;\n                        this.previewToken = null;\n                        this.initForDraft();\n\n                        // Add the draft to the revision menu\n                        if (revisionMenu) {\n                            revisionMenu.$options.filter(':not(.site-option)').removeClass('sel');\n                            let $draftsUl = revisionMenu.$container.find('.revision-group-drafts');\n                            if (!$draftsUl.length) {\n                                const $draftHeading = $('<h6/>', {\n                                    text: Craft.t('app', 'Drafts'),\n                                }).insertAfter(revisionMenu.$container.find('.revision-group-current'));\n                                $draftsUl = $('<ul/>', {\n                                    'class': 'padded revision-group-drafts',\n                                }).insertAfter($draftHeading);\n                            }\n                            const $draftLi = $('<li/>').prependTo($draftsUl);\n                            const $draftA = $('<a/>', {\n                                'class': 'sel',\n                                html: '<span class=\"draft-name\"></span> <span class=\"draft-meta light\"></span>',\n                            }).appendTo($draftLi);\n                            revisionMenu.addOptions($draftA);\n                            revisionMenu.selectOption($draftA);\n\n                            // Update the site URLs\n                            const $siteOptions = revisionMenu.$options.filter('.site-option[href]');\n                            for (let i = 0; i < $siteOptions.length; i++) {\n                                const $siteOption = $siteOptions.eq(i);\n                                $siteOption.attr('href', Craft.getUrl($siteOption.attr('href'), {draftId: response.draftId}));\n                            }\n                        }\n                    }\n\n                    if (revisionMenu) {\n                        revisionMenu.$options.filter('.sel').find('.draft-name').text(response.draftName);\n                        revisionMenu.$options.filter('.sel').find('.draft-meta').text('– ' + (response.creator\n                            ? Craft.t('app', 'saved {timestamp} by {creator}', {\n                                timestamp: response.timestamp,\n                                creator: response.creator\n                            })\n                            : Craft.t('app', 'updated {timestamp}', {\n                                timestamp: response.timestamp,\n                            })\n                        ));\n                    }\n\n                    // Did the controller send us updated preview targets?\n                    if (\n                        response.previewTargets &&\n                        JSON.stringify(response.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                    ) {\n                        this.updatePreviewTargets(response.previewTargets);\n                    }\n\n                    this.afterUpdate(data);\n\n                    if (draftCreated) {\n                        this.trigger('createDraft');\n                    }\n\n                    if (this.$nameTextInput) {\n                        this.checkMetaValues();\n                    }\n\n                    for (const oldId in response.duplicatedElements) {\n                        if (oldId != this.settings.sourceId && response.duplicatedElements.hasOwnProperty(oldId)) {\n                            this.duplicatedElements[oldId] = response.duplicatedElements[oldId];\n                        }\n                    }\n\n                    resolve();\n                }.bind(this));\n            }.bind(this));\n        },\n\n        prepareData: function(data) {\n            // Swap out element IDs with their duplicated ones\n            data = this.swapDuplicatedElementIds(data);\n\n            // Add the draft info\n            if (this.settings.draftId) {\n                data += `&draftId=${this.settings.draftId}`;\n            }\n\n            if (this.settings.draftName !== null) {\n                data += `&draftName=${this.settings.draftName}`;\n            }\n\n            // Filter out anything that hasn't changed\n            const initialData = this.swapDuplicatedElementIds(Craft.cp.$primaryForm.data('initialSerializedValue'));\n            return Craft.findDeltaData(initialData, data, this.getDeltaNames());\n        },\n\n        swapDuplicatedElementIds: function(data) {\n            const idsRE = Object.keys(this.duplicatedElements).join('|');\n            if (idsRE === '') {\n                return data;\n            }\n            const lb = encodeURIComponent('[');\n            const rb = encodeURIComponent(']');\n            // Keep replacing field IDs until data stops changing\n            while (true) {\n                if (data === (\n                    data = data\n                        // &fields[...][X]\n                        .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                            return pre + this.duplicatedElements[id] + post;\n                        })\n                        // &fields[...=X\n                        .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                            return pre + this.duplicatedElements[id];\n                        })\n                )) {\n                    break;\n                }\n            }\n            return data;\n        },\n\n        getDeltaNames: function() {\n            const deltaNames = Craft.deltaNames.slice(0);\n            for (let i = 0; i < deltaNames.length; i++) {\n                for (const oldId in this.duplicatedElements) {\n                    if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                        deltaNames[i] = deltaNames[i].replace('][' + oldId + ']', '][' + this.duplicatedElements[oldId] + ']');\n                    }\n                }\n            }\n            return deltaNames;\n        },\n\n        updatePreviewTargets: function(previewTargets) {\n            previewTargets.forEach(newTarget => {\n                const currentTarget = this.settings.previewTargets.find(t => t.label === newTarget.label);\n                if (currentTarget) {\n                    currentTarget.url = newTarget.url;\n                }\n            });\n        },\n\n        afterUpdate: function(data) {\n            Craft.cp.$primaryForm.data('initialSerializedValue', data);\n            Craft.initialDeltaValues = {};\n            const $statusIcons = this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('hidden')\n                .addClass('checkmark-icon')\n                .attr('title', Craft.t('app', 'The draft has been saved.'));\n\n            if (!this.enableAutosave) {\n                // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n                $statusIcons\n                    .velocity('stop')\n                    .velocity({\n                        opacity: 0,\n                    }, {\n                        delay: 2000,\n                        complete: () => {\n                            $statusIcons.addClass('hidden');\n                        },\n                    });\n            }\n\n            this.trigger('update');\n\n            this.nextInQueue();\n        },\n\n        nextInQueue: function() {\n            if (this.queue.length) {\n                this.queue.shift()();\n            }\n        },\n\n        showMetaHud: function() {\n            if (!this.metaHud) {\n                this.createMetaHud();\n                this.onMetaHudShow();\n            } else {\n                this.metaHud.show();\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$nameTextInput.trigger('focus');\n            }\n        },\n\n        createMetaHud: function() {\n            const $hudBody = $('<div/>');\n\n            // Add the Name field\n            const $nameField = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n            const $nameInputContainer = $('<div class=\"input\"/>').appendTo($nameField);\n            this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($nameInputContainer).val(this.settings.draftName);\n\n            // HUD footer\n            const $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n            $('<div class=\"flex-grow\"></div>').appendTo($footer);\n            this.$saveMetaBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($footer);\n\n            this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n                onSubmit: this.saveMeta.bind(this)\n            });\n\n            this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n\n            this.metaHud.on('show', this.onMetaHudShow.bind(this));\n            this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n            this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n        },\n\n        onMetaHudShow: function() {\n            this.$editMetaBtn.addClass('active');\n        },\n\n        onMetaHudHide: function() {\n            this.$editMetaBtn.removeClass('active');\n        },\n\n        onMetaHudEscape: function() {\n            this.$nameTextInput.val(this.settings.draftName);\n        },\n\n        checkMetaValues: function() {\n            if (\n                this.$nameTextInput.val() &&\n                this.$nameTextInput.val() !== this.settings.draftName\n            ) {\n                this.$saveMetaBtn.removeClass('disabled');\n                return true;\n            }\n\n            this.$saveMetaBtn.addClass('disabled');\n            return false;\n        },\n\n        shakeMetaHud: function() {\n            Garnish.shake(this.metaHud.$hud);\n        },\n\n        saveMeta: function() {\n            if (!this.checkMetaValues()) {\n                this.shakeMetaHud();\n                return;\n            }\n\n            this.settings.draftName = this.$nameTextInput.val();\n\n            this.metaHud.hide();\n            this.checkForm(true);\n        },\n\n        handleFormSubmit: function(ev) {\n            ev.preventDefault();\n\n            // Prevent double form submits\n            if (this.submittingForm) {\n                return;\n            }\n\n            // If this a draft and was this a normal save (either via submit button or save shortcut),\n            // then trigger an autosave\n            if (\n                this.settings.draftId &&\n                (typeof ev.autosave === 'undefined' || ev.autosave) &&\n                (ev.saveShortcut || (ev.customTrigger && ev.customTrigger.data('action') === this.settings.saveDraftAction))\n            ) {\n                this.checkForm(true);\n                return;\n            }\n\n            // Prevent the normal unload confirmation dialog\n            Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n            // Abort the current save request if there is one\n            if (this.saving) {\n                this.saveXhr.abort();\n            }\n\n            // Duplicate the form with normalized data\n            const data = this.prepareData(this.serializeForm(false));\n            const $form = Craft.createForm(data);\n\n            $form.appendTo(Garnish.$bod);\n            $form.submit();\n            this.submittingForm = true;\n        },\n    },\n    {\n        defaults: {\n            elementType: null,\n            sourceId: null,\n            siteId: null,\n            isUnpublishedDraft: false,\n            enabled: false,\n            enabledForSite: false,\n            isLive: false,\n            siteStatuses: null,\n            addlSiteIds: [],\n            cpEditUrl: null,\n            draftId: null,\n            revisionId: null,\n            draftName: null,\n            canEditMultipleSites: false,\n            canUpdateSource: false,\n            saveDraftAction: null,\n            deleteDraftAction: null,\n            publishDraftAction: null,\n            hashedCpEditUrl: null,\n            hashedAddAnotherRedirectUrl: null,\n            enablePreview: false,\n            previewTargets: [],\n            siteToken: null,\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend(\n    {\n        callback: $.noop,\n\n        init: function(source, target, callback) {\n            this.callback = callback;\n            this.base(source, target);\n        },\n\n        generateTargetValue: function(sourceVal) {\n            return this.callback(sourceVal);\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend(\n    {\n        initialized: false,\n\n        id: null,\n        baseName: null,\n        columns: null,\n        sorter: null,\n        biggestId: -1,\n\n        $table: null,\n        $tbody: null,\n        $addRowBtn: null,\n\n        rowCount: 0,\n        hasMaxRows: false,\n        hasMinRows: false,\n\n        radioCheckboxes: null,\n\n        init: function(id, baseName, columns, settings) {\n            this.id = id;\n            this.baseName = baseName;\n            this.columns = columns;\n            this.setSettings(settings, Craft.EditableTable.defaults);\n            this.radioCheckboxes = {};\n\n            this.$table = $('#' + id);\n            this.$tbody = this.$table.children('tbody');\n            this.rowCount = this.$tbody.find('tr').length;\n\n            // Is this already an editable table?\n            if (this.$table.data('editable-table')) {\n                Garnish.log('Double-instantiating an editable table on an element');\n                this.$table.data('editable-table').destroy();\n            }\n\n            this.$table.data('editable-table', this);\n\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                helperClass: 'editabletablesorthelper',\n                copyDraggeeInputValuesToHelper: true\n            });\n\n            if (this.isVisible()) {\n                this.initialize();\n            } else {\n                // Give everything a chance to initialize\n                setTimeout($.proxy(this, 'initializeIfVisible'), 500);\n            }\n\n            if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n                for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                    this.addRow()\n                }\n            }\n        },\n\n        isVisible: function() {\n            return (this.$table.parent().height() > 0);\n        },\n\n        initialize: function() {\n            if (this.initialized) {\n                return false;\n            }\n\n            this.initialized = true;\n            this.removeListener(Garnish.$win, 'resize');\n\n            var $rows = this.$tbody.children();\n\n            for (var i = 0; i < $rows.length; i++) {\n                this.createRowObj($rows[i]);\n            }\n\n            this.$addRowBtn = this.$table.next('.add');\n            this.updateAddRowButton();\n            this.addListener(this.$addRowBtn, 'activate', 'addRow');\n            return true;\n        },\n        initializeIfVisible: function() {\n            this.removeListener(Garnish.$win, 'resize');\n\n            if (this.isVisible()) {\n                this.initialize();\n            } else {\n                this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n            }\n        },\n        updateAddRowButton: function() {\n            if (!this.canAddRow()) {\n                this.$addRowBtn.css('opacity', '0.2');\n                this.$addRowBtn.css('pointer-events', 'none');\n            } else {\n                this.$addRowBtn.css('opacity', '1');\n                this.$addRowBtn.css('pointer-events', 'auto');\n            }\n        },\n        canDeleteRow: function() {\n            return (this.rowCount > this.settings.minRows);\n        },\n        deleteRow: function(row) {\n            if (!this.canDeleteRow()) {\n                return;\n            }\n\n            this.sorter.removeItems(row.$tr);\n            row.$tr.remove();\n\n            this.rowCount--;\n\n            this.updateAddRowButton();\n            if (this.rowCount === 0) {\n                this.$table.addClass('hidden');\n            }\n\n            // onDeleteRow callback\n            this.settings.onDeleteRow(row.$tr);\n\n            row.destroy();\n        },\n        canAddRow: function() {\n            if (this.settings.staticRows) {\n                return false;\n            }\n\n            if (this.settings.maxRows) {\n                return (this.rowCount < this.settings.maxRows);\n            }\n\n            return true;\n        },\n        addRow: function(focus, prepend) {\n            if (!this.canAddRow()) {\n                return;\n            }\n\n            var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n                $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n            if (prepend) {\n                $tr.prependTo(this.$tbody);\n            } else {\n                $tr.appendTo(this.$tbody);\n            }\n\n            var row = this.createRowObj($tr);\n            this.sorter.addItems($tr);\n\n            // Focus the first input in the row\n            if (focus !== false) {\n                $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n            }\n\n            this.rowCount++;\n            this.updateAddRowButton();\n            this.$table.removeClass('hidden');\n\n            // onAddRow callback\n            this.settings.onAddRow($tr);\n\n            return row;\n        },\n\n        createRow: function(rowId, columns, baseName, values) {\n            return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n        },\n\n        createRowObj: function($tr) {\n            return new Craft.EditableTable.Row(this, $tr);\n        },\n\n        focusOnPrevRow: function($tr, tdIndex, blurTd) {\n            var $prevTr = $tr.prev('tr');\n            var prevRow;\n\n            if ($prevTr.length) {\n                prevRow = $prevTr.data('editable-table-row');\n            } else {\n                prevRow = this.addRow(false, true);\n            }\n\n            // Focus on the same cell in the previous row\n            if (!prevRow) {\n                return;\n            }\n\n            if (!prevRow.$tds[tdIndex]) {\n                return;\n            }\n\n            if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n                if ($prevTr) {\n                    this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n                }\n                return;\n            }\n\n            var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n            if ($input.length) {\n                $(blurTd).trigger('blur');\n                $input.trigger('focus');\n            }\n        },\n\n        focusOnNextRow: function($tr, tdIndex, blurTd) {\n            var $nextTr = $tr.next('tr');\n            var nextRow;\n\n            if ($nextTr.length) {\n                nextRow = $nextTr.data('editable-table-row');\n            } else {\n                nextRow = this.addRow(false);\n            }\n\n            // Focus on the same cell in the next row\n            if (!nextRow) {\n                return;\n            }\n\n            if (!nextRow.$tds[tdIndex]) {\n                return;\n            }\n\n            if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n                if ($nextTr) {\n                    this.focusOnNextRow($nextTr, tdIndex, blurTd);\n                }\n                return;\n            }\n\n            var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n            if ($input.length) {\n                $(blurTd).trigger('blur');\n                $input.trigger('focus');\n            }\n        },\n\n        importData: function(data, row, tdIndex) {\n            let lines = data.split(/\\r?\\n|\\r/);\n            for (let i = 0; i < lines.length; i++) {\n                let values = lines[i].split(\"\\t\");\n                for (let j = 0; j < values.length; j++) {\n                    let value = values[j];\n                    row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                        .val(value)\n                        .trigger('input');\n                }\n\n                // move onto the next row\n                let $nextTr = row.$tr.next('tr');\n                if ($nextTr.length) {\n                    row = $nextTr.data('editable-table-row');\n                } else {\n                    row = this.addRow(false);\n                }\n            }\n        },\n    },\n    {\n        textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n        defaults: {\n            rowIdPrefix: '',\n            defaultValues: {},\n            staticRows: false,\n            minRows: null,\n            maxRows: null,\n            onAddRow: $.noop,\n            onDeleteRow: $.noop\n        },\n\n        createRow: function(rowId, columns, baseName, values) {\n            var $tr = $('<tr/>', {\n                'data-id': rowId\n            });\n\n            for (var colId in columns) {\n                if (!columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                var col = columns[colId],\n                    value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                    $cell;\n\n                if (col.type === 'heading') {\n                    $cell = $('<th/>', {\n                        'scope': 'row',\n                        'class': col['class'],\n                        'html': value\n                    });\n                } else {\n                    var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                    $cell = $('<td/>', {\n                        'class': `${col.class} ${col.type}-cell`,\n                        'width': col.width\n                    });\n\n                    if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                        $cell.addClass('textual');\n                    }\n\n                    if (col.code) {\n                        $cell.addClass('code');\n                    }\n\n                    switch (col.type) {\n                        case 'checkbox':\n                            $('<div class=\"checkbox-wrapper\"/>')\n                                .append(Craft.ui.createCheckbox({\n                                        name: name,\n                                        value: col.value || '1',\n                                        checked: !!value\n                                    })\n                                )\n                                .appendTo($cell);\n                            break;\n\n                        case 'color':\n                            Craft.ui.createColorInput({\n                                name: name,\n                                value: value,\n                                small: true\n                            }).appendTo($cell);\n                            break;\n\n                        case 'date':\n                            Craft.ui.createDateInput({\n                                name: name,\n                                value: value\n                            }).appendTo($cell);\n                            break;\n\n                        case 'lightswitch':\n                            Craft.ui.createLightswitch({\n                                name: name,\n                                value: col.value || '1',\n                                on: !!value,\n                                small: true\n                            }).appendTo($cell);\n                            break;\n\n                        case 'select':\n                            Craft.ui.createSelect({\n                                name: name,\n                                options: col.options,\n                                value: value || (function() {\n                                    for (var key in col.options) {\n                                        if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                            return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                        }\n                                    }\n                                    return null;\n                                })(),\n                                'class': 'small'\n                            }).appendTo($cell);\n                            break;\n\n                        case 'time':\n                            Craft.ui.createTimeInput({\n                                name: name,\n                                value: value\n                            }).appendTo($cell);\n                            break;\n\n                        case 'email':\n                        case 'url':\n                            Craft.ui.createTextInput({\n                                name: name,\n                                value: value,\n                                type: col.type,\n                                placeholder: col.placeholder || null,\n                            }).appendTo($cell);\n                            break;\n\n                        default:\n                            $('<textarea/>', {\n                                'name': name,\n                                'rows': col.rows || 1,\n                                'val': value,\n                                'placeholder': col.placeholder\n                            }).appendTo($cell);\n                    }\n                }\n\n                $cell.appendTo($tr);\n            }\n\n            $('<td/>', {\n                'class': 'thin action'\n            }).append(\n                $('<a/>', {\n                    'class': 'move icon',\n                    'title': Craft.t('app', 'Reorder')\n                })\n            ).appendTo($tr);\n\n            $('<td/>', {\n                'class': 'thin action'\n            }).append(\n                $('<a/>', {\n                    'class': 'delete icon',\n                    'title': Craft.t('app', 'Delete')\n                })\n            ).appendTo($tr);\n\n            return $tr;\n        }\n    });\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend(\n    {\n        table: null,\n        id: null,\n        niceTexts: null,\n\n        $tr: null,\n        $tds: null,\n        tds: null,\n        $textareas: null,\n        $deleteBtn: null,\n\n        init: function(table, tr) {\n            this.table = table;\n            this.$tr = $(tr);\n            this.$tds = this.$tr.children();\n            this.tds = [];\n            this.id = this.$tr.attr('data-id');\n\n            this.$tr.data('editable-table-row', this);\n\n            // Get the row ID, sans prefix\n            var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n            if (id > this.table.biggestId) {\n                this.table.biggestId = id;\n            }\n\n            this.$textareas = $();\n            this.niceTexts = [];\n            var textareasByColId = {};\n\n            var i = 0;\n            var colId, col, td, $textarea, $checkbox;\n\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                col = this.table.columns[colId];\n                td = this.tds[colId] = this.$tds[i];\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $textarea = $('textarea', td);\n                    this.$textareas = this.$textareas.add($textarea);\n\n                    this.addListener($textarea, 'focus', 'onTextareaFocus');\n                    this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                    this.niceTexts.push(new Garnish.NiceText($textarea, {\n                        onHeightChange: $.proxy(this, 'onTextareaHeightChange')\n                    }));\n\n                    this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                    this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                    $textarea.trigger('input');\n\n                    if (col.type !== 'multiline') {\n                        this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                    }\n\n                    textareasByColId[colId] = $textarea;\n                } else if (col.type === 'checkbox') {\n                    $checkbox = $('input[type=\"checkbox\"]', td);\n\n                    if (col.radioMode) {\n                        if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                            this.table.radioCheckboxes[colId] = [];\n                        }\n                        this.table.radioCheckboxes[colId].push($checkbox[0]);\n                        this.addListener($checkbox, 'change', {colId: colId}, 'onRadioCheckboxChange');\n                    }\n\n                    if (col.toggle) {\n                        this.addListener($checkbox, 'change', {colId: colId}, function(ev) {\n                            this.applyToggleCheckbox(ev.data.colId);\n                        });\n                    }\n                }\n\n                if (!$(td).hasClass('disabled')) {\n                    this.addListener(td, 'click', {td: td}, function(ev) {\n                        if (ev.target === ev.data.td) {\n                            $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                        }\n                    });\n                }\n\n                i++;\n            }\n\n            // Now that all of the text cells have been nice-ified, let's normalize the heights\n            this.onTextareaHeightChange();\n\n            // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n                col = this.table.columns[colId];\n                if (col.type === 'checkbox' && col.toggle) {\n                    this.applyToggleCheckbox(colId);\n                }\n            }\n\n            // Now look for any autopopulate columns\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                col = this.table.columns[colId];\n\n                if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                    new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                        allowNonAlphaStart: true\n                    });\n                }\n            }\n\n            var $deleteBtn = this.$tr.children().last().find('.delete');\n            this.addListener($deleteBtn, 'click', 'deleteRow');\n\n            var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n            this.addListener($inputs, 'focus', function(ev) {\n                $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n            });\n            this.addListener($inputs, 'blur', function(ev) {\n                $(ev.currentTarget).closest('td').removeClass('focus');\n            });\n        },\n\n        onTextareaFocus: function(ev) {\n            this.onTextareaHeightChange();\n\n            var $textarea = $(ev.currentTarget);\n\n            if ($textarea.data('ignoreNextFocus')) {\n                $textarea.data('ignoreNextFocus', false);\n                return;\n            }\n\n            setTimeout(function() {\n                Craft.selectFullValue($textarea);\n            }, 0);\n        },\n\n        onRadioCheckboxChange: function(ev) {\n            if (ev.currentTarget.checked) {\n                for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                    var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                    checkbox.checked = (checkbox === ev.currentTarget);\n                }\n            }\n        },\n\n        applyToggleCheckbox: function(checkboxColId) {\n            var checkboxCol = this.table.columns[checkboxColId];\n            var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n            var colId, colIndex, neg;\n            for (var i = 0; i < checkboxCol.toggle.length; i++) {\n                colId = checkboxCol.toggle[i];\n                colIndex = this.table.colum;\n                neg = colId[0] === '!';\n                if (neg) {\n                    colId = colId.substr(1);\n                }\n                if ((checked && !neg) || (!checked && neg)) {\n                    $(this.tds[colId])\n                        .removeClass('disabled')\n                        .find('textarea, input').prop('disabled', false);\n                } else {\n                    $(this.tds[colId])\n                        .addClass('disabled')\n                        .find('textarea, input').prop('disabled', true);\n                }\n            }\n        },\n\n        ignoreNextTextareaFocus: function(ev) {\n            $.data(ev.currentTarget, 'ignoreNextFocus', true);\n        },\n\n        handleKeypress: function(ev) {\n            var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n            var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n            // Going to the next/previous row?\n            if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n                ev.preventDefault();\n                if (ev.shiftKey) {\n                    this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n                } else {\n                    this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n                }\n                return;\n            }\n\n            // Was this an invalid number character?\n            if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n                ev.preventDefault();\n            }\n        },\n\n        handlePaste: function(ev) {\n            let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n            if (!data.match(/[\\t\\r\\n]/)) {\n                return;\n            }\n            ev.preventDefault();\n            this.table.importData(data, this, ev.data.tdIndex);\n        },\n\n        validateValue: function(ev) {\n            if (ev.data.type === 'multiline') {\n                return;\n            }\n\n            var safeValue;\n\n            if (ev.data.type === 'number') {\n                // Only grab the number at the beginning of the value (if any)\n                var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n                if (match !== null) {\n                    safeValue = match[1];\n                } else {\n                    safeValue = '';\n                }\n            } else {\n                // Just strip any newlines\n                safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n            }\n\n            if (safeValue !== ev.currentTarget.value) {\n                ev.currentTarget.value = safeValue;\n            }\n        },\n\n        onTextareaHeightChange: function() {\n            // Keep all the textareas' heights in sync\n            var tallestTextareaHeight = -1;\n\n            for (var i = 0; i < this.niceTexts.length; i++) {\n                if (this.niceTexts[i].height > tallestTextareaHeight) {\n                    tallestTextareaHeight = this.niceTexts[i].height;\n                }\n            }\n\n            this.$textareas.css('min-height', tallestTextareaHeight);\n\n            // If the <td> is still taller, go with that instead\n            var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n            if (tdHeight > tallestTextareaHeight) {\n                this.$textareas.css('min-height', tdHeight);\n            }\n        },\n\n        deleteRow: function() {\n            this.table.deleteRow(this);\n        }\n    },\n    {\n        numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend(\n    {\n        maxLevels: null,\n        newChildUrl: null,\n        $trigger: null,\n        $selectedItems: null,\n        triggerEnabled: true,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n            this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n            // Do we have a custom handler?\n            if (this.settings.activate) {\n                // Prevent the element index's click handler\n                this.$trigger.data('custom-handler', true);\n\n                // Is this a custom trigger?\n                if (this.$trigger.prop('nodeName') === 'FORM') {\n                    this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n                }\n                else {\n                    this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n                }\n            }\n\n            this.updateTrigger();\n            Craft.elementIndex.on('selectionChange', $.proxy(this, 'updateTrigger'));\n        },\n\n        updateTrigger: function() {\n            // Ignore if the last element was just unselected\n            if (Craft.elementIndex.getSelectedElements().length === 0) {\n                return;\n            }\n\n            if (this.validateSelection()) {\n                this.enableTrigger();\n            }\n            else {\n                this.disableTrigger();\n            }\n        },\n\n        /**\n         * Determines if this action can be performed on the currently selected elements.\n         *\n         * @return boolean\n         */\n        validateSelection: function() {\n            var valid = true;\n            this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n            if (!this.settings.batch && this.$selectedItems.length > 1) {\n                valid = false;\n            }\n            else if (typeof this.settings.validateSelection === 'function') {\n                valid = this.settings.validateSelection(this.$selectedItems);\n            }\n\n            return valid;\n        },\n\n        enableTrigger: function() {\n            if (this.triggerEnabled) {\n                return;\n            }\n\n            this.$trigger.removeClass('disabled');\n            this.triggerEnabled = true;\n        },\n\n        disableTrigger: function() {\n            if (!this.triggerEnabled) {\n                return;\n            }\n\n            this.$trigger.addClass('disabled');\n            this.triggerEnabled = false;\n        },\n\n        handleTriggerActivation: function(ev) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            if (this.triggerEnabled) {\n                this.settings.activate(this.$selectedItems);\n            }\n        }\n    },\n    {\n        defaults: {\n            type: null,\n            batch: true,\n            validateSelection: null,\n            activate: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend(\n    {\n        queue: null,\n        workers: [],\n\n        init: function() {\n            this.queue = [];\n\n            for (var i = 0; i < 3; i++) {\n                this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n            }\n        },\n\n        load: function($elements) {\n            // Only immediately load the visible images\n            let $thumbs = $elements.find('.elementthumb');\n            for (let i = 0; i < $thumbs.length; i++) {\n                let $thumb = $thumbs.eq(i);\n                let $scrollParent = $thumb.scrollParent();\n                if (this.isVisible($thumb, $scrollParent)) {\n                    this.addToQueue($thumb[0]);\n                } else {\n                    let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                    Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                    $scrollParent.on(`scroll.${key}`, {\n                        $thumb: $thumb,\n                        $scrollParent: $scrollParent,\n                        key: key,\n                    }, (ev) => {\n                        if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                            delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                            $scrollParent.off(`scroll.${ev.data.key}`);\n                            this.addToQueue(ev.data.$thumb[0]);\n                        }\n                    });\n                }\n            }\n        },\n\n        addToQueue: function(thumb) {\n            this.queue.push(thumb);\n\n            // See if there are any inactive workers\n            for (var i = 0; i < this.workers.length; i++) {\n                if (!this.workers[i].active) {\n                    this.workers[i].loadNext();\n                }\n            }\n        },\n\n        isVisible: function($thumb, $scrollParent) {\n            let thumbOffset = $thumb.offset().top;\n            let scrollParentOffset, scrollParentHeight;\n            if ($scrollParent[0] === document) {\n                scrollParentOffset = $scrollParent.scrollTop();\n                scrollParentHeight = Garnish.$win.height();\n            } else {\n                scrollParentOffset = $scrollParent.offset().top;\n                scrollParentHeight = $scrollParent.height();\n            }\n            return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n        },\n\n        destroy: function() {\n            for (var i = 0; i < this.workers.length; i++) {\n                this.workers[i].destroy();\n            }\n\n            this.base();\n        }\n    }, {\n        invisibleThumbs: {},\n        retryAll: function() {\n            for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n                let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n                delete Craft.ElementThumbLoader.invisibleThumbs[key];\n                $scrollParent.off(`scroll.${key}`);\n                queue.load($thumb.parent());\n            }\n        }\n    }\n);\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend(\n    {\n        loader: null,\n        active: false,\n\n        init: function(loader) {\n            this.loader = loader;\n        },\n\n        loadNext: function() {\n            var container = this.loader.queue.shift();\n            if (typeof container === 'undefined') {\n                this.active = false;\n                return;\n            }\n\n            this.active = true;\n            var $container = $(container);\n            if ($container.find('img').length) {\n                this.loadNext();\n                return;\n            }\n            var $img = $('<img/>', {\n                sizes: $container.attr('data-sizes'),\n                srcset: $container.attr('data-srcset'),\n                alt: ''\n            });\n            this.addListener($img, 'load,error', 'loadNext');\n            $img.appendTo($container);\n            picturefill({\n                elements: [$img[0]]\n            });\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend(\n    {\n        $form: null,\n        inputs: null,\n\n        init: function(form, inputs) {\n            this.$form = $(form);\n\n            // Only check specific inputs?\n            if (typeof inputs !== 'undefined') {\n                this.inputs = [];\n                inputs = $.makeArray(inputs);\n\n                for (var i = 0; i < inputs.length; i++) {\n                    var $inputs = $(inputs[i]);\n\n                    for (var j = 0; j < $inputs.length; j++) {\n                        var $input = $inputs.eq(j);\n\n                        this.inputs.push({\n                            input: $input,\n                            val: Garnish.getInputPostVal($input)\n                        });\n                    }\n                }\n            }\n\n            this.addListener(this.$form, 'submit', 'handleFormSubmit');\n        },\n\n        handleFormSubmit: function(ev) {\n            // Ignore if we're in the middle of getting the elevated session timeout\n            if (Craft.elevatedSessionManager.fetchingTimeout) {\n                ev.preventDefault();\n                ev.stopImmediatePropagation();\n                return;\n            }\n\n            // Are we only interested in certain inputs?\n            if (this.inputs) {\n                var inputsChanged = false;\n                var $input;\n\n                for (var i = 0; i < this.inputs.length; i++) {\n                    $input = this.inputs[i].input;\n                    // Is this a password input?\n                    if ($input.data('passwordInput')) {\n                        $input = $input.data('passwordInput').$currentInput;\n                    }\n\n                    // Has this input's value changed?\n                    if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                        inputsChanged = true;\n                        break;\n                    }\n                }\n\n                if (!inputsChanged) {\n                    // No need to interrupt the submit\n                    return;\n                }\n            }\n\n            // Prevent the form from submitting until the user has an elevated session\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            Craft.elevatedSessionManager.requireElevatedSession($.proxy(this, 'submitForm'));\n        },\n\n        submitForm: function() {\n            // Don't let handleFormSubmit() interrupt this time\n            this.disable();\n            this.$form.trigger('submit');\n            this.enable();\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend(\n    {\n        fetchingTimeout: false,\n\n        passwordModal: null,\n        $passwordInput: null,\n        $passwordSpinner: null,\n        $submitBtn: null,\n        $errorPara: null,\n\n        callback: null,\n\n        /**\n         * Requires that the user has an elevated session.\n         *\n         * @param {function} callback The callback function that should be called once the user has an elevated session\n         */\n        requireElevatedSession: function(callback) {\n            this.callback = callback;\n\n            // Check the time remaining on the user's elevated session (if any)\n            this.fetchingTimeout = true;\n\n            Craft.postActionRequest('users/get-elevated-session-timeout', $.proxy(function(response, textStatus) {\n                this.fetchingTimeout = false;\n\n                if (textStatus === 'success') {\n                    // Is there still enough time left or has it been disabled?\n                    if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                        this.callback();\n                    }\n                    else {\n                        // Show the password modal\n                        this.showPasswordModal();\n                    }\n                }\n            }, this));\n        },\n\n        showPasswordModal: function() {\n            if (!this.passwordModal) {\n                var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                    $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                    $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                    $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                    $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                    $buttonContainer= $('<td/>').appendTo($inputsFlexContainer),\n                    $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n                this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n                this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n                this.$submitBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit disabled',\n                    text: Craft.t('app', 'Submit'),\n                }).appendTo($buttonContainer);\n                this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n                this.passwordModal = new Garnish.Modal($passwordModal, {\n                    closeOtherModals: false,\n                    onFadeIn: $.proxy(function() {\n                        setTimeout($.proxy(this, 'focusPasswordInput'), 100);\n                    }, this),\n                    onFadeOut: $.proxy(function() {\n                        this.$passwordInput.val('');\n                    }, this)\n                });\n\n                new Craft.PasswordInput(this.$passwordInput, {\n                    onToggleInput: $.proxy(function($newPasswordInput) {\n                        this.$passwordInput = $newPasswordInput;\n                    }, this)\n                });\n\n                this.addListener(this.$passwordInput, 'input', 'validatePassword');\n                this.addListener($passwordModal, 'submit', 'submitPassword');\n            }\n            else {\n                this.passwordModal.show();\n            }\n        },\n\n        focusPasswordInput: function() {\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$passwordInput.trigger('focus');\n            }\n        },\n\n        validatePassword: function() {\n            if (this.$passwordInput.val().length >= 6) {\n                this.$submitBtn.removeClass('disabled');\n                return true;\n            }\n            else {\n                this.$submitBtn.addClass('disabled');\n                return false;\n            }\n        },\n\n        submitPassword: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (!this.validatePassword()) {\n                return;\n            }\n\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            var data = {\n                currentPassword: this.$passwordInput.val()\n            };\n\n            Craft.postActionRequest('users/start-elevated-session', data, $.proxy(function(response, textStatus) {\n                this.$passwordSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.passwordModal.hide();\n                        this.callback();\n                    }\n                    else {\n                        this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                        Garnish.shake(this.passwordModal.$container);\n                        this.focusPasswordInput();\n                    }\n                }\n                else {\n                    this.showPasswordError();\n                }\n            }, this));\n        },\n\n        showPasswordError: function(error) {\n            if (error === null || typeof error === 'undefined') {\n                error = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.$errorPara.text(error);\n            this.passwordModal.updateSizeAndPosition();\n        },\n\n        clearLoginError: function() {\n            this.showPasswordError('');\n        }\n    },\n    {\n        minSafeElevatedSessionTimeout: 5\n    });\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend(\n    {\n        publishableSections: null,\n        $newEntryBtnGroup: null,\n        $newEntryBtn: null,\n\n        init: function(elementType, $container, settings) {\n            this.on('selectSource', $.proxy(this, 'updateButton'));\n            this.on('selectSite', $.proxy(this, 'updateButton'));\n            this.base(elementType, $container, settings);\n        },\n\n        afterInit: function() {\n            // Find which of the visible sections the user has permission to create new entries in\n            this.publishableSections = [];\n\n            for (var i = 0; i < Craft.publishableSections.length; i++) {\n                var section = Craft.publishableSections[i];\n\n                if (this.getSourceByKey('section:' + section.uid)) {\n                    this.publishableSections.push(section);\n                }\n            }\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific section in the URL?\n            if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n                if (defaultSectionHandle === 'singles') {\n                    return 'singles';\n                }\n                else {\n                    for (var i = 0; i < this.$sources.length; i++) {\n                        var $source = $(this.$sources[i]);\n\n                        if ($source.data('handle') === defaultSectionHandle) {\n                            return $source.data('key');\n                        }\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        updateButton: function() {\n            if (!this.$source) {\n                return;\n            }\n\n            var handle;\n\n            // Get the handle of the selected source\n            if (this.$source.data('key') === 'singles') {\n                handle = 'singles';\n            }\n            else {\n                handle = this.$source.data('handle');\n            }\n\n            // Update the New Entry button\n            // ---------------------------------------------------------------------\n\n            var i, href, label;\n\n            if (this.publishableSections.length) {\n                // Remove the old button, if there is one\n                if (this.$newEntryBtnGroup) {\n                    this.$newEntryBtnGroup.remove();\n                }\n\n                // Determine if they are viewing a section that they have permission to create entries in\n                var selectedSection;\n\n                if (handle) {\n                    for (i = 0; i < this.publishableSections.length; i++) {\n                        if (this.publishableSections[i].handle === handle) {\n                            selectedSection = this.publishableSections[i];\n                            break;\n                        }\n                    }\n                }\n\n                this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n                var $menuBtn;\n\n                // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n                // Otherwise only show a menu button\n                if (selectedSection) {\n                    href = this._getSectionTriggerHref(selectedSection);\n                    label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                    this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                    if (this.settings.context !== 'index') {\n                        this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                            this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                        });\n                    }\n\n                    if (this.publishableSections.length > 1) {\n                        $menuBtn = $('<button/>', {\n                            type: 'button',\n                            class: 'btn submit menubtn',\n                        }).appendTo(this.$newEntryBtnGroup);\n                    }\n                }\n                else {\n                    this.$newEntryBtn = $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit add icon menubtn',\n                        text: Craft.t('app', 'New entry'),\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n\n                if ($menuBtn) {\n                    var menuHtml = '<div class=\"menu\"><ul>';\n\n                    for (i = 0; i < this.publishableSections.length; i++) {\n                        var section = this.publishableSections[i];\n\n                        if (\n                            (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                            (this.settings.context !== 'index' && section !== selectedSection)\n                        ) {\n                            href = this._getSectionTriggerHref(section);\n                            label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                            menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                        }\n                    }\n\n                    menuHtml += '</ul></div>';\n\n                    $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                    var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                    if (this.settings.context !== 'index') {\n                        menuBtn.on('optionSelect', $.proxy(function(ev) {\n                            this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                        }, this));\n                    }\n                }\n\n                this.addButton(this.$newEntryBtnGroup);\n            }\n\n            // Update the URL if we're on the Entries index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'entries';\n\n                if (handle) {\n                    uri += '/' + handle;\n                }\n\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n        },\n\n        _getSectionTriggerHref: function(section) {\n            if (this.settings.context === 'index') {\n                var uri = 'entries/' + section.handle + '/new';\n                let params = {};\n                if (this.siteId) {\n                    for (var i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == this.siteId) {\n                            params.site = Craft.sites[i].handle;\n                        }\n                    }\n                }\n                return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n            } else {\n                return 'data-id=\"' + section.id + '\"';\n            }\n        },\n\n        _openCreateEntryModal: function(sectionId) {\n            if (this.$newEntryBtn.hasClass('loading')) {\n                return;\n            }\n\n            // Find the section\n            var section;\n\n            for (var i = 0; i < this.publishableSections.length; i++) {\n                if (this.publishableSections[i].id == sectionId) {\n                    section = this.publishableSections[i];\n                    break;\n                }\n            }\n\n            if (!section) {\n                return;\n            }\n\n            this.$newEntryBtn.addClass('inactive');\n            var newEntryBtnText = this.$newEntryBtn.text();\n            this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n            Craft.createElementEditor(this.elementType, {\n                hudTrigger: this.$newEntryBtnGroup,\n                siteId: this.siteId,\n                attributes: {\n                    sectionId: sectionId,\n                    typeId: section.entryTypes[0].id,\n                    enabled: section.canPublish ? 1 : 0,\n                },\n                onBeginLoading: $.proxy(function() {\n                    this.$newEntryBtn.addClass('loading');\n                }, this),\n                onEndLoading: $.proxy(function() {\n                    this.$newEntryBtn.removeClass('loading');\n                }, this),\n                onHideHud: $.proxy(function() {\n                    this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n                }, this),\n                onSaveElement: $.proxy(function(response) {\n                    // Make sure the right section is selected\n                    var sectionSourceKey = 'section:' + section.uid;\n\n                    if (this.sourceKey !== sectionSourceKey) {\n                        this.selectSourceByKey(sectionSourceKey);\n                    }\n\n                    this.selectElementAfterUpdate(response.id);\n                    this.updateElements();\n                }, this)\n            });\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n\n/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: $.proxy(this, 'onTabOptionSelect')\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $labelSpan = $tab.find('.tabs .tab span');\n        let oldName = $labelSpan.text();\n        let newName = prompt(Craft.t('app', 'Give your tab a name.'), oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>Tab ${this.tabGrid.$items.length + 1}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n        this.renameTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend(\n    {\n        $toggle: null,\n        targetPrefix: null,\n        targetSelector: null,\n        reverseTargetSelector: null,\n\n        _$target: null,\n        _$reverseTarget: null,\n        type: null,\n\n        init: function(toggle) {\n            this.$toggle = $(toggle);\n\n            // Is this already a field toggle?\n            if (this.$toggle.data('fieldtoggle')) {\n                Garnish.log('Double-instantiating a field toggle on an element');\n                this.$toggle.data('fieldtoggle').destroy();\n            }\n\n            this.$toggle.data('fieldtoggle', this);\n\n            this.type = this.getType();\n\n            if (this.type === 'select' || this.type === 'fieldset') {\n                this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n            } else {\n                this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n                this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n            }\n\n            this.findTargets();\n\n            switch (this.type) {\n                case 'link':\n                    this.addListener(this.$toggle, 'click', 'onToggleChange');\n                    break;\n                case 'fieldset':\n                    this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                    break;\n                default:\n                    this.addListener(this.$toggle, 'change', 'onToggleChange');\n                    this.onToggleChange();\n            }\n        },\n\n        normalizeTargetSelector: function(selector) {\n            if (selector && !selector.match(/^[#\\.]/)) {\n                selector = '#' + selector;\n            }\n\n            return selector;\n        },\n\n        getType: function() {\n            let nodeName = this.$toggle.prop('nodeName');\n            if (\n                (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n                this.$toggle.attr('role') === 'checkbox' ||\n                this.$toggle.attr('role') === 'switch'\n            ) {\n                return 'checkbox';\n            }\n\n            switch (nodeName) {\n                case 'SELECT':\n                    return 'select';\n                case 'A':\n                    return 'link';\n                case 'FIELDSET':\n                    return 'fieldset';\n            }\n\n            console.warn('Unexpected field toggle:', this.$toggle[0]);\n        },\n\n        findTargets: function() {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                var toggleVal = this.getToggleVal();\n                this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n            } else {\n                if (this.targetSelector) {\n                    this._$target = $(this.targetSelector);\n                }\n\n                if (this.reverseTargetSelector) {\n                    this._$reverseTarget = $(this.reverseTargetSelector);\n                }\n            }\n        },\n\n        getToggleVal: function() {\n            if (this.type === 'checkbox') {\n                if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                    return this.$toggle.prop('checked');\n                }\n                return this.$toggle.attr('aria-checked') === 'true';\n            }\n\n            let postVal;\n            if (this.type === 'fieldset') {\n                postVal = this.$toggle.find('input:checked:first').val();\n            } else {\n                postVal = Garnish.getInputPostVal(this.$toggle);\n            }\n\n            // Normalize the value\n            return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n        },\n\n        onToggleChange: function() {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                this.hideTarget(this._$target);\n                this.findTargets();\n                this.showTarget(this._$target);\n            } else {\n                this.findTargets();\n\n                if (this.type === 'link') {\n                    this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n                } else {\n                    this.onToggleChange._show = !!this.getToggleVal();\n                }\n\n                if (this.onToggleChange._show) {\n                    this.showTarget(this._$target);\n                    this.hideTarget(this._$reverseTarget);\n                } else {\n                    this.hideTarget(this._$target);\n                    this.showTarget(this._$reverseTarget);\n                }\n\n                delete this.onToggleChange._show;\n            }\n        },\n\n        showTarget: function($target) {\n            if ($target && $target.length) {\n                this.showTarget._currentHeight = $target.height();\n\n                $target.removeClass('hidden');\n\n                if (this.type !== 'select' && this.type !== 'fieldset') {\n                    if (this.type === 'link') {\n                        this.$toggle.removeClass('collapsed');\n                        this.$toggle.addClass('expanded');\n                    }\n\n                    for (let i = 0; i < $target.length; i++) {\n                        ($t => {\n                            if ($t.prop('nodeName') !== 'SPAN') {\n                                $t.height('auto');\n                                this.showTarget._targetHeight = $t.height();\n                                $t.css({\n                                    height: this.showTarget._currentHeight,\n                                    overflow: 'hidden'\n                                });\n\n                                $t.velocity('stop');\n\n                                $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                    $t.css({\n                                        height: '',\n                                        overflow: ''\n                                    });\n                                });\n                            }\n                        })($target.eq(i));\n                    }\n\n                    delete this.showTarget._targetHeight;\n                }\n\n                delete this.showTarget._currentHeight;\n\n                // Trigger a resize event in case there are any grids in the target that need to initialize\n                Garnish.$win.trigger('resize');\n            }\n        },\n\n        hideTarget: function($target) {\n            if ($target && $target.length) {\n                if (this.type === 'select' || this.type === 'fieldset') {\n                    $target.addClass('hidden');\n                } else {\n                    if (this.type === 'link') {\n                        this.$toggle.removeClass('expanded');\n                        this.$toggle.addClass('collapsed');\n                    }\n\n                    for (let i = 0; i < $target.length; i++) {\n                        ($t => {\n                            if ($t.hasClass('hidden')) {\n                                return;\n                            }\n                            if ($t.prop('nodeName') === 'SPAN') {\n                                $t.addClass('hidden');\n                            } else {\n                                $t.css('overflow', 'hidden');\n                                $t.velocity('stop');\n                                $t.velocity({height: 0}, 'fast', function() {\n                                    $t.addClass('hidden');\n                                });\n                            }\n                        })($target.eq(i));\n                    }\n                }\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend(\n    {\n        $container: null,\n\n        $items: null,\n        items: null,\n        totalCols: null,\n        colGutterDrop: null,\n        colPctWidth: null,\n\n        possibleItemColspans: null,\n        possibleItemPositionsByColspan: null,\n\n        itemPositions: null,\n        itemColspansByPosition: null,\n\n        layouts: null,\n        layout: null,\n        itemHeights: null,\n        leftPadding: null,\n\n        _refreshingCols: false,\n        _refreshColsAfterRefresh: false,\n        _forceRefreshColsAfterRefresh: false,\n\n        init: function(container, settings) {\n            this.$container = $(container);\n\n            // Is this already a grid?\n            if (this.$container.data('grid')) {\n                Garnish.log('Double-instantiating a grid on an element');\n                this.$container.data('grid').destroy();\n            }\n\n            this.$container.data('grid', this);\n\n            this.setSettings(settings, Craft.Grid.defaults);\n\n            // Set the refreshCols() proxy that container resizes will trigger\n            this.handleContainerHeightProxy = $.proxy(function() {\n                this.refreshCols(false, true);\n            }, this);\n\n            this.$items = this.$container.children(this.settings.itemSelector);\n            this.setItems();\n            this.refreshCols(true, false);\n\n            Garnish.$doc.ready($.proxy(function() {\n                this.refreshCols(false, false);\n            }, this));\n        },\n\n        addItems: function(items) {\n            this.$items = $().add(this.$items.add(items));\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        removeItems: function(items) {\n            this.$items = $().add(this.$items.not(items));\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        resetItemOrder: function() {\n            this.$items = $().add(this.$items);\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        setItems: function() {\n            this.setItems._ = {};\n\n            this.items = [];\n\n            for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n                this.items.push($(this.$items[this.setItems._.i]));\n            }\n\n            delete this.setItems._;\n        },\n\n        refreshCols: function(force) {\n            if (this._refreshingCols) {\n                this._refreshColsAfterRefresh = true;\n                if (force) {\n                    this._forceRefreshColsAfterRefresh = true;\n                }\n                return;\n            }\n\n            this._refreshingCols = true;\n\n            if (!this.items.length) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            this.refreshCols._ = {};\n\n            // Check to see if the grid is actually visible\n            this.refreshCols._.oldHeight = this.$container[0].style.height;\n            this.$container[0].style.height = 1;\n            this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n            this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n            if (this.refreshCols._.scrollHeight === 0) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            if (this.settings.cols) {\n                this.refreshCols._.totalCols = this.settings.cols;\n            }\n            else {\n                this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n                // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n                if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                    this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n                }\n\n                if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                    this.refreshCols._.totalCols = this.settings.maxCols;\n                }\n            }\n\n            if (this.refreshCols._.totalCols === 0) {\n                this.refreshCols._.totalCols = 1;\n            }\n\n            // Same number of columns as before?\n            if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            this.totalCols = this.refreshCols._.totalCols;\n            this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n            // Temporarily stop listening to container resizes\n            this.removeListener(this.$container, 'resize');\n\n            if (this.settings.fillMode === 'grid') {\n                this.refreshCols._.itemIndex = 0;\n\n                while (this.refreshCols._.itemIndex < this.items.length) {\n                    // Append the next X items and figure out which one is the tallest\n                    this.refreshCols._.tallestItemHeight = -1;\n                    this.refreshCols._.colIndex = 0;\n\n                    for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                        this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                        if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                            this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                        }\n\n                        this.refreshCols._.colIndex++;\n                    }\n\n                    if (this.settings.snapToGrid) {\n                        this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                        if (this.refreshCols._.remainder) {\n                            this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                        }\n                    }\n\n                    // Now set their heights to the tallest one\n                    for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                        this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                    }\n\n                    // set the this.refreshCols._.itemIndex pointer to the next one up\n                    this.refreshCols._.itemIndex += this.totalCols;\n                }\n            }\n            else {\n                this.removeListener(this.$items, 'resize');\n\n                // If there's only one column, sneak out early\n                if (this.totalCols === 1) {\n                    this.$container.height('auto');\n                    this.$items\n                        .show()\n                        .css({\n                            position: 'relative',\n                            width: 'auto',\n                            top: 0\n                        })\n                        .css(Craft.left, 0);\n                }\n                else {\n                    this.$items.css('position', 'absolute');\n                    this.colPctWidth = (100 / this.totalCols);\n\n                    // The setup\n\n                    this.layouts = [];\n\n                    this.itemPositions = [];\n                    this.itemColspansByPosition = [];\n\n                    // Figure out all of the possible colspans for each item,\n                    // as well as all the possible positions for each item at each of its colspans\n\n                    this.possibleItemColspans = [];\n                    this.possibleItemPositionsByColspan = [];\n                    this.itemHeightsByColspan = [];\n\n                    for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                        this.possibleItemColspans[this.refreshCols._.item] = [];\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                        this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                        this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                        this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                        this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                        this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                        this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                        if (this.refreshCols._.minColspan > this.totalCols) {\n                            this.refreshCols._.minColspan = this.totalCols;\n                        }\n                        if (this.refreshCols._.maxColspan > this.totalCols) {\n                            this.refreshCols._.maxColspan = this.totalCols;\n                        }\n\n                        for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                            // Get the height for this colspan\n                            this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                            this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                            this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                            if (this.refreshCols._.positionLeft) {\n                                this.refreshCols._.minPosition = 0;\n                                this.refreshCols._.maxPosition = 0;\n                            }\n                            else if (this.refreshCols._.positionRight) {\n                                this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                                this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                            }\n                            else {\n                                this.refreshCols._.minPosition = 0;\n                                this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                            }\n\n                            for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                                this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                            }\n                        }\n                    }\n\n                    // Find all the possible layouts\n\n                    this.refreshCols._.colHeights = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                        this.refreshCols._.colHeights.push(0);\n                    }\n\n                    this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                    // Now find the layout that looks the best.\n\n                    // First find the layouts with the highest number of used columns\n                    this.refreshCols._.layoutTotalCols = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                        this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                                this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                            }\n                        }\n                    }\n\n                    this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                    // Filter out the ones that aren't using as many columns as they could be\n                    for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                        if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                            this.layouts.splice(this.refreshCols._.i, 1);\n                        }\n                    }\n\n                    // Find the layout(s) with the least overall height\n                    this.refreshCols._.layoutHeights = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                        this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                    }\n\n                    this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                    this.refreshCols._.shortestLayouts = [];\n                    this.refreshCols._.emptySpaces = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                        if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                            this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                            // Now get its total empty space, including any trailing empty space\n                            this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                            for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                                this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                            }\n\n                            this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                        }\n                    }\n\n                    // And the layout with the least empty space is...\n                    this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                    // Set the item widths and left positions\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                        this.refreshCols._.css = {\n                            width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                        };\n                        this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                        this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                    }\n\n                    // If every item is at position 0, then let them lay out au naturel\n                    if (this.isSimpleLayout()) {\n                        this.$container.height('auto');\n                        this.$items.css({\n                            position: 'relative',\n                            top: 0,\n                            'margin-bottom': this.settings.gutter+'px'\n                        });\n                    }\n                    else {\n                        this.$items.css('position', 'absolute');\n\n                        // Now position the items\n                        this.positionItems();\n\n                        // Update the positions as the items' heigthts change\n                        this.addListener(this.$items, 'resize', 'onItemResize');\n                    }\n                }\n            }\n\n            this.completeRefreshCols();\n\n            // Resume container resize listening\n            this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n            this.onRefreshCols();\n        },\n\n        completeRefreshCols: function() {\n            // Delete the internal variable object\n            if (typeof this.refreshCols._ !== 'undefined') {\n                delete this.refreshCols._;\n            }\n\n            this._refreshingCols = false;\n\n            if (this._refreshColsAfterRefresh) {\n                var force = this._forceRefreshColsAfterRefresh;\n                this._refreshColsAfterRefresh = false;\n                this._forceRefreshColsAfterRefresh = false;\n\n                Garnish.requestAnimationFrame($.proxy(function() {\n                    this.refreshCols(force);\n                }, this));\n            }\n        },\n\n        getItemWidth: function(colspan) {\n            return (this.colPctWidth * colspan);\n        },\n\n        getItemWidthCss: function(colspan) {\n            return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n        },\n\n        getItemWidthInPx: function(colspan) {\n            return this.getItemWidth(colspan)/100 * this.$container.width() - this.colGutterDrop;\n        },\n\n        getItemLeftPosCss: function(position) {\n            return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n        },\n\n        getItemLeftPosInPx: function(position) {\n            return (this.getItemWidth(1)/100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n        },\n\n        createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n            (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n        },\n\n        isSimpleLayout: function() {\n            this.isSimpleLayout._ = {};\n\n            for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n                if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                    delete this.isSimpleLayout._;\n                    return false;\n                }\n            }\n\n            delete this.isSimpleLayout._;\n            return true;\n        },\n\n        positionItems: function() {\n            this.positionItems._ = {};\n\n            this.positionItems._.colHeights = [];\n\n            for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n                this.positionItems._.colHeights.push(0);\n            }\n\n            for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n                this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n                this.positionItems._.affectedColHeights = [];\n\n                for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                    this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n                }\n\n                this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n                if (this.positionItems._.top > 0) {\n                    this.positionItems._.top += this.settings.gutter;\n                }\n\n                this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n                // Now add the new heights to those columns\n                for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                    this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n                }\n            }\n\n            // Set the container height\n            this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n            delete this.positionItems._;\n        },\n\n        onItemResize: function(ev) {\n            this.onItemResize._ = {};\n\n            // Prevent this from bubbling up to the container, which has its own resize listener\n            ev.stopPropagation();\n\n            this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n            if (this.onItemResize._.item !== -1) {\n                // Update the height and reposition the items\n                this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n                if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                    this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                    this.positionItems(false);\n                }\n            }\n\n            delete this.onItemResize._;\n        },\n\n        onRefreshCols: function() {\n            this.trigger('refreshCols');\n            this.settings.onRefreshCols();\n        }\n    },\n    {\n        defaults: {\n            itemSelector: '.item',\n            cols: null,\n            maxCols: null,\n            minColWidth: 320,\n            gutter: 14,\n            fillMode: 'top',\n            colClass: 'col',\n            snapToGrid: null,\n\n            onRefreshCols: $.noop\n        }\n    });\n\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend(\n    {\n        grid: null,\n        _: null,\n\n        init: function(grid) {\n            this.grid = grid;\n        },\n\n        createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n            this._ = {};\n\n            // Loop through all possible colspans\n            for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n                this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n                // Loop through all the possible positions for this colspan,\n                // and find the one that is closest to the top\n\n                this._.tallestColHeightsByPosition = [];\n\n                for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                    this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                    this._.colHeightsForPosition = [];\n                    this._.endingCol = this._.position + this._.colspan - 1;\n\n                    for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                        this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                    }\n\n                    this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n                }\n\n                // And the shortest position for this colspan is...\n                this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                // Now log the colspan/position placement\n                this._.positions = prevPositions.slice(0);\n                this._.colspans = prevColspans.slice(0);\n                this._.colHeights = prevColHeights.slice(0);\n                this._.emptySpace = prevEmptySpace;\n\n                this._.positions.push(this._.position);\n                this._.colspans.push(this._.colspan);\n\n                // Add the new heights to those columns\n                this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                    this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n                }\n\n                // If this is the last item, create the layout\n                if (item === this.grid.items.length - 1) {\n                    this.grid.layouts.push({\n                        positions: this._.positions,\n                        colspans: this._.colspans,\n                        colHeights: this._.colHeights,\n                        emptySpace: this._.emptySpace\n                    });\n                }\n                else {\n                    // Dive deeper\n                    this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n                }\n            }\n\n            delete this._;\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n            // Remove inner-word punctuation\n            handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n            // Make it lowercase\n            handle = handle.toLowerCase();\n\n            // Convert extended ASCII characters to basic ASCII\n            handle = Craft.asciiString(handle);\n\n            if (!this.settings.allowNonAlphaStart) {\n                // Handle must start with a letter\n                handle = handle.replace(/^[^a-z]+/, '');\n            }\n\n            // Get the \"words\"\n            var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n            handle = '';\n\n            // Make it camelCase\n            for (var i = 0; i < words.length; i++) {\n                if (i === 0) {\n                    handle += words[i];\n                }\n                else {\n                    handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n                }\n            }\n\n            return handle;\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend(\n    {\n        $container: null,\n        progressBar: null,\n        uploader: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.ImageUpload.defaults);\n            this.initImageUpload();\n        },\n\n        initImageUpload: function() {\n            this.$container = $(this.settings.containerSelector);\n            this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n            var options = {\n                url: Craft.getActionUrl(this.settings.uploadAction),\n                formData: this.settings.postParameters,\n                fileInput: this.$container.find(this.settings.fileInputSelector),\n                paramName: this.settings.uploadParamName\n            };\n\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            options.events = {};\n            options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n            options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n            options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n            options.events.fileuploadfail = $.proxy(this, '_onUploadError');\n\n            this.uploader = new Craft.Uploader(this.$container, options);\n\n            this.initButtons();\n        },\n\n        initButtons: function() {\n            this.$container.find(this.settings.uploadButtonSelector).on('click', $.proxy(function(ev) {\n                this.$container.find(this.settings.fileInputSelector).trigger('click');\n            }, this));\n\n            this.$container.find(this.settings.deleteButtonSelector).on('click', $.proxy(function(ev) {\n                if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                    $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                    Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            this.refreshImage(response);\n                        }\n                    }, this));\n                }\n            }, this));\n        },\n\n        refreshImage: function(response) {\n            $(this.settings.containerSelector).replaceWith(response.html);\n            this.settings.onAfterRefreshImage(response);\n            this.initImageUpload();\n        },\n\n        /**\n         * On upload start.\n         */\n        _onUploadStart: function(event) {\n            this.progressBar.$progressBar.css({\n                top: Math.round(this.$container.outerHeight() / 2) - 6\n            });\n\n            this.$container.addClass('uploading');\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n        },\n\n        /**\n         * On upload progress.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadComplete: function(event, data) {\n            if (data.result.error) {\n                alert(data.result.error);\n            } else {\n                var html = $(data.result.html);\n                this.refreshImage(data.result);\n            }\n\n            // Last file\n            if (this.uploader.isLastUpload()) {\n                this.progressBar.hideProgressBar();\n                this.$container.removeClass('uploading');\n            }\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadError: function(event, data) {\n            if (data.jqXHR.responseJSON.error) {\n                alert(data.jqXHR.responseJSON.error);\n                this.$container.removeClass('uploading');\n                this.progressBar.hideProgressBar();\n                this.progressBar.resetProgressBar();\n            }\n        }\n    },\n    {\n        defaults: {\n            postParameters: {},\n            uploadAction: \"\",\n            deleteAction: \"\",\n            fileInputSelector: \"\",\n\n            onAfterRefreshImage: $.noop,\n            containerSelector: null,\n\n            uploadButtonSelector: null,\n            deleteButtonSelector: null,\n\n            uploadParamName: 'files'\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend(\n    {\n        $icon: null,\n        hud: null,\n\n        init: function(icon) {\n            this.$icon = $(icon);\n            if (this.$icon.data('infoicon')) {\n                Garnish.log('Double-instantiating an info icon on an element');\n                this.$icon.data('infoicon').destroy();\n            }\n            this.$icon.data('infoicon', this);\n            this.addListener(this.$icon, 'click', 'showHud');\n        },\n\n        showHud: function(ev) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            if (!this.hud) {\n                this.hud = new Garnish.HUD(this.$icon, this.$icon.html(), {\n                    hudClass: 'hud info-hud',\n                    closeOtherHUDs: false\n                });\n            }\n            else {\n                this.hud.show();\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend(\n    {\n        settings: null,\n        $outerContainer: null,\n        $innerContainer: null,\n        $input: null,\n        small: false,\n        on: false,\n        indeterminate: false,\n        dragger: null,\n\n        dragStartMargin: null,\n\n        init: function(outerContainer, settings) {\n            this.$outerContainer = $(outerContainer);\n\n            // Is this already a lightswitch?\n            if (this.$outerContainer.data('lightswitch')) {\n                Garnish.log('Double-instantiating a lightswitch on an element');\n                this.$outerContainer.data('lightswitch').destroy();\n            }\n\n            this.$outerContainer.data('lightswitch', this);\n\n            this.small = this.$outerContainer.hasClass('small');\n\n            this.setSettings(settings, Craft.LightSwitch.defaults);\n\n            this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n            this.$input = this.$outerContainer.find('input:first');\n\n            // If the input is disabled, go no further\n            if (this.$input.prop('disabled')) {\n                return;\n            }\n\n            this.on = this.$outerContainer.hasClass('on');\n            this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n            this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n            this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n            this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n                axis: Garnish.X_AXIS,\n                ignoreHandleSelector: null,\n                onDragStart: $.proxy(this, '_onDragStart'),\n                onDrag: $.proxy(this, '_onDrag'),\n                onDragStop: $.proxy(this, '_onDragStop')\n            });\n\n            if (this.$outerContainer.attr('id')) {\n                $(`label[for=\"${this.$outerContainer.attr('id')}\"]`).on('click', () => {\n                    this.$outerContainer.focus();\n                });\n            }\n\n            // Does the input have on/off labels?\n            let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n            if ($wrapper.length) {\n                this.addListener($wrapper.children('label[data-toggle=\"off\"]'), 'click', this.turnOff);\n                this.addListener($wrapper.children('label[data-toggle=\"on\"]'), 'click', this.turnOn);\n            }\n        },\n\n        turnOn: function(muteEvent) {\n            var changed = !this.on;\n\n            this.on = true;\n            this.indeterminate = false;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val(this.settings.value);\n            this.$outerContainer.addClass('on');\n            this.$outerContainer.removeClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'true');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        turnOff: function(muteEvent) {\n            var changed = this.on || this.indeterminate;\n\n            this.on = false;\n            this.indeterminate = false;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = this._getOffMargin();\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val('');\n            this.$outerContainer.removeClass('on');\n            this.$outerContainer.removeClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'false');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        turnIndeterminate: function(muteEvent) {\n            var changed = !this.indeterminate;\n\n            this.on = false;\n            this.indeterminate = true;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val(this.settings.indeterminateValue);\n            this.$outerContainer.removeClass('on');\n            this.$outerContainer.addClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'mixed');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        toggle: function() {\n            if (this.indeterminate || !this.on) {\n                this.turnOn();\n            } else {\n                this.turnOff();\n            }\n        },\n\n        onChange: function() {\n            this.trigger('change');\n            this.settings.onChange(this.on);\n            this.$outerContainer.trigger('change');\n        },\n\n        _onMouseDown: function() {\n            this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n        },\n\n        _onMouseUp: function() {\n            this.removeListener(Garnish.$doc, 'mouseup');\n\n            // Was this a click?\n            if (!this.dragger.dragging) {\n                this.toggle();\n            }\n        },\n\n        _onKeyDown: function(event) {\n            switch (event.keyCode) {\n                case Garnish.SPACE_KEY: {\n                    this.toggle();\n                    event.preventDefault();\n                    break;\n                }\n                case Garnish.RIGHT_KEY: {\n                    if (Craft.orientation === 'ltr') {\n                        this.turnOn();\n                    }\n                    else {\n                        this.turnOff();\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n                case Garnish.LEFT_KEY: {\n                    if (Craft.orientation === 'ltr') {\n                        this.turnOff();\n                    }\n                    else {\n                        this.turnOn();\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n            }\n        },\n\n        _getMargin: function() {\n            return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n        },\n\n        _onDragStart: function() {\n            this.$outerContainer.addClass('dragging');\n            this.dragStartMargin = this._getMargin();\n        },\n\n        _onDrag: function() {\n            var margin;\n\n            if (Craft.orientation === 'ltr') {\n                margin = this.dragStartMargin + this.dragger.mouseDistX;\n            }\n            else {\n                margin = this.dragStartMargin - this.dragger.mouseDistX;\n            }\n\n            if (margin < this._getOffMargin()) {\n                margin = this._getOffMargin();\n            }\n            else if (margin > 0) {\n                margin = 0;\n            }\n\n            this.$innerContainer.css('margin-' + Craft.left, margin);\n        },\n\n        _onDragStop: function() {\n            var margin = this._getMargin();\n            console.log(margin);\n\n            if (margin > (this._getOffMargin() / 2)) {\n                this.turnOn();\n            } else {\n                this.turnOff();\n            }\n        },\n\n        _onSettle: function() {\n            this.$outerContainer.removeClass('dragging');\n        },\n\n        destroy: function() {\n            this.base();\n            this.dragger.destroy();\n        },\n\n        _getOffMargin: function() {\n            return (this.small ? -10 : -12);\n        }\n    }, {\n        animationDuration: 100,\n        defaults: {\n            value: '1',\n            indeterminateValue: '-',\n            onChange: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend(\n    {\n        $extraFields: null,\n        $trigger: null,\n        $shade: null,\n        $editorContainer: null,\n        $editor: null,\n        $dragHandle: null,\n        $previewContainer: null,\n        $iframeContainer: null,\n        $iframe: null,\n        $fieldPlaceholder: null,\n\n        previewUrl: null,\n        token: null,\n        basePostData: null,\n        inPreviewMode: false,\n        fields: null,\n        lastPostData: null,\n        updateIframeInterval: null,\n        loading: false,\n        checkAgain: false,\n\n        dragger: null,\n        dragStartEditorWidth: null,\n\n        _slideInOnIframeLoad: false,\n        _handleSuccessProxy: null,\n        _handleErrorProxy: null,\n        _forceUpdateIframeProxy: null,\n\n        _scrollX: null,\n        _scrollY: null,\n\n        _editorWidth: null,\n        _editorWidthInPx: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.LivePreview.defaults);\n\n            // Should preview requests use a specific URL?\n            // This won't affect how the request gets routed (the action param will override it),\n            // but it will allow the templates to change behavior based on the request URI.\n            if (this.settings.previewUrl) {\n                this.previewUrl = this.settings.previewUrl;\n            }\n            else {\n                this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n            }\n\n            // Load the preview over SSL if the current request is\n            if (document.location.protocol === 'https:') {\n                this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n            }\n\n            // Set the base post data\n            this.basePostData = $.extend({}, this.settings.previewParams);\n\n            this._handleSuccessProxy = $.proxy(this, 'handleSuccess');\n            this._handleErrorProxy = $.proxy(this, 'handleError');\n            this._forceUpdateIframeProxy = $.proxy(this, 'forceUpdateIframe');\n\n            // Find the DOM elements\n            this.$extraFields = $(this.settings.extraFields);\n            this.$trigger = $(this.settings.trigger);\n            this.$fieldPlaceholder = $('<div/>');\n\n            // Set the initial editor width\n            this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n            // Event Listeners\n            this.addListener(this.$trigger, 'activate', 'toggle');\n\n            Craft.cp.on('beforeSaveShortcut', $.proxy(function() {\n                if (this.inPreviewMode) {\n                    this.moveFieldsBack();\n                }\n            }, this));\n        },\n\n        get editorWidth() {\n            return this._editorWidth;\n        },\n\n        get editorWidthInPx() {\n            return this._editorWidthInPx;\n        },\n\n        set editorWidth(width) {\n            var inPx;\n\n            // Is this getting set in pixels?\n            if (width >= 1) {\n                inPx = width;\n                width /= Garnish.$win.width();\n            }\n            else {\n                inPx = Math.round(width * Garnish.$win.width());\n            }\n\n            // Make sure it's no less than the minimum\n            if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n                inPx = Craft.LivePreview.minEditorWidthInPx;\n                width = inPx / Garnish.$win.width();\n            }\n\n            this._editorWidth = width;\n            this._editorWidthInPx = inPx;\n        },\n\n        toggle: function() {\n            if (this.inPreviewMode) {\n                this.exit();\n            }\n            else {\n                this.enter();\n            }\n        },\n\n        enter: function() {\n            if (this.inPreviewMode) {\n                return;\n            }\n\n            if (!this.token) {\n                this.createToken();\n                return;\n            }\n\n            this.trigger('beforeEnter');\n\n            $(document.activeElement).trigger('blur');\n\n            if (!this.$editor) {\n                this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n                this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n                this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n                this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n                var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n                this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n                this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n                var $closeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Close Preview'),\n                }).appendTo($editorHeader);\n                $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n                let $saveBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Save'),\n                }).appendTo($editorHeader);\n\n                this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                    axis: Garnish.X_AXIS,\n                    onDragStart: $.proxy(this, '_onDragStart'),\n                    onDrag: $.proxy(this, '_onDrag'),\n                    onDragStop: $.proxy(this, '_onDragStop')\n                });\n\n                this.addListener($closeBtn, 'click', 'exit');\n                this.addListener($saveBtn, 'click', 'save');\n            }\n\n            // Set the sizes\n            this.handleWindowResize();\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n            this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n            this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            this.fields = [];\n            var $fields = $(this.settings.fields);\n\n            for (var i = 0; i < $fields.length; i++) {\n                var $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n\n            if (this.updateIframe()) {\n                this._slideInOnIframeLoad = true;\n            } else {\n                this.slideIn();\n            }\n\n            Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n            Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.inPreviewMode = true;\n            this.trigger('enter');\n        },\n\n        createToken: function() {\n            Craft.postActionRequest('live-preview/create-token', {\n                previewAction: this.settings.previewAction\n            }, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.token = response.token;\n                    this.enter();\n                }\n            }, this));\n        },\n\n        save: function() {\n            Craft.cp.submitPrimaryForm();\n        },\n\n        handleWindowResize: function() {\n            // Reset the width so the min width is enforced\n            this.editorWidth = this.editorWidth;\n\n            // Update the editor/iframe sizes\n            this.updateWidths();\n        },\n\n        slideIn: function() {\n            $('html').addClass('noscroll');\n            this.$shade.velocity('fadeIn');\n\n            this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', $.proxy(function() {\n                this.trigger('slideIn');\n                Garnish.$win.trigger('resize');\n            }, this));\n\n            this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', $.proxy(function() {\n                this.updateIframeInterval = setInterval($.proxy(this, 'updateIframe'), 1000);\n\n                this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                    if (ev.keyCode === Garnish.ESC_KEY) {\n                        this.exit();\n                    }\n                });\n            }, this));\n        },\n\n        exit: function() {\n            if (!this.inPreviewMode) {\n                return;\n            }\n\n            this.trigger('beforeExit');\n\n            $('html').removeClass('noscroll');\n\n            this.removeListener(Garnish.$win, 'resize');\n            this.removeListener(Garnish.$bod, 'keyup');\n\n            if (this.updateIframeInterval) {\n                clearInterval(this.updateIframeInterval);\n            }\n\n            this.moveFieldsBack();\n\n            this.$shade.delay(200).velocity('fadeOut');\n\n            this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', $.proxy(function() {\n                for (var i = 0; i < this.fields.length; i++) {\n                    this.fields[i].$newClone.remove();\n                }\n                this.$editorContainer.hide();\n                this.trigger('slideOut');\n            }, this));\n\n            this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', $.proxy(function() {\n                this.$previewContainer.hide();\n            }, this));\n\n            Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.inPreviewMode = false;\n            this.trigger('exit');\n        },\n\n        moveFieldsBack: function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                var field = this.fields[i];\n                field.$newClone = this._getClone(field.$field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter(field.$field);\n                field.$field.detach();\n                this.$fieldPlaceholder.replaceWith(field.$newClone);\n                field.$clone.replaceWith(field.$field);\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        getIframeWidth: function() {\n            return Garnish.$win.width() - this.editorWidthInPx;\n        },\n\n        updateWidths: function() {\n            this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n            this.$previewContainer.width(this.getIframeWidth());\n        },\n\n        updateIframe: function(force) {\n            if (force) {\n                this.lastPostData = null;\n            }\n\n            if (!this.inPreviewMode) {\n                return false;\n            }\n\n            if (this.loading) {\n                this.checkAgain = true;\n                return false;\n            }\n\n            // Has the post data changed?\n            var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n            if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n                this.lastPostData = postData;\n                this.loading = true;\n\n                var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n                this._scrollX = $doc ? $doc.scrollLeft() : 0;\n                this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n                $.ajax({\n                    url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                    method: 'POST',\n                    data: $.extend({}, postData, this.basePostData),\n                    headers: {\n                        'X-Craft-Token': this.token\n                    },\n                    xhrFields: {\n                        withCredentials: true\n                    },\n                    crossDomain: true,\n                    success: this._handleSuccessProxy,\n                    error: this._handleErrorProxy\n                });\n\n                return true;\n            }\n            else {\n                return false;\n            }\n        },\n\n        forceUpdateIframe: function() {\n            return this.updateIframe(true);\n        },\n\n        handleSuccess: function(data) {\n            var html = data +\n                '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n            // Create a new iframe\n            var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n            if (this.$iframe) {\n                $iframe.insertBefore(this.$iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            this.addListener($iframe, 'load', function() {\n                if (this.$iframe) {\n                    this.$iframe.remove();\n                }\n                this.$iframe = $iframe;\n\n                if (this._slideInOnIframeLoad) {\n                    this.slideIn();\n                    this._slideInOnIframeLoad = false;\n                }\n\n                this.removeListener($iframe, 'load');\n            });\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                $iframe[0].contentWindow.document.open();\n                $iframe[0].contentWindow.document.write(html);\n                $iframe[0].contentWindow.document.close();\n                this.onResponse();\n            }, this));\n        },\n\n        handleError: function() {\n            this.onResponse();\n        },\n\n        onResponse: function() {\n            this.loading = false;\n\n            if (this.checkAgain) {\n                this.checkAgain = false;\n                this.updateIframe();\n            }\n        },\n\n        _getClone: function($field) {\n            var $clone = $field.clone();\n\n            // clone() won't account for input values that have changed since the original HTML set them\n            Garnish.copyInputValues($field, $clone);\n\n            // Remove any id= attributes\n            $clone.attr('id', '');\n            $clone.find('[id]').attr('id', '');\n\n            return $clone;\n        },\n\n        _onDragStart: function() {\n            this.dragStartEditorWidth = this.editorWidthInPx;\n            this.$previewContainer.addClass('dragging');\n        },\n\n        _onDrag: function() {\n            if (Craft.orientation === 'ltr') {\n                this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n            }\n            else {\n                this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n            }\n\n            this.updateWidths();\n        },\n\n        _onDragStop: function() {\n            this.$previewContainer.removeClass('dragging');\n            Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n        }\n    },\n    {\n        defaultEditorWidth: 0.33,\n        minEditorWidthInPx: 320,\n\n        defaults: {\n            trigger: '.livepreviewbtn',\n            fields: null,\n            extraFields: null,\n            previewUrl: null,\n            previewAction: null,\n            previewParams: {}\n        }\n    });\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend(\n    {\n        $passwordWrapper: null,\n        $passwordInput: null,\n        $textInput: null,\n        $currentInput: null,\n\n        $showPasswordToggle: null,\n        showingPassword: null,\n\n        init: function(passwordInput, settings) {\n            this.$passwordInput = $(passwordInput);\n            this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n            this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n            // Is this already a password input?\n            if (this.$passwordInput.data('passwordInput')) {\n                Garnish.log('Double-instantiating a password input on an element');\n                this.$passwordInput.data('passwordInput').destroy();\n            }\n\n            this.$passwordInput.data('passwordInput', this);\n\n            this.$showPasswordToggle = $('<a/>').addClass('invisible');\n            this.$showPasswordToggle.addClass('password-toggle');\n            this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n            this.initInputFocusEvents(this.$passwordInput);\n            this.addListener(this.$showPasswordToggle, 'mousedown', 'onToggleMouseDown');\n            this.hidePassword();\n        },\n\n        setCurrentInput: function($input) {\n            if (this.$currentInput) {\n                // Swap the inputs, while preventing the focus animation\n                $input.insertAfter(this.$currentInput);\n                this.$currentInput.detach();\n                $input.trigger('focus');\n\n                // Restore the input value\n                $input.val(this.$currentInput.val());\n            }\n\n            this.$currentInput = $input;\n\n            this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n        },\n\n        updateToggleLabel: function(label) {\n            this.$showPasswordToggle.text(label);\n        },\n\n        initInputFocusEvents: function($input) {\n            this.addListener($input, 'focus', function() {\n                this.$passwordWrapper.addClass('focus');\n            });\n            this.addListener($input, 'blur', function() {\n                this.$passwordWrapper.removeClass('focus');\n            });\n        },\n\n        showPassword: function() {\n            if (this.showingPassword) {\n                return;\n            }\n\n            if (!this.$textInput) {\n                this.$textInput = this.$passwordInput.clone(true);\n                this.$textInput.attr('type', 'text');\n                this.initInputFocusEvents(this.$textInput);\n            }\n\n            this.setCurrentInput(this.$textInput);\n            this.updateToggleLabel(Craft.t('app', 'Hide'));\n            this.showingPassword = true;\n        },\n\n        hidePassword: function() {\n            // showingPassword could be null, which is acceptable\n            if (this.showingPassword === false) {\n                return;\n            }\n\n            this.setCurrentInput(this.$passwordInput);\n            this.updateToggleLabel(Craft.t('app', 'Show'));\n            this.showingPassword = false;\n\n            // Alt key temporarily shows the password\n            this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n        },\n\n        togglePassword: function() {\n            if (this.showingPassword) {\n                this.hidePassword();\n            }\n            else {\n                this.showPassword();\n            }\n\n            this.settings.onToggleInput(this.$currentInput);\n        },\n\n        onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n                this.showPassword();\n                this.$showPasswordToggle.addClass('invisible');\n                this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n            }\n        },\n\n        onKeyUp: function(ev) {\n            ev.preventDefault();\n\n            if (ev.keyCode === Garnish.ALT_KEY) {\n                this.hidePassword();\n                this.$showPasswordToggle.removeClass('invisible');\n            }\n        },\n\n        onInputChange: function() {\n            if (this.$currentInput.val()) {\n                this.$showPasswordToggle.removeClass('invisible');\n            }\n            else {\n                this.$showPasswordToggle.addClass('invisible');\n            }\n        },\n\n        onToggleMouseDown: function(ev) {\n            // Prevent focus change\n            ev.preventDefault();\n\n            if (this.$currentInput[0].setSelectionRange) {\n                var selectionStart = this.$currentInput[0].selectionStart,\n                    selectionEnd = this.$currentInput[0].selectionEnd;\n\n                this.togglePassword();\n                this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n            }\n            else {\n                this.togglePassword();\n            }\n        }\n    },\n    {\n        defaults: {\n            onToggleInput: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend(\n    {\n        draftEditor: null,\n\n        $shade: null,\n        $editorContainer: null,\n        $editor: null,\n        $spinner: null,\n        $statusIcon: null,\n        $dragHandle: null,\n        $previewContainer: null,\n        $iframeContainer: null,\n        $targetBtn: null,\n        $targetMenu: null,\n        $iframe: null,\n        iframeLoaded: false,\n        $tempInput: null,\n        $fieldPlaceholder: null,\n\n        isActive: false,\n        isVisible: false,\n        activeTarget: 0,\n        draftId: null,\n        url: null,\n        fields: null,\n\n        iframeHeight: null,\n        scrollTop: null,\n\n        dragger: null,\n        dragStartEditorWidth: null,\n\n        _updateIframeProxy: null,\n\n        _editorWidth: null,\n        _editorWidthInPx: null,\n\n        init: function(draftEditor) {\n            this.draftEditor = draftEditor;\n\n            this._updateIframeProxy = $.proxy(this,'updateIframe');\n\n            this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n            this.$fieldPlaceholder = $('<div/>');\n\n            // Set the initial editor width\n            this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n        },\n\n        get editorWidth() {\n            return this._editorWidth;\n        },\n\n        get editorWidthInPx() {\n            return this._editorWidthInPx;\n        },\n\n        set editorWidth(width) {\n            var inPx;\n\n            // Is this getting set in pixels?\n            if (width >= 1) {\n                inPx = width;\n                width /= Garnish.$win.width();\n            } else {\n                inPx = Math.round(width * Garnish.$win.width());\n            }\n\n            // Make sure it's no less than the minimum\n            if (inPx < Craft.Preview.minEditorWidthInPx) {\n                inPx = Craft.Preview.minEditorWidthInPx;\n                width = inPx / Garnish.$win.width();\n            }\n\n            this._editorWidth = width;\n            this._editorWidthInPx = inPx;\n        },\n\n        open: function() {\n            if (this.isActive) {\n                return;\n            }\n\n            this.isActive = true;\n            this.trigger('beforeOpen');\n\n            $(document.activeElement).trigger('blur');\n\n            if (!this.$editor) {\n                this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n                this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n                this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n                var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n                this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n                this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n                var $closeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Close Preview'),\n                }).appendTo($editorHeader);\n                $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n                this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n                this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    var $previewHeader = $('<header/>', {'class': 'lp-preview-header flex'}).appendTo(this.$previewContainer);\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo($previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    var $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    var $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n                }\n\n                this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n                this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                    axis: Garnish.X_AXIS,\n                    onDragStart: this._onDragStart.bind(this),\n                    onDrag: this._onDrag.bind(this),\n                    onDragStop: this._onDragStop.bind(this),\n                });\n\n                this.addListener($closeBtn, 'click', 'close');\n                this.addListener(this.$statusIcon, 'click', () => {\n                    this.draftEditor.showStatusHud(this.$statusIcon);\n                });\n            }\n\n            // Set the sizes\n            this.handleWindowResize();\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n            this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n            this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n            // Find the fields, excluding nested fields\n            this.fields = [];\n            var $fields = $('#content .field').not($('#content .field .field'));\n\n            if ($fields.length) {\n                // Insert our temporary input before the first field so we know where to swap in the serialized form values\n                this.$tempInput.insertBefore($fields.get(0));\n\n                // Move all the fields into the editor rather than copying them\n                // so any JS that's referencing the elements won't break.\n                for (let i = 0; i < $fields.length; i++) {\n                    let $field = $($fields[i]),\n                        $clone = this._getClone($field);\n\n                    // It's important that the actual field is added to the DOM *after* the clone,\n                    // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                    this.$fieldPlaceholder.insertAfter($field);\n                    $field.detach();\n                    this.$fieldPlaceholder.replaceWith($clone);\n                    $field.appendTo(this.$editor);\n\n                    this.fields.push({\n                        $field: $field,\n                        $clone: $clone\n                    });\n                }\n            }\n\n            this.updateIframe();\n\n            this.draftEditor.on('update', this._updateIframeProxy);\n            Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n            Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.trigger('open');\n        },\n\n        switchTarget: function(i) {\n            this.activeTarget = i;\n            this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n            this.$targetMenu.find('a.sel').removeClass('sel');\n            this.$targetMenu.find('a').eq(i).addClass('sel');\n            this.updateIframe(true);\n            this.trigger('switchTarget', {\n                previewTarget: this.draftEditor.settings.previewTargets[i],\n            });\n        },\n\n        handleWindowResize: function() {\n            // Reset the width so the min width is enforced\n            this.editorWidth = this.editorWidth;\n\n            // Update the editor/iframe sizes\n            this.updateWidths();\n        },\n\n        slideIn: function() {\n            if (!this.isActive || this.isVisible) {\n                return;\n            }\n\n            $('html').addClass('noscroll');\n            this.$shade.velocity('fadeIn');\n\n            this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n                this.trigger('slideIn');\n                Garnish.$win.trigger('resize');\n            });\n\n            this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n                this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                    if (ev.keyCode === Garnish.ESC_KEY) {\n                        this.close();\n                    }\n                });\n            });\n\n            this.isVisible = true;\n        },\n\n        close: function() {\n            if (!this.isActive || !this.isVisible) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n\n            $('html').removeClass('noscroll');\n\n            this.removeListener(Garnish.$win, 'resize');\n            this.removeListener(Garnish.$bod, 'keyup');\n\n            // Remove our temporary input and move the preview fields back into place\n            this.$tempInput.detach();\n            this.moveFieldsBack();\n\n            this.$shade.delay(200).velocity('fadeOut');\n\n            this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n                for (var i = 0; i < this.fields.length; i++) {\n                    this.fields[i].$newClone.remove();\n                }\n                this.$editorContainer.hide();\n                this.trigger('slideOut');\n            });\n\n            this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n                this.$previewContainer.hide();\n            });\n\n            this.draftEditor.off('update', this._updateIframeProxy);\n            Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n            Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.isActive = false;\n            this.isVisible = false;\n            this.trigger('close');\n        },\n\n        moveFieldsBack: function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                var field = this.fields[i];\n                field.$newClone = this._getClone(field.$field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter(field.$field);\n                field.$field.detach();\n                this.$fieldPlaceholder.replaceWith(field.$newClone);\n                field.$clone.replaceWith(field.$field);\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        getIframeWidth: function() {\n            return Garnish.$win.width() - this.editorWidthInPx;\n        },\n\n        updateWidths: function() {\n            this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n            this.$previewContainer.width(this.getIframeWidth());\n        },\n\n        _useIframeResizer: function() {\n            return Craft.previewIframeResizerOptions !== false;\n        },\n\n        updateIframe: function(resetScroll) {\n            if (!this.isActive) {\n                return false;\n            }\n\n            // Ignore non-boolean resetScroll values\n            resetScroll = resetScroll === true;\n\n            var target = this.draftEditor.settings.previewTargets[this.activeTarget];\n            var refresh = !!(\n                this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n                !this.$iframe ||\n                resetScroll ||\n                typeof target.refresh === 'undefined' ||\n                target.refresh\n            );\n\n            this.trigger('beforeUpdateIframe', {\n                previewTarget: target,\n                resetScroll: resetScroll,\n                refresh: refresh,\n            });\n\n            // If this is an existing preview target, make sure it wants to be refreshed automatically\n            if (!refresh) {\n                this.slideIn();\n                return;\n            }\n\n            this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n                // Maintain the current scroll position?\n                let sameHost;\n                if (resetScroll) {\n                    this.scrollTop = null;\n                } else if (this.iframeLoaded && this.$iframe) {\n                    if (this._useIframeResizer()) {\n                        this.iframeHeight = this.$iframe.height();\n                        this.scrollTop = this.$iframeContainer.scrollTop();\n                    } else {\n                        sameHost = Craft.isSameHost(url);\n                        if (sameHost && this.$iframe[0].contentWindow) {\n                            this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                        }\n                    }\n                }\n\n                this.iframeLoaded = false;\n\n                var $iframe = $('<iframe/>', {\n                    'class': 'lp-preview',\n                    frameborder: 0,\n                    src: url,\n                });\n\n                if (this.$iframe) {\n                    this.$iframe.replaceWith($iframe);\n                } else {\n                    $iframe.appendTo(this.$iframeContainer);\n                }\n\n                // Keep the iframe height consistent with its content\n                if (this._useIframeResizer()) {\n                    if (!resetScroll && this.iframeHeight !== null) {\n                        $iframe.height(this.iframeHeight);\n                        this.$iframeContainer.scrollTop(this.scrollTop);\n                    }\n\n                    iFrameResize($.extend({\n                        checkOrigin: false,\n                        // Allow iframe scrolling until we've successfully initialized the resizer\n                        scrolling: true,\n                        onInit: iframe => {\n                            this.iframeLoaded = true;\n                            this.iframeHeight = null;\n                            this.scrollTop = null;\n                            iframe.scrolling = 'no';\n                        },\n                    }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n                } else {\n                    $iframe.on('load', () => {\n                        this.iframeLoaded = true;\n                        if (!resetScroll && sameHost && this.scrollTop !== null) {\n                            $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                        }\n                    });\n                }\n\n                this.url = url;\n                this.$iframe = $iframe;\n\n                this.trigger('afterUpdateIframe', {\n                    previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                    $iframe: this.$iframe,\n                });\n\n                this.slideIn();\n            });\n        },\n\n        _getClone: function($field) {\n            var $clone = $field.clone();\n\n            // clone() won't account for input values that have changed since the original HTML set them\n            Garnish.copyInputValues($field, $clone);\n\n            // Remove any id= attributes\n            $clone.attr('id', '');\n            $clone.find('[id]').attr('id', '');\n\n            // Disable anything with a name attribute\n            $clone.find('[name]').prop('disabled', true);\n\n            return $clone;\n        },\n\n        _onDragStart: function() {\n            this.dragStartEditorWidth = this.editorWidthInPx;\n            this.$previewContainer.addClass('dragging');\n        },\n\n        _onDrag: function() {\n            if (Craft.orientation === 'ltr') {\n                this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n            } else {\n                this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n            }\n\n            this.updateWidths();\n        },\n\n        _onDragStop: function() {\n            this.$previewContainer.removeClass('dragging');\n            Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n        }\n    },\n    {\n        defaultEditorWidth: 0.33,\n        minEditorWidthInPx: 320,\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend(\n    {\n        assetId: null,\n        $spinner: null,\n        elementSelect: null,\n        type: null,\n        loaded: null,\n        requestId: 0,\n\n        /**\n         * Initialize the preview file modal.\n         * @returns {*|void}\n         */\n        init: function(assetId, elementSelect, settings) {\n            settings = $.extend(this.defaultSettings, settings);\n\n            settings.onHide = this._onHide.bind(this);\n\n            if (Craft.PreviewFileModal.openInstance) {\n                var instance = Craft.PreviewFileModal.openInstance;\n\n                if (instance.assetId !== assetId) {\n                    instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                    instance.elementSelect = elementSelect;\n                }\n\n                return this.destroy();\n            }\n\n            Craft.PreviewFileModal.openInstance = this;\n            this.elementSelect = elementSelect;\n\n            this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n            this.base(this.$container, $.extend({\n                resizable: true\n            }, settings));\n\n            // Cut the flicker, just show the nice person the preview.\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.show().css('opacity', 1);\n\n                this.$shade.velocity('stop');\n                this.$shade.show().css('opacity', 1);\n            }\n\n            this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n        },\n\n        /**\n         * When hiding, remove all traces and focus last focused element.\n         * @private\n         */\n        _onHide: function () {\n            Craft.PreviewFileModal.openInstance = null;\n            if (this.elementSelect) {\n                this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n            }\n\n            this.$shade.remove();\n\n            return this.destroy();\n        },\n\n        /**\n         * Disappear immediately forever.\n         * @returns {boolean}\n         */\n        selfDestruct: function () {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            instance.hide();\n            instance.$shade.remove();\n            instance.destroy();\n\n            Craft.PreviewFileModal.openInstance = null;\n\n            return true;\n        },\n\n        /**\n         * Load an asset, using starting width and height, if applicable\n         * @param assetId\n         * @param startingWidth\n         * @param startingHeight\n         */\n        loadAsset: function (assetId, startingWidth, startingHeight) {\n            this.assetId = assetId;\n\n            this.$container.empty();\n            this.loaded = false;\n\n            this.desiredHeight = null;\n            this.desiredWidth = null;\n\n            var containerHeight = Garnish.$win.height() * 0.66;\n            var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = containerWidth / 4 * 3;\n\n            if (startingWidth && startingHeight) {\n                var ratio = startingWidth / startingHeight;\n                containerWidth =  Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n                containerWidth = containerHeight * ratio;\n\n                // This might actually have put width over the viewport limits, so doublecheck\n                if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                    containerWidth =  Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                    containerHeight = containerWidth / ratio;\n                }\n            }\n\n            this._resizeContainer(containerWidth, containerHeight);\n\n            this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n            var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n                left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n            this.$spinner.css({left: left, top: top, position: 'absolute'});\n            this.requestId++;\n\n            Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, function(response, textStatus) {\n                this.$container.removeClass('loading');\n                this.$spinner.remove();\n                this.loaded = true;\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        if (response.requestId != this.requestId) {\n                            return;\n                        }\n\n                        if (!response.previewHtml) {\n                            this.$container.addClass('zilch');\n                            this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                            return;\n                        }\n\n                        this.$container.removeClass('zilch');\n                        this.$container.append(response.previewHtml);\n                        Craft.appendHeadHtml(response.headHtml);\n                        Craft.appendFootHtml(response.footHtml);\n                    } else {\n                        alert(response.error);\n\n                        this.hide();\n                    }\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Resize the container to specified dimensions\n         * @param containerWidth\n         * @param containerHeight\n         * @private\n         */\n        _resizeContainer: function (containerWidth, containerHeight) {\n            this.$container.css({\n                'width': containerWidth,\n                'min-width': containerWidth,\n                'max-width': containerWidth,\n                'height': containerHeight,\n                'min-height': containerHeight,\n                'max-height': containerHeight,\n                'top': (Garnish.$win.height() - containerHeight) / 2,\n                'left': (Garnish.$win.width() - containerWidth) / 2\n            });\n        }\n    },\n    {\n        defaultSettings: {\n            startingWidth: null,\n            startingHeight: null\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend(\n    {\n        $progressBar: null,\n        $innerProgressBar: null,\n        $progressBarStatus: null,\n\n        _itemCount: 0,\n        _processedItemCount: 0,\n        _displaySteps: false,\n\n        init: function($element, displaySteps) {\n            if (displaySteps) {\n                this._displaySteps = true;\n            }\n\n            this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n            this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n            this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n            this.resetProgressBar();\n        },\n\n        /**\n         * Reset the progress bar\n         */\n        resetProgressBar: function() {\n            // Since setting the progress percentage implies that there is progress to be shown\n            // It removes the pending class - we must add it back.\n            this.setProgressPercentage(100);\n            this.$progressBar.addClass('pending');\n\n            // Reset all the counters\n            this.setItemCount(1);\n            this.setProcessedItemCount(0);\n            this.$progressBarStatus.html('');\n\n            if (this._displaySteps) {\n                this.$progressBar.addClass('has-status');\n            }\n        },\n\n        /**\n         * Fade to invisible, hide it using a class and reset opacity to visible\n         */\n        hideProgressBar: function() {\n            this.$progressBar.fadeTo('fast', 0.01, $.proxy(function() {\n                this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n            }, this));\n        },\n\n        showProgressBar: function() {\n            this.$progressBar.removeClass('hidden');\n            this.$progressBarStatus.removeClass('hidden');\n        },\n\n        setItemCount: function(count) {\n            this._itemCount = count;\n        },\n\n        incrementItemCount: function(count) {\n            this._itemCount += count;\n        },\n\n        setProcessedItemCount: function(count) {\n            this._processedItemCount = count;\n        },\n\n        incrementProcessedItemCount: function(count) {\n            this._processedItemCount += count;\n        },\n\n        updateProgressBar: function() {\n            // Only fools would allow accidental division by zero.\n            this._itemCount = Math.max(this._itemCount, 1);\n\n            var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n            this.setProgressPercentage(width);\n\n            if (this._displaySteps) {\n                this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n            }\n        },\n\n        setProgressPercentage: function(percentage, animate) {\n            if (percentage === 0) {\n                this.$progressBar.addClass('pending');\n            }\n            else {\n                this.$progressBar.removeClass('pending');\n\n                if (animate) {\n                    this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n                }\n                else {\n                    this.$innerProgressBar.velocity('stop').width(percentage + '%');\n                }\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, $.proxy(this, '_handleBatchPromptSelection'), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice: choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            }\n            else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        }\n        else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', $.proxy(function() {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        }, this));\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n\n(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value: value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n\n/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', $.proxy(this, '_handleResize'));\n        this.addListener(this.$container, 'tapstart', $.proxy(this, '_handleTapStart'));\n        this.addListener(Garnish.$bod, 'tapmove', $.proxy(this, '_handleTapMove'));\n        this.addListener(Garnish.$bod, 'tapend', $.proxy(this, '_handleTapEnd'));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout($.proxy(function() {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, this), 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        }\n        else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (( ( this.$graduations.width() / 2 ) + (position * -1) ) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n            // Remove inner-word punctuation\n            sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n            // Make it lowercase\n            if (!Craft.allowUppercaseInSlug) {\n                sourceVal = sourceVal.toLowerCase();\n            }\n\n            if (Craft.limitAutoSlugsToAscii) {\n                // Convert extended ASCII characters to basic ASCII\n                sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n            }\n\n            // Get the \"words\". Split on anything that is not alphanumeric.\n            // Reference: http://www.regular-expressions.info/unicode.html\n            var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n            if (words.length) {\n                return words.join(Craft.slugWordSeparator);\n            }\n            else {\n                return '';\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend(\n    {\n        id: null,\n\n        $container: null,\n        state: null,\n        structureDrag: null,\n\n        /**\n         * Init\n         */\n        init: function(id, container, settings) {\n            this.id = id;\n            this.$container = $(container);\n            this.setSettings(settings, Craft.Structure.defaults);\n\n            // Is this already a structure?\n            if (this.$container.data('structure')) {\n                Garnish.log('Double-instantiating a structure on an element');\n                this.$container.data('structure').destroy();\n            }\n\n            this.$container.data('structure', this);\n\n            this.state = {};\n\n            if (this.settings.storageKey) {\n                $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n            }\n\n            if (typeof this.state.collapsedElementIds === 'undefined') {\n                this.state.collapsedElementIds = [];\n            }\n\n            var $parents = this.$container.find('ul').prev('.row');\n\n            for (var i = 0; i < $parents.length; i++) {\n                var $row = $($parents[i]),\n                    $li = $row.parent(),\n                    $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n                if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                    $li.addClass('collapsed');\n                }\n\n                this.initToggle($toggle);\n            }\n\n            if (this.settings.sortable) {\n                this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n            }\n\n            if (this.settings.newChildUrl) {\n                this.initNewChildMenus(this.$container.find('.add'));\n            }\n        },\n\n        initToggle: function($toggle) {\n            $toggle.on('click', $.proxy(function(ev) {\n                var $li = $(ev.currentTarget).closest('li'),\n                    elementId = $li.children('.row').find('.element:first').data('id'),\n                    viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n                if ($li.hasClass('collapsed')) {\n                    $li.removeClass('collapsed');\n\n                    if (viewStateKey !== -1) {\n                        this.state.collapsedElementIds.splice(viewStateKey, 1);\n                    }\n                }\n                else {\n                    $li.addClass('collapsed');\n\n                    if (viewStateKey === -1) {\n                        this.state.collapsedElementIds.push(elementId);\n                    }\n                }\n\n                if (this.settings.storageKey) {\n                    Craft.setLocalStorage(this.settings.storageKey, this.state);\n                }\n            }, this));\n        },\n\n        initNewChildMenus: function($addBtns) {\n            this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n        },\n\n        onNewChildMenuClick: function(ev) {\n            var $btn = $(ev.currentTarget);\n\n            if (!$btn.data('menubtn')) {\n                var elementId = $btn.parent().children('.element').data('id'),\n                    newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n                $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n                var menuBtn = new Garnish.MenuBtn($btn);\n                menuBtn.showMenu();\n            }\n        },\n\n        getIndent: function(level) {\n            return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n        },\n\n        addElement: function($element) {\n            var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n                $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n            $row.append($element);\n\n            if (this.settings.sortable) {\n                $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n                this.structureDrag.addItems($li);\n            }\n\n            if (this.settings.newChildUrl) {\n                var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n                this.initNewChildMenus($addBtn);\n            }\n\n            $row.css('margin-bottom', -30);\n            $row.velocity({'margin-bottom': 0}, 'fast');\n        },\n\n        removeElement: function($element) {\n            var $li = $element.parent().parent();\n\n            if (this.settings.sortable) {\n                this.structureDrag.removeItems($li);\n            }\n\n            var $parentUl;\n\n            if (!$li.siblings().length) {\n                $parentUl = $li.parent();\n            }\n\n            $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', $.proxy(function() {\n                $li.remove();\n\n                if (typeof $parentUl !== 'undefined') {\n                    this._removeUl($parentUl);\n                }\n            }, this));\n        },\n\n        _removeUl: function($ul) {\n            $ul.siblings('.row').children('.toggle').remove();\n            $ul.remove();\n        }\n    },\n    {\n        baseIndent: 8,\n        nestedIndent: 35,\n\n        defaults: {\n            storageKey: null,\n            sortable: false,\n            newChildUrl: null,\n            maxLevels: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend(\n    {\n        structure: null,\n        maxLevels: null,\n        draggeeLevel: null,\n\n        $helperLi: null,\n        $targets: null,\n        draggeeHeight: null,\n\n        init: function(structure, maxLevels) {\n            this.structure = structure;\n            this.maxLevels = maxLevels;\n\n            this.$insertion = $('<li class=\"draginsertion\"/>');\n\n            var $items = this.structure.$container.find('li');\n\n            this.base($items, {\n                handle: '.element:first, .move:first',\n                helper: $.proxy(this, 'getHelper')\n            });\n        },\n\n        getHelper: function($helper) {\n            this.$helperLi = $helper;\n            var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n            $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n            $helper.find('.move').removeAttr('title');\n            return $ul;\n        },\n\n        onDragStart: function() {\n            this.$targets = $();\n\n            // Recursively find each of the targets, in the order they appear to be in\n            this.findTargets(this.structure.$container);\n\n            // How deep does the rabbit hole go?\n            this.draggeeLevel = 0;\n            var $level = this.$draggee;\n            do {\n                this.draggeeLevel++;\n                $level = $level.find('> ul > li');\n            } while ($level.length);\n\n            // Collapse the draggee\n            this.draggeeHeight = this.$draggee.height();\n            this.$draggee.velocity({\n                height: 0\n            }, 'fast', $.proxy(function() {\n                this.$draggee.addClass('hidden');\n            }, this));\n            this.base();\n\n            this.addListener(Garnish.$doc, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.cancelDrag();\n                }\n            });\n        },\n\n        findTargets: function($ul) {\n            var $lis = $ul.children().not(this.$draggee);\n\n            for (var i = 0; i < $lis.length; i++) {\n                var $li = $($lis[i]);\n                this.$targets = this.$targets.add($li.children('.row'));\n\n                if (!$li.hasClass('collapsed')) {\n                    this.findTargets($li.children('ul'));\n                }\n            }\n        },\n\n        onDrag: function() {\n            if (this._.$closestTarget) {\n                this._.$closestTarget.removeClass('draghover');\n                this.$insertion.remove();\n            }\n\n            // First let's find the closest target\n            this._.$closestTarget = null;\n            this._.closestTargetPos = null;\n            this._.closestTargetYDiff = null;\n            this._.closestTargetOffset = null;\n            this._.closestTargetHeight = null;\n\n            for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n                this._.$target = $(this.$targets[this._.i]);\n                this._.targetOffset = this._.$target.offset();\n                this._.targetHeight = this._.$target.outerHeight();\n                this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n                this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n                if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                    this._.$closestTarget = this._.$target;\n                    this._.closestTargetPos = this._.i;\n                    this._.closestTargetYDiff = this._.targetYDiff;\n                    this._.closestTargetOffset = this._.targetOffset;\n                    this._.closestTargetHeight = this._.targetHeight;\n                }\n                else {\n                    // Getting colder\n                    break;\n                }\n            }\n\n            if (!this._.$closestTarget) {\n                return;\n            }\n\n            // Are we hovering above the first row?\n            if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n                this.$insertion.prependTo(this.structure.$container);\n            }\n            else {\n                this._.$closestTargetLi = this._.$closestTarget.parent();\n                this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n                // Is there a next row?\n                if (this._.closestTargetPos < this.$targets.length - 1) {\n                    this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                    this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n                }\n                else {\n                    this._.$nextTargetLi = null;\n                    this._.nextTargetLevel = null;\n                }\n\n                // Are we hovering between this row and the next one?\n                this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n                /**\n                 * Scenario 1: Both rows have the same level.\n                 *\n                 *     * Row 1\n                 *     ----------------------\n                 *     * Row 2\n                 */\n\n                if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                    if (this._.hoveringBetweenRows) {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                            // Position the insertion after the closest target\n                            this.$insertion.insertAfter(this._.$closestTargetLi);\n                        }\n                    }\n                    else {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                            this._.$closestTarget.addClass('draghover');\n                        }\n                    }\n                }\n\n                /**\n                 * Scenario 2: Next row is a child of this one.\n                 *\n                 *     * Row 1\n                 *     ----------------------\n                 *         * Row 2\n                 */\n\n                else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                        if (this._.hoveringBetweenRows) {\n                            // Position the insertion as the first child of the closest target\n                            this.$insertion.insertBefore(this._.$nextTargetLi);\n                        }\n                        else {\n                            this._.$closestTarget.addClass('draghover');\n                            this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                        }\n                    }\n                }\n\n                /**\n                 * Scenario 3: Next row is a child of a parent node, or there is no next row.\n                 *\n                 *         * Row 1\n                 *     ----------------------\n                 *     * Row 2\n                 */\n\n                else {\n                    if (this._.hoveringBetweenRows) {\n                        // Determine which <li> to position the insertion after\n                        this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.draggeeX += this.$helperLi.width();\n                        }\n\n                        this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                        this._.$closestParentLi = null;\n                        this._.closestParentLiXDiff = null;\n                        this._.closestParentLevel = null;\n\n                        for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                            this._.$parentLi = $(this._.$parentLis[this._.i]);\n                            this._.parentLiX = this._.$parentLi.offset().left;\n\n                            if (Craft.orientation === 'rtl') {\n                                this._.parentLiX += this._.$parentLi.width();\n                            }\n\n                            this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                            this._.parentLevel = this._.$parentLi.data('level');\n\n                            if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                                    !this._.$closestParentLi || (\n                                        this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                        (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                                    )\n                                )) {\n                                this._.$closestParentLi = this._.$parentLi;\n                                this._.closestParentLiXDiff = this._.parentLiXDiff;\n                                this._.closestParentLevel = this._.parentLevel;\n                            }\n                        }\n\n                        if (this._.$closestParentLi) {\n                            this.$insertion.insertAfter(this._.$closestParentLi);\n                        }\n                    }\n                    else {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                            this._.$closestTarget.addClass('draghover');\n                        }\n                    }\n                }\n            }\n        },\n\n        cancelDrag: function() {\n            this.$insertion.remove();\n\n            if (this._.$closestTarget) {\n                this._.$closestTarget.removeClass('draghover');\n            }\n\n            this.onMouseUp();\n        },\n\n        onDragStop: function() {\n            // Are we repositioning the draggee?\n            if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n                var $draggeeParent,\n                    moved;\n\n                // Are we about to leave the draggee's original parent childless?\n                if (!this.$draggee.siblings().length) {\n                    $draggeeParent = this.$draggee.parent();\n                }\n\n                if (this.$insertion.parent().length) {\n                    // Make sure the insertion isn't right next to the draggee\n                    var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                    if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                        this.$insertion.replaceWith(this.$draggee);\n                        moved = true;\n                    }\n                    else {\n                        this.$insertion.remove();\n                        moved = false;\n                    }\n                }\n                else {\n                    var $ul = this._.$closestTargetLi.children('ul');\n\n                    // Make sure this is a different parent than the draggee's\n                    if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                        if (!$ul.length) {\n                            var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                            this.structure.initToggle($toggle);\n\n                            $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                        }\n                        else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                            this._.$closestTarget.children('.toggle').trigger('click');\n                        }\n\n                        this.$draggee.appendTo($ul);\n                        moved = true;\n                    }\n                    else {\n                        moved = false;\n                    }\n                }\n\n                // Remove the class either way\n                this._.$closestTarget.removeClass('draghover');\n\n                if (moved) {\n                    // Now deal with the now-childless parent\n                    if ($draggeeParent) {\n                        this.structure._removeUl($draggeeParent);\n                    }\n\n                    // Has the level changed?\n                    var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                    var animateCss;\n\n                    if (newLevel != this.$draggee.data('level')) {\n                        // Correct the helper's padding if moving to/from level 1\n                        if (this.$draggee.data('level') == 1) {\n                            animateCss = {};\n                            animateCss['padding-' + Craft.left] = 38;\n                            this.$helperLi.velocity(animateCss, 'fast');\n                        }\n                        else if (newLevel == 1) {\n                            animateCss = {};\n                            animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                            this.$helperLi.velocity(animateCss, 'fast');\n                        }\n\n                        this.setLevel(this.$draggee, newLevel);\n                    }\n\n                    // Make it real\n                    var $element = this.$draggee.children('.row').children('.element');\n\n                    var data = {\n                        structureId: this.structure.id,\n                        elementId: $element.data('id'),\n                        siteId: $element.data('site-id'),\n                        prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                        parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                    };\n\n                    Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                        }\n                    });\n                }\n            }\n\n            // Animate things back into place\n            this.$draggee.velocity('stop').removeClass('hidden').velocity({\n                height: this.draggeeHeight\n            }, 'fast', $.proxy(function() {\n                this.$draggee.css('height', 'auto');\n            }, this));\n\n            this.returnHelpersToDraggees();\n\n            this.base();\n        },\n\n        setLevel: function($li, level) {\n            $li.data('level', level);\n\n            var indent = this.structure.getIndent(level);\n\n            var css = {};\n            css['margin-' + Craft.left] = '-' + indent + 'px';\n            css['padding-' + Craft.left] = indent + 'px';\n            this.$draggee.children('.row').css(css);\n\n            var $childLis = $li.children('ul').children();\n\n            for (var i = 0; i < $childLis.length; i++) {\n                this.setLevel($($childLis[i]), level + 1);\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n        tableView: null,\n        structureId: null,\n        maxLevels: null,\n\n        _basePadding: null,\n        _helperMargin: null,\n\n        _$firstRowCells: null,\n        _$titleHelperCell: null,\n\n        _titleHelperCellOuterWidth: null,\n\n        _ancestors: null,\n        _updateAncestorsFrame: null,\n        _updateAncestorsProxy: null,\n\n        _draggeeLevel: null,\n        _draggeeLevelDelta: null,\n        draggingLastElements: null,\n        _loadingDraggeeLevelDelta: false,\n\n        _targetLevel: null,\n        _targetLevelBounds: null,\n\n        _positionChanged: null,\n\n        /**\n         * Constructor\n         */\n        init: function(tableView, $elements, settings) {\n            this.tableView = tableView;\n            this.structureId = this.tableView.$table.data('structure-id');\n            this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n            this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n            this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n            settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n                handle: '.move',\n                collapseDraggees: true,\n                singleHelper: true,\n                helperSpacingY: 2,\n                magnetStrength: 4,\n                helper: $.proxy(this, 'getHelper'),\n                helperLagBase: 1.5,\n                axis: Garnish.Y_AXIS\n            });\n\n            this.base($elements, settings);\n        },\n\n        /**\n         * Returns the draggee rows (including any descendent rows).\n         */\n        findDraggee: function() {\n            this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n            this._draggeeLevelDelta = 0;\n\n            var $draggee = $(this.$targetItem),\n                $nextRow = this.$targetItem.next();\n\n            while ($nextRow.length) {\n                // See if this row is a descendant of the draggee\n                var nextRowLevel = $nextRow.data('level');\n\n                if (nextRowLevel <= this._draggeeLevel) {\n                    break;\n                }\n\n                // Is this the deepest descendant we've seen so far?\n                var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n                if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                    this._draggeeLevelDelta = nextRowLevelDelta;\n                }\n\n                // Add it and prep the next row\n                $draggee = $draggee.add($nextRow);\n                $nextRow = $nextRow.next();\n            }\n\n            // Are we dragging the last elements on the page?\n            this.draggingLastElements = !$nextRow.length;\n\n            // Do we have a maxLevels to enforce,\n            // and does it look like this draggee has descendants we don't know about yet?\n            if (\n                this.maxLevels &&\n                this.draggingLastElements &&\n                this.tableView.getMorePending()\n            ) {\n                // Only way to know the true descendant level delta is to ask PHP\n                this._loadingDraggeeLevelDelta = true;\n\n                var data = this._getAjaxBaseData(this.$targetItem);\n\n                Craft.postActionRequest('structures/get-element-level-delta', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this._loadingDraggeeLevelDelta = false;\n\n                        if (this.dragging) {\n                            this._draggeeLevelDelta = response.delta;\n                            this.drag(false);\n                        }\n                    }\n                }, this));\n            }\n\n            return $draggee;\n        },\n\n        /**\n         * Returns the drag helper.\n         */\n        getHelper: function($helperRow) {\n            var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n                $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n                $tbody = $('<tbody/>').appendTo($table);\n\n            $helperRow.appendTo($tbody);\n\n            // Copy the column widths\n            this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n            var $helperCells = $helperRow.children();\n\n            for (var i = 0; i < $helperCells.length; i++) {\n                var $helperCell = $($helperCells[i]);\n\n                // Skip the checkbox cell\n                if ($helperCell.hasClass('checkbox-cell')) {\n                    $helperCell.remove();\n                    continue;\n                }\n\n                // Hard-set the cell widths\n                var $firstRowCell = $(this._$firstRowCells[i]);\n                var width = $firstRowCell[0].getBoundingClientRect().width;\n\n                $firstRowCell.css('width', width+'px');\n                $helperCell.css('width', width+'px');\n\n                // Is this the title cell?\n                if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                    this._$titleHelperCell = $helperCell;\n\n                    var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                    this._titleHelperCellOuterWidth = width;\n\n                    $helperCell.css('padding-' + Craft.left, this._basePadding);\n                }\n            }\n\n            return $outerContainer;\n        },\n\n        /**\n         * Returns whether the draggee can be inserted before a given item.\n         */\n        canInsertBefore: function($item) {\n            if (this._loadingDraggeeLevelDelta) {\n                return false;\n            }\n\n            return (this._getLevelBounds($item.prev(), $item) !== false);\n        },\n\n        /**\n         * Returns whether the draggee can be inserted after a given item.\n         */\n        canInsertAfter: function($item) {\n            if (this._loadingDraggeeLevelDelta) {\n                return false;\n            }\n\n            return (this._getLevelBounds($item, $item.next()) !== false);\n        },\n\n        // Events\n        // -------------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            // Get the initial set of ancestors, before the item gets moved\n            this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n            // Set the initial target level bounds\n            this._setTargetLevelBounds();\n\n            // Check to see if we should load more elements now\n            this.tableView.maybeLoadMore();\n\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            this.base();\n            this._updateIndent();\n        },\n\n        /**\n         * On Insertion Point Change\n         */\n        onInsertionPointChange: function() {\n            this._setTargetLevelBounds();\n            this._updateAncestorsBeforeRepaint();\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            this._positionChanged = false;\n            this.base();\n\n            // Update the draggee's padding if the position just changed\n            // ---------------------------------------------------------------------\n\n            if (this._targetLevel != this._draggeeLevel) {\n                var levelDiff = this._targetLevel - this._draggeeLevel;\n\n                for (var i = 0; i < this.$draggee.length; i++) {\n                    var $draggee = $(this.$draggee[i]),\n                        oldLevel = $draggee.data('level'),\n                        newLevel = oldLevel + levelDiff,\n                        padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                    $draggee.data('level', newLevel);\n                    $draggee.find('.element').data('level', newLevel);\n                    $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n                }\n\n                this._positionChanged = true;\n            }\n\n            // Keep in mind this could have also been set by onSortChange()\n            if (this._positionChanged) {\n                // Tell the server about the new position\n                // -----------------------------------------------------------------\n\n                var data = this._getAjaxBaseData(this.$draggee);\n\n                // Find the previous sibling/parent, if there is one\n                var $prevRow = this.$draggee.first().prev();\n\n                while ($prevRow.length) {\n                    var prevRowLevel = $prevRow.data('level');\n\n                    if (prevRowLevel == this._targetLevel) {\n                        data.prevId = $prevRow.data('id');\n                        break;\n                    }\n\n                    if (prevRowLevel < this._targetLevel) {\n                        data.parentId = $prevRow.data('id');\n\n                        // Is this row collapsed?\n                        var $toggle = $prevRow.find('> th > .toggle');\n\n                        if (!$toggle.hasClass('expanded')) {\n                            // Make it look expanded\n                            $toggle.addClass('expanded');\n\n                            // Add a temporary row\n                            var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                            // Remove the target item\n                            if (this.tableView.elementSelect) {\n                                this.tableView.elementSelect.removeItems(this.$targetItem);\n                            }\n\n                            this.removeItems(this.$targetItem);\n                            this.$targetItem.remove();\n                            this.tableView._totalVisible--;\n                        }\n\n                        break;\n                    }\n\n                    $prevRow = $prevRow.prev();\n                }\n\n                Craft.postActionRequest('structures/move-element', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        if (!response.success) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                            this.tableView.elementIndex.updateElements();\n                            return;\n                        }\n                        Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                        this.onPositionChange();\n\n                        // Were we waiting on this to complete so we can expand the new parent?\n                        if ($spinnerRow && $spinnerRow.parent().length) {\n                            $spinnerRow.remove();\n                            this.tableView._expandElement($toggle, true);\n                        }\n\n                        // See if we should run any pending tasks\n                        Craft.cp.runQueue();\n                    }\n                }, this));\n            }\n        },\n\n        onSortChange: function() {\n            if (this.tableView.elementSelect) {\n                this.tableView.elementSelect.resetItemOrder();\n            }\n\n            this._positionChanged = true;\n            this.base();\n        },\n\n        onPositionChange: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('positionChange');\n                this.settings.onPositionChange();\n            }, this));\n        },\n\n        onReturnHelpersToDraggees: function() {\n            this._$firstRowCells.css('width', '');\n\n            // If we were dragging the last elements on the page and ended up loading any additional elements in,\n            // there could be a gap between the last draggee item and whatever now comes after it.\n            // So remove the post-draggee elements and possibly load up the next batch.\n            if (this.draggingLastElements && this.tableView.getMorePending()) {\n                // Update the element index's record of how many items are actually visible\n                this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n                var $postDraggeeItems = this.$draggee.last().nextAll();\n\n                if ($postDraggeeItems.length) {\n                    this.removeItems($postDraggeeItems);\n                    $postDraggeeItems.remove();\n                    this.tableView.maybeLoadMore();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * Returns the min and max levels that the draggee could occupy between\n         * two given rows, or false if it’s not going to work out.\n         */\n        _getLevelBounds: function($prevRow, $nextRow) {\n            // Can't go any lower than the next row, if there is one\n            if ($nextRow && $nextRow.length) {\n                this._getLevelBounds._minLevel = $nextRow.data('level');\n            }\n            else {\n                this._getLevelBounds._minLevel = 1;\n            }\n\n            // Can't go any higher than the previous row + 1\n            if ($prevRow && $prevRow.length) {\n                this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n            }\n            else {\n                this._getLevelBounds._maxLevel = 1;\n            }\n\n            // Does this structure have a max level?\n            if (this.maxLevels) {\n                // Make sure it's going to fit at all here\n                if (\n                    this._getLevelBounds._minLevel != 1 &&\n                    this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n                ) {\n                    return false;\n                }\n\n                // Limit the max level if we have to\n                if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                    this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                    if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                        this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                    }\n                }\n            }\n\n            return {\n                min: this._getLevelBounds._minLevel,\n                max: this._getLevelBounds._maxLevel\n            };\n        },\n\n        /**\n         * Determines the min and max possible levels at the current draggee's position.\n         */\n        _setTargetLevelBounds: function() {\n            this._targetLevelBounds = this._getLevelBounds(\n                this.$draggee.first().prev(),\n                this.$draggee.last().next()\n            );\n        },\n\n        /**\n         * Determines the target level based on the current mouse position.\n         */\n        _updateIndent: function(forcePositionChange) {\n            // Figure out the target level\n            // ---------------------------------------------------------------------\n\n            // How far has the cursor moved?\n            this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n            // Flip that if this is RTL\n            if (Craft.orientation === 'rtl') {\n                this._updateIndent._mouseDist *= -1;\n            }\n\n            // What is that in indentation levels?\n            this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n            // Combine with the original level to get the new target level\n            this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n            // Contain it within our min/max levels\n            if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n                this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n                this._updateIndent._targetLevel = this._targetLevelBounds.min;\n            }\n            else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n                this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n                this._updateIndent._targetLevel = this._targetLevelBounds.max;\n            }\n\n            // Has the target level changed?\n            if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n                // Target level is changing, so update the ancestors\n                this._updateAncestorsBeforeRepaint();\n            }\n\n            // Update the UI\n            // ---------------------------------------------------------------------\n\n            // How far away is the cursor from the exact target level distance?\n            this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n            // What's the magnet impact of that?\n            this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n            // Put it on a leash\n            if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n                this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n            }\n\n            // Apply the new margin/width\n            this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n            this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n            this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n        },\n\n        /**\n         * Returns the indent size for a given level\n         */\n        _getLevelIndent: function(level) {\n            return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n        },\n\n        /**\n         * Returns the base data that should be sent with StructureController Ajax requests.\n         */\n        _getAjaxBaseData: function($row) {\n            return {\n                structureId: this.structureId,\n                elementId: $row.data('id'),\n                siteId: $row.find('.element:first').data('site-id')\n            };\n        },\n\n        /**\n         * Returns a row's ancestor rows\n         */\n        _getAncestors: function($row, targetLevel) {\n            this._getAncestors._ancestors = [];\n\n            if (targetLevel != 0) {\n                this._getAncestors._level = targetLevel;\n                this._getAncestors._$prevRow = $row.prev();\n\n                while (this._getAncestors._$prevRow.length) {\n                    if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                        this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                        this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                        // Did we just reach the top?\n                        if (this._getAncestors._level == 0) {\n                            break;\n                        }\n                    }\n\n                    this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n                }\n            }\n\n            return this._getAncestors._ancestors;\n        },\n\n        /**\n         * Prepares to have the ancestors updated before the screen is repainted.\n         */\n        _updateAncestorsBeforeRepaint: function() {\n            if (this._updateAncestorsFrame) {\n                Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n            }\n\n            if (!this._updateAncestorsProxy) {\n                this._updateAncestorsProxy = $.proxy(this, '_updateAncestors');\n            }\n\n            this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestorsProxy);\n        },\n\n        _updateAncestors: function() {\n            this._updateAncestorsFrame = null;\n\n            // Update the old ancestors\n            // -----------------------------------------------------------------\n\n            for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n                this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n                // One less descendant now\n                this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n                // Is it now childless?\n                if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                    // Remove its toggle\n                    this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n                }\n            }\n\n            // Update the new ancestors\n            // -----------------------------------------------------------------\n\n            this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n            for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n                this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n                // One more descendant now\n                this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n                // Is this its first child?\n                if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                    // Create its toggle\n                    $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                        .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n                }\n            }\n\n            this._ancestors = this._updateAncestors._newAncestors;\n\n            delete this._updateAncestors._i;\n            delete this._updateAncestors._$ancestor;\n            delete this._updateAncestors._newAncestors;\n        }\n    },\n    {\n        HELPER_MARGIN: 0,\n        LEVEL_INDENT: 44,\n        MAX_GIVE: 22,\n\n        defaults: {\n            onPositionChange: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend(\n    {\n        $table: null,\n        $selectedSortHeader: null,\n\n        structureTableSort: null,\n\n        _totalVisiblePostStructureTableDraggee: null,\n        _morePendingPostStructureTableDraggee: false,\n\n        getElementContainer: function() {\n            // Save a reference to the table\n            this.$table = this.$container.find('table:first');\n            return this.$table.children('tbody:first');\n        },\n\n        afterInit: function() {\n            // Set the sort header\n            this.initTableHeaders();\n\n            // Create the Structure Table Sorter\n            if (\n                this.elementIndex.settings.context === 'index' &&\n                this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n                Garnish.hasAttr(this.$table, 'data-structure-id')\n            ) {\n                this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements(), {\n                    onSortChange: $.proxy(this, '_onStructureTableSortChange')\n                });\n            }\n            else {\n                this.structureTableSort = null;\n            }\n\n            // Handle expand/collapse toggles for Structures\n            if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n                this.addListener(this.$elementContainer, 'click', function(ev) {\n                    var $target = $(ev.target);\n\n                    if ($target.hasClass('toggle')) {\n                        if (this._collapseElement($target) === false) {\n                            this._expandElement($target);\n                        }\n                    }\n                });\n            }\n        },\n\n        initTableHeaders: function() {\n            var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n                $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n            for (var i = 0; i < $tableHeaders.length; i++) {\n                var $header = $tableHeaders.eq(i),\n                    attr = $header.attr('data-attribute');\n\n                // Is this the selected sort attribute?\n                if (attr === selectedSortAttr) {\n                    this.$selectedSortHeader = $header;\n                    var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                    $header\n                        .addClass('ordered ' + selectedSortDir)\n                        .on('click', $.proxy(this, '_handleSelectedSortHeaderClick'));\n                }\n                else {\n                    // Is this attribute sortable?\n                    var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                    if ($sortAttribute.length) {\n                        $header\n                            .addClass('orderable')\n                            .on('click', $.proxy(this, '_handleUnselectedSortHeaderClick'));\n                    }\n                }\n            }\n        },\n\n        isVerticalList: function() {\n            return true;\n        },\n\n        getTotalVisible: function() {\n            if (this._isStructureTableDraggingLastElements()) {\n                return this._totalVisiblePostStructureTableDraggee;\n            }\n            else {\n                return this._totalVisible;\n            }\n        },\n\n        setTotalVisible: function(totalVisible) {\n            if (this._isStructureTableDraggingLastElements()) {\n                this._totalVisiblePostStructureTableDraggee = totalVisible;\n            }\n            else {\n                this._totalVisible = totalVisible;\n            }\n        },\n\n        getMorePending: function() {\n            if (this._isStructureTableDraggingLastElements()) {\n                return this._morePendingPostStructureTableDraggee;\n            }\n            else {\n                return this._morePending;\n            }\n        },\n\n        setMorePending: function(morePending) {\n            if (this._isStructureTableDraggingLastElements()) {\n                this._morePendingPostStructureTableDraggee = morePending;\n            }\n            else {\n                this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n            }\n        },\n\n        getLoadMoreParams: function() {\n            var params = this.base();\n\n            // If we are dragging the last elements on the page,\n            // tell the controller to only load elements positioned after the draggee.\n            if (this._isStructureTableDraggingLastElements()) {\n                params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n            }\n\n            return params;\n        },\n\n        appendElements: function($newElements) {\n            this.base($newElements);\n\n            if (this.structureTableSort) {\n                this.structureTableSort.addItems($newElements);\n            }\n\n            Craft.cp.updateResponsiveTables();\n        },\n\n        createElementEditor: function($element) {\n            Craft.createElementEditor($element.data('type'), $element, {\n                params: {\n                    includeTableAttributesForSource: this.elementIndex.sourceKey\n                },\n                onSaveElement: $.proxy(function(response) {\n                    if (response.tableAttributes) {\n                        this._updateTableAttributes($element, response.tableAttributes);\n                    }\n                }, this),\n                elementIndex: this.elementIndex\n            });\n        },\n\n        _collapseElement: function($toggle, force) {\n            if (!force && !$toggle.hasClass('expanded')) {\n                return false;\n            }\n\n            $toggle.removeClass('expanded');\n\n            // Find and remove the descendant rows\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                level = $row.data('level'),\n                $nextRow = $row.next();\n\n            while ($nextRow.length) {\n                if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                    if ($nextRow.data('level') <= level) {\n                        break;\n                    }\n\n                    if (this.elementSelect) {\n                        this.elementSelect.removeItems($nextRow);\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.removeItems($nextRow);\n                    }\n\n                    this._totalVisible--;\n                }\n\n                var $nextNextRow = $nextRow.next();\n                $nextRow.remove();\n                $nextRow = $nextNextRow;\n            }\n\n            // Remember that this row should be collapsed\n            if (!this.elementIndex.instanceState.collapsedElementIds) {\n                this.elementIndex.instanceState.collapsedElementIds = [];\n            }\n\n            this.elementIndex.instanceState.collapsedElementIds.push(id);\n            this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n            // Bottom of the index might be viewable now\n            this.maybeLoadMore();\n        },\n\n        _expandElement: function($toggle, force) {\n            if (!force && $toggle.hasClass('expanded')) {\n                return false;\n            }\n\n            $toggle.addClass('expanded');\n\n            // Remove this element from our list of collapsed elements\n            if (this.elementIndex.instanceState.collapsedElementIds) {\n                var $row = $toggle.parent().parent(),\n                    id = $row.data('id'),\n                    index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n                if (index !== -1) {\n                    this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                    this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                    // Add a temporary row\n                    var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                    // Load the nested elements\n                    var params = $.extend(true, {}, this.settings.params);\n                    params.criteria.descendantOf = id;\n\n                    Craft.postActionRequest('element-indexes/get-more-elements', params, $.proxy(function(response, textStatus) {\n                        // Do we even care about this anymore?\n                        if (!$spinnerRow.parent().length) {\n                            return;\n                        }\n\n                        if (textStatus === 'success') {\n                            var $newElements = $(response.html);\n\n                            // Are there more descendants we didn't get in this batch?\n                            var totalVisible = (this._totalVisible + $newElements.length),\n                                morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                            if (morePending) {\n                                // Remove all the elements after it\n                                var $nextRows = $spinnerRow.nextAll();\n\n                                if (this.elementSelect) {\n                                    this.elementSelect.removeItems($nextRows);\n                                }\n\n                                if (this.structureTableSort) {\n                                    this.structureTableSort.removeItems($nextRows);\n                                }\n\n                                $nextRows.remove();\n                                totalVisible -= $nextRows.length;\n                            }\n                            else {\n                                // Maintain the current 'more' status\n                                morePending = this._morePending;\n                            }\n\n                            $spinnerRow.replaceWith($newElements);\n                            this.thumbLoader.load($newElements);\n\n                            if (this.elementIndex.actions || this.settings.selectable) {\n                                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                                this.elementIndex.updateActionTriggers();\n                            }\n\n                            if (this.structureTableSort) {\n                                this.structureTableSort.addItems($newElements);\n                            }\n\n                            Craft.appendHeadHtml(response.headHtml);\n                            Craft.appendFootHtml(response.footHtml);\n                            Craft.cp.updateResponsiveTables();\n\n                            this.setTotalVisible(totalVisible);\n                            this.setMorePending(morePending);\n\n                            // Is there room to load more right now?\n                            this.maybeLoadMore();\n                        }\n                    }, this));\n                }\n            }\n        },\n\n        _createSpinnerRowAfter: function($row) {\n            return $(\n                '<tr data-spinnerrow>' +\n                '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n                '<div class=\"spinner\"/>' +\n                '</td>' +\n                '</tr>'\n            ).insertAfter($row);\n        },\n\n        _isStructureTableDraggingLastElements: function() {\n            return (\n                this.structureTableSort &&\n                this.structureTableSort.dragging &&\n                this.structureTableSort.draggingLastElements\n            );\n        },\n\n        _handleSelectedSortHeaderClick: function(ev) {\n            var $header = $(ev.currentTarget);\n\n            if ($header.hasClass('loading')) {\n                return;\n            }\n\n            // Reverse the sort direction\n            var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n                newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n            this.elementIndex.setSortDirection(newSortDir);\n            this._handleSortHeaderClick(ev, $header);\n        },\n\n        _handleUnselectedSortHeaderClick: function(ev) {\n            var $header = $(ev.currentTarget);\n\n            if ($header.hasClass('loading')) {\n                return;\n            }\n\n            var attr = $header.attr('data-attribute');\n\n            this.elementIndex.setSortAttribute(attr);\n            this._handleSortHeaderClick(ev, $header);\n        },\n\n        _handleSortHeaderClick: function(ev, $header) {\n            if (this.$selectedSortHeader) {\n                this.$selectedSortHeader.removeClass('ordered asc desc');\n            }\n\n            $header.removeClass('orderable').addClass('ordered loading');\n            this.elementIndex.storeSortAttributeAndDirection();\n            this.elementIndex.updateElements();\n\n            // No need for two spinners\n            this.elementIndex.setIndexAvailable();\n        },\n\n        _updateTableAttributes: function($element, tableAttributes) {\n            var $tr = $element.closest('tr');\n\n            for (var attr in tableAttributes) {\n                if (!tableAttributes.hasOwnProperty(attr)) {\n                    continue;\n                }\n\n                $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        searchTimeout: null,\n        searchMenu: null,\n\n        $container: null,\n        $elementsContainer: null,\n        $elements: null,\n        $addTagInput: null,\n        $spinner: null,\n\n        _ignoreBlur: false,\n\n        init: function(settings) {\n            // Normalize the settings\n            // ---------------------------------------------------------------------\n\n            // Are they still passing in a bunch of arguments?\n            if (!$.isPlainObject(settings)) {\n                // Loop through all of the old arguments and apply them to the settings\n                var normalizedSettings = {},\n                    args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n                for (var i = 0; i < args.length; i++) {\n                    if (typeof arguments[i] !== 'undefined') {\n                        normalizedSettings[args[i]] = arguments[i];\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                settings = normalizedSettings;\n            }\n\n            this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n            this.$addTagInput = this.$container.children('.add').children('.text');\n            this.$spinner = this.$addTagInput.next();\n\n            this.addListener(this.$addTagInput, 'input', $.proxy(function() {\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.searchTimeout = setTimeout($.proxy(this, 'searchForTags'), 500);\n            }, this));\n\n            this.addListener(this.$addTagInput, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.RETURN_KEY) {\n                    ev.preventDefault();\n                }\n\n                let $option;\n\n                switch (ev.keyCode) {\n                    case Garnish.RETURN_KEY: {\n                        ev.preventDefault();\n                        if (this.searchMenu) {\n                            this.selectTag(this.searchMenu.$options.filter('.hover'));\n                        }\n                        return;\n                    }\n\n                    case Garnish.DOWN_KEY: {\n                        ev.preventDefault();\n                        if (this.searchMenu) {\n                            let $hoverOption = this.searchMenu.$options.filter('.hover');\n                            if ($hoverOption.length) {\n                                let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                                if ($nextOption.length) {\n                                    this.focusOption($nextOption);\n                                }\n                            } else {\n                                this.focusOption(this.searchMenu.$options.eq(0));\n                            }\n                        }\n                        return;\n                    }\n\n                    case Garnish.UP_KEY: {\n                        ev.preventDefault();\n                        if (this.searchMenu) {\n                            let $hoverOption = this.searchMenu.$options.filter('.hover');\n                            if ($hoverOption.length) {\n                                let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                                if ($prevOption.length) {\n                                    this.focusOption($prevOption);\n                                }\n                            } else {\n                                this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                            }\n                        }\n                        return;\n                    }\n                }\n            });\n\n            this.addListener(this.$addTagInput, 'focus', function() {\n                if (this.searchMenu) {\n                    this.searchMenu.show();\n                }\n            });\n\n            this.addListener(this.$addTagInput, 'blur', function() {\n                if (this._ignoreBlur) {\n                    this._ignoreBlur = false;\n                    return;\n                }\n\n                setTimeout($.proxy(function() {\n                    if (this.searchMenu) {\n                        this.searchMenu.hide();\n                    }\n                }, this), 1);\n            });\n        },\n\n        focusOption: function($option) {\n            this.searchMenu.$options.removeClass('hover');\n            $option.addClass('hover');\n            this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n        },\n\n        // No \"add\" button\n        getAddElementsBtn: $.noop,\n\n        getElementSortAxis: function() {\n            return null;\n        },\n\n        searchForTags: function() {\n            if (this.searchMenu) {\n                this.killSearchMenu();\n            }\n\n            var val = this.$addTagInput.val();\n\n            if (val) {\n                this.$spinner.removeClass('hidden');\n\n                var excludeIds = [];\n\n                for (var i = 0; i < this.$elements.length; i++) {\n                    var id = $(this.$elements[i]).data('id');\n\n                    if (id) {\n                        excludeIds.push(id);\n                    }\n                }\n\n                if (this.settings.sourceElementId) {\n                    excludeIds.push(this.settings.sourceElementId);\n                }\n\n                var data = {\n                    search: this.$addTagInput.val(),\n                    tagGroupId: this.settings.tagGroupId,\n                    excludeIds: excludeIds\n                };\n\n                Craft.postActionRequest('tags/search-for-tags', data, $.proxy(function(response, textStatus) {\n                    // Just in case\n                    if (this.searchMenu) {\n                        this.killSearchMenu();\n                    }\n\n                    this.$spinner.addClass('hidden');\n\n                    if (textStatus === 'success') {\n                        var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                            $ul = $('<ul/>').appendTo($menu);\n\n                        var $li;\n\n                        for (var i = 0; i < response.tags.length; i++) {\n                            $li = $('<li/>')\n                                .appendTo($ul);\n\n                            $('<a data-icon=\"tag\"/>')\n                                .appendTo($li)\n                                .text(response.tags[i].title)\n                                .data('id', response.tags[i].id)\n                                .addClass(response.tags[i].exclude ? 'disabled' : '');\n                        }\n\n                        if (!response.exactMatch) {\n                            $li = $('<li/>').appendTo($ul);\n                            $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                        }\n\n                        $ul.find('a:not(.disabled):first').addClass('hover');\n\n                        this.searchMenu = new Garnish.Menu($menu, {\n                            attachToElement: this.$addTagInput,\n                            onOptionSelect: $.proxy(this, 'selectTag')\n                        });\n\n                        this.addListener($menu, 'mousedown', $.proxy(function() {\n                            this._ignoreBlur = true;\n                        }, this));\n\n                        this.searchMenu.show();\n                    }\n                }, this));\n            }\n            else {\n                this.$spinner.addClass('hidden');\n            }\n        },\n\n        selectTag: function(option) {\n            var $option = $(option);\n\n            if ($option.hasClass('disabled')) {\n                return;\n            }\n\n            var id = $option.data('id');\n            var title = $option.text();\n\n            var $element = $('<div/>', {\n                'class': 'element small removable',\n                'data-id': id,\n                'data-site-id': this.settings.targetSiteId,\n                'data-label': title,\n                'data-editable': '1'\n            }).appendTo(this.$elementsContainer);\n\n            var $input = $('<input/>', {\n                'type': 'hidden',\n                'name': this.settings.name + '[]',\n                'value': id\n            }).appendTo($element);\n\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Remove')\n            }).appendTo($element);\n\n            var $titleContainer = $('<div/>', {\n                'class': 'label'\n            }).appendTo($element);\n\n            $('<span/>', {\n                'class': 'title',\n                text: title\n            }).appendTo($titleContainer);\n\n            var margin = -($element.outerWidth() + 10);\n            this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$addTagInput.velocity(animateCss, 'fast');\n\n            this.$elements = this.$elements.add($element);\n\n            this.addElements($element);\n\n            this.killSearchMenu();\n            this.$addTagInput.val('');\n            this.$addTagInput.trigger('focus');\n\n            if (!id) {\n                // We need to create the tag first\n                $element.addClass('loading disabled');\n\n                var data = {\n                    groupId: this.settings.tagGroupId,\n                    title: title\n                };\n\n                Craft.postActionRequest('tags/create-tag', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success' && response.success) {\n                        $element.attr('data-id', response.id);\n                        $input.val(response.id);\n\n                        $element.removeClass('loading disabled');\n                    }\n                    else {\n                        this.removeElement($element);\n\n                        if (textStatus === 'success') {\n                            // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                    }\n                }, this));\n            }\n        },\n\n        killSearchMenu: function() {\n            this.searchMenu.hide();\n            this.searchMenu.destroy();\n            this.searchMenu = null;\n        }\n    },\n    {\n        defaults: {\n            tagGroupId: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend(\n    {\n        getElementContainer: function() {\n            return this.$container.children('ul');\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: (typeof config.autocomplete === 'undefined' || !config.autocomplete ? 'off' : null),\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            }\n            else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html':  option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                text: config.label\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n            else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: (allChecked || Craft.inArray(option.value, config.values)),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<div/>', {\n                'class': 'lightswitch',\n                tabindex: '0',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'switch',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            var id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            var containerId = config.containerId || id + '-container';\n            var name = config.name || null;\n            var value = config.value || null;\n            var small = config.small || false;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                id: containerId,\n                'class': 'flex color-container'\n            });\n\n            var $colorPreviewContainer = $('<div/>', {\n                'class': 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            var $colorPreview = $('<div/>', {\n                'class': 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            var $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: value,\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000))+'-date';\n            var name = config.name || null;\n            var inputName = name ? name+'[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name+'[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate:null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000))+'-time';\n            var name = config.name || null;\n            var inputName = name ? name+'[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name+'[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours()*3600 + value.getMinutes()*60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $('<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $('<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-label` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend(\n    {\n        uploader: null,\n        allowedKinds: null,\n        $element: null,\n        settings: null,\n        _rejectedFiles: {},\n        _extensionList: null,\n        _totalFileCounter: 0,\n        _validFileCounter: 0,\n\n        init: function($element, settings) {\n            this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n            this.$element = $element;\n            this.allowedKinds = null;\n            this._extensionList = null;\n            this._totalFileCounter = 0;\n            this._validFileCounter = 0;\n\n            settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n            var events = settings.events;\n            delete settings.events;\n\n            if (settings.allowedKinds && settings.allowedKinds.length) {\n                if (typeof settings.allowedKinds === 'string') {\n                    settings.allowedKinds = [settings.allowedKinds];\n                }\n\n                this.allowedKinds = settings.allowedKinds;\n                delete settings.allowedKinds;\n            }\n\n            settings.autoUpload = false;\n\n            this.uploader = this.$element.fileupload(settings);\n            for (var event in events) {\n                if (!events.hasOwnProperty(event)) {\n                    continue;\n                }\n\n                this.uploader.on(event, events[event]);\n            }\n\n            this.settings = settings;\n\n            this.uploader.on('fileuploadadd', $.proxy(this, 'onFileAdd'));\n        },\n\n        /**\n         * Set uploader parameters.\n         */\n        setParams: function(paramObject) {\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            this.uploader.fileupload('option', {formData: paramObject});\n        },\n\n        /**\n         * Get the number of uploads in progress.\n         */\n        getInProgress: function() {\n            return this.uploader.fileupload('active');\n        },\n\n        /**\n         * Return true, if this is the last upload.\n         */\n        isLastUpload: function() {\n            // Processing the last file or not processing at all.\n            return this.getInProgress() < 2;\n        },\n\n        /**\n         * Called on file add.\n         */\n        onFileAdd: function(e, data) {\n            e.stopPropagation();\n\n            var validateExtension = false;\n\n            if (this.allowedKinds) {\n                if (!this._extensionList) {\n                    this._createExtensionList();\n                }\n\n                validateExtension = true;\n            }\n\n            // Make sure that file API is there before relying on it\n            data.process().done($.proxy(function() {\n                var file = data.files[0];\n                var pass = true;\n                if (validateExtension) {\n                    var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                    var fileExtension = matches[1];\n                    if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                        pass = false;\n                        this._rejectedFiles.type.push('“' + file.name + '”');\n                    }\n                }\n\n                if (file.size > this.settings.maxFileSize) {\n                    this._rejectedFiles.size.push('“' + file.name + '”');\n                    pass = false;\n                }\n\n                // If the validation has passed for this file up to now, check if we're not hitting any limits\n                if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                    this._rejectedFiles.limit.push('“' + file.name + '”');\n                    pass = false;\n                }\n\n                if (pass) {\n                    this._validFileCounter++;\n                    data.submit();\n                }\n\n                if (++this._totalFileCounter === data.originalFiles.length) {\n                    this._totalFileCounter = 0;\n                    this._validFileCounter = 0;\n                    this.processErrorMessages();\n                }\n            }, this));\n\n            return true;\n        },\n\n        /**\n         * Process error messages.\n         */\n        processErrorMessages: function() {\n            var str;\n\n            if (this._rejectedFiles.type.length) {\n                if (this._rejectedFiles.type.length === 1) {\n                    str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n                this._rejectedFiles.type = [];\n                alert(str);\n            }\n\n            if (this._rejectedFiles.size.length) {\n                if (this._rejectedFiles.size.length === 1) {\n                    str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n                this._rejectedFiles.size = [];\n                alert(str);\n            }\n\n            if (this._rejectedFiles.limit.length) {\n                if (this._rejectedFiles.limit.length === 1) {\n                    str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n                this._rejectedFiles.limit = [];\n                alert(str);\n            }\n        },\n\n        humanFileSize: function(bytes) {\n            var threshold = 1024;\n\n            if (bytes < threshold) {\n                return bytes + ' B';\n            }\n\n            var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n            var u = -1;\n\n            do\n            {\n                bytes = bytes / threshold;\n                ++u;\n            }\n            while (bytes >= threshold);\n\n            return bytes.toFixed(1) + ' ' + units[u];\n        },\n\n        _createExtensionList: function() {\n            this._extensionList = [];\n\n            for (var i = 0; i < this.allowedKinds.length; i++) {\n                var allowedKind = this.allowedKinds[i];\n\n                if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                    for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                        var ext = Craft.fileKinds[allowedKind].extensions[j];\n                        this._extensionList.push(ext);\n                    }\n                }\n            }\n        },\n\n        destroy: function() {\n            this.$element.fileupload('destroy');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            dropZone: null,\n            pasteZone: null,\n            fileInput: null,\n            sequentialUploads: true,\n            maxFileSize: Craft.maxUploadSize,\n            allowedKinds: null,\n            events: {},\n            canAddMoreFiles: null,\n            headers: {'Accept' : 'application/json;q=0.9,*/*;q=0.8'},\n            paramName: 'assets-upload'\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n            // Make it lowercase\n            sourceVal = sourceVal.toLowerCase();\n\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal);\n\n            // Handle must start with a letter and end with a letter/number\n            sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n            sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n            // Get the \"words\"\n            var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n            var uriFormat = words.join(Craft.slugWordSeparator);\n\n            if (uriFormat && this.settings.suffix) {\n                uriFormat += this.settings.suffix;\n            }\n\n            return uriFormat;\n        }\n    });\n\n})(jQuery);\n","/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function( html ) {\n    return html.replace( rxhtmlTag, \"<$1></$2>\" );\n};\n\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        _processedApiHeaders: false,\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n                // Get the latest headers\n                this.getApiHeaders(cancelToken).then(apiHeaders => {\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    axios.request(options).then((apiResponse) => {\n                        // Send the API response back immediately\n                        resolve(apiResponse.data);\n\n                        if (!this._processedApiHeaders) {\n                            if (apiResponse.headers['x-craft-license-status']) {\n                                this._processedApiHeaders = true;\n                                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                                    data: {\n                                        headers: apiResponse.headers,\n                                    },\n                                    cancelToken: cancelToken,\n                                });\n\n                                // If we just got a new license key, set it and then resolve the header waitlist\n                                if (this._apiHeaders && this._apiHeaders['X-Craft-License'] === '__REQUEST__') {\n                                    this._apiHeaders['X-Craft-License'] = window.cmsLicenseKey = apiResponse.headers['x-craft-license'];\n                                    this._resolveHeaderWaitlist();\n                                }\n                            } else if (\n                                this._apiHeaders &&\n                                this._apiHeaders['X-Craft-License'] === '__REQUEST__' &&\n                                this._apiHeaderWaitlist.length\n                            ) {\n                                // The request didn't send headers. Go ahead and resolve the next request on the\n                                // header waitlist.\n                                this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                            }\n                        }\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    resolve(this._apiHeaders);\n\n                    // If we are requesting a new Craft license, hold off on\n                    // resolving other API requests until we have one\n                    if (response.data['X-Craft-License'] !== '__REQUEST__') {\n                        this._resolveHeaderWaitlist();\n                    }\n                }).catch(e => {\n                    this._loadingApiHeaders = false;\n                    reject(e)\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[1](e);\n                    }\n                });\n            });\n        },\n\n        _resolveHeaderWaitlist: function() {\n            this._loadingApiHeaders = false;\n\n            // Was anything else waiting for them?\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._processedApiHeaders = false;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = function() {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                }.bind(this);\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         */\n        findDeltaData: function(oldData, newData, deltaNames) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, true);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                }\n            }\n\n            return params.join('&');\n        },\n\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, useInitialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = decodeURIComponent(params[p]).substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(params[p]);\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(params[p]);\n                }\n            }\n\n            if (useInitialValues) {\n                for (let name in Craft.initialDeltaValues) {\n                    if (Craft.initialDeltaValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(Craft.initialDeltaValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return arr.includes(elem);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Prevents the outline when an element is focused by the mouse.\n         *\n         * @param elem Either an actual element or a jQuery collection.\n         */\n        preventOutlineOnMouseFocus: function(elem) {\n            var $elem = $(elem),\n                namespace = '.preventOutlineOnMouseFocus';\n\n            $elem.on('mousedown' + namespace, function() {\n                    $elem.addClass('no-outline');\n                    $elem.trigger('focus');\n                })\n                .on('keydown' + namespace + ' blur' + namespace, function(event) {\n                    if (event.keyCode !== Garnish.SHIFT_KEY && event.keyCode !== Garnish.CTRL_KEY && event.keyCode !== Garnish.CMD_KEY) {\n                        $elem.removeClass('no-outline');\n                    }\n                });\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.pill', $container).pill();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n    });\n\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        pill: function() {\n            return this.each(function() {\n                if (!$.data(this, 'pill')) {\n                    new Garnish.Pill(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: {\n                        customTrigger: $btn,\n                    }\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend(\n    {\n        $element: null,\n        elementId: null,\n        siteId: null,\n        deltaNames: null,\n        initialData: null,\n\n        $form: null,\n        $fieldsContainer: null,\n        $cancelBtn: null,\n        $saveBtn: null,\n        $spinner: null,\n\n        $siteSelect: null,\n        $siteSpinner: null,\n\n        hud: null,\n\n        init: function(element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            }\n\n            this.$element = $(element);\n            this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n            this.loadHud();\n        },\n\n        setElementAttribute: function(name, value) {\n            if (!this.settings.attributes) {\n                this.settings.attributes = {};\n            }\n\n            if (value === null) {\n                delete this.settings.attributes[name];\n            } else {\n                this.settings.attributes[name] = value;\n            }\n        },\n\n        getBaseData: function() {\n            var data = $.extend({}, this.settings.params);\n\n            if (this.settings.siteId) {\n                data.siteId = this.settings.siteId;\n            } else if (this.$element && this.$element.data('site-id')) {\n                data.siteId = this.$element.data('site-id');\n            }\n\n            if (this.settings.elementId) {\n                data.elementId = this.settings.elementId;\n            } else if (this.$element && this.$element.data('id')) {\n                data.elementId = this.$element.data('id');\n            }\n\n            if (this.settings.elementType) {\n                data.elementType = this.settings.elementType;\n            }\n\n            if (this.settings.attributes) {\n                data.attributes = this.settings.attributes;\n            }\n\n            if (this.settings.prevalidate) {\n                data.prevalidate = 1;\n            }\n\n            return data;\n        },\n\n        loadHud: function() {\n            this.onBeginLoading();\n            var data = this.getBaseData();\n            data.includeSites = Craft.isMultiSite && this.settings.showSiteSwitcher;\n            Craft.postActionRequest('elements/get-editor-html', data, $.proxy(this, 'showHud'));\n        },\n\n        showHud: function(response, textStatus) {\n            this.onEndLoading();\n\n            if (textStatus === 'success') {\n                var $hudContents = $();\n\n                if (response.sites) {\n                    var $header = $('<div class=\"hud-header\"/>');\n\n                    if (response.sites.length === 1) {\n                        $('<h5/>', {text: response.sites[0].name}).appendTo($header);\n                    } else {\n                        var $siteSelectContainer = $('<div class=\"select\"/>').appendTo($header);\n\n                        this.$siteSelect = $('<select/>').appendTo($siteSelectContainer);\n                        this.$siteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($header);\n\n                        for (var i = 0; i < response.sites.length; i++) {\n                            var siteInfo = response.sites[i];\n                            $('<option value=\"' + siteInfo.id + '\"' + (siteInfo.id == response.siteId ? ' selected=\"selected\"' : '') + '>' + siteInfo.name + '</option>').appendTo(this.$siteSelect);\n                        }\n\n                        this.addListener(this.$siteSelect, 'change', 'switchSite');\n                    }\n\n                    $hudContents = $hudContents.add($header);\n                }\n\n                this.$form = $('<div/>');\n                this.$fieldsContainer = $('<div class=\"fields\"/>').appendTo(this.$form);\n\n                this.updateForm(response, true);\n\n                this.onCreateForm(this.$form);\n\n                var $footer = $('<div class=\"hud-footer\"/>').appendTo(this.$form),\n                    $buttonsContainer = $('<div class=\"buttons right\"/>').appendTo($footer);\n                this.$cancelBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Cancel'),\n                }).appendTo($buttonsContainer);\n                this.$saveBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Save'),\n                }).appendTo($buttonsContainer);\n                this.$spinner = $('<div class=\"spinner hidden\"/>').appendTo($buttonsContainer);\n\n                $hudContents = $hudContents.add(this.$form);\n\n                if (!this.hud) {\n                    var hudTrigger = (this.settings.hudTrigger || this.$element);\n\n                    this.hud = new Garnish.HUD(hudTrigger, $hudContents, {\n                        bodyClass: 'body elementeditor',\n                        closeOtherHUDs: false,\n                        hideOnEsc: false,\n                        hideOnShadeClick: false,\n                        onShow: this.onShowHud.bind(this),\n                        onHide: this.onHideHud.bind(this),\n                        onSubmit: this.saveElement.bind(this),\n                    });\n\n                    Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.maybeCloseHud.bind(this));\n                    this.hud.addListener(this.hud.$shade, 'click', this.maybeCloseHud.bind(this));\n\n                    this.hud.$hud.data('elementEditor', this);\n\n                    // Disable browser input validation\n                    this.hud.$body.attr('novalidate', '');\n\n                    this.hud.on('hide', $.proxy(function() {\n                        delete this.hud;\n                    }, this));\n                } else {\n                    this.hud.updateBody($hudContents);\n                    this.hud.updateSizeAndPosition();\n                }\n\n                // Focus on the first text input\n                $hudContents.find('.text:first').trigger('focus');\n\n                this.addListener(this.$cancelBtn, 'click', function() {\n                    this.hud.hide();\n                });\n            }\n        },\n\n        switchSite: function() {\n            if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n                this.$siteSelect.val(this.siteId);\n                return;\n            }\n\n            var newSiteId = this.$siteSelect.val();\n\n            if (newSiteId == this.siteId) {\n                return;\n            }\n\n            this.$siteSpinner.removeClass('hidden');\n\n            this.reloadForm({siteId: newSiteId}, $.proxy(function(textStatus) {\n                this.$siteSpinner.addClass('hidden');\n                if (textStatus !== 'success') {\n                    // Reset the site select\n                    this.$siteSelect.val(this.siteId);\n                }\n            }, this));\n        },\n\n        reloadForm: function(data, callback) {\n            data = $.extend(this.getBaseData(), data);\n\n            Craft.postActionRequest('elements/get-editor-html', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.updateForm(response, true);\n                }\n\n                if (callback) {\n                    callback(textStatus);\n                }\n            }, this));\n        },\n\n        updateForm: function(response, refreshInitialData) {\n            this.siteId = response.siteId;\n            this.$fieldsContainer.html(response.html);\n\n            if (refreshInitialData !== false) {\n                this.deltaNames = response.deltaNames;\n            }\n\n            // Swap any instruction text with info icons\n            let $allInstructions = this.$fieldsContainer.find('> .meta > .field > .instructions');\n\n            for (let i = 0; i < $allInstructions.length; i++) {\n                let $instructions = $allInstructions.eq(i);\n                let $label = $instructions.siblings('.heading').children('label');\n                $('<span/>', {\n                    'class': 'info',\n                    'html': $instructions.children().html()\n                }).appendTo($label);\n                $instructions.remove();\n            }\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                Craft.appendHeadHtml(response.headHtml);\n                Craft.appendFootHtml(response.footHtml);\n                Craft.initUiElements(this.$fieldsContainer);\n\n                if (refreshInitialData) {\n                    this.initialData = this.hud.$body.serialize();\n                }\n            }, this));\n        },\n\n        saveElement: function() {\n            var validators = this.settings.validators;\n\n            if ($.isArray(validators)) {\n                for (var i = 0; i < validators.length; i++) {\n                    if ($.isFunction(validators[i]) && !validators[i].call()) {\n                        return false;\n                    }\n                }\n            }\n\n            this.$spinner.removeClass('hidden');\n\n            var data = $.param(this.getBaseData()) + '&' + this.hud.$body.serialize();\n            data = Craft.findDeltaData(this.initialData, data, this.deltaNames);\n\n            Craft.postActionRequest('elements/save-element', data, $.proxy(function(response, textStatus) {\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        if (this.$element && this.siteId == this.$element.data('site-id')) {\n                            // Update the label\n                            var $title = this.$element.find('.title'),\n                                $a = $title.find('a');\n\n                            if ($a.length && response.cpEditUrl) {\n                                $a.attr('href', response.cpEditUrl);\n                                $a.text(response.newTitle);\n                            } else {\n                                $title.text(response.newTitle);\n                            }\n                        }\n\n                        if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                            Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                                type: Craft.elementTypeNames[this.settings.elementType][0],\n                            }));\n                        }\n\n                        this.closeHud();\n                        this.onSaveElement(response);\n                    } else {\n                        this.updateForm(response, false);\n                        Garnish.shake(this.hud.$hud);\n                    }\n                }\n            }, this));\n        },\n\n        isDirty: function() {\n            return this.hud.$body.serialize() !== this.initialData;\n        },\n\n        maybeCloseHud: function(ev) {\n            if (!this.hud || !this.hud.showing) {\n                return;\n            }\n\n            if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n                this.closeHud();\n            }\n        },\n\n        closeHud: function() {\n            if (!this.hud || !this.hud.showing) {\n                return;\n            }\n\n            this.hud.hide();\n            delete this.hud;\n        },\n\n        // Events\n        // -------------------------------------------------------------------------\n\n        onShowHud: function() {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n            }, this.saveElement.bind(this));\n            this.settings.onShowHud();\n            this.trigger('showHud');\n        },\n\n        onHideHud: function() {\n            this.settings.onHideHud();\n            this.trigger('hideHud');\n        },\n\n        onBeginLoading: function() {\n            if (this.$element) {\n                this.$element.addClass('loading');\n            }\n\n            this.settings.onBeginLoading();\n            this.trigger('beginLoading');\n        },\n\n        onEndLoading: function() {\n            if (this.$element) {\n                this.$element.removeClass('loading');\n            }\n\n            this.settings.onEndLoading();\n            this.trigger('endLoading');\n        },\n\n        onSaveElement: function(response) {\n            this.settings.onSaveElement(response);\n            this.trigger('saveElement', {\n                response: response\n            });\n\n            // There may be a new background job that needs to be run\n            Craft.cp.runQueue();\n        },\n\n        onCreateForm: function($form) {\n            this.settings.onCreateForm($form);\n        }\n    },\n    {\n        defaults: {\n            hudTrigger: null,\n            showSiteSwitcher: true,\n            elementId: null,\n            elementType: null,\n            siteId: null,\n            attributes: null,\n            params: null,\n            prevalidate: false,\n            elementIndex: null,\n\n            onShowHud: $.noop,\n            onHideHud: $.noop,\n            onBeginLoading: $.noop,\n            onEndLoading: $.noop,\n            onCreateForm: $.noop,\n            onSaveElement: $.noop,\n\n            validators: []\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend(\n    {\n        initialized: false,\n        elementType: null,\n\n        instanceState: null,\n        sourceStates: null,\n        sourceStatesStorageKey: null,\n\n        searchTimeout: null,\n        sourceSelect: null,\n\n        $container: null,\n        $main: null,\n        isIndexBusy: false,\n\n        $sidebar: null,\n        showingSidebar: null,\n        sourceKey: null,\n        sourceViewModes: null,\n        $source: null,\n        sourcesByKey: null,\n        $visibleSources: null,\n\n        $customizeSourcesBtn: null,\n        customizeSourcesModal: null,\n\n        $toolbar: null,\n        toolbarOffset: null,\n\n        $search: null,\n        searching: false,\n        searchText: null,\n        trashed: false,\n        drafts: false,\n        $clearSearchBtn: null,\n\n        $statusMenuBtn: null,\n        $statusMenuContainer: null,\n        statusMenu: null,\n        status: null,\n\n        $siteMenuBtn: null,\n        siteMenu: null,\n        siteId: null,\n\n        $sortMenuBtn: null,\n        sortMenu: null,\n        $sortAttributesList: null,\n        $sortDirectionsList: null,\n        $scoreSortAttribute: null,\n        $structureSortAttribute: null,\n\n        $elements: null,\n        $viewModeBtnContainer: null,\n        viewModeBtns: null,\n        viewMode: null,\n        view: null,\n        _autoSelectElements: null,\n        $countSpinner: null,\n        $countContainer: null,\n        page: 1,\n        resultSet: null,\n        totalResults: null,\n        $exportBtn: null,\n\n        actions: null,\n        actionsHeadHtml: null,\n        actionsFootHtml: null,\n        $selectAllContainer: null,\n        $selectAllCheckbox: null,\n        showingActionTriggers: false,\n        exporters: null,\n        exportersByType: null,\n        _$detachedToolbarItems: null,\n        _$triggers: null,\n\n        _ignoreFailedRequest: false,\n        _cancelToken: null,\n\n        /**\n         * Constructor\n         */\n        init: function(elementType, $container, settings) {\n            this.elementType = elementType;\n            this.$container = $container;\n            this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n            // Set the state objects\n            // ---------------------------------------------------------------------\n\n            this.instanceState = this.getDefaultInstanceState();\n\n            this.sourceStates = {};\n\n            // Instance states (selected source) are stored by a custom storage key defined in the settings\n            if (this.settings.storageKey) {\n                $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n            }\n\n            // Source states (view mode, etc.) are stored by the element type and context\n            this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n            $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n            // Find the DOM elements\n            // ---------------------------------------------------------------------\n\n            this.$main = this.$container.find('.main');\n            this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n            this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n            this.$statusMenuContainer = this.$statusMenuBtn.parent();\n            this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n            this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n            this.$search = this.$toolbar.find('.search:first input:first');\n            this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n            this.$sidebar = this.$container.find('.sidebar:first');\n            this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n            this.$elements = this.$container.find('.elements:first');\n            this.$countSpinner = this.$container.find('#count-spinner');\n            this.$countContainer = this.$container.find('#count-container');\n            this.$exportBtn = this.$container.find('#export-btn');\n\n            // Hide sidebar if needed\n            if (this.settings.hideSidebar) {\n                this.$sidebar.hide();\n                $('.body, .content', this.$container).removeClass('has-sidebar');\n            }\n\n            // Initialize the sources\n            // ---------------------------------------------------------------------\n\n            if (!this.initSources()) {\n                return;\n            }\n\n            // Customize button\n            if (this.$customizeSourcesBtn.length) {\n                this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n            }\n\n            // Initialize the status menu\n            // ---------------------------------------------------------------------\n\n            if (this.$statusMenuBtn.length) {\n                this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n                this.statusMenu.on('optionselect', $.proxy(this, '_handleStatusChange'));\n            }\n\n            // Initialize the site menu\n            // ---------------------------------------------------------------------\n\n            // Is there a site menu?\n            if (this.$siteMenuBtn.length) {\n                this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n                // Figure out the initial site\n                var $option = this.siteMenu.$options.filter('.sel:first');\n\n                if (!$option.length) {\n                    $option = this.siteMenu.$options.first();\n                }\n\n                if ($option.length) {\n                    this._setSite($option.data('site-id'));\n                } else {\n                    // No site options -- they must not have any site permissions\n                    this.settings.criteria = {id: '0'};\n                }\n\n                this.siteMenu.on('optionselect', $.proxy(this, '_handleSiteChange'));\n\n                if (this.siteId) {\n                    // Should we be using a different default site?\n                    var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                    if (defaultSiteId && defaultSiteId != this.siteId) {\n                        // Is that one available here?\n                        var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                        if ($storedSiteOption.length) {\n                            // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                            $storedSiteOption.trigger('click');\n                        }\n                    }\n                }\n            } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n                this._setSite(this.settings.criteria.siteId);\n            } else {\n                this._setSite(Craft.siteId);\n            }\n\n            // Don't let the criteria override the selected site\n            if (this.settings.criteria && this.settings.criteria.siteId) {\n                delete this.settings.criteria.siteId;\n            }\n\n            // Initialize the search input\n            // ---------------------------------------------------------------------\n\n            // Automatically update the elements after new search text has been sitting for a 1/2 second\n            this.addListener(this.$search, 'input', $.proxy(function() {\n                if (!this.searching && this.$search.val()) {\n                    this.startSearching();\n                } else if (this.searching && !this.$search.val()) {\n                    this.stopSearching();\n                }\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.searchTimeout = setTimeout($.proxy(this, 'updateElementsIfSearchTextChanged'), 500);\n            }, this));\n\n            // Update the elements when the Return key is pressed\n            this.addListener(this.$search, 'keypress', $.proxy(function(ev) {\n                if (ev.keyCode === Garnish.RETURN_KEY) {\n                    ev.preventDefault();\n\n                    if (this.searchTimeout) {\n                        clearTimeout(this.searchTimeout);\n                    }\n\n                    this.updateElementsIfSearchTextChanged();\n                }\n            }, this));\n\n            // Clear the search when the X button is clicked\n            this.addListener(this.$clearSearchBtn, 'click', $.proxy(function() {\n                this.$search.val('');\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                if (!Garnish.isMobileBrowser(true)) {\n                    this.$search.trigger('focus');\n                }\n\n                this.stopSearching();\n\n                this.updateElementsIfSearchTextChanged();\n            }, this));\n\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            // Initialize the sort menu\n            // ---------------------------------------------------------------------\n\n            // Is there a sort menu?\n            if (this.$sortMenuBtn.length) {\n                this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n                this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n                this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n                this.sortMenu.on('optionselect', $.proxy(this, '_handleSortChange'));\n            }\n\n            // Initialize the Export button\n            // ---------------------------------------------------------------------\n\n            this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n            // Let everyone know that the UI is initialized\n            // ---------------------------------------------------------------------\n\n            this.initialized = true;\n            this.afterInit();\n\n            // Select the initial source\n            // ---------------------------------------------------------------------\n\n            this.selectDefaultSource();\n\n            // Load the first batch of elements!\n            // ---------------------------------------------------------------------\n\n            // Default to whatever page is in the URL\n            this.setPage(Craft.pageNum);\n\n            this.updateElements(true);\n        },\n\n        afterInit: function() {\n            this.onAfterInit();\n        },\n\n        _createCancelToken: function() {\n            this._cancelToken = axios.CancelToken.source();\n            return this._cancelToken.token;\n        },\n\n        _cancelRequests: function() {\n            if (this._cancelToken) {\n                this._ignoreFailedRequest = true;\n                this._cancelToken.cancel();\n                Garnish.requestAnimationFrame(() => {\n                    this._ignoreFailedRequest = false;\n                });\n            }\n        },\n\n        getSourceContainer: function() {\n            return this.$sidebar.find('nav > ul');\n        },\n\n        get $sources() {\n            if (!this.sourceSelect) {\n                return undefined;\n            }\n\n            return this.sourceSelect.$items;\n        },\n\n        initSources: function() {\n            var $sources = this._getSourcesInList(this.getSourceContainer());\n\n            // No source, no party.\n            if ($sources.length === 0) {\n                return false;\n            }\n\n            // The source selector\n            if (!this.sourceSelect) {\n                this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                    multi: false,\n                    allowEmpty: false,\n                    vertical: true,\n                    onSelectionChange: $.proxy(this, '_handleSourceSelectionChange')\n                });\n            }\n\n            this.sourcesByKey = {};\n            this._initSources($sources);\n\n            return true;\n        },\n\n        selectDefaultSource: function() {\n            var sourceKey = this.getDefaultSourceKey(),\n                $source;\n\n            if (sourceKey) {\n                $source = this.getSourceByKey(sourceKey);\n\n                // Make sure it's visible\n                if (this.$visibleSources.index($source) === -1) {\n                    $source = null;\n                }\n            }\n\n            if (!sourceKey || !$source) {\n                // Select the first source by default\n                $source = this.$visibleSources.first();\n            }\n\n            return this.selectSource($source);\n        },\n\n        refreshSources: function() {\n            this.sourceSelect.removeAllItems();\n\n            var params = {\n                context: this.settings.context,\n                elementType: this.elementType\n            };\n\n            this.setIndexBusy();\n\n            Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n                data: params,\n            }).then((response) => {\n                this.setIndexAvailable();\n                this.getSourceContainer().replaceWith(response.data.html);\n                this.initSources();\n                this.selectDefaultSource();\n            }).catch(() => {\n                this.setIndexAvailable();\n                if (!this._ignoreFailedRequest) {\n                    Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                }\n            });\n        },\n\n        initSource: function($source) {\n            this.sourceSelect.addItems($source);\n            this.initSourceToggle($source);\n            this.sourcesByKey[$source.data('key')] = $source;\n\n            if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n                this._expandSource($source);\n            }\n        },\n\n        initSourceToggle: function($source) {\n            // Remove handlers for the same thing. Just in case.\n            this.deinitSourceToggle($source);\n\n            var $toggle = this._getSourceToggle($source);\n\n            if ($toggle.length) {\n                this.addListener($source, 'dblclick', '_handleSourceDblClick');\n                this.addListener($toggle, 'click', '_handleSourceToggleClick');\n                $source.data('hasNestedSources', true);\n            } else {\n                $source.data('hasNestedSources', false);\n            }\n        },\n\n        deinitSource: function($source) {\n            this.sourceSelect.removeItems($source);\n            this.deinitSourceToggle($source);\n            delete this.sourcesByKey[$source.data('key')];\n        },\n\n        deinitSourceToggle: function($source) {\n            if ($source.data('hasNestedSources')) {\n                this.removeListener($source, 'dblclick');\n                this.removeListener(this._getSourceToggle($source), 'click');\n            }\n\n            $source.removeData('hasNestedSources');\n        },\n\n        getDefaultInstanceState: function() {\n            return {\n                selectedSource: null,\n                expandedSources: []\n            };\n        },\n\n        getDefaultSourceKey: function() {\n            if (this.settings.defaultSource) {\n                var paths = this.settings.defaultSource.split('/'),\n                    path = '';\n\n                // Expand the tree\n                for (var i = 0; i < paths.length; i++) {\n                    path += paths[i];\n                    var $source = this.getSourceByKey(path);\n\n                    // If the folder can't be found, then just go to the stored instance source.\n                    if (!$source) {\n                        return this.instanceState.selectedSource;\n                    }\n\n                    this._expandSource($source);\n                    path += '/';\n                }\n\n                // Just make sure that the modal is aware of the newly expanded sources, too.\n                this._setSite(this.siteId);\n\n                return this.settings.defaultSource;\n            }\n\n            return this.instanceState.selectedSource;\n        },\n\n        getDefaultExpandedSources: function() {\n            return this.instanceState.expandedSources;\n        },\n\n        startSearching: function() {\n            // Show the clear button and add/select the Score sort option\n            this.$clearSearchBtn.removeClass('hidden');\n\n            if (!this.$scoreSortAttribute) {\n                this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n                this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n            }\n\n            this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n            this.searching = true;\n\n            this._updateStructureSortOption();\n            this.setSortAttribute('score');\n        },\n\n        stopSearching: function() {\n            // Hide the clear button and Score sort option\n            this.$clearSearchBtn.addClass('hidden');\n\n            this.$scoreSortAttribute.detach();\n\n            this.searching = false;\n\n            this._updateStructureSortOption();\n        },\n\n        setInstanceState: function(key, value) {\n            if (typeof key === 'object') {\n                $.extend(this.instanceState, key);\n            } else {\n                this.instanceState[key] = value;\n            }\n\n            this.storeInstanceState();\n        },\n\n        storeInstanceState: function() {\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n            }\n        },\n\n        getSourceState: function(source, key, defaultValue) {\n            if (typeof this.sourceStates[source] === 'undefined') {\n                // Set it now so any modifications to it by whoever's calling this will be stored.\n                this.sourceStates[source] = {};\n            }\n\n            if (typeof key === 'undefined') {\n                return this.sourceStates[source];\n            } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n                return this.sourceStates[source][key];\n            } else {\n                return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n            }\n        },\n\n        getSelectedSourceState: function(key, defaultValue) {\n            return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n        },\n\n        setSelecetedSourceState: function(key, value) {\n            var viewState = this.getSelectedSourceState();\n\n            if (typeof key === 'object') {\n                $.extend(viewState, key);\n            } else {\n                viewState[key] = value;\n            }\n\n            this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n            // Store it in localStorage too\n            Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n        },\n\n        storeSortAttributeAndDirection: function() {\n            var attr = this.getSelectedSortAttribute();\n\n            if (attr !== 'score') {\n                this.setSelecetedSourceState({\n                    order: attr,\n                    sort: this.getSelectedSortDirection()\n                });\n            }\n        },\n\n        /**\n         * Sets the page number.\n         */\n        setPage: function(page) {\n            if (this.settings.context !== 'index') {\n                return;\n            }\n\n            page = Math.max(page, 1);\n            this.page = page;\n\n            // Update the URL\n            var url = document.location.href\n                .replace(/\\?.*$/, '')\n                .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n                .replace(/\\/+$/, '');\n\n            if (this.page !== 1) {\n                if (Craft.pageTrigger[0] !== '?') {\n                    url += '/';\n                }\n                url += Craft.pageTrigger + this.page;\n            }\n\n            history.replaceState({}, '', url);\n        },\n\n        _resetCount: function() {\n            this.resultSet = null;\n            this.totalResults = null;\n        },\n\n        /**\n         * Returns the data that should be passed to the elementIndex/getElements controller action\n         * when loading elements.\n         */\n        getViewParams: function() {\n            var criteria = {\n                siteId: this.siteId,\n                search: this.searchText,\n                offset: this.settings.batchSize * (this.page - 1),\n                limit: this.settings.batchSize,\n            };\n\n            // Only set trashed/drafts/draftOf params when needed, so we don't potentially override a source's criteria\n            if (this.trashed) {\n                criteria.trashed = true;\n            }\n            if (this.drafts) {\n                criteria.drafts = true;\n                criteria.draftOf = false;\n            }\n\n            if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n                criteria.status = this.status;\n            }\n\n            $.extend(criteria, this.settings.criteria);\n\n            var params = {\n                context: this.settings.context,\n                elementType: this.elementType,\n                source: this.instanceState.selectedSource,\n                criteria: criteria,\n                disabledElementIds: this.settings.disabledElementIds,\n                viewState: $.extend({}, this.getSelectedSourceState()),\n                paginated: this._isViewPaginated() ? 1 : 0,\n            };\n\n            // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n            params.viewState.order = this.getSelectedSortAttribute();\n            params.viewState.sort = this.getSelectedSortDirection();\n\n            if (this.getSelectedSortAttribute() === 'structure') {\n                if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                    this.instanceState.collapsedElementIds = [];\n                }\n                params.collapsedElementIds = this.instanceState.collapsedElementIds;\n            }\n\n            // Give plugins a chance to hook in here\n            this.trigger('registerViewParams', {\n                params: params,\n            });\n\n            return params;\n        },\n\n        updateElements: function(preservePagination) {\n            // Ignore if we're not fully initialized yet\n            if (!this.initialized) {\n                return;\n            }\n\n            // Cancel any ongoing requests\n            this._cancelRequests();\n\n            this.setIndexBusy();\n\n            // Kill the old view class\n            if (this.view) {\n                this.view.destroy();\n                delete this.view;\n            }\n\n            if (preservePagination !== true) {\n                this.setPage(1);\n                this._resetCount();\n            }\n\n            var params = this.getViewParams();\n\n            Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n                this._updateView(params, response.data);\n            }).catch(e => {\n                this.setIndexAvailable();\n                if (!this._ignoreFailedRequest) {\n                    Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                }\n            });\n        },\n\n        updateElementsIfSearchTextChanged: function() {\n            if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n                this.updateElements();\n            }\n        },\n\n        showActionTriggers: function() {\n            // Ignore if they're already shown\n            if (this.showingActionTriggers) {\n                return;\n            }\n\n            // Hard-code the min toolbar height in case it was taller than the actions toolbar\n            // (prevents the elements from jumping if this ends up being a double-click)\n            this.$toolbar.css('min-height', this.$toolbar.height());\n\n            // Hide any toolbar inputs\n            this._$detachedToolbarItems = this.$toolbar.children();\n            this._$detachedToolbarItems.detach();\n\n            if (!this._$triggers) {\n                this._createTriggers();\n            } else {\n                this._$triggers.appendTo(this.$toolbar);\n            }\n\n            this.showingActionTriggers = true;\n        },\n\n        submitAction: function(action, actionParams) {\n            // Make sure something's selected\n            var selectedElementIds = this.view.getSelectedElementIds(),\n                totalSelected = selectedElementIds.length;\n\n            if (totalSelected === 0) {\n                return;\n            }\n\n            if (typeof action === 'string') {\n                action = this._findAction(action);\n            }\n\n            if (action.confirm && !confirm(action.confirm)) {\n                return;\n            }\n\n            // Cancel any ongoing requests\n            this._cancelRequests();\n\n            // Get ready to submit\n            var viewParams = this.getViewParams();\n\n            actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n            var params = $.extend(viewParams, action.settings || {}, actionParams, {\n                elementAction: action.type,\n                elementIds: selectedElementIds\n            });\n\n            // Do it\n            this.setIndexBusy();\n            this._autoSelectElements = selectedElementIds;\n\n            if (action.download) {\n                if (Craft.csrfTokenName) {\n                    params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n                }\n                Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                    this.setIndexAvailable();\n                }).catch(e => {\n                    this.setIndexAvailable();\n                });\n            } else {\n                Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    this.setIndexAvailable();\n                    if (response.data.success) {\n                        // Update the count text too\n                        this._resetCount();\n                        this._updateView(viewParams, response.data);\n\n                        if (response.data.message) {\n                            Craft.cp.displayNotice(response.data.message);\n                        }\n\n                        this.afterAction(action, params);\n                    } else {\n                        Craft.cp.displayError(response.data.message);\n                    }\n                }).catch(() => {\n                    this.setIndexAvailable();\n                });\n            }\n        },\n\n        _findAction: function(actionClass) {\n            for (var i = 0; i < this.actions.length; i++) {\n                if (this.actions[i].type === actionClass) {\n                    return this.actions[i];\n                }\n            }\n            throw `Invalid element action: ${actionClass}`;\n        },\n\n        afterAction: function(action, params) {\n            // There may be a new background job that needs to be run\n            Craft.cp.runQueue();\n\n            this.onAfterAction(action, params);\n        },\n\n        hideActionTriggers: function() {\n            // Ignore if there aren't any\n            if (!this.showingActionTriggers) {\n                return;\n            }\n\n            this._$detachedToolbarItems.appendTo(this.$toolbar);\n            this._$triggers.detach();\n            // this._$detachedToolbarItems.removeClass('hidden');\n\n            // Unset the min toolbar height\n            this.$toolbar.css('min-height', '');\n\n            this.showingActionTriggers = false;\n        },\n\n        updateActionTriggers: function() {\n            // Do we have an action UI to update?\n            if (this.actions) {\n                var totalSelected = this.view.getSelectedElements().length;\n\n                if (totalSelected !== 0) {\n                    if (totalSelected === this.view.getEnabledElements().length) {\n                        this.$selectAllCheckbox.removeClass('indeterminate');\n                        this.$selectAllCheckbox.addClass('checked');\n                        this.$selectAllContainer.attr('aria-checked', 'true');\n                    } else {\n                        this.$selectAllCheckbox.addClass('indeterminate');\n                        this.$selectAllCheckbox.removeClass('checked');\n                        this.$selectAllContainer.attr('aria-checked', 'mixed');\n                    }\n\n                    this.showActionTriggers();\n                } else {\n                    this.$selectAllCheckbox.removeClass('indeterminate checked');\n                    this.$selectAllContainer.attr('aria-checked', 'false');\n                    this.hideActionTriggers();\n                }\n            }\n        },\n\n        getSelectedElements: function() {\n            return this.view ? this.view.getSelectedElements() : $();\n        },\n\n        getSelectedElementIds: function() {\n            return this.view ? this.view.getSelectedElementIds() : [];\n        },\n\n        setStatus: function(status) {\n            // Find the option (and make sure it actually exists)\n            var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n            if ($option.length) {\n                this.statusMenu.selectOption($option[0]);\n            }\n        },\n\n        getSortAttributeOption: function(attr) {\n            return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n        },\n\n        getSelectedSortAttribute: function() {\n            return this.$sortAttributesList.find('a.sel:first').data('attr');\n        },\n\n        setSortAttribute: function(attr) {\n            // Find the option (and make sure it actually exists)\n            var $option = this.getSortAttributeOption(attr);\n\n            if ($option.length) {\n                this.$sortAttributesList.find('a.sel').removeClass('sel');\n                $option.addClass('sel');\n\n                var label = $option.text();\n                this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n                this.$sortMenuBtn.text(label);\n\n                if (attr === 'score') {\n                    this.setSortDirection('desc');\n                } else {\n                    this.setSortDirection($option.data('default-dir') || 'asc');\n                }\n\n                if (attr === 'structure') {\n                    this.$sortDirectionsList.find('a').addClass('disabled');\n                } else {\n                    this.$sortDirectionsList.find('a').removeClass('disabled');\n                }\n            }\n        },\n\n        getSortDirectionOption: function(dir) {\n            return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n        },\n\n        getSelectedSortDirection: function() {\n            return this.$sortDirectionsList.find('a.sel:first').data('dir');\n        },\n\n        getSelectedViewMode: function() {\n            return this.getSelectedSourceState('mode') || 'table';\n        },\n\n        setSortDirection: function(dir) {\n            if (dir !== 'desc') {\n                dir = 'asc';\n            }\n\n            this.$sortMenuBtn.attr('data-icon', dir);\n            this.$sortDirectionsList.find('a.sel').removeClass('sel');\n            this.getSortDirectionOption(dir).addClass('sel');\n        },\n\n        getSourceByKey: function(key) {\n            if (typeof this.sourcesByKey[key] === 'undefined') {\n                return null;\n            }\n\n            return this.sourcesByKey[key];\n        },\n\n        selectSource: function($source) {\n            if (!$source || !$source.length) {\n                return false;\n            }\n\n            if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n                return false;\n            }\n\n            // Hide action triggers if they're currently being shown\n            this.hideActionTriggers();\n\n            this.$source = $source;\n            this.sourceKey = $source.data('key');\n            this.setInstanceState('selectedSource', this.sourceKey);\n            this.sourceSelect.selectItem($source);\n\n            Craft.cp.updateSidebarMenuLabel();\n\n            if (this.searching) {\n                // Clear the search value without causing it to update elements\n                this.searchText = null;\n                this.$search.val('');\n                this.stopSearching();\n            }\n\n            // Sort menu\n            // ----------------------------------------------------------------------\n\n            // Remove any existing custom sort options from the menu\n            this.$sortAttributesList.children('li[data-extra]').remove();\n\n            // Does this source have any custom sort options?\n            let sortOptions = this.$source.data('sort-options')\n            if (sortOptions) {\n                for (let i = 0; i < sortOptions.length; i++) {\n                    let $option = $('<li/>', {\n                        'data-extra': true,\n                    })\n                        .append(\n                            $('<a/>', {\n                                text: sortOptions[i][0],\n                                'data-attr': sortOptions[i][1],\n                            })\n                        )\n                        .appendTo(this.$sortAttributesList);\n                    this.sortMenu.addOptions($option.children());\n                }\n            }\n\n            // Does this source have a structure?\n            if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n                if (!this.$structureSortAttribute) {\n                    this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                    this.sortMenu.addOptions(this.$structureSortAttribute.children());\n                }\n\n                this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n            } else if (this.$structureSortAttribute) {\n                this.$structureSortAttribute.removeClass('sel').detach();\n            }\n\n            this.setStoredSortOptionsForSource();\n\n            // Status menu\n            // ----------------------------------------------------------------------\n\n            if (this.$statusMenuBtn.length) {\n                if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                    this.$statusMenuContainer.addClass('hidden');\n                } else {\n                    this.$statusMenuContainer.removeClass('hidden');\n                }\n\n                if (this.trashed) {\n                    // Swap to the initial status\n                    var $firstOption = this.statusMenu.$options.first();\n                    this.setStatus($firstOption.data('status'));\n                }\n            }\n\n            // View mode buttons\n            // ----------------------------------------------------------------------\n\n            // Clear out any previous view mode data\n            if (this.$viewModeBtnContainer) {\n                this.$viewModeBtnContainer.remove();\n            }\n\n            this.viewModeBtns = {};\n            this.viewMode = null;\n\n            // Get the new list of view modes\n            this.sourceViewModes = this.getViewModesForSource();\n\n            // Create the buttons if there's more than one mode available to this source\n            if (this.sourceViewModes.length > 1) {\n                this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n                for (var i = 0; i < this.sourceViewModes.length; i++) {\n                    let sourceViewMode = this.sourceViewModes[i];\n\n                    let $viewModeBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                        'data-view': sourceViewMode.mode,\n                        'data-icon': sourceViewMode.icon,\n                    }).appendTo(this.$viewModeBtnContainer);\n\n                    this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                    this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                        this.selectViewMode(ev.data.mode);\n                        this.updateElements();\n                    });\n                }\n            }\n\n            // Figure out which mode we should start with\n            var viewMode = this.getSelectedViewMode();\n\n            if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n                // Try to keep using the current view mode\n                if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                    viewMode = this.viewMode;\n                }\n                // Just use the first one\n                else {\n                    viewMode = this.sourceViewModes[0].mode;\n                }\n            }\n\n            this.selectViewMode(viewMode);\n\n            this.onSelectSource();\n\n            return true;\n        },\n\n        selectSourceByKey: function(key) {\n            var $source = this.getSourceByKey(key);\n\n            if ($source) {\n                return this.selectSource($source);\n            } else {\n                return false;\n            }\n        },\n\n        setStoredSortOptionsForSource: function() {\n            var sortAttr = this.getSelectedSourceState('order'),\n                sortDir = this.getSelectedSourceState('sort');\n\n            if (!sortAttr || !sortDir) {\n                // Get the default\n                sortAttr = this.getDefaultSort();\n\n                if (Garnish.isArray(sortAttr)) {\n                    sortDir = sortAttr[1];\n                    sortAttr = sortAttr[0];\n                }\n            }\n\n            if (sortDir !== 'asc' && sortDir !== 'desc') {\n                sortDir = 'asc';\n            }\n\n            this.setSortAttribute(sortAttr);\n            this.setSortDirection(sortDir);\n        },\n\n        getDefaultSort: function() {\n            // Does the source specify what to do?\n            if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n                return this.$source.attr('data-default-sort').split(':');\n            } else {\n                // Default to whatever's first\n                return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n            }\n        },\n\n        getViewModesForSource: function() {\n            var viewModes = [\n                {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n            ];\n\n            if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n                viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n            }\n\n            return viewModes;\n        },\n\n        doesSourceHaveViewMode: function(viewMode) {\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                if (this.sourceViewModes[i].mode === viewMode) {\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        selectViewMode: function(viewMode, force) {\n            // Make sure that the current source supports it\n            if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n\n            // Has anything changed?\n            if (viewMode === this.viewMode) {\n                return;\n            }\n\n            // Deselect the previous view mode\n            if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n                this.viewModeBtns[this.viewMode].removeClass('active');\n            }\n\n            this.viewMode = viewMode;\n            this.setSelecetedSourceState('mode', this.viewMode);\n\n            if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n                this.viewModeBtns[this.viewMode].addClass('active');\n            }\n        },\n\n        createView: function(mode, settings) {\n            var viewClass = this.getViewClass(mode);\n            return new viewClass(this, this.$elements, settings);\n        },\n\n        getViewClass: function(mode) {\n            switch (mode) {\n                case 'table':\n                    return Craft.TableElementIndexView;\n                case 'thumbs':\n                    return Craft.ThumbsElementIndexView;\n                default:\n                    throw `View mode \"${mode}\" not supported.`;\n            }\n        },\n\n        rememberDisabledElementId: function(id) {\n            var index = $.inArray(id, this.settings.disabledElementIds);\n\n            if (index === -1) {\n                this.settings.disabledElementIds.push(id);\n            }\n        },\n\n        forgetDisabledElementId: function(id) {\n            var index = $.inArray(id, this.settings.disabledElementIds);\n\n            if (index !== -1) {\n                this.settings.disabledElementIds.splice(index, 1);\n            }\n        },\n\n        enableElements: function($elements) {\n            $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $($elements[i]).data('id');\n                this.forgetDisabledElementId(id);\n            }\n\n            this.onEnableElements($elements);\n        },\n\n        disableElements: function($elements) {\n            $elements.removeClass('sel').addClass('disabled');\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $($elements[i]).data('id');\n                this.rememberDisabledElementId(id);\n            }\n\n            this.onDisableElements($elements);\n        },\n\n        getElementById: function(id) {\n            return this.view.getElementById(id);\n        },\n\n        enableElementsById: function(ids) {\n            ids = $.makeArray(ids);\n\n            for (var i = 0; i < ids.length; i++) {\n                var id = ids[i],\n                    $element = this.getElementById(id);\n\n                if ($element && $element.length) {\n                    this.enableElements($element);\n                } else {\n                    this.forgetDisabledElementId(id);\n                }\n            }\n        },\n\n        disableElementsById: function(ids) {\n            ids = $.makeArray(ids);\n\n            for (var i = 0; i < ids.length; i++) {\n                var id = ids[i],\n                    $element = this.getElementById(id);\n\n                if ($element && $element.length) {\n                    this.disableElements($element);\n                } else {\n                    this.rememberDisabledElementId(id);\n                }\n            }\n        },\n\n        selectElementAfterUpdate: function(id) {\n            if (this._autoSelectElements === null) {\n                this._autoSelectElements = [];\n            }\n\n            this._autoSelectElements.push(id);\n        },\n\n        addButton: function($button) {\n            this.getButtonContainer().append($button);\n        },\n\n        isShowingSidebar: function() {\n            if (this.showingSidebar === null) {\n                this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n            }\n\n            return this.showingSidebar;\n        },\n\n        getButtonContainer: function() {\n            // Is there a predesignated place where buttons should go?\n            if (this.settings.buttonContainer) {\n                return $(this.settings.buttonContainer);\n            } else {\n                var $container = $('#action-button');\n\n                if (!$container.length) {\n                    $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n                }\n\n                return $container;\n            }\n        },\n\n        setIndexBusy: function() {\n            this.$elements.addClass('busy');\n            this.isIndexBusy = true;\n        },\n\n        setIndexAvailable: function() {\n            this.$elements.removeClass('busy');\n            this.isIndexBusy = false;\n        },\n\n        createCustomizeSourcesModal: function() {\n            // Recreate it each time\n            var modal = new Craft.CustomizeSourcesModal(this, {\n                onHide: function() {\n                    modal.destroy();\n                }\n            });\n\n            return modal;\n        },\n\n        disable: function() {\n            if (this.sourceSelect) {\n                this.sourceSelect.disable();\n            }\n\n            if (this.view) {\n                this.view.disable();\n            }\n\n            this.base();\n        },\n\n        enable: function() {\n            if (this.sourceSelect) {\n                this.sourceSelect.enable();\n            }\n\n            if (this.view) {\n                this.view.enable();\n            }\n\n            this.base();\n        },\n\n        onAfterInit: function() {\n            this.settings.onAfterInit();\n            this.trigger('afterInit');\n        },\n\n        onSelectSource: function() {\n            this.settings.onSelectSource(this.sourceKey);\n            this.trigger('selectSource', {sourceKey: this.sourceKey});\n        },\n\n        onSelectSite: function() {\n            this.settings.onSelectSite(this.siteId);\n            this.trigger('selectSite', {siteId: this.siteId});\n        },\n\n        onUpdateElements: function() {\n            this.settings.onUpdateElements();\n            this.trigger('updateElements');\n        },\n\n        onSelectionChange: function() {\n            this.settings.onSelectionChange();\n            this.trigger('selectionChange');\n        },\n\n        onEnableElements: function($elements) {\n            this.settings.onEnableElements($elements);\n            this.trigger('enableElements', {elements: $elements});\n        },\n\n        onDisableElements: function($elements) {\n            this.settings.onDisableElements($elements);\n            this.trigger('disableElements', {elements: $elements});\n        },\n\n        onAfterAction: function(action, params) {\n            this.settings.onAfterAction(action, params);\n            this.trigger('afterAction', {action: action, params: params});\n        },\n\n        // UI state handlers\n        // -------------------------------------------------------------------------\n\n        _handleSourceSelectionChange: function() {\n            // If the selected source was just removed (maybe because its parent was collapsed),\n            // there won't be a selected source\n            if (!this.sourceSelect.totalSelected) {\n                this.sourceSelect.selectItem(this.$visibleSources.first());\n                return;\n            }\n\n            if (this.selectSource(this.sourceSelect.$selectedItems)) {\n                this.updateElements();\n            }\n        },\n\n        _handleActionTriggerSubmit: function(ev) {\n            ev.preventDefault();\n\n            var $form = $(ev.currentTarget);\n\n            // Make sure Craft.ElementActionTrigger isn't overriding this\n            if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n                return;\n            }\n\n            this.submitAction($form.data('action'), Garnish.getPostData($form));\n        },\n\n        _handleMenuActionTriggerSubmit: function(ev) {\n            var $option = $(ev.option);\n\n            // Make sure Craft.ElementActionTrigger isn't overriding this\n            if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n                return;\n            }\n\n            this.submitAction($option.data('action'));\n        },\n\n        _handleStatusChange: function(ev) {\n            this.statusMenu.$options.removeClass('sel');\n            var $option = $(ev.selectedOption).addClass('sel');\n            this.$statusMenuBtn.html($option.html());\n\n            this.trashed = false;\n            this.drafts = false;\n            this.status = null;\n\n            if (Garnish.hasAttr($option, 'data-trashed')) {\n                this.trashed = true;\n            } else if (Garnish.hasAttr($option, 'data-drafts')) {\n                this.drafts = true;\n            } else {\n                this.status = $option.data('status');\n            }\n\n            this._updateStructureSortOption();\n            this.updateElements();\n        },\n\n        _handleSiteChange: function(ev) {\n            this.siteMenu.$options.removeClass('sel');\n            var $option = $(ev.selectedOption).addClass('sel');\n            this.$siteMenuBtn.html($option.html());\n            this._setSite($option.data('site-id'));\n            this.onSelectSite();\n        },\n\n        _setSite: function(siteId) {\n            let firstSite = this.siteId === null;\n            this.siteId = siteId;\n            this.$visibleSources = $();\n\n            // Hide any sources that aren't available for this site\n            var $firstVisibleSource;\n            var $source;\n            // Select a new source automatically if a site is already selected, but we don't have a selected source\n            // (or if the currently selected source ends up not supporting the new site)\n            var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n            for (var i = 0; i < this.$sources.length; i++) {\n                $source = this.$sources.eq(i);\n                if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                    $source.parent().removeClass('hidden');\n                    this.$visibleSources = this.$visibleSources.add($source);\n                    if (!$firstVisibleSource) {\n                        $firstVisibleSource = $source;\n                    }\n                } else {\n                    $source.parent().addClass('hidden');\n\n                    // Is this the currently selected source?\n                    if (this.$source && this.$source.get(0) == $source.get(0)) {\n                        selectNewSource = true;\n                    }\n                }\n            }\n\n            if (this.initialized && selectNewSource) {\n                this.selectSource($firstVisibleSource);\n            }\n\n            // Hide any empty-nester headings\n            var $headings = this.getSourceContainer().children('.heading');\n            var $heading;\n\n            for (i = 0; i < $headings.length; i++) {\n                $heading = $headings.eq(i);\n                if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                    $heading.removeClass('hidden');\n                } else {\n                    $heading.addClass('hidden');\n                }\n            }\n\n            if (this.initialized) {\n                if (this.settings.context === 'index') {\n                    // Remember this site for later\n                    Craft.cp.setSiteId(siteId);\n                }\n\n                // Update the elements\n                this.updateElements();\n            }\n        },\n\n        _handleSortChange: function(ev) {\n            var $option = $(ev.selectedOption);\n\n            if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n                return;\n            }\n\n            // Is this an attribute or a direction?\n            if ($option.parent().parent().is(this.$sortAttributesList)) {\n                this.setSortAttribute($option.data('attr'));\n            } else {\n                this.setSortDirection($option.data('dir'));\n            }\n\n            this.storeSortAttributeAndDirection();\n            this.updateElements();\n        },\n\n        _handleSelectionChange: function() {\n            this.updateActionTriggers();\n            this.onSelectionChange();\n        },\n\n        _handleSourceDblClick: function(ev) {\n            this._toggleSource($(ev.currentTarget));\n            ev.stopPropagation();\n        },\n\n        _handleSourceToggleClick: function(ev) {\n            this._toggleSource($(ev.currentTarget).prev('a'));\n            ev.stopPropagation();\n        },\n\n        _updateStructureSortOption: function() {\n            var $option = this.getSortAttributeOption('structure');\n\n            if (!$option.length) {\n                return;\n            }\n\n            if (this.trashed || this.drafts || this.searching) {\n                $option.addClass('disabled');\n                if (this.getSelectedSortAttribute() === 'structure') {\n                    // Temporarily set the sort to the first option\n                    var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                    this.setSortAttribute($firstOption.data('attr'));\n                    this.setSortDirection('asc');\n                }\n            } else {\n                $option.removeClass('disabled');\n                this.setStoredSortOptionsForSource();\n            }\n        },\n\n        // Source managemnet\n        // -------------------------------------------------------------------------\n\n        _getSourcesInList: function($list) {\n            return $list.children('li').children('a');\n        },\n\n        _getChildSources: function($source) {\n            var $list = $source.siblings('ul');\n            return this._getSourcesInList($list);\n        },\n\n        _getSourceToggle: function($source) {\n            return $source.siblings('.toggle');\n        },\n\n        _initSources: function($sources) {\n            for (var i = 0; i < $sources.length; i++) {\n                this.initSource($($sources[i]));\n            }\n        },\n\n        _deinitSources: function($sources) {\n            for (var i = 0; i < $sources.length; i++) {\n                this.deinitSource($($sources[i]));\n            }\n        },\n\n        _toggleSource: function($source) {\n            if ($source.parent('li').hasClass('expanded')) {\n                this._collapseSource($source);\n            } else {\n                this._expandSource($source);\n            }\n        },\n\n        _expandSource: function($source) {\n            $source.next('.toggle').attr({\n                'aria-expanded': 'true',\n                'aria-label': Craft.t('app', 'Hide nested sources'),\n            });\n            $source.parent('li').addClass('expanded');\n\n            var $childSources = this._getChildSources($source);\n            this._initSources($childSources);\n\n            var key = $source.data('key');\n            if (this.instanceState.expandedSources.indexOf(key) === -1) {\n                this.instanceState.expandedSources.push(key);\n                this.storeInstanceState();\n            }\n        },\n\n        _collapseSource: function($source) {\n            $source.next('.toggle').attr({\n                'aria-expanded': 'false',\n                'aria-label': Craft.t('app', 'Show nested sources'),\n            });\n            $source.parent('li').removeClass('expanded');\n\n            var $childSources = this._getChildSources($source);\n            this._deinitSources($childSources);\n\n            var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n            if (i !== -1) {\n                this.instanceState.expandedSources.splice(i, 1);\n                this.storeInstanceState();\n            }\n        },\n\n        // View\n        // -------------------------------------------------------------------------\n\n        _isViewPaginated: function() {\n            return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n        },\n\n        _updateView: function(params, response) {\n            // Cleanup\n            // -------------------------------------------------------------\n\n            // Get rid of the old action triggers regardless of whether the new batch has actions or not\n            if (this.actions) {\n                this.hideActionTriggers();\n                this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n            }\n\n            // Update the count text\n            // -------------------------------------------------------------\n\n            if (this.$countContainer.length) {\n                this.$countSpinner.removeClass('hidden');\n                this.$countContainer.html('');\n\n                this._countResults()\n                    .then((total) => {\n                        this.$countSpinner.addClass('hidden');\n\n                        let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                        let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                        if (!this._isViewPaginated()) {\n                            let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                                total: total,\n                                item: itemLabel,\n                                items: itemsLabel,\n                            });\n                            this.$countContainer.text(countLabel);\n                        } else {\n                            let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                            let last = Math.min(first + (this.settings.batchSize - 1), total);\n                            let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                                first: first,\n                                last: last,\n                                total: total,\n                                item: itemLabel,\n                                items: itemsLabel,\n                            });\n\n                            let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                            let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                            let $prevBtn = $('<div/>', {\n                                'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                                title: Craft.t('app', 'Previous Page')\n                            }).appendTo($paginationContainer);\n                            let $nextBtn = $('<div/>', {\n                                'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                                title: Craft.t('app', 'Next Page')\n                            }).appendTo($paginationContainer);\n\n                            $('<div/>', {\n                                'class': 'page-info',\n                                text: countLabel\n                            }).appendTo($paginationContainer);\n\n                            if (this.page > 1) {\n                                this.addListener($prevBtn, 'click', function() {\n                                    this.removeListener($prevBtn, 'click');\n                                    this.removeListener($nextBtn, 'click');\n                                    this.setPage(this.page - 1);\n                                    this.updateElements(true);\n                                });\n                            }\n\n                            if (this.page < totalPages) {\n                                this.addListener($nextBtn, 'click', function() {\n                                    this.removeListener($prevBtn, 'click');\n                                    this.removeListener($nextBtn, 'click');\n                                    this.setPage(this.page + 1);\n                                    this.updateElements(true);\n                                });\n                            }\n                        }\n                    })\n                    .catch(() => {\n                        this.$countSpinner.addClass('hidden');\n                    });\n            }\n\n            // Update the view with the new container + elements HTML\n            // -------------------------------------------------------------\n\n            this.$elements.html(response.html);\n            Craft.appendHeadHtml(response.headHtml);\n            Craft.appendFootHtml(response.footHtml);\n\n            // Batch actions setup\n            // -------------------------------------------------------------\n\n            this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n            if (response.actions && response.actions.length) {\n                if (this.$selectAllContainer.length) {\n                    this.actions = response.actions;\n                    this.actionsHeadHtml = response.actionsHeadHtml;\n                    this.actionsFootHtml = response.actionsFootHtml;\n\n                    // Create the select all checkbox\n                    this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                    this.$selectAllContainer.attr({\n                        'role': 'checkbox',\n                        'tabindex': '0',\n                        'aria-checked': 'false'\n                    });\n\n                    this.addListener(this.$selectAllContainer, 'click', function() {\n                        if (this.view.getSelectedElements().length === 0) {\n                            this.view.selectAllElements();\n                        } else {\n                            this.view.deselectAllElements();\n                        }\n                    });\n\n                    this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                        if (ev.keyCode === Garnish.SPACE_KEY) {\n                            ev.preventDefault();\n\n                            $(ev.currentTarget).trigger('click');\n                        }\n                    });\n                }\n            } else {\n                if (!this.$selectAllContainer.siblings().length) {\n                    this.$selectAllContainer.parent('.header').remove();\n                }\n                this.$selectAllContainer.remove();\n            }\n\n            // Exporters setup\n            // -------------------------------------------------------------\n\n            this.exporters = response.exporters;\n            this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n            if (this.exporters && this.exporters.length) {\n                this.$exportBtn.removeClass('hidden');\n            } else {\n                this.$exportBtn.addClass('hidden');\n            }\n\n            // Create the view\n            // -------------------------------------------------------------\n\n            // Should we make the view selectable?\n            var selectable = (this.actions || this.settings.selectable);\n\n            this.view = this.createView(this.getSelectedViewMode(), {\n                context: this.settings.context,\n                batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n                params: params,\n                selectable: selectable,\n                multiSelect: (this.actions || this.settings.multiSelect),\n                checkboxMode: !!this.actions,\n                onSelectionChange: $.proxy(this, '_handleSelectionChange')\n            });\n\n            // Auto-select elements\n            // -------------------------------------------------------------\n\n            if (this._autoSelectElements) {\n                if (selectable) {\n                    for (var i = 0; i < this._autoSelectElements.length; i++) {\n                        this.view.selectElementById(this._autoSelectElements[i]);\n                    }\n                }\n\n                this._autoSelectElements = null;\n            }\n\n            // Trigger the event\n            // -------------------------------------------------------------\n\n            this.onUpdateElements();\n        },\n\n        _countResults: function() {\n            return new Promise((resolve, reject) => {\n                if (this.totalResults !== null) {\n                    resolve(this.totalResults);\n                } else {\n                    var params = this.getViewParams();\n                    delete params.criteria.offset;\n                    delete params.criteria.limit;\n\n                    // Make sure we've got an active result set ID\n                    if (this.resultSet === null) {\n                        this.resultSet = Math.floor(Math.random() * 100000000);\n                    }\n                    params.resultSet = this.resultSet;\n\n                    Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                        data: params,\n                        cancelToken: this._createCancelToken(),\n                    }).then((response) => {\n                        if (response.data.resultSet == this.resultSet) {\n                            this.totalResults = response.data.count;\n                            resolve(response.data.count);\n                        } else {\n                            reject();\n                        }\n                    }).catch(reject);\n                }\n            });\n        },\n\n        _createTriggers: function() {\n            var triggers = [],\n                safeMenuActions = [],\n                destructiveMenuActions = [];\n\n            var i;\n\n            for (i = 0; i < this.actions.length; i++) {\n                var action = this.actions[i];\n\n                if (action.trigger) {\n                    var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                        .data('action', action)\n                        .append(action.trigger);\n\n                    this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                    triggers.push($form);\n                } else {\n                    if (!action.destructive) {\n                        safeMenuActions.push(action);\n                    } else {\n                        destructiveMenuActions.push(action);\n                    }\n                }\n            }\n\n            var $btn;\n\n            if (safeMenuActions.length || destructiveMenuActions.length) {\n                var $menuTrigger = $('<form/>');\n\n                $btn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn menubtn',\n                    'data-icon': 'settings',\n                    title: Craft.t('app', 'Actions'),\n                }).appendTo($menuTrigger);\n\n                var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                    $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                    $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n                if ($safeList) {\n                    $safeList.appendTo($menu);\n                }\n\n                if ($safeList && $destructiveList) {\n                    $('<hr/>').appendTo($menu);\n                }\n\n                if ($destructiveList) {\n                    $destructiveList.appendTo($menu);\n                }\n\n                triggers.push($menuTrigger);\n            }\n\n            this._$triggers = $();\n\n            for (i = 0; i < triggers.length; i++) {\n                var $div = $('<div/>').append(triggers[i]);\n                this._$triggers = this._$triggers.add($div);\n            }\n\n            this._$triggers.appendTo(this.$toolbar);\n            Craft.appendHeadHtml(this.actionsHeadHtml);\n            Craft.appendFootHtml(this.actionsFootHtml);\n\n            Craft.initUiElements(this._$triggers);\n\n            if ($btn) {\n                $btn.data('menubtn').on('optionSelect', $.proxy(this, '_handleMenuActionTriggerSubmit'));\n            }\n        },\n\n        _showExportHud: function() {\n            this.$exportBtn.addClass('active');\n\n            var $form = $('<form/>', {\n                'class': 'export-form'\n            });\n\n            var typeOptions = [];\n            for (var i = 0; i < this.exporters.length; i++) {\n                typeOptions.push({ label: this.exporters[i].name, value: this.exporters[i].type });\n            }\n            var $typeField = Craft.ui.createSelectField({\n                label: Craft.t('app', 'Export Type'),\n                options: typeOptions,\n                'class': 'fullwidth',\n            }).appendTo($form);\n\n            var $formatField = Craft.ui.createSelectField({\n                label: Craft.t('app', 'Format'),\n                options: [\n                    { label: 'CSV', value: 'csv' },\n                    { label: 'JSON', value: 'json' },\n                    { label: 'XML', value: 'xml' },\n                ],\n                'class': 'fullwidth',\n            }).appendTo($form);\n\n            let $typeSelect = $typeField.find('select');\n            this.addListener($typeSelect, 'change', () => {\n                let type = $typeSelect.val();\n                if (this.exportersByType[type].formattable) {\n                    $formatField.removeClass('hidden');\n                } else {\n                    $formatField.addClass('hidden');\n                }\n            });\n            $typeSelect.trigger('change');\n\n            // Only show the Limit field if there aren't any selected elements\n            var selectedElementIds = this.view.getSelectedElementIds();\n\n            if (!selectedElementIds.length) {\n                var $limitField = Craft.ui.createTextField({\n                    label: Craft.t('app', 'Limit'),\n                    placeholder: Craft.t('app', 'No limit'),\n                    type: 'number',\n                    min: 1\n                }).appendTo($form);\n            }\n\n            $('<button/>', {\n                type: 'submit',\n                'class': 'btn submit fullwidth',\n                text: Craft.t('app', 'Export')\n            }).appendTo($form)\n\n            var $spinner = $('<div/>', {\n                'class': 'spinner hidden'\n            }).appendTo($form);\n\n            var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n            hud.on('hide', $.proxy(function() {\n                this.$exportBtn.removeClass('active');\n            }, this));\n\n            var submitting = false;\n\n            this.addListener($form, 'submit', function(ev) {\n                ev.preventDefault();\n                if (submitting) {\n                    return;\n                }\n\n                submitting = true;\n                $spinner.removeClass('hidden');\n\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                params.type = $typeField.find('select').val();\n                params.format = $formatField.find('select').val();\n\n                if (selectedElementIds.length) {\n                    params.criteria.id = selectedElementIds;\n                } else {\n                    var limit = parseInt($limitField.find('input').val());\n                    if (limit && !isNaN(limit)) {\n                        params.criteria.limit = limit;\n                    }\n                }\n\n                if (Craft.csrfTokenValue) {\n                    params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n                }\n\n                Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                    .then(function() {\n                        submitting = false;\n                        $spinner.addClass('hidden');\n                    })\n                    .catch(function() {\n                        submitting = false;\n                        $spinner.addClass('hidden');\n                        if (!this._ignoreFailedRequest) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                    });\n            });\n        },\n\n        _createMenuTriggerList: function(actions, destructive) {\n            if (actions && actions.length) {\n                var $ul = $('<ul/>');\n\n                for (var i = 0; i < actions.length; i++) {\n                    $('<li/>').append($('<a/>', {\n                        id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                        'class': (destructive ? 'error' : null),\n                        data: {\n                            action: actions[i],\n                        },\n                        text: actions[i].name\n                    })).appendTo($ul);\n                }\n\n                return $ul;\n            }\n        }\n    },\n    {\n        defaults: {\n            context: 'index',\n            modal: null,\n            storageKey: null,\n            criteria: null,\n            batchSize: 100,\n            disabledElementIds: [],\n            selectable: false,\n            multiSelect: false,\n            buttonContainer: null,\n            hideSidebar: false,\n            toolbarSelector: '.toolbar:first',\n            refreshSourcesAction: 'element-indexes/get-source-tree-html',\n            updateElementsAction: 'element-indexes/get-elements',\n            countElementsAction: 'element-indexes/count-elements',\n            submitActionsAction: 'element-indexes/perform-action',\n            defaultSiteId: null,\n            defaultSource: null,\n\n            onAfterInit: $.noop,\n            onSelectSource: $.noop,\n            onSelectSite: $.noop,\n            onUpdateElements: $.noop,\n            onSelectionChange: $.noop,\n            onEnableElements: $.noop,\n            onDisableElements: $.noop,\n            onAfterAction: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend(\n    {\n        $container: null,\n        $loadingMoreSpinner: null,\n        $elementContainer: null,\n        $scroller: null,\n\n        elementIndex: null,\n        thumbLoader: null,\n        elementSelect: null,\n\n        loadingMore: false,\n\n        _totalVisible: null,\n        _morePending: null,\n        _handleEnableElements: null,\n        _handleDisableElements: null,\n\n        init: function(elementIndex, container, settings) {\n            this.elementIndex = elementIndex;\n            this.$container = $(container);\n            this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n            // Create a \"loading-more\" spinner\n            this.$loadingMoreSpinner = $(\n                '<div class=\"centeralign hidden\">' +\n                '<div class=\"spinner loadingmore\"></div>' +\n                '</div>'\n            ).insertAfter(this.$container);\n\n            // Get the actual elements container and its child elements\n            this.$elementContainer = this.getElementContainer();\n            var $elements = this.$elementContainer.children();\n\n            this.setTotalVisible($elements.length);\n            this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n            // Instantiate the thumb loader\n            this.thumbLoader = new Craft.ElementThumbLoader();\n            this.thumbLoader.load($elements);\n\n            if (this.settings.selectable) {\n                this.elementSelect = new Garnish.Select(\n                    this.$elementContainer,\n                    $elements.filter(':not(.disabled)'),\n                    {\n                        multi: this.settings.multiSelect,\n                        vertical: this.isVerticalList(),\n                        handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                        filter: ':not(a):not(.toggle)',\n                        checkboxMode: this.settings.checkboxMode,\n                        onSelectionChange: $.proxy(this, 'onSelectionChange')\n                    }\n                );\n\n                this._handleEnableElements = $.proxy(function(ev) {\n                    this.elementSelect.addItems(ev.elements);\n                }, this);\n\n                this._handleDisableElements = $.proxy(function(ev) {\n                    this.elementSelect.removeItems(ev.elements);\n                }, this);\n\n                this.elementIndex.on('enableElements', this._handleEnableElements);\n                this.elementIndex.on('disableElements', this._handleDisableElements);\n            }\n\n            // Enable inline element editing if this is an index page\n            if (this.settings.context === 'index') {\n                this._handleElementEditing = $.proxy(function(ev) {\n                    var $target = $(ev.target);\n\n                    if ($target.prop('nodeName') === 'A') {\n                        // Let the link do its thing\n                        return;\n                    }\n\n                    var $element;\n\n                    if ($target.hasClass('element')) {\n                        $element = $target;\n                    }\n                    else {\n                        $element = $target.closest('.element');\n\n                        if (!$element.length) {\n                            return;\n                        }\n                    }\n\n                    if (Garnish.hasAttr($element, 'data-editable')) {\n                        this.createElementEditor($element);\n                    }\n                }, this);\n\n                if (!this.elementIndex.trashed) {\n                    this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                    if ($.isTouchCapable()) {\n                        this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                    }\n                }\n            }\n\n            // Give sub-classes a chance to do post-initialization stuff here\n            this.afterInit();\n\n            // Set up lazy-loading\n            if (this.settings.batchSize) {\n                if (this.settings.context === 'index') {\n                    this.$scroller = Garnish.$scrollContainer;\n                }\n                else {\n                    this.$scroller = this.elementIndex.$main;\n                }\n\n                this.$scroller.scrollTop(0);\n                this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                this.maybeLoadMore();\n            }\n        },\n\n        getElementContainer: function() {\n            throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n        },\n\n        afterInit: function() {\n        },\n\n        getAllElements: function() {\n            return this.$elementContainer.children();\n        },\n\n        getEnabledElements: function() {\n            return this.$elementContainer.children(':not(.disabled)');\n        },\n\n        getElementById: function(id) {\n            var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n            if ($element.length) {\n                return $element;\n            }\n            else {\n                return null;\n            }\n        },\n\n        getSelectedElements: function() {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            return this.elementSelect.$selectedItems;\n        },\n\n        getSelectedElementIds: function() {\n            let $selectedElements;\n            try {\n                $selectedElements = this.getSelectedElements();\n            } catch (e) {\n            }\n\n            let ids = [];\n            if ($selectedElements) {\n                for (var i = 0; i < $selectedElements.length; i++) {\n                    ids.push($selectedElements.eq(i).data('id'));\n                }\n            }\n            return ids;\n        },\n\n        selectElement: function($element) {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            this.elementSelect.selectItem($element, true);\n            return true;\n        },\n\n        selectElementById: function(id) {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            var $element = this.getElementById(id);\n\n            if ($element) {\n                this.elementSelect.selectItem($element, true);\n                return true;\n            }\n            else {\n                return false;\n            }\n        },\n\n        selectAllElements: function() {\n            this.elementSelect.selectAll();\n        },\n\n        deselectAllElements: function() {\n            this.elementSelect.deselectAll();\n        },\n\n        isVerticalList: function() {\n            return false;\n        },\n\n        getTotalVisible: function() {\n            return this._totalVisible;\n        },\n\n        setTotalVisible: function(totalVisible) {\n            this._totalVisible = totalVisible;\n        },\n\n        getMorePending: function() {\n            return this._morePending;\n        },\n\n        setMorePending: function(morePending) {\n            this._morePending = morePending;\n        },\n\n        /**\n         * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n         */\n        maybeLoadMore: function() {\n            if (this.canLoadMore()) {\n                this.loadMore();\n            }\n        },\n\n        /**\n         * Returns whether the user has reached the bottom of the scroll area.\n         */\n        canLoadMore: function() {\n            if (!this.getMorePending() || !this.settings.batchSize) {\n                return false;\n            }\n\n            // Check if the user has reached the bottom of the scroll area\n            var containerHeight;\n\n            if (this.$scroller[0] === Garnish.$win[0]) {\n                var winHeight = Garnish.$win.innerHeight(),\n                    winScrollTop = Garnish.$win.scrollTop(),\n                    containerOffset = this.$container.offset().top;\n                containerHeight = this.$container.height();\n\n                return (winHeight + winScrollTop >= containerOffset + containerHeight);\n            }\n            else {\n                var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                    containerScrollTop = this.$scroller.scrollTop();\n                containerHeight = this.$scroller.outerHeight();\n\n                return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n            }\n        },\n\n        /**\n         * Loads the next batch of elements.\n         */\n        loadMore: function() {\n            if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n                return;\n            }\n\n            this.loadingMore = true;\n            this.$loadingMoreSpinner.removeClass('hidden');\n            this.removeListener(this.$scroller, 'scroll');\n\n            var data = this.getLoadMoreParams();\n\n            Craft.postActionRequest(this.settings.loadMoreElementsAction, data, $.proxy(function(response, textStatus) {\n                this.loadingMore = false;\n                this.$loadingMoreSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $newElements = $(response.html);\n\n                    this.appendElements($newElements);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n\n                    if (this.elementSelect) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n                    this.setMorePending($newElements.length == this.settings.batchSize);\n\n                    // Is there room to load more right now?\n                    this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                    this.maybeLoadMore();\n                }\n            }, this));\n        },\n\n        getLoadMoreParams: function() {\n            // Use the same params that were passed when initializing this view\n            var params = $.extend(true, {}, this.settings.params);\n            params.criteria.offset = this.getTotalVisible();\n            return params;\n        },\n\n        appendElements: function($newElements) {\n            $newElements.appendTo(this.$elementContainer);\n            this.thumbLoader.load($newElements);\n            this.onAppendElements($newElements);\n        },\n\n        onAppendElements: function($newElements) {\n            this.settings.onAppendElements($newElements);\n            this.trigger('appendElements', {\n                newElements: $newElements\n            });\n        },\n\n        onSelectionChange: function() {\n            this.settings.onSelectionChange();\n            this.trigger('selectionChange');\n        },\n\n        createElementEditor: function($element) {\n            Craft.createElementEditor($element.data('type'), $element, {\n                elementIndex: this.elementIndex\n            });\n        },\n\n        disable: function() {\n            if (this.elementSelect) {\n                this.elementSelect.disable();\n            }\n        },\n\n        enable: function() {\n            if (this.elementSelect) {\n                this.elementSelect.enable();\n            }\n        },\n\n        destroy: function() {\n            // Remove the \"loading-more\" spinner, since we added that outside of the view container\n            this.$loadingMoreSpinner.remove();\n\n            // Kill the thumb loader\n            this.thumbLoader.destroy();\n            delete this.thumbLoader;\n\n            // Delete the element select\n            if (this.elementSelect) {\n                this.elementIndex.off('enableElements', this._handleEnableElements);\n                this.elementIndex.off('disableElements', this._handleDisableElements);\n\n                this.elementSelect.destroy();\n                delete this.elementSelect;\n            }\n\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            context: 'index',\n            batchSize: null,\n            params: null,\n            selectable: false,\n            multiSelect: false,\n            checkboxMode: false,\n            loadMoreElementsAction: 'element-indexes/get-more-elements',\n            onAppendElements: $.noop,\n            onSelectionChange: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend(\n    {\n        thumbLoader: null,\n        elementSelect: null,\n        elementSort: null,\n        modal: null,\n        elementEditor: null,\n\n        $container: null,\n        $elementsContainer: null,\n        $elements: null,\n        $addElementBtn: null,\n        $addElementBtnContainer: null,\n\n        _initialized: false,\n\n        init: function(settings) {\n            // Normalize the settings and set them\n            // ---------------------------------------------------------------------\n\n            // Are they still passing in a bunch of arguments?\n            if (!$.isPlainObject(settings)) {\n                // Loop through all of the old arguments and apply them to the settings\n                var normalizedSettings = {},\n                    args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n                for (var i = 0; i < args.length; i++) {\n                    if (typeof arguments[i] !== 'undefined') {\n                        normalizedSettings[args[i]] = arguments[i];\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                settings = normalizedSettings;\n            }\n\n            this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n            // Apply the storage key prefix\n            if (this.settings.modalStorageKey) {\n                this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n            }\n\n            // No reason for this to be sortable if we're only allowing 1 selection\n            if (this.settings.limit == 1) {\n                this.settings.sortable = false;\n            }\n\n            this.$container = this.getContainer();\n\n            // Store a reference to this class\n            this.$container.data('elementSelect', this);\n\n            this.$elementsContainer = this.getElementsContainer();\n\n            this.$addElementBtn = this.getAddElementsBtn();\n            if (this.$addElementBtn) {\n                this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n                if (!this.$addElementBtnContainer.length) {\n                    this.$addElementBtnContainer = null;\n                }\n            }\n\n            this.thumbLoader = new Craft.ElementThumbLoader();\n\n            this.initElementSelect();\n            this.initElementSort();\n            this.resetElements();\n\n            if (this.$addElementBtn) {\n                this.addListener(this.$addElementBtn, 'activate', 'showModal');\n            }\n\n            Garnish.requestAnimationFrame(() => {\n                this._initialized = true;\n            });\n        },\n\n        get totalSelected() {\n            return this.$elements.length;\n        },\n\n        getContainer: function() {\n            return $('#' + this.settings.id);\n        },\n\n        getElementsContainer: function() {\n            return this.$container.children('.elements');\n        },\n\n        getElements: function() {\n            return this.$elementsContainer.children();\n        },\n\n        getAddElementsBtn: function() {\n            return this.$container.find('.btn.add:first');\n        },\n\n        initElementSelect: function() {\n            if (this.settings.selectable) {\n                this.elementSelect = new Garnish.Select({\n                    multi: this.settings.sortable,\n                    filter: ':not(.delete)'\n                });\n            }\n        },\n\n        initElementSort: function() {\n            if (this.settings.sortable) {\n                this.elementSort = new Garnish.DragSort({\n                    container: this.$elementsContainer,\n                    filter: (this.settings.selectable ? $.proxy(function() {\n                            // Only return all the selected items if the target item is selected\n                            if (this.elementSort.$targetItem.hasClass('sel')) {\n                                return this.elementSelect.getSelectedItems();\n                            }\n                            else {\n                                return this.elementSort.$targetItem;\n                            }\n                        }, this) : null),\n                    ignoreHandleSelector: '.delete',\n                    axis: this.getElementSortAxis(),\n                    collapseDraggees: true,\n                    magnetStrength: 4,\n                    helperLagBase: 1.5,\n                    onSortChange: (this.settings.selectable ? $.proxy(function() {\n                            this.elementSelect.resetItemOrder();\n                        }, this) : null)\n                });\n            }\n        },\n\n        getElementSortAxis: function() {\n            return (this.settings.viewMode === 'list' ? 'y' : null);\n        },\n\n        canAddMoreElements: function() {\n            return (!this.settings.limit || this.$elements.length < this.settings.limit);\n        },\n\n        updateAddElementsBtn: function() {\n            if (this.canAddMoreElements()) {\n                this.enableAddElementsBtn();\n            }\n            else {\n                this.disableAddElementsBtn();\n            }\n        },\n\n        disableAddElementsBtn: function() {\n            let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n            if ($btn) {\n                $btn.addClass('hidden');\n            }\n        },\n\n        enableAddElementsBtn: function() {\n            let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n            if ($btn) {\n                $btn.removeClass('hidden');\n            }\n        },\n\n        resetElements: function() {\n            if (this.$elements !== null) {\n                this.removeElements(this.$elements);\n            } else {\n                this.$elements = $();\n            }\n\n            this.addElements(this.getElements());\n        },\n\n        addElements: function($elements) {\n            this.thumbLoader.load($elements);\n\n            if (this.settings.selectable) {\n                this.elementSelect.addItems($elements);\n            }\n\n            if (this.settings.sortable) {\n                this.elementSort.addItems($elements);\n            }\n\n            if (this.settings.editable) {\n                this._handleShowElementEditor = $.proxy(function(ev) {\n                    var $element = $(ev.currentTarget);\n                    if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                        this.elementEditor = this.createElementEditor($element);\n                    }\n                }, this);\n\n                this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n                if ($.isTouchCapable()) {\n                    this.addListener($elements, 'taphold', this._handleShowElementEditor);\n                }\n            }\n\n            $elements.find('.delete').on('click dblclick', $.proxy(function(ev) {\n                this.removeElement($(ev.currentTarget).closest('.element'));\n                // Prevent this from acting as one of a double-click\n                ev.stopPropagation();\n            }, this));\n\n            this.$elements = this.$elements.add($elements);\n            this.updateAddElementsBtn();\n        },\n\n        createElementEditor: function($element, settings) {\n            if (!settings) {\n                settings = {};\n            }\n            settings.prevalidate = this.settings.prevalidate;\n            return Craft.createElementEditor(this.settings.elementType, $element, settings);\n        },\n\n        removeElements: function($elements) {\n            if (this.settings.selectable) {\n                this.elementSelect.removeItems($elements);\n            }\n\n            if (this.modal) {\n                var ids = [];\n\n                for (var i = 0; i < $elements.length; i++) {\n                    var id = $elements.eq(i).data('id');\n\n                    if (id) {\n                        ids.push(id);\n                    }\n                }\n\n                if (ids.length) {\n                    this.modal.elementIndex.enableElementsById(ids);\n                }\n            }\n\n            // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n            $elements.children('input').prop('disabled', true);\n\n            this.$elements = this.$elements.not($elements);\n            this.updateAddElementsBtn();\n\n            this.onRemoveElements();\n        },\n\n        removeElement: function($element) {\n            this.removeElements($element);\n            this.animateElementAway($element, () => {\n                $element.remove();\n            });\n        },\n\n        animateElementAway: function($element, callback) {\n            $element.css('z-index', 0);\n\n            var animateCss = {\n                opacity: -1\n            };\n            animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n            if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n                animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n            }\n\n            // Pause the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.pause();\n            }\n\n            $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n                callback();\n\n                // Resume the draft editor\n                if (window.draftEditor) {\n                    window.draftEditor.resume();\n                }\n            });\n        },\n\n        showModal: function() {\n            // Make sure we haven't reached the limit\n            if (!this.canAddMoreElements()) {\n                return;\n            }\n\n            if (!this.modal) {\n                this.modal = this.createModal();\n            }\n            else {\n                this.modal.show();\n            }\n        },\n\n        createModal: function() {\n            return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n        },\n\n        getModalSettings: function() {\n            return $.extend({\n                closeOtherModals: false,\n                storageKey: this.modalStorageKey,\n                sources: this.settings.sources,\n                criteria: this.settings.criteria,\n                multiSelect: (this.settings.limit != 1),\n                showSiteMenu: this.settings.showSiteMenu,\n                disabledElementIds: this.getDisabledElementIds(),\n                onSelect: $.proxy(this, 'onModalSelect')\n            }, this.settings.modalSettings);\n        },\n\n        getSelectedElementIds: function() {\n            var ids = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                ids.push(this.$elements.eq(i).data('id'));\n            }\n\n            return ids;\n        },\n\n        getDisabledElementIds: function() {\n            var ids = this.getSelectedElementIds();\n\n            if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n                ids.push(this.settings.sourceElementId);\n            }\n\n            if (this.settings.disabledElementIds) {\n                ids.push(...this.settings.disabledElementIds);\n            }\n\n            return ids;\n        },\n\n        onModalSelect: function(elements) {\n            if (this.settings.limit) {\n                // Cut off any excess elements\n                var slotsLeft = this.settings.limit - this.$elements.length;\n\n                if (elements.length > slotsLeft) {\n                    elements = elements.slice(0, slotsLeft);\n                }\n            }\n\n            this.selectElements(elements);\n            this.updateDisabledElementsInModal();\n        },\n\n        selectElements: function(elements) {\n            for (let i = 0; i < elements.length; i++) {\n                let elementInfo = elements[i],\n                    $element = this.createNewElement(elementInfo);\n\n                this.appendElement($element);\n                this.addElements($element);\n                this.animateElementIntoPlace(elementInfo.$element, $element);\n\n                // Override the element reference with the new one\n                elementInfo.$element = $element;\n            }\n\n            this.onSelectElements(elements);\n        },\n\n        createNewElement: function(elementInfo) {\n            var $element = elementInfo.$element.clone();\n\n            // Make a couple tweaks\n            Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n            $element.addClass('removable');\n            $element.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + elementInfo.id + '\">' +\n                '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n            return $element;\n        },\n\n        appendElement: function($element) {\n            $element.appendTo(this.$elementsContainer);\n        },\n\n        animateElementIntoPlace: function($modalElement, $inputElement) {\n            var origOffset = $modalElement.offset(),\n                destOffset = $inputElement.offset(),\n                $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n            $inputElement.css('visibility', 'hidden');\n\n            $helper.css({\n                position: 'absolute',\n                zIndex: 10000,\n                top: origOffset.top,\n                left: origOffset.left\n            });\n\n            var animateCss = {\n                top: destOffset.top,\n                left: destOffset.left\n            };\n\n            $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n                $helper.remove();\n                $inputElement.css('visibility', 'visible');\n            });\n        },\n\n        updateDisabledElementsInModal: function() {\n            if (this.modal.elementIndex) {\n                this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n            }\n        },\n\n        getElementById: function(id) {\n            for (var i = 0; i < this.$elements.length; i++) {\n                var $element = this.$elements.eq(i);\n\n                if ($element.data('id') == id) {\n                    return $element;\n                }\n            }\n        },\n\n        onSelectElements: function(elements) {\n            this.trigger('selectElements', {elements: elements});\n            this.settings.onSelectElements(elements);\n\n            if (window.draftEditor) {\n                window.draftEditor.checkForm();\n            }\n        },\n\n        onRemoveElements: function() {\n            this.trigger('removeElements');\n            this.settings.onRemoveElements();\n        }\n    },\n    {\n        ADD_FX_DURATION: 200,\n        REMOVE_FX_DURATION: 200,\n\n        defaults: {\n            id: null,\n            name: null,\n            fieldId: null,\n            elementType: null,\n            sources: null,\n            criteria: {},\n            allowSelfRelations: false,\n            sourceElementId: null,\n            disabledElementIds: null,\n            viewMode: 'list',\n            limit: null,\n            showSiteMenu: false,\n            modalStorageKey: null,\n            modalSettings: {},\n            onSelectElements: $.noop,\n            onRemoveElements: $.noop,\n            sortable: true,\n            selectable: true,\n            editable: true,\n            prevalidate: false,\n            editorSettings: {}\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend(\n    {\n        elementType: null,\n        elementIndex: null,\n\n        $body: null,\n        $selectBtn: null,\n        $sidebar: null,\n        $sources: null,\n        $sourceToggles: null,\n        $main: null,\n        $search: null,\n        $elements: null,\n        $tbody: null,\n        $primaryButtons: null,\n        $secondaryButtons: null,\n        $cancelBtn: null,\n        $footerSpinner: null,\n\n        init: function(elementType, settings) {\n            this.elementType = elementType;\n            this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n            // Build the modal\n            var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n                $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n                $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n            this.base($container, this.settings);\n\n            this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n            this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n            this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$primaryButtons);\n            this.$selectBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn disabled submit',\n                text: Craft.t('app', 'Select'),\n            }).appendTo(this.$primaryButtons);\n\n            this.$body = $body;\n\n            this.addListener(this.$cancelBtn, 'activate', 'cancel');\n            this.addListener(this.$selectBtn, 'activate', 'selectElements');\n        },\n\n        onFadeIn: function() {\n            if (!this.elementIndex) {\n                this._createElementIndex();\n            }\n            else {\n                // Auto-focus the Search box\n                if (!Garnish.isMobileBrowser(true)) {\n                    this.elementIndex.$search.trigger('focus');\n                }\n            }\n\n            this.base();\n        },\n\n        onSelectionChange: function() {\n            this.updateSelectBtnState();\n        },\n\n        updateSelectBtnState: function() {\n            if (this.$selectBtn) {\n                if (this.elementIndex.getSelectedElements().length) {\n                    this.enableSelectBtn();\n                }\n                else {\n                    this.disableSelectBtn();\n                }\n            }\n        },\n\n        enableSelectBtn: function() {\n            this.$selectBtn.removeClass('disabled');\n        },\n\n        disableSelectBtn: function() {\n            this.$selectBtn.addClass('disabled');\n        },\n\n        enableCancelBtn: function() {\n            this.$cancelBtn.removeClass('disabled');\n        },\n\n        disableCancelBtn: function() {\n            this.$cancelBtn.addClass('disabled');\n        },\n\n        showFooterSpinner: function() {\n            this.$footerSpinner.removeClass('hidden');\n        },\n\n        hideFooterSpinner: function() {\n            this.$footerSpinner.addClass('hidden');\n        },\n\n        cancel: function() {\n            if (!this.$cancelBtn.hasClass('disabled')) {\n                this.hide();\n            }\n        },\n\n        selectElements: function() {\n            if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n                // TODO: This code shouldn't know about views' elementSelect objects\n                this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n                var $selectedElements = this.elementIndex.getSelectedElements(),\n                    elementInfo = this.getElementInfo($selectedElements);\n\n                this.onSelect(elementInfo);\n\n                if (this.settings.disableElementsOnSelect) {\n                    this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n                }\n\n                if (this.settings.hideOnSelect) {\n                    this.hide();\n                }\n            }\n        },\n\n        getElementInfo: function($selectedElements) {\n            var info = [];\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                var $element = $($selectedElements[i]);\n                var elementInfo = Craft.getElementInfo($element);\n\n                info.push(elementInfo);\n            }\n\n            return info;\n        },\n\n        show: function() {\n            this.updateSelectBtnState();\n            this.base();\n        },\n\n        onSelect: function(elementInfo) {\n            this.settings.onSelect(elementInfo);\n        },\n\n        disable: function() {\n            if (this.elementIndex) {\n                this.elementIndex.disable();\n            }\n\n            this.base();\n        },\n\n        enable: function() {\n            if (this.elementIndex) {\n                this.elementIndex.enable();\n            }\n\n            this.base();\n        },\n\n        _createElementIndex: function() {\n            // Get the modal body HTML based on the settings\n            var data = {\n                context: 'modal',\n                elementType: this.elementType,\n                sources: this.settings.sources\n            };\n\n            if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n                data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n            }\n\n            Craft.postActionRequest('elements/get-modal-body', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.$body.html(response.html);\n\n                    if (this.$body.has('.sidebar:not(.hidden)').length) {\n                        this.$body.addClass('has-sidebar');\n                    }\n\n                    // Initialize the element index\n                    this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                        context: 'modal',\n                        modal: this,\n                        storageKey: this.settings.storageKey,\n                        criteria: this.settings.criteria,\n                        disabledElementIds: this.settings.disabledElementIds,\n                        selectable: true,\n                        multiSelect: this.settings.multiSelect,\n                        buttonContainer: this.$secondaryButtons,\n                        onSelectionChange: $.proxy(this, 'onSelectionChange'),\n                        hideSidebar: this.settings.hideSidebar,\n                        defaultSiteId: this.settings.defaultSiteId,\n                        defaultSource: this.settings.defaultSource\n                    });\n\n                    // Double-clicking or double-tapping should select the elements\n                    this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                        // Make sure the touch targets are the same\n                        // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                        if (touchData.firstTap.target === touchData.secondTap.target) {\n                            this.selectElements();\n                        }\n                    });\n                }\n            }, this));\n        }\n    },\n    {\n        defaults: {\n            resizable: true,\n            storageKey: null,\n            sources: null,\n            criteria: null,\n            multiSelect: false,\n            showSiteMenu: null,\n            disabledElementIds: [],\n            disableElementsOnSelect: false,\n            hideOnSelect: true,\n            onCancel: $.noop,\n            onSelect: $.noop,\n            hideSidebar: false,\n            defaultSiteId: null,\n            defaultSource: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend(\n    {\n        $source: null,\n        $target: null,\n        $form: null,\n        settings: null,\n\n        listening: null,\n        timeout: null,\n\n        init: function(source, target, settings) {\n            this.$source = $(source);\n            this.$target = $(target);\n            this.$form = this.$source.closest('form');\n\n            this.setSettings(settings);\n\n            this.startListening();\n        },\n\n        setNewSource: function(source) {\n            var listening = this.listening;\n            this.stopListening();\n\n            this.$source = $(source);\n\n            if (listening) {\n                this.startListening();\n            }\n        },\n\n        startListening: function() {\n            if (this.listening) {\n                return;\n            }\n\n            this.listening = true;\n\n            this.addListener(this.$source, 'input', 'onSourceTextChange');\n            this.addListener(this.$target, 'input', 'onTargetTextChange');\n            this.addListener(this.$form, 'submit', 'onFormSubmit');\n        },\n\n        stopListening: function() {\n            if (!this.listening) {\n                return;\n            }\n\n            this.listening = false;\n\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.removeAllListeners(this.$source);\n            this.removeAllListeners(this.$target);\n            this.removeAllListeners(this.$form);\n        },\n\n        onSourceTextChange: function() {\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.timeout = setTimeout($.proxy(this, 'updateTarget'), 250);\n        },\n\n        onTargetTextChange: function() {\n            if (this.$target.get(0) === document.activeElement) {\n                this.stopListening();\n            }\n        },\n\n        onFormSubmit: function() {\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.updateTarget();\n        },\n\n        updateTarget: function() {\n            if (!this.$target.is(':visible')) {\n                return;\n            }\n\n            var sourceVal = this.$source.val();\n\n            if (typeof sourceVal === 'undefined') {\n                // The source input may not exist anymore\n                return;\n            }\n\n            var targetVal = this.generateTargetValue(sourceVal);\n\n            this.$target.val(targetVal);\n            this.$target.trigger('change');\n            this.$target.trigger('input');\n\n            // If the target already has focus, select its whole value to mimic\n            // the behavior if the value had already been generated and they just tabbed in\n            if (this.$target.is(':focus')) {\n                Craft.selectFullValue(this.$target);\n            }\n        },\n\n        generateTargetValue: function(sourceVal) {\n            return sourceVal;\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend(\n    {\n        settings: null,\n        totalItems: null,\n        sorter: null,\n\n        $noItems: null,\n        $table: null,\n        $tbody: null,\n        $deleteBtns: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.AdminTable.defaults);\n\n            if (!this.settings.allowDeleteAll) {\n                this.settings.minItems = 1;\n            }\n\n            this.$noItems = $(this.settings.noItemsSelector);\n            this.$table = $(this.settings.tableSelector);\n            this.$tbody = this.$table.children('tbody');\n            this.totalItems = this.$tbody.children().length;\n\n            if (this.settings.sortable) {\n                this.sorter = new Craft.DataTableSorter(this.$table, {\n                    onSortChange: $.proxy(this, 'reorderItems')\n                });\n            }\n\n            this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n            this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n            this.updateUI();\n        },\n\n        addRow: function(row) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                // Sorry pal.\n                return;\n            }\n\n            var $row = $(row).appendTo(this.$tbody),\n                $deleteBtn = $row.find('.delete');\n\n            if (this.settings.sortable) {\n                this.sorter.addItems($row);\n            }\n\n            this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n            this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n            this.totalItems++;\n\n            this.updateUI();\n        },\n\n        reorderItems: function() {\n            if (!this.settings.sortable) {\n                return;\n            }\n\n            // Get the new field order\n            var ids = [];\n\n            for (var i = 0; i < this.sorter.$items.length; i++) {\n                var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n                ids.push(id);\n            }\n\n            // Send it to the server\n            var data = {\n                ids: JSON.stringify(ids)\n            };\n\n            Craft.postActionRequest(this.settings.reorderAction, data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.onReorderItems(ids);\n                        Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                    }\n                    else {\n                        Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                    }\n                }\n            }, this));\n        },\n\n        handleDeleteBtnClick: function(event) {\n            if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n                // Sorry pal.\n                return;\n            }\n\n            var $row = $(event.target).closest('tr');\n\n            if (this.confirmDeleteItem($row)) {\n                this.deleteItem($row);\n            }\n        },\n\n        confirmDeleteItem: function($row) {\n            var name = this.getItemName($row);\n            return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name: name}));\n        },\n\n        deleteItem: function($row) {\n            var data = {\n                id: this.getItemId($row)\n            };\n\n            Craft.postActionRequest(this.settings.deleteAction, data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.handleDeleteItemResponse(response, $row);\n                }\n            }, this));\n        },\n\n        handleDeleteItemResponse: function(response, $row) {\n            var id = this.getItemId($row),\n                name = this.getItemName($row);\n\n            if (response.success) {\n                if (this.sorter) {\n                    this.sorter.removeItems($row);\n                }\n\n                $row.remove();\n                this.totalItems--;\n                this.updateUI();\n                this.onDeleteItem(id);\n\n                Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name: name}));\n            }\n            else {\n                Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name: name}));\n            }\n        },\n\n        onReorderItems: function(ids) {\n            this.settings.onReorderItems(ids);\n        },\n\n        onDeleteItem: function(id) {\n            this.settings.onDeleteItem(id);\n        },\n\n        getItemId: function($row) {\n            return $row.attr(this.settings.idAttribute);\n        },\n\n        getItemName: function($row) {\n            return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n        },\n\n        updateUI: function() {\n            // Show the \"No Whatever Exists\" message if there aren't any\n            if (this.totalItems === 0) {\n                this.$table.hide();\n                this.$noItems.removeClass('hidden');\n            }\n            else {\n                this.$table.show();\n                this.$noItems.addClass('hidden');\n            }\n\n            // Disable the sort buttons if there's only one row\n            if (this.settings.sortable) {\n                var $moveButtons = this.$table.find('.move');\n\n                if (this.totalItems === 1) {\n                    $moveButtons.addClass('disabled');\n                }\n                else {\n                    $moveButtons.removeClass('disabled');\n                }\n            }\n\n            // Disable the delete buttons if we've reached the minimum items\n            if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n                this.$deleteBtns.addClass('disabled');\n            }\n            else {\n                this.$deleteBtns.removeClass('disabled');\n            }\n\n            // Hide the New Whatever button if we've reached the maximum items\n            if (this.settings.newItemBtnSelector) {\n                if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                    $(this.settings.newItemBtnSelector).addClass('hidden');\n                }\n                else {\n                    $(this.settings.newItemBtnSelector).removeClass('hidden');\n                }\n            }\n        }\n    },\n    {\n        defaults: {\n            tableSelector: null,\n            noItemsSelector: null,\n            newItemBtnSelector: null,\n            idAttribute: 'data-id',\n            nameAttribute: 'data-name',\n            sortable: false,\n            allowDeleteAll: true,\n            minItems: 0,\n            maxItems: null,\n            reorderAction: null,\n            deleteAction: null,\n            reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n            reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n            confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n            deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n            deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n            onReorderItems: $.noop,\n            onDeleteItem: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend(\n    {\n        reloadIndex: false,\n\n        updateForm: function(response, refreshInitialData) {\n            this.base(response, refreshInitialData);\n\n            if (this.$element.data('id')) {\n                var $imageEditorTrigger = this.$fieldsContainer.find('> .meta > .preview-thumb-container.editable');\n\n                if ($imageEditorTrigger.length) {\n                    this.addListener($imageEditorTrigger, 'click', 'showImageEditor');\n                }\n            }\n        },\n\n        showImageEditor: function()\n        {\n            new Craft.AssetImageEditor(this.$element.data('id'), {\n                onSave: function () {\n                    this.reloadIndex = true;\n                    this.reloadForm();\n                }.bind(this),\n            });\n        },\n\n        onHideHud: function () {\n            if (this.reloadIndex && this.settings.elementIndex) {\n                this.settings.elementIndex.updateElements();\n            } else if (this.reloadIndex && this.settings.input) {\n                this.settings.input.refreshThumbnail(this.$element.data('id'));\n            }\n\n            this.base();\n        }\n    });\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend(\n    {\n        // jQuery objects\n        $body: null,\n        $footer: null,\n        $imageTools: null,\n        $buttons: null,\n        $cancelBtn: null,\n        $replaceBtn: null,\n        $saveBtn: null,\n        $editorContainer: null,\n        $straighten: null,\n        $croppingCanvas: null,\n        $spinnerCanvas: null,\n\n        // FabricJS objects\n        canvas: null,\n        image: null,\n        viewport: null,\n        focalPoint: null,\n        grid: null,\n        croppingCanvas: null,\n        clipper: null,\n        croppingRectangle: null,\n        cropperHandles: null,\n        cropperGrid: null,\n        croppingShade: null,\n        croppingAreaText: null,\n\n        // Image state attributes\n        imageStraightenAngle: 0,\n        viewportRotation: 0,\n        originalWidth: 0,\n        originalHeight: 0,\n        imageVerticeCoords: null,\n        zoomRatio: 1,\n\n        // Editor state attributes\n        animationInProgress: false,\n        currentView: '',\n        assetId: null,\n        cacheBust: null,\n        draggingCropper: false,\n        scalingCropper: false,\n        draggingFocal: false,\n        previousMouseX: 0,\n        previousMouseY: 0,\n        shiftKeyHeld: false,\n        editorHeight: 0,\n        editorWidth: 0,\n        cropperState: false,\n        scaleFactor: 1,\n        flipData: {},\n        focalPointState: false,\n        spinnerInterval: null,\n        maxImageSize: null,\n        lastLoadedDimensions: null,\n        imageIsLoading: false,\n        mouseMoveEvent: null,\n        croppingConstraint: false,\n        constraintOrientation: 'landscape',\n        showingCustomConstraint: false,\n\n        // Rendering proxy functions\n        renderImage: null,\n        renderCropper: null,\n\n        init: function(assetId, settings) {\n            this.cacheBust = Date.now();\n\n            this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n            if (this.settings.allowDegreeFractions === null) {\n                this.settings.allowDegreeFractions = Craft.isImagick;\n            }\n\n            this.assetId = assetId;\n            this.flipData = {x: 0, y: 0};\n\n            // Build the modal\n            this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n            this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n            this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n            this.base(this.$container, this.settings);\n\n            this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn cancel',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$buttons);\n            this.$replaceBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save replace',\n                text: Craft.t('app', 'Save'),\n            }).appendTo(this.$buttons);\n\n            if (this.settings.allowSavingAsNew) {\n                this.$saveBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit save copy',\n                    text: Craft.t('app', 'Save as a new asset'),\n                }).appendTo(this.$buttons);\n                this.addListener(this.$saveBtn, 'activate', this.saveImage);\n            }\n\n            this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n            this.addListener(this.$cancelBtn, 'activate', this.hide);\n            this.removeListener(this.$shade, 'click');\n\n            this.maxImageSize = this.getMaxImageSize();\n\n            Craft.postActionRequest('assets/image-editor', {assetId: assetId}, $.proxy(this, 'loadEditor'));\n        },\n\n        /**\n         * Get the max image size that is viewable in the editor currently\n         */\n        getMaxImageSize: function() {\n            var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n            var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n            return  Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n        },\n\n        /**\n         * Load the editor markup and start loading components and the image.\n         *\n         * @param data\n         */\n        loadEditor: function(data) {\n            if (!data.html) {\n                alert(Craft.t('app', 'Could not load the image editor.'));\n            }\n\n            this.$body.html(data.html);\n            this.$tabs = $('.tabs li', this.$body);\n            this.$viewsContainer = $('.views', this.$body);\n            this.$views = $('> div', this.$viewsContainer);\n            this.$imageTools = $('.image-container .image-tools', this.$body);\n            this.$editorContainer = $('.image-container .image', this.$body);\n            this.editorHeight = this.$editorContainer.innerHeight();\n            this.editorWidth = this.$editorContainer.innerWidth();\n\n            this._showSpinner();\n\n            this.updateSizeAndPosition();\n\n            // Load the canvas on which we'll host our image and set up the proxy render function\n            this.canvas = new fabric.StaticCanvas('image-canvas');\n\n            // Set up the cropping canvas jquery element for tracking all the nice events\n            this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n            this.$croppingCanvas.width(this.editorWidth);\n            this.$croppingCanvas.height(this.editorHeight);\n\n            this.canvas.enableRetinaScaling = true;\n            this.renderImage = function() {\n                Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n            }.bind(this);\n\n            // Load the image from URL\n            var imageUrl = Craft.getActionUrl('assets/edit-image', {\n                assetId: this.assetId,\n                size: this.maxImageSize,\n                cacheBust: this.cacheBust\n            });\n\n            // Load image and set up the initial properties\n            fabric.Image.fromURL(imageUrl, $.proxy(function(imageObject) {\n                this.image = imageObject;\n                this.image.set({\n                    originX: 'center',\n                    originY: 'center',\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2\n                });\n                this.canvas.add(this.image);\n\n                this.originalHeight = this.image.getHeight();\n                this.originalWidth = this.image.getWidth();\n                this.zoomRatio = 1;\n\n                this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n                // Set up the image bounding box, viewport and position everything\n                this._setFittedImageVerticeCoordinates();\n                this._repositionEditorElements();\n\n                // Set up the focal point\n                var focalState = {\n                    imageDimensions: this.getScaledImageDimensions(),\n                    offsetX: 0,\n                    offsetY: 0\n                };\n\n                var focal = false;\n                if (data.focalPoint) {\n                    // Transform the focal point coordinates from relative to absolute\n                    var focalData = data.focalPoint;\n\n                    // Resolve for the current image dimensions.\n                    var adjustedX = focalState.imageDimensions.width * focalData.x;\n                    var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                    focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                    focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                    focal = true;\n                }\n\n                this.storeFocalPointState(focalState);\n\n                if (focal) {\n                    this._createFocalPoint();\n                }\n\n                this._createViewport();\n                this.storeCropperState();\n\n                // Add listeners to buttons\n                this._addControlListeners();\n\n                // Add mouse event listeners\n                this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n                this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n                this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n                this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n                this._hideSpinner();\n\n                // Render it, finally\n                this.renderImage();\n\n                // Make sure verything gets fired for the first tab\n                this.$tabs.first().trigger('click');\n            }, this));\n        },\n\n        /**\n         * Reload the image to better fit the current available image editor viewport.\n         */\n        _reloadImage: function () {\n            if (this.imageIsLoading) {\n                return;\n            }\n\n            this.imageIsLoading = true;\n            this.maxImageSize = this.getMaxImageSize();\n\n            // Load the image from URL\n            var imageUrl = Craft.getActionUrl('assets/edit-image', {\n                assetId: this.assetId,\n                size: this.maxImageSize,\n                cacheBust: this.cacheBust\n            });\n\n            this.image.setSrc(imageUrl, function(imageObject) {\n                this.originalHeight = imageObject.getHeight();\n                this.originalWidth = imageObject.getWidth();\n                this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n                this.updateSizeAndPosition();\n                this.renderImage();\n                this.imageIsLoading = false;\n            }.bind(this));\n        },\n\n        /**\n         * Update the modal size and position on browser resize\n         */\n        updateSizeAndPosition: function() {\n            if (!this.$container) {\n                return;\n            }\n\n            // Fullscreen modal\n            var innerWidth = window.innerWidth;\n            var innerHeight = window.innerHeight;\n\n            this.$container.css({\n                'width': innerWidth,\n                'min-width': innerWidth,\n                'left': 0,\n\n                'height': innerHeight,\n                'min-height': innerHeight,\n                'top': 0\n            });\n\n            this.$body.css({\n                'height': innerHeight - 62\n            });\n\n            if (innerWidth < innerHeight) {\n                this.$container.addClass('vertical');\n            }\n            else {\n                this.$container.removeClass('vertical');\n            }\n\n            if (this.$spinnerCanvas) {\n                this.$spinnerCanvas.css({\n                    left: ((this.$spinnerCanvas.parent().width()/2)-(this.$spinnerCanvas.width()/2))+'px',\n                    top: ((this.$spinnerCanvas.parent().height()/2)-(this.$spinnerCanvas.height()/2))+'px'\n                });\n            }\n\n            // If image is already loaded, make sure it looks pretty.\n            if (this.$editorContainer && this.image) {\n                this._repositionEditorElements();\n            }\n        },\n\n        /**\n         * Reposition the editor elements to accurately reflect the editor state with current dimensions\n         */\n        _repositionEditorElements: function() {\n            // Remember what the dimensions were before the resize took place\n            var previousEditorDimensions = {\n                width: this.editorWidth,\n                height: this.editorHeight\n            };\n\n            this.editorHeight = this.$editorContainer.innerHeight();\n            this.editorWidth = this.$editorContainer.innerWidth();\n\n            this.canvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            var currentScaledDimensions = this.getScaledImageDimensions();\n\n            // If we're cropping now, we have to reposition the cropper correctly in case\n            // the area for image changes, forcing the image size to change as well.\n            if (this.currentView === 'crop') {\n                this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n                var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n                this._setFittedImageVerticeCoordinates();\n                this._repositionCropper(previouslyOccupiedArea);\n            } else {\n                // Otherwise just recalculate the image zoom ratio\n                this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            }\n\n            // Reposition the image relatively to the previous editor dimensions.\n            this._repositionImage(previousEditorDimensions);\n            this._repositionViewport();\n            this._repositionFocalPoint(previousEditorDimensions);\n            this._zoomImage();\n\n            this.renderImage();\n\n            if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n                this._reloadImage();\n            }\n        },\n\n        /**\n         * Reposition image based on how the editor dimensions have changed.\n         * This ensures keeping the image center offset, if there is any.\n         *\n         * @param previousEditorDimensions\n         */\n        _repositionImage: function(previousEditorDimensions) {\n            this.image.set({\n                left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n                top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n            });\n        },\n\n        /**\n         * Create the viewport for image editor.\n         */\n        _createViewport: function() {\n            this.viewport = new fabric.Rect({\n                width: this.image.width,\n                height: this.image.height,\n                fill: 'rgba(127,0,0,1)',\n                originX: 'center',\n                originY: 'center',\n                globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n                left: this.image.left,\n                top: this.image.top\n            });\n            this.canvas.add(this.viewport);\n            this.renderImage();\n        },\n\n        /**\n         * Create the focal point.\n         */\n        _createFocalPoint: function() {\n            var focalPointState = this.focalPointState;\n            var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n            var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            // Adjust by image margins\n            focalX += this.image.left;\n            focalY += this.image.top;\n\n            var deltaX = 0;\n            var deltaY = 0;\n\n            // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n            if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n                if (this.currentView !== 'crop') {\n                    deltaX = this.viewport.left - this.image.left;\n                    deltaY = this.viewport.top - this.image.top;\n                } else {\n                    // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                    deltaX = this.clipper.left - this.image.left;\n                    deltaY = this.clipper.top - this.image.top;\n                }\n\n                // Bump focal to middle of viewport\n                focalX += deltaX;\n                focalY += deltaY;\n\n                // Reflect changes in saved state\n                focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n                focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            }\n\n            this.focalPoint = new fabric.Group([\n                new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n                new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n            ], {\n                originX: 'center',\n                originY: 'center',\n                left: focalX,\n                top: focalY\n            });\n\n            this.storeFocalPointState(focalPointState);\n            this.canvas.add(this.focalPoint);\n        },\n\n        /**\n         * Toggle focal point\n         */\n        toggleFocalPoint: function() {\n            if (!this.focalPoint) {\n                this._createFocalPoint();\n            } else {\n                this.canvas.remove(this.focalPoint);\n                this.focalPoint = null;\n            }\n\n            this.renderImage();\n        },\n\n        /**\n         * Reposition the viewport to handle editor resizing.\n         */\n        _repositionViewport: function() {\n            if (this.viewport) {\n                var dimensions = {\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2\n                };\n\n                // If we're cropping, nothing exciting happens for the viewport\n                if (this.currentView === 'crop') {\n                    dimensions.width = this.editorWidth;\n                    dimensions.height = this.editorHeight;\n                } else {\n                    // If this is the first initial reposition, no cropper state yet\n                    if (this.cropperState) {\n                        // Recall the state\n                        var state = this.cropperState;\n\n                        var scaledImageDimensions = this.getScaledImageDimensions();\n                        // Make sure we have the correct current image size\n                        var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                        // Set the viewport dimensions\n                        dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                        dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                        // Adjust the image position to show the correct part of the image in the viewport\n                        this.image.set({\n                            left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                            top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                        });\n                    } else {\n                        $.extend(dimensions, this.getScaledImageDimensions());\n                    }\n                }\n                this.viewport.set(dimensions);\n            }\n        },\n\n        _repositionFocalPoint: function(previousEditorDimensions) {\n            if (this.focalPoint) {\n                var offsetX = this.focalPoint.left - this.editorWidth / 2;\n                var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n                var currentWidth = this.image.width;\n                var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n                var ratio = newWidth / currentWidth / this.scaleFactor;\n\n                offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n                offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n                offsetX *= ratio;\n                offsetY *= ratio;\n\n                this.focalPoint.set({\n                    left: this.editorWidth / 2 + offsetX,\n                    top: this.editorHeight / 2 + offsetY\n                });\n            }\n        },\n\n        /**\n         * Return true if the image orientation has changed\n         */\n        hasOrientationChanged: function() {\n            return this.viewportRotation % 180 !== 0;\n        },\n\n        /**\n         * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n         */\n        getScaledImageDimensions: function() {\n            if (typeof this.getScaledImageDimensions._ === 'undefined') {\n                this.getScaledImageDimensions._ = {};\n            }\n\n            this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n            this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n            this.getScaledImageDimensions._.dimensions = {};\n            if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n                this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n                this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n            } else {\n                this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n                this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n            }\n\n            return this.getScaledImageDimensions._.dimensions;\n        },\n\n        /**\n         * Set the image dimensions to reflect the current zoom ratio.\n         */\n        _zoomImage: function() {\n            if (typeof this._zoomImage._ === 'undefined') {\n                this._zoomImage._ = {};\n            }\n\n            this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n            this.image.set({\n                width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n                height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n            });\n        },\n\n        /**\n         * Set up listeners for the controls.\n         */\n        _addControlListeners: function() {\n            // Tabs\n            this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n            // Focal point\n            this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n            // Rotate controls\n            this.addListener($('.rotate-left'), 'click', function() {\n                this.rotateImage(-90);\n            });\n            this.addListener($('.rotate-right'), 'click', function() {\n                this.rotateImage(90);\n            });\n            this.addListener($('.flip-vertical'), 'click', function() {\n                this.flipImage('y');\n            });\n            this.addListener($('.flip-horizontal'), 'click', function() {\n                this.flipImage('x');\n            });\n\n            // Straighten slider\n            this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n                onStart: function() {\n                    this._showGrid();\n                }.bind(this),\n                onChange: function(slider) {\n                    this.straighten(slider);\n                }.bind(this),\n                onEnd: function() {\n                    this._hideGrid();\n                    this._cleanupFocalPointAfterStraighten();\n                }.bind(this)\n            });\n\n            // Cropper scale modifier key\n            this.addListener(Garnish.$doc, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.SHIFT_KEY) {\n                    this.shiftKeyHeld = true;\n                }\n            });\n            this.addListener(Garnish.$doc, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.SHIFT_KEY) {\n                    this.shiftKeyHeld = false;\n                }\n            });\n\n            this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n            this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n            this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n        },\n\n        /**\n         * Handle a constraint button click.\n         *\n         * @param ev\n         */\n        _handleConstraintClick: function (ev) {\n            var constraint = $(ev.currentTarget).data('constraint');\n            var $target = $(ev.currentTarget);\n            $target.siblings().removeClass('active');\n            $target.addClass('active');\n\n            if (constraint == 'custom') {\n                this._showCustomConstraint();\n                this._applyCustomConstraint();\n                return;\n            }\n\n            this._hideCustomConstraint();\n\n            this.setCroppingConstraint(constraint);\n            this.enforceCroppingConstraint();\n        },\n\n        /**\n         * Handle an orientation switch click.\n         *\n         * @param ev\n         */\n        _handleOrientationClick: function (ev) {\n            if (ev.currentTarget.value === this.constraintOrientation) {\n                return;\n            }\n            this.constraintOrientation = ev.currentTarget.value;\n\n            var $constraints = $('.constraint.flip', this.$container);\n\n            for (var i = 0; i < $constraints.length; i++) {\n                var $constraint = $($constraints[i]);\n                $constraint.data('constraint', 1 / $constraint.data('constraint'));\n                $constraint.html($constraint.html().split(':').reverse().join(':'));\n            }\n\n            $constraints.filter('.active').click();\n        },\n\n        /**\n         * Apply the custom ratio set in the inputs\n         */\n        _applyCustomConstraint: function () {\n            var constraint = this._getCustomConstraint();\n\n            if (constraint.w > 0 && constraint.h > 0) {\n                this.setCroppingConstraint(constraint.w / constraint.h);\n                this.enforceCroppingConstraint();\n            }\n        },\n\n        /**\n         * Get the custom constraint.\n         *\n         * @returns {{w: *, h: *}}\n         */\n        _getCustomConstraint: function () {\n            var w = parseFloat($('.custom-constraint-w').val());\n            var h = parseFloat($('.custom-constraint-h').val());\n            return {\n                w: isNaN(w) ? 0 : w,\n                h: isNaN(h) ? 0 : h,\n            }\n        },\n\n        /**\n         * Set the custom constraint.\n         *\n         * @param w\n         * @param h\n         */\n        _setCustomConstraint: function (w, h) {\n            $('.custom-constraint-w').val(parseFloat(w));\n            $('.custom-constraint-h').val(parseFloat(h));\n        },\n\n        /**\n         * Hide the custom constraint inputs.\n         */\n        _hideCustomConstraint: function () {\n            this.showingCustomConstraint = false;\n            $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n            $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n            $('.orientation', this.$container).removeClass('hidden');\n        },\n\n        /**\n         * Show the custom constraint inputs.\n         */\n        _showCustomConstraint: function () {\n            if (this.showingCustomConstraint) {\n                return;\n            }\n\n            this.showingCustomConstraint = true;\n            $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n            $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n            $('.orientation', this.$container).addClass('hidden');\n        },\n\n        /**\n         * Handle tab click.\n         *\n         * @param ev\n         */\n        _handleTabClick: function(ev) {\n            if (!this.animationInProgress) {\n                var $tab = $(ev.currentTarget);\n                var view = $tab.data('view');\n                this.$tabs.removeClass('selected');\n                $tab.addClass('selected');\n                this.showView(view);\n            }\n        },\n\n        /**\n         * Show a view.\n         *\n         * @param view\n         */\n        showView: function(view) {\n            if (this.currentView === view) {\n                return;\n            }\n\n            this.$views.addClass('hidden');\n            var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n            $view.removeClass('hidden');\n\n            if (view === 'rotate') {\n                this.enableSlider();\n            } else {\n                this.disableSlider();\n            }\n\n\n            // Now that most likely our editor dimensions have changed, time to reposition stuff\n            this.updateSizeAndPosition();\n\n            // See if we have to enable or disable crop mode as we transition between tabs\n            if (this.currentView === 'crop' && view !== 'crop') {\n                this.disableCropMode();\n            } else if (this.currentView !== 'crop' && view === 'crop') {\n                this.enableCropMode();\n            }\n\n            // Mark the current view\n            this.currentView = view;\n        },\n\n        /**\n         * Store the current cropper state.\n         *\n         * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n         * as the basis for recalculating the cropper position and dimensions.\n         *\n         * @param [state]\n         */\n        storeCropperState: function(state) {\n            if (typeof this.storeCropperState._ === 'undefined') {\n                this.storeCropperState._ = {};\n            }\n\n            // If we're asked to store a specific state.\n            if (state) {\n                this.cropperState = state;\n            } else if (this.clipper) {\n                this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n                this.cropperState = {\n                    offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                    offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                    height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                    width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                    imageDimensions: this.getScaledImageDimensions()\n                };\n            } else {\n                this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n                this.cropperState = {\n                    offsetX: 0,\n                    offsetY: 0,\n                    height: this.storeCropperState._.dimensions.height,\n                    width: this.storeCropperState._.dimensions.width,\n                    imageDimensions: this.storeCropperState._.dimensions\n                };\n            }\n        },\n\n        /**\n         * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n         */\n        storeFocalPointState: function(state) {\n            if (typeof this.storeFocalPointState._ === 'undefined') {\n                this.storeFocalPointState._ = {};\n            }\n\n            // If we're asked to store a specific state.\n            if (state) {\n                this.focalPointState = state;\n            } else if (this.focalPoint) {\n                this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n                this.focalPointState = {\n                    offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                    offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                    imageDimensions: this.getScaledImageDimensions()\n                };\n            }\n        },\n\n        /**\n         * Rotate the image along with the viewport.\n         *\n         * @param degrees\n         */\n        rotateImage: function(degrees) {\n            if (!this.animationInProgress) {\n                // We're not that kind of an establishment, sir.\n                if (degrees !== 90 && degrees !== -90) {\n                    return false;\n                }\n\n                this.animationInProgress = true;\n                this.viewportRotation += degrees;\n\n                // Normalize the viewport rotation angle so it's between 0 and 359\n                this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n                var newAngle = this.image.angle + degrees;\n                var scaledImageDimensions = this.getScaledImageDimensions();\n                var imageZoomRatio;\n\n                if (this.hasOrientationChanged()) {\n                    imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n                } else {\n                    imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n                }\n\n                // In cases when for some reason we've already zoomed in on the image,\n                // use existing zoom.\n                if (this.zoomRatio > imageZoomRatio) {\n                    imageZoomRatio = this.zoomRatio;\n                }\n\n                var viewportProperties = {\n                    angle: degrees === 90 ? '+=90' : '-=90'\n                };\n\n                var imageProperties = {\n                    angle: newAngle,\n                    width: scaledImageDimensions.width * imageZoomRatio,\n                    height: scaledImageDimensions.height * imageZoomRatio\n                };\n\n                var scaleFactor = 1;\n                if (this.scaleFactor < 1) {\n                    scaleFactor = 1 / this.scaleFactor;\n                    this.scaleFactor = 1;\n                } else {\n                    if (this.viewport.width > this.editorHeight) {\n                        scaleFactor = this.editorHeight / this.viewport.width;\n                    } else if (this.viewport.height > this.editorWidth) {\n                        scaleFactor = this.editorWidth / this.viewport.height;\n                    }\n                    this.scaleFactor = scaleFactor;\n                }\n\n                if (scaleFactor < 1) {\n                    imageProperties.width *= scaleFactor;\n                    imageProperties.height *= scaleFactor;\n                }\n\n                var state = this.cropperState;\n\n                // Make sure we reposition the image as well to focus on the same image area\n                var deltaX = state.offsetX;\n                var deltaY = state.offsetY;\n                var angleInRadians = degrees * (Math.PI / 180);\n\n                // Calculate how the cropper would need to move in a circle to maintain\n                // the focus on the same region if the image was rotated with zoom intact.\n                var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n                var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n                var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n                var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n                imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n                imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n                state.offsetX = newDeltaX;\n                state.offsetY = newDeltaY;\n\n                var temp = state.width;\n                state.width = state.height;\n                state.height = temp;\n\n                this.storeCropperState(state);\n\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                }\n\n                this.viewport.animate(viewportProperties, {\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        // If we're zooming the image in or out, better do the same to viewport\n                        var temp = this.viewport.height * scaleFactor;\n                        this.viewport.height = this.viewport.width * scaleFactor;\n                        this.viewport.width = temp;\n                        this.viewport.set({angle: 0});\n                    }.bind(this)\n                });\n\n                // Animate the rotation and dimension change\n                this.image.animate(imageProperties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                        this.image.set({angle: cleanAngle});\n                        this.animationInProgress = false;\n                        if (this.focalPoint) {\n                            this._adjustFocalPointByAngle(degrees);\n                            this.straighten(this.straighteningInput);\n                            this.canvas.add(this.focalPoint);\n                        } else {\n                            this._resetFocalPointPosition();\n                        }\n                    }.bind(this)\n                });\n            }\n        },\n\n        /**\n         * Flip an image along an axis.\n         *\n         * @param axis\n         */\n        flipImage: function(axis) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                if (this.hasOrientationChanged()) {\n                    axis = axis === 'y' ? 'x' : 'y';\n                }\n\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                } else {\n                    this._resetFocalPointPosition();\n                }\n\n                var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n                this.straighteningInput.setValue(-this.imageStraightenAngle);\n                this.imageStraightenAngle = -this.imageStraightenAngle;\n                var properties = {\n                    angle: this.viewportRotation + this.imageStraightenAngle\n                };\n\n                var deltaY, deltaX;\n                var cropperState = this.cropperState;\n                var focalPointState = this.focalPointState;\n\n                // Reposition the image, viewport, and stored cropper and focal point states.\n                if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                    cropperState.offsetX = -cropperState.offsetX;\n                    focalPointState.offsetX = -focalPointState.offsetX;\n                    deltaX = this.image.left - editorCenter.x;\n                    properties.left = editorCenter.x - deltaX;\n                } else {\n                    cropperState.offsetY = -cropperState.offsetY;\n                    focalPointState.offsetY = -focalPointState.offsetY;\n                    deltaY = this.image.top - editorCenter.y;\n                    properties.top = editorCenter.y - deltaY;\n                }\n\n                if (axis === 'y') {\n                    properties.scaleY = this.image.scaleY * -1;\n                    this.flipData.y = 1 - this.flipData.y;\n                } else {\n                    properties.scaleX = this.image.scaleX * -1;\n                    this.flipData.x = 1 - this.flipData.x;\n                }\n\n                this.storeCropperState(cropperState);\n                this.storeFocalPointState(focalPointState);\n\n                this.image.animate(properties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        this.animationInProgress = false;\n                        if (this.focalPoint) {\n                            // Well this is handy\n                            this._adjustFocalPointByAngle(0);\n                            this.canvas.add(this.focalPoint);\n                        }\n                    }.bind(this)\n                });\n            }\n        },\n\n        /**\n         * Perform the straightening with input slider.\n         *\n         * @param {Craft.SlideRuleInput} slider\n         */\n        straighten: function(slider) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                var previousAngle = this.image.angle;\n\n                this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n                // Straighten the image\n                this.image.set({\n                    angle: this.viewportRotation + this.imageStraightenAngle\n                });\n\n                // Set the new zoom ratio\n                this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n                this._zoomImage();\n\n                if (this.cropperState) {\n                    this._adjustEditorElementsOnStraighten(previousAngle);\n                }\n\n                this.renderImage();\n\n                this.animationInProgress = false;\n            }\n        },\n\n        /**\n         * Adjust the cropped viewport when straightening the image to correct for\n         * bumping into edges, keeping focus on the cropped area center and to\n         * maintain the illusion that the image is being straightened relative to the viewport center.\n         *\n         * @param {integer} previousAngle integer the previous image angle before straightening\n         */\n        _adjustEditorElementsOnStraighten: function(previousAngle) {\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var angleDelta = this.image.angle - previousAngle;\n            var state = this.cropperState;\n\n            var currentZoomRatio = this.zoomRatio;\n            var adjustmentRatio = 1;\n\n            var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n            do {\n                // Get the cropper center coordinates\n                var cropperCenterX = state.offsetX;\n                var cropperCenterY = state.offsetY;\n                var angleInRadians = angleDelta * (Math.PI / 180);\n\n                // Calculate how the cropper would need to move in a circle to maintain\n                // the focus on the same region if the image was rotated with zoom intact.\n                newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n                newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n                sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                // Figure out the final image offset to keep the viewport focused where we need it\n                deltaX = newCenterX * currentZoomRatio * sizeFactor;\n                deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n                // If the image would creep in the viewport, figure out how to math around it.\n                var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n                var rectangle = {\n                    width: this.viewport.width,\n                    height: this.viewport.height,\n                    left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                    top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n                };\n                adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n                currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n                // If we had to make adjustments, do the calculations again\n            } while (adjustmentRatio !== 1);\n\n            // Reposition the image correctly\n            this.image.set({\n                left: this.editorWidth / 2 - deltaX,\n                top: this.editorHeight / 2 - deltaY\n            });\n\n            // Finally, store the new cropper state to reflect the rotation change.\n            state.offsetX = newCenterX;\n            state.offsetY = newCenterY;\n            state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n            state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n            this.storeCropperState(state);\n\n            // Zoom the image in and we're done.\n            this.zoomRatio = currentZoomRatio;\n\n            if (this.focalPoint) {\n                this._adjustFocalPointByAngle(angleDelta);\n\n                if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                    this.focalPoint.set({opacity: 0});\n                } else {\n                    this.focalPoint.set({opacity: 1});\n                }\n            } else if (angleDelta !== 0) {\n                this._resetFocalPointPosition();\n            }\n\n            this._zoomImage();\n        },\n\n        /**\n         * If focal point is active and outside of viewport after straightening, reset it.\n         */\n        _cleanupFocalPointAfterStraighten: function() {\n            if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 1});\n                var state = this.focalPointState;\n                state.offsetX = 0;\n                state.offsetY = 0;\n                this.storeFocalPointState(state);\n                this.toggleFocalPoint();\n            }\n        },\n\n        /**\n         * Reset focal point to the middle of image.\n         */\n        _resetFocalPointPosition: function () {\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n        },\n\n        /**\n         * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n         *\n         * @param object\n         * @param containingObject\n         *\n         * @returns {boolean}\n         */\n        _isCenterInside: function(object, containingObject) {\n            return (object.left > containingObject.left - containingObject.width / 2\n                && object.top > containingObject.top - containingObject.height / 2\n                && object.left < containingObject.left + containingObject.width / 2\n                && object.top < containingObject.top + containingObject.height / 2\n            );\n        },\n\n        /**\n         * Adjust the focal point by an angle in degrees.\n         * @param angle\n         */\n        _adjustFocalPointByAngle: function(angle) {\n            var angleInRadians = angle * (Math.PI / 180);\n            var state = this.focalPointState;\n\n            var focalX = state.offsetX;\n            var focalY = state.offsetY;\n\n            // Calculate how the focal point would need to move in a circle to keep on the same spot\n            // on the image if it was rotated with zoom intact.\n            var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n            var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n            var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n            var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n            var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n            this.focalPoint.left = this.image.left + adjustedFocalX;\n            this.focalPoint.top = this.image.top + adjustedFocalY;\n\n            state.offsetX = newFocalX;\n            state.offsetY = newFocalY;\n            this.storeFocalPointState(state);\n        },\n\n        /**\n         * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n         * If the rectangle fits, 1 will be returned.\n         *\n         * @param rectangle\n         * @param containingVertices\n         */\n        _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n            var rectangleVertices = this._getRectangleVertices(rectangle);\n            var vertex;\n\n            // Check if any of the viewport vertices end up out of bounds\n            for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n                vertex = rectangleVertices[verticeIndex];\n\n                if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                    break;\n                }\n\n                vertex = false;\n            }\n\n            // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n            var adjustmentRatio;\n\n            if (!vertex) {\n                adjustmentRatio = 1;\n            } else {\n                // Find out which edge got crossed by the vertex\n                var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n                var rectangleCenter = {\n                    x: rectangle.left + rectangle.width / 2,\n                    y: rectangle.top + rectangle.height / 2\n                };\n\n                // Calculate how much further that edge needs to be.\n                // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n                var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n                var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n                // Adjust the zoom ratio\n                adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n            }\n\n            return adjustmentRatio;\n        },\n\n        /**\n         * Save the image.\n         *\n         * @param ev\n         */\n        saveImage: function(ev) {\n            var $button = $(ev.currentTarget);\n            if ($button.hasClass('disabled')) {\n                return false;\n            }\n\n            $('.btn', this.$buttons).addClass('disabled');\n            this.$buttons.append('<div class=\"spinner\"></div>');\n\n            var postData = {\n                assetId: this.assetId,\n                viewportRotation: this.viewportRotation,\n                imageRotation: this.imageStraightenAngle,\n                replace: $button.hasClass('replace') ? 1 : 0\n            };\n\n            if (this.cropperState) {\n                var cropData = {};\n\n                cropData.height = this.cropperState.height;\n                cropData.width = this.cropperState.width;\n                cropData.offsetX = this.cropperState.offsetX;\n                cropData.offsetY = this.cropperState.offsetY;\n\n                postData.imageDimensions = this.cropperState.imageDimensions;\n\n                postData.cropData = cropData;\n            } else {\n                postData.imageDimensions = this.getScaledImageDimensions();\n            }\n\n            if (this.focalPoint) {\n                postData.focalPoint = this.focalPointState;\n            }\n\n            postData.flipData = this.flipData;\n            postData.zoom = this.zoomRatio;\n\n            Craft.postActionRequest('assets/save-image', postData, function(data) {\n                this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n                if (data.error) {\n                    alert(data.error);\n                    return;\n                }\n\n                this.onSave();\n                this.hide();\n                Craft.cp.runQueue();\n            }.bind(this));\n        },\n\n        /**\n         * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n         *\n         * @param dimensions\n         */\n        getZoomToCoverRatio: function(dimensions) {\n            // Convert the angle to radians\n            var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n            // Calculate the dimensions of the scaled image using the magic of math\n            var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n            var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n            // Calculate the ratio\n            return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n        },\n\n        /**\n         * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n         *\n         * @param dimensions\n         */\n        getZoomToFitRatio: function(dimensions) {\n            // Get the bounding box for a rotated image\n            var boundingBox = this._getImageBoundingBox(dimensions);\n\n            // Scale the bounding box to fit\n            var scale = 1;\n            if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n                var vertScale = this.editorHeight / boundingBox.height;\n                var horiScale = this.editorWidth / boundingBox.width;\n                scale = Math.min(horiScale, vertScale);\n            }\n\n            return scale;\n        },\n\n        /**\n         * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n         */\n        getCombinedZoomRatio: function(dimensions) {\n            return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n        },\n\n        /**\n         * Draw the grid.\n         *\n         * @private\n         */\n        _showGrid: function() {\n            if (!this.grid) {\n                var strokeOptions = {\n                    strokeWidth: 1,\n                    stroke: 'rgba(255,255,255,0.5)'\n                };\n\n                var lineCount = 8;\n                var gridWidth = this.viewport.width;\n                var gridHeight = this.viewport.height;\n                var xStep = gridWidth / (lineCount + 1);\n                var yStep = gridHeight / (lineCount + 1);\n\n                var grid = [\n                    new fabric.Rect({\n                        strokeWidth: 2,\n                        stroke: 'rgba(255,255,255,1)',\n                        originX: 'center',\n                        originY: 'center',\n                        width: gridWidth,\n                        height: gridHeight,\n                        left: gridWidth / 2,\n                        top: gridHeight / 2,\n                        fill: 'rgba(255,255,255,0)'\n                    })\n                ];\n\n                var i;\n                for (i = 1; i <= lineCount; i++) {\n                    grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n                }\n                for (i = 1; i <= lineCount; i++) {\n                    grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n                }\n\n                this.grid = new fabric.Group(grid, {\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2,\n                    originX: 'center',\n                    originY: 'center',\n                    angle: this.viewport.angle\n                });\n\n                this.canvas.add(this.grid);\n                this.renderImage();\n            }\n        },\n\n        /**\n         * Hide the grid\n         */\n        _hideGrid: function() {\n            this.canvas.remove(this.grid);\n            this.grid = null;\n            this.renderImage();\n        },\n\n        /**\n         * Remove all the events when hiding the editor.\n         */\n        onFadeOut: function() {\n            this.destroy();\n        },\n\n        /**\n         * Make sure underlying content is not scrolled by accident.\n         */\n        show: function() {\n            this.base();\n\n            $('html').addClass('noscroll');\n        },\n\n        /**\n         * Allow the content to scroll.\n         */\n        hide: function() {\n            this.removeAllListeners();\n            this.straighteningInput.removeAllListeners();\n            $('html').removeClass('noscroll');\n            this.base();\n        },\n\n        /**\n         * onSave callback.\n         */\n        onSave: function() {\n            this.settings.onSave();\n            this.trigger('save');\n        },\n\n        /**\n         * Enable the rotation slider.\n         */\n        enableSlider: function() {\n            this.$imageTools.removeClass('hidden');\n        },\n\n        /**\n         * Disable the rotation slider.\n         */\n        disableSlider: function() {\n            this.$imageTools.addClass('hidden');\n        },\n\n        /**\n         * Switch to crop mode.\n         */\n        enableCropMode: function() {\n            var imageDimensions = this.getScaledImageDimensions();\n            this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n            var viewportProperties = {\n                width: this.editorWidth,\n                height: this.editorHeight\n            };\n\n            var imageProperties = {\n                width: imageDimensions.width * this.zoomRatio,\n                height: imageDimensions.height * this.zoomRatio,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            var callback = function() {\n                this._setFittedImageVerticeCoordinates();\n\n                // Restore cropper\n                var state = this.cropperState;\n                var scaledImageDimensions = this.getScaledImageDimensions();\n                var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                // Restore based on the stored information\n                var cropperData = {\n                    left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                    top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                    width: state.width * sizeFactor * this.zoomRatio,\n                    height: state.height * sizeFactor * this.zoomRatio\n                };\n\n                this._showCropper(cropperData);\n\n                if (this.focalPoint) {\n                    sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                    this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                    this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                    this.canvas.add(this.focalPoint);\n                }\n            }.bind(this);\n\n            this._editorModeTransition(callback, imageProperties, viewportProperties);\n        },\n\n        /**\n         * Switch out of crop mode.\n         */\n        disableCropMode: function() {\n            var viewportProperties = {};\n\n            this._hideCropper();\n            var imageDimensions = this.getScaledImageDimensions();\n            var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n            var inverseZoomFactor = targetZoom / this.zoomRatio;\n            this.zoomRatio = targetZoom;\n\n            var imageProperties = {\n                width: imageDimensions.width * this.zoomRatio,\n                height: imageDimensions.height * this.zoomRatio,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            var offsetX = this.clipper.left - this.image.left;\n            var offsetY = this.clipper.top - this.image.top;\n\n            var imageOffsetX = offsetX * inverseZoomFactor;\n            var imageOffsetY = offsetY * inverseZoomFactor;\n            imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n            imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n            // Calculate the cropper dimensions after all the zooming\n            viewportProperties.height = this.clipper.height * inverseZoomFactor;\n            viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n            if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n                if (this.focalPoint) {\n                    this.toggleFocalPoint();\n                }\n\n                this._resetFocalPointPosition();\n            }\n\n            var callback = function() {\n                // Reposition focal point correctly\n                if (this.focalPoint) {\n                    var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                    this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                    this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                    this.canvas.add(this.focalPoint);\n                }\n            }.bind(this);\n\n            this._editorModeTransition(callback, imageProperties, viewportProperties);\n        },\n\n        /**\n         * Transition between cropping end editor modes\n         *\n         * @param callback\n         * @param imageProperties\n         * @param viewportProperties\n         * @private\n         */\n        _editorModeTransition: function (callback, imageProperties, viewportProperties) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                // Without this it looks semi-broken during animation\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                    this.renderImage();\n                }\n\n                this.image.animate(imageProperties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        callback();\n                        this.animationInProgress = false;\n                        this.renderImage();\n                    }.bind(this)\n                });\n\n                this.viewport.animate(viewportProperties, {\n                    duration: this.settings.animationDuration\n                });\n            }\n        },\n\n        _showSpinner: function() {\n            this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n            var canvas = document.getElementById('spinner-canvas');\n            var context = canvas.getContext('2d');\n            var start = new Date();\n            var lines = 16,\n                cW = context.canvas.width,\n                cH = context.canvas.height;\n\n            var draw = function() {\n                var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n                context.save();\n                context.clearRect(0, 0, cW, cH);\n                context.translate(cW / 2, cH / 2);\n                context.rotate(Math.PI * 2 * rotation);\n                for (var i = 0; i < lines; i++) {\n                    context.beginPath();\n                    context.rotate(Math.PI * 2 / lines);\n                    context.moveTo(cW / 10, 0);\n                    context.lineTo(cW / 4, 0);\n                    context.lineWidth = cW / 30;\n                    context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                    context.stroke();\n                }\n                context.restore();\n            };\n            this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n        },\n\n        _hideSpinner: function () {\n            window.clearInterval(this.spinnerInterval);\n            this.$spinnerCanvas.remove();\n            this.$spinnerCanvas = null;\n        },\n\n        /**\n         * Show the cropper.\n         *\n         * @param clipperData\n         */\n        _showCropper: function(clipperData) {\n            this._setupCropperLayer(clipperData);\n            this._redrawCropperElements();\n            this.renderCropper();\n        },\n\n        /**\n         * Hide the cropper.\n         */\n        _hideCropper: function() {\n            if (this.clipper) {\n                this.croppingCanvas.remove(this.clipper);\n                this.croppingCanvas.remove(this.croppingShade);\n                this.croppingCanvas.remove(this.cropperHandles);\n                this.croppingCanvas.remove(this.cropperGrid);\n                this.croppingCanvas.remove(this.croppingRectangle);\n                this.croppingCanvas.remove(this.croppingAreaText);\n\n                this.croppingCanvas = null;\n                this.renderCropper = null;\n            }\n        },\n\n        /**\n         * Draw the cropper.\n         *\n         * @param clipperData\n         */\n        _setupCropperLayer: function(clipperData) {\n            // Set up the canvas for cropper\n            this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n                backgroundColor: 'rgba(0,0,0,0)',\n                hoverCursor: 'default',\n                selection: false\n            });\n\n            this.croppingCanvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            this.renderCropper = function() {\n                Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n            }.bind(this);\n\n\n            $('#cropping-canvas', this.$editorContainer).css({\n                position: 'absolute',\n                top: 0,\n                left: 0\n            });\n\n            this.croppingShade = new fabric.Rect({\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                width: this.editorWidth,\n                height: this.editorHeight,\n                fill: 'rgba(0,0,0,0.7)'\n            });\n\n            // Calculate the cropping rectangle size\n            var imageDimensions = this.getScaledImageDimensions();\n            var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n            var rectWidth = imageDimensions.width / rectangleRatio;\n            var rectHeight = imageDimensions.height / rectangleRatio;\n\n            if (this.hasOrientationChanged()) {\n                var temp = rectHeight;\n                rectHeight = rectWidth;\n                rectWidth = temp;\n            }\n\n            // Set up the cropping viewport rectangle\n            this.clipper = new fabric.Rect({\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                width: rectWidth,\n                height: rectHeight,\n                stroke: 'black',\n                fill: 'rgba(128,0,0,1)',\n                strokeWidth: 0\n            });\n\n            // Set from clipper data\n            if (clipperData) {\n                this.clipper.set(clipperData);\n            }\n\n            this.clipper.globalCompositeOperation = 'destination-out';\n            this.croppingCanvas.add(this.croppingShade);\n            this.croppingCanvas.add(this.clipper);\n        },\n\n        /**\n         * Redraw the cropper boundaries\n         */\n        _redrawCropperElements: function() {\n            if (typeof this._redrawCropperElements._ === 'undefined') {\n                this._redrawCropperElements._ = {};\n            }\n\n            if (this.cropperHandles) {\n                this.croppingCanvas.remove(this.cropperHandles);\n                this.croppingCanvas.remove(this.cropperGrid);\n                this.croppingCanvas.remove(this.croppingRectangle);\n                this.croppingCanvas.remove(this.croppingAreaText);\n            }\n            this._redrawCropperElements._.lineOptions = {\n                strokeWidth: 4,\n                stroke: 'rgb(255,255,255)',\n                fill: false\n            };\n\n            this._redrawCropperElements._.gridOptions = {\n                strokeWidth: 2,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            // Draw the handles\n            this._redrawCropperElements._.pathGroup = [\n                new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n            ];\n\n            this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n            // Don't forget the rectangle\n            this.croppingRectangle = new fabric.Rect({\n                left: this.clipper.left,\n                top: this.clipper.top,\n                width: this.clipper.width,\n                height: this.clipper.height,\n                fill: 'rgba(0,0,0,0)',\n                stroke: 'rgba(255,255,255,0.8)',\n                strokeWidth: 2,\n                originX: 'center',\n                originY: 'center'\n            });\n\n            this.cropperGrid = new fabric.Group(\n                [\n                    new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n                ], {\n                    left: this.clipper.left,\n                    top: this.clipper.top,\n                    originX: 'center',\n                    originY: 'center'\n                }\n            );\n\n            this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n            if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n                this._redrawCropperElements._.cropTextTop -= 24;\n                this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n            }\n\n            this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n                left: this.croppingRectangle.left,\n                top: this._redrawCropperElements._.cropTextTop,\n                fontSize: 13,\n                fill: 'rgb(200,200,200)',\n                backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n                font: 'Craft',\n                width: 70,\n                height: 15,\n                originX: 'center',\n                originY: 'center',\n                textAlign: 'center'\n            });\n\n            this.croppingCanvas.add(this.cropperHandles);\n            this.croppingCanvas.add(this.cropperGrid);\n            this.croppingCanvas.add(this.croppingRectangle);\n            this.croppingCanvas.add(this.croppingAreaText);\n        },\n\n        /**\n         * Reposition the cropper when the image editor dimensions change.\n         *\n         * @param previousImageArea\n         */\n        _repositionCropper: function(previousImageArea) {\n            if (!this.croppingCanvas) {\n                return;\n            }\n\n            // Get the current clipper offset relative to center\n            var currentOffset = {\n                x: this.clipper.left - this.croppingCanvas.width / 2,\n                y: this.clipper.top - this.croppingCanvas.height / 2\n            };\n\n            // Resize the cropping canvas\n            this.croppingCanvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            // Check by what factor will the new final bounding box be different\n            var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            var areaFactor = currentArea.width / previousImageArea.width;\n\n            // Adjust the cropper size to scale along with the bounding box\n            this.clipper.width = Math.round(this.clipper.width * areaFactor);\n            this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n            // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n            // for editor size changes and then multiply by the size factor to adjust for image size changes\n            this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n            this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n            // Resize the cropping shade\n            this.croppingShade.set({\n                width: this.editorWidth,\n                height: this.editorHeight,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n\n            this._redrawCropperElements();\n            this.renderCropper();\n        },\n\n        /**\n         * Get the dimensions of a bounding rectangle by a set of four coordinates.\n         *\n         * @param coordinateSet\n         */\n        _getBoundingRectangle: function(coordinateSet) {\n            return {\n                width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n                height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n            };\n        },\n\n        /**\n         * Handle the mouse being clicked.\n         *\n         * @param ev\n         */\n        _handleMouseDown: function(ev) {\n            // Focal before resize before dragging\n            var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n            var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n            var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n            if (handle || move || focal) {\n                this.previousMouseX = ev.pageX;\n                this.previousMouseY = ev.pageY;\n\n                if (focal) {\n                    this.draggingFocal = true;\n                } else if (handle) {\n                    this.scalingCropper = handle;\n                } else if (move) {\n                    this.draggingCropper = true;\n                }\n            }\n        },\n\n        /**\n         * Handle the mouse being moved.\n         *\n         * @param ev\n         */\n        _handleMouseMove: function(ev) {\n            if (this.mouseMoveEvent !== null) {\n                Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n            }\n            this.mouseMoveEvent = ev;\n        },\n\n        _handleMouseMoveInternal: function() {\n            if (this.mouseMoveEvent === null) {\n                return;\n            }\n\n            if (this.focalPoint && this.draggingFocal) {\n                this._handleFocalDrag(this.mouseMoveEvent);\n                this.storeFocalPointState();\n                this.renderImage();\n            } else if (this.draggingCropper || this.scalingCropper) {\n                if (this.draggingCropper) {\n                    this._handleCropperDrag(this.mouseMoveEvent);\n                } else {\n                    this._handleCropperResize(this.mouseMoveEvent);\n                }\n\n                this._redrawCropperElements();\n\n                this.storeCropperState();\n                this.renderCropper();\n            } else {\n                this._setMouseCursor(this.mouseMoveEvent);\n            }\n\n            this.previousMouseX = this.mouseMoveEvent.pageX;\n            this.previousMouseY = this.mouseMoveEvent.pageY;\n\n            this.mouseMoveEvent = null;\n        },\n\n        /**\n         * Handle mouse being released.\n         *\n         * @param ev\n         */\n        _handleMouseUp: function(ev) {\n            this.draggingCropper = false;\n            this.scalingCropper = false;\n            this.draggingFocal = false;\n        },\n\n        /**\n         * Handle mouse out\n         *\n         * @param ev\n         */\n        _handleMouseOut: function(ev) {\n            this._handleMouseUp(ev);\n            this.mouseMoveEvent = ev;\n            this._handleMouseMoveInternal();\n        },\n\n        /**\n         * Handle cropper being dragged.\n         *\n         * @param ev\n         */\n        _handleCropperDrag: function(ev) {\n            if (typeof this._handleCropperDrag._ === 'undefined') {\n                this._handleCropperDrag._ = {};\n            }\n\n            this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n                return false;\n            }\n\n            this._handleCropperDrag._.rectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            };\n\n            this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n            // If this would drag it outside of the image\n            if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                // Try to find the furthest point in the same general direction where we can drag it\n\n                // Delta iterator setup\n                this._handleCropperDrag._.dxi = 0;\n                this._handleCropperDrag._.dyi = 0;\n                this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n                this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n                // The furthest we can move\n                this._handleCropperDrag._.furthest = 0;\n                this._handleCropperDrag._.furthestDeltas = {};\n\n                // Loop through every combination of dragging it not so far\n                for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                    for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                        if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                            if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                                this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                                this._handleCropperDrag._.furthestDeltas = {\n                                    x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                    y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // REALLY can't drag along the cursor movement\n                if (this._handleCropperDrag._.furthest == 0) {\n                    return;\n                } else {\n                    this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                    this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n                }\n            }\n\n            this.clipper.set({\n                left: this.clipper.left + this._handleCropperDrag._.deltaX,\n                top: this.clipper.top + this._handleCropperDrag._.deltaY\n            });\n        },\n\n        /**\n         * Handle focal point being dragged.\n         *\n         * @param ev\n         */\n        _handleFocalDrag: function(ev) {\n            if (typeof this._handleFocalDrag._ === 'undefined') {\n                this._handleFocalDrag._ = {};\n            }\n\n            if (this.focalPoint) {\n                this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n                this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n                if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                    return;\n                }\n\n                this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n                this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n                // Just make sure that the focal point stays inside the image\n                if (this.currentView === 'crop') {\n                    if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                        return;\n                    }\n                } else {\n                    if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                        && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                        return;\n                    }\n                }\n\n                this.focalPoint.set({\n                    left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                    top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n                });\n            }\n        },\n\n        /**\n         * Set the cropping constraint\n         * @param constraint\n         */\n        setCroppingConstraint: function(constraint) {\n            // In case this caused the sidebar width to change.\n            this.updateSizeAndPosition();\n\n            switch (constraint) {\n                case 'none':\n                    this.croppingConstraint = false;\n                    break;\n\n                case 'original':\n                    this.croppingConstraint = this.originalWidth / this.originalHeight;\n                    break;\n\n                case 'current':\n                    this.croppingConstraint = this.clipper.width / this.clipper.height;\n                    break;\n\n                case 'custom':\n\n                    break;\n                default:\n                    this.croppingConstraint = parseFloat(constraint);\n\n                    break;\n            }\n        },\n\n        /**\n         * Enforce the cropping constraint\n         */\n        enforceCroppingConstraint: function () {\n            if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n                this.enforceCroppingConstraint._ = {};\n            }\n\n            if (this.animationInProgress || !this.croppingConstraint) {\n                return;\n            }\n\n            this.animationInProgress = true;\n\n            // Mock the clipping rectangle for collision tests\n            this.enforceCroppingConstraint._.rectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            };\n\n            // If wider than it should be\n            if (this.clipper.width > this.clipper.height * this.croppingConstraint)\n            {\n                this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n                // Make it taller!\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n                // Getting really awkward having to convert between 0;0 being center or top-left corner.\n                this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n                // If the clipper would end up out of bounds, make it narrower instead.\n                if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                    this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                    this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n                }\n            } else {\n                // Follow the same pattern, if taller than it should be.\n                this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n                if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                    this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                    this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n                }\n            }\n\n            this.enforceCroppingConstraint._.properties = {\n                height: this.enforceCroppingConstraint._.rectangle.height,\n                width: this.enforceCroppingConstraint._.rectangle.width\n            };\n\n            // Make sure to redraw cropper handles and gridlines when resizing\n            this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n                onChange: function() {\n                    this._redrawCropperElements();\n                    this.croppingCanvas.renderAll();\n                }.bind(this),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    this._redrawCropperElements();\n                    this.animationInProgress = false;\n                    this.renderCropper();\n                    this.storeCropperState();\n                }.bind(this)\n            });\n        },\n\n        /**\n         * Handle cropper being resized.\n         *\n         * @param ev\n         */\n        _handleCropperResize: function(ev) {\n            if (typeof this._handleCropperResize._ === 'undefined') {\n                this._handleCropperResize._ = {};\n            }\n\n            // Size deltas\n            this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n                this._handleCropperResize._.deltaX = 0;\n            }\n\n            if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n                this._handleCropperResize._.deltaY = 0;\n            }\n\n            if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n                return;\n            }\n\n            // Translate from center-center origin to absolute coords\n            this._handleCropperResize._.startingRectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            }\n\n            this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n            if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n                return;\n            }\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n                return;\n            }\n\n            // Translate back to center-center origin.\n            this.clipper.set({\n                top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n                left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n                width: this._handleCropperResize._.rectangle.width,\n                height: this._handleCropperResize._.rectangle.height\n            });\n\n            this._redrawCropperElements();\n        },\n\n        _calculateNewCropperSizeByDeltas: function (startingRectangle, deltaX, deltaY, cropperDirection) {\n            if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n                this._calculateNewCropperSizeByDeltas._ = {};\n            }\n\n            // Center deltas\n            this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n            this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n            this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n            this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n            this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n            // Lock the aspect ratio if needed\n            if (this.croppingConstraint) {\n                this._calculateNewCropperSizeByDeltas._.change = 0;\n\n                // Take into account the mouse direction and figure out the \"real\" change in cropper size\n                switch (cropperDirection) {\n                    case 't':\n                        this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'b':\n                        this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'r':\n                        this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'l':\n                        this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tr':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tl':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'br':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'bl':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                }\n\n                if (this.croppingConstraint > 1) {\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n                }\n\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n                // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n                switch (cropperDirection) {\n                    case 't':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                        break;\n                    case 'b':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                        break;\n                    case 'r':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                        break;\n                    case 'l':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tr':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'tl':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'bl':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                }\n            } else {\n                // Lock the aspect ratio\n                if (this.shiftKeyHeld &&\n                    (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                        cropperDirection === 'bl' || cropperDirection === 'br')\n                ) {\n                    this._calculateNewCropperSizeByDeltas._.ratio;\n                    if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                        this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                        this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                        this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                    } else {\n                        this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                        this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                        this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                    }\n                }\n\n                if (cropperDirection.match(/t/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                }\n                if (cropperDirection.match(/b/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n                }\n                if (cropperDirection.match(/r/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n                }\n                if (cropperDirection.match(/l/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                }\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n            this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n            this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n            return this._calculateNewCropperSizeByDeltas._.rectangle;\n        },\n\n        /**\n         * Set mouse cursor by it's position over cropper.\n         *\n         * @param ev\n         */\n        _setMouseCursor: function(ev) {\n            if (typeof this._setMouseCursor._ === 'undefined') {\n                this._setMouseCursor._ = {};\n            }\n\n            if (Garnish.isMobileBrowser(true)) {\n                return;\n            }\n            this._setMouseCursor._.cursor = 'default';\n            this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n            if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n                this._setMouseCursor._.cursor = 'pointer';\n            } else if (this._setMouseCursor._.handle) {\n                if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                    this._setMouseCursor._.cursor = 'ns-resize';\n                } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                    this._setMouseCursor._.cursor = 'ew-resize';\n                } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                    this._setMouseCursor._.cursor = 'nwse-resize';\n                } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                    this._setMouseCursor._.cursor = 'nesw-resize';\n                }\n            } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n                this._setMouseCursor._.cursor = 'move';\n            }\n\n            $('.body').css('cursor', this._setMouseCursor._.cursor);\n        },\n\n        /**\n         * Test whether the mouse cursor is on any cropper handles.\n         *\n         * @param ev\n         */\n        _cropperHandleHitTest: function(ev) {\n            if (typeof this._cropperHandleHitTest._ === 'undefined') {\n                this._cropperHandleHitTest._ = {};\n            }\n\n            this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n            this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n            this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n            // Compensate for center origin coordinate-wise\n            this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n            this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n            this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n            this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n            // Left side top/bottom\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n                if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                    return 'tl';\n                } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                    return 'bl';\n                }\n            }\n            // Right side top/bottom\n            if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n                if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                    return 'tr';\n                } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                    return 'br';\n                }\n            }\n\n            // Left or right\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n                return 'l';\n            }\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n                return 'r';\n            }\n\n            // Top or bottom\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n                return 't';\n            }\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n                return 'b';\n            }\n\n            return false;\n        },\n\n        /**\n         * Test whether the mouse cursor is on a fabricJS object.\n         *\n         * @param object\n         * @param event\n         *\n         * @return boolean\n         */\n\n        _isMouseOver: function(event, object) {\n            if (typeof this._isMouseOver._ === 'undefined') {\n                this._isMouseOver._ = {};\n            }\n\n            this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n            this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n            this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n            // Compensate for center origin coordinate-wise\n            this._isMouseOver._.lb = object.left - object.width / 2;\n            this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n            this._isMouseOver._.tb = object.top - object.height / 2;\n            this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n            return (\n                this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n                this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n                this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n                this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n            );\n        },\n\n        /**\n         * Get vertices of a rectangle defined by left,top,height and width properties.\n         * Optionally it's possible to provide offsetX and offsetY values.\n         * Left and top properties of rectangle reference the top-left corner.\n         *\n         * @param rectangle\n         * @param [offsetX]\n         * @param [offsetY]\n         */\n        _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n            if (typeof this._getRectangleVertices._ === 'undefined') {\n                this._getRectangleVertices._ = {};\n            }\n\n            if (typeof offsetX === 'undefined') {\n                offsetX = 0;\n            }\n            if (typeof offsetY === 'undefined') {\n                offsetY = 0;\n            }\n\n            this._getRectangleVertices._.topLeft = {\n                x: rectangle.left + offsetX,\n                y: rectangle.top + offsetY\n            };\n\n            this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n            this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n            this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n            return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n        },\n\n        /**\n         * Set image vertice coordinates for an image that's been zoomed to fit.\n         */\n        _setFittedImageVerticeCoordinates: function() {\n            this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n        },\n\n        /**\n         * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n         * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n         *\n         * @param zoomMode\n         */\n        getImageVerticeCoords: function(zoomMode) {\n            var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n            var imageDimensions = this.getScaledImageDimensions();\n\n            var ratio;\n\n            if (typeof zoomMode === \"number\") {\n                ratio = zoomMode;\n            } else if (zoomMode === \"cover\") {\n                ratio = this.getZoomToCoverRatio(imageDimensions);\n            } else {\n                ratio = this.getZoomToFitRatio(imageDimensions);\n            }\n\n            // Get the dimensions of the scaled image\n            var scaledHeight = imageDimensions.height * ratio;\n            var scaledWidth = imageDimensions.width * ratio;\n\n            // Calculate the segments of the containing box for the image.\n            // When referring to top/bottom or right/left segments, these are on the\n            // right-side and bottom projection of the containing box for the zoomed out image.\n            var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n            var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n            var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n            var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n            // Calculate the offsets from editor box for the image-containing box\n            var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n            var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n            // Finally, calculate the image vertice coordinates\n            return {\n                a: {\n                    x: horizontalOffset + rightHorizontalSegment,\n                    y: verticalOffset\n                },\n                b: {\n                    x: this.editorWidth - horizontalOffset,\n                    y: verticalOffset + topVerticalSegment\n                },\n                c: {\n                    x: horizontalOffset + leftHorizontalSegment,\n                    y: this.editorHeight - verticalOffset\n                },\n                d: {\n                    x: horizontalOffset,\n                    y: verticalOffset + bottomVerticalSegment\n                }\n            };\n        },\n\n        /**\n         * Debug stuff by continuously rendering a fabric object on canvas.\n         *\n         * @param fabricObj\n         */\n        _debug: function(fabricObj) {\n            this.canvas.remove(this.debugger);\n            this.debugger = fabricObj;\n            this.canvas.add(this.debugger);\n        },\n\n        /**\n         * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n         * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n         * return true if the point is in the rectangle.\n         *\n         * Adapted from: http://stackoverflow.com/a/2763387/2040791\n         *\n         * @param points\n         * @param rectangle\n         */\n        arePointsInsideRectangle: function(points, rectangle) {\n            if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n                this.arePointsInsideRectangle._ = {};\n            }\n\n            // Pre-calculate the vectors and scalar products for two rectangle edges\n            this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n            this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n            this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n            this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n            for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n                this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n                // Calculate the vectors for two rectangle sides and for\n                // the vector from vertices a and b to the point P\n                this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n                this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n                // Calculate scalar or dot products for some vector combinations\n                this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n                this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n                this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n                this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n                if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * Returns an object representing the vector between points a and b.\n         *\n         * @param a\n         * @param b\n         */\n        _getVector: function(a, b) {\n            return {x: b.x - a.x, y: b.y - a.y};\n        },\n\n        /**\n         * Returns the scalar product of two vectors\n         *\n         * @param a\n         * @param b\n         */\n        _getScalarProduct: function(a, b) {\n            return a.x * b.x + a.y * b.y;\n        },\n\n        /**\n         * Returns the magnitude of a vector_redrawCropperElements\n         * .\n         *\n         * @param vector\n         */\n        _getVectorMagnitude: function(vector) {\n            return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n        },\n\n        /**\n         * Returns the angle between two vectors in degrees with two decimal points\n         *\n         * @param a\n         * @param b\n         */\n        _getAngleBetweenVectors: function(a, b) {\n            return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n        },\n\n        /**\n         * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n         *\n         * @param rectangle\n         * @param vertex\n         *\n         * @returns {*}\n         */\n        _getEdgeCrossed: function(rectangle, vertex) {\n            // Determine over which edge the vertex is\n            var edgePoints = [\n                [rectangle.a, rectangle.b],\n                [rectangle.b, rectangle.c],\n                [rectangle.c, rectangle.d],\n                [rectangle.d, rectangle.a]\n            ];\n\n            var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            var smallestDiff = 180;\n            var edgeCrossed = null;\n\n            // Test each edge\n            for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n                var edge = edgePoints[edgeIndex];\n                var toCenter = this._getVector(edge[0], centerPoint);\n                var edgeVector = this._getVector(edge[0], edge[1]);\n                var toVertex = this._getVector(edge[0], vertex);\n\n                // If the angle between toCenter/toVertex is the sum of\n                // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n                // the edgeVector is between the other two meaning that this is the offending vertex.\n                // To avoid the rounding errors, we'll take the closest match\n                var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n                if (diff < smallestDiff) {\n                    smallestDiff = diff;\n                    edgeCrossed = edge;\n                }\n            }\n\n            return edgeCrossed;\n        },\n\n        /**\n         * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n         *\n         * @param dimensions\n         */\n        _getImageBoundingBox: function(dimensions) {\n            var box = {};\n\n            var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n            var proportion = dimensions.height / dimensions.width;\n            box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n            box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n            if (this.hasOrientationChanged()) {\n                var temp = box.width;\n                box.width = box.height;\n                box.height = temp;\n            }\n\n            return box;\n        }\n    },\n    {\n        defaults: {\n            animationDuration: 100,\n            allowSavingAsNew: true,\n            onSave: $.noop,\n            allowDegreeFractions: null,\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend(\n    {\n        $includeSubfoldersContainer: null,\n        $includeSubfoldersCheckbox: null,\n        showingIncludeSubfoldersCheckbox: false,\n\n        $uploadButton: null,\n        $uploadInput: null,\n        $progressBar: null,\n        $folders: null,\n\n        uploader: null,\n        promptHandler: null,\n        progressBar: null,\n\n        _uploadTotalFiles: 0,\n        _uploadFileProgress: {},\n        _uploadedAssetIds: [],\n        _currentUploaderSettings: {},\n\n        _assetDrag: null,\n        _folderDrag: null,\n        _expandDropTargetFolderTimeout: null,\n        _tempExpandedFolders: [],\n\n        _fileConflictTemplate: {\n            choices: [\n                {value: 'keepBoth', title: Craft.t('app', 'Keep both')},\n                {value: 'replace', title: Craft.t('app', 'Replace it')}\n            ]\n        },\n        _folderConflictTemplate: {\n            choices: [\n                {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')},\n                {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n            ]\n        },\n\n        init: function(elementType, $container, settings) {\n            this.base(elementType, $container, settings);\n\n            if (this.settings.context === 'index') {\n                if (!this._folderDrag) {\n                    this._initIndexPageMode();\n                }\n\n                this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n            } else {\n                this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n                if (this.settings.modal) {\n                    this.settings.modal.on('updateSizeAndPosition', $.proxy(this, '_positionProgressBar'));\n                }\n            }\n        },\n\n        initSources: function() {\n            if (this.settings.context === 'index' && !this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            return this.base();\n        },\n\n        initSource: function($source) {\n            this.base($source);\n\n            this._createFolderContextMenu($source);\n\n            if (this.settings.context === 'index') {\n                if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                    if ($source.data('folder-id')) {\n                        this._folderDrag.addItems($source.parent());\n                    }\n                }\n\n                if (this._assetDrag) {\n                    this._assetDrag.updateDropTargets();\n                }\n            }\n        },\n\n        deinitSource: function($source) {\n            this.base($source);\n\n            // Does this source have a context menu?\n            var contextMenu = $source.data('contextmenu');\n\n            if (contextMenu) {\n                contextMenu.destroy();\n            }\n\n            if (this.settings.context === 'index') {\n                if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                    this._folderDrag.removeItems($source.parent());\n                }\n\n                if (this._assetDrag) {\n                    this._assetDrag.updateDropTargets();\n                }\n            }\n        },\n\n        _getSourceLevel: function($source) {\n            return $source.parentsUntil('nav', 'ul').length;\n        },\n\n        /**\n         * Initialize the index page-specific features\n         */\n        _initIndexPageMode: function() {\n            if (this._folderDrag) {\n                return;\n            }\n\n            // Make the elements selectable\n            this.settings.selectable = true;\n            this.settings.multiSelect = true;\n\n            var onDragStartProxy = $.proxy(this, '_onDragStart'),\n                onDropTargetChangeProxy = $.proxy(this, '_onDropTargetChange');\n\n            // Asset dragging\n            // ---------------------------------------------------------------------\n\n            this._assetDrag = new Garnish.DragDrop({\n                activeDropTargetClass: 'sel',\n                helperOpacity: 0.75,\n\n                filter: $.proxy(function() {\n                    return this.view.getSelectedElements().has('div.element[data-movable]');\n                }, this),\n\n                helper: $.proxy(function($file) {\n                    return this._getFileDragHelper($file);\n                }, this),\n\n                dropTargets: $.proxy(function() {\n                    // Which data attribute should we be checking?\n                    var attr;\n                    if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                        attr = 'data-can-move-peer-files-to';\n                    } else {\n                        attr = 'data-can-move-to';\n                    }\n\n                    var targets = [];\n\n                    for (var i = 0; i < this.$sources.length; i++) {\n                        // Make sure it's a volume folder\n                        var $source = this.$sources.eq(i);\n                        if (Garnish.hasAttr($source, attr)) {\n                            targets.push($source);\n                        }\n                    }\n\n                    return targets;\n                }, this),\n\n                onDragStart: onDragStartProxy,\n                onDropTargetChange: onDropTargetChangeProxy,\n                onDragStop: $.proxy(this, '_onFileDragStop'),\n                helperBaseZindex: 800\n            });\n\n            // Folder dragging\n            // ---------------------------------------------------------------------\n\n            this._folderDrag = new Garnish.DragDrop(\n                {\n                    activeDropTargetClass: 'sel',\n                    helperOpacity: 0.75,\n\n                    filter: $.proxy(function() {\n                        // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                        var $selected = this.sourceSelect.getSelectedItems(),\n                            draggees = [];\n\n                        for (var i = 0; i < $selected.length; i++) {\n                            var $source = $selected.eq(i);\n\n                            if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                                continue;\n                            }\n\n                            if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                                draggees.push($source.parent()[0]);\n                            }\n                        }\n\n                        return $(draggees);\n                    }, this),\n\n                    helper: $.proxy(function($draggeeHelper) {\n                        var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                            $helperNav = $('<nav/>').appendTo($helperSidebar),\n                            $helperUl = $('<ul/>').appendTo($helperNav);\n\n                        $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                        $draggeeHelper.children('a').addClass('sel');\n\n                        // Match the style\n                        $draggeeHelper.css({\n                            'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                            'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                            'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                            'padding-left': this._folderDrag.$draggee.css('padding-left')\n                        });\n\n                        return $helperSidebar;\n                    }, this),\n\n                    dropTargets: $.proxy(function() {\n                        var targets = [];\n\n                        // Tag the dragged folder and it's subfolders\n                        var draggedSourceIds = [];\n                        this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                            draggedSourceIds.push($(this).data('key'));\n                        });\n\n                        for (var i = 0; i < this.$sources.length; i++) {\n                            // Make sure it's a volume folder and not one of the dragged folders\n                            var $source = this.$sources.eq(i),\n                                key = $source.data('key');\n\n                            if (!this._getFolderUidFromSourceKey(key)) {\n                                continue;\n                            }\n\n                            if (!Craft.inArray(key, draggedSourceIds)) {\n                                targets.push($source);\n                            }\n                        }\n\n                        return targets;\n                    }, this),\n\n                    onDragStart: onDragStartProxy,\n                    onDropTargetChange: onDropTargetChangeProxy,\n                    onDragStop: $.proxy(this, '_onFolderDragStop')\n                });\n        },\n\n        /**\n         * On file drag stop\n         */\n        _onFileDragStop: function() {\n            if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n                // Keep it selected\n                var originatingSource = this.$source;\n\n                var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                    originalAssetIds = [];\n\n                // For each file, prepare array data.\n                for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                    var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                    originalAssetIds.push(originalAssetId);\n                }\n\n                // Are any files actually getting moved?\n                if (originalAssetIds.length) {\n                    this.setIndexBusy();\n\n                    this._positionProgressBar();\n                    this.progressBar.resetProgressBar();\n                    this.progressBar.setItemCount(originalAssetIds.length);\n                    this.progressBar.showProgressBar();\n\n\n                    // For each file to move a separate request\n                    var parameterArray = [];\n                    for (i = 0; i < originalAssetIds.length; i++) {\n                        parameterArray.push({\n                            action: 'assets/move-asset',\n                            params: {\n                                assetId: originalAssetIds[i],\n                                folderId: targetFolderId\n                            }\n                        });\n                    }\n\n                    // Define the callback for when all file moves are complete\n                    var onMoveFinish = $.proxy(function(responseArray) {\n                        this.promptHandler.resetPrompts();\n\n                        // Loop trough all the responses\n                        for (var i = 0; i < responseArray.length; i++) {\n                            var response = responseArray[i];\n\n                            // Push prompt into prompt array\n                            if (response.conflict) {\n                                this.promptHandler.addPrompt({\n                                    assetId: response.assetId,\n                                    suggestedFilename: response.suggestedFilename,\n                                    prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                                });\n                            }\n\n                            if (response.error) {\n                                alert(response.error);\n                            }\n                        }\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        var reloadIndex = false;\n\n                        var performAfterMoveActions = function() {\n                            // Select original source\n                            this.sourceSelect.selectItem(originatingSource);\n\n                            // Make sure we use the correct offset when fetching the next page\n                            this._totalVisible -= this._assetDrag.$draggee.length;\n\n                            // And remove the elements that have been moved away\n                            for (var i = 0; i < originalAssetIds.length; i++) {\n                                $('[data-id=' + originalAssetIds[i] + ']').remove();\n                            }\n\n                            this.view.deselectAllElements();\n                            this._collapseExtraExpandedFolders(targetFolderId);\n\n                            if (reloadIndex) {\n                                this.updateElements();\n                            }\n                        };\n\n                        if (this.promptHandler.getPromptCount()) {\n                            // Define callback for completing all prompts\n                            var promptCallback = $.proxy(function(returnData) {\n                                var newParameterArray = [];\n\n                                // Loop trough all returned data and prepare a new request array\n                                for (var i = 0; i < returnData.length; i++) {\n                                    if (returnData[i].choice === 'cancel') {\n                                        reloadIndex = true;\n                                        continue;\n                                    }\n\n                                    if (returnData[i].choice === 'keepBoth') {\n                                        newParameterArray.push({\n                                            action: 'assets/move-asset',\n                                            params: {\n                                                folderId: targetFolderId,\n                                                assetId: returnData[i].assetId,\n                                                filename: returnData[i].suggestedFilename\n                                            }\n                                        });\n                                    }\n\n                                    if (returnData[i].choice === 'replace') {\n                                        newParameterArray.push({\n                                            action: 'assets/move-asset',\n                                            params: {\n                                                folderId: targetFolderId,\n                                                assetId: returnData[i].assetId,\n                                                force: true\n                                            }\n                                        });\n                                    }\n                                }\n\n                                // Nothing to do, carry on\n                                if (newParameterArray.length === 0) {\n                                    performAfterMoveActions.apply(this);\n                                }\n                                else {\n                                    // Start working\n                                    this.setIndexBusy();\n                                    this.progressBar.resetProgressBar();\n                                    this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                    this.progressBar.showProgressBar();\n\n                                    // Move conflicting files again with resolutions now\n                                    this._performBatchRequests(newParameterArray, onMoveFinish);\n                                }\n                            }, this);\n\n                            this._assetDrag.fadeOutHelpers();\n                            this.promptHandler.showBatchPrompts(promptCallback);\n                        }\n                        else {\n                            performAfterMoveActions.apply(this);\n                            this._assetDrag.fadeOutHelpers();\n                        }\n                    }, this);\n\n                    // Initiate the file move with the built array, index of 0 and callback to use when done\n                    this._performBatchRequests(parameterArray, onMoveFinish);\n\n                    // Skip returning dragees\n                    return;\n                }\n            }\n            else {\n                // Add the .sel class back on the selected source\n                this.$source.addClass('sel');\n\n                this._collapseExtraExpandedFolders();\n            }\n\n            this._assetDrag.returnHelpersToDraggees();\n        },\n\n        /**\n         * On folder drag stop\n         */\n        _onFolderDragStop: function() {\n            // Only move if we have a valid target and we're not trying to move into our direct parent\n            if (\n                this._folderDrag.$activeDropTarget &&\n                this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n            ) {\n                var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n                this._collapseExtraExpandedFolders(targetFolderId);\n\n                // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n                var folderIds = [];\n\n                for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                    var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                        folderId = $a.data('folder-id');\n\n                    // Make sure it's not already in the target folder and use this single folder Id.\n                    if (folderId != targetFolderId) {\n                        folderIds.push(folderId);\n                        break;\n                    }\n                }\n\n                if (folderIds.length) {\n                    folderIds.sort();\n                    folderIds.reverse();\n\n                    this.setIndexBusy();\n                    this._positionProgressBar();\n                    this.progressBar.resetProgressBar();\n                    this.progressBar.setItemCount(folderIds.length);\n                    this.progressBar.showProgressBar();\n\n                    var parameterArray = [];\n\n                    for (i = 0; i < folderIds.length; i++) {\n                        parameterArray.push({\n                            action: 'assets/move-folder',\n                            params: {\n                                folderId: folderIds[i],\n                                parentId: targetFolderId\n                            }\n                        });\n                    }\n\n                    // Increment, so to avoid displaying folder files that are being moved\n                    this.requestId++;\n\n                    /*\n                     Here's the rundown:\n                     1) Send all the folders being moved\n                     2) Get results:\n                     a) For all conflicting, receive prompts and resolve them to get:\n                     b) For all valid move operations: by now server has created the needed folders\n                     in target destination. Server returns an array of file move operations\n                     c) server also returns a list of all the folder id changes\n                     d) and the data-id of node to be removed, in case of conflict\n                     e) and a list of folders to delete after the move\n                     3) From data in 2) build a large file move operation array\n                     4) Create a request loop based on this, so we can display progress bar\n                     5) when done, delete all the folders and perform other maintenance\n                     6) Champagne\n                     */\n\n                    // This will hold the final list of files to move\n                    var fileMoveList = [];\n\n                    var newSourceKey = '';\n\n                    var onMoveFinish = function(responseArray) {\n                        this.promptHandler.resetPrompts();\n\n                        // Loop trough all the responses\n                        for (var i = 0; i < responseArray.length; i++) {\n                            var data = responseArray[i];\n\n                            // If successful and have data, then update\n                            if (data.success) {\n                                if (data.transferList) {\n                                    fileMoveList = data.transferList;\n                                }\n\n                                if (data.newFolderId) {\n                                    newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                                }\n                            }\n\n                            // Push prompt into prompt array\n                            if (data.conflict) {\n                                data.prompt = {\n                                    message: data.conflict,\n                                    choices: this._folderConflictTemplate.choices\n                                };\n\n                                this.promptHandler.addPrompt(data);\n                            }\n\n                            if (data.error) {\n                                alert(data.error);\n                            }\n                        }\n\n                        if (this.promptHandler.getPromptCount()) {\n                            // Define callback for completing all prompts\n                            var promptCallback = $.proxy(function(returnData) {\n                                this.promptHandler.resetPrompts();\n\n                                var newParameterArray = [];\n\n                                var params = {};\n                                // Loop trough all returned data and prepare a new request array\n                                for (var i = 0; i < returnData.length; i++) {\n                                    if (returnData[i].choice === 'cancel') {\n                                        continue;\n                                    }\n\n                                    if (returnData[i].choice === 'replace') {\n                                        params.force = true;\n                                    }\n\n                                    if (returnData[i].choice === 'merge') {\n                                        params.merge = true;\n                                    }\n\n                                    params.folderId = data.folderId;\n                                    params.parentId = data.parentId;\n\n                                    newParameterArray.push({\n                                        action: 'assets/move-folder',\n                                        params: params\n                                    });\n                                }\n\n                                // Start working on them lists, baby\n                                if (newParameterArray.length === 0) {\n                                    $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                                }\n                                else {\n                                    // Start working\n                                    this.setIndexBusy();\n                                    this.progressBar.resetProgressBar();\n                                    this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                    this.progressBar.showProgressBar();\n\n                                    this._performBatchRequests(newParameterArray, onMoveFinish);\n                                }\n                            }, this);\n\n                            this.promptHandler.showBatchPrompts(promptCallback);\n\n                            this.setIndexAvailable();\n                            this.progressBar.hideProgressBar();\n                        }\n                        else {\n                            $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                        }\n                    }.bind(this);\n\n                    // Initiate the folder move with the built array, index of 0 and callback to use when done\n                    this._performBatchRequests(parameterArray, onMoveFinish);\n\n                    // Skip returning dragees until we get the Ajax response\n                    return;\n                }\n            }\n            else {\n                // Add the .sel class back on the selected source\n                this.$source.addClass('sel');\n\n                this._collapseExtraExpandedFolders();\n            }\n\n            this._folderDrag.returnHelpersToDraggees();\n        },\n\n        /**\n         * Really move the folder. Like really. For real.\n         */\n        _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n            this.setIndexBusy();\n            this.progressBar.resetProgressBar();\n            this.progressBar.setItemCount(1);\n            this.progressBar.showProgressBar();\n\n            var moveCallback = function(folderDeleteList) {\n                // Delete the old folders\n                var counter = 0;\n                var limit = folderDeleteList.length;\n                for (var i = 0; i < folderDeleteList.length; i++) {\n                    // When all folders are deleted, reload the sources.\n                    Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, function() {\n                        if (++counter === limit) {\n                            this.setIndexAvailable();\n                            this.progressBar.hideProgressBar();\n                            this._folderDrag.returnHelpersToDraggees();\n                            this.setInstanceState('selectedSource', newSourceKey);\n                            this.refreshSources();\n                        }\n                    }.bind(this));\n                }\n            }.bind(this);\n\n\n            if (fileMoveList.length > 0) {\n                var parameterArray =[];\n\n                for (var i = 0; i < fileMoveList.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: fileMoveList[i]\n                    });\n                }\n                this._performBatchRequests(parameterArray, function() {\n                    moveCallback(folderDeleteList);\n                });\n            }\n            else {\n                moveCallback(folderDeleteList);\n            }\n        },\n\n        /**\n         * Returns the root level source for a source.\n         *\n         * @param $source\n         * @returns {*}\n         * @private\n         */\n        _getRootSource: function($source) {\n            var $parent;\n            while (($parent = this._getParentSource($source)) && $parent.length) {\n                $source = $parent;\n            }\n            return $source;\n        },\n\n        /**\n         * Get parent source for a source.\n         *\n         * @param $source\n         * @returns {*}\n         * @private\n         */\n        _getParentSource: function($source) {\n            if (this._getSourceLevel($source) > 1) {\n                return $source.parent().parent().siblings('a');\n            }\n        },\n\n        _selectSourceByFolderId: function(targetFolderId) {\n            var $targetSource = this._getSourceByKey(targetFolderId);\n\n            // Make sure that all the parent sources are expanded and this source is visible.\n            var $parentSources = $targetSource.parent().parents('li');\n\n            for (var i = 0; i < $parentSources.length; i++) {\n                var $parentSource = $($parentSources[i]);\n\n                if (!$parentSource.hasClass('expanded')) {\n                    $parentSource.children('.toggle').trigger('click');\n                }\n            }\n\n            this.selectSource($targetSource);\n            this.updateElements();\n        },\n\n        /**\n         * Initialize the uploader.\n         *\n         * @private\n         */\n        afterInit: function() {\n            if (!this.$uploadButton) {\n                this.$uploadButton = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit',\n                    'data-icon': 'upload',\n                    style: 'position: relative; overflow: hidden;',\n                    text: Craft.t('app', 'Upload files'),\n                });\n                this.addButton(this.$uploadButton);\n\n                this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n            }\n\n            this.promptHandler = new Craft.PromptHandler();\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n            var options = {\n                url: Craft.getActionUrl('assets/upload'),\n                fileInput: this.$uploadInput,\n                dropZone: this.$container\n            };\n\n            options.events = {\n                fileuploadstart: $.proxy(this, '_onUploadStart'),\n                fileuploadprogressall: $.proxy(this, '_onUploadProgress'),\n                fileuploaddone: $.proxy(this, '_onUploadComplete')\n            };\n\n            if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n                options.allowedKinds = this.settings.criteria.kind;\n            }\n\n            this._currentUploaderSettings = options;\n\n            this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n            this.$uploadButton.on('click', $.proxy(function() {\n                if (this.$uploadButton.hasClass('disabled')) {\n                    return;\n                }\n                if (!this.isIndexBusy) {\n                    this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n                }\n            }, this));\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific volume in the URL?\n            if (this.settings.context === 'index' && typeof defaultVolumeHandle !== 'undefined') {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n                    if ($source.data('volume-handle') === defaultVolumeHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        onSelectSource: function() {\n            var $source = this._getSourceByKey(this.sourceKey);\n            var folderId = $source.data('folder-id');\n\n            if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n                this.uploader.setParams({\n                    folderId: this.$source.attr('data-folder-id')\n                });\n                this.$uploadButton.removeClass('disabled');\n            } else {\n                this.$uploadButton.addClass('disabled');\n            }\n\n            // Update the URL if we're on the Assets index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'assets';\n                var $rootSource = this._getRootSource($source);\n                if ($rootSource && $rootSource.data('volume-handle')) {\n                    uri += '/' + $rootSource.data('volume-handle');\n                }\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n\n            this.base();\n        },\n\n        _getFolderUidFromSourceKey: function(sourceKey) {\n            var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n            return m ? m[1] : null;\n        },\n\n        startSearching: function() {\n            // Does this source have subfolders?\n            if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n                if (this.$includeSubfoldersContainer === null) {\n                    var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                    this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                    var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                    this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                    $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                    this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                        this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                        this.updateElements();\n                    });\n                }\n                else {\n                    this.$includeSubfoldersContainer.velocity('stop');\n                }\n\n                var checked = this.getSelectedSourceState('includeSubfolders', false);\n                this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n                this.$includeSubfoldersContainer.velocity({\n                    marginBottom: 0,\n                    opacity: 1\n                }, 'fast');\n\n                this.showingIncludeSubfoldersCheckbox = true;\n            }\n\n            this.base();\n        },\n\n        stopSearching: function() {\n            if (this.showingIncludeSubfoldersCheckbox) {\n                this.$includeSubfoldersContainer.velocity('stop');\n\n                this.$includeSubfoldersContainer.velocity({\n                    marginBottom: -25,\n                    opacity: 0\n                }, 'fast');\n\n                this.showingIncludeSubfoldersCheckbox = false;\n            }\n\n            this.base();\n        },\n\n        getViewParams: function() {\n            var data = this.base();\n\n            if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n                data.criteria.includeSubfolders = true;\n            }\n\n            return data;\n        },\n\n        /**\n         * React on upload submit.\n         *\n         * @private\n         */\n        _onUploadStart: function() {\n            this.setIndexBusy();\n\n            // Initial values\n            this._positionProgressBar();\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n\n            this.promptHandler.resetPrompts();\n        },\n\n        /**\n         * Update uploaded byte count.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On Upload Complete.\n         */\n        _onUploadComplete: function(event, data) {\n            var response = data.result;\n            var filename = data.files[0].name;\n\n            var doReload = true;\n\n            if (response.success || response.conflict) {\n                // Add the uploaded file to the selected ones, if appropriate\n                this._uploadedAssetIds.push(response.assetId);\n\n                // If there is a prompt, add it to the queue\n                if (response.conflict) {\n                    response.prompt =  {\n                        message: Craft.t('app', response.conflict, {file: response.filename}),\n                        choices: this._fileConflictTemplate.choices\n                    };\n\n                    this.promptHandler.addPrompt(response);\n                }\n\n                Craft.cp.runQueue();\n            }\n            else {\n                if (response.error) {\n                    alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n                }\n                else {\n                    alert(Craft.t('app', 'Upload failed for {filename}.', {filename: filename}));\n                }\n\n                doReload = false;\n            }\n\n            // For the last file, display prompts, if any. If not - just update the element view.\n            if (this.uploader.isLastUpload()) {\n                this.setIndexAvailable();\n                this.progressBar.hideProgressBar();\n\n                if (this.promptHandler.getPromptCount()) {\n                    this.promptHandler.showBatchPrompts($.proxy(this, '_uploadFollowup'));\n                }\n                else {\n                    if (doReload) {\n                        this._updateAfterUpload();\n                    }\n                }\n            }\n        },\n\n        /**\n         * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n         *\n         * @private\n         */\n        _updateAfterUpload: function () {\n            if (this.settings.context !== 'index') {\n                this.setSortAttribute('dateModified');\n                this.setSortDirection('desc');\n            }\n            this.updateElements();\n        },\n\n        /**\n         * Follow up to an upload that triggered at least one conflict resolution prompt.\n         *\n         * @param returnData\n         * @private\n         */\n        _uploadFollowup: function(returnData) {\n            this.setIndexBusy();\n            this.progressBar.resetProgressBar();\n\n            this.promptHandler.resetPrompts();\n\n            var finalCallback = function() {\n                this.setIndexAvailable();\n                this.progressBar.hideProgressBar();\n                this._updateAfterUpload();\n            }.bind(this);\n\n            this.progressBar.setItemCount(returnData.length);\n\n            var doFollowup = function(parameterArray, parameterIndex, callback) {\n                var postData = {};\n                var action = null;\n\n                var followupCallback = function (data, textStatus) {\n                    if (textStatus === 'success' && data.assetId) {\n                        this._uploadedAssetIds.push(data.assetId);\n                    } else if (data.error) {\n                        alert(data.error);\n                    }\n                    parameterIndex++;\n                    this.progressBar.incrementProcessedItemCount(1);\n                    this.progressBar.updateProgressBar();\n\n                    if (parameterIndex === parameterArray.length) {\n                        callback();\n                    }\n                    else {\n                        doFollowup(parameterArray, parameterIndex, callback);\n                    }\n                }.bind(this);\n\n                if (parameterArray[parameterIndex].choice === 'replace') {\n                    action = 'assets/replace-file';\n                    postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                    if (parameterArray[parameterIndex].conflictingAssetId) {\n                        postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                    } else {\n                        postData.targetFilename = parameterArray[parameterIndex].filename;\n                    }\n                } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                    action = 'assets/delete-asset';\n                    postData.assetId = parameterArray[parameterIndex].assetId;\n                }\n\n                if (!action) {\n                    // We don't really need to do another request, so let's pretend that already happened\n                    followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n                } else {\n                    Craft.postActionRequest(action, postData, followupCallback);\n                }\n            }.bind(this);\n\n            this.progressBar.showProgressBar();\n            doFollowup(returnData, 0, finalCallback);\n        },\n\n        /**\n         * Perform actions after updating elements\n         * @private\n         */\n        onUpdateElements: function() {\n            this._onUpdateElements(false, this.view.getAllElements());\n            this.view.on('appendElements', $.proxy(function(ev) {\n                this._onUpdateElements(true, ev.newElements);\n            }, this));\n\n            this.base();\n        },\n\n        /**\n         * Do the after-update initializations\n         * @private\n         */\n        _onUpdateElements: function(append, $newElements) {\n            if (this.settings.context === 'index') {\n                if (!append) {\n                    this._assetDrag.removeAllItems();\n                }\n\n                this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n            }\n\n            // See if we have freshly uploaded files to add to selection\n            if (this._uploadedAssetIds.length) {\n                if (this.view.settings.selectable) {\n                    for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                        this.view.selectElementById(this._uploadedAssetIds[i]);\n                    }\n                }\n\n                // Reset the list.\n                this._uploadedAssetIds = [];\n            }\n\n            this.base(append, $newElements);\n\n            this.removeListener(this.$elements, 'keydown');\n            this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n            this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n        },\n\n        /**\n         * Handle a keypress\n         * @private\n         */\n        _onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n                if (Craft.PreviewFileModal.openInstance) {\n                    Craft.PreviewFileModal.openInstance.selfDestruct();\n                } else {\n                    var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                    if ($element.length) {\n                        this._loadPreview($element);\n                    }\n                }\n\n                ev.stopPropagation();\n                return false;\n            }\n        },\n\n        /**\n         * Handle element being focused\n         * @private\n         */\n        _onElementFocus: function (ev) {\n            var $element = $(ev.item).find('.element');\n\n            if (Craft.PreviewFileModal.openInstance && $element.length) {\n                this._loadPreview($element);\n            }\n        },\n\n        /**\n         * Load the preview for an Asset element\n         * @private\n         */\n        _loadPreview: function($element) {\n            var settings = {};\n\n            if ($element.data('image-width')) {\n                settings.startingWidth = $element.data('image-width');\n                settings.startingHeight = $element.data('image-height');\n            }\n\n            new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n        },\n\n        /**\n         * On Drag Start\n         */\n        _onDragStart: function() {\n            this._tempExpandedFolders = [];\n        },\n\n        /**\n         * Get File Drag Helper\n         */\n        _getFileDragHelper: function($element) {\n            var currentView = this.getSelectedSourceState('mode');\n            var $outerContainer;\n            var $innerContainer;\n\n            switch (currentView) {\n                case 'table': {\n                    $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                    $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                    var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                    var $tbody = $('<tbody/>').appendTo($table);\n\n                    $element.appendTo($tbody);\n\n                    // Copy the column widths\n                    this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                    var $helperCells = $element.children();\n\n                    for (var i = 0; i < $helperCells.length; i++) {\n                        // Hard-set the cell widths\n                        var $helperCell = $($helperCells[i]);\n\n                        // Skip the checkbox cell\n                        if ($helperCell.hasClass('checkbox-cell')) {\n                            $helperCell.remove();\n                            $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                            continue;\n                        }\n\n                        var $firstRowCell = $(this._$firstRowCells[i]),\n                            width = $firstRowCell.width();\n\n                        $firstRowCell.width(width);\n                        $helperCell.width(width);\n                    }\n\n                    return $outerContainer;\n                }\n                case 'thumbs': {\n                    $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                    $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                    $element.appendTo($innerContainer);\n\n                    return $outerContainer;\n                }\n            }\n\n            return $();\n        },\n\n        /**\n         * On Drop Target Change\n         */\n        _onDropTargetChange: function($dropTarget) {\n            clearTimeout(this._expandDropTargetFolderTimeout);\n\n            if ($dropTarget) {\n                var folderId = $dropTarget.data('folder-id');\n\n                if (folderId) {\n                    this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                    if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                        this._expandDropTargetFolderTimeout = setTimeout($.proxy(this, '_expandFolder'), 500);\n                    }\n                }\n                else {\n                    this.dropTargetFolder = null;\n                }\n            }\n\n            if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n                // Temporarily remove the .sel class on the active source\n                this.$source.removeClass('sel');\n            }\n            else {\n                this.$source.addClass('sel');\n            }\n        },\n\n        /**\n         * Collapse Extra Expanded Folders\n         */\n        _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n            clearTimeout(this._expandDropTargetFolderTimeout);\n\n            // If a source ID is passed in, exclude its parents\n            var $excludedSources;\n\n            if (dropTargetFolderId) {\n                $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n            }\n\n            for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n                var $source = this._tempExpandedFolders[i];\n\n                // Check the parent list, if a source id is passed in\n                if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                    this._collapseFolder($source);\n                    this._tempExpandedFolders.splice(i, 1);\n                }\n            }\n        },\n\n        _getSourceByKey: function(key) {\n            return this.$sources.filter('[data-key$=\"' + key + '\"]');\n        },\n\n        _hasSubfolders: function($source) {\n            return $source.siblings('ul').find('li').length;\n        },\n\n        _isExpanded: function($source) {\n            return $source.parent('li').hasClass('expanded');\n        },\n\n        _expandFolder: function() {\n            // Collapse any temp-expanded drop targets that aren't parents of this one\n            this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n            this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n            // Keep a record of that\n            this._tempExpandedFolders.push(this.dropTargetFolder);\n        },\n\n        _collapseFolder: function($source) {\n            if ($source.parent().hasClass('expanded')) {\n                $source.siblings('.toggle').trigger('click');\n            }\n        },\n\n        _createFolderContextMenu: function($source) {\n            // Make sure it's a volume folder\n            if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                return;\n            }\n\n            var menuOptions = [{label: Craft.t('app', 'New subfolder'), onClick: $.proxy(this, '_createSubfolder', $source)}];\n\n            // For all folders that are not top folders\n            if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n                menuOptions.push({label: Craft.t('app', 'Rename folder'), onClick: $.proxy(this, '_renameFolder', $source)});\n                menuOptions.push({label: Craft.t('app', 'Delete folder'), onClick: $.proxy(this, '_deleteFolder', $source)});\n            }\n\n            new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n        },\n\n        _createSubfolder: function($parentFolder) {\n            var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n            if (subfolderName) {\n                var params = {\n                    parentId: $parentFolder.data('folder-id'),\n                    folderName: subfolderName\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/create-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        this._prepareParentForChildren($parentFolder);\n\n                        var $subfolder = $(\n                            '<li>' +\n                            '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                            (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                            ' data-folder-id=\"' + data.folderId + '\"' +\n                            (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                            (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                            (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                            '>' +\n                            data.folderName +\n                            '</a>' +\n                            '</li>'\n                        );\n\n                        var $a = $subfolder.children('a:first');\n                        this._appendSubfolder($parentFolder, $subfolder);\n                        this.initSource($a);\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this));\n            }\n        },\n\n        _deleteFolder: function($targetFolder) {\n            if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n                var params = {\n                    folderId: $targetFolder.data('folder-id')\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/delete-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        var $parentFolder = this._getParentSource($targetFolder);\n\n                        // Remove folder and any trace from its parent, if needed\n                        this.deinitSource($targetFolder);\n\n                        $targetFolder.parent().remove();\n                        this._cleanUpTree($parentFolder);\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this));\n            }\n        },\n\n        /**\n         * Rename\n         */\n        _renameFolder: function($targetFolder) {\n            var oldName = $.trim($targetFolder.text()),\n                newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n            if (newName && newName !== oldName) {\n                var params = {\n                    folderId: $targetFolder.data('folder-id'),\n                    newName: newName\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/rename-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        $targetFolder.text(data.newName);\n\n                        // If the current folder was renamed.\n                        if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                            this.updateElements();\n                        }\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this), 'json');\n            }\n        },\n\n        /**\n         * Prepare a source folder for children folder.\n         *\n         * @param $parentFolder\n         * @private\n         */\n        _prepareParentForChildren: function($parentFolder) {\n            if (!this._hasSubfolders($parentFolder)) {\n                $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n                this.initSourceToggle($parentFolder);\n            }\n        },\n\n        /**\n         * Appends a subfolder to the parent folder at the correct spot.\n         *\n         * @param $parentFolder\n         * @param $subfolder\n         * @private\n         */\n        _appendSubfolder: function($parentFolder, $subfolder) {\n            var $subfolderList = $parentFolder.siblings('ul'),\n                $existingChildren = $subfolderList.children('li'),\n                subfolderLabel = $.trim($subfolder.children('a:first').text()),\n                folderInserted = false;\n\n            for (var i = 0; i < $existingChildren.length; i++) {\n                var $existingChild = $($existingChildren[i]);\n\n                if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                    $existingChild.before($subfolder);\n                    folderInserted = true;\n                    break;\n                }\n            }\n\n            if (!folderInserted) {\n                $parentFolder.siblings('ul').append($subfolder);\n            }\n        },\n\n        _cleanUpTree: function($parentFolder) {\n            if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n                this.deinitSourceToggle($parentFolder);\n                $parentFolder.siblings('ul').remove();\n                $parentFolder.siblings('.toggle').remove();\n                $parentFolder.parent().removeClass('expanded');\n            }\n        },\n\n        _positionProgressBar: function() {\n            if (!this.progressBar) {\n                this.progressBar = new Craft.ProgressBar(this.$main, true);\n            }\n\n            var $container = $(),\n                scrollTop = 0,\n                offset = 0;\n\n            if (this.settings.context === 'index') {\n                $container = this.progressBar.$progressBar.closest('#content');\n                scrollTop = Garnish.$win.scrollTop();\n            } else {\n                $container = this.progressBar.$progressBar.closest('.main');\n                scrollTop = this.$main.scrollTop();\n            }\n\n            var containerTop = $container.offset().top;\n            var diff = scrollTop - containerTop;\n            var windowHeight = Garnish.$win.height();\n\n            if ($container.height() > windowHeight) {\n                offset = (windowHeight / 2) - 6 + diff;\n            } else {\n                offset = ($container.height() / 2) - 6;\n            }\n\n            if (this.settings.context !== 'index') {\n                offset = scrollTop + (($container.height() / 2) - 6);\n            }\n\n            this.progressBar.$progressBar.css({\n                top: offset\n            });\n        },\n\n        _performBatchRequests: function(parameterArray, finalCallback) {\n            var responseArray = [];\n\n            var doRequest = function (parameters) {\n                Craft.postActionRequest(parameters.action, parameters.params, function (data, textStatus) {\n                    this.progressBar.incrementProcessedItemCount(1);\n                    this.progressBar.updateProgressBar();\n\n                    if (textStatus === 'success') {\n                        responseArray.push(data);\n\n                        // If assets were just merged we should get the reference tags updated right away\n                        Craft.cp.runQueue();\n                    }\n\n                    if (responseArray.length >= parameterArray.length) {\n                        finalCallback(responseArray);\n                    }\n                }.bind(this));\n            }.bind(this);\n\n            for (var i = 0; i < parameterArray.length; i++) {\n                doRequest(parameterArray[i]);\n            }\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        requestId: 0,\n        hud: null,\n        $uploadBtn: null,\n        uploader: null,\n        progressBar: null,\n\n        originalFilename: '',\n        originalExtension: '',\n\n        init: function() {\n            if (arguments.length > 0 && typeof arguments[0] === 'object') {\n                arguments[0].editorSettings = {\n                    onShowHud: $.proxy(this.resetOriginalFilename, this),\n                    onCreateForm: $.proxy(this._renameHelper, this),\n                    validators: [$.proxy(this.validateElementForm, this)]\n                };\n            }\n\n            this.base.apply(this, arguments);\n\n            if (this.settings.canUpload) {\n                this._attachUploader();\n            }\n\n            this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n            this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n        },\n\n        /**\n         * Handle a keypress\n         * @private\n         */\n        _onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n                if (Craft.PreviewFileModal.openInstance) {\n                    Craft.PreviewFileModal.openInstance.selfDestruct();\n                } else {\n                    var $element = this.elementSelect.$focusedItem;\n\n                    if ($element.length) {\n                        this._loadPreview($element);\n                    }\n                }\n\n                ev.stopPropagation();\n\n                return false;\n            }\n        },\n\n        /**\n         * Handle element being focused\n         * @private\n         */\n        _onElementFocus: function(ev) {\n            var $element = $(ev.item);\n\n            if (Craft.PreviewFileModal.openInstance && $element.length) {\n                this._loadPreview($element);\n            }\n        },\n\n        /**\n         * Load the preview for an Asset element\n         * @private\n         */\n        _loadPreview: function($element) {\n            var settings = {};\n\n            if ($element.data('image-width')) {\n                settings.startingWidth = $element.data('image-width');\n                settings.startingHeight = $element.data('image-height');\n            }\n\n            new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n        },\n\n        /**\n         * Create the element editor\n         */\n        createElementEditor: function($element) {\n            return this.base($element, {\n                params: {\n                    defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n                },\n                input: this\n            });\n        },\n\n        /**\n         * Attach the uploader with drag event handler\n         */\n        _attachUploader: function() {\n            this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n            var options = {\n                url: Craft.getActionUrl('assets/upload'),\n                dropZone: this.$container,\n                formData: {\n                    fieldId: this.settings.fieldId,\n                    elementId: this.settings.sourceElementId,\n                    siteId: this.settings.criteria.siteId,\n                }\n            };\n\n            if (this.$addElementBtn) {\n                this.$uploadBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn dashed',\n                    'data-icon': 'upload',\n                    text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n                }).insertAfter(this.$addElementBtn);\n                options.fileInput = $('<input/>', {\n                    type: 'file',\n                    class: 'hidden',\n                    multiple: this.settings.limit != 1,\n                }).insertAfter(this.$uploadBtn);\n\n                // Trigger a window resize in case the field is inside an element editor HUD\n                Garnish.$win.trigger('resize');\n            }\n\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            if (typeof this.settings.criteria.kind !== 'undefined') {\n                options.allowedKinds = this.settings.criteria.kind;\n            }\n\n            options.canAddMoreFiles = $.proxy(this, 'canAddMoreFiles');\n\n            options.events = {};\n            options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n            options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n            options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n\n            this.uploader = new Craft.Uploader(this.$container, options);\n\n            if (this.$uploadBtn) {\n                this.$uploadBtn.on('click', $.proxy(function(ev) {\n                    // We can't store a reference to the file input, because it gets replaced with a new input\n                    // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                    this.$uploadBtn.next('input[type=file]').trigger('click');\n                }, this));\n            }\n        },\n\n        refreshThumbnail: function(elementId) {\n            var parameters = {\n                elementId: elementId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                    $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                    this.thumbLoader.load($existing);\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Add the freshly uploaded file to the input field.\n         */\n        selectUploadedFile: function(element) {\n            // Check if we're able to add new elements\n            if (!this.canAddMoreElements()) {\n                return;\n            }\n\n            var $newElement = element.$element;\n\n            // Make a couple tweaks\n            $newElement.addClass('removable');\n            $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n                '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n            $newElement.appendTo(this.$elementsContainer);\n\n            var margin = -($newElement.outerWidth() + 10);\n\n            this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$addElementBtn.velocity(animateCss, 'fast');\n\n            this.addElements($newElement);\n\n            delete this.modal;\n        },\n\n        /**\n         * On upload start.\n         */\n        _onUploadStart: function() {\n            this.progressBar.$progressBar.css({\n                top: Math.round(this.$container.outerHeight() / 2) - 6\n            });\n\n            this.$container.addClass('uploading');\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n        },\n\n        /**\n         * On upload progress.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadComplete: function(event, data) {\n            if (data.result.error) {\n                alert(data.result.error);\n            } else {\n                var parameters = {\n                    elementId: data.result.assetId,\n                    siteId: this.settings.criteria.siteId,\n                    size: this.settings.viewMode\n                };\n\n                Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                    if (data.error) {\n                        alert(data.error);\n                    } else {\n                        var html = $(data.html);\n                        Craft.appendHeadHtml(data.headHtml);\n                        this.selectUploadedFile(Craft.getElementInfo(html));\n                    }\n\n                    // Last file\n                    if (this.uploader.isLastUpload()) {\n                        this.progressBar.hideProgressBar();\n                        this.$container.removeClass('uploading');\n\n                        if (window.draftEditor) {\n                            window.draftEditor.checkForm();\n                        }\n                    }\n                }.bind(this));\n\n                Craft.cp.runQueue();\n            }\n        },\n\n        /**\n         * We have to take into account files about to be added as well\n         */\n        canAddMoreFiles: function(slotsTaken) {\n            return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n        },\n\n        /**\n         * Parse the passed filename into the base filename and extension.\n         *\n         * @param filename\n         * @returns {{extension: string, baseFileName: string}}\n         */\n        _parseFilename: function(filename) {\n            var parts = filename.split('.'),\n                extension = '';\n\n            if (parts.length > 1) {\n                extension = parts.pop();\n            }\n            var baseFileName = parts.join('.');\n            return {extension: extension, baseFileName: baseFileName};\n        },\n\n        /**\n         * A helper function or the filename field.\n         * @private\n         */\n        _renameHelper: function($form) {\n            $('.renameHelper', $form).on('focus', $.proxy(function(e) {\n                var input = e.currentTarget,\n                    filename = this._parseFilename(input.value);\n\n                if (this.originalFilename === '' && this.originalExtension === '') {\n                    this.originalFilename = filename.baseFileName;\n                    this.originalExtension = filename.extension;\n                }\n\n                var startPos = 0,\n                    endPos = filename.baseFileName.length;\n\n                if (typeof input.selectionStart !== 'undefined') {\n                    input.selectionStart = startPos;\n                    input.selectionEnd = endPos;\n                } else if (document.selection && document.selection.createRange) {\n                    // IE branch\n                    input.select();\n                    var range = document.selection.createRange();\n                    range.collapse(true);\n                    range.moveEnd(\"character\", endPos);\n                    range.moveStart(\"character\", startPos);\n                    range.select();\n                }\n            }, this));\n        },\n\n        resetOriginalFilename: function() {\n            this.originalFilename = \"\";\n            this.originalExtension = \"\";\n        },\n\n        validateElementForm: function() {\n            var $filenameField = $('.renameHelper', this.elementEditor.hud.$hud.data('elementEditor').$form);\n            var filename = this._parseFilename($filenameField.val());\n\n            if (filename.extension !== this.originalExtension) {\n                // Blank extension\n                if (filename.extension === '') {\n                    // If filename changed as well, assume removal of extension a mistake\n                    if (this.originalFilename !== filename.baseFileName) {\n                        $filenameField.val(filename.baseFileName + '.' + this.originalExtension);\n                        return true;\n                    } else {\n                        // If filename hasn't changed, make sure they want to remove extension\n                        return confirm(Craft.t('app', \"Are you sure you want to remove the extension “.{ext}”?\", {ext: this.originalExtension}));\n                    }\n                } else {\n                    // If the extension has changed, make sure it s intentional\n                    return confirm(Craft.t('app', \"Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?\",\n                        {\n                            oldExt: this.originalExtension,\n                            newExt: filename.extension\n                        }));\n                }\n            }\n            return true;\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend(\n    {\n        $selectTransformBtn: null,\n        _selectedTransform: null,\n\n        init: function(elementType, settings) {\n            settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n            this.base(elementType, settings);\n\n            if (settings.transforms.length) {\n                this.createSelectTransformButton(settings.transforms);\n            }\n        },\n\n        createSelectTransformButton: function(transforms) {\n            if (!transforms || !transforms.length) {\n                return;\n            }\n\n            var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n            this.$selectBtn.appendTo($btnGroup);\n\n            this.$selectTransformBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn disabled',\n                text: Craft.t('app', 'Select transform'),\n            }).appendTo($btnGroup);\n\n            var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n                $menuList = $('<ul></ul>').appendTo($menu);\n\n            for (var i = 0; i < transforms.length; i++) {\n                $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n            }\n\n            var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n                onOptionSelect: $.proxy(this, 'onSelectTransform')\n            });\n            MenuButton.disable();\n\n            this.$selectTransformBtn.data('menuButton', MenuButton);\n        },\n\n        onSelectionChange: function(ev) {\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                allowTransforms = false;\n\n            if ($selectedElements.length && this.settings.transforms.length) {\n                allowTransforms = true;\n\n                for (var i = 0; i < $selectedElements.length; i++) {\n                    if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                        break;\n                    }\n                }\n            }\n\n            var MenuBtn = null;\n\n            if (this.$selectTransformBtn) {\n                MenuBtn = this.$selectTransformBtn.data('menuButton');\n            }\n\n            if (allowTransforms) {\n                if (MenuBtn) {\n                    MenuBtn.enable();\n                }\n\n                this.$selectTransformBtn.removeClass('disabled');\n            }\n            else if (this.$selectTransformBtn) {\n                if (MenuBtn) {\n                    MenuBtn.disable();\n                }\n\n                this.$selectTransformBtn.addClass('disabled');\n            }\n\n            this.base();\n        },\n\n        onSelectTransform: function(option) {\n            var transform = $(option).data('transform');\n            this.selectImagesWithTransform(transform);\n        },\n\n        selectImagesWithTransform: function(transform) {\n            // First we must get any missing transform URLs\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n                Craft.AssetSelectorModal.transformUrls[transform] = {};\n            }\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                imageIdsWithMissingUrls = [];\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                var $item = $($selectedElements[i]),\n                    elementId = Craft.getElementInfo($item).id;\n\n                if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                    imageIdsWithMissingUrls.push(elementId);\n                }\n            }\n\n            if (imageIdsWithMissingUrls.length) {\n                this.showFooterSpinner();\n\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, $.proxy(function() {\n                    this.hideFooterSpinner();\n                    this.selectImagesWithTransform(transform);\n                }, this));\n            }\n            else {\n                this._selectedTransform = transform;\n                this.selectElements();\n                this._selectedTransform = null;\n            }\n        },\n\n        fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n            var elementId = imageIdsWithMissingUrls.pop();\n\n            var data = {\n                assetId: elementId,\n                handle: transform\n            };\n\n            Craft.postActionRequest('assets/generate-transform', data, $.proxy(function(response, textStatus) {\n                Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n                if (textStatus === 'success') {\n                    if (response.url) {\n                        Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                    }\n                }\n\n                // More to load?\n                if (imageIdsWithMissingUrls.length) {\n                    this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n                }\n                else {\n                    callback();\n                }\n            }, this));\n        },\n\n        getElementInfo: function($selectedElements) {\n            var info = this.base($selectedElements);\n\n            if (this._selectedTransform) {\n                for (var i = 0; i < info.length; i++) {\n                    var elementId = info[i].id;\n\n                    if (\n                        typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                        Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                    ) {\n                        info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                    }\n                }\n            }\n\n            return info;\n        },\n\n        onSelect: function(elementInfo) {\n            this.settings.onSelect(elementInfo, this._selectedTransform);\n        }\n    },\n    {\n        defaults: {\n            canSelectImageTransforms: false,\n            transforms: []\n        },\n\n        transformUrls: {}\n    });\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend(\n    {\n        remainingSessionTime: null,\n        checkRemainingSessionTimer: null,\n        showLoginModalTimer: null,\n        decrementLogoutWarningInterval: null,\n\n        showingLogoutWarningModal: false,\n        showingLoginModal: false,\n\n        logoutWarningModal: null,\n        loginModal: null,\n\n        $logoutWarningPara: null,\n        $passwordInput: null,\n        $passwordSpinner: null,\n        $loginBtn: null,\n        $loginErrorPara: null,\n\n        submitLoginIfLoggedOut: false,\n\n        /**\n         * Init\n         */\n        init: function() {\n            this.updateRemainingSessionTime(Craft.remainingSessionTime);\n        },\n\n        /**\n         * Sets a timer for the next time to check the auth timeout.\n         */\n        setCheckRemainingSessionTimer: function(seconds) {\n            if (this.checkRemainingSessionTimer) {\n                clearTimeout(this.checkRemainingSessionTimer);\n            }\n\n            this.checkRemainingSessionTimer = setTimeout($.proxy(this, 'checkRemainingSessionTime'), seconds * 1000);\n        },\n\n        /**\n         * Pings the server to see how many seconds are left on the current user session, and handles the response.\n         */\n        checkRemainingSessionTime: function(extendSession) {\n            $.ajax({\n                url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n                type: 'GET',\n                dataType: 'json',\n                complete: $.proxy(function(jqXHR, textStatus) {\n                    if (textStatus === 'success') {\n                        if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                            Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                        }\n\n                        this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                        this.submitLoginIfLoggedOut = false;\n                    }\n                    else {\n                        this.updateRemainingSessionTime(-1);\n                    }\n                }, this)\n            });\n        },\n\n        /**\n         * Updates our record of the auth timeout, and handles it.\n         */\n        updateRemainingSessionTime: function(remainingSessionTime) {\n            this.remainingSessionTime = parseInt(remainingSessionTime);\n\n            // Are we within the warning window?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n                // Is there still time to renew the session?\n                if (this.remainingSessionTime) {\n                    if (!this.showingLogoutWarningModal) {\n                        // Show the warning modal\n                        this.showLogoutWarningModal();\n                    }\n\n                    // Will the session expire before the next checkup?\n                    if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                        if (this.showLoginModalTimer) {\n                            clearTimeout(this.showLoginModalTimer);\n                        }\n\n                        this.showLoginModalTimer = setTimeout($.proxy(this, 'showLoginModal'), this.remainingSessionTime * 1000);\n                    }\n                }\n                else {\n                    if (this.showingLoginModal) {\n                        if (this.submitLoginIfLoggedOut) {\n                            this.submitLogin();\n                        }\n                    }\n                    else {\n                        // Show the login modal\n                        this.showLoginModal();\n                    }\n                }\n\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n            else {\n                // Everything's good!\n                this.hideLogoutWarningModal();\n                this.hideLoginModal();\n\n                // Will be be within the minSafeSessionTime before the next update?\n                if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                    this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n                }\n                else {\n                    this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n                }\n            }\n        },\n\n        /**\n         * Shows the logout warning modal.\n         */\n        showLogoutWarningModal: function() {\n            var quickShow;\n\n            if (this.showingLoginModal) {\n                this.hideLoginModal(true);\n                quickShow = true;\n            }\n            else {\n                quickShow = false;\n            }\n\n            this.showingLogoutWarningModal = true;\n\n            if (!this.logoutWarningModal) {\n                let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n                let $body = $('<div class=\"body\"/>').appendTo($form);\n                let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n                let $logoutBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Log out now'),\n                }).appendTo($buttons);\n                let $renewSessionBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Keep me logged in'),\n                }).appendTo($buttons);\n\n                this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n                this.logoutWarningModal = new Garnish.Modal($form, {\n                    autoShow: false,\n                    closeOtherModals: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                    onFadeIn: function() {\n                        if (!Garnish.isMobileBrowser(true)) {\n                            // Auto-focus the renew button\n                            setTimeout(function() {\n                                $renewSessionBtn.trigger('focus');\n                            }, 100);\n                        }\n                    }\n                });\n\n                this.addListener($logoutBtn, 'activate', 'logout');\n                this.addListener($form, 'submit', 'renewSession');\n            }\n\n            if (quickShow) {\n                this.logoutWarningModal.quickShow();\n            }\n            else {\n                this.logoutWarningModal.show();\n            }\n\n            this.updateLogoutWarningMessage();\n\n            this.decrementLogoutWarningInterval = setInterval($.proxy(this, 'decrementLogoutWarning'), 1000);\n        },\n\n        /**\n         * Updates the logout warning message indicating that the session is about to expire.\n         */\n        updateLogoutWarningMessage: function() {\n            this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n                time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n            }));\n\n            this.logoutWarningModal.updateSizeAndPosition();\n        },\n\n        decrementLogoutWarning: function() {\n            if (this.remainingSessionTime > 0) {\n                this.remainingSessionTime--;\n                this.updateLogoutWarningMessage();\n            }\n\n            if (this.remainingSessionTime === 0) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        },\n\n        /**\n         * Hides the logout warning modal.\n         */\n        hideLogoutWarningModal: function(quick) {\n            this.showingLogoutWarningModal = false;\n\n            if (this.logoutWarningModal) {\n                if (quick) {\n                    this.logoutWarningModal.quickHide();\n                }\n                else {\n                    this.logoutWarningModal.hide();\n                }\n\n                if (this.decrementLogoutWarningInterval) {\n                    clearInterval(this.decrementLogoutWarningInterval);\n                }\n            }\n        },\n\n        /**\n         * Shows the login modal.\n         */\n        showLoginModal: function() {\n            var quickShow;\n\n            if (this.showingLogoutWarningModal) {\n                this.hideLogoutWarningModal(true);\n                quickShow = true;\n            }\n            else {\n                quickShow = false;\n            }\n\n            this.showingLoginModal = true;\n\n            if (!this.loginModal) {\n                var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                    $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                    $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                    $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                    $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                    $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                    $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n                this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n                this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n                this.$loginBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit disabled',\n                    text: Craft.t('app', 'Login'),\n                }).appendTo($buttonContainer);\n                this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n                this.loginModal = new Garnish.Modal($form, {\n                    autoShow: false,\n                    closeOtherModals: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    shadeClass: 'modal-shade dark loginmodalshade',\n                    onFadeIn: $.proxy(function() {\n                        if (!Garnish.isMobileBrowser(true)) {\n                            // Auto-focus the password input\n                            setTimeout($.proxy(function() {\n                                this.$passwordInput.trigger('focus');\n                            }, this), 100);\n                        }\n                    }, this),\n                    onFadeOut: $.proxy(function() {\n                        this.$passwordInput.val('');\n                    }, this)\n                });\n\n                new Craft.PasswordInput(this.$passwordInput, {\n                    onToggleInput: $.proxy(function($newPasswordInput) {\n                        this.$passwordInput = $newPasswordInput;\n                    }, this)\n                });\n\n                this.addListener(this.$passwordInput, 'input', 'validatePassword');\n                this.addListener($form, 'submit', 'login');\n            }\n\n            if (quickShow) {\n                this.loginModal.quickShow();\n            }\n            else {\n                this.loginModal.show();\n            }\n        },\n\n        /**\n         * Hides the login modal.\n         */\n        hideLoginModal: function(quick) {\n            this.showingLoginModal = false;\n\n            if (this.loginModal) {\n                if (quick) {\n                    this.loginModal.quickHide();\n                }\n                else {\n                    this.loginModal.hide();\n                }\n            }\n        },\n\n        logout: function() {\n            $.get({\n                url: Craft.getActionUrl('users/logout'),\n                dataType: 'json',\n                success: $.proxy(function() {\n                    Craft.redirectTo('');\n                }, this)\n            });\n        },\n\n        renewSession: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            this.hideLogoutWarningModal();\n            this.checkRemainingSessionTime(true);\n        },\n\n        validatePassword: function() {\n            if (this.$passwordInput.val().length >= 6) {\n                this.$loginBtn.removeClass('disabled');\n                return true;\n            }\n            else {\n                this.$loginBtn.addClass('disabled');\n                return false;\n            }\n        },\n\n        login: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (this.validatePassword()) {\n                this.$passwordSpinner.removeClass('hidden');\n                this.clearLoginError();\n\n                if (typeof Craft.csrfTokenValue !== 'undefined') {\n                    // Check the auth status one last time before sending this off,\n                    // in case the user has already logged back in from another window/tab\n                    this.submitLoginIfLoggedOut = true;\n                    this.checkRemainingSessionTime();\n                }\n                else {\n                    this.submitLogin();\n                }\n            }\n        },\n\n        submitLogin: function() {\n            var data = {\n                loginName: Craft.username,\n                password: this.$passwordInput.val()\n            };\n\n            Craft.postActionRequest('users/login', data, $.proxy(function(response, textStatus) {\n                this.$passwordSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.hideLoginModal();\n                        this.checkRemainingSessionTime();\n                    }\n                    else {\n                        this.showLoginError(response.error);\n                        Garnish.shake(this.loginModal.$container);\n\n                        if (!Garnish.isMobileBrowser(true)) {\n                            this.$passwordInput.trigger('focus');\n                        }\n                    }\n                }\n                else {\n                    this.showLoginError();\n                }\n            }, this));\n        },\n\n        showLoginError: function(error) {\n            if (error === null || typeof error === 'undefined') {\n                error = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.$loginErrorPara.text(error);\n            this.loginModal.updateSizeAndPosition();\n        },\n\n        clearLoginError: function() {\n            this.showLoginError('');\n        }\n    },\n    {\n        checkInterval: 60,\n        minSafeSessionTime: 120\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend(\n    {\n        authManager: null,\n\n        $nav: null,\n        $mainContainer: null,\n        $alerts: null,\n        $crumbs: null,\n        $notificationContainer: null,\n        $main: null,\n        $primaryForm: null,\n        $headerContainer: null,\n        $header: null,\n        $mainContent: null,\n        $details: null,\n        $tabsContainer: null,\n        $tabsList: null,\n        $tabs: null,\n        $overflowTabBtn: null,\n        $overflowTabList: null,\n        $selectedTab: null,\n        selectedTabIndex: null,\n        $sidebarContainer: null,\n        $sidebar: null,\n        $contentContainer: null,\n        $edition: null,\n\n        $confirmUnloadForms: null,\n        $deltaForms: null,\n        $collapsibleTables: null,\n\n        fixedHeader: false,\n\n        enableQueue: true,\n        totalJobs: 0,\n        jobInfo: null,\n        displayedJobInfo: null,\n        displayedJobInfoUnchanged: 1,\n        trackJobProgressTimeout: null,\n        jobProgressIcon: null,\n\n        checkingForUpdates: false,\n        forcingRefreshOnUpdatesCheck: false,\n        includingDetailsOnUpdatesCheck: false,\n        checkForUpdatesCallbacks: null,\n\n        init: function() {\n            // Is this session going to expire?\n            if (Craft.remainingSessionTime !== 0) {\n                this.authManager = new Craft.AuthManager();\n            }\n\n            // Find all the key elements\n            this.$nav = $('#nav');\n            this.$mainContainer = $('#main-container');\n            this.$alerts = $('#alerts');\n            this.$crumbs = $('#crumbs');\n            this.$notificationContainer = $('#notifications');\n            this.$main = $('#main');\n            this.$primaryForm = $('#main-form');\n            this.$headerContainer = $('#header-container');\n            this.$header = $('#header');\n            this.$mainContent = $('#main-content');\n            this.$details = $('#details');\n            this.$sidebarContainer = $('#sidebar-container');\n            this.$sidebar = $('#sidebar');\n            this.$contentContainer = $('#content-container');\n            this.$collapsibleTables = $('table.collapsible');\n\n            this.updateSidebarMenuLabel();\n\n            // Swap any instruction text with info icons\n            let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n            for (let i = 0; i < $allInstructions.length; i++) {\n                let $instructions = $allInstructions.eq(i);\n                let $label = $instructions.siblings('.heading').children('label');\n                $('<span/>', {\n                    'class': 'info',\n                    'html': $instructions.children().html()\n                }).appendTo($label);\n                $instructions.remove();\n            }\n\n            if (this.$header.length) {\n                this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n                this.updateFixedHeader();\n            }\n\n            Garnish.$doc.ready($.proxy(function() {\n                // Update responsive tables on window resize\n                this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n                this.handleWindowResize();\n\n                // Fade the notification out two seconds after page load\n                var $errorNotifications = this.$notificationContainer.children('.error'),\n                    $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n                $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n                $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n                // Wait a frame before initializing any confirm-unload forms,\n                // so other JS that runs on ready() has a chance to initialize\n                Garnish.requestAnimationFrame($.proxy(this, 'initSpecialForms'));\n            }, this));\n\n            // Alerts\n            if (this.$alerts.length) {\n                this.initAlerts();\n            }\n\n            // Toggles\n            this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n            this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n            // Does this page have a primary form?\n            if (!this.$primaryForm.length) {\n                this.$primaryForm = $('form[data-saveshortcut]:first');\n            }\n\n            // Does the primary form support the save shortcut?\n            if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n                let shortcuts = [];\n                let actions = this.$primaryForm.data('actions');\n                if (typeof actions === 'undefined') {\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                        },\n                        {\n                            redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                            retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                        }\n                    ]);\n                } else {\n                    for (let i = 0; i < actions.length; i++) {\n                        let action = actions[i];\n                        if (!action.shortcut) {\n                            continue;\n                        }\n                        shortcuts.push([\n                            {\n                                keyCode: Garnish.S_KEY,\n                                ctrl: true,\n                                shift: !!action.shift,\n                            },\n                            {\n                                action: action.action,\n                                redirect: action.redirect,\n                                confirm: action.confirm,\n                                params: action.params,\n                                data: action.data,\n                                retainScroll: action.retainScroll,\n                            }\n                        ]);\n                    }\n                }\n                for (let i = 0; i < shortcuts.length; i++) {\n                    Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                        this.submitPrimaryForm(shortcuts[i][1]);\n                    });\n                }\n            }\n\n            this.initTabs();\n\n            // Should we match the previous scroll position?\n            let scrollY = Craft.getLocalStorage('scrollY');\n            if (typeof scrollY !== 'undefined') {\n                Craft.removeLocalStorage('scrollY');\n                Garnish.$doc.ready(() => {\n                    Garnish.requestAnimationFrame(() => {\n                        window.scrollTo(0, scrollY);\n                    });\n                });\n            }\n\n            if ($.isTouchCapable()) {\n                this.$mainContainer.on('focus', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputFocus'));\n                this.$mainContainer.on('blur', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputBlur'));\n            }\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a').each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        initSpecialForms: function() {\n            // Look for forms that we should watch for changes on\n            this.$confirmUnloadForms = $('form[data-confirm-unload]');\n            this.$deltaForms = $('form[data-delta]');\n\n            if (!this.$confirmUnloadForms.length) {\n                return;\n            }\n\n            var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n            var $form, serialized;\n\n            for (var i = 0; i < $forms.length; i++) {\n                $form = $forms.eq(i);\n                if (!$form.data('initialSerializedValue')) {\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    $form.data('initialSerializedValue', serialized);\n                }\n                this.addListener($form, 'submit', function(ev) {\n                    if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                        this.removeListener(Garnish.$win, 'beforeunload');\n                    }\n                    if (Garnish.hasAttr($form, 'data-delta')) {\n                        ev.preventDefault();\n                        var serialized;\n                        if (typeof $form.data('serializer') === 'function') {\n                            serialized = $form.data('serializer')();\n                        } else {\n                            serialized = $form.serialize();\n                        }\n                        var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                        Craft.createForm(data)\n                            .appendTo(Garnish.$bod)\n                            .submit();\n                    }\n                });\n            }\n\n            this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n                var confirmUnload = false;\n                var $form, serialized;\n                if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                    confirmUnload = true;\n                } else {\n                    for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                        $form = this.$confirmUnloadForms.eq(i);\n                        if (typeof $form.data('serializer') === 'function') {\n                            serialized = $form.data('serializer')();\n                        } else {\n                            serialized = $form.serialize();\n                        }\n                        if ($form.data('initialSerializedValue') !== serialized) {\n                            confirmUnload = true;\n                            break;\n                        }\n                    }\n                }\n\n                if (confirmUnload) {\n                    var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                    if (ev) {\n                        ev.originalEvent.returnValue = message;\n                    }\n                    else {\n                        window.event.returnValue = message;\n                    }\n\n                    return message;\n                }\n            });\n        },\n\n        _handleInputFocus: function() {\n            this.updateFixedHeader();\n        },\n\n        _handleInputBlur: function() {\n            this.updateFixedHeader();\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitPrimaryForm: function(options) {\n            // Give other stuff on the page a chance to prepare\n            this.trigger('beforeSaveShortcut');\n\n            if (typeof options !== 'object' || !$.isPlainObject(options)) {\n                options = {};\n            }\n\n            if (!options.redirect) {\n                options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n            }\n\n            if (!options.data) {\n                options.data = {};\n            }\n            options.data.saveShortcut = true;\n\n            Craft.submitForm(this.$primaryForm, options);\n        },\n\n        updateSidebarMenuLabel: function() {\n            var $item = this.$sidebar.find('a.sel:first');\n            var $label = $item.children('.label');\n            $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n            Garnish.$bod.removeClass('showing-sidebar');\n        },\n\n        toggleNav: function() {\n            Garnish.$bod.toggleClass('showing-nav');\n        },\n\n        toggleSidebar: function() {\n            Garnish.$bod.toggleClass('showing-sidebar');\n        },\n\n        initTabs: function() {\n            // Clear out all our old info in case the tabs were just replaced\n            this.$tabsList = this.$tabs = this.$overflowTabBtn = this.$overflowTabList = this.$selectedTab =\n                this.selectedTabIndex = null;\n\n            this.$tabsContainer = $('#tabs');\n            if (!this.$tabsContainer.length) {\n                this.$tabsContainer = null;\n                return;\n            }\n\n            this.$tabsList = this.$tabsContainer.find('> ul');\n            this.$tabs = this.$tabsList.find('> li');\n            this.$overflowTabBtn = $('#overflow-tab-btn');\n            if (!this.$overflowTabBtn.data('menubtn')) {\n                new Garnish.MenuBtn(this.$overflowTabBtn);\n            }\n            this.$overflowTabList = this.$overflowTabBtn.data('menubtn').menu.$container.find('> ul');\n            var i, $tab, $a, href;\n\n            for (i = 0; i < this.$tabs.length; i++) {\n                $tab = this.$tabs.eq(i);\n\n                // Does it link to an anchor?\n                $a = $tab.children('a');\n                href = $a.attr('href');\n                if (href && href.charAt(0) === '#') {\n                    this.addListener($a, 'click', function(ev) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    });\n\n                    if (encodeURIComponent(href.substr(1)) === document.location.hash.substr(1)) {\n                        this.selectTab($a);\n                    }\n                }\n\n                if (!this.$selectedTab && $a.hasClass('sel')) {\n                    this._selectTab($a, i);\n                }\n            }\n        },\n\n        selectTab: function(tab) {\n            var $tab = $(tab);\n\n            if (this.$selectedTab) {\n                if (this.$selectedTab.get(0) === $tab.get(0)) {\n                    return;\n                }\n                this.deselectTab();\n            }\n\n            $tab.addClass('sel');\n            var href = $tab.attr('href')\n            $(href).removeClass('hidden');\n            if (typeof history !== 'undefined') {\n                history.replaceState(undefined, undefined, href);\n            }\n            this._selectTab($tab, this.$tabs.index($tab.parent()));\n            this.updateTabs();\n            this.$overflowTabBtn.data('menubtn').menu.hide();\n        },\n\n        _selectTab: function($tab, index) {\n            if ($tab === this.$selectedTab) {\n                return;\n            }\n\n            this.$selectedTab = $tab;\n            this.selectedTabIndex = index;\n            if (index === 0) {\n                $('#content').addClass('square');\n            } else {\n                $('#content').removeClass('square');\n            }\n\n            Garnish.$win.trigger('resize');\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n\n            // If there is a revision menu, set its links to this tab ID\n            let href = $tab && $tab.attr('href');\n            if (href && href.charAt(0) === '#') {\n                let menubtn = $('#context-btn').menubtn().data('menubtn');\n                if (menubtn) {\n                    for (let i = 0; i < menubtn.menu.$options.length; i++) {\n                        let a = menubtn.menu.$options[i];\n                        if (a.href) {\n                            a.href = a.href.match(/^[^#]*/)[0] + href;\n                        }\n                    }\n                }\n            }\n        },\n\n        deselectTab: function() {\n            if (!this.$selectedTab) {\n                return;\n            }\n\n            this.$selectedTab.removeClass('sel');\n            if (this.$selectedTab.attr('href').charAt(0) === '#') {\n                $(this.$selectedTab.attr('href')).addClass('hidden');\n            }\n            this._selectTab(null, null);\n        },\n\n        handleWindowResize: function() {\n            this.updateTabs();\n            this.updateResponsiveTables();\n        },\n\n        updateTabs: function() {\n            if (!this.$tabsContainer) {\n                return;\n            }\n\n            var maxWidth = Math.floor(this.$tabsContainer.width()) - 40;\n            var totalWidth = 0;\n            var showOverflowMenu = false;\n            var tabMargin = Garnish.$bod.width() >= 768 ? -12 : -7;\n            var $tab;\n\n            // Start with the selected tab, because that needs to be visible\n            if (this.$selectedTab) {\n                this.$selectedTab.parent('li').appendTo(this.$tabsList);\n                totalWidth = Math.ceil(this.$selectedTab.parent('li').width());\n            }\n\n            for (var i = 0; i < this.$tabs.length; i++) {\n                $tab = this.$tabs.eq(i).appendTo(this.$tabsList);\n                if (i !== this.selectedTabIndex) {\n                    totalWidth += Math.ceil($tab.width());\n                    // account for the negative margin\n                    if (i !== 0 || this.$selectedTab) {\n                        totalWidth += tabMargin;\n                    }\n                }\n\n                if (i === this.selectedTabIndex || totalWidth <= maxWidth) {\n                    $tab.find('> a').removeAttr('role');\n                } else {\n                    $tab.appendTo(this.$overflowTabList).find('> a').attr('role', 'option');\n                    showOverflowMenu = true;\n                }\n            }\n\n            if (showOverflowMenu) {\n                this.$overflowTabBtn.removeClass('hidden');\n            } else {\n                this.$overflowTabBtn.addClass('hidden');\n            }\n        },\n\n        updateResponsiveTables: function() {\n            for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n                this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n                this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n                this.updateResponsiveTables._check = false;\n\n                if (this.updateResponsiveTables._containerWidth > 0) {\n                    // Is this the first time we've checked this table?\n                    if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                        this.updateResponsiveTables._check = true;\n                    }\n                    else {\n                        this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                        // Getting wider?\n                        if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                            if (this.updateResponsiveTables._isCollapsed) {\n                                this.updateResponsiveTables._$table.removeClass('collapsed');\n                                this.updateResponsiveTables._check = true;\n                            }\n                        }\n                        else if (!this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._check = true;\n                        }\n                    }\n\n                    // Are we checking the table width?\n                    if (this.updateResponsiveTables._check) {\n                        if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                            this.updateResponsiveTables._$table.addClass('collapsed');\n                        }\n                    }\n\n                    // Remember the container width for next time\n                    this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n                }\n            }\n        },\n\n        updateFixedHeader: function() {\n            // Have we scrolled passed the top of #main?\n            if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n                if (!this.fixedHeader) {\n                    var headerHeight = this.$headerContainer.height();\n\n                    // Hard-set the minimum content container height\n                    this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                    // Hard-set the header container height\n                    this.$headerContainer.height(headerHeight);\n                    Garnish.$bod.addClass('fixed-header');\n\n                    // Fix the sidebar and details pane positions if they are taller than #content-container\n                    var contentHeight = this.$contentContainer.outerHeight();\n                    var $detailsHeight = this.$details.outerHeight();\n                    var css = {\n                        top: headerHeight + 'px',\n                        'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                    };\n                    this.$sidebar.addClass('fixed').css(css);\n                    this.$details.addClass('fixed').css(css);\n                    this.fixedHeader = true;\n                }\n            }\n            else if (this.fixedHeader) {\n                this.$headerContainer.height('auto');\n                Garnish.$bod.removeClass('fixed-header');\n                this.$contentContainer.css('min-height', '');\n                this.$sidebar.removeClass('fixed').css({\n                    top: '',\n                    'max-height': ''\n                });\n                this.$details.removeClass('fixed').css({\n                    top: '',\n                    'max-height': ''\n                });\n                this.fixedHeader = false;\n            }\n        },\n\n        /**\n         * Dispays a notification.\n         *\n         * @param {string} type\n         * @param {string} message\n         */\n        displayNotification: function(type, message) {\n            var notificationDuration = Craft.CP.notificationDuration;\n\n            if (type === 'error') {\n                notificationDuration *= 2;\n            }\n\n            var $notification = $('<div class=\"notification ' + type + '\">' + message + '</div>')\n                .appendTo(this.$notificationContainer);\n\n            var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n            $notification\n                .hide()\n                .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n                .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n                .delay(notificationDuration)\n                .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                    complete: function() {\n                        $notification.remove();\n                    }\n                });\n\n            this.trigger('displayNotification', {\n                notificationType: type,\n                message: message\n            });\n        },\n\n        /**\n         * Displays a notice.\n         *\n         * @param {string} message\n         */\n        displayNotice: function(message) {\n            this.displayNotification('notice', message);\n        },\n\n        /**\n         * Displays an error.\n         *\n         * @param {string} message\n         */\n        displayError: function(message) {\n            if (!message) {\n                message = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.displayNotification('error', message);\n        },\n\n        fetchAlerts: function() {\n            var data = {\n                path: Craft.path\n            };\n\n            Craft.queueActionRequest('app/get-cp-alerts', data, $.proxy(this, 'displayAlerts'));\n        },\n\n        displayAlerts: function(alerts) {\n            this.$alerts.remove();\n\n            if (Garnish.isArray(alerts) && alerts.length) {\n                this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n                for (var i = 0; i < alerts.length; i++) {\n                    $('<li>' + alerts[i] + '</li>').appendTo(this.$alerts);\n                }\n\n                var height = this.$alerts.outerHeight();\n                this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n                this.initAlerts();\n            }\n        },\n\n        initAlerts: function() {\n            // Are there any shunnable alerts?\n            var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n            for (var i = 0; i < $shunnableAlerts.length; i++) {\n                this.addListener($shunnableAlerts[i], 'click', $.proxy(function(ev) {\n                    ev.preventDefault();\n\n                    var $link = $(ev.currentTarget);\n\n                    var data = {\n                        message: $link.prop('className').substr(5)\n                    };\n\n                    Craft.queueActionRequest('app/shun-cp-alert', data, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            if (response.success) {\n                                $link.parent().remove();\n                            }\n                            else {\n                                this.displayError(response.error);\n                            }\n                        }\n                    }, this));\n                }, this));\n            }\n        },\n\n        checkForUpdates: function(forceRefresh, includeDetails, callback) {\n            // Make 'includeDetails' optional\n            if (typeof includeDetails === 'function') {\n                callback = includeDetails;\n                includeDetails = false;\n            }\n\n            // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n            // then just set a new callback that re-checks for updates when the current one is done.\n            if (this.checkingForUpdates && (\n                (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n                (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n            )) {\n                var realCallback = callback;\n\n                callback = function() {\n                    this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n                }.bind(this);\n            }\n\n            // Callback function?\n            if (typeof callback === 'function') {\n                if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                    this.checkForUpdatesCallbacks = [];\n                }\n\n                this.checkForUpdatesCallbacks.push(callback);\n            }\n\n            if (!this.checkingForUpdates) {\n                this.checkingForUpdates = true;\n                this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n                this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n                this._checkForUpdates(forceRefresh, includeDetails)\n                    .then(function(info) {\n                        this.updateUtilitiesBadge();\n                        this.checkingForUpdates = false;\n\n                        if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                            var callbacks = this.checkForUpdatesCallbacks;\n                            this.checkForUpdatesCallbacks = null;\n\n                            for (var i = 0; i < callbacks.length; i++) {\n                                callbacks[i](info);\n                            }\n                        }\n\n                        this.trigger('checkForUpdates', {\n                            updateInfo: info\n                        });\n                    }.bind(this));\n            }\n        },\n\n        _checkForUpdates: function(forceRefresh, includeDetails) {\n            return new Promise(function(resolve, reject) {\n                if (!forceRefresh) {\n                    this._checkForCachedUpdates(includeDetails)\n                        .then(function(info) {\n                            if (info.cached !== false) {\n                                resolve(info);\n                            }\n\n                            this._getUpdates(includeDetails)\n                                .then(function(info) {\n                                    resolve(info);\n                                });\n                        }.bind(this));\n                } else {\n                    this._getUpdates(includeDetails)\n                        .then(function(info) {\n                            resolve(info);\n                        });\n                }\n            }.bind(this));\n        },\n\n        _checkForCachedUpdates: function(includeDetails) {\n            return new Promise(function(resolve, reject) {\n                var data = {\n                    onlyIfCached: true,\n                    includeDetails: includeDetails,\n                };\n                Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                    if (textStatus === 'success') {\n                        resolve(info);\n                    } else {\n                        resolve({ cached: false });\n                    }\n                });\n            });\n        },\n\n        _getUpdates: function(includeDetails) {\n            return new Promise(function(resolve, reject) {\n                Craft.sendApiRequest('GET', 'updates')\n                    .then(function(updates) {\n                        this._cacheUpdates(updates, includeDetails).then(resolve);\n                    }.bind(this))\n                    .catch(function(e) {\n                        this._cacheUpdates({}).then(resolve);\n                    }.bind(this));\n            }.bind(this));\n        },\n\n        _cacheUpdates: function(updates, includeDetails) {\n            return new Promise(function(resolve, reject) {\n                Craft.postActionRequest('app/cache-updates', {\n                    updates: updates,\n                    includeDetails: includeDetails,\n                }, function(info, textStatus) {\n                    if (textStatus === 'success') {\n                        resolve(info);\n                    } else {\n                        reject();\n                    }\n                }, {\n                    contentType: 'json'\n                });\n            });\n        },\n\n        updateUtilitiesBadge: function() {\n            var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n            // Ignore if there is no (non-selected) Utilities nav item\n            if (!$utilitiesLink.length) {\n                return;\n            }\n\n            Craft.queueActionRequest('app/get-utilities-badge-count', $.proxy(function(response) {\n                // Get the existing utility nav badge, if any\n                var $badge = $utilitiesLink.children('.badge');\n\n                if (response.badgeCount) {\n                    if (!$badge.length) {\n                        $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                    }\n                    $badge.text(response.badgeCount);\n                } else if ($badge.length) {\n                    $badge.remove();\n                }\n            }, this));\n        },\n\n        runQueue: function() {\n            if (!this.enableQueue) {\n                return;\n            }\n\n            if (Craft.runQueueAutomatically) {\n                Craft.queueActionRequest('queue/run', $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.trackJobProgress(false, true);\n                    }\n                }, this));\n            }\n            else {\n                this.trackJobProgress(false, true);\n            }\n        },\n\n        trackJobProgress: function(delay, force) {\n            if (force && this.trackJobProgressTimeout) {\n                clearTimeout(this.trackJobProgressTimeout);\n                this.trackJobProgressTimeout = null;\n            }\n\n            // Ignore if we're already tracking jobs, or the queue is disabled\n            if (this.trackJobProgressTimeout || !this.enableQueue) {\n                return;\n            }\n\n            if (delay === true) {\n                // Determine the delay based on how long the displayed job info has remained unchanged\n                var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n                this.trackJobProgressTimeout = setTimeout($.proxy(this, '_trackJobProgressInternal'), timeout);\n            } else {\n                this._trackJobProgressInternal();\n            }\n        },\n\n        _trackJobProgressInternal: function() {\n            Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.trackJobProgressTimeout = null;\n                    this.totalJobs = response.total;\n                    this.setJobInfo(response.jobs);\n\n                    if (this.jobInfo.length) {\n                        // Check again after a delay\n                        this.trackJobProgress(true);\n                    }\n                }\n            }, this));\n        },\n\n        setJobInfo: function(jobInfo) {\n            if (!this.enableQueue) {\n                return;\n            }\n\n            this.jobInfo = jobInfo;\n\n            // Update the displayed job info\n            var oldInfo = this.displayedJobInfo;\n            this.displayedJobInfo = this.getDisplayedJobInfo();\n\n            // Same old same old?\n            if (\n                oldInfo &&\n                this.displayedJobInfo &&\n                oldInfo.id === this.displayedJobInfo.id &&\n                oldInfo.progress === this.displayedJobInfo.progress &&\n                oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n                oldInfo.status === this.displayedJobInfo.status\n            ) {\n                this.displayedJobInfoUnchanged++;\n            } else {\n                // Reset the counter\n                this.displayedJobInfoUnchanged = 1;\n            }\n\n            this.updateJobIcon();\n\n            // Fire a setJobInfo event\n            this.trigger('setJobInfo');\n        },\n\n        /**\n         * Returns info for the job that should be displayed in the CP sidebar\n         */\n        getDisplayedJobInfo: function() {\n            if (!this.enableQueue) {\n                return null;\n            }\n\n            // Set the status preference order\n            var statuses = [\n                Craft.CP.JOB_STATUS_RESERVED,\n                Craft.CP.JOB_STATUS_FAILED,\n                Craft.CP.JOB_STATUS_WAITING\n            ];\n\n            for (var i = 0; i < statuses.length; i++) {\n                for (var j = 0; j < this.jobInfo.length; j++) {\n                    if (this.jobInfo[j].status === statuses[i]) {\n                        return this.jobInfo[j];\n                    }\n                }\n            }\n        },\n\n        updateJobIcon: function() {\n            if (!this.enableQueue || !this.$nav.length) {\n                return;\n            }\n\n            if (this.displayedJobInfo) {\n                if (!this.jobProgressIcon) {\n                    this.jobProgressIcon = new JobProgressIcon();\n                }\n\n                if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                    this.jobProgressIcon.hideFailMode();\n                    this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                    this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n                }\n                else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                    this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n                }\n            }\n            else {\n                if (this.jobProgressIcon) {\n                    this.jobProgressIcon.hideFailMode();\n                    this.jobProgressIcon.complete();\n                    delete this.jobProgressIcon;\n                }\n            }\n        },\n\n        /**\n         * Returns the active site for the control panel\n         *\n         * @return {number}\n         */\n        getSiteId: function() {\n            // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n            let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n            if (typeof siteId !== 'undefined') {\n                Craft.removeLocalStorage('BaseElementIndex.siteId');\n                this.setSiteId(siteId);\n                return siteId;\n            }\n            return Craft.getCookie('siteId');\n        },\n\n        /**\n         * Sets the active site for the control panel\n         * @param {number} siteId\n         */\n        setSiteId: function(siteId) {\n            Craft.setCookie('siteId', siteId, {\n                maxAge: 31536000 // 1 year\n            });\n        }\n    },\n    {\n        //maxWidth: 1051, //1024,\n        notificationDuration: 2000,\n\n        JOB_STATUS_WAITING: 1,\n        JOB_STATUS_RESERVED: 2,\n        JOB_STATUS_DONE: 3,\n        JOB_STATUS_FAILED: 4\n    });\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend(\n    {\n        $li: null,\n        $a: null,\n        $label: null,\n        $progressLabel: null,\n\n        progress: null,\n        failMode: false,\n\n        _$bgCanvas: null,\n        _$staticCanvas: null,\n        _$hoverCanvas: null,\n        _$failCanvas: null,\n\n        _staticCtx: null,\n        _hoverCtx: null,\n        _canvasSize: null,\n        _arcPos: null,\n        _arcRadius: null,\n        _lineWidth: null,\n\n        _arcStartPos: 0,\n        _arcEndPos: 0,\n        _arcStartStepSize: null,\n        _arcEndStepSize: null,\n        _arcStep: null,\n        _arcStepTimeout: null,\n        _arcAnimateCallback: null,\n\n        _progressBar: null,\n\n        init: function() {\n            this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n            this.$a = $('<a/>', {\n                id: 'job-icon',\n                href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n            }).appendTo(this.$li);\n            this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n            var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n            this.$label = $('<span/>').appendTo($labelContainer);\n            this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n            let m = (window.devicePixelRatio > 1 ? 2 : 1);\n            this._canvasSize = 18 * m;\n            this._arcPos = this._canvasSize / 2;\n            this._arcRadius = 7 * m;\n            this._lineWidth = 3 * m;\n\n            this._$bgCanvas = this._createCanvas('bg', '#61666b');\n            this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n            this._$hoverCanvas = this._createCanvas('hover', '#fff');\n            this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n            this._staticCtx = this._$staticCanvas[0].getContext('2d');\n            this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n            this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n            this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n        },\n\n        setDescription: function(description, progressLabel) {\n            this.$a.attr('title', description);\n            this.$label.text(description);\n            if (progressLabel) {\n                this.$progressLabel.text(progressLabel).show();\n            } else {\n                this.$progressLabel.hide();\n            }\n        },\n\n        setProgress: function(progress) {\n            if (progress == 0) {\n                this._$staticCanvas.hide();\n                this._$hoverCanvas.hide();\n            } else {\n                this._$staticCanvas.show();\n                this._$hoverCanvas.show();\n                if (this.progress && progress > this.progress) {\n                    this._animateArc(0, progress / 100);\n                }\n                else {\n                    this._setArc(0, progress / 100);\n                }\n            }\n\n            this.progress = progress;\n        },\n\n        complete: function() {\n            this._animateArc(0, 1, $.proxy(function() {\n                this._$bgCanvas.velocity('fadeOut');\n\n                this._animateArc(1, 1, $.proxy(function() {\n                    this.$a.remove();\n                    this.destroy();\n                }, this));\n            }, this));\n        },\n\n        showFailMode: function(message) {\n            if (this.failMode) {\n                return;\n            }\n\n            this.failMode = true;\n            this.progress = null;\n\n            this._$bgCanvas.hide();\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n            this._$failCanvas.show();\n\n            this.setDescription(message);\n        },\n\n        hideFailMode: function() {\n            if (!this.failMode) {\n                return;\n            }\n\n            this.failMode = false;\n\n            this._$bgCanvas.show();\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            this._$failCanvas.hide();\n        },\n\n        _createCanvas: function(id, color) {\n            var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n                ctx = $canvas[0].getContext('2d');\n\n            ctx.strokeStyle = color;\n            ctx.lineWidth = this._lineWidth;\n            ctx.lineCap = 'round';\n            return $canvas;\n        },\n\n        _setArc: function(startPos, endPos) {\n            this._arcStartPos = startPos;\n            this._arcEndPos = endPos;\n\n            this._drawArc(this._staticCtx, startPos, endPos);\n            this._drawArc(this._hoverCtx, startPos, endPos);\n        },\n\n        _drawArc: function(ctx, startPos, endPos) {\n            ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n            ctx.beginPath();\n            ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n            ctx.stroke();\n            ctx.closePath();\n        },\n\n        _animateArc: function(targetStartPos, targetEndPos, callback) {\n            if (this._arcStepTimeout) {\n                clearTimeout(this._arcStepTimeout);\n            }\n\n            this._arcStep = 0;\n            this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n            this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n            this._arcAnimateCallback = callback;\n            this._takeNextArcStep();\n        },\n\n        _takeNextArcStep: function() {\n            this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n            this._arcStep++;\n\n            if (this._arcStep < 10) {\n                this._arcStepTimeout = setTimeout($.proxy(this, '_takeNextArcStep'), 50);\n            }\n            else if (this._arcAnimateCallback) {\n                this._arcAnimateCallback();\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend(\n    {\n        editableGroups: null,\n        $newCategoryBtnGroup: null,\n        $newCategoryBtn: null,\n\n        init: function(elementType, $container, settings) {\n            this.on('selectSource', $.proxy(this, 'updateButton'));\n            this.on('selectSite', $.proxy(this, 'updateButton'));\n            this.base(elementType, $container, settings);\n        },\n\n        afterInit: function() {\n            // Find which of the visible groups the user has permission to create new categories in\n            this.editableGroups = [];\n\n            for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n                var group = Craft.editableCategoryGroups[i];\n\n                if (this.getSourceByKey('group:' + group.uid)) {\n                    this.editableGroups.push(group);\n                }\n            }\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific category group in the URL?\n            if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultGroupHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        updateButton: function() {\n            if (!this.$source) {\n                return;\n            }\n\n            // Get the handle of the selected source\n            var selectedSourceHandle = this.$source.data('handle');\n\n            var i, href, label;\n\n            // Update the New Category button\n            // ---------------------------------------------------------------------\n\n            if (this.editableGroups.length) {\n                // Remove the old button, if there is one\n                if (this.$newCategoryBtnGroup) {\n                    this.$newCategoryBtnGroup.remove();\n                }\n\n                // Determine if they are viewing a group that they have permission to create categories in\n                var selectedGroup;\n\n                if (selectedSourceHandle) {\n                    for (i = 0; i < this.editableGroups.length; i++) {\n                        if (this.editableGroups[i].handle === selectedSourceHandle) {\n                            selectedGroup = this.editableGroups[i];\n                            break;\n                        }\n                    }\n                }\n\n                this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n                var $menuBtn;\n\n                // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n                // Otherwise only show a menu button\n                if (selectedGroup) {\n                    href = this._getGroupTriggerHref(selectedGroup);\n                    label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                    this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                    if (this.settings.context !== 'index') {\n                        this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                            this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                        });\n                    }\n\n                    if (this.editableGroups.length > 1) {\n                        $menuBtn = $('<button/>', {\n                            type: 'button',\n                            class: 'btn submit menubtn',\n                        }).appendTo(this.$newCategoryBtnGroup);\n                    }\n                }\n                else {\n                    this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit add icon menubtn',\n                        text: Craft.t('app', 'New category'),\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n\n                if ($menuBtn) {\n                    var menuHtml = '<div class=\"menu\"><ul>';\n\n                    for (i = 0; i < this.editableGroups.length; i++) {\n                        var group = this.editableGroups[i];\n\n                        if (this.settings.context === 'index' || group !== selectedGroup) {\n                            href = this._getGroupTriggerHref(group);\n                            label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                            menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                        }\n                    }\n\n                    menuHtml += '</ul></div>';\n\n                    $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                    var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                    if (this.settings.context !== 'index') {\n                        menuBtn.on('optionSelect', $.proxy(function(ev) {\n                            this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                        }, this));\n                    }\n                }\n\n                this.addButton(this.$newCategoryBtnGroup);\n            }\n\n            // Update the URL if we're on the Categories index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'categories';\n\n                if (selectedSourceHandle) {\n                    uri += '/' + selectedSourceHandle;\n                }\n\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n        },\n\n        _getGroupTriggerHref: function(group) {\n            if (this.settings.context === 'index') {\n                var uri = 'categories/' + group.handle + '/new';\n                if (this.siteId && this.siteId != Craft.primarySiteId) {\n                    for (var i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == this.siteId) {\n                            uri += '/'+Craft.sites[i].handle;\n                        }\n                    }\n                }\n                return 'href=\"' + Craft.getUrl(uri) + '\"';\n            }\n            else {\n                return 'data-id=\"' + group.id + '\"';\n            }\n        },\n\n        _openCreateCategoryModal: function(groupId) {\n            if (this.$newCategoryBtn.hasClass('loading')) {\n                return;\n            }\n\n            // Find the group\n            var group;\n\n            for (var i = 0; i < this.editableGroups.length; i++) {\n                if (this.editableGroups[i].id == groupId) {\n                    group = this.editableGroups[i];\n                    break;\n                }\n            }\n\n            if (!group) {\n                return;\n            }\n\n            this.$newCategoryBtn.addClass('inactive');\n            var newCategoryBtnText = this.$newCategoryBtn.text();\n            this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n            Craft.createElementEditor(this.elementType, {\n                hudTrigger: this.$newCategoryBtnGroup,\n                siteId: this.siteId,\n                attributes: {\n                    groupId: groupId\n                },\n                onBeginLoading: $.proxy(function() {\n                    this.$newCategoryBtn.addClass('loading');\n                }, this),\n                onEndLoading: $.proxy(function() {\n                    this.$newCategoryBtn.removeClass('loading');\n                }, this),\n                onHideHud: $.proxy(function() {\n                    this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n                }, this),\n                onSaveElement: $.proxy(function(response) {\n                    // Make sure the right group is selected\n                    var groupSourceKey = 'group:' + group.uid;\n\n                    if (this.sourceKey !== groupSourceKey) {\n                        this.selectSourceByKey(groupSourceKey);\n                    }\n\n                    this.selectElementAfterUpdate(response.id);\n                    this.updateElements();\n                }, this)\n            });\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        setSettings: function() {\n            this.base.apply(this, arguments);\n            this.settings.sortable = false;\n        },\n\n        getModalSettings: function() {\n            var settings = this.base();\n            settings.hideOnSelect = false;\n            return settings;\n        },\n\n        getElements: function() {\n            return this.$elementsContainer.find('.element');\n        },\n\n        onModalSelect: function(elements) {\n            // Disable the modal\n            this.modal.disable();\n            this.modal.disableCancelBtn();\n            this.modal.disableSelectBtn();\n            this.modal.showFooterSpinner();\n\n            // Get the new category HTML\n            var selectedCategoryIds = this.getSelectedElementIds();\n\n            for (var i = 0; i < elements.length; i++) {\n                selectedCategoryIds.push(elements[i].id);\n            }\n\n            var data = {\n                categoryIds: selectedCategoryIds,\n                siteId: elements[0].siteId,\n                id: this.settings.id,\n                name: this.settings.name,\n                branchLimit: this.settings.branchLimit,\n                selectionLabel: this.settings.selectionLabel\n            };\n\n            Craft.postActionRequest('elements/get-categories-input-html', data, $.proxy(function(response, textStatus) {\n                this.modal.enable();\n                this.modal.enableCancelBtn();\n                this.modal.enableSelectBtn();\n                this.modal.hideFooterSpinner();\n\n                if (textStatus === 'success') {\n                    var $newInput = $(response.html),\n                        $newElementsContainer = $newInput.children('.elements');\n\n                    this.$elementsContainer.replaceWith($newElementsContainer);\n                    this.$elementsContainer = $newElementsContainer;\n                    this.resetElements();\n\n                    var filteredElements = [];\n\n                    for (var i = 0; i < elements.length; i++) {\n                        var element = elements[i],\n                            $element = this.getElementById(element.id);\n\n                        if ($element) {\n                            this.animateElementIntoPlace(element.$element, $element);\n                            filteredElements.push(element);\n                        }\n                    }\n\n                    this.updateDisabledElementsInModal();\n                    this.modal.hide();\n                    this.onSelectElements(filteredElements);\n                }\n            }, this));\n        },\n\n        removeElement: function($element) {\n            // Find any descendants this category might have\n            var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n            // Remove our record of them all at once\n            this.removeElements($allCategories);\n\n            // Animate them away one at a time\n            for (var i = 0; i < $allCategories.length; i++) {\n                this._animateCategoryAway($allCategories, i);\n            }\n        },\n\n        _animateCategoryAway: function($allCategories, i) {\n            var callback;\n\n            // Is this the last one?\n            if (i === $allCategories.length - 1) {\n                callback = $.proxy(function() {\n                    var $li = $allCategories.first().parent().parent(),\n                        $ul = $li.parent();\n\n                    if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                        $li.remove();\n                    }\n                    else {\n                        $ul.remove();\n                    }\n                }, this);\n            }\n\n            var func = $.proxy(function() {\n                this.animateElementAway($allCategories.eq(i), callback);\n            }, this);\n\n            if (i === 0) {\n                func();\n            }\n            else {\n                setTimeout(func, 100 * i);\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend(\n    {\n        columns: null,\n        rows: null,\n\n        init: function(data) {\n            let columns = data.columns;\n            let rows = data.rows;\n\n            rows.forEach($.proxy(function(d) {\n                $.each(d, function(cellIndex) {\n                    var column = columns[cellIndex];\n\n                    var parseTime;\n\n                    switch (column.type) {\n                        case 'date':\n                            parseTime = d3.timeParse(\"%Y-%m-%d\");\n                            d[cellIndex] = parseTime(d[cellIndex]);\n                            break;\n\n                        case 'datetime':\n                            parseTime = d3.timeParse(\"%Y-%m-%d %H:00:00\");\n                            d[cellIndex] = parseTime(d[cellIndex]);\n                            break;\n\n                        case 'percent':\n                            d[cellIndex] = d[cellIndex] / 100;\n                            break;\n\n                        case 'number':\n                            d[cellIndex] = +d[cellIndex];\n                            break;\n\n                        default:\n                        // do nothing\n                    }\n                });\n            }, this));\n\n            this.columns = columns;\n            this.rows = rows;\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend(\n    {\n        $container: null,\n        $tip: null,\n\n        init: function($container) {\n            this.$container = $container;\n\n            this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n            this.hide();\n        },\n\n        setContent: function(html) {\n            this.$tip.html(html);\n        },\n\n        setPosition: function(position) {\n            this.$tip.css(\"left\", position.left + \"px\");\n            this.$tip.css(\"top\", position.top + \"px\");\n        },\n\n        show: function() {\n            this.$tip.css(\"display\", 'block');\n        },\n\n        hide: function() {\n            this.$tip.css(\"display\", 'none');\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend(\n    {\n        $container: null,\n        $chart: null,\n\n        chartBaseClass: 'cp-chart',\n        dataTable: null,\n\n        formatLocale: null,\n        timeFormatLocale: null,\n        orientation: null,\n\n        svg: null,\n        width: null,\n        height: null,\n\n        init: function(container, settings) {\n            this.$container = container;\n\n            this.setSettings(Craft.charts.BaseChart.defaults);\n            this.setSettings(settings);\n\n            var globalSettings = {\n                formats: window.d3Formats,\n                formatLocaleDefinition: window.d3FormatLocaleDefinition,\n                timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n            };\n\n            this.setSettings(globalSettings);\n\n            d3.select(window).on('resize', $.proxy(function() {\n                this.resize();\n            }, this));\n        },\n\n        setSettings: function(settings, defaults) {\n            var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n            this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n        },\n\n        draw: function(dataTable, settings) {\n            // Settings and chart attributes\n\n            this.setSettings(settings);\n\n            this.dataTable = dataTable;\n            this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n            this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n            this.orientation = this.settings.orientation;\n\n\n            // Set (or reset) the chart element\n\n            if (this.$chart) {\n                this.$chart.remove();\n            }\n\n            var className = this.chartBaseClass;\n\n            if (this.settings.chartClass) {\n                className += ' ' + this.settings.chartClass;\n            }\n\n            this.$chart = $('<div class=\"' + className + '\" />').appendTo(this.$container);\n        },\n\n        resize: function() {\n            this.draw(this.dataTable, this.settings);\n        },\n\n        onAfterDrawTicks: function() {\n            // White border for ticks' text\n            $('.tick', this.$chart).each(function(tickKey, tick) {\n                var $tickText = $('text', tick);\n\n                var $clone = $tickText.clone();\n                $clone.appendTo(tick);\n\n                $tickText.attr('stroke', '#ffffff');\n                $tickText.attr('stroke-width', 3);\n            });\n        }\n    },\n    {\n        defaults: {\n            formatLocaleDefinition: null,\n            timeFormatLocaleDefinition: null,\n            formats: {\n                numberFormat: ',.2f',\n                percentFormat: ',.2%',\n                currencyFormat: '$,.2f',\n                shortDateFormats: {\n                    day: \"%-m/%-d\",\n                    month: \"%-m/%y\",\n                    year: \"%Y\"\n                }\n            },\n            margin: {top: 0, right: 0, bottom: 0, left: 0},\n            chartClass: null,\n            colors: [\"#0594D1\", \"#DE3800\", \"#FF9A00\", \"#009802\", \"#9B009B\"]\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend(\n    {\n        tip: null,\n        drawingArea: null,\n\n        init: function(container, settings) {\n            this.base(container, Craft.charts.Area.defaults);\n\n            this.setSettings(settings);\n        },\n\n        draw: function(dataTable, settings) {\n            this.base(dataTable, settings);\n\n            if (this.tip) {\n                this.tip = null;\n            }\n\n            var margin = this.getChartMargin();\n\n            this.width = this.$chart.width() - margin.left - margin.right;\n            this.height = this.$chart.height() - margin.top - margin.bottom;\n\n\n            // Append SVG to chart element\n\n            var svg = {\n                width: this.width + (margin.left + margin.right),\n                height: this.height + (margin.top + margin.bottom),\n                translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n                translateY: margin.top\n            };\n\n            this.svg = d3.select(this.$chart.get(0)).append(\"svg\")\n                .attr(\"width\", svg.width)\n                .attr(\"height\", svg.height);\n\n            this.drawingArea = this.svg.append(\"g\")\n                .attr(\"transform\", \"translate(\" + svg.translateX + \",\" + svg.translateY + \")\");\n\n\n            // Draw elements\n\n            this.drawTicks();\n            this.drawAxes();\n            this.drawChart();\n            this.drawTipTriggers();\n        },\n\n        drawTicks: function() {\n            // Draw X ticks\n\n            var x = this.getX(true);\n            var xTicks = 3;\n            var xAxis = d3.axisBottom(x)\n                .tickFormat(this.getXFormatter())\n                .ticks(xTicks);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"x ticks-axis\")\n                .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                .call(xAxis);\n\n\n            // Draw Y ticks\n\n            var y = this.getY();\n            var yTicks = 2;\n            var yAxis;\n\n            if (this.orientation !== 'rtl') {\n                yAxis = d3.axisLeft(y)\n                    .tickFormat(this.getYFormatter())\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y ticks-axis\")\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y)\n                    .tickFormat(this.getYFormatter())\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y ticks-axis\")\n                    .attr(\"transform\", \"translate(\" + this.width + \",0)\")\n                    .call(yAxis);\n            }\n\n\n            // On after draw ticks\n\n            this.onAfterDrawTicks();\n        },\n\n        drawAxes: function() {\n            if (this.settings.xAxis.showAxis) {\n                var x = this.getX();\n                var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"x axis\")\n                    .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                    .call(xAxis);\n            }\n\n            if (this.settings.yAxis.showAxis) {\n                var y = this.getY();\n                var chartPadding = 0;\n                var yAxis;\n\n                if (this.orientation === 'rtl') {\n                    yAxis = d3.axisLeft(y).ticks(0);\n                    this.drawingArea.append(\"g\")\n                        .attr(\"class\", \"y axis\")\n                        .attr(\"transform\", \"translate(\" + (this.width - chartPadding) + \", 0)\")\n                        .call(yAxis);\n                } else {\n                    yAxis = d3.axisRight(y).ticks(0);\n                    this.drawingArea.append(\"g\")\n                        .attr(\"class\", \"y axis\")\n                        .attr(\"transform\", \"translate(\" + chartPadding + \", 0)\")\n                        .call(yAxis);\n                }\n            }\n        },\n\n        drawChart: function() {\n            var x = this.getX(true);\n            var y = this.getY();\n\n\n            // X & Y grid lines\n\n            if (this.settings.xAxis.gridlines) {\n                var xLineAxis = d3.axisBottom(x);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"x grid-line\")\n                    .attr(\"transform\", \"translate(0,\" + this.height + \")\")\n                    .call(xLineAxis\n                        .tickSize(-this.height, 0, 0)\n                        .tickFormat(\"\")\n                    );\n            }\n\n            var yTicks = 2;\n\n            if (this.settings.yAxis.gridlines) {\n                var yLineAxis = d3.axisLeft(y);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y grid-line\")\n                    .attr(\"transform\", \"translate(0 , 0)\")\n                    .call(yLineAxis\n                        .tickSize(-(this.width), 0)\n                        .tickFormat(\"\")\n                        .tickValues(this.getYTickValues())\n                        .ticks(yTicks)\n                    );\n            }\n\n            // Line\n\n            var line = d3.line()\n                .x(function(d) {\n                    return x(d[0]);\n                })\n                .y(function(d) {\n                    return y(d[1]);\n                });\n\n            this.drawingArea\n                .append(\"g\")\n                .attr(\"class\", \"chart-line\")\n                .append(\"path\")\n                .datum(this.dataTable.rows)\n                .style('fill', 'none')\n                .style('stroke', this.settings.colors[0])\n                .style('stroke-width', '3px')\n                .attr(\"d\", line);\n\n\n            // Area\n\n            var area = d3.area()\n                .x(function(d) {\n                    return x(d[0]);\n                })\n                .y0(this.height)\n                .y1(function(d) {\n                    return y(d[1]);\n                });\n\n            this.drawingArea\n                .append(\"g\")\n                .attr(\"class\", \"chart-area\")\n                .append(\"path\")\n                .datum(this.dataTable.rows)\n                .style('fill', this.settings.colors[0])\n                .style('fill-opacity', '0.3')\n                .attr(\"d\", area);\n\n\n            // Plots\n\n            if (this.settings.plots) {\n                this.drawingArea.append('g')\n                    .attr(\"class\", \"plots\")\n                    .selectAll(\"circle\")\n                    .data(this.dataTable.rows)\n                    .enter()\n                    .append(\"circle\")\n                    .style('fill', this.settings.colors[0])\n                    .attr(\"class\", $.proxy(function(d, index) {\n                        return 'plot plot-' + index;\n                    }, this))\n                    .attr(\"r\", 4)\n                    .attr(\"cx\", $.proxy(function(d) {\n                        return x(d[0]);\n                    }, this))\n                    .attr(\"cy\", $.proxy(function(d) {\n                        return y(d[1]);\n                    }, this));\n            }\n        },\n\n        drawTipTriggers: function() {\n            if (this.settings.tips) {\n                if (!this.tip) {\n                    this.tip = new Craft.charts.Tip(this.$chart);\n                }\n\n\n                // Define xAxisTickInterval\n\n                var chartMargin = this.getChartMargin();\n                var tickSizeOuter = 6;\n                var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n                var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n\n                // Tip trigger width\n\n                var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n\n                // Draw triggers\n\n                var x = this.getX(true);\n                var y = this.getY();\n\n                this.drawingArea.append('g')\n                    .attr(\"class\", \"tip-triggers\")\n                    .selectAll(\"rect\")\n                    .data(this.dataTable.rows)\n                    .enter().append(\"rect\")\n                    .attr(\"class\", \"tip-trigger\")\n                    .style('fill', 'transparent')\n                    .style('fill-opacity', '1')\n                    .attr(\"width\", tipTriggerWidth)\n                    .attr(\"height\", this.height)\n                    .attr(\"x\", $.proxy(function(d) {\n                        return x(d[0]) - tipTriggerWidth / 2;\n                    }, this))\n                    .on(\"mouseover\", $.proxy(function(d, index) {\n                        // Expand plot\n\n                        this.drawingArea.select('.plot-' + index).attr(\"r\", 5);\n\n\n                        // Set tip content\n\n                        var $content = $('<div />');\n                        var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                        var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                        $xValue.html(this.getXFormatter()(d[0]));\n                        $yValue.html(this.getYFormatter()(d[1]));\n\n                        var content = $content.get(0);\n\n                        this.tip.setContent(content);\n\n\n                        // Set tip position\n\n                        var margin = this.getChartMargin();\n\n                        var offset = 24;\n                        var top = (y(d[1]) + offset);\n                        var left;\n\n                        if (this.orientation !== 'rtl') {\n                            left = (x(d[0]) + margin.left + offset);\n\n                            var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                            var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                            if (calcLeft > maxLeft) {\n                                left = x(d[0]) - (this.tip.$tip.width() + offset);\n                            }\n                        } else {\n                            left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                        }\n\n                        if (left < 0) {\n                            left = (x(d[0]) + margin.left + offset);\n                        }\n\n                        var position = {\n                            top: top,\n                            left: left\n                        };\n\n                        this.tip.setPosition(position);\n\n\n                        // Show tip\n\n                        this.tip.show();\n                    }, this))\n                    .on(\"mouseout\", $.proxy(function(d, index) {\n                        // Unexpand Plot\n                        this.drawingArea.select('.plot-' + index).attr(\"r\", 4);\n\n                        // Hide tip\n                        this.tip.hide();\n                    }, this));\n            }\n        },\n\n        getChartMargin: function() {\n            var margin = this.settings.margin;\n\n\n            // Estimate the max width of y ticks and set it as the left margin\n\n            var values = this.getYTickValues();\n            var yTicksMaxWidth = 0;\n\n            $.each(values, $.proxy(function(key, value) {\n                var characterWidth = 8;\n\n                var formatter = this.getYFormatter();\n\n                var formattedValue = formatter(value);\n                var computedTickWidth = formattedValue.length * characterWidth;\n\n                if (computedTickWidth > yTicksMaxWidth) {\n                    yTicksMaxWidth = computedTickWidth;\n                }\n            }, this));\n\n            yTicksMaxWidth += 10;\n\n            margin.left = yTicksMaxWidth;\n\n            return margin;\n        },\n\n        getX: function(padded) {\n            var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n                return d[0];\n            });\n\n            var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n                return d[0];\n            });\n\n            var xDomain = [xDomainMin, xDomainMax];\n\n            if (this.orientation === 'rtl') {\n                xDomain = [xDomainMax, xDomainMin];\n            }\n\n            var left = 0;\n            var right = 0;\n\n            if (padded) {\n                left = 0;\n                right = 0;\n            }\n\n            var x = d3.scaleTime().range([left, (this.width - right)]);\n\n            x.domain(xDomain);\n\n            return x;\n        },\n\n        getY: function() {\n            var yDomain = [0, this.getYMaxValue()];\n\n            var y = d3.scaleLinear().range([this.height, 0]);\n\n            y.domain(yDomain);\n\n            return y;\n        },\n\n        getXFormatter: function() {\n            var formatter;\n\n            if (this.settings.xAxis.formatter !== $.noop) {\n                formatter = this.settings.xAxis.formatter(this);\n            } else {\n                formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n            }\n\n            return formatter;\n        },\n\n        getYFormatter: function() {\n            var formatter;\n\n            if (this.settings.yAxis.formatter !== $.noop) {\n                formatter = this.settings.yAxis.formatter(this);\n            } else {\n                formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n            }\n\n            return formatter;\n        },\n\n        getYMaxValue: function() {\n            return d3.max(this.dataTable.rows, function(d) {\n                return d[1];\n            });\n        },\n\n        getYTickValues: function() {\n            var maxValue = this.getYMaxValue();\n\n            if (maxValue > 1) {\n                return [(maxValue / 2), maxValue];\n            } else {\n                return [0, maxValue];\n            }\n        }\n    },\n    {\n        defaults: {\n            chartClass: 'area',\n            margin: {top: 25, right: 5, bottom: 25, left: 0},\n            plots: true,\n            tips: true,\n            xAxis: {\n                gridlines: false,\n                showAxis: true,\n                formatter: $.noop\n            },\n            yAxis: {\n                gridlines: true,\n                showAxis: false,\n                formatter: $.noop\n            }\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = \"0\" + duration.hours;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = \"0\" + duration.minutes;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = \"0\" + duration.seconds;\n        }\n\n        return duration.hours + ':' + duration.minutes + ':' + duration.seconds;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day + \" %H:00:00\");\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.children('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'change', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        var val = this.$input.val();\n\n        // If empty, set the preview to transparent\n        if (!val.length || val === '#') {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Make sure the value starts with a #\n        if (val[0] !== '#') {\n            val = '#'+val;\n            this.$input.val(val);\n        }\n\n        this.$colorPreview.css('background-color', val);\n\n        if (this.$colorInput) {\n            this.$colorInput.val(val);\n        }\n    }\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function()\n    {\n        if (Craft.ColorInput._browserSupportsColorInputs === null)\n        {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend(\n    {\n        elementIndex: null,\n        $elementIndexSourcesContainer: null,\n\n        $sidebar: null,\n        $sourcesContainer: null,\n        $sourceSettingsContainer: null,\n        $newHeadingBtn: null,\n        $footer: null,\n        $footerBtnContainer: null,\n        $saveBtn: null,\n        $cancelBtn: null,\n        $saveSpinner: null,\n        $loadingSpinner: null,\n\n        sourceSort: null,\n        sources: null,\n        selectedSource: null,\n        updateSourcesOnSave: false,\n\n        availableTableAttributes: null,\n\n        init: function(elementIndex, settings) {\n            this.base();\n\n            this.setSettings(settings, {\n                resizable: true\n            });\n\n            this.elementIndex = elementIndex;\n            this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n            var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n            this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n            this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n            this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n            this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n            this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$footerBtnContainer);\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Save'),\n            }).appendTo(this.$footerBtnContainer);\n            this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n            this.$newHeadingBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit add icon',\n                text: Craft.t('app', 'New heading'),\n            }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n            this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n            this.setContainer($container);\n            this.show();\n\n            var data = {\n                elementType: this.elementIndex.elementType\n            };\n\n            Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, $.proxy(function(response, textStatus) {\n                this.$loadingSpinner.remove();\n\n                if (textStatus === 'success') {\n                    this.$saveBtn.removeClass('disabled');\n                    this.buildModal(response);\n                }\n            }, this));\n\n            this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n            this.addListener(this.$cancelBtn, 'click', 'hide');\n            this.addListener(this.$saveBtn, 'click', 'save');\n            this.addListener(this.$container, 'submit', 'save');\n        },\n\n        buildModal: function(response) {\n            // Store the available table attribute options\n            this.availableTableAttributes = response.availableTableAttributes;\n\n            // Create the source item sorter\n            this.sourceSort = new Garnish.DragSort({\n                handle: '.move',\n                axis: 'y',\n                onSortChange: $.proxy(function() {\n                    this.updateSourcesOnSave = true;\n                }, this)\n            });\n\n            // Create the sources\n            this.sources = [];\n\n            for (var i = 0; i < response.sources.length; i++) {\n                var source = this.addSource(response.sources[i]);\n                this.sources.push(source);\n            }\n\n            if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n                this.sources[0].select();\n            }\n        },\n\n        addSource: function(sourceData) {\n            var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n            var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n            var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n            $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n            var source;\n\n            // Is this a heading?\n            if (typeof sourceData.heading !== 'undefined') {\n                $item.addClass('heading');\n                $itemInput.attr('name', 'sourceOrder[][heading]');\n                source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n                source.updateItemLabel(sourceData.heading);\n            }\n            else {\n                $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n                source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n                source.updateItemLabel(sourceData.label);\n\n                // Select this by default?\n                if ((this.elementIndex.sourceKey+'/').substr(0, sourceData.key.length+1) === sourceData.key+'/') {\n                    source.select();\n                }\n            }\n\n            this.sourceSort.addItems($item);\n\n            return source;\n        },\n\n        handleNewHeadingBtnClick: function() {\n            var source = this.addSource({\n                heading: ''\n            });\n\n            Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n            source.select();\n            this.updateSourcesOnSave = true;\n        },\n\n        save: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n                return;\n            }\n\n            this.$saveSpinner.removeClass('hidden');\n            var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n            Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, $.proxy(function(response, textStatus) {\n                this.$saveSpinner.addClass('hidden');\n\n                if (textStatus === 'success' && response.success) {\n                    // Have any changes been made to the source list?\n                    if (this.updateSourcesOnSave) {\n                        if (this.$elementIndexSourcesContainer.length) {\n                            var $lastSource = null,\n                                $pendingHeading;\n\n                            for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                                var $item = this.sourceSort.$items.eq(i),\n                                    source = $item.data('source'),\n                                    $indexSource = source.getIndexSource();\n\n                                if (!$indexSource) {\n                                    continue;\n                                }\n\n                                if (source.isHeading()) {\n                                    $pendingHeading = $indexSource;\n                                }\n                                else {\n                                    if ($pendingHeading) {\n                                        this.appendSource($pendingHeading, $lastSource);\n                                        $lastSource = $pendingHeading;\n                                        $pendingHeading = null;\n                                    }\n\n                                    this.appendSource($indexSource, $lastSource);\n                                    $lastSource = $indexSource;\n                                }\n                            }\n\n                            // Remove any additional sources (most likely just old headings)\n                            if ($lastSource) {\n                                var $extraSources = $lastSource.nextAll();\n                                this.elementIndex.sourceSelect.removeItems($extraSources);\n                                $extraSources.remove();\n                            }\n                        }\n                    }\n\n                    // If a source is selected, have the element index select that one by default on the next request\n                    if (this.selectedSource && this.selectedSource.sourceData.key) {\n                        this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                        this.elementIndex.updateElements();\n                    }\n\n                    Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                    this.hide();\n                }\n                else {\n                    var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                    Craft.cp.displayError(error);\n                }\n            }, this));\n        },\n\n        appendSource: function($source, $lastSource) {\n            if (!$lastSource) {\n                $source.prependTo(this.$elementIndexSourcesContainer);\n            }\n            else {\n                $source.insertAfter($lastSource);\n            }\n        },\n\n        destroy: function() {\n            for (var i = 0; i < this.sources.length; i++) {\n                this.sources[i].destroy();\n            }\n\n            delete this.sources;\n            this.base();\n        }\n    });\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend(\n    {\n        modal: null,\n\n        $item: null,\n        $itemLabel: null,\n        $itemInput: null,\n        $settingsContainer: null,\n\n        sourceData: null,\n\n        init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n            this.modal = modal;\n            this.$item = $item;\n            this.$itemLabel = $itemLabel;\n            this.$itemInput = $itemInput;\n            this.sourceData = sourceData;\n\n            this.$item.data('source', this);\n\n            this.addListener(this.$item, 'click', 'select');\n        },\n\n        isHeading: function() {\n            return false;\n        },\n\n        isSelected: function() {\n            return (this.modal.selectedSource === this);\n        },\n\n        select: function() {\n            if (this.isSelected()) {\n                return;\n            }\n\n            if (this.modal.selectedSource) {\n                this.modal.selectedSource.deselect();\n            }\n\n            this.$item.addClass('sel');\n            this.modal.selectedSource = this;\n\n            if (!this.$settingsContainer) {\n                this.$settingsContainer = this.createSettings()\n                    .appendTo(this.modal.$sourceSettingsContainer);\n            }\n            else {\n                this.$settingsContainer.removeClass('hidden');\n            }\n\n            this.modal.$sourceSettingsContainer.scrollTop(0);\n        },\n\n        createSettings: function() {\n            return $('<div/>');\n        },\n\n        getIndexSource: function() {\n        },\n\n        deselect: function() {\n            this.$item.removeClass('sel');\n            this.modal.selectedSource = null;\n            this.$settingsContainer.addClass('hidden');\n        },\n\n        updateItemLabel: function(val) {\n            this.$itemLabel.text(val);\n        },\n\n        destroy: function() {\n            this.$item.data('source', null);\n            this.base();\n        }\n    });\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend(\n    {\n        createSettings: function() {\n            let $settings = $('<div/>').append(Craft.ui.createTextField({\n                label: Craft.t('app', 'Header Column Heading'),\n                id: 'defaultHeaderColHeading' + Math.floor(Math.random() * 100000),\n                name: `sources[${this.sourceData.key}][headerColHeading]`,\n                value: this.sourceData.headerColHeading,\n                placeholder: this.sourceData.defaultHeaderColHeading,\n            }));\n\n            if (this.sourceData.tableAttributes.length) {\n                $settings.append(this.createTableColumnsField());\n            }\n\n            return $settings;\n        },\n\n        createTableColumnsField: function() {\n            // Create the title column option\n            let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n            let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n            // Create the rest of the options\n            let $columnCheckboxes = $('<div/>');\n            let selectedAttributes = [firstKey];\n\n            $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n            // Add the selected columns, in the selected order\n            for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n                let [key, label] = this.sourceData.tableAttributes[i];\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n                selectedAttributes.push(key);\n            }\n\n            // Add the rest\n            let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n            availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n            for (let i = 0; i < availableTableAttributes.length; i++) {\n                let [key, label] = availableTableAttributes[i];\n                if (!Craft.inArray(key, selectedAttributes)) {\n                    $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n                }\n            }\n\n            new Garnish.DragSort($columnCheckboxes.children(), {\n                handle: '.move',\n                axis: 'y'\n            });\n\n            return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n                label: Craft.t('app', 'Table Columns'),\n                instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n            });\n        },\n\n        createTableColumnOption: function(key, label, first, checked) {\n            var $option = $('<div class=\"customize-sources-table-column\"/>')\n                .append('<div class=\"icon move\"/>')\n                .append(\n                    Craft.ui.createCheckbox({\n                        label: label,\n                        name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                        value: key,\n                        checked: checked,\n                        disabled: first\n                    })\n                );\n\n            if (first) {\n                $option.children('.move').addClass('disabled');\n            }\n\n            return $option;\n        },\n\n        getIndexSource: function() {\n            var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n            if ($source) {\n                return $source.closest('li');\n            }\n        }\n    });\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend(\n    {\n        $labelField: null,\n        $labelInput: null,\n        $deleteBtn: null,\n\n        isHeading: function() {\n            return true;\n        },\n\n        select: function() {\n            this.base();\n            this.$labelInput.trigger('focus');\n        },\n\n        createSettings: function() {\n            let $settings = $('<div/>');\n\n            this.$labelField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Heading'),\n                instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n                value: this.sourceData.heading\n            }).appendTo($settings);\n\n            this.$labelInput = this.$labelField.find('.text');\n\n            $settings.append('<hr/>');\n\n            this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n                .appendTo($settings);\n\n            this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n            this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n            return $settings;\n        },\n\n        handleLabelInputChange: function() {\n            this.updateItemLabel(this.$labelInput.val());\n            this.modal.updateSourcesOnSave = true;\n        },\n\n        updateItemLabel: function(val) {\n            this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n            this.$itemInput.val(val);\n        },\n\n        deleteHeading: function() {\n            this.modal.sourceSort.removeItems(this.$item);\n            this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n            this.modal.updateSourcesOnSave = true;\n\n            if (this.isSelected()) {\n                this.deselect();\n\n                if (this.modal.sources.length) {\n                    this.modal.sources[0].select();\n                }\n            }\n\n            this.$item.remove();\n            this.$settingsContainer.remove();\n            this.destroy();\n        },\n\n        getIndexSource: function() {\n            var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n            return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend(\n    {\n        $table: null,\n\n        init: function(table, settings) {\n            this.$table = $(table);\n            var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n            settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n            settings.container = this.$table.children('tbody');\n            settings.helper = $.proxy(this, 'getHelper');\n            settings.caboose = '<tr/>';\n            settings.axis = Garnish.Y_AXIS;\n            settings.magnetStrength = 4;\n            settings.helperLagBase = 1.5;\n\n            this.base($rows, settings);\n        },\n\n        getHelper: function($helperRow) {\n            var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n                $table = $('<table/>').appendTo($helper),\n                $tbody = $('<tbody/>').appendTo($table);\n\n            $helperRow.appendTo($tbody);\n\n            // Copy the table width and classes\n            $table.width(this.$table.width());\n            $table.prop('className', this.$table.prop('className'));\n\n            // Copy the column widths\n            var $firstRow = this.$table.find('tr:first'),\n                $cells = $firstRow.children(),\n                $helperCells = $helperRow.children();\n\n            for (var i = 0; i < $helperCells.length; i++) {\n                $($helperCells[i]).width($($cells[i]).width());\n            }\n\n            return $helper;\n        }\n    },\n    {\n        defaults: {\n            handle: '.move',\n            helperClass: 'datatablesorthelper'\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend(\n    {\n        id: null,\n        userId: null,\n\n        $deleteActionRadios: null,\n        $deleteSpinner: null,\n\n        userSelect: null,\n        _deleting: false,\n\n        init: function(userId, settings) {\n            this.id = Math.floor(Math.random() * 1000000000);\n            this.userId = userId;\n            settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n            let $form = $(\n                    '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n                    Craft.getCsrfInput() +\n                    '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n                    (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n                    (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n                    '</form>'\n                ).appendTo(Garnish.$bod);\n            let $body = $(\n                    '<div class=\"body\">' +\n                    '<div class=\"content-summary\">' +\n                    '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n                    '<ul class=\"bullets\"></ul>' +\n                    '</div>' +\n                    '<div class=\"options\">' +\n                    '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n                    '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n                    '<div class=\"elements\"></div>' +\n                    '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n                    '</div>' +\n                    '</div>' +\n                    '<div>' +\n                    '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n                    '</div>' +\n                    '</div>'\n                ).appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo($buttons);\n\n            if (settings.contentSummary.length) {\n                for (let i = 0; i < settings.contentSummary.length; i++) {\n                    $body.find('ul').append($('<li/>', { text: settings.contentSummary[i] }));\n                }\n            } else {\n                $body.find('ul').remove();\n            }\n\n            this.$deleteActionRadios = $body.find('input[type=radio]');\n            this.$deleteSubmitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: this._submitBtnLabel(false),\n            }).appendTo($buttons);\n            this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n            var idParam;\n\n            if (Garnish.isArray(this.userId)) {\n                idParam = ['and'];\n\n                for (let i = 0; i < this.userId.length; i++) {\n                    idParam.push('not ' + this.userId[i]);\n                }\n            }\n            else {\n                idParam = 'not ' + this.userId;\n            }\n\n            this.userSelect = new Craft.BaseElementSelectInput({\n                id: 'transferselect' + this.id,\n                name: 'transferContentTo',\n                elementType: 'craft\\\\elements\\\\User',\n                criteria: {\n                    id: idParam\n                },\n                limit: 1,\n                modalSettings: {\n                    closeOtherModals: false\n                },\n                onSelectElements: $.proxy(function() {\n                    this.updateSizeAndPosition();\n\n                    if (!this.$deleteActionRadios.first().prop('checked')) {\n                        this.$deleteActionRadios.first().trigger('click');\n                    }\n                    else {\n                        this.validateDeleteInputs();\n                    }\n                }, this),\n                onRemoveElements: $.proxy(this, 'validateDeleteInputs'),\n                selectable: false,\n                editable: false\n            });\n\n            this.addListener($cancelBtn, 'click', 'hide');\n\n            this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n            this.addListener($form, 'submit', 'handleSubmit');\n\n            this.base($form, settings);\n        },\n\n        _submitBtnLabel: function(withContent) {\n            let message = withContent\n                ? 'Delete {num, plural, =1{user} other{users}} and content'\n                : 'Delete {num, plural, =1{user} other{users}}';\n\n            return Craft.t('app', message, {\n                num: Garnish.isArray(this.userId) ? this.userId.length : 1,\n            });\n        },\n\n        validateDeleteInputs: function() {\n            var validates = false;\n\n            if (this.$deleteActionRadios.eq(1).prop('checked')) {\n                validates = true;\n                this.$deleteSubmitBtn.text(this._submitBtnLabel(true));\n            } else {\n                this.$deleteSubmitBtn.text(this._submitBtnLabel(false));\n                if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                    validates = !!this.userSelect.totalSelected;\n                }\n            }\n\n            this.updateSizeAndPosition();\n\n            if (validates) {\n                this.$deleteSubmitBtn.removeClass('disabled');\n            }\n            else {\n                this.$deleteSubmitBtn.addClass('disabled');\n            }\n\n            return validates;\n        },\n\n        handleSubmit: function(ev) {\n            if (this._deleting || !this.validateDeleteInputs()) {\n                ev.preventDefault();\n                return;\n            }\n\n            this.$deleteSubmitBtn.addClass('active');\n            this.$deleteSpinner.removeClass('hidden');\n            this.disable();\n            this.userSelect.disable();\n            this._deleting = true;\n\n            // Let the onSubmit callback prevent the form from getting submitted\n            try {\n                if (this.settings.onSubmit() === false) {\n                    ev.preventDefault();\n                }\n            } catch (e) {\n                ev.preventDefault();\n                this.$deleteSpinner.addClass('hidden');\n                throw e;\n            }\n        },\n\n        onFadeIn: function() {\n            // Auto-focus the first radio\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$deleteActionRadios.first().trigger('focus');\n            }\n\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            contentSummary: [],\n            onSubmit: $.noop,\n            redirect: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend(\n    {\n        $revisionBtn: null,\n        $revisionLabel: null,\n        $spinner: null,\n        $expandSiteStatusesBtn: null,\n        $statusIcon: null,\n\n        $editMetaBtn: null,\n        metaHud: null,\n        $nameTextInput: null,\n        $saveMetaBtn: null,\n\n        $siteStatusPane: null,\n        $globalLightswitch: null,\n        $siteLightswitches: null,\n        $addlSiteField: null,\n\n        siteIds: null,\n        newSiteIds: null,\n\n        enableAutosave: null,\n        lastSerializedValue: null,\n        listeningForChanges: false,\n        pauseLevel: 0,\n        timeout: null,\n        saving: false,\n        saveXhr: null,\n        queue: null,\n        submittingForm: false,\n\n        duplicatedElements: null,\n        errors: null,\n\n        preview: null,\n        previewToken: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.DraftEditor.defaults);\n\n            this.queue = [];\n            this.duplicatedElements = {};\n            this.enableAutosave = Craft.autosaveDrafts;\n\n            this.siteIds = Object.keys(this.settings.siteStatuses).map(siteId => {\n                return parseInt(siteId)\n            });\n\n            this.$revisionBtn = $('#context-btn');\n            this.$revisionLabel = $('#revision-label');\n            this.$spinner = $('#revision-spinner');\n            this.$expandSiteStatusesBtn = $('#expand-status-btn');\n            this.$statusIcon = $('#revision-status');\n\n            if (this.settings.canEditMultipleSites) {\n                this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n            }\n\n            if (this.settings.previewTargets.length) {\n                if (this.settings.enablePreview) {\n                    this.addListener($('#preview-btn'), 'click', 'openPreview');\n                }\n\n                const $shareBtn = $('#share-btn');\n\n                if (this.settings.previewTargets.length === 1) {\n                    this.addListener($shareBtn, 'click', function() {\n                        this.openShareLink(this.settings.previewTargets[0].url);\n                    });\n                } else {\n                    this.createShareMenu($shareBtn);\n                }\n            }\n\n            // If this is a revision, we're done here\n            if (this.settings.revisionId) {\n                return;\n            }\n\n            // Override the serializer to use our own\n            Craft.cp.$primaryForm.data('serializer', function() {\n                return this.serializeForm(true)\n            }.bind(this));\n\n            this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n            if (this.settings.draftId) {\n                this.initForDraft();\n            } else {\n                // If the \"Save as a Draft\" button is a secondary button, then add special handling for it\n                this.addListener($('#save-draft-btn'), 'click', function(ev) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }.bind(this));\n\n                // If they're not allowed to update the source element, override the save shortcut to create a draft too\n                if (!this.settings.canUpdateSource) {\n                    this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', function(ev) {\n                        if (ev.saveShortcut) {\n                            ev.preventDefault();\n                            this.createDraft();\n                            this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                        }\n                    }.bind(this));\n                }\n            }\n        },\n\n        listenForChanges: function() {\n            if (this.listeningForChanges || this.pauseLevel > 0 || !this.enableAutosave) {\n                return;\n            }\n\n            this.listeningForChanges = true;\n\n            this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n                if ($(ev.target).is(this.statusIcons())) {\n                    return;\n                }\n                clearTimeout(this.timeout);\n                // If they are typing, wait half a second before checking the form\n                if (['keypress', 'keyup', 'change'].includes(ev.type)) {\n                    this.timeout = setTimeout(this.checkForm.bind(this), 500);\n                } else {\n                    this.checkForm();\n                }\n            });\n        },\n\n        stopListeningForChanges: function() {\n            if (!this.listeningForChanges) {\n                return;\n            }\n\n            this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n            clearTimeout(this.timeout);\n            this.listeningForChanges = false;\n        },\n\n        pause: function() {\n            this.pauseLevel++;\n            this.stopListeningForChanges();\n        },\n\n        resume: function() {\n            if (this.pauseLevel === 0) {\n                throw 'Craft.DraftEditor::resume() should only be called after pause().';\n            }\n\n            // Only actually resume operation if this has been called the same\n            // number of times that pause() was called\n            this.pauseLevel--;\n            if (this.pauseLevel === 0) {\n                if (this.enableAutosave) {\n                    this.checkForm();\n                }\n                this.listenForChanges();\n            }\n        },\n\n        initForDraft: function() {\n            // Create the edit draft button\n            this.createEditMetaBtn();\n\n            this.addListener(this.$statusIcon, 'click', function() {\n                this.showStatusHud(this.$statusIcon);\n            }.bind(this));\n\n            this.addListener($('#merge-changes-btn'), 'click', this.mergeChanges);\n\n            if (Craft.autosaveDrafts) {\n                this.listenForChanges();\n            }\n        },\n\n        mergeChanges: function() {\n            // Make sure there aren't any unsaved changes\n            this.checkForm();\n\n            // Make sure we aren't currently saving something\n            if (this.saving) {\n                this.queue.push(this.mergeChanges.bind(this));\n                return;\n            }\n\n            this.saving = true;\n            $('#merge-changes-spinner').removeClass('hidden');\n\n            Craft.postActionRequest('drafts/merge-source-changes', {\n                elementType: this.settings.elementType,\n                draftId: this.settings.draftId,\n                siteId: this.settings.siteId,\n            }, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    window.location.reload();\n                } else {\n                    $('#merge-changes-spinner').addClass('hidden');\n                }\n            });\n        },\n\n        expandSiteStatuses: function() {\n            this.removeListener(this.$expandSiteStatusesBtn, 'click');\n            this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', function() {\n                this.$expandSiteStatusesBtn.remove();\n            }.bind(this));\n\n            const $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n            this.$siteStatusPane = $enabledForSiteField.parent();\n\n            // If this is a revision, just show the site statuses statically and be done\n            if (this.settings.revisionId) {\n                this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n                return;\n            }\n\n            $enabledForSiteField.addClass('nested');\n            const $globalField = Craft.ui.createLightswitchField({\n                id: 'enabled',\n                label: Craft.t('app', 'Enabled'),\n                name: 'enabled',\n            }).insertBefore($enabledForSiteField);\n            $globalField.find('label').css('font-weight', 'bold');\n            this.$globalLightswitch = $globalField.find('.lightswitch');\n\n            if (!this.settings.revisionId) {\n                this._showField($globalField);\n            }\n\n            // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n            const originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n              ? '1'\n              : (this.settings.enabledForSite ? '-' : '');\n            const originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n              '=' + (this.settings.enabledForSite ? '1' : '');\n\n            this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n\n            this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n\n            let serializedStatuses = `enabled=${originalEnabledValue}`;\n            for (let i = 0; i < this.$siteLightswitches.length; i++) {\n                const $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n                serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n            }\n\n            Craft.cp.$primaryForm.data('initialSerializedValue',\n                Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n            // Are there additional sites that can be added?\n            if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n                this._createAddlSiteField();\n            }\n\n            this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n            this._updateGlobalStatus();\n        },\n\n        /**\n         * @returns {Array}\n         */\n        _getOtherSupportedSites: function() {\n            return Craft.sites.filter(s => s.id != this.settings.siteId && this.siteIds.includes(s.id));\n        },\n\n        _showField: function($field) {\n            const height = $field.height();\n            $field\n              .css('overflow', 'hidden')\n              .height(0)\n              .velocity({height: height}, 'fast', () => {\n                  $field.css({\n                      overflow: '',\n                      height: '',\n                  });\n              });\n        },\n\n        _removeField: function($field) {\n            const height = $field.height();\n            $field\n              .css('overflow', 'hidden')\n              .velocity({height: 0}, 'fast', () => {\n                  $field.remove();\n              });\n        },\n\n        _updateGlobalStatus: function() {\n            let allEnabled = true, allDisabled = true;\n            this.$siteLightswitches.each(function() {\n                const enabled = $(this).data('lightswitch').on;\n                if (enabled) {\n                    allDisabled = false;\n                } else {\n                    allEnabled = false;\n                }\n                if (!allEnabled && !allDisabled) {\n                    return false;\n                }\n            });\n            if (allEnabled) {\n                this.$globalLightswitch.data('lightswitch').turnOn(true);\n            } else if (allDisabled) {\n                this.$globalLightswitch.data('lightswitch').turnOff(true);\n            } else {\n                this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n            }\n        },\n\n        _updateSiteStatuses: function() {\n            const enabled = this.$globalLightswitch.data('lightswitch').on;\n            this.$siteLightswitches.each(function() {\n                if (enabled) {\n                    $(this).data('lightswitch').turnOn(true);\n                } else {\n                    $(this).data('lightswitch').turnOff(true);\n                }\n            });\n        },\n\n        _createSiteStatusField: function(site) {\n            const $field = Craft.ui.createLightswitchField({\n                id: `enabledForSite-${site.id}`,\n                label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n                name: `enabledForSite[${site.id}]`,\n                on: this.settings.siteStatuses.hasOwnProperty(site.id)\n                    ? this.settings.siteStatuses[site.id]\n                    : true,\n                disabled: !!this.settings.revisionId,\n            });\n\n            if (this.$addlSiteField) {\n                $field.insertBefore(this.$addlSiteField);\n            } else {\n                $field.appendTo(this.$siteStatusPane);\n            }\n\n            if (!this.settings.revisionId) {\n                $field.addClass('nested');\n                const $lightswitch = $field.find('.lightswitch')\n                  .on('change', this._updateGlobalStatus.bind(this));\n                this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n            }\n\n            this._showField($field);\n\n            return $field;\n        },\n\n        _createAddlSiteField: function() {\n            const addlSites = Craft.sites.filter(s => {\n                return !this.siteIds.includes(s.id) && this.settings.addlSiteIds.includes(s.id);\n            });\n\n            if (!addlSites.length) {\n                return;\n            }\n\n            const $addlSiteSelectContainer = Craft.ui.createSelect({\n                options: [\n                    {label: Craft.t('app', 'Add a site…')},\n                    ...addlSites.map(s => {\n                        return {label: s.name, value: s.id};\n                    }),\n                ],\n            }).addClass('fullwidth');\n\n            this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n                .addClass('nested add')\n                .appendTo(this.$siteStatusPane);\n\n            const $addlSiteSelect = $addlSiteSelectContainer.find('select');\n\n            $addlSiteSelect.on('change', () => {\n                const siteId = parseInt($addlSiteSelect.val());\n                const site = Craft.sites.find(s => s.id === siteId);\n\n                if (!site) {\n                    return;\n                }\n\n                this._createSiteStatusField(site);\n\n                $addlSiteSelect\n                    .val('')\n                    .find(`option[value=\"${siteId}\"]`).remove();\n\n                if (this.newSiteIds === null) {\n                    this.newSiteIds = [];\n                }\n\n                this.siteIds.push(siteId);\n                this.newSiteIds.push(siteId);\n\n                // Was that the last site?\n                if ($addlSiteSelect.find('option').length === 1) {\n                    this._removeField(this.$addlSiteField);\n                }\n            });\n\n            this._showField(this.$addlSiteField);\n        },\n\n        showStatusHud: function(target) {\n            let bodyHtml;\n\n            if (this.errors === null) {\n                bodyHtml = '<p>' + Craft.t('app', 'The draft has been saved.') + '</p>';\n            } else {\n                bodyHtml = '<p class=\"error\">' + Craft.t('app', 'The draft could not be saved.') + '</p>';\n\n                if (this.errors.length) {\n                    bodyHtml += '<ul class=\"errors\">' +\n                        this.errors.map(e => `<li>${Craft.escapeHtml(e)}</li>`).join('') +\n                        '</ul>';\n                }\n            }\n\n            const hud = new Garnish.HUD(target, bodyHtml, {\n                onHide: function() {\n                    hud.destroy();\n                }\n            });\n        },\n\n        spinners: function() {\n            return this.preview\n                ? this.$spinner.add(this.preview.$spinner)\n                : this.$spinner;\n        },\n\n        statusIcons: function() {\n            return this.preview\n                ? this.$statusIcon.add(this.preview.$statusIcon)\n                : this.$statusIcon;\n        },\n\n        createEditMetaBtn: function() {\n            this.$editMetaBtn = $('<button/>', {\n                type: 'button',\n                'class': 'btn edit icon',\n                title: Craft.t('app', 'Edit draft settings'),\n            }).appendTo($('#context-btngroup'));\n            this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n        },\n\n        createShareMenu: function($shareBtn) {\n            $shareBtn.addClass('menubtn');\n\n            const $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n            const $ul = $('<ul/>').appendTo($menu);\n\n            this.settings.previewTargets.forEach(target => {\n                const $li = $('<li/>').appendTo($ul);\n                const $a = $('<a/>', {\n                    text: target.label,\n                }).appendTo($li);\n                this.addListener($a, 'click', () => {\n                    this.openShareLink(target.url);\n                });\n            });\n        },\n\n        getPreviewToken: function() {\n            return new Promise(function(resolve, reject) {\n                if (this.previewToken) {\n                    resolve(this.previewToken);\n                    return;\n                }\n\n                Craft.postActionRequest('preview/create-token', {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                }, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.previewToken = response.token;\n                        resolve(this.previewToken);\n                    } else {\n                        reject();\n                    }\n                }.bind(this));\n            }.bind(this));\n        },\n\n        getTokenizedPreviewUrl: function(url, randoParam) {\n            return new Promise(function(resolve, reject) {\n                const params = {};\n\n                if (randoParam || !this.settings.isLive) {\n                    // Randomize the URL so CDNs don't return cached pages\n                    params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n                }\n\n                if (this.settings.siteToken) {\n                    params[Craft.siteToken] = this.settings.siteToken;\n                }\n\n                // No need for a token if we're looking at a live element\n                if (this.settings.isLive) {\n                    resolve(Craft.getUrl(url, params));\n                    return;\n                }\n\n                this.getPreviewToken().then(function(token) {\n                    params[Craft.tokenParam] = token;\n                    resolve(Craft.getUrl(url, params));\n                }).catch(reject);\n            }.bind(this));\n        },\n\n        openShareLink: function(url) {\n            this.getTokenizedPreviewUrl(url).then(function(url) {\n                window.open(url);\n            });\n        },\n\n        getPreview: function() {\n            if (!this.preview) {\n                this.preview = new Craft.Preview(this);\n                this.preview.on('open', function() {\n                    if (!this.settings.draftId || !Craft.autosaveDrafts) {\n                        if (!Craft.autosaveDrafts) {\n                            this.enableAutosave = true;\n                        }\n                        this.listenForChanges();\n                    }\n                }.bind(this));\n                this.preview.on('close', function() {\n                    if (!this.settings.draftId || !Craft.autosaveDrafts) {\n                        if (!Craft.autosaveDrafts) {\n                            this.enableAutosave = false;\n                            const $statusIcons = this.statusIcons();\n                            if ($statusIcons.hasClass('checkmark-icon')) {\n                                $statusIcons.addClass('hidden');\n                            }\n                        }\n                        this.stopListeningForChanges();\n                    }\n                }.bind(this));\n            }\n            return this.preview;\n        },\n\n        openPreview: function() {\n            return new Promise(function(resolve, reject) {\n                this.ensureIsDraftOrRevision(true)\n                    .then(function() {\n                        this.getPreview().open();\n                        resolve();\n                    }.bind(this))\n                    .catch(reject);\n            }.bind(this))\n        },\n\n        ensureIsDraftOrRevision: function(onlyIfChanged) {\n            return new Promise(function(resolve, reject) {\n                if (!this.settings.draftId && !this.settings.revisionId) {\n                    if (\n                        onlyIfChanged &&\n                        this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                    ) {\n                        resolve();\n                        return;\n                    }\n\n                    this.createDraft()\n                        .then(resolve)\n                        .catch(reject);\n                } else {\n                    resolve();\n                }\n            }.bind(this));\n        },\n\n        serializeForm: function(removeActionParams) {\n            let data = Craft.cp.$primaryForm.serialize();\n\n            if (this.isPreviewActive()) {\n                // Replace the temp input with the preview form data\n                data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n            }\n\n            if (removeActionParams && !this.settings.isUnpublishedDraft) {\n                // Remove action and redirect params\n                data = data.replace(/&action=[^&]*/, '');\n                data = data.replace(/&redirect=[^&]*/, '');\n            }\n\n            return data;\n        },\n\n        checkForm: function(force) {\n            // If this isn't a draft and there's no active preview, then there's nothing to check\n            if (\n                this.settings.revisionId ||\n                (!this.settings.draftId && !this.isPreviewActive()) ||\n                this.pauseLevel > 0\n            ) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            this.timeout = null;\n\n            // Has anything changed?\n            const data = this.serializeForm(true);\n            if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n                this.saveDraft(data);\n            }\n        },\n\n        isPreviewActive: function() {\n            return this.preview && this.preview.isActive;\n        },\n\n        createDraft: function() {\n            return new Promise(function(resolve, reject) {\n                this.saveDraft(this.serializeForm(true))\n                    .then(resolve)\n                    .catch(reject);\n            }.bind(this));\n        },\n\n        saveDraft: function(data) {\n            return new Promise(function(resolve, reject) {\n                // Ignore if we're already submitting the main form\n                if (this.submittingForm) {\n                    reject();\n                    return;\n                }\n\n                if (this.saving) {\n                    this.queue.push(function() {\n                        this.checkForm()\n                    }.bind(this));\n                    return;\n                }\n\n                this.lastSerializedValue = data;\n                this.saving = true;\n                const $spinners = this.spinners().removeClass('hidden');\n                const $statusIcons = this.statusIcons()\n                    .velocity('stop')\n                    .css('opacity', '')\n                    .removeClass('invisible checkmark-icon alert-icon fade-out')\n                    .addClass('hidden');\n                if (this.$saveMetaBtn) {\n                    this.$saveMetaBtn.addClass('active');\n                }\n                this.errors = null;\n\n                const url = Craft.getActionUrl(this.settings.saveDraftAction);\n\n                this.saveXhr = Craft.postActionRequest(url, this.prepareData(data), function(response, textStatus) {\n                    $spinners.addClass('hidden');\n                    if (this.$saveMetaBtn) {\n                        this.$saveMetaBtn.removeClass('active');\n                    }\n                    this.saving = false;\n\n                    if (textStatus === 'abort') {\n                        return;\n                    }\n\n                    if (textStatus !== 'success' || response.errors) {\n                        this.errors = (response ? response.errors : null) || [];\n                        $statusIcons\n                            .velocity('stop')\n                            .css('opacity', '')\n                            .removeClass('hidden checkmark-icon')\n                            .addClass('alert-icon')\n                            .attr('title', Craft.t('app', 'The draft could not be saved.'));\n                        reject();\n                        return;\n                    }\n\n                    if (response.title) {\n                        $('#header h1').text(response.title);\n                    }\n\n                    if (response.docTitle) {\n                        document.title = response.docTitle;\n                    }\n\n                    this.$revisionLabel.text(response.draftName);\n\n                    this.settings.draftName = response.draftName;\n\n                    let revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                    // Did we just add a site?\n                    if (this.newSiteIds) {\n                        // Do we need to create the revision menu?\n                        if (!revisionMenu) {\n                            this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                            new Garnish.MenuBtn(this.$revisionBtn);\n                            revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                            revisionMenu.$container.removeClass('hidden');\n                        }\n                        this.newSiteIds.forEach(siteId => {\n                            const $option = revisionMenu.$options.filter(`[data-site-id=${siteId}]`);\n                            $option.find('.status').removeClass('disabled').addClass('enabled');\n                            const $li = $option.parent().removeClass('hidden');\n                            $li.closest('.site-group').removeClass('hidden');\n                        });\n                        revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                        this.newSiteIds = null;\n                    }\n\n                    // Did we just create a draft?\n                    const draftCreated = !this.settings.draftId;\n                    if (draftCreated) {\n                        // Update the document location HREF\n                        let newHref;\n                        const anchorPos = document.location.href.search('#');\n                        if (anchorPos !== -1) {\n                            newHref = document.location.href.substr(0, anchorPos);\n                        } else {\n                            newHref = document.location.href;\n                        }\n                        newHref += (newHref.match(/\\?/) ? '&' : '?') + 'draftId=' + response.draftId;\n                        if (anchorPos !== -1) {\n                            newHref += document.location.href.substr(anchorPos);\n                        }\n                        history.replaceState({}, '', newHref);\n\n                        // Replace the action input\n                        $('#action').remove();\n                        $('<input/>', {\n                            id: 'action',\n                            type: 'hidden',\n                            name: 'action',\n                            value: this.settings.saveDraftAction,\n                        }).appendTo(Craft.cp.$primaryForm);\n\n                        // Remove the \"Save as a Draft\" and \"Save\" buttons\n                        $('#save-draft-btn-container').remove();\n                        $('#save-btn-container').remove();\n\n                        const $actionButtonContainer = $('#action-buttons');\n\n                        // If they're allowed to update the source, add a \"Publish draft\" button\n                        if (this.settings.canUpdateSource) {\n                            $('<button/>', {\n                                type: 'button',\n                                class: 'btn secondary formsubmit',\n                                text: Craft.t('app', 'Publish draft'),\n                                data: {\n                                    action: this.settings.publishDraftAction,\n                                    redirect: this.settings.hashedCpEditUrl,\n                                },\n                            }).appendTo($actionButtonContainer).formsubmit();\n                        }\n\n                        // Add a \"Save draft\" button\n                        const $saveBtnContainer = $('<div/>', {\n                            id: 'save-btn-container',\n                            class: 'btngroup submit',\n                        }).appendTo($actionButtonContainer);\n\n                        $('<button/>', {\n                            type: 'submit',\n                            class: 'btn submit',\n                            text: Craft.t('app', 'Save draft'),\n                        }).appendTo($saveBtnContainer);\n\n                        if (this.settings.saveDraftAction || this.settings.deleteDraftAction) {\n                            const $menuBtn = $('<button/>', {\n                                type: 'button',\n                                class: 'btn submit menubtn',\n                            }).appendTo($saveBtnContainer);\n                            const $menu = $('<div/>', {\n                                class: 'menu',\n                                attr: {\n                                    'data-align': 'right',\n                                },\n                            }).appendTo($saveBtnContainer);\n\n                            if (this.settings.saveDraftAction) {\n                                const $ul = $('<ul/>')\n                                    .appendTo($menu)\n                                    .append(\n                                        $('<li/>')\n                                            .append(\n                                                $('<a/>', {\n                                                    class: 'formsubmit',\n                                                    data: {\n                                                        action: this.settings.saveDraftAction,\n                                                    },\n                                                    text: Craft.t('app', 'Save and continue editing'),\n                                                })\n                                                    .prepend(\n                                                        $('<span/>', {\n                                                            class: 'shortcut',\n                                                            text: (Craft.clientOs === 'Mac' ? '⌘' : 'Ctrl+') + 'S',\n                                                        })\n                                                    )\n                                            )\n                                    );\n                                if (this.settings.canUpdateSource && this.settings.hashedAddAnotherRedirectUrl) {\n                                    $ul.append(\n                                        $('<li/>')\n                                            .append(\n                                                $('<a/>', {\n                                                    class: 'formsubmit',\n                                                    data: {\n                                                        action: this.settings.publishDraftAction,\n                                                        redirect: this.settings.hashedAddAnotherRedirectUrl,\n                                                    },\n                                                    text: Craft.t('app', 'Publish and add another'),\n                                                })\n                                            )\n                                    );\n                                }\n                                if (this.settings.deleteDraftAction) {\n                                    $('<hr/>').appendTo($menu);\n                                }\n                            }\n\n                            if (this.settings.deleteDraftAction) {\n                                $('<ul/>')\n                                    .appendTo($menu)\n                                    .append(\n                                        $('<li/>')\n                                            .append(\n                                                $('<a/>', {\n                                                    class: 'formsubmit error',\n                                                    data: {\n                                                        action: this.settings.deleteDraftAction,\n                                                        redirect: this.settings.hashedCpEditUrl,\n                                                        confirm: Craft.t('app', 'Are you sure you want to delete this draft?'),\n                                                    },\n                                                    text: Craft.t('app', 'Delete draft'),\n                                                })\n                                            )\n                                    )\n                            }\n                        }\n\n                        Craft.initUiElements($saveBtnContainer);\n\n                        // Update the editor settings\n                        this.settings.draftId = response.draftId;\n                        this.settings.isLive = false;\n                        this.previewToken = null;\n                        this.initForDraft();\n\n                        // Add the draft to the revision menu\n                        if (revisionMenu) {\n                            revisionMenu.$options.filter(':not(.site-option)').removeClass('sel');\n                            let $draftsUl = revisionMenu.$container.find('.revision-group-drafts');\n                            if (!$draftsUl.length) {\n                                const $draftHeading = $('<h6/>', {\n                                    text: Craft.t('app', 'Drafts'),\n                                }).insertAfter(revisionMenu.$container.find('.revision-group-current'));\n                                $draftsUl = $('<ul/>', {\n                                    'class': 'padded revision-group-drafts',\n                                }).insertAfter($draftHeading);\n                            }\n                            const $draftLi = $('<li/>').prependTo($draftsUl);\n                            const $draftA = $('<a/>', {\n                                'class': 'sel',\n                                html: '<span class=\"draft-name\"></span> <span class=\"draft-meta light\"></span>',\n                            }).appendTo($draftLi);\n                            revisionMenu.addOptions($draftA);\n                            revisionMenu.selectOption($draftA);\n\n                            // Update the site URLs\n                            const $siteOptions = revisionMenu.$options.filter('.site-option[href]');\n                            for (let i = 0; i < $siteOptions.length; i++) {\n                                const $siteOption = $siteOptions.eq(i);\n                                $siteOption.attr('href', Craft.getUrl($siteOption.attr('href'), {draftId: response.draftId}));\n                            }\n                        }\n                    }\n\n                    if (revisionMenu) {\n                        revisionMenu.$options.filter('.sel').find('.draft-name').text(response.draftName);\n                        revisionMenu.$options.filter('.sel').find('.draft-meta').text('– ' + (response.creator\n                            ? Craft.t('app', 'saved {timestamp} by {creator}', {\n                                timestamp: response.timestamp,\n                                creator: response.creator\n                            })\n                            : Craft.t('app', 'updated {timestamp}', {\n                                timestamp: response.timestamp,\n                            })\n                        ));\n                    }\n\n                    // Did the controller send us updated preview targets?\n                    if (\n                        response.previewTargets &&\n                        JSON.stringify(response.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                    ) {\n                        this.updatePreviewTargets(response.previewTargets);\n                    }\n\n                    this.afterUpdate(data);\n\n                    if (draftCreated) {\n                        this.trigger('createDraft');\n                    }\n\n                    if (this.$nameTextInput) {\n                        this.checkMetaValues();\n                    }\n\n                    for (const oldId in response.duplicatedElements) {\n                        if (oldId != this.settings.sourceId && response.duplicatedElements.hasOwnProperty(oldId)) {\n                            this.duplicatedElements[oldId] = response.duplicatedElements[oldId];\n                        }\n                    }\n\n                    resolve();\n                }.bind(this));\n            }.bind(this));\n        },\n\n        prepareData: function(data) {\n            // Swap out element IDs with their duplicated ones\n            data = this.swapDuplicatedElementIds(data);\n\n            // Add the draft info\n            if (this.settings.draftId) {\n                data += `&draftId=${this.settings.draftId}`;\n            }\n\n            if (this.settings.draftName !== null) {\n                data += `&draftName=${this.settings.draftName}`;\n            }\n\n            // Filter out anything that hasn't changed\n            const initialData = this.swapDuplicatedElementIds(Craft.cp.$primaryForm.data('initialSerializedValue'));\n            return Craft.findDeltaData(initialData, data, this.getDeltaNames());\n        },\n\n        swapDuplicatedElementIds: function(data) {\n            const idsRE = Object.keys(this.duplicatedElements).join('|');\n            if (idsRE === '') {\n                return data;\n            }\n            const lb = encodeURIComponent('[');\n            const rb = encodeURIComponent(']');\n            // Keep replacing field IDs until data stops changing\n            while (true) {\n                if (data === (\n                    data = data\n                        // &fields[...][X]\n                        .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                            return pre + this.duplicatedElements[id] + post;\n                        })\n                        // &fields[...=X\n                        .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                            return pre + this.duplicatedElements[id];\n                        })\n                )) {\n                    break;\n                }\n            }\n            return data;\n        },\n\n        getDeltaNames: function() {\n            const deltaNames = Craft.deltaNames.slice(0);\n            for (let i = 0; i < deltaNames.length; i++) {\n                for (const oldId in this.duplicatedElements) {\n                    if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                        deltaNames[i] = deltaNames[i].replace('][' + oldId + ']', '][' + this.duplicatedElements[oldId] + ']');\n                    }\n                }\n            }\n            return deltaNames;\n        },\n\n        updatePreviewTargets: function(previewTargets) {\n            previewTargets.forEach(newTarget => {\n                const currentTarget = this.settings.previewTargets.find(t => t.label === newTarget.label);\n                if (currentTarget) {\n                    currentTarget.url = newTarget.url;\n                }\n            });\n        },\n\n        afterUpdate: function(data) {\n            Craft.cp.$primaryForm.data('initialSerializedValue', data);\n            Craft.initialDeltaValues = {};\n            const $statusIcons = this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('hidden')\n                .addClass('checkmark-icon')\n                .attr('title', Craft.t('app', 'The draft has been saved.'));\n\n            if (!this.enableAutosave) {\n                // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n                $statusIcons\n                    .velocity('stop')\n                    .velocity({\n                        opacity: 0,\n                    }, {\n                        delay: 2000,\n                        complete: () => {\n                            $statusIcons.addClass('hidden');\n                        },\n                    });\n            }\n\n            this.trigger('update');\n\n            this.nextInQueue();\n        },\n\n        nextInQueue: function() {\n            if (this.queue.length) {\n                this.queue.shift()();\n            }\n        },\n\n        showMetaHud: function() {\n            if (!this.metaHud) {\n                this.createMetaHud();\n                this.onMetaHudShow();\n            } else {\n                this.metaHud.show();\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$nameTextInput.trigger('focus');\n            }\n        },\n\n        createMetaHud: function() {\n            const $hudBody = $('<div/>');\n\n            // Add the Name field\n            const $nameField = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n            const $nameInputContainer = $('<div class=\"input\"/>').appendTo($nameField);\n            this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($nameInputContainer).val(this.settings.draftName);\n\n            // HUD footer\n            const $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n            $('<div class=\"flex-grow\"></div>').appendTo($footer);\n            this.$saveMetaBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($footer);\n\n            this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n                onSubmit: this.saveMeta.bind(this)\n            });\n\n            this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n\n            this.metaHud.on('show', this.onMetaHudShow.bind(this));\n            this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n            this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n        },\n\n        onMetaHudShow: function() {\n            this.$editMetaBtn.addClass('active');\n        },\n\n        onMetaHudHide: function() {\n            this.$editMetaBtn.removeClass('active');\n        },\n\n        onMetaHudEscape: function() {\n            this.$nameTextInput.val(this.settings.draftName);\n        },\n\n        checkMetaValues: function() {\n            if (\n                this.$nameTextInput.val() &&\n                this.$nameTextInput.val() !== this.settings.draftName\n            ) {\n                this.$saveMetaBtn.removeClass('disabled');\n                return true;\n            }\n\n            this.$saveMetaBtn.addClass('disabled');\n            return false;\n        },\n\n        shakeMetaHud: function() {\n            Garnish.shake(this.metaHud.$hud);\n        },\n\n        saveMeta: function() {\n            if (!this.checkMetaValues()) {\n                this.shakeMetaHud();\n                return;\n            }\n\n            this.settings.draftName = this.$nameTextInput.val();\n\n            this.metaHud.hide();\n            this.checkForm(true);\n        },\n\n        handleFormSubmit: function(ev) {\n            ev.preventDefault();\n\n            // Prevent double form submits\n            if (this.submittingForm) {\n                return;\n            }\n\n            // If this a draft and was this a normal save (either via submit button or save shortcut),\n            // then trigger an autosave\n            if (\n                this.settings.draftId &&\n                (typeof ev.autosave === 'undefined' || ev.autosave) &&\n                (ev.saveShortcut || (ev.customTrigger && ev.customTrigger.data('action') === this.settings.saveDraftAction))\n            ) {\n                this.checkForm(true);\n                return;\n            }\n\n            // Prevent the normal unload confirmation dialog\n            Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n            // Abort the current save request if there is one\n            if (this.saving) {\n                this.saveXhr.abort();\n            }\n\n            // Duplicate the form with normalized data\n            const data = this.prepareData(this.serializeForm(false));\n            const $form = Craft.createForm(data);\n\n            $form.appendTo(Garnish.$bod);\n            $form.submit();\n            this.submittingForm = true;\n        },\n    },\n    {\n        defaults: {\n            elementType: null,\n            sourceId: null,\n            siteId: null,\n            isUnpublishedDraft: false,\n            enabled: false,\n            enabledForSite: false,\n            isLive: false,\n            siteStatuses: null,\n            addlSiteIds: [],\n            cpEditUrl: null,\n            draftId: null,\n            revisionId: null,\n            draftName: null,\n            canEditMultipleSites: false,\n            canUpdateSource: false,\n            saveDraftAction: null,\n            deleteDraftAction: null,\n            publishDraftAction: null,\n            hashedCpEditUrl: null,\n            hashedAddAnotherRedirectUrl: null,\n            enablePreview: false,\n            previewTargets: [],\n            siteToken: null,\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend(\n    {\n        callback: $.noop,\n\n        init: function(source, target, callback) {\n            this.callback = callback;\n            this.base(source, target);\n        },\n\n        generateTargetValue: function(sourceVal) {\n            return this.callback(sourceVal);\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend(\n    {\n        initialized: false,\n\n        id: null,\n        baseName: null,\n        columns: null,\n        sorter: null,\n        biggestId: -1,\n\n        $table: null,\n        $tbody: null,\n        $addRowBtn: null,\n\n        rowCount: 0,\n        hasMaxRows: false,\n        hasMinRows: false,\n\n        radioCheckboxes: null,\n\n        init: function(id, baseName, columns, settings) {\n            this.id = id;\n            this.baseName = baseName;\n            this.columns = columns;\n            this.setSettings(settings, Craft.EditableTable.defaults);\n            this.radioCheckboxes = {};\n\n            this.$table = $('#' + id);\n            this.$tbody = this.$table.children('tbody');\n            this.rowCount = this.$tbody.find('tr').length;\n\n            // Is this already an editable table?\n            if (this.$table.data('editable-table')) {\n                Garnish.log('Double-instantiating an editable table on an element');\n                this.$table.data('editable-table').destroy();\n            }\n\n            this.$table.data('editable-table', this);\n\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                helperClass: 'editabletablesorthelper',\n                copyDraggeeInputValuesToHelper: true\n            });\n\n            if (this.isVisible()) {\n                this.initialize();\n            } else {\n                // Give everything a chance to initialize\n                setTimeout($.proxy(this, 'initializeIfVisible'), 500);\n            }\n\n            if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n                for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                    this.addRow()\n                }\n            }\n        },\n\n        isVisible: function() {\n            return (this.$table.parent().height() > 0);\n        },\n\n        initialize: function() {\n            if (this.initialized) {\n                return false;\n            }\n\n            this.initialized = true;\n            this.removeListener(Garnish.$win, 'resize');\n\n            var $rows = this.$tbody.children();\n\n            for (var i = 0; i < $rows.length; i++) {\n                this.createRowObj($rows[i]);\n            }\n\n            this.$addRowBtn = this.$table.next('.add');\n            this.updateAddRowButton();\n            this.addListener(this.$addRowBtn, 'activate', 'addRow');\n            return true;\n        },\n        initializeIfVisible: function() {\n            this.removeListener(Garnish.$win, 'resize');\n\n            if (this.isVisible()) {\n                this.initialize();\n            } else {\n                this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n            }\n        },\n        updateAddRowButton: function() {\n            if (!this.canAddRow()) {\n                this.$addRowBtn.css('opacity', '0.2');\n                this.$addRowBtn.css('pointer-events', 'none');\n            } else {\n                this.$addRowBtn.css('opacity', '1');\n                this.$addRowBtn.css('pointer-events', 'auto');\n            }\n        },\n        canDeleteRow: function() {\n            return (this.rowCount > this.settings.minRows);\n        },\n        deleteRow: function(row) {\n            if (!this.canDeleteRow()) {\n                return;\n            }\n\n            this.sorter.removeItems(row.$tr);\n            row.$tr.remove();\n\n            this.rowCount--;\n\n            this.updateAddRowButton();\n            if (this.rowCount === 0) {\n                this.$table.addClass('hidden');\n            }\n\n            // onDeleteRow callback\n            this.settings.onDeleteRow(row.$tr);\n\n            row.destroy();\n        },\n        canAddRow: function() {\n            if (this.settings.staticRows) {\n                return false;\n            }\n\n            if (this.settings.maxRows) {\n                return (this.rowCount < this.settings.maxRows);\n            }\n\n            return true;\n        },\n        addRow: function(focus, prepend) {\n            if (!this.canAddRow()) {\n                return;\n            }\n\n            var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n                $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n            if (prepend) {\n                $tr.prependTo(this.$tbody);\n            } else {\n                $tr.appendTo(this.$tbody);\n            }\n\n            var row = this.createRowObj($tr);\n            this.sorter.addItems($tr);\n\n            // Focus the first input in the row\n            if (focus !== false) {\n                $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n            }\n\n            this.rowCount++;\n            this.updateAddRowButton();\n            this.$table.removeClass('hidden');\n\n            // onAddRow callback\n            this.settings.onAddRow($tr);\n\n            return row;\n        },\n\n        createRow: function(rowId, columns, baseName, values) {\n            return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n        },\n\n        createRowObj: function($tr) {\n            return new Craft.EditableTable.Row(this, $tr);\n        },\n\n        focusOnPrevRow: function($tr, tdIndex, blurTd) {\n            var $prevTr = $tr.prev('tr');\n            var prevRow;\n\n            if ($prevTr.length) {\n                prevRow = $prevTr.data('editable-table-row');\n            } else {\n                prevRow = this.addRow(false, true);\n            }\n\n            // Focus on the same cell in the previous row\n            if (!prevRow) {\n                return;\n            }\n\n            if (!prevRow.$tds[tdIndex]) {\n                return;\n            }\n\n            if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n                if ($prevTr) {\n                    this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n                }\n                return;\n            }\n\n            var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n            if ($input.length) {\n                $(blurTd).trigger('blur');\n                $input.trigger('focus');\n            }\n        },\n\n        focusOnNextRow: function($tr, tdIndex, blurTd) {\n            var $nextTr = $tr.next('tr');\n            var nextRow;\n\n            if ($nextTr.length) {\n                nextRow = $nextTr.data('editable-table-row');\n            } else {\n                nextRow = this.addRow(false);\n            }\n\n            // Focus on the same cell in the next row\n            if (!nextRow) {\n                return;\n            }\n\n            if (!nextRow.$tds[tdIndex]) {\n                return;\n            }\n\n            if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n                if ($nextTr) {\n                    this.focusOnNextRow($nextTr, tdIndex, blurTd);\n                }\n                return;\n            }\n\n            var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n            if ($input.length) {\n                $(blurTd).trigger('blur');\n                $input.trigger('focus');\n            }\n        },\n\n        importData: function(data, row, tdIndex) {\n            let lines = data.split(/\\r?\\n|\\r/);\n            for (let i = 0; i < lines.length; i++) {\n                let values = lines[i].split(\"\\t\");\n                for (let j = 0; j < values.length; j++) {\n                    let value = values[j];\n                    row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                        .val(value)\n                        .trigger('input');\n                }\n\n                // move onto the next row\n                let $nextTr = row.$tr.next('tr');\n                if ($nextTr.length) {\n                    row = $nextTr.data('editable-table-row');\n                } else {\n                    row = this.addRow(false);\n                }\n            }\n        },\n    },\n    {\n        textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n        defaults: {\n            rowIdPrefix: '',\n            defaultValues: {},\n            staticRows: false,\n            minRows: null,\n            maxRows: null,\n            onAddRow: $.noop,\n            onDeleteRow: $.noop\n        },\n\n        createRow: function(rowId, columns, baseName, values) {\n            var $tr = $('<tr/>', {\n                'data-id': rowId\n            });\n\n            for (var colId in columns) {\n                if (!columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                var col = columns[colId],\n                    value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                    $cell;\n\n                if (col.type === 'heading') {\n                    $cell = $('<th/>', {\n                        'scope': 'row',\n                        'class': col['class'],\n                        'html': value\n                    });\n                } else {\n                    var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                    $cell = $('<td/>', {\n                        'class': `${col.class} ${col.type}-cell`,\n                        'width': col.width\n                    });\n\n                    if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                        $cell.addClass('textual');\n                    }\n\n                    if (col.code) {\n                        $cell.addClass('code');\n                    }\n\n                    switch (col.type) {\n                        case 'checkbox':\n                            $('<div class=\"checkbox-wrapper\"/>')\n                                .append(Craft.ui.createCheckbox({\n                                        name: name,\n                                        value: col.value || '1',\n                                        checked: !!value\n                                    })\n                                )\n                                .appendTo($cell);\n                            break;\n\n                        case 'color':\n                            Craft.ui.createColorInput({\n                                name: name,\n                                value: value,\n                                small: true\n                            }).appendTo($cell);\n                            break;\n\n                        case 'date':\n                            Craft.ui.createDateInput({\n                                name: name,\n                                value: value\n                            }).appendTo($cell);\n                            break;\n\n                        case 'lightswitch':\n                            Craft.ui.createLightswitch({\n                                name: name,\n                                value: col.value || '1',\n                                on: !!value,\n                                small: true\n                            }).appendTo($cell);\n                            break;\n\n                        case 'select':\n                            Craft.ui.createSelect({\n                                name: name,\n                                options: col.options,\n                                value: value || (function() {\n                                    for (var key in col.options) {\n                                        if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                            return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                        }\n                                    }\n                                    return null;\n                                })(),\n                                'class': 'small'\n                            }).appendTo($cell);\n                            break;\n\n                        case 'time':\n                            Craft.ui.createTimeInput({\n                                name: name,\n                                value: value\n                            }).appendTo($cell);\n                            break;\n\n                        case 'email':\n                        case 'url':\n                            Craft.ui.createTextInput({\n                                name: name,\n                                value: value,\n                                type: col.type,\n                                placeholder: col.placeholder || null,\n                            }).appendTo($cell);\n                            break;\n\n                        default:\n                            $('<textarea/>', {\n                                'name': name,\n                                'rows': col.rows || 1,\n                                'val': value,\n                                'placeholder': col.placeholder\n                            }).appendTo($cell);\n                    }\n                }\n\n                $cell.appendTo($tr);\n            }\n\n            $('<td/>', {\n                'class': 'thin action'\n            }).append(\n                $('<a/>', {\n                    'class': 'move icon',\n                    'title': Craft.t('app', 'Reorder')\n                })\n            ).appendTo($tr);\n\n            $('<td/>', {\n                'class': 'thin action'\n            }).append(\n                $('<a/>', {\n                    'class': 'delete icon',\n                    'title': Craft.t('app', 'Delete')\n                })\n            ).appendTo($tr);\n\n            return $tr;\n        }\n    });\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend(\n    {\n        table: null,\n        id: null,\n        niceTexts: null,\n\n        $tr: null,\n        $tds: null,\n        tds: null,\n        $textareas: null,\n        $deleteBtn: null,\n\n        init: function(table, tr) {\n            this.table = table;\n            this.$tr = $(tr);\n            this.$tds = this.$tr.children();\n            this.tds = [];\n            this.id = this.$tr.attr('data-id');\n\n            this.$tr.data('editable-table-row', this);\n\n            // Get the row ID, sans prefix\n            var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n            if (id > this.table.biggestId) {\n                this.table.biggestId = id;\n            }\n\n            this.$textareas = $();\n            this.niceTexts = [];\n            var textareasByColId = {};\n\n            var i = 0;\n            var colId, col, td, $textarea, $checkbox;\n\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                col = this.table.columns[colId];\n                td = this.tds[colId] = this.$tds[i];\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $textarea = $('textarea', td);\n                    this.$textareas = this.$textareas.add($textarea);\n\n                    this.addListener($textarea, 'focus', 'onTextareaFocus');\n                    this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                    this.niceTexts.push(new Garnish.NiceText($textarea, {\n                        onHeightChange: $.proxy(this, 'onTextareaHeightChange')\n                    }));\n\n                    this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                    this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                    $textarea.trigger('input');\n\n                    if (col.type !== 'multiline') {\n                        this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                    }\n\n                    textareasByColId[colId] = $textarea;\n                } else if (col.type === 'checkbox') {\n                    $checkbox = $('input[type=\"checkbox\"]', td);\n\n                    if (col.radioMode) {\n                        if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                            this.table.radioCheckboxes[colId] = [];\n                        }\n                        this.table.radioCheckboxes[colId].push($checkbox[0]);\n                        this.addListener($checkbox, 'change', {colId: colId}, 'onRadioCheckboxChange');\n                    }\n\n                    if (col.toggle) {\n                        this.addListener($checkbox, 'change', {colId: colId}, function(ev) {\n                            this.applyToggleCheckbox(ev.data.colId);\n                        });\n                    }\n                }\n\n                if (!$(td).hasClass('disabled')) {\n                    this.addListener(td, 'click', {td: td}, function(ev) {\n                        if (ev.target === ev.data.td) {\n                            $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                        }\n                    });\n                }\n\n                i++;\n            }\n\n            // Now that all of the text cells have been nice-ified, let's normalize the heights\n            this.onTextareaHeightChange();\n\n            // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n                col = this.table.columns[colId];\n                if (col.type === 'checkbox' && col.toggle) {\n                    this.applyToggleCheckbox(colId);\n                }\n            }\n\n            // Now look for any autopopulate columns\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                col = this.table.columns[colId];\n\n                if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                    new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                        allowNonAlphaStart: true\n                    });\n                }\n            }\n\n            var $deleteBtn = this.$tr.children().last().find('.delete');\n            this.addListener($deleteBtn, 'click', 'deleteRow');\n\n            var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n            this.addListener($inputs, 'focus', function(ev) {\n                $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n            });\n            this.addListener($inputs, 'blur', function(ev) {\n                $(ev.currentTarget).closest('td').removeClass('focus');\n            });\n        },\n\n        onTextareaFocus: function(ev) {\n            this.onTextareaHeightChange();\n\n            var $textarea = $(ev.currentTarget);\n\n            if ($textarea.data('ignoreNextFocus')) {\n                $textarea.data('ignoreNextFocus', false);\n                return;\n            }\n\n            setTimeout(function() {\n                Craft.selectFullValue($textarea);\n            }, 0);\n        },\n\n        onRadioCheckboxChange: function(ev) {\n            if (ev.currentTarget.checked) {\n                for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                    var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                    checkbox.checked = (checkbox === ev.currentTarget);\n                }\n            }\n        },\n\n        applyToggleCheckbox: function(checkboxColId) {\n            var checkboxCol = this.table.columns[checkboxColId];\n            var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n            var colId, colIndex, neg;\n            for (var i = 0; i < checkboxCol.toggle.length; i++) {\n                colId = checkboxCol.toggle[i];\n                colIndex = this.table.colum;\n                neg = colId[0] === '!';\n                if (neg) {\n                    colId = colId.substr(1);\n                }\n                if ((checked && !neg) || (!checked && neg)) {\n                    $(this.tds[colId])\n                        .removeClass('disabled')\n                        .find('textarea, input').prop('disabled', false);\n                } else {\n                    $(this.tds[colId])\n                        .addClass('disabled')\n                        .find('textarea, input').prop('disabled', true);\n                }\n            }\n        },\n\n        ignoreNextTextareaFocus: function(ev) {\n            $.data(ev.currentTarget, 'ignoreNextFocus', true);\n        },\n\n        handleKeypress: function(ev) {\n            var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n            var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n            // Going to the next/previous row?\n            if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n                ev.preventDefault();\n                if (ev.shiftKey) {\n                    this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n                } else {\n                    this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n                }\n                return;\n            }\n\n            // Was this an invalid number character?\n            if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n                ev.preventDefault();\n            }\n        },\n\n        handlePaste: function(ev) {\n            let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n            if (!data.match(/[\\t\\r\\n]/)) {\n                return;\n            }\n            ev.preventDefault();\n            this.table.importData(data, this, ev.data.tdIndex);\n        },\n\n        validateValue: function(ev) {\n            if (ev.data.type === 'multiline') {\n                return;\n            }\n\n            var safeValue;\n\n            if (ev.data.type === 'number') {\n                // Only grab the number at the beginning of the value (if any)\n                var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n                if (match !== null) {\n                    safeValue = match[1];\n                } else {\n                    safeValue = '';\n                }\n            } else {\n                // Just strip any newlines\n                safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n            }\n\n            if (safeValue !== ev.currentTarget.value) {\n                ev.currentTarget.value = safeValue;\n            }\n        },\n\n        onTextareaHeightChange: function() {\n            // Keep all the textareas' heights in sync\n            var tallestTextareaHeight = -1;\n\n            for (var i = 0; i < this.niceTexts.length; i++) {\n                if (this.niceTexts[i].height > tallestTextareaHeight) {\n                    tallestTextareaHeight = this.niceTexts[i].height;\n                }\n            }\n\n            this.$textareas.css('min-height', tallestTextareaHeight);\n\n            // If the <td> is still taller, go with that instead\n            var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n            if (tdHeight > tallestTextareaHeight) {\n                this.$textareas.css('min-height', tdHeight);\n            }\n        },\n\n        deleteRow: function() {\n            this.table.deleteRow(this);\n        }\n    },\n    {\n        numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend(\n    {\n        maxLevels: null,\n        newChildUrl: null,\n        $trigger: null,\n        $selectedItems: null,\n        triggerEnabled: true,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n            this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n            // Do we have a custom handler?\n            if (this.settings.activate) {\n                // Prevent the element index's click handler\n                this.$trigger.data('custom-handler', true);\n\n                // Is this a custom trigger?\n                if (this.$trigger.prop('nodeName') === 'FORM') {\n                    this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n                }\n                else {\n                    this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n                }\n            }\n\n            this.updateTrigger();\n            Craft.elementIndex.on('selectionChange', $.proxy(this, 'updateTrigger'));\n        },\n\n        updateTrigger: function() {\n            // Ignore if the last element was just unselected\n            if (Craft.elementIndex.getSelectedElements().length === 0) {\n                return;\n            }\n\n            if (this.validateSelection()) {\n                this.enableTrigger();\n            }\n            else {\n                this.disableTrigger();\n            }\n        },\n\n        /**\n         * Determines if this action can be performed on the currently selected elements.\n         *\n         * @return boolean\n         */\n        validateSelection: function() {\n            var valid = true;\n            this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n            if (!this.settings.batch && this.$selectedItems.length > 1) {\n                valid = false;\n            }\n            else if (typeof this.settings.validateSelection === 'function') {\n                valid = this.settings.validateSelection(this.$selectedItems);\n            }\n\n            return valid;\n        },\n\n        enableTrigger: function() {\n            if (this.triggerEnabled) {\n                return;\n            }\n\n            this.$trigger.removeClass('disabled');\n            this.triggerEnabled = true;\n        },\n\n        disableTrigger: function() {\n            if (!this.triggerEnabled) {\n                return;\n            }\n\n            this.$trigger.addClass('disabled');\n            this.triggerEnabled = false;\n        },\n\n        handleTriggerActivation: function(ev) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            if (this.triggerEnabled) {\n                this.settings.activate(this.$selectedItems);\n            }\n        }\n    },\n    {\n        defaults: {\n            type: null,\n            batch: true,\n            validateSelection: null,\n            activate: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend(\n    {\n        queue: null,\n        workers: [],\n\n        init: function() {\n            this.queue = [];\n\n            for (var i = 0; i < 3; i++) {\n                this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n            }\n        },\n\n        load: function($elements) {\n            // Only immediately load the visible images\n            let $thumbs = $elements.find('.elementthumb');\n            for (let i = 0; i < $thumbs.length; i++) {\n                let $thumb = $thumbs.eq(i);\n                let $scrollParent = $thumb.scrollParent();\n                if (this.isVisible($thumb, $scrollParent)) {\n                    this.addToQueue($thumb[0]);\n                } else {\n                    let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                    Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                    $scrollParent.on(`scroll.${key}`, {\n                        $thumb: $thumb,\n                        $scrollParent: $scrollParent,\n                        key: key,\n                    }, (ev) => {\n                        if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                            delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                            $scrollParent.off(`scroll.${ev.data.key}`);\n                            this.addToQueue(ev.data.$thumb[0]);\n                        }\n                    });\n                }\n            }\n        },\n\n        addToQueue: function(thumb) {\n            this.queue.push(thumb);\n\n            // See if there are any inactive workers\n            for (var i = 0; i < this.workers.length; i++) {\n                if (!this.workers[i].active) {\n                    this.workers[i].loadNext();\n                }\n            }\n        },\n\n        isVisible: function($thumb, $scrollParent) {\n            let thumbOffset = $thumb.offset().top;\n            let scrollParentOffset, scrollParentHeight;\n            if ($scrollParent[0] === document) {\n                scrollParentOffset = $scrollParent.scrollTop();\n                scrollParentHeight = Garnish.$win.height();\n            } else {\n                scrollParentOffset = $scrollParent.offset().top;\n                scrollParentHeight = $scrollParent.height();\n            }\n            return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n        },\n\n        destroy: function() {\n            for (var i = 0; i < this.workers.length; i++) {\n                this.workers[i].destroy();\n            }\n\n            this.base();\n        }\n    }, {\n        invisibleThumbs: {},\n        retryAll: function() {\n            for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n                let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n                delete Craft.ElementThumbLoader.invisibleThumbs[key];\n                $scrollParent.off(`scroll.${key}`);\n                queue.load($thumb.parent());\n            }\n        }\n    }\n);\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend(\n    {\n        loader: null,\n        active: false,\n\n        init: function(loader) {\n            this.loader = loader;\n        },\n\n        loadNext: function() {\n            var container = this.loader.queue.shift();\n            if (typeof container === 'undefined') {\n                this.active = false;\n                return;\n            }\n\n            this.active = true;\n            var $container = $(container);\n            if ($container.find('img').length) {\n                this.loadNext();\n                return;\n            }\n            var $img = $('<img/>', {\n                sizes: $container.attr('data-sizes'),\n                srcset: $container.attr('data-srcset'),\n                alt: ''\n            });\n            this.addListener($img, 'load,error', 'loadNext');\n            $img.appendTo($container);\n            picturefill({\n                elements: [$img[0]]\n            });\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend(\n    {\n        $form: null,\n        inputs: null,\n\n        init: function(form, inputs) {\n            this.$form = $(form);\n\n            // Only check specific inputs?\n            if (typeof inputs !== 'undefined') {\n                this.inputs = [];\n                inputs = $.makeArray(inputs);\n\n                for (var i = 0; i < inputs.length; i++) {\n                    var $inputs = $(inputs[i]);\n\n                    for (var j = 0; j < $inputs.length; j++) {\n                        var $input = $inputs.eq(j);\n\n                        this.inputs.push({\n                            input: $input,\n                            val: Garnish.getInputPostVal($input)\n                        });\n                    }\n                }\n            }\n\n            this.addListener(this.$form, 'submit', 'handleFormSubmit');\n        },\n\n        handleFormSubmit: function(ev) {\n            // Ignore if we're in the middle of getting the elevated session timeout\n            if (Craft.elevatedSessionManager.fetchingTimeout) {\n                ev.preventDefault();\n                ev.stopImmediatePropagation();\n                return;\n            }\n\n            // Are we only interested in certain inputs?\n            if (this.inputs) {\n                var inputsChanged = false;\n                var $input;\n\n                for (var i = 0; i < this.inputs.length; i++) {\n                    $input = this.inputs[i].input;\n                    // Is this a password input?\n                    if ($input.data('passwordInput')) {\n                        $input = $input.data('passwordInput').$currentInput;\n                    }\n\n                    // Has this input's value changed?\n                    if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                        inputsChanged = true;\n                        break;\n                    }\n                }\n\n                if (!inputsChanged) {\n                    // No need to interrupt the submit\n                    return;\n                }\n            }\n\n            // Prevent the form from submitting until the user has an elevated session\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            Craft.elevatedSessionManager.requireElevatedSession($.proxy(this, 'submitForm'));\n        },\n\n        submitForm: function() {\n            // Don't let handleFormSubmit() interrupt this time\n            this.disable();\n            this.$form.trigger('submit');\n            this.enable();\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend(\n    {\n        fetchingTimeout: false,\n\n        passwordModal: null,\n        $passwordInput: null,\n        $passwordSpinner: null,\n        $submitBtn: null,\n        $errorPara: null,\n\n        callback: null,\n\n        /**\n         * Requires that the user has an elevated session.\n         *\n         * @param {function} callback The callback function that should be called once the user has an elevated session\n         */\n        requireElevatedSession: function(callback) {\n            this.callback = callback;\n\n            // Check the time remaining on the user's elevated session (if any)\n            this.fetchingTimeout = true;\n\n            Craft.postActionRequest('users/get-elevated-session-timeout', $.proxy(function(response, textStatus) {\n                this.fetchingTimeout = false;\n\n                if (textStatus === 'success') {\n                    // Is there still enough time left or has it been disabled?\n                    if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                        this.callback();\n                    }\n                    else {\n                        // Show the password modal\n                        this.showPasswordModal();\n                    }\n                }\n            }, this));\n        },\n\n        showPasswordModal: function() {\n            if (!this.passwordModal) {\n                var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                    $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                    $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                    $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                    $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                    $buttonContainer= $('<td/>').appendTo($inputsFlexContainer),\n                    $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n                this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n                this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n                this.$submitBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit disabled',\n                    text: Craft.t('app', 'Submit'),\n                }).appendTo($buttonContainer);\n                this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n                this.passwordModal = new Garnish.Modal($passwordModal, {\n                    closeOtherModals: false,\n                    onFadeIn: $.proxy(function() {\n                        setTimeout($.proxy(this, 'focusPasswordInput'), 100);\n                    }, this),\n                    onFadeOut: $.proxy(function() {\n                        this.$passwordInput.val('');\n                    }, this)\n                });\n\n                new Craft.PasswordInput(this.$passwordInput, {\n                    onToggleInput: $.proxy(function($newPasswordInput) {\n                        this.$passwordInput = $newPasswordInput;\n                    }, this)\n                });\n\n                this.addListener(this.$passwordInput, 'input', 'validatePassword');\n                this.addListener($passwordModal, 'submit', 'submitPassword');\n            }\n            else {\n                this.passwordModal.show();\n            }\n        },\n\n        focusPasswordInput: function() {\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$passwordInput.trigger('focus');\n            }\n        },\n\n        validatePassword: function() {\n            if (this.$passwordInput.val().length >= 6) {\n                this.$submitBtn.removeClass('disabled');\n                return true;\n            }\n            else {\n                this.$submitBtn.addClass('disabled');\n                return false;\n            }\n        },\n\n        submitPassword: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (!this.validatePassword()) {\n                return;\n            }\n\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            var data = {\n                currentPassword: this.$passwordInput.val()\n            };\n\n            Craft.postActionRequest('users/start-elevated-session', data, $.proxy(function(response, textStatus) {\n                this.$passwordSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.passwordModal.hide();\n                        this.callback();\n                    }\n                    else {\n                        this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                        Garnish.shake(this.passwordModal.$container);\n                        this.focusPasswordInput();\n                    }\n                }\n                else {\n                    this.showPasswordError();\n                }\n            }, this));\n        },\n\n        showPasswordError: function(error) {\n            if (error === null || typeof error === 'undefined') {\n                error = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.$errorPara.text(error);\n            this.passwordModal.updateSizeAndPosition();\n        },\n\n        clearLoginError: function() {\n            this.showPasswordError('');\n        }\n    },\n    {\n        minSafeElevatedSessionTimeout: 5\n    });\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend(\n    {\n        publishableSections: null,\n        $newEntryBtnGroup: null,\n        $newEntryBtn: null,\n\n        init: function(elementType, $container, settings) {\n            this.on('selectSource', $.proxy(this, 'updateButton'));\n            this.on('selectSite', $.proxy(this, 'updateButton'));\n            this.base(elementType, $container, settings);\n        },\n\n        afterInit: function() {\n            // Find which of the visible sections the user has permission to create new entries in\n            this.publishableSections = [];\n\n            for (var i = 0; i < Craft.publishableSections.length; i++) {\n                var section = Craft.publishableSections[i];\n\n                if (this.getSourceByKey('section:' + section.uid)) {\n                    this.publishableSections.push(section);\n                }\n            }\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific section in the URL?\n            if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n                if (defaultSectionHandle === 'singles') {\n                    return 'singles';\n                }\n                else {\n                    for (var i = 0; i < this.$sources.length; i++) {\n                        var $source = $(this.$sources[i]);\n\n                        if ($source.data('handle') === defaultSectionHandle) {\n                            return $source.data('key');\n                        }\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        updateButton: function() {\n            if (!this.$source) {\n                return;\n            }\n\n            var handle;\n\n            // Get the handle of the selected source\n            if (this.$source.data('key') === 'singles') {\n                handle = 'singles';\n            }\n            else {\n                handle = this.$source.data('handle');\n            }\n\n            // Update the New Entry button\n            // ---------------------------------------------------------------------\n\n            var i, href, label;\n\n            if (this.publishableSections.length) {\n                // Remove the old button, if there is one\n                if (this.$newEntryBtnGroup) {\n                    this.$newEntryBtnGroup.remove();\n                }\n\n                // Determine if they are viewing a section that they have permission to create entries in\n                var selectedSection;\n\n                if (handle) {\n                    for (i = 0; i < this.publishableSections.length; i++) {\n                        if (this.publishableSections[i].handle === handle) {\n                            selectedSection = this.publishableSections[i];\n                            break;\n                        }\n                    }\n                }\n\n                this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n                var $menuBtn;\n\n                // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n                // Otherwise only show a menu button\n                if (selectedSection) {\n                    href = this._getSectionTriggerHref(selectedSection);\n                    label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                    this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                    if (this.settings.context !== 'index') {\n                        this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                            this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                        });\n                    }\n\n                    if (this.publishableSections.length > 1) {\n                        $menuBtn = $('<button/>', {\n                            type: 'button',\n                            class: 'btn submit menubtn',\n                        }).appendTo(this.$newEntryBtnGroup);\n                    }\n                }\n                else {\n                    this.$newEntryBtn = $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit add icon menubtn',\n                        text: Craft.t('app', 'New entry'),\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n\n                if ($menuBtn) {\n                    var menuHtml = '<div class=\"menu\"><ul>';\n\n                    for (i = 0; i < this.publishableSections.length; i++) {\n                        var section = this.publishableSections[i];\n\n                        if (\n                            (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                            (this.settings.context !== 'index' && section !== selectedSection)\n                        ) {\n                            href = this._getSectionTriggerHref(section);\n                            label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                            menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                        }\n                    }\n\n                    menuHtml += '</ul></div>';\n\n                    $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                    var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                    if (this.settings.context !== 'index') {\n                        menuBtn.on('optionSelect', $.proxy(function(ev) {\n                            this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                        }, this));\n                    }\n                }\n\n                this.addButton(this.$newEntryBtnGroup);\n            }\n\n            // Update the URL if we're on the Entries index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'entries';\n\n                if (handle) {\n                    uri += '/' + handle;\n                }\n\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n        },\n\n        _getSectionTriggerHref: function(section) {\n            if (this.settings.context === 'index') {\n                var uri = 'entries/' + section.handle + '/new';\n                let params = {};\n                if (this.siteId) {\n                    for (var i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == this.siteId) {\n                            params.site = Craft.sites[i].handle;\n                        }\n                    }\n                }\n                return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n            } else {\n                return 'data-id=\"' + section.id + '\"';\n            }\n        },\n\n        _openCreateEntryModal: function(sectionId) {\n            if (this.$newEntryBtn.hasClass('loading')) {\n                return;\n            }\n\n            // Find the section\n            var section;\n\n            for (var i = 0; i < this.publishableSections.length; i++) {\n                if (this.publishableSections[i].id == sectionId) {\n                    section = this.publishableSections[i];\n                    break;\n                }\n            }\n\n            if (!section) {\n                return;\n            }\n\n            this.$newEntryBtn.addClass('inactive');\n            var newEntryBtnText = this.$newEntryBtn.text();\n            this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n            Craft.createElementEditor(this.elementType, {\n                hudTrigger: this.$newEntryBtnGroup,\n                siteId: this.siteId,\n                attributes: {\n                    sectionId: sectionId,\n                    typeId: section.entryTypes[0].id,\n                    enabled: section.canPublish ? 1 : 0,\n                },\n                onBeginLoading: $.proxy(function() {\n                    this.$newEntryBtn.addClass('loading');\n                }, this),\n                onEndLoading: $.proxy(function() {\n                    this.$newEntryBtn.removeClass('loading');\n                }, this),\n                onHideHud: $.proxy(function() {\n                    this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n                }, this),\n                onSaveElement: $.proxy(function(response) {\n                    // Make sure the right section is selected\n                    var sectionSourceKey = 'section:' + section.uid;\n\n                    if (this.sourceKey !== sectionSourceKey) {\n                        this.selectSourceByKey(sectionSourceKey);\n                    }\n\n                    this.selectElementAfterUpdate(response.id);\n                    this.updateElements();\n                }, this)\n            });\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n","/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: $.proxy(this, 'onTabOptionSelect')\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $labelSpan = $tab.find('.tabs .tab span');\n        let oldName = $labelSpan.text();\n        let newName = prompt(Craft.t('app', 'Give your tab a name.'), oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>Tab ${this.tabGrid.$items.length + 1}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n        this.renameTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend(\n    {\n        $toggle: null,\n        targetPrefix: null,\n        targetSelector: null,\n        reverseTargetSelector: null,\n\n        _$target: null,\n        _$reverseTarget: null,\n        type: null,\n\n        init: function(toggle) {\n            this.$toggle = $(toggle);\n\n            // Is this already a field toggle?\n            if (this.$toggle.data('fieldtoggle')) {\n                Garnish.log('Double-instantiating a field toggle on an element');\n                this.$toggle.data('fieldtoggle').destroy();\n            }\n\n            this.$toggle.data('fieldtoggle', this);\n\n            this.type = this.getType();\n\n            if (this.type === 'select' || this.type === 'fieldset') {\n                this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n            } else {\n                this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n                this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n            }\n\n            this.findTargets();\n\n            switch (this.type) {\n                case 'link':\n                    this.addListener(this.$toggle, 'click', 'onToggleChange');\n                    break;\n                case 'fieldset':\n                    this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                    break;\n                default:\n                    this.addListener(this.$toggle, 'change', 'onToggleChange');\n                    this.onToggleChange();\n            }\n        },\n\n        normalizeTargetSelector: function(selector) {\n            if (selector && !selector.match(/^[#\\.]/)) {\n                selector = '#' + selector;\n            }\n\n            return selector;\n        },\n\n        getType: function() {\n            let nodeName = this.$toggle.prop('nodeName');\n            if (\n                (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n                this.$toggle.attr('role') === 'checkbox' ||\n                this.$toggle.attr('role') === 'switch'\n            ) {\n                return 'checkbox';\n            }\n\n            switch (nodeName) {\n                case 'SELECT':\n                    return 'select';\n                case 'A':\n                    return 'link';\n                case 'FIELDSET':\n                    return 'fieldset';\n            }\n\n            console.warn('Unexpected field toggle:', this.$toggle[0]);\n        },\n\n        findTargets: function() {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                var toggleVal = this.getToggleVal();\n                this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n            } else {\n                if (this.targetSelector) {\n                    this._$target = $(this.targetSelector);\n                }\n\n                if (this.reverseTargetSelector) {\n                    this._$reverseTarget = $(this.reverseTargetSelector);\n                }\n            }\n        },\n\n        getToggleVal: function() {\n            if (this.type === 'checkbox') {\n                if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                    return this.$toggle.prop('checked');\n                }\n                return this.$toggle.attr('aria-checked') === 'true';\n            }\n\n            let postVal;\n            if (this.type === 'fieldset') {\n                postVal = this.$toggle.find('input:checked:first').val();\n            } else {\n                postVal = Garnish.getInputPostVal(this.$toggle);\n            }\n\n            // Normalize the value\n            return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n        },\n\n        onToggleChange: function() {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                this.hideTarget(this._$target);\n                this.findTargets();\n                this.showTarget(this._$target);\n            } else {\n                this.findTargets();\n\n                if (this.type === 'link') {\n                    this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n                } else {\n                    this.onToggleChange._show = !!this.getToggleVal();\n                }\n\n                if (this.onToggleChange._show) {\n                    this.showTarget(this._$target);\n                    this.hideTarget(this._$reverseTarget);\n                } else {\n                    this.hideTarget(this._$target);\n                    this.showTarget(this._$reverseTarget);\n                }\n\n                delete this.onToggleChange._show;\n            }\n        },\n\n        showTarget: function($target) {\n            if ($target && $target.length) {\n                this.showTarget._currentHeight = $target.height();\n\n                $target.removeClass('hidden');\n\n                if (this.type !== 'select' && this.type !== 'fieldset') {\n                    if (this.type === 'link') {\n                        this.$toggle.removeClass('collapsed');\n                        this.$toggle.addClass('expanded');\n                    }\n\n                    for (let i = 0; i < $target.length; i++) {\n                        ($t => {\n                            if ($t.prop('nodeName') !== 'SPAN') {\n                                $t.height('auto');\n                                this.showTarget._targetHeight = $t.height();\n                                $t.css({\n                                    height: this.showTarget._currentHeight,\n                                    overflow: 'hidden'\n                                });\n\n                                $t.velocity('stop');\n\n                                $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                    $t.css({\n                                        height: '',\n                                        overflow: ''\n                                    });\n                                });\n                            }\n                        })($target.eq(i));\n                    }\n\n                    delete this.showTarget._targetHeight;\n                }\n\n                delete this.showTarget._currentHeight;\n\n                // Trigger a resize event in case there are any grids in the target that need to initialize\n                Garnish.$win.trigger('resize');\n            }\n        },\n\n        hideTarget: function($target) {\n            if ($target && $target.length) {\n                if (this.type === 'select' || this.type === 'fieldset') {\n                    $target.addClass('hidden');\n                } else {\n                    if (this.type === 'link') {\n                        this.$toggle.removeClass('expanded');\n                        this.$toggle.addClass('collapsed');\n                    }\n\n                    for (let i = 0; i < $target.length; i++) {\n                        ($t => {\n                            if ($t.hasClass('hidden')) {\n                                return;\n                            }\n                            if ($t.prop('nodeName') === 'SPAN') {\n                                $t.addClass('hidden');\n                            } else {\n                                $t.css('overflow', 'hidden');\n                                $t.velocity('stop');\n                                $t.velocity({height: 0}, 'fast', function() {\n                                    $t.addClass('hidden');\n                                });\n                            }\n                        })($target.eq(i));\n                    }\n                }\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend(\n    {\n        $container: null,\n\n        $items: null,\n        items: null,\n        totalCols: null,\n        colGutterDrop: null,\n        colPctWidth: null,\n\n        possibleItemColspans: null,\n        possibleItemPositionsByColspan: null,\n\n        itemPositions: null,\n        itemColspansByPosition: null,\n\n        layouts: null,\n        layout: null,\n        itemHeights: null,\n        leftPadding: null,\n\n        _refreshingCols: false,\n        _refreshColsAfterRefresh: false,\n        _forceRefreshColsAfterRefresh: false,\n\n        init: function(container, settings) {\n            this.$container = $(container);\n\n            // Is this already a grid?\n            if (this.$container.data('grid')) {\n                Garnish.log('Double-instantiating a grid on an element');\n                this.$container.data('grid').destroy();\n            }\n\n            this.$container.data('grid', this);\n\n            this.setSettings(settings, Craft.Grid.defaults);\n\n            // Set the refreshCols() proxy that container resizes will trigger\n            this.handleContainerHeightProxy = $.proxy(function() {\n                this.refreshCols(false, true);\n            }, this);\n\n            this.$items = this.$container.children(this.settings.itemSelector);\n            this.setItems();\n            this.refreshCols(true, false);\n\n            Garnish.$doc.ready($.proxy(function() {\n                this.refreshCols(false, false);\n            }, this));\n        },\n\n        addItems: function(items) {\n            this.$items = $().add(this.$items.add(items));\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        removeItems: function(items) {\n            this.$items = $().add(this.$items.not(items));\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        resetItemOrder: function() {\n            this.$items = $().add(this.$items);\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        setItems: function() {\n            this.setItems._ = {};\n\n            this.items = [];\n\n            for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n                this.items.push($(this.$items[this.setItems._.i]));\n            }\n\n            delete this.setItems._;\n        },\n\n        refreshCols: function(force) {\n            if (this._refreshingCols) {\n                this._refreshColsAfterRefresh = true;\n                if (force) {\n                    this._forceRefreshColsAfterRefresh = true;\n                }\n                return;\n            }\n\n            this._refreshingCols = true;\n\n            if (!this.items.length) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            this.refreshCols._ = {};\n\n            // Check to see if the grid is actually visible\n            this.refreshCols._.oldHeight = this.$container[0].style.height;\n            this.$container[0].style.height = 1;\n            this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n            this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n            if (this.refreshCols._.scrollHeight === 0) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            if (this.settings.cols) {\n                this.refreshCols._.totalCols = this.settings.cols;\n            }\n            else {\n                this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n                // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n                if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                    this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n                }\n\n                if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                    this.refreshCols._.totalCols = this.settings.maxCols;\n                }\n            }\n\n            if (this.refreshCols._.totalCols === 0) {\n                this.refreshCols._.totalCols = 1;\n            }\n\n            // Same number of columns as before?\n            if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            this.totalCols = this.refreshCols._.totalCols;\n            this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n            // Temporarily stop listening to container resizes\n            this.removeListener(this.$container, 'resize');\n\n            if (this.settings.fillMode === 'grid') {\n                this.refreshCols._.itemIndex = 0;\n\n                while (this.refreshCols._.itemIndex < this.items.length) {\n                    // Append the next X items and figure out which one is the tallest\n                    this.refreshCols._.tallestItemHeight = -1;\n                    this.refreshCols._.colIndex = 0;\n\n                    for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                        this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                        if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                            this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                        }\n\n                        this.refreshCols._.colIndex++;\n                    }\n\n                    if (this.settings.snapToGrid) {\n                        this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                        if (this.refreshCols._.remainder) {\n                            this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                        }\n                    }\n\n                    // Now set their heights to the tallest one\n                    for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                        this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                    }\n\n                    // set the this.refreshCols._.itemIndex pointer to the next one up\n                    this.refreshCols._.itemIndex += this.totalCols;\n                }\n            }\n            else {\n                this.removeListener(this.$items, 'resize');\n\n                // If there's only one column, sneak out early\n                if (this.totalCols === 1) {\n                    this.$container.height('auto');\n                    this.$items\n                        .show()\n                        .css({\n                            position: 'relative',\n                            width: 'auto',\n                            top: 0\n                        })\n                        .css(Craft.left, 0);\n                }\n                else {\n                    this.$items.css('position', 'absolute');\n                    this.colPctWidth = (100 / this.totalCols);\n\n                    // The setup\n\n                    this.layouts = [];\n\n                    this.itemPositions = [];\n                    this.itemColspansByPosition = [];\n\n                    // Figure out all of the possible colspans for each item,\n                    // as well as all the possible positions for each item at each of its colspans\n\n                    this.possibleItemColspans = [];\n                    this.possibleItemPositionsByColspan = [];\n                    this.itemHeightsByColspan = [];\n\n                    for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                        this.possibleItemColspans[this.refreshCols._.item] = [];\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                        this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                        this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                        this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                        this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                        this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                        this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                        if (this.refreshCols._.minColspan > this.totalCols) {\n                            this.refreshCols._.minColspan = this.totalCols;\n                        }\n                        if (this.refreshCols._.maxColspan > this.totalCols) {\n                            this.refreshCols._.maxColspan = this.totalCols;\n                        }\n\n                        for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                            // Get the height for this colspan\n                            this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                            this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                            this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                            if (this.refreshCols._.positionLeft) {\n                                this.refreshCols._.minPosition = 0;\n                                this.refreshCols._.maxPosition = 0;\n                            }\n                            else if (this.refreshCols._.positionRight) {\n                                this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                                this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                            }\n                            else {\n                                this.refreshCols._.minPosition = 0;\n                                this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                            }\n\n                            for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                                this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                            }\n                        }\n                    }\n\n                    // Find all the possible layouts\n\n                    this.refreshCols._.colHeights = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                        this.refreshCols._.colHeights.push(0);\n                    }\n\n                    this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                    // Now find the layout that looks the best.\n\n                    // First find the layouts with the highest number of used columns\n                    this.refreshCols._.layoutTotalCols = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                        this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                                this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                            }\n                        }\n                    }\n\n                    this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                    // Filter out the ones that aren't using as many columns as they could be\n                    for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                        if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                            this.layouts.splice(this.refreshCols._.i, 1);\n                        }\n                    }\n\n                    // Find the layout(s) with the least overall height\n                    this.refreshCols._.layoutHeights = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                        this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                    }\n\n                    this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                    this.refreshCols._.shortestLayouts = [];\n                    this.refreshCols._.emptySpaces = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                        if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                            this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                            // Now get its total empty space, including any trailing empty space\n                            this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                            for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                                this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                            }\n\n                            this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                        }\n                    }\n\n                    // And the layout with the least empty space is...\n                    this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                    // Set the item widths and left positions\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                        this.refreshCols._.css = {\n                            width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                        };\n                        this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                        this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                    }\n\n                    // If every item is at position 0, then let them lay out au naturel\n                    if (this.isSimpleLayout()) {\n                        this.$container.height('auto');\n                        this.$items.css({\n                            position: 'relative',\n                            top: 0,\n                            'margin-bottom': this.settings.gutter+'px'\n                        });\n                    }\n                    else {\n                        this.$items.css('position', 'absolute');\n\n                        // Now position the items\n                        this.positionItems();\n\n                        // Update the positions as the items' heigthts change\n                        this.addListener(this.$items, 'resize', 'onItemResize');\n                    }\n                }\n            }\n\n            this.completeRefreshCols();\n\n            // Resume container resize listening\n            this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n            this.onRefreshCols();\n        },\n\n        completeRefreshCols: function() {\n            // Delete the internal variable object\n            if (typeof this.refreshCols._ !== 'undefined') {\n                delete this.refreshCols._;\n            }\n\n            this._refreshingCols = false;\n\n            if (this._refreshColsAfterRefresh) {\n                var force = this._forceRefreshColsAfterRefresh;\n                this._refreshColsAfterRefresh = false;\n                this._forceRefreshColsAfterRefresh = false;\n\n                Garnish.requestAnimationFrame($.proxy(function() {\n                    this.refreshCols(force);\n                }, this));\n            }\n        },\n\n        getItemWidth: function(colspan) {\n            return (this.colPctWidth * colspan);\n        },\n\n        getItemWidthCss: function(colspan) {\n            return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n        },\n\n        getItemWidthInPx: function(colspan) {\n            return this.getItemWidth(colspan)/100 * this.$container.width() - this.colGutterDrop;\n        },\n\n        getItemLeftPosCss: function(position) {\n            return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n        },\n\n        getItemLeftPosInPx: function(position) {\n            return (this.getItemWidth(1)/100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n        },\n\n        createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n            (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n        },\n\n        isSimpleLayout: function() {\n            this.isSimpleLayout._ = {};\n\n            for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n                if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                    delete this.isSimpleLayout._;\n                    return false;\n                }\n            }\n\n            delete this.isSimpleLayout._;\n            return true;\n        },\n\n        positionItems: function() {\n            this.positionItems._ = {};\n\n            this.positionItems._.colHeights = [];\n\n            for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n                this.positionItems._.colHeights.push(0);\n            }\n\n            for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n                this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n                this.positionItems._.affectedColHeights = [];\n\n                for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                    this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n                }\n\n                this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n                if (this.positionItems._.top > 0) {\n                    this.positionItems._.top += this.settings.gutter;\n                }\n\n                this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n                // Now add the new heights to those columns\n                for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                    this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n                }\n            }\n\n            // Set the container height\n            this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n            delete this.positionItems._;\n        },\n\n        onItemResize: function(ev) {\n            this.onItemResize._ = {};\n\n            // Prevent this from bubbling up to the container, which has its own resize listener\n            ev.stopPropagation();\n\n            this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n            if (this.onItemResize._.item !== -1) {\n                // Update the height and reposition the items\n                this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n                if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                    this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                    this.positionItems(false);\n                }\n            }\n\n            delete this.onItemResize._;\n        },\n\n        onRefreshCols: function() {\n            this.trigger('refreshCols');\n            this.settings.onRefreshCols();\n        }\n    },\n    {\n        defaults: {\n            itemSelector: '.item',\n            cols: null,\n            maxCols: null,\n            minColWidth: 320,\n            gutter: 14,\n            fillMode: 'top',\n            colClass: 'col',\n            snapToGrid: null,\n\n            onRefreshCols: $.noop\n        }\n    });\n\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend(\n    {\n        grid: null,\n        _: null,\n\n        init: function(grid) {\n            this.grid = grid;\n        },\n\n        createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n            this._ = {};\n\n            // Loop through all possible colspans\n            for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n                this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n                // Loop through all the possible positions for this colspan,\n                // and find the one that is closest to the top\n\n                this._.tallestColHeightsByPosition = [];\n\n                for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                    this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                    this._.colHeightsForPosition = [];\n                    this._.endingCol = this._.position + this._.colspan - 1;\n\n                    for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                        this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                    }\n\n                    this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n                }\n\n                // And the shortest position for this colspan is...\n                this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                // Now log the colspan/position placement\n                this._.positions = prevPositions.slice(0);\n                this._.colspans = prevColspans.slice(0);\n                this._.colHeights = prevColHeights.slice(0);\n                this._.emptySpace = prevEmptySpace;\n\n                this._.positions.push(this._.position);\n                this._.colspans.push(this._.colspan);\n\n                // Add the new heights to those columns\n                this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                    this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n                }\n\n                // If this is the last item, create the layout\n                if (item === this.grid.items.length - 1) {\n                    this.grid.layouts.push({\n                        positions: this._.positions,\n                        colspans: this._.colspans,\n                        colHeights: this._.colHeights,\n                        emptySpace: this._.emptySpace\n                    });\n                }\n                else {\n                    // Dive deeper\n                    this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n                }\n            }\n\n            delete this._;\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n            // Remove inner-word punctuation\n            handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n            // Make it lowercase\n            handle = handle.toLowerCase();\n\n            // Convert extended ASCII characters to basic ASCII\n            handle = Craft.asciiString(handle);\n\n            if (!this.settings.allowNonAlphaStart) {\n                // Handle must start with a letter\n                handle = handle.replace(/^[^a-z]+/, '');\n            }\n\n            // Get the \"words\"\n            var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n            handle = '';\n\n            // Make it camelCase\n            for (var i = 0; i < words.length; i++) {\n                if (i === 0) {\n                    handle += words[i];\n                }\n                else {\n                    handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n                }\n            }\n\n            return handle;\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend(\n    {\n        $container: null,\n        progressBar: null,\n        uploader: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.ImageUpload.defaults);\n            this.initImageUpload();\n        },\n\n        initImageUpload: function() {\n            this.$container = $(this.settings.containerSelector);\n            this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n            var options = {\n                url: Craft.getActionUrl(this.settings.uploadAction),\n                formData: this.settings.postParameters,\n                fileInput: this.$container.find(this.settings.fileInputSelector),\n                paramName: this.settings.uploadParamName\n            };\n\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            options.events = {};\n            options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n            options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n            options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n            options.events.fileuploadfail = $.proxy(this, '_onUploadError');\n\n            this.uploader = new Craft.Uploader(this.$container, options);\n\n            this.initButtons();\n        },\n\n        initButtons: function() {\n            this.$container.find(this.settings.uploadButtonSelector).on('click', $.proxy(function(ev) {\n                this.$container.find(this.settings.fileInputSelector).trigger('click');\n            }, this));\n\n            this.$container.find(this.settings.deleteButtonSelector).on('click', $.proxy(function(ev) {\n                if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                    $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                    Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            this.refreshImage(response);\n                        }\n                    }, this));\n                }\n            }, this));\n        },\n\n        refreshImage: function(response) {\n            $(this.settings.containerSelector).replaceWith(response.html);\n            this.settings.onAfterRefreshImage(response);\n            this.initImageUpload();\n        },\n\n        /**\n         * On upload start.\n         */\n        _onUploadStart: function(event) {\n            this.progressBar.$progressBar.css({\n                top: Math.round(this.$container.outerHeight() / 2) - 6\n            });\n\n            this.$container.addClass('uploading');\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n        },\n\n        /**\n         * On upload progress.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadComplete: function(event, data) {\n            if (data.result.error) {\n                alert(data.result.error);\n            } else {\n                var html = $(data.result.html);\n                this.refreshImage(data.result);\n            }\n\n            // Last file\n            if (this.uploader.isLastUpload()) {\n                this.progressBar.hideProgressBar();\n                this.$container.removeClass('uploading');\n            }\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadError: function(event, data) {\n            if (data.jqXHR.responseJSON.error) {\n                alert(data.jqXHR.responseJSON.error);\n                this.$container.removeClass('uploading');\n                this.progressBar.hideProgressBar();\n                this.progressBar.resetProgressBar();\n            }\n        }\n    },\n    {\n        defaults: {\n            postParameters: {},\n            uploadAction: \"\",\n            deleteAction: \"\",\n            fileInputSelector: \"\",\n\n            onAfterRefreshImage: $.noop,\n            containerSelector: null,\n\n            uploadButtonSelector: null,\n            deleteButtonSelector: null,\n\n            uploadParamName: 'files'\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend(\n    {\n        $icon: null,\n        hud: null,\n\n        init: function(icon) {\n            this.$icon = $(icon);\n            if (this.$icon.data('infoicon')) {\n                Garnish.log('Double-instantiating an info icon on an element');\n                this.$icon.data('infoicon').destroy();\n            }\n            this.$icon.data('infoicon', this);\n            this.addListener(this.$icon, 'click', 'showHud');\n        },\n\n        showHud: function(ev) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            if (!this.hud) {\n                this.hud = new Garnish.HUD(this.$icon, this.$icon.html(), {\n                    hudClass: 'hud info-hud',\n                    closeOtherHUDs: false\n                });\n            }\n            else {\n                this.hud.show();\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend(\n    {\n        settings: null,\n        $outerContainer: null,\n        $innerContainer: null,\n        $input: null,\n        small: false,\n        on: false,\n        indeterminate: false,\n        dragger: null,\n\n        dragStartMargin: null,\n\n        init: function(outerContainer, settings) {\n            this.$outerContainer = $(outerContainer);\n\n            // Is this already a lightswitch?\n            if (this.$outerContainer.data('lightswitch')) {\n                Garnish.log('Double-instantiating a lightswitch on an element');\n                this.$outerContainer.data('lightswitch').destroy();\n            }\n\n            this.$outerContainer.data('lightswitch', this);\n\n            this.small = this.$outerContainer.hasClass('small');\n\n            this.setSettings(settings, Craft.LightSwitch.defaults);\n\n            this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n            this.$input = this.$outerContainer.find('input:first');\n\n            // If the input is disabled, go no further\n            if (this.$input.prop('disabled')) {\n                return;\n            }\n\n            this.on = this.$outerContainer.hasClass('on');\n            this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n            this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n            this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n            this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n                axis: Garnish.X_AXIS,\n                ignoreHandleSelector: null,\n                onDragStart: $.proxy(this, '_onDragStart'),\n                onDrag: $.proxy(this, '_onDrag'),\n                onDragStop: $.proxy(this, '_onDragStop')\n            });\n\n            if (this.$outerContainer.attr('id')) {\n                $(`label[for=\"${this.$outerContainer.attr('id')}\"]`).on('click', () => {\n                    this.$outerContainer.focus();\n                });\n            }\n\n            // Does the input have on/off labels?\n            let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n            if ($wrapper.length) {\n                this.addListener($wrapper.children('label[data-toggle=\"off\"]'), 'click', this.turnOff);\n                this.addListener($wrapper.children('label[data-toggle=\"on\"]'), 'click', this.turnOn);\n            }\n        },\n\n        turnOn: function(muteEvent) {\n            var changed = !this.on;\n\n            this.on = true;\n            this.indeterminate = false;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val(this.settings.value);\n            this.$outerContainer.addClass('on');\n            this.$outerContainer.removeClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'true');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        turnOff: function(muteEvent) {\n            var changed = this.on || this.indeterminate;\n\n            this.on = false;\n            this.indeterminate = false;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = this._getOffMargin();\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val('');\n            this.$outerContainer.removeClass('on');\n            this.$outerContainer.removeClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'false');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        turnIndeterminate: function(muteEvent) {\n            var changed = !this.indeterminate;\n\n            this.on = false;\n            this.indeterminate = true;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val(this.settings.indeterminateValue);\n            this.$outerContainer.removeClass('on');\n            this.$outerContainer.addClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'mixed');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        toggle: function() {\n            if (this.indeterminate || !this.on) {\n                this.turnOn();\n            } else {\n                this.turnOff();\n            }\n        },\n\n        onChange: function() {\n            this.trigger('change');\n            this.settings.onChange(this.on);\n            this.$outerContainer.trigger('change');\n        },\n\n        _onMouseDown: function() {\n            this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n        },\n\n        _onMouseUp: function() {\n            this.removeListener(Garnish.$doc, 'mouseup');\n\n            // Was this a click?\n            if (!this.dragger.dragging) {\n                this.toggle();\n            }\n        },\n\n        _onKeyDown: function(event) {\n            switch (event.keyCode) {\n                case Garnish.SPACE_KEY: {\n                    this.toggle();\n                    event.preventDefault();\n                    break;\n                }\n                case Garnish.RIGHT_KEY: {\n                    if (Craft.orientation === 'ltr') {\n                        this.turnOn();\n                    }\n                    else {\n                        this.turnOff();\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n                case Garnish.LEFT_KEY: {\n                    if (Craft.orientation === 'ltr') {\n                        this.turnOff();\n                    }\n                    else {\n                        this.turnOn();\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n            }\n        },\n\n        _getMargin: function() {\n            return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n        },\n\n        _onDragStart: function() {\n            this.$outerContainer.addClass('dragging');\n            this.dragStartMargin = this._getMargin();\n        },\n\n        _onDrag: function() {\n            var margin;\n\n            if (Craft.orientation === 'ltr') {\n                margin = this.dragStartMargin + this.dragger.mouseDistX;\n            }\n            else {\n                margin = this.dragStartMargin - this.dragger.mouseDistX;\n            }\n\n            if (margin < this._getOffMargin()) {\n                margin = this._getOffMargin();\n            }\n            else if (margin > 0) {\n                margin = 0;\n            }\n\n            this.$innerContainer.css('margin-' + Craft.left, margin);\n        },\n\n        _onDragStop: function() {\n            var margin = this._getMargin();\n            console.log(margin);\n\n            if (margin > (this._getOffMargin() / 2)) {\n                this.turnOn();\n            } else {\n                this.turnOff();\n            }\n        },\n\n        _onSettle: function() {\n            this.$outerContainer.removeClass('dragging');\n        },\n\n        destroy: function() {\n            this.base();\n            this.dragger.destroy();\n        },\n\n        _getOffMargin: function() {\n            return (this.small ? -10 : -12);\n        }\n    }, {\n        animationDuration: 100,\n        defaults: {\n            value: '1',\n            indeterminateValue: '-',\n            onChange: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend(\n    {\n        $extraFields: null,\n        $trigger: null,\n        $shade: null,\n        $editorContainer: null,\n        $editor: null,\n        $dragHandle: null,\n        $previewContainer: null,\n        $iframeContainer: null,\n        $iframe: null,\n        $fieldPlaceholder: null,\n\n        previewUrl: null,\n        token: null,\n        basePostData: null,\n        inPreviewMode: false,\n        fields: null,\n        lastPostData: null,\n        updateIframeInterval: null,\n        loading: false,\n        checkAgain: false,\n\n        dragger: null,\n        dragStartEditorWidth: null,\n\n        _slideInOnIframeLoad: false,\n        _handleSuccessProxy: null,\n        _handleErrorProxy: null,\n        _forceUpdateIframeProxy: null,\n\n        _scrollX: null,\n        _scrollY: null,\n\n        _editorWidth: null,\n        _editorWidthInPx: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.LivePreview.defaults);\n\n            // Should preview requests use a specific URL?\n            // This won't affect how the request gets routed (the action param will override it),\n            // but it will allow the templates to change behavior based on the request URI.\n            if (this.settings.previewUrl) {\n                this.previewUrl = this.settings.previewUrl;\n            }\n            else {\n                this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n            }\n\n            // Load the preview over SSL if the current request is\n            if (document.location.protocol === 'https:') {\n                this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n            }\n\n            // Set the base post data\n            this.basePostData = $.extend({}, this.settings.previewParams);\n\n            this._handleSuccessProxy = $.proxy(this, 'handleSuccess');\n            this._handleErrorProxy = $.proxy(this, 'handleError');\n            this._forceUpdateIframeProxy = $.proxy(this, 'forceUpdateIframe');\n\n            // Find the DOM elements\n            this.$extraFields = $(this.settings.extraFields);\n            this.$trigger = $(this.settings.trigger);\n            this.$fieldPlaceholder = $('<div/>');\n\n            // Set the initial editor width\n            this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n            // Event Listeners\n            this.addListener(this.$trigger, 'activate', 'toggle');\n\n            Craft.cp.on('beforeSaveShortcut', $.proxy(function() {\n                if (this.inPreviewMode) {\n                    this.moveFieldsBack();\n                }\n            }, this));\n        },\n\n        get editorWidth() {\n            return this._editorWidth;\n        },\n\n        get editorWidthInPx() {\n            return this._editorWidthInPx;\n        },\n\n        set editorWidth(width) {\n            var inPx;\n\n            // Is this getting set in pixels?\n            if (width >= 1) {\n                inPx = width;\n                width /= Garnish.$win.width();\n            }\n            else {\n                inPx = Math.round(width * Garnish.$win.width());\n            }\n\n            // Make sure it's no less than the minimum\n            if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n                inPx = Craft.LivePreview.minEditorWidthInPx;\n                width = inPx / Garnish.$win.width();\n            }\n\n            this._editorWidth = width;\n            this._editorWidthInPx = inPx;\n        },\n\n        toggle: function() {\n            if (this.inPreviewMode) {\n                this.exit();\n            }\n            else {\n                this.enter();\n            }\n        },\n\n        enter: function() {\n            if (this.inPreviewMode) {\n                return;\n            }\n\n            if (!this.token) {\n                this.createToken();\n                return;\n            }\n\n            this.trigger('beforeEnter');\n\n            $(document.activeElement).trigger('blur');\n\n            if (!this.$editor) {\n                this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n                this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n                this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n                this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n                var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n                this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n                this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n                var $closeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Close Preview'),\n                }).appendTo($editorHeader);\n                $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n                let $saveBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Save'),\n                }).appendTo($editorHeader);\n\n                this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                    axis: Garnish.X_AXIS,\n                    onDragStart: $.proxy(this, '_onDragStart'),\n                    onDrag: $.proxy(this, '_onDrag'),\n                    onDragStop: $.proxy(this, '_onDragStop')\n                });\n\n                this.addListener($closeBtn, 'click', 'exit');\n                this.addListener($saveBtn, 'click', 'save');\n            }\n\n            // Set the sizes\n            this.handleWindowResize();\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n            this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n            this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            this.fields = [];\n            var $fields = $(this.settings.fields);\n\n            for (var i = 0; i < $fields.length; i++) {\n                var $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n\n            if (this.updateIframe()) {\n                this._slideInOnIframeLoad = true;\n            } else {\n                this.slideIn();\n            }\n\n            Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n            Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.inPreviewMode = true;\n            this.trigger('enter');\n        },\n\n        createToken: function() {\n            Craft.postActionRequest('live-preview/create-token', {\n                previewAction: this.settings.previewAction\n            }, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.token = response.token;\n                    this.enter();\n                }\n            }, this));\n        },\n\n        save: function() {\n            Craft.cp.submitPrimaryForm();\n        },\n\n        handleWindowResize: function() {\n            // Reset the width so the min width is enforced\n            this.editorWidth = this.editorWidth;\n\n            // Update the editor/iframe sizes\n            this.updateWidths();\n        },\n\n        slideIn: function() {\n            $('html').addClass('noscroll');\n            this.$shade.velocity('fadeIn');\n\n            this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', $.proxy(function() {\n                this.trigger('slideIn');\n                Garnish.$win.trigger('resize');\n            }, this));\n\n            this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', $.proxy(function() {\n                this.updateIframeInterval = setInterval($.proxy(this, 'updateIframe'), 1000);\n\n                this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                    if (ev.keyCode === Garnish.ESC_KEY) {\n                        this.exit();\n                    }\n                });\n            }, this));\n        },\n\n        exit: function() {\n            if (!this.inPreviewMode) {\n                return;\n            }\n\n            this.trigger('beforeExit');\n\n            $('html').removeClass('noscroll');\n\n            this.removeListener(Garnish.$win, 'resize');\n            this.removeListener(Garnish.$bod, 'keyup');\n\n            if (this.updateIframeInterval) {\n                clearInterval(this.updateIframeInterval);\n            }\n\n            this.moveFieldsBack();\n\n            this.$shade.delay(200).velocity('fadeOut');\n\n            this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', $.proxy(function() {\n                for (var i = 0; i < this.fields.length; i++) {\n                    this.fields[i].$newClone.remove();\n                }\n                this.$editorContainer.hide();\n                this.trigger('slideOut');\n            }, this));\n\n            this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', $.proxy(function() {\n                this.$previewContainer.hide();\n            }, this));\n\n            Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.inPreviewMode = false;\n            this.trigger('exit');\n        },\n\n        moveFieldsBack: function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                var field = this.fields[i];\n                field.$newClone = this._getClone(field.$field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter(field.$field);\n                field.$field.detach();\n                this.$fieldPlaceholder.replaceWith(field.$newClone);\n                field.$clone.replaceWith(field.$field);\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        getIframeWidth: function() {\n            return Garnish.$win.width() - this.editorWidthInPx;\n        },\n\n        updateWidths: function() {\n            this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n            this.$previewContainer.width(this.getIframeWidth());\n        },\n\n        updateIframe: function(force) {\n            if (force) {\n                this.lastPostData = null;\n            }\n\n            if (!this.inPreviewMode) {\n                return false;\n            }\n\n            if (this.loading) {\n                this.checkAgain = true;\n                return false;\n            }\n\n            // Has the post data changed?\n            var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n            if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n                this.lastPostData = postData;\n                this.loading = true;\n\n                var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n                this._scrollX = $doc ? $doc.scrollLeft() : 0;\n                this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n                $.ajax({\n                    url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                    method: 'POST',\n                    data: $.extend({}, postData, this.basePostData),\n                    headers: {\n                        'X-Craft-Token': this.token\n                    },\n                    xhrFields: {\n                        withCredentials: true\n                    },\n                    crossDomain: true,\n                    success: this._handleSuccessProxy,\n                    error: this._handleErrorProxy\n                });\n\n                return true;\n            }\n            else {\n                return false;\n            }\n        },\n\n        forceUpdateIframe: function() {\n            return this.updateIframe(true);\n        },\n\n        handleSuccess: function(data) {\n            var html = data +\n                '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n            // Create a new iframe\n            var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n            if (this.$iframe) {\n                $iframe.insertBefore(this.$iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            this.addListener($iframe, 'load', function() {\n                if (this.$iframe) {\n                    this.$iframe.remove();\n                }\n                this.$iframe = $iframe;\n\n                if (this._slideInOnIframeLoad) {\n                    this.slideIn();\n                    this._slideInOnIframeLoad = false;\n                }\n\n                this.removeListener($iframe, 'load');\n            });\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                $iframe[0].contentWindow.document.open();\n                $iframe[0].contentWindow.document.write(html);\n                $iframe[0].contentWindow.document.close();\n                this.onResponse();\n            }, this));\n        },\n\n        handleError: function() {\n            this.onResponse();\n        },\n\n        onResponse: function() {\n            this.loading = false;\n\n            if (this.checkAgain) {\n                this.checkAgain = false;\n                this.updateIframe();\n            }\n        },\n\n        _getClone: function($field) {\n            var $clone = $field.clone();\n\n            // clone() won't account for input values that have changed since the original HTML set them\n            Garnish.copyInputValues($field, $clone);\n\n            // Remove any id= attributes\n            $clone.attr('id', '');\n            $clone.find('[id]').attr('id', '');\n\n            return $clone;\n        },\n\n        _onDragStart: function() {\n            this.dragStartEditorWidth = this.editorWidthInPx;\n            this.$previewContainer.addClass('dragging');\n        },\n\n        _onDrag: function() {\n            if (Craft.orientation === 'ltr') {\n                this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n            }\n            else {\n                this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n            }\n\n            this.updateWidths();\n        },\n\n        _onDragStop: function() {\n            this.$previewContainer.removeClass('dragging');\n            Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n        }\n    },\n    {\n        defaultEditorWidth: 0.33,\n        minEditorWidthInPx: 320,\n\n        defaults: {\n            trigger: '.livepreviewbtn',\n            fields: null,\n            extraFields: null,\n            previewUrl: null,\n            previewAction: null,\n            previewParams: {}\n        }\n    });\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend(\n    {\n        $passwordWrapper: null,\n        $passwordInput: null,\n        $textInput: null,\n        $currentInput: null,\n\n        $showPasswordToggle: null,\n        showingPassword: null,\n\n        init: function(passwordInput, settings) {\n            this.$passwordInput = $(passwordInput);\n            this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n            this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n            // Is this already a password input?\n            if (this.$passwordInput.data('passwordInput')) {\n                Garnish.log('Double-instantiating a password input on an element');\n                this.$passwordInput.data('passwordInput').destroy();\n            }\n\n            this.$passwordInput.data('passwordInput', this);\n\n            this.$showPasswordToggle = $('<a/>').addClass('invisible');\n            this.$showPasswordToggle.addClass('password-toggle');\n            this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n            this.initInputFocusEvents(this.$passwordInput);\n            this.addListener(this.$showPasswordToggle, 'mousedown', 'onToggleMouseDown');\n            this.hidePassword();\n        },\n\n        setCurrentInput: function($input) {\n            if (this.$currentInput) {\n                // Swap the inputs, while preventing the focus animation\n                $input.insertAfter(this.$currentInput);\n                this.$currentInput.detach();\n                $input.trigger('focus');\n\n                // Restore the input value\n                $input.val(this.$currentInput.val());\n            }\n\n            this.$currentInput = $input;\n\n            this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n        },\n\n        updateToggleLabel: function(label) {\n            this.$showPasswordToggle.text(label);\n        },\n\n        initInputFocusEvents: function($input) {\n            this.addListener($input, 'focus', function() {\n                this.$passwordWrapper.addClass('focus');\n            });\n            this.addListener($input, 'blur', function() {\n                this.$passwordWrapper.removeClass('focus');\n            });\n        },\n\n        showPassword: function() {\n            if (this.showingPassword) {\n                return;\n            }\n\n            if (!this.$textInput) {\n                this.$textInput = this.$passwordInput.clone(true);\n                this.$textInput.attr('type', 'text');\n                this.initInputFocusEvents(this.$textInput);\n            }\n\n            this.setCurrentInput(this.$textInput);\n            this.updateToggleLabel(Craft.t('app', 'Hide'));\n            this.showingPassword = true;\n        },\n\n        hidePassword: function() {\n            // showingPassword could be null, which is acceptable\n            if (this.showingPassword === false) {\n                return;\n            }\n\n            this.setCurrentInput(this.$passwordInput);\n            this.updateToggleLabel(Craft.t('app', 'Show'));\n            this.showingPassword = false;\n\n            // Alt key temporarily shows the password\n            this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n        },\n\n        togglePassword: function() {\n            if (this.showingPassword) {\n                this.hidePassword();\n            }\n            else {\n                this.showPassword();\n            }\n\n            this.settings.onToggleInput(this.$currentInput);\n        },\n\n        onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n                this.showPassword();\n                this.$showPasswordToggle.addClass('invisible');\n                this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n            }\n        },\n\n        onKeyUp: function(ev) {\n            ev.preventDefault();\n\n            if (ev.keyCode === Garnish.ALT_KEY) {\n                this.hidePassword();\n                this.$showPasswordToggle.removeClass('invisible');\n            }\n        },\n\n        onInputChange: function() {\n            if (this.$currentInput.val()) {\n                this.$showPasswordToggle.removeClass('invisible');\n            }\n            else {\n                this.$showPasswordToggle.addClass('invisible');\n            }\n        },\n\n        onToggleMouseDown: function(ev) {\n            // Prevent focus change\n            ev.preventDefault();\n\n            if (this.$currentInput[0].setSelectionRange) {\n                var selectionStart = this.$currentInput[0].selectionStart,\n                    selectionEnd = this.$currentInput[0].selectionEnd;\n\n                this.togglePassword();\n                this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n            }\n            else {\n                this.togglePassword();\n            }\n        }\n    },\n    {\n        defaults: {\n            onToggleInput: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend(\n    {\n        draftEditor: null,\n\n        $shade: null,\n        $editorContainer: null,\n        $editor: null,\n        $spinner: null,\n        $statusIcon: null,\n        $dragHandle: null,\n        $previewContainer: null,\n        $iframeContainer: null,\n        $targetBtn: null,\n        $targetMenu: null,\n        $iframe: null,\n        iframeLoaded: false,\n        $tempInput: null,\n        $fieldPlaceholder: null,\n\n        isActive: false,\n        isVisible: false,\n        activeTarget: 0,\n        draftId: null,\n        url: null,\n        fields: null,\n\n        iframeHeight: null,\n        scrollTop: null,\n\n        dragger: null,\n        dragStartEditorWidth: null,\n\n        _updateIframeProxy: null,\n\n        _editorWidth: null,\n        _editorWidthInPx: null,\n\n        init: function(draftEditor) {\n            this.draftEditor = draftEditor;\n\n            this._updateIframeProxy = $.proxy(this,'updateIframe');\n\n            this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n            this.$fieldPlaceholder = $('<div/>');\n\n            // Set the initial editor width\n            this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n        },\n\n        get editorWidth() {\n            return this._editorWidth;\n        },\n\n        get editorWidthInPx() {\n            return this._editorWidthInPx;\n        },\n\n        set editorWidth(width) {\n            var inPx;\n\n            // Is this getting set in pixels?\n            if (width >= 1) {\n                inPx = width;\n                width /= Garnish.$win.width();\n            } else {\n                inPx = Math.round(width * Garnish.$win.width());\n            }\n\n            // Make sure it's no less than the minimum\n            if (inPx < Craft.Preview.minEditorWidthInPx) {\n                inPx = Craft.Preview.minEditorWidthInPx;\n                width = inPx / Garnish.$win.width();\n            }\n\n            this._editorWidth = width;\n            this._editorWidthInPx = inPx;\n        },\n\n        open: function() {\n            if (this.isActive) {\n                return;\n            }\n\n            this.isActive = true;\n            this.trigger('beforeOpen');\n\n            $(document.activeElement).trigger('blur');\n\n            if (!this.$editor) {\n                this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n                this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n                this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n                var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n                this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n                this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n                var $closeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Close Preview'),\n                }).appendTo($editorHeader);\n                $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n                this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n                this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    var $previewHeader = $('<header/>', {'class': 'lp-preview-header flex'}).appendTo(this.$previewContainer);\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo($previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    var $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    var $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n                }\n\n                this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n                this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                    axis: Garnish.X_AXIS,\n                    onDragStart: this._onDragStart.bind(this),\n                    onDrag: this._onDrag.bind(this),\n                    onDragStop: this._onDragStop.bind(this),\n                });\n\n                this.addListener($closeBtn, 'click', 'close');\n                this.addListener(this.$statusIcon, 'click', () => {\n                    this.draftEditor.showStatusHud(this.$statusIcon);\n                });\n            }\n\n            // Set the sizes\n            this.handleWindowResize();\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n            this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n            this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n            // Find the fields, excluding nested fields\n            this.fields = [];\n            var $fields = $('#content .field').not($('#content .field .field'));\n\n            if ($fields.length) {\n                // Insert our temporary input before the first field so we know where to swap in the serialized form values\n                this.$tempInput.insertBefore($fields.get(0));\n\n                // Move all the fields into the editor rather than copying them\n                // so any JS that's referencing the elements won't break.\n                for (let i = 0; i < $fields.length; i++) {\n                    let $field = $($fields[i]),\n                        $clone = this._getClone($field);\n\n                    // It's important that the actual field is added to the DOM *after* the clone,\n                    // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                    this.$fieldPlaceholder.insertAfter($field);\n                    $field.detach();\n                    this.$fieldPlaceholder.replaceWith($clone);\n                    $field.appendTo(this.$editor);\n\n                    this.fields.push({\n                        $field: $field,\n                        $clone: $clone\n                    });\n                }\n            }\n\n            this.updateIframe();\n\n            this.draftEditor.on('update', this._updateIframeProxy);\n            Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n            Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.trigger('open');\n        },\n\n        switchTarget: function(i) {\n            this.activeTarget = i;\n            this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n            this.$targetMenu.find('a.sel').removeClass('sel');\n            this.$targetMenu.find('a').eq(i).addClass('sel');\n            this.updateIframe(true);\n            this.trigger('switchTarget', {\n                previewTarget: this.draftEditor.settings.previewTargets[i],\n            });\n        },\n\n        handleWindowResize: function() {\n            // Reset the width so the min width is enforced\n            this.editorWidth = this.editorWidth;\n\n            // Update the editor/iframe sizes\n            this.updateWidths();\n        },\n\n        slideIn: function() {\n            if (!this.isActive || this.isVisible) {\n                return;\n            }\n\n            $('html').addClass('noscroll');\n            this.$shade.velocity('fadeIn');\n\n            this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n                this.trigger('slideIn');\n                Garnish.$win.trigger('resize');\n            });\n\n            this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n                this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                    if (ev.keyCode === Garnish.ESC_KEY) {\n                        this.close();\n                    }\n                });\n            });\n\n            this.isVisible = true;\n        },\n\n        close: function() {\n            if (!this.isActive || !this.isVisible) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n\n            $('html').removeClass('noscroll');\n\n            this.removeListener(Garnish.$win, 'resize');\n            this.removeListener(Garnish.$bod, 'keyup');\n\n            // Remove our temporary input and move the preview fields back into place\n            this.$tempInput.detach();\n            this.moveFieldsBack();\n\n            this.$shade.delay(200).velocity('fadeOut');\n\n            this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n                for (var i = 0; i < this.fields.length; i++) {\n                    this.fields[i].$newClone.remove();\n                }\n                this.$editorContainer.hide();\n                this.trigger('slideOut');\n            });\n\n            this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n                this.$previewContainer.hide();\n            });\n\n            this.draftEditor.off('update', this._updateIframeProxy);\n            Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n            Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.isActive = false;\n            this.isVisible = false;\n            this.trigger('close');\n        },\n\n        moveFieldsBack: function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                var field = this.fields[i];\n                field.$newClone = this._getClone(field.$field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter(field.$field);\n                field.$field.detach();\n                this.$fieldPlaceholder.replaceWith(field.$newClone);\n                field.$clone.replaceWith(field.$field);\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        getIframeWidth: function() {\n            return Garnish.$win.width() - this.editorWidthInPx;\n        },\n\n        updateWidths: function() {\n            this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n            this.$previewContainer.width(this.getIframeWidth());\n        },\n\n        _useIframeResizer: function() {\n            return Craft.previewIframeResizerOptions !== false;\n        },\n\n        updateIframe: function(resetScroll) {\n            if (!this.isActive) {\n                return false;\n            }\n\n            // Ignore non-boolean resetScroll values\n            resetScroll = resetScroll === true;\n\n            var target = this.draftEditor.settings.previewTargets[this.activeTarget];\n            var refresh = !!(\n                this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n                !this.$iframe ||\n                resetScroll ||\n                typeof target.refresh === 'undefined' ||\n                target.refresh\n            );\n\n            this.trigger('beforeUpdateIframe', {\n                previewTarget: target,\n                resetScroll: resetScroll,\n                refresh: refresh,\n            });\n\n            // If this is an existing preview target, make sure it wants to be refreshed automatically\n            if (!refresh) {\n                this.slideIn();\n                return;\n            }\n\n            this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n                // Maintain the current scroll position?\n                let sameHost;\n                if (resetScroll) {\n                    this.scrollTop = null;\n                } else if (this.iframeLoaded && this.$iframe) {\n                    if (this._useIframeResizer()) {\n                        this.iframeHeight = this.$iframe.height();\n                        this.scrollTop = this.$iframeContainer.scrollTop();\n                    } else {\n                        sameHost = Craft.isSameHost(url);\n                        if (sameHost && this.$iframe[0].contentWindow) {\n                            this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                        }\n                    }\n                }\n\n                this.iframeLoaded = false;\n\n                var $iframe = $('<iframe/>', {\n                    'class': 'lp-preview',\n                    frameborder: 0,\n                    src: url,\n                });\n\n                if (this.$iframe) {\n                    this.$iframe.replaceWith($iframe);\n                } else {\n                    $iframe.appendTo(this.$iframeContainer);\n                }\n\n                // Keep the iframe height consistent with its content\n                if (this._useIframeResizer()) {\n                    if (!resetScroll && this.iframeHeight !== null) {\n                        $iframe.height(this.iframeHeight);\n                        this.$iframeContainer.scrollTop(this.scrollTop);\n                    }\n\n                    iFrameResize($.extend({\n                        checkOrigin: false,\n                        // Allow iframe scrolling until we've successfully initialized the resizer\n                        scrolling: true,\n                        onInit: iframe => {\n                            this.iframeLoaded = true;\n                            this.iframeHeight = null;\n                            this.scrollTop = null;\n                            iframe.scrolling = 'no';\n                        },\n                    }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n                } else {\n                    $iframe.on('load', () => {\n                        this.iframeLoaded = true;\n                        if (!resetScroll && sameHost && this.scrollTop !== null) {\n                            $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                        }\n                    });\n                }\n\n                this.url = url;\n                this.$iframe = $iframe;\n\n                this.trigger('afterUpdateIframe', {\n                    previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                    $iframe: this.$iframe,\n                });\n\n                this.slideIn();\n            });\n        },\n\n        _getClone: function($field) {\n            var $clone = $field.clone();\n\n            // clone() won't account for input values that have changed since the original HTML set them\n            Garnish.copyInputValues($field, $clone);\n\n            // Remove any id= attributes\n            $clone.attr('id', '');\n            $clone.find('[id]').attr('id', '');\n\n            // Disable anything with a name attribute\n            $clone.find('[name]').prop('disabled', true);\n\n            return $clone;\n        },\n\n        _onDragStart: function() {\n            this.dragStartEditorWidth = this.editorWidthInPx;\n            this.$previewContainer.addClass('dragging');\n        },\n\n        _onDrag: function() {\n            if (Craft.orientation === 'ltr') {\n                this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n            } else {\n                this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n            }\n\n            this.updateWidths();\n        },\n\n        _onDragStop: function() {\n            this.$previewContainer.removeClass('dragging');\n            Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n        }\n    },\n    {\n        defaultEditorWidth: 0.33,\n        minEditorWidthInPx: 320,\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend(\n    {\n        assetId: null,\n        $spinner: null,\n        elementSelect: null,\n        type: null,\n        loaded: null,\n        requestId: 0,\n\n        /**\n         * Initialize the preview file modal.\n         * @returns {*|void}\n         */\n        init: function(assetId, elementSelect, settings) {\n            settings = $.extend(this.defaultSettings, settings);\n\n            settings.onHide = this._onHide.bind(this);\n\n            if (Craft.PreviewFileModal.openInstance) {\n                var instance = Craft.PreviewFileModal.openInstance;\n\n                if (instance.assetId !== assetId) {\n                    instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                    instance.elementSelect = elementSelect;\n                }\n\n                return this.destroy();\n            }\n\n            Craft.PreviewFileModal.openInstance = this;\n            this.elementSelect = elementSelect;\n\n            this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n            this.base(this.$container, $.extend({\n                resizable: true\n            }, settings));\n\n            // Cut the flicker, just show the nice person the preview.\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.show().css('opacity', 1);\n\n                this.$shade.velocity('stop');\n                this.$shade.show().css('opacity', 1);\n            }\n\n            this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n        },\n\n        /**\n         * When hiding, remove all traces and focus last focused element.\n         * @private\n         */\n        _onHide: function () {\n            Craft.PreviewFileModal.openInstance = null;\n            if (this.elementSelect) {\n                this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n            }\n\n            this.$shade.remove();\n\n            return this.destroy();\n        },\n\n        /**\n         * Disappear immediately forever.\n         * @returns {boolean}\n         */\n        selfDestruct: function () {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            instance.hide();\n            instance.$shade.remove();\n            instance.destroy();\n\n            Craft.PreviewFileModal.openInstance = null;\n\n            return true;\n        },\n\n        /**\n         * Load an asset, using starting width and height, if applicable\n         * @param assetId\n         * @param startingWidth\n         * @param startingHeight\n         */\n        loadAsset: function (assetId, startingWidth, startingHeight) {\n            this.assetId = assetId;\n\n            this.$container.empty();\n            this.loaded = false;\n\n            this.desiredHeight = null;\n            this.desiredWidth = null;\n\n            var containerHeight = Garnish.$win.height() * 0.66;\n            var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = containerWidth / 4 * 3;\n\n            if (startingWidth && startingHeight) {\n                var ratio = startingWidth / startingHeight;\n                containerWidth =  Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n                containerWidth = containerHeight * ratio;\n\n                // This might actually have put width over the viewport limits, so doublecheck\n                if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                    containerWidth =  Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                    containerHeight = containerWidth / ratio;\n                }\n            }\n\n            this._resizeContainer(containerWidth, containerHeight);\n\n            this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n            var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n                left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n            this.$spinner.css({left: left, top: top, position: 'absolute'});\n            this.requestId++;\n\n            Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, function(response, textStatus) {\n                this.$container.removeClass('loading');\n                this.$spinner.remove();\n                this.loaded = true;\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        if (response.requestId != this.requestId) {\n                            return;\n                        }\n\n                        if (!response.previewHtml) {\n                            this.$container.addClass('zilch');\n                            this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                            return;\n                        }\n\n                        this.$container.removeClass('zilch');\n                        this.$container.append(response.previewHtml);\n                        Craft.appendHeadHtml(response.headHtml);\n                        Craft.appendFootHtml(response.footHtml);\n                    } else {\n                        alert(response.error);\n\n                        this.hide();\n                    }\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Resize the container to specified dimensions\n         * @param containerWidth\n         * @param containerHeight\n         * @private\n         */\n        _resizeContainer: function (containerWidth, containerHeight) {\n            this.$container.css({\n                'width': containerWidth,\n                'min-width': containerWidth,\n                'max-width': containerWidth,\n                'height': containerHeight,\n                'min-height': containerHeight,\n                'max-height': containerHeight,\n                'top': (Garnish.$win.height() - containerHeight) / 2,\n                'left': (Garnish.$win.width() - containerWidth) / 2\n            });\n        }\n    },\n    {\n        defaultSettings: {\n            startingWidth: null,\n            startingHeight: null\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend(\n    {\n        $progressBar: null,\n        $innerProgressBar: null,\n        $progressBarStatus: null,\n\n        _itemCount: 0,\n        _processedItemCount: 0,\n        _displaySteps: false,\n\n        init: function($element, displaySteps) {\n            if (displaySteps) {\n                this._displaySteps = true;\n            }\n\n            this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n            this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n            this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n            this.resetProgressBar();\n        },\n\n        /**\n         * Reset the progress bar\n         */\n        resetProgressBar: function() {\n            // Since setting the progress percentage implies that there is progress to be shown\n            // It removes the pending class - we must add it back.\n            this.setProgressPercentage(100);\n            this.$progressBar.addClass('pending');\n\n            // Reset all the counters\n            this.setItemCount(1);\n            this.setProcessedItemCount(0);\n            this.$progressBarStatus.html('');\n\n            if (this._displaySteps) {\n                this.$progressBar.addClass('has-status');\n            }\n        },\n\n        /**\n         * Fade to invisible, hide it using a class and reset opacity to visible\n         */\n        hideProgressBar: function() {\n            this.$progressBar.fadeTo('fast', 0.01, $.proxy(function() {\n                this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n            }, this));\n        },\n\n        showProgressBar: function() {\n            this.$progressBar.removeClass('hidden');\n            this.$progressBarStatus.removeClass('hidden');\n        },\n\n        setItemCount: function(count) {\n            this._itemCount = count;\n        },\n\n        incrementItemCount: function(count) {\n            this._itemCount += count;\n        },\n\n        setProcessedItemCount: function(count) {\n            this._processedItemCount = count;\n        },\n\n        incrementProcessedItemCount: function(count) {\n            this._processedItemCount += count;\n        },\n\n        updateProgressBar: function() {\n            // Only fools would allow accidental division by zero.\n            this._itemCount = Math.max(this._itemCount, 1);\n\n            var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n            this.setProgressPercentage(width);\n\n            if (this._displaySteps) {\n                this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n            }\n        },\n\n        setProgressPercentage: function(percentage, animate) {\n            if (percentage === 0) {\n                this.$progressBar.addClass('pending');\n            }\n            else {\n                this.$progressBar.removeClass('pending');\n\n                if (animate) {\n                    this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n                }\n                else {\n                    this.$innerProgressBar.velocity('stop').width(percentage + '%');\n                }\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, $.proxy(this, '_handleBatchPromptSelection'), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice: choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            }\n            else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        }\n        else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', $.proxy(function() {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        }, this));\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value: value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n","/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', $.proxy(this, '_handleResize'));\n        this.addListener(this.$container, 'tapstart', $.proxy(this, '_handleTapStart'));\n        this.addListener(Garnish.$bod, 'tapmove', $.proxy(this, '_handleTapMove'));\n        this.addListener(Garnish.$bod, 'tapend', $.proxy(this, '_handleTapEnd'));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout($.proxy(function() {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, this), 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        }\n        else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (( ( this.$graduations.width() / 2 ) + (position * -1) ) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n            // Remove inner-word punctuation\n            sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n            // Make it lowercase\n            if (!Craft.allowUppercaseInSlug) {\n                sourceVal = sourceVal.toLowerCase();\n            }\n\n            if (Craft.limitAutoSlugsToAscii) {\n                // Convert extended ASCII characters to basic ASCII\n                sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n            }\n\n            // Get the \"words\". Split on anything that is not alphanumeric.\n            // Reference: http://www.regular-expressions.info/unicode.html\n            var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n            if (words.length) {\n                return words.join(Craft.slugWordSeparator);\n            }\n            else {\n                return '';\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend(\n    {\n        id: null,\n\n        $container: null,\n        state: null,\n        structureDrag: null,\n\n        /**\n         * Init\n         */\n        init: function(id, container, settings) {\n            this.id = id;\n            this.$container = $(container);\n            this.setSettings(settings, Craft.Structure.defaults);\n\n            // Is this already a structure?\n            if (this.$container.data('structure')) {\n                Garnish.log('Double-instantiating a structure on an element');\n                this.$container.data('structure').destroy();\n            }\n\n            this.$container.data('structure', this);\n\n            this.state = {};\n\n            if (this.settings.storageKey) {\n                $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n            }\n\n            if (typeof this.state.collapsedElementIds === 'undefined') {\n                this.state.collapsedElementIds = [];\n            }\n\n            var $parents = this.$container.find('ul').prev('.row');\n\n            for (var i = 0; i < $parents.length; i++) {\n                var $row = $($parents[i]),\n                    $li = $row.parent(),\n                    $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n                if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                    $li.addClass('collapsed');\n                }\n\n                this.initToggle($toggle);\n            }\n\n            if (this.settings.sortable) {\n                this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n            }\n\n            if (this.settings.newChildUrl) {\n                this.initNewChildMenus(this.$container.find('.add'));\n            }\n        },\n\n        initToggle: function($toggle) {\n            $toggle.on('click', $.proxy(function(ev) {\n                var $li = $(ev.currentTarget).closest('li'),\n                    elementId = $li.children('.row').find('.element:first').data('id'),\n                    viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n                if ($li.hasClass('collapsed')) {\n                    $li.removeClass('collapsed');\n\n                    if (viewStateKey !== -1) {\n                        this.state.collapsedElementIds.splice(viewStateKey, 1);\n                    }\n                }\n                else {\n                    $li.addClass('collapsed');\n\n                    if (viewStateKey === -1) {\n                        this.state.collapsedElementIds.push(elementId);\n                    }\n                }\n\n                if (this.settings.storageKey) {\n                    Craft.setLocalStorage(this.settings.storageKey, this.state);\n                }\n            }, this));\n        },\n\n        initNewChildMenus: function($addBtns) {\n            this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n        },\n\n        onNewChildMenuClick: function(ev) {\n            var $btn = $(ev.currentTarget);\n\n            if (!$btn.data('menubtn')) {\n                var elementId = $btn.parent().children('.element').data('id'),\n                    newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n                $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n                var menuBtn = new Garnish.MenuBtn($btn);\n                menuBtn.showMenu();\n            }\n        },\n\n        getIndent: function(level) {\n            return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n        },\n\n        addElement: function($element) {\n            var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n                $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n            $row.append($element);\n\n            if (this.settings.sortable) {\n                $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n                this.structureDrag.addItems($li);\n            }\n\n            if (this.settings.newChildUrl) {\n                var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n                this.initNewChildMenus($addBtn);\n            }\n\n            $row.css('margin-bottom', -30);\n            $row.velocity({'margin-bottom': 0}, 'fast');\n        },\n\n        removeElement: function($element) {\n            var $li = $element.parent().parent();\n\n            if (this.settings.sortable) {\n                this.structureDrag.removeItems($li);\n            }\n\n            var $parentUl;\n\n            if (!$li.siblings().length) {\n                $parentUl = $li.parent();\n            }\n\n            $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', $.proxy(function() {\n                $li.remove();\n\n                if (typeof $parentUl !== 'undefined') {\n                    this._removeUl($parentUl);\n                }\n            }, this));\n        },\n\n        _removeUl: function($ul) {\n            $ul.siblings('.row').children('.toggle').remove();\n            $ul.remove();\n        }\n    },\n    {\n        baseIndent: 8,\n        nestedIndent: 35,\n\n        defaults: {\n            storageKey: null,\n            sortable: false,\n            newChildUrl: null,\n            maxLevels: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend(\n    {\n        structure: null,\n        maxLevels: null,\n        draggeeLevel: null,\n\n        $helperLi: null,\n        $targets: null,\n        draggeeHeight: null,\n\n        init: function(structure, maxLevels) {\n            this.structure = structure;\n            this.maxLevels = maxLevels;\n\n            this.$insertion = $('<li class=\"draginsertion\"/>');\n\n            var $items = this.structure.$container.find('li');\n\n            this.base($items, {\n                handle: '.element:first, .move:first',\n                helper: $.proxy(this, 'getHelper')\n            });\n        },\n\n        getHelper: function($helper) {\n            this.$helperLi = $helper;\n            var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n            $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n            $helper.find('.move').removeAttr('title');\n            return $ul;\n        },\n\n        onDragStart: function() {\n            this.$targets = $();\n\n            // Recursively find each of the targets, in the order they appear to be in\n            this.findTargets(this.structure.$container);\n\n            // How deep does the rabbit hole go?\n            this.draggeeLevel = 0;\n            var $level = this.$draggee;\n            do {\n                this.draggeeLevel++;\n                $level = $level.find('> ul > li');\n            } while ($level.length);\n\n            // Collapse the draggee\n            this.draggeeHeight = this.$draggee.height();\n            this.$draggee.velocity({\n                height: 0\n            }, 'fast', $.proxy(function() {\n                this.$draggee.addClass('hidden');\n            }, this));\n            this.base();\n\n            this.addListener(Garnish.$doc, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.cancelDrag();\n                }\n            });\n        },\n\n        findTargets: function($ul) {\n            var $lis = $ul.children().not(this.$draggee);\n\n            for (var i = 0; i < $lis.length; i++) {\n                var $li = $($lis[i]);\n                this.$targets = this.$targets.add($li.children('.row'));\n\n                if (!$li.hasClass('collapsed')) {\n                    this.findTargets($li.children('ul'));\n                }\n            }\n        },\n\n        onDrag: function() {\n            if (this._.$closestTarget) {\n                this._.$closestTarget.removeClass('draghover');\n                this.$insertion.remove();\n            }\n\n            // First let's find the closest target\n            this._.$closestTarget = null;\n            this._.closestTargetPos = null;\n            this._.closestTargetYDiff = null;\n            this._.closestTargetOffset = null;\n            this._.closestTargetHeight = null;\n\n            for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n                this._.$target = $(this.$targets[this._.i]);\n                this._.targetOffset = this._.$target.offset();\n                this._.targetHeight = this._.$target.outerHeight();\n                this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n                this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n                if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                    this._.$closestTarget = this._.$target;\n                    this._.closestTargetPos = this._.i;\n                    this._.closestTargetYDiff = this._.targetYDiff;\n                    this._.closestTargetOffset = this._.targetOffset;\n                    this._.closestTargetHeight = this._.targetHeight;\n                }\n                else {\n                    // Getting colder\n                    break;\n                }\n            }\n\n            if (!this._.$closestTarget) {\n                return;\n            }\n\n            // Are we hovering above the first row?\n            if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n                this.$insertion.prependTo(this.structure.$container);\n            }\n            else {\n                this._.$closestTargetLi = this._.$closestTarget.parent();\n                this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n                // Is there a next row?\n                if (this._.closestTargetPos < this.$targets.length - 1) {\n                    this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                    this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n                }\n                else {\n                    this._.$nextTargetLi = null;\n                    this._.nextTargetLevel = null;\n                }\n\n                // Are we hovering between this row and the next one?\n                this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n                /**\n                 * Scenario 1: Both rows have the same level.\n                 *\n                 *     * Row 1\n                 *     ----------------------\n                 *     * Row 2\n                 */\n\n                if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                    if (this._.hoveringBetweenRows) {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                            // Position the insertion after the closest target\n                            this.$insertion.insertAfter(this._.$closestTargetLi);\n                        }\n                    }\n                    else {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                            this._.$closestTarget.addClass('draghover');\n                        }\n                    }\n                }\n\n                /**\n                 * Scenario 2: Next row is a child of this one.\n                 *\n                 *     * Row 1\n                 *     ----------------------\n                 *         * Row 2\n                 */\n\n                else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                        if (this._.hoveringBetweenRows) {\n                            // Position the insertion as the first child of the closest target\n                            this.$insertion.insertBefore(this._.$nextTargetLi);\n                        }\n                        else {\n                            this._.$closestTarget.addClass('draghover');\n                            this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                        }\n                    }\n                }\n\n                /**\n                 * Scenario 3: Next row is a child of a parent node, or there is no next row.\n                 *\n                 *         * Row 1\n                 *     ----------------------\n                 *     * Row 2\n                 */\n\n                else {\n                    if (this._.hoveringBetweenRows) {\n                        // Determine which <li> to position the insertion after\n                        this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.draggeeX += this.$helperLi.width();\n                        }\n\n                        this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                        this._.$closestParentLi = null;\n                        this._.closestParentLiXDiff = null;\n                        this._.closestParentLevel = null;\n\n                        for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                            this._.$parentLi = $(this._.$parentLis[this._.i]);\n                            this._.parentLiX = this._.$parentLi.offset().left;\n\n                            if (Craft.orientation === 'rtl') {\n                                this._.parentLiX += this._.$parentLi.width();\n                            }\n\n                            this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                            this._.parentLevel = this._.$parentLi.data('level');\n\n                            if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                                    !this._.$closestParentLi || (\n                                        this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                        (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                                    )\n                                )) {\n                                this._.$closestParentLi = this._.$parentLi;\n                                this._.closestParentLiXDiff = this._.parentLiXDiff;\n                                this._.closestParentLevel = this._.parentLevel;\n                            }\n                        }\n\n                        if (this._.$closestParentLi) {\n                            this.$insertion.insertAfter(this._.$closestParentLi);\n                        }\n                    }\n                    else {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                            this._.$closestTarget.addClass('draghover');\n                        }\n                    }\n                }\n            }\n        },\n\n        cancelDrag: function() {\n            this.$insertion.remove();\n\n            if (this._.$closestTarget) {\n                this._.$closestTarget.removeClass('draghover');\n            }\n\n            this.onMouseUp();\n        },\n\n        onDragStop: function() {\n            // Are we repositioning the draggee?\n            if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n                var $draggeeParent,\n                    moved;\n\n                // Are we about to leave the draggee's original parent childless?\n                if (!this.$draggee.siblings().length) {\n                    $draggeeParent = this.$draggee.parent();\n                }\n\n                if (this.$insertion.parent().length) {\n                    // Make sure the insertion isn't right next to the draggee\n                    var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                    if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                        this.$insertion.replaceWith(this.$draggee);\n                        moved = true;\n                    }\n                    else {\n                        this.$insertion.remove();\n                        moved = false;\n                    }\n                }\n                else {\n                    var $ul = this._.$closestTargetLi.children('ul');\n\n                    // Make sure this is a different parent than the draggee's\n                    if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                        if (!$ul.length) {\n                            var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                            this.structure.initToggle($toggle);\n\n                            $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                        }\n                        else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                            this._.$closestTarget.children('.toggle').trigger('click');\n                        }\n\n                        this.$draggee.appendTo($ul);\n                        moved = true;\n                    }\n                    else {\n                        moved = false;\n                    }\n                }\n\n                // Remove the class either way\n                this._.$closestTarget.removeClass('draghover');\n\n                if (moved) {\n                    // Now deal with the now-childless parent\n                    if ($draggeeParent) {\n                        this.structure._removeUl($draggeeParent);\n                    }\n\n                    // Has the level changed?\n                    var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                    var animateCss;\n\n                    if (newLevel != this.$draggee.data('level')) {\n                        // Correct the helper's padding if moving to/from level 1\n                        if (this.$draggee.data('level') == 1) {\n                            animateCss = {};\n                            animateCss['padding-' + Craft.left] = 38;\n                            this.$helperLi.velocity(animateCss, 'fast');\n                        }\n                        else if (newLevel == 1) {\n                            animateCss = {};\n                            animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                            this.$helperLi.velocity(animateCss, 'fast');\n                        }\n\n                        this.setLevel(this.$draggee, newLevel);\n                    }\n\n                    // Make it real\n                    var $element = this.$draggee.children('.row').children('.element');\n\n                    var data = {\n                        structureId: this.structure.id,\n                        elementId: $element.data('id'),\n                        siteId: $element.data('site-id'),\n                        prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                        parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                    };\n\n                    Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                        }\n                    });\n                }\n            }\n\n            // Animate things back into place\n            this.$draggee.velocity('stop').removeClass('hidden').velocity({\n                height: this.draggeeHeight\n            }, 'fast', $.proxy(function() {\n                this.$draggee.css('height', 'auto');\n            }, this));\n\n            this.returnHelpersToDraggees();\n\n            this.base();\n        },\n\n        setLevel: function($li, level) {\n            $li.data('level', level);\n\n            var indent = this.structure.getIndent(level);\n\n            var css = {};\n            css['margin-' + Craft.left] = '-' + indent + 'px';\n            css['padding-' + Craft.left] = indent + 'px';\n            this.$draggee.children('.row').css(css);\n\n            var $childLis = $li.children('ul').children();\n\n            for (var i = 0; i < $childLis.length; i++) {\n                this.setLevel($($childLis[i]), level + 1);\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n        tableView: null,\n        structureId: null,\n        maxLevels: null,\n\n        _basePadding: null,\n        _helperMargin: null,\n\n        _$firstRowCells: null,\n        _$titleHelperCell: null,\n\n        _titleHelperCellOuterWidth: null,\n\n        _ancestors: null,\n        _updateAncestorsFrame: null,\n        _updateAncestorsProxy: null,\n\n        _draggeeLevel: null,\n        _draggeeLevelDelta: null,\n        draggingLastElements: null,\n        _loadingDraggeeLevelDelta: false,\n\n        _targetLevel: null,\n        _targetLevelBounds: null,\n\n        _positionChanged: null,\n\n        /**\n         * Constructor\n         */\n        init: function(tableView, $elements, settings) {\n            this.tableView = tableView;\n            this.structureId = this.tableView.$table.data('structure-id');\n            this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n            this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n            this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n            settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n                handle: '.move',\n                collapseDraggees: true,\n                singleHelper: true,\n                helperSpacingY: 2,\n                magnetStrength: 4,\n                helper: $.proxy(this, 'getHelper'),\n                helperLagBase: 1.5,\n                axis: Garnish.Y_AXIS\n            });\n\n            this.base($elements, settings);\n        },\n\n        /**\n         * Returns the draggee rows (including any descendent rows).\n         */\n        findDraggee: function() {\n            this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n            this._draggeeLevelDelta = 0;\n\n            var $draggee = $(this.$targetItem),\n                $nextRow = this.$targetItem.next();\n\n            while ($nextRow.length) {\n                // See if this row is a descendant of the draggee\n                var nextRowLevel = $nextRow.data('level');\n\n                if (nextRowLevel <= this._draggeeLevel) {\n                    break;\n                }\n\n                // Is this the deepest descendant we've seen so far?\n                var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n                if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                    this._draggeeLevelDelta = nextRowLevelDelta;\n                }\n\n                // Add it and prep the next row\n                $draggee = $draggee.add($nextRow);\n                $nextRow = $nextRow.next();\n            }\n\n            // Are we dragging the last elements on the page?\n            this.draggingLastElements = !$nextRow.length;\n\n            // Do we have a maxLevels to enforce,\n            // and does it look like this draggee has descendants we don't know about yet?\n            if (\n                this.maxLevels &&\n                this.draggingLastElements &&\n                this.tableView.getMorePending()\n            ) {\n                // Only way to know the true descendant level delta is to ask PHP\n                this._loadingDraggeeLevelDelta = true;\n\n                var data = this._getAjaxBaseData(this.$targetItem);\n\n                Craft.postActionRequest('structures/get-element-level-delta', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this._loadingDraggeeLevelDelta = false;\n\n                        if (this.dragging) {\n                            this._draggeeLevelDelta = response.delta;\n                            this.drag(false);\n                        }\n                    }\n                }, this));\n            }\n\n            return $draggee;\n        },\n\n        /**\n         * Returns the drag helper.\n         */\n        getHelper: function($helperRow) {\n            var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n                $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n                $tbody = $('<tbody/>').appendTo($table);\n\n            $helperRow.appendTo($tbody);\n\n            // Copy the column widths\n            this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n            var $helperCells = $helperRow.children();\n\n            for (var i = 0; i < $helperCells.length; i++) {\n                var $helperCell = $($helperCells[i]);\n\n                // Skip the checkbox cell\n                if ($helperCell.hasClass('checkbox-cell')) {\n                    $helperCell.remove();\n                    continue;\n                }\n\n                // Hard-set the cell widths\n                var $firstRowCell = $(this._$firstRowCells[i]);\n                var width = $firstRowCell[0].getBoundingClientRect().width;\n\n                $firstRowCell.css('width', width+'px');\n                $helperCell.css('width', width+'px');\n\n                // Is this the title cell?\n                if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                    this._$titleHelperCell = $helperCell;\n\n                    var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                    this._titleHelperCellOuterWidth = width;\n\n                    $helperCell.css('padding-' + Craft.left, this._basePadding);\n                }\n            }\n\n            return $outerContainer;\n        },\n\n        /**\n         * Returns whether the draggee can be inserted before a given item.\n         */\n        canInsertBefore: function($item) {\n            if (this._loadingDraggeeLevelDelta) {\n                return false;\n            }\n\n            return (this._getLevelBounds($item.prev(), $item) !== false);\n        },\n\n        /**\n         * Returns whether the draggee can be inserted after a given item.\n         */\n        canInsertAfter: function($item) {\n            if (this._loadingDraggeeLevelDelta) {\n                return false;\n            }\n\n            return (this._getLevelBounds($item, $item.next()) !== false);\n        },\n\n        // Events\n        // -------------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            // Get the initial set of ancestors, before the item gets moved\n            this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n            // Set the initial target level bounds\n            this._setTargetLevelBounds();\n\n            // Check to see if we should load more elements now\n            this.tableView.maybeLoadMore();\n\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            this.base();\n            this._updateIndent();\n        },\n\n        /**\n         * On Insertion Point Change\n         */\n        onInsertionPointChange: function() {\n            this._setTargetLevelBounds();\n            this._updateAncestorsBeforeRepaint();\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            this._positionChanged = false;\n            this.base();\n\n            // Update the draggee's padding if the position just changed\n            // ---------------------------------------------------------------------\n\n            if (this._targetLevel != this._draggeeLevel) {\n                var levelDiff = this._targetLevel - this._draggeeLevel;\n\n                for (var i = 0; i < this.$draggee.length; i++) {\n                    var $draggee = $(this.$draggee[i]),\n                        oldLevel = $draggee.data('level'),\n                        newLevel = oldLevel + levelDiff,\n                        padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                    $draggee.data('level', newLevel);\n                    $draggee.find('.element').data('level', newLevel);\n                    $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n                }\n\n                this._positionChanged = true;\n            }\n\n            // Keep in mind this could have also been set by onSortChange()\n            if (this._positionChanged) {\n                // Tell the server about the new position\n                // -----------------------------------------------------------------\n\n                var data = this._getAjaxBaseData(this.$draggee);\n\n                // Find the previous sibling/parent, if there is one\n                var $prevRow = this.$draggee.first().prev();\n\n                while ($prevRow.length) {\n                    var prevRowLevel = $prevRow.data('level');\n\n                    if (prevRowLevel == this._targetLevel) {\n                        data.prevId = $prevRow.data('id');\n                        break;\n                    }\n\n                    if (prevRowLevel < this._targetLevel) {\n                        data.parentId = $prevRow.data('id');\n\n                        // Is this row collapsed?\n                        var $toggle = $prevRow.find('> th > .toggle');\n\n                        if (!$toggle.hasClass('expanded')) {\n                            // Make it look expanded\n                            $toggle.addClass('expanded');\n\n                            // Add a temporary row\n                            var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                            // Remove the target item\n                            if (this.tableView.elementSelect) {\n                                this.tableView.elementSelect.removeItems(this.$targetItem);\n                            }\n\n                            this.removeItems(this.$targetItem);\n                            this.$targetItem.remove();\n                            this.tableView._totalVisible--;\n                        }\n\n                        break;\n                    }\n\n                    $prevRow = $prevRow.prev();\n                }\n\n                Craft.postActionRequest('structures/move-element', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        if (!response.success) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                            this.tableView.elementIndex.updateElements();\n                            return;\n                        }\n                        Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                        this.onPositionChange();\n\n                        // Were we waiting on this to complete so we can expand the new parent?\n                        if ($spinnerRow && $spinnerRow.parent().length) {\n                            $spinnerRow.remove();\n                            this.tableView._expandElement($toggle, true);\n                        }\n\n                        // See if we should run any pending tasks\n                        Craft.cp.runQueue();\n                    }\n                }, this));\n            }\n        },\n\n        onSortChange: function() {\n            if (this.tableView.elementSelect) {\n                this.tableView.elementSelect.resetItemOrder();\n            }\n\n            this._positionChanged = true;\n            this.base();\n        },\n\n        onPositionChange: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('positionChange');\n                this.settings.onPositionChange();\n            }, this));\n        },\n\n        onReturnHelpersToDraggees: function() {\n            this._$firstRowCells.css('width', '');\n\n            // If we were dragging the last elements on the page and ended up loading any additional elements in,\n            // there could be a gap between the last draggee item and whatever now comes after it.\n            // So remove the post-draggee elements and possibly load up the next batch.\n            if (this.draggingLastElements && this.tableView.getMorePending()) {\n                // Update the element index's record of how many items are actually visible\n                this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n                var $postDraggeeItems = this.$draggee.last().nextAll();\n\n                if ($postDraggeeItems.length) {\n                    this.removeItems($postDraggeeItems);\n                    $postDraggeeItems.remove();\n                    this.tableView.maybeLoadMore();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * Returns the min and max levels that the draggee could occupy between\n         * two given rows, or false if it’s not going to work out.\n         */\n        _getLevelBounds: function($prevRow, $nextRow) {\n            // Can't go any lower than the next row, if there is one\n            if ($nextRow && $nextRow.length) {\n                this._getLevelBounds._minLevel = $nextRow.data('level');\n            }\n            else {\n                this._getLevelBounds._minLevel = 1;\n            }\n\n            // Can't go any higher than the previous row + 1\n            if ($prevRow && $prevRow.length) {\n                this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n            }\n            else {\n                this._getLevelBounds._maxLevel = 1;\n            }\n\n            // Does this structure have a max level?\n            if (this.maxLevels) {\n                // Make sure it's going to fit at all here\n                if (\n                    this._getLevelBounds._minLevel != 1 &&\n                    this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n                ) {\n                    return false;\n                }\n\n                // Limit the max level if we have to\n                if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                    this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                    if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                        this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                    }\n                }\n            }\n\n            return {\n                min: this._getLevelBounds._minLevel,\n                max: this._getLevelBounds._maxLevel\n            };\n        },\n\n        /**\n         * Determines the min and max possible levels at the current draggee's position.\n         */\n        _setTargetLevelBounds: function() {\n            this._targetLevelBounds = this._getLevelBounds(\n                this.$draggee.first().prev(),\n                this.$draggee.last().next()\n            );\n        },\n\n        /**\n         * Determines the target level based on the current mouse position.\n         */\n        _updateIndent: function(forcePositionChange) {\n            // Figure out the target level\n            // ---------------------------------------------------------------------\n\n            // How far has the cursor moved?\n            this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n            // Flip that if this is RTL\n            if (Craft.orientation === 'rtl') {\n                this._updateIndent._mouseDist *= -1;\n            }\n\n            // What is that in indentation levels?\n            this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n            // Combine with the original level to get the new target level\n            this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n            // Contain it within our min/max levels\n            if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n                this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n                this._updateIndent._targetLevel = this._targetLevelBounds.min;\n            }\n            else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n                this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n                this._updateIndent._targetLevel = this._targetLevelBounds.max;\n            }\n\n            // Has the target level changed?\n            if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n                // Target level is changing, so update the ancestors\n                this._updateAncestorsBeforeRepaint();\n            }\n\n            // Update the UI\n            // ---------------------------------------------------------------------\n\n            // How far away is the cursor from the exact target level distance?\n            this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n            // What's the magnet impact of that?\n            this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n            // Put it on a leash\n            if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n                this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n            }\n\n            // Apply the new margin/width\n            this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n            this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n            this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n        },\n\n        /**\n         * Returns the indent size for a given level\n         */\n        _getLevelIndent: function(level) {\n            return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n        },\n\n        /**\n         * Returns the base data that should be sent with StructureController Ajax requests.\n         */\n        _getAjaxBaseData: function($row) {\n            return {\n                structureId: this.structureId,\n                elementId: $row.data('id'),\n                siteId: $row.find('.element:first').data('site-id')\n            };\n        },\n\n        /**\n         * Returns a row's ancestor rows\n         */\n        _getAncestors: function($row, targetLevel) {\n            this._getAncestors._ancestors = [];\n\n            if (targetLevel != 0) {\n                this._getAncestors._level = targetLevel;\n                this._getAncestors._$prevRow = $row.prev();\n\n                while (this._getAncestors._$prevRow.length) {\n                    if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                        this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                        this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                        // Did we just reach the top?\n                        if (this._getAncestors._level == 0) {\n                            break;\n                        }\n                    }\n\n                    this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n                }\n            }\n\n            return this._getAncestors._ancestors;\n        },\n\n        /**\n         * Prepares to have the ancestors updated before the screen is repainted.\n         */\n        _updateAncestorsBeforeRepaint: function() {\n            if (this._updateAncestorsFrame) {\n                Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n            }\n\n            if (!this._updateAncestorsProxy) {\n                this._updateAncestorsProxy = $.proxy(this, '_updateAncestors');\n            }\n\n            this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestorsProxy);\n        },\n\n        _updateAncestors: function() {\n            this._updateAncestorsFrame = null;\n\n            // Update the old ancestors\n            // -----------------------------------------------------------------\n\n            for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n                this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n                // One less descendant now\n                this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n                // Is it now childless?\n                if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                    // Remove its toggle\n                    this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n                }\n            }\n\n            // Update the new ancestors\n            // -----------------------------------------------------------------\n\n            this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n            for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n                this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n                // One more descendant now\n                this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n                // Is this its first child?\n                if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                    // Create its toggle\n                    $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                        .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n                }\n            }\n\n            this._ancestors = this._updateAncestors._newAncestors;\n\n            delete this._updateAncestors._i;\n            delete this._updateAncestors._$ancestor;\n            delete this._updateAncestors._newAncestors;\n        }\n    },\n    {\n        HELPER_MARGIN: 0,\n        LEVEL_INDENT: 44,\n        MAX_GIVE: 22,\n\n        defaults: {\n            onPositionChange: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend(\n    {\n        $table: null,\n        $selectedSortHeader: null,\n\n        structureTableSort: null,\n\n        _totalVisiblePostStructureTableDraggee: null,\n        _morePendingPostStructureTableDraggee: false,\n\n        getElementContainer: function() {\n            // Save a reference to the table\n            this.$table = this.$container.find('table:first');\n            return this.$table.children('tbody:first');\n        },\n\n        afterInit: function() {\n            // Set the sort header\n            this.initTableHeaders();\n\n            // Create the Structure Table Sorter\n            if (\n                this.elementIndex.settings.context === 'index' &&\n                this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n                Garnish.hasAttr(this.$table, 'data-structure-id')\n            ) {\n                this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements(), {\n                    onSortChange: $.proxy(this, '_onStructureTableSortChange')\n                });\n            }\n            else {\n                this.structureTableSort = null;\n            }\n\n            // Handle expand/collapse toggles for Structures\n            if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n                this.addListener(this.$elementContainer, 'click', function(ev) {\n                    var $target = $(ev.target);\n\n                    if ($target.hasClass('toggle')) {\n                        if (this._collapseElement($target) === false) {\n                            this._expandElement($target);\n                        }\n                    }\n                });\n            }\n        },\n\n        initTableHeaders: function() {\n            var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n                $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n            for (var i = 0; i < $tableHeaders.length; i++) {\n                var $header = $tableHeaders.eq(i),\n                    attr = $header.attr('data-attribute');\n\n                // Is this the selected sort attribute?\n                if (attr === selectedSortAttr) {\n                    this.$selectedSortHeader = $header;\n                    var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                    $header\n                        .addClass('ordered ' + selectedSortDir)\n                        .on('click', $.proxy(this, '_handleSelectedSortHeaderClick'));\n                }\n                else {\n                    // Is this attribute sortable?\n                    var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                    if ($sortAttribute.length) {\n                        $header\n                            .addClass('orderable')\n                            .on('click', $.proxy(this, '_handleUnselectedSortHeaderClick'));\n                    }\n                }\n            }\n        },\n\n        isVerticalList: function() {\n            return true;\n        },\n\n        getTotalVisible: function() {\n            if (this._isStructureTableDraggingLastElements()) {\n                return this._totalVisiblePostStructureTableDraggee;\n            }\n            else {\n                return this._totalVisible;\n            }\n        },\n\n        setTotalVisible: function(totalVisible) {\n            if (this._isStructureTableDraggingLastElements()) {\n                this._totalVisiblePostStructureTableDraggee = totalVisible;\n            }\n            else {\n                this._totalVisible = totalVisible;\n            }\n        },\n\n        getMorePending: function() {\n            if (this._isStructureTableDraggingLastElements()) {\n                return this._morePendingPostStructureTableDraggee;\n            }\n            else {\n                return this._morePending;\n            }\n        },\n\n        setMorePending: function(morePending) {\n            if (this._isStructureTableDraggingLastElements()) {\n                this._morePendingPostStructureTableDraggee = morePending;\n            }\n            else {\n                this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n            }\n        },\n\n        getLoadMoreParams: function() {\n            var params = this.base();\n\n            // If we are dragging the last elements on the page,\n            // tell the controller to only load elements positioned after the draggee.\n            if (this._isStructureTableDraggingLastElements()) {\n                params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n            }\n\n            return params;\n        },\n\n        appendElements: function($newElements) {\n            this.base($newElements);\n\n            if (this.structureTableSort) {\n                this.structureTableSort.addItems($newElements);\n            }\n\n            Craft.cp.updateResponsiveTables();\n        },\n\n        createElementEditor: function($element) {\n            Craft.createElementEditor($element.data('type'), $element, {\n                params: {\n                    includeTableAttributesForSource: this.elementIndex.sourceKey\n                },\n                onSaveElement: $.proxy(function(response) {\n                    if (response.tableAttributes) {\n                        this._updateTableAttributes($element, response.tableAttributes);\n                    }\n                }, this),\n                elementIndex: this.elementIndex\n            });\n        },\n\n        _collapseElement: function($toggle, force) {\n            if (!force && !$toggle.hasClass('expanded')) {\n                return false;\n            }\n\n            $toggle.removeClass('expanded');\n\n            // Find and remove the descendant rows\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                level = $row.data('level'),\n                $nextRow = $row.next();\n\n            while ($nextRow.length) {\n                if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                    if ($nextRow.data('level') <= level) {\n                        break;\n                    }\n\n                    if (this.elementSelect) {\n                        this.elementSelect.removeItems($nextRow);\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.removeItems($nextRow);\n                    }\n\n                    this._totalVisible--;\n                }\n\n                var $nextNextRow = $nextRow.next();\n                $nextRow.remove();\n                $nextRow = $nextNextRow;\n            }\n\n            // Remember that this row should be collapsed\n            if (!this.elementIndex.instanceState.collapsedElementIds) {\n                this.elementIndex.instanceState.collapsedElementIds = [];\n            }\n\n            this.elementIndex.instanceState.collapsedElementIds.push(id);\n            this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n            // Bottom of the index might be viewable now\n            this.maybeLoadMore();\n        },\n\n        _expandElement: function($toggle, force) {\n            if (!force && $toggle.hasClass('expanded')) {\n                return false;\n            }\n\n            $toggle.addClass('expanded');\n\n            // Remove this element from our list of collapsed elements\n            if (this.elementIndex.instanceState.collapsedElementIds) {\n                var $row = $toggle.parent().parent(),\n                    id = $row.data('id'),\n                    index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n                if (index !== -1) {\n                    this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                    this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                    // Add a temporary row\n                    var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                    // Load the nested elements\n                    var params = $.extend(true, {}, this.settings.params);\n                    params.criteria.descendantOf = id;\n\n                    Craft.postActionRequest('element-indexes/get-more-elements', params, $.proxy(function(response, textStatus) {\n                        // Do we even care about this anymore?\n                        if (!$spinnerRow.parent().length) {\n                            return;\n                        }\n\n                        if (textStatus === 'success') {\n                            var $newElements = $(response.html);\n\n                            // Are there more descendants we didn't get in this batch?\n                            var totalVisible = (this._totalVisible + $newElements.length),\n                                morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                            if (morePending) {\n                                // Remove all the elements after it\n                                var $nextRows = $spinnerRow.nextAll();\n\n                                if (this.elementSelect) {\n                                    this.elementSelect.removeItems($nextRows);\n                                }\n\n                                if (this.structureTableSort) {\n                                    this.structureTableSort.removeItems($nextRows);\n                                }\n\n                                $nextRows.remove();\n                                totalVisible -= $nextRows.length;\n                            }\n                            else {\n                                // Maintain the current 'more' status\n                                morePending = this._morePending;\n                            }\n\n                            $spinnerRow.replaceWith($newElements);\n                            this.thumbLoader.load($newElements);\n\n                            if (this.elementIndex.actions || this.settings.selectable) {\n                                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                                this.elementIndex.updateActionTriggers();\n                            }\n\n                            if (this.structureTableSort) {\n                                this.structureTableSort.addItems($newElements);\n                            }\n\n                            Craft.appendHeadHtml(response.headHtml);\n                            Craft.appendFootHtml(response.footHtml);\n                            Craft.cp.updateResponsiveTables();\n\n                            this.setTotalVisible(totalVisible);\n                            this.setMorePending(morePending);\n\n                            // Is there room to load more right now?\n                            this.maybeLoadMore();\n                        }\n                    }, this));\n                }\n            }\n        },\n\n        _createSpinnerRowAfter: function($row) {\n            return $(\n                '<tr data-spinnerrow>' +\n                '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n                '<div class=\"spinner\"/>' +\n                '</td>' +\n                '</tr>'\n            ).insertAfter($row);\n        },\n\n        _isStructureTableDraggingLastElements: function() {\n            return (\n                this.structureTableSort &&\n                this.structureTableSort.dragging &&\n                this.structureTableSort.draggingLastElements\n            );\n        },\n\n        _handleSelectedSortHeaderClick: function(ev) {\n            var $header = $(ev.currentTarget);\n\n            if ($header.hasClass('loading')) {\n                return;\n            }\n\n            // Reverse the sort direction\n            var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n                newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n            this.elementIndex.setSortDirection(newSortDir);\n            this._handleSortHeaderClick(ev, $header);\n        },\n\n        _handleUnselectedSortHeaderClick: function(ev) {\n            var $header = $(ev.currentTarget);\n\n            if ($header.hasClass('loading')) {\n                return;\n            }\n\n            var attr = $header.attr('data-attribute');\n\n            this.elementIndex.setSortAttribute(attr);\n            this._handleSortHeaderClick(ev, $header);\n        },\n\n        _handleSortHeaderClick: function(ev, $header) {\n            if (this.$selectedSortHeader) {\n                this.$selectedSortHeader.removeClass('ordered asc desc');\n            }\n\n            $header.removeClass('orderable').addClass('ordered loading');\n            this.elementIndex.storeSortAttributeAndDirection();\n            this.elementIndex.updateElements();\n\n            // No need for two spinners\n            this.elementIndex.setIndexAvailable();\n        },\n\n        _updateTableAttributes: function($element, tableAttributes) {\n            var $tr = $element.closest('tr');\n\n            for (var attr in tableAttributes) {\n                if (!tableAttributes.hasOwnProperty(attr)) {\n                    continue;\n                }\n\n                $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        searchTimeout: null,\n        searchMenu: null,\n\n        $container: null,\n        $elementsContainer: null,\n        $elements: null,\n        $addTagInput: null,\n        $spinner: null,\n\n        _ignoreBlur: false,\n\n        init: function(settings) {\n            // Normalize the settings\n            // ---------------------------------------------------------------------\n\n            // Are they still passing in a bunch of arguments?\n            if (!$.isPlainObject(settings)) {\n                // Loop through all of the old arguments and apply them to the settings\n                var normalizedSettings = {},\n                    args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n                for (var i = 0; i < args.length; i++) {\n                    if (typeof arguments[i] !== 'undefined') {\n                        normalizedSettings[args[i]] = arguments[i];\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                settings = normalizedSettings;\n            }\n\n            this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n            this.$addTagInput = this.$container.children('.add').children('.text');\n            this.$spinner = this.$addTagInput.next();\n\n            this.addListener(this.$addTagInput, 'input', $.proxy(function() {\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.searchTimeout = setTimeout($.proxy(this, 'searchForTags'), 500);\n            }, this));\n\n            this.addListener(this.$addTagInput, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.RETURN_KEY) {\n                    ev.preventDefault();\n                }\n\n                let $option;\n\n                switch (ev.keyCode) {\n                    case Garnish.RETURN_KEY: {\n                        ev.preventDefault();\n                        if (this.searchMenu) {\n                            this.selectTag(this.searchMenu.$options.filter('.hover'));\n                        }\n                        return;\n                    }\n\n                    case Garnish.DOWN_KEY: {\n                        ev.preventDefault();\n                        if (this.searchMenu) {\n                            let $hoverOption = this.searchMenu.$options.filter('.hover');\n                            if ($hoverOption.length) {\n                                let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                                if ($nextOption.length) {\n                                    this.focusOption($nextOption);\n                                }\n                            } else {\n                                this.focusOption(this.searchMenu.$options.eq(0));\n                            }\n                        }\n                        return;\n                    }\n\n                    case Garnish.UP_KEY: {\n                        ev.preventDefault();\n                        if (this.searchMenu) {\n                            let $hoverOption = this.searchMenu.$options.filter('.hover');\n                            if ($hoverOption.length) {\n                                let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                                if ($prevOption.length) {\n                                    this.focusOption($prevOption);\n                                }\n                            } else {\n                                this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                            }\n                        }\n                        return;\n                    }\n                }\n            });\n\n            this.addListener(this.$addTagInput, 'focus', function() {\n                if (this.searchMenu) {\n                    this.searchMenu.show();\n                }\n            });\n\n            this.addListener(this.$addTagInput, 'blur', function() {\n                if (this._ignoreBlur) {\n                    this._ignoreBlur = false;\n                    return;\n                }\n\n                setTimeout($.proxy(function() {\n                    if (this.searchMenu) {\n                        this.searchMenu.hide();\n                    }\n                }, this), 1);\n            });\n        },\n\n        focusOption: function($option) {\n            this.searchMenu.$options.removeClass('hover');\n            $option.addClass('hover');\n            this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n        },\n\n        // No \"add\" button\n        getAddElementsBtn: $.noop,\n\n        getElementSortAxis: function() {\n            return null;\n        },\n\n        searchForTags: function() {\n            if (this.searchMenu) {\n                this.killSearchMenu();\n            }\n\n            var val = this.$addTagInput.val();\n\n            if (val) {\n                this.$spinner.removeClass('hidden');\n\n                var excludeIds = [];\n\n                for (var i = 0; i < this.$elements.length; i++) {\n                    var id = $(this.$elements[i]).data('id');\n\n                    if (id) {\n                        excludeIds.push(id);\n                    }\n                }\n\n                if (this.settings.sourceElementId) {\n                    excludeIds.push(this.settings.sourceElementId);\n                }\n\n                var data = {\n                    search: this.$addTagInput.val(),\n                    tagGroupId: this.settings.tagGroupId,\n                    excludeIds: excludeIds\n                };\n\n                Craft.postActionRequest('tags/search-for-tags', data, $.proxy(function(response, textStatus) {\n                    // Just in case\n                    if (this.searchMenu) {\n                        this.killSearchMenu();\n                    }\n\n                    this.$spinner.addClass('hidden');\n\n                    if (textStatus === 'success') {\n                        var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                            $ul = $('<ul/>').appendTo($menu);\n\n                        var $li;\n\n                        for (var i = 0; i < response.tags.length; i++) {\n                            $li = $('<li/>')\n                                .appendTo($ul);\n\n                            $('<a data-icon=\"tag\"/>')\n                                .appendTo($li)\n                                .text(response.tags[i].title)\n                                .data('id', response.tags[i].id)\n                                .addClass(response.tags[i].exclude ? 'disabled' : '');\n                        }\n\n                        if (!response.exactMatch) {\n                            $li = $('<li/>').appendTo($ul);\n                            $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                        }\n\n                        $ul.find('a:not(.disabled):first').addClass('hover');\n\n                        this.searchMenu = new Garnish.Menu($menu, {\n                            attachToElement: this.$addTagInput,\n                            onOptionSelect: $.proxy(this, 'selectTag')\n                        });\n\n                        this.addListener($menu, 'mousedown', $.proxy(function() {\n                            this._ignoreBlur = true;\n                        }, this));\n\n                        this.searchMenu.show();\n                    }\n                }, this));\n            }\n            else {\n                this.$spinner.addClass('hidden');\n            }\n        },\n\n        selectTag: function(option) {\n            var $option = $(option);\n\n            if ($option.hasClass('disabled')) {\n                return;\n            }\n\n            var id = $option.data('id');\n            var title = $option.text();\n\n            var $element = $('<div/>', {\n                'class': 'element small removable',\n                'data-id': id,\n                'data-site-id': this.settings.targetSiteId,\n                'data-label': title,\n                'data-editable': '1'\n            }).appendTo(this.$elementsContainer);\n\n            var $input = $('<input/>', {\n                'type': 'hidden',\n                'name': this.settings.name + '[]',\n                'value': id\n            }).appendTo($element);\n\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Remove')\n            }).appendTo($element);\n\n            var $titleContainer = $('<div/>', {\n                'class': 'label'\n            }).appendTo($element);\n\n            $('<span/>', {\n                'class': 'title',\n                text: title\n            }).appendTo($titleContainer);\n\n            var margin = -($element.outerWidth() + 10);\n            this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$addTagInput.velocity(animateCss, 'fast');\n\n            this.$elements = this.$elements.add($element);\n\n            this.addElements($element);\n\n            this.killSearchMenu();\n            this.$addTagInput.val('');\n            this.$addTagInput.trigger('focus');\n\n            if (!id) {\n                // We need to create the tag first\n                $element.addClass('loading disabled');\n\n                var data = {\n                    groupId: this.settings.tagGroupId,\n                    title: title\n                };\n\n                Craft.postActionRequest('tags/create-tag', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success' && response.success) {\n                        $element.attr('data-id', response.id);\n                        $input.val(response.id);\n\n                        $element.removeClass('loading disabled');\n                    }\n                    else {\n                        this.removeElement($element);\n\n                        if (textStatus === 'success') {\n                            // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                    }\n                }, this));\n            }\n        },\n\n        killSearchMenu: function() {\n            this.searchMenu.hide();\n            this.searchMenu.destroy();\n            this.searchMenu = null;\n        }\n    },\n    {\n        defaults: {\n            tagGroupId: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend(\n    {\n        getElementContainer: function() {\n            return this.$container.children('ul');\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: (typeof config.autocomplete === 'undefined' || !config.autocomplete ? 'off' : null),\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            }\n            else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html':  option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                text: config.label\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n            else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: (allChecked || Craft.inArray(option.value, config.values)),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<div/>', {\n                'class': 'lightswitch',\n                tabindex: '0',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'switch',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            var id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            var containerId = config.containerId || id + '-container';\n            var name = config.name || null;\n            var value = config.value || null;\n            var small = config.small || false;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                id: containerId,\n                'class': 'flex color-container'\n            });\n\n            var $colorPreviewContainer = $('<div/>', {\n                'class': 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            var $colorPreview = $('<div/>', {\n                'class': 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            var $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: value,\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000))+'-date';\n            var name = config.name || null;\n            var inputName = name ? name+'[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name+'[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate:null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000))+'-time';\n            var name = config.name || null;\n            var inputName = name ? name+'[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name+'[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours()*3600 + value.getMinutes()*60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $('<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $('<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-label` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend(\n    {\n        uploader: null,\n        allowedKinds: null,\n        $element: null,\n        settings: null,\n        _rejectedFiles: {},\n        _extensionList: null,\n        _totalFileCounter: 0,\n        _validFileCounter: 0,\n\n        init: function($element, settings) {\n            this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n            this.$element = $element;\n            this.allowedKinds = null;\n            this._extensionList = null;\n            this._totalFileCounter = 0;\n            this._validFileCounter = 0;\n\n            settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n            var events = settings.events;\n            delete settings.events;\n\n            if (settings.allowedKinds && settings.allowedKinds.length) {\n                if (typeof settings.allowedKinds === 'string') {\n                    settings.allowedKinds = [settings.allowedKinds];\n                }\n\n                this.allowedKinds = settings.allowedKinds;\n                delete settings.allowedKinds;\n            }\n\n            settings.autoUpload = false;\n\n            this.uploader = this.$element.fileupload(settings);\n            for (var event in events) {\n                if (!events.hasOwnProperty(event)) {\n                    continue;\n                }\n\n                this.uploader.on(event, events[event]);\n            }\n\n            this.settings = settings;\n\n            this.uploader.on('fileuploadadd', $.proxy(this, 'onFileAdd'));\n        },\n\n        /**\n         * Set uploader parameters.\n         */\n        setParams: function(paramObject) {\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            this.uploader.fileupload('option', {formData: paramObject});\n        },\n\n        /**\n         * Get the number of uploads in progress.\n         */\n        getInProgress: function() {\n            return this.uploader.fileupload('active');\n        },\n\n        /**\n         * Return true, if this is the last upload.\n         */\n        isLastUpload: function() {\n            // Processing the last file or not processing at all.\n            return this.getInProgress() < 2;\n        },\n\n        /**\n         * Called on file add.\n         */\n        onFileAdd: function(e, data) {\n            e.stopPropagation();\n\n            var validateExtension = false;\n\n            if (this.allowedKinds) {\n                if (!this._extensionList) {\n                    this._createExtensionList();\n                }\n\n                validateExtension = true;\n            }\n\n            // Make sure that file API is there before relying on it\n            data.process().done($.proxy(function() {\n                var file = data.files[0];\n                var pass = true;\n                if (validateExtension) {\n                    var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                    var fileExtension = matches[1];\n                    if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                        pass = false;\n                        this._rejectedFiles.type.push('“' + file.name + '”');\n                    }\n                }\n\n                if (file.size > this.settings.maxFileSize) {\n                    this._rejectedFiles.size.push('“' + file.name + '”');\n                    pass = false;\n                }\n\n                // If the validation has passed for this file up to now, check if we're not hitting any limits\n                if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                    this._rejectedFiles.limit.push('“' + file.name + '”');\n                    pass = false;\n                }\n\n                if (pass) {\n                    this._validFileCounter++;\n                    data.submit();\n                }\n\n                if (++this._totalFileCounter === data.originalFiles.length) {\n                    this._totalFileCounter = 0;\n                    this._validFileCounter = 0;\n                    this.processErrorMessages();\n                }\n            }, this));\n\n            return true;\n        },\n\n        /**\n         * Process error messages.\n         */\n        processErrorMessages: function() {\n            var str;\n\n            if (this._rejectedFiles.type.length) {\n                if (this._rejectedFiles.type.length === 1) {\n                    str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n                this._rejectedFiles.type = [];\n                alert(str);\n            }\n\n            if (this._rejectedFiles.size.length) {\n                if (this._rejectedFiles.size.length === 1) {\n                    str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n                this._rejectedFiles.size = [];\n                alert(str);\n            }\n\n            if (this._rejectedFiles.limit.length) {\n                if (this._rejectedFiles.limit.length === 1) {\n                    str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n                this._rejectedFiles.limit = [];\n                alert(str);\n            }\n        },\n\n        humanFileSize: function(bytes) {\n            var threshold = 1024;\n\n            if (bytes < threshold) {\n                return bytes + ' B';\n            }\n\n            var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n            var u = -1;\n\n            do\n            {\n                bytes = bytes / threshold;\n                ++u;\n            }\n            while (bytes >= threshold);\n\n            return bytes.toFixed(1) + ' ' + units[u];\n        },\n\n        _createExtensionList: function() {\n            this._extensionList = [];\n\n            for (var i = 0; i < this.allowedKinds.length; i++) {\n                var allowedKind = this.allowedKinds[i];\n\n                if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                    for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                        var ext = Craft.fileKinds[allowedKind].extensions[j];\n                        this._extensionList.push(ext);\n                    }\n                }\n            }\n        },\n\n        destroy: function() {\n            this.$element.fileupload('destroy');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            dropZone: null,\n            pasteZone: null,\n            fileInput: null,\n            sequentialUploads: true,\n            maxFileSize: Craft.maxUploadSize,\n            allowedKinds: null,\n            events: {},\n            canAddMoreFiles: null,\n            headers: {'Accept' : 'application/json;q=0.9,*/*;q=0.8'},\n            paramName: 'assets-upload'\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n            // Make it lowercase\n            sourceVal = sourceVal.toLowerCase();\n\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal);\n\n            // Handle must start with a letter and end with a letter/number\n            sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n            sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n            // Get the \"words\"\n            var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n            var uriFormat = words.join(Craft.slugWordSeparator);\n\n            if (uriFormat && this.settings.suffix) {\n                uriFormat += this.settings.suffix;\n            }\n\n            return uriFormat;\n        }\n    });\n"]}