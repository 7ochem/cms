{"version":3,"sources":["Craft.min.js","Craft.js","BaseElementEditor.js","BaseElementIndex.js","BaseElementIndexView.js","BaseElementSelectInput.js","BaseElementSelectorModal.js","BaseInputGenerator.js","Tabs.js","AdminTable.js","AssetEditor.js","AssetImageEditor.js","AssetIndex.js","AssetSelectInput.js","AssetSelectorModal.js","AuthManager.js","CP.js","CategoryIndex.js","CategorySelectInput.js","Chart.js","ColorInput.js","CustomizeSourcesModal.js","DataTableSorter.js","DeleteUserModal.js","DraftEditor.js","DynamicGenerator.js","EditableTable.js","ElementActionTrigger.js","ElementThumbLoader.js","ElevatedSessionForm.js","ElevatedSessionManager.js","EntryIndex.js","FieldLayoutDesigner.js","FieldToggle.js","Grid.js","HandleGenerator.js","ImageUpload.js","InfoIcon.js","LightSwitch.js","Listbox.js","LivePreview.js","PasswordInput.js","Preview.js","PreviewFileModal.js","ProgressBar.js","PromptHandler.js","SlidePicker.js","SlideRuleInput.js","Slideout.js","SlugGenerator.js","Structure.js","StructureDrag.js","StructureTableSorter.js","TableElementIndexView.js","TagSelectInput.js","ThumbsElementIndexView.js","UI.js","Uploader.js","UriFormatGenerator.js"],"names":["$","rxhtmlTag","jQuery","htmlPrefilter","html","replace","extend","Craft","navHeight","index","arr","key","isArray","reduce","obj","i","group","grouped","thisKey","hasOwnProperty","push","t","category","message","params","translations","this","formatMessage","pattern","args","tokens","_tokenizePattern","length","token","_parseToken","join","start","pos","depth","chars","indexOf","slice","open","close","split","param","trim","arg","type","format","number","formatNumber","substr","plural","c","offset","selector","selectorChars","substring","parseInt","map","p","formatDate","date","Date","datepicker","datepickerOptions","dateFormat","d3","formatLocale","d3FormatLocaleDefinition","formatter","shortcutText","shift","alt","clientOs","escapeHtml","str","text","escapeRegex","getText","encodeUriComponent","encodeURIComponent","differences","!","*","'","(",")","chr","re","RegExp","selectFullValue","input","$input","val","setSelectionRange","formatInputId","inputName","rtrim","getUrl","path","baseUrl","anchor","isPlainObject","aParams","name","value","Garnish","apos","url","qpos","search","pathParam","pathMatch","match","omitScriptNameInUrls","usePathInfo","scriptName","basePath","endPath","getCpUrl","baseCpUrl","getSiteUrl","baseSiteUrl","getActionUrl","actionUrl","redirectTo","document","location","href","getCsrfInput","csrfTokenName","csrfTokenValue","postActionRequest","action","data","callback","options","contentType","JSON","stringify","jqXHR","ajax","dataType","headers","_actionHeaders","success","error","textStatus","errorThrown","readyState","cp","displayError","alert","send","_waitingOnAjax","_ajaxQueue","queueActionRequest","undefined","_postNextActionRequestInQueue","X-Registered-Asset-Bundles","Object","keys","registeredAssetBundles","X-Registered-Js-Files","registeredJsFiles","sendActionRequest","method","Promise","resolve","reject","X-Requested-With","v","getTime","axios","request","then","catch","sendApiRequest","uri","cancelToken","_getApiHeaders","apiHeaders","baseURL","baseApiUrl","apiParams","_apiHeaders","processCraftHeaders","apiResponse","_processApiHeaders","_loadingApiHeaders","_apiHeaderWaitlist","response","e","_rejectApiRequests","clearCachedApiHeaders","downloadFromUrl","body","XMLHttpRequest","setRequestHeader","responseType","onload","status","disposition","getResponseHeader","matches","exec","filename","blob","Blob","link","createElement","window","URL","createObjectURL","download","appendChild","click","removeChild","stringToArray","findDeltaData","oldData","newData","deltaNames","initialDeltaValues","sort","a","b","groupedOldParams","_groupParamsByDeltaNames","groupedNewParams","__root__","n","inArray","modifiedDeltaNames","concat","withRoot","initialValues","paramName","paramLoop","decodeURIComponent","expandPostArray","expanded","m","unshift","parentElem","createForm","$form","attr","accept-charset","chunks","values","appendTo","compare","obj1","obj2","sortObjectKeys","Array","getObjectKeys","escapeChars","escaped","ltrim","startsWith","filterArray","filtered","elem","includes","removeFromArray","splice","getLast","uppercaseFirst","charAt","toUpperCase","lowercaseFirst","toLowerCase","parseUrl","scheme","host","hostname","port","query","hash","isSameHost","requestUrlInfo","urlInfo","secondsToHumanTimeDuration","seconds","showSeconds","weeks","Math","floor","days","minutes","hours","round","timeComponents","asciiString","charMap","normalize","char","asciiStr","asciiCharMap","randomString","result","random","createErrorList","errors","$ul","addClass","$li","appendHeadHtml","$existingCss","existingCss","eq","regexp","append","appendFootHtml","$existingJs","src","existingJs","$bod","initUiElements","$container","grid","infoicon","checkboxselect","fieldtoggle","lightswitch","nicetext","formsubmit","menubtn","datetime","each","_elementIndexClasses","_elementSelectorModalClasses","_elementEditorClasses","registerElementIndexClass","elementType","func","registerElementSelectorModalClass","registerElementEditorClass","createElementIndex","settings","BaseElementIndex","createElementSelectorModal","BaseElementSelectorModal","createElementEditor","element","BaseElementEditor","getLocalStorage","defaultValue","systemUid","localStorage","parse","setLocalStorage","removeLocalStorage","removeItem","getCookie","cookie","setCookie","defaultCookieOptions","domain","maxAge","expires","toUTCString","secure","removeCookie","getElementInfo","$element","hasClass","find","id","siteId","label","hasThumb","setElementSize","size","otherSize","removeClass","$oldImg","$newImg","sizes","srcset","replaceWith","picturefill","elements","submitForm","confirm","redirect","retainScroll","scrollY","trigger","trapFocusWithin","container","on","ev","keyCode","$focusableElements","activeElement","shiftKey","preventDefault","stopPropagation","last","focus","first","setFocusWithin","fn","animateLeft","duration","easing","complete","orientation","velocity","left","right","animateRight","disable","$elem","removeAttr","enable","itemSelector","cols","maxCols","minColWidth","mode","fillMode","colClass","snapToGrid","Grid","InfoIcon","CheckboxSelect","FieldToggle","settingName","settingValue","setSettings","thisSettings","hasAttr","indeterminateValue","LightSwitch","NiceText","$btn","currentTarget","$anchor","closest","customTrigger","next","menuAnchor","MenuBtn","$wrapper","$inputs","checkValue","hasValue","children","class","title","aria-label","remove","charsLeftHtml","charsLeft","$doc","ready","Base","elementId","initialData","$header","$toolbar","$tabContainer","$editLink","$sidebarBtn","$loadSpinner","$body","$fieldsContainer","$sidebarShade","$sidebar","$footer","$siteSelectContainer","$siteSelect","$siteSpinner","$cancelBtn","$saveBtn","$saveSpinner","slideout","tabManager","showingSidebar","ignoreFailedRequest","init","defaults","target","data-icon","ltr","addListener","hideSidebar","showSidebar","$siteSelectOuterContainer","$contents","add","isMobileBrowser","Slideout","containerElement","containerAttributes","novalidate","closeOnEsc","closeOnShadeClick","destroy","shortcutManager","registerShortcut","S_KEY","ctrl","saveElement","ESC_KEY","maybeCloseSlideout","$shade","load","onShowHud","onCreateForm","setElementAttribute","attributes","getBaseData","prevalidate","showLoadSpinner","onBeginLoading","cancel","CancelToken","source","includeSites","isMultiSite","showSiteSwitcher","hideLoadSpinner","onEndLoading","updateForm","showHeader","hideHeader","switchSite","isDirty","newSiteId","refreshInitialData","fieldHtml","sites","siteInfo","$option","tabHtml","Tabs","$tab","$win","editUrl","sidebarHtml","ElementThumbLoader","requestAnimationFrame","headHtml","footHtml","serialize","scrollTop","off","css","_closedSidebarStyles","offsetWidth","_openedSidebarStyles","one","addLayer","removeLayer","[object Object]","validators","isFunction","call","$title","$a","cpEditUrl","newTitle","elementTypeNames","displayNotice","closeSlideout","onSaveElement","runQueue","shake","isOpen","onHideHud","base","loadHud","maybeCloseHud","closeHud","reloadForm","elementIndex","noop","initialized","instanceState","sourceStates","sourceStatesStorageKey","searchTimeout","sourceSelect","$main","isIndexBusy","sourceKey","sourceViewModes","$source","sourcesByKey","$visibleSources","$customizeSourcesBtn","customizeSourcesModal","toolbarOffset","$search","searching","searchText","trashed","drafts","$clearSearchBtn","$statusMenuBtn","$statusMenuContainer","statusMenu","$siteMenuBtn","siteMenu","$sortMenuBtn","sortMenu","$sortAttributesList","$sortDirectionsList","$scoreSortAttribute","$structureSortAttribute","$elements","$viewModeBtnContainer","viewModeBtns","viewMode","view","_autoSelectElements","$countSpinner","$countContainer","page","resultSet","totalResults","$exportBtn","actions","actionsHeadHtml","actionsFootHtml","$selectAllContainer","$selectAllCheckbox","showingActionTriggers","exporters","exportersByType","_$detachedToolbarItems","_$triggers","_ignoreFailedRequest","_cancelToken","getDefaultInstanceState","storageKey","context","toolbarSelector","parent","hide","initSources","menu","_handleStatusChange","bind","$options","filter","_setSite","criteria","_handleSiteChange","defaultSiteId","getSiteId","$storedSiteOption","startSearching","stopSearching","clearTimeout","setTimeout","updateElementsIfSearchTextChanged","RETURN_KEY","_handleSortChange","afterInit","selectDefaultSource","setPage","pageNum","updateElements","onAfterInit","_createCancelToken","_cancelRequests","getSourceContainer","$sources","$items","_getSourcesInList","Select","multi","allowEmpty","vertical","onSelectionChange","_handleSourceSelectionChange","_initSources","getDefaultSourceKey","getSourceByKey","selectSource","refreshSources","removeAllItems","setIndexBusy","refreshSourcesAction","setIndexAvailable","initSource","addItems","initSourceToggle","expandedSources","_expandSource","deinitSourceToggle","$toggle","_getSourceToggle","deinitSource","removeItems","removeListener","removeData","selectedSource","defaultSource","paths","getDefaultExpandedSources","addOptions","prependTo","_updateStructureSortOption","setSortAttribute","detach","setInstanceState","storeInstanceState","getSourceState","getSelectedSourceState","setSelecetedSourceState","viewState","storeSortAttributeAndDirection","getSelectedSortAttribute","order","getSelectedSortDirection","max","pageTrigger","history","replaceState","_resetCount","getViewParams","batchSize","limit","canHaveDrafts","savedDraftsOnly","draftOf","disabledElementIds","paginated","_isViewPaginated","collapsedElementIds","preservePagination","updateElementsAction","$scrollContainer","_updateView","showActionTriggers","height","_createTriggers","submitAction","actionParams","selectedElementIds","getSelectedElementIds","_findAction","viewParams","elementAction","elementIds","submitActionsAction","afterAction","actionClass","onAfterAction","hideActionTriggers","updateActionTriggers","totalSelected","getSelectedElements","getEnabledElements","setStatus","selectOption","getSortAttributeOption","attribute","setSortDirection","getSortDirectionOption","dir","getSelectedViewMode","selectItem","updateSidebarMenuLabel","sortOptions","data-extra","data-attr","setStoredSortOptionsForSource","$firstOption","getViewModesForSource","sourceViewMode","$viewModeBtn","className","data-view","icon","selectViewMode","doesSourceHaveViewMode","onSelectSource","selectSourceByKey","sortAttr","sortDir","getDefaultSort","viewModes","force","createView","getViewClass","TableElementIndexView","ThumbsElementIndexView","rememberDisabledElementId","forgetDisabledElementId","enableElements","parents","onEnableElements","disableElements","onDisableElements","getElementById","enableElementsById","ids","makeArray","disableElementsById","selectElementAfterUpdate","addButton","$button","getButtonContainer","isShowingSidebar","buttonContainer","createCustomizeSourcesModal","modal","CustomizeSourcesModal","onHide","onSelectSite","onUpdateElements","$selectedItems","_handleActionTriggerSubmit","getPostData","_handleMenuActionTriggerSubmit","option","selectedOption","firstSite","$firstVisibleSource","selectNewSource","toString","get","$heading","$headings","nextUntil","setSiteId","is","_handleSelectionChange","_handleSourceDblClick","_toggleSource","_handleSourceToggleClick","prev","$list","_getChildSources","siblings","_deinitSources","_collapseSource","aria-expanded","$childSources","_countResults","total","itemLabel","itemsLabel","min","countLabel","item","items","$paginationContainer","totalPages","ceil","$prevBtn","$nextBtn","role","tabindex","aria-checked","selectAllElements","deselectAllElements","SPACE_KEY","selectable","multiSelect","checkboxMode","selectElementById","countElementsAction","count","triggers","safeMenuActions","destructiveMenuActions","destructive","$menuTrigger","$menu","$safeList","_createMenuTriggerList","$destructiveList","$div","_showExportHud","typeOptions","$typeField","ui","createSelectField","$formatField","$typeSelect","formattable","$limitField","createTextField","placeholder","$spinner","HUD","submitting","isNaN","BaseElementIndexView","$loadingMoreSpinner","$elementContainer","$scroller","thumbLoader","elementSelect","loadingMore","_totalVisible","_morePending","_handleEnableElements","_handleDisableElements","insertAfter","getElementContainer","setTotalVisible","setMorePending","isVerticalList","handle","_handleElementEditing","$target","prop","isTouchCapable","maybeLoadMore","getAllElements","$selectedElements","selectElement","selectAll","deselectAll","getTotalVisible","totalVisible","getMorePending","morePending","canLoadMore","loadMore","innerHeight","top","outerHeight","loadMoreElementsAction","getLoadMoreParams","$newElements","appendElements","onAppendElements","newElements","BaseElementSelectInput","elementSort","elementEditor","$elementsContainer","$addElementBtn","$addElementBtnContainer","_initialized","normalizedSettings","arguments","modalStorageKey","sortable","getContainer","getElementsContainer","getAddElementsBtn","initElementSelect","initElementSort","resetElements","getElements","DragSort","$targetItem","getSelectedItems","ignoreHandleSelector","axis","getElementSortAxis","collapseDraggees","magnetStrength","helperLagBase","onSortChange","resetItemOrder","canAddMoreElements","updateAddElementsBtn","enableAddElementsBtn","disableAddElementsBtn","removeElements","addElements","editable","_handleShowElementEditor","removeElement","not","onRemoveElements","animateElementAway","animateCss","opacity","outerWidth","draftEditor","pause","REMOVE_FX_DURATION","resume","showModal","show","createModal","getModalSettings","closeOtherModals","sources","showSiteMenu","getDisabledElementIds","onSelect","onModalSelect","modalSettings","allowSelfRelations","sourceElementId","slotsLeft","selectElements","updateDisabledElementsInModal","elementInfo","createNewElement","appendElement","animateElementIntoPlace","onSelectElements","clone","prepend","single","$modalElement","$inputElement","origOffset","destOffset","$helper","position","zIndex","ADD_FX_DURATION","checkForm","fieldId","editorSettings","Modal","$selectBtn","$sourceToggles","$tbody","$primaryButtons","$secondaryButtons","$footerSpinner","onFadeIn","_createElementIndex","updateSelectBtnState","enableSelectBtn","disableSelectBtn","enableCancelBtn","disableCancelBtn","showFooterSpinner","hideFooterSpinner","clearMouseUpTimeout","disableElementsOnSelect","hideOnSelect","info","has","touchData","firstTap","secondTap","resizable","onCancel","BaseInputGenerator","listening","timeout","startListening","setNewSource","stopListening","removeAllListeners","onSourceTextChange","updateTarget","onTargetTextChange","onFormSubmit","sourceVal","targetVal","generateTargetValue","dispatchEvent","InputEvent","inputType","Event","$menuBtn","$tabs","$selectedTab","$focusableTab","log","selectTab","makeTabFocusable","LOCATION_HASH","$initialTab","LEFT_KEY","RIGHT_KEY","contains","scrollToTab","updateMenuBtn","tab","_getTab","deselectTab","scrollLeft","elemScrollOffset","targetScrollLeft","tabWidth","ulWidth","HTMLElement","AdminTable","totalItems","sorter","$noItems","$table","$deleteBtns","allowDeleteAll","minItems","noItemsSelector","tableSelector","DataTableSorter","reorderItems","updateUI","addRow","row","maxItems","$row","$deleteBtn","idAttribute","reorderAction","onReorderItems","reorderSuccessMessage","reorderFailMessage","handleDeleteBtnClick","event","confirmDeleteItem","deleteItem","getItemName","confirmDeleteMessage","getItemId","deleteAction","handleDeleteItemResponse","onDeleteItem","deleteSuccessMessage","deleteFailMessage","nameAttribute","$moveButtons","newItemBtnSelector","AssetEditor","$filenameInput","originalBasename","originalExtension","reloadIndex","refreshThumbnail","validateExtension","showImageEditor","AssetImageEditor","onSave","showImagePreview","startingWidth","startingHeight","PreviewFileModal","selectFilename","selectionStart","basename","extension","_parseFilename","selectionEnd","oldExt","newExt","originalFilename","ext","parts","pop","$imageTools","$buttons","$replaceBtn","$editorContainer","$straighten","$croppingCanvas","$spinnerCanvas","canvas","image","viewport","focalPoint","croppingCanvas","clipper","croppingRectangle","cropperHandles","cropperGrid","croppingShade","croppingAreaText","imageStraightenAngle","viewportRotation","originalWidth","originalHeight","imageVerticeCoords","zoomRatio","animationInProgress","currentView","assetId","cacheBust","draggingCropper","scalingCropper","draggingFocal","previousMouseX","previousMouseY","shiftKeyHeld","editorHeight","editorWidth","cropperState","scaleFactor","flipData","focalPointState","spinnerInterval","maxImageSize","lastLoadedDimensions","imageIsLoading","mouseMoveEvent","croppingConstraint","constraintOrientation","showingCustomConstraint","renderImage","renderCropper","now","allowDegreeFractions","isImagick","x","y","allowSavingAsNew","saveImage","getMaxImageSize","loadEditor","browserViewportWidth","documentElement","clientWidth","browserViewportHeight","clientHeight","devicePixelRatio","$viewsContainer","$views","innerWidth","_showSpinner","updateSizeAndPosition","fabric","StaticCanvas","width","enableRetinaScaling","renderAll","imageUrl","Image","fromURL","imageObject","set","originX","originY","getHeight","getWidth","getScaledImageDimensions","_setFittedImageVerticeCoordinates","_repositionEditorElements","focalState","imageDimensions","offsetX","offsetY","focal","focalData","adjustedX","adjustedY","storeFocalPointState","_createFocalPoint","_createViewport","storeCropperState","_addControlListeners","_handleMouseMove","_handleMouseDown","_handleMouseUp","_handleMouseOut","_hideSpinner","_reloadImage","setSrc","min-width","min-height","previousEditorDimensions","setDimensions","currentScaledDimensions","getZoomToFitRatio","previouslyOccupiedArea","_getBoundingRectangle","_repositionCropper","getZoomToCoverRatio","_repositionImage","_repositionViewport","_repositionFocalPoint","_zoomImage","Rect","fill","globalCompositeOperation","sizeFactor","focalX","focalY","deltaX","deltaY","Group","Circle","radius","strokeWidth","stroke","toggleFocalPoint","dimensions","state","currentWidth","ratio","hasOrientationChanged","_","imageRatio","editorRatio","_handleTabClick","rotateImage","flipImage","straighteningInput","SlideRuleInput","onStart","_showGrid","onChange","slider","straighten","onEnd","_hideGrid","_cleanupFocalPointAfterStraighten","SHIFT_KEY","_handleConstraintClick","_handleOrientationClick","_applyCustomConstraint","constraint","_showCustomConstraint","_hideCustomConstraint","setCroppingConstraint","enforceCroppingConstraint","$constraints","$constraint","reverse","_getCustomConstraint","w","h","parseFloat","_setCustomConstraint","showView","enableSlider","disableSlider","disableCropMode","enableCropMode","zoomFactor","degrees","imageZoomRatio","newAngle","angle","scaledImageDimensions","viewportProperties","imageProperties","angleInRadians","PI","newDeltaX","cos","sin","newDeltaY","modifiedDeltaX","modifiedDeltaY","temp","animate","animationDuration","onComplete","cleanAngle","_adjustFocalPointByAngle","_resetFocalPointPosition","editorCenter","setValue","properties","scaleY","scaleX","previousAngle","_adjustEditorElementsOnStraighten","newCenterX","newCenterY","angleDelta","currentZoomRatio","adjustmentRatio","cropperCenterX","cropperCenterY","imageVertices","getImageVerticeCoords","rectangle","_getZoomRatioToFitRectangle","_isCenterInside","object","containingObject","newFocalX","newFocalY","adjustedFocalX","adjustedFocalY","containingVertices","vertex","rectangleVertices","_getRectangleVertices","verticeIndex","arePointsInsideRectangle","edge","_getEdgeCrossed","rectangleCenter","distanceFromVertexToEdge","abs","sqrt","pow","distanceFromCenterToEdge","postData","imageRotation","cropData","zoom","end","scaledWidth","scaledHeight","boundingBox","_getImageBoundingBox","scale","vertScale","horiScale","getCombinedZoomRatio","strokeOptions","gridWidth","gridHeight","xStep","yStep","Line","onFadeOut","_editorModeTransition","cropperData","_showCropper","_hideCropper","targetZoom","inverseZoomFactor","imageOffsetX","imageOffsetY","getContext","cW","cH","setInterval","rotation","save","clearRect","translate","rotate","beginPath","moveTo","lineTo","lineWidth","strokeStyle","restore","clearInterval","clipperData","_setupCropperLayer","_redrawCropperElements","backgroundColor","hoverCursor","selection","rectangleRatio","rectWidth","rectHeight","lineOptions","gridOptions","pathGroup","Path","cropTextTop","cropTextBackgroundColor","Textbox","fontSize","font","textAlign","previousImageArea","currentOffset","areaFactor","coordinateSet","d","_isMouseOver","move","_cropperHandleHitTest","pageX","pageY","_handleMouseMoveInternal","_handleFocalDrag","_handleCropperDrag","_handleCropperResize","_setMouseCursor","vertices","dxi","dyi","furthest","furthestDeltas","newX","newY","previousHeight","previousWidth","startingRectangle","_calculateNewCropperSizeByDeltas","cropperDirection","topDelta","leftDelta","change","cursor","parentOffset","mouseX","mouseY","lb","rb","tb","bb","topLeft","topRight","bottomRight","bottomLeft","zoomMode","topVerticalSegment","bottomVerticalSegment","rightHorizontalSegment","leftHorizontalSegment","verticalOffset","horizontalOffset","_debug","fabricObj","debugger","points","ab","_getVector","bc","scalarAbAb","_getScalarProduct","scalarBcBc","point","ap","bp","scalarAbAp","scalarBcBp","projectsOnAB","projectsOnBC","_getVectorMagnitude","vector","_getAngleBetweenVectors","acos","edgePoints","centerPoint","smallestDiff","edgeCrossed","edgeIndex","toCenter","edgeVector","toVertex","diff","box","proportion","AssetIndex","$includeSubfoldersContainer","$includeSubfoldersCheckbox","showingIncludeSubfoldersCheckbox","$uploadButton","$uploadInput","$progressBar","$folders","uploader","promptHandler","progressBar","_uploadTotalFiles","_uploadFileProgress","_uploadedAssetIds","_currentUploaderSettings","_assetDrag","_folderDrag","_expandDropTargetFolderTimeout","_tempExpandedFolders","_fileConflictTemplate","choices","_folderConflictTemplate","_initIndexPageMode","_positionProgressBar","_createFolderContextMenu","_getSourceLevel","updateDropTargets","contextMenu","parentsUntil","DragDrop","activeDropTargetClass","helperOpacity","helper","$file","_getFileDragHelper","dropTargets","$draggee","targets","onDragStart","_onDragStart","onDropTargetChange","_onDropTargetChange","onDragStop","_onFileDragStop","helperBaseZindex","$selected","draggees","_getFolderUidFromSourceKey","$draggeeHelper","$helperSidebar","$helperNav","$helperUl","padding-top","padding-right","padding-bottom","padding-left","draggedSourceIds","_onFolderDragStop","$activeDropTarget","originatingSource","targetFolderId","originalAssetIds","originalAssetId","resetProgressBar","setItemCount","showProgressBar","parameterArray","folderId","onMoveFinish","responseArray","resetPrompts","conflict","addPrompt","suggestedFilename","prompt","hideProgressBar","performAfterMoveActions","_collapseExtraExpandedFolders","getPromptCount","fadeOutHelpers","showBatchPrompts","returnData","newParameterArray","choice","apply","_performBatchRequests","returnHelpersToDraggees","folderIds","parentId","requestId","fileMoveList","newSourceKey","transferList","newFolderId","newFolderUid","merge","_performActualFolderMove","folderDeleteList","moveCallback","counter","_getRootSource","$parent","_getParentSource","_selectSourceByFolderId","$targetSource","_getSourceByKey","$parentSources","$parentSource","style","insertBefore","PromptHandler","ProgressBar","fileInput","dropZone","events","fileuploadstart","_onUploadStart","fileuploadprogressall","_onUploadProgress","fileuploaddone","_onUploadComplete","kind","allowedKinds","Uploader","defaultVolumeHandle","setParams","$rootSource","$subContainer","checked","marginBottom","includeSubfolders","progress","loaded","setProgressPercentage","files","doReload","file","isLastUpload","_uploadFollowup","_updateAfterUpload","doFollowup","parameterIndex","followupCallback","incrementProcessedItemCount","updateProgressBar","sourceAssetId","conflictingAssetId","targetFilename","_onUpdateElements","_onKeyDown","_onElementFocus","openInstance","selfDestruct","$focusedItem","_loadPreview","$outerContainer","$innerContainer","_$firstRowCells","$helperCells","$helperCell","$firstRowCell","$dropTarget","dropTargetFolder","_hasSubfolders","_isExpanded","_expandFolder","dropTargetFolderId","$excludedSources","_collapseFolder","menuOptions","onClick","_createSubfolder","_renameFolder","_deleteFolder","ContextMenu","menuClass","$parentFolder","subfolderName","folderName","_prepareParentForChildren","$subfolder","folderUid","_appendSubfolder","$targetFolder","folder","_cleanUpTree","oldName","newName","$existingChildren","subfolderLabel","folderInserted","$existingChild","before","windowHeight","finalCallback","doRequest","parameters","AssetSelectInput","hud","$uploadBtn","canUpload","_attachUploader","defaultFieldLayoutId","formData","multiple","canAddMoreFiles","$existing","selectUploadedFile","$newElement","margin","slotsTaken","AssetSelectorModal","$selectTransformBtn","_selectedTransform","transforms","createSelectTransformButton","$btnGroup","$menuList","MenuButton","onOptionSelect","onSelectTransform","allowTransforms","transform","selectImagesWithTransform","transformUrls","imageIdsWithMissingUrls","$item","fetchMissingTransformUrls","canSelectImageTransforms","AuthManager","remainingSessionTime","checkRemainingSessionTimer","showLoginModalTimer","decrementLogoutWarningInterval","showingLogoutWarningModal","showingLoginModal","logoutWarningModal","loginModal","$logoutWarningPara","$passwordInput","$passwordSpinner","$loginBtn","$loginErrorPara","submitLoginIfLoggedOut","updateRemainingSessionTime","setCheckRemainingSessionTimer","checkRemainingSessionTime","extendSession","responseJSON","minSafeSessionTime","showLogoutWarningModal","checkInterval","showLoginModal","submitLogin","hideLogoutWarningModal","hideLoginModal","quickShow","$logoutBtn","$renewSessionBtn","autoShow","hideOnEsc","hideOnShadeClick","shadeClass","updateLogoutWarningMessage","decrementLogoutWarning","time","quick","quickHide","$inputContainer","$inputsFlexContainer","$passwordContainer","$buttonContainer","$passwordWrapper","PasswordInput","onToggleInput","$newPasswordInput","logout","renewSession","validatePassword","login","clearLoginError","loginName","username","password","showLoginError","CP","authManager","$nav","$mainContainer","$alerts","$crumbs","$notificationContainer","$primaryForm","$headerContainer","$mainContent","$details","$sidebarContainer","$contentContainer","$edition","$confirmUnloadForms","$deltaForms","$collapsibleTables","fixedHeader","enableQueue","totalJobs","jobInfo","displayedJobInfo","displayedJobInfoUnchanged","trackJobProgressTimeout","jobProgressIcon","checkingForUpdates","forcingRefreshOnUpdatesCheck","includingDetailsOnUpdatesCheck","checkForUpdatesCallbacks","$allInstructions","$instructions","$label","updateFixedHeader","handleWindowResize","$errorNotifications","$otherNotifications","delay","notificationDuration","initSpecialForms","initAlerts","shortcuts","shortcut","submitPrimaryForm","initTabs","scrollTo","_handleInputFocus","_handleInputBlur","announcements","hasUnreads","some","unread","contents","forEach","timestamp","heading","onShow","serialized","$forms","submit","confirmUnload","livePreview","inPreviewMode","originalEvent","returnValue","saveShortcut","toggleNav","toggleClass","toggleSidebar","menuBtn","$tabsContainer","$tabsList","selectedTabIndex","updateResponsiveTables","_i","_$table","_containerWidth","_check","_isCollapsed","getBoundingClientRect","headerHeight","max-height","displayNotification","$notification","fadedMargin","margin-left","margin-right","display","notificationType","fetchAlerts","displayAlerts","alerts","margin-top","$shunnableAlerts","$link","checkForUpdates","forceRefresh","includeDetails","realCallback","_checkForUpdates","updateUtilitiesBadge","callbacks","updateInfo","_getUpdates","_checkForCachedUpdates","cached","onlyIfCached","updates","_cacheUpdates","$utilitiesLink","$badge","badgeCount","runQueueAutomatically","trackJobProgress","_trackJobProgressInternal","setJobInfo","jobs","oldInfo","getDisplayedJobInfo","progressLabel","updateJobIcon","statuses","JOB_STATUS_RESERVED","JOB_STATUS_FAILED","JOB_STATUS_WAITING","j","JobProgressIcon","hideFailMode","setDescription","description","setProgress","showFailMode","JOB_STATUS_DONE","$progressLabel","failMode","_$bgCanvas","_$staticCanvas","_$hoverCanvas","_$failCanvas","_staticCtx","_hoverCtx","_canvasSize","_arcPos","_arcRadius","_lineWidth","_arcStartPos","_arcEndPos","_arcStartStepSize","_arcEndStepSize","_arcStep","_arcStepTimeout","_arcAnimateCallback","_progressBar","canAccessQueueManager","$canvasContainer","$labelContainer","_createCanvas","_drawArc","_animateArc","_setArc","color","$canvas","ctx","lineCap","startPos","endPos","arc","closePath","targetStartPos","targetEndPos","_takeNextArcStep","CategoryIndex","editableGroups","$newCategoryBtnGroup","$newCategoryBtn","updateButton","editableCategoryGroups","uid","defaultGroupHandle","selectedSourceHandle","selectedGroup","_getGroupTriggerHref","_openCreateCategoryModal","getAttribute","menuHtml","primarySiteId","groupId","newCategoryBtnText","hudTrigger","groupSourceKey","CategorySelectInput","selectedCategoryIds","categoryIds","branchLimit","selectionLabel","$newElementsContainer","filteredElements","$allCategories","_animateCategoryAway","charts","DataTable","columns","rows","cellIndex","parseTime","timeParse","Tip","$tip","setContent","setPosition","BaseChart","$chart","chartBaseClass","dataTable","timeFormatLocale","svg","globalSettings","formats","d3Formats","formatLocaleDefinition","timeFormatLocaleDefinition","d3TimeFormatLocaleDefinition","select","resize","baseSettings","draw","chartClass","onAfterDrawTicks","tickKey","tick","$tickText","numberFormat","percentFormat","currencyFormat","shortDateFormats","day","month","year","bottom","colors","Area","tip","drawingArea","getChartMargin","translateX","translateY","drawTicks","drawAxes","drawChart","drawTipTriggers","getX","xAxis","axisBottom","tickFormat","getXFormatter","ticks","yAxis","getY","axisLeft","getYFormatter","tickValues","getYTickValues","axisRight","showAxis","tickSizeOuter","gridlines","xLineAxis","tickSize","yLineAxis","line","datum","area","y0","y1","plots","enter","tips","chartMargin","xAxisTickInterval","node","getTotalLength","tipTriggerWidth","$content","$xValue","$yValue","content","yTicksMaxWidth","computedTickWidth","padded","xDomainMin","xDomainMax","xDomain","scaleTime","range","yDomain","getYMaxValue","scaleLinear","utils","getTimeFormatter","getNumberFormatter","maxValue","getDuration","secondsNum","chartSettings","dataScale","ColorInput","$colorContainer","$colorPreview","$colorInput","createColorInput","handleTextChange","setAttribute","aria-controls","updateColor","repeat","_browserSupportsColorInputs","doesBrowserSupportColorInputs","$elementIndexSourcesContainer","$sourcesContainer","$sourceSettingsContainer","$newHeadingBtn","$footerBtnContainer","$loadingSpinner","sourceSort","updateSourcesOnSave","availableTableAttributes","setContainer","buildModal","addSource","sourceData","$itemLabel","$itemInput","Heading","updateItemLabel","Source","handleNewHeadingBtnClick","scrollContainerToElement","$pendingHeading","$lastSource","$indexSource","getIndexSource","isHeading","appendSource","$extraSources","nextAll","BaseSource","$settingsContainer","isSelected","deselect","createSettings","$settings","headerColHeading","defaultHeaderColHeading","tableAttributes","createTableColumnsField","firstKey","firstLabel","$titleColumnCheckbox","createTableColumnOption","$columnCheckboxes","selectedAttributes","createField","instructions","createCheckbox","disabled","$labelField","$labelInput","handleLabelInputChange","deleteHeading","table","$rows","getHelper","caboose","Y_AXIS","$helperRow","helperClass","$cells","DeleteUserModal","userId","$deleteActionRadios","$deleteSpinner","userSelect","_deleting","contentSummary","idParam","$deleteSubmitBtn","_submitBtnLabel","validateDeleteInputs","withContent","num","validates","handleSubmit","onSubmit","DraftEditor","$revisionBtn","$revisionLabel","$expandSiteStatusesBtn","$statusIcon","$editMetaBtn","metaHud","$nameTextInput","$saveMetaBtn","$siteStatusPane","$globalLightswitch","$siteLightswitches","$addlSiteField","siteIds","newSiteIds","lastSerializedValue","listeningForChanges","pauseLevel","saving","queue","submittingForm","duplicatedElements","openingPreview","preview","previewToken","createdProvisionalDraft","siteStatuses","canEditMultipleSites","previewTargets","enablePreview","$shareBtn","openShareLink","createShareMenu","revisionId","serializeForm","isProvisionalDraft","initForProvisionalDraft","draftId","isUnpublishedDraft","initForDraft","canUpdateSource","createDraft","listenForChanges","showStatusHud","autosaveDrafts","saveDraftAction","statusIcons","stopListeningForChanges","deleteDraftAction","hashedCpEditUrl","provisional","createEditMetaBtn","publishDraftAction","expandSiteStatuses","$enabledForSiteField","_getOtherSupportedSites","s","_createSiteStatusField","$globalField","createLightswitchField","_showField","originalEnabledValue","enabled","enabledForSite","originalSerializedStatus","_updateGlobalStatus","serializedStatuses","addlSiteIds","_createAddlSiteField","_updateSiteStatuses","$field","overflow","_removeField","allEnabled","allDisabled","turnOn","turnOff","turnIndeterminate","site","$lightswitch","addlSites","$addlSiteSelectContainer","createSelect","$addlSiteSelect","bodyHtml","_saveSuccessMessage","_saveFailMessage","spinners","getPreviewToken","sourceId","getTokenizedPreviewUrl","randoParam","isLive","siteToken","tokenParam","getPreview","Preview","openPreview","ensureIsDraftOrRevision","onlyIfChanged","removeActionParams","isPreviewActive","$editor","saveDraft","isActive","modifiedFieldNames","preparedData","prepareData","deltaName","content-type","_afterSaveRequest","_showFailStatus","docTitle","draftName","revisionMenu","creator","updatePreviewTargets","afterUpdate","checkMetaValues","oldId","selectors","modifiedAttributes","$fields","deltaCallback","swapDuplicatedElementIds","getDeltaNames","idsRE","pre","post","newTarget","$statusIcons","nextInQueue","showMetaHud","createMetaHud","onMetaHudShow","$hudBody","$nameField","$nameInputContainer","saveMeta","onMetaHudHide","onMetaHudEscape","shakeMetaHud","$hud","handleFormSubmit","autosave","hashedAddAnotherRedirectUrl","DynamicGenerator","EditableTable","baseName","biggestId","$addRowBtn","rowCount","hasMaxRows","hasMinRows","radioCheckboxes","copyDraggeeInputValuesToHelper","isVisible","initialize","initializeIfVisible","minRows","createRowObj","updateAddRowButton","canAddRow","canDeleteRow","deleteRow","$tr","onDeleteRow","staticRows","maxRows","rowId","rowIdPrefix","createRow","defaultValues","onAddRow","Row","focusOnPrevRow","tdIndex","blurTd","prevRow","$prevTr","$tds","focusOnNextRow","nextRow","$nextTr","importData","lines","textualColTypes","data-id","colId","$cell","col","scope","code","small","createDateInput","createLightswitch","default","createTimeInput","createTextInput","niceTexts","tds","$textareas","tr","td","$textarea","$checkbox","textareasByColId","onHeightChange","onTextareaHeightChange","radioMode","toggle","applyToggleCheckbox","autopopulate","HandleGenerator","allowNonAlphaStart","onTextareaFocus","onRadioCheckboxChange","checkbox","checkboxColId","neg","checkboxCol","colum","ignoreNextTextareaFocus","handleKeypress","charCode","isCtrlKeyPressed","numericKeyCodes","handlePaste","clipboardData","getData","validateValue","safeValue","tallestTextareaHeight","tdHeight","ElementActionTrigger","maxLevels","newChildUrl","$trigger","triggerEnabled","activate","updateTrigger","validateSelection","enableTrigger","disableTrigger","valid","batch","handleTriggerActivation","workers","Worker","$thumbs","$thumb","$scrollParent","scrollParent","addToQueue","invisibleThumbs","thumb","active","loadNext","scrollParentOffset","scrollParentHeight","thumbOffset","retryAll","loader","$img","ElevatedSessionForm","inputs","form","getInputPostVal","elevatedSessionManager","fetchingTimeout","stopImmediatePropagation","inputsChanged","$currentInput","requireElevatedSession","ElevatedSessionManager","passwordModal","$submitBtn","$errorPara","minSafeElevatedSessionTimeout","showPasswordModal","$passwordModal","focusPasswordInput","submitPassword","currentPassword","showPasswordError","EntryIndex","publishableSections","$newEntryBtnGroup","$newEntryBtn","section","defaultSectionHandle","selectedSection","_getSectionTriggerHref","_openCreateEntryModal","sectionId","newEntryBtnText","typeId","entryTypes","canPublish","sectionSourceKey","FieldLayoutDesigner","$newTabBtn","$libraryToggle","$selectedLibrary","$fieldLibrary","$uiLibrary","$uiLibraryElements","$fieldSearch","$clearFieldSearchBtn","$fieldGroups","tabGrid","elementDrag","$workspace","$fieldSearchContainer","initTab","elementPlacementInputName","ElementDrag","customizableTabs","tabDrag","TabDrag","customizableUi","$libraryPicker","Listbox","$selectedOption","$matches","$group","$editBtn","data-action","onTabOptionSelect","initElement","Element","renameTab","removeTab","$prev","$next","$labelSpan","promptForTabName","getElementPlacementInputName","removeFieldByHandle","removeField","refreshCols","addTab","tabName","elementConfigInputName","designer","$placementInput","$configInput","config","isField","requirable","hasCustomWidth","hasSettings","settingsHtml","isRequired","createSettingsHud","initUi","updatePlacementInput","updateConfigInput","SlidePicker","step","valueLabel","pct","applyHudSettings","serializeArray","updateRequiredClass","console","required","BaseDrag","Drag","$insertion","showingInsertion","$caboose","findItems","createInsertion","createCaboose","removeCaboose","swapDraggeeWithInsertion","swapInsertionWithDraggee","setMidpoints","getClosestItem","_closestItem","_closestItemMouseDiff","_$item","_midpoint","_mouseDiff","getDist","checkForNewClosestItem","draggeeDisplay","visibility","FX_DURATION","helpers","_showDraggee","onDrag","draggingLibraryElement","draggingField","isDraggeeMandatory","isHoveringOverTab","hitTest","$fieldContainers","$libraryElement","targetPrefix","targetSelector","reverseTargetSelector","_$target","_$reverseTarget","getType","normalizeTargetSelector","findTargets","onToggleChange","nodeName","warn","getToggleVal","postVal","hideTarget","showTarget","_show","_currentHeight","$t","_targetHeight","totalCols","colGutterDrop","colPctWidth","possibleItemColspans","possibleItemPositionsByColspan","itemPositions","itemColspansByPosition","layouts","layout","itemHeights","leftPadding","_refreshingCols","_refreshColsAfterRefresh","_forceRefreshColsAfterRefresh","handleContainerHeightProxy","setItems","oldHeight","scrollHeight","gutter","itemIndex","tallestItemHeight","colIndex","itemHeight","remainder","itemHeightsByColspan","positionRight","positionLeft","minColspan","maxColspan","colspan","getItemWidthCss","minPosition","maxPosition","colHeights","createLayouts","layoutTotalCols","highestTotalCols","layoutHeights","shortestHeight","shortestLayouts","emptySpaces","emptySpace","colspans","getItemLeftPosCss","positions","isSimpleLayout","margin-bottom","positionItems","completeRefreshCols","onRefreshCols","getItemWidth","getItemWidthInPx","getItemLeftPosInPx","prevPositions","prevColspans","prevColHeights","prevEmptySpace","LayoutGenerator","endingCol","affectedColHeights","onItemResize","newHeight","tallestColHeightsByPosition","colHeightsForPosition","tallestColHeight","words","handleCasing","ImageUpload","initImageUpload","containerSelector","uploadAction","postParameters","fileInputSelector","uploadParamName","fileuploadfail","_onUploadError","initButtons","uploadButtonSelector","deleteButtonSelector","refreshImage","onAfterRefreshImage","$icon","previousSibling","nodeType","Node","TEXT_NODE","nodeValue","showHud","showing","hudClass","closeOtherHUDs","indeterminate","dragger","dragStartMargin","outerContainer","X_AXIS","_onDrag","_onDragStop","muteEvent","changed","_onSettle","_getOffMargin","_onMouseDown","_onMouseUp","dragging","_getMargin","mouseDistX","selectedOptionIndex","UP_KEY","selectPrev","DOWN_KEY","selectNext","selectedClass","focusClass","LivePreview","$extraFields","$dragHandle","$previewContainer","$iframeContainer","$iframe","$fieldPlaceholder","previewUrl","basePostData","fields","lastPostData","updateIframeInterval","loading","checkAgain","dragStartEditorWidth","_slideInOnIframeLoad","_forceUpdateIframeProxy","_scrollX","_scrollY","_editorWidth","_editorWidthInPx","protocol","previewParams","forceUpdateIframe","extraFields","defaultEditorWidth","moveFieldsBack","editorWidthInPx","inPx","minEditorWidthInPx","exit","$editorHeader","$closeBtn","getIframeWidth","$clone","_getClone","updateIframe","slideIn","createToken","previewAction","updateWidths","$newClone","field","contentWindow","X-Craft-Token","xhrFields","withCredentials","crossDomain","handleSuccess","handleError","write","onResponse","copyInputValues","$textInput","$showPasswordToggle","showingPassword","passwordInput","initInputFocusEvents","hidePassword","setCurrentInput","updateToggleLabel","showPassword","togglePassword","onKeyDown","ALT_KEY","onKeyUp","onInputChange","$previewHeader","$targetBtn","$targetMenu","$deviceTypeContainer","$orientationBtn","$refreshBtn","$deviceMask","$devicePreviewContainer","iframeLoaded","$tempInput","activeTarget","isDeviceUpdating","deviceAnimationTimeout","currentDeviceType","deviceOrientation","deviceWidth","deviceHeight","deviceMaskDimensions","phone","tablet","iframeHeight","_updateIframeProxy","Pro","switchTarget","aria-selected","deviceType","aria-hidden","_updateRefreshBtn","_activeTarget","refresh","previewTarget","resetDevicePreview","_devicePreviewIsActive","updateDevicePreview","_useIframeResizer","previewIframeResizerOptions","resetScroll","sameHost","frameborder","wrap","iFrameResize","checkOrigin","scrolling","onInit","iframe","switchDeviceType","newDeviceType","switchOrientation","hZoom","wZoom","previewHeight","previewWidth","maskHeight","maskWidth","rotationDeg","marginTop","marginLeft","iFrameResizer","removeListeners","defaultSettings","_onHide","instance","loadAsset","focusItem","empty","desiredHeight","desiredWidth","containerHeight","containerWidth","minGutter","_resizeContainer","previewHtml","max-width","$innerProgressBar","$progressBarStatus","_itemCount","_processedItemCount","_displaySteps","displaySteps","setProcessedItemCount","fadeTo","incrementItemCount","percentage","$modalContainerDiv","$prompt","$promptApplyToRemainingContainer","$promptApplyToRemainingCheckbox","$promptApplyToRemainingLabel","$pomptChoices","_prompts","_promptBatchCallback","_promptBatchReturnData","_promptBatchNum","_showNextPromptInBatch","remainingInBatch","_showPrompt","_handleBatchPromptSelection","applyToRemaining","choiceData","itemsToGo","_promptCallback","$promptMessage","$promptChoices","$promptButtons","$radioButton","_selectPromptChoice","fadeOut","_cancelPrompt","totalSteps","_min","_max","Number","isInteger","prevAll","triggerEvent","aria-valuenow","aria-valuetext","$activeButton","startPositionX","graduationsMin","graduationsMax","slideMin","slideMax","$overlay","$cursor","$graduations","$graduationsUl","_handleResize","_handleTapStart","_handleTapMove","_handleTapEnd","graduationsCalculatedWidth","valueToPosition","touch","startLeft","curX","positionToValue","scaleMin","scaleMax","autoOpen","_cancelTransitionListeners","addPanel","removePanel","openPanels","panel","updateStyles","totalPanels","SlugGenerator","allowUppercaseInSlug","limitAutoSlugsToAscii","XRegExp","matchChain","slugWordSeparator","Structure","structureDrag","$parents","initToggle","StructureDrag","initNewChildMenus","viewStateKey","$addBtns","onNewChildMenuClick","showMenu","getIndent","level","baseIndent","nestedIndent","addElement","$addBtn","$parentUl","_removeUl","structure","draggeeLevel","$helperLi","$targets","draggeeHeight","$level","cancelDrag","$lis","$closestTarget","closestTargetPos","closestTargetYDiff","closestTargetOffset","closestTargetHeight","targetOffset","targetHeight","targetYMidpoint","targetYDiff","$closestTargetLi","closestTargetLevel","$nextTargetLi","nextTargetLevel","hoveringBetweenRows","draggeeX","targetItemMouseDiffX","$parentLis","$closestParentLi","closestParentLiXDiff","closestParentLevel","$parentLi","parentLiX","parentLiXDiff","parentLevel","onMouseUp","$draggeeParent","moved","$closestSiblings","newLevel","setLevel","structureId","prevId","indent","$childLis","StructureTableSorter","tableView","_basePadding","_helperMargin","_$titleHelperCell","_titleHelperCellOuterWidth","_ancestors","_updateAncestorsFrame","_draggeeLevel","_draggeeLevelDelta","draggingLastElements","_loadingDraggeeLevelDelta","_targetLevel","_targetLevelBounds","_positionChanged","singleHelper","helperSpacingY","findDraggee","$nextRow","nextRowLevel","nextRowLevelDelta","_getAjaxBaseData","delta","drag","canInsertBefore","_getLevelBounds","canInsertAfter","_getAncestors","_setTargetLevelBounds","_updateIndent","onInsertionPointChange","_updateAncestorsBeforeRepaint","levelDiff","padding","_getLevelIndent","$prevRow","prevRowLevel","$spinnerRow","_createSpinnerRowAfter","onPositionChange","_expandElement","onReturnHelpersToDraggees","newDraggeeIndexes","oldDraggeeIndexes","$postDraggeeItems","_minLevel","_maxLevel","forcePositionChange","_mouseDist","realMouseX","mousedownX","_indentationDist","LEVEL_INDENT","_targetLevelMouseDiff","_magnetImpact","MAX_GIVE","_closestLevelMagnetIndent","targetLevel","_level","_$prevRow","cancelAnimationFrame","_updateAncestors","_$ancestor","_newAncestors","HELPER_MARGIN","$selectedSortHeader","structureTableSort","_totalVisiblePostStructureTableDraggee","_morePendingPostStructureTableDraggee","initTableHeaders","_collapseElement","selectedSortAttr","$tableHeaders","selectedSortDir","_handleSelectedSortHeaderClick","_handleUnselectedSortHeaderClick","_isStructureTableDraggingLastElements","positionedAfter","includeTableAttributesForSource","_updateTableAttributes","$nextNextRow","descendantOf","$nextRows","newSortDir","_handleSortHeaderClick","TagSelectInput","searchMenu","$addTagInput","_ignoreBlur","searchForTags","selectTag","$hoverOption","$nextOption","focusOption","$prevOption","killSearchMenu","excludeIds","tagGroupId","tags","exclude","exactMatch","Menu","attachToElement","data-site-id","targetSiteId","data-label","data-editable","$titleContainer","autocomplete","inputmode","maxlength","autofocus","getAutofocusValue","getDisabledValue","readonly","showCharsLeft","createCopyTextInput","buttonId","execCommand","createCopyTextField","createCopyTextPrompt","createTextarea","createTextareaField","$select","data-target-prefix","optgroup","$optgroup","selected","data-target","data-reverse-target","reverseToggle","for","createCheckboxField","createCheckboxSelect","allValue","allChecked","showAllOption","allLabel","createCheckboxSelectField","fieldset","data-value","data-indeterminate-value","aria-labelledby","labelId","containerId","$colorPreviewContainer","createColorField","o","getMonth","formattedValue","timezone","defaultDate","createDateField","createDateRangePicker","today","getFullYear","getDate","startDate","endDate","$allOption","firstDayOffset","getDay","firstDay","$flex","$startDate","$endDate","$dateInputs","dpDiv","setPositionRelativeToAnchor","startTime","endTime","foundOption","btnClasses","timepicker","timepickerOptions","getHours","getMinutes","getSeconds","createTimeField","warning","addErrorsToField","addErrorsToList","$errors","clearErrorsFromField","_rejectedFiles","_extensionList","_totalFileCounter","_validFileCounter","autoUpload","fileupload","onFileAdd","paramObject","getInProgress","_createExtensionList","process","done","pass","fileExtension","maxFileSize","originalFiles","processErrorMessages","kinds","humanFileSize","maxUploadSize","bytes","u","toFixed","allowedKind","fileKinds","extensions","pasteZone","sequentialUploads","Accept","UriFormatGenerator","uriFormat","suffix"],"mappings":"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","file":"Craft.min.js","sourcesContent":["(function($){\n\n/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function(html) {\n    return html.replace(rxhtmlTag, \"<$1></$2>\");\n};\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Groups an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        group: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.group() must be an array.';\n            }\n\n            let index = {};\n\n            return arr.reduce((grouped, obj, i) => {\n                const thisKey = typeof key === 'string' ? obj[key] : key(obj, i);\n                if (!index.hasOwnProperty(thisKey)) {\n                    index[thisKey] = [[], thisKey];\n                    grouped.push(index[thisKey]);\n                }\n                index[thisKey][0].push(obj);\n                return grouped;\n            }, []);\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} shift\n         * @param {boolean} alt\n         */\n        shortcutText: function (key, shift, alt) {\n            if (Craft.clientOs === 'Mac') {\n                return (alt ? '⌥' : '') + (shift ? '⇧' : '') + '⌘' + key;\n            }\n            return 'Ctrl+' + (alt ? 'Alt+' : '') + (shift ? 'Shift+' : '') + key;\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n\n                // Get the latest headers\n                this._getApiHeaders(cancelToken).then(apiHeaders => {\n                    // Send the API request\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    // Force the API to process the Craft headers if this is the first API request\n                    if (!this._apiHeaders) {\n                        options.params.processCraftHeaders = 1;\n                    }\n\n                    axios.request(options).then((apiResponse) => {\n                        // Process the response headers\n                        this._processApiHeaders(apiResponse.headers, cancelToken).then(() => {\n                            // Finally return the API response data\n                            resolve(apiResponse.data);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        _getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    resolve(response.data);\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _processApiHeaders: function(headers, cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Have we already processed them?\n                if (this._apiHeaders) {\n                    resolve();\n                    return;\n                }\n\n                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                    data: {\n                        headers: headers,\n                    },\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    this._loadingApiHeaders = false;\n\n                    resolve();\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                    }\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _rejectApiRequests: function(reject, e) {\n            this._loadingApiHeaders = false;\n            reject(e);\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1](e);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = () => {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                };\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         * @param {function} [callback] Callback function that should be called whenever a new group of modified params has been found\n         * @param {object} [initialDeltaValues] Initial delta values. If undefined, `Craft.initialDeltaValues` will be used.\n         * @return {string}\n         */\n        findDeltaData: function(oldData, newData, deltaNames, callback, initialDeltaValues) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            if (typeof initialDeltaValues === 'undefined') {\n                initialDeltaValues = Craft.initialDeltaValues;\n            }\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, initialDeltaValues);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                    if (callback) {\n                        callback(deltaNames[n], groupedNewParams[deltaNames[n]]);\n                    }\n                }\n            }\n\n            return params.join('&');\n        },\n\n        /**\n         * @param {object} params\n         * @param {object} deltaNames\n         * @param {boolean} withRoot\n         * @param {boolean|object} initialValues\n         * @returns {{}}\n         * @private\n         */\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, initialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = decodeURIComponent(params[p]).substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(params[p]);\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(params[p]);\n                }\n            }\n\n            if (initialValues) {\n                for (let name in initialValues) {\n                    if (initialValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(initialValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return arr.includes(elem);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a', $container).each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n\n        /**\n         * Traps focus within a container, so when focus is tabbed out of it, it’s cycled back into it.\n         * @param {Object} container\n         */\n        trapFocusWithin: function(container) {\n            const $container = $(container);\n            $container.on('keydown.focus-trap', ev => {\n                // Tab key?\n                if (ev.keyCode === 9) {\n                    const $focusableElements = $container.find(':focusable');\n                    const index = $focusableElements.index(document.activeElement);\n                    if (index !== -1) {\n                        if (index === 0 && ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.last().focus();\n                        } else if (index === $focusableElements.length - 1 && !ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.first().focus();\n                        }\n                    }\n                }\n            });\n        },\n\n        /**\n         * Sets focus to the first focusable element within a container.\n         * @param {Object} container\n         */\n        setFocusWithin: function(container) {\n            $(container).find(':focusable:first').focus();\n        },\n    });\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: $.extend({\n                        customTrigger: $btn,\n                    }, $btn.data('event-data')),\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                                'aria-label': Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                    $inputs.first().focus();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n// Override Garnish.NiceText.charsLeftHtml() to be more accessible\nGarnish.NiceText.charsLeftHtml = charsLeft => {\n    return Craft.t('app', '<span class=\"visually-hidden\">Characters left:</span> {chars, number}', {\n        chars: charsLeft,\n    });\n};\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend({\n    $element: null,\n    elementId: null,\n    siteId: null,\n    deltaNames: null,\n    initialData: null,\n\n    $header: null,\n    $toolbar: null,\n    $tabContainer: null,\n    $editLink: null,\n    $sidebarBtn: null,\n    $loadSpinner: null,\n\n    $body: null,\n    $fieldsContainer: null,\n\n    $sidebarShade: null,\n    $sidebar: null,\n\n    $footer: null,\n    $siteSelectContainer: null,\n    $siteSelect: null,\n    $siteSpinner: null,\n    $cancelBtn: null,\n    $saveBtn: null,\n    $saveSpinner: null,\n\n    slideout: null,\n    tabManager: null,\n    showingSidebar: false,\n\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    initialDeltaValues: null,\n\n    init: function(element, settings) {\n        // Param mapping\n        if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n            // (settings)\n            settings = element;\n            element = null;\n        }\n\n        this.$element = $(element);\n        this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n        // Header\n        this.$header = $('<header/>', {class: 'pane-header'});\n        this.$toolbar = $('<div/>', {class: 'ee-toolbar'}).appendTo(this.$header);\n        this.$tabContainer = $('<div/>', {class: 'pane-tabs'}).appendTo(this.$toolbar);\n        this.$loadSpinner = $('<div/>', {\n            class: 'spinner',\n            title: Craft.t('app', 'Loading'),\n            'aria-label': Craft.t('app', 'Loading'),\n        }).appendTo(this.$toolbar);\n        this.$editLink = $('<a/>', {\n            target: '_blank',\n            class: 'btn hidden',\n            title: Craft.t('app', 'Open the full edit page in a new tab'),\n            'aria-label': Craft.t('app', 'Open the full edit page in a new tab'),\n            'data-icon': 'external',\n        }).appendTo(this.$toolbar);\n        this.$sidebarBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn hidden sidebar-btn',\n            title: Craft.t('app', 'Show sidebar'),\n            'aria-label': Craft.t('app', 'Show sidebar'),\n            'data-icon': `sidebar-${Garnish.ltr ? 'right' : 'left'}`,\n        }).appendTo(this.$toolbar);\n\n        this.addListener(this.$sidebarBtn, 'click', ev => {\n            ev.preventDefault();\n            if (!this.showingSidebar) {\n                this.showSidebar();\n            } else {\n                this.hideSidebar();\n            }\n        });\n\n        // Body\n        this.$body = $('<div/>', {class: 'ee-body'});\n\n        // Fields\n        this.$fieldsContainer = $('<div/>', {class: 'fields'}).appendTo(this.$body);\n\n        // Sidebar\n        this.$sidebar = $('<div/>', {class: 'ee-sidebar hidden'}).appendTo(this.$body);\n        Craft.trapFocusWithin(this.$sidebar);\n\n        // Footer\n        this.$footer = $('<div/>', {class: 'ee-footer hidden'});\n        const $siteSelectOuterContainer = $('<div/>', {class: 'ee-site-select'}).appendTo(this.$footer);\n        this.$siteSelectContainer = $('<div/>', {class: 'select hidden'}).appendTo($siteSelectOuterContainer);\n        this.$siteSelect = $('<select/>').appendTo(this.$siteSelectContainer);\n        this.$siteSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo($siteSelectOuterContainer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footer);\n        this.$saveBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footer);\n        this.$saveSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo(this.$footer);\n\n        let $contents = this.$header.add(this.$body).add(this.$footer);\n\n        // Sidebar shade\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebarShade = $('<div/>', {class: 'ee-sidebar-shade hidden'});\n            $contents = $contents.add(this.$sidebarShade);\n\n            this.addListener(this.$sidebarShade, 'click', ev => {\n                ev.stopPropagation();\n                this.hideSidebar();\n            });\n        }\n\n        // Create the slideout\n        this.slideout = new Craft.Slideout($contents, {\n            containerElement: 'form',\n            containerAttributes: {\n                action: '',\n                method: 'post',\n                novalidate: '',\n                class: 'element-editor',\n            },\n            closeOnEsc: false,\n            closeOnShadeClick: false,\n        });\n        this.slideout.$container.data('elementEditor', this);\n        this.slideout.on('beforeClose', () => {\n            this.hideSidebar();\n        });\n        this.slideout.on('close', () => {\n            this.trigger('closeSlideout');\n            this.destroy();\n        });\n\n        // Register shortcuts & events\n        Garnish.shortcutManager.registerShortcut({\n            keyCode: Garnish.S_KEY,\n            ctrl: true,\n        }, () => {\n            this.saveElement();\n        });\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.$cancelBtn, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$shade, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$container, 'submit', ev => {\n            ev.preventDefault();\n            this.saveElement();\n        });\n        this.addListener(this.$siteSelect, 'change', 'switchSite');\n\n        this.load().then(() => {\n            this.onShowHud();\n            this.onCreateForm(this.$body);\n        });\n    },\n\n    setElementAttribute: function(name, value) {\n        if (!this.settings.attributes) {\n            this.settings.attributes = {};\n        }\n\n        if (value === null) {\n            delete this.settings.attributes[name];\n        } else {\n            this.settings.attributes[name] = value;\n        }\n    },\n\n    getBaseData: function() {\n        const data = $.extend({}, this.settings.params);\n\n        if (this.settings.siteId) {\n            data.siteId = this.settings.siteId;\n        } else if (this.$element && this.$element.data('site-id')) {\n            data.siteId = this.$element.data('site-id');\n        }\n\n        if (this.settings.elementId) {\n            data.elementId = this.settings.elementId;\n        } else if (this.$element && this.$element.data('id')) {\n            data.elementId = this.$element.data('id');\n        }\n\n        if (this.settings.elementType) {\n            data.elementType = this.settings.elementType;\n        }\n\n        if (this.settings.attributes) {\n            data.attributes = this.settings.attributes;\n        }\n\n        if (this.settings.prevalidate) {\n            data.prevalidate = 1;\n        }\n\n        return data;\n    },\n\n    load: function(data) {\n        return new Promise((resolve, reject) => {\n            this.trigger('beforeLoad');\n            // todo: remove this in Craft 4\n            this.trigger('beginLoading');\n            this.showLoadSpinner();\n            this.onBeginLoading();\n\n            if (this.cancelToken) {\n                this.ignoreFailedRequest = true;\n                this.cancelToken.cancel();\n            }\n\n            this.cancelToken = axios.CancelToken.source();\n\n            Craft.sendActionRequest('POST', 'elements/get-editor-html', {\n                cancelToken: this.cancelToken.token,\n                data: $.extend(this.getBaseData(), data || {}, {\n                    includeSites: Craft.isMultiSite && this.settings.showSiteSwitcher,\n                }),\n            }).then(response => {\n                this.hideLoadSpinner();\n                this.trigger('load');\n                // todo: remove this in Craft 4\n                this.trigger('endLoading');\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (this.initialDeltaValues === null) {\n                    this.initialDeltaValues = response.data.initialDeltaValues;\n                }\n                this.updateForm(response.data, true);\n                this.cancelToken = null;\n                resolve();\n            }).catch(e => {\n                this.hideLoadSpinner();\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (!this.ignoreFailedRequest) {\n                    Craft.cp.displayError();\n                    reject(e);\n                }\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    showHeader: function() {\n        this.$header.removeClass('hidden');\n    },\n\n    hideHeader: function() {\n        this.$header.addClass('hidden');\n    },\n\n    showLoadSpinner: function() {\n        this.showHeader();\n        this.$loadSpinner.removeClass('hidden');\n    },\n\n    hideLoadSpinner: function() {\n        this.$loadSpinner.addClass('hidden');\n    },\n\n    switchSite: function() {\n        if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n            this.$siteSelect.val(this.siteId);\n            return;\n        }\n\n        const newSiteId = this.$siteSelect.val();\n\n        if (newSiteId == this.siteId) {\n            return;\n        }\n\n        this.$siteSpinner.removeClass('hidden');\n\n        this.load({siteId: newSiteId}).then(() => {\n            this.$siteSpinner.addClass('hidden');\n        }).catch(() => {\n            this.$siteSpinner.addClass('hidden');\n            // Reset the site select\n            this.$siteSelect.val(this.siteId);\n        });\n    },\n\n    updateForm: function(data, refreshInitialData) {\n        // Cleanup\n        if (this.tabManager) {\n            this.$tabContainer.html('');\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        this.siteId = data.siteId;\n        this.$fieldsContainer.html(data.fieldHtml);\n\n        let showHeader = false;\n\n        if (data.sites && data.sites.length > 1) {\n            showHeader = true;\n            this.$siteSelectContainer.removeClass('hidden');\n            this.$siteSelect.html('');\n\n            for (let i = 0; i < data.sites.length; i++) {\n                const siteInfo = data.sites[i];\n                const $option = $('<option/>', {\n                    value: siteInfo.id,\n                    text: siteInfo.name\n                }).appendTo(this.$siteSelect);\n                if (siteInfo.id == data.siteId) {\n                    $option.attr('selected', 'selected');\n                }\n            }\n        } else {\n            this.$siteSelectContainer.addClass('hidden');\n        }\n\n        if (data.tabHtml) {\n            showHeader = true;\n            this.$tabContainer.replaceWith(this.$tabContainer = $(data.tabHtml));\n            this.tabManager = new Craft.Tabs(this.$tabContainer);\n            this.tabManager.on('deselectTab', ev => {\n                $(ev.$tab.attr('href')).addClass('hidden');\n            });\n            this.tabManager.on('selectTab', ev => {\n                $(ev.$tab.attr('href')).removeClass('hidden');\n                Garnish.$win.trigger('resize');\n                this.$body.trigger('scroll');\n            });\n        }\n\n        if (data.editUrl) {\n            showHeader = true;\n            this.$editLink\n                .removeClass('hidden')\n                .attr('href', data.editUrl);\n        } else if (this.$editLink) {\n            this.$editLink.addClass('hidden');\n        }\n\n        if (data.sidebarHtml) {\n            showHeader = true;\n            this.$sidebarBtn.removeClass('hidden');\n            this.$sidebar.html(data.sidebarHtml);\n            Craft.initUiElements(this.$sidebar);\n            new Craft.ElementThumbLoader().load($(this.$sidebar));\n\n            // Open outbound links in new windows\n            this.$sidebar.find('a').each(function() {\n                if (this.hostname.length && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('target', '_blank')\n                }\n            });\n        } else if (this.$sidebarBtn) {\n            this.$sidebarBtn.addClass('hidden');\n            this.$sidebar.addClass('hidden');\n        }\n\n        if (showHeader) {\n            this.showHeader();\n        } else {\n            this.hideHeader();\n        }\n\n        this.$footer.removeClass('hidden');\n\n        if (refreshInitialData !== false) {\n            this.deltaNames = data.deltaNames;\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            Craft.appendHeadHtml(data.headHtml);\n            Craft.appendFootHtml(data.footHtml);\n            Craft.initUiElements(this.$fieldsContainer);\n\n            if (refreshInitialData) {\n                this.initialData = this.slideout.$container.serialize();\n            }\n\n            if (!Garnish.isMobileBrowser()) {\n                Craft.setFocusWithin(this.$fieldsContainer);\n            }\n\n            this.trigger('updateForm');\n        });\n    },\n\n    showSidebar: function() {\n        if (this.showingSidebar) {\n            return;\n        }\n\n        this.$body.scrollTop(0).addClass('no-scroll');\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .removeClass('hidden');\n\n        // Hack to force CSS animations\n        this.$sidebar[0].offsetWidth;\n\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebarShade\n                .removeClass('hidden');\n        }\n\n        this.$sidebar.css(this._openedSidebarStyles());\n\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebar.one('transitionend.element-editor', () => {\n                Craft.setFocusWithin(this.$sidebar);\n            });\n        }\n\n        this.$sidebarBtn\n            .addClass('active')\n            .attr({\n                title: Craft.t('app', 'Hide sidebar'),\n                'aria-label': Craft.t('app', 'Hide sidebar'),\n            });\n\n        Garnish.$win.trigger('resize');\n        this.$sidebar.trigger('scroll');\n\n        Garnish.shortcutManager.addLayer();\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.hideSidebar();\n        });\n\n        this.showingSidebar = true;\n    },\n\n    hideSidebar: function() {\n        if (!this.showingSidebar) {\n            return;\n        }\n\n        this.$body.removeClass('no-scroll');\n\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebarShade.addClass('hidden');\n        }\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .one('transitionend.element-editor', () => {\n                this.$sidebar.addClass('hidden');\n            });\n\n        this.$sidebarBtn\n            .removeClass('active')\n            .attr({\n                title: Craft.t('app', 'Show sidebar'),\n                'aria-label': Craft.t('app', 'Show sidebar'),\n            });\n\n        Garnish.shortcutManager.removeLayer();\n\n        this.showingSidebar = false;\n    },\n\n    _openedSidebarStyles: function() {\n        return {\n            [Garnish.ltr ? 'right' : 'left']: '0',\n        };\n    },\n\n    _closedSidebarStyles: function() {\n        return {\n            [Garnish.ltr ? 'right' : 'left']: '-350px',\n        };\n    },\n\n    saveElement: function() {\n        const validators = this.settings.validators;\n\n        if ($.isArray(validators)) {\n            for (let i = 0; i < validators.length; i++) {\n                if ($.isFunction(validators[i]) && !validators[i].call()) {\n                    return false;\n                }\n            }\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n\n        let data = $.param(this.getBaseData()) + '&' + this.slideout.$container.serialize();\n        data = Craft.findDeltaData(this.initialData, data, this.deltaNames, null, this.initialDeltaValues);\n\n        Craft.postActionRequest('elements/save-element', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (this.$element && this.siteId == this.$element.data('site-id')) {\n                        // Update the label\n                        const $title = this.$element.find('.title');\n                        const $a = $title.find('a');\n\n                        if ($a.length && response.cpEditUrl) {\n                            $a.attr('href', response.cpEditUrl);\n                            $a.text(response.newTitle);\n                        } else {\n                            $title.text(response.newTitle);\n                        }\n                    }\n\n                    if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                        Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                            type: Craft.elementTypeNames[this.settings.elementType][0],\n                        }));\n                    }\n\n                    this.closeSlideout();\n                    this.trigger('saveElement', {\n                        response: response\n                    });\n                    this.onSaveElement(response);\n                    this.settings.onSaveElement(response);\n\n                    // There may be a new background job that needs to be run\n                    Craft.cp.runQueue();\n                } else {\n                    this.updateForm(response, false);\n                    Garnish.shake(this.slideout.$container);\n                }\n            }\n        });\n    },\n\n    isDirty: function() {\n        return this.initialData !== null && this.slideout.$container.serialize() !== this.initialData;\n    },\n\n    maybeCloseSlideout: function() {\n        if (!this.slideout.isOpen) {\n            return;\n        }\n\n        if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n            this.closeSlideout();\n        }\n    },\n\n    closeSlideout: function() {\n        this.slideout.close();\n        this.onHideHud();\n\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n    },\n\n    destroy: function() {\n        this.slideout.destroy();\n        delete this.slideout;\n        this.base();\n    },\n\n    // Deprecated Methods\n    // -------------------------------------------------------------------------\n\n    /** @deprecated in 3.7.0 */\n    loadHud: function() {\n        this.load();\n    },\n    /** @deprecated in 3.7.0 */\n    maybeCloseHud: function() {\n        this.maybeCloseSlideout();\n    },\n    /** @deprecated in 3.7.0 */\n    closeHud: function() {\n        this.closeSlideout();\n    },\n    /** @deprecated */\n    reloadForm: function(data, callback) {\n        this.load(data).then(() => {\n            callback('success');\n        }).catch(() => {\n            callback('error');\n        });\n    },\n    /** @deprecated in 3.7.0 */\n    onBeginLoading: function() {\n        this.settings.onBeginLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onEndLoading: function() {\n        this.settings.onEndLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onSaveElement: function(response) {\n    },\n    /** @deprecated in 3.7.0 */\n    onCreateForm: function($form) {\n        this.settings.onCreateForm($form);\n    },\n    /** @deprecated in 3.7.0 */\n    onShowHud: function() {\n        this.trigger('showHud');\n        this.settings.onShowHud();\n    },\n    /** @deprecated in 3.7.0 */\n    onHideHud: function() {\n        this.trigger('hideHud');\n        this.settings.onHideHud();\n    },\n}, {\n    defaults: {\n        showSiteSwitcher: true,\n        elementId: null,\n        elementType: null,\n        siteId: null,\n        attributes: null,\n        params: null,\n        prevalidate: false,\n        elementIndex: null,\n        onSaveElement: $.noop,\n        validators: [],\n\n        /** @deprecated in 3.7.0 */\n        onShowHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onHideHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onBeginLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onEndLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onCreateForm: $.noop,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend({\n    initialized: false,\n    elementType: null,\n\n    instanceState: null,\n    sourceStates: null,\n    sourceStatesStorageKey: null,\n\n    searchTimeout: null,\n    sourceSelect: null,\n\n    $container: null,\n    $main: null,\n    isIndexBusy: false,\n\n    $sidebar: null,\n    showingSidebar: null,\n    sourceKey: null,\n    sourceViewModes: null,\n    $source: null,\n    sourcesByKey: null,\n    $visibleSources: null,\n\n    $customizeSourcesBtn: null,\n    customizeSourcesModal: null,\n\n    $toolbar: null,\n    toolbarOffset: null,\n\n    $search: null,\n    searching: false,\n    searchText: null,\n    trashed: false,\n    drafts: false,\n    $clearSearchBtn: null,\n\n    $statusMenuBtn: null,\n    $statusMenuContainer: null,\n    statusMenu: null,\n    status: null,\n\n    $siteMenuBtn: null,\n    siteMenu: null,\n    siteId: null,\n\n    $sortMenuBtn: null,\n    sortMenu: null,\n    $sortAttributesList: null,\n    $sortDirectionsList: null,\n    $scoreSortAttribute: null,\n    $structureSortAttribute: null,\n\n    $elements: null,\n    $viewModeBtnContainer: null,\n    viewModeBtns: null,\n    viewMode: null,\n    view: null,\n    _autoSelectElements: null,\n    $countSpinner: null,\n    $countContainer: null,\n    page: 1,\n    resultSet: null,\n    totalResults: null,\n    $exportBtn: null,\n\n    actions: null,\n    actionsHeadHtml: null,\n    actionsFootHtml: null,\n    $selectAllContainer: null,\n    $selectAllCheckbox: null,\n    showingActionTriggers: false,\n    exporters: null,\n    exportersByType: null,\n    _$detachedToolbarItems: null,\n    _$triggers: null,\n\n    _ignoreFailedRequest: false,\n    _cancelToken: null,\n\n    /**\n     * Constructor\n     */\n    init: function(elementType, $container, settings) {\n        this.elementType = elementType;\n        this.$container = $container;\n        this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n        // Set the state objects\n        // ---------------------------------------------------------------------\n\n        this.instanceState = this.getDefaultInstanceState();\n\n        this.sourceStates = {};\n\n        // Instance states (selected source) are stored by a custom storage key defined in the settings\n        if (this.settings.storageKey) {\n            $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n        }\n\n        // Source states (view mode, etc.) are stored by the element type and context\n        this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n        $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n        // Find the DOM elements\n        // ---------------------------------------------------------------------\n\n        this.$main = this.$container.find('.main');\n        this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n        this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n        this.$statusMenuContainer = this.$statusMenuBtn.parent();\n        this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n        this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n        this.$search = this.$toolbar.find('.search:first input:first');\n        this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n        this.$sidebar = this.$container.find('.sidebar:first');\n        this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n        this.$elements = this.$container.find('.elements:first');\n        this.$countSpinner = this.$container.find('#count-spinner');\n        this.$countContainer = this.$container.find('#count-container');\n        this.$exportBtn = this.$container.find('#export-btn');\n\n        // Hide sidebar if needed\n        if (this.settings.hideSidebar) {\n            this.$sidebar.hide();\n            $('.body, .content', this.$container).removeClass('has-sidebar');\n        }\n\n        // Initialize the sources\n        // ---------------------------------------------------------------------\n\n        if (!this.initSources()) {\n            return;\n        }\n\n        // Customize button\n        if (this.$customizeSourcesBtn.length) {\n            this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n        }\n\n        // Initialize the status menu\n        // ---------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n            this.statusMenu.on('optionselect', this._handleStatusChange.bind(this));\n        }\n\n        // Initialize the site menu\n        // ---------------------------------------------------------------------\n\n        // Is there a site menu?\n        if (this.$siteMenuBtn.length) {\n            this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n            // Figure out the initial site\n            var $option = this.siteMenu.$options.filter('.sel:first');\n\n            if (!$option.length) {\n                $option = this.siteMenu.$options.first();\n            }\n\n            if ($option.length) {\n                this._setSite($option.data('site-id'));\n            } else {\n                // No site options -- they must not have any site permissions\n                this.settings.criteria = {id: '0'};\n            }\n\n            this.siteMenu.on('optionselect', this._handleSiteChange.bind(this));\n\n            if (this.siteId) {\n                // Should we be using a different default site?\n                var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                if (defaultSiteId && defaultSiteId != this.siteId) {\n                    // Is that one available here?\n                    var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                    if ($storedSiteOption.length) {\n                        // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                        $storedSiteOption.trigger('click');\n                    }\n                }\n            }\n        } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n            this._setSite(this.settings.criteria.siteId);\n        } else {\n            this._setSite(Craft.siteId);\n        }\n\n        // Don't let the criteria override the selected site\n        if (this.settings.criteria && this.settings.criteria.siteId) {\n            delete this.settings.criteria.siteId;\n        }\n\n        // Initialize the search input\n        // ---------------------------------------------------------------------\n\n        // Automatically update the elements after new search text has been sitting for a 1/2 second\n        this.addListener(this.$search, 'input', () => {\n            if (!this.searching && this.$search.val()) {\n                this.startSearching();\n            } else if (this.searching && !this.$search.val()) {\n                this.stopSearching();\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.updateElementsIfSearchTextChanged.bind(this), 500);\n        });\n\n        // Update the elements when the Return key is pressed\n        this.addListener(this.$search, 'keypress', ev => {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.updateElementsIfSearchTextChanged();\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearSearchBtn, 'click', () => {\n            this.$search.val('');\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            this.stopSearching();\n\n            this.updateElementsIfSearchTextChanged();\n        });\n\n        // Auto-focus the Search box\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$search.trigger('focus');\n        }\n\n        // Initialize the sort menu\n        // ---------------------------------------------------------------------\n\n        // Is there a sort menu?\n        if (this.$sortMenuBtn.length) {\n            this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n            this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n            this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n            this.sortMenu.on('optionselect', this._handleSortChange.bind(this));\n        }\n\n        // Initialize the Export button\n        // ---------------------------------------------------------------------\n\n        this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n        // Let everyone know that the UI is initialized\n        // ---------------------------------------------------------------------\n\n        this.initialized = true;\n        this.afterInit();\n\n        // Select the initial source\n        // ---------------------------------------------------------------------\n\n        this.selectDefaultSource();\n\n        // Load the first batch of elements!\n        // ---------------------------------------------------------------------\n\n        // Default to whatever page is in the URL\n        this.setPage(Craft.pageNum);\n\n        this.updateElements(true);\n    },\n\n    afterInit: function() {\n        this.onAfterInit();\n    },\n\n    _createCancelToken: function() {\n        this._cancelToken = axios.CancelToken.source();\n        return this._cancelToken.token;\n    },\n\n    _cancelRequests: function() {\n        if (this._cancelToken) {\n            this._ignoreFailedRequest = true;\n            this._cancelToken.cancel();\n            Garnish.requestAnimationFrame(() => {\n                this._ignoreFailedRequest = false;\n            });\n        }\n    },\n\n    getSourceContainer: function() {\n        return this.$sidebar.find('nav > ul');\n    },\n\n    get $sources() {\n        if (!this.sourceSelect) {\n            return undefined;\n        }\n\n        return this.sourceSelect.$items;\n    },\n\n    initSources: function() {\n        var $sources = this._getSourcesInList(this.getSourceContainer());\n\n        // No source, no party.\n        if ($sources.length === 0) {\n            return false;\n        }\n\n        // The source selector\n        if (!this.sourceSelect) {\n            this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                multi: false,\n                allowEmpty: false,\n                vertical: true,\n                onSelectionChange: this._handleSourceSelectionChange.bind(this)\n            });\n        }\n\n        this.sourcesByKey = {};\n        this._initSources($sources);\n\n        return true;\n    },\n\n    selectDefaultSource: function() {\n        var sourceKey = this.getDefaultSourceKey(),\n            $source;\n\n        if (sourceKey) {\n            $source = this.getSourceByKey(sourceKey);\n\n            // Make sure it's visible\n            if (this.$visibleSources.index($source) === -1) {\n                $source = null;\n            }\n        }\n\n        if (!sourceKey || !$source) {\n            // Select the first source by default\n            $source = this.$visibleSources.first();\n        }\n\n        return this.selectSource($source);\n    },\n\n    refreshSources: function() {\n        this.sourceSelect.removeAllItems();\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n            context: this.settings.context,\n            elementType: this.elementType,\n        }).then((response) => {\n            this.setIndexAvailable();\n            this.getSourceContainer().replaceWith(response.data.html);\n            this.initSources();\n            this.selectDefaultSource();\n        }).catch(() => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    initSource: function($source) {\n        this.sourceSelect.addItems($source);\n        this.initSourceToggle($source);\n        this.sourcesByKey[$source.data('key')] = $source;\n\n        if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n            this._expandSource($source);\n        }\n    },\n\n    initSourceToggle: function($source) {\n        // Remove handlers for the same thing. Just in case.\n        this.deinitSourceToggle($source);\n\n        var $toggle = this._getSourceToggle($source);\n\n        if ($toggle.length) {\n            this.addListener($source, 'dblclick', '_handleSourceDblClick');\n            this.addListener($toggle, 'click', '_handleSourceToggleClick');\n            $source.data('hasNestedSources', true);\n        } else {\n            $source.data('hasNestedSources', false);\n        }\n    },\n\n    deinitSource: function($source) {\n        this.sourceSelect.removeItems($source);\n        this.deinitSourceToggle($source);\n        delete this.sourcesByKey[$source.data('key')];\n    },\n\n    deinitSourceToggle: function($source) {\n        if ($source.data('hasNestedSources')) {\n            this.removeListener($source, 'dblclick');\n            this.removeListener(this._getSourceToggle($source), 'click');\n        }\n\n        $source.removeData('hasNestedSources');\n    },\n\n    getDefaultInstanceState: function() {\n        return {\n            selectedSource: null,\n            expandedSources: []\n        };\n    },\n\n    getDefaultSourceKey: function() {\n        if (this.settings.defaultSource) {\n            var paths = this.settings.defaultSource.split('/'),\n                path = '';\n\n            // Expand the tree\n            for (var i = 0; i < paths.length; i++) {\n                path += paths[i];\n                var $source = this.getSourceByKey(path);\n\n                // If the folder can't be found, then just go to the stored instance source.\n                if (!$source) {\n                    return this.instanceState.selectedSource;\n                }\n\n                this._expandSource($source);\n                path += '/';\n            }\n\n            // Just make sure that the modal is aware of the newly expanded sources, too.\n            this._setSite(this.siteId);\n\n            return this.settings.defaultSource;\n        }\n\n        return this.instanceState.selectedSource;\n    },\n\n    getDefaultExpandedSources: function() {\n        return this.instanceState.expandedSources;\n    },\n\n    startSearching: function() {\n        // Show the clear button and add/select the Score sort option\n        this.$clearSearchBtn.removeClass('hidden');\n\n        if (!this.$scoreSortAttribute) {\n            this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n            this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n        }\n\n        this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n        this.searching = true;\n\n        this._updateStructureSortOption();\n        this.setSortAttribute('score');\n    },\n\n    stopSearching: function() {\n        // Hide the clear button and Score sort option\n        this.$clearSearchBtn.addClass('hidden');\n\n        this.$scoreSortAttribute.detach();\n\n        this.searching = false;\n\n        this._updateStructureSortOption();\n    },\n\n    setInstanceState: function(key, value) {\n        if (typeof key === 'object') {\n            $.extend(this.instanceState, key);\n        } else {\n            this.instanceState[key] = value;\n        }\n\n        this.storeInstanceState();\n    },\n\n    storeInstanceState: function() {\n        if (this.settings.storageKey) {\n            Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n        }\n    },\n\n    getSourceState: function(source, key, defaultValue) {\n        if (typeof this.sourceStates[source] === 'undefined') {\n            // Set it now so any modifications to it by whoever's calling this will be stored.\n            this.sourceStates[source] = {};\n        }\n\n        if (typeof key === 'undefined') {\n            return this.sourceStates[source];\n        } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n            return this.sourceStates[source][key];\n        } else {\n            return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n        }\n    },\n\n    getSelectedSourceState: function(key, defaultValue) {\n        return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n    },\n\n    setSelecetedSourceState: function(key, value) {\n        var viewState = this.getSelectedSourceState();\n\n        if (typeof key === 'object') {\n            $.extend(viewState, key);\n        } else {\n            viewState[key] = value;\n        }\n\n        this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n        // Store it in localStorage too\n        Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n    },\n\n    storeSortAttributeAndDirection: function() {\n        var attr = this.getSelectedSortAttribute();\n\n        if (attr !== 'score') {\n            this.setSelecetedSourceState({\n                order: attr,\n                sort: this.getSelectedSortDirection()\n            });\n        }\n    },\n\n    /**\n     * Sets the page number.\n     */\n    setPage: function(page) {\n        if (this.settings.context !== 'index') {\n            return;\n        }\n\n        page = Math.max(page, 1);\n        this.page = page;\n\n        // Update the URL\n        var url = document.location.href\n            .replace(/\\?.*$/, '')\n            .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n            .replace(/\\/+$/, '');\n\n        if (this.page !== 1) {\n            if (Craft.pageTrigger[0] !== '?') {\n                url += '/';\n            }\n            url += Craft.pageTrigger + this.page;\n        }\n\n        history.replaceState({}, '', url);\n    },\n\n    _resetCount: function() {\n        this.resultSet = null;\n        this.totalResults = null;\n    },\n\n    /**\n     * Returns the data that should be passed to the elementIndex/getElements controller action\n     * when loading elements.\n     */\n    getViewParams: function() {\n        var criteria = {\n            siteId: this.siteId,\n            search: this.searchText,\n            offset: this.settings.batchSize * (this.page - 1),\n            limit: this.settings.batchSize,\n        };\n\n        // Only set drafts/draftOf/trashed params when needed, so we don't potentially override a source's criteria\n        if (\n            this.settings.canHaveDrafts &&\n            (this.drafts || (this.settings.context === 'index' && !this.status))\n        ) {\n            criteria.drafts = this.drafts || null;\n            criteria.savedDraftsOnly = true;\n            if (!this.drafts) {\n                criteria.draftOf = false;\n            }\n        }\n        if (this.trashed) {\n            criteria.trashed = true;\n        }\n\n        if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n            criteria.status = this.status;\n        }\n\n        $.extend(criteria, this.settings.criteria);\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType,\n            source: this.instanceState.selectedSource,\n            criteria: criteria,\n            disabledElementIds: this.settings.disabledElementIds,\n            viewState: $.extend({}, this.getSelectedSourceState()),\n            paginated: this._isViewPaginated() ? 1 : 0,\n        };\n\n        // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n        params.viewState.order = this.getSelectedSortAttribute();\n        params.viewState.sort = this.getSelectedSortDirection();\n\n        if (this.getSelectedSortAttribute() === 'structure') {\n            if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                this.instanceState.collapsedElementIds = [];\n            }\n            params.collapsedElementIds = this.instanceState.collapsedElementIds;\n        }\n\n        // Give plugins a chance to hook in here\n        this.trigger('registerViewParams', {\n            params: params,\n        });\n\n        return params;\n    },\n\n    updateElements: function(preservePagination) {\n        // Ignore if we're not fully initialized yet\n        if (!this.initialized) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        this.setIndexBusy();\n\n        // Kill the old view class\n        if (this.view) {\n            this.view.destroy();\n            delete this.view;\n        }\n\n        if (preservePagination !== true) {\n            this.setPage(1);\n            this._resetCount();\n        }\n\n        var params = this.getViewParams();\n\n        Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n            data: params,\n            cancelToken: this._createCancelToken(),\n        }).then((response) => {\n            this.setIndexAvailable();\n            (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n            this._updateView(params, response.data);\n        }).catch(e => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    updateElementsIfSearchTextChanged: function() {\n        if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n            this.updateElements();\n        }\n    },\n\n    showActionTriggers: function() {\n        // Ignore if they're already shown\n        if (this.showingActionTriggers) {\n            return;\n        }\n\n        // Hard-code the min toolbar height in case it was taller than the actions toolbar\n        // (prevents the elements from jumping if this ends up being a double-click)\n        this.$toolbar.css('min-height', this.$toolbar.height());\n\n        // Hide any toolbar inputs\n        this._$detachedToolbarItems = this.$toolbar.children();\n        this._$detachedToolbarItems.detach();\n\n        if (!this._$triggers) {\n            this._createTriggers();\n        } else {\n            this._$triggers.appendTo(this.$toolbar);\n        }\n\n        this.showingActionTriggers = true;\n    },\n\n    submitAction: function(action, actionParams) {\n        // Make sure something's selected\n        var selectedElementIds = this.view.getSelectedElementIds(),\n            totalSelected = selectedElementIds.length;\n\n        if (totalSelected === 0) {\n            return;\n        }\n\n        if (typeof action === 'string') {\n            action = this._findAction(action);\n        }\n\n        if (action.confirm && !confirm(action.confirm)) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        // Get ready to submit\n        var viewParams = this.getViewParams();\n\n        actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n        var params = $.extend(viewParams, action.settings || {}, actionParams, {\n            elementAction: action.type,\n            elementIds: selectedElementIds\n        });\n\n        // Do it\n        this.setIndexBusy();\n        this._autoSelectElements = selectedElementIds;\n\n        if (action.download) {\n            if (Craft.csrfTokenName) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n            Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                this.setIndexAvailable();\n            }).catch(e => {\n                this.setIndexAvailable();\n            });\n        } else {\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        }\n    },\n\n    _findAction: function(actionClass) {\n        for (var i = 0; i < this.actions.length; i++) {\n            if (this.actions[i].type === actionClass) {\n                return this.actions[i];\n            }\n        }\n        throw `Invalid element action: ${actionClass}`;\n    },\n\n    afterAction: function(action, params) {\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n\n        this.onAfterAction(action, params);\n    },\n\n    hideActionTriggers: function() {\n        // Ignore if there aren't any\n        if (!this.showingActionTriggers) {\n            return;\n        }\n\n        this._$detachedToolbarItems.appendTo(this.$toolbar);\n        this._$triggers.detach();\n        // this._$detachedToolbarItems.removeClass('hidden');\n\n        // Unset the min toolbar height\n        this.$toolbar.css('min-height', '');\n\n        this.showingActionTriggers = false;\n    },\n\n    updateActionTriggers: function() {\n        // Do we have an action UI to update?\n        if (this.actions) {\n            var totalSelected = this.view.getSelectedElements().length;\n\n            if (totalSelected !== 0) {\n                if (totalSelected === this.view.getEnabledElements().length) {\n                    this.$selectAllCheckbox.removeClass('indeterminate');\n                    this.$selectAllCheckbox.addClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'true');\n                } else {\n                    this.$selectAllCheckbox.addClass('indeterminate');\n                    this.$selectAllCheckbox.removeClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'mixed');\n                }\n\n                this.showActionTriggers();\n            } else {\n                this.$selectAllCheckbox.removeClass('indeterminate checked');\n                this.$selectAllContainer.attr('aria-checked', 'false');\n                this.hideActionTriggers();\n            }\n        }\n    },\n\n    getSelectedElements: function() {\n        return this.view ? this.view.getSelectedElements() : $();\n    },\n\n    getSelectedElementIds: function() {\n        return this.view ? this.view.getSelectedElementIds() : [];\n    },\n\n    setStatus: function(status) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n        if ($option.length) {\n            this.statusMenu.selectOption($option[0]);\n        }\n    },\n\n    getSortAttributeOption: function(attr) {\n        return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n    },\n\n    getSelectedSortAttribute: function() {\n        return this.$sortAttributesList.find('a.sel:first').data('attr');\n    },\n\n    setSortAttribute: function(attr) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.getSortAttributeOption(attr);\n\n        if ($option.length) {\n            this.$sortAttributesList.find('a.sel').removeClass('sel');\n            $option.addClass('sel');\n\n            var label = $option.text();\n            this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n            this.$sortMenuBtn.text(label);\n\n            if (attr === 'score') {\n                this.setSortDirection('desc');\n            } else {\n                this.setSortDirection($option.data('default-dir') || 'asc');\n            }\n\n            if (attr === 'structure') {\n                this.$sortDirectionsList.find('a').addClass('disabled');\n            } else {\n                this.$sortDirectionsList.find('a').removeClass('disabled');\n            }\n        }\n    },\n\n    getSortDirectionOption: function(dir) {\n        return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n    },\n\n    getSelectedSortDirection: function() {\n        return this.$sortDirectionsList.find('a.sel:first').data('dir');\n    },\n\n    getSelectedViewMode: function() {\n        return this.getSelectedSourceState('mode') || 'table';\n    },\n\n    setSortDirection: function(dir) {\n        if (dir !== 'desc') {\n            dir = 'asc';\n        }\n\n        this.$sortMenuBtn.attr('data-icon', dir);\n        this.$sortDirectionsList.find('a.sel').removeClass('sel');\n        this.getSortDirectionOption(dir).addClass('sel');\n    },\n\n    getSourceByKey: function(key) {\n        if (typeof this.sourcesByKey[key] === 'undefined') {\n            return null;\n        }\n\n        return this.sourcesByKey[key];\n    },\n\n    selectSource: function($source) {\n        if (!$source || !$source.length) {\n            return false;\n        }\n\n        if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n            return false;\n        }\n\n        // Hide action triggers if they're currently being shown\n        this.hideActionTriggers();\n\n        this.$source = $source;\n        this.sourceKey = $source.data('key');\n        this.setInstanceState('selectedSource', this.sourceKey);\n        this.sourceSelect.selectItem($source);\n\n        Craft.cp.updateSidebarMenuLabel();\n\n        if (this.searching) {\n            // Clear the search value without causing it to update elements\n            this.searchText = null;\n            this.$search.val('');\n            this.stopSearching();\n        }\n\n        // Sort menu\n        // ----------------------------------------------------------------------\n\n        // Remove any existing custom sort options from the menu\n        this.$sortAttributesList.children('li[data-extra]').remove();\n\n        // Does this source have any custom sort options?\n        let $topSource = this.$source.closest('nav > ul > li').children('a');\n        let sortOptions = $topSource.data('sort-options')\n        if (sortOptions) {\n            for (let i = 0; i < sortOptions.length; i++) {\n                let $option = $('<li/>', {\n                    'data-extra': true,\n                })\n                    .append(\n                        $('<a/>', {\n                            text: sortOptions[i][0],\n                            'data-attr': sortOptions[i][1],\n                        })\n                    )\n                    .appendTo(this.$sortAttributesList);\n                this.sortMenu.addOptions($option.children());\n            }\n        }\n\n        // Does this source have a structure?\n        if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n            if (!this.$structureSortAttribute) {\n                this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                this.sortMenu.addOptions(this.$structureSortAttribute.children());\n            }\n\n            this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n        } else if (this.$structureSortAttribute) {\n            this.$structureSortAttribute.removeClass('sel').detach();\n        }\n\n        this.setStoredSortOptionsForSource();\n\n        // Status menu\n        // ----------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                this.$statusMenuContainer.addClass('hidden');\n            } else {\n                this.$statusMenuContainer.removeClass('hidden');\n            }\n\n            if (this.trashed) {\n                // Swap to the initial status\n                var $firstOption = this.statusMenu.$options.first();\n                this.setStatus($firstOption.data('status'));\n            }\n        }\n\n        // View mode buttons\n        // ----------------------------------------------------------------------\n\n        // Clear out any previous view mode data\n        if (this.$viewModeBtnContainer) {\n            this.$viewModeBtnContainer.remove();\n        }\n\n        this.viewModeBtns = {};\n        this.viewMode = null;\n\n        // Get the new list of view modes\n        this.sourceViewModes = this.getViewModesForSource();\n\n        // Create the buttons if there's more than one mode available to this source\n        if (this.sourceViewModes.length > 1) {\n            this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                let sourceViewMode = this.sourceViewModes[i];\n\n                let $viewModeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                    'data-view': sourceViewMode.mode,\n                    'data-icon': sourceViewMode.icon,\n                    'aria-label': sourceViewMode.title,\n                    title: sourceViewMode.title,\n                }).appendTo(this.$viewModeBtnContainer);\n\n                this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                    this.selectViewMode(ev.data.mode);\n                    this.updateElements();\n                });\n            }\n        }\n\n        // Figure out which mode we should start with\n        var viewMode = this.getSelectedViewMode();\n\n        if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n            // Try to keep using the current view mode\n            if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                viewMode = this.viewMode;\n            }\n            // Just use the first one\n            else {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n        }\n\n        this.selectViewMode(viewMode);\n\n        this.onSelectSource();\n\n        return true;\n    },\n\n    selectSourceByKey: function(key) {\n        var $source = this.getSourceByKey(key);\n\n        if ($source) {\n            return this.selectSource($source);\n        } else {\n            return false;\n        }\n    },\n\n    setStoredSortOptionsForSource: function() {\n        var sortAttr = this.getSelectedSourceState('order'),\n            sortDir = this.getSelectedSourceState('sort');\n\n        if (!sortAttr || !sortDir) {\n            // Get the default\n            sortAttr = this.getDefaultSort();\n\n            if (Garnish.isArray(sortAttr)) {\n                sortDir = sortAttr[1];\n                sortAttr = sortAttr[0];\n            }\n        }\n\n        if (sortDir !== 'asc' && sortDir !== 'desc') {\n            sortDir = 'asc';\n        }\n\n        this.setSortAttribute(sortAttr);\n        this.setSortDirection(sortDir);\n    },\n\n    getDefaultSort: function() {\n        // Does the source specify what to do?\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n            return this.$source.attr('data-default-sort').split(':');\n        } else {\n            // Default to whatever's first\n            return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n        }\n    },\n\n    getViewModesForSource: function() {\n        var viewModes = [\n            {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n        ];\n\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n            viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n        }\n\n        return viewModes;\n    },\n\n    doesSourceHaveViewMode: function(viewMode) {\n        for (var i = 0; i < this.sourceViewModes.length; i++) {\n            if (this.sourceViewModes[i].mode === viewMode) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    selectViewMode: function(viewMode, force) {\n        // Make sure that the current source supports it\n        if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n            viewMode = this.sourceViewModes[0].mode;\n        }\n\n        // Has anything changed?\n        if (viewMode === this.viewMode) {\n            return;\n        }\n\n        // Deselect the previous view mode\n        if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].removeClass('active');\n        }\n\n        this.viewMode = viewMode;\n        this.setSelecetedSourceState('mode', this.viewMode);\n\n        if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].addClass('active');\n        }\n    },\n\n    createView: function(mode, settings) {\n        var viewClass = this.getViewClass(mode);\n        return new viewClass(this, this.$elements, settings);\n    },\n\n    getViewClass: function(mode) {\n        switch (mode) {\n            case 'table':\n                return Craft.TableElementIndexView;\n            case 'thumbs':\n                return Craft.ThumbsElementIndexView;\n            default:\n                throw `View mode \"${mode}\" not supported.`;\n        }\n    },\n\n    rememberDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index === -1) {\n            this.settings.disabledElementIds.push(id);\n        }\n    },\n\n    forgetDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index !== -1) {\n            this.settings.disabledElementIds.splice(index, 1);\n        }\n    },\n\n    enableElements: function($elements) {\n        $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.forgetDisabledElementId(id);\n        }\n\n        this.onEnableElements($elements);\n    },\n\n    disableElements: function($elements) {\n        $elements.removeClass('sel').addClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.rememberDisabledElementId(id);\n        }\n\n        this.onDisableElements($elements);\n    },\n\n    getElementById: function(id) {\n        return this.view.getElementById(id);\n    },\n\n    enableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.enableElements($element);\n            } else {\n                this.forgetDisabledElementId(id);\n            }\n        }\n    },\n\n    disableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.disableElements($element);\n            } else {\n                this.rememberDisabledElementId(id);\n            }\n        }\n    },\n\n    selectElementAfterUpdate: function(id) {\n        if (this._autoSelectElements === null) {\n            this._autoSelectElements = [];\n        }\n\n        this._autoSelectElements.push(id);\n    },\n\n    addButton: function($button) {\n        this.getButtonContainer().append($button);\n    },\n\n    isShowingSidebar: function() {\n        if (this.showingSidebar === null) {\n            this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n        }\n\n        return this.showingSidebar;\n    },\n\n    getButtonContainer: function() {\n        // Is there a predesignated place where buttons should go?\n        if (this.settings.buttonContainer) {\n            return $(this.settings.buttonContainer);\n        } else {\n            var $container = $('#action-button');\n\n            if (!$container.length) {\n                $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n            }\n\n            return $container;\n        }\n    },\n\n    setIndexBusy: function() {\n        this.$elements.addClass('busy');\n        this.isIndexBusy = true;\n    },\n\n    setIndexAvailable: function() {\n        this.$elements.removeClass('busy');\n        this.isIndexBusy = false;\n    },\n\n    createCustomizeSourcesModal: function() {\n        // Recreate it each time\n        var modal = new Craft.CustomizeSourcesModal(this, {\n            onHide: function() {\n                modal.destroy();\n            }\n        });\n\n        return modal;\n    },\n\n    disable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.disable();\n        }\n\n        if (this.view) {\n            this.view.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.enable();\n        }\n\n        if (this.view) {\n            this.view.enable();\n        }\n\n        this.base();\n    },\n\n    onAfterInit: function() {\n        this.settings.onAfterInit();\n        this.trigger('afterInit');\n    },\n\n    onSelectSource: function() {\n        this.settings.onSelectSource(this.sourceKey);\n        this.trigger('selectSource', {sourceKey: this.sourceKey});\n    },\n\n    onSelectSite: function() {\n        this.settings.onSelectSite(this.siteId);\n        this.trigger('selectSite', {siteId: this.siteId});\n    },\n\n    onUpdateElements: function() {\n        this.settings.onUpdateElements();\n        this.trigger('updateElements');\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    onEnableElements: function($elements) {\n        this.settings.onEnableElements($elements);\n        this.trigger('enableElements', {elements: $elements});\n    },\n\n    onDisableElements: function($elements) {\n        this.settings.onDisableElements($elements);\n        this.trigger('disableElements', {elements: $elements});\n    },\n\n    onAfterAction: function(action, params) {\n        this.settings.onAfterAction(action, params);\n        this.trigger('afterAction', {action: action, params: params});\n    },\n\n    // UI state handlers\n    // -------------------------------------------------------------------------\n\n    _handleSourceSelectionChange: function() {\n        // If the selected source was just removed (maybe because its parent was collapsed),\n        // there won't be a selected source\n        if (!this.sourceSelect.totalSelected) {\n            this.sourceSelect.selectItem(this.$visibleSources.first());\n            return;\n        }\n\n        if (this.selectSource(this.sourceSelect.$selectedItems)) {\n            this.updateElements();\n        }\n    },\n\n    _handleActionTriggerSubmit: function(ev) {\n        ev.preventDefault();\n\n        var $form = $(ev.currentTarget);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($form.data('action'), Garnish.getPostData($form));\n    },\n\n    _handleMenuActionTriggerSubmit: function(ev) {\n        var $option = $(ev.option);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($option.data('action'));\n    },\n\n    _handleStatusChange: function(ev) {\n        this.statusMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$statusMenuBtn.html($option.html());\n\n        this.trashed = false;\n        this.drafts = false;\n        this.status = null;\n\n        if (Garnish.hasAttr($option, 'data-trashed')) {\n            this.trashed = true;\n        } else if (Garnish.hasAttr($option, 'data-drafts')) {\n            this.drafts = true;\n        } else {\n            this.status = $option.data('status');\n        }\n\n        this._updateStructureSortOption();\n        this.updateElements();\n    },\n\n    _handleSiteChange: function(ev) {\n        this.siteMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$siteMenuBtn.html($option.html());\n        this._setSite($option.data('site-id'));\n        this.onSelectSite();\n    },\n\n    _setSite: function(siteId) {\n        let firstSite = this.siteId === null;\n        this.siteId = siteId;\n        this.$visibleSources = $();\n\n        // Hide any sources that aren't available for this site\n        var $firstVisibleSource;\n        var $source;\n        // Select a new source automatically if a site is already selected, but we don't have a selected source\n        // (or if the currently selected source ends up not supporting the new site)\n        var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n        for (var i = 0; i < this.$sources.length; i++) {\n            $source = this.$sources.eq(i);\n            if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                $source.parent().removeClass('hidden');\n                this.$visibleSources = this.$visibleSources.add($source);\n                if (!$firstVisibleSource) {\n                    $firstVisibleSource = $source;\n                }\n            } else {\n                $source.parent().addClass('hidden');\n\n                // Is this the currently selected source?\n                if (this.$source && this.$source.get(0) == $source.get(0)) {\n                    selectNewSource = true;\n                }\n            }\n        }\n\n        if (this.initialized && selectNewSource) {\n            this.selectSource($firstVisibleSource);\n        }\n\n        // Hide any empty-nester headings\n        var $headings = this.getSourceContainer().children('.heading');\n        var $heading;\n\n        for (i = 0; i < $headings.length; i++) {\n            $heading = $headings.eq(i);\n            if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                $heading.removeClass('hidden');\n            } else {\n                $heading.addClass('hidden');\n            }\n        }\n\n        if (this.initialized) {\n            if (this.settings.context === 'index') {\n                // Remember this site for later\n                Craft.cp.setSiteId(siteId);\n            }\n\n            // Update the elements\n            this.updateElements();\n        }\n    },\n\n    _handleSortChange: function(ev) {\n        var $option = $(ev.selectedOption);\n\n        if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n            return;\n        }\n\n        // Is this an attribute or a direction?\n        if ($option.parent().parent().is(this.$sortAttributesList)) {\n            this.setSortAttribute($option.data('attr'));\n        } else {\n            this.setSortDirection($option.data('dir'));\n        }\n\n        this.storeSortAttributeAndDirection();\n        this.updateElements();\n    },\n\n    _handleSelectionChange: function() {\n        this.updateActionTriggers();\n        this.onSelectionChange();\n    },\n\n    _handleSourceDblClick: function(ev) {\n        this._toggleSource($(ev.currentTarget));\n        ev.stopPropagation();\n    },\n\n    _handleSourceToggleClick: function(ev) {\n        this._toggleSource($(ev.currentTarget).prev('a'));\n        ev.stopPropagation();\n    },\n\n    _updateStructureSortOption: function() {\n        var $option = this.getSortAttributeOption('structure');\n\n        if (!$option.length) {\n            return;\n        }\n\n        if (this.trashed || this.drafts || this.searching) {\n            $option.addClass('disabled');\n            if (this.getSelectedSortAttribute() === 'structure') {\n                // Temporarily set the sort to the first option\n                var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                this.setSortAttribute($firstOption.data('attr'));\n                this.setSortDirection('asc');\n            }\n        } else {\n            $option.removeClass('disabled');\n            this.setStoredSortOptionsForSource();\n        }\n    },\n\n    // Source managemnet\n    // -------------------------------------------------------------------------\n\n    _getSourcesInList: function($list) {\n        return $list.children('li').children('a');\n    },\n\n    _getChildSources: function($source) {\n        var $list = $source.siblings('ul');\n        return this._getSourcesInList($list);\n    },\n\n    _getSourceToggle: function($source) {\n        return $source.siblings('.toggle');\n    },\n\n    _initSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.initSource($($sources[i]));\n        }\n    },\n\n    _deinitSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.deinitSource($($sources[i]));\n        }\n    },\n\n    _toggleSource: function($source) {\n        if ($source.parent('li').hasClass('expanded')) {\n            this._collapseSource($source);\n        } else {\n            this._expandSource($source);\n        }\n    },\n\n    _expandSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'true',\n            'aria-label': Craft.t('app', 'Hide nested sources'),\n        });\n        $source.parent('li').addClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._initSources($childSources);\n\n        var key = $source.data('key');\n        if (this.instanceState.expandedSources.indexOf(key) === -1) {\n            this.instanceState.expandedSources.push(key);\n            this.storeInstanceState();\n        }\n    },\n\n    _collapseSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'false',\n            'aria-label': Craft.t('app', 'Show nested sources'),\n        });\n        $source.parent('li').removeClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._deinitSources($childSources);\n\n        var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n        if (i !== -1) {\n            this.instanceState.expandedSources.splice(i, 1);\n            this.storeInstanceState();\n        }\n    },\n\n    // View\n    // -------------------------------------------------------------------------\n\n    _isViewPaginated: function() {\n        return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n    },\n\n    _updateView: function(params, response) {\n        // Cleanup\n        // -------------------------------------------------------------\n\n        // Get rid of the old action triggers regardless of whether the new batch has actions or not\n        if (this.actions) {\n            this.hideActionTriggers();\n            this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n        }\n\n        // Update the count text\n        // -------------------------------------------------------------\n\n        if (this.$countContainer.length) {\n            this.$countSpinner.removeClass('hidden');\n            this.$countContainer.html('');\n\n            this._countResults()\n                .then((total) => {\n                    this.$countSpinner.addClass('hidden');\n\n                    let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                    let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                    if (!this._isViewPaginated()) {\n                        let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n                        this.$countContainer.text(countLabel);\n                    } else {\n                        let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                        let last = Math.min(first + (this.settings.batchSize - 1), total);\n                        let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            first: first,\n                            last: last,\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n\n                        let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                        let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                        let $prevBtn = $('<div/>', {\n                            'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                            title: Craft.t('app', 'Previous Page')\n                        }).appendTo($paginationContainer);\n                        let $nextBtn = $('<div/>', {\n                            'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                            title: Craft.t('app', 'Next Page')\n                        }).appendTo($paginationContainer);\n\n                        $('<div/>', {\n                            'class': 'page-info',\n                            text: countLabel\n                        }).appendTo($paginationContainer);\n\n                        if (this.page > 1) {\n                            this.addListener($prevBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page - 1);\n                                this.updateElements(true);\n                            });\n                        }\n\n                        if (this.page < totalPages) {\n                            this.addListener($nextBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page + 1);\n                                this.updateElements(true);\n                            });\n                        }\n                    }\n                })\n                .catch(() => {\n                    this.$countSpinner.addClass('hidden');\n                });\n        }\n\n        // Update the view with the new container + elements HTML\n        // -------------------------------------------------------------\n\n        this.$elements.html(response.html);\n        Craft.appendHeadHtml(response.headHtml);\n        Craft.appendFootHtml(response.footHtml);\n\n        // Batch actions setup\n        // -------------------------------------------------------------\n\n        this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n        if (response.actions && response.actions.length) {\n            if (this.$selectAllContainer.length) {\n                this.actions = response.actions;\n                this.actionsHeadHtml = response.actionsHeadHtml;\n                this.actionsFootHtml = response.actionsFootHtml;\n\n                // Create the select all checkbox\n                this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                this.$selectAllContainer.attr({\n                    'role': 'checkbox',\n                    'tabindex': '0',\n                    'aria-checked': 'false',\n                    'aria-label': Craft.t('app', 'Select all'),\n                });\n\n                this.addListener(this.$selectAllContainer, 'click', function() {\n                    if (this.view.getSelectedElements().length === 0) {\n                        this.view.selectAllElements();\n                    } else {\n                        this.view.deselectAllElements();\n                    }\n                });\n\n                this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                    if (ev.keyCode === Garnish.SPACE_KEY) {\n                        ev.preventDefault();\n\n                        $(ev.currentTarget).trigger('click');\n                    }\n                });\n            }\n        } else {\n            if (!this.$selectAllContainer.siblings().length) {\n                this.$selectAllContainer.parent('.header').remove();\n            }\n            this.$selectAllContainer.remove();\n        }\n\n        // Exporters setup\n        // -------------------------------------------------------------\n\n        this.exporters = response.exporters;\n        this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n        if (this.exporters && this.exporters.length) {\n            this.$exportBtn.removeClass('hidden');\n        } else {\n            this.$exportBtn.addClass('hidden');\n        }\n\n        // Create the view\n        // -------------------------------------------------------------\n\n        // Should we make the view selectable?\n        var selectable = (this.actions || this.settings.selectable);\n\n        this.view = this.createView(this.getSelectedViewMode(), {\n            context: this.settings.context,\n            batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n            params: params,\n            selectable: selectable,\n            multiSelect: (this.actions || this.settings.multiSelect),\n            checkboxMode: !!this.actions,\n            onSelectionChange: this._handleSelectionChange.bind(this)\n        });\n\n        // Auto-select elements\n        // -------------------------------------------------------------\n\n        if (this._autoSelectElements) {\n            if (selectable) {\n                for (var i = 0; i < this._autoSelectElements.length; i++) {\n                    this.view.selectElementById(this._autoSelectElements[i]);\n                }\n            }\n\n            this._autoSelectElements = null;\n        }\n\n        // Trigger the event\n        // -------------------------------------------------------------\n\n        this.onUpdateElements();\n    },\n\n    _countResults: function() {\n        return new Promise((resolve, reject) => {\n            if (this.totalResults !== null) {\n                resolve(this.totalResults);\n            } else {\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                // Make sure we've got an active result set ID\n                if (this.resultSet === null) {\n                    this.resultSet = Math.floor(Math.random() * 100000000);\n                }\n                params.resultSet = this.resultSet;\n\n                Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    if (response.data.resultSet == this.resultSet) {\n                        this.totalResults = response.data.count;\n                        resolve(response.data.count);\n                    } else {\n                        reject();\n                    }\n                }).catch(reject);\n            }\n        });\n    },\n\n    _createTriggers: function() {\n        var triggers = [],\n            safeMenuActions = [],\n            destructiveMenuActions = [];\n\n        var i;\n\n        for (i = 0; i < this.actions.length; i++) {\n            var action = this.actions[i];\n\n            if (action.trigger) {\n                var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                    .data('action', action)\n                    .append(action.trigger);\n\n                this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                triggers.push($form);\n            } else {\n                if (!action.destructive) {\n                    safeMenuActions.push(action);\n                } else {\n                    destructiveMenuActions.push(action);\n                }\n            }\n        }\n\n        var $btn;\n\n        if (safeMenuActions.length || destructiveMenuActions.length) {\n            var $menuTrigger = $('<form/>');\n\n            $btn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn',\n                'data-icon': 'settings',\n                title: Craft.t('app', 'Actions'),\n            }).appendTo($menuTrigger);\n\n            var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n            if ($safeList) {\n                $safeList.appendTo($menu);\n            }\n\n            if ($safeList && $destructiveList) {\n                $('<hr/>').appendTo($menu);\n            }\n\n            if ($destructiveList) {\n                $destructiveList.appendTo($menu);\n            }\n\n            triggers.push($menuTrigger);\n        }\n\n        this._$triggers = $();\n\n        for (i = 0; i < triggers.length; i++) {\n            var $div = $('<div/>').append(triggers[i]);\n            this._$triggers = this._$triggers.add($div);\n        }\n\n        this._$triggers.appendTo(this.$toolbar);\n        Craft.appendHeadHtml(this.actionsHeadHtml);\n        Craft.appendFootHtml(this.actionsFootHtml);\n\n        Craft.initUiElements(this._$triggers);\n\n        if ($btn) {\n            $btn.data('menubtn').on('optionSelect', this._handleMenuActionTriggerSubmit.bind(this));\n        }\n    },\n\n    _showExportHud: function() {\n        this.$exportBtn.addClass('active');\n\n        var $form = $('<form/>', {\n            'class': 'export-form'\n        });\n\n        var typeOptions = [];\n        for (var i = 0; i < this.exporters.length; i++) {\n            typeOptions.push({label: this.exporters[i].name, value: this.exporters[i].type});\n        }\n        var $typeField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Export Type'),\n            options: typeOptions,\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        var $formatField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Format'),\n            options: [\n                {label: 'CSV', value: 'csv'}, {label: 'JSON', value: 'json'}, {label: 'XML', value: 'xml'},\n            ],\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        let $typeSelect = $typeField.find('select');\n        this.addListener($typeSelect, 'change', () => {\n            let type = $typeSelect.val();\n            if (this.exportersByType[type].formattable) {\n                $formatField.removeClass('hidden');\n            } else {\n                $formatField.addClass('hidden');\n            }\n        });\n        $typeSelect.trigger('change');\n\n        // Only show the Limit field if there aren't any selected elements\n        var selectedElementIds = this.view.getSelectedElementIds();\n\n        if (!selectedElementIds.length) {\n            var $limitField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Limit'),\n                placeholder: Craft.t('app', 'No limit'),\n                type: 'number',\n                min: 1\n            }).appendTo($form);\n        }\n\n        $('<button/>', {\n            type: 'submit',\n            'class': 'btn submit fullwidth',\n            text: Craft.t('app', 'Export')\n        }).appendTo($form)\n\n        var $spinner = $('<div/>', {\n            'class': 'spinner hidden'\n        }).appendTo($form);\n\n        var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n        hud.on('hide', () => {\n            this.$exportBtn.removeClass('active');\n        });\n\n        var submitting = false;\n\n        this.addListener($form, 'submit', function(ev) {\n            ev.preventDefault();\n            if (submitting) {\n                return;\n            }\n\n            submitting = true;\n            $spinner.removeClass('hidden');\n\n            var params = this.getViewParams();\n            delete params.criteria.offset;\n            delete params.criteria.limit;\n\n            params.type = $typeField.find('select').val();\n            params.format = $formatField.find('select').val();\n\n            if (selectedElementIds.length) {\n                params.criteria.id = selectedElementIds;\n            } else {\n                var limit = parseInt($limitField.find('input').val());\n                if (limit && !isNaN(limit)) {\n                    params.criteria.limit = limit;\n                }\n            }\n\n            if (Craft.csrfTokenValue) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                .then(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                })\n                .catch(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                });\n        });\n    },\n\n    _createMenuTriggerList: function(actions, destructive) {\n        if (actions && actions.length) {\n            var $ul = $('<ul/>');\n\n            for (var i = 0; i < actions.length; i++) {\n                $('<li/>').append($('<a/>', {\n                    id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                    'class': (destructive ? 'error' : null),\n                    data: {\n                        action: actions[i],\n                    },\n                    text: actions[i].name\n                })).appendTo($ul);\n            }\n\n            return $ul;\n        }\n    }\n}, {\n    defaults: {\n        context: 'index',\n        modal: null,\n        storageKey: null,\n        criteria: null,\n        batchSize: 100,\n        disabledElementIds: [],\n        selectable: false,\n        multiSelect: false,\n        buttonContainer: null,\n        hideSidebar: false,\n        toolbarSelector: '.toolbar:first',\n        refreshSourcesAction: 'element-indexes/get-source-tree-html',\n        updateElementsAction: 'element-indexes/get-elements',\n        countElementsAction: 'element-indexes/count-elements',\n        submitActionsAction: 'element-indexes/perform-action',\n        defaultSiteId: null,\n        defaultSource: null,\n        canHaveDrafts: false,\n\n        onAfterInit: $.noop,\n        onSelectSource: $.noop,\n        onSelectSite: $.noop,\n        onUpdateElements: $.noop,\n        onSelectionChange: $.noop,\n        onEnableElements: $.noop,\n        onDisableElements: $.noop,\n        onAfterAction: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend({\n    $container: null,\n    $loadingMoreSpinner: null,\n    $elementContainer: null,\n    $scroller: null,\n\n    elementIndex: null,\n    thumbLoader: null,\n    elementSelect: null,\n\n    loadingMore: false,\n\n    _totalVisible: null,\n    _morePending: null,\n    _handleEnableElements: null,\n    _handleDisableElements: null,\n\n    init: function(elementIndex, container, settings) {\n        this.elementIndex = elementIndex;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n        // Create a \"loading-more\" spinner\n        this.$loadingMoreSpinner = $(\n            '<div class=\"centeralign hidden\">' +\n            '<div class=\"spinner loadingmore\"></div>' +\n            '</div>'\n        ).insertAfter(this.$container);\n\n        // Get the actual elements container and its child elements\n        this.$elementContainer = this.getElementContainer();\n        var $elements = this.$elementContainer.children();\n\n        this.setTotalVisible($elements.length);\n        this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n        // Instantiate the thumb loader\n        this.thumbLoader = new Craft.ElementThumbLoader();\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select(\n                this.$elementContainer,\n                $elements.filter(':not(.disabled)'),\n                {\n                    multi: this.settings.multiSelect,\n                    vertical: this.isVerticalList(),\n                    handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                    filter: ':not(a):not(.toggle)',\n                    checkboxMode: this.settings.checkboxMode,\n                    onSelectionChange: this.onSelectionChange.bind(this)\n                });\n\n            this._handleEnableElements = ev => {\n                this.elementSelect.addItems(ev.elements);\n            };\n\n            this._handleDisableElements = ev => {\n                this.elementSelect.removeItems(ev.elements);\n            };\n\n            this.elementIndex.on('enableElements', this._handleEnableElements);\n            this.elementIndex.on('disableElements', this._handleDisableElements);\n        }\n\n        // Enable inline element editing if this is an index page\n        if (this.settings.context === 'index') {\n            this._handleElementEditing = ev => {\n                var $target = $(ev.target);\n\n                if ($target.prop('nodeName') === 'A') {\n                    // Let the link do its thing\n                    return;\n                }\n\n                var $element;\n\n                if ($target.hasClass('element')) {\n                    $element = $target;\n                } else {\n                    $element = $target.closest('.element');\n\n                    if (!$element.length) {\n                        return;\n                    }\n                }\n\n                if (Garnish.hasAttr($element, 'data-editable')) {\n                    this.createElementEditor($element);\n                }\n            };\n\n            if (!this.elementIndex.trashed) {\n                this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                if ($.isTouchCapable()) {\n                    this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                }\n            }\n        }\n\n        // Give sub-classes a chance to do post-initialization stuff here\n        this.afterInit();\n\n        // Set up lazy-loading\n        if (this.settings.batchSize) {\n            if (this.settings.context === 'index') {\n                this.$scroller = Garnish.$scrollContainer;\n            } else {\n                this.$scroller = this.elementIndex.$main;\n            }\n\n            this.$scroller.scrollTop(0);\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }\n    },\n\n    getElementContainer: function() {\n        throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n    },\n\n    afterInit: function() {\n    },\n\n    getAllElements: function() {\n        return this.$elementContainer.children();\n    },\n\n    getEnabledElements: function() {\n        return this.$elementContainer.children(':not(.disabled)');\n    },\n\n    getElementById: function(id) {\n        var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n        if ($element.length) {\n            return $element;\n        } else {\n            return null;\n        }\n    },\n\n    getSelectedElements: function() {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        return this.elementSelect.$selectedItems;\n    },\n\n    getSelectedElementIds: function() {\n        let $selectedElements;\n        try {\n            $selectedElements = this.getSelectedElements();\n        } catch (e) {\n        }\n\n        let ids = [];\n        if ($selectedElements) {\n            for (var i = 0; i < $selectedElements.length; i++) {\n                ids.push($selectedElements.eq(i).data('id'));\n            }\n        }\n        return ids;\n    },\n\n    selectElement: function($element) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        this.elementSelect.selectItem($element, true);\n        return true;\n    },\n\n    selectElementById: function(id) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        var $element = this.getElementById(id);\n\n        if ($element) {\n            this.elementSelect.selectItem($element, true);\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    selectAllElements: function() {\n        this.elementSelect.selectAll();\n    },\n\n    deselectAllElements: function() {\n        this.elementSelect.deselectAll();\n    },\n\n    isVerticalList: function() {\n        return false;\n    },\n\n    getTotalVisible: function() {\n        return this._totalVisible;\n    },\n\n    setTotalVisible: function(totalVisible) {\n        this._totalVisible = totalVisible;\n    },\n\n    getMorePending: function() {\n        return this._morePending;\n    },\n\n    setMorePending: function(morePending) {\n        this._morePending = morePending;\n    },\n\n    /**\n     * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n     */\n    maybeLoadMore: function() {\n        if (this.canLoadMore()) {\n            this.loadMore();\n        }\n    },\n\n    /**\n     * Returns whether the user has reached the bottom of the scroll area.\n     */\n    canLoadMore: function() {\n        if (!this.getMorePending() || !this.settings.batchSize) {\n            return false;\n        }\n\n        // Check if the user has reached the bottom of the scroll area\n        var containerHeight;\n\n        if (this.$scroller[0] === Garnish.$win[0]) {\n            var winHeight = Garnish.$win.innerHeight(),\n                winScrollTop = Garnish.$win.scrollTop(),\n                containerOffset = this.$container.offset().top;\n            containerHeight = this.$container.height();\n\n            return (winHeight + winScrollTop >= containerOffset + containerHeight);\n        } else {\n            var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                containerScrollTop = this.$scroller.scrollTop();\n            containerHeight = this.$scroller.outerHeight();\n\n            return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n        }\n    },\n\n    /**\n     * Loads the next batch of elements.\n     */\n    loadMore: function() {\n        if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n            return;\n        }\n\n        this.loadingMore = true;\n        this.$loadingMoreSpinner.removeClass('hidden');\n        this.removeListener(this.$scroller, 'scroll');\n\n        Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {\n            data: this.getLoadMoreParams(),\n        }).then(response => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n\n            let $newElements = $(response.data.html);\n\n            this.appendElements($newElements);\n            Craft.appendHeadHtml(response.data.headHtml);\n            Craft.appendFootHtml(response.data.footHtml);\n\n            if (this.elementSelect) {\n                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                this.elementIndex.updateActionTriggers();\n            }\n\n            this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n            this.setMorePending($newElements.length == this.settings.batchSize);\n\n            // Is there room to load more right now?\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }).catch(e => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n        });\n    },\n\n    getLoadMoreParams: function() {\n        // Use the same params that were passed when initializing this view\n        var params = $.extend(true, {}, this.settings.params);\n        params.criteria.offset = this.getTotalVisible();\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        $newElements.appendTo(this.$elementContainer);\n        this.thumbLoader.load($newElements);\n        this.onAppendElements($newElements);\n    },\n\n    onAppendElements: function($newElements) {\n        this.settings.onAppendElements($newElements);\n        this.trigger('appendElements', {\n            newElements: $newElements\n        });\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            elementIndex: this.elementIndex\n        });\n    },\n\n    disable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.disable();\n        }\n    },\n\n    enable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.enable();\n        }\n    },\n\n    destroy: function() {\n        // Remove the \"loading-more\" spinner, since we added that outside of the view container\n        this.$loadingMoreSpinner.remove();\n\n        // Kill the thumb loader\n        this.thumbLoader.destroy();\n        delete this.thumbLoader;\n\n        // Delete the element select\n        if (this.elementSelect) {\n            this.elementIndex.off('enableElements', this._handleEnableElements);\n            this.elementIndex.off('disableElements', this._handleDisableElements);\n\n            this.elementSelect.destroy();\n            delete this.elementSelect;\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        context: 'index',\n        batchSize: null,\n        params: null,\n        selectable: false,\n        multiSelect: false,\n        checkboxMode: false,\n        loadMoreElementsAction: 'element-indexes/get-more-elements',\n        onAppendElements: $.noop,\n        onSelectionChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend({\n    thumbLoader: null,\n    elementSelect: null,\n    elementSort: null,\n    modal: null,\n    elementEditor: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addElementBtn: null,\n    $addElementBtnContainer: null,\n\n    _initialized: false,\n\n    init: function(settings) {\n        // Normalize the settings and set them\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n        // Apply the storage key prefix\n        if (this.settings.modalStorageKey) {\n            this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n        }\n\n        // No reason for this to be sortable if we're only allowing 1 selection\n        if (this.settings.limit == 1) {\n            this.settings.sortable = false;\n        }\n\n        this.$container = this.getContainer();\n\n        // Store a reference to this class\n        this.$container.data('elementSelect', this);\n\n        this.$elementsContainer = this.getElementsContainer();\n\n        this.$addElementBtn = this.getAddElementsBtn();\n        if (this.$addElementBtn) {\n            this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n            if (!this.$addElementBtnContainer.length) {\n                this.$addElementBtnContainer = null;\n            }\n        }\n\n        this.thumbLoader = new Craft.ElementThumbLoader();\n\n        this.initElementSelect();\n        this.initElementSort();\n        this.resetElements();\n\n        if (this.$addElementBtn) {\n            this.addListener(this.$addElementBtn, 'activate', 'showModal');\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            this._initialized = true;\n        });\n    },\n\n    get totalSelected() {\n        return this.$elements.length;\n    },\n\n    getContainer: function() {\n        return $('#' + this.settings.id);\n    },\n\n    getElementsContainer: function() {\n        return this.$container.children('.elements');\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.children();\n    },\n\n    getAddElementsBtn: function() {\n        return this.$container.find('.btn.add:first');\n    },\n\n    initElementSelect: function() {\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select({\n                multi: this.settings.sortable,\n                filter: ':not(.delete)'\n            });\n        }\n    },\n\n    initElementSort: function() {\n        if (this.settings.sortable) {\n            this.elementSort = new Garnish.DragSort({\n                container: this.$elementsContainer,\n                filter: (this.settings.selectable ? () => {\n                    // Only return all the selected items if the target item is selected\n                    if (this.elementSort.$targetItem.hasClass('sel')) {\n                        return this.elementSelect.getSelectedItems();\n                    } else {\n                        return this.elementSort.$targetItem;\n                    }\n                } : null),\n                ignoreHandleSelector: '.delete',\n                axis: this.getElementSortAxis(),\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                onSortChange: (this.settings.selectable ? () => {\n                    this.elementSelect.resetItemOrder();\n                } : null)\n            });\n        }\n    },\n\n    getElementSortAxis: function() {\n        return (this.settings.viewMode === 'list' ? 'y' : null);\n    },\n\n    canAddMoreElements: function() {\n        return (!this.settings.limit || this.$elements.length < this.settings.limit);\n    },\n\n    updateAddElementsBtn: function() {\n        if (this.canAddMoreElements()) {\n            this.enableAddElementsBtn();\n        } else {\n            this.disableAddElementsBtn();\n        }\n    },\n\n    disableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.addClass('hidden');\n        }\n    },\n\n    enableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.removeClass('hidden');\n        }\n    },\n\n    resetElements: function() {\n        if (this.$elements !== null) {\n            this.removeElements(this.$elements);\n        } else {\n            this.$elements = $();\n        }\n\n        this.addElements(this.getElements());\n    },\n\n    addElements: function($elements) {\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect.addItems($elements);\n        }\n\n        if (this.settings.sortable) {\n            this.elementSort.addItems($elements);\n        }\n\n        if (this.settings.editable) {\n            this._handleShowElementEditor = ev => {\n                var $element = $(ev.currentTarget);\n                if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                    this.elementEditor = this.createElementEditor($element);\n                }\n            };\n\n            this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n            if ($.isTouchCapable()) {\n                this.addListener($elements, 'taphold', this._handleShowElementEditor);\n            }\n        }\n\n        $elements.find('.delete').on('click dblclick', ev => {\n            this.removeElement($(ev.currentTarget).closest('.element'));\n            // Prevent this from acting as one of a double-click\n            ev.stopPropagation();\n        });\n\n        this.$elements = this.$elements.add($elements);\n        this.updateAddElementsBtn();\n    },\n\n    createElementEditor: function($element, settings) {\n        if (!settings) {\n            settings = {};\n        }\n        settings.prevalidate = this.settings.prevalidate;\n        return Craft.createElementEditor(this.settings.elementType, $element, settings);\n    },\n\n    removeElements: function($elements) {\n        if (this.settings.selectable) {\n            this.elementSelect.removeItems($elements);\n        }\n\n        if (this.modal) {\n            var ids = [];\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $elements.eq(i).data('id');\n\n                if (id) {\n                    ids.push(id);\n                }\n            }\n\n            if (ids.length) {\n                this.modal.elementIndex.enableElementsById(ids);\n            }\n        }\n\n        // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n        $elements.children('input').prop('disabled', true);\n\n        this.$elements = this.$elements.not($elements);\n        this.updateAddElementsBtn();\n\n        this.onRemoveElements();\n    },\n\n    removeElement: function($element) {\n        this.removeElements($element);\n        this.animateElementAway($element, () => {\n            $element.remove();\n        });\n    },\n\n    animateElementAway: function($element, callback) {\n        $element.css('z-index', 0);\n\n        var animateCss = {\n            opacity: -1\n        };\n        animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n        if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n            animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n        }\n\n        // Pause the draft editor\n        if (window.draftEditor) {\n            window.draftEditor.pause();\n        }\n\n        $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n            callback();\n\n            // Resume the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.resume();\n            }\n        });\n    },\n\n    showModal: function() {\n        // Make sure we haven't reached the limit\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        if (!this.modal) {\n            this.modal = this.createModal();\n        } else {\n            this.modal.show();\n        }\n    },\n\n    createModal: function() {\n        return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n    },\n\n    getModalSettings: function() {\n        return $.extend({\n            closeOtherModals: false,\n            storageKey: this.modalStorageKey,\n            sources: this.settings.sources,\n            criteria: this.settings.criteria,\n            multiSelect: (this.settings.limit != 1),\n            showSiteMenu: this.settings.showSiteMenu,\n            disabledElementIds: this.getDisabledElementIds(),\n            onSelect: this.onModalSelect.bind(this)\n        }, this.settings.modalSettings);\n    },\n\n    getSelectedElementIds: function() {\n        var ids = [];\n\n        for (var i = 0; i < this.$elements.length; i++) {\n            ids.push(this.$elements.eq(i).data('id'));\n        }\n\n        return ids;\n    },\n\n    getDisabledElementIds: function() {\n        var ids = this.getSelectedElementIds();\n\n        if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n            ids.push(this.settings.sourceElementId);\n        }\n\n        if (this.settings.disabledElementIds) {\n            ids.push(...this.settings.disabledElementIds);\n        }\n\n        return ids;\n    },\n\n    onModalSelect: function(elements) {\n        if (this.settings.limit) {\n            // Cut off any excess elements\n            var slotsLeft = this.settings.limit - this.$elements.length;\n\n            if (elements.length > slotsLeft) {\n                elements = elements.slice(0, slotsLeft);\n            }\n        }\n\n        this.selectElements(elements);\n        this.updateDisabledElementsInModal();\n    },\n\n    selectElements: function(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            let elementInfo = elements[i],\n                $element = this.createNewElement(elementInfo);\n\n            this.appendElement($element);\n            this.addElements($element);\n            this.animateElementIntoPlace(elementInfo.$element, $element);\n\n            // Override the element reference with the new one\n            elementInfo.$element = $element;\n        }\n\n        this.onSelectElements(elements);\n    },\n\n    createNewElement: function(elementInfo) {\n        var $element = elementInfo.$element.clone();\n\n        // Make a couple tweaks\n        Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n        $element.addClass('removable');\n        $element.prepend(`<input type=\"hidden\" name=\"${this.settings.name}${this.settings.single ? '' : '[]'}\" value=\"${elementInfo.id}\">` +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        return $element;\n    },\n\n    appendElement: function($element) {\n        $element.appendTo(this.$elementsContainer);\n    },\n\n    animateElementIntoPlace: function($modalElement, $inputElement) {\n        var origOffset = $modalElement.offset(),\n            destOffset = $inputElement.offset(),\n            $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n        $inputElement.css('visibility', 'hidden');\n\n        $helper.css({\n            position: 'absolute',\n            zIndex: 10000,\n            top: origOffset.top,\n            left: origOffset.left\n        });\n\n        var animateCss = {\n            top: destOffset.top,\n            left: destOffset.left\n        };\n\n        $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n            $helper.remove();\n            $inputElement.css('visibility', 'visible');\n        });\n    },\n\n    updateDisabledElementsInModal: function() {\n        if (this.modal.elementIndex) {\n            this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n        }\n    },\n\n    getElementById: function(id) {\n        for (var i = 0; i < this.$elements.length; i++) {\n            var $element = this.$elements.eq(i);\n\n            if ($element.data('id') == id) {\n                return $element;\n            }\n        }\n    },\n\n    onSelectElements: function(elements) {\n        this.trigger('selectElements', {elements});\n        this.settings.onSelectElements(elements);\n\n        if (window.draftEditor) {\n            window.draftEditor.checkForm();\n        }\n    },\n\n    onRemoveElements: function() {\n        this.trigger('removeElements');\n        this.settings.onRemoveElements();\n    }\n}, {\n    ADD_FX_DURATION: 200,\n    REMOVE_FX_DURATION: 200,\n\n    defaults: {\n        id: null,\n        name: null,\n        fieldId: null,\n        elementType: null,\n        sources: null,\n        criteria: {},\n        allowSelfRelations: false,\n        sourceElementId: null,\n        disabledElementIds: null,\n        viewMode: 'list',\n        single: false,\n        limit: null,\n        showSiteMenu: false,\n        modalStorageKey: null,\n        modalSettings: {},\n        onSelectElements: $.noop,\n        onRemoveElements: $.noop,\n        sortable: true,\n        selectable: true,\n        editable: true,\n        prevalidate: false,\n        editorSettings: {}\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend({\n    elementType: null,\n    elementIndex: null,\n\n    $body: null,\n    $selectBtn: null,\n    $sidebar: null,\n    $sources: null,\n    $sourceToggles: null,\n    $main: null,\n    $search: null,\n    $elements: null,\n    $tbody: null,\n    $primaryButtons: null,\n    $secondaryButtons: null,\n    $cancelBtn: null,\n    $footerSpinner: null,\n\n    init: function(elementType, settings) {\n        this.elementType = elementType;\n        this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n        // Build the modal\n        var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n            $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n            $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n        this.base($container, this.settings);\n\n        this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n        this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$primaryButtons);\n        this.$selectBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn disabled submit',\n            text: Craft.t('app', 'Select'),\n        }).appendTo(this.$primaryButtons);\n\n        this.$body = $body;\n\n        this.addListener(this.$cancelBtn, 'activate', 'cancel');\n        this.addListener(this.$selectBtn, 'activate', 'selectElements');\n    },\n\n    onFadeIn: function() {\n        if (!this.elementIndex) {\n            this._createElementIndex();\n        } else {\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.elementIndex.$search.trigger('focus');\n            }\n        }\n\n        this.base();\n    },\n\n    onSelectionChange: function() {\n        this.updateSelectBtnState();\n    },\n\n    updateSelectBtnState: function() {\n        if (this.$selectBtn) {\n            if (this.elementIndex.getSelectedElements().length) {\n                this.enableSelectBtn();\n            } else {\n                this.disableSelectBtn();\n            }\n        }\n    },\n\n    enableSelectBtn: function() {\n        this.$selectBtn.removeClass('disabled');\n    },\n\n    disableSelectBtn: function() {\n        this.$selectBtn.addClass('disabled');\n    },\n\n    enableCancelBtn: function() {\n        this.$cancelBtn.removeClass('disabled');\n    },\n\n    disableCancelBtn: function() {\n        this.$cancelBtn.addClass('disabled');\n    },\n\n    showFooterSpinner: function() {\n        this.$footerSpinner.removeClass('hidden');\n    },\n\n    hideFooterSpinner: function() {\n        this.$footerSpinner.addClass('hidden');\n    },\n\n    cancel: function() {\n        if (!this.$cancelBtn.hasClass('disabled')) {\n            this.hide();\n        }\n    },\n\n    selectElements: function() {\n        if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n            // TODO: This code shouldn't know about views' elementSelect objects\n            this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                elementInfo = this.getElementInfo($selectedElements);\n\n            this.onSelect(elementInfo);\n\n            if (this.settings.disableElementsOnSelect) {\n                this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n            }\n\n            if (this.settings.hideOnSelect) {\n                this.hide();\n            }\n        }\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $element = $($selectedElements[i]);\n            var elementInfo = Craft.getElementInfo($element);\n\n            info.push(elementInfo);\n        }\n\n        return info;\n    },\n\n    show: function() {\n        this.updateSelectBtnState();\n        this.base();\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo);\n    },\n\n    disable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.enable();\n        }\n\n        this.base();\n    },\n\n    _createElementIndex: function() {\n        // Get the modal body HTML based on the settings\n        var data = {\n            context: 'modal',\n            elementType: this.elementType,\n            sources: this.settings.sources\n        };\n\n        if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n            data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n        }\n\n        Craft.postActionRequest('elements/get-modal-body', data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.$body.html(response.html);\n\n                if (this.$body.has('.sidebar:not(.hidden)').length) {\n                    this.$body.addClass('has-sidebar');\n                }\n\n                // Initialize the element index\n                this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                    context: 'modal',\n                    modal: this,\n                    storageKey: this.settings.storageKey,\n                    criteria: this.settings.criteria,\n                    disabledElementIds: this.settings.disabledElementIds,\n                    selectable: true,\n                    multiSelect: this.settings.multiSelect,\n                    buttonContainer: this.$secondaryButtons,\n                    onSelectionChange: this.onSelectionChange.bind(this),\n                    hideSidebar: this.settings.hideSidebar,\n                    defaultSiteId: this.settings.defaultSiteId,\n                    defaultSource: this.settings.defaultSource\n                });\n\n                // Double-clicking or double-tapping should select the elements\n                this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                    // Make sure the touch targets are the same\n                    // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                    if (touchData.firstTap.target === touchData.secondTap.target) {\n                        this.selectElements();\n                    }\n                });\n            }\n        });\n    }\n}, {\n    defaults: {\n        resizable: true,\n        storageKey: null,\n        sources: null,\n        criteria: null,\n        multiSelect: false,\n        showSiteMenu: null,\n        disabledElementIds: [],\n        disableElementsOnSelect: false,\n        hideOnSelect: true,\n        onCancel: $.noop,\n        onSelect: $.noop,\n        hideSidebar: false,\n        defaultSiteId: null,\n        defaultSource: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend({\n    $source: null,\n    $target: null,\n    $form: null,\n    settings: null,\n\n    listening: null,\n    timeout: null,\n\n    init: function(source, target, settings) {\n        this.$source = $(source);\n        this.$target = $(target);\n        this.$form = this.$source.closest('form');\n\n        this.setSettings(settings);\n\n        this.startListening();\n    },\n\n    setNewSource: function(source) {\n        var listening = this.listening;\n        this.stopListening();\n\n        this.$source = $(source);\n\n        if (listening) {\n            this.startListening();\n        }\n    },\n\n    startListening: function() {\n        if (this.listening) {\n            return;\n        }\n\n        this.listening = true;\n\n        this.addListener(this.$source, 'input', 'onSourceTextChange');\n        this.addListener(this.$target, 'input', 'onTargetTextChange');\n        this.addListener(this.$form, 'submit', 'onFormSubmit');\n    },\n\n    stopListening: function() {\n        if (!this.listening) {\n            return;\n        }\n\n        this.listening = false;\n\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.removeAllListeners(this.$source);\n        this.removeAllListeners(this.$target);\n        this.removeAllListeners(this.$form);\n    },\n\n    onSourceTextChange: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout(this.updateTarget.bind(this), 250);\n    },\n\n    onTargetTextChange: function() {\n        if (this.$target.get(0) === document.activeElement) {\n            this.stopListening();\n        }\n    },\n\n    onFormSubmit: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.updateTarget();\n    },\n\n    updateTarget: function() {\n        if (!this.$target.is(':visible')) {\n            return;\n        }\n\n        var sourceVal = this.$source.val();\n\n        if (typeof sourceVal === 'undefined') {\n            // The source input may not exist anymore\n            return;\n        }\n\n        var targetVal = this.generateTargetValue(sourceVal);\n\n        this.$target.val(targetVal);\n\n        for (let i = 0; i < this.$target.length; i++) {\n            this.$target[i].dispatchEvent(new InputEvent('input', {\n                inputType: 'insertText',\n            }));\n            this.$target[i].dispatchEvent(new Event('input'));\n        }\n\n        // If the target already has focus, select its whole value to mimic\n        // the behavior if the value had already been generated and they just tabbed in\n        if (this.$target.is(':focus')) {\n            Craft.selectFullValue(this.$target);\n        }\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return sourceVal;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Tab manager\n */\nCraft.Tabs = Garnish.Base.extend({\n    $container: null,\n    $ul: null,\n    $menuBtn: null,\n    $tabs: null,\n    $selectedTab: null,\n    $focusableTab: null,\n    menu: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$ul = this.$container.find('> ul:first');\n        this.$tabs = this.$ul.find('> li > a');\n        this.$selectedTab = this.$tabs.filter('.sel:first');\n        this.$focusableTab = this.$tabs.filter('[tabindex=0]:first');\n        this.$menuBtn = this.$container.find('> .menubtn:first').menubtn();\n        this.menu = this.$menuBtn.data('menubtn').menu;\n\n        // Is there already a tab manager?\n        if (this.$container.data('tabs')) {\n            Garnish.log('Double-instantiating a tab manager on an element');\n            this.$container.data('tabs').destroy();\n        }\n\n        this.$container.data('tabs', this);\n\n        for (let i = 0; i < this.$tabs.length; i++) {\n            const $a = this.$tabs.eq(i);\n\n            // Does it link to an anchor?\n            const href = $a.attr('href');\n            if (href && href.charAt(0) === '#') {\n                this.addListener($a, 'keydown', ev => {\n                    if ([Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    }\n                });\n                this.addListener($a, 'click', ev => {\n                    ev.preventDefault();\n                    const $a = $(ev.currentTarget);\n                    this.selectTab(ev.currentTarget);\n                    this.makeTabFocusable(ev.currentTarget);\n                });\n\n                if (href.substr(1) === window.LOCATION_HASH) {\n                    $initialTab = $a;\n                }\n            }\n\n            this.addListener($a, 'keydown', ev => {\n                if (\n                    [Garnish.LEFT_KEY, Garnish.RIGHT_KEY].includes(ev.keyCode) &&\n                    $.contains(this.$ul[0], ev.currentTarget)\n                ) {\n                    let $tab;\n                    if (ev.keyCode === (Craft.orientation === 'ltr' ? Garnish.LEFT_KEY : Garnish.RIGHT_KEY)) {\n                        $tab = $(ev.currentTarget).parent().prev('li').children('a');\n                    } else {\n                        $tab = $(ev.currentTarget).parent().next('li').children('a');\n                    }\n                    if ($tab.length) {\n                        ev.preventDefault();\n                        this.makeTabFocusable($tab);\n                        $tab.focus();\n                        this.scrollToTab($tab);\n                    }\n                }\n            });\n        }\n\n        this.updateMenuBtn();\n\n        Garnish.$win.on('resize', () => {\n            this.updateMenuBtn();\n        });\n\n        // Prevent menu options from updating the URL\n        this.menu.$options.on('click', ev => {\n            const $option = $(ev.currentTarget);\n            if ($option.attr('href').charAt(0) === '#') {\n                ev.preventDefault();\n            }\n        });\n\n        this.menu.on('optionselect', ev => {\n            this.selectTab($(ev.selectedOption).data('id'))\n        });\n    },\n\n    selectTab: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$selectedTab[0]) {\n            return;\n        }\n\n        this.deselectTab();\n        this.$selectedTab = $tab.addClass('sel');\n        this.makeTabFocusable($tab);\n        this.scrollToTab($tab);\n\n        this.menu.$options.removeClass('sel');\n        this.menu.$options.filter(`[data-id=\"${$tab.data('id')}\"]`).addClass('sel');\n\n        this.trigger('selectTab', {\n            $tab: $tab,\n        });\n    },\n\n    deselectTab: function() {\n        const $tab = this.$selectedTab.removeClass('sel');\n        this.$selectedTab = null;\n\n        this.trigger('deselectTab', {\n            $tab: $tab,\n        });\n    },\n\n    makeTabFocusable: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$focusableTab[0]) {\n            return;\n        }\n\n        this.$focusableTab.attr('tabindex', '-1');\n        this.$focusableTab = $tab.attr('tabindex', '0');\n    },\n\n    scrollToTab: function(tab) {\n        const $tab = this._getTab(tab);\n        const scrollLeft = this.$ul.scrollLeft();\n        const tabOffset = $tab.offset().left;\n        const elemScrollOffset = tabOffset - this.$ul.offset().left;\n        let targetScrollLeft = false;\n\n        // Is the tab hidden on the left?\n        if (elemScrollOffset < 0) {\n            targetScrollLeft = scrollLeft + elemScrollOffset - 24;\n        } else {\n            const tabWidth = $tab.outerWidth();\n            const ulWidth = this.$ul.prop('clientWidth');\n\n            // Is it hidden to the right?\n            if (elemScrollOffset + tabWidth > ulWidth) {\n                targetScrollLeft = scrollLeft + (elemScrollOffset - (ulWidth - tabWidth)) + 24;\n            }\n        }\n\n        if (targetScrollLeft !== false) {\n            this.$ul.scrollLeft(targetScrollLeft);\n        }\n    },\n\n    updateMenuBtn: function() {\n        if (Math.floor(this.$ul.prop('scrollWidth') - 48) > this.$container.prop('clientWidth')) {\n            this.$ul.addClass('scrollable');\n            this.$menuBtn.removeClass('hidden');\n        } else {\n            this.$ul.removeClass('scrollable');\n            this.$menuBtn.addClass('hidden');\n        }\n    },\n\n    _getTab: function(tab) {\n        if (tab instanceof jQuery) {\n            return tab;\n        }\n\n        if (tab instanceof HTMLElement) {\n            return $(tab);\n        }\n\n        if (typeof tab !== 'string') {\n            throw 'Invalid tab ID';\n        }\n\n        const $tab = this.$tabs.filter(`[data-id=\"${tab}\"]`);\n\n        if (!$tab.length) {\n            throw `Invalid tab ID: ${tab}`;\n        }\n\n        return $tab;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend({\n    settings: null,\n    totalItems: null,\n    sorter: null,\n\n    $noItems: null,\n    $table: null,\n    $tbody: null,\n    $deleteBtns: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.AdminTable.defaults);\n\n        if (!this.settings.allowDeleteAll) {\n            this.settings.minItems = 1;\n        }\n\n        this.$noItems = $(this.settings.noItemsSelector);\n        this.$table = $(this.settings.tableSelector);\n        this.$tbody = this.$table.children('tbody');\n        this.totalItems = this.$tbody.children().length;\n\n        if (this.settings.sortable) {\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                onSortChange: this.reorderItems.bind(this),\n            });\n        }\n\n        this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n        this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n        this.updateUI();\n    },\n\n    addRow: function(row) {\n        if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(row).appendTo(this.$tbody),\n            $deleteBtn = $row.find('.delete');\n\n        if (this.settings.sortable) {\n            this.sorter.addItems($row);\n        }\n\n        this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n        this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n        this.totalItems++;\n\n        this.updateUI();\n    },\n\n    reorderItems: function() {\n        if (!this.settings.sortable) {\n            return;\n        }\n\n        // Get the new field order\n        var ids = [];\n\n        for (var i = 0; i < this.sorter.$items.length; i++) {\n            var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n            ids.push(id);\n        }\n\n        // Send it to the server\n        var data = {\n            ids: JSON.stringify(ids)\n        };\n\n        Craft.postActionRequest(this.settings.reorderAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.onReorderItems(ids);\n                    Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                } else {\n                    Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                }\n            }\n        });\n    },\n\n    handleDeleteBtnClick: function(event) {\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(event.target).closest('tr');\n\n        if (this.confirmDeleteItem($row)) {\n            this.deleteItem($row);\n        }\n    },\n\n    confirmDeleteItem: function($row) {\n        var name = this.getItemName($row);\n        return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name}));\n    },\n\n    deleteItem: function($row) {\n        var data = {\n            id: this.getItemId($row)\n        };\n\n        Craft.postActionRequest(this.settings.deleteAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.handleDeleteItemResponse(response, $row);\n            }\n        });\n    },\n\n    handleDeleteItemResponse: function(response, $row) {\n        var id = this.getItemId($row),\n            name = this.getItemName($row);\n\n        if (response.success) {\n            if (this.sorter) {\n                this.sorter.removeItems($row);\n            }\n\n            $row.remove();\n            this.totalItems--;\n            this.updateUI();\n            this.onDeleteItem(id);\n\n            Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name}));\n        } else {\n            Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name}));\n        }\n    },\n\n    onReorderItems: function(ids) {\n        this.settings.onReorderItems(ids);\n    },\n\n    onDeleteItem: function(id) {\n        this.settings.onDeleteItem(id);\n    },\n\n    getItemId: function($row) {\n        return $row.attr(this.settings.idAttribute);\n    },\n\n    getItemName: function($row) {\n        return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n    },\n\n    updateUI: function() {\n        // Show the \"No Whatever Exists\" message if there aren't any\n        if (this.totalItems === 0) {\n            this.$table.hide();\n            this.$noItems.removeClass('hidden');\n        } else {\n            this.$table.show();\n            this.$noItems.addClass('hidden');\n        }\n\n        // Disable the sort buttons if there's only one row\n        if (this.settings.sortable) {\n            var $moveButtons = this.$table.find('.move');\n\n            if (this.totalItems === 1) {\n                $moveButtons.addClass('disabled');\n            } else {\n                $moveButtons.removeClass('disabled');\n            }\n        }\n\n        // Disable the delete buttons if we've reached the minimum items\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            this.$deleteBtns.addClass('disabled');\n        } else {\n            this.$deleteBtns.removeClass('disabled');\n        }\n\n        // Hide the New Whatever button if we've reached the maximum items\n        if (this.settings.newItemBtnSelector) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                $(this.settings.newItemBtnSelector).addClass('hidden');\n            } else {\n                $(this.settings.newItemBtnSelector).removeClass('hidden');\n            }\n        }\n    }\n}, {\n    defaults: {\n        tableSelector: null,\n        noItemsSelector: null,\n        newItemBtnSelector: null,\n        idAttribute: 'data-id',\n        nameAttribute: 'data-name',\n        sortable: false,\n        allowDeleteAll: true,\n        minItems: 0,\n        maxItems: null,\n        reorderAction: null,\n        deleteAction: null,\n        reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n        reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n        confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n        deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n        deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n        onReorderItems: $.noop,\n        onDeleteItem: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend({\n    $filenameInput: null,\n\n    originalBasename: null,\n    originalExtension: null,\n    reloadIndex: false,\n\n    init: function(element, settings) {\n        this.on('updateForm', () => {\n            this.addListener(this.$sidebar.find('.preview-thumb-container .edit-btn'), 'click', 'showImageEditor');\n            this.addListener(this.$sidebar.find('.preview-thumb-container .preview-btn'), 'click', 'showImagePreview');\n\n            this.$filenameInput = this.$sidebar.find('.filename');\n            this.addListener(this.$filenameInput, 'focus', 'selectFilename');\n        });\n\n        this.on('closeSlideout', () => {\n            if (this.reloadIndex) {\n                if (this.settings.elementIndex) {\n                    this.settings.elementIndex.updateElements();\n                } else if (this.settings.input) {\n                    this.settings.input.refreshThumbnail(this.$element.data('id'));\n                }\n            }\n        });\n\n        this.base(element, settings);\n\n        this.settings.validators.push(() => this.validateExtension());\n    },\n\n    showImageEditor: function() {\n        new Craft.AssetImageEditor(this.$element.data('id'), {\n            onSave: () => {\n                this.reloadIndex = true;\n                this.load();\n            },\n        });\n    },\n\n    showImagePreview: function() {\n        var settings = {};\n\n        if (this.$element.data('image-width')) {\n            settings.startingWidth = this.$element.data('image-width');\n            settings.startingHeight = this.$element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal(this.$element.data('id'), null, settings);\n    },\n\n    selectFilename: function() {\n        if (typeof this.$filenameInput[0].selectionStart === 'undefined') {\n            return;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (this.originalBasename === null) {\n            this.originalBasename = basename;\n            this.originalExtension = extension;\n        }\n\n        this.$filenameInput[0].selectionStart = 0;\n        this.$filenameInput[0].selectionEnd = basename.length;\n\n        // Prevent the selection from changing by the mouseup event\n        this.$filenameInput.one('mouseup.keepselection', ev => {\n            ev.preventDefault();\n        });\n        setTimeout(() => {\n            this.$filenameInput.off('mouseup.keepselection');\n        }, 500);\n    },\n\n    validateExtension: function() {\n        if (this.originalBasename === null) {\n            return true;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (extension === this.originalExtension) {\n            return true;\n        }\n\n        // No extension?\n        if (!extension) {\n            // If filename changed as well, assume removal of extension a mistake\n            if (this.originalFilename !== basename) {\n                this.$filenameInput.val(`${Craft.rtrim(basename, '.')}.${this.originalExtension}`);\n                return true;\n            }\n\n            // If filename hasn't changed, make sure they want to remove extension\n            return confirm(Craft.t('app', 'Are you sure you want to remove the extension “.{ext}”?', {\n                ext: this.originalExtension,\n            }));\n        }\n\n        // If the extension has changed, make sure it's intentional\n        return confirm(Craft.t('app', 'Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?', {\n            oldExt: this.originalExtension,\n            newExt: extension\n        }));\n    },\n\n    _parseFilename: function() {\n        const parts = this.$filenameInput.val().split('.');\n        const extension = parts.length > 1 ? parts.pop() : null;\n        const basename = parts.join('.');\n        return {basename, extension};\n    },\n});\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend({\n    // jQuery objects\n    $body: null,\n    $footer: null,\n    $imageTools: null,\n    $buttons: null,\n    $cancelBtn: null,\n    $replaceBtn: null,\n    $saveBtn: null,\n    $editorContainer: null,\n    $straighten: null,\n    $croppingCanvas: null,\n    $spinnerCanvas: null,\n\n    // FabricJS objects\n    canvas: null,\n    image: null,\n    viewport: null,\n    focalPoint: null,\n    grid: null,\n    croppingCanvas: null,\n    clipper: null,\n    croppingRectangle: null,\n    cropperHandles: null,\n    cropperGrid: null,\n    croppingShade: null,\n    croppingAreaText: null,\n\n    // Image state attributes\n    imageStraightenAngle: 0,\n    viewportRotation: 0,\n    originalWidth: 0,\n    originalHeight: 0,\n    imageVerticeCoords: null,\n    zoomRatio: 1,\n\n    // Editor state attributes\n    animationInProgress: false,\n    currentView: '',\n    assetId: null,\n    cacheBust: null,\n    draggingCropper: false,\n    scalingCropper: false,\n    draggingFocal: false,\n    previousMouseX: 0,\n    previousMouseY: 0,\n    shiftKeyHeld: false,\n    editorHeight: 0,\n    editorWidth: 0,\n    cropperState: false,\n    scaleFactor: 1,\n    flipData: {},\n    focalPointState: false,\n    spinnerInterval: null,\n    maxImageSize: null,\n    lastLoadedDimensions: null,\n    imageIsLoading: false,\n    mouseMoveEvent: null,\n    croppingConstraint: false,\n    constraintOrientation: 'landscape',\n    showingCustomConstraint: false,\n\n    // Rendering proxy functions\n    renderImage: null,\n    renderCropper: null,\n\n    init: function(assetId, settings) {\n        this.cacheBust = Date.now();\n\n        this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n        if (this.settings.allowDegreeFractions === null) {\n            this.settings.allowDegreeFractions = Craft.isImagick;\n        }\n\n        this.assetId = assetId;\n        this.flipData = {x: 0, y: 0};\n\n        // Build the modal\n        this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n        this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n        this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n        this.base(this.$container, this.settings);\n\n        this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn cancel',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$buttons);\n        this.$replaceBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit save replace',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$buttons);\n\n        if (this.settings.allowSavingAsNew) {\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save copy',\n                text: Craft.t('app', 'Save as a new asset'),\n            }).appendTo(this.$buttons);\n            this.addListener(this.$saveBtn, 'activate', this.saveImage);\n        }\n\n        this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n        this.addListener(this.$cancelBtn, 'activate', this.hide);\n        this.removeListener(this.$shade, 'click');\n\n        this.maxImageSize = this.getMaxImageSize();\n\n        Craft.postActionRequest('assets/image-editor', {assetId}, this.loadEditor.bind(this));\n    },\n\n    /**\n     * Get the max image size that is viewable in the editor currently\n     */\n    getMaxImageSize: function() {\n        var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n        var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n        return Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n    },\n\n    /**\n     * Load the editor markup and start loading components and the image.\n     *\n     * @param data\n     */\n    loadEditor: function(data) {\n        if (!data.html) {\n            alert(Craft.t('app', 'Could not load the image editor.'));\n        }\n\n        this.$body.html(data.html);\n        this.$tabs = $('.tabs li', this.$body);\n        this.$viewsContainer = $('.views', this.$body);\n        this.$views = $('> div', this.$viewsContainer);\n        this.$imageTools = $('.image-container .image-tools', this.$body);\n        this.$editorContainer = $('.image-container .image', this.$body);\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this._showSpinner();\n\n        this.updateSizeAndPosition();\n\n        // Load the canvas on which we'll host our image and set up the proxy render function\n        this.canvas = new fabric.StaticCanvas('image-canvas');\n\n        // Set up the cropping canvas jquery element for tracking all the nice events\n        this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n        this.$croppingCanvas.width(this.editorWidth);\n        this.$croppingCanvas.height(this.editorHeight);\n\n        this.canvas.enableRetinaScaling = true;\n        this.renderImage = () => {\n            Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n        };\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        // Load image and set up the initial properties\n        fabric.Image.fromURL(imageUrl, imageObject => {\n            this.image = imageObject;\n            this.image.set({\n                originX: 'center',\n                originY: 'center',\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n            this.canvas.add(this.image);\n\n            this.originalHeight = this.image.getHeight();\n            this.originalWidth = this.image.getWidth();\n            this.zoomRatio = 1;\n\n            this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n            // Set up the image bounding box, viewport and position everything\n            this._setFittedImageVerticeCoordinates();\n            this._repositionEditorElements();\n\n            // Set up the focal point\n            var focalState = {\n                imageDimensions: this.getScaledImageDimensions(),\n                offsetX: 0,\n                offsetY: 0\n            };\n\n            var focal = false;\n            if (data.focalPoint) {\n                // Transform the focal point coordinates from relative to absolute\n                var focalData = data.focalPoint;\n\n                // Resolve for the current image dimensions.\n                var adjustedX = focalState.imageDimensions.width * focalData.x;\n                var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                focal = true;\n            }\n\n            this.storeFocalPointState(focalState);\n\n            if (focal) {\n                this._createFocalPoint();\n            }\n\n            this._createViewport();\n            this.storeCropperState();\n\n            // Add listeners to buttons\n            this._addControlListeners();\n\n            // Add mouse event listeners\n            this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n            this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n            this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n            this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n            this._hideSpinner();\n\n            // Render it, finally\n            this.renderImage();\n\n            // Make sure verything gets fired for the first tab\n            this.$tabs.first().trigger('click');\n        });\n    },\n\n    /**\n     * Reload the image to better fit the current available image editor viewport.\n     */\n    _reloadImage: function() {\n        if (this.imageIsLoading) {\n            return;\n        }\n\n        this.imageIsLoading = true;\n        this.maxImageSize = this.getMaxImageSize();\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        this.image.setSrc(imageUrl, imageObject => {\n            this.originalHeight = imageObject.getHeight();\n            this.originalWidth = imageObject.getWidth();\n            this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n            this.updateSizeAndPosition();\n            this.renderImage();\n            this.imageIsLoading = false;\n        });\n    },\n\n    /**\n     * Update the modal size and position on browser resize\n     */\n    updateSizeAndPosition: function() {\n        if (!this.$container) {\n            return;\n        }\n\n        // Fullscreen modal\n        var innerWidth = window.innerWidth;\n        var innerHeight = window.innerHeight;\n\n        this.$container.css({\n            'width': innerWidth,\n            'min-width': innerWidth,\n            'left': 0,\n\n            'height': innerHeight,\n            'min-height': innerHeight,\n            'top': 0\n        });\n\n        this.$body.css({\n            'height': innerHeight - 62\n        });\n\n        if (innerWidth < innerHeight) {\n            this.$container.addClass('vertical');\n        } else {\n            this.$container.removeClass('vertical');\n        }\n\n        if (this.$spinnerCanvas) {\n            this.$spinnerCanvas.css({\n                left: ((this.$spinnerCanvas.parent().width() / 2) - (this.$spinnerCanvas.width() / 2)) + 'px',\n                top: ((this.$spinnerCanvas.parent().height() / 2) - (this.$spinnerCanvas.height() / 2)) + 'px'\n            });\n        }\n\n        // If image is already loaded, make sure it looks pretty.\n        if (this.$editorContainer && this.image) {\n            this._repositionEditorElements();\n        }\n    },\n\n    /**\n     * Reposition the editor elements to accurately reflect the editor state with current dimensions\n     */\n    _repositionEditorElements: function() {\n        // Remember what the dimensions were before the resize took place\n        var previousEditorDimensions = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this.canvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        var currentScaledDimensions = this.getScaledImageDimensions();\n\n        // If we're cropping now, we have to reposition the cropper correctly in case\n        // the area for image changes, forcing the image size to change as well.\n        if (this.currentView === 'crop') {\n            this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n            var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            this._setFittedImageVerticeCoordinates();\n            this._repositionCropper(previouslyOccupiedArea);\n        } else {\n            // Otherwise just recalculate the image zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n        }\n\n        // Reposition the image relatively to the previous editor dimensions.\n        this._repositionImage(previousEditorDimensions);\n        this._repositionViewport();\n        this._repositionFocalPoint(previousEditorDimensions);\n        this._zoomImage();\n\n        this.renderImage();\n\n        if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n            this._reloadImage();\n        }\n    },\n\n    /**\n     * Reposition image based on how the editor dimensions have changed.\n     * This ensures keeping the image center offset, if there is any.\n     *\n     * @param previousEditorDimensions\n     */\n    _repositionImage: function(previousEditorDimensions) {\n        this.image.set({\n            left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n            top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n        });\n    },\n\n    /**\n     * Create the viewport for image editor.\n     */\n    _createViewport: function() {\n        this.viewport = new fabric.Rect({\n            width: this.image.width,\n            height: this.image.height,\n            fill: 'rgba(127,0,0,1)',\n            originX: 'center',\n            originY: 'center',\n            globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n            left: this.image.left,\n            top: this.image.top\n        });\n        this.canvas.add(this.viewport);\n        this.renderImage();\n    },\n\n    /**\n     * Create the focal point.\n     */\n    _createFocalPoint: function() {\n        var focalPointState = this.focalPointState;\n        var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n        var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n        var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n        // Adjust by image margins\n        focalX += this.image.left;\n        focalY += this.image.top;\n\n        var deltaX = 0;\n        var deltaY = 0;\n\n        // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n        if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n            if (this.currentView !== 'crop') {\n                deltaX = this.viewport.left - this.image.left;\n                deltaY = this.viewport.top - this.image.top;\n            } else {\n                // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                deltaX = this.clipper.left - this.image.left;\n                deltaY = this.clipper.top - this.image.top;\n            }\n\n            // Bump focal to middle of viewport\n            focalX += deltaX;\n            focalY += deltaY;\n\n            // Reflect changes in saved state\n            focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n        }\n\n        this.focalPoint = new fabric.Group([\n            new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n            new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n        ], {\n            originX: 'center',\n            originY: 'center',\n            left: focalX,\n            top: focalY\n        });\n\n        this.storeFocalPointState(focalPointState);\n        this.canvas.add(this.focalPoint);\n    },\n\n    /**\n     * Toggle focal point\n     */\n    toggleFocalPoint: function() {\n        if (!this.focalPoint) {\n            this._createFocalPoint();\n        } else {\n            this.canvas.remove(this.focalPoint);\n            this.focalPoint = null;\n        }\n\n        this.renderImage();\n    },\n\n    /**\n     * Reposition the viewport to handle editor resizing.\n     */\n    _repositionViewport: function() {\n        if (this.viewport) {\n            var dimensions = {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            // If we're cropping, nothing exciting happens for the viewport\n            if (this.currentView === 'crop') {\n                dimensions.width = this.editorWidth;\n                dimensions.height = this.editorHeight;\n            } else {\n                // If this is the first initial reposition, no cropper state yet\n                if (this.cropperState) {\n                    // Recall the state\n                    var state = this.cropperState;\n\n                    var scaledImageDimensions = this.getScaledImageDimensions();\n                    // Make sure we have the correct current image size\n                    var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                    // Set the viewport dimensions\n                    dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                    dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                    // Adjust the image position to show the correct part of the image in the viewport\n                    this.image.set({\n                        left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                        top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                    });\n                } else {\n                    $.extend(dimensions, this.getScaledImageDimensions());\n                }\n            }\n            this.viewport.set(dimensions);\n        }\n    },\n\n    _repositionFocalPoint: function(previousEditorDimensions) {\n        if (this.focalPoint) {\n            var offsetX = this.focalPoint.left - this.editorWidth / 2;\n            var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n            var currentWidth = this.image.width;\n            var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n            var ratio = newWidth / currentWidth / this.scaleFactor;\n\n            offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n            offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n            offsetX *= ratio;\n            offsetY *= ratio;\n\n            this.focalPoint.set({\n                left: this.editorWidth / 2 + offsetX,\n                top: this.editorHeight / 2 + offsetY\n            });\n        }\n    },\n\n    /**\n     * Return true if the image orientation has changed\n     */\n    hasOrientationChanged: function() {\n        return this.viewportRotation % 180 !== 0;\n    },\n\n    /**\n     * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n     */\n    getScaledImageDimensions: function() {\n        if (typeof this.getScaledImageDimensions._ === 'undefined') {\n            this.getScaledImageDimensions._ = {};\n        }\n\n        this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n        this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n        this.getScaledImageDimensions._.dimensions = {};\n        if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n            this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n            this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n        } else {\n            this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n            this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n        }\n\n        return this.getScaledImageDimensions._.dimensions;\n    },\n\n    /**\n     * Set the image dimensions to reflect the current zoom ratio.\n     */\n    _zoomImage: function() {\n        if (typeof this._zoomImage._ === 'undefined') {\n            this._zoomImage._ = {};\n        }\n\n        this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n        this.image.set({\n            width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n            height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n        });\n    },\n\n    /**\n     * Set up listeners for the controls.\n     */\n    _addControlListeners: function() {\n        // Tabs\n        this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n        // Focal point\n        this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n        // Rotate controls\n        this.addListener($('.rotate-left'), 'click', function() {\n            this.rotateImage(-90);\n        });\n        this.addListener($('.rotate-right'), 'click', function() {\n            this.rotateImage(90);\n        });\n        this.addListener($('.flip-vertical'), 'click', function() {\n            this.flipImage('y');\n        });\n        this.addListener($('.flip-horizontal'), 'click', function() {\n            this.flipImage('x');\n        });\n\n        // Straighten slider\n        this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n            onStart: () => {\n                this._showGrid();\n            },\n            onChange: slider => {\n                this.straighten(slider);\n            },\n            onEnd: () => {\n                this._hideGrid();\n                this._cleanupFocalPointAfterStraighten();\n            },\n        });\n\n        // Cropper scale modifier key\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = true;\n            }\n        });\n        this.addListener(Garnish.$doc, 'keyup', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = false;\n            }\n        });\n\n        this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n        this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n        this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n    },\n\n    /**\n     * Handle a constraint button click.\n     *\n     * @param ev\n     */\n    _handleConstraintClick: function(ev) {\n        var constraint = $(ev.currentTarget).data('constraint');\n        var $target = $(ev.currentTarget);\n        $target.siblings().removeClass('active');\n        $target.addClass('active');\n\n        if (constraint == 'custom') {\n            this._showCustomConstraint();\n            this._applyCustomConstraint();\n            return;\n        }\n\n        this._hideCustomConstraint();\n\n        this.setCroppingConstraint(constraint);\n        this.enforceCroppingConstraint();\n    },\n\n    /**\n     * Handle an orientation switch click.\n     *\n     * @param ev\n     */\n    _handleOrientationClick: function(ev) {\n        if (ev.currentTarget.value === this.constraintOrientation) {\n            return;\n        }\n        this.constraintOrientation = ev.currentTarget.value;\n\n        var $constraints = $('.constraint.flip', this.$container);\n\n        for (var i = 0; i < $constraints.length; i++) {\n            var $constraint = $($constraints[i]);\n            $constraint.data('constraint', 1 / $constraint.data('constraint'));\n            $constraint.html($constraint.html().split(':').reverse().join(':'));\n        }\n\n        $constraints.filter('.active').click();\n    },\n\n    /**\n     * Apply the custom ratio set in the inputs\n     */\n    _applyCustomConstraint: function() {\n        var constraint = this._getCustomConstraint();\n\n        if (constraint.w > 0 && constraint.h > 0) {\n            this.setCroppingConstraint(constraint.w / constraint.h);\n            this.enforceCroppingConstraint();\n        }\n    },\n\n    /**\n     * Get the custom constraint.\n     *\n     * @returns {{w: *, h: *}}\n     */\n    _getCustomConstraint: function() {\n        var w = parseFloat($('.custom-constraint-w').val());\n        var h = parseFloat($('.custom-constraint-h').val());\n        return {\n            w: isNaN(w) ? 0 : w,\n            h: isNaN(h) ? 0 : h,\n        }\n    },\n\n    /**\n     * Set the custom constraint.\n     *\n     * @param w\n     * @param h\n     */\n    _setCustomConstraint: function(w, h) {\n        $('.custom-constraint-w').val(parseFloat(w));\n        $('.custom-constraint-h').val(parseFloat(h));\n    },\n\n    /**\n     * Hide the custom constraint inputs.\n     */\n    _hideCustomConstraint: function() {\n        this.showingCustomConstraint = false;\n        $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n        $('.orientation', this.$container).removeClass('hidden');\n    },\n\n    /**\n     * Show the custom constraint inputs.\n     */\n    _showCustomConstraint: function() {\n        if (this.showingCustomConstraint) {\n            return;\n        }\n\n        this.showingCustomConstraint = true;\n        $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n        $('.orientation', this.$container).addClass('hidden');\n    },\n\n    /**\n     * Handle tab click.\n     *\n     * @param ev\n     */\n    _handleTabClick: function(ev) {\n        if (!this.animationInProgress) {\n            var $tab = $(ev.currentTarget);\n            var view = $tab.data('view');\n            this.$tabs.removeClass('selected');\n            $tab.addClass('selected');\n            this.showView(view);\n        }\n    },\n\n    /**\n     * Show a view.\n     *\n     * @param view\n     */\n    showView: function(view) {\n        if (this.currentView === view) {\n            return;\n        }\n\n        this.$views.addClass('hidden');\n        var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n        $view.removeClass('hidden');\n\n        if (view === 'rotate') {\n            this.enableSlider();\n        } else {\n            this.disableSlider();\n        }\n\n        // Now that most likely our editor dimensions have changed, time to reposition stuff\n        this.updateSizeAndPosition();\n\n        // See if we have to enable or disable crop mode as we transition between tabs\n        if (this.currentView === 'crop' && view !== 'crop') {\n            this.disableCropMode();\n        } else if (this.currentView !== 'crop' && view === 'crop') {\n            this.enableCropMode();\n        }\n\n        // Mark the current view\n        this.currentView = view;\n    },\n\n    /**\n     * Store the current cropper state.\n     *\n     * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n     * as the basis for recalculating the cropper position and dimensions.\n     *\n     * @param [state]\n     */\n    storeCropperState: function(state) {\n        if (typeof this.storeCropperState._ === 'undefined') {\n            this.storeCropperState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.cropperState = state;\n        } else if (this.clipper) {\n            this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n            this.cropperState = {\n                offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        } else {\n            this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n            this.cropperState = {\n                offsetX: 0,\n                offsetY: 0,\n                height: this.storeCropperState._.dimensions.height,\n                width: this.storeCropperState._.dimensions.width,\n                imageDimensions: this.storeCropperState._.dimensions\n            };\n        }\n    },\n\n    /**\n     * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n     */\n    storeFocalPointState: function(state) {\n        if (typeof this.storeFocalPointState._ === 'undefined') {\n            this.storeFocalPointState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.focalPointState = state;\n        } else if (this.focalPoint) {\n            this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n            this.focalPointState = {\n                offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        }\n    },\n\n    /**\n     * Rotate the image along with the viewport.\n     *\n     * @param degrees\n     */\n    rotateImage: function(degrees) {\n        if (!this.animationInProgress) {\n            // We're not that kind of an establishment, sir.\n            if (degrees !== 90 && degrees !== -90) {\n                return false;\n            }\n\n            this.animationInProgress = true;\n            this.viewportRotation += degrees;\n\n            // Normalize the viewport rotation angle so it's between 0 and 359\n            this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n            var newAngle = this.image.angle + degrees;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var imageZoomRatio;\n\n            if (this.hasOrientationChanged()) {\n                imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n            } else {\n                imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n            }\n\n            // In cases when for some reason we've already zoomed in on the image,\n            // use existing zoom.\n            if (this.zoomRatio > imageZoomRatio) {\n                imageZoomRatio = this.zoomRatio;\n            }\n\n            var viewportProperties = {\n                angle: degrees === 90 ? '+=90' : '-=90'\n            };\n\n            var imageProperties = {\n                angle: newAngle,\n                width: scaledImageDimensions.width * imageZoomRatio,\n                height: scaledImageDimensions.height * imageZoomRatio\n            };\n\n            var scaleFactor = 1;\n            if (this.scaleFactor < 1) {\n                scaleFactor = 1 / this.scaleFactor;\n                this.scaleFactor = 1;\n            } else {\n                if (this.viewport.width > this.editorHeight) {\n                    scaleFactor = this.editorHeight / this.viewport.width;\n                } else if (this.viewport.height > this.editorWidth) {\n                    scaleFactor = this.editorWidth / this.viewport.height;\n                }\n                this.scaleFactor = scaleFactor;\n            }\n\n            if (scaleFactor < 1) {\n                imageProperties.width *= scaleFactor;\n                imageProperties.height *= scaleFactor;\n            }\n\n            var state = this.cropperState;\n\n            // Make sure we reposition the image as well to focus on the same image area\n            var deltaX = state.offsetX;\n            var deltaY = state.offsetY;\n            var angleInRadians = degrees * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n            var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n            imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n            state.offsetX = newDeltaX;\n            state.offsetY = newDeltaY;\n\n            var temp = state.width;\n            state.width = state.height;\n            state.height = temp;\n\n            this.storeCropperState(state);\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            }\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    // If we're zooming the image in or out, better do the same to viewport\n                    var temp = this.viewport.height * scaleFactor;\n                    this.viewport.height = this.viewport.width * scaleFactor;\n                    this.viewport.width = temp;\n                    this.viewport.set({angle: 0});\n                },\n            });\n\n            // Animate the rotation and dimension change\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                    this.image.set({angle: cleanAngle});\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        this._adjustFocalPointByAngle(degrees);\n                        this.straighten(this.straighteningInput);\n                        this.canvas.add(this.focalPoint);\n                    } else {\n                        this._resetFocalPointPosition();\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Flip an image along an axis.\n     *\n     * @param axis\n     */\n    flipImage: function(axis) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            if (this.hasOrientationChanged()) {\n                axis = axis === 'y' ? 'x' : 'y';\n            }\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            } else {\n                this._resetFocalPointPosition();\n            }\n\n            var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            this.straighteningInput.setValue(-this.imageStraightenAngle);\n            this.imageStraightenAngle = -this.imageStraightenAngle;\n            var properties = {\n                angle: this.viewportRotation + this.imageStraightenAngle\n            };\n\n            var deltaY, deltaX;\n            var cropperState = this.cropperState;\n            var focalPointState = this.focalPointState;\n\n            // Reposition the image, viewport, and stored cropper and focal point states.\n            if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                cropperState.offsetX = -cropperState.offsetX;\n                focalPointState.offsetX = -focalPointState.offsetX;\n                deltaX = this.image.left - editorCenter.x;\n                properties.left = editorCenter.x - deltaX;\n            } else {\n                cropperState.offsetY = -cropperState.offsetY;\n                focalPointState.offsetY = -focalPointState.offsetY;\n                deltaY = this.image.top - editorCenter.y;\n                properties.top = editorCenter.y - deltaY;\n            }\n\n            if (axis === 'y') {\n                properties.scaleY = this.image.scaleY * -1;\n                this.flipData.y = 1 - this.flipData.y;\n            } else {\n                properties.scaleX = this.image.scaleX * -1;\n                this.flipData.x = 1 - this.flipData.x;\n            }\n\n            this.storeCropperState(cropperState);\n            this.storeFocalPointState(focalPointState);\n\n            this.image.animate(properties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        // Well this is handy\n                        this._adjustFocalPointByAngle(0);\n                        this.canvas.add(this.focalPoint);\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Perform the straightening with input slider.\n     *\n     * @param {Craft.SlideRuleInput} slider\n     */\n    straighten: function(slider) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            var previousAngle = this.image.angle;\n\n            this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n            // Straighten the image\n            this.image.set({\n                angle: this.viewportRotation + this.imageStraightenAngle\n            });\n\n            // Set the new zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            this._zoomImage();\n\n            if (this.cropperState) {\n                this._adjustEditorElementsOnStraighten(previousAngle);\n            }\n\n            this.renderImage();\n\n            this.animationInProgress = false;\n        }\n    },\n\n    /**\n     * Adjust the cropped viewport when straightening the image to correct for\n     * bumping into edges, keeping focus on the cropped area center and to\n     * maintain the illusion that the image is being straightened relative to the viewport center.\n     *\n     * @param {integer} previousAngle integer the previous image angle before straightening\n     */\n    _adjustEditorElementsOnStraighten: function(previousAngle) {\n        var scaledImageDimensions = this.getScaledImageDimensions();\n        var angleDelta = this.image.angle - previousAngle;\n        var state = this.cropperState;\n\n        var currentZoomRatio = this.zoomRatio;\n        var adjustmentRatio = 1;\n\n        var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n        do {\n            // Get the cropper center coordinates\n            var cropperCenterX = state.offsetX;\n            var cropperCenterY = state.offsetY;\n            var angleInRadians = angleDelta * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n            newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n            sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Figure out the final image offset to keep the viewport focused where we need it\n            deltaX = newCenterX * currentZoomRatio * sizeFactor;\n            deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n            // If the image would creep in the viewport, figure out how to math around it.\n            var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n            var rectangle = {\n                width: this.viewport.width,\n                height: this.viewport.height,\n                left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n            };\n            adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n            currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n            // If we had to make adjustments, do the calculations again\n        } while (adjustmentRatio !== 1);\n\n        // Reposition the image correctly\n        this.image.set({\n            left: this.editorWidth / 2 - deltaX,\n            top: this.editorHeight / 2 - deltaY\n        });\n\n        // Finally, store the new cropper state to reflect the rotation change.\n        state.offsetX = newCenterX;\n        state.offsetY = newCenterY;\n        state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n        state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n        this.storeCropperState(state);\n\n        // Zoom the image in and we're done.\n        this.zoomRatio = currentZoomRatio;\n\n        if (this.focalPoint) {\n            this._adjustFocalPointByAngle(angleDelta);\n\n            if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 0});\n            } else {\n                this.focalPoint.set({opacity: 1});\n            }\n        } else if (angleDelta !== 0) {\n            this._resetFocalPointPosition();\n        }\n\n        this._zoomImage();\n    },\n\n    /**\n     * If focal point is active and outside of viewport after straightening, reset it.\n     */\n    _cleanupFocalPointAfterStraighten: function() {\n        if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n            this.focalPoint.set({opacity: 1});\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n            this.toggleFocalPoint();\n        }\n    },\n\n    /**\n     * Reset focal point to the middle of image.\n     */\n    _resetFocalPointPosition: function() {\n        var state = this.focalPointState;\n        state.offsetX = 0;\n        state.offsetY = 0;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n     *\n     * @param object\n     * @param containingObject\n     *\n     * @returns {boolean}\n     */\n    _isCenterInside: function(object, containingObject) {\n        return (object.left > containingObject.left - containingObject.width / 2\n            && object.top > containingObject.top - containingObject.height / 2\n            && object.left < containingObject.left + containingObject.width / 2\n            && object.top < containingObject.top + containingObject.height / 2\n        );\n    },\n\n    /**\n     * Adjust the focal point by an angle in degrees.\n     * @param angle\n     */\n    _adjustFocalPointByAngle: function(angle) {\n        var angleInRadians = angle * (Math.PI / 180);\n        var state = this.focalPointState;\n\n        var focalX = state.offsetX;\n        var focalY = state.offsetY;\n\n        // Calculate how the focal point would need to move in a circle to keep on the same spot\n        // on the image if it was rotated with zoom intact.\n        var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n        var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n        var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n        var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n        var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n        this.focalPoint.left = this.image.left + adjustedFocalX;\n        this.focalPoint.top = this.image.top + adjustedFocalY;\n\n        state.offsetX = newFocalX;\n        state.offsetY = newFocalY;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n     * If the rectangle fits, 1 will be returned.\n     *\n     * @param rectangle\n     * @param containingVertices\n     */\n    _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n        var rectangleVertices = this._getRectangleVertices(rectangle);\n        var vertex;\n\n        // Check if any of the viewport vertices end up out of bounds\n        for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n            vertex = rectangleVertices[verticeIndex];\n\n            if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                break;\n            }\n\n            vertex = false;\n        }\n\n        // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n        var adjustmentRatio;\n\n        if (!vertex) {\n            adjustmentRatio = 1;\n        } else {\n            // Find out which edge got crossed by the vertex\n            var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n            var rectangleCenter = {\n                x: rectangle.left + rectangle.width / 2,\n                y: rectangle.top + rectangle.height / 2\n            };\n\n            // Calculate how much further that edge needs to be.\n            // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n            var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n            var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n            // Adjust the zoom ratio\n            adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n        }\n\n        return adjustmentRatio;\n    },\n\n    /**\n     * Save the image.\n     *\n     * @param ev\n     */\n    saveImage: function(ev) {\n        var $button = $(ev.currentTarget);\n        if ($button.hasClass('disabled')) {\n            return false;\n        }\n\n        $('.btn', this.$buttons).addClass('disabled');\n        this.$buttons.append('<div class=\"spinner\"></div>');\n\n        var postData = {\n            assetId: this.assetId,\n            viewportRotation: this.viewportRotation,\n            imageRotation: this.imageStraightenAngle,\n            replace: $button.hasClass('replace') ? 1 : 0\n        };\n\n        if (this.cropperState) {\n            var cropData = {};\n\n            cropData.height = this.cropperState.height;\n            cropData.width = this.cropperState.width;\n            cropData.offsetX = this.cropperState.offsetX;\n            cropData.offsetY = this.cropperState.offsetY;\n\n            postData.imageDimensions = this.cropperState.imageDimensions;\n\n            postData.cropData = cropData;\n        } else {\n            postData.imageDimensions = this.getScaledImageDimensions();\n        }\n\n        if (this.focalPoint) {\n            postData.focalPoint = this.focalPointState;\n        }\n\n        postData.flipData = this.flipData;\n        postData.zoom = this.zoomRatio;\n\n        Craft.postActionRequest('assets/save-image', postData, data => {\n            this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n            if (data.error) {\n                alert(data.error);\n                return;\n            }\n\n            this.onSave();\n            this.hide();\n            Craft.cp.runQueue();\n        });\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToCoverRatio: function(dimensions) {\n        // Convert the angle to radians\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        // Calculate the dimensions of the scaled image using the magic of math\n        var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n        var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n        // Calculate the ratio\n        return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToFitRatio: function(dimensions) {\n        // Get the bounding box for a rotated image\n        var boundingBox = this._getImageBoundingBox(dimensions);\n\n        // Scale the bounding box to fit\n        var scale = 1;\n        if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n            var vertScale = this.editorHeight / boundingBox.height;\n            var horiScale = this.editorWidth / boundingBox.width;\n            scale = Math.min(horiScale, vertScale);\n        }\n\n        return scale;\n    },\n\n    /**\n     * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n     */\n    getCombinedZoomRatio: function(dimensions) {\n        return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n    },\n\n    /**\n     * Draw the grid.\n     *\n     * @private\n     */\n    _showGrid: function() {\n        if (!this.grid) {\n            var strokeOptions = {\n                strokeWidth: 1,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            var lineCount = 8;\n            var gridWidth = this.viewport.width;\n            var gridHeight = this.viewport.height;\n            var xStep = gridWidth / (lineCount + 1);\n            var yStep = gridHeight / (lineCount + 1);\n\n            var grid = [\n                new fabric.Rect({\n                    strokeWidth: 2,\n                    stroke: 'rgba(255,255,255,1)',\n                    originX: 'center',\n                    originY: 'center',\n                    width: gridWidth,\n                    height: gridHeight,\n                    left: gridWidth / 2,\n                    top: gridHeight / 2,\n                    fill: 'rgba(255,255,255,0)'\n                })\n            ];\n\n            var i;\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n            }\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n            }\n\n            this.grid = new fabric.Group(grid, {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                angle: this.viewport.angle\n            });\n\n            this.canvas.add(this.grid);\n            this.renderImage();\n        }\n    },\n\n    /**\n     * Hide the grid\n     */\n    _hideGrid: function() {\n        this.canvas.remove(this.grid);\n        this.grid = null;\n        this.renderImage();\n    },\n\n    /**\n     * Remove all the events when hiding the editor.\n     */\n    onFadeOut: function() {\n        this.destroy();\n    },\n\n    /**\n     * Make sure underlying content is not scrolled by accident.\n     */\n    show: function() {\n        this.base();\n\n        $('html').addClass('noscroll');\n    },\n\n    /**\n     * Allow the content to scroll.\n     */\n    hide: function() {\n        this.removeAllListeners();\n        this.straighteningInput.removeAllListeners();\n        $('html').removeClass('noscroll');\n        this.base();\n    },\n\n    /**\n     * onSave callback.\n     */\n    onSave: function() {\n        this.settings.onSave();\n        this.trigger('save');\n    },\n\n    /**\n     * Enable the rotation slider.\n     */\n    enableSlider: function() {\n        this.$imageTools.removeClass('hidden');\n    },\n\n    /**\n     * Disable the rotation slider.\n     */\n    disableSlider: function() {\n        this.$imageTools.addClass('hidden');\n    },\n\n    /**\n     * Switch to crop mode.\n     */\n    enableCropMode: function() {\n        var imageDimensions = this.getScaledImageDimensions();\n        this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n        var viewportProperties = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var callback = () => {\n            this._setFittedImageVerticeCoordinates();\n\n            // Restore cropper\n            var state = this.cropperState;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Restore based on the stored information\n            var cropperData = {\n                left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                width: state.width * sizeFactor * this.zoomRatio,\n                height: state.height * sizeFactor * this.zoomRatio\n            };\n\n            this._showCropper(cropperData);\n\n            if (this.focalPoint) {\n                sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Switch out of crop mode.\n     */\n    disableCropMode: function() {\n        var viewportProperties = {};\n\n        this._hideCropper();\n        var imageDimensions = this.getScaledImageDimensions();\n        var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n        var inverseZoomFactor = targetZoom / this.zoomRatio;\n        this.zoomRatio = targetZoom;\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var offsetX = this.clipper.left - this.image.left;\n        var offsetY = this.clipper.top - this.image.top;\n\n        var imageOffsetX = offsetX * inverseZoomFactor;\n        var imageOffsetY = offsetY * inverseZoomFactor;\n        imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n        imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n        // Calculate the cropper dimensions after all the zooming\n        viewportProperties.height = this.clipper.height * inverseZoomFactor;\n        viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n        if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n            if (this.focalPoint) {\n                this.toggleFocalPoint();\n            }\n\n            this._resetFocalPointPosition();\n        }\n\n        var callback = () => {\n            // Reposition focal point correctly\n            if (this.focalPoint) {\n                var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Transition between cropping end editor modes\n     *\n     * @param callback\n     * @param imageProperties\n     * @param viewportProperties\n     * @private\n     */\n    _editorModeTransition: function(callback, imageProperties, viewportProperties) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            // Without this it looks semi-broken during animation\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n                this.renderImage();\n            }\n\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    callback();\n                    this.animationInProgress = false;\n                    this.renderImage();\n                },\n            });\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration\n            });\n        }\n    },\n\n    _showSpinner: function() {\n        this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n        var canvas = document.getElementById('spinner-canvas');\n        var context = canvas.getContext('2d');\n        var start = new Date();\n        var lines = 16,\n            cW = context.canvas.width,\n            cH = context.canvas.height;\n\n        var draw = function() {\n            var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n            context.save();\n            context.clearRect(0, 0, cW, cH);\n            context.translate(cW / 2, cH / 2);\n            context.rotate(Math.PI * 2 * rotation);\n            for (var i = 0; i < lines; i++) {\n                context.beginPath();\n                context.rotate(Math.PI * 2 / lines);\n                context.moveTo(cW / 10, 0);\n                context.lineTo(cW / 4, 0);\n                context.lineWidth = cW / 30;\n                context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                context.stroke();\n            }\n            context.restore();\n        };\n        this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n    },\n\n    _hideSpinner: function() {\n        window.clearInterval(this.spinnerInterval);\n        this.$spinnerCanvas.remove();\n        this.$spinnerCanvas = null;\n    },\n\n    /**\n     * Show the cropper.\n     *\n     * @param clipperData\n     */\n    _showCropper: function(clipperData) {\n        this._setupCropperLayer(clipperData);\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Hide the cropper.\n     */\n    _hideCropper: function() {\n        if (this.clipper) {\n            this.croppingCanvas.remove(this.clipper);\n            this.croppingCanvas.remove(this.croppingShade);\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n\n            this.croppingCanvas = null;\n            this.renderCropper = null;\n        }\n    },\n\n    /**\n     * Draw the cropper.\n     *\n     * @param clipperData\n     */\n    _setupCropperLayer: function(clipperData) {\n        // Set up the canvas for cropper\n        this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n            backgroundColor: 'rgba(0,0,0,0)',\n            hoverCursor: 'default',\n            selection: false\n        });\n\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        this.renderCropper = () => Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n\n        $('#cropping-canvas', this.$editorContainer).css({\n            position: 'absolute',\n            top: 0,\n            left: 0\n        });\n\n        this.croppingShade = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: this.editorWidth,\n            height: this.editorHeight,\n            fill: 'rgba(0,0,0,0.7)'\n        });\n\n        // Calculate the cropping rectangle size\n        var imageDimensions = this.getScaledImageDimensions();\n        var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n        var rectWidth = imageDimensions.width / rectangleRatio;\n        var rectHeight = imageDimensions.height / rectangleRatio;\n\n        if (this.hasOrientationChanged()) {\n            var temp = rectHeight;\n            rectHeight = rectWidth;\n            rectWidth = temp;\n        }\n\n        // Set up the cropping viewport rectangle\n        this.clipper = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: rectWidth,\n            height: rectHeight,\n            stroke: 'black',\n            fill: 'rgba(128,0,0,1)',\n            strokeWidth: 0\n        });\n\n        // Set from clipper data\n        if (clipperData) {\n            this.clipper.set(clipperData);\n        }\n\n        this.clipper.globalCompositeOperation = 'destination-out';\n        this.croppingCanvas.add(this.croppingShade);\n        this.croppingCanvas.add(this.clipper);\n    },\n\n    /**\n     * Redraw the cropper boundaries\n     */\n    _redrawCropperElements: function() {\n        if (typeof this._redrawCropperElements._ === 'undefined') {\n            this._redrawCropperElements._ = {};\n        }\n\n        if (this.cropperHandles) {\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n        }\n        this._redrawCropperElements._.lineOptions = {\n            strokeWidth: 4,\n            stroke: 'rgb(255,255,255)',\n            fill: false\n        };\n\n        this._redrawCropperElements._.gridOptions = {\n            strokeWidth: 2,\n            stroke: 'rgba(255,255,255,0.5)'\n        };\n\n        // Draw the handles\n        this._redrawCropperElements._.pathGroup = [\n            new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n        ];\n\n        this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n            left: this.clipper.left,\n            top: this.clipper.top,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        // Don't forget the rectangle\n        this.croppingRectangle = new fabric.Rect({\n            left: this.clipper.left,\n            top: this.clipper.top,\n            width: this.clipper.width,\n            height: this.clipper.height,\n            fill: 'rgba(0,0,0,0)',\n            stroke: 'rgba(255,255,255,0.8)',\n            strokeWidth: 2,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        this.cropperGrid = new fabric.Group(\n            [\n                new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n            ], {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n        this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n        this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n        if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n            this._redrawCropperElements._.cropTextTop -= 24;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n        }\n\n        this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n            left: this.croppingRectangle.left,\n            top: this._redrawCropperElements._.cropTextTop,\n            fontSize: 13,\n            fill: 'rgb(200,200,200)',\n            backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n            font: 'Craft',\n            width: 70,\n            height: 15,\n            originX: 'center',\n            originY: 'center',\n            textAlign: 'center'\n        });\n\n        this.croppingCanvas.add(this.cropperHandles);\n        this.croppingCanvas.add(this.cropperGrid);\n        this.croppingCanvas.add(this.croppingRectangle);\n        this.croppingCanvas.add(this.croppingAreaText);\n    },\n\n    /**\n     * Reposition the cropper when the image editor dimensions change.\n     *\n     * @param previousImageArea\n     */\n    _repositionCropper: function(previousImageArea) {\n        if (!this.croppingCanvas) {\n            return;\n        }\n\n        // Get the current clipper offset relative to center\n        var currentOffset = {\n            x: this.clipper.left - this.croppingCanvas.width / 2,\n            y: this.clipper.top - this.croppingCanvas.height / 2\n        };\n\n        // Resize the cropping canvas\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        // Check by what factor will the new final bounding box be different\n        var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n        var areaFactor = currentArea.width / previousImageArea.width;\n\n        // Adjust the cropper size to scale along with the bounding box\n        this.clipper.width = Math.round(this.clipper.width * areaFactor);\n        this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n        // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n        // for editor size changes and then multiply by the size factor to adjust for image size changes\n        this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n        this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n        // Resize the cropping shade\n        this.croppingShade.set({\n            width: this.editorWidth,\n            height: this.editorHeight,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        });\n\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Get the dimensions of a bounding rectangle by a set of four coordinates.\n     *\n     * @param coordinateSet\n     */\n    _getBoundingRectangle: function(coordinateSet) {\n        return {\n            width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n            height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n        };\n    },\n\n    /**\n     * Handle the mouse being clicked.\n     *\n     * @param ev\n     */\n    _handleMouseDown: function(ev) {\n        // Focal before resize before dragging\n        var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n        var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n        var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n        if (handle || move || focal) {\n            this.previousMouseX = ev.pageX;\n            this.previousMouseY = ev.pageY;\n\n            if (focal) {\n                this.draggingFocal = true;\n            } else if (handle) {\n                this.scalingCropper = handle;\n            } else if (move) {\n                this.draggingCropper = true;\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse being moved.\n     *\n     * @param ev\n     */\n    _handleMouseMove: function(ev) {\n        if (this.mouseMoveEvent !== null) {\n            Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n        }\n        this.mouseMoveEvent = ev;\n    },\n\n    _handleMouseMoveInternal: function() {\n        if (this.mouseMoveEvent === null) {\n            return;\n        }\n\n        if (this.focalPoint && this.draggingFocal) {\n            this._handleFocalDrag(this.mouseMoveEvent);\n            this.storeFocalPointState();\n            this.renderImage();\n        } else if (this.draggingCropper || this.scalingCropper) {\n            if (this.draggingCropper) {\n                this._handleCropperDrag(this.mouseMoveEvent);\n            } else {\n                this._handleCropperResize(this.mouseMoveEvent);\n            }\n\n            this._redrawCropperElements();\n\n            this.storeCropperState();\n            this.renderCropper();\n        } else {\n            this._setMouseCursor(this.mouseMoveEvent);\n        }\n\n        this.previousMouseX = this.mouseMoveEvent.pageX;\n        this.previousMouseY = this.mouseMoveEvent.pageY;\n\n        this.mouseMoveEvent = null;\n    },\n\n    /**\n     * Handle mouse being released.\n     *\n     * @param ev\n     */\n    _handleMouseUp: function(ev) {\n        this.draggingCropper = false;\n        this.scalingCropper = false;\n        this.draggingFocal = false;\n    },\n\n    /**\n     * Handle mouse out\n     *\n     * @param ev\n     */\n    _handleMouseOut: function(ev) {\n        this._handleMouseUp(ev);\n        this.mouseMoveEvent = ev;\n        this._handleMouseMoveInternal();\n    },\n\n    /**\n     * Handle cropper being dragged.\n     *\n     * @param ev\n     */\n    _handleCropperDrag: function(ev) {\n        if (typeof this._handleCropperDrag._ === 'undefined') {\n            this._handleCropperDrag._ = {};\n        }\n\n        this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n            return false;\n        }\n\n        this._handleCropperDrag._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n        // If this would drag it outside of the image\n        if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n            // Try to find the furthest point in the same general direction where we can drag it\n\n            // Delta iterator setup\n            this._handleCropperDrag._.dxi = 0;\n            this._handleCropperDrag._.dyi = 0;\n            this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n            this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n            // The furthest we can move\n            this._handleCropperDrag._.furthest = 0;\n            this._handleCropperDrag._.furthestDeltas = {};\n\n            // Loop through every combination of dragging it not so far\n            for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                    this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                    if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                        if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                            this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                            this._handleCropperDrag._.furthestDeltas = {\n                                x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                            }\n                        }\n                    }\n                }\n            }\n\n            // REALLY can't drag along the cursor movement\n            if (this._handleCropperDrag._.furthest == 0) {\n                return;\n            } else {\n                this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n            }\n        }\n\n        this.clipper.set({\n            left: this.clipper.left + this._handleCropperDrag._.deltaX,\n            top: this.clipper.top + this._handleCropperDrag._.deltaY\n        });\n    },\n\n    /**\n     * Handle focal point being dragged.\n     *\n     * @param ev\n     */\n    _handleFocalDrag: function(ev) {\n        if (typeof this._handleFocalDrag._ === 'undefined') {\n            this._handleFocalDrag._ = {};\n        }\n\n        if (this.focalPoint) {\n            this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                return;\n            }\n\n            this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n            this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n            // Just make sure that the focal point stays inside the image\n            if (this.currentView === 'crop') {\n                if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                    return;\n                }\n            } else {\n                if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                    && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                    return;\n                }\n            }\n\n            this.focalPoint.set({\n                left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n            });\n        }\n    },\n\n    /**\n     * Set the cropping constraint\n     * @param constraint\n     */\n    setCroppingConstraint: function(constraint) {\n        // In case this caused the sidebar width to change.\n        this.updateSizeAndPosition();\n\n        switch (constraint) {\n            case 'none':\n                this.croppingConstraint = false;\n                break;\n\n            case 'original':\n                this.croppingConstraint = this.originalWidth / this.originalHeight;\n                break;\n\n            case 'current':\n                this.croppingConstraint = this.clipper.width / this.clipper.height;\n                break;\n\n            case 'custom':\n\n                break;\n            default:\n                this.croppingConstraint = parseFloat(constraint);\n\n                break;\n        }\n    },\n\n    /**\n     * Enforce the cropping constraint\n     */\n    enforceCroppingConstraint: function() {\n        if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n            this.enforceCroppingConstraint._ = {};\n        }\n\n        if (this.animationInProgress || !this.croppingConstraint) {\n            return;\n        }\n\n        this.animationInProgress = true;\n\n        // Mock the clipping rectangle for collision tests\n        this.enforceCroppingConstraint._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        // If wider than it should be\n        if (this.clipper.width > this.clipper.height * this.croppingConstraint) {\n            this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n            // Make it taller!\n            this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n            // Getting really awkward having to convert between 0;0 being center or top-left corner.\n            this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n            // If the clipper would end up out of bounds, make it narrower instead.\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n            }\n        } else {\n            // Follow the same pattern, if taller than it should be.\n            this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n            this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n            this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n            }\n        }\n\n        this.enforceCroppingConstraint._.properties = {\n            height: this.enforceCroppingConstraint._.rectangle.height,\n            width: this.enforceCroppingConstraint._.rectangle.width\n        };\n\n        // Make sure to redraw cropper handles and gridlines when resizing\n        this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n            onChange: () => {\n                this._redrawCropperElements();\n                this.croppingCanvas.renderAll();\n            },\n            duration: this.settings.animationDuration,\n            onComplete: () => {\n                this._redrawCropperElements();\n                this.animationInProgress = false;\n                this.renderCropper();\n                this.storeCropperState();\n            },\n        });\n    },\n\n    /**\n     * Handle cropper being resized.\n     *\n     * @param ev\n     */\n    _handleCropperResize: function(ev) {\n        if (typeof this._handleCropperResize._ === 'undefined') {\n            this._handleCropperResize._ = {};\n        }\n\n        // Size deltas\n        this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n            this._handleCropperResize._.deltaX = 0;\n        }\n\n        if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n            this._handleCropperResize._.deltaY = 0;\n        }\n\n        if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n            return;\n        }\n\n        // Translate from center-center origin to absolute coords\n        this._handleCropperResize._.startingRectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        }\n\n        this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n        if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n            return;\n        }\n\n        if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n            return;\n        }\n\n        // Translate back to center-center origin.\n        this.clipper.set({\n            top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n            left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n            width: this._handleCropperResize._.rectangle.width,\n            height: this._handleCropperResize._.rectangle.height\n        });\n\n        this._redrawCropperElements();\n    },\n\n    _calculateNewCropperSizeByDeltas: function(startingRectangle, deltaX, deltaY, cropperDirection) {\n        if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n            this._calculateNewCropperSizeByDeltas._ = {};\n        }\n\n        // Center deltas\n        this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n        this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n        this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n        this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n        this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n        // Lock the aspect ratio if needed\n        if (this.croppingConstraint) {\n            this._calculateNewCropperSizeByDeltas._.change = 0;\n\n            // Take into account the mouse direction and figure out the \"real\" change in cropper size\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'br':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n\n            if (this.croppingConstraint > 1) {\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n            } else {\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n            // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n        } else {\n            // Lock the aspect ratio\n            if (this.shiftKeyHeld &&\n                (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                    cropperDirection === 'bl' || cropperDirection === 'br')\n            ) {\n                this._calculateNewCropperSizeByDeltas._.ratio;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                }\n            }\n\n            if (cropperDirection.match(/t/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/b/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/r/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n            if (cropperDirection.match(/l/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n        }\n\n        this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n        this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n        this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n        this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n        return this._calculateNewCropperSizeByDeltas._.rectangle;\n    },\n\n    /**\n     * Set mouse cursor by it's position over cropper.\n     *\n     * @param ev\n     */\n    _setMouseCursor: function(ev) {\n        if (typeof this._setMouseCursor._ === 'undefined') {\n            this._setMouseCursor._ = {};\n        }\n\n        if (Garnish.isMobileBrowser(true)) {\n            return;\n        }\n        this._setMouseCursor._.cursor = 'default';\n        this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n        if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n            this._setMouseCursor._.cursor = 'pointer';\n        } else if (this._setMouseCursor._.handle) {\n            if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                this._setMouseCursor._.cursor = 'ns-resize';\n            } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                this._setMouseCursor._.cursor = 'ew-resize';\n            } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                this._setMouseCursor._.cursor = 'nwse-resize';\n            } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                this._setMouseCursor._.cursor = 'nesw-resize';\n            }\n        } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n            this._setMouseCursor._.cursor = 'move';\n        }\n\n        $('.body').css('cursor', this._setMouseCursor._.cursor);\n    },\n\n    /**\n     * Test whether the mouse cursor is on any cropper handles.\n     *\n     * @param ev\n     */\n    _cropperHandleHitTest: function(ev) {\n        if (typeof this._cropperHandleHitTest._ === 'undefined') {\n            this._cropperHandleHitTest._ = {};\n        }\n\n        this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n        this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n        this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n        this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n        this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n        this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n        // Left side top/bottom\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tl';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'bl';\n            }\n        }\n        // Right side top/bottom\n        if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tr';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'br';\n            }\n        }\n\n        // Left or right\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'l';\n        }\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'r';\n        }\n\n        // Top or bottom\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 't';\n        }\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 'b';\n        }\n\n        return false;\n    },\n\n    /**\n     * Test whether the mouse cursor is on a fabricJS object.\n     *\n     * @param object\n     * @param event\n     *\n     * @return boolean\n     */\n\n    _isMouseOver: function(event, object) {\n        if (typeof this._isMouseOver._ === 'undefined') {\n            this._isMouseOver._ = {};\n        }\n\n        this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n        this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n        this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._isMouseOver._.lb = object.left - object.width / 2;\n        this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n        this._isMouseOver._.tb = object.top - object.height / 2;\n        this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n        return (\n            this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n            this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n            this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n            this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n        );\n    },\n\n    /**\n     * Get vertices of a rectangle defined by left,top,height and width properties.\n     * Optionally it's possible to provide offsetX and offsetY values.\n     * Left and top properties of rectangle reference the top-left corner.\n     *\n     * @param rectangle\n     * @param [offsetX]\n     * @param [offsetY]\n     */\n    _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n        if (typeof this._getRectangleVertices._ === 'undefined') {\n            this._getRectangleVertices._ = {};\n        }\n\n        if (typeof offsetX === 'undefined') {\n            offsetX = 0;\n        }\n        if (typeof offsetY === 'undefined') {\n            offsetY = 0;\n        }\n\n        this._getRectangleVertices._.topLeft = {\n            x: rectangle.left + offsetX,\n            y: rectangle.top + offsetY\n        };\n\n        this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n        this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n        this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n        return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n    },\n\n    /**\n     * Set image vertice coordinates for an image that's been zoomed to fit.\n     */\n    _setFittedImageVerticeCoordinates: function() {\n        this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n    },\n\n    /**\n     * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n     * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n     *\n     * @param zoomMode\n     */\n    getImageVerticeCoords: function(zoomMode) {\n        var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n        var imageDimensions = this.getScaledImageDimensions();\n\n        var ratio;\n\n        if (typeof zoomMode === \"number\") {\n            ratio = zoomMode;\n        } else if (zoomMode === \"cover\") {\n            ratio = this.getZoomToCoverRatio(imageDimensions);\n        } else {\n            ratio = this.getZoomToFitRatio(imageDimensions);\n        }\n\n        // Get the dimensions of the scaled image\n        var scaledHeight = imageDimensions.height * ratio;\n        var scaledWidth = imageDimensions.width * ratio;\n\n        // Calculate the segments of the containing box for the image.\n        // When referring to top/bottom or right/left segments, these are on the\n        // right-side and bottom projection of the containing box for the zoomed out image.\n        var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n        var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n        var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n        var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n        // Calculate the offsets from editor box for the image-containing box\n        var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n        var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n        // Finally, calculate the image vertice coordinates\n        return {\n            a: {\n                x: horizontalOffset + rightHorizontalSegment,\n                y: verticalOffset\n            },\n            b: {\n                x: this.editorWidth - horizontalOffset,\n                y: verticalOffset + topVerticalSegment\n            },\n            c: {\n                x: horizontalOffset + leftHorizontalSegment,\n                y: this.editorHeight - verticalOffset\n            },\n            d: {\n                x: horizontalOffset,\n                y: verticalOffset + bottomVerticalSegment\n            }\n        };\n    },\n\n    /**\n     * Debug stuff by continuously rendering a fabric object on canvas.\n     *\n     * @param fabricObj\n     */\n    _debug: function(fabricObj) {\n        this.canvas.remove(this.debugger);\n        this.debugger = fabricObj;\n        this.canvas.add(this.debugger);\n    },\n\n    /**\n     * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n     * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n     * return true if the point is in the rectangle.\n     *\n     * Adapted from: http://stackoverflow.com/a/2763387/2040791\n     *\n     * @param points\n     * @param rectangle\n     */\n    arePointsInsideRectangle: function(points, rectangle) {\n        if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n            this.arePointsInsideRectangle._ = {};\n        }\n\n        // Pre-calculate the vectors and scalar products for two rectangle edges\n        this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n        this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n        this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n        this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n        for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n            this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n            // Calculate the vectors for two rectangle sides and for\n            // the vector from vertices a and b to the point P\n            this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n            this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n            // Calculate scalar or dot products for some vector combinations\n            this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n            this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n            this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n            this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n            if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    /**\n     * Returns an object representing the vector between points a and b.\n     *\n     * @param a\n     * @param b\n     */\n    _getVector: function(a, b) {\n        return {x: b.x - a.x, y: b.y - a.y};\n    },\n\n    /**\n     * Returns the scalar product of two vectors\n     *\n     * @param a\n     * @param b\n     */\n    _getScalarProduct: function(a, b) {\n        return a.x * b.x + a.y * b.y;\n    },\n\n    /**\n     * Returns the magnitude of a vector_redrawCropperElements\n     * .\n     *\n     * @param vector\n     */\n    _getVectorMagnitude: function(vector) {\n        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    },\n\n    /**\n     * Returns the angle between two vectors in degrees with two decimal points\n     *\n     * @param a\n     * @param b\n     */\n    _getAngleBetweenVectors: function(a, b) {\n        return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n    },\n\n    /**\n     * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n     *\n     * @param rectangle\n     * @param vertex\n     *\n     * @returns {*}\n     */\n    _getEdgeCrossed: function(rectangle, vertex) {\n        // Determine over which edge the vertex is\n        var edgePoints = [\n            [rectangle.a, rectangle.b],\n            [rectangle.b, rectangle.c],\n            [rectangle.c, rectangle.d],\n            [rectangle.d, rectangle.a]\n        ];\n\n        var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n        var smallestDiff = 180;\n        var edgeCrossed = null;\n\n        // Test each edge\n        for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n            var edge = edgePoints[edgeIndex];\n            var toCenter = this._getVector(edge[0], centerPoint);\n            var edgeVector = this._getVector(edge[0], edge[1]);\n            var toVertex = this._getVector(edge[0], vertex);\n\n            // If the angle between toCenter/toVertex is the sum of\n            // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n            // the edgeVector is between the other two meaning that this is the offending vertex.\n            // To avoid the rounding errors, we'll take the closest match\n            var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n            if (diff < smallestDiff) {\n                smallestDiff = diff;\n                edgeCrossed = edge;\n            }\n        }\n\n        return edgeCrossed;\n    },\n\n    /**\n     * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n     *\n     * @param dimensions\n     */\n    _getImageBoundingBox: function(dimensions) {\n        var box = {};\n\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        var proportion = dimensions.height / dimensions.width;\n        box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n        box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n        if (this.hasOrientationChanged()) {\n            var temp = box.width;\n            box.width = box.height;\n            box.height = temp;\n        }\n\n        return box;\n    }\n}, {\n    defaults: {\n        animationDuration: 100,\n        allowSavingAsNew: true,\n        onSave: $.noop,\n        allowDegreeFractions: null,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend({\n    $includeSubfoldersContainer: null,\n    $includeSubfoldersCheckbox: null,\n    showingIncludeSubfoldersCheckbox: false,\n\n    $uploadButton: null,\n    $uploadInput: null,\n    $progressBar: null,\n    $folders: null,\n\n    uploader: null,\n    promptHandler: null,\n    progressBar: null,\n\n    _uploadTotalFiles: 0,\n    _uploadFileProgress: {},\n    _uploadedAssetIds: [],\n    _currentUploaderSettings: {},\n\n    _assetDrag: null,\n    _folderDrag: null,\n    _expandDropTargetFolderTimeout: null,\n    _tempExpandedFolders: [],\n\n    _fileConflictTemplate: {\n        choices: [\n            {value: 'keepBoth', title: Craft.t('app', 'Keep both')}, {value: 'replace', title: Craft.t('app', 'Replace it')}\n        ]\n    },\n    _folderConflictTemplate: {\n        choices: [\n            {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')}, {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n        ]\n    },\n\n    init: function(elementType, $container, settings) {\n        this.base(elementType, $container, settings);\n\n        if (this.settings.context === 'index') {\n            if (!this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n        } else {\n            this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n            if (this.settings.modal) {\n                this.settings.modal.on('updateSizeAndPosition', this._positionProgressBar.bind(this));\n            }\n        }\n    },\n\n    initSources: function() {\n        if (this.settings.context === 'index' && !this._folderDrag) {\n            this._initIndexPageMode();\n        }\n\n        return this.base();\n    },\n\n    initSource: function($source) {\n        this.base($source);\n\n        this._createFolderContextMenu($source);\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                if ($source.data('folder-id')) {\n                    this._folderDrag.addItems($source.parent());\n                }\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    deinitSource: function($source) {\n        this.base($source);\n\n        // Does this source have a context menu?\n        var contextMenu = $source.data('contextmenu');\n\n        if (contextMenu) {\n            contextMenu.destroy();\n        }\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                this._folderDrag.removeItems($source.parent());\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    _getSourceLevel: function($source) {\n        return $source.parentsUntil('nav', 'ul').length;\n    },\n\n    /**\n     * Initialize the index page-specific features\n     */\n    _initIndexPageMode: function() {\n        if (this._folderDrag) {\n            return;\n        }\n\n        // Make the elements selectable\n        this.settings.selectable = true;\n        this.settings.multiSelect = true;\n\n        // Asset dragging\n        // ---------------------------------------------------------------------\n\n        this._assetDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n            filter: () => this.view.getSelectedElements().has('div.element[data-movable]'),\n            helper: $file => this._getFileDragHelper($file),\n            dropTargets: () => {\n                // Which data attribute should we be checking?\n                var attr;\n                if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                    attr = 'data-can-move-peer-files-to';\n                } else {\n                    attr = 'data-can-move-to';\n                }\n\n                var targets = [];\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder\n                    var $source = this.$sources.eq(i);\n                    if (Garnish.hasAttr($source, attr)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFileDragStop.bind(this),\n            helperBaseZindex: 800\n        });\n\n        // Folder dragging\n        // ---------------------------------------------------------------------\n\n        this._folderDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: () => {\n                // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                var $selected = this.sourceSelect.getSelectedItems(),\n                    draggees = [];\n\n                for (var i = 0; i < $selected.length; i++) {\n                    var $source = $selected.eq(i);\n\n                    if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                        continue;\n                    }\n\n                    if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                        draggees.push($source.parent()[0]);\n                    }\n                }\n\n                return $(draggees);\n            },\n\n            helper: $draggeeHelper => {\n                var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                    $helperNav = $('<nav/>').appendTo($helperSidebar),\n                    $helperUl = $('<ul/>').appendTo($helperNav);\n\n                $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                $draggeeHelper.children('a').addClass('sel');\n\n                // Match the style\n                $draggeeHelper.css({\n                    'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                    'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                    'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                    'padding-left': this._folderDrag.$draggee.css('padding-left')\n                });\n\n                return $helperSidebar;\n            },\n\n            dropTargets: () => {\n                var targets = [];\n\n                // Tag the dragged folder and it's subfolders\n                var draggedSourceIds = [];\n                this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                    draggedSourceIds.push($(this).data('key'));\n                });\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder and not one of the dragged folders\n                    var $source = this.$sources.eq(i),\n                        key = $source.data('key');\n\n                    if (!this._getFolderUidFromSourceKey(key)) {\n                        continue;\n                    }\n\n                    if (!Craft.inArray(key, draggedSourceIds)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFolderDragStop.bind(this),\n        });\n    },\n\n    /**\n     * On file drag stop\n     */\n    _onFileDragStop: function() {\n        if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n            // Keep it selected\n            var originatingSource = this.$source;\n\n            var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                originalAssetIds = [];\n\n            // For each file, prepare array data.\n            for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                originalAssetIds.push(originalAssetId);\n            }\n\n            // Are any files actually getting moved?\n            if (originalAssetIds.length) {\n                this.setIndexBusy();\n\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(originalAssetIds.length);\n                this.progressBar.showProgressBar();\n\n                // For each file to move a separate request\n                var parameterArray = [];\n                for (i = 0; i < originalAssetIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: {\n                            assetId: originalAssetIds[i],\n                            folderId: targetFolderId\n                        }\n                    });\n                }\n\n                // Define the callback for when all file moves are complete\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var response = responseArray[i];\n\n                        // Push prompt into prompt array\n                        if (response.conflict) {\n                            this.promptHandler.addPrompt({\n                                assetId: response.assetId,\n                                suggestedFilename: response.suggestedFilename,\n                                prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                            });\n                        }\n\n                        if (response.error) {\n                            alert(response.error);\n                        }\n                    }\n\n                    this.setIndexAvailable();\n                    this.progressBar.hideProgressBar();\n                    var reloadIndex = false;\n\n                    var performAfterMoveActions = function() {\n                        // Select original source\n                        this.sourceSelect.selectItem(originatingSource);\n\n                        // Make sure we use the correct offset when fetching the next page\n                        this._totalVisible -= this._assetDrag.$draggee.length;\n\n                        // And remove the elements that have been moved away\n                        for (var i = 0; i < originalAssetIds.length; i++) {\n                            $('[data-id=' + originalAssetIds[i] + ']').remove();\n                        }\n\n                        this.view.deselectAllElements();\n                        this._collapseExtraExpandedFolders(targetFolderId);\n\n                        if (reloadIndex) {\n                            this.updateElements();\n                        }\n                    };\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            var newParameterArray = [];\n\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    reloadIndex = true;\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'keepBoth') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            filename: returnData[i].suggestedFilename\n                                        }\n                                    });\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            force: true\n                                        }\n                                    });\n                                }\n                            }\n\n                            // Nothing to do, carry on\n                            if (newParameterArray.length === 0) {\n                                performAfterMoveActions.apply(this);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                // Move conflicting files again with resolutions now\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this._assetDrag.fadeOutHelpers();\n                        this.promptHandler.showBatchPrompts(promptCallback);\n                    } else {\n                        performAfterMoveActions.apply(this);\n                        this._assetDrag.fadeOutHelpers();\n                    }\n                };\n\n                // Initiate the file move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._assetDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * On folder drag stop\n     */\n    _onFolderDragStop: function() {\n        // Only move if we have a valid target and we're not trying to move into our direct parent\n        if (\n            this._folderDrag.$activeDropTarget &&\n            this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n        ) {\n            var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n            this._collapseExtraExpandedFolders(targetFolderId);\n\n            // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n            var folderIds = [];\n\n            for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                    folderId = $a.data('folder-id');\n\n                // Make sure it's not already in the target folder and use this single folder Id.\n                if (folderId != targetFolderId) {\n                    folderIds.push(folderId);\n                    break;\n                }\n            }\n\n            if (folderIds.length) {\n                folderIds.sort();\n                folderIds.reverse();\n\n                this.setIndexBusy();\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(folderIds.length);\n                this.progressBar.showProgressBar();\n\n                var parameterArray = [];\n\n                for (i = 0; i < folderIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-folder',\n                        params: {\n                            folderId: folderIds[i],\n                            parentId: targetFolderId\n                        }\n                    });\n                }\n\n                // Increment, so to avoid displaying folder files that are being moved\n                this.requestId++;\n\n                /*\n                 Here's the rundown:\n                 1) Send all the folders being moved\n                 2) Get results:\n                 a) For all conflicting, receive prompts and resolve them to get:\n                 b) For all valid move operations: by now server has created the needed folders\n                 in target destination. Server returns an array of file move operations\n                 c) server also returns a list of all the folder id changes\n                 d) and the data-id of node to be removed, in case of conflict\n                 e) and a list of folders to delete after the move\n                 3) From data in 2) build a large file move operation array\n                 4) Create a request loop based on this, so we can display progress bar\n                 5) when done, delete all the folders and perform other maintenance\n                 6) Champagne\n                 */\n\n                // This will hold the final list of files to move\n                var fileMoveList = [];\n\n                var newSourceKey = '';\n\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var data = responseArray[i];\n\n                        // If successful and have data, then update\n                        if (data.success) {\n                            if (data.transferList) {\n                                fileMoveList = data.transferList;\n                            }\n\n                            if (data.newFolderId) {\n                                newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                            }\n                        }\n\n                        // Push prompt into prompt array\n                        if (data.conflict) {\n                            data.prompt = {\n                                message: data.conflict,\n                                choices: this._folderConflictTemplate.choices\n                            };\n\n                            this.promptHandler.addPrompt(data);\n                        }\n\n                        if (data.error) {\n                            alert(data.error);\n                        }\n                    }\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            this.promptHandler.resetPrompts();\n\n                            var newParameterArray = [];\n\n                            var params = {};\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    params.force = true;\n                                }\n\n                                if (returnData[i].choice === 'merge') {\n                                    params.merge = true;\n                                }\n\n                                params.folderId = data.folderId;\n                                params.parentId = data.parentId;\n\n                                newParameterArray.push({\n                                    action: 'assets/move-folder',\n                                    params: params\n                                });\n                            }\n\n                            // Start working on them lists, baby\n                            if (newParameterArray.length === 0) {\n                                this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this.promptHandler.showBatchPrompts(promptCallback);\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                    } else {\n                        this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                    }\n                };\n\n                // Initiate the folder move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees until we get the Ajax response\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._folderDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * Really move the folder. Like really. For real.\n     */\n    _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n        this.progressBar.setItemCount(1);\n        this.progressBar.showProgressBar();\n\n        var moveCallback = folderDeleteList => {\n            // Delete the old folders\n            var counter = 0;\n            var limit = folderDeleteList.length;\n            for (var i = 0; i < folderDeleteList.length; i++) {\n                // When all folders are deleted, reload the sources.\n                Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, () => {\n                    if (++counter === limit) {\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        this._folderDrag.returnHelpersToDraggees();\n                        this.setInstanceState('selectedSource', newSourceKey);\n                        this.refreshSources();\n                    }\n                });\n            }\n        };\n\n        if (fileMoveList.length > 0) {\n            var parameterArray = [];\n\n            for (var i = 0; i < fileMoveList.length; i++) {\n                parameterArray.push({\n                    action: 'assets/move-asset',\n                    params: fileMoveList[i]\n                });\n            }\n            this._performBatchRequests(parameterArray, function() {\n                moveCallback(folderDeleteList);\n            });\n        } else {\n            moveCallback(folderDeleteList);\n        }\n    },\n\n    /**\n     * Returns the root level source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getRootSource: function($source) {\n        var $parent;\n        while (($parent = this._getParentSource($source)) && $parent.length) {\n            $source = $parent;\n        }\n        return $source;\n    },\n\n    /**\n     * Get parent source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getParentSource: function($source) {\n        if (this._getSourceLevel($source) > 1) {\n            return $source.parent().parent().siblings('a');\n        }\n    },\n\n    _selectSourceByFolderId: function(targetFolderId) {\n        var $targetSource = this._getSourceByKey(targetFolderId);\n\n        // Make sure that all the parent sources are expanded and this source is visible.\n        var $parentSources = $targetSource.parent().parents('li');\n\n        for (var i = 0; i < $parentSources.length; i++) {\n            var $parentSource = $($parentSources[i]);\n\n            if (!$parentSource.hasClass('expanded')) {\n                $parentSource.children('.toggle').trigger('click');\n            }\n        }\n\n        this.selectSource($targetSource);\n        this.updateElements();\n    },\n\n    /**\n     * Initialize the uploader.\n     *\n     * @private\n     */\n    afterInit: function() {\n        if (!this.$uploadButton) {\n            this.$uploadButton = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                'data-icon': 'upload',\n                style: 'position: relative; overflow: hidden;',\n                text: Craft.t('app', 'Upload files'),\n            });\n            this.addButton(this.$uploadButton);\n\n            this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n        }\n\n        this.promptHandler = new Craft.PromptHandler();\n        this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            fileInput: this.$uploadInput,\n            dropZone: this.$container\n        };\n\n        options.events = {\n            fileuploadstart: this._onUploadStart.bind(this),\n            fileuploadprogressall: this._onUploadProgress.bind(this),\n            fileuploaddone: this._onUploadComplete.bind(this),\n        };\n\n        if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        this._currentUploaderSettings = options;\n\n        this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n        this.$uploadButton.on('click', () => {\n            if (this.$uploadButton.hasClass('disabled')) {\n                return;\n            }\n            if (!this.isIndexBusy) {\n                this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n            }\n        });\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific volume in the URL?\n        if (this.settings.context === 'index' && typeof defaultVolumeHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n                if ($source.data('volume-handle') === defaultVolumeHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    onSelectSource: function() {\n        var $source = this._getSourceByKey(this.sourceKey);\n        var folderId = $source.data('folder-id');\n\n        if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n            this.uploader.setParams({\n                folderId: this.$source.attr('data-folder-id')\n            });\n            this.$uploadButton.removeClass('disabled');\n        } else {\n            this.$uploadButton.addClass('disabled');\n        }\n\n        // Update the URL if we're on the Assets index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'assets';\n            var $rootSource = this._getRootSource($source);\n            if ($rootSource && $rootSource.data('volume-handle')) {\n                uri += '/' + $rootSource.data('volume-handle');\n            }\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n\n        this.base();\n    },\n\n    _getFolderUidFromSourceKey: function(sourceKey) {\n        var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n        return m ? m[1] : null;\n    },\n\n    startSearching: function() {\n        // Does this source have subfolders?\n        if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n            if (this.$includeSubfoldersContainer === null) {\n                var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                    this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                    this.updateElements();\n                });\n            } else {\n                this.$includeSubfoldersContainer.velocity('stop');\n            }\n\n            var checked = this.getSelectedSourceState('includeSubfolders', false);\n            this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: 0,\n                opacity: 1\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = true;\n        }\n\n        this.base();\n    },\n\n    stopSearching: function() {\n        if (this.showingIncludeSubfoldersCheckbox) {\n            this.$includeSubfoldersContainer.velocity('stop');\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: -25,\n                opacity: 0\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = false;\n        }\n\n        this.base();\n    },\n\n    getViewParams: function() {\n        var data = this.base();\n\n        if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n            data.criteria.includeSubfolders = true;\n        }\n\n        return data;\n    },\n\n    /**\n     * React on upload submit.\n     *\n     * @private\n     */\n    _onUploadStart: function() {\n        this.setIndexBusy();\n\n        // Initial values\n        this._positionProgressBar();\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n\n        this.promptHandler.resetPrompts();\n    },\n\n    /**\n     * Update uploaded byte count.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On Upload Complete.\n     */\n    _onUploadComplete: function(event, data) {\n        var response = data.result;\n        var filename = data.files[0].name;\n\n        var doReload = true;\n\n        if (response.success || response.conflict) {\n            // Add the uploaded file to the selected ones, if appropriate\n            this._uploadedAssetIds.push(response.assetId);\n\n            // If there is a prompt, add it to the queue\n            if (response.conflict) {\n                response.prompt = {\n                    message: Craft.t('app', response.conflict, {file: response.filename}),\n                    choices: this._fileConflictTemplate.choices\n                };\n\n                this.promptHandler.addPrompt(response);\n            }\n\n            Craft.cp.runQueue();\n        } else {\n            if (response.error) {\n                alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n            } else {\n                alert(Craft.t('app', 'Upload failed for {filename}.', {filename}));\n            }\n\n            doReload = false;\n        }\n\n        // For the last file, display prompts, if any. If not - just update the element view.\n        if (this.uploader.isLastUpload()) {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n\n            if (this.promptHandler.getPromptCount()) {\n                this.promptHandler.showBatchPrompts(this._uploadFollowup.bind(this));\n            } else {\n                if (doReload) {\n                    this._updateAfterUpload();\n                }\n            }\n        }\n    },\n\n    /**\n     * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n     *\n     * @private\n     */\n    _updateAfterUpload: function() {\n        if (this.settings.context !== 'index') {\n            this.setSortAttribute('dateModified');\n            this.setSortDirection('desc');\n        }\n        this.updateElements();\n    },\n\n    /**\n     * Follow up to an upload that triggered at least one conflict resolution prompt.\n     *\n     * @param returnData\n     * @private\n     */\n    _uploadFollowup: function(returnData) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n\n        this.promptHandler.resetPrompts();\n\n        var finalCallback = () => {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n            this._updateAfterUpload();\n        };\n\n        this.progressBar.setItemCount(returnData.length);\n\n        var doFollowup = (parameterArray, parameterIndex, callback) => {\n            var postData = {};\n            var action = null;\n\n            var followupCallback = (data, textStatus) => {\n                if (textStatus === 'success' && data.assetId) {\n                    this._uploadedAssetIds.push(data.assetId);\n                } else if (data.error) {\n                    alert(data.error);\n                }\n                parameterIndex++;\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (parameterIndex === parameterArray.length) {\n                    callback();\n                } else {\n                    doFollowup(parameterArray, parameterIndex, callback);\n                }\n            };\n\n            if (parameterArray[parameterIndex].choice === 'replace') {\n                action = 'assets/replace-file';\n                postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                if (parameterArray[parameterIndex].conflictingAssetId) {\n                    postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                } else {\n                    postData.targetFilename = parameterArray[parameterIndex].filename;\n                }\n            } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                action = 'assets/delete-asset';\n                postData.assetId = parameterArray[parameterIndex].assetId;\n            }\n\n            if (!action) {\n                // We don't really need to do another request, so let's pretend that already happened\n                followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n            } else {\n                Craft.postActionRequest(action, postData, followupCallback);\n            }\n        };\n\n        this.progressBar.showProgressBar();\n        doFollowup(returnData, 0, finalCallback);\n    },\n\n    /**\n     * Perform actions after updating elements\n     * @private\n     */\n    onUpdateElements: function() {\n        this._onUpdateElements(false, this.view.getAllElements());\n        this.view.on('appendElements', ev => {\n            this._onUpdateElements(true, ev.newElements);\n        });\n\n        this.base();\n    },\n\n    /**\n     * Do the after-update initializations\n     * @private\n     */\n    _onUpdateElements: function(append, $newElements) {\n        if (this.settings.context === 'index') {\n            if (!append) {\n                this._assetDrag.removeAllItems();\n            }\n\n            this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n        }\n\n        // See if we have freshly uploaded files to add to selection\n        if (this._uploadedAssetIds.length) {\n            if (this.view.settings.selectable) {\n                for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                    this.view.selectElementById(this._uploadedAssetIds[i]);\n                }\n            }\n\n            // Reset the list.\n            this._uploadedAssetIds = [];\n        }\n\n        this.base(append, $newElements);\n\n        this.removeListener(this.$elements, 'keydown');\n        this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n        this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item).find('.element');\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    _onDragStart: function() {\n        this._tempExpandedFolders = [];\n    },\n\n    /**\n     * Get File Drag Helper\n     */\n    _getFileDragHelper: function($element) {\n        var currentView = this.getSelectedSourceState('mode');\n        var $outerContainer;\n        var $innerContainer;\n\n        switch (currentView) {\n            case 'table': {\n                $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                var $tbody = $('<tbody/>').appendTo($table);\n\n                $element.appendTo($tbody);\n\n                // Copy the column widths\n                this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                var $helperCells = $element.children();\n\n                for (var i = 0; i < $helperCells.length; i++) {\n                    // Hard-set the cell widths\n                    var $helperCell = $($helperCells[i]);\n\n                    // Skip the checkbox cell\n                    if ($helperCell.hasClass('checkbox-cell')) {\n                        $helperCell.remove();\n                        $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                        continue;\n                    }\n\n                    var $firstRowCell = $(this._$firstRowCells[i]),\n                        width = $firstRowCell.width();\n\n                    $firstRowCell.width(width);\n                    $helperCell.width(width);\n                }\n\n                return $outerContainer;\n            }\n            case 'thumbs': {\n                $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                $element.appendTo($innerContainer);\n\n                return $outerContainer;\n            }\n        }\n\n        return $();\n    },\n\n    /**\n     * On Drop Target Change\n     */\n    _onDropTargetChange: function($dropTarget) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        if ($dropTarget) {\n            var folderId = $dropTarget.data('folder-id');\n\n            if (folderId) {\n                this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                    this._expandDropTargetFolderTimeout = setTimeout(this._expandFolder.bind(this), 500);\n                }\n            } else {\n                this.dropTargetFolder = null;\n            }\n        }\n\n        if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n            // Temporarily remove the .sel class on the active source\n            this.$source.removeClass('sel');\n        } else {\n            this.$source.addClass('sel');\n        }\n    },\n\n    /**\n     * Collapse Extra Expanded Folders\n     */\n    _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        // If a source ID is passed in, exclude its parents\n        var $excludedSources;\n\n        if (dropTargetFolderId) {\n            $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n        }\n\n        for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n            var $source = this._tempExpandedFolders[i];\n\n            // Check the parent list, if a source id is passed in\n            if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                this._collapseFolder($source);\n                this._tempExpandedFolders.splice(i, 1);\n            }\n        }\n    },\n\n    _getSourceByKey: function(key) {\n        return this.$sources.filter('[data-key$=\"' + key + '\"]');\n    },\n\n    _hasSubfolders: function($source) {\n        return $source.siblings('ul').find('li').length;\n    },\n\n    _isExpanded: function($source) {\n        return $source.parent('li').hasClass('expanded');\n    },\n\n    _expandFolder: function() {\n        // Collapse any temp-expanded drop targets that aren't parents of this one\n        this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n        this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n        // Keep a record of that\n        this._tempExpandedFolders.push(this.dropTargetFolder);\n    },\n\n    _collapseFolder: function($source) {\n        if ($source.parent().hasClass('expanded')) {\n            $source.siblings('.toggle').trigger('click');\n        }\n    },\n\n    _createFolderContextMenu: function($source) {\n        // Make sure it's a volume folder\n        if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n            return;\n        }\n\n        var menuOptions = [\n            {\n                label: Craft.t('app', 'New subfolder'),\n                onClick: () => {\n                    this._createSubfolder($source);\n                },\n            },\n        ];\n\n        // For all folders that are not top folders\n        if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n            menuOptions.push({\n                label: Craft.t('app', 'Rename folder'),\n                onClick: () => {\n                    this._renameFolder($source);\n                },\n            });\n            menuOptions.push({\n                label: Craft.t('app', 'Delete folder'),\n                onClick: () => {\n                    this._deleteFolder($source);\n                },\n            });\n        }\n\n        new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n    },\n\n    _createSubfolder: function($parentFolder) {\n        var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n        if (subfolderName) {\n            var params = {\n                parentId: $parentFolder.data('folder-id'),\n                folderName: subfolderName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/create-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    this._prepareParentForChildren($parentFolder);\n\n                    var $subfolder = $(\n                        '<li>' +\n                        '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                        ' data-folder-id=\"' + data.folderId + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                        '>' +\n                        data.folderName +\n                        '</a>' +\n                        '</li>'\n                    );\n\n                    var $a = $subfolder.children('a:first');\n                    this._appendSubfolder($parentFolder, $subfolder);\n                    this.initSource($a);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    _deleteFolder: function($targetFolder) {\n        if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n            var params = {\n                folderId: $targetFolder.data('folder-id')\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/delete-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    var $parentFolder = this._getParentSource($targetFolder);\n\n                    // Remove folder and any trace from its parent, if needed\n                    this.deinitSource($targetFolder);\n\n                    $targetFolder.parent().remove();\n                    this._cleanUpTree($parentFolder);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    /**\n     * Rename\n     */\n    _renameFolder: function($targetFolder) {\n        var oldName = $.trim($targetFolder.text()),\n            newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n        if (newName && newName !== oldName) {\n            var params = {\n                folderId: $targetFolder.data('folder-id'),\n                newName: newName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/rename-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    $targetFolder.text(data.newName);\n\n                    // If the current folder was renamed.\n                    if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                        this.updateElements();\n                    }\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, 'json');\n        }\n    },\n\n    /**\n     * Prepare a source folder for children folder.\n     *\n     * @param $parentFolder\n     * @private\n     */\n    _prepareParentForChildren: function($parentFolder) {\n        if (!this._hasSubfolders($parentFolder)) {\n            $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n            this.initSourceToggle($parentFolder);\n        }\n    },\n\n    /**\n     * Appends a subfolder to the parent folder at the correct spot.\n     *\n     * @param $parentFolder\n     * @param $subfolder\n     * @private\n     */\n    _appendSubfolder: function($parentFolder, $subfolder) {\n        var $subfolderList = $parentFolder.siblings('ul'),\n            $existingChildren = $subfolderList.children('li'),\n            subfolderLabel = $.trim($subfolder.children('a:first').text()),\n            folderInserted = false;\n\n        for (var i = 0; i < $existingChildren.length; i++) {\n            var $existingChild = $($existingChildren[i]);\n\n            if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                $existingChild.before($subfolder);\n                folderInserted = true;\n                break;\n            }\n        }\n\n        if (!folderInserted) {\n            $parentFolder.siblings('ul').append($subfolder);\n        }\n    },\n\n    _cleanUpTree: function($parentFolder) {\n        if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n            this.deinitSourceToggle($parentFolder);\n            $parentFolder.siblings('ul').remove();\n            $parentFolder.siblings('.toggle').remove();\n            $parentFolder.parent().removeClass('expanded');\n        }\n    },\n\n    _positionProgressBar: function() {\n        if (!this.progressBar) {\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n        }\n\n        var $container = $(),\n            scrollTop = 0,\n            offset = 0;\n\n        if (this.settings.context === 'index') {\n            $container = this.progressBar.$progressBar.closest('#content');\n            scrollTop = Garnish.$win.scrollTop();\n        } else {\n            $container = this.progressBar.$progressBar.closest('.main');\n            scrollTop = this.$main.scrollTop();\n        }\n\n        var containerTop = $container.offset().top;\n        var diff = scrollTop - containerTop;\n        var windowHeight = Garnish.$win.height();\n\n        if ($container.height() > windowHeight) {\n            offset = (windowHeight / 2) - 6 + diff;\n        } else {\n            offset = ($container.height() / 2) - 6;\n        }\n\n        if (this.settings.context !== 'index') {\n            offset = scrollTop + (($container.height() / 2) - 6);\n        }\n\n        this.progressBar.$progressBar.css({\n            top: offset\n        });\n    },\n\n    _performBatchRequests: function(parameterArray, finalCallback) {\n        var responseArray = [];\n\n        var doRequest = parameters => {\n            Craft.postActionRequest(parameters.action, parameters.params, (data, textStatus) => {\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (textStatus === 'success') {\n                    responseArray.push(data);\n\n                    // If assets were just merged we should get the reference tags updated right away\n                    Craft.cp.runQueue();\n                }\n\n                if (responseArray.length >= parameterArray.length) {\n                    finalCallback(responseArray);\n                }\n            });\n        };\n\n        for (var i = 0; i < parameterArray.length; i++) {\n            doRequest(parameterArray[i]);\n        }\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend({\n    requestId: 0,\n    hud: null,\n    $uploadBtn: null,\n    uploader: null,\n    progressBar: null,\n\n    init: function() {\n        this.base.apply(this, arguments);\n\n        if (this.settings.canUpload) {\n            this._attachUploader();\n        }\n\n        this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n        this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.elementSelect.$focusedItem;\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item);\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n    },\n\n    /**\n     * Create the element editor\n     */\n    createElementEditor: function($element) {\n        return this.base($element, {\n            params: {\n                defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n            },\n            input: this\n        });\n    },\n\n    /**\n     * Attach the uploader with drag event handler\n     */\n    _attachUploader: function() {\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            dropZone: this.$container,\n            formData: {\n                fieldId: this.settings.fieldId,\n            }\n        };\n\n        if (this.settings.sourceElementId) {\n            options.formData.elementId = this.settings.sourceElementId;\n        }\n\n        if (this.settings.criteria.siteId) {\n            options.formData.siteId = this.settings.criteria.siteId;\n        }\n\n        if (this.$addElementBtn) {\n            this.$uploadBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn dashed',\n                'data-icon': 'upload',\n                text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n            }).insertAfter(this.$addElementBtn);\n            options.fileInput = $('<input/>', {\n                type: 'file',\n                class: 'hidden',\n                multiple: this.settings.limit != 1,\n            }).insertAfter(this.$uploadBtn);\n\n            // Trigger a window resize in case the field is inside an element editor HUD\n            Garnish.$win.trigger('resize');\n        }\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        if (typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        options.canAddMoreFiles = this.canAddMoreFiles.bind(this);\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        if (this.$uploadBtn) {\n            this.$uploadBtn.on('click', ev => {\n                // We can't store a reference to the file input, because it gets replaced with a new input\n                // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                this.$uploadBtn.next('input[type=file]').trigger('click');\n            });\n        }\n    },\n\n    refreshThumbnail: function(elementId) {\n        var parameters = {\n            elementId: elementId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, data => {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                this.thumbLoader.load($existing);\n            }\n        });\n    },\n\n    /**\n     * Add the freshly uploaded file to the input field.\n     */\n    selectUploadedFile: function(element) {\n        // Check if we're able to add new elements\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        var $newElement = element.$element;\n\n        // Make a couple tweaks\n        $newElement.addClass('removable');\n        $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        $newElement.appendTo(this.$elementsContainer);\n\n        var margin = -($newElement.outerWidth() + 10);\n\n        this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addElementBtn.velocity(animateCss, 'fast');\n\n        this.addElements($newElement);\n\n        delete this.modal;\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function() {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var parameters = {\n                elementId: data.result.assetId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, data => {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var html = $(data.html);\n                    Craft.appendHeadHtml(data.headHtml);\n                    this.selectUploadedFile(Craft.getElementInfo(html));\n                }\n\n                // Last file\n                if (this.uploader.isLastUpload()) {\n                    this.progressBar.hideProgressBar();\n                    this.$container.removeClass('uploading');\n\n                    if (window.draftEditor) {\n                        window.draftEditor.checkForm();\n                    }\n                }\n            });\n\n            Craft.cp.runQueue();\n        }\n    },\n\n    /**\n     * We have to take into account files about to be added as well\n     */\n    canAddMoreFiles: function(slotsTaken) {\n        return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n    },\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend({\n    $selectTransformBtn: null,\n    _selectedTransform: null,\n\n    init: function(elementType, settings) {\n        settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n        this.base(elementType, settings);\n\n        if (settings.transforms.length) {\n            this.createSelectTransformButton(settings.transforms);\n        }\n    },\n\n    createSelectTransformButton: function(transforms) {\n        if (!transforms || !transforms.length) {\n            return;\n        }\n\n        var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n        this.$selectBtn.appendTo($btnGroup);\n\n        this.$selectTransformBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn disabled',\n            text: Craft.t('app', 'Select transform'),\n        }).appendTo($btnGroup);\n\n        var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n            $menuList = $('<ul></ul>').appendTo($menu);\n\n        for (var i = 0; i < transforms.length; i++) {\n            $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n        }\n\n        var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n            onOptionSelect: this.onSelectTransform.bind(this),\n        });\n        MenuButton.disable();\n\n        this.$selectTransformBtn.data('menuButton', MenuButton);\n    },\n\n    onSelectionChange: function(ev) {\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            allowTransforms = false;\n\n        if ($selectedElements.length && this.settings.transforms.length) {\n            allowTransforms = true;\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                    break;\n                }\n            }\n        }\n\n        var MenuBtn = null;\n\n        if (this.$selectTransformBtn) {\n            MenuBtn = this.$selectTransformBtn.data('menuButton');\n        }\n\n        if (allowTransforms) {\n            if (MenuBtn) {\n                MenuBtn.enable();\n            }\n\n            this.$selectTransformBtn.removeClass('disabled');\n        } else if (this.$selectTransformBtn) {\n            if (MenuBtn) {\n                MenuBtn.disable();\n            }\n\n            this.$selectTransformBtn.addClass('disabled');\n        }\n\n        this.base();\n    },\n\n    onSelectTransform: function(option) {\n        var transform = $(option).data('transform');\n        this.selectImagesWithTransform(transform);\n    },\n\n    selectImagesWithTransform: function(transform) {\n        // First we must get any missing transform URLs\n        if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n            Craft.AssetSelectorModal.transformUrls[transform] = {};\n        }\n\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            imageIdsWithMissingUrls = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $item = $($selectedElements[i]),\n                elementId = Craft.getElementInfo($item).id;\n\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                imageIdsWithMissingUrls.push(elementId);\n            }\n        }\n\n        if (imageIdsWithMissingUrls.length) {\n            this.showFooterSpinner();\n\n            this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, () => {\n                this.hideFooterSpinner();\n                this.selectImagesWithTransform(transform);\n            });\n        } else {\n            this._selectedTransform = transform;\n            this.selectElements();\n            this._selectedTransform = null;\n        }\n    },\n\n    fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n        var elementId = imageIdsWithMissingUrls.pop();\n\n        var data = {\n            assetId: elementId,\n            handle: transform\n        };\n\n        Craft.postActionRequest('assets/generate-transform', data, (response, textStatus) => {\n            Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n            if (textStatus === 'success') {\n                if (response.url) {\n                    Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                }\n            }\n\n            // More to load?\n            if (imageIdsWithMissingUrls.length) {\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n            } else {\n                callback();\n            }\n        });\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = this.base($selectedElements);\n\n        if (this._selectedTransform) {\n            for (var i = 0; i < info.length; i++) {\n                var elementId = info[i].id;\n\n                if (\n                    typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                    Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                ) {\n                    info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                }\n            }\n        }\n\n        return info;\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo, this._selectedTransform);\n    }\n}, {\n    defaults: {\n        canSelectImageTransforms: false,\n        transforms: []\n    },\n\n    transformUrls: {}\n});\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend({\n    remainingSessionTime: null,\n    checkRemainingSessionTimer: null,\n    showLoginModalTimer: null,\n    decrementLogoutWarningInterval: null,\n\n    showingLogoutWarningModal: false,\n    showingLoginModal: false,\n\n    logoutWarningModal: null,\n    loginModal: null,\n\n    $logoutWarningPara: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $loginBtn: null,\n    $loginErrorPara: null,\n\n    submitLoginIfLoggedOut: false,\n\n    /**\n     * Init\n     */\n    init: function() {\n        this.updateRemainingSessionTime(Craft.remainingSessionTime);\n    },\n\n    /**\n     * Sets a timer for the next time to check the auth timeout.\n     */\n    setCheckRemainingSessionTimer: function(seconds) {\n        if (this.checkRemainingSessionTimer) {\n            clearTimeout(this.checkRemainingSessionTimer);\n        }\n\n        this.checkRemainingSessionTimer = setTimeout(this.checkRemainingSessionTime.bind(this), seconds * 1000);\n    },\n\n    /**\n     * Pings the server to see how many seconds are left on the current user session, and handles the response.\n     */\n    checkRemainingSessionTime: function(extendSession) {\n        $.ajax({\n            url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n            type: 'GET',\n            dataType: 'json',\n            complete: (jqXHR, textStatus) => {\n                if (textStatus === 'success') {\n                    if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                        Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                    }\n\n                    this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                    this.submitLoginIfLoggedOut = false;\n                } else {\n                    this.updateRemainingSessionTime(-1);\n                }\n            },\n        });\n    },\n\n    /**\n     * Updates our record of the auth timeout, and handles it.\n     */\n    updateRemainingSessionTime: function(remainingSessionTime) {\n        this.remainingSessionTime = parseInt(remainingSessionTime);\n\n        // Are we within the warning window?\n        if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n            // Is there still time to renew the session?\n            if (this.remainingSessionTime) {\n                if (!this.showingLogoutWarningModal) {\n                    // Show the warning modal\n                    this.showLogoutWarningModal();\n                }\n\n                // Will the session expire before the next checkup?\n                if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                    if (this.showLoginModalTimer) {\n                        clearTimeout(this.showLoginModalTimer);\n                    }\n\n                    this.showLoginModalTimer = setTimeout(this.showLoginModal.bind(this), this.remainingSessionTime * 1000);\n                }\n            } else {\n                if (this.showingLoginModal) {\n                    if (this.submitLoginIfLoggedOut) {\n                        this.submitLogin();\n                    }\n                } else {\n                    // Show the login modal\n                    this.showLoginModal();\n                }\n            }\n\n            this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n        } else {\n            // Everything's good!\n            this.hideLogoutWarningModal();\n            this.hideLoginModal();\n\n            // Will be be within the minSafeSessionTime before the next update?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n            } else {\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the logout warning modal.\n     */\n    showLogoutWarningModal: function() {\n        var quickShow;\n\n        if (this.showingLoginModal) {\n            this.hideLoginModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLogoutWarningModal = true;\n\n        if (!this.logoutWarningModal) {\n            let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n            let $body = $('<div class=\"body\"/>').appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $logoutBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Log out now'),\n            }).appendTo($buttons);\n            let $renewSessionBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Keep me logged in'),\n            }).appendTo($buttons);\n\n            this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n            this.logoutWarningModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                onFadeIn: function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the renew button\n                        setTimeout(function() {\n                            $renewSessionBtn.trigger('focus');\n                        }, 100);\n                    }\n                }\n            });\n\n            this.addListener($logoutBtn, 'activate', 'logout');\n            this.addListener($form, 'submit', 'renewSession');\n        }\n\n        if (quickShow) {\n            this.logoutWarningModal.quickShow();\n        } else {\n            this.logoutWarningModal.show();\n        }\n\n        this.updateLogoutWarningMessage();\n\n        this.decrementLogoutWarningInterval = setInterval(this.decrementLogoutWarning.bind(this), 1000);\n    },\n\n    /**\n     * Updates the logout warning message indicating that the session is about to expire.\n     */\n    updateLogoutWarningMessage: function() {\n        this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n            time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n        }));\n\n        this.logoutWarningModal.updateSizeAndPosition();\n    },\n\n    decrementLogoutWarning: function() {\n        if (this.remainingSessionTime > 0) {\n            this.remainingSessionTime--;\n            this.updateLogoutWarningMessage();\n        }\n\n        if (this.remainingSessionTime === 0) {\n            clearInterval(this.decrementLogoutWarningInterval);\n        }\n    },\n\n    /**\n     * Hides the logout warning modal.\n     */\n    hideLogoutWarningModal: function(quick) {\n        this.showingLogoutWarningModal = false;\n\n        if (this.logoutWarningModal) {\n            if (quick) {\n                this.logoutWarningModal.quickHide();\n            } else {\n                this.logoutWarningModal.hide();\n            }\n\n            if (this.decrementLogoutWarningInterval) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the login modal.\n     */\n    showLoginModal: function() {\n        var quickShow;\n\n        if (this.showingLogoutWarningModal) {\n            this.hideLogoutWarningModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLoginModal = true;\n\n        if (!this.loginModal) {\n            var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$loginBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Login'),\n            }).appendTo($buttonContainer);\n            this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.loginModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark loginmodalshade',\n                onFadeIn: () => {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the password input\n                        setTimeout(() => {\n                            this.$passwordInput.trigger('focus');\n                        }, 100);\n                    }\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($form, 'submit', 'login');\n        }\n\n        if (quickShow) {\n            this.loginModal.quickShow();\n        } else {\n            this.loginModal.show();\n        }\n    },\n\n    /**\n     * Hides the login modal.\n     */\n    hideLoginModal: function(quick) {\n        this.showingLoginModal = false;\n\n        if (this.loginModal) {\n            if (quick) {\n                this.loginModal.quickHide();\n            } else {\n                this.loginModal.hide();\n            }\n        }\n    },\n\n    logout: function() {\n        $.get({\n            url: Craft.getActionUrl('users/logout'),\n            dataType: 'json',\n            success: () => {\n                Craft.redirectTo('');\n            },\n        });\n    },\n\n    renewSession: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        this.hideLogoutWarningModal();\n        this.checkRemainingSessionTime(true);\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$loginBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$loginBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    login: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.validatePassword()) {\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            if (typeof Craft.csrfTokenValue !== 'undefined') {\n                // Check the auth status one last time before sending this off,\n                // in case the user has already logged back in from another window/tab\n                this.submitLoginIfLoggedOut = true;\n                this.checkRemainingSessionTime();\n            } else {\n                this.submitLogin();\n            }\n        }\n    },\n\n    submitLogin: function() {\n        var data = {\n            loginName: Craft.username,\n            password: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/login', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.hideLoginModal();\n                    this.checkRemainingSessionTime();\n                } else {\n                    this.showLoginError(response.error);\n                    Garnish.shake(this.loginModal.$container);\n\n                    if (!Garnish.isMobileBrowser(true)) {\n                        this.$passwordInput.trigger('focus');\n                    }\n                }\n            } else {\n                this.showLoginError();\n            }\n        });\n    },\n\n    showLoginError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$loginErrorPara.text(error);\n        this.loginModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showLoginError('');\n    }\n}, {\n    checkInterval: 60,\n    minSafeSessionTime: 120\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend({\n    authManager: null,\n\n    $nav: null,\n    $mainContainer: null,\n    $alerts: null,\n    $crumbs: null,\n    $notificationContainer: null,\n    $main: null,\n    $primaryForm: null,\n    $headerContainer: null,\n    $header: null,\n    $mainContent: null,\n    $details: null,\n    $sidebarContainer: null,\n    $sidebar: null,\n    $contentContainer: null,\n    $edition: null,\n\n    $confirmUnloadForms: null,\n    $deltaForms: null,\n    $collapsibleTables: null,\n\n    fixedHeader: false,\n\n    tabManager: null,\n\n    enableQueue: true,\n    totalJobs: 0,\n    jobInfo: null,\n    displayedJobInfo: null,\n    displayedJobInfoUnchanged: 1,\n    trackJobProgressTimeout: null,\n    jobProgressIcon: null,\n\n    checkingForUpdates: false,\n    forcingRefreshOnUpdatesCheck: false,\n    includingDetailsOnUpdatesCheck: false,\n    checkForUpdatesCallbacks: null,\n\n    init: function() {\n        // Is this session going to expire?\n        if (Craft.remainingSessionTime !== 0) {\n            this.authManager = new Craft.AuthManager();\n        }\n\n        // Find all the key elements\n        this.$nav = $('#nav');\n        this.$mainContainer = $('#main-container');\n        this.$alerts = $('#alerts');\n        this.$crumbs = $('#crumbs');\n        this.$notificationContainer = $('#notifications');\n        this.$main = $('#main');\n        this.$primaryForm = $('#main-form');\n        this.$headerContainer = $('#header-container');\n        this.$header = $('#header');\n        this.$mainContent = $('#main-content');\n        this.$details = $('#details');\n        this.$sidebarContainer = $('#sidebar-container');\n        this.$sidebar = $('#sidebar');\n        this.$contentContainer = $('#content-container');\n        this.$collapsibleTables = $('table.collapsible');\n\n        this.updateSidebarMenuLabel();\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        if (this.$header.length) {\n            this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n            this.updateFixedHeader();\n        }\n\n        Garnish.$doc.ready(() => {\n            // Update responsive tables on window resize\n            this.addListener(Garnish.$win, 'resize', ev => {\n                // Ignore element resizes\n                if (ev.target === window) {\n                    this.handleWindowResize();\n                }\n            });\n            this.handleWindowResize();\n\n            // Fade the notification out two seconds after page load\n            var $errorNotifications = this.$notificationContainer.children('.error'),\n                $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n            $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n            $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n            // Wait a frame before initializing any confirm-unload forms,\n            // so other JS that runs on ready() has a chance to initialize\n            Garnish.requestAnimationFrame(this.initSpecialForms.bind(this));\n        });\n\n        // Alerts\n        if (this.$alerts.length) {\n            this.initAlerts();\n        }\n\n        // Toggles\n        this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n        this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n        // Does this page have a primary form?\n        if (!this.$primaryForm.length) {\n            this.$primaryForm = $('form[data-saveshortcut]:first');\n        }\n\n        // Does the primary form support the save shortcut?\n        if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n            let shortcuts = [];\n            let actions = this.$primaryForm.data('actions');\n            if (typeof actions === 'undefined') {\n                shortcuts.push([\n                    {\n                        keyCode: Garnish.S_KEY,\n                        ctrl: true,\n                    }, {\n                        redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                        retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                    }\n                ]);\n            } else {\n                for (let i = 0; i < actions.length; i++) {\n                    let action = actions[i];\n                    if (!action.shortcut) {\n                        continue;\n                    }\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                            shift: !!action.shift,\n                        }, {\n                            action: action.action,\n                            redirect: action.redirect,\n                            confirm: action.confirm,\n                            params: action.params,\n                            data: action.data,\n                            retainScroll: action.retainScroll,\n                        }\n                    ]);\n                }\n            }\n            for (let i = 0; i < shortcuts.length; i++) {\n                Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                    this.submitPrimaryForm(shortcuts[i][1]);\n                });\n            }\n        }\n\n        this.initTabs();\n\n        // Should we match the previous scroll position?\n        let scrollY = Craft.getLocalStorage('scrollY');\n        if (typeof scrollY !== 'undefined') {\n            Craft.removeLocalStorage('scrollY');\n            Garnish.$doc.ready(() => {\n                Garnish.requestAnimationFrame(() => {\n                    window.scrollTo(0, scrollY);\n                });\n            });\n        }\n\n        if ($.isTouchCapable()) {\n            this.$mainContainer.on('focus', 'input, textarea, .focusable-input', this._handleInputFocus.bind(this));\n            this.$mainContainer.on('blur', 'input, textarea, .focusable-input', this._handleInputBlur.bind(this));\n        }\n\n        // Announcements HUD\n        if (Craft.announcements.length) {\n            let $btn = $('#announcements-btn').removeClass('hidden');\n            const hasUnreads = Craft.announcements.some(a => a.unread);\n            if (hasUnreads) {\n                $btn.addClass('unread');\n            }\n            let hud;\n            this.addListener($btn, 'click', () => {\n                if (!hud) {\n                    let contents = '';\n                    Craft.group(Craft.announcements, 'timestamp').forEach(([announcements, timestamp]) => {\n                        announcements.forEach((a, i) => {\n                            contents += `<div class=\"announcement ${a.unread ? 'unread' : ''}\">` +\n                                (i === 0 ? `<div class=\"timestamp\">${a.timestamp}</div>` : '') +\n                                `<h2>${a.heading}</h2>` +\n                                `<p>${a.body}</p>` +\n                                '</div>';\n                        });\n                    });\n                    hud = new Garnish.HUD($btn, `<div id=\"announcements\">${contents}</div>`, {\n                        onShow: () => {\n                            $btn.addClass('active');\n                        },\n                        onHide: () => {\n                            $btn.removeClass('active');\n                        },\n                    });\n\n                    // Open outbound links in new windows\n                    $('a', hud.$main).each(function() {\n                        if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                            $(this).attr('rel', 'noopener').attr('target', '_blank')\n                        }\n                    });\n\n                    if (hasUnreads) {\n                        $btn.removeClass('unread');\n                        Craft.sendActionRequest('POST', 'users/mark-announcements-as-read', {\n                            data: {\n                                ids: Craft.announcements.map(a => a.id),\n                            },\n                        });\n                    }\n                } else {\n                    hud.show();\n                }\n            });\n        }\n    },\n\n    initSpecialForms: function() {\n        // Look for forms that we should watch for changes on\n        this.$confirmUnloadForms = $('form[data-confirm-unload]');\n        this.$deltaForms = $('form[data-delta]');\n\n        if (!this.$confirmUnloadForms.length) {\n            return;\n        }\n\n        var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n        var $form, serialized;\n\n        for (var i = 0; i < $forms.length; i++) {\n            $form = $forms.eq(i);\n            if (!$form.data('initialSerializedValue')) {\n                if (typeof $form.data('serializer') === 'function') {\n                    serialized = $form.data('serializer')();\n                } else {\n                    serialized = $form.serialize();\n                }\n                $form.data('initialSerializedValue', serialized);\n            }\n            this.addListener($form, 'submit', function(ev) {\n                if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                    this.removeListener(Garnish.$win, 'beforeunload');\n                }\n                if (Garnish.hasAttr($form, 'data-delta')) {\n                    ev.preventDefault();\n                    var serialized;\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                    Craft.createForm(data)\n                        .appendTo(Garnish.$bod)\n                        .submit();\n                }\n            });\n        }\n\n        this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n            var confirmUnload = false;\n            var $form, serialized;\n            if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                confirmUnload = true;\n            } else {\n                for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                    $form = this.$confirmUnloadForms.eq(i);\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    if ($form.data('initialSerializedValue') !== serialized) {\n                        confirmUnload = true;\n                        break;\n                    }\n                }\n            }\n\n            if (confirmUnload) {\n                var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                if (ev) {\n                    ev.originalEvent.returnValue = message;\n                } else {\n                    window.event.returnValue = message;\n                }\n\n                return message;\n            }\n        });\n    },\n\n    _handleInputFocus: function() {\n        this.updateFixedHeader();\n    },\n\n    _handleInputBlur: function() {\n        this.updateFixedHeader();\n    },\n\n    /**\n     * Submits a form.\n     * @param {Object} [options]\n     * @param {string} [options.action] The `action` param value override\n     * @param {string} [options.redirect] The `redirect` param value override\n     * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n     * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n     * @param {Object} [options.data] Additional data to be passed to the submit event\n     * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n     */\n    submitPrimaryForm: function(options) {\n        // Give other stuff on the page a chance to prepare\n        this.trigger('beforeSaveShortcut');\n\n        if (typeof options !== 'object' || !$.isPlainObject(options)) {\n            options = {};\n        }\n\n        if (!options.redirect) {\n            options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n        }\n\n        if (!options.data) {\n            options.data = {};\n        }\n        options.data.saveShortcut = true;\n\n        Craft.submitForm(this.$primaryForm, options);\n    },\n\n    updateSidebarMenuLabel: function() {\n        var $item = this.$sidebar.find('a.sel:first');\n        var $label = $item.children('.label');\n        $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n        Garnish.$bod.removeClass('showing-sidebar');\n    },\n\n    toggleNav: function() {\n        Garnish.$bod.toggleClass('showing-nav');\n    },\n\n    toggleSidebar: function() {\n        Garnish.$bod.toggleClass('showing-sidebar');\n    },\n\n    initTabs: function() {\n        if (this.tabManager) {\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        const $tabs = $('#tabs');\n        if (!$tabs.length) {\n            return;\n        }\n\n        this.tabManager = new Craft.Tabs($tabs);\n\n        this.tabManager.on('selectTab', ev => {\n            const href = ev.$tab.attr('href');\n\n            // Show its content area\n            if (href.charAt(0) === '#') {\n                $(href).removeClass('hidden');\n            }\n\n            // Trigger a resize event to update any UI components that are listening for it\n            Garnish.$win.trigger('resize');\n\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n\n            // If there is a revision menu, set its links to this tab ID\n            if (href && href.charAt(0) === '#') {\n                const menuBtn = $('#context-btn').menubtn().data('menubtn');\n                if (menuBtn) {\n                    for (let i = 0; i < menuBtn.menu.$options.length; i++) {\n                        let a = menuBtn.menu.$options[i];\n                        if (a.href) {\n                            a.href = a.href.match(/^[^#]*/)[0] + href;\n                        }\n                    }\n                }\n            }\n\n            if (typeof history !== 'undefined') {\n                // Delay changing the hash so it doesn't cause the browser to jump on page load\n                Garnish.requestAnimationFrame(() => {\n                    history.replaceState(undefined, undefined, href);\n                });\n            }\n        });\n\n        this.tabManager.on('deselectTab', ev => {\n            if (ev.$tab.attr('href').charAt(0) === '#') {\n                // Hide its content area\n                $(ev.$tab.attr('href')).addClass('hidden');\n            }\n        });\n\n        if (window.LOCATION_HASH) {\n            const $tab = this.tabManager.$tabs.filter(`[href=\"#${window.LOCATION_HASH}\"]`);\n            if ($tab.length) {\n                this.tabManager.selectTab($tab);\n            }\n        }\n    },\n\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsContainer() {\n        return this.tabManager ? this.tabManager.$container : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsList() {\n        return this.tabManager ? this.tabManager.$ul : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabs() {\n        return this.tabManager ? this.tabManager.$ul.find('> li') : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $selectedTab() {\n        return this.tabManager ? this.tabManager.$selectedTab : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get selectedTabIndex() {\n        return this.tabManager ? this.tabManager.$tabs.index(this.tabManager.$selectedTab) : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $focusableTab() {\n        return this.tabManager ? this.tabManager.$focusableTab : undefined;\n    },\n    /**\n     * @param {object} tab\n     * @deprecated in 3.7.0\n     */\n    selectTab: function(tab) {\n        if (this.tabManager) {\n            this.tabManager.selectTab(tab);\n        }\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    deselectTab: function() {\n        if (this.tabManager) {\n            this.tabManager.deselectTab();\n        }\n    },\n\n    handleWindowResize: function() {\n        this.updateResponsiveTables();\n    },\n\n    updateResponsiveTables: function() {\n        for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n            this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n            this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n            this.updateResponsiveTables._check = false;\n\n            if (this.updateResponsiveTables._containerWidth > 0) {\n                // Is this the first time we've checked this table?\n                if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                    this.updateResponsiveTables._check = true;\n                } else {\n                    this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                    // Getting wider?\n                    if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                        if (this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._$table.removeClass('collapsed');\n                            this.updateResponsiveTables._check = true;\n                        }\n                    } else if (!this.updateResponsiveTables._isCollapsed) {\n                        this.updateResponsiveTables._check = true;\n                    }\n                }\n\n                // Are we checking the table width?\n                if (this.updateResponsiveTables._check) {\n                    if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                        this.updateResponsiveTables._$table.addClass('collapsed');\n                    }\n                }\n\n                // Remember the container width for next time\n                this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n            }\n        }\n    },\n\n    updateFixedHeader: function() {\n        // Have we scrolled passed the top of #main?\n        if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n            if (!this.fixedHeader) {\n                var headerHeight = this.$headerContainer.height();\n\n                // Hard-set the minimum content container height\n                this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                // Hard-set the header container height\n                this.$headerContainer.height(headerHeight);\n                Garnish.$bod.addClass('fixed-header');\n\n                // Fix the sidebar and details pane positions if they are taller than #content-container\n                var contentHeight = this.$contentContainer.outerHeight();\n                var $detailsHeight = this.$details.outerHeight();\n                var css = {\n                    top: headerHeight + 'px',\n                    'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                };\n                this.$sidebar.addClass('fixed').css(css);\n                this.$details.addClass('fixed').css(css);\n                this.fixedHeader = true;\n            }\n        } else if (this.fixedHeader) {\n            this.$headerContainer.height('auto');\n            Garnish.$bod.removeClass('fixed-header');\n            this.$contentContainer.css('min-height', '');\n            this.$sidebar.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.$details.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.fixedHeader = false;\n        }\n    },\n\n    /**\n     * Dispays a notification.\n     *\n     * @param {string} type\n     * @param {string} message\n     */\n    displayNotification: function(type, message) {\n        var notificationDuration = Craft.CP.notificationDuration;\n\n        if (['cp-error', 'error'].includes(type)) {\n            notificationDuration *= 2;\n            icon = 'alert';\n            label = Craft.t('app', 'Error');\n        } else {\n            icon = 'info';\n            label = Craft.t('app', 'Notice');\n        }\n\n        var $notification = $(`\n            <div class=\"notification ${ type.replace('cp-', '') }\">\n                <span data-icon=\"${ icon }\" aria-label=\"${ label }\"></span>\n                ${ message }\n            </div>\n            `)\n            .appendTo(this.$notificationContainer);\n\n        var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n        $notification\n            .hide()\n            .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n            .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n            .delay(notificationDuration)\n            .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                complete: function() {\n                    $notification.remove();\n                }\n            });\n\n        this.trigger('displayNotification', {\n            notificationType: type,\n            message: message\n        });\n    },\n\n    /**\n     * Displays a notice.\n     *\n     * @param {string} message\n     */\n    displayNotice: function(message) {\n        this.displayNotification('notice', message);\n    },\n\n    /**\n     * Displays an error.\n     *\n     * @param {string} message\n     */\n    displayError: function(message) {\n        if (!message) {\n            message = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.displayNotification('error', message);\n    },\n\n    fetchAlerts: function() {\n        var data = {\n            path: Craft.path\n        };\n\n        Craft.queueActionRequest('app/get-cp-alerts', data, this.displayAlerts.bind(this));\n    },\n\n    displayAlerts: function(alerts) {\n        this.$alerts.remove();\n\n        if (Garnish.isArray(alerts) && alerts.length) {\n            this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n            for (var i = 0; i < alerts.length; i++) {\n                $(`<li><span data-icon=\"alert\" aria-label=\"${ Craft.t('app', 'Error') }\"></span> ${ alerts[i] }</li>`).appendTo(this.$alerts);\n            }\n\n            var height = this.$alerts.outerHeight();\n            this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n            this.initAlerts();\n        }\n    },\n\n    initAlerts: function() {\n        // Are there any shunnable alerts?\n        var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n        for (var i = 0; i < $shunnableAlerts.length; i++) {\n            this.addListener($shunnableAlerts[i], 'click', ev => {\n                ev.preventDefault();\n\n                var $link = $(ev.currentTarget);\n\n                var data = {\n                    message: $link.prop('className').substr(5)\n                };\n\n                Craft.queueActionRequest('app/shun-cp-alert', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            $link.parent().remove();\n                        } else {\n                            this.displayError(response.error);\n                        }\n                    }\n                });\n            });\n        }\n    },\n\n    checkForUpdates: function(forceRefresh, includeDetails, callback) {\n        // Make 'includeDetails' optional\n        if (typeof includeDetails === 'function') {\n            callback = includeDetails;\n            includeDetails = false;\n        }\n\n        // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n        // then just set a new callback that re-checks for updates when the current one is done.\n        if (this.checkingForUpdates && (\n            (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n            (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n        )) {\n            var realCallback = callback;\n            callback = () => {\n                this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n            };\n        }\n\n        // Callback function?\n        if (typeof callback === 'function') {\n            if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                this.checkForUpdatesCallbacks = [];\n            }\n\n            this.checkForUpdatesCallbacks.push(callback);\n        }\n\n        if (!this.checkingForUpdates) {\n            this.checkingForUpdates = true;\n            this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n            this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n            this._checkForUpdates(forceRefresh, includeDetails)\n                .then(info => {\n                    this.updateUtilitiesBadge();\n                    this.checkingForUpdates = false;\n\n                    if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                        var callbacks = this.checkForUpdatesCallbacks;\n                        this.checkForUpdatesCallbacks = null;\n\n                        for (var i = 0; i < callbacks.length; i++) {\n                            callbacks[i](info);\n                        }\n                    }\n\n                    this.trigger('checkForUpdates', {\n                        updateInfo: info\n                    });\n                });\n        }\n    },\n\n    _checkForUpdates: function(forceRefresh, includeDetails) {\n        return new Promise((resolve, reject) => {\n            if (!forceRefresh) {\n                this._checkForCachedUpdates(includeDetails)\n                    .then(info => {\n                        if (info.cached !== false) {\n                            resolve(info);\n                        }\n\n                        this._getUpdates(includeDetails)\n                            .then(info => {\n                                resolve(info);\n                            });\n                    });\n            } else {\n                this._getUpdates(includeDetails)\n                    .then(info => {\n                        resolve(info);\n                    });\n            }\n        });\n    },\n\n    _checkForCachedUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            var data = {\n                onlyIfCached: true,\n                includeDetails: includeDetails,\n            };\n            Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    resolve({cached: false});\n                }\n            });\n        });\n    },\n\n    _getUpdates: function(includeDetails) {\n        return new Promise((resolve, reject) => {\n            Craft.sendApiRequest('GET', 'updates')\n                .then(updates => {\n                    this._cacheUpdates(updates, includeDetails).then(resolve);\n                })\n                .catch(e => {\n                    this._cacheUpdates({}).then(resolve);\n                });\n        });\n    },\n\n    _cacheUpdates: function(updates, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.postActionRequest('app/cache-updates', {\n                updates: updates,\n                includeDetails: includeDetails,\n            }, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    reject();\n                }\n            }, {\n                contentType: 'json'\n            });\n        });\n    },\n\n    updateUtilitiesBadge: function() {\n        var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n        // Ignore if there is no (non-selected) Utilities nav item\n        if (!$utilitiesLink.length) {\n            return;\n        }\n\n        Craft.queueActionRequest('app/get-utilities-badge-count', response => {\n            // Get the existing utility nav badge, if any\n            var $badge = $utilitiesLink.children('.badge');\n\n            if (response.badgeCount) {\n                if (!$badge.length) {\n                    $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                }\n                $badge.text(response.badgeCount);\n            } else if ($badge.length) {\n                $badge.remove();\n            }\n        });\n    },\n\n    runQueue: function() {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        if (Craft.runQueueAutomatically) {\n            Craft.queueActionRequest('queue/run', (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this.trackJobProgress(false, true);\n                }\n            });\n        } else {\n            this.trackJobProgress(false, true);\n        }\n    },\n\n    trackJobProgress: function(delay, force) {\n        if (force && this.trackJobProgressTimeout) {\n            clearTimeout(this.trackJobProgressTimeout);\n            this.trackJobProgressTimeout = null;\n        }\n\n        // Ignore if we're already tracking jobs, or the queue is disabled\n        if (this.trackJobProgressTimeout || !this.enableQueue) {\n            return;\n        }\n\n        if (delay === true) {\n            // Determine the delay based on how long the displayed job info has remained unchanged\n            var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n            this.trackJobProgressTimeout = setTimeout(this._trackJobProgressInternal.bind(this), timeout);\n        } else {\n            this._trackJobProgressInternal();\n        }\n    },\n\n    _trackJobProgressInternal: function() {\n        Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.trackJobProgressTimeout = null;\n                this.totalJobs = response.total;\n                this.setJobInfo(response.jobs);\n\n                if (this.jobInfo.length) {\n                    // Check again after a delay\n                    this.trackJobProgress(true);\n                }\n            }\n        });\n    },\n\n    setJobInfo: function(jobInfo) {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        this.jobInfo = jobInfo;\n\n        // Update the displayed job info\n        var oldInfo = this.displayedJobInfo;\n        this.displayedJobInfo = this.getDisplayedJobInfo();\n\n        // Same old same old?\n        if (\n            oldInfo &&\n            this.displayedJobInfo &&\n            oldInfo.id === this.displayedJobInfo.id &&\n            oldInfo.progress === this.displayedJobInfo.progress &&\n            oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n            oldInfo.status === this.displayedJobInfo.status\n        ) {\n            this.displayedJobInfoUnchanged++;\n        } else {\n            // Reset the counter\n            this.displayedJobInfoUnchanged = 1;\n        }\n\n        this.updateJobIcon();\n\n        // Fire a setJobInfo event\n        this.trigger('setJobInfo');\n    },\n\n    /**\n     * Returns info for the job that should be displayed in the CP sidebar\n     */\n    getDisplayedJobInfo: function() {\n        if (!this.enableQueue) {\n            return null;\n        }\n\n        // Set the status preference order\n        var statuses = [\n            Craft.CP.JOB_STATUS_RESERVED,\n            Craft.CP.JOB_STATUS_FAILED,\n            Craft.CP.JOB_STATUS_WAITING\n        ];\n\n        for (var i = 0; i < statuses.length; i++) {\n            for (var j = 0; j < this.jobInfo.length; j++) {\n                if (\n                    this.jobInfo[j].status === statuses[i] &&\n                    (statuses[i] !== Craft.CP.JOB_STATUS_WAITING || !this.jobInfo[j].delay)\n                ) {\n                    return this.jobInfo[j];\n                }\n            }\n        }\n\n        return null;\n    },\n\n    updateJobIcon: function() {\n        if (!this.enableQueue || !this.$nav.length) {\n            return;\n        }\n\n        if (this.displayedJobInfo) {\n            if (!this.jobProgressIcon) {\n                this.jobProgressIcon = new JobProgressIcon();\n            }\n\n            if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n            } else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n            }\n        } else {\n            if (this.jobProgressIcon) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.complete();\n                delete this.jobProgressIcon;\n            }\n        }\n    },\n\n    /**\n     * Returns the active site for the control panel\n     *\n     * @return {number}\n     */\n    getSiteId: function() {\n        // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n        let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n        if (typeof siteId !== 'undefined') {\n            Craft.removeLocalStorage('BaseElementIndex.siteId');\n            this.setSiteId(siteId);\n            return siteId;\n        }\n        return Craft.getCookie('siteId');\n    },\n\n    /**\n     * Sets the active site for the control panel\n     * @param {number} siteId\n     */\n    setSiteId: function(siteId) {\n        Craft.setCookie('siteId', siteId, {\n            maxAge: 31536000 // 1 year\n        });\n    }\n}, {\n    //maxWidth: 1051, //1024,\n    notificationDuration: 2000,\n\n    JOB_STATUS_WAITING: 1,\n    JOB_STATUS_RESERVED: 2,\n    JOB_STATUS_DONE: 3,\n    JOB_STATUS_FAILED: 4\n});\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend({\n    $li: null,\n    $a: null,\n    $label: null,\n    $progressLabel: null,\n\n    progress: null,\n    failMode: false,\n\n    _$bgCanvas: null,\n    _$staticCanvas: null,\n    _$hoverCanvas: null,\n    _$failCanvas: null,\n\n    _staticCtx: null,\n    _hoverCtx: null,\n    _canvasSize: null,\n    _arcPos: null,\n    _arcRadius: null,\n    _lineWidth: null,\n\n    _arcStartPos: 0,\n    _arcEndPos: 0,\n    _arcStartStepSize: null,\n    _arcEndStepSize: null,\n    _arcStep: null,\n    _arcStepTimeout: null,\n    _arcAnimateCallback: null,\n\n    _progressBar: null,\n\n    init: function() {\n        this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n        this.$a = $('<a/>', {\n            id: 'job-icon',\n            href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n        }).appendTo(this.$li);\n        this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n        var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n        this.$label = $('<span/>').appendTo($labelContainer);\n        this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n        let m = (window.devicePixelRatio > 1 ? 2 : 1);\n        this._canvasSize = 18 * m;\n        this._arcPos = this._canvasSize / 2;\n        this._arcRadius = 7 * m;\n        this._lineWidth = 3 * m;\n\n        this._$bgCanvas = this._createCanvas('bg', '#61666b');\n        this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n        this._$hoverCanvas = this._createCanvas('hover', '#fff');\n        this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n        this._staticCtx = this._$staticCanvas[0].getContext('2d');\n        this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n        this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n        this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n    },\n\n    setDescription: function(description, progressLabel) {\n        this.$a.attr('title', description);\n        this.$label.text(description);\n        if (progressLabel) {\n            this.$progressLabel.text(progressLabel).show();\n        } else {\n            this.$progressLabel.hide();\n        }\n    },\n\n    setProgress: function(progress) {\n        if (progress == 0) {\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n        } else {\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            if (this.progress && progress > this.progress) {\n                this._animateArc(0, progress / 100);\n            } else {\n                this._setArc(0, progress / 100);\n            }\n        }\n\n        this.progress = progress;\n    },\n\n    complete: function() {\n        this._animateArc(0, 1, () => {\n            this._$bgCanvas.velocity('fadeOut');\n\n            this._animateArc(1, 1, () => {\n                this.$a.remove();\n                this.destroy();\n            });\n        });\n    },\n\n    showFailMode: function(message) {\n        if (this.failMode) {\n            return;\n        }\n\n        this.failMode = true;\n        this.progress = null;\n\n        this._$bgCanvas.hide();\n        this._$staticCanvas.hide();\n        this._$hoverCanvas.hide();\n        this._$failCanvas.show();\n\n        this.setDescription(message);\n    },\n\n    hideFailMode: function() {\n        if (!this.failMode) {\n            return;\n        }\n\n        this.failMode = false;\n\n        this._$bgCanvas.show();\n        this._$staticCanvas.show();\n        this._$hoverCanvas.show();\n        this._$failCanvas.hide();\n    },\n\n    _createCanvas: function(id, color) {\n        var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n            ctx = $canvas[0].getContext('2d');\n\n        ctx.strokeStyle = color;\n        ctx.lineWidth = this._lineWidth;\n        ctx.lineCap = 'round';\n        return $canvas;\n    },\n\n    _setArc: function(startPos, endPos) {\n        this._arcStartPos = startPos;\n        this._arcEndPos = endPos;\n\n        this._drawArc(this._staticCtx, startPos, endPos);\n        this._drawArc(this._hoverCtx, startPos, endPos);\n    },\n\n    _drawArc: function(ctx, startPos, endPos) {\n        ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n        ctx.beginPath();\n        ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n    },\n\n    _animateArc: function(targetStartPos, targetEndPos, callback) {\n        if (this._arcStepTimeout) {\n            clearTimeout(this._arcStepTimeout);\n        }\n\n        this._arcStep = 0;\n        this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n        this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n        this._arcAnimateCallback = callback;\n        this._takeNextArcStep();\n    },\n\n    _takeNextArcStep: function() {\n        this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n        this._arcStep++;\n\n        if (this._arcStep < 10) {\n            this._arcStepTimeout = setTimeout(this._takeNextArcStep.bind(this), 50);\n        } else if (this._arcAnimateCallback) {\n            this._arcAnimateCallback();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend({\n    editableGroups: null,\n    $newCategoryBtnGroup: null,\n    $newCategoryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible groups the user has permission to create new categories in\n        this.editableGroups = [];\n\n        for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n            var group = Craft.editableCategoryGroups[i];\n\n            if (this.getSourceByKey('group:' + group.uid)) {\n                this.editableGroups.push(group);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific category group in the URL?\n        if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n\n                if ($source.data('handle') === defaultGroupHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        // Get the handle of the selected source\n        var selectedSourceHandle = this.$source.data('handle');\n\n        var i, href, label;\n\n        // Update the New Category button\n        // ---------------------------------------------------------------------\n\n        if (this.editableGroups.length) {\n            // Remove the old button, if there is one\n            if (this.$newCategoryBtnGroup) {\n                this.$newCategoryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a group that they have permission to create categories in\n            var selectedGroup;\n\n            if (selectedSourceHandle) {\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    if (this.editableGroups[i].handle === selectedSourceHandle) {\n                        selectedGroup = this.editableGroups[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n            // Otherwise only show a menu button\n            if (selectedGroup) {\n                href = this._getGroupTriggerHref(selectedGroup);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                        this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.editableGroups.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n            } else {\n                this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New category'),\n                }).appendTo(this.$newCategoryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    var group = this.editableGroups[i];\n\n                    if (this.settings.context === 'index' || group !== selectedGroup) {\n                        href = this._getGroupTriggerHref(group);\n                        label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newCategoryBtnGroup);\n        }\n\n        // Update the URL if we're on the Categories index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'categories';\n\n            if (selectedSourceHandle) {\n                uri += '/' + selectedSourceHandle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getGroupTriggerHref: function(group) {\n        if (this.settings.context === 'index') {\n            var uri = 'categories/' + group.handle + '/new';\n            if (this.siteId && this.siteId != Craft.primarySiteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        uri += '/' + Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri) + '\"';\n        } else {\n            return 'data-id=\"' + group.id + '\"';\n        }\n    },\n\n    _openCreateCategoryModal: function(groupId) {\n        if (this.$newCategoryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the group\n        var group;\n\n        for (var i = 0; i < this.editableGroups.length; i++) {\n            if (this.editableGroups[i].id == groupId) {\n                group = this.editableGroups[i];\n                break;\n            }\n        }\n\n        if (!group) {\n            return;\n        }\n\n        this.$newCategoryBtn.addClass('inactive');\n        var newCategoryBtnText = this.$newCategoryBtn.text();\n        this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newCategoryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                groupId: groupId\n            },\n            onHideHud: () => {\n                this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right group is selected\n                var groupSourceKey = 'group:' + group.uid;\n\n                if (this.sourceKey !== groupSourceKey) {\n                    this.selectSourceByKey(groupSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend({\n    setSettings: function() {\n        this.base.apply(this, arguments);\n        this.settings.sortable = false;\n    },\n\n    getModalSettings: function() {\n        var settings = this.base();\n        settings.hideOnSelect = false;\n        return settings;\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.find('.element');\n    },\n\n    onModalSelect: function(elements) {\n        // Disable the modal\n        this.modal.disable();\n        this.modal.disableCancelBtn();\n        this.modal.disableSelectBtn();\n        this.modal.showFooterSpinner();\n\n        // Get the new category HTML\n        var selectedCategoryIds = this.getSelectedElementIds();\n\n        for (var i = 0; i < elements.length; i++) {\n            selectedCategoryIds.push(elements[i].id);\n        }\n\n        var data = {\n            categoryIds: selectedCategoryIds,\n            siteId: elements[0].siteId,\n            id: this.settings.id,\n            name: this.settings.name,\n            branchLimit: this.settings.branchLimit,\n            selectionLabel: this.settings.selectionLabel\n        };\n\n        Craft.postActionRequest('elements/get-categories-input-html', data, (response, textStatus) => {\n            this.modal.enable();\n            this.modal.enableCancelBtn();\n            this.modal.enableSelectBtn();\n            this.modal.hideFooterSpinner();\n\n            if (textStatus === 'success') {\n                var $newInput = $(response.html),\n                    $newElementsContainer = $newInput.children('.elements');\n\n                this.$elementsContainer.replaceWith($newElementsContainer);\n                this.$elementsContainer = $newElementsContainer;\n                this.resetElements();\n\n                var filteredElements = [];\n\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i],\n                        $element = this.getElementById(element.id);\n\n                    if ($element) {\n                        this.animateElementIntoPlace(element.$element, $element);\n                        filteredElements.push(element);\n                    }\n                }\n\n                this.updateDisabledElementsInModal();\n                this.modal.hide();\n                this.onSelectElements(filteredElements);\n            }\n        });\n    },\n\n    removeElement: function($element) {\n        // Find any descendants this category might have\n        var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n        // Remove our record of them all at once\n        this.removeElements($allCategories);\n\n        // Animate them away one at a time\n        for (var i = 0; i < $allCategories.length; i++) {\n            this._animateCategoryAway($allCategories, i);\n        }\n    },\n\n    _animateCategoryAway: function($allCategories, i) {\n        var callback;\n\n        // Is this the last one?\n        if (i === $allCategories.length - 1) {\n            callback = () => {\n                var $li = $allCategories.first().parent().parent(),\n                    $ul = $li.parent();\n\n                if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                    $li.remove();\n                } else {\n                    $ul.remove();\n                }\n            };\n        }\n\n        var func = () => {\n            this.animateElementAway($allCategories.eq(i), callback);\n        };\n\n        if (i === 0) {\n            func();\n        } else {\n            setTimeout(func, 100 * i);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend({\n    columns: null,\n    rows: null,\n\n    init: function(data) {\n        let columns = data.columns;\n        let rows = data.rows;\n\n        rows.forEach(d => {\n            $.each(d, function(cellIndex) {\n                var column = columns[cellIndex];\n\n                var parseTime;\n\n                switch (column.type) {\n                    case 'date':\n                        parseTime = d3.timeParse('%Y-%m-%d');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'datetime':\n                        parseTime = d3.timeParse('%Y-%m-%d %H:00:00');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'percent':\n                        d[cellIndex] = d[cellIndex] / 100;\n                        break;\n\n                    case 'number':\n                        d[cellIndex] = +d[cellIndex];\n                        break;\n\n                    default:\n                    // do nothing\n                }\n            });\n        });\n\n        this.columns = columns;\n        this.rows = rows;\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend({\n    $container: null,\n    $tip: null,\n\n    init: function($container) {\n        this.$container = $container;\n\n        this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n        this.hide();\n    },\n\n    setContent: function(html) {\n        this.$tip.html(html);\n    },\n\n    setPosition: function(position) {\n        this.$tip.css('left', `${position.left}px`);\n        this.$tip.css('top', `${position.top}px`);\n    },\n\n    show: function() {\n        this.$tip.css('display', 'block');\n    },\n\n    hide: function() {\n        this.$tip.css('display', 'none');\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend({\n    $container: null,\n    $chart: null,\n\n    chartBaseClass: 'cp-chart',\n    dataTable: null,\n\n    formatLocale: null,\n    timeFormatLocale: null,\n    orientation: null,\n\n    svg: null,\n    width: null,\n    height: null,\n\n    init: function(container, settings) {\n        this.$container = container;\n\n        this.setSettings(Craft.charts.BaseChart.defaults);\n        this.setSettings(settings);\n\n        var globalSettings = {\n            formats: window.d3Formats,\n            formatLocaleDefinition: window.d3FormatLocaleDefinition,\n            timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n        };\n\n        this.setSettings(globalSettings);\n\n        d3.select(window).on('resize', () => {\n            this.resize();\n        });\n    },\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n    },\n\n    draw: function(dataTable, settings) {\n        // Settings and chart attributes\n\n        this.setSettings(settings);\n\n        this.dataTable = dataTable;\n        this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n        this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n        this.orientation = this.settings.orientation;\n\n        // Set (or reset) the chart element\n\n        if (this.$chart) {\n            this.$chart.remove();\n        }\n\n        var className = this.chartBaseClass;\n\n        if (this.settings.chartClass) {\n            className += ' ' + this.settings.chartClass;\n        }\n\n        this.$chart = $(`<div class=\"${className}\" />`).appendTo(this.$container);\n    },\n\n    resize: function() {\n        this.draw(this.dataTable, this.settings);\n    },\n\n    onAfterDrawTicks: function() {\n        // White border for ticks' text\n        $('.tick', this.$chart).each(function(tickKey, tick) {\n            var $tickText = $('text', tick);\n\n            var $clone = $tickText.clone();\n            $clone.appendTo(tick);\n\n            $tickText.attr('stroke', '#ffffff');\n            $tickText.attr('stroke-width', 3);\n        });\n    }\n}, {\n    defaults: {\n        formatLocaleDefinition: null,\n        timeFormatLocaleDefinition: null,\n        formats: {\n            numberFormat: ',.2f',\n            percentFormat: ',.2%',\n            currencyFormat: '$,.2f',\n            shortDateFormats: {\n                day: '%-m/%-d',\n                month: '%-m/%y',\n                year: '%Y'\n            }\n        },\n        margin: {top: 0, right: 0, bottom: 0, left: 0},\n        chartClass: null,\n        colors: ['#0594D1', '#DE3800', '#FF9A00', '#009802', '#9B009B']\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend({\n    tip: null,\n    drawingArea: null,\n\n    init: function(container, settings) {\n        this.base(container, Craft.charts.Area.defaults);\n\n        this.setSettings(settings);\n    },\n\n    draw: function(dataTable, settings) {\n        this.base(dataTable, settings);\n\n        if (this.tip) {\n            this.tip = null;\n        }\n\n        var margin = this.getChartMargin();\n\n        this.width = this.$chart.width() - margin.left - margin.right;\n        this.height = this.$chart.height() - margin.top - margin.bottom;\n\n        // Append SVG to chart element\n\n        var svg = {\n            width: this.width + (margin.left + margin.right),\n            height: this.height + (margin.top + margin.bottom),\n            translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n            translateY: margin.top\n        };\n\n        this.svg = d3.select(this.$chart.get(0)).append('svg')\n            .attr('width', svg.width)\n            .attr('height', svg.height);\n\n        this.drawingArea = this.svg.append('g')\n            .attr('transform', `translate(${svg.translateX},${svg.translateY})`);\n\n        // Draw elements\n\n        this.drawTicks();\n        this.drawAxes();\n        this.drawChart();\n        this.drawTipTriggers();\n    },\n\n    drawTicks: function() {\n        // Draw X ticks\n\n        var x = this.getX(true);\n        var xTicks = 3;\n        var xAxis = d3.axisBottom(x)\n            .tickFormat(this.getXFormatter())\n            .ticks(xTicks);\n\n        this.drawingArea.append('g')\n            .attr('class', 'x ticks-axis')\n            .attr('transform', `translate(0, ${this.height})`)\n            .call(xAxis);\n\n        // Draw Y ticks\n\n        var y = this.getY();\n        var yTicks = 2;\n        var yAxis;\n\n        if (this.orientation !== 'rtl') {\n            yAxis = d3.axisLeft(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .call(yAxis);\n        } else {\n            yAxis = d3.axisRight(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .attr('transform', `translate(${this.width},0)`)\n                .call(yAxis);\n        }\n\n        // On after draw ticks\n\n        this.onAfterDrawTicks();\n    },\n\n    drawAxes: function() {\n        if (this.settings.xAxis.showAxis) {\n            var x = this.getX();\n            var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n            this.drawingArea.append('g')\n                .attr('class', 'x axis')\n                .attr('transform', `translate(0, ${this.height})`)\n                .call(xAxis);\n        }\n\n        if (this.settings.yAxis.showAxis) {\n            var y = this.getY();\n            var chartPadding = 0;\n            var yAxis;\n\n            if (this.orientation === 'rtl') {\n                yAxis = d3.axisLeft(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${this.width - chartPadding}, 0)`)\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${chartPadding}, 0)`)\n                    .call(yAxis);\n            }\n        }\n    },\n\n    drawChart: function() {\n        var x = this.getX(true);\n        var y = this.getY();\n\n        // X & Y grid lines\n\n        if (this.settings.xAxis.gridlines) {\n            var xLineAxis = d3.axisBottom(x);\n\n            this.drawingArea.append('g')\n                .attr('class', 'x grid-line')\n                .attr('transform', `translate(0,${this.height})`)\n                .call(xLineAxis\n                    .tickSize(-this.height, 0, 0)\n                    .tickFormat('')\n                );\n        }\n\n        var yTicks = 2;\n\n        if (this.settings.yAxis.gridlines) {\n            var yLineAxis = d3.axisLeft(y);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y grid-line')\n                .attr('transform', 'translate(0 , 0)')\n                .call(yLineAxis\n                    .tickSize(-(this.width), 0)\n                    .tickFormat('')\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks)\n                );\n        }\n\n        // Line\n\n        var line = d3.line()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-line')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', 'none')\n            .style('stroke', this.settings.colors[0])\n            .style('stroke-width', '3px')\n            .attr('d', line);\n\n        // Area\n\n        var area = d3.area()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y0(this.height)\n            .y1(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-area')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', this.settings.colors[0])\n            .style('fill-opacity', '0.3')\n            .attr('d', area);\n\n        // Plots\n\n        if (this.settings.plots) {\n            this.drawingArea.append('g')\n                .attr('class', 'plots')\n                .selectAll('circle')\n                .data(this.dataTable.rows)\n                .enter()\n                .append('circle')\n                .style('fill', this.settings.colors[0])\n                .attr('class', (d, index) => `plot plot-${index}`)\n                .attr('r', 4)\n                .attr('cx', d => x(d[0]))\n                .attr('cy', d => y(d[1]));\n        }\n    },\n\n    drawTipTriggers: function() {\n        if (this.settings.tips) {\n            if (!this.tip) {\n                this.tip = new Craft.charts.Tip(this.$chart);\n            }\n\n            // Define xAxisTickInterval\n\n            var chartMargin = this.getChartMargin();\n            var tickSizeOuter = 6;\n            var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n            var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n            // Tip trigger width\n\n            var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n            // Draw triggers\n\n            var x = this.getX(true);\n            var y = this.getY();\n\n            this.drawingArea.append('g')\n                .attr('class', 'tip-triggers')\n                .selectAll('rect')\n                .data(this.dataTable.rows)\n                .enter().append('rect')\n                .attr('class', 'tip-trigger')\n                .style('fill', 'transparent')\n                .style('fill-opacity', '1')\n                .attr('width', tipTriggerWidth)\n                .attr('height', this.height)\n                .attr('x', d => x(d[0]) - tipTriggerWidth / 2)\n                .on('mouseover', (d, index) => {\n                    // Expand plot\n\n                    this.drawingArea.select('.plot-' + index).attr('r', 5);\n\n                    // Set tip content\n\n                    var $content = $('<div />');\n                    var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                    var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                    $xValue.html(this.getXFormatter()(d[0]));\n                    $yValue.html(this.getYFormatter()(d[1]));\n\n                    var content = $content.get(0);\n\n                    this.tip.setContent(content);\n\n                    // Set tip position\n\n                    var margin = this.getChartMargin();\n\n                    var offset = 24;\n                    var top = (y(d[1]) + offset);\n                    var left;\n\n                    if (this.orientation !== 'rtl') {\n                        left = (x(d[0]) + margin.left + offset);\n\n                        var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                        var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                        if (calcLeft > maxLeft) {\n                            left = x(d[0]) - (this.tip.$tip.width() + offset);\n                        }\n                    } else {\n                        left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                    }\n\n                    if (left < 0) {\n                        left = (x(d[0]) + margin.left + offset);\n                    }\n\n                    var position = {\n                        top: top,\n                        left: left\n                    };\n\n                    this.tip.setPosition(position);\n\n                    // Show tip\n\n                    this.tip.show();\n                })\n                .on('mouseout', (d, index) => {\n                    // Unexpand Plot\n                    this.drawingArea.select('.plot-' + index).attr('r', 4);\n\n                    // Hide tip\n                    this.tip.hide();\n                });\n        }\n    },\n\n    getChartMargin: function() {\n        var margin = this.settings.margin;\n\n        // Estimate the max width of y ticks and set it as the left margin\n\n        var values = this.getYTickValues();\n        var yTicksMaxWidth = 0;\n\n        $.each(values, (key, value) => {\n            var characterWidth = 8;\n\n            var formatter = this.getYFormatter();\n\n            var formattedValue = formatter(value);\n            var computedTickWidth = formattedValue.length * characterWidth;\n\n            if (computedTickWidth > yTicksMaxWidth) {\n                yTicksMaxWidth = computedTickWidth;\n            }\n        });\n\n        yTicksMaxWidth += 10;\n\n        margin.left = yTicksMaxWidth;\n\n        return margin;\n    },\n\n    getX: function(padded) {\n        var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomain = [xDomainMin, xDomainMax];\n\n        if (this.orientation === 'rtl') {\n            xDomain = [xDomainMax, xDomainMin];\n        }\n\n        var left = 0;\n        var right = 0;\n\n        if (padded) {\n            left = 0;\n            right = 0;\n        }\n\n        var x = d3.scaleTime().range([left, (this.width - right)]);\n\n        x.domain(xDomain);\n\n        return x;\n    },\n\n    getY: function() {\n        var yDomain = [0, this.getYMaxValue()];\n\n        var y = d3.scaleLinear().range([this.height, 0]);\n\n        y.domain(yDomain);\n\n        return y;\n    },\n\n    getXFormatter: function() {\n        var formatter;\n\n        if (this.settings.xAxis.formatter !== $.noop) {\n            formatter = this.settings.xAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYFormatter: function() {\n        var formatter;\n\n        if (this.settings.yAxis.formatter !== $.noop) {\n            formatter = this.settings.yAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYMaxValue: function() {\n        return d3.max(this.dataTable.rows, function(d) {\n            return d[1];\n        });\n    },\n\n    getYTickValues: function() {\n        var maxValue = this.getYMaxValue();\n\n        if (maxValue > 1) {\n            return [(maxValue / 2), maxValue];\n        } else {\n            return [0, maxValue];\n        }\n    }\n}, {\n    defaults: {\n        chartClass: 'area',\n        margin: {top: 25, right: 5, bottom: 25, left: 0},\n        plots: true,\n        tips: true,\n        xAxis: {\n            gridlines: false,\n            showAxis: true,\n            formatter: $.noop\n        },\n        yAxis: {\n            gridlines: true,\n            showAxis: false,\n            formatter: $.noop\n        }\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = `0${duration.hours}`;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = `0${duration.minutes}`;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = `0${duration.seconds}`;\n        }\n\n        return `${duration.hours}:${duration.minutes}:${duration.seconds}`;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(`${chartSettings.formats.shortDateFormats.day} %H:00:00`);\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.find('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .attr({\n                'aria-controls': this.$input.attr('id'),\n                'aria-label': Craft.t('app', 'Color picker'),\n            })\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorInput, 'click', function (ev) {\n            ev.stopPropagation();\n        });\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'input', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        let val = this.$input.val();\n\n        if (val !== (val = Craft.trim(val))) {\n            this.$input.val(val);\n        }\n\n        // Chop off the #\n        if (val.length && val[0] === '#') {\n            val = val.substr(1);\n            this.$input.val(val);\n        }\n\n        // If empty, set the preview to transparent\n        if (!val.length) {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Now normalize it for the UI stuff\n        if (val.length === 3) {\n            val = val[0].repeat(2) + val[1].repeat(2) + val[2].repeat(2);\n        }\n\n        if (val.match(/^[0-9a-f]{6}$/i)) {\n            this.$colorPreview.css('background-color', `#${val}`);\n            if (this.$colorInput) {\n                this.$colorInput.val(`#${val}`);\n            }\n        } else {\n            this.$colorPreview.css('background-color', '');\n        }\n    },\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function() {\n        if (Craft.ColorInput._browserSupportsColorInputs === null) {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend({\n    elementIndex: null,\n    $elementIndexSourcesContainer: null,\n\n    $sidebar: null,\n    $sourcesContainer: null,\n    $sourceSettingsContainer: null,\n    $newHeadingBtn: null,\n    $footer: null,\n    $footerBtnContainer: null,\n    $saveBtn: null,\n    $cancelBtn: null,\n    $saveSpinner: null,\n    $loadingSpinner: null,\n\n    sourceSort: null,\n    sources: null,\n    selectedSource: null,\n    updateSourcesOnSave: false,\n\n    availableTableAttributes: null,\n\n    init: function(elementIndex, settings) {\n        this.base();\n\n        this.setSettings(settings, {\n            resizable: true\n        });\n\n        this.elementIndex = elementIndex;\n        this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n        var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n        this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n        this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n        this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n        this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n        this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n        this.$newHeadingBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit add icon',\n            text: Craft.t('app', 'New heading'),\n        }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n        this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n        this.setContainer($container);\n        this.show();\n\n        var data = {\n            elementType: this.elementIndex.elementType\n        };\n\n        Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, (response, textStatus) => {\n            this.$loadingSpinner.remove();\n\n            if (textStatus === 'success') {\n                this.$saveBtn.removeClass('disabled');\n                this.buildModal(response);\n            }\n        });\n\n        this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n        this.addListener(this.$cancelBtn, 'click', 'hide');\n        this.addListener(this.$saveBtn, 'click', 'save');\n        this.addListener(this.$container, 'submit', 'save');\n    },\n\n    buildModal: function(response) {\n        // Store the available table attribute options\n        this.availableTableAttributes = response.availableTableAttributes;\n\n        // Create the source item sorter\n        this.sourceSort = new Garnish.DragSort({\n            handle: '.move',\n            axis: 'y',\n            onSortChange: () => {\n                this.updateSourcesOnSave = true;\n            },\n        });\n\n        // Create the sources\n        this.sources = [];\n\n        for (var i = 0; i < response.sources.length; i++) {\n            var source = this.addSource(response.sources[i]);\n            this.sources.push(source);\n        }\n\n        if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n            this.sources[0].select();\n        }\n    },\n\n    addSource: function(sourceData) {\n        var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n        var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n        var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n        $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n        var source;\n\n        // Is this a heading?\n        if (typeof sourceData.heading !== 'undefined') {\n            $item.addClass('heading');\n            $itemInput.attr('name', 'sourceOrder[][heading]');\n            source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.heading);\n        } else {\n            $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n            source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.label);\n\n            // Select this by default?\n            if ((this.elementIndex.sourceKey + '/').substr(0, sourceData.key.length + 1) === sourceData.key + '/') {\n                source.select();\n            }\n        }\n\n        this.sourceSort.addItems($item);\n\n        return source;\n    },\n\n    handleNewHeadingBtnClick: function() {\n        var source = this.addSource({\n            heading: ''\n        });\n\n        Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n        source.select();\n        this.updateSourcesOnSave = true;\n    },\n\n    save: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n            return;\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n        var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n        Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success' && response.success) {\n                // Have any changes been made to the source list?\n                if (this.updateSourcesOnSave) {\n                    if (this.$elementIndexSourcesContainer.length) {\n                        var $lastSource = null,\n                            $pendingHeading;\n\n                        for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                            var $item = this.sourceSort.$items.eq(i),\n                                source = $item.data('source'),\n                                $indexSource = source.getIndexSource();\n\n                            if (!$indexSource) {\n                                continue;\n                            }\n\n                            if (source.isHeading()) {\n                                $pendingHeading = $indexSource;\n                            } else {\n                                if ($pendingHeading) {\n                                    this.appendSource($pendingHeading, $lastSource);\n                                    $lastSource = $pendingHeading;\n                                    $pendingHeading = null;\n                                }\n\n                                this.appendSource($indexSource, $lastSource);\n                                $lastSource = $indexSource;\n                            }\n                        }\n\n                        // Remove any additional sources (most likely just old headings)\n                        if ($lastSource) {\n                            var $extraSources = $lastSource.nextAll();\n                            this.elementIndex.sourceSelect.removeItems($extraSources);\n                            $extraSources.remove();\n                        }\n                    }\n                }\n\n                // If a source is selected, have the element index select that one by default on the next request\n                if (this.selectedSource && this.selectedSource.sourceData.key) {\n                    this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                    this.elementIndex.updateElements();\n                }\n\n                Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                this.hide();\n            } else {\n                var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                Craft.cp.displayError(error);\n            }\n        });\n    },\n\n    appendSource: function($source, $lastSource) {\n        if (!$lastSource) {\n            $source.prependTo(this.$elementIndexSourcesContainer);\n        } else {\n            $source.insertAfter($lastSource);\n        }\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.sources.length; i++) {\n            this.sources[i].destroy();\n        }\n\n        delete this.sources;\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend({\n    modal: null,\n\n    $item: null,\n    $itemLabel: null,\n    $itemInput: null,\n    $settingsContainer: null,\n\n    sourceData: null,\n\n    init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n        this.modal = modal;\n        this.$item = $item;\n        this.$itemLabel = $itemLabel;\n        this.$itemInput = $itemInput;\n        this.sourceData = sourceData;\n\n        this.$item.data('source', this);\n\n        this.addListener(this.$item, 'click', 'select');\n    },\n\n    isHeading: function() {\n        return false;\n    },\n\n    isSelected: function() {\n        return (this.modal.selectedSource === this);\n    },\n\n    select: function() {\n        if (this.isSelected()) {\n            return;\n        }\n\n        if (this.modal.selectedSource) {\n            this.modal.selectedSource.deselect();\n        }\n\n        this.$item.addClass('sel');\n        this.modal.selectedSource = this;\n\n        if (!this.$settingsContainer) {\n            this.$settingsContainer = this.createSettings()\n                .appendTo(this.modal.$sourceSettingsContainer);\n        } else {\n            this.$settingsContainer.removeClass('hidden');\n        }\n\n        this.modal.$sourceSettingsContainer.scrollTop(0);\n    },\n\n    createSettings: function() {\n        return $('<div/>');\n    },\n\n    getIndexSource: function() {\n    },\n\n    deselect: function() {\n        this.$item.removeClass('sel');\n        this.modal.selectedSource = null;\n        this.$settingsContainer.addClass('hidden');\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.text(val);\n    },\n\n    destroy: function() {\n        this.$item.data('source', null);\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend({\n    createSettings: function() {\n        let $settings = $('<div/>').append(Craft.ui.createTextField({\n            label: Craft.t('app', 'Header Column Heading'),\n            id: 'defaultHeaderColHeading' + Math.floor(Math.random() * 100000),\n            name: `sources[${this.sourceData.key}][headerColHeading]`,\n            value: this.sourceData.headerColHeading,\n            placeholder: this.sourceData.defaultHeaderColHeading,\n        }));\n\n        if (this.sourceData.tableAttributes.length) {\n            $settings.append(this.createTableColumnsField());\n        }\n\n        return $settings;\n    },\n\n    createTableColumnsField: function() {\n        // Create the title column option\n        let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n        let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n        // Create the rest of the options\n        let $columnCheckboxes = $('<div/>');\n        let selectedAttributes = [firstKey];\n\n        $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n        // Add the selected columns, in the selected order\n        for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n            let [key, label] = this.sourceData.tableAttributes[i];\n            $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n            selectedAttributes.push(key);\n        }\n\n        // Add the rest\n        let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n        availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n        for (let i = 0; i < availableTableAttributes.length; i++) {\n            let [key, label] = availableTableAttributes[i];\n            if (!Craft.inArray(key, selectedAttributes)) {\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n            }\n        }\n\n        new Garnish.DragSort($columnCheckboxes.children(), {\n            handle: '.move',\n            axis: 'y'\n        });\n\n        return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n            label: Craft.t('app', 'Table Columns'),\n            instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n        });\n    },\n\n    createTableColumnOption: function(key, label, first, checked) {\n        var $option = $('<div class=\"customize-sources-table-column\"/>')\n            .append('<div class=\"icon move\"/>')\n            .append(\n                Craft.ui.createCheckbox({\n                    label: Craft.escapeHtml(label),\n                    name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                    value: key,\n                    checked: checked,\n                    disabled: first\n                })\n            );\n\n        if (first) {\n            $option.children('.move').addClass('disabled');\n        }\n\n        return $option;\n    },\n\n    getIndexSource: function() {\n        var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n        if ($source) {\n            return $source.closest('li');\n        }\n    }\n});\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend({\n    $labelField: null,\n    $labelInput: null,\n    $deleteBtn: null,\n\n    isHeading: function() {\n        return true;\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.trigger('focus');\n    },\n\n    createSettings: function() {\n        let $settings = $('<div/>');\n\n        this.$labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Heading'),\n            instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n            value: this.sourceData.heading\n        }).appendTo($settings);\n\n        this.$labelInput = this.$labelField.find('.text');\n\n        $settings.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n            .appendTo($settings);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n        return $settings;\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n        this.$itemInput.val(val);\n    },\n\n    deleteHeading: function() {\n        this.modal.sourceSort.removeItems(this.$item);\n        this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n        this.modal.updateSourcesOnSave = true;\n\n        if (this.isSelected()) {\n            this.deselect();\n\n            if (this.modal.sources.length) {\n                this.modal.sources[0].select();\n            }\n        }\n\n        this.$item.remove();\n        this.$settingsContainer.remove();\n        this.destroy();\n    },\n\n    getIndexSource: function() {\n        var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n        return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend({\n    $table: null,\n\n    init: function(table, settings) {\n        this.$table = $(table);\n        var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n        settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n        settings.container = this.$table.children('tbody');\n        settings.helper = this.getHelper.bind(this);\n        settings.caboose = '<tr/>';\n        settings.axis = Garnish.Y_AXIS;\n        settings.magnetStrength = 4;\n        settings.helperLagBase = 1.5;\n\n        this.base($rows, settings);\n    },\n\n    getHelper: function($helperRow) {\n        var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n            $table = $('<table/>').appendTo($helper),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the table width and classes\n        $table.width(this.$table.width());\n        $table.prop('className', this.$table.prop('className'));\n\n        // Copy the column widths\n        var $firstRow = this.$table.find('tr:first'),\n            $cells = $firstRow.children(),\n            $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            $($helperCells[i]).width($($cells[i]).width());\n        }\n\n        return $helper;\n    }\n}, {\n    defaults: {\n        handle: '.move',\n        helperClass: 'datatablesorthelper'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend({\n    id: null,\n    userId: null,\n\n    $deleteActionRadios: null,\n    $deleteSpinner: null,\n\n    userSelect: null,\n    _deleting: false,\n\n    init: function(userId, settings) {\n        this.id = Math.floor(Math.random() * 1000000000);\n        this.userId = userId;\n        settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n        let $form = $(\n            '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n            Craft.getCsrfInput() +\n            '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n            (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n            (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n            '</form>'\n        ).appendTo(Garnish.$bod);\n        let $body = $(\n            '<div class=\"body\">' +\n            '<div class=\"content-summary\">' +\n            '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n            '<ul class=\"bullets\"></ul>' +\n            '</div>' +\n            '<div class=\"options\">' +\n            '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n            '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n            '<div class=\"elements\"></div>' +\n            '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n            '</div>' +\n            '</div>' +\n            '<div>' +\n            '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n            '</div>' +\n            '</div>'\n        ).appendTo($form);\n        let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo($buttons);\n\n        if (settings.contentSummary.length) {\n            for (let i = 0; i < settings.contentSummary.length; i++) {\n                $body.find('ul').append($('<li/>', {text: settings.contentSummary[i]}));\n            }\n        } else {\n            $body.find('ul').remove();\n        }\n\n        this.$deleteActionRadios = $body.find('input[type=radio]');\n        this.$deleteSubmitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: this._submitBtnLabel(false),\n        }).appendTo($buttons);\n        this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n        var idParam;\n\n        if (Garnish.isArray(this.userId)) {\n            idParam = ['and'];\n\n            for (let i = 0; i < this.userId.length; i++) {\n                idParam.push('not ' + this.userId[i]);\n            }\n        } else {\n            idParam = 'not ' + this.userId;\n        }\n\n        this.userSelect = new Craft.BaseElementSelectInput({\n            id: 'transferselect' + this.id,\n            name: 'transferContentTo',\n            elementType: 'craft\\\\elements\\\\User',\n            criteria: {\n                id: idParam\n            },\n            limit: 1,\n            modalSettings: {\n                closeOtherModals: false\n            },\n            onSelectElements: () => {\n                this.updateSizeAndPosition();\n\n                if (!this.$deleteActionRadios.first().prop('checked')) {\n                    this.$deleteActionRadios.first().trigger('click');\n                } else {\n                    this.validateDeleteInputs();\n                }\n            },\n            onRemoveElements: this.validateDeleteInputs.bind(this),\n            selectable: false,\n            editable: false\n        });\n\n        this.addListener($cancelBtn, 'click', 'hide');\n\n        this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n        this.addListener($form, 'submit', 'handleSubmit');\n\n        this.base($form, settings);\n    },\n\n    _submitBtnLabel: function(withContent) {\n        let message = withContent\n            ? 'Delete {num, plural, =1{user} other{users}} and content'\n            : 'Delete {num, plural, =1{user} other{users}}';\n\n        return Craft.t('app', message, {\n            num: Garnish.isArray(this.userId) ? this.userId.length : 1,\n        });\n    },\n\n    validateDeleteInputs: function() {\n        var validates = false;\n\n        if (this.$deleteActionRadios.eq(1).prop('checked')) {\n            validates = true;\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(true));\n        } else {\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(false));\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n        }\n\n        this.updateSizeAndPosition();\n\n        if (validates) {\n            this.$deleteSubmitBtn.removeClass('disabled');\n        } else {\n            this.$deleteSubmitBtn.addClass('disabled');\n        }\n\n        return validates;\n    },\n\n    handleSubmit: function(ev) {\n        if (this._deleting || !this.validateDeleteInputs()) {\n            ev.preventDefault();\n            return;\n        }\n\n        this.$deleteSubmitBtn.addClass('active');\n        this.$deleteSpinner.removeClass('hidden');\n        this.disable();\n        this.userSelect.disable();\n        this._deleting = true;\n\n        // Let the onSubmit callback prevent the form from getting submitted\n        try {\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        } catch (e) {\n            ev.preventDefault();\n            this.$deleteSpinner.addClass('hidden');\n            throw e;\n        }\n    },\n\n    onFadeIn: function() {\n        // Auto-focus the first radio\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$deleteActionRadios.first().trigger('focus');\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        contentSummary: [],\n        onSubmit: $.noop,\n        redirect: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend({\n    $revisionBtn: null,\n    $revisionLabel: null,\n    $spinner: null,\n    $expandSiteStatusesBtn: null,\n    $statusIcon: null,\n\n    $editMetaBtn: null,\n    metaHud: null,\n    $nameTextInput: null,\n    $saveMetaBtn: null,\n\n    $siteStatusPane: null,\n    $globalLightswitch: null,\n    $siteLightswitches: null,\n    $addlSiteField: null,\n\n    siteIds: null,\n    newSiteIds: null,\n\n    lastSerializedValue: null,\n    listeningForChanges: false,\n    pauseLevel: 0,\n    timeout: null,\n    saving: false,\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    queue: null,\n    submittingForm: false,\n\n    duplicatedElements: null,\n    errors: null,\n\n    openingPreview: false,\n    preview: null,\n    previewToken: null,\n    createdProvisionalDraft: false,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.DraftEditor.defaults);\n\n        this.queue = [];\n        this.duplicatedElements = {};\n\n        this.siteIds = Object.keys(this.settings.siteStatuses).map(siteId => {\n            return parseInt(siteId)\n        });\n\n        this.$revisionBtn = $('#context-btn');\n        this.$revisionLabel = $('#revision-label');\n        this.$spinner = $('#revision-spinner');\n        this.$expandSiteStatusesBtn = $('#expand-status-btn');\n        this.$statusIcon = $('#revision-status');\n\n        if (this.settings.canEditMultipleSites) {\n            this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n        }\n\n        if (this.settings.previewTargets.length) {\n            if (this.settings.enablePreview) {\n                this.addListener($('#preview-btn'), 'click', 'openPreview');\n            }\n\n            const $shareBtn = $('#share-btn');\n\n            if (this.settings.previewTargets.length === 1) {\n                this.addListener($shareBtn, 'click', function() {\n                    this.openShareLink(this.settings.previewTargets[0].url);\n                });\n            } else {\n                this.createShareMenu($shareBtn);\n            }\n        }\n\n        // If this is a revision, we're done here\n        if (this.settings.revisionId) {\n            return;\n        }\n\n        // Override the serializer to use our own\n        Craft.cp.$primaryForm.data('serializer', () => this.serializeForm(true));\n\n        this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n        if (this.settings.isProvisionalDraft) {\n            this.initForProvisionalDraft();\n        } else if (this.settings.draftId && !this.settings.isUnpublishedDraft) {\n            this.initForDraft();\n        } else if (!this.settings.canUpdateSource) {\n            // Override the save shortcut to create a draft too\n            this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', ev => {\n                if (ev.saveShortcut) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }\n            });\n        }\n\n        this.listenForChanges();\n\n        this.addListener(this.$statusIcon, 'click', () => {\n            this.showStatusHud(this.$statusIcon);\n        });\n    },\n\n    listenForChanges: function() {\n        if (this.listeningForChanges || this.pauseLevel > 0 || !Craft.autosaveDrafts || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        this.listeningForChanges = true;\n\n        this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n            if ($(ev.target).is(this.statusIcons())) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            // If they are typing, wait half a second before checking the form\n            if (['keypress', 'keyup', 'change'].includes(ev.type)) {\n                this.timeout = setTimeout(this.checkForm.bind(this), 500);\n            } else {\n                this.checkForm();\n            }\n        });\n    },\n\n    stopListeningForChanges: function() {\n        if (!this.listeningForChanges) {\n            return;\n        }\n\n        this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n        clearTimeout(this.timeout);\n        this.listeningForChanges = false;\n    },\n\n    pause: function() {\n        this.pauseLevel++;\n        this.stopListeningForChanges();\n    },\n\n    resume: function() {\n        if (this.pauseLevel === 0) {\n            throw 'Craft.DraftEditor::resume() should only be called after pause().';\n        }\n\n        // Only actually resume operation if this has been called the same\n        // number of times that pause() was called\n        this.pauseLevel--;\n        if (this.pauseLevel === 0) {\n            this.checkForm();\n            this.listenForChanges();\n        }\n    },\n\n    initForProvisionalDraft: function() {\n        let $button = $('#discard-changes');\n        if (!$button.length) {\n            $button = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu.$container.find('#discard-changes') : null;\n        }\n        if ($button && $button.length) {\n            this.addListener($button, 'click', () => {\n                if (confirm(Craft.t('app', 'Are you sure you want to discard your changes?'))) {\n                    Craft.submitForm(Craft.cp.$primaryForm, {\n                        action: this.settings.deleteDraftAction,\n                        redirect: this.settings.hashedCpEditUrl,\n                        params: {\n                            draftId: this.settings.draftId,\n                            provisional: this.settings.isProvisionalDraft,\n                        },\n                    });\n                }\n            });\n        }\n    },\n\n    initForDraft: function() {\n        // Create the edit draft button\n        this.createEditMetaBtn();\n\n        if (this.settings.canUpdateSource) {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n                alt: true\n            }, () => {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.publishDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }, 0);\n        }\n    },\n\n    expandSiteStatuses: function() {\n        this.removeListener(this.$expandSiteStatusesBtn, 'click');\n        this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', () => {\n            this.$expandSiteStatusesBtn.remove();\n        });\n\n        const $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n        this.$siteStatusPane = $enabledForSiteField.parent();\n\n        // If this is a revision, just show the site statuses statically and be done\n        if (this.settings.revisionId) {\n            this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n            return;\n        }\n\n        $enabledForSiteField.addClass('nested');\n        const $globalField = Craft.ui.createLightswitchField({\n            id: 'enabled',\n            label: Craft.t('app', 'Enabled'),\n            name: 'enabled',\n        }).insertBefore($enabledForSiteField);\n        $globalField.find('label').css('font-weight', 'bold');\n        this.$globalLightswitch = $globalField.find('.lightswitch');\n\n        if (!this.settings.revisionId) {\n            this._showField($globalField);\n        }\n\n        // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n        const originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n            ? '1'\n            : (this.settings.enabledForSite ? '-' : '');\n        const originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n            '=' + (this.settings.enabledForSite ? '1' : '');\n\n        this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n            .on('change', this._updateGlobalStatus.bind(this));\n\n        this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n\n        let serializedStatuses = `enabled=${originalEnabledValue}`;\n        for (let i = 0; i < this.$siteLightswitches.length; i++) {\n            const $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n            serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n        }\n\n        Craft.cp.$primaryForm.data('initialSerializedValue',\n            Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n        // Are there additional sites that can be added?\n        if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n            this._createAddlSiteField();\n        }\n\n        this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n        this._updateGlobalStatus();\n    },\n\n    /**\n     * @returns {Array}\n     */\n    _getOtherSupportedSites: function() {\n        return Craft.sites.filter(s => s.id != this.settings.siteId && this.siteIds.includes(s.id));\n    },\n\n    _showField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .height(0)\n            .velocity({height}, 'fast', () => {\n                $field.css({\n                    overflow: '',\n                    height: '',\n                });\n            });\n    },\n\n    _removeField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .velocity({height: 0}, 'fast', () => {\n                $field.remove();\n            });\n    },\n\n    _updateGlobalStatus: function() {\n        let allEnabled = true, allDisabled = true;\n        this.$siteLightswitches.each(function() {\n            const enabled = $(this).data('lightswitch').on;\n            if (enabled) {\n                allDisabled = false;\n            } else {\n                allEnabled = false;\n            }\n            if (!allEnabled && !allDisabled) {\n                return false;\n            }\n        });\n        if (allEnabled) {\n            this.$globalLightswitch.data('lightswitch').turnOn(true);\n        } else if (allDisabled) {\n            this.$globalLightswitch.data('lightswitch').turnOff(true);\n        } else {\n            this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n        }\n    },\n\n    _updateSiteStatuses: function() {\n        const enabled = this.$globalLightswitch.data('lightswitch').on;\n        this.$siteLightswitches.each(function() {\n            if (enabled) {\n                $(this).data('lightswitch').turnOn(true);\n            } else {\n                $(this).data('lightswitch').turnOff(true);\n            }\n        });\n    },\n\n    _createSiteStatusField: function(site) {\n        const $field = Craft.ui.createLightswitchField({\n            id: `enabledForSite-${site.id}`,\n            label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n            name: `enabledForSite[${site.id}]`,\n            on: this.settings.siteStatuses.hasOwnProperty(site.id)\n                ? this.settings.siteStatuses[site.id]\n                : true,\n            disabled: !!this.settings.revisionId,\n        });\n\n        if (this.$addlSiteField) {\n            $field.insertBefore(this.$addlSiteField);\n        } else {\n            $field.appendTo(this.$siteStatusPane);\n        }\n\n        if (!this.settings.revisionId) {\n            $field.addClass('nested');\n            const $lightswitch = $field.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n        }\n\n        this._showField($field);\n\n        return $field;\n    },\n\n    _createAddlSiteField: function() {\n        const addlSites = Craft.sites.filter(s => {\n            return !this.siteIds.includes(s.id) && this.settings.addlSiteIds.includes(s.id);\n        });\n\n        if (!addlSites.length) {\n            return;\n        }\n\n        const $addlSiteSelectContainer = Craft.ui.createSelect({\n            options: [\n                {label: Craft.t('app', 'Add a site…')},\n                ...addlSites.map(s => {\n                    return {label: s.name, value: s.id};\n                }),\n            ],\n        }).addClass('fullwidth');\n\n        this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n            .addClass('nested add')\n            .appendTo(this.$siteStatusPane);\n\n        const $addlSiteSelect = $addlSiteSelectContainer.find('select');\n\n        $addlSiteSelect.on('change', () => {\n            const siteId = parseInt($addlSiteSelect.val());\n            const site = Craft.sites.find(s => s.id === siteId);\n\n            if (!site) {\n                return;\n            }\n\n            this._createSiteStatusField(site);\n\n            $addlSiteSelect\n                .val('')\n                .find(`option[value=\"${siteId}\"]`).remove();\n\n            if (this.newSiteIds === null) {\n                this.newSiteIds = [];\n            }\n\n            this.siteIds.push(siteId);\n            this.newSiteIds.push(siteId);\n\n            // Was that the last site?\n            if ($addlSiteSelect.find('option').length === 1) {\n                this._removeField(this.$addlSiteField);\n            }\n        });\n\n        this._showField(this.$addlSiteField);\n    },\n\n    showStatusHud: function(target) {\n        let bodyHtml;\n\n        if (this.errors === null) {\n            bodyHtml = `<p>${this._saveSuccessMessage()}</p>`;\n        } else {\n            bodyHtml = `<p class=\"error\">${this._saveFailMessage()}</p>`;\n\n            if (this.errors.length) {\n                bodyHtml += '<ul class=\"errors\">' +\n                    this.errors.map(e => `<li>${Craft.escapeHtml(e)}</li>`).join('') +\n                    '</ul>';\n            }\n        }\n\n        const hud = new Garnish.HUD(target, bodyHtml, {\n            onHide: function() {\n                hud.destroy();\n            }\n        });\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveSuccessMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes have been stored.')\n            : Craft.t('app', 'The draft has been saved.');\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveFailMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes could not be stored.')\n            : Craft.t('app', 'The draft could not be saved.');\n    },\n\n    spinners: function() {\n        return this.preview\n            ? this.$spinner.add(this.preview.$spinner)\n            : this.$spinner;\n    },\n\n    statusIcons: function() {\n        return this.preview\n            ? this.$statusIcon.add(this.preview.$statusIcon)\n            : this.$statusIcon;\n    },\n\n    createEditMetaBtn: function() {\n        this.$editMetaBtn = $('<button/>', {\n            type: 'button',\n            'class': 'btn edit icon',\n            title: Craft.t('app', 'Edit draft settings'),\n        }).appendTo($('#context-btngroup'));\n        this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n    },\n\n    createShareMenu: function($shareBtn) {\n        $shareBtn.addClass('menubtn');\n\n        const $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n        const $ul = $('<ul/>').appendTo($menu);\n\n        this.settings.previewTargets.forEach(target => {\n            const $li = $('<li/>').appendTo($ul);\n            const $a = $('<a/>', {\n                text: target.label,\n            }).appendTo($li);\n            this.addListener($a, 'click', () => {\n                this.openShareLink(target.url);\n            });\n        });\n    },\n\n    getPreviewToken: function() {\n        return new Promise((resolve, reject) => {\n            if (this.previewToken) {\n                resolve(this.previewToken);\n                return;\n            }\n\n            Craft.sendActionRequest('POST', 'preview/create-token', {\n                data: {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                    provisional: this.settings.isProvisionalDraft,\n                },\n            }).then(response => {\n                this.previewToken = response.data.token;\n                resolve(this.previewToken);\n            }).catch(reject);\n        });\n    },\n\n    getTokenizedPreviewUrl: function(url, randoParam) {\n        return new Promise((resolve, reject) => {\n            const params = {};\n\n            if (randoParam || !this.settings.isLive) {\n                // Randomize the URL so CDNs don't return cached pages\n                params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n            }\n\n            if (this.settings.siteToken) {\n                params[Craft.siteToken] = this.settings.siteToken;\n            }\n\n            // No need for a token if we're looking at a live element\n            if (this.settings.isLive) {\n                resolve(Craft.getUrl(url, params));\n                return;\n            }\n\n            this.getPreviewToken().then(function(token) {\n                params[Craft.tokenParam] = token;\n                resolve(Craft.getUrl(url, params));\n            }).catch(reject);\n        });\n    },\n\n    openShareLink: function(url) {\n        this.getTokenizedPreviewUrl(url).then(function(url) {\n            window.open(url);\n        });\n    },\n\n    getPreview: function() {\n        if (!this.preview) {\n            this.preview = new Craft.Preview(this);\n        }\n        return this.preview;\n    },\n\n    openPreview: function() {\n        return new Promise((resolve, reject) => {\n            this.openingPreview = true;\n            this.ensureIsDraftOrRevision(true)\n                .then(() => {\n                    this.getPreview().open();\n                    this.openingPreview = false;\n                    resolve();\n                })\n                .catch(reject);\n        })\n    },\n\n    ensureIsDraftOrRevision: function(onlyIfChanged) {\n        return new Promise((resolve, reject) => {\n            if (!this.settings.draftId && !this.settings.revisionId) {\n                if (\n                    onlyIfChanged &&\n                    this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                ) {\n                    resolve();\n                    return;\n                }\n\n                this.createDraft()\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                resolve();\n            }\n        });\n    },\n\n    serializeForm: function(removeActionParams) {\n        let data = Craft.cp.$primaryForm.serialize();\n\n        if (this.isPreviewActive()) {\n            // Replace the temp input with the preview form data\n            data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n        }\n\n        if (removeActionParams && !this.settings.isUnpublishedDraft) {\n            // Remove action and redirect params\n            data = data.replace(/&action=[^&]*/, '');\n            data = data.replace(/&redirect=[^&]*/, '');\n        }\n\n        return data;\n    },\n\n    checkForm: function(force) {\n        // If this isn't a draft and there's no active preview, then there's nothing to check\n        if (this.settings.revisionId || this.pauseLevel > 0 || !Craft.autosaveDrafts || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        clearTimeout(this.timeout);\n        this.timeout = null;\n\n        // Has anything changed?\n        const data = this.serializeForm(true);\n        if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n            const provisional = (!this.settings.draftId || this.settings.isProvisionalDraft) && !this.settings.revisionId;\n            this.saveDraft(data, provisional);\n        }\n    },\n\n    isPreviewActive: function() {\n        return this.preview && this.preview.isActive;\n    },\n\n    createDraft: function() {\n        return new Promise((resolve, reject) => {\n            this.saveDraft(this.serializeForm(true))\n                .then(resolve)\n                .catch(reject);\n        });\n    },\n\n    /**\n     * @param {object} data\n     * @returns {Promise<unknown>}\n     */\n    saveDraft: function(data) {\n        return new Promise((resolve, reject) => {\n            // Ignore if we're already submitting the main form\n            if (this.submittingForm) {\n                reject();\n                return;\n            }\n\n            if (this.saving) {\n                this.queue.push(() => {\n                    this.checkForm()\n                });\n                return;\n            }\n\n            this.lastSerializedValue = data;\n            this.saving = true;\n            this.errors = null;\n            this.cancelToken = axios.CancelToken.source();\n            this.spinners().removeClass('hidden');\n\n            this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('invisible checkmark-icon alert-icon fade-out')\n                .addClass('hidden');\n\n            if (this.$saveMetaBtn) {\n                this.$saveMetaBtn.addClass('active');\n            }\n\n            // Prep the data to be saved, keeping track of the first input name for each delta group\n            let modifiedFieldNames = [];\n            let preparedData = this.prepareData(data, (deltaName, params)  => {\n                if (!this.settings.isUnpublishedDraft && params.length) {\n                    modifiedFieldNames.push(decodeURIComponent(params[0].split('=')[0]));\n                }\n            });\n\n            // Are we saving a provisional draft?\n            if (this.settings.isProvisionalDraft || !this.settings.draftId) {\n                preparedData += '&provisional=1';\n            }\n\n            Craft.sendActionRequest('POST', this.settings.saveDraftAction, {\n                cancelToken: this.cancelToken.token,\n                headers: {\n                    'content-type': 'application/x-www-form-urlencoded',\n                },\n                data: preparedData,\n            }).then(response => {\n                this._afterSaveRequest();\n\n                if (response.data.errors) {\n                    this.errors = response.data.errors;\n                    this._showFailStatus();\n                    reject();\n                }\n\n                const createdProvisionalDraft = !this.settings.draftId;\n\n                if (createdProvisionalDraft) {\n                    this.settings.isProvisionalDraft = true;\n                    this.createdProvisionalDraft = true;\n                }\n\n                if (response.data.title) {\n                    $('#header h1').text(response.data.title);\n                }\n\n                if (response.data.docTitle) {\n                    document.title = response.data.docTitle;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        this.$revisionLabel.append(\n                            $('<span/>', {\n                                class: 'extralight',\n                                text: ` — ${Craft.t('app', 'Edited')}`,\n                            })\n                        );\n                    }\n                } else {\n                    this.$revisionLabel.text(response.data.draftName);\n                    this.settings.draftName = response.data.draftName;\n                }\n\n                let revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                // Did we just add a site?\n                if (this.newSiteIds) {\n                    // Do we need to create the revision menu?\n                    if (!revisionMenu) {\n                        this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                        new Garnish.MenuBtn(this.$revisionBtn);\n                        revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                        revisionMenu.$container.removeClass('hidden');\n                    }\n                    this.newSiteIds.forEach(siteId => {\n                        const $option = revisionMenu.$options.filter(`[data-site-id=${siteId}]`);\n                        $option.find('.status').removeClass('disabled').addClass('enabled');\n                        const $li = $option.parent().removeClass('hidden');\n                        $li.closest('.site-group').removeClass('hidden');\n                    });\n                    revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                    this.newSiteIds = null;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        // Replace the action\n                        const $actionInput = $('#action').attr('value', this.settings.publishDraftAction);\n\n                        // Update the editor settings\n                        this.settings.draftId = response.data.draftId;\n                        this.settings.isLive = false;\n                        this.previewToken = null;\n\n                        if (revisionMenu) {\n                            // Add edited description to the “Current” option\n                            revisionMenu.$container.find('#current-revision').append(\n                                $('<div/>', {\n                                    class: 'edited-desc',\n                                }).append(\n                                    $('<p/>', {\n                                        text: Craft.t('app', 'Showing your unsaved changes.'),\n                                    })\n                                ).append(\n                                    $('<button/>', {\n                                        id: 'discard-changes',\n                                        class: 'btn',\n                                        text: Craft.t('app', 'Discard changes'),\n                                    })\n                                )\n                            );\n                        }\n\n                        this.initForProvisionalDraft();\n                    }\n                } else if (revisionMenu) {\n                    revisionMenu.$options.filter('.sel').find('.draft-name').text(response.data.draftName);\n                    revisionMenu.$options.filter('.sel').find('.draft-meta').text(response.data.creator\n                        ? Craft.t('app', 'Saved {timestamp} by {creator}', {\n                            timestamp: response.data.timestamp,\n                            creator: response.data.creator\n                        })\n                        : Craft.t('app', 'Saved {timestamp}', {\n                            timestamp: response.data.timestamp,\n                        })\n                    );\n                }\n\n                // Did the controller send us updated preview targets?\n                if (\n                    response.data.previewTargets &&\n                    JSON.stringify(response.data.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                ) {\n                    this.updatePreviewTargets(response.data.previewTargets);\n                }\n\n                this.afterUpdate(data);\n\n                if (createdProvisionalDraft) {\n                    this.trigger('createProvisionalDraft');\n                }\n\n                if (this.$nameTextInput) {\n                    this.checkMetaValues();\n                }\n\n                for (const oldId in response.data.duplicatedElements) {\n                    if (oldId != this.settings.sourceId && response.data.duplicatedElements.hasOwnProperty(oldId)) {\n                        this.duplicatedElements[oldId] = response.data.duplicatedElements[oldId];\n                    }\n                }\n\n                // Add missing field modified indicators\n                const selectors = response.data.modifiedAttributes.map(attr => `[name=\"${attr}\"],[name^=\"${attr}[\"]`)\n                    .concat(modifiedFieldNames.map(name => `[name=\"${name}\"]`));\n\n                const $fields = $(selectors.join(',')).closest('.field:not(:has(> .status-badge))');\n                for (let i = 0; i < $fields.length; i++) {\n                    $fields.eq(i).prepend(\n                        $('<div/>', {\n                            class: 'status-badge modified',\n                            title: Craft.t('app', 'This field has been modified.'),\n                            'aria-label': Craft.t('app', 'This field has been modified.'),\n                        })\n                    );\n                }\n\n                resolve();\n            }).catch(() => {\n                this._afterSaveRequest();\n\n                if (!this.ignoreFailedRequest) {\n                    this.errors = [];\n                    this._showFailStatus();\n                    reject();\n                }\n\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    _afterSaveRequest: function() {\n        this.spinners().addClass('hidden');\n        if (this.$saveMetaBtn) {\n            this.$saveMetaBtn.removeClass('active');\n        }\n        this.saving = false;\n    },\n\n    _showFailStatus: function() {\n        this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden checkmark-icon')\n            .addClass('alert-icon')\n            .attr('title', this._saveFailMessage());\n    },\n\n    /**\n     * @param {string} data\n     * @param {function} [deltaCallback] Callback function that should be passed to `Craft.findDeltaData()`\n     * @returns {string}\n     */\n    prepareData: function(data, deltaCallback) {\n        // Swap out element IDs with their duplicated ones\n        data = this.swapDuplicatedElementIds(data);\n\n        // Add the draft info\n        if (this.settings.draftId) {\n            data += `&draftId=${this.settings.draftId}`;\n            if (this.settings.isProvisionalDraft) {\n                data += '&provisional=1';\n            }\n        }\n\n        if (this.settings.draftName !== null) {\n            data += `&draftName=${this.settings.draftName}`;\n        }\n\n        // Filter out anything that hasn't changed\n        const initialData = this.swapDuplicatedElementIds(Craft.cp.$primaryForm.data('initialSerializedValue') || '');\n        return Craft.findDeltaData(initialData, data, this.getDeltaNames(), deltaCallback);\n    },\n\n    /**\n     * @param {string} data\n     * @returns {string}\n     */\n    swapDuplicatedElementIds: function(data) {\n        const idsRE = Object.keys(this.duplicatedElements).join('|');\n        if (idsRE === '') {\n            return data;\n        }\n        const lb = encodeURIComponent('[');\n        const rb = encodeURIComponent(']');\n        // Keep replacing field IDs until data stops changing\n        while (true) {\n            if (data === (\n                data = data\n                    // &fields[...][X]\n                    .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                        return pre + this.duplicatedElements[id] + post;\n                    })\n                    // &fields[...=X\n                    .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                        return pre + this.duplicatedElements[id];\n                    })\n            )) {\n                break;\n            }\n        }\n        return data;\n    },\n\n    getDeltaNames: function() {\n        const deltaNames = Craft.deltaNames.slice(0);\n        for (let i = 0; i < deltaNames.length; i++) {\n            for (const oldId in this.duplicatedElements) {\n                if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                    deltaNames[i] = deltaNames[i].replace('][' + oldId + ']', '][' + this.duplicatedElements[oldId] + ']');\n                }\n            }\n        }\n        return deltaNames;\n    },\n\n    updatePreviewTargets: function(previewTargets) {\n        previewTargets.forEach(newTarget => {\n            const currentTarget = this.settings.previewTargets.find(t => t.label === newTarget.label);\n            if (currentTarget) {\n                currentTarget.url = newTarget.url;\n            }\n        });\n    },\n\n    afterUpdate: function(data) {\n        Craft.cp.$primaryForm.data('initialSerializedValue', data);\n        Craft.initialDeltaValues = {};\n        const $statusIcons = this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden')\n            .addClass('checkmark-icon')\n            .attr('title', this._saveSuccessMessage());\n\n        if (!Craft.autosaveDrafts) {\n            // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n            $statusIcons\n                .velocity('stop')\n                .velocity({\n                    opacity: 0,\n                }, {\n                    delay: 2000,\n                    complete: () => {\n                        $statusIcons.addClass('hidden');\n                    },\n                });\n        }\n\n        this.trigger('update');\n\n        this.nextInQueue();\n    },\n\n    nextInQueue: function() {\n        if (this.queue.length) {\n            this.queue.shift()();\n        }\n    },\n\n    showMetaHud: function() {\n        if (!this.metaHud) {\n            this.createMetaHud();\n            this.onMetaHudShow();\n        } else {\n            this.metaHud.show();\n        }\n\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$nameTextInput.trigger('focus');\n        }\n    },\n\n    createMetaHud: function() {\n        const $hudBody = $('<div/>');\n\n        // Add the Name field\n        const $nameField = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n        const $nameInputContainer = $('<div class=\"input\"/>').appendTo($nameField);\n        this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($nameInputContainer).val(this.settings.draftName);\n\n        // HUD footer\n        const $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n        $('<div class=\"flex-grow\"></div>').appendTo($footer);\n        this.$saveMetaBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo($footer);\n\n        this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n            onSubmit: this.saveMeta.bind(this)\n        });\n\n        this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n\n        this.metaHud.on('show', this.onMetaHudShow.bind(this));\n        this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n        this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n    },\n\n    onMetaHudShow: function() {\n        this.$editMetaBtn.addClass('active');\n    },\n\n    onMetaHudHide: function() {\n        this.$editMetaBtn.removeClass('active');\n    },\n\n    onMetaHudEscape: function() {\n        this.$nameTextInput.val(this.settings.draftName);\n    },\n\n    checkMetaValues: function() {\n        if (\n            this.$nameTextInput.val() &&\n            this.$nameTextInput.val() !== this.settings.draftName\n        ) {\n            this.$saveMetaBtn.removeClass('disabled');\n            return true;\n        }\n\n        this.$saveMetaBtn.addClass('disabled');\n        return false;\n    },\n\n    shakeMetaHud: function() {\n        Garnish.shake(this.metaHud.$hud);\n    },\n\n    saveMeta: function() {\n        if (!this.checkMetaValues()) {\n            this.shakeMetaHud();\n            return;\n        }\n\n        this.settings.draftName = this.$nameTextInput.val();\n\n        this.metaHud.hide();\n        this.checkForm(true);\n    },\n\n    handleFormSubmit: function(ev) {\n        ev.preventDefault();\n\n        // Prevent double form submits\n        if (this.submittingForm) {\n            return;\n        }\n\n        // If this a draft and was this a normal save (either via submit button or save shortcut),\n        // then trigger an autosave\n        if (\n            this.settings.draftId &&\n            !this.settings.isUnpublishedDraft &&\n            !this.settings.isProvisionalDraft &&\n            (typeof ev.autosave === 'undefined' || ev.autosave) &&\n            (ev.saveShortcut || (ev.customTrigger && ev.customTrigger.data('action') === this.settings.saveDraftAction))\n        ) {\n            this.checkForm(true);\n            return;\n        }\n\n        // Prevent the normal unload confirmation dialog\n        Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n        // Abort the current save request if there is one\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n\n        // Duplicate the form with normalized data\n        const data = this.prepareData(this.serializeForm(false));\n        const $form = Craft.createForm(data);\n\n        $form.appendTo(Garnish.$bod);\n        $form.submit();\n        this.submittingForm = true;\n    },\n}, {\n    defaults: {\n        elementType: null,\n        sourceId: null,\n        siteId: null,\n        isUnpublishedDraft: false,\n        enabled: false,\n        enabledForSite: false,\n        isLive: false,\n        isProvisionalDraft: false,\n        siteStatuses: null,\n        addlSiteIds: [],\n        cpEditUrl: null,\n        draftId: null,\n        revisionId: null,\n        draftName: null,\n        canEditMultipleSites: false,\n        canUpdateSource: false,\n        saveDraftAction: null,\n        deleteDraftAction: null,\n        publishDraftAction: null,\n        hashedCpEditUrl: null,\n        hashedAddAnotherRedirectUrl: null,\n        enablePreview: false,\n        previewTargets: [],\n        siteToken: null,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend({\n    callback: $.noop,\n\n    init: function(source, target, callback) {\n        this.callback = callback;\n        this.base(source, target);\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return this.callback(sourceVal);\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend({\n    initialized: false,\n\n    id: null,\n    baseName: null,\n    columns: null,\n    sorter: null,\n    biggestId: -1,\n\n    $table: null,\n    $tbody: null,\n    $addRowBtn: null,\n\n    rowCount: 0,\n    hasMaxRows: false,\n    hasMinRows: false,\n\n    radioCheckboxes: null,\n\n    init: function(id, baseName, columns, settings) {\n        this.id = id;\n        this.baseName = baseName;\n        this.columns = columns;\n        this.setSettings(settings, Craft.EditableTable.defaults);\n        this.radioCheckboxes = {};\n\n        this.$table = $('#' + id);\n        this.$tbody = this.$table.children('tbody');\n        this.rowCount = this.$tbody.find('tr').length;\n\n        // Is this already an editable table?\n        if (this.$table.data('editable-table')) {\n            Garnish.log('Double-instantiating an editable table on an element');\n            this.$table.data('editable-table').destroy();\n        }\n\n        this.$table.data('editable-table', this);\n\n        this.sorter = new Craft.DataTableSorter(this.$table, {\n            helperClass: 'editabletablesorthelper',\n            copyDraggeeInputValuesToHelper: true\n        });\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            // Give everything a chance to initialize\n            setTimeout(this.initializeIfVisible.bind(this), 500);\n        }\n\n        if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n            for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                this.addRow()\n            }\n        }\n    },\n\n    isVisible: function() {\n        return (this.$table.parent().height() > 0);\n    },\n\n    initialize: function() {\n        if (this.initialized) {\n            return false;\n        }\n\n        this.initialized = true;\n        this.removeListener(Garnish.$win, 'resize');\n\n        var $rows = this.$tbody.children();\n\n        for (var i = 0; i < $rows.length; i++) {\n            this.createRowObj($rows[i]);\n        }\n\n        this.$addRowBtn = this.$table.next('.add');\n        this.updateAddRowButton();\n        this.addListener(this.$addRowBtn, 'activate', 'addRow');\n        return true;\n    },\n    initializeIfVisible: function() {\n        this.removeListener(Garnish.$win, 'resize');\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n        }\n    },\n    updateAddRowButton: function() {\n        if (!this.canAddRow()) {\n            this.$addRowBtn.css('opacity', '0.2');\n            this.$addRowBtn.css('pointer-events', 'none');\n        } else {\n            this.$addRowBtn.css('opacity', '1');\n            this.$addRowBtn.css('pointer-events', 'auto');\n        }\n    },\n    canDeleteRow: function() {\n        return (this.rowCount > this.settings.minRows);\n    },\n    deleteRow: function(row) {\n        if (!this.canDeleteRow()) {\n            return;\n        }\n\n        this.sorter.removeItems(row.$tr);\n        row.$tr.remove();\n\n        this.rowCount--;\n\n        this.updateAddRowButton();\n        if (this.rowCount === 0) {\n            this.$table.addClass('hidden');\n        }\n\n        // onDeleteRow callback\n        this.settings.onDeleteRow(row.$tr);\n\n        row.destroy();\n    },\n    canAddRow: function() {\n        if (this.settings.staticRows) {\n            return false;\n        }\n\n        if (this.settings.maxRows) {\n            return (this.rowCount < this.settings.maxRows);\n        }\n\n        return true;\n    },\n    addRow: function(focus, prepend) {\n        if (!this.canAddRow()) {\n            return;\n        }\n\n        var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n            $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n        if (prepend) {\n            $tr.prependTo(this.$tbody);\n        } else {\n            $tr.appendTo(this.$tbody);\n        }\n\n        var row = this.createRowObj($tr);\n        this.sorter.addItems($tr);\n\n        // Focus the first input in the row\n        if (focus !== false) {\n            $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n        }\n\n        this.rowCount++;\n        this.updateAddRowButton();\n        this.$table.removeClass('hidden');\n\n        // onAddRow callback\n        this.settings.onAddRow($tr);\n\n        return row;\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n    },\n\n    createRowObj: function($tr) {\n        return new Craft.EditableTable.Row(this, $tr);\n    },\n\n    focusOnPrevRow: function($tr, tdIndex, blurTd) {\n        var $prevTr = $tr.prev('tr');\n        var prevRow;\n\n        if ($prevTr.length) {\n            prevRow = $prevTr.data('editable-table-row');\n        } else {\n            prevRow = this.addRow(false, true);\n        }\n\n        // Focus on the same cell in the previous row\n        if (!prevRow) {\n            return;\n        }\n\n        if (!prevRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($prevTr) {\n                this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    focusOnNextRow: function($tr, tdIndex, blurTd) {\n        var $nextTr = $tr.next('tr');\n        var nextRow;\n\n        if ($nextTr.length) {\n            nextRow = $nextTr.data('editable-table-row');\n        } else {\n            nextRow = this.addRow(false);\n        }\n\n        // Focus on the same cell in the next row\n        if (!nextRow) {\n            return;\n        }\n\n        if (!nextRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($nextTr) {\n                this.focusOnNextRow($nextTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    importData: function(data, row, tdIndex) {\n        let lines = data.split(/\\r?\\n|\\r/);\n        for (let i = 0; i < lines.length; i++) {\n            let values = lines[i].split(\"\\t\");\n            for (let j = 0; j < values.length; j++) {\n                let value = values[j];\n                row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                    .val(value)\n                    .trigger('input');\n            }\n\n            // move onto the next row\n            let $nextTr = row.$tr.next('tr');\n            if ($nextTr.length) {\n                row = $nextTr.data('editable-table-row');\n            } else {\n                row = this.addRow(false);\n            }\n        }\n    },\n}, {\n    textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n    defaults: {\n        rowIdPrefix: '',\n        defaultValues: {},\n        staticRows: false,\n        minRows: null,\n        maxRows: null,\n        onAddRow: $.noop,\n        onDeleteRow: $.noop\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        var $tr = $('<tr/>', {\n            'data-id': rowId\n        });\n\n        for (var colId in columns) {\n            if (!columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            var col = columns[colId],\n                value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                $cell;\n\n            if (col.type === 'heading') {\n                $cell = $('<th/>', {\n                    'scope': 'row',\n                    'class': col['class'],\n                    'html': value\n                });\n            } else {\n                var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                $cell = $('<td/>', {\n                    'class': `${col.class} ${col.type}-cell`,\n                    'width': col.width\n                });\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $cell.addClass('textual');\n                }\n\n                if (col.code) {\n                    $cell.addClass('code');\n                }\n\n                switch (col.type) {\n                    case 'checkbox':\n                        $('<div class=\"checkbox-wrapper\"/>')\n                            .append(Craft.ui.createCheckbox({\n                                    name: name,\n                                    value: col.value || '1',\n                                    checked: !!value\n                                })\n                            )\n                            .appendTo($cell);\n                        break;\n\n                    case 'color':\n                        Craft.ui.createColorInput({\n                            name: name,\n                            value: value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'date':\n                        Craft.ui.createDateInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'lightswitch':\n                        Craft.ui.createLightswitch({\n                            name: name,\n                            value: col.value || '1',\n                            on: !!value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'select':\n                        Craft.ui.createSelect({\n                            name: name,\n                            options: col.options,\n                            value: value || (function() {\n                                for (var key in col.options) {\n                                    if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                        return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                    }\n                                }\n                                return null;\n                            })(),\n                            'class': 'small'\n                        }).appendTo($cell);\n                        break;\n\n                    case 'time':\n                        Craft.ui.createTimeInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'email':\n                    case 'url':\n                        Craft.ui.createTextInput({\n                            name: name,\n                            value: value,\n                            type: col.type,\n                            placeholder: col.placeholder || null,\n                        }).appendTo($cell);\n                        break;\n\n                    default:\n                        $('<textarea/>', {\n                            'name': name,\n                            'rows': col.rows || 1,\n                            'val': value,\n                            'placeholder': col.placeholder\n                        }).appendTo($cell);\n                }\n            }\n\n            $cell.appendTo($tr);\n        }\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'move icon',\n                'title': Craft.t('app', 'Reorder')\n            })\n        ).appendTo($tr);\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Delete')\n            })\n        ).appendTo($tr);\n\n        return $tr;\n    }\n});\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend({\n    table: null,\n    id: null,\n    niceTexts: null,\n\n    $tr: null,\n    $tds: null,\n    tds: null,\n    $textareas: null,\n    $deleteBtn: null,\n\n    init: function(table, tr) {\n        this.table = table;\n        this.$tr = $(tr);\n        this.$tds = this.$tr.children();\n        this.tds = [];\n        this.id = this.$tr.attr('data-id');\n\n        this.$tr.data('editable-table-row', this);\n\n        // Get the row ID, sans prefix\n        var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n        if (id > this.table.biggestId) {\n            this.table.biggestId = id;\n        }\n\n        this.$textareas = $();\n        this.niceTexts = [];\n        var textareasByColId = {};\n\n        var i = 0;\n        var colId, col, td, $textarea, $checkbox;\n\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n            td = this.tds[colId] = this.$tds[i];\n\n            if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                $textarea = $('textarea', td);\n                this.$textareas = this.$textareas.add($textarea);\n\n                this.addListener($textarea, 'focus', 'onTextareaFocus');\n                this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                this.niceTexts.push(new Garnish.NiceText($textarea, {\n                    onHeightChange: this.onTextareaHeightChange.bind(this)\n                }));\n\n                this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                $textarea.trigger('input');\n\n                if (col.type !== 'multiline') {\n                    this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                }\n\n                textareasByColId[colId] = $textarea;\n            } else if (col.type === 'checkbox') {\n                $checkbox = $('input[type=\"checkbox\"]', td);\n\n                if (col.radioMode) {\n                    if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                        this.table.radioCheckboxes[colId] = [];\n                    }\n                    this.table.radioCheckboxes[colId].push($checkbox[0]);\n                    this.addListener($checkbox, 'change', {colId}, 'onRadioCheckboxChange');\n                }\n\n                if (col.toggle) {\n                    this.addListener($checkbox, 'change', {colId}, function(ev) {\n                        this.applyToggleCheckbox(ev.data.colId);\n                    });\n                }\n            }\n\n            if (!$(td).hasClass('disabled')) {\n                this.addListener(td, 'click', {td}, function(ev) {\n                    if (ev.target === ev.data.td) {\n                        $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                    }\n                });\n            }\n\n            i++;\n        }\n\n        // Now that all of the text cells have been nice-ified, let's normalize the heights\n        this.onTextareaHeightChange();\n\n        // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n            col = this.table.columns[colId];\n            if (col.type === 'checkbox' && col.toggle) {\n                this.applyToggleCheckbox(colId);\n            }\n        }\n\n        // Now look for any autopopulate columns\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n\n            if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                    allowNonAlphaStart: true\n                });\n            }\n        }\n\n        var $deleteBtn = this.$tr.children().last().find('.delete');\n        this.addListener($deleteBtn, 'click', 'deleteRow');\n\n        var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n        this.addListener($inputs, 'focus', function(ev) {\n            $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n        });\n        this.addListener($inputs, 'blur', function(ev) {\n            $(ev.currentTarget).closest('td').removeClass('focus');\n        });\n    },\n\n    onTextareaFocus: function(ev) {\n        this.onTextareaHeightChange();\n\n        var $textarea = $(ev.currentTarget);\n\n        if ($textarea.data('ignoreNextFocus')) {\n            $textarea.data('ignoreNextFocus', false);\n            return;\n        }\n\n        setTimeout(function() {\n            Craft.selectFullValue($textarea);\n        }, 0);\n    },\n\n    onRadioCheckboxChange: function(ev) {\n        if (ev.currentTarget.checked) {\n            for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                checkbox.checked = (checkbox === ev.currentTarget);\n            }\n        }\n    },\n\n    applyToggleCheckbox: function(checkboxColId) {\n        var checkboxCol = this.table.columns[checkboxColId];\n        var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n        var colId, colIndex, neg;\n        for (var i = 0; i < checkboxCol.toggle.length; i++) {\n            colId = checkboxCol.toggle[i];\n            colIndex = this.table.colum;\n            neg = colId[0] === '!';\n            if (neg) {\n                colId = colId.substr(1);\n            }\n            if ((checked && !neg) || (!checked && neg)) {\n                $(this.tds[colId])\n                    .removeClass('disabled')\n                    .find('textarea, input').prop('disabled', false);\n            } else {\n                $(this.tds[colId])\n                    .addClass('disabled')\n                    .find('textarea, input').prop('disabled', true);\n            }\n        }\n    },\n\n    ignoreNextTextareaFocus: function(ev) {\n        $.data(ev.currentTarget, 'ignoreNextFocus', true);\n    },\n\n    handleKeypress: function(ev) {\n        var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n        var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n        // Going to the next/previous row?\n        if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n            ev.preventDefault();\n            if (ev.shiftKey) {\n                this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            } else {\n                this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            }\n            return;\n        }\n\n        // Was this an invalid number character?\n        if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n            ev.preventDefault();\n        }\n    },\n\n    handlePaste: function(ev) {\n        let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n        if (!data.match(/[\\t\\r\\n]/)) {\n            return;\n        }\n        ev.preventDefault();\n        this.table.importData(data, this, ev.data.tdIndex);\n    },\n\n    validateValue: function(ev) {\n        if (ev.data.type === 'multiline') {\n            return;\n        }\n\n        var safeValue;\n\n        if (ev.data.type === 'number') {\n            // Only grab the number at the beginning of the value (if any)\n            var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n            if (match !== null) {\n                safeValue = match[1];\n            } else {\n                safeValue = '';\n            }\n        } else {\n            // Just strip any newlines\n            safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n        }\n\n        if (safeValue !== ev.currentTarget.value) {\n            ev.currentTarget.value = safeValue;\n        }\n    },\n\n    onTextareaHeightChange: function() {\n        // Keep all the textareas' heights in sync\n        var tallestTextareaHeight = -1;\n\n        for (var i = 0; i < this.niceTexts.length; i++) {\n            if (this.niceTexts[i].height > tallestTextareaHeight) {\n                tallestTextareaHeight = this.niceTexts[i].height;\n            }\n        }\n\n        this.$textareas.css('min-height', tallestTextareaHeight);\n\n        // If the <td> is still taller, go with that instead\n        var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n        if (tdHeight > tallestTextareaHeight) {\n            this.$textareas.css('min-height', tdHeight);\n        }\n    },\n\n    deleteRow: function() {\n        this.table.deleteRow(this);\n    }\n}, {\n    numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend({\n    maxLevels: null,\n    newChildUrl: null,\n    $trigger: null,\n    $selectedItems: null,\n    triggerEnabled: true,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n        this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n        // Do we have a custom handler?\n        if (this.settings.activate) {\n            // Prevent the element index's click handler\n            this.$trigger.data('custom-handler', true);\n\n            // Is this a custom trigger?\n            if (this.$trigger.prop('nodeName') === 'FORM') {\n                this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n            } else {\n                this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n            }\n        }\n\n        this.updateTrigger();\n        Craft.elementIndex.on('selectionChange', this.updateTrigger.bind(this));\n    },\n\n    updateTrigger: function() {\n        // Ignore if the last element was just unselected\n        if (Craft.elementIndex.getSelectedElements().length === 0) {\n            return;\n        }\n\n        if (this.validateSelection()) {\n            this.enableTrigger();\n        } else {\n            this.disableTrigger();\n        }\n    },\n\n    /**\n     * Determines if this action can be performed on the currently selected elements.\n     *\n     * @return boolean\n     */\n    validateSelection: function() {\n        var valid = true;\n        this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n        if (!this.settings.batch && this.$selectedItems.length > 1) {\n            valid = false;\n        } else if (typeof this.settings.validateSelection === 'function') {\n            valid = this.settings.validateSelection(this.$selectedItems);\n        }\n\n        return valid;\n    },\n\n    enableTrigger: function() {\n        if (this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.removeClass('disabled');\n        this.triggerEnabled = true;\n    },\n\n    disableTrigger: function() {\n        if (!this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.addClass('disabled');\n        this.triggerEnabled = false;\n    },\n\n    handleTriggerActivation: function(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (this.triggerEnabled) {\n            this.settings.activate(this.$selectedItems);\n        }\n    }\n}, {\n    defaults: {\n        type: null,\n        batch: true,\n        validateSelection: null,\n        activate: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend({\n    queue: null,\n    workers: [],\n\n    init: function() {\n        this.queue = [];\n\n        for (var i = 0; i < 3; i++) {\n            this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n        }\n    },\n\n    load: function($elements) {\n        // Only immediately load the visible images\n        let $thumbs = $elements.find('.elementthumb');\n        for (let i = 0; i < $thumbs.length; i++) {\n            let $thumb = $thumbs.eq(i);\n            let $scrollParent = $thumb.scrollParent();\n            if (this.isVisible($thumb, $scrollParent)) {\n                this.addToQueue($thumb[0]);\n            } else {\n                let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                $scrollParent.on(`scroll.${key}`, {\n                    $thumb: $thumb,\n                    $scrollParent: $scrollParent,\n                    key: key,\n                }, (ev) => {\n                    if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                        delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                        $scrollParent.off(`scroll.${ev.data.key}`);\n                        this.addToQueue(ev.data.$thumb[0]);\n                    }\n                });\n            }\n        }\n    },\n\n    addToQueue: function(thumb) {\n        this.queue.push(thumb);\n\n        // See if there are any inactive workers\n        for (var i = 0; i < this.workers.length; i++) {\n            if (!this.workers[i].active) {\n                this.workers[i].loadNext();\n            }\n        }\n    },\n\n    isVisible: function($thumb, $scrollParent) {\n        let thumbOffset = $thumb.offset().top;\n        let scrollParentOffset, scrollParentHeight;\n        if ($scrollParent[0] === document) {\n            scrollParentOffset = $scrollParent.scrollTop();\n            scrollParentHeight = Garnish.$win.height();\n        } else {\n            scrollParentOffset = $scrollParent.offset().top;\n            scrollParentHeight = $scrollParent.height();\n        }\n        return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.workers.length; i++) {\n            this.workers[i].destroy();\n        }\n\n        this.base();\n    }\n}, {\n    invisibleThumbs: {},\n    retryAll: function() {\n        for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n            let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n            delete Craft.ElementThumbLoader.invisibleThumbs[key];\n            $scrollParent.off(`scroll.${key}`);\n            queue.load($thumb.parent());\n        }\n    }\n});\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend({\n    loader: null,\n    active: false,\n\n    init: function(loader) {\n        this.loader = loader;\n    },\n\n    loadNext: function() {\n        var container = this.loader.queue.shift();\n        if (typeof container === 'undefined') {\n            this.active = false;\n            return;\n        }\n\n        this.active = true;\n        var $container = $(container);\n        if ($container.find('img').length) {\n            this.loadNext();\n            return;\n        }\n        var $img = $('<img/>', {\n            sizes: $container.attr('data-sizes'),\n            srcset: $container.attr('data-srcset'),\n            alt: ''\n        });\n        this.addListener($img, 'load,error', 'loadNext');\n        $img.appendTo($container);\n        picturefill({\n            elements: [$img[0]]\n        });\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend({\n    $form: null,\n    inputs: null,\n\n    init: function(form, inputs) {\n        this.$form = $(form);\n\n        // Only check specific inputs?\n        if (typeof inputs !== 'undefined') {\n            this.inputs = [];\n            inputs = $.makeArray(inputs);\n\n            for (var i = 0; i < inputs.length; i++) {\n                var $inputs = $(inputs[i]);\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $inputs.eq(j);\n\n                    this.inputs.push({\n                        input: $input,\n                        val: Garnish.getInputPostVal($input)\n                    });\n                }\n            }\n        }\n\n        this.addListener(this.$form, 'submit', 'handleFormSubmit');\n    },\n\n    handleFormSubmit: function(ev) {\n        // Ignore if we're in the middle of getting the elevated session timeout\n        if (Craft.elevatedSessionManager.fetchingTimeout) {\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            return;\n        }\n\n        // Are we only interested in certain inputs?\n        if (this.inputs) {\n            var inputsChanged = false;\n            var $input;\n\n            for (var i = 0; i < this.inputs.length; i++) {\n                $input = this.inputs[i].input;\n                // Is this a password input?\n                if ($input.data('passwordInput')) {\n                    $input = $input.data('passwordInput').$currentInput;\n                }\n\n                // Has this input's value changed?\n                if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                    inputsChanged = true;\n                    break;\n                }\n            }\n\n            if (!inputsChanged) {\n                // No need to interrupt the submit\n                return;\n            }\n        }\n\n        // Prevent the form from submitting until the user has an elevated session\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n        Craft.elevatedSessionManager.requireElevatedSession(this.submitForm.bind(this));\n    },\n\n    submitForm: function() {\n        // Don't let handleFormSubmit() interrupt this time\n        this.disable();\n        this.$form.trigger('submit');\n        this.enable();\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend({\n    fetchingTimeout: false,\n\n    passwordModal: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $submitBtn: null,\n    $errorPara: null,\n\n    callback: null,\n\n    /**\n     * Requires that the user has an elevated session.\n     *\n     * @param {function} callback The callback function that should be called once the user has an elevated session\n     */\n    requireElevatedSession: function(callback) {\n        this.callback = callback;\n\n        // Check the time remaining on the user's elevated session (if any)\n        this.fetchingTimeout = true;\n\n        Craft.postActionRequest('users/get-elevated-session-timeout', (response, textStatus) => {\n            this.fetchingTimeout = false;\n\n            if (textStatus === 'success') {\n                // Is there still enough time left or has it been disabled?\n                if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                    this.callback();\n                } else {\n                    // Show the password modal\n                    this.showPasswordModal();\n                }\n            }\n        });\n    },\n\n    showPasswordModal: function() {\n        if (!this.passwordModal) {\n            var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<td/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Submit'),\n            }).appendTo($buttonContainer);\n            this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.passwordModal = new Garnish.Modal($passwordModal, {\n                closeOtherModals: false,\n                onFadeIn: () => {\n                    setTimeout(this.focusPasswordInput.bind(this), 100);\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($passwordModal, 'submit', 'submitPassword');\n        } else {\n            this.passwordModal.show();\n        }\n    },\n\n    focusPasswordInput: function() {\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$passwordInput.trigger('focus');\n        }\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$submitBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$submitBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    submitPassword: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (!this.validatePassword()) {\n            return;\n        }\n\n        this.$passwordSpinner.removeClass('hidden');\n        this.clearLoginError();\n\n        var data = {\n            currentPassword: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/start-elevated-session', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.passwordModal.hide();\n                    this.callback();\n                } else {\n                    this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                    Garnish.shake(this.passwordModal.$container);\n                    this.focusPasswordInput();\n                }\n            } else {\n                this.showPasswordError();\n            }\n        });\n    },\n\n    showPasswordError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$errorPara.text(error);\n        this.passwordModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showPasswordError('');\n    }\n}, {\n    minSafeElevatedSessionTimeout: 5\n});\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend({\n    publishableSections: null,\n    $newEntryBtnGroup: null,\n    $newEntryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible sections the user has permission to create new entries in\n        this.publishableSections = [];\n\n        for (var i = 0; i < Craft.publishableSections.length; i++) {\n            var section = Craft.publishableSections[i];\n\n            if (this.getSourceByKey('section:' + section.uid)) {\n                this.publishableSections.push(section);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific section in the URL?\n        if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n            if (defaultSectionHandle === 'singles') {\n                return 'singles';\n            } else {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultSectionHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        var handle;\n\n        // Get the handle of the selected source\n        if (this.$source.data('key') === 'singles') {\n            handle = 'singles';\n        } else {\n            handle = this.$source.data('handle');\n        }\n\n        // Update the New Entry button\n        // ---------------------------------------------------------------------\n\n        var i, href, label;\n\n        if (this.publishableSections.length) {\n            // Remove the old button, if there is one\n            if (this.$newEntryBtnGroup) {\n                this.$newEntryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a section that they have permission to create entries in\n            var selectedSection;\n\n            if (handle) {\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    if (this.publishableSections[i].handle === handle) {\n                        selectedSection = this.publishableSections[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n            // Otherwise only show a menu button\n            if (selectedSection) {\n                href = this._getSectionTriggerHref(selectedSection);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                        this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.publishableSections.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n            } else {\n                this.$newEntryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New entry'),\n                }).appendTo(this.$newEntryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    var section = this.publishableSections[i];\n\n                    if (\n                        (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                        (this.settings.context !== 'index' && section !== selectedSection)\n                    ) {\n                        href = this._getSectionTriggerHref(section);\n                        label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newEntryBtnGroup);\n        }\n\n        // Update the URL if we're on the Entries index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'entries';\n\n            if (handle) {\n                uri += '/' + handle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getSectionTriggerHref: function(section) {\n        if (this.settings.context === 'index') {\n            var uri = 'entries/' + section.handle + '/new';\n            let params = {};\n            if (this.siteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        params.site = Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n        } else {\n            return 'data-id=\"' + section.id + '\"';\n        }\n    },\n\n    _openCreateEntryModal: function(sectionId) {\n        if (this.$newEntryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the section\n        var section;\n\n        for (var i = 0; i < this.publishableSections.length; i++) {\n            if (this.publishableSections[i].id == sectionId) {\n                section = this.publishableSections[i];\n                break;\n            }\n        }\n\n        if (!section) {\n            return;\n        }\n\n        this.$newEntryBtn.addClass('inactive');\n        var newEntryBtnText = this.$newEntryBtn.text();\n        this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newEntryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                sectionId: sectionId,\n                typeId: section.entryTypes[0].id,\n                enabled: section.canPublish ? 1 : 0,\n            },\n            onHideHud: () => {\n                this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right section is selected\n                var sectionSourceKey = 'section:' + section.uid;\n\n                if (this.sourceKey !== sectionSourceKey) {\n                    this.selectSourceByKey(sectionSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n\n/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: this.onTabOptionSelect.bind(this)\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const $labelSpan = $tab.find('.tabs .tab span');\n        const oldName = $labelSpan.text();\n        const newName = this.promptForTabName(oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    promptForTabName: function(oldName) {\n        return Craft.escapeHtml(prompt(Craft.t('app', 'Give your tab a name.'), oldName));\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const name = this.promptForTabName();\n        if (!name) {\n            return;\n        }\n\n        const $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>${name}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend({\n    $toggle: null,\n    targetPrefix: null,\n    targetSelector: null,\n    reverseTargetSelector: null,\n\n    _$target: null,\n    _$reverseTarget: null,\n    type: null,\n\n    init: function(toggle) {\n        this.$toggle = $(toggle);\n\n        // Is this already a field toggle?\n        if (this.$toggle.data('fieldtoggle')) {\n            Garnish.log('Double-instantiating a field toggle on an element');\n            this.$toggle.data('fieldtoggle').destroy();\n        }\n\n        this.$toggle.data('fieldtoggle', this);\n\n        this.type = this.getType();\n\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n        } else {\n            this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n            this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n        }\n\n        this.findTargets();\n\n        switch (this.type) {\n            case 'link':\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n                break;\n            case 'fieldset':\n                this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                break;\n            default:\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n                this.onToggleChange();\n        }\n    },\n\n    normalizeTargetSelector: function(selector) {\n        if (selector && !selector.match(/^[#\\.]/)) {\n            selector = '#' + selector;\n        }\n\n        return selector;\n    },\n\n    getType: function() {\n        let nodeName = this.$toggle.prop('nodeName');\n        if (\n            (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n            this.$toggle.attr('role') === 'checkbox' ||\n            this.$toggle.attr('role') === 'switch'\n        ) {\n            return 'checkbox';\n        }\n\n        switch (nodeName) {\n            case 'SELECT':\n                return 'select';\n            case 'A':\n                return 'link';\n            case 'FIELDSET':\n                return 'fieldset';\n        }\n\n        console.warn('Unexpected field toggle:', this.$toggle[0]);\n    },\n\n    findTargets: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            var toggleVal = this.getToggleVal();\n            this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n        } else {\n            if (this.targetSelector) {\n                this._$target = $(this.targetSelector);\n            }\n\n            if (this.reverseTargetSelector) {\n                this._$reverseTarget = $(this.reverseTargetSelector);\n            }\n        }\n    },\n\n    getToggleVal: function() {\n        if (this.type === 'checkbox') {\n            if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                return this.$toggle.prop('checked');\n            }\n            return this.$toggle.attr('aria-checked') === 'true';\n        }\n\n        let postVal;\n        if (this.type === 'fieldset') {\n            postVal = this.$toggle.find('input:checked:first').val();\n        } else {\n            postVal = Garnish.getInputPostVal(this.$toggle);\n        }\n\n        // Normalize the value\n        return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n    },\n\n    onToggleChange: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.hideTarget(this._$target);\n            this.findTargets();\n            this.showTarget(this._$target);\n        } else {\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n            } else {\n                this.onToggleChange._show = !!this.getToggleVal();\n            }\n\n            if (this.onToggleChange._show) {\n                this.showTarget(this._$target);\n                this.hideTarget(this._$reverseTarget);\n            } else {\n                this.hideTarget(this._$target);\n                this.showTarget(this._$reverseTarget);\n            }\n\n            delete this.onToggleChange._show;\n        }\n    },\n\n    showTarget: function($target) {\n        if ($target && $target.length) {\n            this.showTarget._currentHeight = $target.height();\n\n            $target.removeClass('hidden');\n\n            if (this.type !== 'select' && this.type !== 'fieldset') {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('collapsed');\n                    this.$toggle.addClass('expanded');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.prop('nodeName') !== 'SPAN') {\n                            $t.height('auto');\n                            this.showTarget._targetHeight = $t.height();\n                            $t.css({\n                                height: this.showTarget._currentHeight,\n                                overflow: 'hidden'\n                            });\n\n                            $t.velocity('stop');\n\n                            $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                $t.css({\n                                    height: '',\n                                    overflow: ''\n                                });\n                            });\n                        }\n                    })($target.eq(i));\n                }\n\n                delete this.showTarget._targetHeight;\n            }\n\n            delete this.showTarget._currentHeight;\n\n            // Trigger a resize event in case there are any grids in the target that need to initialize\n            Garnish.$win.trigger('resize');\n        }\n    },\n\n    hideTarget: function($target) {\n        if ($target && $target.length) {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                $target.addClass('hidden');\n            } else {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('expanded');\n                    this.$toggle.addClass('collapsed');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.hasClass('hidden')) {\n                            return;\n                        }\n                        if ($t.prop('nodeName') === 'SPAN') {\n                            $t.addClass('hidden');\n                        } else {\n                            $t.css('overflow', 'hidden');\n                            $t.velocity('stop');\n                            $t.velocity({height: 0}, 'fast', function() {\n                                $t.addClass('hidden');\n                            });\n                        }\n                    })($target.eq(i));\n                }\n            }\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend({\n    $container: null,\n\n    $items: null,\n    items: null,\n    totalCols: null,\n    colGutterDrop: null,\n    colPctWidth: null,\n\n    possibleItemColspans: null,\n    possibleItemPositionsByColspan: null,\n\n    itemPositions: null,\n    itemColspansByPosition: null,\n\n    layouts: null,\n    layout: null,\n    itemHeights: null,\n    leftPadding: null,\n\n    _refreshingCols: false,\n    _refreshColsAfterRefresh: false,\n    _forceRefreshColsAfterRefresh: false,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n\n        // Is this already a grid?\n        if (this.$container.data('grid')) {\n            Garnish.log('Double-instantiating a grid on an element');\n            this.$container.data('grid').destroy();\n        }\n\n        this.$container.data('grid', this);\n\n        this.setSettings(settings, Craft.Grid.defaults);\n\n        // Set the refreshCols() proxy that container resizes will trigger\n        this.handleContainerHeightProxy = () => {\n            this.refreshCols(false, true);\n        };\n\n        this.$items = this.$container.children(this.settings.itemSelector);\n        this.setItems();\n        this.refreshCols(true, false);\n\n        Garnish.$doc.ready(() => {\n            this.refreshCols(false, false);\n        });\n    },\n\n    addItems: function(items) {\n        this.$items = $().add(this.$items.add(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    removeItems: function(items) {\n        this.$items = $().add(this.$items.not(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    resetItemOrder: function() {\n        this.$items = $().add(this.$items);\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    setItems: function() {\n        this.setItems._ = {};\n\n        this.items = [];\n\n        for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n            this.items.push($(this.$items[this.setItems._.i]));\n        }\n\n        delete this.setItems._;\n    },\n\n    refreshCols: function(force) {\n        if (this._refreshingCols) {\n            this._refreshColsAfterRefresh = true;\n            if (force) {\n                this._forceRefreshColsAfterRefresh = true;\n            }\n            return;\n        }\n\n        this._refreshingCols = true;\n\n        if (!this.items.length) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.refreshCols._ = {};\n\n        // Check to see if the grid is actually visible\n        this.refreshCols._.oldHeight = this.$container[0].style.height;\n        this.$container[0].style.height = 1;\n        this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n        this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n        if (this.refreshCols._.scrollHeight === 0) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        if (this.settings.cols) {\n            this.refreshCols._.totalCols = this.settings.cols;\n        } else {\n            this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n            // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n            if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n            }\n\n            if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                this.refreshCols._.totalCols = this.settings.maxCols;\n            }\n        }\n\n        if (this.refreshCols._.totalCols === 0) {\n            this.refreshCols._.totalCols = 1;\n        }\n\n        // Same number of columns as before?\n        if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.totalCols = this.refreshCols._.totalCols;\n        this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n        // Temporarily stop listening to container resizes\n        this.removeListener(this.$container, 'resize');\n\n        if (this.settings.fillMode === 'grid') {\n            this.refreshCols._.itemIndex = 0;\n\n            while (this.refreshCols._.itemIndex < this.items.length) {\n                // Append the next X items and figure out which one is the tallest\n                this.refreshCols._.tallestItemHeight = -1;\n                this.refreshCols._.colIndex = 0;\n\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                    if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                        this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                    }\n\n                    this.refreshCols._.colIndex++;\n                }\n\n                if (this.settings.snapToGrid) {\n                    this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                    if (this.refreshCols._.remainder) {\n                        this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                    }\n                }\n\n                // Now set their heights to the tallest one\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                }\n\n                // set the this.refreshCols._.itemIndex pointer to the next one up\n                this.refreshCols._.itemIndex += this.totalCols;\n            }\n        } else {\n            this.removeListener(this.$items, 'resize');\n\n            // If there's only one column, sneak out early\n            if (this.totalCols === 1) {\n                this.$container.height('auto');\n                this.$items\n                    .show()\n                    .css({\n                        position: 'relative',\n                        width: 'auto',\n                        top: 0\n                    })\n                    .css(Craft.left, 0);\n            } else {\n                this.$items.css('position', 'absolute');\n                this.colPctWidth = (100 / this.totalCols);\n\n                // The setup\n\n                this.layouts = [];\n\n                this.itemPositions = [];\n                this.itemColspansByPosition = [];\n\n                // Figure out all of the possible colspans for each item,\n                // as well as all the possible positions for each item at each of its colspans\n\n                this.possibleItemColspans = [];\n                this.possibleItemPositionsByColspan = [];\n                this.itemHeightsByColspan = [];\n\n                for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                    this.possibleItemColspans[this.refreshCols._.item] = [];\n                    this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                    this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                    this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                    this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                    this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                    this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                    this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                    if (this.refreshCols._.minColspan > this.totalCols) {\n                        this.refreshCols._.minColspan = this.totalCols;\n                    }\n                    if (this.refreshCols._.maxColspan > this.totalCols) {\n                        this.refreshCols._.maxColspan = this.totalCols;\n                    }\n\n                    for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                        // Get the height for this colspan\n                        this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                        this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                        this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                        if (this.refreshCols._.positionLeft) {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = 0;\n                        } else if (this.refreshCols._.positionRight) {\n                            this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                            this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                        } else {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                        }\n\n                        for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                        }\n                    }\n                }\n\n                // Find all the possible layouts\n\n                this.refreshCols._.colHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                    this.refreshCols._.colHeights.push(0);\n                }\n\n                this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                // Now find the layout that looks the best.\n\n                // First find the layouts with the highest number of used columns\n                this.refreshCols._.layoutTotalCols = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                    for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                        if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                            this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                        }\n                    }\n                }\n\n                this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                // Filter out the ones that aren't using as many columns as they could be\n                for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                    if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                        this.layouts.splice(this.refreshCols._.i, 1);\n                    }\n                }\n\n                // Find the layout(s) with the least overall height\n                this.refreshCols._.layoutHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                }\n\n                this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                this.refreshCols._.shortestLayouts = [];\n                this.refreshCols._.emptySpaces = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                    if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                        this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                        // Now get its total empty space, including any trailing empty space\n                        this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                        }\n\n                        this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                    }\n                }\n\n                // And the layout with the least empty space is...\n                this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                // Set the item widths and left positions\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                    this.refreshCols._.css = {\n                        width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                    };\n                    this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                    this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                }\n\n                // If every item is at position 0, then let them lay out au naturel\n                if (this.isSimpleLayout()) {\n                    this.$container.height('auto');\n                    this.$items.css({\n                        position: 'relative',\n                        top: 0,\n                        'margin-bottom': this.settings.gutter + 'px'\n                    });\n                } else {\n                    this.$items.css('position', 'absolute');\n\n                    // Now position the items\n                    this.positionItems();\n\n                    // Update the positions as the items' heigthts change\n                    this.addListener(this.$items, 'resize', 'onItemResize');\n                }\n            }\n        }\n\n        this.completeRefreshCols();\n\n        // Resume container resize listening\n        this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n        this.onRefreshCols();\n    },\n\n    completeRefreshCols: function() {\n        // Delete the internal variable object\n        if (typeof this.refreshCols._ !== 'undefined') {\n            delete this.refreshCols._;\n        }\n\n        this._refreshingCols = false;\n\n        if (this._refreshColsAfterRefresh) {\n            var force = this._forceRefreshColsAfterRefresh;\n            this._refreshColsAfterRefresh = false;\n            this._forceRefreshColsAfterRefresh = false;\n\n            Garnish.requestAnimationFrame(() => {\n                this.refreshCols(force);\n            });\n        }\n    },\n\n    getItemWidth: function(colspan) {\n        return (this.colPctWidth * colspan);\n    },\n\n    getItemWidthCss: function(colspan) {\n        return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n    },\n\n    getItemWidthInPx: function(colspan) {\n        return this.getItemWidth(colspan) / 100 * this.$container.width() - this.colGutterDrop;\n    },\n\n    getItemLeftPosCss: function(position) {\n        return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n    },\n\n    getItemLeftPosInPx: function(position) {\n        return (this.getItemWidth(1) / 100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n    },\n\n    isSimpleLayout: function() {\n        this.isSimpleLayout._ = {};\n\n        for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n            if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                delete this.isSimpleLayout._;\n                return false;\n            }\n        }\n\n        delete this.isSimpleLayout._;\n        return true;\n    },\n\n    positionItems: function() {\n        this.positionItems._ = {};\n\n        this.positionItems._.colHeights = [];\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n            this.positionItems._.colHeights.push(0);\n        }\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n            this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n            this.positionItems._.affectedColHeights = [];\n\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n            }\n\n            this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n            if (this.positionItems._.top > 0) {\n                this.positionItems._.top += this.settings.gutter;\n            }\n\n            this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n            // Now add the new heights to those columns\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n            }\n        }\n\n        // Set the container height\n        this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n        delete this.positionItems._;\n    },\n\n    onItemResize: function(ev) {\n        this.onItemResize._ = {};\n\n        // Prevent this from bubbling up to the container, which has its own resize listener\n        ev.stopPropagation();\n\n        this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n        if (this.onItemResize._.item !== -1) {\n            // Update the height and reposition the items\n            this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n            if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                this.positionItems(false);\n            }\n        }\n\n        delete this.onItemResize._;\n    },\n\n    onRefreshCols: function() {\n        this.trigger('refreshCols');\n        this.settings.onRefreshCols();\n    }\n}, {\n    defaults: {\n        itemSelector: '.item',\n        cols: null,\n        maxCols: null,\n        minColWidth: 320,\n        gutter: 14,\n        fillMode: 'top',\n        colClass: 'col',\n        snapToGrid: null,\n\n        onRefreshCols: $.noop\n    }\n});\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend({\n    grid: null,\n    _: null,\n\n    init: function(grid) {\n        this.grid = grid;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        this._ = {};\n\n        // Loop through all possible colspans\n        for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n            this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n            // Loop through all the possible positions for this colspan,\n            // and find the one that is closest to the top\n\n            this._.tallestColHeightsByPosition = [];\n\n            for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                this._.colHeightsForPosition = [];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                }\n\n                this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n            }\n\n            // And the shortest position for this colspan is...\n            this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n            this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n            // Now log the colspan/position placement\n            this._.positions = prevPositions.slice(0);\n            this._.colspans = prevColspans.slice(0);\n            this._.colHeights = prevColHeights.slice(0);\n            this._.emptySpace = prevEmptySpace;\n\n            this._.positions.push(this._.position);\n            this._.colspans.push(this._.colspan);\n\n            // Add the new heights to those columns\n            this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n            this._.endingCol = this._.position + this._.colspan - 1;\n\n            for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n            }\n\n            // If this is the last item, create the layout\n            if (item === this.grid.items.length - 1) {\n                this.grid.layouts.push({\n                    positions: this._.positions,\n                    colspans: this._.colspans,\n                    colHeights: this._.colHeights,\n                    emptySpace: this._.emptySpace\n                });\n            } else {\n                // Dive deeper\n                this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n            }\n        }\n\n        delete this._;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Remove inner-word punctuation\n        handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        handle = handle.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        handle = Craft.asciiString(handle);\n\n        if (!this.settings.allowNonAlphaStart) {\n            // Handle must start with a letter\n            handle = handle.replace(/^[^a-z]+/, '');\n        }\n\n        // Get the \"words\"\n        var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n        handle = '';\n\n        if (Craft.handleCasing === 'snake') {\n            return words.join('_');\n        }\n\n        // Make it camelCase\n        for (let i = 0; i < words.length; i++) {\n            if (Craft.handleCasing !== 'pascal' && i === 0) {\n                handle += words[i];\n            } else {\n                handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n            }\n        }\n\n        return handle;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend({\n    $container: null,\n    progressBar: null,\n    uploader: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ImageUpload.defaults);\n        this.initImageUpload();\n    },\n\n    initImageUpload: function() {\n        this.$container = $(this.settings.containerSelector);\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl(this.settings.uploadAction),\n            formData: this.settings.postParameters,\n            fileInput: this.$container.find(this.settings.fileInputSelector),\n            paramName: this.settings.uploadParamName\n        };\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n        options.events.fileuploadfail = this._onUploadError.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        this.initButtons();\n    },\n\n    initButtons: function() {\n        this.$container.find(this.settings.uploadButtonSelector).on('click', ev => {\n            this.$container.find(this.settings.fileInputSelector).trigger('click');\n        });\n\n        this.$container.find(this.settings.deleteButtonSelector).on('click', ev => {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        this.refreshImage(response);\n                    }\n                });\n            }\n        });\n    },\n\n    refreshImage: function(response) {\n        $(this.settings.containerSelector).replaceWith(response.html);\n        this.settings.onAfterRefreshImage(response);\n        this.initImageUpload();\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function(event) {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var html = $(data.result.html);\n            this.refreshImage(data.result);\n        }\n\n        // Last file\n        if (this.uploader.isLastUpload()) {\n            this.progressBar.hideProgressBar();\n            this.$container.removeClass('uploading');\n        }\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadError: function(event, data) {\n        if (data.jqXHR.responseJSON.error) {\n            alert(data.jqXHR.responseJSON.error);\n            this.$container.removeClass('uploading');\n            this.progressBar.hideProgressBar();\n            this.progressBar.resetProgressBar();\n        }\n    }\n}, {\n    defaults: {\n        postParameters: {},\n        uploadAction: \"\",\n        deleteAction: \"\",\n        fileInputSelector: \"\",\n\n        onAfterRefreshImage: $.noop,\n        containerSelector: null,\n\n        uploadButtonSelector: null,\n        deleteButtonSelector: null,\n\n        uploadParamName: 'files'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend({\n    $icon: null,\n    content: null,\n    hud: null,\n\n    init: function(icon) {\n        this.$icon = $(icon);\n\n        if (this.$icon.data('infoicon')) {\n            Garnish.log('Double-instantiating an info icon on an element');\n            this.content = this.$icon.data('infoicon').content;\n            this.$icon.data('infoicon').destroy();\n        } else {\n            this.content = this.$icon.html();\n            this.$icon\n                .html('')\n                .attr({\n                    tabindex: 0,\n                    'role': 'button',\n                    'aria-label': Craft.t('app', 'Information'),\n                });\n        }\n\n        this.$icon.data('infoicon', this);\n\n        if (this.$icon[0].previousSibling && this.$icon[0].previousSibling.nodeType === Node.TEXT_NODE) {\n            // Make sure it's in a .nowrap container\n            const $parent = this.$icon.parent();\n            if (!$parent.hasClass('nowrap')) {\n                // Find the last word in the text\n                const m = this.$icon[0].previousSibling.nodeValue.match(/[^\\s\\-]+\\s*$/);\n                if (m) {\n                    this.$icon[0].previousSibling.nodeValue = this.$icon[0].previousSibling.nodeValue.substr(0, m.index);\n                    $('<span/>', {\n                        class: 'nowrap',\n                        html: m[0].replace(/\\s+$/, '') + ' ',\n                    })\n                        .insertAfter(this.$icon[0].previousSibling)\n                        .append(this.$icon);\n                }\n            }\n        }\n\n        this.addListener(this.$icon, 'click', ev => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.showHud();\n        });\n\n        this.addListener(this.$icon, 'keydown', ev => {\n            if (!(this.hud && this.hud.showing) && [Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.showHud();\n            }\n        });\n    },\n\n    showHud: function(ev) {\n        if (!this.hud) {\n            this.hud = new Garnish.HUD(this.$icon, this.content, {\n                hudClass: 'hud info-hud',\n                closeOtherHUDs: false,\n                onShow: () => {\n                    Garnish.shortcutManager.registerShortcut(Garnish.SPACE_KEY, () => {\n                        this.hud.hide();\n                    });\n                },\n            });\n            Craft.initUiElements(this.hud.$body);\n        } else {\n            this.hud.show();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend({\n    settings: null,\n    $outerContainer: null,\n    $innerContainer: null,\n    $input: null,\n    small: false,\n    on: false,\n    indeterminate: false,\n    dragger: null,\n\n    dragStartMargin: null,\n\n    init: function(outerContainer, settings) {\n        this.$outerContainer = $(outerContainer);\n\n        // Is this already a lightswitch?\n        if (this.$outerContainer.data('lightswitch')) {\n            Garnish.log('Double-instantiating a lightswitch on an element');\n            this.$outerContainer.data('lightswitch').destroy();\n        }\n\n        this.$outerContainer.data('lightswitch', this);\n\n        this.small = this.$outerContainer.hasClass('small');\n\n        this.setSettings(settings, Craft.LightSwitch.defaults);\n\n        this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n        this.$input = this.$outerContainer.find('input:first');\n\n        // If the input is disabled, go no further\n        if (this.$input.prop('disabled')) {\n            return;\n        }\n\n        this.on = this.$outerContainer.hasClass('on');\n        this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n        this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n        this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n        this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n            axis: Garnish.X_AXIS,\n            ignoreHandleSelector: null,\n            onDragStart: this._onDragStart.bind(this),\n            onDrag: this._onDrag.bind(this),\n            onDragStop: this._onDragStop.bind(this)\n        });\n\n        // Does the input have on/off labels?\n        let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n        if ($wrapper.length) {\n            this.addListener($wrapper.children('span[data-toggle=\"off\"]'), 'click', this.turnOff);\n            this.addListener($wrapper.children('span[data-toggle=\"on\"]'), 'click', this.turnOn);\n        }\n    },\n\n    turnOn: function(muteEvent) {\n        var changed = !this.on;\n\n        this.on = true;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.value);\n        this.$outerContainer.addClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'true');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnOff: function(muteEvent) {\n        var changed = this.on || this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin();\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val('');\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'false');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnIndeterminate: function(muteEvent) {\n        var changed = !this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = true;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.indeterminateValue);\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.addClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'mixed');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    toggle: function() {\n        if (this.indeterminate || !this.on) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    onChange: function() {\n        this.trigger('change');\n        this.settings.onChange(this.on);\n        this.$outerContainer.trigger('change');\n    },\n\n    _onMouseDown: function() {\n        this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n    },\n\n    _onMouseUp: function() {\n        this.removeListener(Garnish.$doc, 'mouseup');\n\n        // Was this a click?\n        if (!this.dragger.dragging) {\n            this.toggle();\n        }\n    },\n\n    _onKeyDown: function(event) {\n        switch (event.keyCode) {\n            case Garnish.SPACE_KEY: {\n                this.toggle();\n                event.preventDefault();\n                break;\n            }\n            case Garnish.RIGHT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOn();\n                } else {\n                    this.turnOff();\n                }\n\n                event.preventDefault();\n                break;\n            }\n            case Garnish.LEFT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOff();\n                } else {\n                    this.turnOn();\n                }\n\n                event.preventDefault();\n                break;\n            }\n        }\n    },\n\n    _getMargin: function() {\n        return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n    },\n\n    _onDragStart: function() {\n        this.$outerContainer.addClass('dragging');\n        this.dragStartMargin = this._getMargin();\n    },\n\n    _onDrag: function() {\n        var margin;\n\n        if (Craft.orientation === 'ltr') {\n            margin = this.dragStartMargin + this.dragger.mouseDistX;\n        } else {\n            margin = this.dragStartMargin - this.dragger.mouseDistX;\n        }\n\n        if (margin < this._getOffMargin()) {\n            margin = this._getOffMargin();\n        } else if (margin > 0) {\n            margin = 0;\n        }\n\n        this.$innerContainer.css('margin-' + Craft.left, margin);\n    },\n\n    _onDragStop: function() {\n        var margin = this._getMargin();\n        console.log(margin);\n\n        if (margin > (this._getOffMargin() / 2)) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    _onSettle: function() {\n        this.$outerContainer.removeClass('dragging');\n    },\n\n    destroy: function() {\n        this.base();\n        this.dragger.destroy();\n    },\n\n    _getOffMargin: function() {\n        return (this.small ? -10 : -12);\n    }\n}, {\n    animationDuration: 100,\n    defaults: {\n        value: '1',\n        indeterminateValue: '-',\n        onChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend({\n    $extraFields: null,\n    $trigger: null,\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $iframe: null,\n    $fieldPlaceholder: null,\n\n    previewUrl: null,\n    token: null,\n    basePostData: null,\n    inPreviewMode: false,\n    fields: null,\n    lastPostData: null,\n    updateIframeInterval: null,\n    loading: false,\n    checkAgain: false,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _slideInOnIframeLoad: false,\n    _forceUpdateIframeProxy: null,\n\n    _scrollX: null,\n    _scrollY: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.LivePreview.defaults);\n\n        // Should preview requests use a specific URL?\n        // This won't affect how the request gets routed (the action param will override it),\n        // but it will allow the templates to change behavior based on the request URI.\n        if (this.settings.previewUrl) {\n            this.previewUrl = this.settings.previewUrl;\n        } else {\n            this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n        }\n\n        // Load the preview over SSL if the current request is\n        if (document.location.protocol === 'https:') {\n            this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n        }\n\n        // Set the base post data\n        this.basePostData = $.extend({}, this.settings.previewParams);\n\n        this._forceUpdateIframeProxy = this.forceUpdateIframe.bind(this);\n\n        // Find the DOM elements\n        this.$extraFields = $(this.settings.extraFields);\n        this.$trigger = $(this.settings.trigger);\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n        // Event Listeners\n        this.addListener(this.$trigger, 'activate', 'toggle');\n\n        Craft.cp.on('beforeSaveShortcut', () => {\n            if (this.inPreviewMode) {\n                this.moveFieldsBack();\n            }\n        });\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n            inPx = Craft.LivePreview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    toggle: function() {\n        if (this.inPreviewMode) {\n            this.exit();\n        } else {\n            this.enter();\n        }\n    },\n\n    enter: function() {\n        if (this.inPreviewMode) {\n            return;\n        }\n\n        if (!this.token) {\n            this.createToken();\n            return;\n        }\n\n        this.trigger('beforeEnter');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            let $saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($editorHeader);\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this)\n            });\n\n            this.addListener($closeBtn, 'click', 'exit');\n            this.addListener($saveBtn, 'click', 'save');\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Move all the fields into the editor rather than copying them\n        // so any JS that's referencing the elements won't break.\n        this.fields = [];\n        var $fields = $(this.settings.fields);\n\n        for (var i = 0; i < $fields.length; i++) {\n            var $field = $($fields[i]),\n                $clone = this._getClone($field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter($field);\n            $field.detach();\n            this.$fieldPlaceholder.replaceWith($clone);\n            $field.appendTo(this.$editor);\n\n            this.fields.push({\n                $field: $field,\n                $clone: $clone\n            });\n        }\n\n        if (this.updateIframe()) {\n            this._slideInOnIframeLoad = true;\n        } else {\n            this.slideIn();\n        }\n\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = true;\n        this.trigger('enter');\n    },\n\n    createToken: function() {\n        Craft.postActionRequest('live-preview/create-token', {\n            previewAction: this.settings.previewAction\n        }, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.token = response.token;\n                this.enter();\n            }\n        });\n    },\n\n    save: function() {\n        Craft.cp.submitPrimaryForm();\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.updateIframeInterval = setInterval(this.updateIframe.bind(this), 1000);\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.exit();\n                }\n            });\n        });\n    },\n\n    exit: function() {\n        if (!this.inPreviewMode) {\n            return;\n        }\n\n        this.trigger('beforeExit');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        if (this.updateIframeInterval) {\n            clearInterval(this.updateIframeInterval);\n        }\n\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n        });\n\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = false;\n        this.trigger('exit');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n    },\n\n    updateIframe: function(force) {\n        if (force) {\n            this.lastPostData = null;\n        }\n\n        if (!this.inPreviewMode) {\n            return false;\n        }\n\n        if (this.loading) {\n            this.checkAgain = true;\n            return false;\n        }\n\n        // Has the post data changed?\n        var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n        if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n            this.lastPostData = postData;\n            this.loading = true;\n\n            var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n            this._scrollX = $doc ? $doc.scrollLeft() : 0;\n            this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n            $.ajax({\n                url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                method: 'POST',\n                data: $.extend({}, postData, this.basePostData),\n                headers: {\n                    'X-Craft-Token': this.token\n                },\n                xhrFields: {\n                    withCredentials: true\n                },\n                crossDomain: true,\n                success: this.handleSuccess.bind(this),\n                error: this.handleError.bind(this),\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    forceUpdateIframe: function() {\n        return this.updateIframe(true);\n    },\n\n    handleSuccess: function(data) {\n        var html = data +\n            '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n        // Create a new iframe\n        var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n        if (this.$iframe) {\n            $iframe.insertBefore(this.$iframe);\n        } else {\n            $iframe.appendTo(this.$iframeContainer);\n        }\n\n        this.addListener($iframe, 'load', function() {\n            if (this.$iframe) {\n                this.$iframe.remove();\n            }\n            this.$iframe = $iframe;\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n\n            this.removeListener($iframe, 'load');\n        });\n\n        Garnish.requestAnimationFrame(() => {\n            $iframe[0].contentWindow.document.open();\n            $iframe[0].contentWindow.document.write(html);\n            $iframe[0].contentWindow.document.close();\n            this.onResponse();\n        });\n    },\n\n    handleError: function() {\n        this.onResponse();\n    },\n\n    onResponse: function() {\n        this.loading = false;\n\n        if (this.checkAgain) {\n            this.checkAgain = false;\n            this.updateIframe();\n        }\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n\n    defaults: {\n        trigger: '.livepreviewbtn',\n        fields: null,\n        extraFields: null,\n        previewUrl: null,\n        previewAction: null,\n        previewParams: {}\n    }\n});\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend({\n    $passwordWrapper: null,\n    $passwordInput: null,\n    $textInput: null,\n    $currentInput: null,\n\n    $showPasswordToggle: null,\n    showingPassword: null,\n\n    init: function(passwordInput, settings) {\n        this.$passwordInput = $(passwordInput);\n        this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n        this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n        // Is this already a password input?\n        if (this.$passwordInput.data('passwordInput')) {\n            Garnish.log('Double-instantiating a password input on an element');\n            this.$passwordInput.data('passwordInput').destroy();\n        }\n\n        this.$passwordInput.data('passwordInput', this);\n\n        this.$showPasswordToggle = $('<button type=\"button\" class=\"invisible\" />');\n        this.$showPasswordToggle.addClass('password-toggle');\n        this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n        this.initInputFocusEvents(this.$passwordInput);\n        this.addListener(this.$showPasswordToggle, 'click', 'onClick');\n        this.hidePassword();\n    },\n\n    setCurrentInput: function($input) {\n        if (this.$currentInput) {\n            // Swap the inputs, while preventing the focus animation\n            $input.insertAfter(this.$currentInput);\n            this.$currentInput.detach();\n            $input.trigger('focus');\n\n            // Restore the input value\n            $input.val(this.$currentInput.val());\n        }\n\n        this.$currentInput = $input;\n\n        this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n    },\n\n    updateToggleLabel: function(label) {\n        this.$showPasswordToggle.text(label);\n    },\n\n    initInputFocusEvents: function($input) {\n        this.addListener($input, 'focus', function() {\n            this.$passwordWrapper.addClass('focus');\n        });\n        this.addListener($input, 'blur', function() {\n            this.$passwordWrapper.removeClass('focus');\n        });\n    },\n\n    showPassword: function() {\n        if (this.showingPassword) {\n            return;\n        }\n\n        if (!this.$textInput) {\n            this.$textInput = this.$passwordInput.clone(true);\n            this.$textInput.attr('type', 'text');\n            this.initInputFocusEvents(this.$textInput);\n        }\n\n        this.setCurrentInput(this.$textInput);\n        this.updateToggleLabel(Craft.t('app', 'Hide'));\n        this.showingPassword = true;\n    },\n\n    hidePassword: function() {\n        // showingPassword could be null, which is acceptable\n        if (this.showingPassword === false) {\n            return;\n        }\n\n        this.setCurrentInput(this.$passwordInput);\n        this.updateToggleLabel(Craft.t('app', 'Show'));\n        this.showingPassword = false;\n\n        // Alt key temporarily shows the password\n        this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n    },\n\n    togglePassword: function() {\n        if (this.showingPassword) {\n            this.hidePassword();\n        } else {\n            this.showPassword();\n        }\n\n        this.settings.onToggleInput(this.$currentInput);\n    },\n\n    onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n            this.showPassword();\n            this.$showPasswordToggle.addClass('invisible');\n            this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n        }\n    },\n\n    onKeyUp: function(ev) {\n        ev.preventDefault();\n\n        if (ev.keyCode === Garnish.ALT_KEY) {\n            this.hidePassword();\n            this.$showPasswordToggle.removeClass('invisible');\n        }\n    },\n\n    onInputChange: function() {\n        if (this.$currentInput.val()) {\n            this.$showPasswordToggle.removeClass('invisible');\n        } else {\n            this.$showPasswordToggle.addClass('invisible');\n        }\n    },\n\n    onClick: function(ev) {\n        if (this.$currentInput[0].setSelectionRange) {\n            var selectionStart = this.$currentInput[0].selectionStart,\n                selectionEnd = this.$currentInput[0].selectionEnd;\n\n            this.togglePassword();\n            this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n        } else {\n            this.togglePassword();\n        }\n    }\n}, {\n    defaults: {\n        onToggleInput: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend({\n    draftEditor: null,\n\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $spinner: null,\n    $statusIcon: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $previewHeader: null,\n    $targetBtn: null,\n    $targetMenu: null,\n    $deviceTypeContainer: null,\n    $orientationBtn: null,\n    $refreshBtn: null,\n    $deviceMask: null,\n    $devicePreviewContainer: null,\n    $iframe: null,\n    iframeLoaded: false,\n    $tempInput: null,\n    $fieldPlaceholder: null,\n\n    isActive: false,\n    isVisible: false,\n    activeTarget: 0,\n\n    isDeviceUpdating: false,\n    deviceAnimationTimeout: null,\n    currentDeviceType: 'desktop',\n    deviceOrientation: null,\n    deviceWidth: '',\n    deviceHeight: '',\n    deviceMaskDimensions: {\n        phone: {\n            width: 375,\n            height: 753\n        },\n        tablet: {\n            width: 768,\n            height: 1110\n        }\n    },\n\n    draftId: null,\n    url: null,\n    fields: null,\n\n    iframeHeight: null,\n    scrollTop: null,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _updateIframeProxy: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(draftEditor) {\n        this.draftEditor = draftEditor;\n\n        this._updateIframeProxy = this.updateIframe.bind(this);\n\n        this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.Preview.minEditorWidthInPx) {\n            inPx = Craft.Preview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    open: function() {\n        if (this.isActive) {\n            return;\n        }\n\n        this.isActive = true;\n        this.trigger('beforeOpen');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n            this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n            if (Craft.Pro) {\n                this.$previewHeader = $('<header/>', {'class': 'lp-preview-header'}).appendTo(this.$previewContainer);\n\n                // Preview targets\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo(this.$previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    const $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    let $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n\n                    $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                }\n\n                // Device type buttons\n                this.$deviceTypeContainer = $('<div/>', {\n                    class: 'btngroup lp-device-type',\n                    role: 'listbox',\n                    'aria-label': Craft.t('app', 'Device type'),\n                    tabindex: '0',\n                }).appendTo(this.$previewHeader);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--desktop active',\n                    title: Craft.t('app', 'Desktop'),\n                    'aria-label': Craft.t('app', 'Desktop'),\n                    'aria-selected': 'true',\n                    tabindex: '-1',\n                    data: {\n                        width: '',\n                        height: '',\n                        deviceType: 'desktop'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--tablet',\n                    title: Craft.t('app', 'Tablet'),\n                    'aria-label': Craft.t('app', 'Tablet'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 768,\n                        height: 1024,\n                        deviceType: 'tablet'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--phone',\n                    title: Craft.t('app', 'Mobile'),\n                    'aria-label': Craft.t('app', 'Mobile'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 375,\n                        height: 667,\n                        deviceType: 'phone'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n\n                $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                const $buttonContainer = $('<div class=\"buttons\"/>').appendTo(this.$previewHeader);\n\n                // Orientation toggle\n                this.$orientationBtn = $('<button/>', {\n                    type: 'button',\n                    'class': 'btn disabled',\n                    'data-icon': 'rotate',\n                    disabled: '',\n                    'aria-hidden': '',\n                    'text': Craft.t('app', 'Rotate')\n                }).appendTo($buttonContainer);\n                this.addListener(this.$orientationBtn, 'click', 'switchOrientation');\n\n                // Refresh button\n                this.$refreshBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn hidden',\n                    text: Craft.t('app', 'Refresh'),\n                    'data-icon': 'refresh',\n                }).appendTo($buttonContainer);\n                this._updateRefreshBtn();\n                this.addListener(this.$refreshBtn, 'click', () => {\n                    this.updateIframe(false, true);\n                });\n\n                // Get the last stored orientation\n                this.deviceOrientation = Craft.getLocalStorage('LivePreview.orientation');\n\n                // Device type button click handler\n                this.addListener($('.btn', this.$deviceTypeContainer), 'click', 'switchDeviceType');\n\n                // Device mask\n                this.$deviceMask = $('<div/>', {\n                    'class': 'lp-device-mask'\n                });\n            }\n\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n            if (this.$deviceMask) {\n                this.$iframeContainer.append(this.$deviceMask);\n            }\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this),\n            });\n\n            this.addListener($closeBtn, 'click', 'close');\n            this.addListener(this.$statusIcon, 'click', () => {\n                this.draftEditor.showStatusHud(this.$statusIcon);\n            });\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Find the fields, excluding nested fields\n        this.fields = [];\n        var $fields = $('#content .field').not($('#content .field .field'));\n\n        if ($fields.length) {\n            // Insert our temporary input before the first field so we know where to swap in the serialized form values\n            this.$tempInput.insertBefore($fields.get(0));\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            for (let i = 0; i < $fields.length; i++) {\n                let $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n        }\n\n        this.updateIframe();\n\n        this.draftEditor.on('update', this._updateIframeProxy);\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.trigger('open');\n    },\n\n    _activeTarget: function() {\n        return this.draftEditor.settings.previewTargets[this.activeTarget];\n    },\n\n    _updateRefreshBtn: function() {\n        const target = this._activeTarget();\n        if (target.refresh !== 'undefined' && !target.refresh) {\n            this.$refreshBtn.removeClass('hidden');\n        } else {\n            this.$refreshBtn.addClass('hidden');\n        }\n    },\n\n    switchTarget: function(i) {\n        this.activeTarget = i;\n        this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n        this.$targetMenu.find('a.sel').removeClass('sel');\n        this.$targetMenu.find('a').eq(i).addClass('sel');\n        this.updateIframe(true);\n        this._updateRefreshBtn();\n        this.trigger('switchTarget', {\n            previewTarget: this.draftEditor.settings.previewTargets[i],\n        });\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        if (!this.isActive || this.isVisible) {\n            return;\n        }\n\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.close();\n                }\n            });\n        });\n\n        this.isVisible = true;\n    },\n\n    close: function() {\n        if (!this.isActive || !this.isVisible) {\n            return;\n        }\n\n        this.trigger('beforeClose');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        // Remove our temporary input and move the preview fields back into place\n        this.$tempInput.detach();\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n            this.resetDevicePreview();\n        });\n\n        this.draftEditor.off('update', this._updateIframeProxy);\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.isActive = false;\n        this.isVisible = false;\n        this.trigger('close');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n        if (this._devicePreviewIsActive()) {\n            this.updateDevicePreview();\n        }\n    },\n\n    _useIframeResizer: function() {\n        return Craft.previewIframeResizerOptions !== false;\n    },\n\n    updateIframe: function(resetScroll, forceRefresh) {\n        if (!this.isActive) {\n            return false;\n        }\n\n        // Ignore non-boolean resetScroll values\n        resetScroll = resetScroll === true;\n\n        const target = this._activeTarget();\n        const refresh = !!(\n            forceRefresh ||\n            this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n            !this.$iframe ||\n            resetScroll ||\n            typeof target.refresh === 'undefined' ||\n            target.refresh\n        );\n\n        this.trigger('beforeUpdateIframe', {\n            previewTarget: target,\n            resetScroll: resetScroll,\n            refresh: refresh,\n        });\n\n        // If this is an existing preview target, make sure it wants to be refreshed automatically\n        if (!refresh) {\n            this.slideIn();\n            return;\n        }\n\n        this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n            // Maintain the current scroll position?\n            let sameHost;\n            if (resetScroll) {\n                this.scrollTop = null;\n            } else if (this.iframeLoaded && this.$iframe) {\n                if (this._useIframeResizer()) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                } else {\n                    sameHost = Craft.isSameHost(url);\n                    if (sameHost && this.$iframe[0].contentWindow) {\n                        this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                    }\n                }\n            }\n\n            this.iframeLoaded = false;\n\n            var $iframe = $('<iframe/>', {\n                'class': 'lp-preview',\n                frameborder: 0,\n                src: url,\n            });\n\n            if (this.$iframe) {\n                this.$iframe.replaceWith($iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            // If we’re on tablet/phone then wrap the iframe in our own container\n            // so we can keep all the iFrameResizer() stuff working\n            if (this._devicePreviewIsActive()) {\n                if (!this.$devicePreviewContainer) {\n                    this.$devicePreviewContainer = $('<div/>', {\n                        'class': 'lp-device-preview-container'\n                    });\n                    $iframe.wrap('<div class=\"lp-device-preview-container\"></div>');\n                    this.$devicePreviewContainer = this.$iframeContainer.find('.lp-device-preview-container');\n                }\n            }\n\n            // Keep the iframe height consistent with its content\n            if (this._useIframeResizer()) {\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                iFrameResize($.extend({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n            } else {\n                $iframe.on('load', () => {\n                    this.iframeLoaded = true;\n                    if (!resetScroll && sameHost && this.scrollTop !== null) {\n                        $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                    }\n                });\n            }\n\n            this.url = url;\n            this.$iframe = $iframe;\n\n            if (this._devicePreviewIsActive()) {\n                this.updateDevicePreview();\n            }\n\n            this.trigger('afterUpdateIframe', {\n                previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            this.slideIn();\n        });\n    },\n\n    _devicePreviewIsActive: function() {\n        return this.currentDeviceType !== 'desktop';\n    },\n\n    switchDeviceType: function(ev) {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n\n        const $btn = $(ev.target);\n        const newDeviceType = $btn.data('deviceType');\n\n        // Bail if we’re just smashing the same button\n        if (newDeviceType === this.currentDeviceType) {\n            return false;\n        }\n\n        // Store new device type data\n        this.currentDeviceType = newDeviceType;\n        this.deviceWidth = $btn.data('width');\n        this.deviceHeight = $btn.data('height');\n\n        // Set the active state on the button\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n\n        $btn\n            .addClass('active')\n            .attr('aria-selected', 'true');\n\n        // Update or reset\n        if (this.currentDeviceType === 'desktop') {\n            this.resetDevicePreview();\n        } else {\n            this.$iframeContainer.addClass('lp-iframe-container--updating');\n            this.updateIframe();\n            this.updateDevicePreview();\n        }\n    },\n\n    switchOrientation: function()\n    {\n        if (this.isDeviceUpdating || !this._devicePreviewIsActive()) {\n            return false;\n        }\n\n        // Switch to whichever orientation is currently not stored\n        if (!this.deviceOrientation || this.deviceOrientation === 'portrait') {\n            this.deviceOrientation = 'landscape';\n        } else {\n            this.deviceOrientation = 'portrait';\n        }\n\n        // Store the new one\n        Craft.setLocalStorage('LivePreview.orientation', this.deviceOrientation);\n\n        // Allow the animation to take place\n        this.$iframeContainer.addClass('lp-iframe-container--animating');\n\n        // Update the device preview\n        this.updateDevicePreview();\n    },\n\n    updateDevicePreview: function()\n    {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.isDeviceUpdating = true;\n\n        // Enable the orientation button\n        this.$orientationBtn\n            .removeClass('disabled')\n            .removeAttr('disabled')\n            .removeAttr('aria-hidden');\n\n        // Trigger the resized css mods\n        this.$iframeContainer.addClass('lp-iframe-container--has-device-preview');\n\n        // Add the tablet class if needed\n        if (this.currentDeviceType === 'tablet') {\n            this.$iframeContainer.addClass('lp-iframe-container--tablet');\n        } else {\n            this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n        }\n\n        // Figure out the best zoom\n        let hZoom = 1;\n        let wZoom = 1;\n        let zoom = 1;\n        let previewHeight = (this.$previewContainer.height() - 50) - 48; // 50px for the header bar and 24px clearance\n        let previewWidth = this.$previewContainer.width() - 48;\n        let maskHeight = this.deviceMaskDimensions[this.currentDeviceType].height;\n        let maskWidth = this.deviceMaskDimensions[this.currentDeviceType].width;\n\n        if (this.deviceOrientation === 'landscape') {\n            if (previewWidth < maskHeight) {\n                hZoom = previewWidth / maskHeight;\n            }\n            if (previewHeight < maskWidth) {\n                wZoom = previewHeight / maskWidth;\n            }\n        } else {\n            if (previewHeight < maskHeight) {\n                hZoom = previewHeight / maskHeight;\n            }\n            if (previewWidth < maskWidth) {\n                wZoom = previewWidth / maskWidth;\n            }\n        }\n\n        zoom = hZoom;\n        if (wZoom < hZoom) {\n            zoom = wZoom;\n        }\n\n        // Figure out the css values\n        const translate = -((100/zoom)/2);\n        const rotationDeg = this.deviceOrientation === 'landscape' ? '-90deg' : '0deg';\n\n        // Apply first to the device mask\n        this.$deviceMask.css({\n            width: this.deviceMaskDimensions[this.currentDeviceType].width + 'px',\n            height: this.deviceMaskDimensions[this.currentDeviceType].height + 'px',\n            transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%) rotate('+rotationDeg+')'\n        });\n\n        // After the animation duration we can update the iframe sizes and show it\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.deviceAnimationTimeout = setTimeout(() => {\n            // Then make the size change to the preview container\n            if (this.deviceOrientation === 'landscape') {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceHeight + 'px',\n                    height: this.deviceWidth + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: 0,\n                    marginLeft: '-' + (12*zoom) + 'px'\n                });\n            } else {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceWidth + 'px',\n                    height: this.deviceHeight + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: '-' + (12*zoom) + 'px',\n                    marginLeft: 0\n                });\n            }\n\n            // Remove the animating class and show the iframe\n            this.$iframeContainer.removeClass('lp-iframe-container--animating');\n            this.$iframeContainer.removeClass('lp-iframe-container--updating');\n            this.isDeviceUpdating = false;\n\n        }, 300);\n    },\n\n    resetDevicePreview: function()\n    {\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.currentDeviceType = 'desktop';\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n        this.$deviceTypeContainer.find('.lp-device-type-btn--desktop')\n            .addClass('active')\n            .attr('aria-selected', 'true');\n        this.$orientationBtn\n            .addClass('disabled')\n            .attr('disabled', '')\n            .attr('aria-hidden', '');\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n        this.$iframeContainer.removeClass('lp-iframe-container--has-device-preview');\n        this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n\n        // Flat out remove the iframe and let it get regenerated\n        if (this.$devicePreviewContainer) {\n            // If using iFrameResizer then remove the listeners first so we don’t get zombie instances\n            if (this._useIframeResizer()) {\n                this.$iframe[0].iFrameResizer.removeListeners();\n            }\n            this.$devicePreviewContainer.detach();\n            this.$devicePreviewContainer = null;\n            this.$iframe = null;\n            this.updateIframe();\n        }\n\n        this.isDeviceUpdating = false;\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        // Disable anything with a name attribute\n        $clone.find('[name]').prop('disabled', true);\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend({\n    assetId: null,\n    $spinner: null,\n    elementSelect: null,\n    type: null,\n    loaded: null,\n    requestId: 0,\n\n    /**\n     * Initialize the preview file modal.\n     * @returns {*|void}\n     */\n    init: function(assetId, elementSelect, settings) {\n        settings = $.extend(this.defaultSettings, settings);\n\n        settings.onHide = this._onHide.bind(this);\n\n        if (Craft.PreviewFileModal.openInstance) {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            if (instance.assetId !== assetId) {\n                instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                instance.elementSelect = elementSelect;\n            }\n\n            return this.destroy();\n        }\n\n        Craft.PreviewFileModal.openInstance = this;\n        this.elementSelect = elementSelect;\n\n        this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n        this.base(this.$container, $.extend({\n            resizable: true\n        }, settings));\n\n        // Cut the flicker, just show the nice person the preview.\n        if (this.$container) {\n            this.$container.velocity('stop');\n            this.$container.show().css('opacity', 1);\n\n            this.$shade.velocity('stop');\n            this.$shade.show().css('opacity', 1);\n        }\n\n        this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n    },\n\n    /**\n     * When hiding, remove all traces and focus last focused element.\n     * @private\n     */\n    _onHide: function() {\n        Craft.PreviewFileModal.openInstance = null;\n        if (this.elementSelect) {\n            this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n        }\n\n        this.$shade.remove();\n\n        return this.destroy();\n    },\n\n    /**\n     * Disappear immediately forever.\n     * @returns {boolean}\n     */\n    selfDestruct: function() {\n        var instance = Craft.PreviewFileModal.openInstance;\n\n        instance.hide();\n        instance.$shade.remove();\n        instance.destroy();\n\n        Craft.PreviewFileModal.openInstance = null;\n\n        return true;\n    },\n\n    /**\n     * Load an asset, using starting width and height, if applicable\n     * @param assetId\n     * @param startingWidth\n     * @param startingHeight\n     */\n    loadAsset: function(assetId, startingWidth, startingHeight) {\n        this.assetId = assetId;\n\n        this.$container.empty();\n        this.loaded = false;\n\n        this.desiredHeight = null;\n        this.desiredWidth = null;\n\n        var containerHeight = Garnish.$win.height() * 0.66;\n        var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n        containerHeight = containerWidth / 4 * 3;\n\n        if (startingWidth && startingHeight) {\n            var ratio = startingWidth / startingHeight;\n            containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n            containerWidth = containerHeight * ratio;\n\n            // This might actually have put width over the viewport limits, so doublecheck\n            if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = containerWidth / ratio;\n            }\n        }\n\n        this._resizeContainer(containerWidth, containerHeight);\n\n        this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n        var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n            left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n        this.$spinner.css({left: left, top: top, position: 'absolute'});\n        this.requestId++;\n\n        Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, (response, textStatus) => {\n            this.$container.removeClass('loading');\n            this.$spinner.remove();\n            this.loaded = true;\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (response.requestId != this.requestId) {\n                        return;\n                    }\n\n                    if (!response.previewHtml) {\n                        this.$container.addClass('zilch');\n                        this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                        return;\n                    }\n\n                    this.$container.removeClass('zilch');\n                    this.$container.append(response.previewHtml);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n                } else {\n                    alert(response.error);\n\n                    this.hide();\n                }\n            }\n        });\n    },\n\n    /**\n     * Resize the container to specified dimensions\n     * @param containerWidth\n     * @param containerHeight\n     * @private\n     */\n    _resizeContainer: function(containerWidth, containerHeight) {\n        this.$container.css({\n            'width': containerWidth,\n            'min-width': containerWidth,\n            'max-width': containerWidth,\n            'height': containerHeight,\n            'min-height': containerHeight,\n            'max-height': containerHeight,\n            'top': (Garnish.$win.height() - containerHeight) / 2,\n            'left': (Garnish.$win.width() - containerWidth) / 2\n        });\n    }\n}, {\n    defaultSettings: {\n        startingWidth: null,\n        startingHeight: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend({\n    $progressBar: null,\n    $innerProgressBar: null,\n    $progressBarStatus: null,\n\n    _itemCount: 0,\n    _processedItemCount: 0,\n    _displaySteps: false,\n\n    init: function($element, displaySteps) {\n        if (displaySteps) {\n            this._displaySteps = true;\n        }\n\n        this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n        this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n        this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n        this.resetProgressBar();\n    },\n\n    /**\n     * Reset the progress bar\n     */\n    resetProgressBar: function() {\n        // Since setting the progress percentage implies that there is progress to be shown\n        // It removes the pending class - we must add it back.\n        this.setProgressPercentage(100);\n        this.$progressBar.addClass('pending');\n\n        // Reset all the counters\n        this.setItemCount(1);\n        this.setProcessedItemCount(0);\n        this.$progressBarStatus.html('');\n\n        if (this._displaySteps) {\n            this.$progressBar.addClass('has-status');\n        }\n    },\n\n    /**\n     * Fade to invisible, hide it using a class and reset opacity to visible\n     */\n    hideProgressBar: function() {\n        this.$progressBar.fadeTo('fast', 0.01, () => {\n            this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n    },\n\n    showProgressBar: function() {\n        this.$progressBar.removeClass('hidden');\n        this.$progressBarStatus.removeClass('hidden');\n    },\n\n    setItemCount: function(count) {\n        this._itemCount = count;\n    },\n\n    incrementItemCount: function(count) {\n        this._itemCount += count;\n    },\n\n    setProcessedItemCount: function(count) {\n        this._processedItemCount = count;\n    },\n\n    incrementProcessedItemCount: function(count) {\n        this._processedItemCount += count;\n    },\n\n    updateProgressBar: function() {\n        // Only fools would allow accidental division by zero.\n        this._itemCount = Math.max(this._itemCount, 1);\n\n        var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n        this.setProgressPercentage(width);\n\n        if (this._displaySteps) {\n            this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n        }\n    },\n\n    setProgressPercentage: function(percentage, animate) {\n        if (percentage === 0) {\n            this.$progressBar.addClass('pending');\n        } else {\n            this.$progressBar.removeClass('pending');\n\n            if (animate) {\n                this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n            } else {\n                this.$innerProgressBar.velocity('stop').width(percentage + '%');\n            }\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, this._handleBatchPromptSelection.bind(this), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            } else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        } else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', () => {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        });\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n\n(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n\n/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', this._handleResize.bind(this));\n        this.addListener(this.$container, 'tapstart', this._handleTapStart.bind(this));\n        this.addListener(Garnish.$bod, 'tapmove', this._handleTapMove.bind(this));\n        this.addListener(Garnish.$bod, 'tapend', this._handleTapEnd.bind(this));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout(() => {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        } else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (((this.$graduations.width() / 2) + (position * -1)) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n\n(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.Slideout = Garnish.Base.extend({\n        $outerContainer: null,\n        $container: null,\n        $shade: null,\n        isOpen: false,\n\n        init: function(contents, settings) {\n            this.setSettings(settings, Craft.Slideout.defaults);\n\n            if (!Garnish.isMobileBrowser()) {\n                this.$shade = $('<div class=\"slideout-shade\"/>')\n                    .appendTo(Garnish.$bod);\n\n                if (this.settings.closeOnShadeClick) {\n                    this.addListener(this.$shade, 'click', ev => {\n                        ev.stopPropagation();\n                        this.close();\n                    });\n                }\n            }\n\n            this.$outerContainer = $('<div/>', {class: 'slideout-container hidden'});\n            this.$container = $(`<${this.settings.containerElement}/>`, this.settings.containerAttributes)\n                .addClass('slideout')\n                .append(contents)\n                .data('slideout', this)\n                .appendTo(this.$outerContainer);\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.addClass('so-mobile');\n            }\n\n            Craft.trapFocusWithin(this.$container);\n\n            if (this.settings.autoOpen) {\n                this.open();\n            }\n        },\n\n        open: function() {\n            if (this.isOpen) {\n                return;\n            }\n\n            this._cancelTransitionListeners();\n\n            // Move the shade + container to the end of <body> so they get the highest sub-z-indexes\n            if (this.$shade) {\n                this.$shade\n                    .appendTo(Garnish.$bod)\n                    .show();\n            }\n\n            this.$outerContainer\n                .appendTo(Garnish.$bod)\n                .removeClass('hidden');\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.css('top', '100vh');\n            } else {\n                this.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n            }\n\n            this.$container.one('transitionend.slideout', () => {\n                Craft.setFocusWithin(this.$container);\n            });\n\n            if (this.$shade) {\n                this.$shade[0].offsetWidth;\n                this.$shade.addClass('so-visible');\n            }\n\n            this.$container[0].offsetWidth;\n            Craft.Slideout.addPanel(this);\n\n            this.enable();\n            Garnish.shortcutManager.addLayer();\n\n            if (this.settings.closeOnEsc) {\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n                    this.close();\n                });\n            }\n\n            this.isOpen = true;\n            this.trigger('open');\n        },\n\n        close: function() {\n            if (!this.isOpen) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n            this.disable();\n            this.isOpen = false;\n\n            this._cancelTransitionListeners();\n\n            if (this.$shade) {\n                this.removeListener(this.$shade, 'click');\n                this.$shade\n                    .removeClass('so-visible')\n                    .one('transitionend.slideout', () => {\n                        this.$shade.hide();\n                    });\n            }\n\n            Craft.Slideout.removePanel(this);\n            Garnish.shortcutManager.removeLayer();\n            this.$container.one('transitionend.slideout', () => {\n                this.$outerContainer.addClass('hidden');\n                this.trigger('close');\n            });\n        },\n\n        _cancelTransitionListeners: function() {\n            if (this.$shade) {\n                this.$shade.off('transitionend.slideout');\n            }\n\n            this.$container.off('transitionend.slideout');\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$shade) {\n                this.$shade.remove();\n                this.$shade = null;\n            }\n\n            this.$outerContainer.remove();\n            this.$outerContainer = null;\n            this.$container = null;\n\n            this.base();\n        },\n    }, {\n        defaults: {\n            containerElement: 'div',\n            containerAttributes: {},\n            autoOpen: true,\n            closeOnEsc: true,\n            closeOnShadeClick: true,\n        },\n        openPanels: [],\n        addPanel: function(panel) {\n            Craft.Slideout.openPanels.unshift(panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', 0);\n            } else {\n                Craft.Slideout.updateStyles();\n            }\n        },\n        removePanel: function(panel) {\n            Craft.Slideout.openPanels = Craft.Slideout.openPanels.filter(m => m !== panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', '100vh');\n            } else {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n                Craft.Slideout.updateStyles();\n            }\n        },\n        updateStyles: function() {\n            const totalPanels = Craft.Slideout.openPanels.length;\n            Craft.Slideout.openPanels.forEach((panel, i) => {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', `${50 * ((totalPanels - i) / totalPanels)}vw`);\n            });\n\n            if (totalPanels !== 0) {\n                Garnish.$bod.addClass('no-scroll');\n            } else {\n                Garnish.$bod.removeClass('no-scroll');\n            }\n        },\n    });\n})(jQuery);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n        // Remove inner-word punctuation\n        sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        if (!Craft.allowUppercaseInSlug) {\n            sourceVal = sourceVal.toLowerCase();\n        }\n\n        if (Craft.limitAutoSlugsToAscii) {\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n        }\n\n        // Get the \"words\". Split on anything that is not alphanumeric.\n        // Reference: http://www.regular-expressions.info/unicode.html\n        var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n        if (words.length) {\n            return words.join(Craft.slugWordSeparator);\n        } else {\n            return '';\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend({\n    id: null,\n\n    $container: null,\n    state: null,\n    structureDrag: null,\n\n    /**\n     * Init\n     */\n    init: function(id, container, settings) {\n        this.id = id;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Structure.defaults);\n\n        // Is this already a structure?\n        if (this.$container.data('structure')) {\n            Garnish.log('Double-instantiating a structure on an element');\n            this.$container.data('structure').destroy();\n        }\n\n        this.$container.data('structure', this);\n\n        this.state = {};\n\n        if (this.settings.storageKey) {\n            $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n        }\n\n        if (typeof this.state.collapsedElementIds === 'undefined') {\n            this.state.collapsedElementIds = [];\n        }\n\n        var $parents = this.$container.find('ul').prev('.row');\n\n        for (var i = 0; i < $parents.length; i++) {\n            var $row = $($parents[i]),\n                $li = $row.parent(),\n                $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n            if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                $li.addClass('collapsed');\n            }\n\n            this.initToggle($toggle);\n        }\n\n        if (this.settings.sortable) {\n            this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n        }\n\n        if (this.settings.newChildUrl) {\n            this.initNewChildMenus(this.$container.find('.add'));\n        }\n    },\n\n    initToggle: function($toggle) {\n        $toggle.on('click', ev => {\n            var $li = $(ev.currentTarget).closest('li'),\n                elementId = $li.children('.row').find('.element:first').data('id'),\n                viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n            if ($li.hasClass('collapsed')) {\n                $li.removeClass('collapsed');\n\n                if (viewStateKey !== -1) {\n                    this.state.collapsedElementIds.splice(viewStateKey, 1);\n                }\n            } else {\n                $li.addClass('collapsed');\n\n                if (viewStateKey === -1) {\n                    this.state.collapsedElementIds.push(elementId);\n                }\n            }\n\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.state);\n            }\n        });\n    },\n\n    initNewChildMenus: function($addBtns) {\n        this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n    },\n\n    onNewChildMenuClick: function(ev) {\n        var $btn = $(ev.currentTarget);\n\n        if (!$btn.data('menubtn')) {\n            var elementId = $btn.parent().children('.element').data('id'),\n                newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n            $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n            var menuBtn = new Garnish.MenuBtn($btn);\n            menuBtn.showMenu();\n        }\n    },\n\n    getIndent: function(level) {\n        return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n    },\n\n    addElement: function($element) {\n        var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n            $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n        $row.append($element);\n\n        if (this.settings.sortable) {\n            $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n            this.structureDrag.addItems($li);\n        }\n\n        if (this.settings.newChildUrl) {\n            var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n            this.initNewChildMenus($addBtn);\n        }\n\n        $row.css('margin-bottom', -30);\n        $row.velocity({'margin-bottom': 0}, 'fast');\n    },\n\n    removeElement: function($element) {\n        var $li = $element.parent().parent();\n\n        if (this.settings.sortable) {\n            this.structureDrag.removeItems($li);\n        }\n\n        var $parentUl;\n\n        if (!$li.siblings().length) {\n            $parentUl = $li.parent();\n        }\n\n        $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', () => {\n            $li.remove();\n\n            if (typeof $parentUl !== 'undefined') {\n                this._removeUl($parentUl);\n            }\n        });\n    },\n\n    _removeUl: function($ul) {\n        $ul.siblings('.row').children('.toggle').remove();\n        $ul.remove();\n    }\n}, {\n    baseIndent: 8,\n    nestedIndent: 35,\n\n    defaults: {\n        storageKey: null,\n        sortable: false,\n        newChildUrl: null,\n        maxLevels: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend({\n    structure: null,\n    maxLevels: null,\n    draggeeLevel: null,\n\n    $helperLi: null,\n    $targets: null,\n    draggeeHeight: null,\n\n    init: function(structure, maxLevels) {\n        this.structure = structure;\n        this.maxLevels = maxLevels;\n\n        this.$insertion = $('<li class=\"draginsertion\"/>');\n\n        var $items = this.structure.$container.find('li');\n\n        this.base($items, {\n            handle: '.element:first, .move:first',\n            helper: this.getHelper.bind(this)\n        });\n    },\n\n    getHelper: function($helper) {\n        this.$helperLi = $helper;\n        var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n        $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n        $helper.find('.move').removeAttr('title');\n        return $ul;\n    },\n\n    onDragStart: function() {\n        this.$targets = $();\n\n        // Recursively find each of the targets, in the order they appear to be in\n        this.findTargets(this.structure.$container);\n\n        // How deep does the rabbit hole go?\n        this.draggeeLevel = 0;\n        var $level = this.$draggee;\n        do {\n            this.draggeeLevel++;\n            $level = $level.find('> ul > li');\n        } while ($level.length);\n\n        // Collapse the draggee\n        this.draggeeHeight = this.$draggee.height();\n        this.$draggee.velocity({\n            height: 0\n        }, 'fast', () => {\n            this.$draggee.addClass('hidden');\n        });\n        this.base();\n\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.cancelDrag();\n            }\n        });\n    },\n\n    findTargets: function($ul) {\n        var $lis = $ul.children().not(this.$draggee);\n\n        for (var i = 0; i < $lis.length; i++) {\n            var $li = $($lis[i]);\n            this.$targets = this.$targets.add($li.children('.row'));\n\n            if (!$li.hasClass('collapsed')) {\n                this.findTargets($li.children('ul'));\n            }\n        }\n    },\n\n    onDrag: function() {\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n            this.$insertion.remove();\n        }\n\n        // First let's find the closest target\n        this._.$closestTarget = null;\n        this._.closestTargetPos = null;\n        this._.closestTargetYDiff = null;\n        this._.closestTargetOffset = null;\n        this._.closestTargetHeight = null;\n\n        for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n            this._.$target = $(this.$targets[this._.i]);\n            this._.targetOffset = this._.$target.offset();\n            this._.targetHeight = this._.$target.outerHeight();\n            this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n            this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n            if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                this._.$closestTarget = this._.$target;\n                this._.closestTargetPos = this._.i;\n                this._.closestTargetYDiff = this._.targetYDiff;\n                this._.closestTargetOffset = this._.targetOffset;\n                this._.closestTargetHeight = this._.targetHeight;\n            } else {\n                // Getting colder\n                break;\n            }\n        }\n\n        if (!this._.$closestTarget) {\n            return;\n        }\n\n        // Are we hovering above the first row?\n        if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n            this.$insertion.prependTo(this.structure.$container);\n        } else {\n            this._.$closestTargetLi = this._.$closestTarget.parent();\n            this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n            // Is there a next row?\n            if (this._.closestTargetPos < this.$targets.length - 1) {\n                this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n            } else {\n                this._.$nextTargetLi = null;\n                this._.nextTargetLevel = null;\n            }\n\n            // Are we hovering between this row and the next one?\n            this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n            /**\n             * Scenario 1: Both rows have the same level.\n             *\n             *     * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                if (this._.hoveringBetweenRows) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                        // Position the insertion after the closest target\n                        this.$insertion.insertAfter(this._.$closestTargetLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n\n            /**\n             * Scenario 2: Next row is a child of this one.\n             *\n             *     * Row 1\n             *     ----------------------\n             *         * Row 2\n             */\n\n            else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                    if (this._.hoveringBetweenRows) {\n                        // Position the insertion as the first child of the closest target\n                        this.$insertion.insertBefore(this._.$nextTargetLi);\n                    } else {\n                        this._.$closestTarget.addClass('draghover');\n                        this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                    }\n                }\n            }\n\n            /**\n             * Scenario 3: Next row is a child of a parent node, or there is no next row.\n             *\n             *         * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            else {\n                if (this._.hoveringBetweenRows) {\n                    // Determine which <li> to position the insertion after\n                    this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                    if (Craft.orientation === 'rtl') {\n                        this._.draggeeX += this.$helperLi.width();\n                    }\n\n                    this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                    this._.$closestParentLi = null;\n                    this._.closestParentLiXDiff = null;\n                    this._.closestParentLevel = null;\n\n                    for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                        this._.$parentLi = $(this._.$parentLis[this._.i]);\n                        this._.parentLiX = this._.$parentLi.offset().left;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.parentLiX += this._.$parentLi.width();\n                        }\n\n                        this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                        this._.parentLevel = this._.$parentLi.data('level');\n\n                        if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                            !this._.$closestParentLi || (\n                                this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                            )\n                        )) {\n                            this._.$closestParentLi = this._.$parentLi;\n                            this._.closestParentLiXDiff = this._.parentLiXDiff;\n                            this._.closestParentLevel = this._.parentLevel;\n                        }\n                    }\n\n                    if (this._.$closestParentLi) {\n                        this.$insertion.insertAfter(this._.$closestParentLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n        }\n    },\n\n    cancelDrag: function() {\n        this.$insertion.remove();\n\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n        }\n\n        this.onMouseUp();\n    },\n\n    onDragStop: function() {\n        // Are we repositioning the draggee?\n        if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n            var $draggeeParent,\n                moved;\n\n            // Are we about to leave the draggee's original parent childless?\n            if (!this.$draggee.siblings().length) {\n                $draggeeParent = this.$draggee.parent();\n            }\n\n            if (this.$insertion.parent().length) {\n                // Make sure the insertion isn't right next to the draggee\n                var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                    this.$insertion.replaceWith(this.$draggee);\n                    moved = true;\n                } else {\n                    this.$insertion.remove();\n                    moved = false;\n                }\n            } else {\n                var $ul = this._.$closestTargetLi.children('ul');\n\n                // Make sure this is a different parent than the draggee's\n                if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                    if (!$ul.length) {\n                        var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                        this.structure.initToggle($toggle);\n\n                        $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                    } else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                        this._.$closestTarget.children('.toggle').trigger('click');\n                    }\n\n                    this.$draggee.appendTo($ul);\n                    moved = true;\n                } else {\n                    moved = false;\n                }\n            }\n\n            // Remove the class either way\n            this._.$closestTarget.removeClass('draghover');\n\n            if (moved) {\n                // Now deal with the now-childless parent\n                if ($draggeeParent) {\n                    this.structure._removeUl($draggeeParent);\n                }\n\n                // Has the level changed?\n                var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                var animateCss;\n\n                if (newLevel != this.$draggee.data('level')) {\n                    // Correct the helper's padding if moving to/from level 1\n                    if (this.$draggee.data('level') == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = 38;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    } else if (newLevel == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    }\n\n                    this.setLevel(this.$draggee, newLevel);\n                }\n\n                // Make it real\n                var $element = this.$draggee.children('.row').children('.element');\n\n                var data = {\n                    structureId: this.structure.id,\n                    elementId: $element.data('id'),\n                    siteId: $element.data('site-id'),\n                    prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                    parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                };\n\n                Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                    }\n                });\n            }\n        }\n\n        // Animate things back into place\n        this.$draggee.velocity('stop').removeClass('hidden').velocity({\n            height: this.draggeeHeight\n        }, 'fast', () => {\n            this.$draggee.css('height', 'auto');\n        });\n\n        this.returnHelpersToDraggees();\n\n        this.base();\n    },\n\n    setLevel: function($li, level) {\n        $li.data('level', level);\n\n        var indent = this.structure.getIndent(level);\n\n        var css = {};\n        css['margin-' + Craft.left] = '-' + indent + 'px';\n        css['padding-' + Craft.left] = indent + 'px';\n        this.$draggee.children('.row').css(css);\n\n        var $childLis = $li.children('ul').children();\n\n        for (var i = 0; i < $childLis.length; i++) {\n            this.setLevel($($childLis[i]), level + 1);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n    tableView: null,\n    structureId: null,\n    maxLevels: null,\n\n    _basePadding: null,\n    _helperMargin: null,\n\n    _$firstRowCells: null,\n    _$titleHelperCell: null,\n\n    _titleHelperCellOuterWidth: null,\n\n    _ancestors: null,\n    _updateAncestorsFrame: null,\n\n    _draggeeLevel: null,\n    _draggeeLevelDelta: null,\n    draggingLastElements: null,\n    _loadingDraggeeLevelDelta: false,\n\n    _targetLevel: null,\n    _targetLevelBounds: null,\n\n    _positionChanged: null,\n\n    /**\n     * Constructor\n     */\n    init: function(tableView, $elements, settings) {\n        this.tableView = tableView;\n        this.structureId = this.tableView.$table.data('structure-id');\n        this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n        this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n        this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n        settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n            handle: '.move',\n            collapseDraggees: true,\n            singleHelper: true,\n            helperSpacingY: 2,\n            magnetStrength: 4,\n            helper: this.getHelper.bind(this),\n            helperLagBase: 1.5,\n            axis: Garnish.Y_AXIS\n        });\n\n        this.base($elements, settings);\n    },\n\n    /**\n     * Returns the draggee rows (including any descendent rows).\n     */\n    findDraggee: function() {\n        this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n        this._draggeeLevelDelta = 0;\n\n        var $draggee = $(this.$targetItem),\n            $nextRow = this.$targetItem.next();\n\n        while ($nextRow.length) {\n            // See if this row is a descendant of the draggee\n            var nextRowLevel = $nextRow.data('level');\n\n            if (nextRowLevel <= this._draggeeLevel) {\n                break;\n            }\n\n            // Is this the deepest descendant we've seen so far?\n            var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n            if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                this._draggeeLevelDelta = nextRowLevelDelta;\n            }\n\n            // Add it and prep the next row\n            $draggee = $draggee.add($nextRow);\n            $nextRow = $nextRow.next();\n        }\n\n        // Are we dragging the last elements on the page?\n        this.draggingLastElements = !$nextRow.length;\n\n        // Do we have a maxLevels to enforce,\n        // and does it look like this draggee has descendants we don't know about yet?\n        if (\n            this.maxLevels &&\n            this.draggingLastElements &&\n            this.tableView.getMorePending()\n        ) {\n            // Only way to know the true descendant level delta is to ask PHP\n            this._loadingDraggeeLevelDelta = true;\n\n            var data = this._getAjaxBaseData(this.$targetItem);\n\n            Craft.postActionRequest('structures/get-element-level-delta', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this._loadingDraggeeLevelDelta = false;\n\n                    if (this.dragging) {\n                        this._draggeeLevelDelta = response.delta;\n                        this.drag(false);\n                    }\n                }\n            });\n        }\n\n        return $draggee;\n    },\n\n    /**\n     * Returns the drag helper.\n     */\n    getHelper: function($helperRow) {\n        var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n            $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n            $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the column widths\n        this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n        var $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            var $helperCell = $($helperCells[i]);\n\n            // Skip the checkbox cell\n            if ($helperCell.hasClass('checkbox-cell')) {\n                $helperCell.remove();\n                continue;\n            }\n\n            // Hard-set the cell widths\n            var $firstRowCell = $(this._$firstRowCells[i]);\n            var width = $firstRowCell[0].getBoundingClientRect().width;\n\n            $firstRowCell.css('width', width + 'px');\n            $helperCell.css('width', width + 'px');\n\n            // Is this the title cell?\n            if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                this._$titleHelperCell = $helperCell;\n\n                var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                this._titleHelperCellOuterWidth = width;\n\n                $helperCell.css('padding-' + Craft.left, this._basePadding);\n            }\n        }\n\n        return $outerContainer;\n    },\n\n    /**\n     * Returns whether the draggee can be inserted before a given item.\n     */\n    canInsertBefore: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item.prev(), $item) !== false);\n    },\n\n    /**\n     * Returns whether the draggee can be inserted after a given item.\n     */\n    canInsertAfter: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item, $item.next()) !== false);\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        // Get the initial set of ancestors, before the item gets moved\n        this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n        // Set the initial target level bounds\n        this._setTargetLevelBounds();\n\n        // Check to see if we should load more elements now\n        this.tableView.maybeLoadMore();\n\n        this.base();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.base();\n        this._updateIndent();\n    },\n\n    /**\n     * On Insertion Point Change\n     */\n    onInsertionPointChange: function() {\n        this._setTargetLevelBounds();\n        this._updateAncestorsBeforeRepaint();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this._positionChanged = false;\n        this.base();\n\n        // Update the draggee's padding if the position just changed\n        // ---------------------------------------------------------------------\n\n        if (this._targetLevel != this._draggeeLevel) {\n            var levelDiff = this._targetLevel - this._draggeeLevel;\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                var $draggee = $(this.$draggee[i]),\n                    oldLevel = $draggee.data('level'),\n                    newLevel = oldLevel + levelDiff,\n                    padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                $draggee.data('level', newLevel);\n                $draggee.find('.element').data('level', newLevel);\n                $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n            }\n\n            this._positionChanged = true;\n        }\n\n        // Keep in mind this could have also been set by onSortChange()\n        if (this._positionChanged) {\n            // Tell the server about the new position\n            // -----------------------------------------------------------------\n\n            var data = this._getAjaxBaseData(this.$draggee);\n\n            // Find the previous sibling/parent, if there is one\n            var $prevRow = this.$draggee.first().prev();\n\n            while ($prevRow.length) {\n                var prevRowLevel = $prevRow.data('level');\n\n                if (prevRowLevel == this._targetLevel) {\n                    data.prevId = $prevRow.data('id');\n                    break;\n                }\n\n                if (prevRowLevel < this._targetLevel) {\n                    data.parentId = $prevRow.data('id');\n\n                    // Is this row collapsed?\n                    var $toggle = $prevRow.find('> th > .toggle');\n\n                    if (!$toggle.hasClass('expanded')) {\n                        // Make it look expanded\n                        $toggle.addClass('expanded');\n\n                        // Add a temporary row\n                        var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                        // Remove the target item\n                        if (this.tableView.elementSelect) {\n                            this.tableView.elementSelect.removeItems(this.$targetItem);\n                        }\n\n                        this.removeItems(this.$targetItem);\n                        this.$targetItem.remove();\n                        this.tableView._totalVisible--;\n                    }\n\n                    break;\n                }\n\n                $prevRow = $prevRow.prev();\n            }\n\n            Craft.postActionRequest('structures/move-element', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    if (!response.success) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        this.tableView.elementIndex.updateElements();\n                        return;\n                    }\n                    Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                    this.onPositionChange();\n\n                    // Were we waiting on this to complete so we can expand the new parent?\n                    if ($spinnerRow && $spinnerRow.parent().length) {\n                        $spinnerRow.remove();\n                        this.tableView._expandElement($toggle, true);\n                    }\n\n                    // See if we should run any pending tasks\n                    Craft.cp.runQueue();\n                }\n            });\n        }\n    },\n\n    onSortChange: function() {\n        if (this.tableView.elementSelect) {\n            this.tableView.elementSelect.resetItemOrder();\n        }\n\n        this._positionChanged = true;\n        this.base();\n    },\n\n    onPositionChange: function() {\n        Garnish.requestAnimationFrame(() => {\n            this.trigger('positionChange');\n            this.settings.onPositionChange();\n        });\n    },\n\n    onReturnHelpersToDraggees: function() {\n        this._$firstRowCells.css('width', '');\n\n        // If we were dragging the last elements on the page and ended up loading any additional elements in,\n        // there could be a gap between the last draggee item and whatever now comes after it.\n        // So remove the post-draggee elements and possibly load up the next batch.\n        if (this.draggingLastElements && this.tableView.getMorePending()) {\n            // Update the element index's record of how many items are actually visible\n            this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n            var $postDraggeeItems = this.$draggee.last().nextAll();\n\n            if ($postDraggeeItems.length) {\n                this.removeItems($postDraggeeItems);\n                $postDraggeeItems.remove();\n                this.tableView.maybeLoadMore();\n            }\n        }\n\n        this.base();\n    },\n\n    /**\n     * Returns the min and max levels that the draggee could occupy between\n     * two given rows, or false if it’s not going to work out.\n     */\n    _getLevelBounds: function($prevRow, $nextRow) {\n        // Can't go any lower than the next row, if there is one\n        if ($nextRow && $nextRow.length) {\n            this._getLevelBounds._minLevel = $nextRow.data('level');\n        } else {\n            this._getLevelBounds._minLevel = 1;\n        }\n\n        // Can't go any higher than the previous row + 1\n        if ($prevRow && $prevRow.length) {\n            this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n        } else {\n            this._getLevelBounds._maxLevel = 1;\n        }\n\n        // Does this structure have a max level?\n        if (this.maxLevels) {\n            // Make sure it's going to fit at all here\n            if (\n                this._getLevelBounds._minLevel != 1 &&\n                this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n            ) {\n                return false;\n            }\n\n            // Limit the max level if we have to\n            if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                    this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                }\n            }\n        }\n\n        return {\n            min: this._getLevelBounds._minLevel,\n            max: this._getLevelBounds._maxLevel\n        };\n    },\n\n    /**\n     * Determines the min and max possible levels at the current draggee's position.\n     */\n    _setTargetLevelBounds: function() {\n        this._targetLevelBounds = this._getLevelBounds(\n            this.$draggee.first().prev(),\n            this.$draggee.last().next()\n        );\n    },\n\n    /**\n     * Determines the target level based on the current mouse position.\n     */\n    _updateIndent: function(forcePositionChange) {\n        // Figure out the target level\n        // ---------------------------------------------------------------------\n\n        // How far has the cursor moved?\n        this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n        // Flip that if this is RTL\n        if (Craft.orientation === 'rtl') {\n            this._updateIndent._mouseDist *= -1;\n        }\n\n        // What is that in indentation levels?\n        this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // Combine with the original level to get the new target level\n        this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n        // Contain it within our min/max levels\n        if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n            this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n            this._updateIndent._targetLevel = this._targetLevelBounds.min;\n        } else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n            this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n            this._updateIndent._targetLevel = this._targetLevelBounds.max;\n        }\n\n        // Has the target level changed?\n        if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n            // Target level is changing, so update the ancestors\n            this._updateAncestorsBeforeRepaint();\n        }\n\n        // Update the UI\n        // ---------------------------------------------------------------------\n\n        // How far away is the cursor from the exact target level distance?\n        this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // What's the magnet impact of that?\n        this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n        // Put it on a leash\n        if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n            this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n        }\n\n        // Apply the new margin/width\n        this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n        this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n        this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n    },\n\n    /**\n     * Returns the indent size for a given level\n     */\n    _getLevelIndent: function(level) {\n        return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n    },\n\n    /**\n     * Returns the base data that should be sent with StructureController Ajax requests.\n     */\n    _getAjaxBaseData: function($row) {\n        return {\n            structureId: this.structureId,\n            elementId: $row.data('id'),\n            siteId: $row.find('.element:first').data('site-id')\n        };\n    },\n\n    /**\n     * Returns a row's ancestor rows\n     */\n    _getAncestors: function($row, targetLevel) {\n        this._getAncestors._ancestors = [];\n\n        if (targetLevel != 0) {\n            this._getAncestors._level = targetLevel;\n            this._getAncestors._$prevRow = $row.prev();\n\n            while (this._getAncestors._$prevRow.length) {\n                if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                    this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                    this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                    // Did we just reach the top?\n                    if (this._getAncestors._level == 0) {\n                        break;\n                    }\n                }\n\n                this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n            }\n        }\n\n        return this._getAncestors._ancestors;\n    },\n\n    /**\n     * Prepares to have the ancestors updated before the screen is repainted.\n     */\n    _updateAncestorsBeforeRepaint: function() {\n        if (this._updateAncestorsFrame) {\n            Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n        }\n\n        this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestors.bind(this));\n    },\n\n    _updateAncestors: function() {\n        this._updateAncestorsFrame = null;\n\n        // Update the old ancestors\n        // -----------------------------------------------------------------\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n            // One less descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n            // Is it now childless?\n            if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                // Remove its toggle\n                this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n            }\n        }\n\n        // Update the new ancestors\n        // -----------------------------------------------------------------\n\n        this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n            // One more descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n            // Is this its first child?\n            if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                // Create its toggle\n                $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                    .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n            }\n        }\n\n        this._ancestors = this._updateAncestors._newAncestors;\n\n        delete this._updateAncestors._i;\n        delete this._updateAncestors._$ancestor;\n        delete this._updateAncestors._newAncestors;\n    }\n}, {\n    HELPER_MARGIN: 0,\n    LEVEL_INDENT: 44,\n    MAX_GIVE: 22,\n\n    defaults: {\n        onPositionChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend({\n    $table: null,\n    $selectedSortHeader: null,\n\n    structureTableSort: null,\n\n    _totalVisiblePostStructureTableDraggee: null,\n    _morePendingPostStructureTableDraggee: false,\n\n    getElementContainer: function() {\n        // Save a reference to the table\n        this.$table = this.$container.find('table:first');\n        return this.$table.children('tbody:first');\n    },\n\n    afterInit: function() {\n        // Set the sort header\n        this.initTableHeaders();\n\n        // Create the Structure Table Sorter\n        if (\n            this.elementIndex.settings.context === 'index' &&\n            this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n            Garnish.hasAttr(this.$table, 'data-structure-id')\n        ) {\n            this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements());\n        } else {\n            this.structureTableSort = null;\n        }\n\n        // Handle expand/collapse toggles for Structures\n        if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n            this.addListener(this.$elementContainer, 'click', function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.hasClass('toggle')) {\n                    if (this._collapseElement($target) === false) {\n                        this._expandElement($target);\n                    }\n                }\n            });\n        }\n    },\n\n    initTableHeaders: function() {\n        var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n            $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n        for (var i = 0; i < $tableHeaders.length; i++) {\n            var $header = $tableHeaders.eq(i),\n                attr = $header.attr('data-attribute');\n\n            // Is this the selected sort attribute?\n            if (attr === selectedSortAttr) {\n                this.$selectedSortHeader = $header;\n                var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                $header\n                    .addClass('ordered ' + selectedSortDir)\n                    .on('click', this._handleSelectedSortHeaderClick.bind(this));\n            } else {\n                // Is this attribute sortable?\n                var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                if ($sortAttribute.length) {\n                    $header\n                        .addClass('orderable')\n                        .on('click', this._handleUnselectedSortHeaderClick.bind(this));\n                }\n            }\n        }\n    },\n\n    isVerticalList: function() {\n        return true;\n    },\n\n    getTotalVisible: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._totalVisiblePostStructureTableDraggee;\n        } else {\n            return this._totalVisible;\n        }\n    },\n\n    setTotalVisible: function(totalVisible) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._totalVisiblePostStructureTableDraggee = totalVisible;\n        } else {\n            this._totalVisible = totalVisible;\n        }\n    },\n\n    getMorePending: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._morePendingPostStructureTableDraggee;\n        } else {\n            return this._morePending;\n        }\n    },\n\n    setMorePending: function(morePending) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._morePendingPostStructureTableDraggee = morePending;\n        } else {\n            this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n        }\n    },\n\n    getLoadMoreParams: function() {\n        var params = this.base();\n\n        // If we are dragging the last elements on the page,\n        // tell the controller to only load elements positioned after the draggee.\n        if (this._isStructureTableDraggingLastElements()) {\n            params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n        }\n\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        this.base($newElements);\n\n        if (this.structureTableSort) {\n            this.structureTableSort.addItems($newElements);\n        }\n\n        Craft.cp.updateResponsiveTables();\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            params: {\n                includeTableAttributesForSource: this.elementIndex.sourceKey\n            },\n            onSaveElement: response => {\n                if (response.tableAttributes) {\n                    this._updateTableAttributes($element, response.tableAttributes);\n                }\n            },\n            elementIndex: this.elementIndex\n        });\n    },\n\n    _collapseElement: function($toggle, force) {\n        if (!force && !$toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.removeClass('expanded');\n\n        // Find and remove the descendant rows\n        var $row = $toggle.parent().parent(),\n            id = $row.data('id'),\n            level = $row.data('level'),\n            $nextRow = $row.next();\n\n        while ($nextRow.length) {\n            if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                if ($nextRow.data('level') <= level) {\n                    break;\n                }\n\n                if (this.elementSelect) {\n                    this.elementSelect.removeItems($nextRow);\n                }\n\n                if (this.structureTableSort) {\n                    this.structureTableSort.removeItems($nextRow);\n                }\n\n                this._totalVisible--;\n            }\n\n            var $nextNextRow = $nextRow.next();\n            $nextRow.remove();\n            $nextRow = $nextNextRow;\n        }\n\n        // Remember that this row should be collapsed\n        if (!this.elementIndex.instanceState.collapsedElementIds) {\n            this.elementIndex.instanceState.collapsedElementIds = [];\n        }\n\n        this.elementIndex.instanceState.collapsedElementIds.push(id);\n        this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n        // Bottom of the index might be viewable now\n        this.maybeLoadMore();\n    },\n\n    _expandElement: function($toggle, force) {\n        if (!force && $toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.addClass('expanded');\n\n        // Remove this element from our list of collapsed elements\n        if (this.elementIndex.instanceState.collapsedElementIds) {\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n            if (index !== -1) {\n                this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                // Add a temporary row\n                var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                // Load the nested elements\n                let data = $.extend(true, {}, this.settings.params);\n                data.criteria.descendantOf = id;\n\n                Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {data}).then(response => {\n                    // Do we even care about this anymore?\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n\n                    let $newElements = $(response.data.html);\n\n                    // Are there more descendants we didn't get in this batch?\n                    let totalVisible = (this._totalVisible + $newElements.length);\n                    let morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                    if (morePending) {\n                        // Remove all the elements after it\n                        let $nextRows = $spinnerRow.nextAll();\n\n                        if (this.elementSelect) {\n                            this.elementSelect.removeItems($nextRows);\n                        }\n\n                        if (this.structureTableSort) {\n                            this.structureTableSort.removeItems($nextRows);\n                        }\n\n                        $nextRows.remove();\n                        totalVisible -= $nextRows.length;\n                    } else {\n                        // Maintain the current 'more' status\n                        morePending = this._morePending;\n                    }\n\n                    $spinnerRow.replaceWith($newElements);\n                    this.thumbLoader.load($newElements);\n\n                    if (this.elementIndex.actions || this.settings.selectable) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.addItems($newElements);\n                    }\n\n                    Craft.appendHeadHtml(response.data.headHtml);\n                    Craft.appendFootHtml(response.data.footHtml);\n                    Craft.cp.updateResponsiveTables();\n\n                    this.setTotalVisible(totalVisible);\n                    this.setMorePending(morePending);\n\n                    // Is there room to load more right now?\n                    this.maybeLoadMore();\n                }).catch(e => {\n                    Craft.cp.displayError();\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n                });\n            }\n        }\n    },\n\n    _createSpinnerRowAfter: function($row) {\n        return $(\n            '<tr data-spinnerrow>' +\n            '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n            '<div class=\"spinner\"/>' +\n            '</td>' +\n            '</tr>'\n        ).insertAfter($row);\n    },\n\n    _isStructureTableDraggingLastElements: function() {\n        return (\n            this.structureTableSort &&\n            this.structureTableSort.dragging &&\n            this.structureTableSort.draggingLastElements\n        );\n    },\n\n    _handleSelectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        // Reverse the sort direction\n        var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n            newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n        this.elementIndex.setSortDirection(newSortDir);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleUnselectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        var attr = $header.attr('data-attribute');\n\n        this.elementIndex.setSortAttribute(attr);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleSortHeaderClick: function(ev, $header) {\n        if (this.$selectedSortHeader) {\n            this.$selectedSortHeader.removeClass('ordered asc desc');\n        }\n\n        $header.removeClass('orderable').addClass('ordered loading');\n        this.elementIndex.storeSortAttributeAndDirection();\n        this.elementIndex.updateElements();\n\n        // No need for two spinners\n        this.elementIndex.setIndexAvailable();\n    },\n\n    _updateTableAttributes: function($element, tableAttributes) {\n        var $tr = $element.closest('tr');\n\n        for (var attr in tableAttributes) {\n            if (!tableAttributes.hasOwnProperty(attr)) {\n                continue;\n            }\n\n            $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend({\n    searchTimeout: null,\n    searchMenu: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addTagInput: null,\n    $spinner: null,\n\n    _ignoreBlur: false,\n\n    init: function(settings) {\n        // Normalize the settings\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n        this.$addTagInput = this.$container.children('.add').children('.text');\n        this.$spinner = this.$addTagInput.next();\n\n        this.addListener(this.$addTagInput, 'input', () => {\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.searchForTags.bind(this), 500);\n        });\n\n        this.addListener(this.$addTagInput, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n            }\n\n            let $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options.filter('.hover'));\n                    }\n                    return;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                            if ($nextOption.length) {\n                                this.focusOption($nextOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(0));\n                        }\n                    }\n                    return;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                            if ($prevOption.length) {\n                                this.focusOption($prevOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                        }\n                    }\n                    return;\n                }\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'focus', function() {\n            if (this.searchMenu) {\n                this.searchMenu.show();\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'blur', function() {\n            if (this._ignoreBlur) {\n                this._ignoreBlur = false;\n                return;\n            }\n\n            setTimeout(() => {\n                if (this.searchMenu) {\n                    this.searchMenu.hide();\n                }\n            }, 1);\n        });\n    },\n\n    focusOption: function($option) {\n        this.searchMenu.$options.removeClass('hover');\n        $option.addClass('hover');\n        this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n    },\n\n    // No \"add\" button\n    getAddElementsBtn: $.noop,\n\n    getElementSortAxis: function() {\n        return null;\n    },\n\n    searchForTags: function() {\n        if (this.searchMenu) {\n            this.killSearchMenu();\n        }\n\n        var val = this.$addTagInput.val();\n\n        if (val) {\n            this.$spinner.removeClass('hidden');\n\n            var excludeIds = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                var id = $(this.$elements[i]).data('id');\n\n                if (id) {\n                    excludeIds.push(id);\n                }\n            }\n\n            if (this.settings.sourceElementId) {\n                excludeIds.push(this.settings.sourceElementId);\n            }\n\n            var data = {\n                search: this.$addTagInput.val(),\n                tagGroupId: this.settings.tagGroupId,\n                excludeIds: excludeIds\n            };\n\n            Craft.postActionRequest('tags/search-for-tags', data, (response, textStatus) => {\n                // Just in case\n                if (this.searchMenu) {\n                    this.killSearchMenu();\n                }\n\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                        $ul = $('<ul/>').appendTo($menu);\n\n                    var $li;\n\n                    for (var i = 0; i < response.tags.length; i++) {\n                        $li = $('<li/>')\n                            .appendTo($ul);\n\n                        $('<a data-icon=\"tag\"/>')\n                            .appendTo($li)\n                            .text(response.tags[i].title)\n                            .data('id', response.tags[i].id)\n                            .addClass(response.tags[i].exclude ? 'disabled' : '');\n                    }\n\n                    if (!response.exactMatch) {\n                        $li = $('<li/>').appendTo($ul);\n                        $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                    }\n\n                    $ul.find('a:not(.disabled):first').addClass('hover');\n\n                    this.searchMenu = new Garnish.Menu($menu, {\n                        attachToElement: this.$addTagInput,\n                        onOptionSelect: this.selectTag.bind(this)\n                    });\n\n                    this.addListener($menu, 'mousedown', () => {\n                        this._ignoreBlur = true;\n                    });\n\n                    this.searchMenu.show();\n                }\n            });\n        } else {\n            this.$spinner.addClass('hidden');\n        }\n    },\n\n    selectTag: function(option) {\n        var $option = $(option);\n\n        if ($option.hasClass('disabled')) {\n            return;\n        }\n\n        var id = $option.data('id');\n        var title = $option.text();\n\n        var $element = $('<div/>', {\n            'class': 'element small removable',\n            'data-id': id,\n            'data-site-id': this.settings.targetSiteId,\n            'data-label': title,\n            'data-editable': '1'\n        }).appendTo(this.$elementsContainer);\n\n        var $input = $('<input/>', {\n            'type': 'hidden',\n            'name': this.settings.name + '[]',\n            'value': id\n        }).appendTo($element);\n\n        $('<a/>', {\n            'class': 'delete icon',\n            'title': Craft.t('app', 'Remove')\n        }).appendTo($element);\n\n        var $titleContainer = $('<div/>', {\n            'class': 'label'\n        }).appendTo($element);\n\n        $('<span/>', {\n            'class': 'title',\n            text: title\n        }).appendTo($titleContainer);\n\n        var margin = -($element.outerWidth() + 10);\n        this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addTagInput.velocity(animateCss, 'fast');\n\n        this.$elements = this.$elements.add($element);\n\n        this.addElements($element);\n\n        this.killSearchMenu();\n        this.$addTagInput.val('');\n        this.$addTagInput.trigger('focus');\n\n        if (!id) {\n            // We need to create the tag first\n            $element.addClass('loading disabled');\n\n            var data = {\n                groupId: this.settings.tagGroupId,\n                title: title\n            };\n\n            Craft.postActionRequest('tags/create-tag', data, (response, textStatus) => {\n                if (textStatus === 'success' && response.success) {\n                    $element.attr('data-id', response.id);\n                    $input.val(response.id);\n\n                    $element.removeClass('loading disabled');\n                } else {\n                    this.removeElement($element);\n\n                    if (textStatus === 'success') {\n                        // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                }\n            });\n        }\n    },\n\n    killSearchMenu: function() {\n        this.searchMenu.hide();\n        this.searchMenu.destroy();\n        this.searchMenu = null;\n    }\n}, {\n    defaults: {\n        tagGroupId: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend({\n    getElementContainer: function() {\n        return this.$container.children('ul');\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            config = $.extend({\n                autocomplete: false,\n            }, config);\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: typeof config.autocomplete === 'boolean' ? (config.autocomplete ? 'on' : 'off') : config.autocomplete,\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            } else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n                'aria-label': Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html': option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                html: config.label,\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            } else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: allChecked || (config.values || []).includes(option.value),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            config.fieldset = true;\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<button/>', {\n                'type': 'button',\n                'class': 'lightswitch',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'checkbox',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            const id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            const containerId = config.containerId || id + '-container';\n            const name = config.name || null;\n            const value = config.value || null;\n            const small = config.small || false;\n            const autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            const disabled = config.disabled || false;\n\n            const $container = $('<div/>', {\n                id: containerId,\n                class: 'flex color-container'\n            });\n\n            const $colorPreviewContainer = $('<div/>', {\n                class: 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            const $colorPreview = $('<div/>', {\n                class: 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            const $inputContainer = $('<div/>', {\n                class: 'color-input-container',\n            })\n                .append(\n                    $('<div/>', {\n                        class: 'color-hex-indicator light code',\n                        'aria-hidden': 'true',\n                        text: '#',\n                    })\n                )\n                .appendTo($container);\n\n            const $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: Craft.ltrim(value, '#'),\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled,\n                'aria-label': Craft.t('app', 'Color hex value'),\n            }).appendTo($inputContainer);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            config.fieldset = true;o\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000)) + '-date';\n            var name = config.name || null;\n            var inputName = name ? name + '[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate: null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000)) + '-time';\n            var name = config.name || null;\n            var inputName = name ? name + '[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours() * 3600 + value.getMinutes() * 60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $(config.fieldset ? '<fieldset/>' : '<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $(config.fieldset ? '<legend/>' : '<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-${config.fieldset ? 'legend' : 'label'}` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': !config.fieldset && config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend({\n    uploader: null,\n    allowedKinds: null,\n    $element: null,\n    settings: null,\n    _rejectedFiles: {},\n    _extensionList: null,\n    _totalFileCounter: 0,\n    _validFileCounter: 0,\n\n    init: function($element, settings) {\n        this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n        this.$element = $element;\n        this.allowedKinds = null;\n        this._extensionList = null;\n        this._totalFileCounter = 0;\n        this._validFileCounter = 0;\n\n        settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n        var events = settings.events;\n        delete settings.events;\n\n        if (settings.allowedKinds && settings.allowedKinds.length) {\n            if (typeof settings.allowedKinds === 'string') {\n                settings.allowedKinds = [settings.allowedKinds];\n            }\n\n            this.allowedKinds = settings.allowedKinds;\n            delete settings.allowedKinds;\n        }\n\n        settings.autoUpload = false;\n\n        this.uploader = this.$element.fileupload(settings);\n        for (var event in events) {\n            if (!events.hasOwnProperty(event)) {\n                continue;\n            }\n\n            this.uploader.on(event, events[event]);\n        }\n\n        this.settings = settings;\n\n        this.uploader.on('fileuploadadd', this.onFileAdd.bind(this));\n    },\n\n    /**\n     * Set uploader parameters.\n     */\n    setParams: function(paramObject) {\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        this.uploader.fileupload('option', {formData: paramObject});\n    },\n\n    /**\n     * Get the number of uploads in progress.\n     */\n    getInProgress: function() {\n        return this.uploader.fileupload('active');\n    },\n\n    /**\n     * Return true, if this is the last upload.\n     */\n    isLastUpload: function() {\n        // Processing the last file or not processing at all.\n        return this.getInProgress() < 2;\n    },\n\n    /**\n     * Called on file add.\n     */\n    onFileAdd: function(e, data) {\n        e.stopPropagation();\n\n        var validateExtension = false;\n\n        if (this.allowedKinds) {\n            if (!this._extensionList) {\n                this._createExtensionList();\n            }\n\n            validateExtension = true;\n        }\n\n        // Make sure that file API is there before relying on it\n        data.process().done(() => {\n            var file = data.files[0];\n            var pass = true;\n            if (validateExtension) {\n                var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                var fileExtension = matches[1];\n                if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                    pass = false;\n                    this._rejectedFiles.type.push('“' + file.name + '”');\n                }\n            }\n\n            if (file.size > this.settings.maxFileSize) {\n                this._rejectedFiles.size.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            // If the validation has passed for this file up to now, check if we're not hitting any limits\n            if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                this._rejectedFiles.limit.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            if (pass) {\n                this._validFileCounter++;\n                data.submit();\n            }\n\n            if (++this._totalFileCounter === data.originalFiles.length) {\n                this._totalFileCounter = 0;\n                this._validFileCounter = 0;\n                this.processErrorMessages();\n            }\n        });\n\n        return true;\n    },\n\n    /**\n     * Process error messages.\n     */\n    processErrorMessages: function() {\n        var str;\n\n        if (this._rejectedFiles.type.length) {\n            if (this._rejectedFiles.type.length === 1) {\n                str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            } else {\n                str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n            this._rejectedFiles.type = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.size.length) {\n            if (this._rejectedFiles.size.length === 1) {\n                str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n            this._rejectedFiles.size = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.limit.length) {\n            if (this._rejectedFiles.limit.length === 1) {\n                str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n            this._rejectedFiles.limit = [];\n            alert(str);\n        }\n    },\n\n    humanFileSize: function(bytes) {\n        var threshold = 1024;\n\n        if (bytes < threshold) {\n            return bytes + ' B';\n        }\n\n        var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        var u = -1;\n\n        do {\n            bytes = bytes / threshold;\n            ++u;\n        }\n        while (bytes >= threshold);\n\n        return bytes.toFixed(1) + ' ' + units[u];\n    },\n\n    _createExtensionList: function() {\n        this._extensionList = [];\n\n        for (var i = 0; i < this.allowedKinds.length; i++) {\n            var allowedKind = this.allowedKinds[i];\n\n            if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                    var ext = Craft.fileKinds[allowedKind].extensions[j];\n                    this._extensionList.push(ext);\n                }\n            }\n        }\n    },\n\n    destroy: function() {\n        this.$element.fileupload('destroy');\n        this.base();\n    }\n}, {\n    defaults: {\n        dropZone: null,\n        pasteZone: null,\n        fileInput: null,\n        sequentialUploads: true,\n        maxFileSize: Craft.maxUploadSize,\n        allowedKinds: null,\n        events: {},\n        canAddMoreFiles: null,\n        headers: {'Accept': 'application/json;q=0.9,*/*;q=0.8'},\n        paramName: 'assets-upload'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Make it lowercase\n        sourceVal = sourceVal.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        sourceVal = Craft.asciiString(sourceVal);\n\n        // Handle must start with a letter and end with a letter/number\n        sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n        sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n        // Get the \"words\"\n        var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n        var uriFormat = words.join(Craft.slugWordSeparator);\n\n        if (uriFormat && this.settings.suffix) {\n            uriFormat += this.settings.suffix;\n        }\n\n        return uriFormat;\n    }\n});\n\n})(jQuery);\n","/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function(html) {\n    return html.replace(rxhtmlTag, \"<$1></$2>\");\n};\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Groups an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        group: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.group() must be an array.';\n            }\n\n            let index = {};\n\n            return arr.reduce((grouped, obj, i) => {\n                const thisKey = typeof key === 'string' ? obj[key] : key(obj, i);\n                if (!index.hasOwnProperty(thisKey)) {\n                    index[thisKey] = [[], thisKey];\n                    grouped.push(index[thisKey]);\n                }\n                index[thisKey][0].push(obj);\n                return grouped;\n            }, []);\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} shift\n         * @param {boolean} alt\n         */\n        shortcutText: function (key, shift, alt) {\n            if (Craft.clientOs === 'Mac') {\n                return (alt ? '⌥' : '') + (shift ? '⇧' : '') + '⌘' + key;\n            }\n            return 'Ctrl+' + (alt ? 'Alt+' : '') + (shift ? 'Shift+' : '') + key;\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n\n                // Get the latest headers\n                this._getApiHeaders(cancelToken).then(apiHeaders => {\n                    // Send the API request\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    // Force the API to process the Craft headers if this is the first API request\n                    if (!this._apiHeaders) {\n                        options.params.processCraftHeaders = 1;\n                    }\n\n                    axios.request(options).then((apiResponse) => {\n                        // Process the response headers\n                        this._processApiHeaders(apiResponse.headers, cancelToken).then(() => {\n                            // Finally return the API response data\n                            resolve(apiResponse.data);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        _getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    resolve(response.data);\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _processApiHeaders: function(headers, cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Have we already processed them?\n                if (this._apiHeaders) {\n                    resolve();\n                    return;\n                }\n\n                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                    data: {\n                        headers: headers,\n                    },\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    this._loadingApiHeaders = false;\n\n                    resolve();\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                    }\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _rejectApiRequests: function(reject, e) {\n            this._loadingApiHeaders = false;\n            reject(e);\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1](e);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = () => {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                };\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         * @param {function} [callback] Callback function that should be called whenever a new group of modified params has been found\n         * @param {object} [initialDeltaValues] Initial delta values. If undefined, `Craft.initialDeltaValues` will be used.\n         * @return {string}\n         */\n        findDeltaData: function(oldData, newData, deltaNames, callback, initialDeltaValues) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            if (typeof initialDeltaValues === 'undefined') {\n                initialDeltaValues = Craft.initialDeltaValues;\n            }\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, initialDeltaValues);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                    if (callback) {\n                        callback(deltaNames[n], groupedNewParams[deltaNames[n]]);\n                    }\n                }\n            }\n\n            return params.join('&');\n        },\n\n        /**\n         * @param {object} params\n         * @param {object} deltaNames\n         * @param {boolean} withRoot\n         * @param {boolean|object} initialValues\n         * @returns {{}}\n         * @private\n         */\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, initialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = decodeURIComponent(params[p]).substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(params[p]);\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(params[p]);\n                }\n            }\n\n            if (initialValues) {\n                for (let name in initialValues) {\n                    if (initialValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(initialValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return arr.includes(elem);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a', $container).each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n\n        /**\n         * Traps focus within a container, so when focus is tabbed out of it, it’s cycled back into it.\n         * @param {Object} container\n         */\n        trapFocusWithin: function(container) {\n            const $container = $(container);\n            $container.on('keydown.focus-trap', ev => {\n                // Tab key?\n                if (ev.keyCode === 9) {\n                    const $focusableElements = $container.find(':focusable');\n                    const index = $focusableElements.index(document.activeElement);\n                    if (index !== -1) {\n                        if (index === 0 && ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.last().focus();\n                        } else if (index === $focusableElements.length - 1 && !ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.first().focus();\n                        }\n                    }\n                }\n            });\n        },\n\n        /**\n         * Sets focus to the first focusable element within a container.\n         * @param {Object} container\n         */\n        setFocusWithin: function(container) {\n            $(container).find(':focusable:first').focus();\n        },\n    });\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: $.extend({\n                        customTrigger: $btn,\n                    }, $btn.data('event-data')),\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                                'aria-label': Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                    $inputs.first().focus();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n// Override Garnish.NiceText.charsLeftHtml() to be more accessible\nGarnish.NiceText.charsLeftHtml = charsLeft => {\n    return Craft.t('app', '<span class=\"visually-hidden\">Characters left:</span> {chars, number}', {\n        chars: charsLeft,\n    });\n};\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend({\n    $element: null,\n    elementId: null,\n    siteId: null,\n    deltaNames: null,\n    initialData: null,\n\n    $header: null,\n    $toolbar: null,\n    $tabContainer: null,\n    $editLink: null,\n    $sidebarBtn: null,\n    $loadSpinner: null,\n\n    $body: null,\n    $fieldsContainer: null,\n\n    $sidebarShade: null,\n    $sidebar: null,\n\n    $footer: null,\n    $siteSelectContainer: null,\n    $siteSelect: null,\n    $siteSpinner: null,\n    $cancelBtn: null,\n    $saveBtn: null,\n    $saveSpinner: null,\n\n    slideout: null,\n    tabManager: null,\n    showingSidebar: false,\n\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    initialDeltaValues: null,\n\n    init: function(element, settings) {\n        // Param mapping\n        if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n            // (settings)\n            settings = element;\n            element = null;\n        }\n\n        this.$element = $(element);\n        this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n        // Header\n        this.$header = $('<header/>', {class: 'pane-header'});\n        this.$toolbar = $('<div/>', {class: 'ee-toolbar'}).appendTo(this.$header);\n        this.$tabContainer = $('<div/>', {class: 'pane-tabs'}).appendTo(this.$toolbar);\n        this.$loadSpinner = $('<div/>', {\n            class: 'spinner',\n            title: Craft.t('app', 'Loading'),\n            'aria-label': Craft.t('app', 'Loading'),\n        }).appendTo(this.$toolbar);\n        this.$editLink = $('<a/>', {\n            target: '_blank',\n            class: 'btn hidden',\n            title: Craft.t('app', 'Open the full edit page in a new tab'),\n            'aria-label': Craft.t('app', 'Open the full edit page in a new tab'),\n            'data-icon': 'external',\n        }).appendTo(this.$toolbar);\n        this.$sidebarBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn hidden sidebar-btn',\n            title: Craft.t('app', 'Show sidebar'),\n            'aria-label': Craft.t('app', 'Show sidebar'),\n            'data-icon': `sidebar-${Garnish.ltr ? 'right' : 'left'}`,\n        }).appendTo(this.$toolbar);\n\n        this.addListener(this.$sidebarBtn, 'click', ev => {\n            ev.preventDefault();\n            if (!this.showingSidebar) {\n                this.showSidebar();\n            } else {\n                this.hideSidebar();\n            }\n        });\n\n        // Body\n        this.$body = $('<div/>', {class: 'ee-body'});\n\n        // Fields\n        this.$fieldsContainer = $('<div/>', {class: 'fields'}).appendTo(this.$body);\n\n        // Sidebar\n        this.$sidebar = $('<div/>', {class: 'ee-sidebar hidden'}).appendTo(this.$body);\n        Craft.trapFocusWithin(this.$sidebar);\n\n        // Footer\n        this.$footer = $('<div/>', {class: 'ee-footer hidden'});\n        const $siteSelectOuterContainer = $('<div/>', {class: 'ee-site-select'}).appendTo(this.$footer);\n        this.$siteSelectContainer = $('<div/>', {class: 'select hidden'}).appendTo($siteSelectOuterContainer);\n        this.$siteSelect = $('<select/>').appendTo(this.$siteSelectContainer);\n        this.$siteSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo($siteSelectOuterContainer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footer);\n        this.$saveBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footer);\n        this.$saveSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo(this.$footer);\n\n        let $contents = this.$header.add(this.$body).add(this.$footer);\n\n        // Sidebar shade\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebarShade = $('<div/>', {class: 'ee-sidebar-shade hidden'});\n            $contents = $contents.add(this.$sidebarShade);\n\n            this.addListener(this.$sidebarShade, 'click', ev => {\n                ev.stopPropagation();\n                this.hideSidebar();\n            });\n        }\n\n        // Create the slideout\n        this.slideout = new Craft.Slideout($contents, {\n            containerElement: 'form',\n            containerAttributes: {\n                action: '',\n                method: 'post',\n                novalidate: '',\n                class: 'element-editor',\n            },\n            closeOnEsc: false,\n            closeOnShadeClick: false,\n        });\n        this.slideout.$container.data('elementEditor', this);\n        this.slideout.on('beforeClose', () => {\n            this.hideSidebar();\n        });\n        this.slideout.on('close', () => {\n            this.trigger('closeSlideout');\n            this.destroy();\n        });\n\n        // Register shortcuts & events\n        Garnish.shortcutManager.registerShortcut({\n            keyCode: Garnish.S_KEY,\n            ctrl: true,\n        }, () => {\n            this.saveElement();\n        });\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.$cancelBtn, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$shade, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$container, 'submit', ev => {\n            ev.preventDefault();\n            this.saveElement();\n        });\n        this.addListener(this.$siteSelect, 'change', 'switchSite');\n\n        this.load().then(() => {\n            this.onShowHud();\n            this.onCreateForm(this.$body);\n        });\n    },\n\n    setElementAttribute: function(name, value) {\n        if (!this.settings.attributes) {\n            this.settings.attributes = {};\n        }\n\n        if (value === null) {\n            delete this.settings.attributes[name];\n        } else {\n            this.settings.attributes[name] = value;\n        }\n    },\n\n    getBaseData: function() {\n        const data = $.extend({}, this.settings.params);\n\n        if (this.settings.siteId) {\n            data.siteId = this.settings.siteId;\n        } else if (this.$element && this.$element.data('site-id')) {\n            data.siteId = this.$element.data('site-id');\n        }\n\n        if (this.settings.elementId) {\n            data.elementId = this.settings.elementId;\n        } else if (this.$element && this.$element.data('id')) {\n            data.elementId = this.$element.data('id');\n        }\n\n        if (this.settings.elementType) {\n            data.elementType = this.settings.elementType;\n        }\n\n        if (this.settings.attributes) {\n            data.attributes = this.settings.attributes;\n        }\n\n        if (this.settings.prevalidate) {\n            data.prevalidate = 1;\n        }\n\n        return data;\n    },\n\n    load: function(data) {\n        return new Promise((resolve, reject) => {\n            this.trigger('beforeLoad');\n            // todo: remove this in Craft 4\n            this.trigger('beginLoading');\n            this.showLoadSpinner();\n            this.onBeginLoading();\n\n            if (this.cancelToken) {\n                this.ignoreFailedRequest = true;\n                this.cancelToken.cancel();\n            }\n\n            this.cancelToken = axios.CancelToken.source();\n\n            Craft.sendActionRequest('POST', 'elements/get-editor-html', {\n                cancelToken: this.cancelToken.token,\n                data: $.extend(this.getBaseData(), data || {}, {\n                    includeSites: Craft.isMultiSite && this.settings.showSiteSwitcher,\n                }),\n            }).then(response => {\n                this.hideLoadSpinner();\n                this.trigger('load');\n                // todo: remove this in Craft 4\n                this.trigger('endLoading');\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (this.initialDeltaValues === null) {\n                    this.initialDeltaValues = response.data.initialDeltaValues;\n                }\n                this.updateForm(response.data, true);\n                this.cancelToken = null;\n                resolve();\n            }).catch(e => {\n                this.hideLoadSpinner();\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (!this.ignoreFailedRequest) {\n                    Craft.cp.displayError();\n                    reject(e);\n                }\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    showHeader: function() {\n        this.$header.removeClass('hidden');\n    },\n\n    hideHeader: function() {\n        this.$header.addClass('hidden');\n    },\n\n    showLoadSpinner: function() {\n        this.showHeader();\n        this.$loadSpinner.removeClass('hidden');\n    },\n\n    hideLoadSpinner: function() {\n        this.$loadSpinner.addClass('hidden');\n    },\n\n    switchSite: function() {\n        if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n            this.$siteSelect.val(this.siteId);\n            return;\n        }\n\n        const newSiteId = this.$siteSelect.val();\n\n        if (newSiteId == this.siteId) {\n            return;\n        }\n\n        this.$siteSpinner.removeClass('hidden');\n\n        this.load({siteId: newSiteId}).then(() => {\n            this.$siteSpinner.addClass('hidden');\n        }).catch(() => {\n            this.$siteSpinner.addClass('hidden');\n            // Reset the site select\n            this.$siteSelect.val(this.siteId);\n        });\n    },\n\n    updateForm: function(data, refreshInitialData) {\n        // Cleanup\n        if (this.tabManager) {\n            this.$tabContainer.html('');\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        this.siteId = data.siteId;\n        this.$fieldsContainer.html(data.fieldHtml);\n\n        let showHeader = false;\n\n        if (data.sites && data.sites.length > 1) {\n            showHeader = true;\n            this.$siteSelectContainer.removeClass('hidden');\n            this.$siteSelect.html('');\n\n            for (let i = 0; i < data.sites.length; i++) {\n                const siteInfo = data.sites[i];\n                const $option = $('<option/>', {\n                    value: siteInfo.id,\n                    text: siteInfo.name\n                }).appendTo(this.$siteSelect);\n                if (siteInfo.id == data.siteId) {\n                    $option.attr('selected', 'selected');\n                }\n            }\n        } else {\n            this.$siteSelectContainer.addClass('hidden');\n        }\n\n        if (data.tabHtml) {\n            showHeader = true;\n            this.$tabContainer.replaceWith(this.$tabContainer = $(data.tabHtml));\n            this.tabManager = new Craft.Tabs(this.$tabContainer);\n            this.tabManager.on('deselectTab', ev => {\n                $(ev.$tab.attr('href')).addClass('hidden');\n            });\n            this.tabManager.on('selectTab', ev => {\n                $(ev.$tab.attr('href')).removeClass('hidden');\n                Garnish.$win.trigger('resize');\n                this.$body.trigger('scroll');\n            });\n        }\n\n        if (data.editUrl) {\n            showHeader = true;\n            this.$editLink\n                .removeClass('hidden')\n                .attr('href', data.editUrl);\n        } else if (this.$editLink) {\n            this.$editLink.addClass('hidden');\n        }\n\n        if (data.sidebarHtml) {\n            showHeader = true;\n            this.$sidebarBtn.removeClass('hidden');\n            this.$sidebar.html(data.sidebarHtml);\n            Craft.initUiElements(this.$sidebar);\n            new Craft.ElementThumbLoader().load($(this.$sidebar));\n\n            // Open outbound links in new windows\n            this.$sidebar.find('a').each(function() {\n                if (this.hostname.length && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('target', '_blank')\n                }\n            });\n        } else if (this.$sidebarBtn) {\n            this.$sidebarBtn.addClass('hidden');\n            this.$sidebar.addClass('hidden');\n        }\n\n        if (showHeader) {\n            this.showHeader();\n        } else {\n            this.hideHeader();\n        }\n\n        this.$footer.removeClass('hidden');\n\n        if (refreshInitialData !== false) {\n            this.deltaNames = data.deltaNames;\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            Craft.appendHeadHtml(data.headHtml);\n            Craft.appendFootHtml(data.footHtml);\n            Craft.initUiElements(this.$fieldsContainer);\n\n            if (refreshInitialData) {\n                this.initialData = this.slideout.$container.serialize();\n            }\n\n            if (!Garnish.isMobileBrowser()) {\n                Craft.setFocusWithin(this.$fieldsContainer);\n            }\n\n            this.trigger('updateForm');\n        });\n    },\n\n    showSidebar: function() {\n        if (this.showingSidebar) {\n            return;\n        }\n\n        this.$body.scrollTop(0).addClass('no-scroll');\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .removeClass('hidden');\n\n        // Hack to force CSS animations\n        this.$sidebar[0].offsetWidth;\n\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebarShade\n                .removeClass('hidden');\n        }\n\n        this.$sidebar.css(this._openedSidebarStyles());\n\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebar.one('transitionend.element-editor', () => {\n                Craft.setFocusWithin(this.$sidebar);\n            });\n        }\n\n        this.$sidebarBtn\n            .addClass('active')\n            .attr({\n                title: Craft.t('app', 'Hide sidebar'),\n                'aria-label': Craft.t('app', 'Hide sidebar'),\n            });\n\n        Garnish.$win.trigger('resize');\n        this.$sidebar.trigger('scroll');\n\n        Garnish.shortcutManager.addLayer();\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.hideSidebar();\n        });\n\n        this.showingSidebar = true;\n    },\n\n    hideSidebar: function() {\n        if (!this.showingSidebar) {\n            return;\n        }\n\n        this.$body.removeClass('no-scroll');\n\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebarShade.addClass('hidden');\n        }\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .one('transitionend.element-editor', () => {\n                this.$sidebar.addClass('hidden');\n            });\n\n        this.$sidebarBtn\n            .removeClass('active')\n            .attr({\n                title: Craft.t('app', 'Show sidebar'),\n                'aria-label': Craft.t('app', 'Show sidebar'),\n            });\n\n        Garnish.shortcutManager.removeLayer();\n\n        this.showingSidebar = false;\n    },\n\n    _openedSidebarStyles: function() {\n        return {\n            [Garnish.ltr ? 'right' : 'left']: '0',\n        };\n    },\n\n    _closedSidebarStyles: function() {\n        return {\n            [Garnish.ltr ? 'right' : 'left']: '-350px',\n        };\n    },\n\n    saveElement: function() {\n        const validators = this.settings.validators;\n\n        if ($.isArray(validators)) {\n            for (let i = 0; i < validators.length; i++) {\n                if ($.isFunction(validators[i]) && !validators[i].call()) {\n                    return false;\n                }\n            }\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n\n        let data = $.param(this.getBaseData()) + '&' + this.slideout.$container.serialize();\n        data = Craft.findDeltaData(this.initialData, data, this.deltaNames, null, this.initialDeltaValues);\n\n        Craft.postActionRequest('elements/save-element', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (this.$element && this.siteId == this.$element.data('site-id')) {\n                        // Update the label\n                        const $title = this.$element.find('.title');\n                        const $a = $title.find('a');\n\n                        if ($a.length && response.cpEditUrl) {\n                            $a.attr('href', response.cpEditUrl);\n                            $a.text(response.newTitle);\n                        } else {\n                            $title.text(response.newTitle);\n                        }\n                    }\n\n                    if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                        Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                            type: Craft.elementTypeNames[this.settings.elementType][0],\n                        }));\n                    }\n\n                    this.closeSlideout();\n                    this.trigger('saveElement', {\n                        response: response\n                    });\n                    this.onSaveElement(response);\n                    this.settings.onSaveElement(response);\n\n                    // There may be a new background job that needs to be run\n                    Craft.cp.runQueue();\n                } else {\n                    this.updateForm(response, false);\n                    Garnish.shake(this.slideout.$container);\n                }\n            }\n        });\n    },\n\n    isDirty: function() {\n        return this.initialData !== null && this.slideout.$container.serialize() !== this.initialData;\n    },\n\n    maybeCloseSlideout: function() {\n        if (!this.slideout.isOpen) {\n            return;\n        }\n\n        if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n            this.closeSlideout();\n        }\n    },\n\n    closeSlideout: function() {\n        this.slideout.close();\n        this.onHideHud();\n\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n    },\n\n    destroy: function() {\n        this.slideout.destroy();\n        delete this.slideout;\n        this.base();\n    },\n\n    // Deprecated Methods\n    // -------------------------------------------------------------------------\n\n    /** @deprecated in 3.7.0 */\n    loadHud: function() {\n        this.load();\n    },\n    /** @deprecated in 3.7.0 */\n    maybeCloseHud: function() {\n        this.maybeCloseSlideout();\n    },\n    /** @deprecated in 3.7.0 */\n    closeHud: function() {\n        this.closeSlideout();\n    },\n    /** @deprecated */\n    reloadForm: function(data, callback) {\n        this.load(data).then(() => {\n            callback('success');\n        }).catch(() => {\n            callback('error');\n        });\n    },\n    /** @deprecated in 3.7.0 */\n    onBeginLoading: function() {\n        this.settings.onBeginLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onEndLoading: function() {\n        this.settings.onEndLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onSaveElement: function(response) {\n    },\n    /** @deprecated in 3.7.0 */\n    onCreateForm: function($form) {\n        this.settings.onCreateForm($form);\n    },\n    /** @deprecated in 3.7.0 */\n    onShowHud: function() {\n        this.trigger('showHud');\n        this.settings.onShowHud();\n    },\n    /** @deprecated in 3.7.0 */\n    onHideHud: function() {\n        this.trigger('hideHud');\n        this.settings.onHideHud();\n    },\n}, {\n    defaults: {\n        showSiteSwitcher: true,\n        elementId: null,\n        elementType: null,\n        siteId: null,\n        attributes: null,\n        params: null,\n        prevalidate: false,\n        elementIndex: null,\n        onSaveElement: $.noop,\n        validators: [],\n\n        /** @deprecated in 3.7.0 */\n        onShowHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onHideHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onBeginLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onEndLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onCreateForm: $.noop,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend({\n    initialized: false,\n    elementType: null,\n\n    instanceState: null,\n    sourceStates: null,\n    sourceStatesStorageKey: null,\n\n    searchTimeout: null,\n    sourceSelect: null,\n\n    $container: null,\n    $main: null,\n    isIndexBusy: false,\n\n    $sidebar: null,\n    showingSidebar: null,\n    sourceKey: null,\n    sourceViewModes: null,\n    $source: null,\n    sourcesByKey: null,\n    $visibleSources: null,\n\n    $customizeSourcesBtn: null,\n    customizeSourcesModal: null,\n\n    $toolbar: null,\n    toolbarOffset: null,\n\n    $search: null,\n    searching: false,\n    searchText: null,\n    trashed: false,\n    drafts: false,\n    $clearSearchBtn: null,\n\n    $statusMenuBtn: null,\n    $statusMenuContainer: null,\n    statusMenu: null,\n    status: null,\n\n    $siteMenuBtn: null,\n    siteMenu: null,\n    siteId: null,\n\n    $sortMenuBtn: null,\n    sortMenu: null,\n    $sortAttributesList: null,\n    $sortDirectionsList: null,\n    $scoreSortAttribute: null,\n    $structureSortAttribute: null,\n\n    $elements: null,\n    $viewModeBtnContainer: null,\n    viewModeBtns: null,\n    viewMode: null,\n    view: null,\n    _autoSelectElements: null,\n    $countSpinner: null,\n    $countContainer: null,\n    page: 1,\n    resultSet: null,\n    totalResults: null,\n    $exportBtn: null,\n\n    actions: null,\n    actionsHeadHtml: null,\n    actionsFootHtml: null,\n    $selectAllContainer: null,\n    $selectAllCheckbox: null,\n    showingActionTriggers: false,\n    exporters: null,\n    exportersByType: null,\n    _$detachedToolbarItems: null,\n    _$triggers: null,\n\n    _ignoreFailedRequest: false,\n    _cancelToken: null,\n\n    /**\n     * Constructor\n     */\n    init: function(elementType, $container, settings) {\n        this.elementType = elementType;\n        this.$container = $container;\n        this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n        // Set the state objects\n        // ---------------------------------------------------------------------\n\n        this.instanceState = this.getDefaultInstanceState();\n\n        this.sourceStates = {};\n\n        // Instance states (selected source) are stored by a custom storage key defined in the settings\n        if (this.settings.storageKey) {\n            $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n        }\n\n        // Source states (view mode, etc.) are stored by the element type and context\n        this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n        $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n        // Find the DOM elements\n        // ---------------------------------------------------------------------\n\n        this.$main = this.$container.find('.main');\n        this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n        this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n        this.$statusMenuContainer = this.$statusMenuBtn.parent();\n        this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n        this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n        this.$search = this.$toolbar.find('.search:first input:first');\n        this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n        this.$sidebar = this.$container.find('.sidebar:first');\n        this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n        this.$elements = this.$container.find('.elements:first');\n        this.$countSpinner = this.$container.find('#count-spinner');\n        this.$countContainer = this.$container.find('#count-container');\n        this.$exportBtn = this.$container.find('#export-btn');\n\n        // Hide sidebar if needed\n        if (this.settings.hideSidebar) {\n            this.$sidebar.hide();\n            $('.body, .content', this.$container).removeClass('has-sidebar');\n        }\n\n        // Initialize the sources\n        // ---------------------------------------------------------------------\n\n        if (!this.initSources()) {\n            return;\n        }\n\n        // Customize button\n        if (this.$customizeSourcesBtn.length) {\n            this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n        }\n\n        // Initialize the status menu\n        // ---------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n            this.statusMenu.on('optionselect', this._handleStatusChange.bind(this));\n        }\n\n        // Initialize the site menu\n        // ---------------------------------------------------------------------\n\n        // Is there a site menu?\n        if (this.$siteMenuBtn.length) {\n            this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n            // Figure out the initial site\n            var $option = this.siteMenu.$options.filter('.sel:first');\n\n            if (!$option.length) {\n                $option = this.siteMenu.$options.first();\n            }\n\n            if ($option.length) {\n                this._setSite($option.data('site-id'));\n            } else {\n                // No site options -- they must not have any site permissions\n                this.settings.criteria = {id: '0'};\n            }\n\n            this.siteMenu.on('optionselect', this._handleSiteChange.bind(this));\n\n            if (this.siteId) {\n                // Should we be using a different default site?\n                var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                if (defaultSiteId && defaultSiteId != this.siteId) {\n                    // Is that one available here?\n                    var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                    if ($storedSiteOption.length) {\n                        // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                        $storedSiteOption.trigger('click');\n                    }\n                }\n            }\n        } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n            this._setSite(this.settings.criteria.siteId);\n        } else {\n            this._setSite(Craft.siteId);\n        }\n\n        // Don't let the criteria override the selected site\n        if (this.settings.criteria && this.settings.criteria.siteId) {\n            delete this.settings.criteria.siteId;\n        }\n\n        // Initialize the search input\n        // ---------------------------------------------------------------------\n\n        // Automatically update the elements after new search text has been sitting for a 1/2 second\n        this.addListener(this.$search, 'input', () => {\n            if (!this.searching && this.$search.val()) {\n                this.startSearching();\n            } else if (this.searching && !this.$search.val()) {\n                this.stopSearching();\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.updateElementsIfSearchTextChanged.bind(this), 500);\n        });\n\n        // Update the elements when the Return key is pressed\n        this.addListener(this.$search, 'keypress', ev => {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.updateElementsIfSearchTextChanged();\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearSearchBtn, 'click', () => {\n            this.$search.val('');\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            this.stopSearching();\n\n            this.updateElementsIfSearchTextChanged();\n        });\n\n        // Auto-focus the Search box\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$search.trigger('focus');\n        }\n\n        // Initialize the sort menu\n        // ---------------------------------------------------------------------\n\n        // Is there a sort menu?\n        if (this.$sortMenuBtn.length) {\n            this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n            this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n            this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n            this.sortMenu.on('optionselect', this._handleSortChange.bind(this));\n        }\n\n        // Initialize the Export button\n        // ---------------------------------------------------------------------\n\n        this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n        // Let everyone know that the UI is initialized\n        // ---------------------------------------------------------------------\n\n        this.initialized = true;\n        this.afterInit();\n\n        // Select the initial source\n        // ---------------------------------------------------------------------\n\n        this.selectDefaultSource();\n\n        // Load the first batch of elements!\n        // ---------------------------------------------------------------------\n\n        // Default to whatever page is in the URL\n        this.setPage(Craft.pageNum);\n\n        this.updateElements(true);\n    },\n\n    afterInit: function() {\n        this.onAfterInit();\n    },\n\n    _createCancelToken: function() {\n        this._cancelToken = axios.CancelToken.source();\n        return this._cancelToken.token;\n    },\n\n    _cancelRequests: function() {\n        if (this._cancelToken) {\n            this._ignoreFailedRequest = true;\n            this._cancelToken.cancel();\n            Garnish.requestAnimationFrame(() => {\n                this._ignoreFailedRequest = false;\n            });\n        }\n    },\n\n    getSourceContainer: function() {\n        return this.$sidebar.find('nav > ul');\n    },\n\n    get $sources() {\n        if (!this.sourceSelect) {\n            return undefined;\n        }\n\n        return this.sourceSelect.$items;\n    },\n\n    initSources: function() {\n        var $sources = this._getSourcesInList(this.getSourceContainer());\n\n        // No source, no party.\n        if ($sources.length === 0) {\n            return false;\n        }\n\n        // The source selector\n        if (!this.sourceSelect) {\n            this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                multi: false,\n                allowEmpty: false,\n                vertical: true,\n                onSelectionChange: this._handleSourceSelectionChange.bind(this)\n            });\n        }\n\n        this.sourcesByKey = {};\n        this._initSources($sources);\n\n        return true;\n    },\n\n    selectDefaultSource: function() {\n        var sourceKey = this.getDefaultSourceKey(),\n            $source;\n\n        if (sourceKey) {\n            $source = this.getSourceByKey(sourceKey);\n\n            // Make sure it's visible\n            if (this.$visibleSources.index($source) === -1) {\n                $source = null;\n            }\n        }\n\n        if (!sourceKey || !$source) {\n            // Select the first source by default\n            $source = this.$visibleSources.first();\n        }\n\n        return this.selectSource($source);\n    },\n\n    refreshSources: function() {\n        this.sourceSelect.removeAllItems();\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n            context: this.settings.context,\n            elementType: this.elementType,\n        }).then((response) => {\n            this.setIndexAvailable();\n            this.getSourceContainer().replaceWith(response.data.html);\n            this.initSources();\n            this.selectDefaultSource();\n        }).catch(() => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    initSource: function($source) {\n        this.sourceSelect.addItems($source);\n        this.initSourceToggle($source);\n        this.sourcesByKey[$source.data('key')] = $source;\n\n        if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n            this._expandSource($source);\n        }\n    },\n\n    initSourceToggle: function($source) {\n        // Remove handlers for the same thing. Just in case.\n        this.deinitSourceToggle($source);\n\n        var $toggle = this._getSourceToggle($source);\n\n        if ($toggle.length) {\n            this.addListener($source, 'dblclick', '_handleSourceDblClick');\n            this.addListener($toggle, 'click', '_handleSourceToggleClick');\n            $source.data('hasNestedSources', true);\n        } else {\n            $source.data('hasNestedSources', false);\n        }\n    },\n\n    deinitSource: function($source) {\n        this.sourceSelect.removeItems($source);\n        this.deinitSourceToggle($source);\n        delete this.sourcesByKey[$source.data('key')];\n    },\n\n    deinitSourceToggle: function($source) {\n        if ($source.data('hasNestedSources')) {\n            this.removeListener($source, 'dblclick');\n            this.removeListener(this._getSourceToggle($source), 'click');\n        }\n\n        $source.removeData('hasNestedSources');\n    },\n\n    getDefaultInstanceState: function() {\n        return {\n            selectedSource: null,\n            expandedSources: []\n        };\n    },\n\n    getDefaultSourceKey: function() {\n        if (this.settings.defaultSource) {\n            var paths = this.settings.defaultSource.split('/'),\n                path = '';\n\n            // Expand the tree\n            for (var i = 0; i < paths.length; i++) {\n                path += paths[i];\n                var $source = this.getSourceByKey(path);\n\n                // If the folder can't be found, then just go to the stored instance source.\n                if (!$source) {\n                    return this.instanceState.selectedSource;\n                }\n\n                this._expandSource($source);\n                path += '/';\n            }\n\n            // Just make sure that the modal is aware of the newly expanded sources, too.\n            this._setSite(this.siteId);\n\n            return this.settings.defaultSource;\n        }\n\n        return this.instanceState.selectedSource;\n    },\n\n    getDefaultExpandedSources: function() {\n        return this.instanceState.expandedSources;\n    },\n\n    startSearching: function() {\n        // Show the clear button and add/select the Score sort option\n        this.$clearSearchBtn.removeClass('hidden');\n\n        if (!this.$scoreSortAttribute) {\n            this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n            this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n        }\n\n        this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n        this.searching = true;\n\n        this._updateStructureSortOption();\n        this.setSortAttribute('score');\n    },\n\n    stopSearching: function() {\n        // Hide the clear button and Score sort option\n        this.$clearSearchBtn.addClass('hidden');\n\n        this.$scoreSortAttribute.detach();\n\n        this.searching = false;\n\n        this._updateStructureSortOption();\n    },\n\n    setInstanceState: function(key, value) {\n        if (typeof key === 'object') {\n            $.extend(this.instanceState, key);\n        } else {\n            this.instanceState[key] = value;\n        }\n\n        this.storeInstanceState();\n    },\n\n    storeInstanceState: function() {\n        if (this.settings.storageKey) {\n            Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n        }\n    },\n\n    getSourceState: function(source, key, defaultValue) {\n        if (typeof this.sourceStates[source] === 'undefined') {\n            // Set it now so any modifications to it by whoever's calling this will be stored.\n            this.sourceStates[source] = {};\n        }\n\n        if (typeof key === 'undefined') {\n            return this.sourceStates[source];\n        } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n            return this.sourceStates[source][key];\n        } else {\n            return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n        }\n    },\n\n    getSelectedSourceState: function(key, defaultValue) {\n        return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n    },\n\n    setSelecetedSourceState: function(key, value) {\n        var viewState = this.getSelectedSourceState();\n\n        if (typeof key === 'object') {\n            $.extend(viewState, key);\n        } else {\n            viewState[key] = value;\n        }\n\n        this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n        // Store it in localStorage too\n        Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n    },\n\n    storeSortAttributeAndDirection: function() {\n        var attr = this.getSelectedSortAttribute();\n\n        if (attr !== 'score') {\n            this.setSelecetedSourceState({\n                order: attr,\n                sort: this.getSelectedSortDirection()\n            });\n        }\n    },\n\n    /**\n     * Sets the page number.\n     */\n    setPage: function(page) {\n        if (this.settings.context !== 'index') {\n            return;\n        }\n\n        page = Math.max(page, 1);\n        this.page = page;\n\n        // Update the URL\n        var url = document.location.href\n            .replace(/\\?.*$/, '')\n            .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n            .replace(/\\/+$/, '');\n\n        if (this.page !== 1) {\n            if (Craft.pageTrigger[0] !== '?') {\n                url += '/';\n            }\n            url += Craft.pageTrigger + this.page;\n        }\n\n        history.replaceState({}, '', url);\n    },\n\n    _resetCount: function() {\n        this.resultSet = null;\n        this.totalResults = null;\n    },\n\n    /**\n     * Returns the data that should be passed to the elementIndex/getElements controller action\n     * when loading elements.\n     */\n    getViewParams: function() {\n        var criteria = {\n            siteId: this.siteId,\n            search: this.searchText,\n            offset: this.settings.batchSize * (this.page - 1),\n            limit: this.settings.batchSize,\n        };\n\n        // Only set drafts/draftOf/trashed params when needed, so we don't potentially override a source's criteria\n        if (\n            this.settings.canHaveDrafts &&\n            (this.drafts || (this.settings.context === 'index' && !this.status))\n        ) {\n            criteria.drafts = this.drafts || null;\n            criteria.savedDraftsOnly = true;\n            if (!this.drafts) {\n                criteria.draftOf = false;\n            }\n        }\n        if (this.trashed) {\n            criteria.trashed = true;\n        }\n\n        if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n            criteria.status = this.status;\n        }\n\n        $.extend(criteria, this.settings.criteria);\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType,\n            source: this.instanceState.selectedSource,\n            criteria: criteria,\n            disabledElementIds: this.settings.disabledElementIds,\n            viewState: $.extend({}, this.getSelectedSourceState()),\n            paginated: this._isViewPaginated() ? 1 : 0,\n        };\n\n        // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n        params.viewState.order = this.getSelectedSortAttribute();\n        params.viewState.sort = this.getSelectedSortDirection();\n\n        if (this.getSelectedSortAttribute() === 'structure') {\n            if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                this.instanceState.collapsedElementIds = [];\n            }\n            params.collapsedElementIds = this.instanceState.collapsedElementIds;\n        }\n\n        // Give plugins a chance to hook in here\n        this.trigger('registerViewParams', {\n            params: params,\n        });\n\n        return params;\n    },\n\n    updateElements: function(preservePagination) {\n        // Ignore if we're not fully initialized yet\n        if (!this.initialized) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        this.setIndexBusy();\n\n        // Kill the old view class\n        if (this.view) {\n            this.view.destroy();\n            delete this.view;\n        }\n\n        if (preservePagination !== true) {\n            this.setPage(1);\n            this._resetCount();\n        }\n\n        var params = this.getViewParams();\n\n        Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n            data: params,\n            cancelToken: this._createCancelToken(),\n        }).then((response) => {\n            this.setIndexAvailable();\n            (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n            this._updateView(params, response.data);\n        }).catch(e => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    updateElementsIfSearchTextChanged: function() {\n        if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n            this.updateElements();\n        }\n    },\n\n    showActionTriggers: function() {\n        // Ignore if they're already shown\n        if (this.showingActionTriggers) {\n            return;\n        }\n\n        // Hard-code the min toolbar height in case it was taller than the actions toolbar\n        // (prevents the elements from jumping if this ends up being a double-click)\n        this.$toolbar.css('min-height', this.$toolbar.height());\n\n        // Hide any toolbar inputs\n        this._$detachedToolbarItems = this.$toolbar.children();\n        this._$detachedToolbarItems.detach();\n\n        if (!this._$triggers) {\n            this._createTriggers();\n        } else {\n            this._$triggers.appendTo(this.$toolbar);\n        }\n\n        this.showingActionTriggers = true;\n    },\n\n    submitAction: function(action, actionParams) {\n        // Make sure something's selected\n        var selectedElementIds = this.view.getSelectedElementIds(),\n            totalSelected = selectedElementIds.length;\n\n        if (totalSelected === 0) {\n            return;\n        }\n\n        if (typeof action === 'string') {\n            action = this._findAction(action);\n        }\n\n        if (action.confirm && !confirm(action.confirm)) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        // Get ready to submit\n        var viewParams = this.getViewParams();\n\n        actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n        var params = $.extend(viewParams, action.settings || {}, actionParams, {\n            elementAction: action.type,\n            elementIds: selectedElementIds\n        });\n\n        // Do it\n        this.setIndexBusy();\n        this._autoSelectElements = selectedElementIds;\n\n        if (action.download) {\n            if (Craft.csrfTokenName) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n            Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                this.setIndexAvailable();\n            }).catch(e => {\n                this.setIndexAvailable();\n            });\n        } else {\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        }\n    },\n\n    _findAction: function(actionClass) {\n        for (var i = 0; i < this.actions.length; i++) {\n            if (this.actions[i].type === actionClass) {\n                return this.actions[i];\n            }\n        }\n        throw `Invalid element action: ${actionClass}`;\n    },\n\n    afterAction: function(action, params) {\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n\n        this.onAfterAction(action, params);\n    },\n\n    hideActionTriggers: function() {\n        // Ignore if there aren't any\n        if (!this.showingActionTriggers) {\n            return;\n        }\n\n        this._$detachedToolbarItems.appendTo(this.$toolbar);\n        this._$triggers.detach();\n        // this._$detachedToolbarItems.removeClass('hidden');\n\n        // Unset the min toolbar height\n        this.$toolbar.css('min-height', '');\n\n        this.showingActionTriggers = false;\n    },\n\n    updateActionTriggers: function() {\n        // Do we have an action UI to update?\n        if (this.actions) {\n            var totalSelected = this.view.getSelectedElements().length;\n\n            if (totalSelected !== 0) {\n                if (totalSelected === this.view.getEnabledElements().length) {\n                    this.$selectAllCheckbox.removeClass('indeterminate');\n                    this.$selectAllCheckbox.addClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'true');\n                } else {\n                    this.$selectAllCheckbox.addClass('indeterminate');\n                    this.$selectAllCheckbox.removeClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'mixed');\n                }\n\n                this.showActionTriggers();\n            } else {\n                this.$selectAllCheckbox.removeClass('indeterminate checked');\n                this.$selectAllContainer.attr('aria-checked', 'false');\n                this.hideActionTriggers();\n            }\n        }\n    },\n\n    getSelectedElements: function() {\n        return this.view ? this.view.getSelectedElements() : $();\n    },\n\n    getSelectedElementIds: function() {\n        return this.view ? this.view.getSelectedElementIds() : [];\n    },\n\n    setStatus: function(status) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n        if ($option.length) {\n            this.statusMenu.selectOption($option[0]);\n        }\n    },\n\n    getSortAttributeOption: function(attr) {\n        return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n    },\n\n    getSelectedSortAttribute: function() {\n        return this.$sortAttributesList.find('a.sel:first').data('attr');\n    },\n\n    setSortAttribute: function(attr) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.getSortAttributeOption(attr);\n\n        if ($option.length) {\n            this.$sortAttributesList.find('a.sel').removeClass('sel');\n            $option.addClass('sel');\n\n            var label = $option.text();\n            this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n            this.$sortMenuBtn.text(label);\n\n            if (attr === 'score') {\n                this.setSortDirection('desc');\n            } else {\n                this.setSortDirection($option.data('default-dir') || 'asc');\n            }\n\n            if (attr === 'structure') {\n                this.$sortDirectionsList.find('a').addClass('disabled');\n            } else {\n                this.$sortDirectionsList.find('a').removeClass('disabled');\n            }\n        }\n    },\n\n    getSortDirectionOption: function(dir) {\n        return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n    },\n\n    getSelectedSortDirection: function() {\n        return this.$sortDirectionsList.find('a.sel:first').data('dir');\n    },\n\n    getSelectedViewMode: function() {\n        return this.getSelectedSourceState('mode') || 'table';\n    },\n\n    setSortDirection: function(dir) {\n        if (dir !== 'desc') {\n            dir = 'asc';\n        }\n\n        this.$sortMenuBtn.attr('data-icon', dir);\n        this.$sortDirectionsList.find('a.sel').removeClass('sel');\n        this.getSortDirectionOption(dir).addClass('sel');\n    },\n\n    getSourceByKey: function(key) {\n        if (typeof this.sourcesByKey[key] === 'undefined') {\n            return null;\n        }\n\n        return this.sourcesByKey[key];\n    },\n\n    selectSource: function($source) {\n        if (!$source || !$source.length) {\n            return false;\n        }\n\n        if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n            return false;\n        }\n\n        // Hide action triggers if they're currently being shown\n        this.hideActionTriggers();\n\n        this.$source = $source;\n        this.sourceKey = $source.data('key');\n        this.setInstanceState('selectedSource', this.sourceKey);\n        this.sourceSelect.selectItem($source);\n\n        Craft.cp.updateSidebarMenuLabel();\n\n        if (this.searching) {\n            // Clear the search value without causing it to update elements\n            this.searchText = null;\n            this.$search.val('');\n            this.stopSearching();\n        }\n\n        // Sort menu\n        // ----------------------------------------------------------------------\n\n        // Remove any existing custom sort options from the menu\n        this.$sortAttributesList.children('li[data-extra]').remove();\n\n        // Does this source have any custom sort options?\n        let $topSource = this.$source.closest('nav > ul > li').children('a');\n        let sortOptions = $topSource.data('sort-options')\n        if (sortOptions) {\n            for (let i = 0; i < sortOptions.length; i++) {\n                let $option = $('<li/>', {\n                    'data-extra': true,\n                })\n                    .append(\n                        $('<a/>', {\n                            text: sortOptions[i][0],\n                            'data-attr': sortOptions[i][1],\n                        })\n                    )\n                    .appendTo(this.$sortAttributesList);\n                this.sortMenu.addOptions($option.children());\n            }\n        }\n\n        // Does this source have a structure?\n        if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n            if (!this.$structureSortAttribute) {\n                this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                this.sortMenu.addOptions(this.$structureSortAttribute.children());\n            }\n\n            this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n        } else if (this.$structureSortAttribute) {\n            this.$structureSortAttribute.removeClass('sel').detach();\n        }\n\n        this.setStoredSortOptionsForSource();\n\n        // Status menu\n        // ----------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                this.$statusMenuContainer.addClass('hidden');\n            } else {\n                this.$statusMenuContainer.removeClass('hidden');\n            }\n\n            if (this.trashed) {\n                // Swap to the initial status\n                var $firstOption = this.statusMenu.$options.first();\n                this.setStatus($firstOption.data('status'));\n            }\n        }\n\n        // View mode buttons\n        // ----------------------------------------------------------------------\n\n        // Clear out any previous view mode data\n        if (this.$viewModeBtnContainer) {\n            this.$viewModeBtnContainer.remove();\n        }\n\n        this.viewModeBtns = {};\n        this.viewMode = null;\n\n        // Get the new list of view modes\n        this.sourceViewModes = this.getViewModesForSource();\n\n        // Create the buttons if there's more than one mode available to this source\n        if (this.sourceViewModes.length > 1) {\n            this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                let sourceViewMode = this.sourceViewModes[i];\n\n                let $viewModeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                    'data-view': sourceViewMode.mode,\n                    'data-icon': sourceViewMode.icon,\n                    'aria-label': sourceViewMode.title,\n                    title: sourceViewMode.title,\n                }).appendTo(this.$viewModeBtnContainer);\n\n                this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                    this.selectViewMode(ev.data.mode);\n                    this.updateElements();\n                });\n            }\n        }\n\n        // Figure out which mode we should start with\n        var viewMode = this.getSelectedViewMode();\n\n        if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n            // Try to keep using the current view mode\n            if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                viewMode = this.viewMode;\n            }\n            // Just use the first one\n            else {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n        }\n\n        this.selectViewMode(viewMode);\n\n        this.onSelectSource();\n\n        return true;\n    },\n\n    selectSourceByKey: function(key) {\n        var $source = this.getSourceByKey(key);\n\n        if ($source) {\n            return this.selectSource($source);\n        } else {\n            return false;\n        }\n    },\n\n    setStoredSortOptionsForSource: function() {\n        var sortAttr = this.getSelectedSourceState('order'),\n            sortDir = this.getSelectedSourceState('sort');\n\n        if (!sortAttr || !sortDir) {\n            // Get the default\n            sortAttr = this.getDefaultSort();\n\n            if (Garnish.isArray(sortAttr)) {\n                sortDir = sortAttr[1];\n                sortAttr = sortAttr[0];\n            }\n        }\n\n        if (sortDir !== 'asc' && sortDir !== 'desc') {\n            sortDir = 'asc';\n        }\n\n        this.setSortAttribute(sortAttr);\n        this.setSortDirection(sortDir);\n    },\n\n    getDefaultSort: function() {\n        // Does the source specify what to do?\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n            return this.$source.attr('data-default-sort').split(':');\n        } else {\n            // Default to whatever's first\n            return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n        }\n    },\n\n    getViewModesForSource: function() {\n        var viewModes = [\n            {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n        ];\n\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n            viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n        }\n\n        return viewModes;\n    },\n\n    doesSourceHaveViewMode: function(viewMode) {\n        for (var i = 0; i < this.sourceViewModes.length; i++) {\n            if (this.sourceViewModes[i].mode === viewMode) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    selectViewMode: function(viewMode, force) {\n        // Make sure that the current source supports it\n        if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n            viewMode = this.sourceViewModes[0].mode;\n        }\n\n        // Has anything changed?\n        if (viewMode === this.viewMode) {\n            return;\n        }\n\n        // Deselect the previous view mode\n        if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].removeClass('active');\n        }\n\n        this.viewMode = viewMode;\n        this.setSelecetedSourceState('mode', this.viewMode);\n\n        if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].addClass('active');\n        }\n    },\n\n    createView: function(mode, settings) {\n        var viewClass = this.getViewClass(mode);\n        return new viewClass(this, this.$elements, settings);\n    },\n\n    getViewClass: function(mode) {\n        switch (mode) {\n            case 'table':\n                return Craft.TableElementIndexView;\n            case 'thumbs':\n                return Craft.ThumbsElementIndexView;\n            default:\n                throw `View mode \"${mode}\" not supported.`;\n        }\n    },\n\n    rememberDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index === -1) {\n            this.settings.disabledElementIds.push(id);\n        }\n    },\n\n    forgetDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index !== -1) {\n            this.settings.disabledElementIds.splice(index, 1);\n        }\n    },\n\n    enableElements: function($elements) {\n        $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.forgetDisabledElementId(id);\n        }\n\n        this.onEnableElements($elements);\n    },\n\n    disableElements: function($elements) {\n        $elements.removeClass('sel').addClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.rememberDisabledElementId(id);\n        }\n\n        this.onDisableElements($elements);\n    },\n\n    getElementById: function(id) {\n        return this.view.getElementById(id);\n    },\n\n    enableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.enableElements($element);\n            } else {\n                this.forgetDisabledElementId(id);\n            }\n        }\n    },\n\n    disableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.disableElements($element);\n            } else {\n                this.rememberDisabledElementId(id);\n            }\n        }\n    },\n\n    selectElementAfterUpdate: function(id) {\n        if (this._autoSelectElements === null) {\n            this._autoSelectElements = [];\n        }\n\n        this._autoSelectElements.push(id);\n    },\n\n    addButton: function($button) {\n        this.getButtonContainer().append($button);\n    },\n\n    isShowingSidebar: function() {\n        if (this.showingSidebar === null) {\n            this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n        }\n\n        return this.showingSidebar;\n    },\n\n    getButtonContainer: function() {\n        // Is there a predesignated place where buttons should go?\n        if (this.settings.buttonContainer) {\n            return $(this.settings.buttonContainer);\n        } else {\n            var $container = $('#action-button');\n\n            if (!$container.length) {\n                $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n            }\n\n            return $container;\n        }\n    },\n\n    setIndexBusy: function() {\n        this.$elements.addClass('busy');\n        this.isIndexBusy = true;\n    },\n\n    setIndexAvailable: function() {\n        this.$elements.removeClass('busy');\n        this.isIndexBusy = false;\n    },\n\n    createCustomizeSourcesModal: function() {\n        // Recreate it each time\n        var modal = new Craft.CustomizeSourcesModal(this, {\n            onHide: function() {\n                modal.destroy();\n            }\n        });\n\n        return modal;\n    },\n\n    disable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.disable();\n        }\n\n        if (this.view) {\n            this.view.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.enable();\n        }\n\n        if (this.view) {\n            this.view.enable();\n        }\n\n        this.base();\n    },\n\n    onAfterInit: function() {\n        this.settings.onAfterInit();\n        this.trigger('afterInit');\n    },\n\n    onSelectSource: function() {\n        this.settings.onSelectSource(this.sourceKey);\n        this.trigger('selectSource', {sourceKey: this.sourceKey});\n    },\n\n    onSelectSite: function() {\n        this.settings.onSelectSite(this.siteId);\n        this.trigger('selectSite', {siteId: this.siteId});\n    },\n\n    onUpdateElements: function() {\n        this.settings.onUpdateElements();\n        this.trigger('updateElements');\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    onEnableElements: function($elements) {\n        this.settings.onEnableElements($elements);\n        this.trigger('enableElements', {elements: $elements});\n    },\n\n    onDisableElements: function($elements) {\n        this.settings.onDisableElements($elements);\n        this.trigger('disableElements', {elements: $elements});\n    },\n\n    onAfterAction: function(action, params) {\n        this.settings.onAfterAction(action, params);\n        this.trigger('afterAction', {action: action, params: params});\n    },\n\n    // UI state handlers\n    // -------------------------------------------------------------------------\n\n    _handleSourceSelectionChange: function() {\n        // If the selected source was just removed (maybe because its parent was collapsed),\n        // there won't be a selected source\n        if (!this.sourceSelect.totalSelected) {\n            this.sourceSelect.selectItem(this.$visibleSources.first());\n            return;\n        }\n\n        if (this.selectSource(this.sourceSelect.$selectedItems)) {\n            this.updateElements();\n        }\n    },\n\n    _handleActionTriggerSubmit: function(ev) {\n        ev.preventDefault();\n\n        var $form = $(ev.currentTarget);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($form.data('action'), Garnish.getPostData($form));\n    },\n\n    _handleMenuActionTriggerSubmit: function(ev) {\n        var $option = $(ev.option);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($option.data('action'));\n    },\n\n    _handleStatusChange: function(ev) {\n        this.statusMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$statusMenuBtn.html($option.html());\n\n        this.trashed = false;\n        this.drafts = false;\n        this.status = null;\n\n        if (Garnish.hasAttr($option, 'data-trashed')) {\n            this.trashed = true;\n        } else if (Garnish.hasAttr($option, 'data-drafts')) {\n            this.drafts = true;\n        } else {\n            this.status = $option.data('status');\n        }\n\n        this._updateStructureSortOption();\n        this.updateElements();\n    },\n\n    _handleSiteChange: function(ev) {\n        this.siteMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$siteMenuBtn.html($option.html());\n        this._setSite($option.data('site-id'));\n        this.onSelectSite();\n    },\n\n    _setSite: function(siteId) {\n        let firstSite = this.siteId === null;\n        this.siteId = siteId;\n        this.$visibleSources = $();\n\n        // Hide any sources that aren't available for this site\n        var $firstVisibleSource;\n        var $source;\n        // Select a new source automatically if a site is already selected, but we don't have a selected source\n        // (or if the currently selected source ends up not supporting the new site)\n        var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n        for (var i = 0; i < this.$sources.length; i++) {\n            $source = this.$sources.eq(i);\n            if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                $source.parent().removeClass('hidden');\n                this.$visibleSources = this.$visibleSources.add($source);\n                if (!$firstVisibleSource) {\n                    $firstVisibleSource = $source;\n                }\n            } else {\n                $source.parent().addClass('hidden');\n\n                // Is this the currently selected source?\n                if (this.$source && this.$source.get(0) == $source.get(0)) {\n                    selectNewSource = true;\n                }\n            }\n        }\n\n        if (this.initialized && selectNewSource) {\n            this.selectSource($firstVisibleSource);\n        }\n\n        // Hide any empty-nester headings\n        var $headings = this.getSourceContainer().children('.heading');\n        var $heading;\n\n        for (i = 0; i < $headings.length; i++) {\n            $heading = $headings.eq(i);\n            if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                $heading.removeClass('hidden');\n            } else {\n                $heading.addClass('hidden');\n            }\n        }\n\n        if (this.initialized) {\n            if (this.settings.context === 'index') {\n                // Remember this site for later\n                Craft.cp.setSiteId(siteId);\n            }\n\n            // Update the elements\n            this.updateElements();\n        }\n    },\n\n    _handleSortChange: function(ev) {\n        var $option = $(ev.selectedOption);\n\n        if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n            return;\n        }\n\n        // Is this an attribute or a direction?\n        if ($option.parent().parent().is(this.$sortAttributesList)) {\n            this.setSortAttribute($option.data('attr'));\n        } else {\n            this.setSortDirection($option.data('dir'));\n        }\n\n        this.storeSortAttributeAndDirection();\n        this.updateElements();\n    },\n\n    _handleSelectionChange: function() {\n        this.updateActionTriggers();\n        this.onSelectionChange();\n    },\n\n    _handleSourceDblClick: function(ev) {\n        this._toggleSource($(ev.currentTarget));\n        ev.stopPropagation();\n    },\n\n    _handleSourceToggleClick: function(ev) {\n        this._toggleSource($(ev.currentTarget).prev('a'));\n        ev.stopPropagation();\n    },\n\n    _updateStructureSortOption: function() {\n        var $option = this.getSortAttributeOption('structure');\n\n        if (!$option.length) {\n            return;\n        }\n\n        if (this.trashed || this.drafts || this.searching) {\n            $option.addClass('disabled');\n            if (this.getSelectedSortAttribute() === 'structure') {\n                // Temporarily set the sort to the first option\n                var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                this.setSortAttribute($firstOption.data('attr'));\n                this.setSortDirection('asc');\n            }\n        } else {\n            $option.removeClass('disabled');\n            this.setStoredSortOptionsForSource();\n        }\n    },\n\n    // Source managemnet\n    // -------------------------------------------------------------------------\n\n    _getSourcesInList: function($list) {\n        return $list.children('li').children('a');\n    },\n\n    _getChildSources: function($source) {\n        var $list = $source.siblings('ul');\n        return this._getSourcesInList($list);\n    },\n\n    _getSourceToggle: function($source) {\n        return $source.siblings('.toggle');\n    },\n\n    _initSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.initSource($($sources[i]));\n        }\n    },\n\n    _deinitSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.deinitSource($($sources[i]));\n        }\n    },\n\n    _toggleSource: function($source) {\n        if ($source.parent('li').hasClass('expanded')) {\n            this._collapseSource($source);\n        } else {\n            this._expandSource($source);\n        }\n    },\n\n    _expandSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'true',\n            'aria-label': Craft.t('app', 'Hide nested sources'),\n        });\n        $source.parent('li').addClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._initSources($childSources);\n\n        var key = $source.data('key');\n        if (this.instanceState.expandedSources.indexOf(key) === -1) {\n            this.instanceState.expandedSources.push(key);\n            this.storeInstanceState();\n        }\n    },\n\n    _collapseSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'false',\n            'aria-label': Craft.t('app', 'Show nested sources'),\n        });\n        $source.parent('li').removeClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._deinitSources($childSources);\n\n        var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n        if (i !== -1) {\n            this.instanceState.expandedSources.splice(i, 1);\n            this.storeInstanceState();\n        }\n    },\n\n    // View\n    // -------------------------------------------------------------------------\n\n    _isViewPaginated: function() {\n        return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n    },\n\n    _updateView: function(params, response) {\n        // Cleanup\n        // -------------------------------------------------------------\n\n        // Get rid of the old action triggers regardless of whether the new batch has actions or not\n        if (this.actions) {\n            this.hideActionTriggers();\n            this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n        }\n\n        // Update the count text\n        // -------------------------------------------------------------\n\n        if (this.$countContainer.length) {\n            this.$countSpinner.removeClass('hidden');\n            this.$countContainer.html('');\n\n            this._countResults()\n                .then((total) => {\n                    this.$countSpinner.addClass('hidden');\n\n                    let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                    let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                    if (!this._isViewPaginated()) {\n                        let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n                        this.$countContainer.text(countLabel);\n                    } else {\n                        let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                        let last = Math.min(first + (this.settings.batchSize - 1), total);\n                        let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            first: first,\n                            last: last,\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n\n                        let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                        let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                        let $prevBtn = $('<div/>', {\n                            'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                            title: Craft.t('app', 'Previous Page')\n                        }).appendTo($paginationContainer);\n                        let $nextBtn = $('<div/>', {\n                            'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                            title: Craft.t('app', 'Next Page')\n                        }).appendTo($paginationContainer);\n\n                        $('<div/>', {\n                            'class': 'page-info',\n                            text: countLabel\n                        }).appendTo($paginationContainer);\n\n                        if (this.page > 1) {\n                            this.addListener($prevBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page - 1);\n                                this.updateElements(true);\n                            });\n                        }\n\n                        if (this.page < totalPages) {\n                            this.addListener($nextBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page + 1);\n                                this.updateElements(true);\n                            });\n                        }\n                    }\n                })\n                .catch(() => {\n                    this.$countSpinner.addClass('hidden');\n                });\n        }\n\n        // Update the view with the new container + elements HTML\n        // -------------------------------------------------------------\n\n        this.$elements.html(response.html);\n        Craft.appendHeadHtml(response.headHtml);\n        Craft.appendFootHtml(response.footHtml);\n\n        // Batch actions setup\n        // -------------------------------------------------------------\n\n        this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n        if (response.actions && response.actions.length) {\n            if (this.$selectAllContainer.length) {\n                this.actions = response.actions;\n                this.actionsHeadHtml = response.actionsHeadHtml;\n                this.actionsFootHtml = response.actionsFootHtml;\n\n                // Create the select all checkbox\n                this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                this.$selectAllContainer.attr({\n                    'role': 'checkbox',\n                    'tabindex': '0',\n                    'aria-checked': 'false',\n                    'aria-label': Craft.t('app', 'Select all'),\n                });\n\n                this.addListener(this.$selectAllContainer, 'click', function() {\n                    if (this.view.getSelectedElements().length === 0) {\n                        this.view.selectAllElements();\n                    } else {\n                        this.view.deselectAllElements();\n                    }\n                });\n\n                this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                    if (ev.keyCode === Garnish.SPACE_KEY) {\n                        ev.preventDefault();\n\n                        $(ev.currentTarget).trigger('click');\n                    }\n                });\n            }\n        } else {\n            if (!this.$selectAllContainer.siblings().length) {\n                this.$selectAllContainer.parent('.header').remove();\n            }\n            this.$selectAllContainer.remove();\n        }\n\n        // Exporters setup\n        // -------------------------------------------------------------\n\n        this.exporters = response.exporters;\n        this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n        if (this.exporters && this.exporters.length) {\n            this.$exportBtn.removeClass('hidden');\n        } else {\n            this.$exportBtn.addClass('hidden');\n        }\n\n        // Create the view\n        // -------------------------------------------------------------\n\n        // Should we make the view selectable?\n        var selectable = (this.actions || this.settings.selectable);\n\n        this.view = this.createView(this.getSelectedViewMode(), {\n            context: this.settings.context,\n            batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n            params: params,\n            selectable: selectable,\n            multiSelect: (this.actions || this.settings.multiSelect),\n            checkboxMode: !!this.actions,\n            onSelectionChange: this._handleSelectionChange.bind(this)\n        });\n\n        // Auto-select elements\n        // -------------------------------------------------------------\n\n        if (this._autoSelectElements) {\n            if (selectable) {\n                for (var i = 0; i < this._autoSelectElements.length; i++) {\n                    this.view.selectElementById(this._autoSelectElements[i]);\n                }\n            }\n\n            this._autoSelectElements = null;\n        }\n\n        // Trigger the event\n        // -------------------------------------------------------------\n\n        this.onUpdateElements();\n    },\n\n    _countResults: function() {\n        return new Promise((resolve, reject) => {\n            if (this.totalResults !== null) {\n                resolve(this.totalResults);\n            } else {\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                // Make sure we've got an active result set ID\n                if (this.resultSet === null) {\n                    this.resultSet = Math.floor(Math.random() * 100000000);\n                }\n                params.resultSet = this.resultSet;\n\n                Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    if (response.data.resultSet == this.resultSet) {\n                        this.totalResults = response.data.count;\n                        resolve(response.data.count);\n                    } else {\n                        reject();\n                    }\n                }).catch(reject);\n            }\n        });\n    },\n\n    _createTriggers: function() {\n        var triggers = [],\n            safeMenuActions = [],\n            destructiveMenuActions = [];\n\n        var i;\n\n        for (i = 0; i < this.actions.length; i++) {\n            var action = this.actions[i];\n\n            if (action.trigger) {\n                var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                    .data('action', action)\n                    .append(action.trigger);\n\n                this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                triggers.push($form);\n            } else {\n                if (!action.destructive) {\n                    safeMenuActions.push(action);\n                } else {\n                    destructiveMenuActions.push(action);\n                }\n            }\n        }\n\n        var $btn;\n\n        if (safeMenuActions.length || destructiveMenuActions.length) {\n            var $menuTrigger = $('<form/>');\n\n            $btn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn',\n                'data-icon': 'settings',\n                title: Craft.t('app', 'Actions'),\n            }).appendTo($menuTrigger);\n\n            var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n            if ($safeList) {\n                $safeList.appendTo($menu);\n            }\n\n            if ($safeList && $destructiveList) {\n                $('<hr/>').appendTo($menu);\n            }\n\n            if ($destructiveList) {\n                $destructiveList.appendTo($menu);\n            }\n\n            triggers.push($menuTrigger);\n        }\n\n        this._$triggers = $();\n\n        for (i = 0; i < triggers.length; i++) {\n            var $div = $('<div/>').append(triggers[i]);\n            this._$triggers = this._$triggers.add($div);\n        }\n\n        this._$triggers.appendTo(this.$toolbar);\n        Craft.appendHeadHtml(this.actionsHeadHtml);\n        Craft.appendFootHtml(this.actionsFootHtml);\n\n        Craft.initUiElements(this._$triggers);\n\n        if ($btn) {\n            $btn.data('menubtn').on('optionSelect', this._handleMenuActionTriggerSubmit.bind(this));\n        }\n    },\n\n    _showExportHud: function() {\n        this.$exportBtn.addClass('active');\n\n        var $form = $('<form/>', {\n            'class': 'export-form'\n        });\n\n        var typeOptions = [];\n        for (var i = 0; i < this.exporters.length; i++) {\n            typeOptions.push({label: this.exporters[i].name, value: this.exporters[i].type});\n        }\n        var $typeField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Export Type'),\n            options: typeOptions,\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        var $formatField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Format'),\n            options: [\n                {label: 'CSV', value: 'csv'}, {label: 'JSON', value: 'json'}, {label: 'XML', value: 'xml'},\n            ],\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        let $typeSelect = $typeField.find('select');\n        this.addListener($typeSelect, 'change', () => {\n            let type = $typeSelect.val();\n            if (this.exportersByType[type].formattable) {\n                $formatField.removeClass('hidden');\n            } else {\n                $formatField.addClass('hidden');\n            }\n        });\n        $typeSelect.trigger('change');\n\n        // Only show the Limit field if there aren't any selected elements\n        var selectedElementIds = this.view.getSelectedElementIds();\n\n        if (!selectedElementIds.length) {\n            var $limitField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Limit'),\n                placeholder: Craft.t('app', 'No limit'),\n                type: 'number',\n                min: 1\n            }).appendTo($form);\n        }\n\n        $('<button/>', {\n            type: 'submit',\n            'class': 'btn submit fullwidth',\n            text: Craft.t('app', 'Export')\n        }).appendTo($form)\n\n        var $spinner = $('<div/>', {\n            'class': 'spinner hidden'\n        }).appendTo($form);\n\n        var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n        hud.on('hide', () => {\n            this.$exportBtn.removeClass('active');\n        });\n\n        var submitting = false;\n\n        this.addListener($form, 'submit', function(ev) {\n            ev.preventDefault();\n            if (submitting) {\n                return;\n            }\n\n            submitting = true;\n            $spinner.removeClass('hidden');\n\n            var params = this.getViewParams();\n            delete params.criteria.offset;\n            delete params.criteria.limit;\n\n            params.type = $typeField.find('select').val();\n            params.format = $formatField.find('select').val();\n\n            if (selectedElementIds.length) {\n                params.criteria.id = selectedElementIds;\n            } else {\n                var limit = parseInt($limitField.find('input').val());\n                if (limit && !isNaN(limit)) {\n                    params.criteria.limit = limit;\n                }\n            }\n\n            if (Craft.csrfTokenValue) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                .then(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                })\n                .catch(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                });\n        });\n    },\n\n    _createMenuTriggerList: function(actions, destructive) {\n        if (actions && actions.length) {\n            var $ul = $('<ul/>');\n\n            for (var i = 0; i < actions.length; i++) {\n                $('<li/>').append($('<a/>', {\n                    id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                    'class': (destructive ? 'error' : null),\n                    data: {\n                        action: actions[i],\n                    },\n                    text: actions[i].name\n                })).appendTo($ul);\n            }\n\n            return $ul;\n        }\n    }\n}, {\n    defaults: {\n        context: 'index',\n        modal: null,\n        storageKey: null,\n        criteria: null,\n        batchSize: 100,\n        disabledElementIds: [],\n        selectable: false,\n        multiSelect: false,\n        buttonContainer: null,\n        hideSidebar: false,\n        toolbarSelector: '.toolbar:first',\n        refreshSourcesAction: 'element-indexes/get-source-tree-html',\n        updateElementsAction: 'element-indexes/get-elements',\n        countElementsAction: 'element-indexes/count-elements',\n        submitActionsAction: 'element-indexes/perform-action',\n        defaultSiteId: null,\n        defaultSource: null,\n        canHaveDrafts: false,\n\n        onAfterInit: $.noop,\n        onSelectSource: $.noop,\n        onSelectSite: $.noop,\n        onUpdateElements: $.noop,\n        onSelectionChange: $.noop,\n        onEnableElements: $.noop,\n        onDisableElements: $.noop,\n        onAfterAction: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend({\n    $container: null,\n    $loadingMoreSpinner: null,\n    $elementContainer: null,\n    $scroller: null,\n\n    elementIndex: null,\n    thumbLoader: null,\n    elementSelect: null,\n\n    loadingMore: false,\n\n    _totalVisible: null,\n    _morePending: null,\n    _handleEnableElements: null,\n    _handleDisableElements: null,\n\n    init: function(elementIndex, container, settings) {\n        this.elementIndex = elementIndex;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n        // Create a \"loading-more\" spinner\n        this.$loadingMoreSpinner = $(\n            '<div class=\"centeralign hidden\">' +\n            '<div class=\"spinner loadingmore\"></div>' +\n            '</div>'\n        ).insertAfter(this.$container);\n\n        // Get the actual elements container and its child elements\n        this.$elementContainer = this.getElementContainer();\n        var $elements = this.$elementContainer.children();\n\n        this.setTotalVisible($elements.length);\n        this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n        // Instantiate the thumb loader\n        this.thumbLoader = new Craft.ElementThumbLoader();\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select(\n                this.$elementContainer,\n                $elements.filter(':not(.disabled)'),\n                {\n                    multi: this.settings.multiSelect,\n                    vertical: this.isVerticalList(),\n                    handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                    filter: ':not(a):not(.toggle)',\n                    checkboxMode: this.settings.checkboxMode,\n                    onSelectionChange: this.onSelectionChange.bind(this)\n                });\n\n            this._handleEnableElements = ev => {\n                this.elementSelect.addItems(ev.elements);\n            };\n\n            this._handleDisableElements = ev => {\n                this.elementSelect.removeItems(ev.elements);\n            };\n\n            this.elementIndex.on('enableElements', this._handleEnableElements);\n            this.elementIndex.on('disableElements', this._handleDisableElements);\n        }\n\n        // Enable inline element editing if this is an index page\n        if (this.settings.context === 'index') {\n            this._handleElementEditing = ev => {\n                var $target = $(ev.target);\n\n                if ($target.prop('nodeName') === 'A') {\n                    // Let the link do its thing\n                    return;\n                }\n\n                var $element;\n\n                if ($target.hasClass('element')) {\n                    $element = $target;\n                } else {\n                    $element = $target.closest('.element');\n\n                    if (!$element.length) {\n                        return;\n                    }\n                }\n\n                if (Garnish.hasAttr($element, 'data-editable')) {\n                    this.createElementEditor($element);\n                }\n            };\n\n            if (!this.elementIndex.trashed) {\n                this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                if ($.isTouchCapable()) {\n                    this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                }\n            }\n        }\n\n        // Give sub-classes a chance to do post-initialization stuff here\n        this.afterInit();\n\n        // Set up lazy-loading\n        if (this.settings.batchSize) {\n            if (this.settings.context === 'index') {\n                this.$scroller = Garnish.$scrollContainer;\n            } else {\n                this.$scroller = this.elementIndex.$main;\n            }\n\n            this.$scroller.scrollTop(0);\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }\n    },\n\n    getElementContainer: function() {\n        throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n    },\n\n    afterInit: function() {\n    },\n\n    getAllElements: function() {\n        return this.$elementContainer.children();\n    },\n\n    getEnabledElements: function() {\n        return this.$elementContainer.children(':not(.disabled)');\n    },\n\n    getElementById: function(id) {\n        var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n        if ($element.length) {\n            return $element;\n        } else {\n            return null;\n        }\n    },\n\n    getSelectedElements: function() {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        return this.elementSelect.$selectedItems;\n    },\n\n    getSelectedElementIds: function() {\n        let $selectedElements;\n        try {\n            $selectedElements = this.getSelectedElements();\n        } catch (e) {\n        }\n\n        let ids = [];\n        if ($selectedElements) {\n            for (var i = 0; i < $selectedElements.length; i++) {\n                ids.push($selectedElements.eq(i).data('id'));\n            }\n        }\n        return ids;\n    },\n\n    selectElement: function($element) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        this.elementSelect.selectItem($element, true);\n        return true;\n    },\n\n    selectElementById: function(id) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        var $element = this.getElementById(id);\n\n        if ($element) {\n            this.elementSelect.selectItem($element, true);\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    selectAllElements: function() {\n        this.elementSelect.selectAll();\n    },\n\n    deselectAllElements: function() {\n        this.elementSelect.deselectAll();\n    },\n\n    isVerticalList: function() {\n        return false;\n    },\n\n    getTotalVisible: function() {\n        return this._totalVisible;\n    },\n\n    setTotalVisible: function(totalVisible) {\n        this._totalVisible = totalVisible;\n    },\n\n    getMorePending: function() {\n        return this._morePending;\n    },\n\n    setMorePending: function(morePending) {\n        this._morePending = morePending;\n    },\n\n    /**\n     * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n     */\n    maybeLoadMore: function() {\n        if (this.canLoadMore()) {\n            this.loadMore();\n        }\n    },\n\n    /**\n     * Returns whether the user has reached the bottom of the scroll area.\n     */\n    canLoadMore: function() {\n        if (!this.getMorePending() || !this.settings.batchSize) {\n            return false;\n        }\n\n        // Check if the user has reached the bottom of the scroll area\n        var containerHeight;\n\n        if (this.$scroller[0] === Garnish.$win[0]) {\n            var winHeight = Garnish.$win.innerHeight(),\n                winScrollTop = Garnish.$win.scrollTop(),\n                containerOffset = this.$container.offset().top;\n            containerHeight = this.$container.height();\n\n            return (winHeight + winScrollTop >= containerOffset + containerHeight);\n        } else {\n            var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                containerScrollTop = this.$scroller.scrollTop();\n            containerHeight = this.$scroller.outerHeight();\n\n            return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n        }\n    },\n\n    /**\n     * Loads the next batch of elements.\n     */\n    loadMore: function() {\n        if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n            return;\n        }\n\n        this.loadingMore = true;\n        this.$loadingMoreSpinner.removeClass('hidden');\n        this.removeListener(this.$scroller, 'scroll');\n\n        Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {\n            data: this.getLoadMoreParams(),\n        }).then(response => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n\n            let $newElements = $(response.data.html);\n\n            this.appendElements($newElements);\n            Craft.appendHeadHtml(response.data.headHtml);\n            Craft.appendFootHtml(response.data.footHtml);\n\n            if (this.elementSelect) {\n                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                this.elementIndex.updateActionTriggers();\n            }\n\n            this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n            this.setMorePending($newElements.length == this.settings.batchSize);\n\n            // Is there room to load more right now?\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }).catch(e => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n        });\n    },\n\n    getLoadMoreParams: function() {\n        // Use the same params that were passed when initializing this view\n        var params = $.extend(true, {}, this.settings.params);\n        params.criteria.offset = this.getTotalVisible();\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        $newElements.appendTo(this.$elementContainer);\n        this.thumbLoader.load($newElements);\n        this.onAppendElements($newElements);\n    },\n\n    onAppendElements: function($newElements) {\n        this.settings.onAppendElements($newElements);\n        this.trigger('appendElements', {\n            newElements: $newElements\n        });\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            elementIndex: this.elementIndex\n        });\n    },\n\n    disable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.disable();\n        }\n    },\n\n    enable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.enable();\n        }\n    },\n\n    destroy: function() {\n        // Remove the \"loading-more\" spinner, since we added that outside of the view container\n        this.$loadingMoreSpinner.remove();\n\n        // Kill the thumb loader\n        this.thumbLoader.destroy();\n        delete this.thumbLoader;\n\n        // Delete the element select\n        if (this.elementSelect) {\n            this.elementIndex.off('enableElements', this._handleEnableElements);\n            this.elementIndex.off('disableElements', this._handleDisableElements);\n\n            this.elementSelect.destroy();\n            delete this.elementSelect;\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        context: 'index',\n        batchSize: null,\n        params: null,\n        selectable: false,\n        multiSelect: false,\n        checkboxMode: false,\n        loadMoreElementsAction: 'element-indexes/get-more-elements',\n        onAppendElements: $.noop,\n        onSelectionChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend({\n    thumbLoader: null,\n    elementSelect: null,\n    elementSort: null,\n    modal: null,\n    elementEditor: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addElementBtn: null,\n    $addElementBtnContainer: null,\n\n    _initialized: false,\n\n    init: function(settings) {\n        // Normalize the settings and set them\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n        // Apply the storage key prefix\n        if (this.settings.modalStorageKey) {\n            this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n        }\n\n        // No reason for this to be sortable if we're only allowing 1 selection\n        if (this.settings.limit == 1) {\n            this.settings.sortable = false;\n        }\n\n        this.$container = this.getContainer();\n\n        // Store a reference to this class\n        this.$container.data('elementSelect', this);\n\n        this.$elementsContainer = this.getElementsContainer();\n\n        this.$addElementBtn = this.getAddElementsBtn();\n        if (this.$addElementBtn) {\n            this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n            if (!this.$addElementBtnContainer.length) {\n                this.$addElementBtnContainer = null;\n            }\n        }\n\n        this.thumbLoader = new Craft.ElementThumbLoader();\n\n        this.initElementSelect();\n        this.initElementSort();\n        this.resetElements();\n\n        if (this.$addElementBtn) {\n            this.addListener(this.$addElementBtn, 'activate', 'showModal');\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            this._initialized = true;\n        });\n    },\n\n    get totalSelected() {\n        return this.$elements.length;\n    },\n\n    getContainer: function() {\n        return $('#' + this.settings.id);\n    },\n\n    getElementsContainer: function() {\n        return this.$container.children('.elements');\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.children();\n    },\n\n    getAddElementsBtn: function() {\n        return this.$container.find('.btn.add:first');\n    },\n\n    initElementSelect: function() {\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select({\n                multi: this.settings.sortable,\n                filter: ':not(.delete)'\n            });\n        }\n    },\n\n    initElementSort: function() {\n        if (this.settings.sortable) {\n            this.elementSort = new Garnish.DragSort({\n                container: this.$elementsContainer,\n                filter: (this.settings.selectable ? () => {\n                    // Only return all the selected items if the target item is selected\n                    if (this.elementSort.$targetItem.hasClass('sel')) {\n                        return this.elementSelect.getSelectedItems();\n                    } else {\n                        return this.elementSort.$targetItem;\n                    }\n                } : null),\n                ignoreHandleSelector: '.delete',\n                axis: this.getElementSortAxis(),\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                onSortChange: (this.settings.selectable ? () => {\n                    this.elementSelect.resetItemOrder();\n                } : null)\n            });\n        }\n    },\n\n    getElementSortAxis: function() {\n        return (this.settings.viewMode === 'list' ? 'y' : null);\n    },\n\n    canAddMoreElements: function() {\n        return (!this.settings.limit || this.$elements.length < this.settings.limit);\n    },\n\n    updateAddElementsBtn: function() {\n        if (this.canAddMoreElements()) {\n            this.enableAddElementsBtn();\n        } else {\n            this.disableAddElementsBtn();\n        }\n    },\n\n    disableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.addClass('hidden');\n        }\n    },\n\n    enableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.removeClass('hidden');\n        }\n    },\n\n    resetElements: function() {\n        if (this.$elements !== null) {\n            this.removeElements(this.$elements);\n        } else {\n            this.$elements = $();\n        }\n\n        this.addElements(this.getElements());\n    },\n\n    addElements: function($elements) {\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect.addItems($elements);\n        }\n\n        if (this.settings.sortable) {\n            this.elementSort.addItems($elements);\n        }\n\n        if (this.settings.editable) {\n            this._handleShowElementEditor = ev => {\n                var $element = $(ev.currentTarget);\n                if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                    this.elementEditor = this.createElementEditor($element);\n                }\n            };\n\n            this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n            if ($.isTouchCapable()) {\n                this.addListener($elements, 'taphold', this._handleShowElementEditor);\n            }\n        }\n\n        $elements.find('.delete').on('click dblclick', ev => {\n            this.removeElement($(ev.currentTarget).closest('.element'));\n            // Prevent this from acting as one of a double-click\n            ev.stopPropagation();\n        });\n\n        this.$elements = this.$elements.add($elements);\n        this.updateAddElementsBtn();\n    },\n\n    createElementEditor: function($element, settings) {\n        if (!settings) {\n            settings = {};\n        }\n        settings.prevalidate = this.settings.prevalidate;\n        return Craft.createElementEditor(this.settings.elementType, $element, settings);\n    },\n\n    removeElements: function($elements) {\n        if (this.settings.selectable) {\n            this.elementSelect.removeItems($elements);\n        }\n\n        if (this.modal) {\n            var ids = [];\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $elements.eq(i).data('id');\n\n                if (id) {\n                    ids.push(id);\n                }\n            }\n\n            if (ids.length) {\n                this.modal.elementIndex.enableElementsById(ids);\n            }\n        }\n\n        // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n        $elements.children('input').prop('disabled', true);\n\n        this.$elements = this.$elements.not($elements);\n        this.updateAddElementsBtn();\n\n        this.onRemoveElements();\n    },\n\n    removeElement: function($element) {\n        this.removeElements($element);\n        this.animateElementAway($element, () => {\n            $element.remove();\n        });\n    },\n\n    animateElementAway: function($element, callback) {\n        $element.css('z-index', 0);\n\n        var animateCss = {\n            opacity: -1\n        };\n        animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n        if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n            animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n        }\n\n        // Pause the draft editor\n        if (window.draftEditor) {\n            window.draftEditor.pause();\n        }\n\n        $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n            callback();\n\n            // Resume the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.resume();\n            }\n        });\n    },\n\n    showModal: function() {\n        // Make sure we haven't reached the limit\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        if (!this.modal) {\n            this.modal = this.createModal();\n        } else {\n            this.modal.show();\n        }\n    },\n\n    createModal: function() {\n        return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n    },\n\n    getModalSettings: function() {\n        return $.extend({\n            closeOtherModals: false,\n            storageKey: this.modalStorageKey,\n            sources: this.settings.sources,\n            criteria: this.settings.criteria,\n            multiSelect: (this.settings.limit != 1),\n            showSiteMenu: this.settings.showSiteMenu,\n            disabledElementIds: this.getDisabledElementIds(),\n            onSelect: this.onModalSelect.bind(this)\n        }, this.settings.modalSettings);\n    },\n\n    getSelectedElementIds: function() {\n        var ids = [];\n\n        for (var i = 0; i < this.$elements.length; i++) {\n            ids.push(this.$elements.eq(i).data('id'));\n        }\n\n        return ids;\n    },\n\n    getDisabledElementIds: function() {\n        var ids = this.getSelectedElementIds();\n\n        if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n            ids.push(this.settings.sourceElementId);\n        }\n\n        if (this.settings.disabledElementIds) {\n            ids.push(...this.settings.disabledElementIds);\n        }\n\n        return ids;\n    },\n\n    onModalSelect: function(elements) {\n        if (this.settings.limit) {\n            // Cut off any excess elements\n            var slotsLeft = this.settings.limit - this.$elements.length;\n\n            if (elements.length > slotsLeft) {\n                elements = elements.slice(0, slotsLeft);\n            }\n        }\n\n        this.selectElements(elements);\n        this.updateDisabledElementsInModal();\n    },\n\n    selectElements: function(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            let elementInfo = elements[i],\n                $element = this.createNewElement(elementInfo);\n\n            this.appendElement($element);\n            this.addElements($element);\n            this.animateElementIntoPlace(elementInfo.$element, $element);\n\n            // Override the element reference with the new one\n            elementInfo.$element = $element;\n        }\n\n        this.onSelectElements(elements);\n    },\n\n    createNewElement: function(elementInfo) {\n        var $element = elementInfo.$element.clone();\n\n        // Make a couple tweaks\n        Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n        $element.addClass('removable');\n        $element.prepend(`<input type=\"hidden\" name=\"${this.settings.name}${this.settings.single ? '' : '[]'}\" value=\"${elementInfo.id}\">` +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        return $element;\n    },\n\n    appendElement: function($element) {\n        $element.appendTo(this.$elementsContainer);\n    },\n\n    animateElementIntoPlace: function($modalElement, $inputElement) {\n        var origOffset = $modalElement.offset(),\n            destOffset = $inputElement.offset(),\n            $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n        $inputElement.css('visibility', 'hidden');\n\n        $helper.css({\n            position: 'absolute',\n            zIndex: 10000,\n            top: origOffset.top,\n            left: origOffset.left\n        });\n\n        var animateCss = {\n            top: destOffset.top,\n            left: destOffset.left\n        };\n\n        $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n            $helper.remove();\n            $inputElement.css('visibility', 'visible');\n        });\n    },\n\n    updateDisabledElementsInModal: function() {\n        if (this.modal.elementIndex) {\n            this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n        }\n    },\n\n    getElementById: function(id) {\n        for (var i = 0; i < this.$elements.length; i++) {\n            var $element = this.$elements.eq(i);\n\n            if ($element.data('id') == id) {\n                return $element;\n            }\n        }\n    },\n\n    onSelectElements: function(elements) {\n        this.trigger('selectElements', {elements});\n        this.settings.onSelectElements(elements);\n\n        if (window.draftEditor) {\n            window.draftEditor.checkForm();\n        }\n    },\n\n    onRemoveElements: function() {\n        this.trigger('removeElements');\n        this.settings.onRemoveElements();\n    }\n}, {\n    ADD_FX_DURATION: 200,\n    REMOVE_FX_DURATION: 200,\n\n    defaults: {\n        id: null,\n        name: null,\n        fieldId: null,\n        elementType: null,\n        sources: null,\n        criteria: {},\n        allowSelfRelations: false,\n        sourceElementId: null,\n        disabledElementIds: null,\n        viewMode: 'list',\n        single: false,\n        limit: null,\n        showSiteMenu: false,\n        modalStorageKey: null,\n        modalSettings: {},\n        onSelectElements: $.noop,\n        onRemoveElements: $.noop,\n        sortable: true,\n        selectable: true,\n        editable: true,\n        prevalidate: false,\n        editorSettings: {}\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend({\n    elementType: null,\n    elementIndex: null,\n\n    $body: null,\n    $selectBtn: null,\n    $sidebar: null,\n    $sources: null,\n    $sourceToggles: null,\n    $main: null,\n    $search: null,\n    $elements: null,\n    $tbody: null,\n    $primaryButtons: null,\n    $secondaryButtons: null,\n    $cancelBtn: null,\n    $footerSpinner: null,\n\n    init: function(elementType, settings) {\n        this.elementType = elementType;\n        this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n        // Build the modal\n        var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n            $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n            $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n        this.base($container, this.settings);\n\n        this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n        this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$primaryButtons);\n        this.$selectBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn disabled submit',\n            text: Craft.t('app', 'Select'),\n        }).appendTo(this.$primaryButtons);\n\n        this.$body = $body;\n\n        this.addListener(this.$cancelBtn, 'activate', 'cancel');\n        this.addListener(this.$selectBtn, 'activate', 'selectElements');\n    },\n\n    onFadeIn: function() {\n        if (!this.elementIndex) {\n            this._createElementIndex();\n        } else {\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.elementIndex.$search.trigger('focus');\n            }\n        }\n\n        this.base();\n    },\n\n    onSelectionChange: function() {\n        this.updateSelectBtnState();\n    },\n\n    updateSelectBtnState: function() {\n        if (this.$selectBtn) {\n            if (this.elementIndex.getSelectedElements().length) {\n                this.enableSelectBtn();\n            } else {\n                this.disableSelectBtn();\n            }\n        }\n    },\n\n    enableSelectBtn: function() {\n        this.$selectBtn.removeClass('disabled');\n    },\n\n    disableSelectBtn: function() {\n        this.$selectBtn.addClass('disabled');\n    },\n\n    enableCancelBtn: function() {\n        this.$cancelBtn.removeClass('disabled');\n    },\n\n    disableCancelBtn: function() {\n        this.$cancelBtn.addClass('disabled');\n    },\n\n    showFooterSpinner: function() {\n        this.$footerSpinner.removeClass('hidden');\n    },\n\n    hideFooterSpinner: function() {\n        this.$footerSpinner.addClass('hidden');\n    },\n\n    cancel: function() {\n        if (!this.$cancelBtn.hasClass('disabled')) {\n            this.hide();\n        }\n    },\n\n    selectElements: function() {\n        if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n            // TODO: This code shouldn't know about views' elementSelect objects\n            this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                elementInfo = this.getElementInfo($selectedElements);\n\n            this.onSelect(elementInfo);\n\n            if (this.settings.disableElementsOnSelect) {\n                this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n            }\n\n            if (this.settings.hideOnSelect) {\n                this.hide();\n            }\n        }\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $element = $($selectedElements[i]);\n            var elementInfo = Craft.getElementInfo($element);\n\n            info.push(elementInfo);\n        }\n\n        return info;\n    },\n\n    show: function() {\n        this.updateSelectBtnState();\n        this.base();\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo);\n    },\n\n    disable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.enable();\n        }\n\n        this.base();\n    },\n\n    _createElementIndex: function() {\n        // Get the modal body HTML based on the settings\n        var data = {\n            context: 'modal',\n            elementType: this.elementType,\n            sources: this.settings.sources\n        };\n\n        if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n            data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n        }\n\n        Craft.postActionRequest('elements/get-modal-body', data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.$body.html(response.html);\n\n                if (this.$body.has('.sidebar:not(.hidden)').length) {\n                    this.$body.addClass('has-sidebar');\n                }\n\n                // Initialize the element index\n                this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                    context: 'modal',\n                    modal: this,\n                    storageKey: this.settings.storageKey,\n                    criteria: this.settings.criteria,\n                    disabledElementIds: this.settings.disabledElementIds,\n                    selectable: true,\n                    multiSelect: this.settings.multiSelect,\n                    buttonContainer: this.$secondaryButtons,\n                    onSelectionChange: this.onSelectionChange.bind(this),\n                    hideSidebar: this.settings.hideSidebar,\n                    defaultSiteId: this.settings.defaultSiteId,\n                    defaultSource: this.settings.defaultSource\n                });\n\n                // Double-clicking or double-tapping should select the elements\n                this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                    // Make sure the touch targets are the same\n                    // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                    if (touchData.firstTap.target === touchData.secondTap.target) {\n                        this.selectElements();\n                    }\n                });\n            }\n        });\n    }\n}, {\n    defaults: {\n        resizable: true,\n        storageKey: null,\n        sources: null,\n        criteria: null,\n        multiSelect: false,\n        showSiteMenu: null,\n        disabledElementIds: [],\n        disableElementsOnSelect: false,\n        hideOnSelect: true,\n        onCancel: $.noop,\n        onSelect: $.noop,\n        hideSidebar: false,\n        defaultSiteId: null,\n        defaultSource: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend({\n    $source: null,\n    $target: null,\n    $form: null,\n    settings: null,\n\n    listening: null,\n    timeout: null,\n\n    init: function(source, target, settings) {\n        this.$source = $(source);\n        this.$target = $(target);\n        this.$form = this.$source.closest('form');\n\n        this.setSettings(settings);\n\n        this.startListening();\n    },\n\n    setNewSource: function(source) {\n        var listening = this.listening;\n        this.stopListening();\n\n        this.$source = $(source);\n\n        if (listening) {\n            this.startListening();\n        }\n    },\n\n    startListening: function() {\n        if (this.listening) {\n            return;\n        }\n\n        this.listening = true;\n\n        this.addListener(this.$source, 'input', 'onSourceTextChange');\n        this.addListener(this.$target, 'input', 'onTargetTextChange');\n        this.addListener(this.$form, 'submit', 'onFormSubmit');\n    },\n\n    stopListening: function() {\n        if (!this.listening) {\n            return;\n        }\n\n        this.listening = false;\n\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.removeAllListeners(this.$source);\n        this.removeAllListeners(this.$target);\n        this.removeAllListeners(this.$form);\n    },\n\n    onSourceTextChange: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout(this.updateTarget.bind(this), 250);\n    },\n\n    onTargetTextChange: function() {\n        if (this.$target.get(0) === document.activeElement) {\n            this.stopListening();\n        }\n    },\n\n    onFormSubmit: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.updateTarget();\n    },\n\n    updateTarget: function() {\n        if (!this.$target.is(':visible')) {\n            return;\n        }\n\n        var sourceVal = this.$source.val();\n\n        if (typeof sourceVal === 'undefined') {\n            // The source input may not exist anymore\n            return;\n        }\n\n        var targetVal = this.generateTargetValue(sourceVal);\n\n        this.$target.val(targetVal);\n\n        for (let i = 0; i < this.$target.length; i++) {\n            this.$target[i].dispatchEvent(new InputEvent('input', {\n                inputType: 'insertText',\n            }));\n            this.$target[i].dispatchEvent(new Event('input'));\n        }\n\n        // If the target already has focus, select its whole value to mimic\n        // the behavior if the value had already been generated and they just tabbed in\n        if (this.$target.is(':focus')) {\n            Craft.selectFullValue(this.$target);\n        }\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return sourceVal;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Tab manager\n */\nCraft.Tabs = Garnish.Base.extend({\n    $container: null,\n    $ul: null,\n    $menuBtn: null,\n    $tabs: null,\n    $selectedTab: null,\n    $focusableTab: null,\n    menu: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$ul = this.$container.find('> ul:first');\n        this.$tabs = this.$ul.find('> li > a');\n        this.$selectedTab = this.$tabs.filter('.sel:first');\n        this.$focusableTab = this.$tabs.filter('[tabindex=0]:first');\n        this.$menuBtn = this.$container.find('> .menubtn:first').menubtn();\n        this.menu = this.$menuBtn.data('menubtn').menu;\n\n        // Is there already a tab manager?\n        if (this.$container.data('tabs')) {\n            Garnish.log('Double-instantiating a tab manager on an element');\n            this.$container.data('tabs').destroy();\n        }\n\n        this.$container.data('tabs', this);\n\n        for (let i = 0; i < this.$tabs.length; i++) {\n            const $a = this.$tabs.eq(i);\n\n            // Does it link to an anchor?\n            const href = $a.attr('href');\n            if (href && href.charAt(0) === '#') {\n                this.addListener($a, 'keydown', ev => {\n                    if ([Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    }\n                });\n                this.addListener($a, 'click', ev => {\n                    ev.preventDefault();\n                    const $a = $(ev.currentTarget);\n                    this.selectTab(ev.currentTarget);\n                    this.makeTabFocusable(ev.currentTarget);\n                });\n\n                if (href.substr(1) === window.LOCATION_HASH) {\n                    $initialTab = $a;\n                }\n            }\n\n            this.addListener($a, 'keydown', ev => {\n                if (\n                    [Garnish.LEFT_KEY, Garnish.RIGHT_KEY].includes(ev.keyCode) &&\n                    $.contains(this.$ul[0], ev.currentTarget)\n                ) {\n                    let $tab;\n                    if (ev.keyCode === (Craft.orientation === 'ltr' ? Garnish.LEFT_KEY : Garnish.RIGHT_KEY)) {\n                        $tab = $(ev.currentTarget).parent().prev('li').children('a');\n                    } else {\n                        $tab = $(ev.currentTarget).parent().next('li').children('a');\n                    }\n                    if ($tab.length) {\n                        ev.preventDefault();\n                        this.makeTabFocusable($tab);\n                        $tab.focus();\n                        this.scrollToTab($tab);\n                    }\n                }\n            });\n        }\n\n        this.updateMenuBtn();\n\n        Garnish.$win.on('resize', () => {\n            this.updateMenuBtn();\n        });\n\n        // Prevent menu options from updating the URL\n        this.menu.$options.on('click', ev => {\n            const $option = $(ev.currentTarget);\n            if ($option.attr('href').charAt(0) === '#') {\n                ev.preventDefault();\n            }\n        });\n\n        this.menu.on('optionselect', ev => {\n            this.selectTab($(ev.selectedOption).data('id'))\n        });\n    },\n\n    selectTab: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$selectedTab[0]) {\n            return;\n        }\n\n        this.deselectTab();\n        this.$selectedTab = $tab.addClass('sel');\n        this.makeTabFocusable($tab);\n        this.scrollToTab($tab);\n\n        this.menu.$options.removeClass('sel');\n        this.menu.$options.filter(`[data-id=\"${$tab.data('id')}\"]`).addClass('sel');\n\n        this.trigger('selectTab', {\n            $tab: $tab,\n        });\n    },\n\n    deselectTab: function() {\n        const $tab = this.$selectedTab.removeClass('sel');\n        this.$selectedTab = null;\n\n        this.trigger('deselectTab', {\n            $tab: $tab,\n        });\n    },\n\n    makeTabFocusable: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$focusableTab[0]) {\n            return;\n        }\n\n        this.$focusableTab.attr('tabindex', '-1');\n        this.$focusableTab = $tab.attr('tabindex', '0');\n    },\n\n    scrollToTab: function(tab) {\n        const $tab = this._getTab(tab);\n        const scrollLeft = this.$ul.scrollLeft();\n        const tabOffset = $tab.offset().left;\n        const elemScrollOffset = tabOffset - this.$ul.offset().left;\n        let targetScrollLeft = false;\n\n        // Is the tab hidden on the left?\n        if (elemScrollOffset < 0) {\n            targetScrollLeft = scrollLeft + elemScrollOffset - 24;\n        } else {\n            const tabWidth = $tab.outerWidth();\n            const ulWidth = this.$ul.prop('clientWidth');\n\n            // Is it hidden to the right?\n            if (elemScrollOffset + tabWidth > ulWidth) {\n                targetScrollLeft = scrollLeft + (elemScrollOffset - (ulWidth - tabWidth)) + 24;\n            }\n        }\n\n        if (targetScrollLeft !== false) {\n            this.$ul.scrollLeft(targetScrollLeft);\n        }\n    },\n\n    updateMenuBtn: function() {\n        if (Math.floor(this.$ul.prop('scrollWidth') - 48) > this.$container.prop('clientWidth')) {\n            this.$ul.addClass('scrollable');\n            this.$menuBtn.removeClass('hidden');\n        } else {\n            this.$ul.removeClass('scrollable');\n            this.$menuBtn.addClass('hidden');\n        }\n    },\n\n    _getTab: function(tab) {\n        if (tab instanceof jQuery) {\n            return tab;\n        }\n\n        if (tab instanceof HTMLElement) {\n            return $(tab);\n        }\n\n        if (typeof tab !== 'string') {\n            throw 'Invalid tab ID';\n        }\n\n        const $tab = this.$tabs.filter(`[data-id=\"${tab}\"]`);\n\n        if (!$tab.length) {\n            throw `Invalid tab ID: ${tab}`;\n        }\n\n        return $tab;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend({\n    settings: null,\n    totalItems: null,\n    sorter: null,\n\n    $noItems: null,\n    $table: null,\n    $tbody: null,\n    $deleteBtns: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.AdminTable.defaults);\n\n        if (!this.settings.allowDeleteAll) {\n            this.settings.minItems = 1;\n        }\n\n        this.$noItems = $(this.settings.noItemsSelector);\n        this.$table = $(this.settings.tableSelector);\n        this.$tbody = this.$table.children('tbody');\n        this.totalItems = this.$tbody.children().length;\n\n        if (this.settings.sortable) {\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                onSortChange: this.reorderItems.bind(this),\n            });\n        }\n\n        this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n        this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n        this.updateUI();\n    },\n\n    addRow: function(row) {\n        if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(row).appendTo(this.$tbody),\n            $deleteBtn = $row.find('.delete');\n\n        if (this.settings.sortable) {\n            this.sorter.addItems($row);\n        }\n\n        this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n        this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n        this.totalItems++;\n\n        this.updateUI();\n    },\n\n    reorderItems: function() {\n        if (!this.settings.sortable) {\n            return;\n        }\n\n        // Get the new field order\n        var ids = [];\n\n        for (var i = 0; i < this.sorter.$items.length; i++) {\n            var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n            ids.push(id);\n        }\n\n        // Send it to the server\n        var data = {\n            ids: JSON.stringify(ids)\n        };\n\n        Craft.postActionRequest(this.settings.reorderAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.onReorderItems(ids);\n                    Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                } else {\n                    Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                }\n            }\n        });\n    },\n\n    handleDeleteBtnClick: function(event) {\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(event.target).closest('tr');\n\n        if (this.confirmDeleteItem($row)) {\n            this.deleteItem($row);\n        }\n    },\n\n    confirmDeleteItem: function($row) {\n        var name = this.getItemName($row);\n        return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name}));\n    },\n\n    deleteItem: function($row) {\n        var data = {\n            id: this.getItemId($row)\n        };\n\n        Craft.postActionRequest(this.settings.deleteAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.handleDeleteItemResponse(response, $row);\n            }\n        });\n    },\n\n    handleDeleteItemResponse: function(response, $row) {\n        var id = this.getItemId($row),\n            name = this.getItemName($row);\n\n        if (response.success) {\n            if (this.sorter) {\n                this.sorter.removeItems($row);\n            }\n\n            $row.remove();\n            this.totalItems--;\n            this.updateUI();\n            this.onDeleteItem(id);\n\n            Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name}));\n        } else {\n            Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name}));\n        }\n    },\n\n    onReorderItems: function(ids) {\n        this.settings.onReorderItems(ids);\n    },\n\n    onDeleteItem: function(id) {\n        this.settings.onDeleteItem(id);\n    },\n\n    getItemId: function($row) {\n        return $row.attr(this.settings.idAttribute);\n    },\n\n    getItemName: function($row) {\n        return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n    },\n\n    updateUI: function() {\n        // Show the \"No Whatever Exists\" message if there aren't any\n        if (this.totalItems === 0) {\n            this.$table.hide();\n            this.$noItems.removeClass('hidden');\n        } else {\n            this.$table.show();\n            this.$noItems.addClass('hidden');\n        }\n\n        // Disable the sort buttons if there's only one row\n        if (this.settings.sortable) {\n            var $moveButtons = this.$table.find('.move');\n\n            if (this.totalItems === 1) {\n                $moveButtons.addClass('disabled');\n            } else {\n                $moveButtons.removeClass('disabled');\n            }\n        }\n\n        // Disable the delete buttons if we've reached the minimum items\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            this.$deleteBtns.addClass('disabled');\n        } else {\n            this.$deleteBtns.removeClass('disabled');\n        }\n\n        // Hide the New Whatever button if we've reached the maximum items\n        if (this.settings.newItemBtnSelector) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                $(this.settings.newItemBtnSelector).addClass('hidden');\n            } else {\n                $(this.settings.newItemBtnSelector).removeClass('hidden');\n            }\n        }\n    }\n}, {\n    defaults: {\n        tableSelector: null,\n        noItemsSelector: null,\n        newItemBtnSelector: null,\n        idAttribute: 'data-id',\n        nameAttribute: 'data-name',\n        sortable: false,\n        allowDeleteAll: true,\n        minItems: 0,\n        maxItems: null,\n        reorderAction: null,\n        deleteAction: null,\n        reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n        reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n        confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n        deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n        deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n        onReorderItems: $.noop,\n        onDeleteItem: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend({\n    $filenameInput: null,\n\n    originalBasename: null,\n    originalExtension: null,\n    reloadIndex: false,\n\n    init: function(element, settings) {\n        this.on('updateForm', () => {\n            this.addListener(this.$sidebar.find('.preview-thumb-container .edit-btn'), 'click', 'showImageEditor');\n            this.addListener(this.$sidebar.find('.preview-thumb-container .preview-btn'), 'click', 'showImagePreview');\n\n            this.$filenameInput = this.$sidebar.find('.filename');\n            this.addListener(this.$filenameInput, 'focus', 'selectFilename');\n        });\n\n        this.on('closeSlideout', () => {\n            if (this.reloadIndex) {\n                if (this.settings.elementIndex) {\n                    this.settings.elementIndex.updateElements();\n                } else if (this.settings.input) {\n                    this.settings.input.refreshThumbnail(this.$element.data('id'));\n                }\n            }\n        });\n\n        this.base(element, settings);\n\n        this.settings.validators.push(() => this.validateExtension());\n    },\n\n    showImageEditor: function() {\n        new Craft.AssetImageEditor(this.$element.data('id'), {\n            onSave: () => {\n                this.reloadIndex = true;\n                this.load();\n            },\n        });\n    },\n\n    showImagePreview: function() {\n        var settings = {};\n\n        if (this.$element.data('image-width')) {\n            settings.startingWidth = this.$element.data('image-width');\n            settings.startingHeight = this.$element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal(this.$element.data('id'), null, settings);\n    },\n\n    selectFilename: function() {\n        if (typeof this.$filenameInput[0].selectionStart === 'undefined') {\n            return;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (this.originalBasename === null) {\n            this.originalBasename = basename;\n            this.originalExtension = extension;\n        }\n\n        this.$filenameInput[0].selectionStart = 0;\n        this.$filenameInput[0].selectionEnd = basename.length;\n\n        // Prevent the selection from changing by the mouseup event\n        this.$filenameInput.one('mouseup.keepselection', ev => {\n            ev.preventDefault();\n        });\n        setTimeout(() => {\n            this.$filenameInput.off('mouseup.keepselection');\n        }, 500);\n    },\n\n    validateExtension: function() {\n        if (this.originalBasename === null) {\n            return true;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (extension === this.originalExtension) {\n            return true;\n        }\n\n        // No extension?\n        if (!extension) {\n            // If filename changed as well, assume removal of extension a mistake\n            if (this.originalFilename !== basename) {\n                this.$filenameInput.val(`${Craft.rtrim(basename, '.')}.${this.originalExtension}`);\n                return true;\n            }\n\n            // If filename hasn't changed, make sure they want to remove extension\n            return confirm(Craft.t('app', 'Are you sure you want to remove the extension “.{ext}”?', {\n                ext: this.originalExtension,\n            }));\n        }\n\n        // If the extension has changed, make sure it's intentional\n        return confirm(Craft.t('app', 'Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?', {\n            oldExt: this.originalExtension,\n            newExt: extension\n        }));\n    },\n\n    _parseFilename: function() {\n        const parts = this.$filenameInput.val().split('.');\n        const extension = parts.length > 1 ? parts.pop() : null;\n        const basename = parts.join('.');\n        return {basename, extension};\n    },\n});\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend({\n    // jQuery objects\n    $body: null,\n    $footer: null,\n    $imageTools: null,\n    $buttons: null,\n    $cancelBtn: null,\n    $replaceBtn: null,\n    $saveBtn: null,\n    $editorContainer: null,\n    $straighten: null,\n    $croppingCanvas: null,\n    $spinnerCanvas: null,\n\n    // FabricJS objects\n    canvas: null,\n    image: null,\n    viewport: null,\n    focalPoint: null,\n    grid: null,\n    croppingCanvas: null,\n    clipper: null,\n    croppingRectangle: null,\n    cropperHandles: null,\n    cropperGrid: null,\n    croppingShade: null,\n    croppingAreaText: null,\n\n    // Image state attributes\n    imageStraightenAngle: 0,\n    viewportRotation: 0,\n    originalWidth: 0,\n    originalHeight: 0,\n    imageVerticeCoords: null,\n    zoomRatio: 1,\n\n    // Editor state attributes\n    animationInProgress: false,\n    currentView: '',\n    assetId: null,\n    cacheBust: null,\n    draggingCropper: false,\n    scalingCropper: false,\n    draggingFocal: false,\n    previousMouseX: 0,\n    previousMouseY: 0,\n    shiftKeyHeld: false,\n    editorHeight: 0,\n    editorWidth: 0,\n    cropperState: false,\n    scaleFactor: 1,\n    flipData: {},\n    focalPointState: false,\n    spinnerInterval: null,\n    maxImageSize: null,\n    lastLoadedDimensions: null,\n    imageIsLoading: false,\n    mouseMoveEvent: null,\n    croppingConstraint: false,\n    constraintOrientation: 'landscape',\n    showingCustomConstraint: false,\n\n    // Rendering proxy functions\n    renderImage: null,\n    renderCropper: null,\n\n    init: function(assetId, settings) {\n        this.cacheBust = Date.now();\n\n        this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n        if (this.settings.allowDegreeFractions === null) {\n            this.settings.allowDegreeFractions = Craft.isImagick;\n        }\n\n        this.assetId = assetId;\n        this.flipData = {x: 0, y: 0};\n\n        // Build the modal\n        this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n        this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n        this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n        this.base(this.$container, this.settings);\n\n        this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn cancel',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$buttons);\n        this.$replaceBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit save replace',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$buttons);\n\n        if (this.settings.allowSavingAsNew) {\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save copy',\n                text: Craft.t('app', 'Save as a new asset'),\n            }).appendTo(this.$buttons);\n            this.addListener(this.$saveBtn, 'activate', this.saveImage);\n        }\n\n        this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n        this.addListener(this.$cancelBtn, 'activate', this.hide);\n        this.removeListener(this.$shade, 'click');\n\n        this.maxImageSize = this.getMaxImageSize();\n\n        Craft.postActionRequest('assets/image-editor', {assetId}, this.loadEditor.bind(this));\n    },\n\n    /**\n     * Get the max image size that is viewable in the editor currently\n     */\n    getMaxImageSize: function() {\n        var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n        var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n        return Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n    },\n\n    /**\n     * Load the editor markup and start loading components and the image.\n     *\n     * @param data\n     */\n    loadEditor: function(data) {\n        if (!data.html) {\n            alert(Craft.t('app', 'Could not load the image editor.'));\n        }\n\n        this.$body.html(data.html);\n        this.$tabs = $('.tabs li', this.$body);\n        this.$viewsContainer = $('.views', this.$body);\n        this.$views = $('> div', this.$viewsContainer);\n        this.$imageTools = $('.image-container .image-tools', this.$body);\n        this.$editorContainer = $('.image-container .image', this.$body);\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this._showSpinner();\n\n        this.updateSizeAndPosition();\n\n        // Load the canvas on which we'll host our image and set up the proxy render function\n        this.canvas = new fabric.StaticCanvas('image-canvas');\n\n        // Set up the cropping canvas jquery element for tracking all the nice events\n        this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n        this.$croppingCanvas.width(this.editorWidth);\n        this.$croppingCanvas.height(this.editorHeight);\n\n        this.canvas.enableRetinaScaling = true;\n        this.renderImage = () => {\n            Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n        };\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        // Load image and set up the initial properties\n        fabric.Image.fromURL(imageUrl, imageObject => {\n            this.image = imageObject;\n            this.image.set({\n                originX: 'center',\n                originY: 'center',\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n            this.canvas.add(this.image);\n\n            this.originalHeight = this.image.getHeight();\n            this.originalWidth = this.image.getWidth();\n            this.zoomRatio = 1;\n\n            this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n            // Set up the image bounding box, viewport and position everything\n            this._setFittedImageVerticeCoordinates();\n            this._repositionEditorElements();\n\n            // Set up the focal point\n            var focalState = {\n                imageDimensions: this.getScaledImageDimensions(),\n                offsetX: 0,\n                offsetY: 0\n            };\n\n            var focal = false;\n            if (data.focalPoint) {\n                // Transform the focal point coordinates from relative to absolute\n                var focalData = data.focalPoint;\n\n                // Resolve for the current image dimensions.\n                var adjustedX = focalState.imageDimensions.width * focalData.x;\n                var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                focal = true;\n            }\n\n            this.storeFocalPointState(focalState);\n\n            if (focal) {\n                this._createFocalPoint();\n            }\n\n            this._createViewport();\n            this.storeCropperState();\n\n            // Add listeners to buttons\n            this._addControlListeners();\n\n            // Add mouse event listeners\n            this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n            this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n            this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n            this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n            this._hideSpinner();\n\n            // Render it, finally\n            this.renderImage();\n\n            // Make sure verything gets fired for the first tab\n            this.$tabs.first().trigger('click');\n        });\n    },\n\n    /**\n     * Reload the image to better fit the current available image editor viewport.\n     */\n    _reloadImage: function() {\n        if (this.imageIsLoading) {\n            return;\n        }\n\n        this.imageIsLoading = true;\n        this.maxImageSize = this.getMaxImageSize();\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        this.image.setSrc(imageUrl, imageObject => {\n            this.originalHeight = imageObject.getHeight();\n            this.originalWidth = imageObject.getWidth();\n            this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n            this.updateSizeAndPosition();\n            this.renderImage();\n            this.imageIsLoading = false;\n        });\n    },\n\n    /**\n     * Update the modal size and position on browser resize\n     */\n    updateSizeAndPosition: function() {\n        if (!this.$container) {\n            return;\n        }\n\n        // Fullscreen modal\n        var innerWidth = window.innerWidth;\n        var innerHeight = window.innerHeight;\n\n        this.$container.css({\n            'width': innerWidth,\n            'min-width': innerWidth,\n            'left': 0,\n\n            'height': innerHeight,\n            'min-height': innerHeight,\n            'top': 0\n        });\n\n        this.$body.css({\n            'height': innerHeight - 62\n        });\n\n        if (innerWidth < innerHeight) {\n            this.$container.addClass('vertical');\n        } else {\n            this.$container.removeClass('vertical');\n        }\n\n        if (this.$spinnerCanvas) {\n            this.$spinnerCanvas.css({\n                left: ((this.$spinnerCanvas.parent().width() / 2) - (this.$spinnerCanvas.width() / 2)) + 'px',\n                top: ((this.$spinnerCanvas.parent().height() / 2) - (this.$spinnerCanvas.height() / 2)) + 'px'\n            });\n        }\n\n        // If image is already loaded, make sure it looks pretty.\n        if (this.$editorContainer && this.image) {\n            this._repositionEditorElements();\n        }\n    },\n\n    /**\n     * Reposition the editor elements to accurately reflect the editor state with current dimensions\n     */\n    _repositionEditorElements: function() {\n        // Remember what the dimensions were before the resize took place\n        var previousEditorDimensions = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this.canvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        var currentScaledDimensions = this.getScaledImageDimensions();\n\n        // If we're cropping now, we have to reposition the cropper correctly in case\n        // the area for image changes, forcing the image size to change as well.\n        if (this.currentView === 'crop') {\n            this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n            var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            this._setFittedImageVerticeCoordinates();\n            this._repositionCropper(previouslyOccupiedArea);\n        } else {\n            // Otherwise just recalculate the image zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n        }\n\n        // Reposition the image relatively to the previous editor dimensions.\n        this._repositionImage(previousEditorDimensions);\n        this._repositionViewport();\n        this._repositionFocalPoint(previousEditorDimensions);\n        this._zoomImage();\n\n        this.renderImage();\n\n        if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n            this._reloadImage();\n        }\n    },\n\n    /**\n     * Reposition image based on how the editor dimensions have changed.\n     * This ensures keeping the image center offset, if there is any.\n     *\n     * @param previousEditorDimensions\n     */\n    _repositionImage: function(previousEditorDimensions) {\n        this.image.set({\n            left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n            top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n        });\n    },\n\n    /**\n     * Create the viewport for image editor.\n     */\n    _createViewport: function() {\n        this.viewport = new fabric.Rect({\n            width: this.image.width,\n            height: this.image.height,\n            fill: 'rgba(127,0,0,1)',\n            originX: 'center',\n            originY: 'center',\n            globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n            left: this.image.left,\n            top: this.image.top\n        });\n        this.canvas.add(this.viewport);\n        this.renderImage();\n    },\n\n    /**\n     * Create the focal point.\n     */\n    _createFocalPoint: function() {\n        var focalPointState = this.focalPointState;\n        var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n        var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n        var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n        // Adjust by image margins\n        focalX += this.image.left;\n        focalY += this.image.top;\n\n        var deltaX = 0;\n        var deltaY = 0;\n\n        // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n        if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n            if (this.currentView !== 'crop') {\n                deltaX = this.viewport.left - this.image.left;\n                deltaY = this.viewport.top - this.image.top;\n            } else {\n                // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                deltaX = this.clipper.left - this.image.left;\n                deltaY = this.clipper.top - this.image.top;\n            }\n\n            // Bump focal to middle of viewport\n            focalX += deltaX;\n            focalY += deltaY;\n\n            // Reflect changes in saved state\n            focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n        }\n\n        this.focalPoint = new fabric.Group([\n            new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n            new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n        ], {\n            originX: 'center',\n            originY: 'center',\n            left: focalX,\n            top: focalY\n        });\n\n        this.storeFocalPointState(focalPointState);\n        this.canvas.add(this.focalPoint);\n    },\n\n    /**\n     * Toggle focal point\n     */\n    toggleFocalPoint: function() {\n        if (!this.focalPoint) {\n            this._createFocalPoint();\n        } else {\n            this.canvas.remove(this.focalPoint);\n            this.focalPoint = null;\n        }\n\n        this.renderImage();\n    },\n\n    /**\n     * Reposition the viewport to handle editor resizing.\n     */\n    _repositionViewport: function() {\n        if (this.viewport) {\n            var dimensions = {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            // If we're cropping, nothing exciting happens for the viewport\n            if (this.currentView === 'crop') {\n                dimensions.width = this.editorWidth;\n                dimensions.height = this.editorHeight;\n            } else {\n                // If this is the first initial reposition, no cropper state yet\n                if (this.cropperState) {\n                    // Recall the state\n                    var state = this.cropperState;\n\n                    var scaledImageDimensions = this.getScaledImageDimensions();\n                    // Make sure we have the correct current image size\n                    var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                    // Set the viewport dimensions\n                    dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                    dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                    // Adjust the image position to show the correct part of the image in the viewport\n                    this.image.set({\n                        left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                        top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                    });\n                } else {\n                    $.extend(dimensions, this.getScaledImageDimensions());\n                }\n            }\n            this.viewport.set(dimensions);\n        }\n    },\n\n    _repositionFocalPoint: function(previousEditorDimensions) {\n        if (this.focalPoint) {\n            var offsetX = this.focalPoint.left - this.editorWidth / 2;\n            var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n            var currentWidth = this.image.width;\n            var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n            var ratio = newWidth / currentWidth / this.scaleFactor;\n\n            offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n            offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n            offsetX *= ratio;\n            offsetY *= ratio;\n\n            this.focalPoint.set({\n                left: this.editorWidth / 2 + offsetX,\n                top: this.editorHeight / 2 + offsetY\n            });\n        }\n    },\n\n    /**\n     * Return true if the image orientation has changed\n     */\n    hasOrientationChanged: function() {\n        return this.viewportRotation % 180 !== 0;\n    },\n\n    /**\n     * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n     */\n    getScaledImageDimensions: function() {\n        if (typeof this.getScaledImageDimensions._ === 'undefined') {\n            this.getScaledImageDimensions._ = {};\n        }\n\n        this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n        this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n        this.getScaledImageDimensions._.dimensions = {};\n        if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n            this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n            this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n        } else {\n            this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n            this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n        }\n\n        return this.getScaledImageDimensions._.dimensions;\n    },\n\n    /**\n     * Set the image dimensions to reflect the current zoom ratio.\n     */\n    _zoomImage: function() {\n        if (typeof this._zoomImage._ === 'undefined') {\n            this._zoomImage._ = {};\n        }\n\n        this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n        this.image.set({\n            width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n            height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n        });\n    },\n\n    /**\n     * Set up listeners for the controls.\n     */\n    _addControlListeners: function() {\n        // Tabs\n        this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n        // Focal point\n        this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n        // Rotate controls\n        this.addListener($('.rotate-left'), 'click', function() {\n            this.rotateImage(-90);\n        });\n        this.addListener($('.rotate-right'), 'click', function() {\n            this.rotateImage(90);\n        });\n        this.addListener($('.flip-vertical'), 'click', function() {\n            this.flipImage('y');\n        });\n        this.addListener($('.flip-horizontal'), 'click', function() {\n            this.flipImage('x');\n        });\n\n        // Straighten slider\n        this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n            onStart: () => {\n                this._showGrid();\n            },\n            onChange: slider => {\n                this.straighten(slider);\n            },\n            onEnd: () => {\n                this._hideGrid();\n                this._cleanupFocalPointAfterStraighten();\n            },\n        });\n\n        // Cropper scale modifier key\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = true;\n            }\n        });\n        this.addListener(Garnish.$doc, 'keyup', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = false;\n            }\n        });\n\n        this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n        this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n        this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n    },\n\n    /**\n     * Handle a constraint button click.\n     *\n     * @param ev\n     */\n    _handleConstraintClick: function(ev) {\n        var constraint = $(ev.currentTarget).data('constraint');\n        var $target = $(ev.currentTarget);\n        $target.siblings().removeClass('active');\n        $target.addClass('active');\n\n        if (constraint == 'custom') {\n            this._showCustomConstraint();\n            this._applyCustomConstraint();\n            return;\n        }\n\n        this._hideCustomConstraint();\n\n        this.setCroppingConstraint(constraint);\n        this.enforceCroppingConstraint();\n    },\n\n    /**\n     * Handle an orientation switch click.\n     *\n     * @param ev\n     */\n    _handleOrientationClick: function(ev) {\n        if (ev.currentTarget.value === this.constraintOrientation) {\n            return;\n        }\n        this.constraintOrientation = ev.currentTarget.value;\n\n        var $constraints = $('.constraint.flip', this.$container);\n\n        for (var i = 0; i < $constraints.length; i++) {\n            var $constraint = $($constraints[i]);\n            $constraint.data('constraint', 1 / $constraint.data('constraint'));\n            $constraint.html($constraint.html().split(':').reverse().join(':'));\n        }\n\n        $constraints.filter('.active').click();\n    },\n\n    /**\n     * Apply the custom ratio set in the inputs\n     */\n    _applyCustomConstraint: function() {\n        var constraint = this._getCustomConstraint();\n\n        if (constraint.w > 0 && constraint.h > 0) {\n            this.setCroppingConstraint(constraint.w / constraint.h);\n            this.enforceCroppingConstraint();\n        }\n    },\n\n    /**\n     * Get the custom constraint.\n     *\n     * @returns {{w: *, h: *}}\n     */\n    _getCustomConstraint: function() {\n        var w = parseFloat($('.custom-constraint-w').val());\n        var h = parseFloat($('.custom-constraint-h').val());\n        return {\n            w: isNaN(w) ? 0 : w,\n            h: isNaN(h) ? 0 : h,\n        }\n    },\n\n    /**\n     * Set the custom constraint.\n     *\n     * @param w\n     * @param h\n     */\n    _setCustomConstraint: function(w, h) {\n        $('.custom-constraint-w').val(parseFloat(w));\n        $('.custom-constraint-h').val(parseFloat(h));\n    },\n\n    /**\n     * Hide the custom constraint inputs.\n     */\n    _hideCustomConstraint: function() {\n        this.showingCustomConstraint = false;\n        $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n        $('.orientation', this.$container).removeClass('hidden');\n    },\n\n    /**\n     * Show the custom constraint inputs.\n     */\n    _showCustomConstraint: function() {\n        if (this.showingCustomConstraint) {\n            return;\n        }\n\n        this.showingCustomConstraint = true;\n        $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n        $('.orientation', this.$container).addClass('hidden');\n    },\n\n    /**\n     * Handle tab click.\n     *\n     * @param ev\n     */\n    _handleTabClick: function(ev) {\n        if (!this.animationInProgress) {\n            var $tab = $(ev.currentTarget);\n            var view = $tab.data('view');\n            this.$tabs.removeClass('selected');\n            $tab.addClass('selected');\n            this.showView(view);\n        }\n    },\n\n    /**\n     * Show a view.\n     *\n     * @param view\n     */\n    showView: function(view) {\n        if (this.currentView === view) {\n            return;\n        }\n\n        this.$views.addClass('hidden');\n        var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n        $view.removeClass('hidden');\n\n        if (view === 'rotate') {\n            this.enableSlider();\n        } else {\n            this.disableSlider();\n        }\n\n        // Now that most likely our editor dimensions have changed, time to reposition stuff\n        this.updateSizeAndPosition();\n\n        // See if we have to enable or disable crop mode as we transition between tabs\n        if (this.currentView === 'crop' && view !== 'crop') {\n            this.disableCropMode();\n        } else if (this.currentView !== 'crop' && view === 'crop') {\n            this.enableCropMode();\n        }\n\n        // Mark the current view\n        this.currentView = view;\n    },\n\n    /**\n     * Store the current cropper state.\n     *\n     * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n     * as the basis for recalculating the cropper position and dimensions.\n     *\n     * @param [state]\n     */\n    storeCropperState: function(state) {\n        if (typeof this.storeCropperState._ === 'undefined') {\n            this.storeCropperState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.cropperState = state;\n        } else if (this.clipper) {\n            this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n            this.cropperState = {\n                offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        } else {\n            this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n            this.cropperState = {\n                offsetX: 0,\n                offsetY: 0,\n                height: this.storeCropperState._.dimensions.height,\n                width: this.storeCropperState._.dimensions.width,\n                imageDimensions: this.storeCropperState._.dimensions\n            };\n        }\n    },\n\n    /**\n     * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n     */\n    storeFocalPointState: function(state) {\n        if (typeof this.storeFocalPointState._ === 'undefined') {\n            this.storeFocalPointState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.focalPointState = state;\n        } else if (this.focalPoint) {\n            this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n            this.focalPointState = {\n                offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        }\n    },\n\n    /**\n     * Rotate the image along with the viewport.\n     *\n     * @param degrees\n     */\n    rotateImage: function(degrees) {\n        if (!this.animationInProgress) {\n            // We're not that kind of an establishment, sir.\n            if (degrees !== 90 && degrees !== -90) {\n                return false;\n            }\n\n            this.animationInProgress = true;\n            this.viewportRotation += degrees;\n\n            // Normalize the viewport rotation angle so it's between 0 and 359\n            this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n            var newAngle = this.image.angle + degrees;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var imageZoomRatio;\n\n            if (this.hasOrientationChanged()) {\n                imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n            } else {\n                imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n            }\n\n            // In cases when for some reason we've already zoomed in on the image,\n            // use existing zoom.\n            if (this.zoomRatio > imageZoomRatio) {\n                imageZoomRatio = this.zoomRatio;\n            }\n\n            var viewportProperties = {\n                angle: degrees === 90 ? '+=90' : '-=90'\n            };\n\n            var imageProperties = {\n                angle: newAngle,\n                width: scaledImageDimensions.width * imageZoomRatio,\n                height: scaledImageDimensions.height * imageZoomRatio\n            };\n\n            var scaleFactor = 1;\n            if (this.scaleFactor < 1) {\n                scaleFactor = 1 / this.scaleFactor;\n                this.scaleFactor = 1;\n            } else {\n                if (this.viewport.width > this.editorHeight) {\n                    scaleFactor = this.editorHeight / this.viewport.width;\n                } else if (this.viewport.height > this.editorWidth) {\n                    scaleFactor = this.editorWidth / this.viewport.height;\n                }\n                this.scaleFactor = scaleFactor;\n            }\n\n            if (scaleFactor < 1) {\n                imageProperties.width *= scaleFactor;\n                imageProperties.height *= scaleFactor;\n            }\n\n            var state = this.cropperState;\n\n            // Make sure we reposition the image as well to focus on the same image area\n            var deltaX = state.offsetX;\n            var deltaY = state.offsetY;\n            var angleInRadians = degrees * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n            var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n            imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n            state.offsetX = newDeltaX;\n            state.offsetY = newDeltaY;\n\n            var temp = state.width;\n            state.width = state.height;\n            state.height = temp;\n\n            this.storeCropperState(state);\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            }\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    // If we're zooming the image in or out, better do the same to viewport\n                    var temp = this.viewport.height * scaleFactor;\n                    this.viewport.height = this.viewport.width * scaleFactor;\n                    this.viewport.width = temp;\n                    this.viewport.set({angle: 0});\n                },\n            });\n\n            // Animate the rotation and dimension change\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                    this.image.set({angle: cleanAngle});\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        this._adjustFocalPointByAngle(degrees);\n                        this.straighten(this.straighteningInput);\n                        this.canvas.add(this.focalPoint);\n                    } else {\n                        this._resetFocalPointPosition();\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Flip an image along an axis.\n     *\n     * @param axis\n     */\n    flipImage: function(axis) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            if (this.hasOrientationChanged()) {\n                axis = axis === 'y' ? 'x' : 'y';\n            }\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            } else {\n                this._resetFocalPointPosition();\n            }\n\n            var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            this.straighteningInput.setValue(-this.imageStraightenAngle);\n            this.imageStraightenAngle = -this.imageStraightenAngle;\n            var properties = {\n                angle: this.viewportRotation + this.imageStraightenAngle\n            };\n\n            var deltaY, deltaX;\n            var cropperState = this.cropperState;\n            var focalPointState = this.focalPointState;\n\n            // Reposition the image, viewport, and stored cropper and focal point states.\n            if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                cropperState.offsetX = -cropperState.offsetX;\n                focalPointState.offsetX = -focalPointState.offsetX;\n                deltaX = this.image.left - editorCenter.x;\n                properties.left = editorCenter.x - deltaX;\n            } else {\n                cropperState.offsetY = -cropperState.offsetY;\n                focalPointState.offsetY = -focalPointState.offsetY;\n                deltaY = this.image.top - editorCenter.y;\n                properties.top = editorCenter.y - deltaY;\n            }\n\n            if (axis === 'y') {\n                properties.scaleY = this.image.scaleY * -1;\n                this.flipData.y = 1 - this.flipData.y;\n            } else {\n                properties.scaleX = this.image.scaleX * -1;\n                this.flipData.x = 1 - this.flipData.x;\n            }\n\n            this.storeCropperState(cropperState);\n            this.storeFocalPointState(focalPointState);\n\n            this.image.animate(properties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        // Well this is handy\n                        this._adjustFocalPointByAngle(0);\n                        this.canvas.add(this.focalPoint);\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Perform the straightening with input slider.\n     *\n     * @param {Craft.SlideRuleInput} slider\n     */\n    straighten: function(slider) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            var previousAngle = this.image.angle;\n\n            this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n            // Straighten the image\n            this.image.set({\n                angle: this.viewportRotation + this.imageStraightenAngle\n            });\n\n            // Set the new zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            this._zoomImage();\n\n            if (this.cropperState) {\n                this._adjustEditorElementsOnStraighten(previousAngle);\n            }\n\n            this.renderImage();\n\n            this.animationInProgress = false;\n        }\n    },\n\n    /**\n     * Adjust the cropped viewport when straightening the image to correct for\n     * bumping into edges, keeping focus on the cropped area center and to\n     * maintain the illusion that the image is being straightened relative to the viewport center.\n     *\n     * @param {integer} previousAngle integer the previous image angle before straightening\n     */\n    _adjustEditorElementsOnStraighten: function(previousAngle) {\n        var scaledImageDimensions = this.getScaledImageDimensions();\n        var angleDelta = this.image.angle - previousAngle;\n        var state = this.cropperState;\n\n        var currentZoomRatio = this.zoomRatio;\n        var adjustmentRatio = 1;\n\n        var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n        do {\n            // Get the cropper center coordinates\n            var cropperCenterX = state.offsetX;\n            var cropperCenterY = state.offsetY;\n            var angleInRadians = angleDelta * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n            newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n            sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Figure out the final image offset to keep the viewport focused where we need it\n            deltaX = newCenterX * currentZoomRatio * sizeFactor;\n            deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n            // If the image would creep in the viewport, figure out how to math around it.\n            var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n            var rectangle = {\n                width: this.viewport.width,\n                height: this.viewport.height,\n                left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n            };\n            adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n            currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n            // If we had to make adjustments, do the calculations again\n        } while (adjustmentRatio !== 1);\n\n        // Reposition the image correctly\n        this.image.set({\n            left: this.editorWidth / 2 - deltaX,\n            top: this.editorHeight / 2 - deltaY\n        });\n\n        // Finally, store the new cropper state to reflect the rotation change.\n        state.offsetX = newCenterX;\n        state.offsetY = newCenterY;\n        state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n        state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n        this.storeCropperState(state);\n\n        // Zoom the image in and we're done.\n        this.zoomRatio = currentZoomRatio;\n\n        if (this.focalPoint) {\n            this._adjustFocalPointByAngle(angleDelta);\n\n            if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 0});\n            } else {\n                this.focalPoint.set({opacity: 1});\n            }\n        } else if (angleDelta !== 0) {\n            this._resetFocalPointPosition();\n        }\n\n        this._zoomImage();\n    },\n\n    /**\n     * If focal point is active and outside of viewport after straightening, reset it.\n     */\n    _cleanupFocalPointAfterStraighten: function() {\n        if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n            this.focalPoint.set({opacity: 1});\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n            this.toggleFocalPoint();\n        }\n    },\n\n    /**\n     * Reset focal point to the middle of image.\n     */\n    _resetFocalPointPosition: function() {\n        var state = this.focalPointState;\n        state.offsetX = 0;\n        state.offsetY = 0;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n     *\n     * @param object\n     * @param containingObject\n     *\n     * @returns {boolean}\n     */\n    _isCenterInside: function(object, containingObject) {\n        return (object.left > containingObject.left - containingObject.width / 2\n            && object.top > containingObject.top - containingObject.height / 2\n            && object.left < containingObject.left + containingObject.width / 2\n            && object.top < containingObject.top + containingObject.height / 2\n        );\n    },\n\n    /**\n     * Adjust the focal point by an angle in degrees.\n     * @param angle\n     */\n    _adjustFocalPointByAngle: function(angle) {\n        var angleInRadians = angle * (Math.PI / 180);\n        var state = this.focalPointState;\n\n        var focalX = state.offsetX;\n        var focalY = state.offsetY;\n\n        // Calculate how the focal point would need to move in a circle to keep on the same spot\n        // on the image if it was rotated with zoom intact.\n        var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n        var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n        var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n        var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n        var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n        this.focalPoint.left = this.image.left + adjustedFocalX;\n        this.focalPoint.top = this.image.top + adjustedFocalY;\n\n        state.offsetX = newFocalX;\n        state.offsetY = newFocalY;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n     * If the rectangle fits, 1 will be returned.\n     *\n     * @param rectangle\n     * @param containingVertices\n     */\n    _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n        var rectangleVertices = this._getRectangleVertices(rectangle);\n        var vertex;\n\n        // Check if any of the viewport vertices end up out of bounds\n        for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n            vertex = rectangleVertices[verticeIndex];\n\n            if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                break;\n            }\n\n            vertex = false;\n        }\n\n        // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n        var adjustmentRatio;\n\n        if (!vertex) {\n            adjustmentRatio = 1;\n        } else {\n            // Find out which edge got crossed by the vertex\n            var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n            var rectangleCenter = {\n                x: rectangle.left + rectangle.width / 2,\n                y: rectangle.top + rectangle.height / 2\n            };\n\n            // Calculate how much further that edge needs to be.\n            // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n            var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n            var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n            // Adjust the zoom ratio\n            adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n        }\n\n        return adjustmentRatio;\n    },\n\n    /**\n     * Save the image.\n     *\n     * @param ev\n     */\n    saveImage: function(ev) {\n        var $button = $(ev.currentTarget);\n        if ($button.hasClass('disabled')) {\n            return false;\n        }\n\n        $('.btn', this.$buttons).addClass('disabled');\n        this.$buttons.append('<div class=\"spinner\"></div>');\n\n        var postData = {\n            assetId: this.assetId,\n            viewportRotation: this.viewportRotation,\n            imageRotation: this.imageStraightenAngle,\n            replace: $button.hasClass('replace') ? 1 : 0\n        };\n\n        if (this.cropperState) {\n            var cropData = {};\n\n            cropData.height = this.cropperState.height;\n            cropData.width = this.cropperState.width;\n            cropData.offsetX = this.cropperState.offsetX;\n            cropData.offsetY = this.cropperState.offsetY;\n\n            postData.imageDimensions = this.cropperState.imageDimensions;\n\n            postData.cropData = cropData;\n        } else {\n            postData.imageDimensions = this.getScaledImageDimensions();\n        }\n\n        if (this.focalPoint) {\n            postData.focalPoint = this.focalPointState;\n        }\n\n        postData.flipData = this.flipData;\n        postData.zoom = this.zoomRatio;\n\n        Craft.postActionRequest('assets/save-image', postData, data => {\n            this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n            if (data.error) {\n                alert(data.error);\n                return;\n            }\n\n            this.onSave();\n            this.hide();\n            Craft.cp.runQueue();\n        });\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToCoverRatio: function(dimensions) {\n        // Convert the angle to radians\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        // Calculate the dimensions of the scaled image using the magic of math\n        var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n        var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n        // Calculate the ratio\n        return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToFitRatio: function(dimensions) {\n        // Get the bounding box for a rotated image\n        var boundingBox = this._getImageBoundingBox(dimensions);\n\n        // Scale the bounding box to fit\n        var scale = 1;\n        if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n            var vertScale = this.editorHeight / boundingBox.height;\n            var horiScale = this.editorWidth / boundingBox.width;\n            scale = Math.min(horiScale, vertScale);\n        }\n\n        return scale;\n    },\n\n    /**\n     * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n     */\n    getCombinedZoomRatio: function(dimensions) {\n        return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n    },\n\n    /**\n     * Draw the grid.\n     *\n     * @private\n     */\n    _showGrid: function() {\n        if (!this.grid) {\n            var strokeOptions = {\n                strokeWidth: 1,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            var lineCount = 8;\n            var gridWidth = this.viewport.width;\n            var gridHeight = this.viewport.height;\n            var xStep = gridWidth / (lineCount + 1);\n            var yStep = gridHeight / (lineCount + 1);\n\n            var grid = [\n                new fabric.Rect({\n                    strokeWidth: 2,\n                    stroke: 'rgba(255,255,255,1)',\n                    originX: 'center',\n                    originY: 'center',\n                    width: gridWidth,\n                    height: gridHeight,\n                    left: gridWidth / 2,\n                    top: gridHeight / 2,\n                    fill: 'rgba(255,255,255,0)'\n                })\n            ];\n\n            var i;\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n            }\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n            }\n\n            this.grid = new fabric.Group(grid, {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                angle: this.viewport.angle\n            });\n\n            this.canvas.add(this.grid);\n            this.renderImage();\n        }\n    },\n\n    /**\n     * Hide the grid\n     */\n    _hideGrid: function() {\n        this.canvas.remove(this.grid);\n        this.grid = null;\n        this.renderImage();\n    },\n\n    /**\n     * Remove all the events when hiding the editor.\n     */\n    onFadeOut: function() {\n        this.destroy();\n    },\n\n    /**\n     * Make sure underlying content is not scrolled by accident.\n     */\n    show: function() {\n        this.base();\n\n        $('html').addClass('noscroll');\n    },\n\n    /**\n     * Allow the content to scroll.\n     */\n    hide: function() {\n        this.removeAllListeners();\n        this.straighteningInput.removeAllListeners();\n        $('html').removeClass('noscroll');\n        this.base();\n    },\n\n    /**\n     * onSave callback.\n     */\n    onSave: function() {\n        this.settings.onSave();\n        this.trigger('save');\n    },\n\n    /**\n     * Enable the rotation slider.\n     */\n    enableSlider: function() {\n        this.$imageTools.removeClass('hidden');\n    },\n\n    /**\n     * Disable the rotation slider.\n     */\n    disableSlider: function() {\n        this.$imageTools.addClass('hidden');\n    },\n\n    /**\n     * Switch to crop mode.\n     */\n    enableCropMode: function() {\n        var imageDimensions = this.getScaledImageDimensions();\n        this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n        var viewportProperties = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var callback = () => {\n            this._setFittedImageVerticeCoordinates();\n\n            // Restore cropper\n            var state = this.cropperState;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Restore based on the stored information\n            var cropperData = {\n                left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                width: state.width * sizeFactor * this.zoomRatio,\n                height: state.height * sizeFactor * this.zoomRatio\n            };\n\n            this._showCropper(cropperData);\n\n            if (this.focalPoint) {\n                sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Switch out of crop mode.\n     */\n    disableCropMode: function() {\n        var viewportProperties = {};\n\n        this._hideCropper();\n        var imageDimensions = this.getScaledImageDimensions();\n        var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n        var inverseZoomFactor = targetZoom / this.zoomRatio;\n        this.zoomRatio = targetZoom;\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var offsetX = this.clipper.left - this.image.left;\n        var offsetY = this.clipper.top - this.image.top;\n\n        var imageOffsetX = offsetX * inverseZoomFactor;\n        var imageOffsetY = offsetY * inverseZoomFactor;\n        imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n        imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n        // Calculate the cropper dimensions after all the zooming\n        viewportProperties.height = this.clipper.height * inverseZoomFactor;\n        viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n        if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n            if (this.focalPoint) {\n                this.toggleFocalPoint();\n            }\n\n            this._resetFocalPointPosition();\n        }\n\n        var callback = () => {\n            // Reposition focal point correctly\n            if (this.focalPoint) {\n                var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Transition between cropping end editor modes\n     *\n     * @param callback\n     * @param imageProperties\n     * @param viewportProperties\n     * @private\n     */\n    _editorModeTransition: function(callback, imageProperties, viewportProperties) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            // Without this it looks semi-broken during animation\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n                this.renderImage();\n            }\n\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    callback();\n                    this.animationInProgress = false;\n                    this.renderImage();\n                },\n            });\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration\n            });\n        }\n    },\n\n    _showSpinner: function() {\n        this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n        var canvas = document.getElementById('spinner-canvas');\n        var context = canvas.getContext('2d');\n        var start = new Date();\n        var lines = 16,\n            cW = context.canvas.width,\n            cH = context.canvas.height;\n\n        var draw = function() {\n            var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n            context.save();\n            context.clearRect(0, 0, cW, cH);\n            context.translate(cW / 2, cH / 2);\n            context.rotate(Math.PI * 2 * rotation);\n            for (var i = 0; i < lines; i++) {\n                context.beginPath();\n                context.rotate(Math.PI * 2 / lines);\n                context.moveTo(cW / 10, 0);\n                context.lineTo(cW / 4, 0);\n                context.lineWidth = cW / 30;\n                context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                context.stroke();\n            }\n            context.restore();\n        };\n        this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n    },\n\n    _hideSpinner: function() {\n        window.clearInterval(this.spinnerInterval);\n        this.$spinnerCanvas.remove();\n        this.$spinnerCanvas = null;\n    },\n\n    /**\n     * Show the cropper.\n     *\n     * @param clipperData\n     */\n    _showCropper: function(clipperData) {\n        this._setupCropperLayer(clipperData);\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Hide the cropper.\n     */\n    _hideCropper: function() {\n        if (this.clipper) {\n            this.croppingCanvas.remove(this.clipper);\n            this.croppingCanvas.remove(this.croppingShade);\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n\n            this.croppingCanvas = null;\n            this.renderCropper = null;\n        }\n    },\n\n    /**\n     * Draw the cropper.\n     *\n     * @param clipperData\n     */\n    _setupCropperLayer: function(clipperData) {\n        // Set up the canvas for cropper\n        this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n            backgroundColor: 'rgba(0,0,0,0)',\n            hoverCursor: 'default',\n            selection: false\n        });\n\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        this.renderCropper = () => Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n\n        $('#cropping-canvas', this.$editorContainer).css({\n            position: 'absolute',\n            top: 0,\n            left: 0\n        });\n\n        this.croppingShade = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: this.editorWidth,\n            height: this.editorHeight,\n            fill: 'rgba(0,0,0,0.7)'\n        });\n\n        // Calculate the cropping rectangle size\n        var imageDimensions = this.getScaledImageDimensions();\n        var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n        var rectWidth = imageDimensions.width / rectangleRatio;\n        var rectHeight = imageDimensions.height / rectangleRatio;\n\n        if (this.hasOrientationChanged()) {\n            var temp = rectHeight;\n            rectHeight = rectWidth;\n            rectWidth = temp;\n        }\n\n        // Set up the cropping viewport rectangle\n        this.clipper = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: rectWidth,\n            height: rectHeight,\n            stroke: 'black',\n            fill: 'rgba(128,0,0,1)',\n            strokeWidth: 0\n        });\n\n        // Set from clipper data\n        if (clipperData) {\n            this.clipper.set(clipperData);\n        }\n\n        this.clipper.globalCompositeOperation = 'destination-out';\n        this.croppingCanvas.add(this.croppingShade);\n        this.croppingCanvas.add(this.clipper);\n    },\n\n    /**\n     * Redraw the cropper boundaries\n     */\n    _redrawCropperElements: function() {\n        if (typeof this._redrawCropperElements._ === 'undefined') {\n            this._redrawCropperElements._ = {};\n        }\n\n        if (this.cropperHandles) {\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n        }\n        this._redrawCropperElements._.lineOptions = {\n            strokeWidth: 4,\n            stroke: 'rgb(255,255,255)',\n            fill: false\n        };\n\n        this._redrawCropperElements._.gridOptions = {\n            strokeWidth: 2,\n            stroke: 'rgba(255,255,255,0.5)'\n        };\n\n        // Draw the handles\n        this._redrawCropperElements._.pathGroup = [\n            new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n        ];\n\n        this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n            left: this.clipper.left,\n            top: this.clipper.top,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        // Don't forget the rectangle\n        this.croppingRectangle = new fabric.Rect({\n            left: this.clipper.left,\n            top: this.clipper.top,\n            width: this.clipper.width,\n            height: this.clipper.height,\n            fill: 'rgba(0,0,0,0)',\n            stroke: 'rgba(255,255,255,0.8)',\n            strokeWidth: 2,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        this.cropperGrid = new fabric.Group(\n            [\n                new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n            ], {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n        this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n        this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n        if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n            this._redrawCropperElements._.cropTextTop -= 24;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n        }\n\n        this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n            left: this.croppingRectangle.left,\n            top: this._redrawCropperElements._.cropTextTop,\n            fontSize: 13,\n            fill: 'rgb(200,200,200)',\n            backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n            font: 'Craft',\n            width: 70,\n            height: 15,\n            originX: 'center',\n            originY: 'center',\n            textAlign: 'center'\n        });\n\n        this.croppingCanvas.add(this.cropperHandles);\n        this.croppingCanvas.add(this.cropperGrid);\n        this.croppingCanvas.add(this.croppingRectangle);\n        this.croppingCanvas.add(this.croppingAreaText);\n    },\n\n    /**\n     * Reposition the cropper when the image editor dimensions change.\n     *\n     * @param previousImageArea\n     */\n    _repositionCropper: function(previousImageArea) {\n        if (!this.croppingCanvas) {\n            return;\n        }\n\n        // Get the current clipper offset relative to center\n        var currentOffset = {\n            x: this.clipper.left - this.croppingCanvas.width / 2,\n            y: this.clipper.top - this.croppingCanvas.height / 2\n        };\n\n        // Resize the cropping canvas\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        // Check by what factor will the new final bounding box be different\n        var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n        var areaFactor = currentArea.width / previousImageArea.width;\n\n        // Adjust the cropper size to scale along with the bounding box\n        this.clipper.width = Math.round(this.clipper.width * areaFactor);\n        this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n        // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n        // for editor size changes and then multiply by the size factor to adjust for image size changes\n        this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n        this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n        // Resize the cropping shade\n        this.croppingShade.set({\n            width: this.editorWidth,\n            height: this.editorHeight,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        });\n\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Get the dimensions of a bounding rectangle by a set of four coordinates.\n     *\n     * @param coordinateSet\n     */\n    _getBoundingRectangle: function(coordinateSet) {\n        return {\n            width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n            height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n        };\n    },\n\n    /**\n     * Handle the mouse being clicked.\n     *\n     * @param ev\n     */\n    _handleMouseDown: function(ev) {\n        // Focal before resize before dragging\n        var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n        var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n        var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n        if (handle || move || focal) {\n            this.previousMouseX = ev.pageX;\n            this.previousMouseY = ev.pageY;\n\n            if (focal) {\n                this.draggingFocal = true;\n            } else if (handle) {\n                this.scalingCropper = handle;\n            } else if (move) {\n                this.draggingCropper = true;\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse being moved.\n     *\n     * @param ev\n     */\n    _handleMouseMove: function(ev) {\n        if (this.mouseMoveEvent !== null) {\n            Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n        }\n        this.mouseMoveEvent = ev;\n    },\n\n    _handleMouseMoveInternal: function() {\n        if (this.mouseMoveEvent === null) {\n            return;\n        }\n\n        if (this.focalPoint && this.draggingFocal) {\n            this._handleFocalDrag(this.mouseMoveEvent);\n            this.storeFocalPointState();\n            this.renderImage();\n        } else if (this.draggingCropper || this.scalingCropper) {\n            if (this.draggingCropper) {\n                this._handleCropperDrag(this.mouseMoveEvent);\n            } else {\n                this._handleCropperResize(this.mouseMoveEvent);\n            }\n\n            this._redrawCropperElements();\n\n            this.storeCropperState();\n            this.renderCropper();\n        } else {\n            this._setMouseCursor(this.mouseMoveEvent);\n        }\n\n        this.previousMouseX = this.mouseMoveEvent.pageX;\n        this.previousMouseY = this.mouseMoveEvent.pageY;\n\n        this.mouseMoveEvent = null;\n    },\n\n    /**\n     * Handle mouse being released.\n     *\n     * @param ev\n     */\n    _handleMouseUp: function(ev) {\n        this.draggingCropper = false;\n        this.scalingCropper = false;\n        this.draggingFocal = false;\n    },\n\n    /**\n     * Handle mouse out\n     *\n     * @param ev\n     */\n    _handleMouseOut: function(ev) {\n        this._handleMouseUp(ev);\n        this.mouseMoveEvent = ev;\n        this._handleMouseMoveInternal();\n    },\n\n    /**\n     * Handle cropper being dragged.\n     *\n     * @param ev\n     */\n    _handleCropperDrag: function(ev) {\n        if (typeof this._handleCropperDrag._ === 'undefined') {\n            this._handleCropperDrag._ = {};\n        }\n\n        this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n            return false;\n        }\n\n        this._handleCropperDrag._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n        // If this would drag it outside of the image\n        if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n            // Try to find the furthest point in the same general direction where we can drag it\n\n            // Delta iterator setup\n            this._handleCropperDrag._.dxi = 0;\n            this._handleCropperDrag._.dyi = 0;\n            this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n            this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n            // The furthest we can move\n            this._handleCropperDrag._.furthest = 0;\n            this._handleCropperDrag._.furthestDeltas = {};\n\n            // Loop through every combination of dragging it not so far\n            for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                    this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                    if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                        if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                            this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                            this._handleCropperDrag._.furthestDeltas = {\n                                x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                            }\n                        }\n                    }\n                }\n            }\n\n            // REALLY can't drag along the cursor movement\n            if (this._handleCropperDrag._.furthest == 0) {\n                return;\n            } else {\n                this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n            }\n        }\n\n        this.clipper.set({\n            left: this.clipper.left + this._handleCropperDrag._.deltaX,\n            top: this.clipper.top + this._handleCropperDrag._.deltaY\n        });\n    },\n\n    /**\n     * Handle focal point being dragged.\n     *\n     * @param ev\n     */\n    _handleFocalDrag: function(ev) {\n        if (typeof this._handleFocalDrag._ === 'undefined') {\n            this._handleFocalDrag._ = {};\n        }\n\n        if (this.focalPoint) {\n            this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                return;\n            }\n\n            this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n            this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n            // Just make sure that the focal point stays inside the image\n            if (this.currentView === 'crop') {\n                if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                    return;\n                }\n            } else {\n                if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                    && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                    return;\n                }\n            }\n\n            this.focalPoint.set({\n                left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n            });\n        }\n    },\n\n    /**\n     * Set the cropping constraint\n     * @param constraint\n     */\n    setCroppingConstraint: function(constraint) {\n        // In case this caused the sidebar width to change.\n        this.updateSizeAndPosition();\n\n        switch (constraint) {\n            case 'none':\n                this.croppingConstraint = false;\n                break;\n\n            case 'original':\n                this.croppingConstraint = this.originalWidth / this.originalHeight;\n                break;\n\n            case 'current':\n                this.croppingConstraint = this.clipper.width / this.clipper.height;\n                break;\n\n            case 'custom':\n\n                break;\n            default:\n                this.croppingConstraint = parseFloat(constraint);\n\n                break;\n        }\n    },\n\n    /**\n     * Enforce the cropping constraint\n     */\n    enforceCroppingConstraint: function() {\n        if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n            this.enforceCroppingConstraint._ = {};\n        }\n\n        if (this.animationInProgress || !this.croppingConstraint) {\n            return;\n        }\n\n        this.animationInProgress = true;\n\n        // Mock the clipping rectangle for collision tests\n        this.enforceCroppingConstraint._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        // If wider than it should be\n        if (this.clipper.width > this.clipper.height * this.croppingConstraint) {\n            this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n            // Make it taller!\n            this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n            // Getting really awkward having to convert between 0;0 being center or top-left corner.\n            this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n            // If the clipper would end up out of bounds, make it narrower instead.\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n            }\n        } else {\n            // Follow the same pattern, if taller than it should be.\n            this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n            this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n            this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n            }\n        }\n\n        this.enforceCroppingConstraint._.properties = {\n            height: this.enforceCroppingConstraint._.rectangle.height,\n            width: this.enforceCroppingConstraint._.rectangle.width\n        };\n\n        // Make sure to redraw cropper handles and gridlines when resizing\n        this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n            onChange: () => {\n                this._redrawCropperElements();\n                this.croppingCanvas.renderAll();\n            },\n            duration: this.settings.animationDuration,\n            onComplete: () => {\n                this._redrawCropperElements();\n                this.animationInProgress = false;\n                this.renderCropper();\n                this.storeCropperState();\n            },\n        });\n    },\n\n    /**\n     * Handle cropper being resized.\n     *\n     * @param ev\n     */\n    _handleCropperResize: function(ev) {\n        if (typeof this._handleCropperResize._ === 'undefined') {\n            this._handleCropperResize._ = {};\n        }\n\n        // Size deltas\n        this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n            this._handleCropperResize._.deltaX = 0;\n        }\n\n        if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n            this._handleCropperResize._.deltaY = 0;\n        }\n\n        if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n            return;\n        }\n\n        // Translate from center-center origin to absolute coords\n        this._handleCropperResize._.startingRectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        }\n\n        this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n        if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n            return;\n        }\n\n        if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n            return;\n        }\n\n        // Translate back to center-center origin.\n        this.clipper.set({\n            top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n            left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n            width: this._handleCropperResize._.rectangle.width,\n            height: this._handleCropperResize._.rectangle.height\n        });\n\n        this._redrawCropperElements();\n    },\n\n    _calculateNewCropperSizeByDeltas: function(startingRectangle, deltaX, deltaY, cropperDirection) {\n        if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n            this._calculateNewCropperSizeByDeltas._ = {};\n        }\n\n        // Center deltas\n        this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n        this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n        this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n        this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n        this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n        // Lock the aspect ratio if needed\n        if (this.croppingConstraint) {\n            this._calculateNewCropperSizeByDeltas._.change = 0;\n\n            // Take into account the mouse direction and figure out the \"real\" change in cropper size\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'br':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n\n            if (this.croppingConstraint > 1) {\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n            } else {\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n            // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n        } else {\n            // Lock the aspect ratio\n            if (this.shiftKeyHeld &&\n                (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                    cropperDirection === 'bl' || cropperDirection === 'br')\n            ) {\n                this._calculateNewCropperSizeByDeltas._.ratio;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                }\n            }\n\n            if (cropperDirection.match(/t/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/b/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/r/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n            if (cropperDirection.match(/l/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n        }\n\n        this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n        this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n        this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n        this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n        return this._calculateNewCropperSizeByDeltas._.rectangle;\n    },\n\n    /**\n     * Set mouse cursor by it's position over cropper.\n     *\n     * @param ev\n     */\n    _setMouseCursor: function(ev) {\n        if (typeof this._setMouseCursor._ === 'undefined') {\n            this._setMouseCursor._ = {};\n        }\n\n        if (Garnish.isMobileBrowser(true)) {\n            return;\n        }\n        this._setMouseCursor._.cursor = 'default';\n        this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n        if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n            this._setMouseCursor._.cursor = 'pointer';\n        } else if (this._setMouseCursor._.handle) {\n            if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                this._setMouseCursor._.cursor = 'ns-resize';\n            } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                this._setMouseCursor._.cursor = 'ew-resize';\n            } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                this._setMouseCursor._.cursor = 'nwse-resize';\n            } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                this._setMouseCursor._.cursor = 'nesw-resize';\n            }\n        } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n            this._setMouseCursor._.cursor = 'move';\n        }\n\n        $('.body').css('cursor', this._setMouseCursor._.cursor);\n    },\n\n    /**\n     * Test whether the mouse cursor is on any cropper handles.\n     *\n     * @param ev\n     */\n    _cropperHandleHitTest: function(ev) {\n        if (typeof this._cropperHandleHitTest._ === 'undefined') {\n            this._cropperHandleHitTest._ = {};\n        }\n\n        this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n        this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n        this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n        this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n        this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n        this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n        // Left side top/bottom\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tl';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'bl';\n            }\n        }\n        // Right side top/bottom\n        if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tr';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'br';\n            }\n        }\n\n        // Left or right\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'l';\n        }\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'r';\n        }\n\n        // Top or bottom\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 't';\n        }\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 'b';\n        }\n\n        return false;\n    },\n\n    /**\n     * Test whether the mouse cursor is on a fabricJS object.\n     *\n     * @param object\n     * @param event\n     *\n     * @return boolean\n     */\n\n    _isMouseOver: function(event, object) {\n        if (typeof this._isMouseOver._ === 'undefined') {\n            this._isMouseOver._ = {};\n        }\n\n        this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n        this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n        this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._isMouseOver._.lb = object.left - object.width / 2;\n        this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n        this._isMouseOver._.tb = object.top - object.height / 2;\n        this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n        return (\n            this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n            this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n            this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n            this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n        );\n    },\n\n    /**\n     * Get vertices of a rectangle defined by left,top,height and width properties.\n     * Optionally it's possible to provide offsetX and offsetY values.\n     * Left and top properties of rectangle reference the top-left corner.\n     *\n     * @param rectangle\n     * @param [offsetX]\n     * @param [offsetY]\n     */\n    _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n        if (typeof this._getRectangleVertices._ === 'undefined') {\n            this._getRectangleVertices._ = {};\n        }\n\n        if (typeof offsetX === 'undefined') {\n            offsetX = 0;\n        }\n        if (typeof offsetY === 'undefined') {\n            offsetY = 0;\n        }\n\n        this._getRectangleVertices._.topLeft = {\n            x: rectangle.left + offsetX,\n            y: rectangle.top + offsetY\n        };\n\n        this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n        this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n        this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n        return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n    },\n\n    /**\n     * Set image vertice coordinates for an image that's been zoomed to fit.\n     */\n    _setFittedImageVerticeCoordinates: function() {\n        this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n    },\n\n    /**\n     * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n     * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n     *\n     * @param zoomMode\n     */\n    getImageVerticeCoords: function(zoomMode) {\n        var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n        var imageDimensions = this.getScaledImageDimensions();\n\n        var ratio;\n\n        if (typeof zoomMode === \"number\") {\n            ratio = zoomMode;\n        } else if (zoomMode === \"cover\") {\n            ratio = this.getZoomToCoverRatio(imageDimensions);\n        } else {\n            ratio = this.getZoomToFitRatio(imageDimensions);\n        }\n\n        // Get the dimensions of the scaled image\n        var scaledHeight = imageDimensions.height * ratio;\n        var scaledWidth = imageDimensions.width * ratio;\n\n        // Calculate the segments of the containing box for the image.\n        // When referring to top/bottom or right/left segments, these are on the\n        // right-side and bottom projection of the containing box for the zoomed out image.\n        var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n        var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n        var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n        var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n        // Calculate the offsets from editor box for the image-containing box\n        var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n        var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n        // Finally, calculate the image vertice coordinates\n        return {\n            a: {\n                x: horizontalOffset + rightHorizontalSegment,\n                y: verticalOffset\n            },\n            b: {\n                x: this.editorWidth - horizontalOffset,\n                y: verticalOffset + topVerticalSegment\n            },\n            c: {\n                x: horizontalOffset + leftHorizontalSegment,\n                y: this.editorHeight - verticalOffset\n            },\n            d: {\n                x: horizontalOffset,\n                y: verticalOffset + bottomVerticalSegment\n            }\n        };\n    },\n\n    /**\n     * Debug stuff by continuously rendering a fabric object on canvas.\n     *\n     * @param fabricObj\n     */\n    _debug: function(fabricObj) {\n        this.canvas.remove(this.debugger);\n        this.debugger = fabricObj;\n        this.canvas.add(this.debugger);\n    },\n\n    /**\n     * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n     * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n     * return true if the point is in the rectangle.\n     *\n     * Adapted from: http://stackoverflow.com/a/2763387/2040791\n     *\n     * @param points\n     * @param rectangle\n     */\n    arePointsInsideRectangle: function(points, rectangle) {\n        if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n            this.arePointsInsideRectangle._ = {};\n        }\n\n        // Pre-calculate the vectors and scalar products for two rectangle edges\n        this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n        this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n        this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n        this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n        for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n            this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n            // Calculate the vectors for two rectangle sides and for\n            // the vector from vertices a and b to the point P\n            this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n            this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n            // Calculate scalar or dot products for some vector combinations\n            this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n            this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n            this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n            this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n            if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    /**\n     * Returns an object representing the vector between points a and b.\n     *\n     * @param a\n     * @param b\n     */\n    _getVector: function(a, b) {\n        return {x: b.x - a.x, y: b.y - a.y};\n    },\n\n    /**\n     * Returns the scalar product of two vectors\n     *\n     * @param a\n     * @param b\n     */\n    _getScalarProduct: function(a, b) {\n        return a.x * b.x + a.y * b.y;\n    },\n\n    /**\n     * Returns the magnitude of a vector_redrawCropperElements\n     * .\n     *\n     * @param vector\n     */\n    _getVectorMagnitude: function(vector) {\n        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    },\n\n    /**\n     * Returns the angle between two vectors in degrees with two decimal points\n     *\n     * @param a\n     * @param b\n     */\n    _getAngleBetweenVectors: function(a, b) {\n        return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n    },\n\n    /**\n     * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n     *\n     * @param rectangle\n     * @param vertex\n     *\n     * @returns {*}\n     */\n    _getEdgeCrossed: function(rectangle, vertex) {\n        // Determine over which edge the vertex is\n        var edgePoints = [\n            [rectangle.a, rectangle.b],\n            [rectangle.b, rectangle.c],\n            [rectangle.c, rectangle.d],\n            [rectangle.d, rectangle.a]\n        ];\n\n        var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n        var smallestDiff = 180;\n        var edgeCrossed = null;\n\n        // Test each edge\n        for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n            var edge = edgePoints[edgeIndex];\n            var toCenter = this._getVector(edge[0], centerPoint);\n            var edgeVector = this._getVector(edge[0], edge[1]);\n            var toVertex = this._getVector(edge[0], vertex);\n\n            // If the angle between toCenter/toVertex is the sum of\n            // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n            // the edgeVector is between the other two meaning that this is the offending vertex.\n            // To avoid the rounding errors, we'll take the closest match\n            var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n            if (diff < smallestDiff) {\n                smallestDiff = diff;\n                edgeCrossed = edge;\n            }\n        }\n\n        return edgeCrossed;\n    },\n\n    /**\n     * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n     *\n     * @param dimensions\n     */\n    _getImageBoundingBox: function(dimensions) {\n        var box = {};\n\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        var proportion = dimensions.height / dimensions.width;\n        box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n        box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n        if (this.hasOrientationChanged()) {\n            var temp = box.width;\n            box.width = box.height;\n            box.height = temp;\n        }\n\n        return box;\n    }\n}, {\n    defaults: {\n        animationDuration: 100,\n        allowSavingAsNew: true,\n        onSave: $.noop,\n        allowDegreeFractions: null,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend({\n    $includeSubfoldersContainer: null,\n    $includeSubfoldersCheckbox: null,\n    showingIncludeSubfoldersCheckbox: false,\n\n    $uploadButton: null,\n    $uploadInput: null,\n    $progressBar: null,\n    $folders: null,\n\n    uploader: null,\n    promptHandler: null,\n    progressBar: null,\n\n    _uploadTotalFiles: 0,\n    _uploadFileProgress: {},\n    _uploadedAssetIds: [],\n    _currentUploaderSettings: {},\n\n    _assetDrag: null,\n    _folderDrag: null,\n    _expandDropTargetFolderTimeout: null,\n    _tempExpandedFolders: [],\n\n    _fileConflictTemplate: {\n        choices: [\n            {value: 'keepBoth', title: Craft.t('app', 'Keep both')}, {value: 'replace', title: Craft.t('app', 'Replace it')}\n        ]\n    },\n    _folderConflictTemplate: {\n        choices: [\n            {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')}, {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n        ]\n    },\n\n    init: function(elementType, $container, settings) {\n        this.base(elementType, $container, settings);\n\n        if (this.settings.context === 'index') {\n            if (!this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n        } else {\n            this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n            if (this.settings.modal) {\n                this.settings.modal.on('updateSizeAndPosition', this._positionProgressBar.bind(this));\n            }\n        }\n    },\n\n    initSources: function() {\n        if (this.settings.context === 'index' && !this._folderDrag) {\n            this._initIndexPageMode();\n        }\n\n        return this.base();\n    },\n\n    initSource: function($source) {\n        this.base($source);\n\n        this._createFolderContextMenu($source);\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                if ($source.data('folder-id')) {\n                    this._folderDrag.addItems($source.parent());\n                }\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    deinitSource: function($source) {\n        this.base($source);\n\n        // Does this source have a context menu?\n        var contextMenu = $source.data('contextmenu');\n\n        if (contextMenu) {\n            contextMenu.destroy();\n        }\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                this._folderDrag.removeItems($source.parent());\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    _getSourceLevel: function($source) {\n        return $source.parentsUntil('nav', 'ul').length;\n    },\n\n    /**\n     * Initialize the index page-specific features\n     */\n    _initIndexPageMode: function() {\n        if (this._folderDrag) {\n            return;\n        }\n\n        // Make the elements selectable\n        this.settings.selectable = true;\n        this.settings.multiSelect = true;\n\n        // Asset dragging\n        // ---------------------------------------------------------------------\n\n        this._assetDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n            filter: () => this.view.getSelectedElements().has('div.element[data-movable]'),\n            helper: $file => this._getFileDragHelper($file),\n            dropTargets: () => {\n                // Which data attribute should we be checking?\n                var attr;\n                if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                    attr = 'data-can-move-peer-files-to';\n                } else {\n                    attr = 'data-can-move-to';\n                }\n\n                var targets = [];\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder\n                    var $source = this.$sources.eq(i);\n                    if (Garnish.hasAttr($source, attr)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFileDragStop.bind(this),\n            helperBaseZindex: 800\n        });\n\n        // Folder dragging\n        // ---------------------------------------------------------------------\n\n        this._folderDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: () => {\n                // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                var $selected = this.sourceSelect.getSelectedItems(),\n                    draggees = [];\n\n                for (var i = 0; i < $selected.length; i++) {\n                    var $source = $selected.eq(i);\n\n                    if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                        continue;\n                    }\n\n                    if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                        draggees.push($source.parent()[0]);\n                    }\n                }\n\n                return $(draggees);\n            },\n\n            helper: $draggeeHelper => {\n                var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                    $helperNav = $('<nav/>').appendTo($helperSidebar),\n                    $helperUl = $('<ul/>').appendTo($helperNav);\n\n                $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                $draggeeHelper.children('a').addClass('sel');\n\n                // Match the style\n                $draggeeHelper.css({\n                    'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                    'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                    'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                    'padding-left': this._folderDrag.$draggee.css('padding-left')\n                });\n\n                return $helperSidebar;\n            },\n\n            dropTargets: () => {\n                var targets = [];\n\n                // Tag the dragged folder and it's subfolders\n                var draggedSourceIds = [];\n                this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                    draggedSourceIds.push($(this).data('key'));\n                });\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder and not one of the dragged folders\n                    var $source = this.$sources.eq(i),\n                        key = $source.data('key');\n\n                    if (!this._getFolderUidFromSourceKey(key)) {\n                        continue;\n                    }\n\n                    if (!Craft.inArray(key, draggedSourceIds)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFolderDragStop.bind(this),\n        });\n    },\n\n    /**\n     * On file drag stop\n     */\n    _onFileDragStop: function() {\n        if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n            // Keep it selected\n            var originatingSource = this.$source;\n\n            var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                originalAssetIds = [];\n\n            // For each file, prepare array data.\n            for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                originalAssetIds.push(originalAssetId);\n            }\n\n            // Are any files actually getting moved?\n            if (originalAssetIds.length) {\n                this.setIndexBusy();\n\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(originalAssetIds.length);\n                this.progressBar.showProgressBar();\n\n                // For each file to move a separate request\n                var parameterArray = [];\n                for (i = 0; i < originalAssetIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: {\n                            assetId: originalAssetIds[i],\n                            folderId: targetFolderId\n                        }\n                    });\n                }\n\n                // Define the callback for when all file moves are complete\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var response = responseArray[i];\n\n                        // Push prompt into prompt array\n                        if (response.conflict) {\n                            this.promptHandler.addPrompt({\n                                assetId: response.assetId,\n                                suggestedFilename: response.suggestedFilename,\n                                prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                            });\n                        }\n\n                        if (response.error) {\n                            alert(response.error);\n                        }\n                    }\n\n                    this.setIndexAvailable();\n                    this.progressBar.hideProgressBar();\n                    var reloadIndex = false;\n\n                    var performAfterMoveActions = function() {\n                        // Select original source\n                        this.sourceSelect.selectItem(originatingSource);\n\n                        // Make sure we use the correct offset when fetching the next page\n                        this._totalVisible -= this._assetDrag.$draggee.length;\n\n                        // And remove the elements that have been moved away\n                        for (var i = 0; i < originalAssetIds.length; i++) {\n                            $('[data-id=' + originalAssetIds[i] + ']').remove();\n                        }\n\n                        this.view.deselectAllElements();\n                        this._collapseExtraExpandedFolders(targetFolderId);\n\n                        if (reloadIndex) {\n                            this.updateElements();\n                        }\n                    };\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            var newParameterArray = [];\n\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    reloadIndex = true;\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'keepBoth') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            filename: returnData[i].suggestedFilename\n                                        }\n                                    });\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            force: true\n                                        }\n                                    });\n                                }\n                            }\n\n                            // Nothing to do, carry on\n                            if (newParameterArray.length === 0) {\n                                performAfterMoveActions.apply(this);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                // Move conflicting files again with resolutions now\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this._assetDrag.fadeOutHelpers();\n                        this.promptHandler.showBatchPrompts(promptCallback);\n                    } else {\n                        performAfterMoveActions.apply(this);\n                        this._assetDrag.fadeOutHelpers();\n                    }\n                };\n\n                // Initiate the file move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._assetDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * On folder drag stop\n     */\n    _onFolderDragStop: function() {\n        // Only move if we have a valid target and we're not trying to move into our direct parent\n        if (\n            this._folderDrag.$activeDropTarget &&\n            this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n        ) {\n            var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n            this._collapseExtraExpandedFolders(targetFolderId);\n\n            // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n            var folderIds = [];\n\n            for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                    folderId = $a.data('folder-id');\n\n                // Make sure it's not already in the target folder and use this single folder Id.\n                if (folderId != targetFolderId) {\n                    folderIds.push(folderId);\n                    break;\n                }\n            }\n\n            if (folderIds.length) {\n                folderIds.sort();\n                folderIds.reverse();\n\n                this.setIndexBusy();\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(folderIds.length);\n                this.progressBar.showProgressBar();\n\n                var parameterArray = [];\n\n                for (i = 0; i < folderIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-folder',\n                        params: {\n                            folderId: folderIds[i],\n                            parentId: targetFolderId\n                        }\n                    });\n                }\n\n                // Increment, so to avoid displaying folder files that are being moved\n                this.requestId++;\n\n                /*\n                 Here's the rundown:\n                 1) Send all the folders being moved\n                 2) Get results:\n                 a) For all conflicting, receive prompts and resolve them to get:\n                 b) For all valid move operations: by now server has created the needed folders\n                 in target destination. Server returns an array of file move operations\n                 c) server also returns a list of all the folder id changes\n                 d) and the data-id of node to be removed, in case of conflict\n                 e) and a list of folders to delete after the move\n                 3) From data in 2) build a large file move operation array\n                 4) Create a request loop based on this, so we can display progress bar\n                 5) when done, delete all the folders and perform other maintenance\n                 6) Champagne\n                 */\n\n                // This will hold the final list of files to move\n                var fileMoveList = [];\n\n                var newSourceKey = '';\n\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var data = responseArray[i];\n\n                        // If successful and have data, then update\n                        if (data.success) {\n                            if (data.transferList) {\n                                fileMoveList = data.transferList;\n                            }\n\n                            if (data.newFolderId) {\n                                newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                            }\n                        }\n\n                        // Push prompt into prompt array\n                        if (data.conflict) {\n                            data.prompt = {\n                                message: data.conflict,\n                                choices: this._folderConflictTemplate.choices\n                            };\n\n                            this.promptHandler.addPrompt(data);\n                        }\n\n                        if (data.error) {\n                            alert(data.error);\n                        }\n                    }\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            this.promptHandler.resetPrompts();\n\n                            var newParameterArray = [];\n\n                            var params = {};\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    params.force = true;\n                                }\n\n                                if (returnData[i].choice === 'merge') {\n                                    params.merge = true;\n                                }\n\n                                params.folderId = data.folderId;\n                                params.parentId = data.parentId;\n\n                                newParameterArray.push({\n                                    action: 'assets/move-folder',\n                                    params: params\n                                });\n                            }\n\n                            // Start working on them lists, baby\n                            if (newParameterArray.length === 0) {\n                                this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this.promptHandler.showBatchPrompts(promptCallback);\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                    } else {\n                        this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                    }\n                };\n\n                // Initiate the folder move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees until we get the Ajax response\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._folderDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * Really move the folder. Like really. For real.\n     */\n    _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n        this.progressBar.setItemCount(1);\n        this.progressBar.showProgressBar();\n\n        var moveCallback = folderDeleteList => {\n            // Delete the old folders\n            var counter = 0;\n            var limit = folderDeleteList.length;\n            for (var i = 0; i < folderDeleteList.length; i++) {\n                // When all folders are deleted, reload the sources.\n                Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, () => {\n                    if (++counter === limit) {\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        this._folderDrag.returnHelpersToDraggees();\n                        this.setInstanceState('selectedSource', newSourceKey);\n                        this.refreshSources();\n                    }\n                });\n            }\n        };\n\n        if (fileMoveList.length > 0) {\n            var parameterArray = [];\n\n            for (var i = 0; i < fileMoveList.length; i++) {\n                parameterArray.push({\n                    action: 'assets/move-asset',\n                    params: fileMoveList[i]\n                });\n            }\n            this._performBatchRequests(parameterArray, function() {\n                moveCallback(folderDeleteList);\n            });\n        } else {\n            moveCallback(folderDeleteList);\n        }\n    },\n\n    /**\n     * Returns the root level source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getRootSource: function($source) {\n        var $parent;\n        while (($parent = this._getParentSource($source)) && $parent.length) {\n            $source = $parent;\n        }\n        return $source;\n    },\n\n    /**\n     * Get parent source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getParentSource: function($source) {\n        if (this._getSourceLevel($source) > 1) {\n            return $source.parent().parent().siblings('a');\n        }\n    },\n\n    _selectSourceByFolderId: function(targetFolderId) {\n        var $targetSource = this._getSourceByKey(targetFolderId);\n\n        // Make sure that all the parent sources are expanded and this source is visible.\n        var $parentSources = $targetSource.parent().parents('li');\n\n        for (var i = 0; i < $parentSources.length; i++) {\n            var $parentSource = $($parentSources[i]);\n\n            if (!$parentSource.hasClass('expanded')) {\n                $parentSource.children('.toggle').trigger('click');\n            }\n        }\n\n        this.selectSource($targetSource);\n        this.updateElements();\n    },\n\n    /**\n     * Initialize the uploader.\n     *\n     * @private\n     */\n    afterInit: function() {\n        if (!this.$uploadButton) {\n            this.$uploadButton = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                'data-icon': 'upload',\n                style: 'position: relative; overflow: hidden;',\n                text: Craft.t('app', 'Upload files'),\n            });\n            this.addButton(this.$uploadButton);\n\n            this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n        }\n\n        this.promptHandler = new Craft.PromptHandler();\n        this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            fileInput: this.$uploadInput,\n            dropZone: this.$container\n        };\n\n        options.events = {\n            fileuploadstart: this._onUploadStart.bind(this),\n            fileuploadprogressall: this._onUploadProgress.bind(this),\n            fileuploaddone: this._onUploadComplete.bind(this),\n        };\n\n        if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        this._currentUploaderSettings = options;\n\n        this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n        this.$uploadButton.on('click', () => {\n            if (this.$uploadButton.hasClass('disabled')) {\n                return;\n            }\n            if (!this.isIndexBusy) {\n                this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n            }\n        });\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific volume in the URL?\n        if (this.settings.context === 'index' && typeof defaultVolumeHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n                if ($source.data('volume-handle') === defaultVolumeHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    onSelectSource: function() {\n        var $source = this._getSourceByKey(this.sourceKey);\n        var folderId = $source.data('folder-id');\n\n        if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n            this.uploader.setParams({\n                folderId: this.$source.attr('data-folder-id')\n            });\n            this.$uploadButton.removeClass('disabled');\n        } else {\n            this.$uploadButton.addClass('disabled');\n        }\n\n        // Update the URL if we're on the Assets index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'assets';\n            var $rootSource = this._getRootSource($source);\n            if ($rootSource && $rootSource.data('volume-handle')) {\n                uri += '/' + $rootSource.data('volume-handle');\n            }\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n\n        this.base();\n    },\n\n    _getFolderUidFromSourceKey: function(sourceKey) {\n        var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n        return m ? m[1] : null;\n    },\n\n    startSearching: function() {\n        // Does this source have subfolders?\n        if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n            if (this.$includeSubfoldersContainer === null) {\n                var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                    this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                    this.updateElements();\n                });\n            } else {\n                this.$includeSubfoldersContainer.velocity('stop');\n            }\n\n            var checked = this.getSelectedSourceState('includeSubfolders', false);\n            this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: 0,\n                opacity: 1\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = true;\n        }\n\n        this.base();\n    },\n\n    stopSearching: function() {\n        if (this.showingIncludeSubfoldersCheckbox) {\n            this.$includeSubfoldersContainer.velocity('stop');\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: -25,\n                opacity: 0\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = false;\n        }\n\n        this.base();\n    },\n\n    getViewParams: function() {\n        var data = this.base();\n\n        if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n            data.criteria.includeSubfolders = true;\n        }\n\n        return data;\n    },\n\n    /**\n     * React on upload submit.\n     *\n     * @private\n     */\n    _onUploadStart: function() {\n        this.setIndexBusy();\n\n        // Initial values\n        this._positionProgressBar();\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n\n        this.promptHandler.resetPrompts();\n    },\n\n    /**\n     * Update uploaded byte count.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On Upload Complete.\n     */\n    _onUploadComplete: function(event, data) {\n        var response = data.result;\n        var filename = data.files[0].name;\n\n        var doReload = true;\n\n        if (response.success || response.conflict) {\n            // Add the uploaded file to the selected ones, if appropriate\n            this._uploadedAssetIds.push(response.assetId);\n\n            // If there is a prompt, add it to the queue\n            if (response.conflict) {\n                response.prompt = {\n                    message: Craft.t('app', response.conflict, {file: response.filename}),\n                    choices: this._fileConflictTemplate.choices\n                };\n\n                this.promptHandler.addPrompt(response);\n            }\n\n            Craft.cp.runQueue();\n        } else {\n            if (response.error) {\n                alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n            } else {\n                alert(Craft.t('app', 'Upload failed for {filename}.', {filename}));\n            }\n\n            doReload = false;\n        }\n\n        // For the last file, display prompts, if any. If not - just update the element view.\n        if (this.uploader.isLastUpload()) {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n\n            if (this.promptHandler.getPromptCount()) {\n                this.promptHandler.showBatchPrompts(this._uploadFollowup.bind(this));\n            } else {\n                if (doReload) {\n                    this._updateAfterUpload();\n                }\n            }\n        }\n    },\n\n    /**\n     * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n     *\n     * @private\n     */\n    _updateAfterUpload: function() {\n        if (this.settings.context !== 'index') {\n            this.setSortAttribute('dateModified');\n            this.setSortDirection('desc');\n        }\n        this.updateElements();\n    },\n\n    /**\n     * Follow up to an upload that triggered at least one conflict resolution prompt.\n     *\n     * @param returnData\n     * @private\n     */\n    _uploadFollowup: function(returnData) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n\n        this.promptHandler.resetPrompts();\n\n        var finalCallback = () => {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n            this._updateAfterUpload();\n        };\n\n        this.progressBar.setItemCount(returnData.length);\n\n        var doFollowup = (parameterArray, parameterIndex, callback) => {\n            var postData = {};\n            var action = null;\n\n            var followupCallback = (data, textStatus) => {\n                if (textStatus === 'success' && data.assetId) {\n                    this._uploadedAssetIds.push(data.assetId);\n                } else if (data.error) {\n                    alert(data.error);\n                }\n                parameterIndex++;\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (parameterIndex === parameterArray.length) {\n                    callback();\n                } else {\n                    doFollowup(parameterArray, parameterIndex, callback);\n                }\n            };\n\n            if (parameterArray[parameterIndex].choice === 'replace') {\n                action = 'assets/replace-file';\n                postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                if (parameterArray[parameterIndex].conflictingAssetId) {\n                    postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                } else {\n                    postData.targetFilename = parameterArray[parameterIndex].filename;\n                }\n            } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                action = 'assets/delete-asset';\n                postData.assetId = parameterArray[parameterIndex].assetId;\n            }\n\n            if (!action) {\n                // We don't really need to do another request, so let's pretend that already happened\n                followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n            } else {\n                Craft.postActionRequest(action, postData, followupCallback);\n            }\n        };\n\n        this.progressBar.showProgressBar();\n        doFollowup(returnData, 0, finalCallback);\n    },\n\n    /**\n     * Perform actions after updating elements\n     * @private\n     */\n    onUpdateElements: function() {\n        this._onUpdateElements(false, this.view.getAllElements());\n        this.view.on('appendElements', ev => {\n            this._onUpdateElements(true, ev.newElements);\n        });\n\n        this.base();\n    },\n\n    /**\n     * Do the after-update initializations\n     * @private\n     */\n    _onUpdateElements: function(append, $newElements) {\n        if (this.settings.context === 'index') {\n            if (!append) {\n                this._assetDrag.removeAllItems();\n            }\n\n            this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n        }\n\n        // See if we have freshly uploaded files to add to selection\n        if (this._uploadedAssetIds.length) {\n            if (this.view.settings.selectable) {\n                for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                    this.view.selectElementById(this._uploadedAssetIds[i]);\n                }\n            }\n\n            // Reset the list.\n            this._uploadedAssetIds = [];\n        }\n\n        this.base(append, $newElements);\n\n        this.removeListener(this.$elements, 'keydown');\n        this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n        this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item).find('.element');\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    _onDragStart: function() {\n        this._tempExpandedFolders = [];\n    },\n\n    /**\n     * Get File Drag Helper\n     */\n    _getFileDragHelper: function($element) {\n        var currentView = this.getSelectedSourceState('mode');\n        var $outerContainer;\n        var $innerContainer;\n\n        switch (currentView) {\n            case 'table': {\n                $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                var $tbody = $('<tbody/>').appendTo($table);\n\n                $element.appendTo($tbody);\n\n                // Copy the column widths\n                this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                var $helperCells = $element.children();\n\n                for (var i = 0; i < $helperCells.length; i++) {\n                    // Hard-set the cell widths\n                    var $helperCell = $($helperCells[i]);\n\n                    // Skip the checkbox cell\n                    if ($helperCell.hasClass('checkbox-cell')) {\n                        $helperCell.remove();\n                        $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                        continue;\n                    }\n\n                    var $firstRowCell = $(this._$firstRowCells[i]),\n                        width = $firstRowCell.width();\n\n                    $firstRowCell.width(width);\n                    $helperCell.width(width);\n                }\n\n                return $outerContainer;\n            }\n            case 'thumbs': {\n                $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                $element.appendTo($innerContainer);\n\n                return $outerContainer;\n            }\n        }\n\n        return $();\n    },\n\n    /**\n     * On Drop Target Change\n     */\n    _onDropTargetChange: function($dropTarget) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        if ($dropTarget) {\n            var folderId = $dropTarget.data('folder-id');\n\n            if (folderId) {\n                this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                    this._expandDropTargetFolderTimeout = setTimeout(this._expandFolder.bind(this), 500);\n                }\n            } else {\n                this.dropTargetFolder = null;\n            }\n        }\n\n        if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n            // Temporarily remove the .sel class on the active source\n            this.$source.removeClass('sel');\n        } else {\n            this.$source.addClass('sel');\n        }\n    },\n\n    /**\n     * Collapse Extra Expanded Folders\n     */\n    _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        // If a source ID is passed in, exclude its parents\n        var $excludedSources;\n\n        if (dropTargetFolderId) {\n            $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n        }\n\n        for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n            var $source = this._tempExpandedFolders[i];\n\n            // Check the parent list, if a source id is passed in\n            if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                this._collapseFolder($source);\n                this._tempExpandedFolders.splice(i, 1);\n            }\n        }\n    },\n\n    _getSourceByKey: function(key) {\n        return this.$sources.filter('[data-key$=\"' + key + '\"]');\n    },\n\n    _hasSubfolders: function($source) {\n        return $source.siblings('ul').find('li').length;\n    },\n\n    _isExpanded: function($source) {\n        return $source.parent('li').hasClass('expanded');\n    },\n\n    _expandFolder: function() {\n        // Collapse any temp-expanded drop targets that aren't parents of this one\n        this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n        this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n        // Keep a record of that\n        this._tempExpandedFolders.push(this.dropTargetFolder);\n    },\n\n    _collapseFolder: function($source) {\n        if ($source.parent().hasClass('expanded')) {\n            $source.siblings('.toggle').trigger('click');\n        }\n    },\n\n    _createFolderContextMenu: function($source) {\n        // Make sure it's a volume folder\n        if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n            return;\n        }\n\n        var menuOptions = [\n            {\n                label: Craft.t('app', 'New subfolder'),\n                onClick: () => {\n                    this._createSubfolder($source);\n                },\n            },\n        ];\n\n        // For all folders that are not top folders\n        if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n            menuOptions.push({\n                label: Craft.t('app', 'Rename folder'),\n                onClick: () => {\n                    this._renameFolder($source);\n                },\n            });\n            menuOptions.push({\n                label: Craft.t('app', 'Delete folder'),\n                onClick: () => {\n                    this._deleteFolder($source);\n                },\n            });\n        }\n\n        new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n    },\n\n    _createSubfolder: function($parentFolder) {\n        var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n        if (subfolderName) {\n            var params = {\n                parentId: $parentFolder.data('folder-id'),\n                folderName: subfolderName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/create-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    this._prepareParentForChildren($parentFolder);\n\n                    var $subfolder = $(\n                        '<li>' +\n                        '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                        ' data-folder-id=\"' + data.folderId + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                        '>' +\n                        data.folderName +\n                        '</a>' +\n                        '</li>'\n                    );\n\n                    var $a = $subfolder.children('a:first');\n                    this._appendSubfolder($parentFolder, $subfolder);\n                    this.initSource($a);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    _deleteFolder: function($targetFolder) {\n        if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n            var params = {\n                folderId: $targetFolder.data('folder-id')\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/delete-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    var $parentFolder = this._getParentSource($targetFolder);\n\n                    // Remove folder and any trace from its parent, if needed\n                    this.deinitSource($targetFolder);\n\n                    $targetFolder.parent().remove();\n                    this._cleanUpTree($parentFolder);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    /**\n     * Rename\n     */\n    _renameFolder: function($targetFolder) {\n        var oldName = $.trim($targetFolder.text()),\n            newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n        if (newName && newName !== oldName) {\n            var params = {\n                folderId: $targetFolder.data('folder-id'),\n                newName: newName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/rename-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    $targetFolder.text(data.newName);\n\n                    // If the current folder was renamed.\n                    if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                        this.updateElements();\n                    }\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, 'json');\n        }\n    },\n\n    /**\n     * Prepare a source folder for children folder.\n     *\n     * @param $parentFolder\n     * @private\n     */\n    _prepareParentForChildren: function($parentFolder) {\n        if (!this._hasSubfolders($parentFolder)) {\n            $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n            this.initSourceToggle($parentFolder);\n        }\n    },\n\n    /**\n     * Appends a subfolder to the parent folder at the correct spot.\n     *\n     * @param $parentFolder\n     * @param $subfolder\n     * @private\n     */\n    _appendSubfolder: function($parentFolder, $subfolder) {\n        var $subfolderList = $parentFolder.siblings('ul'),\n            $existingChildren = $subfolderList.children('li'),\n            subfolderLabel = $.trim($subfolder.children('a:first').text()),\n            folderInserted = false;\n\n        for (var i = 0; i < $existingChildren.length; i++) {\n            var $existingChild = $($existingChildren[i]);\n\n            if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                $existingChild.before($subfolder);\n                folderInserted = true;\n                break;\n            }\n        }\n\n        if (!folderInserted) {\n            $parentFolder.siblings('ul').append($subfolder);\n        }\n    },\n\n    _cleanUpTree: function($parentFolder) {\n        if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n            this.deinitSourceToggle($parentFolder);\n            $parentFolder.siblings('ul').remove();\n            $parentFolder.siblings('.toggle').remove();\n            $parentFolder.parent().removeClass('expanded');\n        }\n    },\n\n    _positionProgressBar: function() {\n        if (!this.progressBar) {\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n        }\n\n        var $container = $(),\n            scrollTop = 0,\n            offset = 0;\n\n        if (this.settings.context === 'index') {\n            $container = this.progressBar.$progressBar.closest('#content');\n            scrollTop = Garnish.$win.scrollTop();\n        } else {\n            $container = this.progressBar.$progressBar.closest('.main');\n            scrollTop = this.$main.scrollTop();\n        }\n\n        var containerTop = $container.offset().top;\n        var diff = scrollTop - containerTop;\n        var windowHeight = Garnish.$win.height();\n\n        if ($container.height() > windowHeight) {\n            offset = (windowHeight / 2) - 6 + diff;\n        } else {\n            offset = ($container.height() / 2) - 6;\n        }\n\n        if (this.settings.context !== 'index') {\n            offset = scrollTop + (($container.height() / 2) - 6);\n        }\n\n        this.progressBar.$progressBar.css({\n            top: offset\n        });\n    },\n\n    _performBatchRequests: function(parameterArray, finalCallback) {\n        var responseArray = [];\n\n        var doRequest = parameters => {\n            Craft.postActionRequest(parameters.action, parameters.params, (data, textStatus) => {\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (textStatus === 'success') {\n                    responseArray.push(data);\n\n                    // If assets were just merged we should get the reference tags updated right away\n                    Craft.cp.runQueue();\n                }\n\n                if (responseArray.length >= parameterArray.length) {\n                    finalCallback(responseArray);\n                }\n            });\n        };\n\n        for (var i = 0; i < parameterArray.length; i++) {\n            doRequest(parameterArray[i]);\n        }\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend({\n    requestId: 0,\n    hud: null,\n    $uploadBtn: null,\n    uploader: null,\n    progressBar: null,\n\n    init: function() {\n        this.base.apply(this, arguments);\n\n        if (this.settings.canUpload) {\n            this._attachUploader();\n        }\n\n        this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n        this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.elementSelect.$focusedItem;\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item);\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n    },\n\n    /**\n     * Create the element editor\n     */\n    createElementEditor: function($element) {\n        return this.base($element, {\n            params: {\n                defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n            },\n            input: this\n        });\n    },\n\n    /**\n     * Attach the uploader with drag event handler\n     */\n    _attachUploader: function() {\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            dropZone: this.$container,\n            formData: {\n                fieldId: this.settings.fieldId,\n            }\n        };\n\n        if (this.settings.sourceElementId) {\n            options.formData.elementId = this.settings.sourceElementId;\n        }\n\n        if (this.settings.criteria.siteId) {\n            options.formData.siteId = this.settings.criteria.siteId;\n        }\n\n        if (this.$addElementBtn) {\n            this.$uploadBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn dashed',\n                'data-icon': 'upload',\n                text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n            }).insertAfter(this.$addElementBtn);\n            options.fileInput = $('<input/>', {\n                type: 'file',\n                class: 'hidden',\n                multiple: this.settings.limit != 1,\n            }).insertAfter(this.$uploadBtn);\n\n            // Trigger a window resize in case the field is inside an element editor HUD\n            Garnish.$win.trigger('resize');\n        }\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        if (typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        options.canAddMoreFiles = this.canAddMoreFiles.bind(this);\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        if (this.$uploadBtn) {\n            this.$uploadBtn.on('click', ev => {\n                // We can't store a reference to the file input, because it gets replaced with a new input\n                // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                this.$uploadBtn.next('input[type=file]').trigger('click');\n            });\n        }\n    },\n\n    refreshThumbnail: function(elementId) {\n        var parameters = {\n            elementId: elementId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, data => {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                this.thumbLoader.load($existing);\n            }\n        });\n    },\n\n    /**\n     * Add the freshly uploaded file to the input field.\n     */\n    selectUploadedFile: function(element) {\n        // Check if we're able to add new elements\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        var $newElement = element.$element;\n\n        // Make a couple tweaks\n        $newElement.addClass('removable');\n        $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        $newElement.appendTo(this.$elementsContainer);\n\n        var margin = -($newElement.outerWidth() + 10);\n\n        this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addElementBtn.velocity(animateCss, 'fast');\n\n        this.addElements($newElement);\n\n        delete this.modal;\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function() {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var parameters = {\n                elementId: data.result.assetId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, data => {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var html = $(data.html);\n                    Craft.appendHeadHtml(data.headHtml);\n                    this.selectUploadedFile(Craft.getElementInfo(html));\n                }\n\n                // Last file\n                if (this.uploader.isLastUpload()) {\n                    this.progressBar.hideProgressBar();\n                    this.$container.removeClass('uploading');\n\n                    if (window.draftEditor) {\n                        window.draftEditor.checkForm();\n                    }\n                }\n            });\n\n            Craft.cp.runQueue();\n        }\n    },\n\n    /**\n     * We have to take into account files about to be added as well\n     */\n    canAddMoreFiles: function(slotsTaken) {\n        return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n    },\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend({\n    $selectTransformBtn: null,\n    _selectedTransform: null,\n\n    init: function(elementType, settings) {\n        settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n        this.base(elementType, settings);\n\n        if (settings.transforms.length) {\n            this.createSelectTransformButton(settings.transforms);\n        }\n    },\n\n    createSelectTransformButton: function(transforms) {\n        if (!transforms || !transforms.length) {\n            return;\n        }\n\n        var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n        this.$selectBtn.appendTo($btnGroup);\n\n        this.$selectTransformBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn disabled',\n            text: Craft.t('app', 'Select transform'),\n        }).appendTo($btnGroup);\n\n        var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n            $menuList = $('<ul></ul>').appendTo($menu);\n\n        for (var i = 0; i < transforms.length; i++) {\n            $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n        }\n\n        var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n            onOptionSelect: this.onSelectTransform.bind(this),\n        });\n        MenuButton.disable();\n\n        this.$selectTransformBtn.data('menuButton', MenuButton);\n    },\n\n    onSelectionChange: function(ev) {\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            allowTransforms = false;\n\n        if ($selectedElements.length && this.settings.transforms.length) {\n            allowTransforms = true;\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                    break;\n                }\n            }\n        }\n\n        var MenuBtn = null;\n\n        if (this.$selectTransformBtn) {\n            MenuBtn = this.$selectTransformBtn.data('menuButton');\n        }\n\n        if (allowTransforms) {\n            if (MenuBtn) {\n                MenuBtn.enable();\n            }\n\n            this.$selectTransformBtn.removeClass('disabled');\n        } else if (this.$selectTransformBtn) {\n            if (MenuBtn) {\n                MenuBtn.disable();\n            }\n\n            this.$selectTransformBtn.addClass('disabled');\n        }\n\n        this.base();\n    },\n\n    onSelectTransform: function(option) {\n        var transform = $(option).data('transform');\n        this.selectImagesWithTransform(transform);\n    },\n\n    selectImagesWithTransform: function(transform) {\n        // First we must get any missing transform URLs\n        if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n            Craft.AssetSelectorModal.transformUrls[transform] = {};\n        }\n\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            imageIdsWithMissingUrls = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $item = $($selectedElements[i]),\n                elementId = Craft.getElementInfo($item).id;\n\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                imageIdsWithMissingUrls.push(elementId);\n            }\n        }\n\n        if (imageIdsWithMissingUrls.length) {\n            this.showFooterSpinner();\n\n            this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, () => {\n                this.hideFooterSpinner();\n                this.selectImagesWithTransform(transform);\n            });\n        } else {\n            this._selectedTransform = transform;\n            this.selectElements();\n            this._selectedTransform = null;\n        }\n    },\n\n    fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n        var elementId = imageIdsWithMissingUrls.pop();\n\n        var data = {\n            assetId: elementId,\n            handle: transform\n        };\n\n        Craft.postActionRequest('assets/generate-transform', data, (response, textStatus) => {\n            Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n            if (textStatus === 'success') {\n                if (response.url) {\n                    Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                }\n            }\n\n            // More to load?\n            if (imageIdsWithMissingUrls.length) {\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n            } else {\n                callback();\n            }\n        });\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = this.base($selectedElements);\n\n        if (this._selectedTransform) {\n            for (var i = 0; i < info.length; i++) {\n                var elementId = info[i].id;\n\n                if (\n                    typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                    Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                ) {\n                    info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                }\n            }\n        }\n\n        return info;\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo, this._selectedTransform);\n    }\n}, {\n    defaults: {\n        canSelectImageTransforms: false,\n        transforms: []\n    },\n\n    transformUrls: {}\n});\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend({\n    remainingSessionTime: null,\n    checkRemainingSessionTimer: null,\n    showLoginModalTimer: null,\n    decrementLogoutWarningInterval: null,\n\n    showingLogoutWarningModal: false,\n    showingLoginModal: false,\n\n    logoutWarningModal: null,\n    loginModal: null,\n\n    $logoutWarningPara: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $loginBtn: null,\n    $loginErrorPara: null,\n\n    submitLoginIfLoggedOut: false,\n\n    /**\n     * Init\n     */\n    init: function() {\n        this.updateRemainingSessionTime(Craft.remainingSessionTime);\n    },\n\n    /**\n     * Sets a timer for the next time to check the auth timeout.\n     */\n    setCheckRemainingSessionTimer: function(seconds) {\n        if (this.checkRemainingSessionTimer) {\n            clearTimeout(this.checkRemainingSessionTimer);\n        }\n\n        this.checkRemainingSessionTimer = setTimeout(this.checkRemainingSessionTime.bind(this), seconds * 1000);\n    },\n\n    /**\n     * Pings the server to see how many seconds are left on the current user session, and handles the response.\n     */\n    checkRemainingSessionTime: function(extendSession) {\n        $.ajax({\n            url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n            type: 'GET',\n            dataType: 'json',\n            complete: (jqXHR, textStatus) => {\n                if (textStatus === 'success') {\n                    if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                        Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                    }\n\n                    this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                    this.submitLoginIfLoggedOut = false;\n                } else {\n                    this.updateRemainingSessionTime(-1);\n                }\n            },\n        });\n    },\n\n    /**\n     * Updates our record of the auth timeout, and handles it.\n     */\n    updateRemainingSessionTime: function(remainingSessionTime) {\n        this.remainingSessionTime = parseInt(remainingSessionTime);\n\n        // Are we within the warning window?\n        if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n            // Is there still time to renew the session?\n            if (this.remainingSessionTime) {\n                if (!this.showingLogoutWarningModal) {\n                    // Show the warning modal\n                    this.showLogoutWarningModal();\n                }\n\n                // Will the session expire before the next checkup?\n                if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                    if (this.showLoginModalTimer) {\n                        clearTimeout(this.showLoginModalTimer);\n                    }\n\n                    this.showLoginModalTimer = setTimeout(this.showLoginModal.bind(this), this.remainingSessionTime * 1000);\n                }\n            } else {\n                if (this.showingLoginModal) {\n                    if (this.submitLoginIfLoggedOut) {\n                        this.submitLogin();\n                    }\n                } else {\n                    // Show the login modal\n                    this.showLoginModal();\n                }\n            }\n\n            this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n        } else {\n            // Everything's good!\n            this.hideLogoutWarningModal();\n            this.hideLoginModal();\n\n            // Will be be within the minSafeSessionTime before the next update?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n            } else {\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the logout warning modal.\n     */\n    showLogoutWarningModal: function() {\n        var quickShow;\n\n        if (this.showingLoginModal) {\n            this.hideLoginModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLogoutWarningModal = true;\n\n        if (!this.logoutWarningModal) {\n            let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n            let $body = $('<div class=\"body\"/>').appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $logoutBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Log out now'),\n            }).appendTo($buttons);\n            let $renewSessionBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Keep me logged in'),\n            }).appendTo($buttons);\n\n            this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n            this.logoutWarningModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                onFadeIn: function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the renew button\n                        setTimeout(function() {\n                            $renewSessionBtn.trigger('focus');\n                        }, 100);\n                    }\n                }\n            });\n\n            this.addListener($logoutBtn, 'activate', 'logout');\n            this.addListener($form, 'submit', 'renewSession');\n        }\n\n        if (quickShow) {\n            this.logoutWarningModal.quickShow();\n        } else {\n            this.logoutWarningModal.show();\n        }\n\n        this.updateLogoutWarningMessage();\n\n        this.decrementLogoutWarningInterval = setInterval(this.decrementLogoutWarning.bind(this), 1000);\n    },\n\n    /**\n     * Updates the logout warning message indicating that the session is about to expire.\n     */\n    updateLogoutWarningMessage: function() {\n        this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n            time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n        }));\n\n        this.logoutWarningModal.updateSizeAndPosition();\n    },\n\n    decrementLogoutWarning: function() {\n        if (this.remainingSessionTime > 0) {\n            this.remainingSessionTime--;\n            this.updateLogoutWarningMessage();\n        }\n\n        if (this.remainingSessionTime === 0) {\n            clearInterval(this.decrementLogoutWarningInterval);\n        }\n    },\n\n    /**\n     * Hides the logout warning modal.\n     */\n    hideLogoutWarningModal: function(quick) {\n        this.showingLogoutWarningModal = false;\n\n        if (this.logoutWarningModal) {\n            if (quick) {\n                this.logoutWarningModal.quickHide();\n            } else {\n                this.logoutWarningModal.hide();\n            }\n\n            if (this.decrementLogoutWarningInterval) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the login modal.\n     */\n    showLoginModal: function() {\n        var quickShow;\n\n        if (this.showingLogoutWarningModal) {\n            this.hideLogoutWarningModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLoginModal = true;\n\n        if (!this.loginModal) {\n            var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$loginBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Login'),\n            }).appendTo($buttonContainer);\n            this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.loginModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark loginmodalshade',\n                onFadeIn: () => {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the password input\n                        setTimeout(() => {\n                            this.$passwordInput.trigger('focus');\n                        }, 100);\n                    }\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($form, 'submit', 'login');\n        }\n\n        if (quickShow) {\n            this.loginModal.quickShow();\n        } else {\n            this.loginModal.show();\n        }\n    },\n\n    /**\n     * Hides the login modal.\n     */\n    hideLoginModal: function(quick) {\n        this.showingLoginModal = false;\n\n        if (this.loginModal) {\n            if (quick) {\n                this.loginModal.quickHide();\n            } else {\n                this.loginModal.hide();\n            }\n        }\n    },\n\n    logout: function() {\n        $.get({\n            url: Craft.getActionUrl('users/logout'),\n            dataType: 'json',\n            success: () => {\n                Craft.redirectTo('');\n            },\n        });\n    },\n\n    renewSession: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        this.hideLogoutWarningModal();\n        this.checkRemainingSessionTime(true);\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$loginBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$loginBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    login: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.validatePassword()) {\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            if (typeof Craft.csrfTokenValue !== 'undefined') {\n                // Check the auth status one last time before sending this off,\n                // in case the user has already logged back in from another window/tab\n                this.submitLoginIfLoggedOut = true;\n                this.checkRemainingSessionTime();\n            } else {\n                this.submitLogin();\n            }\n        }\n    },\n\n    submitLogin: function() {\n        var data = {\n            loginName: Craft.username,\n            password: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/login', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.hideLoginModal();\n                    this.checkRemainingSessionTime();\n                } else {\n                    this.showLoginError(response.error);\n                    Garnish.shake(this.loginModal.$container);\n\n                    if (!Garnish.isMobileBrowser(true)) {\n                        this.$passwordInput.trigger('focus');\n                    }\n                }\n            } else {\n                this.showLoginError();\n            }\n        });\n    },\n\n    showLoginError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$loginErrorPara.text(error);\n        this.loginModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showLoginError('');\n    }\n}, {\n    checkInterval: 60,\n    minSafeSessionTime: 120\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend({\n    authManager: null,\n\n    $nav: null,\n    $mainContainer: null,\n    $alerts: null,\n    $crumbs: null,\n    $notificationContainer: null,\n    $main: null,\n    $primaryForm: null,\n    $headerContainer: null,\n    $header: null,\n    $mainContent: null,\n    $details: null,\n    $sidebarContainer: null,\n    $sidebar: null,\n    $contentContainer: null,\n    $edition: null,\n\n    $confirmUnloadForms: null,\n    $deltaForms: null,\n    $collapsibleTables: null,\n\n    fixedHeader: false,\n\n    tabManager: null,\n\n    enableQueue: true,\n    totalJobs: 0,\n    jobInfo: null,\n    displayedJobInfo: null,\n    displayedJobInfoUnchanged: 1,\n    trackJobProgressTimeout: null,\n    jobProgressIcon: null,\n\n    checkingForUpdates: false,\n    forcingRefreshOnUpdatesCheck: false,\n    includingDetailsOnUpdatesCheck: false,\n    checkForUpdatesCallbacks: null,\n\n    init: function() {\n        // Is this session going to expire?\n        if (Craft.remainingSessionTime !== 0) {\n            this.authManager = new Craft.AuthManager();\n        }\n\n        // Find all the key elements\n        this.$nav = $('#nav');\n        this.$mainContainer = $('#main-container');\n        this.$alerts = $('#alerts');\n        this.$crumbs = $('#crumbs');\n        this.$notificationContainer = $('#notifications');\n        this.$main = $('#main');\n        this.$primaryForm = $('#main-form');\n        this.$headerContainer = $('#header-container');\n        this.$header = $('#header');\n        this.$mainContent = $('#main-content');\n        this.$details = $('#details');\n        this.$sidebarContainer = $('#sidebar-container');\n        this.$sidebar = $('#sidebar');\n        this.$contentContainer = $('#content-container');\n        this.$collapsibleTables = $('table.collapsible');\n\n        this.updateSidebarMenuLabel();\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        if (this.$header.length) {\n            this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n            this.updateFixedHeader();\n        }\n\n        Garnish.$doc.ready(() => {\n            // Update responsive tables on window resize\n            this.addListener(Garnish.$win, 'resize', ev => {\n                // Ignore element resizes\n                if (ev.target === window) {\n                    this.handleWindowResize();\n                }\n            });\n            this.handleWindowResize();\n\n            // Fade the notification out two seconds after page load\n            var $errorNotifications = this.$notificationContainer.children('.error'),\n                $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n            $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n            $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n            // Wait a frame before initializing any confirm-unload forms,\n            // so other JS that runs on ready() has a chance to initialize\n            Garnish.requestAnimationFrame(this.initSpecialForms.bind(this));\n        });\n\n        // Alerts\n        if (this.$alerts.length) {\n            this.initAlerts();\n        }\n\n        // Toggles\n        this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n        this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n        // Does this page have a primary form?\n        if (!this.$primaryForm.length) {\n            this.$primaryForm = $('form[data-saveshortcut]:first');\n        }\n\n        // Does the primary form support the save shortcut?\n        if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n            let shortcuts = [];\n            let actions = this.$primaryForm.data('actions');\n            if (typeof actions === 'undefined') {\n                shortcuts.push([\n                    {\n                        keyCode: Garnish.S_KEY,\n                        ctrl: true,\n                    }, {\n                        redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                        retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                    }\n                ]);\n            } else {\n                for (let i = 0; i < actions.length; i++) {\n                    let action = actions[i];\n                    if (!action.shortcut) {\n                        continue;\n                    }\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                            shift: !!action.shift,\n                        }, {\n                            action: action.action,\n                            redirect: action.redirect,\n                            confirm: action.confirm,\n                            params: action.params,\n                            data: action.data,\n                            retainScroll: action.retainScroll,\n                        }\n                    ]);\n                }\n            }\n            for (let i = 0; i < shortcuts.length; i++) {\n                Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                    this.submitPrimaryForm(shortcuts[i][1]);\n                });\n            }\n        }\n\n        this.initTabs();\n\n        // Should we match the previous scroll position?\n        let scrollY = Craft.getLocalStorage('scrollY');\n        if (typeof scrollY !== 'undefined') {\n            Craft.removeLocalStorage('scrollY');\n            Garnish.$doc.ready(() => {\n                Garnish.requestAnimationFrame(() => {\n                    window.scrollTo(0, scrollY);\n                });\n            });\n        }\n\n        if ($.isTouchCapable()) {\n            this.$mainContainer.on('focus', 'input, textarea, .focusable-input', this._handleInputFocus.bind(this));\n            this.$mainContainer.on('blur', 'input, textarea, .focusable-input', this._handleInputBlur.bind(this));\n        }\n\n        // Announcements HUD\n        if (Craft.announcements.length) {\n            let $btn = $('#announcements-btn').removeClass('hidden');\n            const hasUnreads = Craft.announcements.some(a => a.unread);\n            if (hasUnreads) {\n                $btn.addClass('unread');\n            }\n            let hud;\n            this.addListener($btn, 'click', () => {\n                if (!hud) {\n                    let contents = '';\n                    Craft.group(Craft.announcements, 'timestamp').forEach(([announcements, timestamp]) => {\n                        announcements.forEach((a, i) => {\n                            contents += `<div class=\"announcement ${a.unread ? 'unread' : ''}\">` +\n                                (i === 0 ? `<div class=\"timestamp\">${a.timestamp}</div>` : '') +\n                                `<h2>${a.heading}</h2>` +\n                                `<p>${a.body}</p>` +\n                                '</div>';\n                        });\n                    });\n                    hud = new Garnish.HUD($btn, `<div id=\"announcements\">${contents}</div>`, {\n                        onShow: () => {\n                            $btn.addClass('active');\n                        },\n                        onHide: () => {\n                            $btn.removeClass('active');\n                        },\n                    });\n\n                    // Open outbound links in new windows\n                    $('a', hud.$main).each(function() {\n                        if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                            $(this).attr('rel', 'noopener').attr('target', '_blank')\n                        }\n                    });\n\n                    if (hasUnreads) {\n                        $btn.removeClass('unread');\n                        Craft.sendActionRequest('POST', 'users/mark-announcements-as-read', {\n                            data: {\n                                ids: Craft.announcements.map(a => a.id),\n                            },\n                        });\n                    }\n                } else {\n                    hud.show();\n                }\n            });\n        }\n    },\n\n    initSpecialForms: function() {\n        // Look for forms that we should watch for changes on\n        this.$confirmUnloadForms = $('form[data-confirm-unload]');\n        this.$deltaForms = $('form[data-delta]');\n\n        if (!this.$confirmUnloadForms.length) {\n            return;\n        }\n\n        var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n        var $form, serialized;\n\n        for (var i = 0; i < $forms.length; i++) {\n            $form = $forms.eq(i);\n            if (!$form.data('initialSerializedValue')) {\n                if (typeof $form.data('serializer') === 'function') {\n                    serialized = $form.data('serializer')();\n                } else {\n                    serialized = $form.serialize();\n                }\n                $form.data('initialSerializedValue', serialized);\n            }\n            this.addListener($form, 'submit', function(ev) {\n                if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                    this.removeListener(Garnish.$win, 'beforeunload');\n                }\n                if (Garnish.hasAttr($form, 'data-delta')) {\n                    ev.preventDefault();\n                    var serialized;\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                    Craft.createForm(data)\n                        .appendTo(Garnish.$bod)\n                        .submit();\n                }\n            });\n        }\n\n        this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n            var confirmUnload = false;\n            var $form, serialized;\n            if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                confirmUnload = true;\n            } else {\n                for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                    $form = this.$confirmUnloadForms.eq(i);\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    if ($form.data('initialSerializedValue') !== serialized) {\n                        confirmUnload = true;\n                        break;\n                    }\n                }\n            }\n\n            if (confirmUnload) {\n                var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                if (ev) {\n                    ev.originalEvent.returnValue = message;\n                } else {\n                    window.event.returnValue = message;\n                }\n\n                return message;\n            }\n        });\n    },\n\n    _handleInputFocus: function() {\n        this.updateFixedHeader();\n    },\n\n    _handleInputBlur: function() {\n        this.updateFixedHeader();\n    },\n\n    /**\n     * Submits a form.\n     * @param {Object} [options]\n     * @param {string} [options.action] The `action` param value override\n     * @param {string} [options.redirect] The `redirect` param value override\n     * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n     * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n     * @param {Object} [options.data] Additional data to be passed to the submit event\n     * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n     */\n    submitPrimaryForm: function(options) {\n        // Give other stuff on the page a chance to prepare\n        this.trigger('beforeSaveShortcut');\n\n        if (typeof options !== 'object' || !$.isPlainObject(options)) {\n            options = {};\n        }\n\n        if (!options.redirect) {\n            options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n        }\n\n        if (!options.data) {\n            options.data = {};\n        }\n        options.data.saveShortcut = true;\n\n        Craft.submitForm(this.$primaryForm, options);\n    },\n\n    updateSidebarMenuLabel: function() {\n        var $item = this.$sidebar.find('a.sel:first');\n        var $label = $item.children('.label');\n        $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n        Garnish.$bod.removeClass('showing-sidebar');\n    },\n\n    toggleNav: function() {\n        Garnish.$bod.toggleClass('showing-nav');\n    },\n\n    toggleSidebar: function() {\n        Garnish.$bod.toggleClass('showing-sidebar');\n    },\n\n    initTabs: function() {\n        if (this.tabManager) {\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        const $tabs = $('#tabs');\n        if (!$tabs.length) {\n            return;\n        }\n\n        this.tabManager = new Craft.Tabs($tabs);\n\n        this.tabManager.on('selectTab', ev => {\n            const href = ev.$tab.attr('href');\n\n            // Show its content area\n            if (href.charAt(0) === '#') {\n                $(href).removeClass('hidden');\n            }\n\n            // Trigger a resize event to update any UI components that are listening for it\n            Garnish.$win.trigger('resize');\n\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n\n            // If there is a revision menu, set its links to this tab ID\n            if (href && href.charAt(0) === '#') {\n                const menuBtn = $('#context-btn').menubtn().data('menubtn');\n                if (menuBtn) {\n                    for (let i = 0; i < menuBtn.menu.$options.length; i++) {\n                        let a = menuBtn.menu.$options[i];\n                        if (a.href) {\n                            a.href = a.href.match(/^[^#]*/)[0] + href;\n                        }\n                    }\n                }\n            }\n\n            if (typeof history !== 'undefined') {\n                // Delay changing the hash so it doesn't cause the browser to jump on page load\n                Garnish.requestAnimationFrame(() => {\n                    history.replaceState(undefined, undefined, href);\n                });\n            }\n        });\n\n        this.tabManager.on('deselectTab', ev => {\n            if (ev.$tab.attr('href').charAt(0) === '#') {\n                // Hide its content area\n                $(ev.$tab.attr('href')).addClass('hidden');\n            }\n        });\n\n        if (window.LOCATION_HASH) {\n            const $tab = this.tabManager.$tabs.filter(`[href=\"#${window.LOCATION_HASH}\"]`);\n            if ($tab.length) {\n                this.tabManager.selectTab($tab);\n            }\n        }\n    },\n\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsContainer() {\n        return this.tabManager ? this.tabManager.$container : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsList() {\n        return this.tabManager ? this.tabManager.$ul : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabs() {\n        return this.tabManager ? this.tabManager.$ul.find('> li') : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $selectedTab() {\n        return this.tabManager ? this.tabManager.$selectedTab : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get selectedTabIndex() {\n        return this.tabManager ? this.tabManager.$tabs.index(this.tabManager.$selectedTab) : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $focusableTab() {\n        return this.tabManager ? this.tabManager.$focusableTab : undefined;\n    },\n    /**\n     * @param {object} tab\n     * @deprecated in 3.7.0\n     */\n    selectTab: function(tab) {\n        if (this.tabManager) {\n            this.tabManager.selectTab(tab);\n        }\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    deselectTab: function() {\n        if (this.tabManager) {\n            this.tabManager.deselectTab();\n        }\n    },\n\n    handleWindowResize: function() {\n        this.updateResponsiveTables();\n    },\n\n    updateResponsiveTables: function() {\n        for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n            this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n            this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n            this.updateResponsiveTables._check = false;\n\n            if (this.updateResponsiveTables._containerWidth > 0) {\n                // Is this the first time we've checked this table?\n                if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                    this.updateResponsiveTables._check = true;\n                } else {\n                    this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                    // Getting wider?\n                    if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                        if (this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._$table.removeClass('collapsed');\n                            this.updateResponsiveTables._check = true;\n                        }\n                    } else if (!this.updateResponsiveTables._isCollapsed) {\n                        this.updateResponsiveTables._check = true;\n                    }\n                }\n\n                // Are we checking the table width?\n                if (this.updateResponsiveTables._check) {\n                    if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                        this.updateResponsiveTables._$table.addClass('collapsed');\n                    }\n                }\n\n                // Remember the container width for next time\n                this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n            }\n        }\n    },\n\n    updateFixedHeader: function() {\n        // Have we scrolled passed the top of #main?\n        if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n            if (!this.fixedHeader) {\n                var headerHeight = this.$headerContainer.height();\n\n                // Hard-set the minimum content container height\n                this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                // Hard-set the header container height\n                this.$headerContainer.height(headerHeight);\n                Garnish.$bod.addClass('fixed-header');\n\n                // Fix the sidebar and details pane positions if they are taller than #content-container\n                var contentHeight = this.$contentContainer.outerHeight();\n                var $detailsHeight = this.$details.outerHeight();\n                var css = {\n                    top: headerHeight + 'px',\n                    'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                };\n                this.$sidebar.addClass('fixed').css(css);\n                this.$details.addClass('fixed').css(css);\n                this.fixedHeader = true;\n            }\n        } else if (this.fixedHeader) {\n            this.$headerContainer.height('auto');\n            Garnish.$bod.removeClass('fixed-header');\n            this.$contentContainer.css('min-height', '');\n            this.$sidebar.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.$details.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.fixedHeader = false;\n        }\n    },\n\n    /**\n     * Dispays a notification.\n     *\n     * @param {string} type\n     * @param {string} message\n     */\n    displayNotification: function(type, message) {\n        var notificationDuration = Craft.CP.notificationDuration;\n\n        if (['cp-error', 'error'].includes(type)) {\n            notificationDuration *= 2;\n            icon = 'alert';\n            label = Craft.t('app', 'Error');\n        } else {\n            icon = 'info';\n            label = Craft.t('app', 'Notice');\n        }\n\n        var $notification = $(`\n            <div class=\"notification ${ type.replace('cp-', '') }\">\n                <span data-icon=\"${ icon }\" aria-label=\"${ label }\"></span>\n                ${ message }\n            </div>\n            `)\n            .appendTo(this.$notificationContainer);\n\n        var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n        $notification\n            .hide()\n            .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n            .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n            .delay(notificationDuration)\n            .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                complete: function() {\n                    $notification.remove();\n                }\n            });\n\n        this.trigger('displayNotification', {\n            notificationType: type,\n            message: message\n        });\n    },\n\n    /**\n     * Displays a notice.\n     *\n     * @param {string} message\n     */\n    displayNotice: function(message) {\n        this.displayNotification('notice', message);\n    },\n\n    /**\n     * Displays an error.\n     *\n     * @param {string} message\n     */\n    displayError: function(message) {\n        if (!message) {\n            message = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.displayNotification('error', message);\n    },\n\n    fetchAlerts: function() {\n        var data = {\n            path: Craft.path\n        };\n\n        Craft.queueActionRequest('app/get-cp-alerts', data, this.displayAlerts.bind(this));\n    },\n\n    displayAlerts: function(alerts) {\n        this.$alerts.remove();\n\n        if (Garnish.isArray(alerts) && alerts.length) {\n            this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n            for (var i = 0; i < alerts.length; i++) {\n                $(`<li><span data-icon=\"alert\" aria-label=\"${ Craft.t('app', 'Error') }\"></span> ${ alerts[i] }</li>`).appendTo(this.$alerts);\n            }\n\n            var height = this.$alerts.outerHeight();\n            this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n            this.initAlerts();\n        }\n    },\n\n    initAlerts: function() {\n        // Are there any shunnable alerts?\n        var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n        for (var i = 0; i < $shunnableAlerts.length; i++) {\n            this.addListener($shunnableAlerts[i], 'click', ev => {\n                ev.preventDefault();\n\n                var $link = $(ev.currentTarget);\n\n                var data = {\n                    message: $link.prop('className').substr(5)\n                };\n\n                Craft.queueActionRequest('app/shun-cp-alert', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            $link.parent().remove();\n                        } else {\n                            this.displayError(response.error);\n                        }\n                    }\n                });\n            });\n        }\n    },\n\n    checkForUpdates: function(forceRefresh, includeDetails, callback) {\n        // Make 'includeDetails' optional\n        if (typeof includeDetails === 'function') {\n            callback = includeDetails;\n            includeDetails = false;\n        }\n\n        // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n        // then just set a new callback that re-checks for updates when the current one is done.\n        if (this.checkingForUpdates && (\n            (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n            (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n        )) {\n            var realCallback = callback;\n            callback = () => {\n                this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n            };\n        }\n\n        // Callback function?\n        if (typeof callback === 'function') {\n            if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                this.checkForUpdatesCallbacks = [];\n            }\n\n            this.checkForUpdatesCallbacks.push(callback);\n        }\n\n        if (!this.checkingForUpdates) {\n            this.checkingForUpdates = true;\n            this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n            this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n            this._checkForUpdates(forceRefresh, includeDetails)\n                .then(info => {\n                    this.updateUtilitiesBadge();\n                    this.checkingForUpdates = false;\n\n                    if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                        var callbacks = this.checkForUpdatesCallbacks;\n                        this.checkForUpdatesCallbacks = null;\n\n                        for (var i = 0; i < callbacks.length; i++) {\n                            callbacks[i](info);\n                        }\n                    }\n\n                    this.trigger('checkForUpdates', {\n                        updateInfo: info\n                    });\n                });\n        }\n    },\n\n    _checkForUpdates: function(forceRefresh, includeDetails) {\n        return new Promise((resolve, reject) => {\n            if (!forceRefresh) {\n                this._checkForCachedUpdates(includeDetails)\n                    .then(info => {\n                        if (info.cached !== false) {\n                            resolve(info);\n                        }\n\n                        this._getUpdates(includeDetails)\n                            .then(info => {\n                                resolve(info);\n                            });\n                    });\n            } else {\n                this._getUpdates(includeDetails)\n                    .then(info => {\n                        resolve(info);\n                    });\n            }\n        });\n    },\n\n    _checkForCachedUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            var data = {\n                onlyIfCached: true,\n                includeDetails: includeDetails,\n            };\n            Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    resolve({cached: false});\n                }\n            });\n        });\n    },\n\n    _getUpdates: function(includeDetails) {\n        return new Promise((resolve, reject) => {\n            Craft.sendApiRequest('GET', 'updates')\n                .then(updates => {\n                    this._cacheUpdates(updates, includeDetails).then(resolve);\n                })\n                .catch(e => {\n                    this._cacheUpdates({}).then(resolve);\n                });\n        });\n    },\n\n    _cacheUpdates: function(updates, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.postActionRequest('app/cache-updates', {\n                updates: updates,\n                includeDetails: includeDetails,\n            }, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    reject();\n                }\n            }, {\n                contentType: 'json'\n            });\n        });\n    },\n\n    updateUtilitiesBadge: function() {\n        var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n        // Ignore if there is no (non-selected) Utilities nav item\n        if (!$utilitiesLink.length) {\n            return;\n        }\n\n        Craft.queueActionRequest('app/get-utilities-badge-count', response => {\n            // Get the existing utility nav badge, if any\n            var $badge = $utilitiesLink.children('.badge');\n\n            if (response.badgeCount) {\n                if (!$badge.length) {\n                    $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                }\n                $badge.text(response.badgeCount);\n            } else if ($badge.length) {\n                $badge.remove();\n            }\n        });\n    },\n\n    runQueue: function() {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        if (Craft.runQueueAutomatically) {\n            Craft.queueActionRequest('queue/run', (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this.trackJobProgress(false, true);\n                }\n            });\n        } else {\n            this.trackJobProgress(false, true);\n        }\n    },\n\n    trackJobProgress: function(delay, force) {\n        if (force && this.trackJobProgressTimeout) {\n            clearTimeout(this.trackJobProgressTimeout);\n            this.trackJobProgressTimeout = null;\n        }\n\n        // Ignore if we're already tracking jobs, or the queue is disabled\n        if (this.trackJobProgressTimeout || !this.enableQueue) {\n            return;\n        }\n\n        if (delay === true) {\n            // Determine the delay based on how long the displayed job info has remained unchanged\n            var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n            this.trackJobProgressTimeout = setTimeout(this._trackJobProgressInternal.bind(this), timeout);\n        } else {\n            this._trackJobProgressInternal();\n        }\n    },\n\n    _trackJobProgressInternal: function() {\n        Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.trackJobProgressTimeout = null;\n                this.totalJobs = response.total;\n                this.setJobInfo(response.jobs);\n\n                if (this.jobInfo.length) {\n                    // Check again after a delay\n                    this.trackJobProgress(true);\n                }\n            }\n        });\n    },\n\n    setJobInfo: function(jobInfo) {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        this.jobInfo = jobInfo;\n\n        // Update the displayed job info\n        var oldInfo = this.displayedJobInfo;\n        this.displayedJobInfo = this.getDisplayedJobInfo();\n\n        // Same old same old?\n        if (\n            oldInfo &&\n            this.displayedJobInfo &&\n            oldInfo.id === this.displayedJobInfo.id &&\n            oldInfo.progress === this.displayedJobInfo.progress &&\n            oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n            oldInfo.status === this.displayedJobInfo.status\n        ) {\n            this.displayedJobInfoUnchanged++;\n        } else {\n            // Reset the counter\n            this.displayedJobInfoUnchanged = 1;\n        }\n\n        this.updateJobIcon();\n\n        // Fire a setJobInfo event\n        this.trigger('setJobInfo');\n    },\n\n    /**\n     * Returns info for the job that should be displayed in the CP sidebar\n     */\n    getDisplayedJobInfo: function() {\n        if (!this.enableQueue) {\n            return null;\n        }\n\n        // Set the status preference order\n        var statuses = [\n            Craft.CP.JOB_STATUS_RESERVED,\n            Craft.CP.JOB_STATUS_FAILED,\n            Craft.CP.JOB_STATUS_WAITING\n        ];\n\n        for (var i = 0; i < statuses.length; i++) {\n            for (var j = 0; j < this.jobInfo.length; j++) {\n                if (\n                    this.jobInfo[j].status === statuses[i] &&\n                    (statuses[i] !== Craft.CP.JOB_STATUS_WAITING || !this.jobInfo[j].delay)\n                ) {\n                    return this.jobInfo[j];\n                }\n            }\n        }\n\n        return null;\n    },\n\n    updateJobIcon: function() {\n        if (!this.enableQueue || !this.$nav.length) {\n            return;\n        }\n\n        if (this.displayedJobInfo) {\n            if (!this.jobProgressIcon) {\n                this.jobProgressIcon = new JobProgressIcon();\n            }\n\n            if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n            } else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n            }\n        } else {\n            if (this.jobProgressIcon) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.complete();\n                delete this.jobProgressIcon;\n            }\n        }\n    },\n\n    /**\n     * Returns the active site for the control panel\n     *\n     * @return {number}\n     */\n    getSiteId: function() {\n        // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n        let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n        if (typeof siteId !== 'undefined') {\n            Craft.removeLocalStorage('BaseElementIndex.siteId');\n            this.setSiteId(siteId);\n            return siteId;\n        }\n        return Craft.getCookie('siteId');\n    },\n\n    /**\n     * Sets the active site for the control panel\n     * @param {number} siteId\n     */\n    setSiteId: function(siteId) {\n        Craft.setCookie('siteId', siteId, {\n            maxAge: 31536000 // 1 year\n        });\n    }\n}, {\n    //maxWidth: 1051, //1024,\n    notificationDuration: 2000,\n\n    JOB_STATUS_WAITING: 1,\n    JOB_STATUS_RESERVED: 2,\n    JOB_STATUS_DONE: 3,\n    JOB_STATUS_FAILED: 4\n});\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend({\n    $li: null,\n    $a: null,\n    $label: null,\n    $progressLabel: null,\n\n    progress: null,\n    failMode: false,\n\n    _$bgCanvas: null,\n    _$staticCanvas: null,\n    _$hoverCanvas: null,\n    _$failCanvas: null,\n\n    _staticCtx: null,\n    _hoverCtx: null,\n    _canvasSize: null,\n    _arcPos: null,\n    _arcRadius: null,\n    _lineWidth: null,\n\n    _arcStartPos: 0,\n    _arcEndPos: 0,\n    _arcStartStepSize: null,\n    _arcEndStepSize: null,\n    _arcStep: null,\n    _arcStepTimeout: null,\n    _arcAnimateCallback: null,\n\n    _progressBar: null,\n\n    init: function() {\n        this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n        this.$a = $('<a/>', {\n            id: 'job-icon',\n            href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n        }).appendTo(this.$li);\n        this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n        var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n        this.$label = $('<span/>').appendTo($labelContainer);\n        this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n        let m = (window.devicePixelRatio > 1 ? 2 : 1);\n        this._canvasSize = 18 * m;\n        this._arcPos = this._canvasSize / 2;\n        this._arcRadius = 7 * m;\n        this._lineWidth = 3 * m;\n\n        this._$bgCanvas = this._createCanvas('bg', '#61666b');\n        this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n        this._$hoverCanvas = this._createCanvas('hover', '#fff');\n        this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n        this._staticCtx = this._$staticCanvas[0].getContext('2d');\n        this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n        this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n        this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n    },\n\n    setDescription: function(description, progressLabel) {\n        this.$a.attr('title', description);\n        this.$label.text(description);\n        if (progressLabel) {\n            this.$progressLabel.text(progressLabel).show();\n        } else {\n            this.$progressLabel.hide();\n        }\n    },\n\n    setProgress: function(progress) {\n        if (progress == 0) {\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n        } else {\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            if (this.progress && progress > this.progress) {\n                this._animateArc(0, progress / 100);\n            } else {\n                this._setArc(0, progress / 100);\n            }\n        }\n\n        this.progress = progress;\n    },\n\n    complete: function() {\n        this._animateArc(0, 1, () => {\n            this._$bgCanvas.velocity('fadeOut');\n\n            this._animateArc(1, 1, () => {\n                this.$a.remove();\n                this.destroy();\n            });\n        });\n    },\n\n    showFailMode: function(message) {\n        if (this.failMode) {\n            return;\n        }\n\n        this.failMode = true;\n        this.progress = null;\n\n        this._$bgCanvas.hide();\n        this._$staticCanvas.hide();\n        this._$hoverCanvas.hide();\n        this._$failCanvas.show();\n\n        this.setDescription(message);\n    },\n\n    hideFailMode: function() {\n        if (!this.failMode) {\n            return;\n        }\n\n        this.failMode = false;\n\n        this._$bgCanvas.show();\n        this._$staticCanvas.show();\n        this._$hoverCanvas.show();\n        this._$failCanvas.hide();\n    },\n\n    _createCanvas: function(id, color) {\n        var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n            ctx = $canvas[0].getContext('2d');\n\n        ctx.strokeStyle = color;\n        ctx.lineWidth = this._lineWidth;\n        ctx.lineCap = 'round';\n        return $canvas;\n    },\n\n    _setArc: function(startPos, endPos) {\n        this._arcStartPos = startPos;\n        this._arcEndPos = endPos;\n\n        this._drawArc(this._staticCtx, startPos, endPos);\n        this._drawArc(this._hoverCtx, startPos, endPos);\n    },\n\n    _drawArc: function(ctx, startPos, endPos) {\n        ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n        ctx.beginPath();\n        ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n    },\n\n    _animateArc: function(targetStartPos, targetEndPos, callback) {\n        if (this._arcStepTimeout) {\n            clearTimeout(this._arcStepTimeout);\n        }\n\n        this._arcStep = 0;\n        this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n        this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n        this._arcAnimateCallback = callback;\n        this._takeNextArcStep();\n    },\n\n    _takeNextArcStep: function() {\n        this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n        this._arcStep++;\n\n        if (this._arcStep < 10) {\n            this._arcStepTimeout = setTimeout(this._takeNextArcStep.bind(this), 50);\n        } else if (this._arcAnimateCallback) {\n            this._arcAnimateCallback();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend({\n    editableGroups: null,\n    $newCategoryBtnGroup: null,\n    $newCategoryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible groups the user has permission to create new categories in\n        this.editableGroups = [];\n\n        for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n            var group = Craft.editableCategoryGroups[i];\n\n            if (this.getSourceByKey('group:' + group.uid)) {\n                this.editableGroups.push(group);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific category group in the URL?\n        if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n\n                if ($source.data('handle') === defaultGroupHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        // Get the handle of the selected source\n        var selectedSourceHandle = this.$source.data('handle');\n\n        var i, href, label;\n\n        // Update the New Category button\n        // ---------------------------------------------------------------------\n\n        if (this.editableGroups.length) {\n            // Remove the old button, if there is one\n            if (this.$newCategoryBtnGroup) {\n                this.$newCategoryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a group that they have permission to create categories in\n            var selectedGroup;\n\n            if (selectedSourceHandle) {\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    if (this.editableGroups[i].handle === selectedSourceHandle) {\n                        selectedGroup = this.editableGroups[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n            // Otherwise only show a menu button\n            if (selectedGroup) {\n                href = this._getGroupTriggerHref(selectedGroup);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                        this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.editableGroups.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n            } else {\n                this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New category'),\n                }).appendTo(this.$newCategoryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    var group = this.editableGroups[i];\n\n                    if (this.settings.context === 'index' || group !== selectedGroup) {\n                        href = this._getGroupTriggerHref(group);\n                        label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newCategoryBtnGroup);\n        }\n\n        // Update the URL if we're on the Categories index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'categories';\n\n            if (selectedSourceHandle) {\n                uri += '/' + selectedSourceHandle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getGroupTriggerHref: function(group) {\n        if (this.settings.context === 'index') {\n            var uri = 'categories/' + group.handle + '/new';\n            if (this.siteId && this.siteId != Craft.primarySiteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        uri += '/' + Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri) + '\"';\n        } else {\n            return 'data-id=\"' + group.id + '\"';\n        }\n    },\n\n    _openCreateCategoryModal: function(groupId) {\n        if (this.$newCategoryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the group\n        var group;\n\n        for (var i = 0; i < this.editableGroups.length; i++) {\n            if (this.editableGroups[i].id == groupId) {\n                group = this.editableGroups[i];\n                break;\n            }\n        }\n\n        if (!group) {\n            return;\n        }\n\n        this.$newCategoryBtn.addClass('inactive');\n        var newCategoryBtnText = this.$newCategoryBtn.text();\n        this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newCategoryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                groupId: groupId\n            },\n            onHideHud: () => {\n                this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right group is selected\n                var groupSourceKey = 'group:' + group.uid;\n\n                if (this.sourceKey !== groupSourceKey) {\n                    this.selectSourceByKey(groupSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend({\n    setSettings: function() {\n        this.base.apply(this, arguments);\n        this.settings.sortable = false;\n    },\n\n    getModalSettings: function() {\n        var settings = this.base();\n        settings.hideOnSelect = false;\n        return settings;\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.find('.element');\n    },\n\n    onModalSelect: function(elements) {\n        // Disable the modal\n        this.modal.disable();\n        this.modal.disableCancelBtn();\n        this.modal.disableSelectBtn();\n        this.modal.showFooterSpinner();\n\n        // Get the new category HTML\n        var selectedCategoryIds = this.getSelectedElementIds();\n\n        for (var i = 0; i < elements.length; i++) {\n            selectedCategoryIds.push(elements[i].id);\n        }\n\n        var data = {\n            categoryIds: selectedCategoryIds,\n            siteId: elements[0].siteId,\n            id: this.settings.id,\n            name: this.settings.name,\n            branchLimit: this.settings.branchLimit,\n            selectionLabel: this.settings.selectionLabel\n        };\n\n        Craft.postActionRequest('elements/get-categories-input-html', data, (response, textStatus) => {\n            this.modal.enable();\n            this.modal.enableCancelBtn();\n            this.modal.enableSelectBtn();\n            this.modal.hideFooterSpinner();\n\n            if (textStatus === 'success') {\n                var $newInput = $(response.html),\n                    $newElementsContainer = $newInput.children('.elements');\n\n                this.$elementsContainer.replaceWith($newElementsContainer);\n                this.$elementsContainer = $newElementsContainer;\n                this.resetElements();\n\n                var filteredElements = [];\n\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i],\n                        $element = this.getElementById(element.id);\n\n                    if ($element) {\n                        this.animateElementIntoPlace(element.$element, $element);\n                        filteredElements.push(element);\n                    }\n                }\n\n                this.updateDisabledElementsInModal();\n                this.modal.hide();\n                this.onSelectElements(filteredElements);\n            }\n        });\n    },\n\n    removeElement: function($element) {\n        // Find any descendants this category might have\n        var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n        // Remove our record of them all at once\n        this.removeElements($allCategories);\n\n        // Animate them away one at a time\n        for (var i = 0; i < $allCategories.length; i++) {\n            this._animateCategoryAway($allCategories, i);\n        }\n    },\n\n    _animateCategoryAway: function($allCategories, i) {\n        var callback;\n\n        // Is this the last one?\n        if (i === $allCategories.length - 1) {\n            callback = () => {\n                var $li = $allCategories.first().parent().parent(),\n                    $ul = $li.parent();\n\n                if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                    $li.remove();\n                } else {\n                    $ul.remove();\n                }\n            };\n        }\n\n        var func = () => {\n            this.animateElementAway($allCategories.eq(i), callback);\n        };\n\n        if (i === 0) {\n            func();\n        } else {\n            setTimeout(func, 100 * i);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend({\n    columns: null,\n    rows: null,\n\n    init: function(data) {\n        let columns = data.columns;\n        let rows = data.rows;\n\n        rows.forEach(d => {\n            $.each(d, function(cellIndex) {\n                var column = columns[cellIndex];\n\n                var parseTime;\n\n                switch (column.type) {\n                    case 'date':\n                        parseTime = d3.timeParse('%Y-%m-%d');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'datetime':\n                        parseTime = d3.timeParse('%Y-%m-%d %H:00:00');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'percent':\n                        d[cellIndex] = d[cellIndex] / 100;\n                        break;\n\n                    case 'number':\n                        d[cellIndex] = +d[cellIndex];\n                        break;\n\n                    default:\n                    // do nothing\n                }\n            });\n        });\n\n        this.columns = columns;\n        this.rows = rows;\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend({\n    $container: null,\n    $tip: null,\n\n    init: function($container) {\n        this.$container = $container;\n\n        this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n        this.hide();\n    },\n\n    setContent: function(html) {\n        this.$tip.html(html);\n    },\n\n    setPosition: function(position) {\n        this.$tip.css('left', `${position.left}px`);\n        this.$tip.css('top', `${position.top}px`);\n    },\n\n    show: function() {\n        this.$tip.css('display', 'block');\n    },\n\n    hide: function() {\n        this.$tip.css('display', 'none');\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend({\n    $container: null,\n    $chart: null,\n\n    chartBaseClass: 'cp-chart',\n    dataTable: null,\n\n    formatLocale: null,\n    timeFormatLocale: null,\n    orientation: null,\n\n    svg: null,\n    width: null,\n    height: null,\n\n    init: function(container, settings) {\n        this.$container = container;\n\n        this.setSettings(Craft.charts.BaseChart.defaults);\n        this.setSettings(settings);\n\n        var globalSettings = {\n            formats: window.d3Formats,\n            formatLocaleDefinition: window.d3FormatLocaleDefinition,\n            timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n        };\n\n        this.setSettings(globalSettings);\n\n        d3.select(window).on('resize', () => {\n            this.resize();\n        });\n    },\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n    },\n\n    draw: function(dataTable, settings) {\n        // Settings and chart attributes\n\n        this.setSettings(settings);\n\n        this.dataTable = dataTable;\n        this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n        this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n        this.orientation = this.settings.orientation;\n\n        // Set (or reset) the chart element\n\n        if (this.$chart) {\n            this.$chart.remove();\n        }\n\n        var className = this.chartBaseClass;\n\n        if (this.settings.chartClass) {\n            className += ' ' + this.settings.chartClass;\n        }\n\n        this.$chart = $(`<div class=\"${className}\" />`).appendTo(this.$container);\n    },\n\n    resize: function() {\n        this.draw(this.dataTable, this.settings);\n    },\n\n    onAfterDrawTicks: function() {\n        // White border for ticks' text\n        $('.tick', this.$chart).each(function(tickKey, tick) {\n            var $tickText = $('text', tick);\n\n            var $clone = $tickText.clone();\n            $clone.appendTo(tick);\n\n            $tickText.attr('stroke', '#ffffff');\n            $tickText.attr('stroke-width', 3);\n        });\n    }\n}, {\n    defaults: {\n        formatLocaleDefinition: null,\n        timeFormatLocaleDefinition: null,\n        formats: {\n            numberFormat: ',.2f',\n            percentFormat: ',.2%',\n            currencyFormat: '$,.2f',\n            shortDateFormats: {\n                day: '%-m/%-d',\n                month: '%-m/%y',\n                year: '%Y'\n            }\n        },\n        margin: {top: 0, right: 0, bottom: 0, left: 0},\n        chartClass: null,\n        colors: ['#0594D1', '#DE3800', '#FF9A00', '#009802', '#9B009B']\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend({\n    tip: null,\n    drawingArea: null,\n\n    init: function(container, settings) {\n        this.base(container, Craft.charts.Area.defaults);\n\n        this.setSettings(settings);\n    },\n\n    draw: function(dataTable, settings) {\n        this.base(dataTable, settings);\n\n        if (this.tip) {\n            this.tip = null;\n        }\n\n        var margin = this.getChartMargin();\n\n        this.width = this.$chart.width() - margin.left - margin.right;\n        this.height = this.$chart.height() - margin.top - margin.bottom;\n\n        // Append SVG to chart element\n\n        var svg = {\n            width: this.width + (margin.left + margin.right),\n            height: this.height + (margin.top + margin.bottom),\n            translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n            translateY: margin.top\n        };\n\n        this.svg = d3.select(this.$chart.get(0)).append('svg')\n            .attr('width', svg.width)\n            .attr('height', svg.height);\n\n        this.drawingArea = this.svg.append('g')\n            .attr('transform', `translate(${svg.translateX},${svg.translateY})`);\n\n        // Draw elements\n\n        this.drawTicks();\n        this.drawAxes();\n        this.drawChart();\n        this.drawTipTriggers();\n    },\n\n    drawTicks: function() {\n        // Draw X ticks\n\n        var x = this.getX(true);\n        var xTicks = 3;\n        var xAxis = d3.axisBottom(x)\n            .tickFormat(this.getXFormatter())\n            .ticks(xTicks);\n\n        this.drawingArea.append('g')\n            .attr('class', 'x ticks-axis')\n            .attr('transform', `translate(0, ${this.height})`)\n            .call(xAxis);\n\n        // Draw Y ticks\n\n        var y = this.getY();\n        var yTicks = 2;\n        var yAxis;\n\n        if (this.orientation !== 'rtl') {\n            yAxis = d3.axisLeft(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .call(yAxis);\n        } else {\n            yAxis = d3.axisRight(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .attr('transform', `translate(${this.width},0)`)\n                .call(yAxis);\n        }\n\n        // On after draw ticks\n\n        this.onAfterDrawTicks();\n    },\n\n    drawAxes: function() {\n        if (this.settings.xAxis.showAxis) {\n            var x = this.getX();\n            var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n            this.drawingArea.append('g')\n                .attr('class', 'x axis')\n                .attr('transform', `translate(0, ${this.height})`)\n                .call(xAxis);\n        }\n\n        if (this.settings.yAxis.showAxis) {\n            var y = this.getY();\n            var chartPadding = 0;\n            var yAxis;\n\n            if (this.orientation === 'rtl') {\n                yAxis = d3.axisLeft(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${this.width - chartPadding}, 0)`)\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${chartPadding}, 0)`)\n                    .call(yAxis);\n            }\n        }\n    },\n\n    drawChart: function() {\n        var x = this.getX(true);\n        var y = this.getY();\n\n        // X & Y grid lines\n\n        if (this.settings.xAxis.gridlines) {\n            var xLineAxis = d3.axisBottom(x);\n\n            this.drawingArea.append('g')\n                .attr('class', 'x grid-line')\n                .attr('transform', `translate(0,${this.height})`)\n                .call(xLineAxis\n                    .tickSize(-this.height, 0, 0)\n                    .tickFormat('')\n                );\n        }\n\n        var yTicks = 2;\n\n        if (this.settings.yAxis.gridlines) {\n            var yLineAxis = d3.axisLeft(y);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y grid-line')\n                .attr('transform', 'translate(0 , 0)')\n                .call(yLineAxis\n                    .tickSize(-(this.width), 0)\n                    .tickFormat('')\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks)\n                );\n        }\n\n        // Line\n\n        var line = d3.line()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-line')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', 'none')\n            .style('stroke', this.settings.colors[0])\n            .style('stroke-width', '3px')\n            .attr('d', line);\n\n        // Area\n\n        var area = d3.area()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y0(this.height)\n            .y1(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-area')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', this.settings.colors[0])\n            .style('fill-opacity', '0.3')\n            .attr('d', area);\n\n        // Plots\n\n        if (this.settings.plots) {\n            this.drawingArea.append('g')\n                .attr('class', 'plots')\n                .selectAll('circle')\n                .data(this.dataTable.rows)\n                .enter()\n                .append('circle')\n                .style('fill', this.settings.colors[0])\n                .attr('class', (d, index) => `plot plot-${index}`)\n                .attr('r', 4)\n                .attr('cx', d => x(d[0]))\n                .attr('cy', d => y(d[1]));\n        }\n    },\n\n    drawTipTriggers: function() {\n        if (this.settings.tips) {\n            if (!this.tip) {\n                this.tip = new Craft.charts.Tip(this.$chart);\n            }\n\n            // Define xAxisTickInterval\n\n            var chartMargin = this.getChartMargin();\n            var tickSizeOuter = 6;\n            var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n            var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n            // Tip trigger width\n\n            var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n            // Draw triggers\n\n            var x = this.getX(true);\n            var y = this.getY();\n\n            this.drawingArea.append('g')\n                .attr('class', 'tip-triggers')\n                .selectAll('rect')\n                .data(this.dataTable.rows)\n                .enter().append('rect')\n                .attr('class', 'tip-trigger')\n                .style('fill', 'transparent')\n                .style('fill-opacity', '1')\n                .attr('width', tipTriggerWidth)\n                .attr('height', this.height)\n                .attr('x', d => x(d[0]) - tipTriggerWidth / 2)\n                .on('mouseover', (d, index) => {\n                    // Expand plot\n\n                    this.drawingArea.select('.plot-' + index).attr('r', 5);\n\n                    // Set tip content\n\n                    var $content = $('<div />');\n                    var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                    var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                    $xValue.html(this.getXFormatter()(d[0]));\n                    $yValue.html(this.getYFormatter()(d[1]));\n\n                    var content = $content.get(0);\n\n                    this.tip.setContent(content);\n\n                    // Set tip position\n\n                    var margin = this.getChartMargin();\n\n                    var offset = 24;\n                    var top = (y(d[1]) + offset);\n                    var left;\n\n                    if (this.orientation !== 'rtl') {\n                        left = (x(d[0]) + margin.left + offset);\n\n                        var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                        var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                        if (calcLeft > maxLeft) {\n                            left = x(d[0]) - (this.tip.$tip.width() + offset);\n                        }\n                    } else {\n                        left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                    }\n\n                    if (left < 0) {\n                        left = (x(d[0]) + margin.left + offset);\n                    }\n\n                    var position = {\n                        top: top,\n                        left: left\n                    };\n\n                    this.tip.setPosition(position);\n\n                    // Show tip\n\n                    this.tip.show();\n                })\n                .on('mouseout', (d, index) => {\n                    // Unexpand Plot\n                    this.drawingArea.select('.plot-' + index).attr('r', 4);\n\n                    // Hide tip\n                    this.tip.hide();\n                });\n        }\n    },\n\n    getChartMargin: function() {\n        var margin = this.settings.margin;\n\n        // Estimate the max width of y ticks and set it as the left margin\n\n        var values = this.getYTickValues();\n        var yTicksMaxWidth = 0;\n\n        $.each(values, (key, value) => {\n            var characterWidth = 8;\n\n            var formatter = this.getYFormatter();\n\n            var formattedValue = formatter(value);\n            var computedTickWidth = formattedValue.length * characterWidth;\n\n            if (computedTickWidth > yTicksMaxWidth) {\n                yTicksMaxWidth = computedTickWidth;\n            }\n        });\n\n        yTicksMaxWidth += 10;\n\n        margin.left = yTicksMaxWidth;\n\n        return margin;\n    },\n\n    getX: function(padded) {\n        var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomain = [xDomainMin, xDomainMax];\n\n        if (this.orientation === 'rtl') {\n            xDomain = [xDomainMax, xDomainMin];\n        }\n\n        var left = 0;\n        var right = 0;\n\n        if (padded) {\n            left = 0;\n            right = 0;\n        }\n\n        var x = d3.scaleTime().range([left, (this.width - right)]);\n\n        x.domain(xDomain);\n\n        return x;\n    },\n\n    getY: function() {\n        var yDomain = [0, this.getYMaxValue()];\n\n        var y = d3.scaleLinear().range([this.height, 0]);\n\n        y.domain(yDomain);\n\n        return y;\n    },\n\n    getXFormatter: function() {\n        var formatter;\n\n        if (this.settings.xAxis.formatter !== $.noop) {\n            formatter = this.settings.xAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYFormatter: function() {\n        var formatter;\n\n        if (this.settings.yAxis.formatter !== $.noop) {\n            formatter = this.settings.yAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYMaxValue: function() {\n        return d3.max(this.dataTable.rows, function(d) {\n            return d[1];\n        });\n    },\n\n    getYTickValues: function() {\n        var maxValue = this.getYMaxValue();\n\n        if (maxValue > 1) {\n            return [(maxValue / 2), maxValue];\n        } else {\n            return [0, maxValue];\n        }\n    }\n}, {\n    defaults: {\n        chartClass: 'area',\n        margin: {top: 25, right: 5, bottom: 25, left: 0},\n        plots: true,\n        tips: true,\n        xAxis: {\n            gridlines: false,\n            showAxis: true,\n            formatter: $.noop\n        },\n        yAxis: {\n            gridlines: true,\n            showAxis: false,\n            formatter: $.noop\n        }\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = `0${duration.hours}`;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = `0${duration.minutes}`;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = `0${duration.seconds}`;\n        }\n\n        return `${duration.hours}:${duration.minutes}:${duration.seconds}`;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(`${chartSettings.formats.shortDateFormats.day} %H:00:00`);\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.find('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .attr({\n                'aria-controls': this.$input.attr('id'),\n                'aria-label': Craft.t('app', 'Color picker'),\n            })\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorInput, 'click', function (ev) {\n            ev.stopPropagation();\n        });\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'input', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        let val = this.$input.val();\n\n        if (val !== (val = Craft.trim(val))) {\n            this.$input.val(val);\n        }\n\n        // Chop off the #\n        if (val.length && val[0] === '#') {\n            val = val.substr(1);\n            this.$input.val(val);\n        }\n\n        // If empty, set the preview to transparent\n        if (!val.length) {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Now normalize it for the UI stuff\n        if (val.length === 3) {\n            val = val[0].repeat(2) + val[1].repeat(2) + val[2].repeat(2);\n        }\n\n        if (val.match(/^[0-9a-f]{6}$/i)) {\n            this.$colorPreview.css('background-color', `#${val}`);\n            if (this.$colorInput) {\n                this.$colorInput.val(`#${val}`);\n            }\n        } else {\n            this.$colorPreview.css('background-color', '');\n        }\n    },\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function() {\n        if (Craft.ColorInput._browserSupportsColorInputs === null) {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend({\n    elementIndex: null,\n    $elementIndexSourcesContainer: null,\n\n    $sidebar: null,\n    $sourcesContainer: null,\n    $sourceSettingsContainer: null,\n    $newHeadingBtn: null,\n    $footer: null,\n    $footerBtnContainer: null,\n    $saveBtn: null,\n    $cancelBtn: null,\n    $saveSpinner: null,\n    $loadingSpinner: null,\n\n    sourceSort: null,\n    sources: null,\n    selectedSource: null,\n    updateSourcesOnSave: false,\n\n    availableTableAttributes: null,\n\n    init: function(elementIndex, settings) {\n        this.base();\n\n        this.setSettings(settings, {\n            resizable: true\n        });\n\n        this.elementIndex = elementIndex;\n        this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n        var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n        this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n        this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n        this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n        this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n        this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n        this.$newHeadingBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit add icon',\n            text: Craft.t('app', 'New heading'),\n        }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n        this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n        this.setContainer($container);\n        this.show();\n\n        var data = {\n            elementType: this.elementIndex.elementType\n        };\n\n        Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, (response, textStatus) => {\n            this.$loadingSpinner.remove();\n\n            if (textStatus === 'success') {\n                this.$saveBtn.removeClass('disabled');\n                this.buildModal(response);\n            }\n        });\n\n        this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n        this.addListener(this.$cancelBtn, 'click', 'hide');\n        this.addListener(this.$saveBtn, 'click', 'save');\n        this.addListener(this.$container, 'submit', 'save');\n    },\n\n    buildModal: function(response) {\n        // Store the available table attribute options\n        this.availableTableAttributes = response.availableTableAttributes;\n\n        // Create the source item sorter\n        this.sourceSort = new Garnish.DragSort({\n            handle: '.move',\n            axis: 'y',\n            onSortChange: () => {\n                this.updateSourcesOnSave = true;\n            },\n        });\n\n        // Create the sources\n        this.sources = [];\n\n        for (var i = 0; i < response.sources.length; i++) {\n            var source = this.addSource(response.sources[i]);\n            this.sources.push(source);\n        }\n\n        if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n            this.sources[0].select();\n        }\n    },\n\n    addSource: function(sourceData) {\n        var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n        var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n        var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n        $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n        var source;\n\n        // Is this a heading?\n        if (typeof sourceData.heading !== 'undefined') {\n            $item.addClass('heading');\n            $itemInput.attr('name', 'sourceOrder[][heading]');\n            source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.heading);\n        } else {\n            $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n            source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.label);\n\n            // Select this by default?\n            if ((this.elementIndex.sourceKey + '/').substr(0, sourceData.key.length + 1) === sourceData.key + '/') {\n                source.select();\n            }\n        }\n\n        this.sourceSort.addItems($item);\n\n        return source;\n    },\n\n    handleNewHeadingBtnClick: function() {\n        var source = this.addSource({\n            heading: ''\n        });\n\n        Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n        source.select();\n        this.updateSourcesOnSave = true;\n    },\n\n    save: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n            return;\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n        var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n        Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success' && response.success) {\n                // Have any changes been made to the source list?\n                if (this.updateSourcesOnSave) {\n                    if (this.$elementIndexSourcesContainer.length) {\n                        var $lastSource = null,\n                            $pendingHeading;\n\n                        for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                            var $item = this.sourceSort.$items.eq(i),\n                                source = $item.data('source'),\n                                $indexSource = source.getIndexSource();\n\n                            if (!$indexSource) {\n                                continue;\n                            }\n\n                            if (source.isHeading()) {\n                                $pendingHeading = $indexSource;\n                            } else {\n                                if ($pendingHeading) {\n                                    this.appendSource($pendingHeading, $lastSource);\n                                    $lastSource = $pendingHeading;\n                                    $pendingHeading = null;\n                                }\n\n                                this.appendSource($indexSource, $lastSource);\n                                $lastSource = $indexSource;\n                            }\n                        }\n\n                        // Remove any additional sources (most likely just old headings)\n                        if ($lastSource) {\n                            var $extraSources = $lastSource.nextAll();\n                            this.elementIndex.sourceSelect.removeItems($extraSources);\n                            $extraSources.remove();\n                        }\n                    }\n                }\n\n                // If a source is selected, have the element index select that one by default on the next request\n                if (this.selectedSource && this.selectedSource.sourceData.key) {\n                    this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                    this.elementIndex.updateElements();\n                }\n\n                Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                this.hide();\n            } else {\n                var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                Craft.cp.displayError(error);\n            }\n        });\n    },\n\n    appendSource: function($source, $lastSource) {\n        if (!$lastSource) {\n            $source.prependTo(this.$elementIndexSourcesContainer);\n        } else {\n            $source.insertAfter($lastSource);\n        }\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.sources.length; i++) {\n            this.sources[i].destroy();\n        }\n\n        delete this.sources;\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend({\n    modal: null,\n\n    $item: null,\n    $itemLabel: null,\n    $itemInput: null,\n    $settingsContainer: null,\n\n    sourceData: null,\n\n    init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n        this.modal = modal;\n        this.$item = $item;\n        this.$itemLabel = $itemLabel;\n        this.$itemInput = $itemInput;\n        this.sourceData = sourceData;\n\n        this.$item.data('source', this);\n\n        this.addListener(this.$item, 'click', 'select');\n    },\n\n    isHeading: function() {\n        return false;\n    },\n\n    isSelected: function() {\n        return (this.modal.selectedSource === this);\n    },\n\n    select: function() {\n        if (this.isSelected()) {\n            return;\n        }\n\n        if (this.modal.selectedSource) {\n            this.modal.selectedSource.deselect();\n        }\n\n        this.$item.addClass('sel');\n        this.modal.selectedSource = this;\n\n        if (!this.$settingsContainer) {\n            this.$settingsContainer = this.createSettings()\n                .appendTo(this.modal.$sourceSettingsContainer);\n        } else {\n            this.$settingsContainer.removeClass('hidden');\n        }\n\n        this.modal.$sourceSettingsContainer.scrollTop(0);\n    },\n\n    createSettings: function() {\n        return $('<div/>');\n    },\n\n    getIndexSource: function() {\n    },\n\n    deselect: function() {\n        this.$item.removeClass('sel');\n        this.modal.selectedSource = null;\n        this.$settingsContainer.addClass('hidden');\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.text(val);\n    },\n\n    destroy: function() {\n        this.$item.data('source', null);\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend({\n    createSettings: function() {\n        let $settings = $('<div/>').append(Craft.ui.createTextField({\n            label: Craft.t('app', 'Header Column Heading'),\n            id: 'defaultHeaderColHeading' + Math.floor(Math.random() * 100000),\n            name: `sources[${this.sourceData.key}][headerColHeading]`,\n            value: this.sourceData.headerColHeading,\n            placeholder: this.sourceData.defaultHeaderColHeading,\n        }));\n\n        if (this.sourceData.tableAttributes.length) {\n            $settings.append(this.createTableColumnsField());\n        }\n\n        return $settings;\n    },\n\n    createTableColumnsField: function() {\n        // Create the title column option\n        let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n        let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n        // Create the rest of the options\n        let $columnCheckboxes = $('<div/>');\n        let selectedAttributes = [firstKey];\n\n        $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n        // Add the selected columns, in the selected order\n        for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n            let [key, label] = this.sourceData.tableAttributes[i];\n            $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n            selectedAttributes.push(key);\n        }\n\n        // Add the rest\n        let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n        availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n        for (let i = 0; i < availableTableAttributes.length; i++) {\n            let [key, label] = availableTableAttributes[i];\n            if (!Craft.inArray(key, selectedAttributes)) {\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n            }\n        }\n\n        new Garnish.DragSort($columnCheckboxes.children(), {\n            handle: '.move',\n            axis: 'y'\n        });\n\n        return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n            label: Craft.t('app', 'Table Columns'),\n            instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n        });\n    },\n\n    createTableColumnOption: function(key, label, first, checked) {\n        var $option = $('<div class=\"customize-sources-table-column\"/>')\n            .append('<div class=\"icon move\"/>')\n            .append(\n                Craft.ui.createCheckbox({\n                    label: Craft.escapeHtml(label),\n                    name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                    value: key,\n                    checked: checked,\n                    disabled: first\n                })\n            );\n\n        if (first) {\n            $option.children('.move').addClass('disabled');\n        }\n\n        return $option;\n    },\n\n    getIndexSource: function() {\n        var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n        if ($source) {\n            return $source.closest('li');\n        }\n    }\n});\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend({\n    $labelField: null,\n    $labelInput: null,\n    $deleteBtn: null,\n\n    isHeading: function() {\n        return true;\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.trigger('focus');\n    },\n\n    createSettings: function() {\n        let $settings = $('<div/>');\n\n        this.$labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Heading'),\n            instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n            value: this.sourceData.heading\n        }).appendTo($settings);\n\n        this.$labelInput = this.$labelField.find('.text');\n\n        $settings.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n            .appendTo($settings);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n        return $settings;\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n        this.$itemInput.val(val);\n    },\n\n    deleteHeading: function() {\n        this.modal.sourceSort.removeItems(this.$item);\n        this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n        this.modal.updateSourcesOnSave = true;\n\n        if (this.isSelected()) {\n            this.deselect();\n\n            if (this.modal.sources.length) {\n                this.modal.sources[0].select();\n            }\n        }\n\n        this.$item.remove();\n        this.$settingsContainer.remove();\n        this.destroy();\n    },\n\n    getIndexSource: function() {\n        var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n        return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend({\n    $table: null,\n\n    init: function(table, settings) {\n        this.$table = $(table);\n        var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n        settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n        settings.container = this.$table.children('tbody');\n        settings.helper = this.getHelper.bind(this);\n        settings.caboose = '<tr/>';\n        settings.axis = Garnish.Y_AXIS;\n        settings.magnetStrength = 4;\n        settings.helperLagBase = 1.5;\n\n        this.base($rows, settings);\n    },\n\n    getHelper: function($helperRow) {\n        var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n            $table = $('<table/>').appendTo($helper),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the table width and classes\n        $table.width(this.$table.width());\n        $table.prop('className', this.$table.prop('className'));\n\n        // Copy the column widths\n        var $firstRow = this.$table.find('tr:first'),\n            $cells = $firstRow.children(),\n            $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            $($helperCells[i]).width($($cells[i]).width());\n        }\n\n        return $helper;\n    }\n}, {\n    defaults: {\n        handle: '.move',\n        helperClass: 'datatablesorthelper'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend({\n    id: null,\n    userId: null,\n\n    $deleteActionRadios: null,\n    $deleteSpinner: null,\n\n    userSelect: null,\n    _deleting: false,\n\n    init: function(userId, settings) {\n        this.id = Math.floor(Math.random() * 1000000000);\n        this.userId = userId;\n        settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n        let $form = $(\n            '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n            Craft.getCsrfInput() +\n            '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n            (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n            (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n            '</form>'\n        ).appendTo(Garnish.$bod);\n        let $body = $(\n            '<div class=\"body\">' +\n            '<div class=\"content-summary\">' +\n            '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n            '<ul class=\"bullets\"></ul>' +\n            '</div>' +\n            '<div class=\"options\">' +\n            '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n            '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n            '<div class=\"elements\"></div>' +\n            '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n            '</div>' +\n            '</div>' +\n            '<div>' +\n            '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n            '</div>' +\n            '</div>'\n        ).appendTo($form);\n        let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo($buttons);\n\n        if (settings.contentSummary.length) {\n            for (let i = 0; i < settings.contentSummary.length; i++) {\n                $body.find('ul').append($('<li/>', {text: settings.contentSummary[i]}));\n            }\n        } else {\n            $body.find('ul').remove();\n        }\n\n        this.$deleteActionRadios = $body.find('input[type=radio]');\n        this.$deleteSubmitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: this._submitBtnLabel(false),\n        }).appendTo($buttons);\n        this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n        var idParam;\n\n        if (Garnish.isArray(this.userId)) {\n            idParam = ['and'];\n\n            for (let i = 0; i < this.userId.length; i++) {\n                idParam.push('not ' + this.userId[i]);\n            }\n        } else {\n            idParam = 'not ' + this.userId;\n        }\n\n        this.userSelect = new Craft.BaseElementSelectInput({\n            id: 'transferselect' + this.id,\n            name: 'transferContentTo',\n            elementType: 'craft\\\\elements\\\\User',\n            criteria: {\n                id: idParam\n            },\n            limit: 1,\n            modalSettings: {\n                closeOtherModals: false\n            },\n            onSelectElements: () => {\n                this.updateSizeAndPosition();\n\n                if (!this.$deleteActionRadios.first().prop('checked')) {\n                    this.$deleteActionRadios.first().trigger('click');\n                } else {\n                    this.validateDeleteInputs();\n                }\n            },\n            onRemoveElements: this.validateDeleteInputs.bind(this),\n            selectable: false,\n            editable: false\n        });\n\n        this.addListener($cancelBtn, 'click', 'hide');\n\n        this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n        this.addListener($form, 'submit', 'handleSubmit');\n\n        this.base($form, settings);\n    },\n\n    _submitBtnLabel: function(withContent) {\n        let message = withContent\n            ? 'Delete {num, plural, =1{user} other{users}} and content'\n            : 'Delete {num, plural, =1{user} other{users}}';\n\n        return Craft.t('app', message, {\n            num: Garnish.isArray(this.userId) ? this.userId.length : 1,\n        });\n    },\n\n    validateDeleteInputs: function() {\n        var validates = false;\n\n        if (this.$deleteActionRadios.eq(1).prop('checked')) {\n            validates = true;\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(true));\n        } else {\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(false));\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n        }\n\n        this.updateSizeAndPosition();\n\n        if (validates) {\n            this.$deleteSubmitBtn.removeClass('disabled');\n        } else {\n            this.$deleteSubmitBtn.addClass('disabled');\n        }\n\n        return validates;\n    },\n\n    handleSubmit: function(ev) {\n        if (this._deleting || !this.validateDeleteInputs()) {\n            ev.preventDefault();\n            return;\n        }\n\n        this.$deleteSubmitBtn.addClass('active');\n        this.$deleteSpinner.removeClass('hidden');\n        this.disable();\n        this.userSelect.disable();\n        this._deleting = true;\n\n        // Let the onSubmit callback prevent the form from getting submitted\n        try {\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        } catch (e) {\n            ev.preventDefault();\n            this.$deleteSpinner.addClass('hidden');\n            throw e;\n        }\n    },\n\n    onFadeIn: function() {\n        // Auto-focus the first radio\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$deleteActionRadios.first().trigger('focus');\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        contentSummary: [],\n        onSubmit: $.noop,\n        redirect: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend({\n    $revisionBtn: null,\n    $revisionLabel: null,\n    $spinner: null,\n    $expandSiteStatusesBtn: null,\n    $statusIcon: null,\n\n    $editMetaBtn: null,\n    metaHud: null,\n    $nameTextInput: null,\n    $saveMetaBtn: null,\n\n    $siteStatusPane: null,\n    $globalLightswitch: null,\n    $siteLightswitches: null,\n    $addlSiteField: null,\n\n    siteIds: null,\n    newSiteIds: null,\n\n    lastSerializedValue: null,\n    listeningForChanges: false,\n    pauseLevel: 0,\n    timeout: null,\n    saving: false,\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    queue: null,\n    submittingForm: false,\n\n    duplicatedElements: null,\n    errors: null,\n\n    openingPreview: false,\n    preview: null,\n    previewToken: null,\n    createdProvisionalDraft: false,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.DraftEditor.defaults);\n\n        this.queue = [];\n        this.duplicatedElements = {};\n\n        this.siteIds = Object.keys(this.settings.siteStatuses).map(siteId => {\n            return parseInt(siteId)\n        });\n\n        this.$revisionBtn = $('#context-btn');\n        this.$revisionLabel = $('#revision-label');\n        this.$spinner = $('#revision-spinner');\n        this.$expandSiteStatusesBtn = $('#expand-status-btn');\n        this.$statusIcon = $('#revision-status');\n\n        if (this.settings.canEditMultipleSites) {\n            this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n        }\n\n        if (this.settings.previewTargets.length) {\n            if (this.settings.enablePreview) {\n                this.addListener($('#preview-btn'), 'click', 'openPreview');\n            }\n\n            const $shareBtn = $('#share-btn');\n\n            if (this.settings.previewTargets.length === 1) {\n                this.addListener($shareBtn, 'click', function() {\n                    this.openShareLink(this.settings.previewTargets[0].url);\n                });\n            } else {\n                this.createShareMenu($shareBtn);\n            }\n        }\n\n        // If this is a revision, we're done here\n        if (this.settings.revisionId) {\n            return;\n        }\n\n        // Override the serializer to use our own\n        Craft.cp.$primaryForm.data('serializer', () => this.serializeForm(true));\n\n        this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n        if (this.settings.isProvisionalDraft) {\n            this.initForProvisionalDraft();\n        } else if (this.settings.draftId && !this.settings.isUnpublishedDraft) {\n            this.initForDraft();\n        } else if (!this.settings.canUpdateSource) {\n            // Override the save shortcut to create a draft too\n            this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', ev => {\n                if (ev.saveShortcut) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }\n            });\n        }\n\n        this.listenForChanges();\n\n        this.addListener(this.$statusIcon, 'click', () => {\n            this.showStatusHud(this.$statusIcon);\n        });\n    },\n\n    listenForChanges: function() {\n        if (this.listeningForChanges || this.pauseLevel > 0 || !Craft.autosaveDrafts || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        this.listeningForChanges = true;\n\n        this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n            if ($(ev.target).is(this.statusIcons())) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            // If they are typing, wait half a second before checking the form\n            if (['keypress', 'keyup', 'change'].includes(ev.type)) {\n                this.timeout = setTimeout(this.checkForm.bind(this), 500);\n            } else {\n                this.checkForm();\n            }\n        });\n    },\n\n    stopListeningForChanges: function() {\n        if (!this.listeningForChanges) {\n            return;\n        }\n\n        this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n        clearTimeout(this.timeout);\n        this.listeningForChanges = false;\n    },\n\n    pause: function() {\n        this.pauseLevel++;\n        this.stopListeningForChanges();\n    },\n\n    resume: function() {\n        if (this.pauseLevel === 0) {\n            throw 'Craft.DraftEditor::resume() should only be called after pause().';\n        }\n\n        // Only actually resume operation if this has been called the same\n        // number of times that pause() was called\n        this.pauseLevel--;\n        if (this.pauseLevel === 0) {\n            this.checkForm();\n            this.listenForChanges();\n        }\n    },\n\n    initForProvisionalDraft: function() {\n        let $button = $('#discard-changes');\n        if (!$button.length) {\n            $button = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu.$container.find('#discard-changes') : null;\n        }\n        if ($button && $button.length) {\n            this.addListener($button, 'click', () => {\n                if (confirm(Craft.t('app', 'Are you sure you want to discard your changes?'))) {\n                    Craft.submitForm(Craft.cp.$primaryForm, {\n                        action: this.settings.deleteDraftAction,\n                        redirect: this.settings.hashedCpEditUrl,\n                        params: {\n                            draftId: this.settings.draftId,\n                            provisional: this.settings.isProvisionalDraft,\n                        },\n                    });\n                }\n            });\n        }\n    },\n\n    initForDraft: function() {\n        // Create the edit draft button\n        this.createEditMetaBtn();\n\n        if (this.settings.canUpdateSource) {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n                alt: true\n            }, () => {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.publishDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }, 0);\n        }\n    },\n\n    expandSiteStatuses: function() {\n        this.removeListener(this.$expandSiteStatusesBtn, 'click');\n        this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', () => {\n            this.$expandSiteStatusesBtn.remove();\n        });\n\n        const $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n        this.$siteStatusPane = $enabledForSiteField.parent();\n\n        // If this is a revision, just show the site statuses statically and be done\n        if (this.settings.revisionId) {\n            this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n            return;\n        }\n\n        $enabledForSiteField.addClass('nested');\n        const $globalField = Craft.ui.createLightswitchField({\n            id: 'enabled',\n            label: Craft.t('app', 'Enabled'),\n            name: 'enabled',\n        }).insertBefore($enabledForSiteField);\n        $globalField.find('label').css('font-weight', 'bold');\n        this.$globalLightswitch = $globalField.find('.lightswitch');\n\n        if (!this.settings.revisionId) {\n            this._showField($globalField);\n        }\n\n        // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n        const originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n            ? '1'\n            : (this.settings.enabledForSite ? '-' : '');\n        const originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n            '=' + (this.settings.enabledForSite ? '1' : '');\n\n        this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n            .on('change', this._updateGlobalStatus.bind(this));\n\n        this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n\n        let serializedStatuses = `enabled=${originalEnabledValue}`;\n        for (let i = 0; i < this.$siteLightswitches.length; i++) {\n            const $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n            serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n        }\n\n        Craft.cp.$primaryForm.data('initialSerializedValue',\n            Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n        // Are there additional sites that can be added?\n        if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n            this._createAddlSiteField();\n        }\n\n        this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n        this._updateGlobalStatus();\n    },\n\n    /**\n     * @returns {Array}\n     */\n    _getOtherSupportedSites: function() {\n        return Craft.sites.filter(s => s.id != this.settings.siteId && this.siteIds.includes(s.id));\n    },\n\n    _showField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .height(0)\n            .velocity({height}, 'fast', () => {\n                $field.css({\n                    overflow: '',\n                    height: '',\n                });\n            });\n    },\n\n    _removeField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .velocity({height: 0}, 'fast', () => {\n                $field.remove();\n            });\n    },\n\n    _updateGlobalStatus: function() {\n        let allEnabled = true, allDisabled = true;\n        this.$siteLightswitches.each(function() {\n            const enabled = $(this).data('lightswitch').on;\n            if (enabled) {\n                allDisabled = false;\n            } else {\n                allEnabled = false;\n            }\n            if (!allEnabled && !allDisabled) {\n                return false;\n            }\n        });\n        if (allEnabled) {\n            this.$globalLightswitch.data('lightswitch').turnOn(true);\n        } else if (allDisabled) {\n            this.$globalLightswitch.data('lightswitch').turnOff(true);\n        } else {\n            this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n        }\n    },\n\n    _updateSiteStatuses: function() {\n        const enabled = this.$globalLightswitch.data('lightswitch').on;\n        this.$siteLightswitches.each(function() {\n            if (enabled) {\n                $(this).data('lightswitch').turnOn(true);\n            } else {\n                $(this).data('lightswitch').turnOff(true);\n            }\n        });\n    },\n\n    _createSiteStatusField: function(site) {\n        const $field = Craft.ui.createLightswitchField({\n            id: `enabledForSite-${site.id}`,\n            label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n            name: `enabledForSite[${site.id}]`,\n            on: this.settings.siteStatuses.hasOwnProperty(site.id)\n                ? this.settings.siteStatuses[site.id]\n                : true,\n            disabled: !!this.settings.revisionId,\n        });\n\n        if (this.$addlSiteField) {\n            $field.insertBefore(this.$addlSiteField);\n        } else {\n            $field.appendTo(this.$siteStatusPane);\n        }\n\n        if (!this.settings.revisionId) {\n            $field.addClass('nested');\n            const $lightswitch = $field.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n        }\n\n        this._showField($field);\n\n        return $field;\n    },\n\n    _createAddlSiteField: function() {\n        const addlSites = Craft.sites.filter(s => {\n            return !this.siteIds.includes(s.id) && this.settings.addlSiteIds.includes(s.id);\n        });\n\n        if (!addlSites.length) {\n            return;\n        }\n\n        const $addlSiteSelectContainer = Craft.ui.createSelect({\n            options: [\n                {label: Craft.t('app', 'Add a site…')},\n                ...addlSites.map(s => {\n                    return {label: s.name, value: s.id};\n                }),\n            ],\n        }).addClass('fullwidth');\n\n        this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n            .addClass('nested add')\n            .appendTo(this.$siteStatusPane);\n\n        const $addlSiteSelect = $addlSiteSelectContainer.find('select');\n\n        $addlSiteSelect.on('change', () => {\n            const siteId = parseInt($addlSiteSelect.val());\n            const site = Craft.sites.find(s => s.id === siteId);\n\n            if (!site) {\n                return;\n            }\n\n            this._createSiteStatusField(site);\n\n            $addlSiteSelect\n                .val('')\n                .find(`option[value=\"${siteId}\"]`).remove();\n\n            if (this.newSiteIds === null) {\n                this.newSiteIds = [];\n            }\n\n            this.siteIds.push(siteId);\n            this.newSiteIds.push(siteId);\n\n            // Was that the last site?\n            if ($addlSiteSelect.find('option').length === 1) {\n                this._removeField(this.$addlSiteField);\n            }\n        });\n\n        this._showField(this.$addlSiteField);\n    },\n\n    showStatusHud: function(target) {\n        let bodyHtml;\n\n        if (this.errors === null) {\n            bodyHtml = `<p>${this._saveSuccessMessage()}</p>`;\n        } else {\n            bodyHtml = `<p class=\"error\">${this._saveFailMessage()}</p>`;\n\n            if (this.errors.length) {\n                bodyHtml += '<ul class=\"errors\">' +\n                    this.errors.map(e => `<li>${Craft.escapeHtml(e)}</li>`).join('') +\n                    '</ul>';\n            }\n        }\n\n        const hud = new Garnish.HUD(target, bodyHtml, {\n            onHide: function() {\n                hud.destroy();\n            }\n        });\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveSuccessMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes have been stored.')\n            : Craft.t('app', 'The draft has been saved.');\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveFailMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes could not be stored.')\n            : Craft.t('app', 'The draft could not be saved.');\n    },\n\n    spinners: function() {\n        return this.preview\n            ? this.$spinner.add(this.preview.$spinner)\n            : this.$spinner;\n    },\n\n    statusIcons: function() {\n        return this.preview\n            ? this.$statusIcon.add(this.preview.$statusIcon)\n            : this.$statusIcon;\n    },\n\n    createEditMetaBtn: function() {\n        this.$editMetaBtn = $('<button/>', {\n            type: 'button',\n            'class': 'btn edit icon',\n            title: Craft.t('app', 'Edit draft settings'),\n        }).appendTo($('#context-btngroup'));\n        this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n    },\n\n    createShareMenu: function($shareBtn) {\n        $shareBtn.addClass('menubtn');\n\n        const $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n        const $ul = $('<ul/>').appendTo($menu);\n\n        this.settings.previewTargets.forEach(target => {\n            const $li = $('<li/>').appendTo($ul);\n            const $a = $('<a/>', {\n                text: target.label,\n            }).appendTo($li);\n            this.addListener($a, 'click', () => {\n                this.openShareLink(target.url);\n            });\n        });\n    },\n\n    getPreviewToken: function() {\n        return new Promise((resolve, reject) => {\n            if (this.previewToken) {\n                resolve(this.previewToken);\n                return;\n            }\n\n            Craft.sendActionRequest('POST', 'preview/create-token', {\n                data: {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                    provisional: this.settings.isProvisionalDraft,\n                },\n            }).then(response => {\n                this.previewToken = response.data.token;\n                resolve(this.previewToken);\n            }).catch(reject);\n        });\n    },\n\n    getTokenizedPreviewUrl: function(url, randoParam) {\n        return new Promise((resolve, reject) => {\n            const params = {};\n\n            if (randoParam || !this.settings.isLive) {\n                // Randomize the URL so CDNs don't return cached pages\n                params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n            }\n\n            if (this.settings.siteToken) {\n                params[Craft.siteToken] = this.settings.siteToken;\n            }\n\n            // No need for a token if we're looking at a live element\n            if (this.settings.isLive) {\n                resolve(Craft.getUrl(url, params));\n                return;\n            }\n\n            this.getPreviewToken().then(function(token) {\n                params[Craft.tokenParam] = token;\n                resolve(Craft.getUrl(url, params));\n            }).catch(reject);\n        });\n    },\n\n    openShareLink: function(url) {\n        this.getTokenizedPreviewUrl(url).then(function(url) {\n            window.open(url);\n        });\n    },\n\n    getPreview: function() {\n        if (!this.preview) {\n            this.preview = new Craft.Preview(this);\n        }\n        return this.preview;\n    },\n\n    openPreview: function() {\n        return new Promise((resolve, reject) => {\n            this.openingPreview = true;\n            this.ensureIsDraftOrRevision(true)\n                .then(() => {\n                    this.getPreview().open();\n                    this.openingPreview = false;\n                    resolve();\n                })\n                .catch(reject);\n        })\n    },\n\n    ensureIsDraftOrRevision: function(onlyIfChanged) {\n        return new Promise((resolve, reject) => {\n            if (!this.settings.draftId && !this.settings.revisionId) {\n                if (\n                    onlyIfChanged &&\n                    this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                ) {\n                    resolve();\n                    return;\n                }\n\n                this.createDraft()\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                resolve();\n            }\n        });\n    },\n\n    serializeForm: function(removeActionParams) {\n        let data = Craft.cp.$primaryForm.serialize();\n\n        if (this.isPreviewActive()) {\n            // Replace the temp input with the preview form data\n            data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n        }\n\n        if (removeActionParams && !this.settings.isUnpublishedDraft) {\n            // Remove action and redirect params\n            data = data.replace(/&action=[^&]*/, '');\n            data = data.replace(/&redirect=[^&]*/, '');\n        }\n\n        return data;\n    },\n\n    checkForm: function(force) {\n        // If this isn't a draft and there's no active preview, then there's nothing to check\n        if (this.settings.revisionId || this.pauseLevel > 0 || !Craft.autosaveDrafts || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        clearTimeout(this.timeout);\n        this.timeout = null;\n\n        // Has anything changed?\n        const data = this.serializeForm(true);\n        if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n            const provisional = (!this.settings.draftId || this.settings.isProvisionalDraft) && !this.settings.revisionId;\n            this.saveDraft(data, provisional);\n        }\n    },\n\n    isPreviewActive: function() {\n        return this.preview && this.preview.isActive;\n    },\n\n    createDraft: function() {\n        return new Promise((resolve, reject) => {\n            this.saveDraft(this.serializeForm(true))\n                .then(resolve)\n                .catch(reject);\n        });\n    },\n\n    /**\n     * @param {object} data\n     * @returns {Promise<unknown>}\n     */\n    saveDraft: function(data) {\n        return new Promise((resolve, reject) => {\n            // Ignore if we're already submitting the main form\n            if (this.submittingForm) {\n                reject();\n                return;\n            }\n\n            if (this.saving) {\n                this.queue.push(() => {\n                    this.checkForm()\n                });\n                return;\n            }\n\n            this.lastSerializedValue = data;\n            this.saving = true;\n            this.errors = null;\n            this.cancelToken = axios.CancelToken.source();\n            this.spinners().removeClass('hidden');\n\n            this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('invisible checkmark-icon alert-icon fade-out')\n                .addClass('hidden');\n\n            if (this.$saveMetaBtn) {\n                this.$saveMetaBtn.addClass('active');\n            }\n\n            // Prep the data to be saved, keeping track of the first input name for each delta group\n            let modifiedFieldNames = [];\n            let preparedData = this.prepareData(data, (deltaName, params)  => {\n                if (!this.settings.isUnpublishedDraft && params.length) {\n                    modifiedFieldNames.push(decodeURIComponent(params[0].split('=')[0]));\n                }\n            });\n\n            // Are we saving a provisional draft?\n            if (this.settings.isProvisionalDraft || !this.settings.draftId) {\n                preparedData += '&provisional=1';\n            }\n\n            Craft.sendActionRequest('POST', this.settings.saveDraftAction, {\n                cancelToken: this.cancelToken.token,\n                headers: {\n                    'content-type': 'application/x-www-form-urlencoded',\n                },\n                data: preparedData,\n            }).then(response => {\n                this._afterSaveRequest();\n\n                if (response.data.errors) {\n                    this.errors = response.data.errors;\n                    this._showFailStatus();\n                    reject();\n                }\n\n                const createdProvisionalDraft = !this.settings.draftId;\n\n                if (createdProvisionalDraft) {\n                    this.settings.isProvisionalDraft = true;\n                    this.createdProvisionalDraft = true;\n                }\n\n                if (response.data.title) {\n                    $('#header h1').text(response.data.title);\n                }\n\n                if (response.data.docTitle) {\n                    document.title = response.data.docTitle;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        this.$revisionLabel.append(\n                            $('<span/>', {\n                                class: 'extralight',\n                                text: ` — ${Craft.t('app', 'Edited')}`,\n                            })\n                        );\n                    }\n                } else {\n                    this.$revisionLabel.text(response.data.draftName);\n                    this.settings.draftName = response.data.draftName;\n                }\n\n                let revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                // Did we just add a site?\n                if (this.newSiteIds) {\n                    // Do we need to create the revision menu?\n                    if (!revisionMenu) {\n                        this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                        new Garnish.MenuBtn(this.$revisionBtn);\n                        revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                        revisionMenu.$container.removeClass('hidden');\n                    }\n                    this.newSiteIds.forEach(siteId => {\n                        const $option = revisionMenu.$options.filter(`[data-site-id=${siteId}]`);\n                        $option.find('.status').removeClass('disabled').addClass('enabled');\n                        const $li = $option.parent().removeClass('hidden');\n                        $li.closest('.site-group').removeClass('hidden');\n                    });\n                    revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                    this.newSiteIds = null;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        // Replace the action\n                        const $actionInput = $('#action').attr('value', this.settings.publishDraftAction);\n\n                        // Update the editor settings\n                        this.settings.draftId = response.data.draftId;\n                        this.settings.isLive = false;\n                        this.previewToken = null;\n\n                        if (revisionMenu) {\n                            // Add edited description to the “Current” option\n                            revisionMenu.$container.find('#current-revision').append(\n                                $('<div/>', {\n                                    class: 'edited-desc',\n                                }).append(\n                                    $('<p/>', {\n                                        text: Craft.t('app', 'Showing your unsaved changes.'),\n                                    })\n                                ).append(\n                                    $('<button/>', {\n                                        id: 'discard-changes',\n                                        class: 'btn',\n                                        text: Craft.t('app', 'Discard changes'),\n                                    })\n                                )\n                            );\n                        }\n\n                        this.initForProvisionalDraft();\n                    }\n                } else if (revisionMenu) {\n                    revisionMenu.$options.filter('.sel').find('.draft-name').text(response.data.draftName);\n                    revisionMenu.$options.filter('.sel').find('.draft-meta').text(response.data.creator\n                        ? Craft.t('app', 'Saved {timestamp} by {creator}', {\n                            timestamp: response.data.timestamp,\n                            creator: response.data.creator\n                        })\n                        : Craft.t('app', 'Saved {timestamp}', {\n                            timestamp: response.data.timestamp,\n                        })\n                    );\n                }\n\n                // Did the controller send us updated preview targets?\n                if (\n                    response.data.previewTargets &&\n                    JSON.stringify(response.data.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                ) {\n                    this.updatePreviewTargets(response.data.previewTargets);\n                }\n\n                this.afterUpdate(data);\n\n                if (createdProvisionalDraft) {\n                    this.trigger('createProvisionalDraft');\n                }\n\n                if (this.$nameTextInput) {\n                    this.checkMetaValues();\n                }\n\n                for (const oldId in response.data.duplicatedElements) {\n                    if (oldId != this.settings.sourceId && response.data.duplicatedElements.hasOwnProperty(oldId)) {\n                        this.duplicatedElements[oldId] = response.data.duplicatedElements[oldId];\n                    }\n                }\n\n                // Add missing field modified indicators\n                const selectors = response.data.modifiedAttributes.map(attr => `[name=\"${attr}\"],[name^=\"${attr}[\"]`)\n                    .concat(modifiedFieldNames.map(name => `[name=\"${name}\"]`));\n\n                const $fields = $(selectors.join(',')).closest('.field:not(:has(> .status-badge))');\n                for (let i = 0; i < $fields.length; i++) {\n                    $fields.eq(i).prepend(\n                        $('<div/>', {\n                            class: 'status-badge modified',\n                            title: Craft.t('app', 'This field has been modified.'),\n                            'aria-label': Craft.t('app', 'This field has been modified.'),\n                        })\n                    );\n                }\n\n                resolve();\n            }).catch(() => {\n                this._afterSaveRequest();\n\n                if (!this.ignoreFailedRequest) {\n                    this.errors = [];\n                    this._showFailStatus();\n                    reject();\n                }\n\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    _afterSaveRequest: function() {\n        this.spinners().addClass('hidden');\n        if (this.$saveMetaBtn) {\n            this.$saveMetaBtn.removeClass('active');\n        }\n        this.saving = false;\n    },\n\n    _showFailStatus: function() {\n        this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden checkmark-icon')\n            .addClass('alert-icon')\n            .attr('title', this._saveFailMessage());\n    },\n\n    /**\n     * @param {string} data\n     * @param {function} [deltaCallback] Callback function that should be passed to `Craft.findDeltaData()`\n     * @returns {string}\n     */\n    prepareData: function(data, deltaCallback) {\n        // Swap out element IDs with their duplicated ones\n        data = this.swapDuplicatedElementIds(data);\n\n        // Add the draft info\n        if (this.settings.draftId) {\n            data += `&draftId=${this.settings.draftId}`;\n            if (this.settings.isProvisionalDraft) {\n                data += '&provisional=1';\n            }\n        }\n\n        if (this.settings.draftName !== null) {\n            data += `&draftName=${this.settings.draftName}`;\n        }\n\n        // Filter out anything that hasn't changed\n        const initialData = this.swapDuplicatedElementIds(Craft.cp.$primaryForm.data('initialSerializedValue') || '');\n        return Craft.findDeltaData(initialData, data, this.getDeltaNames(), deltaCallback);\n    },\n\n    /**\n     * @param {string} data\n     * @returns {string}\n     */\n    swapDuplicatedElementIds: function(data) {\n        const idsRE = Object.keys(this.duplicatedElements).join('|');\n        if (idsRE === '') {\n            return data;\n        }\n        const lb = encodeURIComponent('[');\n        const rb = encodeURIComponent(']');\n        // Keep replacing field IDs until data stops changing\n        while (true) {\n            if (data === (\n                data = data\n                    // &fields[...][X]\n                    .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                        return pre + this.duplicatedElements[id] + post;\n                    })\n                    // &fields[...=X\n                    .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                        return pre + this.duplicatedElements[id];\n                    })\n            )) {\n                break;\n            }\n        }\n        return data;\n    },\n\n    getDeltaNames: function() {\n        const deltaNames = Craft.deltaNames.slice(0);\n        for (let i = 0; i < deltaNames.length; i++) {\n            for (const oldId in this.duplicatedElements) {\n                if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                    deltaNames[i] = deltaNames[i].replace('][' + oldId + ']', '][' + this.duplicatedElements[oldId] + ']');\n                }\n            }\n        }\n        return deltaNames;\n    },\n\n    updatePreviewTargets: function(previewTargets) {\n        previewTargets.forEach(newTarget => {\n            const currentTarget = this.settings.previewTargets.find(t => t.label === newTarget.label);\n            if (currentTarget) {\n                currentTarget.url = newTarget.url;\n            }\n        });\n    },\n\n    afterUpdate: function(data) {\n        Craft.cp.$primaryForm.data('initialSerializedValue', data);\n        Craft.initialDeltaValues = {};\n        const $statusIcons = this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden')\n            .addClass('checkmark-icon')\n            .attr('title', this._saveSuccessMessage());\n\n        if (!Craft.autosaveDrafts) {\n            // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n            $statusIcons\n                .velocity('stop')\n                .velocity({\n                    opacity: 0,\n                }, {\n                    delay: 2000,\n                    complete: () => {\n                        $statusIcons.addClass('hidden');\n                    },\n                });\n        }\n\n        this.trigger('update');\n\n        this.nextInQueue();\n    },\n\n    nextInQueue: function() {\n        if (this.queue.length) {\n            this.queue.shift()();\n        }\n    },\n\n    showMetaHud: function() {\n        if (!this.metaHud) {\n            this.createMetaHud();\n            this.onMetaHudShow();\n        } else {\n            this.metaHud.show();\n        }\n\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$nameTextInput.trigger('focus');\n        }\n    },\n\n    createMetaHud: function() {\n        const $hudBody = $('<div/>');\n\n        // Add the Name field\n        const $nameField = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n        const $nameInputContainer = $('<div class=\"input\"/>').appendTo($nameField);\n        this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($nameInputContainer).val(this.settings.draftName);\n\n        // HUD footer\n        const $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n        $('<div class=\"flex-grow\"></div>').appendTo($footer);\n        this.$saveMetaBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo($footer);\n\n        this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n            onSubmit: this.saveMeta.bind(this)\n        });\n\n        this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n\n        this.metaHud.on('show', this.onMetaHudShow.bind(this));\n        this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n        this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n    },\n\n    onMetaHudShow: function() {\n        this.$editMetaBtn.addClass('active');\n    },\n\n    onMetaHudHide: function() {\n        this.$editMetaBtn.removeClass('active');\n    },\n\n    onMetaHudEscape: function() {\n        this.$nameTextInput.val(this.settings.draftName);\n    },\n\n    checkMetaValues: function() {\n        if (\n            this.$nameTextInput.val() &&\n            this.$nameTextInput.val() !== this.settings.draftName\n        ) {\n            this.$saveMetaBtn.removeClass('disabled');\n            return true;\n        }\n\n        this.$saveMetaBtn.addClass('disabled');\n        return false;\n    },\n\n    shakeMetaHud: function() {\n        Garnish.shake(this.metaHud.$hud);\n    },\n\n    saveMeta: function() {\n        if (!this.checkMetaValues()) {\n            this.shakeMetaHud();\n            return;\n        }\n\n        this.settings.draftName = this.$nameTextInput.val();\n\n        this.metaHud.hide();\n        this.checkForm(true);\n    },\n\n    handleFormSubmit: function(ev) {\n        ev.preventDefault();\n\n        // Prevent double form submits\n        if (this.submittingForm) {\n            return;\n        }\n\n        // If this a draft and was this a normal save (either via submit button or save shortcut),\n        // then trigger an autosave\n        if (\n            this.settings.draftId &&\n            !this.settings.isUnpublishedDraft &&\n            !this.settings.isProvisionalDraft &&\n            (typeof ev.autosave === 'undefined' || ev.autosave) &&\n            (ev.saveShortcut || (ev.customTrigger && ev.customTrigger.data('action') === this.settings.saveDraftAction))\n        ) {\n            this.checkForm(true);\n            return;\n        }\n\n        // Prevent the normal unload confirmation dialog\n        Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n        // Abort the current save request if there is one\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n\n        // Duplicate the form with normalized data\n        const data = this.prepareData(this.serializeForm(false));\n        const $form = Craft.createForm(data);\n\n        $form.appendTo(Garnish.$bod);\n        $form.submit();\n        this.submittingForm = true;\n    },\n}, {\n    defaults: {\n        elementType: null,\n        sourceId: null,\n        siteId: null,\n        isUnpublishedDraft: false,\n        enabled: false,\n        enabledForSite: false,\n        isLive: false,\n        isProvisionalDraft: false,\n        siteStatuses: null,\n        addlSiteIds: [],\n        cpEditUrl: null,\n        draftId: null,\n        revisionId: null,\n        draftName: null,\n        canEditMultipleSites: false,\n        canUpdateSource: false,\n        saveDraftAction: null,\n        deleteDraftAction: null,\n        publishDraftAction: null,\n        hashedCpEditUrl: null,\n        hashedAddAnotherRedirectUrl: null,\n        enablePreview: false,\n        previewTargets: [],\n        siteToken: null,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend({\n    callback: $.noop,\n\n    init: function(source, target, callback) {\n        this.callback = callback;\n        this.base(source, target);\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return this.callback(sourceVal);\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend({\n    initialized: false,\n\n    id: null,\n    baseName: null,\n    columns: null,\n    sorter: null,\n    biggestId: -1,\n\n    $table: null,\n    $tbody: null,\n    $addRowBtn: null,\n\n    rowCount: 0,\n    hasMaxRows: false,\n    hasMinRows: false,\n\n    radioCheckboxes: null,\n\n    init: function(id, baseName, columns, settings) {\n        this.id = id;\n        this.baseName = baseName;\n        this.columns = columns;\n        this.setSettings(settings, Craft.EditableTable.defaults);\n        this.radioCheckboxes = {};\n\n        this.$table = $('#' + id);\n        this.$tbody = this.$table.children('tbody');\n        this.rowCount = this.$tbody.find('tr').length;\n\n        // Is this already an editable table?\n        if (this.$table.data('editable-table')) {\n            Garnish.log('Double-instantiating an editable table on an element');\n            this.$table.data('editable-table').destroy();\n        }\n\n        this.$table.data('editable-table', this);\n\n        this.sorter = new Craft.DataTableSorter(this.$table, {\n            helperClass: 'editabletablesorthelper',\n            copyDraggeeInputValuesToHelper: true\n        });\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            // Give everything a chance to initialize\n            setTimeout(this.initializeIfVisible.bind(this), 500);\n        }\n\n        if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n            for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                this.addRow()\n            }\n        }\n    },\n\n    isVisible: function() {\n        return (this.$table.parent().height() > 0);\n    },\n\n    initialize: function() {\n        if (this.initialized) {\n            return false;\n        }\n\n        this.initialized = true;\n        this.removeListener(Garnish.$win, 'resize');\n\n        var $rows = this.$tbody.children();\n\n        for (var i = 0; i < $rows.length; i++) {\n            this.createRowObj($rows[i]);\n        }\n\n        this.$addRowBtn = this.$table.next('.add');\n        this.updateAddRowButton();\n        this.addListener(this.$addRowBtn, 'activate', 'addRow');\n        return true;\n    },\n    initializeIfVisible: function() {\n        this.removeListener(Garnish.$win, 'resize');\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n        }\n    },\n    updateAddRowButton: function() {\n        if (!this.canAddRow()) {\n            this.$addRowBtn.css('opacity', '0.2');\n            this.$addRowBtn.css('pointer-events', 'none');\n        } else {\n            this.$addRowBtn.css('opacity', '1');\n            this.$addRowBtn.css('pointer-events', 'auto');\n        }\n    },\n    canDeleteRow: function() {\n        return (this.rowCount > this.settings.minRows);\n    },\n    deleteRow: function(row) {\n        if (!this.canDeleteRow()) {\n            return;\n        }\n\n        this.sorter.removeItems(row.$tr);\n        row.$tr.remove();\n\n        this.rowCount--;\n\n        this.updateAddRowButton();\n        if (this.rowCount === 0) {\n            this.$table.addClass('hidden');\n        }\n\n        // onDeleteRow callback\n        this.settings.onDeleteRow(row.$tr);\n\n        row.destroy();\n    },\n    canAddRow: function() {\n        if (this.settings.staticRows) {\n            return false;\n        }\n\n        if (this.settings.maxRows) {\n            return (this.rowCount < this.settings.maxRows);\n        }\n\n        return true;\n    },\n    addRow: function(focus, prepend) {\n        if (!this.canAddRow()) {\n            return;\n        }\n\n        var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n            $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n        if (prepend) {\n            $tr.prependTo(this.$tbody);\n        } else {\n            $tr.appendTo(this.$tbody);\n        }\n\n        var row = this.createRowObj($tr);\n        this.sorter.addItems($tr);\n\n        // Focus the first input in the row\n        if (focus !== false) {\n            $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n        }\n\n        this.rowCount++;\n        this.updateAddRowButton();\n        this.$table.removeClass('hidden');\n\n        // onAddRow callback\n        this.settings.onAddRow($tr);\n\n        return row;\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n    },\n\n    createRowObj: function($tr) {\n        return new Craft.EditableTable.Row(this, $tr);\n    },\n\n    focusOnPrevRow: function($tr, tdIndex, blurTd) {\n        var $prevTr = $tr.prev('tr');\n        var prevRow;\n\n        if ($prevTr.length) {\n            prevRow = $prevTr.data('editable-table-row');\n        } else {\n            prevRow = this.addRow(false, true);\n        }\n\n        // Focus on the same cell in the previous row\n        if (!prevRow) {\n            return;\n        }\n\n        if (!prevRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($prevTr) {\n                this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    focusOnNextRow: function($tr, tdIndex, blurTd) {\n        var $nextTr = $tr.next('tr');\n        var nextRow;\n\n        if ($nextTr.length) {\n            nextRow = $nextTr.data('editable-table-row');\n        } else {\n            nextRow = this.addRow(false);\n        }\n\n        // Focus on the same cell in the next row\n        if (!nextRow) {\n            return;\n        }\n\n        if (!nextRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($nextTr) {\n                this.focusOnNextRow($nextTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    importData: function(data, row, tdIndex) {\n        let lines = data.split(/\\r?\\n|\\r/);\n        for (let i = 0; i < lines.length; i++) {\n            let values = lines[i].split(\"\\t\");\n            for (let j = 0; j < values.length; j++) {\n                let value = values[j];\n                row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                    .val(value)\n                    .trigger('input');\n            }\n\n            // move onto the next row\n            let $nextTr = row.$tr.next('tr');\n            if ($nextTr.length) {\n                row = $nextTr.data('editable-table-row');\n            } else {\n                row = this.addRow(false);\n            }\n        }\n    },\n}, {\n    textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n    defaults: {\n        rowIdPrefix: '',\n        defaultValues: {},\n        staticRows: false,\n        minRows: null,\n        maxRows: null,\n        onAddRow: $.noop,\n        onDeleteRow: $.noop\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        var $tr = $('<tr/>', {\n            'data-id': rowId\n        });\n\n        for (var colId in columns) {\n            if (!columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            var col = columns[colId],\n                value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                $cell;\n\n            if (col.type === 'heading') {\n                $cell = $('<th/>', {\n                    'scope': 'row',\n                    'class': col['class'],\n                    'html': value\n                });\n            } else {\n                var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                $cell = $('<td/>', {\n                    'class': `${col.class} ${col.type}-cell`,\n                    'width': col.width\n                });\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $cell.addClass('textual');\n                }\n\n                if (col.code) {\n                    $cell.addClass('code');\n                }\n\n                switch (col.type) {\n                    case 'checkbox':\n                        $('<div class=\"checkbox-wrapper\"/>')\n                            .append(Craft.ui.createCheckbox({\n                                    name: name,\n                                    value: col.value || '1',\n                                    checked: !!value\n                                })\n                            )\n                            .appendTo($cell);\n                        break;\n\n                    case 'color':\n                        Craft.ui.createColorInput({\n                            name: name,\n                            value: value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'date':\n                        Craft.ui.createDateInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'lightswitch':\n                        Craft.ui.createLightswitch({\n                            name: name,\n                            value: col.value || '1',\n                            on: !!value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'select':\n                        Craft.ui.createSelect({\n                            name: name,\n                            options: col.options,\n                            value: value || (function() {\n                                for (var key in col.options) {\n                                    if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                        return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                    }\n                                }\n                                return null;\n                            })(),\n                            'class': 'small'\n                        }).appendTo($cell);\n                        break;\n\n                    case 'time':\n                        Craft.ui.createTimeInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'email':\n                    case 'url':\n                        Craft.ui.createTextInput({\n                            name: name,\n                            value: value,\n                            type: col.type,\n                            placeholder: col.placeholder || null,\n                        }).appendTo($cell);\n                        break;\n\n                    default:\n                        $('<textarea/>', {\n                            'name': name,\n                            'rows': col.rows || 1,\n                            'val': value,\n                            'placeholder': col.placeholder\n                        }).appendTo($cell);\n                }\n            }\n\n            $cell.appendTo($tr);\n        }\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'move icon',\n                'title': Craft.t('app', 'Reorder')\n            })\n        ).appendTo($tr);\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Delete')\n            })\n        ).appendTo($tr);\n\n        return $tr;\n    }\n});\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend({\n    table: null,\n    id: null,\n    niceTexts: null,\n\n    $tr: null,\n    $tds: null,\n    tds: null,\n    $textareas: null,\n    $deleteBtn: null,\n\n    init: function(table, tr) {\n        this.table = table;\n        this.$tr = $(tr);\n        this.$tds = this.$tr.children();\n        this.tds = [];\n        this.id = this.$tr.attr('data-id');\n\n        this.$tr.data('editable-table-row', this);\n\n        // Get the row ID, sans prefix\n        var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n        if (id > this.table.biggestId) {\n            this.table.biggestId = id;\n        }\n\n        this.$textareas = $();\n        this.niceTexts = [];\n        var textareasByColId = {};\n\n        var i = 0;\n        var colId, col, td, $textarea, $checkbox;\n\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n            td = this.tds[colId] = this.$tds[i];\n\n            if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                $textarea = $('textarea', td);\n                this.$textareas = this.$textareas.add($textarea);\n\n                this.addListener($textarea, 'focus', 'onTextareaFocus');\n                this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                this.niceTexts.push(new Garnish.NiceText($textarea, {\n                    onHeightChange: this.onTextareaHeightChange.bind(this)\n                }));\n\n                this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                $textarea.trigger('input');\n\n                if (col.type !== 'multiline') {\n                    this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                }\n\n                textareasByColId[colId] = $textarea;\n            } else if (col.type === 'checkbox') {\n                $checkbox = $('input[type=\"checkbox\"]', td);\n\n                if (col.radioMode) {\n                    if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                        this.table.radioCheckboxes[colId] = [];\n                    }\n                    this.table.radioCheckboxes[colId].push($checkbox[0]);\n                    this.addListener($checkbox, 'change', {colId}, 'onRadioCheckboxChange');\n                }\n\n                if (col.toggle) {\n                    this.addListener($checkbox, 'change', {colId}, function(ev) {\n                        this.applyToggleCheckbox(ev.data.colId);\n                    });\n                }\n            }\n\n            if (!$(td).hasClass('disabled')) {\n                this.addListener(td, 'click', {td}, function(ev) {\n                    if (ev.target === ev.data.td) {\n                        $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                    }\n                });\n            }\n\n            i++;\n        }\n\n        // Now that all of the text cells have been nice-ified, let's normalize the heights\n        this.onTextareaHeightChange();\n\n        // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n            col = this.table.columns[colId];\n            if (col.type === 'checkbox' && col.toggle) {\n                this.applyToggleCheckbox(colId);\n            }\n        }\n\n        // Now look for any autopopulate columns\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n\n            if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                    allowNonAlphaStart: true\n                });\n            }\n        }\n\n        var $deleteBtn = this.$tr.children().last().find('.delete');\n        this.addListener($deleteBtn, 'click', 'deleteRow');\n\n        var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n        this.addListener($inputs, 'focus', function(ev) {\n            $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n        });\n        this.addListener($inputs, 'blur', function(ev) {\n            $(ev.currentTarget).closest('td').removeClass('focus');\n        });\n    },\n\n    onTextareaFocus: function(ev) {\n        this.onTextareaHeightChange();\n\n        var $textarea = $(ev.currentTarget);\n\n        if ($textarea.data('ignoreNextFocus')) {\n            $textarea.data('ignoreNextFocus', false);\n            return;\n        }\n\n        setTimeout(function() {\n            Craft.selectFullValue($textarea);\n        }, 0);\n    },\n\n    onRadioCheckboxChange: function(ev) {\n        if (ev.currentTarget.checked) {\n            for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                checkbox.checked = (checkbox === ev.currentTarget);\n            }\n        }\n    },\n\n    applyToggleCheckbox: function(checkboxColId) {\n        var checkboxCol = this.table.columns[checkboxColId];\n        var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n        var colId, colIndex, neg;\n        for (var i = 0; i < checkboxCol.toggle.length; i++) {\n            colId = checkboxCol.toggle[i];\n            colIndex = this.table.colum;\n            neg = colId[0] === '!';\n            if (neg) {\n                colId = colId.substr(1);\n            }\n            if ((checked && !neg) || (!checked && neg)) {\n                $(this.tds[colId])\n                    .removeClass('disabled')\n                    .find('textarea, input').prop('disabled', false);\n            } else {\n                $(this.tds[colId])\n                    .addClass('disabled')\n                    .find('textarea, input').prop('disabled', true);\n            }\n        }\n    },\n\n    ignoreNextTextareaFocus: function(ev) {\n        $.data(ev.currentTarget, 'ignoreNextFocus', true);\n    },\n\n    handleKeypress: function(ev) {\n        var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n        var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n        // Going to the next/previous row?\n        if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n            ev.preventDefault();\n            if (ev.shiftKey) {\n                this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            } else {\n                this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            }\n            return;\n        }\n\n        // Was this an invalid number character?\n        if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n            ev.preventDefault();\n        }\n    },\n\n    handlePaste: function(ev) {\n        let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n        if (!data.match(/[\\t\\r\\n]/)) {\n            return;\n        }\n        ev.preventDefault();\n        this.table.importData(data, this, ev.data.tdIndex);\n    },\n\n    validateValue: function(ev) {\n        if (ev.data.type === 'multiline') {\n            return;\n        }\n\n        var safeValue;\n\n        if (ev.data.type === 'number') {\n            // Only grab the number at the beginning of the value (if any)\n            var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n            if (match !== null) {\n                safeValue = match[1];\n            } else {\n                safeValue = '';\n            }\n        } else {\n            // Just strip any newlines\n            safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n        }\n\n        if (safeValue !== ev.currentTarget.value) {\n            ev.currentTarget.value = safeValue;\n        }\n    },\n\n    onTextareaHeightChange: function() {\n        // Keep all the textareas' heights in sync\n        var tallestTextareaHeight = -1;\n\n        for (var i = 0; i < this.niceTexts.length; i++) {\n            if (this.niceTexts[i].height > tallestTextareaHeight) {\n                tallestTextareaHeight = this.niceTexts[i].height;\n            }\n        }\n\n        this.$textareas.css('min-height', tallestTextareaHeight);\n\n        // If the <td> is still taller, go with that instead\n        var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n        if (tdHeight > tallestTextareaHeight) {\n            this.$textareas.css('min-height', tdHeight);\n        }\n    },\n\n    deleteRow: function() {\n        this.table.deleteRow(this);\n    }\n}, {\n    numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend({\n    maxLevels: null,\n    newChildUrl: null,\n    $trigger: null,\n    $selectedItems: null,\n    triggerEnabled: true,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n        this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n        // Do we have a custom handler?\n        if (this.settings.activate) {\n            // Prevent the element index's click handler\n            this.$trigger.data('custom-handler', true);\n\n            // Is this a custom trigger?\n            if (this.$trigger.prop('nodeName') === 'FORM') {\n                this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n            } else {\n                this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n            }\n        }\n\n        this.updateTrigger();\n        Craft.elementIndex.on('selectionChange', this.updateTrigger.bind(this));\n    },\n\n    updateTrigger: function() {\n        // Ignore if the last element was just unselected\n        if (Craft.elementIndex.getSelectedElements().length === 0) {\n            return;\n        }\n\n        if (this.validateSelection()) {\n            this.enableTrigger();\n        } else {\n            this.disableTrigger();\n        }\n    },\n\n    /**\n     * Determines if this action can be performed on the currently selected elements.\n     *\n     * @return boolean\n     */\n    validateSelection: function() {\n        var valid = true;\n        this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n        if (!this.settings.batch && this.$selectedItems.length > 1) {\n            valid = false;\n        } else if (typeof this.settings.validateSelection === 'function') {\n            valid = this.settings.validateSelection(this.$selectedItems);\n        }\n\n        return valid;\n    },\n\n    enableTrigger: function() {\n        if (this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.removeClass('disabled');\n        this.triggerEnabled = true;\n    },\n\n    disableTrigger: function() {\n        if (!this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.addClass('disabled');\n        this.triggerEnabled = false;\n    },\n\n    handleTriggerActivation: function(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (this.triggerEnabled) {\n            this.settings.activate(this.$selectedItems);\n        }\n    }\n}, {\n    defaults: {\n        type: null,\n        batch: true,\n        validateSelection: null,\n        activate: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend({\n    queue: null,\n    workers: [],\n\n    init: function() {\n        this.queue = [];\n\n        for (var i = 0; i < 3; i++) {\n            this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n        }\n    },\n\n    load: function($elements) {\n        // Only immediately load the visible images\n        let $thumbs = $elements.find('.elementthumb');\n        for (let i = 0; i < $thumbs.length; i++) {\n            let $thumb = $thumbs.eq(i);\n            let $scrollParent = $thumb.scrollParent();\n            if (this.isVisible($thumb, $scrollParent)) {\n                this.addToQueue($thumb[0]);\n            } else {\n                let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                $scrollParent.on(`scroll.${key}`, {\n                    $thumb: $thumb,\n                    $scrollParent: $scrollParent,\n                    key: key,\n                }, (ev) => {\n                    if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                        delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                        $scrollParent.off(`scroll.${ev.data.key}`);\n                        this.addToQueue(ev.data.$thumb[0]);\n                    }\n                });\n            }\n        }\n    },\n\n    addToQueue: function(thumb) {\n        this.queue.push(thumb);\n\n        // See if there are any inactive workers\n        for (var i = 0; i < this.workers.length; i++) {\n            if (!this.workers[i].active) {\n                this.workers[i].loadNext();\n            }\n        }\n    },\n\n    isVisible: function($thumb, $scrollParent) {\n        let thumbOffset = $thumb.offset().top;\n        let scrollParentOffset, scrollParentHeight;\n        if ($scrollParent[0] === document) {\n            scrollParentOffset = $scrollParent.scrollTop();\n            scrollParentHeight = Garnish.$win.height();\n        } else {\n            scrollParentOffset = $scrollParent.offset().top;\n            scrollParentHeight = $scrollParent.height();\n        }\n        return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.workers.length; i++) {\n            this.workers[i].destroy();\n        }\n\n        this.base();\n    }\n}, {\n    invisibleThumbs: {},\n    retryAll: function() {\n        for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n            let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n            delete Craft.ElementThumbLoader.invisibleThumbs[key];\n            $scrollParent.off(`scroll.${key}`);\n            queue.load($thumb.parent());\n        }\n    }\n});\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend({\n    loader: null,\n    active: false,\n\n    init: function(loader) {\n        this.loader = loader;\n    },\n\n    loadNext: function() {\n        var container = this.loader.queue.shift();\n        if (typeof container === 'undefined') {\n            this.active = false;\n            return;\n        }\n\n        this.active = true;\n        var $container = $(container);\n        if ($container.find('img').length) {\n            this.loadNext();\n            return;\n        }\n        var $img = $('<img/>', {\n            sizes: $container.attr('data-sizes'),\n            srcset: $container.attr('data-srcset'),\n            alt: ''\n        });\n        this.addListener($img, 'load,error', 'loadNext');\n        $img.appendTo($container);\n        picturefill({\n            elements: [$img[0]]\n        });\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend({\n    $form: null,\n    inputs: null,\n\n    init: function(form, inputs) {\n        this.$form = $(form);\n\n        // Only check specific inputs?\n        if (typeof inputs !== 'undefined') {\n            this.inputs = [];\n            inputs = $.makeArray(inputs);\n\n            for (var i = 0; i < inputs.length; i++) {\n                var $inputs = $(inputs[i]);\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $inputs.eq(j);\n\n                    this.inputs.push({\n                        input: $input,\n                        val: Garnish.getInputPostVal($input)\n                    });\n                }\n            }\n        }\n\n        this.addListener(this.$form, 'submit', 'handleFormSubmit');\n    },\n\n    handleFormSubmit: function(ev) {\n        // Ignore if we're in the middle of getting the elevated session timeout\n        if (Craft.elevatedSessionManager.fetchingTimeout) {\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            return;\n        }\n\n        // Are we only interested in certain inputs?\n        if (this.inputs) {\n            var inputsChanged = false;\n            var $input;\n\n            for (var i = 0; i < this.inputs.length; i++) {\n                $input = this.inputs[i].input;\n                // Is this a password input?\n                if ($input.data('passwordInput')) {\n                    $input = $input.data('passwordInput').$currentInput;\n                }\n\n                // Has this input's value changed?\n                if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                    inputsChanged = true;\n                    break;\n                }\n            }\n\n            if (!inputsChanged) {\n                // No need to interrupt the submit\n                return;\n            }\n        }\n\n        // Prevent the form from submitting until the user has an elevated session\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n        Craft.elevatedSessionManager.requireElevatedSession(this.submitForm.bind(this));\n    },\n\n    submitForm: function() {\n        // Don't let handleFormSubmit() interrupt this time\n        this.disable();\n        this.$form.trigger('submit');\n        this.enable();\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend({\n    fetchingTimeout: false,\n\n    passwordModal: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $submitBtn: null,\n    $errorPara: null,\n\n    callback: null,\n\n    /**\n     * Requires that the user has an elevated session.\n     *\n     * @param {function} callback The callback function that should be called once the user has an elevated session\n     */\n    requireElevatedSession: function(callback) {\n        this.callback = callback;\n\n        // Check the time remaining on the user's elevated session (if any)\n        this.fetchingTimeout = true;\n\n        Craft.postActionRequest('users/get-elevated-session-timeout', (response, textStatus) => {\n            this.fetchingTimeout = false;\n\n            if (textStatus === 'success') {\n                // Is there still enough time left or has it been disabled?\n                if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                    this.callback();\n                } else {\n                    // Show the password modal\n                    this.showPasswordModal();\n                }\n            }\n        });\n    },\n\n    showPasswordModal: function() {\n        if (!this.passwordModal) {\n            var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<td/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Submit'),\n            }).appendTo($buttonContainer);\n            this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.passwordModal = new Garnish.Modal($passwordModal, {\n                closeOtherModals: false,\n                onFadeIn: () => {\n                    setTimeout(this.focusPasswordInput.bind(this), 100);\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($passwordModal, 'submit', 'submitPassword');\n        } else {\n            this.passwordModal.show();\n        }\n    },\n\n    focusPasswordInput: function() {\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$passwordInput.trigger('focus');\n        }\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$submitBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$submitBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    submitPassword: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (!this.validatePassword()) {\n            return;\n        }\n\n        this.$passwordSpinner.removeClass('hidden');\n        this.clearLoginError();\n\n        var data = {\n            currentPassword: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/start-elevated-session', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.passwordModal.hide();\n                    this.callback();\n                } else {\n                    this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                    Garnish.shake(this.passwordModal.$container);\n                    this.focusPasswordInput();\n                }\n            } else {\n                this.showPasswordError();\n            }\n        });\n    },\n\n    showPasswordError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$errorPara.text(error);\n        this.passwordModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showPasswordError('');\n    }\n}, {\n    minSafeElevatedSessionTimeout: 5\n});\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend({\n    publishableSections: null,\n    $newEntryBtnGroup: null,\n    $newEntryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible sections the user has permission to create new entries in\n        this.publishableSections = [];\n\n        for (var i = 0; i < Craft.publishableSections.length; i++) {\n            var section = Craft.publishableSections[i];\n\n            if (this.getSourceByKey('section:' + section.uid)) {\n                this.publishableSections.push(section);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific section in the URL?\n        if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n            if (defaultSectionHandle === 'singles') {\n                return 'singles';\n            } else {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultSectionHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        var handle;\n\n        // Get the handle of the selected source\n        if (this.$source.data('key') === 'singles') {\n            handle = 'singles';\n        } else {\n            handle = this.$source.data('handle');\n        }\n\n        // Update the New Entry button\n        // ---------------------------------------------------------------------\n\n        var i, href, label;\n\n        if (this.publishableSections.length) {\n            // Remove the old button, if there is one\n            if (this.$newEntryBtnGroup) {\n                this.$newEntryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a section that they have permission to create entries in\n            var selectedSection;\n\n            if (handle) {\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    if (this.publishableSections[i].handle === handle) {\n                        selectedSection = this.publishableSections[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n            // Otherwise only show a menu button\n            if (selectedSection) {\n                href = this._getSectionTriggerHref(selectedSection);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                        this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.publishableSections.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n            } else {\n                this.$newEntryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New entry'),\n                }).appendTo(this.$newEntryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    var section = this.publishableSections[i];\n\n                    if (\n                        (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                        (this.settings.context !== 'index' && section !== selectedSection)\n                    ) {\n                        href = this._getSectionTriggerHref(section);\n                        label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newEntryBtnGroup);\n        }\n\n        // Update the URL if we're on the Entries index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'entries';\n\n            if (handle) {\n                uri += '/' + handle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getSectionTriggerHref: function(section) {\n        if (this.settings.context === 'index') {\n            var uri = 'entries/' + section.handle + '/new';\n            let params = {};\n            if (this.siteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        params.site = Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n        } else {\n            return 'data-id=\"' + section.id + '\"';\n        }\n    },\n\n    _openCreateEntryModal: function(sectionId) {\n        if (this.$newEntryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the section\n        var section;\n\n        for (var i = 0; i < this.publishableSections.length; i++) {\n            if (this.publishableSections[i].id == sectionId) {\n                section = this.publishableSections[i];\n                break;\n            }\n        }\n\n        if (!section) {\n            return;\n        }\n\n        this.$newEntryBtn.addClass('inactive');\n        var newEntryBtnText = this.$newEntryBtn.text();\n        this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newEntryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                sectionId: sectionId,\n                typeId: section.entryTypes[0].id,\n                enabled: section.canPublish ? 1 : 0,\n            },\n            onHideHud: () => {\n                this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right section is selected\n                var sectionSourceKey = 'section:' + section.uid;\n\n                if (this.sourceKey !== sectionSourceKey) {\n                    this.selectSourceByKey(sectionSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n","/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: this.onTabOptionSelect.bind(this)\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const $labelSpan = $tab.find('.tabs .tab span');\n        const oldName = $labelSpan.text();\n        const newName = this.promptForTabName(oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    promptForTabName: function(oldName) {\n        return Craft.escapeHtml(prompt(Craft.t('app', 'Give your tab a name.'), oldName));\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const name = this.promptForTabName();\n        if (!name) {\n            return;\n        }\n\n        const $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>${name}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend({\n    $toggle: null,\n    targetPrefix: null,\n    targetSelector: null,\n    reverseTargetSelector: null,\n\n    _$target: null,\n    _$reverseTarget: null,\n    type: null,\n\n    init: function(toggle) {\n        this.$toggle = $(toggle);\n\n        // Is this already a field toggle?\n        if (this.$toggle.data('fieldtoggle')) {\n            Garnish.log('Double-instantiating a field toggle on an element');\n            this.$toggle.data('fieldtoggle').destroy();\n        }\n\n        this.$toggle.data('fieldtoggle', this);\n\n        this.type = this.getType();\n\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n        } else {\n            this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n            this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n        }\n\n        this.findTargets();\n\n        switch (this.type) {\n            case 'link':\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n                break;\n            case 'fieldset':\n                this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                break;\n            default:\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n                this.onToggleChange();\n        }\n    },\n\n    normalizeTargetSelector: function(selector) {\n        if (selector && !selector.match(/^[#\\.]/)) {\n            selector = '#' + selector;\n        }\n\n        return selector;\n    },\n\n    getType: function() {\n        let nodeName = this.$toggle.prop('nodeName');\n        if (\n            (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n            this.$toggle.attr('role') === 'checkbox' ||\n            this.$toggle.attr('role') === 'switch'\n        ) {\n            return 'checkbox';\n        }\n\n        switch (nodeName) {\n            case 'SELECT':\n                return 'select';\n            case 'A':\n                return 'link';\n            case 'FIELDSET':\n                return 'fieldset';\n        }\n\n        console.warn('Unexpected field toggle:', this.$toggle[0]);\n    },\n\n    findTargets: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            var toggleVal = this.getToggleVal();\n            this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n        } else {\n            if (this.targetSelector) {\n                this._$target = $(this.targetSelector);\n            }\n\n            if (this.reverseTargetSelector) {\n                this._$reverseTarget = $(this.reverseTargetSelector);\n            }\n        }\n    },\n\n    getToggleVal: function() {\n        if (this.type === 'checkbox') {\n            if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                return this.$toggle.prop('checked');\n            }\n            return this.$toggle.attr('aria-checked') === 'true';\n        }\n\n        let postVal;\n        if (this.type === 'fieldset') {\n            postVal = this.$toggle.find('input:checked:first').val();\n        } else {\n            postVal = Garnish.getInputPostVal(this.$toggle);\n        }\n\n        // Normalize the value\n        return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n    },\n\n    onToggleChange: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.hideTarget(this._$target);\n            this.findTargets();\n            this.showTarget(this._$target);\n        } else {\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n            } else {\n                this.onToggleChange._show = !!this.getToggleVal();\n            }\n\n            if (this.onToggleChange._show) {\n                this.showTarget(this._$target);\n                this.hideTarget(this._$reverseTarget);\n            } else {\n                this.hideTarget(this._$target);\n                this.showTarget(this._$reverseTarget);\n            }\n\n            delete this.onToggleChange._show;\n        }\n    },\n\n    showTarget: function($target) {\n        if ($target && $target.length) {\n            this.showTarget._currentHeight = $target.height();\n\n            $target.removeClass('hidden');\n\n            if (this.type !== 'select' && this.type !== 'fieldset') {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('collapsed');\n                    this.$toggle.addClass('expanded');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.prop('nodeName') !== 'SPAN') {\n                            $t.height('auto');\n                            this.showTarget._targetHeight = $t.height();\n                            $t.css({\n                                height: this.showTarget._currentHeight,\n                                overflow: 'hidden'\n                            });\n\n                            $t.velocity('stop');\n\n                            $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                $t.css({\n                                    height: '',\n                                    overflow: ''\n                                });\n                            });\n                        }\n                    })($target.eq(i));\n                }\n\n                delete this.showTarget._targetHeight;\n            }\n\n            delete this.showTarget._currentHeight;\n\n            // Trigger a resize event in case there are any grids in the target that need to initialize\n            Garnish.$win.trigger('resize');\n        }\n    },\n\n    hideTarget: function($target) {\n        if ($target && $target.length) {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                $target.addClass('hidden');\n            } else {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('expanded');\n                    this.$toggle.addClass('collapsed');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.hasClass('hidden')) {\n                            return;\n                        }\n                        if ($t.prop('nodeName') === 'SPAN') {\n                            $t.addClass('hidden');\n                        } else {\n                            $t.css('overflow', 'hidden');\n                            $t.velocity('stop');\n                            $t.velocity({height: 0}, 'fast', function() {\n                                $t.addClass('hidden');\n                            });\n                        }\n                    })($target.eq(i));\n                }\n            }\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend({\n    $container: null,\n\n    $items: null,\n    items: null,\n    totalCols: null,\n    colGutterDrop: null,\n    colPctWidth: null,\n\n    possibleItemColspans: null,\n    possibleItemPositionsByColspan: null,\n\n    itemPositions: null,\n    itemColspansByPosition: null,\n\n    layouts: null,\n    layout: null,\n    itemHeights: null,\n    leftPadding: null,\n\n    _refreshingCols: false,\n    _refreshColsAfterRefresh: false,\n    _forceRefreshColsAfterRefresh: false,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n\n        // Is this already a grid?\n        if (this.$container.data('grid')) {\n            Garnish.log('Double-instantiating a grid on an element');\n            this.$container.data('grid').destroy();\n        }\n\n        this.$container.data('grid', this);\n\n        this.setSettings(settings, Craft.Grid.defaults);\n\n        // Set the refreshCols() proxy that container resizes will trigger\n        this.handleContainerHeightProxy = () => {\n            this.refreshCols(false, true);\n        };\n\n        this.$items = this.$container.children(this.settings.itemSelector);\n        this.setItems();\n        this.refreshCols(true, false);\n\n        Garnish.$doc.ready(() => {\n            this.refreshCols(false, false);\n        });\n    },\n\n    addItems: function(items) {\n        this.$items = $().add(this.$items.add(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    removeItems: function(items) {\n        this.$items = $().add(this.$items.not(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    resetItemOrder: function() {\n        this.$items = $().add(this.$items);\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    setItems: function() {\n        this.setItems._ = {};\n\n        this.items = [];\n\n        for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n            this.items.push($(this.$items[this.setItems._.i]));\n        }\n\n        delete this.setItems._;\n    },\n\n    refreshCols: function(force) {\n        if (this._refreshingCols) {\n            this._refreshColsAfterRefresh = true;\n            if (force) {\n                this._forceRefreshColsAfterRefresh = true;\n            }\n            return;\n        }\n\n        this._refreshingCols = true;\n\n        if (!this.items.length) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.refreshCols._ = {};\n\n        // Check to see if the grid is actually visible\n        this.refreshCols._.oldHeight = this.$container[0].style.height;\n        this.$container[0].style.height = 1;\n        this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n        this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n        if (this.refreshCols._.scrollHeight === 0) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        if (this.settings.cols) {\n            this.refreshCols._.totalCols = this.settings.cols;\n        } else {\n            this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n            // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n            if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n            }\n\n            if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                this.refreshCols._.totalCols = this.settings.maxCols;\n            }\n        }\n\n        if (this.refreshCols._.totalCols === 0) {\n            this.refreshCols._.totalCols = 1;\n        }\n\n        // Same number of columns as before?\n        if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.totalCols = this.refreshCols._.totalCols;\n        this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n        // Temporarily stop listening to container resizes\n        this.removeListener(this.$container, 'resize');\n\n        if (this.settings.fillMode === 'grid') {\n            this.refreshCols._.itemIndex = 0;\n\n            while (this.refreshCols._.itemIndex < this.items.length) {\n                // Append the next X items and figure out which one is the tallest\n                this.refreshCols._.tallestItemHeight = -1;\n                this.refreshCols._.colIndex = 0;\n\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                    if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                        this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                    }\n\n                    this.refreshCols._.colIndex++;\n                }\n\n                if (this.settings.snapToGrid) {\n                    this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                    if (this.refreshCols._.remainder) {\n                        this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                    }\n                }\n\n                // Now set their heights to the tallest one\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                }\n\n                // set the this.refreshCols._.itemIndex pointer to the next one up\n                this.refreshCols._.itemIndex += this.totalCols;\n            }\n        } else {\n            this.removeListener(this.$items, 'resize');\n\n            // If there's only one column, sneak out early\n            if (this.totalCols === 1) {\n                this.$container.height('auto');\n                this.$items\n                    .show()\n                    .css({\n                        position: 'relative',\n                        width: 'auto',\n                        top: 0\n                    })\n                    .css(Craft.left, 0);\n            } else {\n                this.$items.css('position', 'absolute');\n                this.colPctWidth = (100 / this.totalCols);\n\n                // The setup\n\n                this.layouts = [];\n\n                this.itemPositions = [];\n                this.itemColspansByPosition = [];\n\n                // Figure out all of the possible colspans for each item,\n                // as well as all the possible positions for each item at each of its colspans\n\n                this.possibleItemColspans = [];\n                this.possibleItemPositionsByColspan = [];\n                this.itemHeightsByColspan = [];\n\n                for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                    this.possibleItemColspans[this.refreshCols._.item] = [];\n                    this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                    this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                    this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                    this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                    this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                    this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                    this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                    if (this.refreshCols._.minColspan > this.totalCols) {\n                        this.refreshCols._.minColspan = this.totalCols;\n                    }\n                    if (this.refreshCols._.maxColspan > this.totalCols) {\n                        this.refreshCols._.maxColspan = this.totalCols;\n                    }\n\n                    for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                        // Get the height for this colspan\n                        this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                        this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                        this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                        if (this.refreshCols._.positionLeft) {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = 0;\n                        } else if (this.refreshCols._.positionRight) {\n                            this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                            this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                        } else {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                        }\n\n                        for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                        }\n                    }\n                }\n\n                // Find all the possible layouts\n\n                this.refreshCols._.colHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                    this.refreshCols._.colHeights.push(0);\n                }\n\n                this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                // Now find the layout that looks the best.\n\n                // First find the layouts with the highest number of used columns\n                this.refreshCols._.layoutTotalCols = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                    for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                        if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                            this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                        }\n                    }\n                }\n\n                this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                // Filter out the ones that aren't using as many columns as they could be\n                for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                    if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                        this.layouts.splice(this.refreshCols._.i, 1);\n                    }\n                }\n\n                // Find the layout(s) with the least overall height\n                this.refreshCols._.layoutHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                }\n\n                this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                this.refreshCols._.shortestLayouts = [];\n                this.refreshCols._.emptySpaces = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                    if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                        this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                        // Now get its total empty space, including any trailing empty space\n                        this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                        }\n\n                        this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                    }\n                }\n\n                // And the layout with the least empty space is...\n                this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                // Set the item widths and left positions\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                    this.refreshCols._.css = {\n                        width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                    };\n                    this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                    this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                }\n\n                // If every item is at position 0, then let them lay out au naturel\n                if (this.isSimpleLayout()) {\n                    this.$container.height('auto');\n                    this.$items.css({\n                        position: 'relative',\n                        top: 0,\n                        'margin-bottom': this.settings.gutter + 'px'\n                    });\n                } else {\n                    this.$items.css('position', 'absolute');\n\n                    // Now position the items\n                    this.positionItems();\n\n                    // Update the positions as the items' heigthts change\n                    this.addListener(this.$items, 'resize', 'onItemResize');\n                }\n            }\n        }\n\n        this.completeRefreshCols();\n\n        // Resume container resize listening\n        this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n        this.onRefreshCols();\n    },\n\n    completeRefreshCols: function() {\n        // Delete the internal variable object\n        if (typeof this.refreshCols._ !== 'undefined') {\n            delete this.refreshCols._;\n        }\n\n        this._refreshingCols = false;\n\n        if (this._refreshColsAfterRefresh) {\n            var force = this._forceRefreshColsAfterRefresh;\n            this._refreshColsAfterRefresh = false;\n            this._forceRefreshColsAfterRefresh = false;\n\n            Garnish.requestAnimationFrame(() => {\n                this.refreshCols(force);\n            });\n        }\n    },\n\n    getItemWidth: function(colspan) {\n        return (this.colPctWidth * colspan);\n    },\n\n    getItemWidthCss: function(colspan) {\n        return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n    },\n\n    getItemWidthInPx: function(colspan) {\n        return this.getItemWidth(colspan) / 100 * this.$container.width() - this.colGutterDrop;\n    },\n\n    getItemLeftPosCss: function(position) {\n        return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n    },\n\n    getItemLeftPosInPx: function(position) {\n        return (this.getItemWidth(1) / 100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n    },\n\n    isSimpleLayout: function() {\n        this.isSimpleLayout._ = {};\n\n        for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n            if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                delete this.isSimpleLayout._;\n                return false;\n            }\n        }\n\n        delete this.isSimpleLayout._;\n        return true;\n    },\n\n    positionItems: function() {\n        this.positionItems._ = {};\n\n        this.positionItems._.colHeights = [];\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n            this.positionItems._.colHeights.push(0);\n        }\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n            this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n            this.positionItems._.affectedColHeights = [];\n\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n            }\n\n            this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n            if (this.positionItems._.top > 0) {\n                this.positionItems._.top += this.settings.gutter;\n            }\n\n            this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n            // Now add the new heights to those columns\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n            }\n        }\n\n        // Set the container height\n        this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n        delete this.positionItems._;\n    },\n\n    onItemResize: function(ev) {\n        this.onItemResize._ = {};\n\n        // Prevent this from bubbling up to the container, which has its own resize listener\n        ev.stopPropagation();\n\n        this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n        if (this.onItemResize._.item !== -1) {\n            // Update the height and reposition the items\n            this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n            if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                this.positionItems(false);\n            }\n        }\n\n        delete this.onItemResize._;\n    },\n\n    onRefreshCols: function() {\n        this.trigger('refreshCols');\n        this.settings.onRefreshCols();\n    }\n}, {\n    defaults: {\n        itemSelector: '.item',\n        cols: null,\n        maxCols: null,\n        minColWidth: 320,\n        gutter: 14,\n        fillMode: 'top',\n        colClass: 'col',\n        snapToGrid: null,\n\n        onRefreshCols: $.noop\n    }\n});\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend({\n    grid: null,\n    _: null,\n\n    init: function(grid) {\n        this.grid = grid;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        this._ = {};\n\n        // Loop through all possible colspans\n        for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n            this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n            // Loop through all the possible positions for this colspan,\n            // and find the one that is closest to the top\n\n            this._.tallestColHeightsByPosition = [];\n\n            for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                this._.colHeightsForPosition = [];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                }\n\n                this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n            }\n\n            // And the shortest position for this colspan is...\n            this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n            this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n            // Now log the colspan/position placement\n            this._.positions = prevPositions.slice(0);\n            this._.colspans = prevColspans.slice(0);\n            this._.colHeights = prevColHeights.slice(0);\n            this._.emptySpace = prevEmptySpace;\n\n            this._.positions.push(this._.position);\n            this._.colspans.push(this._.colspan);\n\n            // Add the new heights to those columns\n            this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n            this._.endingCol = this._.position + this._.colspan - 1;\n\n            for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n            }\n\n            // If this is the last item, create the layout\n            if (item === this.grid.items.length - 1) {\n                this.grid.layouts.push({\n                    positions: this._.positions,\n                    colspans: this._.colspans,\n                    colHeights: this._.colHeights,\n                    emptySpace: this._.emptySpace\n                });\n            } else {\n                // Dive deeper\n                this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n            }\n        }\n\n        delete this._;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Remove inner-word punctuation\n        handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        handle = handle.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        handle = Craft.asciiString(handle);\n\n        if (!this.settings.allowNonAlphaStart) {\n            // Handle must start with a letter\n            handle = handle.replace(/^[^a-z]+/, '');\n        }\n\n        // Get the \"words\"\n        var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n        handle = '';\n\n        if (Craft.handleCasing === 'snake') {\n            return words.join('_');\n        }\n\n        // Make it camelCase\n        for (let i = 0; i < words.length; i++) {\n            if (Craft.handleCasing !== 'pascal' && i === 0) {\n                handle += words[i];\n            } else {\n                handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n            }\n        }\n\n        return handle;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend({\n    $container: null,\n    progressBar: null,\n    uploader: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ImageUpload.defaults);\n        this.initImageUpload();\n    },\n\n    initImageUpload: function() {\n        this.$container = $(this.settings.containerSelector);\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl(this.settings.uploadAction),\n            formData: this.settings.postParameters,\n            fileInput: this.$container.find(this.settings.fileInputSelector),\n            paramName: this.settings.uploadParamName\n        };\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n        options.events.fileuploadfail = this._onUploadError.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        this.initButtons();\n    },\n\n    initButtons: function() {\n        this.$container.find(this.settings.uploadButtonSelector).on('click', ev => {\n            this.$container.find(this.settings.fileInputSelector).trigger('click');\n        });\n\n        this.$container.find(this.settings.deleteButtonSelector).on('click', ev => {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        this.refreshImage(response);\n                    }\n                });\n            }\n        });\n    },\n\n    refreshImage: function(response) {\n        $(this.settings.containerSelector).replaceWith(response.html);\n        this.settings.onAfterRefreshImage(response);\n        this.initImageUpload();\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function(event) {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var html = $(data.result.html);\n            this.refreshImage(data.result);\n        }\n\n        // Last file\n        if (this.uploader.isLastUpload()) {\n            this.progressBar.hideProgressBar();\n            this.$container.removeClass('uploading');\n        }\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadError: function(event, data) {\n        if (data.jqXHR.responseJSON.error) {\n            alert(data.jqXHR.responseJSON.error);\n            this.$container.removeClass('uploading');\n            this.progressBar.hideProgressBar();\n            this.progressBar.resetProgressBar();\n        }\n    }\n}, {\n    defaults: {\n        postParameters: {},\n        uploadAction: \"\",\n        deleteAction: \"\",\n        fileInputSelector: \"\",\n\n        onAfterRefreshImage: $.noop,\n        containerSelector: null,\n\n        uploadButtonSelector: null,\n        deleteButtonSelector: null,\n\n        uploadParamName: 'files'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend({\n    $icon: null,\n    content: null,\n    hud: null,\n\n    init: function(icon) {\n        this.$icon = $(icon);\n\n        if (this.$icon.data('infoicon')) {\n            Garnish.log('Double-instantiating an info icon on an element');\n            this.content = this.$icon.data('infoicon').content;\n            this.$icon.data('infoicon').destroy();\n        } else {\n            this.content = this.$icon.html();\n            this.$icon\n                .html('')\n                .attr({\n                    tabindex: 0,\n                    'role': 'button',\n                    'aria-label': Craft.t('app', 'Information'),\n                });\n        }\n\n        this.$icon.data('infoicon', this);\n\n        if (this.$icon[0].previousSibling && this.$icon[0].previousSibling.nodeType === Node.TEXT_NODE) {\n            // Make sure it's in a .nowrap container\n            const $parent = this.$icon.parent();\n            if (!$parent.hasClass('nowrap')) {\n                // Find the last word in the text\n                const m = this.$icon[0].previousSibling.nodeValue.match(/[^\\s\\-]+\\s*$/);\n                if (m) {\n                    this.$icon[0].previousSibling.nodeValue = this.$icon[0].previousSibling.nodeValue.substr(0, m.index);\n                    $('<span/>', {\n                        class: 'nowrap',\n                        html: m[0].replace(/\\s+$/, '') + ' ',\n                    })\n                        .insertAfter(this.$icon[0].previousSibling)\n                        .append(this.$icon);\n                }\n            }\n        }\n\n        this.addListener(this.$icon, 'click', ev => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.showHud();\n        });\n\n        this.addListener(this.$icon, 'keydown', ev => {\n            if (!(this.hud && this.hud.showing) && [Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.showHud();\n            }\n        });\n    },\n\n    showHud: function(ev) {\n        if (!this.hud) {\n            this.hud = new Garnish.HUD(this.$icon, this.content, {\n                hudClass: 'hud info-hud',\n                closeOtherHUDs: false,\n                onShow: () => {\n                    Garnish.shortcutManager.registerShortcut(Garnish.SPACE_KEY, () => {\n                        this.hud.hide();\n                    });\n                },\n            });\n            Craft.initUiElements(this.hud.$body);\n        } else {\n            this.hud.show();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend({\n    settings: null,\n    $outerContainer: null,\n    $innerContainer: null,\n    $input: null,\n    small: false,\n    on: false,\n    indeterminate: false,\n    dragger: null,\n\n    dragStartMargin: null,\n\n    init: function(outerContainer, settings) {\n        this.$outerContainer = $(outerContainer);\n\n        // Is this already a lightswitch?\n        if (this.$outerContainer.data('lightswitch')) {\n            Garnish.log('Double-instantiating a lightswitch on an element');\n            this.$outerContainer.data('lightswitch').destroy();\n        }\n\n        this.$outerContainer.data('lightswitch', this);\n\n        this.small = this.$outerContainer.hasClass('small');\n\n        this.setSettings(settings, Craft.LightSwitch.defaults);\n\n        this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n        this.$input = this.$outerContainer.find('input:first');\n\n        // If the input is disabled, go no further\n        if (this.$input.prop('disabled')) {\n            return;\n        }\n\n        this.on = this.$outerContainer.hasClass('on');\n        this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n        this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n        this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n        this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n            axis: Garnish.X_AXIS,\n            ignoreHandleSelector: null,\n            onDragStart: this._onDragStart.bind(this),\n            onDrag: this._onDrag.bind(this),\n            onDragStop: this._onDragStop.bind(this)\n        });\n\n        // Does the input have on/off labels?\n        let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n        if ($wrapper.length) {\n            this.addListener($wrapper.children('span[data-toggle=\"off\"]'), 'click', this.turnOff);\n            this.addListener($wrapper.children('span[data-toggle=\"on\"]'), 'click', this.turnOn);\n        }\n    },\n\n    turnOn: function(muteEvent) {\n        var changed = !this.on;\n\n        this.on = true;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.value);\n        this.$outerContainer.addClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'true');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnOff: function(muteEvent) {\n        var changed = this.on || this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin();\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val('');\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'false');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnIndeterminate: function(muteEvent) {\n        var changed = !this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = true;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.indeterminateValue);\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.addClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'mixed');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    toggle: function() {\n        if (this.indeterminate || !this.on) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    onChange: function() {\n        this.trigger('change');\n        this.settings.onChange(this.on);\n        this.$outerContainer.trigger('change');\n    },\n\n    _onMouseDown: function() {\n        this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n    },\n\n    _onMouseUp: function() {\n        this.removeListener(Garnish.$doc, 'mouseup');\n\n        // Was this a click?\n        if (!this.dragger.dragging) {\n            this.toggle();\n        }\n    },\n\n    _onKeyDown: function(event) {\n        switch (event.keyCode) {\n            case Garnish.SPACE_KEY: {\n                this.toggle();\n                event.preventDefault();\n                break;\n            }\n            case Garnish.RIGHT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOn();\n                } else {\n                    this.turnOff();\n                }\n\n                event.preventDefault();\n                break;\n            }\n            case Garnish.LEFT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOff();\n                } else {\n                    this.turnOn();\n                }\n\n                event.preventDefault();\n                break;\n            }\n        }\n    },\n\n    _getMargin: function() {\n        return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n    },\n\n    _onDragStart: function() {\n        this.$outerContainer.addClass('dragging');\n        this.dragStartMargin = this._getMargin();\n    },\n\n    _onDrag: function() {\n        var margin;\n\n        if (Craft.orientation === 'ltr') {\n            margin = this.dragStartMargin + this.dragger.mouseDistX;\n        } else {\n            margin = this.dragStartMargin - this.dragger.mouseDistX;\n        }\n\n        if (margin < this._getOffMargin()) {\n            margin = this._getOffMargin();\n        } else if (margin > 0) {\n            margin = 0;\n        }\n\n        this.$innerContainer.css('margin-' + Craft.left, margin);\n    },\n\n    _onDragStop: function() {\n        var margin = this._getMargin();\n        console.log(margin);\n\n        if (margin > (this._getOffMargin() / 2)) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    _onSettle: function() {\n        this.$outerContainer.removeClass('dragging');\n    },\n\n    destroy: function() {\n        this.base();\n        this.dragger.destroy();\n    },\n\n    _getOffMargin: function() {\n        return (this.small ? -10 : -12);\n    }\n}, {\n    animationDuration: 100,\n    defaults: {\n        value: '1',\n        indeterminateValue: '-',\n        onChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend({\n    $extraFields: null,\n    $trigger: null,\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $iframe: null,\n    $fieldPlaceholder: null,\n\n    previewUrl: null,\n    token: null,\n    basePostData: null,\n    inPreviewMode: false,\n    fields: null,\n    lastPostData: null,\n    updateIframeInterval: null,\n    loading: false,\n    checkAgain: false,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _slideInOnIframeLoad: false,\n    _forceUpdateIframeProxy: null,\n\n    _scrollX: null,\n    _scrollY: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.LivePreview.defaults);\n\n        // Should preview requests use a specific URL?\n        // This won't affect how the request gets routed (the action param will override it),\n        // but it will allow the templates to change behavior based on the request URI.\n        if (this.settings.previewUrl) {\n            this.previewUrl = this.settings.previewUrl;\n        } else {\n            this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n        }\n\n        // Load the preview over SSL if the current request is\n        if (document.location.protocol === 'https:') {\n            this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n        }\n\n        // Set the base post data\n        this.basePostData = $.extend({}, this.settings.previewParams);\n\n        this._forceUpdateIframeProxy = this.forceUpdateIframe.bind(this);\n\n        // Find the DOM elements\n        this.$extraFields = $(this.settings.extraFields);\n        this.$trigger = $(this.settings.trigger);\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n        // Event Listeners\n        this.addListener(this.$trigger, 'activate', 'toggle');\n\n        Craft.cp.on('beforeSaveShortcut', () => {\n            if (this.inPreviewMode) {\n                this.moveFieldsBack();\n            }\n        });\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n            inPx = Craft.LivePreview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    toggle: function() {\n        if (this.inPreviewMode) {\n            this.exit();\n        } else {\n            this.enter();\n        }\n    },\n\n    enter: function() {\n        if (this.inPreviewMode) {\n            return;\n        }\n\n        if (!this.token) {\n            this.createToken();\n            return;\n        }\n\n        this.trigger('beforeEnter');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            let $saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($editorHeader);\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this)\n            });\n\n            this.addListener($closeBtn, 'click', 'exit');\n            this.addListener($saveBtn, 'click', 'save');\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Move all the fields into the editor rather than copying them\n        // so any JS that's referencing the elements won't break.\n        this.fields = [];\n        var $fields = $(this.settings.fields);\n\n        for (var i = 0; i < $fields.length; i++) {\n            var $field = $($fields[i]),\n                $clone = this._getClone($field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter($field);\n            $field.detach();\n            this.$fieldPlaceholder.replaceWith($clone);\n            $field.appendTo(this.$editor);\n\n            this.fields.push({\n                $field: $field,\n                $clone: $clone\n            });\n        }\n\n        if (this.updateIframe()) {\n            this._slideInOnIframeLoad = true;\n        } else {\n            this.slideIn();\n        }\n\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = true;\n        this.trigger('enter');\n    },\n\n    createToken: function() {\n        Craft.postActionRequest('live-preview/create-token', {\n            previewAction: this.settings.previewAction\n        }, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.token = response.token;\n                this.enter();\n            }\n        });\n    },\n\n    save: function() {\n        Craft.cp.submitPrimaryForm();\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.updateIframeInterval = setInterval(this.updateIframe.bind(this), 1000);\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.exit();\n                }\n            });\n        });\n    },\n\n    exit: function() {\n        if (!this.inPreviewMode) {\n            return;\n        }\n\n        this.trigger('beforeExit');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        if (this.updateIframeInterval) {\n            clearInterval(this.updateIframeInterval);\n        }\n\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n        });\n\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = false;\n        this.trigger('exit');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n    },\n\n    updateIframe: function(force) {\n        if (force) {\n            this.lastPostData = null;\n        }\n\n        if (!this.inPreviewMode) {\n            return false;\n        }\n\n        if (this.loading) {\n            this.checkAgain = true;\n            return false;\n        }\n\n        // Has the post data changed?\n        var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n        if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n            this.lastPostData = postData;\n            this.loading = true;\n\n            var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n            this._scrollX = $doc ? $doc.scrollLeft() : 0;\n            this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n            $.ajax({\n                url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                method: 'POST',\n                data: $.extend({}, postData, this.basePostData),\n                headers: {\n                    'X-Craft-Token': this.token\n                },\n                xhrFields: {\n                    withCredentials: true\n                },\n                crossDomain: true,\n                success: this.handleSuccess.bind(this),\n                error: this.handleError.bind(this),\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    forceUpdateIframe: function() {\n        return this.updateIframe(true);\n    },\n\n    handleSuccess: function(data) {\n        var html = data +\n            '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n        // Create a new iframe\n        var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n        if (this.$iframe) {\n            $iframe.insertBefore(this.$iframe);\n        } else {\n            $iframe.appendTo(this.$iframeContainer);\n        }\n\n        this.addListener($iframe, 'load', function() {\n            if (this.$iframe) {\n                this.$iframe.remove();\n            }\n            this.$iframe = $iframe;\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n\n            this.removeListener($iframe, 'load');\n        });\n\n        Garnish.requestAnimationFrame(() => {\n            $iframe[0].contentWindow.document.open();\n            $iframe[0].contentWindow.document.write(html);\n            $iframe[0].contentWindow.document.close();\n            this.onResponse();\n        });\n    },\n\n    handleError: function() {\n        this.onResponse();\n    },\n\n    onResponse: function() {\n        this.loading = false;\n\n        if (this.checkAgain) {\n            this.checkAgain = false;\n            this.updateIframe();\n        }\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n\n    defaults: {\n        trigger: '.livepreviewbtn',\n        fields: null,\n        extraFields: null,\n        previewUrl: null,\n        previewAction: null,\n        previewParams: {}\n    }\n});\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend({\n    $passwordWrapper: null,\n    $passwordInput: null,\n    $textInput: null,\n    $currentInput: null,\n\n    $showPasswordToggle: null,\n    showingPassword: null,\n\n    init: function(passwordInput, settings) {\n        this.$passwordInput = $(passwordInput);\n        this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n        this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n        // Is this already a password input?\n        if (this.$passwordInput.data('passwordInput')) {\n            Garnish.log('Double-instantiating a password input on an element');\n            this.$passwordInput.data('passwordInput').destroy();\n        }\n\n        this.$passwordInput.data('passwordInput', this);\n\n        this.$showPasswordToggle = $('<button type=\"button\" class=\"invisible\" />');\n        this.$showPasswordToggle.addClass('password-toggle');\n        this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n        this.initInputFocusEvents(this.$passwordInput);\n        this.addListener(this.$showPasswordToggle, 'click', 'onClick');\n        this.hidePassword();\n    },\n\n    setCurrentInput: function($input) {\n        if (this.$currentInput) {\n            // Swap the inputs, while preventing the focus animation\n            $input.insertAfter(this.$currentInput);\n            this.$currentInput.detach();\n            $input.trigger('focus');\n\n            // Restore the input value\n            $input.val(this.$currentInput.val());\n        }\n\n        this.$currentInput = $input;\n\n        this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n    },\n\n    updateToggleLabel: function(label) {\n        this.$showPasswordToggle.text(label);\n    },\n\n    initInputFocusEvents: function($input) {\n        this.addListener($input, 'focus', function() {\n            this.$passwordWrapper.addClass('focus');\n        });\n        this.addListener($input, 'blur', function() {\n            this.$passwordWrapper.removeClass('focus');\n        });\n    },\n\n    showPassword: function() {\n        if (this.showingPassword) {\n            return;\n        }\n\n        if (!this.$textInput) {\n            this.$textInput = this.$passwordInput.clone(true);\n            this.$textInput.attr('type', 'text');\n            this.initInputFocusEvents(this.$textInput);\n        }\n\n        this.setCurrentInput(this.$textInput);\n        this.updateToggleLabel(Craft.t('app', 'Hide'));\n        this.showingPassword = true;\n    },\n\n    hidePassword: function() {\n        // showingPassword could be null, which is acceptable\n        if (this.showingPassword === false) {\n            return;\n        }\n\n        this.setCurrentInput(this.$passwordInput);\n        this.updateToggleLabel(Craft.t('app', 'Show'));\n        this.showingPassword = false;\n\n        // Alt key temporarily shows the password\n        this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n    },\n\n    togglePassword: function() {\n        if (this.showingPassword) {\n            this.hidePassword();\n        } else {\n            this.showPassword();\n        }\n\n        this.settings.onToggleInput(this.$currentInput);\n    },\n\n    onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n            this.showPassword();\n            this.$showPasswordToggle.addClass('invisible');\n            this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n        }\n    },\n\n    onKeyUp: function(ev) {\n        ev.preventDefault();\n\n        if (ev.keyCode === Garnish.ALT_KEY) {\n            this.hidePassword();\n            this.$showPasswordToggle.removeClass('invisible');\n        }\n    },\n\n    onInputChange: function() {\n        if (this.$currentInput.val()) {\n            this.$showPasswordToggle.removeClass('invisible');\n        } else {\n            this.$showPasswordToggle.addClass('invisible');\n        }\n    },\n\n    onClick: function(ev) {\n        if (this.$currentInput[0].setSelectionRange) {\n            var selectionStart = this.$currentInput[0].selectionStart,\n                selectionEnd = this.$currentInput[0].selectionEnd;\n\n            this.togglePassword();\n            this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n        } else {\n            this.togglePassword();\n        }\n    }\n}, {\n    defaults: {\n        onToggleInput: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend({\n    draftEditor: null,\n\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $spinner: null,\n    $statusIcon: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $previewHeader: null,\n    $targetBtn: null,\n    $targetMenu: null,\n    $deviceTypeContainer: null,\n    $orientationBtn: null,\n    $refreshBtn: null,\n    $deviceMask: null,\n    $devicePreviewContainer: null,\n    $iframe: null,\n    iframeLoaded: false,\n    $tempInput: null,\n    $fieldPlaceholder: null,\n\n    isActive: false,\n    isVisible: false,\n    activeTarget: 0,\n\n    isDeviceUpdating: false,\n    deviceAnimationTimeout: null,\n    currentDeviceType: 'desktop',\n    deviceOrientation: null,\n    deviceWidth: '',\n    deviceHeight: '',\n    deviceMaskDimensions: {\n        phone: {\n            width: 375,\n            height: 753\n        },\n        tablet: {\n            width: 768,\n            height: 1110\n        }\n    },\n\n    draftId: null,\n    url: null,\n    fields: null,\n\n    iframeHeight: null,\n    scrollTop: null,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _updateIframeProxy: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(draftEditor) {\n        this.draftEditor = draftEditor;\n\n        this._updateIframeProxy = this.updateIframe.bind(this);\n\n        this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.Preview.minEditorWidthInPx) {\n            inPx = Craft.Preview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    open: function() {\n        if (this.isActive) {\n            return;\n        }\n\n        this.isActive = true;\n        this.trigger('beforeOpen');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n            this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n            if (Craft.Pro) {\n                this.$previewHeader = $('<header/>', {'class': 'lp-preview-header'}).appendTo(this.$previewContainer);\n\n                // Preview targets\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo(this.$previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    const $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    let $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n\n                    $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                }\n\n                // Device type buttons\n                this.$deviceTypeContainer = $('<div/>', {\n                    class: 'btngroup lp-device-type',\n                    role: 'listbox',\n                    'aria-label': Craft.t('app', 'Device type'),\n                    tabindex: '0',\n                }).appendTo(this.$previewHeader);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--desktop active',\n                    title: Craft.t('app', 'Desktop'),\n                    'aria-label': Craft.t('app', 'Desktop'),\n                    'aria-selected': 'true',\n                    tabindex: '-1',\n                    data: {\n                        width: '',\n                        height: '',\n                        deviceType: 'desktop'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--tablet',\n                    title: Craft.t('app', 'Tablet'),\n                    'aria-label': Craft.t('app', 'Tablet'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 768,\n                        height: 1024,\n                        deviceType: 'tablet'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--phone',\n                    title: Craft.t('app', 'Mobile'),\n                    'aria-label': Craft.t('app', 'Mobile'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 375,\n                        height: 667,\n                        deviceType: 'phone'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n\n                $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                const $buttonContainer = $('<div class=\"buttons\"/>').appendTo(this.$previewHeader);\n\n                // Orientation toggle\n                this.$orientationBtn = $('<button/>', {\n                    type: 'button',\n                    'class': 'btn disabled',\n                    'data-icon': 'rotate',\n                    disabled: '',\n                    'aria-hidden': '',\n                    'text': Craft.t('app', 'Rotate')\n                }).appendTo($buttonContainer);\n                this.addListener(this.$orientationBtn, 'click', 'switchOrientation');\n\n                // Refresh button\n                this.$refreshBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn hidden',\n                    text: Craft.t('app', 'Refresh'),\n                    'data-icon': 'refresh',\n                }).appendTo($buttonContainer);\n                this._updateRefreshBtn();\n                this.addListener(this.$refreshBtn, 'click', () => {\n                    this.updateIframe(false, true);\n                });\n\n                // Get the last stored orientation\n                this.deviceOrientation = Craft.getLocalStorage('LivePreview.orientation');\n\n                // Device type button click handler\n                this.addListener($('.btn', this.$deviceTypeContainer), 'click', 'switchDeviceType');\n\n                // Device mask\n                this.$deviceMask = $('<div/>', {\n                    'class': 'lp-device-mask'\n                });\n            }\n\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n            if (this.$deviceMask) {\n                this.$iframeContainer.append(this.$deviceMask);\n            }\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this),\n            });\n\n            this.addListener($closeBtn, 'click', 'close');\n            this.addListener(this.$statusIcon, 'click', () => {\n                this.draftEditor.showStatusHud(this.$statusIcon);\n            });\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Find the fields, excluding nested fields\n        this.fields = [];\n        var $fields = $('#content .field').not($('#content .field .field'));\n\n        if ($fields.length) {\n            // Insert our temporary input before the first field so we know where to swap in the serialized form values\n            this.$tempInput.insertBefore($fields.get(0));\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            for (let i = 0; i < $fields.length; i++) {\n                let $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n        }\n\n        this.updateIframe();\n\n        this.draftEditor.on('update', this._updateIframeProxy);\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.trigger('open');\n    },\n\n    _activeTarget: function() {\n        return this.draftEditor.settings.previewTargets[this.activeTarget];\n    },\n\n    _updateRefreshBtn: function() {\n        const target = this._activeTarget();\n        if (target.refresh !== 'undefined' && !target.refresh) {\n            this.$refreshBtn.removeClass('hidden');\n        } else {\n            this.$refreshBtn.addClass('hidden');\n        }\n    },\n\n    switchTarget: function(i) {\n        this.activeTarget = i;\n        this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n        this.$targetMenu.find('a.sel').removeClass('sel');\n        this.$targetMenu.find('a').eq(i).addClass('sel');\n        this.updateIframe(true);\n        this._updateRefreshBtn();\n        this.trigger('switchTarget', {\n            previewTarget: this.draftEditor.settings.previewTargets[i],\n        });\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        if (!this.isActive || this.isVisible) {\n            return;\n        }\n\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.close();\n                }\n            });\n        });\n\n        this.isVisible = true;\n    },\n\n    close: function() {\n        if (!this.isActive || !this.isVisible) {\n            return;\n        }\n\n        this.trigger('beforeClose');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        // Remove our temporary input and move the preview fields back into place\n        this.$tempInput.detach();\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n            this.resetDevicePreview();\n        });\n\n        this.draftEditor.off('update', this._updateIframeProxy);\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.isActive = false;\n        this.isVisible = false;\n        this.trigger('close');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n        if (this._devicePreviewIsActive()) {\n            this.updateDevicePreview();\n        }\n    },\n\n    _useIframeResizer: function() {\n        return Craft.previewIframeResizerOptions !== false;\n    },\n\n    updateIframe: function(resetScroll, forceRefresh) {\n        if (!this.isActive) {\n            return false;\n        }\n\n        // Ignore non-boolean resetScroll values\n        resetScroll = resetScroll === true;\n\n        const target = this._activeTarget();\n        const refresh = !!(\n            forceRefresh ||\n            this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n            !this.$iframe ||\n            resetScroll ||\n            typeof target.refresh === 'undefined' ||\n            target.refresh\n        );\n\n        this.trigger('beforeUpdateIframe', {\n            previewTarget: target,\n            resetScroll: resetScroll,\n            refresh: refresh,\n        });\n\n        // If this is an existing preview target, make sure it wants to be refreshed automatically\n        if (!refresh) {\n            this.slideIn();\n            return;\n        }\n\n        this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n            // Maintain the current scroll position?\n            let sameHost;\n            if (resetScroll) {\n                this.scrollTop = null;\n            } else if (this.iframeLoaded && this.$iframe) {\n                if (this._useIframeResizer()) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                } else {\n                    sameHost = Craft.isSameHost(url);\n                    if (sameHost && this.$iframe[0].contentWindow) {\n                        this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                    }\n                }\n            }\n\n            this.iframeLoaded = false;\n\n            var $iframe = $('<iframe/>', {\n                'class': 'lp-preview',\n                frameborder: 0,\n                src: url,\n            });\n\n            if (this.$iframe) {\n                this.$iframe.replaceWith($iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            // If we’re on tablet/phone then wrap the iframe in our own container\n            // so we can keep all the iFrameResizer() stuff working\n            if (this._devicePreviewIsActive()) {\n                if (!this.$devicePreviewContainer) {\n                    this.$devicePreviewContainer = $('<div/>', {\n                        'class': 'lp-device-preview-container'\n                    });\n                    $iframe.wrap('<div class=\"lp-device-preview-container\"></div>');\n                    this.$devicePreviewContainer = this.$iframeContainer.find('.lp-device-preview-container');\n                }\n            }\n\n            // Keep the iframe height consistent with its content\n            if (this._useIframeResizer()) {\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                iFrameResize($.extend({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n            } else {\n                $iframe.on('load', () => {\n                    this.iframeLoaded = true;\n                    if (!resetScroll && sameHost && this.scrollTop !== null) {\n                        $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                    }\n                });\n            }\n\n            this.url = url;\n            this.$iframe = $iframe;\n\n            if (this._devicePreviewIsActive()) {\n                this.updateDevicePreview();\n            }\n\n            this.trigger('afterUpdateIframe', {\n                previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            this.slideIn();\n        });\n    },\n\n    _devicePreviewIsActive: function() {\n        return this.currentDeviceType !== 'desktop';\n    },\n\n    switchDeviceType: function(ev) {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n\n        const $btn = $(ev.target);\n        const newDeviceType = $btn.data('deviceType');\n\n        // Bail if we’re just smashing the same button\n        if (newDeviceType === this.currentDeviceType) {\n            return false;\n        }\n\n        // Store new device type data\n        this.currentDeviceType = newDeviceType;\n        this.deviceWidth = $btn.data('width');\n        this.deviceHeight = $btn.data('height');\n\n        // Set the active state on the button\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n\n        $btn\n            .addClass('active')\n            .attr('aria-selected', 'true');\n\n        // Update or reset\n        if (this.currentDeviceType === 'desktop') {\n            this.resetDevicePreview();\n        } else {\n            this.$iframeContainer.addClass('lp-iframe-container--updating');\n            this.updateIframe();\n            this.updateDevicePreview();\n        }\n    },\n\n    switchOrientation: function()\n    {\n        if (this.isDeviceUpdating || !this._devicePreviewIsActive()) {\n            return false;\n        }\n\n        // Switch to whichever orientation is currently not stored\n        if (!this.deviceOrientation || this.deviceOrientation === 'portrait') {\n            this.deviceOrientation = 'landscape';\n        } else {\n            this.deviceOrientation = 'portrait';\n        }\n\n        // Store the new one\n        Craft.setLocalStorage('LivePreview.orientation', this.deviceOrientation);\n\n        // Allow the animation to take place\n        this.$iframeContainer.addClass('lp-iframe-container--animating');\n\n        // Update the device preview\n        this.updateDevicePreview();\n    },\n\n    updateDevicePreview: function()\n    {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.isDeviceUpdating = true;\n\n        // Enable the orientation button\n        this.$orientationBtn\n            .removeClass('disabled')\n            .removeAttr('disabled')\n            .removeAttr('aria-hidden');\n\n        // Trigger the resized css mods\n        this.$iframeContainer.addClass('lp-iframe-container--has-device-preview');\n\n        // Add the tablet class if needed\n        if (this.currentDeviceType === 'tablet') {\n            this.$iframeContainer.addClass('lp-iframe-container--tablet');\n        } else {\n            this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n        }\n\n        // Figure out the best zoom\n        let hZoom = 1;\n        let wZoom = 1;\n        let zoom = 1;\n        let previewHeight = (this.$previewContainer.height() - 50) - 48; // 50px for the header bar and 24px clearance\n        let previewWidth = this.$previewContainer.width() - 48;\n        let maskHeight = this.deviceMaskDimensions[this.currentDeviceType].height;\n        let maskWidth = this.deviceMaskDimensions[this.currentDeviceType].width;\n\n        if (this.deviceOrientation === 'landscape') {\n            if (previewWidth < maskHeight) {\n                hZoom = previewWidth / maskHeight;\n            }\n            if (previewHeight < maskWidth) {\n                wZoom = previewHeight / maskWidth;\n            }\n        } else {\n            if (previewHeight < maskHeight) {\n                hZoom = previewHeight / maskHeight;\n            }\n            if (previewWidth < maskWidth) {\n                wZoom = previewWidth / maskWidth;\n            }\n        }\n\n        zoom = hZoom;\n        if (wZoom < hZoom) {\n            zoom = wZoom;\n        }\n\n        // Figure out the css values\n        const translate = -((100/zoom)/2);\n        const rotationDeg = this.deviceOrientation === 'landscape' ? '-90deg' : '0deg';\n\n        // Apply first to the device mask\n        this.$deviceMask.css({\n            width: this.deviceMaskDimensions[this.currentDeviceType].width + 'px',\n            height: this.deviceMaskDimensions[this.currentDeviceType].height + 'px',\n            transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%) rotate('+rotationDeg+')'\n        });\n\n        // After the animation duration we can update the iframe sizes and show it\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.deviceAnimationTimeout = setTimeout(() => {\n            // Then make the size change to the preview container\n            if (this.deviceOrientation === 'landscape') {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceHeight + 'px',\n                    height: this.deviceWidth + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: 0,\n                    marginLeft: '-' + (12*zoom) + 'px'\n                });\n            } else {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceWidth + 'px',\n                    height: this.deviceHeight + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: '-' + (12*zoom) + 'px',\n                    marginLeft: 0\n                });\n            }\n\n            // Remove the animating class and show the iframe\n            this.$iframeContainer.removeClass('lp-iframe-container--animating');\n            this.$iframeContainer.removeClass('lp-iframe-container--updating');\n            this.isDeviceUpdating = false;\n\n        }, 300);\n    },\n\n    resetDevicePreview: function()\n    {\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.currentDeviceType = 'desktop';\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n        this.$deviceTypeContainer.find('.lp-device-type-btn--desktop')\n            .addClass('active')\n            .attr('aria-selected', 'true');\n        this.$orientationBtn\n            .addClass('disabled')\n            .attr('disabled', '')\n            .attr('aria-hidden', '');\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n        this.$iframeContainer.removeClass('lp-iframe-container--has-device-preview');\n        this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n\n        // Flat out remove the iframe and let it get regenerated\n        if (this.$devicePreviewContainer) {\n            // If using iFrameResizer then remove the listeners first so we don’t get zombie instances\n            if (this._useIframeResizer()) {\n                this.$iframe[0].iFrameResizer.removeListeners();\n            }\n            this.$devicePreviewContainer.detach();\n            this.$devicePreviewContainer = null;\n            this.$iframe = null;\n            this.updateIframe();\n        }\n\n        this.isDeviceUpdating = false;\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        // Disable anything with a name attribute\n        $clone.find('[name]').prop('disabled', true);\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend({\n    assetId: null,\n    $spinner: null,\n    elementSelect: null,\n    type: null,\n    loaded: null,\n    requestId: 0,\n\n    /**\n     * Initialize the preview file modal.\n     * @returns {*|void}\n     */\n    init: function(assetId, elementSelect, settings) {\n        settings = $.extend(this.defaultSettings, settings);\n\n        settings.onHide = this._onHide.bind(this);\n\n        if (Craft.PreviewFileModal.openInstance) {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            if (instance.assetId !== assetId) {\n                instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                instance.elementSelect = elementSelect;\n            }\n\n            return this.destroy();\n        }\n\n        Craft.PreviewFileModal.openInstance = this;\n        this.elementSelect = elementSelect;\n\n        this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n        this.base(this.$container, $.extend({\n            resizable: true\n        }, settings));\n\n        // Cut the flicker, just show the nice person the preview.\n        if (this.$container) {\n            this.$container.velocity('stop');\n            this.$container.show().css('opacity', 1);\n\n            this.$shade.velocity('stop');\n            this.$shade.show().css('opacity', 1);\n        }\n\n        this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n    },\n\n    /**\n     * When hiding, remove all traces and focus last focused element.\n     * @private\n     */\n    _onHide: function() {\n        Craft.PreviewFileModal.openInstance = null;\n        if (this.elementSelect) {\n            this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n        }\n\n        this.$shade.remove();\n\n        return this.destroy();\n    },\n\n    /**\n     * Disappear immediately forever.\n     * @returns {boolean}\n     */\n    selfDestruct: function() {\n        var instance = Craft.PreviewFileModal.openInstance;\n\n        instance.hide();\n        instance.$shade.remove();\n        instance.destroy();\n\n        Craft.PreviewFileModal.openInstance = null;\n\n        return true;\n    },\n\n    /**\n     * Load an asset, using starting width and height, if applicable\n     * @param assetId\n     * @param startingWidth\n     * @param startingHeight\n     */\n    loadAsset: function(assetId, startingWidth, startingHeight) {\n        this.assetId = assetId;\n\n        this.$container.empty();\n        this.loaded = false;\n\n        this.desiredHeight = null;\n        this.desiredWidth = null;\n\n        var containerHeight = Garnish.$win.height() * 0.66;\n        var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n        containerHeight = containerWidth / 4 * 3;\n\n        if (startingWidth && startingHeight) {\n            var ratio = startingWidth / startingHeight;\n            containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n            containerWidth = containerHeight * ratio;\n\n            // This might actually have put width over the viewport limits, so doublecheck\n            if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = containerWidth / ratio;\n            }\n        }\n\n        this._resizeContainer(containerWidth, containerHeight);\n\n        this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n        var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n            left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n        this.$spinner.css({left: left, top: top, position: 'absolute'});\n        this.requestId++;\n\n        Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, (response, textStatus) => {\n            this.$container.removeClass('loading');\n            this.$spinner.remove();\n            this.loaded = true;\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (response.requestId != this.requestId) {\n                        return;\n                    }\n\n                    if (!response.previewHtml) {\n                        this.$container.addClass('zilch');\n                        this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                        return;\n                    }\n\n                    this.$container.removeClass('zilch');\n                    this.$container.append(response.previewHtml);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n                } else {\n                    alert(response.error);\n\n                    this.hide();\n                }\n            }\n        });\n    },\n\n    /**\n     * Resize the container to specified dimensions\n     * @param containerWidth\n     * @param containerHeight\n     * @private\n     */\n    _resizeContainer: function(containerWidth, containerHeight) {\n        this.$container.css({\n            'width': containerWidth,\n            'min-width': containerWidth,\n            'max-width': containerWidth,\n            'height': containerHeight,\n            'min-height': containerHeight,\n            'max-height': containerHeight,\n            'top': (Garnish.$win.height() - containerHeight) / 2,\n            'left': (Garnish.$win.width() - containerWidth) / 2\n        });\n    }\n}, {\n    defaultSettings: {\n        startingWidth: null,\n        startingHeight: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend({\n    $progressBar: null,\n    $innerProgressBar: null,\n    $progressBarStatus: null,\n\n    _itemCount: 0,\n    _processedItemCount: 0,\n    _displaySteps: false,\n\n    init: function($element, displaySteps) {\n        if (displaySteps) {\n            this._displaySteps = true;\n        }\n\n        this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n        this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n        this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n        this.resetProgressBar();\n    },\n\n    /**\n     * Reset the progress bar\n     */\n    resetProgressBar: function() {\n        // Since setting the progress percentage implies that there is progress to be shown\n        // It removes the pending class - we must add it back.\n        this.setProgressPercentage(100);\n        this.$progressBar.addClass('pending');\n\n        // Reset all the counters\n        this.setItemCount(1);\n        this.setProcessedItemCount(0);\n        this.$progressBarStatus.html('');\n\n        if (this._displaySteps) {\n            this.$progressBar.addClass('has-status');\n        }\n    },\n\n    /**\n     * Fade to invisible, hide it using a class and reset opacity to visible\n     */\n    hideProgressBar: function() {\n        this.$progressBar.fadeTo('fast', 0.01, () => {\n            this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n    },\n\n    showProgressBar: function() {\n        this.$progressBar.removeClass('hidden');\n        this.$progressBarStatus.removeClass('hidden');\n    },\n\n    setItemCount: function(count) {\n        this._itemCount = count;\n    },\n\n    incrementItemCount: function(count) {\n        this._itemCount += count;\n    },\n\n    setProcessedItemCount: function(count) {\n        this._processedItemCount = count;\n    },\n\n    incrementProcessedItemCount: function(count) {\n        this._processedItemCount += count;\n    },\n\n    updateProgressBar: function() {\n        // Only fools would allow accidental division by zero.\n        this._itemCount = Math.max(this._itemCount, 1);\n\n        var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n        this.setProgressPercentage(width);\n\n        if (this._displaySteps) {\n            this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n        }\n    },\n\n    setProgressPercentage: function(percentage, animate) {\n        if (percentage === 0) {\n            this.$progressBar.addClass('pending');\n        } else {\n            this.$progressBar.removeClass('pending');\n\n            if (animate) {\n                this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n            } else {\n                this.$innerProgressBar.velocity('stop').width(percentage + '%');\n            }\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, this._handleBatchPromptSelection.bind(this), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            } else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        } else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', () => {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        });\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n","/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', this._handleResize.bind(this));\n        this.addListener(this.$container, 'tapstart', this._handleTapStart.bind(this));\n        this.addListener(Garnish.$bod, 'tapmove', this._handleTapMove.bind(this));\n        this.addListener(Garnish.$bod, 'tapend', this._handleTapEnd.bind(this));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout(() => {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        } else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (((this.$graduations.width() / 2) + (position * -1)) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.Slideout = Garnish.Base.extend({\n        $outerContainer: null,\n        $container: null,\n        $shade: null,\n        isOpen: false,\n\n        init: function(contents, settings) {\n            this.setSettings(settings, Craft.Slideout.defaults);\n\n            if (!Garnish.isMobileBrowser()) {\n                this.$shade = $('<div class=\"slideout-shade\"/>')\n                    .appendTo(Garnish.$bod);\n\n                if (this.settings.closeOnShadeClick) {\n                    this.addListener(this.$shade, 'click', ev => {\n                        ev.stopPropagation();\n                        this.close();\n                    });\n                }\n            }\n\n            this.$outerContainer = $('<div/>', {class: 'slideout-container hidden'});\n            this.$container = $(`<${this.settings.containerElement}/>`, this.settings.containerAttributes)\n                .addClass('slideout')\n                .append(contents)\n                .data('slideout', this)\n                .appendTo(this.$outerContainer);\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.addClass('so-mobile');\n            }\n\n            Craft.trapFocusWithin(this.$container);\n\n            if (this.settings.autoOpen) {\n                this.open();\n            }\n        },\n\n        open: function() {\n            if (this.isOpen) {\n                return;\n            }\n\n            this._cancelTransitionListeners();\n\n            // Move the shade + container to the end of <body> so they get the highest sub-z-indexes\n            if (this.$shade) {\n                this.$shade\n                    .appendTo(Garnish.$bod)\n                    .show();\n            }\n\n            this.$outerContainer\n                .appendTo(Garnish.$bod)\n                .removeClass('hidden');\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.css('top', '100vh');\n            } else {\n                this.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n            }\n\n            this.$container.one('transitionend.slideout', () => {\n                Craft.setFocusWithin(this.$container);\n            });\n\n            if (this.$shade) {\n                this.$shade[0].offsetWidth;\n                this.$shade.addClass('so-visible');\n            }\n\n            this.$container[0].offsetWidth;\n            Craft.Slideout.addPanel(this);\n\n            this.enable();\n            Garnish.shortcutManager.addLayer();\n\n            if (this.settings.closeOnEsc) {\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n                    this.close();\n                });\n            }\n\n            this.isOpen = true;\n            this.trigger('open');\n        },\n\n        close: function() {\n            if (!this.isOpen) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n            this.disable();\n            this.isOpen = false;\n\n            this._cancelTransitionListeners();\n\n            if (this.$shade) {\n                this.removeListener(this.$shade, 'click');\n                this.$shade\n                    .removeClass('so-visible')\n                    .one('transitionend.slideout', () => {\n                        this.$shade.hide();\n                    });\n            }\n\n            Craft.Slideout.removePanel(this);\n            Garnish.shortcutManager.removeLayer();\n            this.$container.one('transitionend.slideout', () => {\n                this.$outerContainer.addClass('hidden');\n                this.trigger('close');\n            });\n        },\n\n        _cancelTransitionListeners: function() {\n            if (this.$shade) {\n                this.$shade.off('transitionend.slideout');\n            }\n\n            this.$container.off('transitionend.slideout');\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$shade) {\n                this.$shade.remove();\n                this.$shade = null;\n            }\n\n            this.$outerContainer.remove();\n            this.$outerContainer = null;\n            this.$container = null;\n\n            this.base();\n        },\n    }, {\n        defaults: {\n            containerElement: 'div',\n            containerAttributes: {},\n            autoOpen: true,\n            closeOnEsc: true,\n            closeOnShadeClick: true,\n        },\n        openPanels: [],\n        addPanel: function(panel) {\n            Craft.Slideout.openPanels.unshift(panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', 0);\n            } else {\n                Craft.Slideout.updateStyles();\n            }\n        },\n        removePanel: function(panel) {\n            Craft.Slideout.openPanels = Craft.Slideout.openPanels.filter(m => m !== panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', '100vh');\n            } else {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n                Craft.Slideout.updateStyles();\n            }\n        },\n        updateStyles: function() {\n            const totalPanels = Craft.Slideout.openPanels.length;\n            Craft.Slideout.openPanels.forEach((panel, i) => {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', `${50 * ((totalPanels - i) / totalPanels)}vw`);\n            });\n\n            if (totalPanels !== 0) {\n                Garnish.$bod.addClass('no-scroll');\n            } else {\n                Garnish.$bod.removeClass('no-scroll');\n            }\n        },\n    });\n})(jQuery);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n        // Remove inner-word punctuation\n        sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        if (!Craft.allowUppercaseInSlug) {\n            sourceVal = sourceVal.toLowerCase();\n        }\n\n        if (Craft.limitAutoSlugsToAscii) {\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n        }\n\n        // Get the \"words\". Split on anything that is not alphanumeric.\n        // Reference: http://www.regular-expressions.info/unicode.html\n        var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n        if (words.length) {\n            return words.join(Craft.slugWordSeparator);\n        } else {\n            return '';\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend({\n    id: null,\n\n    $container: null,\n    state: null,\n    structureDrag: null,\n\n    /**\n     * Init\n     */\n    init: function(id, container, settings) {\n        this.id = id;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Structure.defaults);\n\n        // Is this already a structure?\n        if (this.$container.data('structure')) {\n            Garnish.log('Double-instantiating a structure on an element');\n            this.$container.data('structure').destroy();\n        }\n\n        this.$container.data('structure', this);\n\n        this.state = {};\n\n        if (this.settings.storageKey) {\n            $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n        }\n\n        if (typeof this.state.collapsedElementIds === 'undefined') {\n            this.state.collapsedElementIds = [];\n        }\n\n        var $parents = this.$container.find('ul').prev('.row');\n\n        for (var i = 0; i < $parents.length; i++) {\n            var $row = $($parents[i]),\n                $li = $row.parent(),\n                $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n            if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                $li.addClass('collapsed');\n            }\n\n            this.initToggle($toggle);\n        }\n\n        if (this.settings.sortable) {\n            this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n        }\n\n        if (this.settings.newChildUrl) {\n            this.initNewChildMenus(this.$container.find('.add'));\n        }\n    },\n\n    initToggle: function($toggle) {\n        $toggle.on('click', ev => {\n            var $li = $(ev.currentTarget).closest('li'),\n                elementId = $li.children('.row').find('.element:first').data('id'),\n                viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n            if ($li.hasClass('collapsed')) {\n                $li.removeClass('collapsed');\n\n                if (viewStateKey !== -1) {\n                    this.state.collapsedElementIds.splice(viewStateKey, 1);\n                }\n            } else {\n                $li.addClass('collapsed');\n\n                if (viewStateKey === -1) {\n                    this.state.collapsedElementIds.push(elementId);\n                }\n            }\n\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.state);\n            }\n        });\n    },\n\n    initNewChildMenus: function($addBtns) {\n        this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n    },\n\n    onNewChildMenuClick: function(ev) {\n        var $btn = $(ev.currentTarget);\n\n        if (!$btn.data('menubtn')) {\n            var elementId = $btn.parent().children('.element').data('id'),\n                newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n            $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n            var menuBtn = new Garnish.MenuBtn($btn);\n            menuBtn.showMenu();\n        }\n    },\n\n    getIndent: function(level) {\n        return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n    },\n\n    addElement: function($element) {\n        var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n            $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n        $row.append($element);\n\n        if (this.settings.sortable) {\n            $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n            this.structureDrag.addItems($li);\n        }\n\n        if (this.settings.newChildUrl) {\n            var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n            this.initNewChildMenus($addBtn);\n        }\n\n        $row.css('margin-bottom', -30);\n        $row.velocity({'margin-bottom': 0}, 'fast');\n    },\n\n    removeElement: function($element) {\n        var $li = $element.parent().parent();\n\n        if (this.settings.sortable) {\n            this.structureDrag.removeItems($li);\n        }\n\n        var $parentUl;\n\n        if (!$li.siblings().length) {\n            $parentUl = $li.parent();\n        }\n\n        $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', () => {\n            $li.remove();\n\n            if (typeof $parentUl !== 'undefined') {\n                this._removeUl($parentUl);\n            }\n        });\n    },\n\n    _removeUl: function($ul) {\n        $ul.siblings('.row').children('.toggle').remove();\n        $ul.remove();\n    }\n}, {\n    baseIndent: 8,\n    nestedIndent: 35,\n\n    defaults: {\n        storageKey: null,\n        sortable: false,\n        newChildUrl: null,\n        maxLevels: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend({\n    structure: null,\n    maxLevels: null,\n    draggeeLevel: null,\n\n    $helperLi: null,\n    $targets: null,\n    draggeeHeight: null,\n\n    init: function(structure, maxLevels) {\n        this.structure = structure;\n        this.maxLevels = maxLevels;\n\n        this.$insertion = $('<li class=\"draginsertion\"/>');\n\n        var $items = this.structure.$container.find('li');\n\n        this.base($items, {\n            handle: '.element:first, .move:first',\n            helper: this.getHelper.bind(this)\n        });\n    },\n\n    getHelper: function($helper) {\n        this.$helperLi = $helper;\n        var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n        $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n        $helper.find('.move').removeAttr('title');\n        return $ul;\n    },\n\n    onDragStart: function() {\n        this.$targets = $();\n\n        // Recursively find each of the targets, in the order they appear to be in\n        this.findTargets(this.structure.$container);\n\n        // How deep does the rabbit hole go?\n        this.draggeeLevel = 0;\n        var $level = this.$draggee;\n        do {\n            this.draggeeLevel++;\n            $level = $level.find('> ul > li');\n        } while ($level.length);\n\n        // Collapse the draggee\n        this.draggeeHeight = this.$draggee.height();\n        this.$draggee.velocity({\n            height: 0\n        }, 'fast', () => {\n            this.$draggee.addClass('hidden');\n        });\n        this.base();\n\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.cancelDrag();\n            }\n        });\n    },\n\n    findTargets: function($ul) {\n        var $lis = $ul.children().not(this.$draggee);\n\n        for (var i = 0; i < $lis.length; i++) {\n            var $li = $($lis[i]);\n            this.$targets = this.$targets.add($li.children('.row'));\n\n            if (!$li.hasClass('collapsed')) {\n                this.findTargets($li.children('ul'));\n            }\n        }\n    },\n\n    onDrag: function() {\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n            this.$insertion.remove();\n        }\n\n        // First let's find the closest target\n        this._.$closestTarget = null;\n        this._.closestTargetPos = null;\n        this._.closestTargetYDiff = null;\n        this._.closestTargetOffset = null;\n        this._.closestTargetHeight = null;\n\n        for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n            this._.$target = $(this.$targets[this._.i]);\n            this._.targetOffset = this._.$target.offset();\n            this._.targetHeight = this._.$target.outerHeight();\n            this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n            this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n            if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                this._.$closestTarget = this._.$target;\n                this._.closestTargetPos = this._.i;\n                this._.closestTargetYDiff = this._.targetYDiff;\n                this._.closestTargetOffset = this._.targetOffset;\n                this._.closestTargetHeight = this._.targetHeight;\n            } else {\n                // Getting colder\n                break;\n            }\n        }\n\n        if (!this._.$closestTarget) {\n            return;\n        }\n\n        // Are we hovering above the first row?\n        if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n            this.$insertion.prependTo(this.structure.$container);\n        } else {\n            this._.$closestTargetLi = this._.$closestTarget.parent();\n            this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n            // Is there a next row?\n            if (this._.closestTargetPos < this.$targets.length - 1) {\n                this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n            } else {\n                this._.$nextTargetLi = null;\n                this._.nextTargetLevel = null;\n            }\n\n            // Are we hovering between this row and the next one?\n            this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n            /**\n             * Scenario 1: Both rows have the same level.\n             *\n             *     * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                if (this._.hoveringBetweenRows) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                        // Position the insertion after the closest target\n                        this.$insertion.insertAfter(this._.$closestTargetLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n\n            /**\n             * Scenario 2: Next row is a child of this one.\n             *\n             *     * Row 1\n             *     ----------------------\n             *         * Row 2\n             */\n\n            else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                    if (this._.hoveringBetweenRows) {\n                        // Position the insertion as the first child of the closest target\n                        this.$insertion.insertBefore(this._.$nextTargetLi);\n                    } else {\n                        this._.$closestTarget.addClass('draghover');\n                        this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                    }\n                }\n            }\n\n            /**\n             * Scenario 3: Next row is a child of a parent node, or there is no next row.\n             *\n             *         * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            else {\n                if (this._.hoveringBetweenRows) {\n                    // Determine which <li> to position the insertion after\n                    this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                    if (Craft.orientation === 'rtl') {\n                        this._.draggeeX += this.$helperLi.width();\n                    }\n\n                    this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                    this._.$closestParentLi = null;\n                    this._.closestParentLiXDiff = null;\n                    this._.closestParentLevel = null;\n\n                    for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                        this._.$parentLi = $(this._.$parentLis[this._.i]);\n                        this._.parentLiX = this._.$parentLi.offset().left;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.parentLiX += this._.$parentLi.width();\n                        }\n\n                        this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                        this._.parentLevel = this._.$parentLi.data('level');\n\n                        if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                            !this._.$closestParentLi || (\n                                this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                            )\n                        )) {\n                            this._.$closestParentLi = this._.$parentLi;\n                            this._.closestParentLiXDiff = this._.parentLiXDiff;\n                            this._.closestParentLevel = this._.parentLevel;\n                        }\n                    }\n\n                    if (this._.$closestParentLi) {\n                        this.$insertion.insertAfter(this._.$closestParentLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n        }\n    },\n\n    cancelDrag: function() {\n        this.$insertion.remove();\n\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n        }\n\n        this.onMouseUp();\n    },\n\n    onDragStop: function() {\n        // Are we repositioning the draggee?\n        if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n            var $draggeeParent,\n                moved;\n\n            // Are we about to leave the draggee's original parent childless?\n            if (!this.$draggee.siblings().length) {\n                $draggeeParent = this.$draggee.parent();\n            }\n\n            if (this.$insertion.parent().length) {\n                // Make sure the insertion isn't right next to the draggee\n                var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                    this.$insertion.replaceWith(this.$draggee);\n                    moved = true;\n                } else {\n                    this.$insertion.remove();\n                    moved = false;\n                }\n            } else {\n                var $ul = this._.$closestTargetLi.children('ul');\n\n                // Make sure this is a different parent than the draggee's\n                if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                    if (!$ul.length) {\n                        var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                        this.structure.initToggle($toggle);\n\n                        $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                    } else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                        this._.$closestTarget.children('.toggle').trigger('click');\n                    }\n\n                    this.$draggee.appendTo($ul);\n                    moved = true;\n                } else {\n                    moved = false;\n                }\n            }\n\n            // Remove the class either way\n            this._.$closestTarget.removeClass('draghover');\n\n            if (moved) {\n                // Now deal with the now-childless parent\n                if ($draggeeParent) {\n                    this.structure._removeUl($draggeeParent);\n                }\n\n                // Has the level changed?\n                var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                var animateCss;\n\n                if (newLevel != this.$draggee.data('level')) {\n                    // Correct the helper's padding if moving to/from level 1\n                    if (this.$draggee.data('level') == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = 38;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    } else if (newLevel == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    }\n\n                    this.setLevel(this.$draggee, newLevel);\n                }\n\n                // Make it real\n                var $element = this.$draggee.children('.row').children('.element');\n\n                var data = {\n                    structureId: this.structure.id,\n                    elementId: $element.data('id'),\n                    siteId: $element.data('site-id'),\n                    prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                    parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                };\n\n                Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                    }\n                });\n            }\n        }\n\n        // Animate things back into place\n        this.$draggee.velocity('stop').removeClass('hidden').velocity({\n            height: this.draggeeHeight\n        }, 'fast', () => {\n            this.$draggee.css('height', 'auto');\n        });\n\n        this.returnHelpersToDraggees();\n\n        this.base();\n    },\n\n    setLevel: function($li, level) {\n        $li.data('level', level);\n\n        var indent = this.structure.getIndent(level);\n\n        var css = {};\n        css['margin-' + Craft.left] = '-' + indent + 'px';\n        css['padding-' + Craft.left] = indent + 'px';\n        this.$draggee.children('.row').css(css);\n\n        var $childLis = $li.children('ul').children();\n\n        for (var i = 0; i < $childLis.length; i++) {\n            this.setLevel($($childLis[i]), level + 1);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n    tableView: null,\n    structureId: null,\n    maxLevels: null,\n\n    _basePadding: null,\n    _helperMargin: null,\n\n    _$firstRowCells: null,\n    _$titleHelperCell: null,\n\n    _titleHelperCellOuterWidth: null,\n\n    _ancestors: null,\n    _updateAncestorsFrame: null,\n\n    _draggeeLevel: null,\n    _draggeeLevelDelta: null,\n    draggingLastElements: null,\n    _loadingDraggeeLevelDelta: false,\n\n    _targetLevel: null,\n    _targetLevelBounds: null,\n\n    _positionChanged: null,\n\n    /**\n     * Constructor\n     */\n    init: function(tableView, $elements, settings) {\n        this.tableView = tableView;\n        this.structureId = this.tableView.$table.data('structure-id');\n        this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n        this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n        this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n        settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n            handle: '.move',\n            collapseDraggees: true,\n            singleHelper: true,\n            helperSpacingY: 2,\n            magnetStrength: 4,\n            helper: this.getHelper.bind(this),\n            helperLagBase: 1.5,\n            axis: Garnish.Y_AXIS\n        });\n\n        this.base($elements, settings);\n    },\n\n    /**\n     * Returns the draggee rows (including any descendent rows).\n     */\n    findDraggee: function() {\n        this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n        this._draggeeLevelDelta = 0;\n\n        var $draggee = $(this.$targetItem),\n            $nextRow = this.$targetItem.next();\n\n        while ($nextRow.length) {\n            // See if this row is a descendant of the draggee\n            var nextRowLevel = $nextRow.data('level');\n\n            if (nextRowLevel <= this._draggeeLevel) {\n                break;\n            }\n\n            // Is this the deepest descendant we've seen so far?\n            var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n            if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                this._draggeeLevelDelta = nextRowLevelDelta;\n            }\n\n            // Add it and prep the next row\n            $draggee = $draggee.add($nextRow);\n            $nextRow = $nextRow.next();\n        }\n\n        // Are we dragging the last elements on the page?\n        this.draggingLastElements = !$nextRow.length;\n\n        // Do we have a maxLevels to enforce,\n        // and does it look like this draggee has descendants we don't know about yet?\n        if (\n            this.maxLevels &&\n            this.draggingLastElements &&\n            this.tableView.getMorePending()\n        ) {\n            // Only way to know the true descendant level delta is to ask PHP\n            this._loadingDraggeeLevelDelta = true;\n\n            var data = this._getAjaxBaseData(this.$targetItem);\n\n            Craft.postActionRequest('structures/get-element-level-delta', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this._loadingDraggeeLevelDelta = false;\n\n                    if (this.dragging) {\n                        this._draggeeLevelDelta = response.delta;\n                        this.drag(false);\n                    }\n                }\n            });\n        }\n\n        return $draggee;\n    },\n\n    /**\n     * Returns the drag helper.\n     */\n    getHelper: function($helperRow) {\n        var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n            $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n            $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the column widths\n        this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n        var $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            var $helperCell = $($helperCells[i]);\n\n            // Skip the checkbox cell\n            if ($helperCell.hasClass('checkbox-cell')) {\n                $helperCell.remove();\n                continue;\n            }\n\n            // Hard-set the cell widths\n            var $firstRowCell = $(this._$firstRowCells[i]);\n            var width = $firstRowCell[0].getBoundingClientRect().width;\n\n            $firstRowCell.css('width', width + 'px');\n            $helperCell.css('width', width + 'px');\n\n            // Is this the title cell?\n            if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                this._$titleHelperCell = $helperCell;\n\n                var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                this._titleHelperCellOuterWidth = width;\n\n                $helperCell.css('padding-' + Craft.left, this._basePadding);\n            }\n        }\n\n        return $outerContainer;\n    },\n\n    /**\n     * Returns whether the draggee can be inserted before a given item.\n     */\n    canInsertBefore: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item.prev(), $item) !== false);\n    },\n\n    /**\n     * Returns whether the draggee can be inserted after a given item.\n     */\n    canInsertAfter: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item, $item.next()) !== false);\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        // Get the initial set of ancestors, before the item gets moved\n        this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n        // Set the initial target level bounds\n        this._setTargetLevelBounds();\n\n        // Check to see if we should load more elements now\n        this.tableView.maybeLoadMore();\n\n        this.base();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.base();\n        this._updateIndent();\n    },\n\n    /**\n     * On Insertion Point Change\n     */\n    onInsertionPointChange: function() {\n        this._setTargetLevelBounds();\n        this._updateAncestorsBeforeRepaint();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this._positionChanged = false;\n        this.base();\n\n        // Update the draggee's padding if the position just changed\n        // ---------------------------------------------------------------------\n\n        if (this._targetLevel != this._draggeeLevel) {\n            var levelDiff = this._targetLevel - this._draggeeLevel;\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                var $draggee = $(this.$draggee[i]),\n                    oldLevel = $draggee.data('level'),\n                    newLevel = oldLevel + levelDiff,\n                    padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                $draggee.data('level', newLevel);\n                $draggee.find('.element').data('level', newLevel);\n                $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n            }\n\n            this._positionChanged = true;\n        }\n\n        // Keep in mind this could have also been set by onSortChange()\n        if (this._positionChanged) {\n            // Tell the server about the new position\n            // -----------------------------------------------------------------\n\n            var data = this._getAjaxBaseData(this.$draggee);\n\n            // Find the previous sibling/parent, if there is one\n            var $prevRow = this.$draggee.first().prev();\n\n            while ($prevRow.length) {\n                var prevRowLevel = $prevRow.data('level');\n\n                if (prevRowLevel == this._targetLevel) {\n                    data.prevId = $prevRow.data('id');\n                    break;\n                }\n\n                if (prevRowLevel < this._targetLevel) {\n                    data.parentId = $prevRow.data('id');\n\n                    // Is this row collapsed?\n                    var $toggle = $prevRow.find('> th > .toggle');\n\n                    if (!$toggle.hasClass('expanded')) {\n                        // Make it look expanded\n                        $toggle.addClass('expanded');\n\n                        // Add a temporary row\n                        var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                        // Remove the target item\n                        if (this.tableView.elementSelect) {\n                            this.tableView.elementSelect.removeItems(this.$targetItem);\n                        }\n\n                        this.removeItems(this.$targetItem);\n                        this.$targetItem.remove();\n                        this.tableView._totalVisible--;\n                    }\n\n                    break;\n                }\n\n                $prevRow = $prevRow.prev();\n            }\n\n            Craft.postActionRequest('structures/move-element', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    if (!response.success) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        this.tableView.elementIndex.updateElements();\n                        return;\n                    }\n                    Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                    this.onPositionChange();\n\n                    // Were we waiting on this to complete so we can expand the new parent?\n                    if ($spinnerRow && $spinnerRow.parent().length) {\n                        $spinnerRow.remove();\n                        this.tableView._expandElement($toggle, true);\n                    }\n\n                    // See if we should run any pending tasks\n                    Craft.cp.runQueue();\n                }\n            });\n        }\n    },\n\n    onSortChange: function() {\n        if (this.tableView.elementSelect) {\n            this.tableView.elementSelect.resetItemOrder();\n        }\n\n        this._positionChanged = true;\n        this.base();\n    },\n\n    onPositionChange: function() {\n        Garnish.requestAnimationFrame(() => {\n            this.trigger('positionChange');\n            this.settings.onPositionChange();\n        });\n    },\n\n    onReturnHelpersToDraggees: function() {\n        this._$firstRowCells.css('width', '');\n\n        // If we were dragging the last elements on the page and ended up loading any additional elements in,\n        // there could be a gap between the last draggee item and whatever now comes after it.\n        // So remove the post-draggee elements and possibly load up the next batch.\n        if (this.draggingLastElements && this.tableView.getMorePending()) {\n            // Update the element index's record of how many items are actually visible\n            this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n            var $postDraggeeItems = this.$draggee.last().nextAll();\n\n            if ($postDraggeeItems.length) {\n                this.removeItems($postDraggeeItems);\n                $postDraggeeItems.remove();\n                this.tableView.maybeLoadMore();\n            }\n        }\n\n        this.base();\n    },\n\n    /**\n     * Returns the min and max levels that the draggee could occupy between\n     * two given rows, or false if it’s not going to work out.\n     */\n    _getLevelBounds: function($prevRow, $nextRow) {\n        // Can't go any lower than the next row, if there is one\n        if ($nextRow && $nextRow.length) {\n            this._getLevelBounds._minLevel = $nextRow.data('level');\n        } else {\n            this._getLevelBounds._minLevel = 1;\n        }\n\n        // Can't go any higher than the previous row + 1\n        if ($prevRow && $prevRow.length) {\n            this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n        } else {\n            this._getLevelBounds._maxLevel = 1;\n        }\n\n        // Does this structure have a max level?\n        if (this.maxLevels) {\n            // Make sure it's going to fit at all here\n            if (\n                this._getLevelBounds._minLevel != 1 &&\n                this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n            ) {\n                return false;\n            }\n\n            // Limit the max level if we have to\n            if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                    this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                }\n            }\n        }\n\n        return {\n            min: this._getLevelBounds._minLevel,\n            max: this._getLevelBounds._maxLevel\n        };\n    },\n\n    /**\n     * Determines the min and max possible levels at the current draggee's position.\n     */\n    _setTargetLevelBounds: function() {\n        this._targetLevelBounds = this._getLevelBounds(\n            this.$draggee.first().prev(),\n            this.$draggee.last().next()\n        );\n    },\n\n    /**\n     * Determines the target level based on the current mouse position.\n     */\n    _updateIndent: function(forcePositionChange) {\n        // Figure out the target level\n        // ---------------------------------------------------------------------\n\n        // How far has the cursor moved?\n        this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n        // Flip that if this is RTL\n        if (Craft.orientation === 'rtl') {\n            this._updateIndent._mouseDist *= -1;\n        }\n\n        // What is that in indentation levels?\n        this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // Combine with the original level to get the new target level\n        this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n        // Contain it within our min/max levels\n        if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n            this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n            this._updateIndent._targetLevel = this._targetLevelBounds.min;\n        } else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n            this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n            this._updateIndent._targetLevel = this._targetLevelBounds.max;\n        }\n\n        // Has the target level changed?\n        if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n            // Target level is changing, so update the ancestors\n            this._updateAncestorsBeforeRepaint();\n        }\n\n        // Update the UI\n        // ---------------------------------------------------------------------\n\n        // How far away is the cursor from the exact target level distance?\n        this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // What's the magnet impact of that?\n        this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n        // Put it on a leash\n        if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n            this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n        }\n\n        // Apply the new margin/width\n        this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n        this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n        this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n    },\n\n    /**\n     * Returns the indent size for a given level\n     */\n    _getLevelIndent: function(level) {\n        return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n    },\n\n    /**\n     * Returns the base data that should be sent with StructureController Ajax requests.\n     */\n    _getAjaxBaseData: function($row) {\n        return {\n            structureId: this.structureId,\n            elementId: $row.data('id'),\n            siteId: $row.find('.element:first').data('site-id')\n        };\n    },\n\n    /**\n     * Returns a row's ancestor rows\n     */\n    _getAncestors: function($row, targetLevel) {\n        this._getAncestors._ancestors = [];\n\n        if (targetLevel != 0) {\n            this._getAncestors._level = targetLevel;\n            this._getAncestors._$prevRow = $row.prev();\n\n            while (this._getAncestors._$prevRow.length) {\n                if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                    this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                    this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                    // Did we just reach the top?\n                    if (this._getAncestors._level == 0) {\n                        break;\n                    }\n                }\n\n                this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n            }\n        }\n\n        return this._getAncestors._ancestors;\n    },\n\n    /**\n     * Prepares to have the ancestors updated before the screen is repainted.\n     */\n    _updateAncestorsBeforeRepaint: function() {\n        if (this._updateAncestorsFrame) {\n            Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n        }\n\n        this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestors.bind(this));\n    },\n\n    _updateAncestors: function() {\n        this._updateAncestorsFrame = null;\n\n        // Update the old ancestors\n        // -----------------------------------------------------------------\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n            // One less descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n            // Is it now childless?\n            if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                // Remove its toggle\n                this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n            }\n        }\n\n        // Update the new ancestors\n        // -----------------------------------------------------------------\n\n        this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n            // One more descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n            // Is this its first child?\n            if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                // Create its toggle\n                $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                    .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n            }\n        }\n\n        this._ancestors = this._updateAncestors._newAncestors;\n\n        delete this._updateAncestors._i;\n        delete this._updateAncestors._$ancestor;\n        delete this._updateAncestors._newAncestors;\n    }\n}, {\n    HELPER_MARGIN: 0,\n    LEVEL_INDENT: 44,\n    MAX_GIVE: 22,\n\n    defaults: {\n        onPositionChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend({\n    $table: null,\n    $selectedSortHeader: null,\n\n    structureTableSort: null,\n\n    _totalVisiblePostStructureTableDraggee: null,\n    _morePendingPostStructureTableDraggee: false,\n\n    getElementContainer: function() {\n        // Save a reference to the table\n        this.$table = this.$container.find('table:first');\n        return this.$table.children('tbody:first');\n    },\n\n    afterInit: function() {\n        // Set the sort header\n        this.initTableHeaders();\n\n        // Create the Structure Table Sorter\n        if (\n            this.elementIndex.settings.context === 'index' &&\n            this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n            Garnish.hasAttr(this.$table, 'data-structure-id')\n        ) {\n            this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements());\n        } else {\n            this.structureTableSort = null;\n        }\n\n        // Handle expand/collapse toggles for Structures\n        if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n            this.addListener(this.$elementContainer, 'click', function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.hasClass('toggle')) {\n                    if (this._collapseElement($target) === false) {\n                        this._expandElement($target);\n                    }\n                }\n            });\n        }\n    },\n\n    initTableHeaders: function() {\n        var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n            $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n        for (var i = 0; i < $tableHeaders.length; i++) {\n            var $header = $tableHeaders.eq(i),\n                attr = $header.attr('data-attribute');\n\n            // Is this the selected sort attribute?\n            if (attr === selectedSortAttr) {\n                this.$selectedSortHeader = $header;\n                var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                $header\n                    .addClass('ordered ' + selectedSortDir)\n                    .on('click', this._handleSelectedSortHeaderClick.bind(this));\n            } else {\n                // Is this attribute sortable?\n                var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                if ($sortAttribute.length) {\n                    $header\n                        .addClass('orderable')\n                        .on('click', this._handleUnselectedSortHeaderClick.bind(this));\n                }\n            }\n        }\n    },\n\n    isVerticalList: function() {\n        return true;\n    },\n\n    getTotalVisible: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._totalVisiblePostStructureTableDraggee;\n        } else {\n            return this._totalVisible;\n        }\n    },\n\n    setTotalVisible: function(totalVisible) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._totalVisiblePostStructureTableDraggee = totalVisible;\n        } else {\n            this._totalVisible = totalVisible;\n        }\n    },\n\n    getMorePending: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._morePendingPostStructureTableDraggee;\n        } else {\n            return this._morePending;\n        }\n    },\n\n    setMorePending: function(morePending) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._morePendingPostStructureTableDraggee = morePending;\n        } else {\n            this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n        }\n    },\n\n    getLoadMoreParams: function() {\n        var params = this.base();\n\n        // If we are dragging the last elements on the page,\n        // tell the controller to only load elements positioned after the draggee.\n        if (this._isStructureTableDraggingLastElements()) {\n            params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n        }\n\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        this.base($newElements);\n\n        if (this.structureTableSort) {\n            this.structureTableSort.addItems($newElements);\n        }\n\n        Craft.cp.updateResponsiveTables();\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            params: {\n                includeTableAttributesForSource: this.elementIndex.sourceKey\n            },\n            onSaveElement: response => {\n                if (response.tableAttributes) {\n                    this._updateTableAttributes($element, response.tableAttributes);\n                }\n            },\n            elementIndex: this.elementIndex\n        });\n    },\n\n    _collapseElement: function($toggle, force) {\n        if (!force && !$toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.removeClass('expanded');\n\n        // Find and remove the descendant rows\n        var $row = $toggle.parent().parent(),\n            id = $row.data('id'),\n            level = $row.data('level'),\n            $nextRow = $row.next();\n\n        while ($nextRow.length) {\n            if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                if ($nextRow.data('level') <= level) {\n                    break;\n                }\n\n                if (this.elementSelect) {\n                    this.elementSelect.removeItems($nextRow);\n                }\n\n                if (this.structureTableSort) {\n                    this.structureTableSort.removeItems($nextRow);\n                }\n\n                this._totalVisible--;\n            }\n\n            var $nextNextRow = $nextRow.next();\n            $nextRow.remove();\n            $nextRow = $nextNextRow;\n        }\n\n        // Remember that this row should be collapsed\n        if (!this.elementIndex.instanceState.collapsedElementIds) {\n            this.elementIndex.instanceState.collapsedElementIds = [];\n        }\n\n        this.elementIndex.instanceState.collapsedElementIds.push(id);\n        this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n        // Bottom of the index might be viewable now\n        this.maybeLoadMore();\n    },\n\n    _expandElement: function($toggle, force) {\n        if (!force && $toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.addClass('expanded');\n\n        // Remove this element from our list of collapsed elements\n        if (this.elementIndex.instanceState.collapsedElementIds) {\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n            if (index !== -1) {\n                this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                // Add a temporary row\n                var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                // Load the nested elements\n                let data = $.extend(true, {}, this.settings.params);\n                data.criteria.descendantOf = id;\n\n                Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {data}).then(response => {\n                    // Do we even care about this anymore?\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n\n                    let $newElements = $(response.data.html);\n\n                    // Are there more descendants we didn't get in this batch?\n                    let totalVisible = (this._totalVisible + $newElements.length);\n                    let morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                    if (morePending) {\n                        // Remove all the elements after it\n                        let $nextRows = $spinnerRow.nextAll();\n\n                        if (this.elementSelect) {\n                            this.elementSelect.removeItems($nextRows);\n                        }\n\n                        if (this.structureTableSort) {\n                            this.structureTableSort.removeItems($nextRows);\n                        }\n\n                        $nextRows.remove();\n                        totalVisible -= $nextRows.length;\n                    } else {\n                        // Maintain the current 'more' status\n                        morePending = this._morePending;\n                    }\n\n                    $spinnerRow.replaceWith($newElements);\n                    this.thumbLoader.load($newElements);\n\n                    if (this.elementIndex.actions || this.settings.selectable) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.addItems($newElements);\n                    }\n\n                    Craft.appendHeadHtml(response.data.headHtml);\n                    Craft.appendFootHtml(response.data.footHtml);\n                    Craft.cp.updateResponsiveTables();\n\n                    this.setTotalVisible(totalVisible);\n                    this.setMorePending(morePending);\n\n                    // Is there room to load more right now?\n                    this.maybeLoadMore();\n                }).catch(e => {\n                    Craft.cp.displayError();\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n                });\n            }\n        }\n    },\n\n    _createSpinnerRowAfter: function($row) {\n        return $(\n            '<tr data-spinnerrow>' +\n            '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n            '<div class=\"spinner\"/>' +\n            '</td>' +\n            '</tr>'\n        ).insertAfter($row);\n    },\n\n    _isStructureTableDraggingLastElements: function() {\n        return (\n            this.structureTableSort &&\n            this.structureTableSort.dragging &&\n            this.structureTableSort.draggingLastElements\n        );\n    },\n\n    _handleSelectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        // Reverse the sort direction\n        var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n            newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n        this.elementIndex.setSortDirection(newSortDir);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleUnselectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        var attr = $header.attr('data-attribute');\n\n        this.elementIndex.setSortAttribute(attr);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleSortHeaderClick: function(ev, $header) {\n        if (this.$selectedSortHeader) {\n            this.$selectedSortHeader.removeClass('ordered asc desc');\n        }\n\n        $header.removeClass('orderable').addClass('ordered loading');\n        this.elementIndex.storeSortAttributeAndDirection();\n        this.elementIndex.updateElements();\n\n        // No need for two spinners\n        this.elementIndex.setIndexAvailable();\n    },\n\n    _updateTableAttributes: function($element, tableAttributes) {\n        var $tr = $element.closest('tr');\n\n        for (var attr in tableAttributes) {\n            if (!tableAttributes.hasOwnProperty(attr)) {\n                continue;\n            }\n\n            $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend({\n    searchTimeout: null,\n    searchMenu: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addTagInput: null,\n    $spinner: null,\n\n    _ignoreBlur: false,\n\n    init: function(settings) {\n        // Normalize the settings\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n        this.$addTagInput = this.$container.children('.add').children('.text');\n        this.$spinner = this.$addTagInput.next();\n\n        this.addListener(this.$addTagInput, 'input', () => {\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.searchForTags.bind(this), 500);\n        });\n\n        this.addListener(this.$addTagInput, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n            }\n\n            let $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options.filter('.hover'));\n                    }\n                    return;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                            if ($nextOption.length) {\n                                this.focusOption($nextOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(0));\n                        }\n                    }\n                    return;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                            if ($prevOption.length) {\n                                this.focusOption($prevOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                        }\n                    }\n                    return;\n                }\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'focus', function() {\n            if (this.searchMenu) {\n                this.searchMenu.show();\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'blur', function() {\n            if (this._ignoreBlur) {\n                this._ignoreBlur = false;\n                return;\n            }\n\n            setTimeout(() => {\n                if (this.searchMenu) {\n                    this.searchMenu.hide();\n                }\n            }, 1);\n        });\n    },\n\n    focusOption: function($option) {\n        this.searchMenu.$options.removeClass('hover');\n        $option.addClass('hover');\n        this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n    },\n\n    // No \"add\" button\n    getAddElementsBtn: $.noop,\n\n    getElementSortAxis: function() {\n        return null;\n    },\n\n    searchForTags: function() {\n        if (this.searchMenu) {\n            this.killSearchMenu();\n        }\n\n        var val = this.$addTagInput.val();\n\n        if (val) {\n            this.$spinner.removeClass('hidden');\n\n            var excludeIds = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                var id = $(this.$elements[i]).data('id');\n\n                if (id) {\n                    excludeIds.push(id);\n                }\n            }\n\n            if (this.settings.sourceElementId) {\n                excludeIds.push(this.settings.sourceElementId);\n            }\n\n            var data = {\n                search: this.$addTagInput.val(),\n                tagGroupId: this.settings.tagGroupId,\n                excludeIds: excludeIds\n            };\n\n            Craft.postActionRequest('tags/search-for-tags', data, (response, textStatus) => {\n                // Just in case\n                if (this.searchMenu) {\n                    this.killSearchMenu();\n                }\n\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                        $ul = $('<ul/>').appendTo($menu);\n\n                    var $li;\n\n                    for (var i = 0; i < response.tags.length; i++) {\n                        $li = $('<li/>')\n                            .appendTo($ul);\n\n                        $('<a data-icon=\"tag\"/>')\n                            .appendTo($li)\n                            .text(response.tags[i].title)\n                            .data('id', response.tags[i].id)\n                            .addClass(response.tags[i].exclude ? 'disabled' : '');\n                    }\n\n                    if (!response.exactMatch) {\n                        $li = $('<li/>').appendTo($ul);\n                        $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                    }\n\n                    $ul.find('a:not(.disabled):first').addClass('hover');\n\n                    this.searchMenu = new Garnish.Menu($menu, {\n                        attachToElement: this.$addTagInput,\n                        onOptionSelect: this.selectTag.bind(this)\n                    });\n\n                    this.addListener($menu, 'mousedown', () => {\n                        this._ignoreBlur = true;\n                    });\n\n                    this.searchMenu.show();\n                }\n            });\n        } else {\n            this.$spinner.addClass('hidden');\n        }\n    },\n\n    selectTag: function(option) {\n        var $option = $(option);\n\n        if ($option.hasClass('disabled')) {\n            return;\n        }\n\n        var id = $option.data('id');\n        var title = $option.text();\n\n        var $element = $('<div/>', {\n            'class': 'element small removable',\n            'data-id': id,\n            'data-site-id': this.settings.targetSiteId,\n            'data-label': title,\n            'data-editable': '1'\n        }).appendTo(this.$elementsContainer);\n\n        var $input = $('<input/>', {\n            'type': 'hidden',\n            'name': this.settings.name + '[]',\n            'value': id\n        }).appendTo($element);\n\n        $('<a/>', {\n            'class': 'delete icon',\n            'title': Craft.t('app', 'Remove')\n        }).appendTo($element);\n\n        var $titleContainer = $('<div/>', {\n            'class': 'label'\n        }).appendTo($element);\n\n        $('<span/>', {\n            'class': 'title',\n            text: title\n        }).appendTo($titleContainer);\n\n        var margin = -($element.outerWidth() + 10);\n        this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addTagInput.velocity(animateCss, 'fast');\n\n        this.$elements = this.$elements.add($element);\n\n        this.addElements($element);\n\n        this.killSearchMenu();\n        this.$addTagInput.val('');\n        this.$addTagInput.trigger('focus');\n\n        if (!id) {\n            // We need to create the tag first\n            $element.addClass('loading disabled');\n\n            var data = {\n                groupId: this.settings.tagGroupId,\n                title: title\n            };\n\n            Craft.postActionRequest('tags/create-tag', data, (response, textStatus) => {\n                if (textStatus === 'success' && response.success) {\n                    $element.attr('data-id', response.id);\n                    $input.val(response.id);\n\n                    $element.removeClass('loading disabled');\n                } else {\n                    this.removeElement($element);\n\n                    if (textStatus === 'success') {\n                        // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                }\n            });\n        }\n    },\n\n    killSearchMenu: function() {\n        this.searchMenu.hide();\n        this.searchMenu.destroy();\n        this.searchMenu = null;\n    }\n}, {\n    defaults: {\n        tagGroupId: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend({\n    getElementContainer: function() {\n        return this.$container.children('ul');\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            config = $.extend({\n                autocomplete: false,\n            }, config);\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: typeof config.autocomplete === 'boolean' ? (config.autocomplete ? 'on' : 'off') : config.autocomplete,\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            } else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n                'aria-label': Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html': option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                html: config.label,\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            } else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: allChecked || (config.values || []).includes(option.value),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            config.fieldset = true;\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<button/>', {\n                'type': 'button',\n                'class': 'lightswitch',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'checkbox',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            const id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            const containerId = config.containerId || id + '-container';\n            const name = config.name || null;\n            const value = config.value || null;\n            const small = config.small || false;\n            const autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            const disabled = config.disabled || false;\n\n            const $container = $('<div/>', {\n                id: containerId,\n                class: 'flex color-container'\n            });\n\n            const $colorPreviewContainer = $('<div/>', {\n                class: 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            const $colorPreview = $('<div/>', {\n                class: 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            const $inputContainer = $('<div/>', {\n                class: 'color-input-container',\n            })\n                .append(\n                    $('<div/>', {\n                        class: 'color-hex-indicator light code',\n                        'aria-hidden': 'true',\n                        text: '#',\n                    })\n                )\n                .appendTo($container);\n\n            const $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: Craft.ltrim(value, '#'),\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled,\n                'aria-label': Craft.t('app', 'Color hex value'),\n            }).appendTo($inputContainer);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            config.fieldset = true;o\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000)) + '-date';\n            var name = config.name || null;\n            var inputName = name ? name + '[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate: null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000)) + '-time';\n            var name = config.name || null;\n            var inputName = name ? name + '[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours() * 3600 + value.getMinutes() * 60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $(config.fieldset ? '<fieldset/>' : '<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $(config.fieldset ? '<legend/>' : '<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-${config.fieldset ? 'legend' : 'label'}` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': !config.fieldset && config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend({\n    uploader: null,\n    allowedKinds: null,\n    $element: null,\n    settings: null,\n    _rejectedFiles: {},\n    _extensionList: null,\n    _totalFileCounter: 0,\n    _validFileCounter: 0,\n\n    init: function($element, settings) {\n        this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n        this.$element = $element;\n        this.allowedKinds = null;\n        this._extensionList = null;\n        this._totalFileCounter = 0;\n        this._validFileCounter = 0;\n\n        settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n        var events = settings.events;\n        delete settings.events;\n\n        if (settings.allowedKinds && settings.allowedKinds.length) {\n            if (typeof settings.allowedKinds === 'string') {\n                settings.allowedKinds = [settings.allowedKinds];\n            }\n\n            this.allowedKinds = settings.allowedKinds;\n            delete settings.allowedKinds;\n        }\n\n        settings.autoUpload = false;\n\n        this.uploader = this.$element.fileupload(settings);\n        for (var event in events) {\n            if (!events.hasOwnProperty(event)) {\n                continue;\n            }\n\n            this.uploader.on(event, events[event]);\n        }\n\n        this.settings = settings;\n\n        this.uploader.on('fileuploadadd', this.onFileAdd.bind(this));\n    },\n\n    /**\n     * Set uploader parameters.\n     */\n    setParams: function(paramObject) {\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        this.uploader.fileupload('option', {formData: paramObject});\n    },\n\n    /**\n     * Get the number of uploads in progress.\n     */\n    getInProgress: function() {\n        return this.uploader.fileupload('active');\n    },\n\n    /**\n     * Return true, if this is the last upload.\n     */\n    isLastUpload: function() {\n        // Processing the last file or not processing at all.\n        return this.getInProgress() < 2;\n    },\n\n    /**\n     * Called on file add.\n     */\n    onFileAdd: function(e, data) {\n        e.stopPropagation();\n\n        var validateExtension = false;\n\n        if (this.allowedKinds) {\n            if (!this._extensionList) {\n                this._createExtensionList();\n            }\n\n            validateExtension = true;\n        }\n\n        // Make sure that file API is there before relying on it\n        data.process().done(() => {\n            var file = data.files[0];\n            var pass = true;\n            if (validateExtension) {\n                var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                var fileExtension = matches[1];\n                if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                    pass = false;\n                    this._rejectedFiles.type.push('“' + file.name + '”');\n                }\n            }\n\n            if (file.size > this.settings.maxFileSize) {\n                this._rejectedFiles.size.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            // If the validation has passed for this file up to now, check if we're not hitting any limits\n            if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                this._rejectedFiles.limit.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            if (pass) {\n                this._validFileCounter++;\n                data.submit();\n            }\n\n            if (++this._totalFileCounter === data.originalFiles.length) {\n                this._totalFileCounter = 0;\n                this._validFileCounter = 0;\n                this.processErrorMessages();\n            }\n        });\n\n        return true;\n    },\n\n    /**\n     * Process error messages.\n     */\n    processErrorMessages: function() {\n        var str;\n\n        if (this._rejectedFiles.type.length) {\n            if (this._rejectedFiles.type.length === 1) {\n                str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            } else {\n                str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n            this._rejectedFiles.type = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.size.length) {\n            if (this._rejectedFiles.size.length === 1) {\n                str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n            this._rejectedFiles.size = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.limit.length) {\n            if (this._rejectedFiles.limit.length === 1) {\n                str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n            this._rejectedFiles.limit = [];\n            alert(str);\n        }\n    },\n\n    humanFileSize: function(bytes) {\n        var threshold = 1024;\n\n        if (bytes < threshold) {\n            return bytes + ' B';\n        }\n\n        var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        var u = -1;\n\n        do {\n            bytes = bytes / threshold;\n            ++u;\n        }\n        while (bytes >= threshold);\n\n        return bytes.toFixed(1) + ' ' + units[u];\n    },\n\n    _createExtensionList: function() {\n        this._extensionList = [];\n\n        for (var i = 0; i < this.allowedKinds.length; i++) {\n            var allowedKind = this.allowedKinds[i];\n\n            if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                    var ext = Craft.fileKinds[allowedKind].extensions[j];\n                    this._extensionList.push(ext);\n                }\n            }\n        }\n    },\n\n    destroy: function() {\n        this.$element.fileupload('destroy');\n        this.base();\n    }\n}, {\n    defaults: {\n        dropZone: null,\n        pasteZone: null,\n        fileInput: null,\n        sequentialUploads: true,\n        maxFileSize: Craft.maxUploadSize,\n        allowedKinds: null,\n        events: {},\n        canAddMoreFiles: null,\n        headers: {'Accept': 'application/json;q=0.9,*/*;q=0.8'},\n        paramName: 'assets-upload'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Make it lowercase\n        sourceVal = sourceVal.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        sourceVal = Craft.asciiString(sourceVal);\n\n        // Handle must start with a letter and end with a letter/number\n        sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n        sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n        // Get the \"words\"\n        var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n        var uriFormat = words.join(Craft.slugWordSeparator);\n\n        if (uriFormat && this.settings.suffix) {\n            uriFormat += this.settings.suffix;\n        }\n\n        return uriFormat;\n    }\n});\n"]}