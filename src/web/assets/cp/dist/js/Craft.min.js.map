{"version":3,"sources":["Craft.min.js","Craft.js","BaseElementEditor.js","BaseElementIndex.js","BaseElementIndexView.js","BaseElementSelectInput.js","BaseElementSelectorModal.js","BaseInputGenerator.js","AdminTable.js","AssetEditor.js","AssetImageEditor.js","AssetIndex.js","AssetSelectInput.js","AssetSelectorModal.js","AuthManager.js","CP.js","CategoryIndex.js","CategorySelectInput.js","Chart.js","ColorInput.js","CustomizeSourcesModal.js","DataTableSorter.js","DeleteUserModal.js","DraftEditor.js","DynamicGenerator.js","EditableTable.js","ElementActionTrigger.js","ElementThumbLoader.js","ElevatedSessionForm.js","ElevatedSessionManager.js","EntryIndex.js","FieldLayoutDesigner.js","FieldToggle.js","Grid.js","HandleGenerator.js","ImageUpload.js","InfoIcon.js","LightSwitch.js","Listbox.js","LivePreview.js","PasswordInput.js","Preview.js","PreviewFileModal.js","ProgressBar.js","PromptHandler.js","SlidePicker.js","SlideRuleInput.js","SlugGenerator.js","Structure.js","StructureDrag.js","StructureTableSorter.js","TableElementIndexView.js","TagSelectInput.js","ThumbsElementIndexView.js","UI.js","Uploader.js","UriFormatGenerator.js"],"names":["$","rxhtmlTag","jQuery","htmlPrefilter","html","replace","extend","Craft","navHeight","index","arr","key","isArray","reduce","obj","i","t","category","message","params","translations","this","formatMessage","pattern","args","tokens","_tokenizePattern","length","token","_parseToken","join","start","pos","depth","chars","indexOf","slice","open","close","push","split","param","trim","arg","type","format","number","formatNumber","substr","plural","c","offset","selector","selectorChars","substring","parseInt","map","p","formatDate","date","Date","datepicker","datepickerOptions","dateFormat","d3","formatLocale","d3FormatLocaleDefinition","formatter","shortcutText","shift","alt","clientOs","escapeHtml","str","text","escapeRegex","getText","encodeUriComponent","encodeURIComponent","differences","!","*","'","(",")","chr","re","RegExp","selectFullValue","input","$input","val","setSelectionRange","formatInputId","inputName","rtrim","getUrl","path","baseUrl","anchor","isPlainObject","aParams","name","hasOwnProperty","value","Garnish","apos","url","qpos","search","pathParam","pathMatch","match","omitScriptNameInUrls","usePathInfo","scriptName","basePath","endPath","getCpUrl","baseCpUrl","getSiteUrl","baseSiteUrl","getActionUrl","actionUrl","redirectTo","document","location","href","getCsrfInput","csrfTokenName","csrfTokenValue","postActionRequest","action","data","callback","options","contentType","JSON","stringify","jqXHR","ajax","dataType","headers","_actionHeaders","success","error","textStatus","errorThrown","readyState","cp","displayError","alert","send","_waitingOnAjax","_ajaxQueue","queueActionRequest","undefined","_postNextActionRequestInQueue","X-Registered-Asset-Bundles","Object","keys","registeredAssetBundles","X-Registered-Js-Files","registeredJsFiles","sendActionRequest","method","Promise","resolve","reject","X-Requested-With","v","getTime","axios","request","then","catch","sendApiRequest","uri","cancelToken","_getApiHeaders","apiHeaders","baseURL","baseApiUrl","apiParams","_apiHeaders","processCraftHeaders","apiResponse","_processApiHeaders","_loadingApiHeaders","_apiHeaderWaitlist","response","e","_rejectApiRequests","clearCachedApiHeaders","downloadFromUrl","body","XMLHttpRequest","setRequestHeader","responseType","onload","status","disposition","getResponseHeader","matches","exec","filename","blob","Blob","link","createElement","window","URL","createObjectURL","download","appendChild","click","removeChild","stringToArray","findDeltaData","oldData","newData","deltaNames","sort","a","b","groupedOldParams","_groupParamsByDeltaNames","groupedNewParams","__root__","n","inArray","modifiedDeltaNames","concat","withRoot","useInitialValues","paramName","grouped","paramLoop","decodeURIComponent","initialDeltaValues","expandPostArray","expanded","m","unshift","parentElem","createForm","$form","attr","accept-charset","chunks","values","appendTo","compare","obj1","obj2","sortObjectKeys","Array","getObjectKeys","escapeChars","escaped","ltrim","startsWith","filterArray","filtered","elem","includes","removeFromArray","splice","getLast","uppercaseFirst","charAt","toUpperCase","lowercaseFirst","toLowerCase","parseUrl","scheme","host","hostname","port","query","hash","isSameHost","requestUrlInfo","urlInfo","secondsToHumanTimeDuration","seconds","showSeconds","weeks","Math","floor","days","minutes","hours","round","timeComponents","asciiString","charMap","normalize","char","asciiStr","asciiCharMap","randomString","result","random","createErrorList","errors","$ul","addClass","$li","appendHeadHtml","$existingCss","existingCss","eq","regexp","append","appendFootHtml","$existingJs","src","existingJs","$bod","initUiElements","$container","grid","infoicon","checkboxselect","fieldtoggle","lightswitch","nicetext","formsubmit","menubtn","datetime","each","_elementIndexClasses","_elementSelectorModalClasses","_elementEditorClasses","registerElementIndexClass","elementType","func","registerElementSelectorModalClass","registerElementEditorClass","createElementIndex","settings","BaseElementIndex","createElementSelectorModal","BaseElementSelectorModal","createElementEditor","element","BaseElementEditor","getLocalStorage","defaultValue","systemUid","localStorage","parse","setLocalStorage","removeLocalStorage","removeItem","getCookie","cookie","setCookie","defaultCookieOptions","domain","maxAge","expires","toUTCString","secure","removeCookie","getElementInfo","$element","hasClass","find","id","siteId","label","hasThumb","setElementSize","size","otherSize","removeClass","$oldImg","$newImg","sizes","srcset","replaceWith","picturefill","elements","submitForm","confirm","redirect","retainScroll","scrollY","trigger","fn","animateLeft","duration","easing","complete","orientation","velocity","left","right","animateRight","disable","$elem","removeAttr","enable","itemSelector","cols","maxCols","minColWidth","mode","fillMode","colClass","snapToGrid","Grid","InfoIcon","CheckboxSelect","FieldToggle","settingName","settingValue","setSettings","thisSettings","hasAttr","indeterminateValue","LightSwitch","NiceText","on","ev","$btn","currentTarget","$anchor","closest","customTrigger","next","menuAnchor","MenuBtn","$wrapper","$inputs","checkValue","hasValue","children","class","title","aria-label","remove","first","focus","$doc","ready","Base","elementId","initialData","$fieldsContainer","$cancelBtn","$saveBtn","$spinner","$siteSelect","$siteSpinner","hud","init","defaults","loadHud","setElementAttribute","attributes","getBaseData","prevalidate","onBeginLoading","includeSites","isMultiSite","showSiteSwitcher","showHud","bind","onEndLoading","$hudContents","sites","$header","$siteSelectContainer","siteInfo","addListener","add","updateForm","onCreateForm","$footer","$buttonsContainer","updateBody","updateSizeAndPosition","hudTrigger","HUD","bodyClass","closeOtherHUDs","hideOnEsc","hideOnShadeClick","onShow","onShowHud","onHide","onHideHud","onSubmit","saveElement","shortcutManager","registerShortcut","ESC_KEY","maybeCloseHud","$shade","$hud","$body","hide","switchSite","isDirty","newSiteId","reloadForm","refreshInitialData","$allInstructions","$instructions","$label","siblings","requestAnimationFrame","headHtml","footHtml","serialize","validators","isFunction","call","$title","$a","cpEditUrl","newTitle","elementTypeNames","displayNotice","closeHud","onSaveElement","shake","showing","keyCode","S_KEY","ctrl","runQueue","elementIndex","noop","initialized","instanceState","sourceStates","sourceStatesStorageKey","searchTimeout","sourceSelect","$main","isIndexBusy","$sidebar","showingSidebar","sourceKey","sourceViewModes","$source","sourcesByKey","$visibleSources","$customizeSourcesBtn","customizeSourcesModal","$toolbar","toolbarOffset","$search","searching","searchText","trashed","drafts","$clearSearchBtn","$statusMenuBtn","$statusMenuContainer","statusMenu","$siteMenuBtn","siteMenu","$sortMenuBtn","sortMenu","$sortAttributesList","$sortDirectionsList","$scoreSortAttribute","$structureSortAttribute","$elements","$viewModeBtnContainer","viewModeBtns","viewMode","view","_autoSelectElements","$countSpinner","$countContainer","page","resultSet","totalResults","$exportBtn","actions","actionsHeadHtml","actionsFootHtml","$selectAllContainer","$selectAllCheckbox","showingActionTriggers","exporters","exportersByType","_$detachedToolbarItems","_$triggers","_ignoreFailedRequest","_cancelToken","getDefaultInstanceState","storageKey","context","toolbarSelector","parent","hideSidebar","initSources","menu","_handleStatusChange","$option","$options","filter","_setSite","criteria","_handleSiteChange","defaultSiteId","getSiteId","$storedSiteOption","startSearching","stopSearching","clearTimeout","setTimeout","updateElementsIfSearchTextChanged","RETURN_KEY","preventDefault","isMobileBrowser","_handleSortChange","afterInit","selectDefaultSource","setPage","pageNum","updateElements","onAfterInit","_createCancelToken","CancelToken","source","_cancelRequests","cancel","getSourceContainer","$sources","$items","_getSourcesInList","Select","multi","allowEmpty","vertical","onSelectionChange","_handleSourceSelectionChange","_initSources","getDefaultSourceKey","getSourceByKey","selectSource","refreshSources","removeAllItems","setIndexBusy","refreshSourcesAction","setIndexAvailable","initSource","addItems","initSourceToggle","expandedSources","_expandSource","deinitSourceToggle","$toggle","_getSourceToggle","deinitSource","removeItems","removeListener","removeData","selectedSource","defaultSource","paths","getDefaultExpandedSources","addOptions","prependTo","_updateStructureSortOption","setSortAttribute","detach","setInstanceState","storeInstanceState","getSourceState","getSelectedSourceState","setSelecetedSourceState","viewState","storeSortAttributeAndDirection","getSelectedSortAttribute","order","getSelectedSortDirection","max","pageTrigger","history","replaceState","_resetCount","getViewParams","batchSize","limit","canHaveDrafts","savedDraftsOnly","draftOf","disabledElementIds","paginated","_isViewPaginated","collapsedElementIds","preservePagination","destroy","updateElementsAction","$scrollContainer","scrollTop","_updateView","showActionTriggers","css","height","_createTriggers","submitAction","actionParams","selectedElementIds","getSelectedElementIds","_findAction","viewParams","elementAction","elementIds","submitActionsAction","afterAction","actionClass","onAfterAction","hideActionTriggers","updateActionTriggers","totalSelected","getSelectedElements","getEnabledElements","setStatus","selectOption","getSortAttributeOption","attribute","setSortDirection","getSortDirectionOption","dir","getSelectedViewMode","selectItem","updateSidebarMenuLabel","sortOptions","data-extra","data-attr","setStoredSortOptionsForSource","$firstOption","getViewModesForSource","sourceViewMode","$viewModeBtn","className","data-view","data-icon","icon","selectViewMode","doesSourceHaveViewMode","onSelectSource","selectSourceByKey","sortAttr","sortDir","getDefaultSort","viewModes","force","createView","getViewClass","TableElementIndexView","ThumbsElementIndexView","rememberDisabledElementId","forgetDisabledElementId","enableElements","parents","onEnableElements","disableElements","onDisableElements","getElementById","enableElementsById","ids","makeArray","disableElementsById","selectElementAfterUpdate","addButton","$button","getButtonContainer","isShowingSidebar","buttonContainer","createCustomizeSourcesModal","modal","CustomizeSourcesModal","base","onSelectSite","onUpdateElements","$selectedItems","_handleActionTriggerSubmit","getPostData","_handleMenuActionTriggerSubmit","option","selectedOption","firstSite","$firstVisibleSource","selectNewSource","toString","get","$heading","$headings","nextUntil","setSiteId","is","_handleSelectionChange","_handleSourceDblClick","_toggleSource","stopPropagation","_handleSourceToggleClick","prev","$list","_getChildSources","_deinitSources","_collapseSource","aria-expanded","$childSources","_countResults","total","itemLabel","itemsLabel","min","last","countLabel","item","items","$paginationContainer","totalPages","ceil","$prevBtn","$nextBtn","role","tabindex","aria-checked","selectAllElements","deselectAllElements","SPACE_KEY","selectable","multiSelect","checkboxMode","selectElementById","countElementsAction","count","triggers","safeMenuActions","destructiveMenuActions","destructive","$menuTrigger","$menu","$safeList","_createMenuTriggerList","$destructiveList","$div","_showExportHud","typeOptions","$typeField","ui","createSelectField","$formatField","$typeSelect","formattable","$limitField","createTextField","placeholder","submitting","isNaN","BaseElementIndexView","$loadingMoreSpinner","$elementContainer","$scroller","thumbLoader","elementSelect","loadingMore","_totalVisible","_morePending","_handleEnableElements","_handleDisableElements","container","insertAfter","getElementContainer","setTotalVisible","setMorePending","ElementThumbLoader","load","isVerticalList","handle","_handleElementEditing","$target","target","prop","isTouchCapable","maybeLoadMore","getAllElements","$selectedElements","selectElement","selectAll","deselectAll","getTotalVisible","totalVisible","getMorePending","morePending","canLoadMore","loadMore","$win","innerHeight","top","outerHeight","getLoadMoreParams","loadMoreElementsAction","$newElements","appendElements","onAppendElements","newElements","off","BaseElementSelectInput","elementSort","elementEditor","$elementsContainer","$addElementBtn","$addElementBtnContainer","_initialized","normalizedSettings","arguments","modalStorageKey","sortable","getContainer","getElementsContainer","getAddElementsBtn","initElementSelect","initElementSort","resetElements","getElements","DragSort","$targetItem","getSelectedItems","ignoreHandleSelector","axis","getElementSortAxis","collapseDraggees","magnetStrength","helperLagBase","onSortChange","resetItemOrder","canAddMoreElements","updateAddElementsBtn","enableAddElementsBtn","disableAddElementsBtn","removeElements","addElements","editable","_handleShowElementEditor","removeElement","not","onRemoveElements","animateElementAway","animateCss","opacity","outerWidth","draftEditor","pause","REMOVE_FX_DURATION","resume","showModal","show","createModal","getModalSettings","closeOtherModals","sources","showSiteMenu","getDisabledElementIds","onSelect","onModalSelect","modalSettings","allowSelfRelations","sourceElementId","slotsLeft","selectElements","updateDisabledElementsInModal","elementInfo","createNewElement","appendElement","animateElementIntoPlace","onSelectElements","clone","prepend","$modalElement","$inputElement","origOffset","destOffset","$helper","position","zIndex","ADD_FX_DURATION","checkForm","fieldId","editorSettings","Modal","$selectBtn","$sourceToggles","$tbody","$primaryButtons","$secondaryButtons","$footerSpinner","onFadeIn","_createElementIndex","updateSelectBtnState","enableSelectBtn","disableSelectBtn","enableCancelBtn","disableCancelBtn","showFooterSpinner","hideFooterSpinner","clearMouseUpTimeout","disableElementsOnSelect","hideOnSelect","info","has","touchData","firstTap","secondTap","resizable","onCancel","BaseInputGenerator","listening","timeout","startListening","setNewSource","stopListening","removeAllListeners","onSourceTextChange","updateTarget","onTargetTextChange","activeElement","onFormSubmit","sourceVal","targetVal","generateTargetValue","dispatchEvent","InputEvent","inputType","Event","AdminTable","totalItems","sorter","$noItems","$table","$deleteBtns","allowDeleteAll","minItems","noItemsSelector","tableSelector","DataTableSorter","reorderItems","updateUI","addRow","row","maxItems","$row","$deleteBtn","idAttribute","reorderAction","onReorderItems","reorderSuccessMessage","reorderFailMessage","handleDeleteBtnClick","event","confirmDeleteItem","deleteItem","getItemName","confirmDeleteMessage","getItemId","deleteAction","handleDeleteItemResponse","onDeleteItem","deleteSuccessMessage","deleteFailMessage","nameAttribute","$moveButtons","newItemBtnSelector","AssetEditor","reloadIndex","$imageEditorTrigger","showImageEditor","AssetImageEditor","onSave","refreshThumbnail","$imageTools","$buttons","$replaceBtn","$editorContainer","$straighten","$croppingCanvas","$spinnerCanvas","canvas","image","viewport","focalPoint","croppingCanvas","clipper","croppingRectangle","cropperHandles","cropperGrid","croppingShade","croppingAreaText","imageStraightenAngle","viewportRotation","originalWidth","originalHeight","imageVerticeCoords","zoomRatio","animationInProgress","currentView","assetId","cacheBust","draggingCropper","scalingCropper","draggingFocal","previousMouseX","previousMouseY","shiftKeyHeld","editorHeight","editorWidth","cropperState","scaleFactor","flipData","focalPointState","spinnerInterval","maxImageSize","lastLoadedDimensions","imageIsLoading","mouseMoveEvent","croppingConstraint","constraintOrientation","showingCustomConstraint","renderImage","renderCropper","now","allowDegreeFractions","isImagick","x","y","allowSavingAsNew","saveImage","getMaxImageSize","loadEditor","browserViewportWidth","documentElement","clientWidth","browserViewportHeight","clientHeight","devicePixelRatio","$tabs","$viewsContainer","$views","innerWidth","_showSpinner","fabric","StaticCanvas","width","enableRetinaScaling","renderAll","imageUrl","Image","fromURL","imageObject","set","originX","originY","getHeight","getWidth","getScaledImageDimensions","_setFittedImageVerticeCoordinates","_repositionEditorElements","focalState","imageDimensions","offsetX","offsetY","focal","focalData","adjustedX","adjustedY","storeFocalPointState","_createFocalPoint","_createViewport","storeCropperState","_addControlListeners","_handleMouseMove","_handleMouseDown","_handleMouseUp","_handleMouseOut","_hideSpinner","_reloadImage","setSrc","min-width","min-height","previousEditorDimensions","setDimensions","currentScaledDimensions","getZoomToFitRatio","previouslyOccupiedArea","_getBoundingRectangle","_repositionCropper","getZoomToCoverRatio","_repositionImage","_repositionViewport","_repositionFocalPoint","_zoomImage","Rect","fill","globalCompositeOperation","sizeFactor","focalX","focalY","deltaX","deltaY","Group","Circle","radius","strokeWidth","stroke","toggleFocalPoint","dimensions","state","currentWidth","ratio","hasOrientationChanged","_","imageRatio","editorRatio","_handleTabClick","rotateImage","flipImage","straighteningInput","SlideRuleInput","onStart","_showGrid","onChange","slider","straighten","onEnd","_hideGrid","_cleanupFocalPointAfterStraighten","SHIFT_KEY","_handleConstraintClick","_handleOrientationClick","_applyCustomConstraint","constraint","_showCustomConstraint","_hideCustomConstraint","setCroppingConstraint","enforceCroppingConstraint","$constraints","$constraint","reverse","_getCustomConstraint","w","h","parseFloat","_setCustomConstraint","$tab","showView","enableSlider","disableSlider","disableCropMode","enableCropMode","zoomFactor","degrees","imageZoomRatio","newAngle","angle","scaledImageDimensions","viewportProperties","imageProperties","angleInRadians","PI","newDeltaX","cos","sin","newDeltaY","modifiedDeltaX","modifiedDeltaY","temp","animate","animationDuration","onComplete","cleanAngle","_adjustFocalPointByAngle","_resetFocalPointPosition","editorCenter","setValue","properties","scaleY","scaleX","previousAngle","_adjustEditorElementsOnStraighten","newCenterX","newCenterY","angleDelta","currentZoomRatio","adjustmentRatio","cropperCenterX","cropperCenterY","imageVertices","getImageVerticeCoords","rectangle","_getZoomRatioToFitRectangle","_isCenterInside","object","containingObject","newFocalX","newFocalY","adjustedFocalX","adjustedFocalY","containingVertices","vertex","rectangleVertices","_getRectangleVertices","verticeIndex","arePointsInsideRectangle","edge","_getEdgeCrossed","rectangleCenter","distanceFromVertexToEdge","abs","sqrt","pow","distanceFromCenterToEdge","postData","imageRotation","cropData","zoom","end","scaledWidth","scaledHeight","boundingBox","_getImageBoundingBox","scale","vertScale","horiScale","getCombinedZoomRatio","strokeOptions","gridWidth","gridHeight","xStep","yStep","Line","onFadeOut","_editorModeTransition","cropperData","_showCropper","_hideCropper","targetZoom","inverseZoomFactor","imageOffsetX","imageOffsetY","getContext","cW","cH","setInterval","rotation","save","clearRect","translate","rotate","beginPath","moveTo","lineTo","lineWidth","strokeStyle","restore","clearInterval","clipperData","_setupCropperLayer","_redrawCropperElements","backgroundColor","hoverCursor","selection","rectangleRatio","rectWidth","rectHeight","lineOptions","gridOptions","pathGroup","Path","cropTextTop","cropTextBackgroundColor","Textbox","fontSize","font","textAlign","previousImageArea","currentOffset","areaFactor","coordinateSet","d","_isMouseOver","move","_cropperHandleHitTest","pageX","pageY","_handleMouseMoveInternal","_handleFocalDrag","_handleCropperDrag","_handleCropperResize","_setMouseCursor","vertices","dxi","dyi","furthest","furthestDeltas","newX","newY","previousHeight","previousWidth","startingRectangle","_calculateNewCropperSizeByDeltas","cropperDirection","topDelta","leftDelta","change","cursor","parentOffset","mouseX","mouseY","lb","rb","tb","bb","topLeft","topRight","bottomRight","bottomLeft","zoomMode","topVerticalSegment","bottomVerticalSegment","rightHorizontalSegment","leftHorizontalSegment","verticalOffset","horizontalOffset","_debug","fabricObj","debugger","points","ab","_getVector","bc","scalarAbAb","_getScalarProduct","scalarBcBc","point","ap","bp","scalarAbAp","scalarBcBp","projectsOnAB","projectsOnBC","_getVectorMagnitude","vector","_getAngleBetweenVectors","acos","edgePoints","centerPoint","smallestDiff","edgeCrossed","edgeIndex","toCenter","edgeVector","toVertex","diff","box","proportion","AssetIndex","$includeSubfoldersContainer","$includeSubfoldersCheckbox","showingIncludeSubfoldersCheckbox","$uploadButton","$uploadInput","$progressBar","$folders","uploader","promptHandler","progressBar","_uploadTotalFiles","_uploadFileProgress","_uploadedAssetIds","_currentUploaderSettings","_assetDrag","_folderDrag","_expandDropTargetFolderTimeout","_tempExpandedFolders","_fileConflictTemplate","choices","_folderConflictTemplate","_initIndexPageMode","_positionProgressBar","_createFolderContextMenu","_getSourceLevel","updateDropTargets","contextMenu","parentsUntil","DragDrop","activeDropTargetClass","helperOpacity","helper","$file","_getFileDragHelper","dropTargets","$draggee","targets","onDragStart","_onDragStart","onDropTargetChange","_onDropTargetChange","onDragStop","_onFileDragStop","helperBaseZindex","$selected","draggees","_getFolderUidFromSourceKey","$draggeeHelper","$helperSidebar","$helperNav","$helperUl","padding-top","padding-right","padding-bottom","padding-left","draggedSourceIds","_onFolderDragStop","$activeDropTarget","originatingSource","targetFolderId","originalAssetIds","originalAssetId","resetProgressBar","setItemCount","showProgressBar","parameterArray","folderId","onMoveFinish","responseArray","resetPrompts","conflict","addPrompt","suggestedFilename","prompt","hideProgressBar","performAfterMoveActions","_collapseExtraExpandedFolders","getPromptCount","fadeOutHelpers","showBatchPrompts","returnData","newParameterArray","choice","apply","_performBatchRequests","returnHelpersToDraggees","folderIds","parentId","requestId","fileMoveList","newSourceKey","transferList","newFolderId","newFolderUid","merge","_performActualFolderMove","folderDeleteList","moveCallback","counter","_getRootSource","$parent","_getParentSource","_selectSourceByFolderId","$targetSource","_getSourceByKey","$parentSources","$parentSource","style","insertBefore","PromptHandler","ProgressBar","fileInput","dropZone","events","fileuploadstart","_onUploadStart","fileuploadprogressall","_onUploadProgress","fileuploaddone","_onUploadComplete","kind","allowedKinds","Uploader","defaultVolumeHandle","setParams","$rootSource","$subContainer","checked","marginBottom","includeSubfolders","progress","loaded","setProgressPercentage","files","doReload","file","isLastUpload","_uploadFollowup","_updateAfterUpload","doFollowup","parameterIndex","followupCallback","incrementProcessedItemCount","updateProgressBar","sourceAssetId","conflictingAssetId","targetFilename","_onUpdateElements","_onKeyDown","_onElementFocus","shiftKey","PreviewFileModal","openInstance","selfDestruct","$focusedItem","_loadPreview","startingWidth","startingHeight","$outerContainer","$innerContainer","_$firstRowCells","$helperCells","$helperCell","$firstRowCell","$dropTarget","dropTargetFolder","_hasSubfolders","_isExpanded","_expandFolder","dropTargetFolderId","$excludedSources","_collapseFolder","menuOptions","onClick","_createSubfolder","_renameFolder","_deleteFolder","ContextMenu","menuClass","$parentFolder","subfolderName","folderName","_prepareParentForChildren","$subfolder","folderUid","_appendSubfolder","$targetFolder","folder","_cleanUpTree","oldName","newName","$existingChildren","subfolderLabel","folderInserted","$existingChild","before","windowHeight","finalCallback","doRequest","parameters","AssetSelectInput","$uploadBtn","originalFilename","originalExtension","resetOriginalFilename","_renameHelper","validateElementForm","canUpload","_attachUploader","defaultFieldLayoutId","formData","multiple","canAddMoreFiles","$existing","selectUploadedFile","$newElement","margin","slotsTaken","_parseFilename","parts","extension","pop","baseFileName","endPos","selectionStart","selectionEnd","createRange","select","range","collapse","moveEnd","moveStart","$filenameField","ext","oldExt","newExt","AssetSelectorModal","$selectTransformBtn","_selectedTransform","transforms","createSelectTransformButton","$btnGroup","$menuList","MenuButton","onOptionSelect","onSelectTransform","allowTransforms","transform","selectImagesWithTransform","transformUrls","imageIdsWithMissingUrls","$item","fetchMissingTransformUrls","canSelectImageTransforms","AuthManager","remainingSessionTime","checkRemainingSessionTimer","showLoginModalTimer","decrementLogoutWarningInterval","showingLogoutWarningModal","showingLoginModal","logoutWarningModal","loginModal","$logoutWarningPara","$passwordInput","$passwordSpinner","$loginBtn","$loginErrorPara","submitLoginIfLoggedOut","updateRemainingSessionTime","setCheckRemainingSessionTimer","checkRemainingSessionTime","extendSession","responseJSON","minSafeSessionTime","showLogoutWarningModal","checkInterval","showLoginModal","submitLogin","hideLogoutWarningModal","hideLoginModal","quickShow","$logoutBtn","$renewSessionBtn","autoShow","shadeClass","updateLogoutWarningMessage","decrementLogoutWarning","time","quick","quickHide","$inputContainer","$inputsFlexContainer","$passwordContainer","$buttonContainer","$passwordWrapper","PasswordInput","onToggleInput","$newPasswordInput","logout","renewSession","validatePassword","login","clearLoginError","loginName","username","password","showLoginError","CP","authManager","$nav","$mainContainer","$alerts","$crumbs","$notificationContainer","$primaryForm","$headerContainer","$mainContent","$details","$tabsContainer","$tabsList","$overflowTabBtn","$overflowTabList","$selectedTab","selectedTabIndex","$sidebarContainer","$contentContainer","$edition","$confirmUnloadForms","$deltaForms","$collapsibleTables","fixedHeader","enableQueue","totalJobs","jobInfo","displayedJobInfo","displayedJobInfoUnchanged","trackJobProgressTimeout","jobProgressIcon","checkingForUpdates","forcingRefreshOnUpdatesCheck","includingDetailsOnUpdatesCheck","checkForUpdatesCallbacks","updateFixedHeader","handleWindowResize","$errorNotifications","$otherNotifications","delay","notificationDuration","initSpecialForms","initAlerts","shortcuts","shortcut","submitPrimaryForm","initTabs","scrollTo","_handleInputFocus","_handleInputBlur","serialized","$forms","submit","confirmUnload","livePreview","inPreviewMode","originalEvent","returnValue","saveShortcut","toggleNav","toggleClass","toggleSidebar","selectTab","_selectTab","tab","deselectTab","updateTabs","updateResponsiveTables","maxWidth","totalWidth","showOverflowMenu","tabMargin","_i","_$table","_containerWidth","_check","_isCollapsed","getBoundingClientRect","headerHeight","max-height","displayNotification","$notification","fadedMargin","margin-left","margin-right","display","notificationType","fetchAlerts","displayAlerts","alerts","margin-top","$shunnableAlerts","$link","checkForUpdates","forceRefresh","includeDetails","realCallback","_checkForUpdates","updateUtilitiesBadge","callbacks","updateInfo","_getUpdates","_checkForCachedUpdates","cached","onlyIfCached","updates","_cacheUpdates","$utilitiesLink","$badge","badgeCount","runQueueAutomatically","trackJobProgress","_trackJobProgressInternal","setJobInfo","jobs","oldInfo","getDisplayedJobInfo","progressLabel","updateJobIcon","statuses","JOB_STATUS_RESERVED","JOB_STATUS_FAILED","JOB_STATUS_WAITING","j","JobProgressIcon","hideFailMode","setDescription","description","setProgress","showFailMode","JOB_STATUS_DONE","$progressLabel","failMode","_$bgCanvas","_$staticCanvas","_$hoverCanvas","_$failCanvas","_staticCtx","_hoverCtx","_canvasSize","_arcPos","_arcRadius","_lineWidth","_arcStartPos","_arcEndPos","_arcStartStepSize","_arcEndStepSize","_arcStep","_arcStepTimeout","_arcAnimateCallback","_progressBar","canAccessQueueManager","$canvasContainer","$labelContainer","_createCanvas","_drawArc","_animateArc","_setArc","color","$canvas","ctx","lineCap","startPos","arc","closePath","targetStartPos","targetEndPos","_takeNextArcStep","CategoryIndex","editableGroups","$newCategoryBtnGroup","$newCategoryBtn","updateButton","editableCategoryGroups","group","uid","defaultGroupHandle","selectedSourceHandle","selectedGroup","$menuBtn","_getGroupTriggerHref","_openCreateCategoryModal","getAttribute","menuHtml","menuBtn","primarySiteId","groupId","newCategoryBtnText","groupSourceKey","CategorySelectInput","selectedCategoryIds","categoryIds","branchLimit","selectionLabel","$newElementsContainer","filteredElements","$allCategories","_animateCategoryAway","charts","DataTable","columns","rows","forEach","cellIndex","parseTime","timeParse","Tip","$tip","setContent","setPosition","BaseChart","$chart","chartBaseClass","dataTable","timeFormatLocale","svg","globalSettings","formats","d3Formats","formatLocaleDefinition","timeFormatLocaleDefinition","d3TimeFormatLocaleDefinition","resize","baseSettings","draw","chartClass","onAfterDrawTicks","tickKey","tick","$tickText","numberFormat","percentFormat","currencyFormat","shortDateFormats","day","month","year","bottom","colors","Area","tip","drawingArea","getChartMargin","translateX","translateY","drawTicks","drawAxes","drawChart","drawTipTriggers","getX","xAxis","axisBottom","tickFormat","getXFormatter","ticks","yAxis","getY","axisLeft","getYFormatter","tickValues","getYTickValues","axisRight","showAxis","tickSizeOuter","gridlines","xLineAxis","tickSize","yLineAxis","line","datum","area","y0","y1","plots","enter","tips","chartMargin","xAxisTickInterval","node","getTotalLength","tipTriggerWidth","$content","$xValue","$yValue","content","yTicksMaxWidth","computedTickWidth","padded","xDomainMin","xDomainMax","xDomain","scaleTime","yDomain","getYMaxValue","scaleLinear","utils","getTimeFormatter","getNumberFormatter","maxValue","getDuration","secondsNum","chartSettings","dataScale","ColorInput","$colorContainer","$colorPreview","$colorInput","createColorInput","handleTextChange","setAttribute","updateColor","_browserSupportsColorInputs","doesBrowserSupportColorInputs","$elementIndexSourcesContainer","$sourcesContainer","$sourceSettingsContainer","$newHeadingBtn","$footerBtnContainer","$saveSpinner","$loadingSpinner","sourceSort","updateSourcesOnSave","availableTableAttributes","setContainer","buildModal","addSource","sourceData","$itemLabel","$itemInput","heading","Heading","updateItemLabel","Source","handleNewHeadingBtnClick","scrollContainerToElement","$pendingHeading","$lastSource","$indexSource","getIndexSource","isHeading","appendSource","$extraSources","nextAll","BaseSource","$settingsContainer","isSelected","deselect","createSettings","$settings","headerColHeading","defaultHeaderColHeading","tableAttributes","createTableColumnsField","firstKey","firstLabel","$titleColumnCheckbox","createTableColumnOption","$columnCheckboxes","selectedAttributes","createField","instructions","createCheckbox","disabled","$labelField","$labelInput","handleLabelInputChange","deleteHeading","table","$rows","getHelper","caboose","Y_AXIS","$helperRow","helperClass","$cells","DeleteUserModal","userId","$deleteActionRadios","$deleteSpinner","userSelect","_deleting","contentSummary","idParam","$deleteSubmitBtn","_submitBtnLabel","validateDeleteInputs","withContent","num","validates","handleSubmit","DraftEditor","$revisionBtn","$revisionLabel","$expandSiteStatusesBtn","$statusIcon","$editMetaBtn","metaHud","$nameTextInput","$saveMetaBtn","$siteStatusPane","$globalLightswitch","$siteLightswitches","$addlSiteField","siteIds","newSiteIds","lastSerializedValue","listeningForChanges","pauseLevel","saving","saveXhr","queue","submittingForm","duplicatedElements","openingPreview","preview","previewToken","createdDraftInPreview","siteStatuses","canEditMultipleSites","previewTargets","enablePreview","$shareBtn","openShareLink","createShareMenu","revisionId","serializeForm","draftId","initForDraft","createDraft","canUpdateSource","listenForChanges","autosaveDrafts","statusIcons","stopListeningForChanges","createEditMetaBtn","showStatusHud","publishDraftAction","hashedCpEditUrl","expandSiteStatuses","$enabledForSiteField","_getOtherSupportedSites","s","_createSiteStatusField","$globalField","createLightswitchField","_showField","originalEnabledValue","enabled","enabledForSite","originalSerializedStatus","_updateGlobalStatus","serializedStatuses","addlSiteIds","_createAddlSiteField","_updateSiteStatuses","$field","overflow","_removeField","allEnabled","allDisabled","turnOn","turnOff","turnIndeterminate","site","$lightswitch","addlSites","$addlSiteSelectContainer","createSelect","$addlSiteSelect","bodyHtml","spinners","getPreviewToken","sourceId","getTokenizedPreviewUrl","randoParam","isLive","siteToken","tokenParam","getPreview","Preview","createDraftNoticeHud","$closeBtn","deleteDraftAction","openPreview","ensureIsDraftOrRevision","onlyIfChanged","removeActionParams","isPreviewActive","$editor","isUnpublishedDraft","saveDraft","isActive","$spinners","$statusIcons","saveDraftAction","prepareData","docTitle","draftName","revisionMenu","draftCreated","newHref","anchorPos","$actionButtonContainer","$saveBtnContainer","data-align","hashedAddAnotherRedirectUrl","$draftsUl","$draftHeading","$draftLi","$draftA","$siteOptions","$siteOption","creator","timestamp","updatePreviewTargets","afterUpdate","checkMetaValues","oldId","swapDuplicatedElementIds","getDeltaNames","idsRE","pre","post","newTarget","nextInQueue","showMetaHud","createMetaHud","onMetaHudShow","$hudBody","$nameField","$nameInputContainer","saveMeta","onMetaHudHide","onMetaHudEscape","shakeMetaHud","handleFormSubmit","autosave","abort","DynamicGenerator","EditableTable","baseName","biggestId","$addRowBtn","rowCount","hasMaxRows","hasMinRows","radioCheckboxes","log","copyDraggeeInputValuesToHelper","isVisible","initialize","initializeIfVisible","minRows","createRowObj","updateAddRowButton","canAddRow","canDeleteRow","deleteRow","$tr","onDeleteRow","staticRows","maxRows","rowId","rowIdPrefix","createRow","defaultValues","onAddRow","Row","focusOnPrevRow","tdIndex","blurTd","prevRow","$prevTr","$tds","focusOnNextRow","nextRow","$nextTr","importData","lines","textualColTypes","data-id","colId","$cell","col","scope","code","small","createDateInput","createLightswitch","default","createTimeInput","createTextInput","niceTexts","tds","$textareas","tr","td","$textarea","$checkbox","textareasByColId","onHeightChange","onTextareaHeightChange","radioMode","toggle","applyToggleCheckbox","autopopulate","HandleGenerator","allowNonAlphaStart","onTextareaFocus","onRadioCheckboxChange","checkbox","checkboxColId","neg","checkboxCol","colum","ignoreNextTextareaFocus","handleKeypress","charCode","isCtrlKeyPressed","numericKeyCodes","handlePaste","clipboardData","getData","validateValue","safeValue","tallestTextareaHeight","tdHeight","ElementActionTrigger","maxLevels","newChildUrl","$trigger","triggerEnabled","activate","updateTrigger","validateSelection","enableTrigger","disableTrigger","valid","batch","handleTriggerActivation","workers","Worker","$thumbs","$thumb","$scrollParent","scrollParent","addToQueue","invisibleThumbs","thumb","active","loadNext","scrollParentOffset","scrollParentHeight","thumbOffset","retryAll","loader","$img","ElevatedSessionForm","inputs","form","getInputPostVal","elevatedSessionManager","fetchingTimeout","stopImmediatePropagation","inputsChanged","$currentInput","requireElevatedSession","ElevatedSessionManager","passwordModal","$submitBtn","$errorPara","minSafeElevatedSessionTimeout","showPasswordModal","$passwordModal","focusPasswordInput","submitPassword","currentPassword","showPasswordError","EntryIndex","publishableSections","$newEntryBtnGroup","$newEntryBtn","section","defaultSectionHandle","selectedSection","_getSectionTriggerHref","_openCreateEntryModal","sectionId","newEntryBtnText","typeId","entryTypes","canPublish","sectionSourceKey","FieldLayoutDesigner","$tabContainer","$newTabBtn","$libraryToggle","$selectedLibrary","$fieldLibrary","$uiLibrary","$uiLibraryElements","$fieldSearch","$clearFieldSearchBtn","$fieldGroups","$fields","tabGrid","elementDrag","$workspace","$fieldSearchContainer","initTab","elementPlacementInputName","ElementDrag","customizableTabs","tabDrag","TabDrag","customizableUi","$libraryPicker","Listbox","$selectedOption","$matches","$group","$editBtn","data-action","onTabOptionSelect","initElement","Element","renameTab","removeTab","$prev","$next","$labelSpan","promptForTabName","getElementPlacementInputName","removeFieldByHandle","removeField","refreshCols","addTab","tabName","elementConfigInputName","designer","$placementInput","$configInput","config","isField","requirable","hasCustomWidth","hasSettings","settingsHtml","isRequired","createSettingsHud","initUi","updatePlacementInput","updateConfigInput","SlidePicker","step","valueLabel","pct","applyHudSettings","serializeArray","updateRequiredClass","console","required","BaseDrag","Drag","$insertion","showingInsertion","$caboose","findItems","createInsertion","createCaboose","removeCaboose","swapDraggeeWithInsertion","swapInsertionWithDraggee","setMidpoints","getClosestItem","_closestItem","_closestItemMouseDiff","_$item","_midpoint","_mouseDiff","getDist","checkForNewClosestItem","draggeeDisplay","visibility","FX_DURATION","helpers","_showDraggee","onDrag","draggingLibraryElement","draggingField","isDraggeeMandatory","isHoveringOverTab","hitTest","$fieldContainers","$libraryElement","targetPrefix","targetSelector","reverseTargetSelector","_$target","_$reverseTarget","getType","normalizeTargetSelector","findTargets","onToggleChange","nodeName","warn","getToggleVal","postVal","hideTarget","showTarget","_show","_currentHeight","$t","_targetHeight","totalCols","colGutterDrop","colPctWidth","possibleItemColspans","possibleItemPositionsByColspan","itemPositions","itemColspansByPosition","layouts","layout","itemHeights","leftPadding","_refreshingCols","_refreshColsAfterRefresh","_forceRefreshColsAfterRefresh","handleContainerHeightProxy","setItems","oldHeight","scrollHeight","gutter","itemIndex","tallestItemHeight","colIndex","itemHeight","remainder","itemHeightsByColspan","positionRight","positionLeft","minColspan","maxColspan","colspan","getItemWidthCss","minPosition","maxPosition","colHeights","createLayouts","layoutTotalCols","highestTotalCols","layoutHeights","shortestHeight","shortestLayouts","emptySpaces","emptySpace","colspans","getItemLeftPosCss","positions","isSimpleLayout","margin-bottom","positionItems","completeRefreshCols","onRefreshCols","getItemWidth","getItemWidthInPx","getItemLeftPosInPx","prevPositions","prevColspans","prevColHeights","prevEmptySpace","LayoutGenerator","endingCol","affectedColHeights","onItemResize","newHeight","tallestColHeightsByPosition","colHeightsForPosition","tallestColHeight","words","handleCasing","ImageUpload","initImageUpload","containerSelector","uploadAction","postParameters","fileInputSelector","uploadParamName","fileuploadfail","_onUploadError","initButtons","uploadButtonSelector","deleteButtonSelector","refreshImage","onAfterRefreshImage","$icon","previousSibling","nodeType","Node","TEXT_NODE","nodeValue","hudClass","indeterminate","dragger","dragStartMargin","outerContainer","X_AXIS","_onDrag","_onDragStop","muteEvent","changed","_onSettle","_getOffMargin","_onMouseDown","_onMouseUp","dragging","RIGHT_KEY","LEFT_KEY","_getMargin","mouseDistX","selectedOptionIndex","UP_KEY","selectPrev","DOWN_KEY","selectNext","selectedClass","focusClass","LivePreview","$extraFields","$dragHandle","$previewContainer","$iframeContainer","$iframe","$fieldPlaceholder","previewUrl","basePostData","fields","lastPostData","updateIframeInterval","loading","checkAgain","dragStartEditorWidth","_slideInOnIframeLoad","_forceUpdateIframeProxy","_scrollX","_scrollY","_editorWidth","_editorWidthInPx","protocol","previewParams","forceUpdateIframe","extraFields","defaultEditorWidth","moveFieldsBack","editorWidthInPx","inPx","minEditorWidthInPx","exit","$editorHeader","getIframeWidth","$clone","_getClone","updateIframe","slideIn","createToken","previewAction","updateWidths","$newClone","field","contentWindow","scrollLeft","X-Craft-Token","xhrFields","withCredentials","crossDomain","handleSuccess","handleError","write","onResponse","copyInputValues","$textInput","$showPasswordToggle","showingPassword","passwordInput","initInputFocusEvents","hidePassword","setCurrentInput","updateToggleLabel","showPassword","togglePassword","onKeyDown","ALT_KEY","onKeyUp","onInputChange","$previewHeader","$targetBtn","$targetMenu","$deviceTypeContainer","$orientationBtn","$deviceMask","$devicePreviewContainer","iframeLoaded","$tempInput","activeTarget","isDeviceUpdating","deviceAnimationTimeout","currentDeviceType","deviceOrientation","deviceWidth","deviceHeight","deviceMaskDimensions","phone","tablet","iframeHeight","_updateIframeProxy","Pro","switchTarget","aria-selected","deviceType","aria-hidden","previewTarget","resetDevicePreview","_devicePreviewIsActive","updateDevicePreview","_useIframeResizer","previewIframeResizerOptions","resetScroll","refresh","sameHost","frameborder","wrap","iFrameResize","checkOrigin","scrolling","onInit","iframe","switchDeviceType","newDeviceType","switchOrientation","hZoom","wZoom","previewHeight","previewWidth","maskHeight","maskWidth","rotationDeg","marginTop","marginLeft","iFrameResizer","removeListeners","defaultSettings","_onHide","instance","loadAsset","focusItem","empty","desiredHeight","desiredWidth","containerHeight","containerWidth","minGutter","_resizeContainer","previewHtml","max-width","$innerProgressBar","$progressBarStatus","_itemCount","_processedItemCount","_displaySteps","displaySteps","setProcessedItemCount","fadeTo","incrementItemCount","percentage","$modalContainerDiv","$prompt","$promptApplyToRemainingContainer","$promptApplyToRemainingCheckbox","$promptApplyToRemainingLabel","$pomptChoices","_prompts","_promptBatchCallback","_promptBatchReturnData","_promptBatchNum","_showNextPromptInBatch","remainingInBatch","_showPrompt","_handleBatchPromptSelection","applyToRemaining","choiceData","itemsToGo","_promptCallback","$promptMessage","$promptChoices","$promptButtons","$radioButton","_selectPromptChoice","fadeOut","_cancelPrompt","totalSteps","_min","_max","Number","isInteger","prevAll","triggerEvent","aria-valuenow","aria-valuetext","$activeButton","startPositionX","graduationsMin","graduationsMax","slideMin","slideMax","$overlay","$cursor","$graduations","$graduationsUl","_handleResize","_handleTapStart","_handleTapMove","_handleTapEnd","graduationsCalculatedWidth","valueToPosition","touch","startLeft","curX","positionToValue","scaleMin","scaleMax","SlugGenerator","allowUppercaseInSlug","limitAutoSlugsToAscii","XRegExp","matchChain","slugWordSeparator","Structure","structureDrag","$parents","initToggle","StructureDrag","initNewChildMenus","viewStateKey","$addBtns","onNewChildMenuClick","showMenu","getIndent","level","baseIndent","nestedIndent","addElement","$addBtn","$parentUl","_removeUl","structure","draggeeLevel","$helperLi","$targets","draggeeHeight","$level","cancelDrag","$lis","$closestTarget","closestTargetPos","closestTargetYDiff","closestTargetOffset","closestTargetHeight","targetOffset","targetHeight","targetYMidpoint","targetYDiff","$closestTargetLi","closestTargetLevel","$nextTargetLi","nextTargetLevel","hoveringBetweenRows","draggeeX","targetItemMouseDiffX","$parentLis","$closestParentLi","closestParentLiXDiff","closestParentLevel","$parentLi","parentLiX","parentLiXDiff","parentLevel","onMouseUp","$draggeeParent","moved","$closestSiblings","newLevel","setLevel","structureId","prevId","indent","$childLis","StructureTableSorter","tableView","_basePadding","_helperMargin","_$titleHelperCell","_titleHelperCellOuterWidth","_ancestors","_updateAncestorsFrame","_draggeeLevel","_draggeeLevelDelta","draggingLastElements","_loadingDraggeeLevelDelta","_targetLevel","_targetLevelBounds","_positionChanged","singleHelper","helperSpacingY","findDraggee","$nextRow","nextRowLevel","nextRowLevelDelta","_getAjaxBaseData","delta","drag","canInsertBefore","_getLevelBounds","canInsertAfter","_getAncestors","_setTargetLevelBounds","_updateIndent","onInsertionPointChange","_updateAncestorsBeforeRepaint","levelDiff","padding","_getLevelIndent","$prevRow","prevRowLevel","$spinnerRow","_createSpinnerRowAfter","onPositionChange","_expandElement","onReturnHelpersToDraggees","newDraggeeIndexes","oldDraggeeIndexes","$postDraggeeItems","_minLevel","_maxLevel","forcePositionChange","_mouseDist","realMouseX","mousedownX","_indentationDist","LEVEL_INDENT","_targetLevelMouseDiff","_magnetImpact","MAX_GIVE","_closestLevelMagnetIndent","targetLevel","_level","_$prevRow","cancelAnimationFrame","_updateAncestors","_$ancestor","_newAncestors","HELPER_MARGIN","$selectedSortHeader","structureTableSort","_totalVisiblePostStructureTableDraggee","_morePendingPostStructureTableDraggee","initTableHeaders","_collapseElement","selectedSortAttr","$tableHeaders","selectedSortDir","_handleSelectedSortHeaderClick","_handleUnselectedSortHeaderClick","_isStructureTableDraggingLastElements","positionedAfter","includeTableAttributesForSource","_updateTableAttributes","$nextNextRow","descendantOf","$nextRows","newSortDir","_handleSortHeaderClick","TagSelectInput","searchMenu","$addTagInput","_ignoreBlur","searchForTags","selectTag","$hoverOption","$nextOption","focusOption","$prevOption","killSearchMenu","excludeIds","tagGroupId","tags","exclude","exactMatch","Menu","attachToElement","data-site-id","targetSiteId","data-label","data-editable","$titleContainer","autocomplete","inputmode","maxlength","autofocus","getAutofocusValue","getDisabledValue","readonly","showCharsLeft","createCopyTextInput","buttonId","execCommand","createCopyTextField","createCopyTextPrompt","createTextarea","createTextareaField","$select","data-target-prefix","optgroup","$optgroup","selected","data-target","data-reverse-target","reverseToggle","for","createCheckboxField","createCheckboxSelect","allValue","allChecked","showAllOption","allLabel","createCheckboxSelectField","fieldset","data-value","data-indeterminate-value","aria-labelledby","labelId","containerId","$colorPreviewContainer","createColorField","getMonth","formattedValue","timezone","defaultDate","createDateField","createDateRangePicker","today","getFullYear","getDate","startDate","endDate","$allOption","firstDayOffset","getDay","firstDay","$flex","$startDate","$endDate","$dateInputs","dpDiv","setPositionRelativeToAnchor","startTime","endTime","foundOption","btnClasses","timepicker","timepickerOptions","getHours","getMinutes","getSeconds","createTimeField","warning","addErrorsToField","addErrorsToList","$errors","clearErrorsFromField","_rejectedFiles","_extensionList","_totalFileCounter","_validFileCounter","autoUpload","fileupload","onFileAdd","paramObject","getInProgress","validateExtension","_createExtensionList","process","done","pass","fileExtension","maxFileSize","originalFiles","processErrorMessages","kinds","humanFileSize","maxUploadSize","bytes","u","toFixed","allowedKind","fileKinds","extensions","pasteZone","sequentialUploads","Accept","UriFormatGenerator","uriFormat","suffix"],"mappings":"CAAA,SAAUA,GCKV,IAAAC,EAAA,8FACAC,OAAAC,cAAA,SAAAC,GACA,OAAAA,EAAAC,QAAAJ,EAAA,cAIAD,EAAAM,OAAAC,MACA,CACAC,UAAA,GAcAC,MAAA,SAAAC,EAAAC,GACA,IAAAX,EAAAY,QAAAF,GACA,KAAA,+DAGA,OAAAA,EAAAG,OAAA,CAAAJ,EAAAK,EAAAC,KACAN,EAAA,iBAAAE,EAAAG,EAAAH,GAAAA,EAAAG,EAAAC,IAAAD,EACAL,GACA,KAWAO,EAAA,SAAAC,EAAAC,EAAAC,GAQA,YANA,IAAAZ,MAAAa,aAAAH,SACA,IAAAV,MAAAa,aAAAH,GAAAC,KAEAA,EAAAX,MAAAa,aAAAH,GAAAC,IAGAC,EACAE,KAAAC,cAAAJ,EAAAC,GAGAD,GAGAI,cAAA,SAAAC,EAAAC,GACA,IAAAC,EACA,IAAA,KAAAA,EAAAJ,KAAAK,iBAAAH,IACA,KAAA,8BAEA,IAAA,IAAAR,EAAA,EAAAA,EAAAU,EAAAE,OAAAZ,IAAA,CACA,IAAAa,EAAAH,EAAAV,GACA,GAAA,iBAAAa,IACA,KAAAH,EAAAV,GAAAM,KAAAQ,YAAAD,EAAAJ,IACA,KAAA,8BAIA,OAAAC,EAAAK,KAAA,KAGAJ,iBAAA,SAAAH,GACA,IAAAQ,EAAAC,EAAAC,EAAA,EAEA,MAAAC,EAAA,IAAAX,GACA,IAAA,KAAAQ,EAAAC,EAAAE,EAAAC,QAAA,MACA,MAAA,CAAAZ,GAEA,IAAAE,EAAA,CAAAS,EAAAE,MAAA,EAAAJ,GAAAF,KAAA,KACA,OAAA,CACA,IAAAO,EAAAH,EAAAC,QAAA,IAAAH,EAAA,GACAM,EAAAJ,EAAAC,QAAA,IAAAH,EAAA,GAOA,IANA,IAAAK,IACAA,GAAA,IAEA,IAAAC,IACAA,GAAA,IAEA,IAAAD,IAAA,IAAAC,EACA,MAmBA,IAjBA,IAAAD,IACAA,EAAAH,EAAAP,QAEAW,EAAAD,GACAJ,IACAD,EAAAK,IAEAJ,IACAD,EAAAM,GAEA,IAAAL,IACAR,EAAAc,KAAAL,EAAAE,MAAAL,EAAA,EAAAC,GAAAF,KAAA,IAAAU,MAAA,IAAA,IACAT,EAAAC,EAAA,EACAP,EAAAc,KAAAL,EAAAE,MAAAL,EAAAM,GAAAP,KAAA,KACAC,EAAAM,GAGA,IAAAJ,KAAA,IAAAI,IAAA,IAAAC,GACA,MAGA,OAAA,IAAAL,GAIAR,GAGAI,YAAA,SAAAD,EAAAJ,GAGA,MAAAiB,EAAAlC,MAAAmC,KAAAd,EAAA,IACA,QAAA,IAAAJ,EAAAiB,GACA,MAAA,IAAAb,EAAAE,KAAA,QAEA,MAAAa,EAAAnB,EAAAiB,GACAG,OAAA,IAAAhB,EAAA,GAAArB,MAAAmC,KAAAd,EAAA,IAAA,OACA,OAAAgB,GACA,IAAA,SACA,IAAAC,OAAA,IAAAjB,EAAA,GAAArB,MAAAmC,KAAAd,EAAA,IAAA,KACA,GAAA,OAAAiB,GAAA,YAAAA,EACA,KAAA,gEAEA,IACAb,EADAc,EAAAvC,MAAAwC,aAAAJ,GAMA,OAJA,OAAAE,IAAA,KAAAb,GAAA,GAAAW,GAAAR,QAAA,QACAW,GAAA,IAAAH,EAAAK,OAAAhB,EAAA,IAGAc,EACA,IAAA,OACA,OAAAH,EACA,IAAA,SASA,QAAA,IAAAf,EAAA,GACA,OAAA,EAEA,IAAAqB,EAAA5B,KAAAK,iBAAAE,EAAA,IACA,MAAAsB,EAAAD,EAAAtB,OACA,IAAAT,GAAA,EACAiC,EAAA,EACA,IAAA,IAAApC,EAAA,EAAAA,EAAA,EAAAmC,EAAAnC,IAAA,CACA,GAAA,iBAAAkC,EAAAlC,IAAA,iBAAAkC,EAAAlC,EAAA,GACA,OAAA,EAEA,IAAAqC,EAAA7C,MAAAmC,KAAAO,EAAAlC,MACAsC,EAAA,IAAAD,GAEA,GAAA,IAAArC,GAAA,YAAAqC,EAAAE,UAAA,EAAA,GAAA,CACA,IAAAtB,EAAA,IAAAoB,EAAA/C,QAAA,YAAA,MAAA8B,QAAA,IAAA,GACA,IAAA,IAAAH,EACA,KAAA,8BAEAuB,SAAAhD,MAAAmC,KAAAW,EAAAjB,MAAA,EAAAJ,GAAAF,KAAA,MACAsB,EAAA7C,MAAAmC,KAAAW,EAAAjB,MAAAJ,EAAA,EAAAA,EAAA,EAAAqB,EAAA1B,QAAAG,KAAA,OAGA,IAAAZ,GACA,UAAAkC,GACA,MAAAA,EAAA,IAAAG,SAAAF,EAAAjB,MAAA,EAAA,EAAAiB,EAAA1B,QAAAG,KAAA,OAAAa,GACA,QAAAS,GAAAT,EAAAQ,GAAA,KAEAjC,GAAA,iBAAA+B,EAAAlC,GAAA,CAAAkC,EAAAlC,IAAAkC,EAAAlC,IAAAyC,IAAAC,GACAA,EAAApD,QAAA,IAAAsC,EAAAQ,IACArB,KAAA,MAGA,IAAA,IAAAZ,EACA,OAAAG,KAAAC,cAAAJ,EAAAM,GAEA,MACA,QACA,KAAA,mBAAAoB,uBAGA,OAAA,GAGAc,WAAA,SAAAC,GAKA,MAJA,iBAAAA,IACAA,EAAA,IAAAC,KAAAD,IAGA3D,EAAA6D,WAAAH,WAAAnD,MAAAuD,kBAAAC,WAAAJ,IASAZ,aAAA,SAAAD,EAAAD,GAOA,YANA,IAAAA,IACAA,EAAA,QAGAmB,GAAAC,aAAAC,0BAAArB,OAAAA,EAEAsB,CAAArB,IAQAsB,aAAA,SAAAzD,EAAA0D,EAAAC,GACA,MAAA,QAAA/D,MAAAgE,UACAD,EAAA,IAAA,KAAAD,EAAA,IAAA,IAAA,IAAA1D,EAEA,SAAA2D,EAAA,OAAA,KAAAD,EAAA,SAAA,IAAA1D,GASA6D,WAAA,SAAAC,GACA,OAAAzE,EAAA,UAAA0E,KAAAD,GAAArE,QASAuE,YAAA,SAAAF,GAEA,OAAAA,EAAApE,QAAA,2BAAA,SASAuE,QAAA,SAAAH,GACA,OAAAzE,EAAA,UAAAI,KAAAqE,GAAAC,QAUAG,mBAAA,SAAAJ,GACAA,EAAAK,mBAAAL,GAEA,IAAAM,EAAA,CACAC,IAAA,MACAC,IAAA,MACAC,IAAA,MACAC,IAAA,MACAC,IAAA,OAGA,IAAA,IAAAC,KAAAN,EAAA,CACA,IAAAO,EAAA,IAAAC,OAAA,KAAAF,EAAA,KACAZ,EAAAA,EAAApE,QAAAiF,EAAAP,EAAAM,IAGA,OAAAZ,GAQAe,gBAAA,SAAAC,GACA,IAAAC,EAAA1F,EAAAyF,GACAE,EAAAD,EAAAC,MAGA,QAAA,IAAAD,EAAA,GAAAE,kBAAA,CAEA,IAAAjE,EAAA,EAAAgE,EAAAhE,OACA+D,EAAA,GAAAE,kBAAA,EAAAjE,QAGA+D,EAAAC,IAAAA,IAUAE,cAAA,SAAAC,GACA,OAAAzE,KAAA0E,MAAAD,EAAAzF,QAAA,aAAA,KAAA,MASA2F,OAAA,SAAAC,EAAA9E,EAAA+E,GACA,iBAAAD,IACAA,EAAA,IAIA,IAAAE,EAAA,GAEA,GAAAnG,EAAAoG,cAAAjF,GAAA,CACA,IAAAkF,EAAA,GAEA,IAAA,IAAAC,KAAAnF,EACA,GAAAA,EAAAoF,eAAAD,GAAA,CAIA,IAAAE,EAAArF,EAAAmF,GAEA,MAAAA,EACAH,EAAAK,EACA,OAAAA,GAAA,KAAAA,GACAH,EAAA9D,KAAA+D,EAAA,IAAAE,GAIArF,EAAAkF,EAIAlF,EADAsF,QAAA7F,QAAAO,GACAA,EAAAW,KAAA,KAEAvB,MAAAmC,KAAAvB,EAAA,MAIA,IAAAuF,EAAAT,EAAA9D,QAAA,MACA,IAAAuE,IAEAP,IACAA,EAAAF,EAAAjD,OAAA0D,EAAA,IAEAT,EAAAA,EAAAjD,OAAA,EAAA0D,IAIA,IAcAC,EAdAC,EAAAX,EAAA9D,QAAA,KAOA,IANA,IAAAyE,IACAzF,EAAA8E,EAAAjD,OAAA4D,EAAA,IAAAzF,EAAA,IAAAA,EAAA,IACA8E,EAAAA,EAAAjD,OAAA,EAAA4D,KAIA,IAAAX,EAAAY,OAAA,QAAA,MAAAZ,EAAA,GACA,OAAAA,GAAA9E,EAAA,IAAAA,EAAA,KAAAgF,EAAA,IAAAA,EAAA,IAQA,GALAF,EAAA1F,MAAAmC,KAAAuD,EAAA,KAKAC,GAGA,GAFAS,EAAAT,EAEAD,GAAA1F,MAAAuG,UAAA,CAEA,IAAAC,EAAAJ,EAAAK,MAAA,IAAAzB,OAAA,OAAAhF,MAAAoE,YAAApE,MAAAuG,WAAA,WACAC,IACAJ,EAAAA,EAAAtG,QAAA0G,EAAA,GAAAxG,MAAAwF,MAAAgB,EAAA,GAAA,KAAA,IAAAd,GACAA,EAAA,UAIAU,EAAApG,MAAA2F,QAUA,IALA,KADAU,EAAAD,EAAAxE,QAAA,QAEAhB,EAAAwF,EAAA3D,OAAA4D,EAAA,IAAAzF,EAAA,IAAAA,EAAA,IACAwF,EAAAA,EAAA3D,OAAA,EAAA4D,KAGArG,MAAA0G,sBAAAhB,EACA,GAAA1F,MAAA2G,cAAA3G,MAAAuG,WAEA,IAAAH,EAAAE,OAAAtG,MAAA4G,cACAR,EAAApG,MAAAwF,MAAAY,EAAA,KAAA,IAAApG,MAAA4G,gBAEA,CAIA,GAAAhG,GAAAA,EAAA6B,OAAA,EAAAzC,MAAAuG,UAAAnF,OAAA,KAAApB,MAAAuG,UAAA,IAAA,CACA,IAAAM,EACAC,EAAAlG,EAAAgB,QAAA,MAEA,IAAAkF,GACAD,EAAAjG,EAAAmC,UAAA,EAAA+D,GACAlG,EAAAA,EAAA6B,OAAAqE,EAAA,KAEAD,EAAAjG,EAAA6B,OAAA,GACA7B,EAAA,MAMA8E,GAFAmB,EAAA7G,MAAAwF,MAAAqB,KAEAnB,EAAA,IAAAA,EAAA,IAIA9E,EAAAZ,MAAAuG,UAAA,IAAAb,GAAA9E,EAAA,IAAAA,EAAA,IACA8E,EAAA,KAgBA,OAZAA,IACAU,EAAApG,MAAAwF,MAAAY,EAAA,KAAA,IAAAV,GAGA9E,IACAwF,GAAA,IAAAxF,GAGAgF,IACAQ,GAAA,IAAAR,GAGAQ,GAQAW,SAAA,SAAArB,EAAA9E,GACA,OAAAE,KAAA2E,OAAAC,EAAA9E,EAAAZ,MAAAgH,YAQAC,WAAA,SAAAvB,EAAA9E,GACA,OAAAE,KAAA2E,OAAAC,EAAA9E,EAAAZ,MAAAkH,cAUAC,aAAA,SAAAzB,EAAA9E,GACA,OAAAZ,MAAAyF,OAAAC,EAAA9E,EAAAZ,MAAAoH,YAQAC,WAAA,SAAAjB,GACAkB,SAAAC,SAAAC,KAAA1G,KAAA2E,OAAAW,IAQAqB,aAAA,WACA,OAAAzH,MAAA0H,cACA,8BAAA1H,MAAA0H,cAAA,YAAA1H,MAAA2H,eAAA,MAEA,IAcAC,kBAAA,SAAAC,EAAAC,EAAAC,EAAAC,GAEA,mBAAAF,IACAE,EAAAD,EACAA,EAAAD,EACAA,EAAA,KAGAE,EAAAA,GAAA,IAEAC,aAAAD,EAAAC,YAAAxB,MAAA,cACA,iBAAAqB,IACAA,EAAAI,KAAAC,UAAAL,IAEAE,EAAAC,YAAA,mCAGA,IAAAG,EAAA3I,EAAA4I,KAAA5I,EAAAM,OAAA,CACAqG,IAAApG,MAAAmH,aAAAU,GACAxF,KAAA,OACAiG,SAAA,OACAC,QAAAzH,KAAA0H,iBACAV,KAAAA,EACAW,QAAAV,EACAW,MAAA,SAAAN,EAAAO,EAAAC,GAGA,IAAAR,EAAAS,kBAIA,IAAA7I,MAAA8I,GACA9I,MAAA8I,GAAAC,eAEAC,MAAAhJ,MAAAS,EAAA,MAAA,6BAGAsH,GACAA,EAAA,KAAAY,EAAAP,MAGAJ,IAOA,MAJA,mBAAAA,EAAAiB,MACAjB,EAAAiB,KAAAb,GAGAA,GAGAc,gBAAA,EACAC,WAAA,GAKAC,mBAAA,SAAAvB,EAAAC,EAAAC,EAAAC,GAEA,mBAAAF,IACAE,EAAAD,EACAA,EAAAD,EACAA,OAAAuB,GAGArJ,MAAAmJ,WAAAnH,KAAA,CAAA6F,EAAAC,EAAAC,EAAAC,IAEAhI,MAAAkJ,gBACAlJ,MAAAsJ,iCAIAA,8BAAA,WACAtJ,MAAAkJ,gBAAA,EAEA,IAAAjI,EAAAjB,MAAAmJ,WAAArF,QAEA9D,MAAA4H,kBAAA3G,EAAA,GAAAA,EAAA,IAAA,SAAA6G,EAAAa,EAAAP,GACAnH,EAAA,IAAA,mBAAAA,EAAA,IACAA,EAAA,GAAA6G,EAAAa,EAAAP,GAGApI,MAAAmJ,WAAA/H,OACApB,MAAAsJ,gCAEAtJ,MAAAkJ,gBAAA,IAEAjI,EAAA,KAGAuH,eAAA,WACA,IAAAD,EAAA,CACAgB,6BAAAC,OAAAC,KAAAzJ,MAAA0J,wBAAAnI,KAAA,KACAoI,wBAAAH,OAAAC,KAAAzJ,MAAA4J,mBAAArI,KAAA,MAOA,OAJAvB,MAAA2H,iBACAY,EAAA,gBAAAvI,MAAA2H,gBAGAY,GAWAsB,kBAAA,SAAAC,EAAAjC,EAAAG,GACA,OAAA,IAAA+B,QAAA,CAAAC,EAAAC,MACAjC,EAAAA,EAAAvI,EAAAM,OAAA,GAAAiI,GAAA,IACA8B,OAAAA,EACA9B,EAAA5B,IAAApG,MAAAmH,aAAAU,GACAG,EAAAO,QAAA9I,EAAAM,OAAA,CACAmK,mBAAA,kBACAlC,EAAAO,SAAA,GAAAzH,KAAA0H,kBACAR,EAAApH,OAAAnB,EAAAM,OAAA,GAAAiI,EAAApH,QAAA,GAAA,CAEAuJ,GAAA,IAAA9G,MAAA+G,YAEAC,MAAAC,QAAAtC,GAAAuC,KAAAP,GAAAQ,MAAAP,MAYAQ,eAAA,SAAAX,EAAAY,EAAA1C,GACA,OAAA,IAAA+B,QAAA,CAAAC,EAAAC,KAEA,IAAAU,GADA3C,EAAAA,EAAAvI,EAAAM,OAAA,GAAAiI,GAAA,IACA2C,aAAA,KAGA7J,KAAA8J,eAAAD,GAAAJ,KAAAM,IAEA7C,EAAA8B,OAAAA,EACA9B,EAAA8C,QAAA9K,MAAA+K,WACA/C,EAAA5B,IAAAsE,EACA1C,EAAAO,QAAA9I,EAAAM,OAAA8K,EAAA7C,EAAAO,SAAA,IACAP,EAAApH,OAAAnB,EAAAM,OAAAC,MAAAgL,WAAA,GAAAhD,EAAApH,QAAA,GAAA,CAEAuJ,GAAA,IAAA9G,MAAA+G,YAIAtJ,KAAAmK,cACAjD,EAAApH,OAAAsK,oBAAA,GAGAb,MAAAC,QAAAtC,GAAAuC,KAAAY,IAEArK,KAAAsK,mBAAAD,EAAA5C,QAAAoC,GAAAJ,KAAA,KAEAP,EAAAmB,EAAArD,QACA0C,MAAAP,KACAO,MAAAP,KACAO,MAAAP,MAIAoB,oBAAA,EACAJ,YAAA,KACAK,mBAAA,GAQAV,eAAA,SAAAD,GACA,OAAA,IAAAZ,QAAA,CAAAC,EAAAC,KAEAnJ,KAAAuK,mBACAvK,KAAAwK,mBAAAtJ,KAAA,CAAAgI,EAAAC,IAKAnJ,KAAAmK,YACAjB,EAAAlJ,KAAAmK,cAIAnK,KAAAuK,oBAAA,EACAvK,KAAA+I,kBAAA,OAAA,kBAAA,CACAc,YAAAA,IACAJ,KAAAgB,IAEAzK,KAAAuK,mBAKArB,EAAAuB,EAAAzD,MAJAmC,EAAAuB,KAKAhB,MAAAgB,IACA1K,KAAA2K,mBAAAxB,EAAAuB,SAKAJ,mBAAA,SAAA7C,EAAAoC,GACA,OAAA,IAAAZ,QAAA,CAAAC,EAAAC,KAEAnJ,KAAAmK,YACAjB,IAIAlJ,KAAA+I,kBAAA,OAAA,mCAAA,CACA/B,KAAA,CACAS,QAAAA,GAEAoC,YAAAA,IACAJ,KAAAgB,IAEA,GAAAzK,KAAAuK,mBAWA,IANAvK,KAAAmK,YAAAM,EAAAzD,KACAhH,KAAAuK,oBAAA,EAEArB,IAGAlJ,KAAAwK,mBAAAlK,QACAN,KAAAwK,mBAAAxH,QAAA,GAAAhD,KAAAmK,kBAXAhB,EAAAuB,KAaAhB,MAAAgB,IACA1K,KAAA2K,mBAAAxB,EAAAuB,QAKAC,mBAAA,SAAAxB,EAAAuB,GAGA,IAFA1K,KAAAuK,oBAAA,EACApB,EAAAuB,GACA1K,KAAAwK,mBAAAlK,QACAN,KAAAwK,mBAAAxH,QAAA,GAAA0H,IAOAE,sBAAA,WAKA,IAJA5K,KAAAmK,YAAA,KACAnK,KAAAuK,oBAAA,EAGAvK,KAAAwK,mBAAAlK,QACAN,KAAAwK,mBAAAxH,QAAA,MAYA6H,gBAAA,SAAA7B,EAAA1D,EAAAwF,GACA,OAAA,IAAA7B,QAAA,CAAAC,EAAAC,KAEA,IAAAK,EAAA,IAAAuB,eACAvB,EAAAxI,KAAAgI,EAAA1D,GAAA,GACA,iBAAAwF,GACAtB,EAAAwB,iBAAA,eAAA,mCACAF,EAAA1D,KAAAC,UAAAyD,IAEAtB,EAAAwB,iBAAA,eAAA,oDAEAxB,EAAAyB,aAAA,OAEAzB,EAAA0B,OAAA,KAEA,GAAA,MAAA1B,EAAA2B,OAAA,CAEA,IAAAC,EAAA5B,EAAA6B,kBAAA,uBACAC,EAAA,YAAAC,KAAAH,GACAI,EAAA,MAAAF,GAAAA,EAAA,GAAAA,EAAA,GAAA,WAGAnE,EAAAqC,EAAA6B,kBAAA,gBACAI,EAAA,IAAAC,KAAA,CAAAlC,EAAAiB,UAAA,CAAAlJ,KAAA4F,IACAwE,EAAAnF,SAAAoF,cAAA,KACAD,EAAAjF,KAAAmF,OAAAC,IAAAC,gBAAAN,GACAE,EAAAK,SAAAR,EACAhF,SAAAsE,KAAAmB,YAAAN,GACAA,EAAAO,QACA1F,SAAAsE,KAAAqB,YAAAR,GAEAzC,SAEAC,KAIAK,EAAArB,KAAA2C,MAUAsB,cAAA,SAAAhJ,GACA,GAAA,iBAAAA,EACA,OAAAA,EAIA,IADA,IAAA/D,EAAA+D,EAAAjC,MAAA,KACAzB,EAAA,EAAAA,EAAAL,EAAAiB,OAAAZ,IACAL,EAAAK,GAAAf,EAAA0C,KAAAhC,EAAAK,IAEA,OAAAL,GAWAgN,cAAA,SAAAC,EAAAC,EAAAC,GAEAA,EAAAC,MAAA,SAAAC,EAAAC,GACA,OAAAD,EAAApM,SAAAqM,EAAArM,OACA,EAEAoM,EAAApM,OAAAqM,EAAArM,OAAA,GAAA,KAUA,IANA,IAAAsM,EAAA5M,KAAA6M,yBAAAP,EAAAnL,MAAA,KAAAqL,GAAA,GAAA,GACAM,EAAA9M,KAAA6M,yBAAAN,EAAApL,MAAA,KAAAqL,GAAA,GAAA,GAGA1M,EAAAgN,EAAAC,SAEAC,EAAA,EAAAA,EAAAR,EAAAlM,OAAA0M,KACA9N,MAAA+N,QAAAT,EAAAQ,GAAA9N,MAAAgO,qBACA,iBAAAJ,EAAAN,EAAAQ,MAEA,iBAAAJ,EAAAJ,EAAAQ,KACA5F,KAAAC,UAAAuF,EAAAJ,EAAAQ,OAAA5F,KAAAC,UAAAyF,EAAAN,EAAAQ,SAGAlN,EAAAA,EAAAqN,OAAAL,EAAAN,EAAAQ,MACA9L,KAAA,wBAAAsL,EAAAQ,IAIA,OAAAlN,EAAAW,KAAA,MAGAoM,yBAAA,SAAA/M,EAAA0M,EAAAY,EAAAC,GACA,IAMAL,EAAAM,EANAC,EAAA,GAEAH,IACAG,EAAAR,SAAA,IAKAS,EAAA,IAAA,IAAApL,EAAA,EAAAA,EAAAtC,EAAAQ,OAAA8B,IAAA,CAEA,IAAA4K,EAAAR,EAAAlM,OAAA,EAAA0M,GAAA,EAAAA,IAEA,IADAM,EAAAG,mBAAA3N,EAAAsC,IAAAT,OAAA,EAAA6K,EAAAQ,GAAA1M,OAAA,MAEAkM,EAAAQ,GAAA,KACAM,IAAAd,EAAAQ,GAAA,IACA,MACA,IAAAO,EAAAf,EAAAQ,MACAO,EAAAf,EAAAQ,IAAA,IAEAO,EAAAf,EAAAQ,IAAA9L,KAAApB,EAAAsC,IACA,SAAAoL,EAIAJ,GACAG,EAAAR,SAAA7L,KAAApB,EAAAsC,IAIA,GAAAiL,EACA,IAAA,IAAApI,KAAA/F,MAAAwO,mBACAxO,MAAAwO,mBAAAxI,eAAAD,KACAsI,EAAAtI,GAAA,CAAAxB,mBAAAwB,GAAA,IAAAtG,EAAAyC,MAAAlC,MAAAwO,mBAAAzI,MAKA,OAAAsI,GASAI,gBAAA,SAAAtO,GACA,IACAK,EADAkO,EAAA,GAGA,IAAA,IAAAtO,KAAAD,EACA,GAAAA,EAAA6F,eAAA5F,GAAA,CAIA,IAEAqJ,EAFAxD,EAAA9F,EAAAC,GACAuO,EAAAvO,EAAAqG,MAAA,iBAGA,GAAAkI,EAAA,GAKA,IAHAlF,EAAAkF,EAAA,GAAAlI,MAAA,iBAGAjG,EAAA,EAAAA,EAAAiJ,EAAArI,OAAAZ,IACAiJ,EAAAjJ,GAAAiJ,EAAAjJ,GAAAuC,UAAA,EAAA0G,EAAAjJ,GAAAY,OAAA,QAGAqI,EAAA,GAGAA,EAAAmF,QAAAD,EAAA,IAEA,IAAAE,EAAAH,EAEA,IAAAlO,EAAA,EAAAA,EAAAiJ,EAAArI,OAAAZ,IACAA,EAAAiJ,EAAArI,OAAA,GACA,iBAAAyN,EAAApF,EAAAjJ,MAEAiJ,EAAAjJ,EAAA,IAAAwC,SAAAyG,EAAAjJ,EAAA,KAAAiJ,EAAAjJ,EAAA,GAGAqO,EAAApF,EAAAjJ,IAAA,GAFAqO,EAAApF,EAAAjJ,IAAA,IAMAqO,EAAAA,EAAApF,EAAAjJ,MAGAiJ,EAAAjJ,KACAiJ,EAAAjJ,GAAAqO,EAAAzN,QAGAyN,EAAApF,EAAAjJ,IAAAyF,GAKA,OAAAyI,GASAI,WAAA,SAAAhH,GACA,IAAAiH,EAAAtP,EAAA,UAAA,CACAuP,KAAA,CACAlF,OAAA,OACAjC,OAAA,GACAoH,iBAAA,WAIA,GAAA,iBAAAnH,EAGA,IAFA,IACAoH,EADAC,EAAArH,EAAA7F,MAAA,KAEAzB,EAAA,EAAAA,EAAA2O,EAAA/N,OAAAZ,IACA0O,EAAAC,EAAA3O,GAAAyB,MAAA,IAAA,GACAxC,EAAA,WAAA,CACA4C,KAAA,SACA0D,KAAAwI,mBAAAW,EAAA,IACAjJ,MAAAsI,mBAAAW,EAAA,IAAA,MACAE,SAAAL,GAIA,OAAAA,GAYAM,QAAA,SAAAC,EAAAC,EAAAC,GAEA,UAAAF,UAAAC,EACA,OAAA,EAGA,GAAA,iBAAAD,EAAA,CAEA,GAAAA,EAAAlO,SAAAmO,EAAAnO,OACA,OAAA,EAIA,GAAAkO,aAAAG,OAAAF,aAAAE,MACA,OAAA,EAIA,KAAAH,aAAAG,OACA,QAAA,IAAAD,IAAA,IAAAA,GACA,IAAAxP,MAAAqP,QAAArP,MAAA0P,cAAAJ,GAAA/B,OAAAvN,MAAA0P,cAAAH,GAAAhC,QACA,OAAA,OAGA,IAAAvN,MAAAqP,QAAArP,MAAA0P,cAAAJ,GAAAtP,MAAA0P,cAAAH,IACA,OAAA,EAMA,IAAA,IAAA/O,KAAA8O,EACA,GAAAA,EAAAtJ,eAAAxF,KAIAR,MAAAqP,QAAAC,EAAA9O,GAAA+O,EAAA/O,IACA,OAAA,EAKA,OAAA,EAEA,OAAA8O,IAAAC,GAUAG,cAAA,SAAAnP,GACA,IAAAkJ,EAAA,GAEA,IAAA,IAAArJ,KAAAG,EACAA,EAAAyF,eAAA5F,IAIAqJ,EAAAzH,KAAA5B,GAGA,OAAAqJ,GAWAkG,YAAA,SAAAhO,GACAuE,QAAA7F,QAAAsB,KACAA,EAAAA,EAAAM,SAKA,IAFA,IAAA2N,EAAA,GAEApP,EAAA,EAAAA,EAAAmB,EAAAP,OAAAZ,IACAoP,GAAA,KAAAjO,EAAAnB,GAGA,OAAAoP,GAUAC,MAAA,SAAA3L,EAAAvC,GACA,IAAAuC,EACA,OAAAA,OAEA,IAAAvC,IACAA,EAAA,eAEA,IAAAoD,EAAA,IAAAC,OAAA,KAAAhF,MAAA2P,YAAAhO,GAAA,MACA,OAAAuC,EAAApE,QAAAiF,EAAA,KAUAS,MAAA,SAAAtB,EAAAvC,GACA,IAAAuC,EACA,OAAAA,OAEA,IAAAvC,IACAA,EAAA,eAEA,IAAAoD,EAAA,IAAAC,OAAA,IAAAhF,MAAA2P,YAAAhO,GAAA,OACA,OAAAuC,EAAApE,QAAAiF,EAAA,KAUA5C,KAAA,SAAA+B,EAAAvC,GAGA,OAFAuC,EAAAlE,MAAA6P,MAAA3L,EAAAvC,GACAuC,EAAAlE,MAAAwF,MAAAtB,EAAAvC,IAWAmO,WAAA,SAAA5L,EAAAzB,GACA,OAAAyB,EAAAzB,OAAA,EAAAA,EAAArB,UAAAqB,GAUAsN,YAAA,SAAA5P,EAAA4H,GAGA,IAFA,IAAAiI,EAAA,GAEAxP,EAAA,EAAAA,EAAAL,EAAAiB,OAAAZ,IAAA,EAGA,mBAAAuH,EACAA,EAAA5H,EAAAK,GAAAA,GAEAL,EAAAK,KAIAwP,EAAAhO,KAAA7B,EAAAK,IAIA,OAAAwP,GAUAjC,QAAA,SAAAkC,EAAA9P,GAIA,OAHAV,EAAAoG,cAAA1F,KACAA,EAAAqJ,OAAA2F,OAAAhP,IAEAA,EAAA+P,SAAAD,IAUAE,gBAAA,SAAAF,EAAA9P,GACA,IAAAD,EAAAT,EAAAsO,QAAAkC,EAAA9P,GACA,OAAA,IAAAD,IACAC,EAAAiQ,OAAAlQ,EAAA,IACA,IAYAmQ,QAAA,SAAAlQ,GACA,OAAAA,EAAAiB,OAGAjB,EAAAA,EAAAiB,OAAA,GAFA,MAYAkP,eAAA,SAAApM,GACA,OAAAA,EAAAqM,OAAA,GAAAC,cAAAtM,EAAArC,MAAA,IASA4O,eAAA,SAAAvM,GACA,OAAAA,EAAAqM,OAAA,GAAAG,cAAAxM,EAAArC,MAAA,IAGA8O,SAAA,SAAAvK,GACA,IAAAuI,EAAAvI,EAAAK,MAAA,gFACA,OAAAkI,EAGA,CACAiC,OAAAjC,EAAA,GACAkC,KAAAlC,EAAA,IAAAA,EAAA,GAAA,IAAAA,EAAA,GAAA,IACAmC,SAAAnC,EAAA,GACAoC,KAAApC,EAAA,IAAA,KACAjJ,KAAAiJ,EAAA,IAAA,IACAqC,MAAArC,EAAA,IAAA,KACAsC,KAAAtC,EAAA,IAAA,MATA,IAaAuC,WAAA,SAAA9K,GACA,IAAA+K,EAAArQ,KAAA6P,SAAArJ,SAAAC,SAAAC,MACA,IAAA2J,EACA,OAAA,EAEA,IAAAC,EAAAtQ,KAAA6P,SAAAvK,GACA,QAAAgL,GAGAD,EAAAN,OAAAO,EAAAP,MAMAQ,2BAAA,SAAAC,EAAAC,QACA,IAAAA,IACAA,GAAA,GAGA,IAKAC,EAAAC,KAAAC,MAAAJ,EALA,QAMAA,GANA,OAQA,IAAAK,EAAAF,KAAAC,MAAAJ,EAPA,OAQAA,GARA,MAUA,IAGAM,EAHAC,EAAAJ,KAAAC,MAAAJ,EATA,MAUAA,GAVA,KAcAC,GACAK,EAAAH,KAAAC,MAAAJ,EAdA,IAeAA,GAfA,KAiBAM,EAAAH,KAAAK,MAAAR,EAjBA,IAkBAA,EAAA,GAGA,IAAAS,EAAA,GAsBA,OApBAP,GACAO,EAAA/P,KAAAwP,EAAA,KAAA,IAAAA,EAAAxR,MAAAS,EAAA,MAAA,QAAAT,MAAAS,EAAA,MAAA,WAGAkR,GACAI,EAAA/P,KAAA2P,EAAA,KAAA,IAAAA,EAAA3R,MAAAS,EAAA,MAAA,OAAAT,MAAAS,EAAA,MAAA,UAGAoR,GACAE,EAAA/P,KAAA6P,EAAA,KAAA,IAAAA,EAAA7R,MAAAS,EAAA,MAAA,QAAAT,MAAAS,EAAA,MAAA,YAGAmR,IAAAL,GAAAC,GAAAG,GAAAE,IACAE,EAAA/P,KAAA4P,EAAA,KAAA,IAAAA,EAAA5R,MAAAS,EAAA,MAAA,UAAAT,MAAAS,EAAA,MAAA,cAGA6Q,KAAAC,GAAAC,GAAAG,GAAAE,GAAAD,IACAG,EAAA/P,KAAAsP,EAAA,KAAA,IAAAA,EAAAtR,MAAAS,EAAA,MAAA,UAAAT,MAAAS,EAAA,MAAA,aAGAsR,EAAAxQ,KAAA,OAUAyQ,YAAA,SAAA9N,EAAA+N,GAEA/N,EAAAA,EAAAgO,UAAA,OAKA,IAHA,IACAC,EADAC,EAAA,GAGA5R,EAAA,EAAAA,EAAA0D,EAAA9C,OAAAZ,IACA2R,EAAAjO,EAAAqM,OAAA/P,GACA4R,GAAA,iBAAAH,GAAAjS,MAAAqS,cAAAF,IAAAF,GAAAjS,MAAAqS,cAAAF,GAAAA,EAGA,OAAAC,GAGAE,aAAA,SAAAlR,GAIA,IAFA,IAAAmR,EAAA,GAEA/R,EAAA,EAAAA,EAAAY,EAAAZ,IACA+R,GAFA,iEAEAhC,OAAAkB,KAAAC,MAAA,GAAAD,KAAAe,WAEA,OAAAD,GASAE,gBAAA,SAAAC,GAGA,IAFA,IAAAC,EAAAlT,EAAA6H,SAAAoF,cAAA,OAAAkG,SAAA,UAEApS,EAAA,EAAAA,EAAAkS,EAAAtR,OAAAZ,IAAA,CACA,IAAAqS,EAAApT,EAAA6H,SAAAoF,cAAA,OACAmG,EAAAzD,SAAAuD,GACAE,EAAAhT,KAAA6S,EAAAlS,IAGA,OAAAmS,GAGAG,eAAA,SAAAjT,GACA,GAAAA,EAAA,CAKA,IAAAkT,EAAAtT,EAAA,cAEA,GAAAsT,EAAA3R,OAAA,CAIA,IAHA,IACAoG,EADAwL,EAAA,GAGAxS,EAAA,EAAAA,EAAAuS,EAAA3R,OAAAZ,IACAgH,EAAAuL,EAAAE,GAAAzS,GAAAwO,KAAA,QAAAlP,QAAA,KAAA,SACAkT,EAAAhR,KAAAhC,MAAAoE,YAAAoD,IAGA,IAAA0L,EAAA,IAAAlO,OAAA,yBAAAgO,EAAAzR,KAAA,KAAA,mBAAA,KAEA1B,EAAAA,EAAAC,QAAAoT,EAAA,IAGAzT,EAAA,QAAA0T,OAAAtT,KAGAuT,eAAA,SAAAvT,GACA,GAAAA,EAAA,CAKA,IAAAwT,EAAA5T,EAAA,eAEA,GAAA4T,EAAAjS,OAAA,CAIA,IAHA,IACAkS,EADAC,EAAA,GAGA/S,EAAA,EAAAA,EAAA6S,EAAAjS,OAAAZ,IACA8S,EAAAD,EAAAJ,GAAAzS,GAAAwO,KAAA,OAAAlP,QAAA,KAAA,SACAyT,EAAAvR,KAAAhC,MAAAoE,YAAAkP,IAGA,IAAAJ,EAAA,IAAAlO,OAAA,0BAAAuO,EAAAhS,KAAA,KAAA,mBAAA,KAEA1B,EAAAA,EAAAC,QAAAoT,EAAA,IAGAhN,QAAAsN,KAAAL,OAAAtT,KAQA4T,eAAA,SAAAC,GACAjU,EAAA,QAAAiU,GAAAC,OACAlU,EAAA,QAAAiU,GAAAE,WACAnU,EAAA,mBAAAiU,GAAAG,iBACApU,EAAA,eAAAiU,GAAAI,cACArU,EAAA,eAAAiU,GAAAK,cACAtU,EAAA,YAAAiU,GAAAM,WACAvU,EAAA,cAAAiU,GAAAO,aACAxU,EAAA,WAAAiU,GAAAQ,UACAzU,EAAA,mBAAAiU,GAAAS,WAIA1U,EAAA,IAAAiU,GAAAU,MAAA,WACAtT,KAAAgQ,SAAA1P,QAAAN,KAAAgQ,WAAAvJ,SAAAuJ,eAAA,IAAArR,EAAAqB,MAAAkO,KAAA,WACAvP,EAAAqB,MAAAkO,KAAA,MAAA,YAAAA,KAAA,SAAA,cAKAqF,qBAAA,GACAC,6BAAA,GACAC,sBAAA,GAQAC,0BAAA,SAAAC,EAAAC,GACA,QAAA,IAAA5T,KAAAuT,qBAAAI,GACA,KAAA,4EAAAA,EAAA,KAGA3T,KAAAuT,qBAAAI,GAAAC,GASAC,kCAAA,SAAAF,EAAAC,GACA,QAAA,IAAA5T,KAAAwT,6BAAAG,GACA,KAAA,qFAAAA,EAAA,KAGA3T,KAAAwT,6BAAAG,GAAAC,GASAE,2BAAA,SAAAH,EAAAC,GACA,QAAA,IAAA5T,KAAAyT,sBAAAE,GACA,KAAA,6EAAAA,EAAA,KAGA3T,KAAAyT,sBAAAE,GAAAC,GAWAG,mBAAA,SAAAJ,EAAAf,EAAAoB,GASA,OAAA,SANA,IAAAhU,KAAAuT,qBAAAI,GACA3T,KAAAuT,qBAAAI,GAEAzU,MAAA+U,kBAGAN,EAAAf,EAAAoB,IASAE,2BAAA,SAAAP,EAAAK,GASA,OAAA,SANA,IAAAhU,KAAAwT,6BAAAG,GACA3T,KAAAwT,6BAAAG,GAEAzU,MAAAiV,0BAGAR,EAAAK,IAUAI,oBAAA,SAAAT,EAAAU,EAAAL,GAqBA,YAnBA,IAAAA,GAAArV,EAAAoG,cAAAsP,IAEAL,EAAAK,EACAA,EAAA,MACA,iBAAAL,IACAA,EAAA,IAGAA,EAAAL,cACAK,EAAAL,YAAAA,GAUA,SANA,IAAA3T,KAAAyT,sBAAAE,GACA3T,KAAAyT,sBAAAE,GAEAzU,MAAAoV,mBAGAD,EAAAL,IASAO,gBAAA,SAAAjV,EAAAkV,GAGA,OAFAlV,EAAA,SAAAJ,MAAAuV,UAAA,IAAAnV,EAEA,oBAAAoV,mBAAA,IAAAA,aAAApV,GACA8H,KAAAuN,MAAAD,aAAApV,IAEAkV,GAUAI,gBAAA,SAAAtV,EAAA6F,GACA,GAAA,oBAAAuP,aAAA,CACApV,EAAA,SAAAJ,MAAAuV,UAAA,IAAAnV,EAKA,IACAoV,aAAApV,GAAA8H,KAAAC,UAAAlC,GACA,MAAAuF,OASAmK,mBAAA,SAAAvV,GACA,oBAAAoV,cACAA,aAAAI,WAAA,SAAA5V,MAAAuV,aAAAnV,MAQAyV,UAAA,SAAA9P,GAEA,OAAAuB,SAAAwO,OAAAhW,QAAA,IAAAkF,OAAA,yBAAAhF,MAAAuV,aAAAxP,gCAAA,OAiBAgQ,UAAA,SAAAhQ,EAAAE,EAAA+B,GACAA,EAAAvI,EAAAM,OAAA,GAAAe,KAAAkV,qBAAAhO,GACA,IAAA8N,EAAA,SAAA9V,MAAAuV,aAAAxP,KAAAxB,mBAAA0B,KACA+B,EAAAtC,OACAoQ,GAAA,SAAA9N,EAAAtC,MAEAsC,EAAAiO,SACAH,GAAA,WAAA9N,EAAAiO,QAEAjO,EAAAkO,OACAJ,GAAA,uBAAA9N,EAAAkO,OACAlO,EAAAmO,UACAL,GAAA,YAAA9N,EAAAmO,QAAAC,eAEApO,EAAAqO,SACAP,GAAA,WAEAxO,SAAAwO,OAAAA,GAOAQ,aAAA,SAAAvQ,GACAjF,KAAAiV,UAAAhQ,EAAA,GAAA,IAAA1C,KAAA,yBASAkT,eAAA,SAAApB,GACA,IAAAqB,EAAA/W,EAAA0V,GAMA,OAJAqB,EAAAC,SAAA,aACAD,EAAAA,EAAAE,KAAA,mBAGA,CACAC,GAAAH,EAAA1O,KAAA,MACA8O,OAAAJ,EAAA1O,KAAA,WACA+O,MAAAL,EAAA1O,KAAA,SACAmE,OAAAuK,EAAA1O,KAAA,UACA1B,IAAAoQ,EAAA1O,KAAA,OACAgP,SAAAN,EAAAC,SAAA,YACAD,SAAAA,IAUAO,eAAA,SAAA5B,EAAA6B,GACA,IAAAR,EAAA/W,EAAA0V,GAMA,GAJA,UAAA6B,GAAA,UAAAA,IACAA,EAAA,UAGAR,EAAAC,SAAAO,GAAA,CAIA,IAAAC,EAAA,UAAAD,EAAA,QAAA,QAMA,GAJAR,EACA5D,SAAAoE,GACAE,YAAAD,GAEAT,EAAAC,SAAA,YAAA,CACA,IAAAU,EAAAX,EAAAE,KAAA,yBAEAU,EAAA3X,EAAA,SAAA,CACA4X,OAFA,UAAAL,EAAA,KAAA,OAEA,KACAM,OAAAH,EAAAnI,KAAA,WAAAmI,EAAAnI,KAAA,mBAGAmI,EAAAI,YAAAH,GAEAI,YAAA,CACAC,SAAA,CAAAL,EAAA,SAgBAM,WAAA,SAAA3I,EAAA/G,GAKA,QAJA,IAAAA,IACAA,EAAA,KAGAA,EAAA2P,SAAAA,QAAA3P,EAAA2P,SAAA,CAsBA,GAlBA3P,EAAAH,QACApI,EAAA,WAAA,CACA4C,KAAA,SACA0D,KAAA,SACAX,IAAA4C,EAAAH,SAEAuH,SAAAL,GAGA/G,EAAA4P,UACAnY,EAAA,WAAA,CACA4C,KAAA,SACA0D,KAAA,WACAX,IAAA4C,EAAA4P,WAEAxI,SAAAL,GAGA/G,EAAApH,OACA,IAAA,IAAAmF,KAAAiC,EAAApH,OAAA,CACA,IAAAqF,EAAA+B,EAAApH,OAAAmF,GACAtG,EAAA,WAAA,CACA4C,KAAA,SACA0D,KAAAA,EACAX,IAAAa,IAEAmJ,SAAAL,GAIA/G,EAAA6P,cACA/W,KAAA4U,gBAAA,UAAA/I,OAAAmL,SAGA/I,EAAAgJ,QAAAtY,EAAAM,OAAA,CAAAsC,KAAA,UAAA2F,EAAAF,WAQArI,EAAAM,OAAAN,EAAAuY,GACA,CACAC,YAAA,SAAAxW,EAAAyW,EAAAC,EAAAC,GACA,MAAA,QAAApY,MAAAqY,YACAvX,KAAAwX,SAAA,CAAAC,KAAA9W,GAAAyW,EAAAC,EAAAC,GAEAtX,KAAAwX,SAAA,CAAAE,MAAA/W,GAAAyW,EAAAC,EAAAC,IAIAK,aAAA,SAAAhX,EAAAyW,EAAAC,EAAAC,GACA,MAAA,QAAApY,MAAAqY,YACAvX,KAAAwX,SAAA,CAAAE,MAAA/W,GAAAyW,EAAAC,EAAAC,GAEAtX,KAAAwX,SAAA,CAAAC,KAAA9W,GAAAyW,EAAAC,EAAAC,IAOAM,QAAA,WACA,OAAA5X,KAAAsT,MAAA,WACA,IAAAuE,EAAAlZ,EAAAqB,MACA6X,EAAA/F,SAAA,YAEA+F,EAAA7Q,KAAA,gBACA6Q,EAAAC,WAAA,gBAQAC,OAAA,WACA,OAAA/X,KAAAsT,MAAA,WACA,IAAAuE,EAAAlZ,EAAAqB,MACA6X,EAAAzB,YAAA,YAEAyB,EAAA7Q,KAAA,gBACA6Q,EAAA3J,KAAA,WAAA,SAQA2E,KAAA,WACA,OAAA7S,KAAAsT,MAAA,WACA,IAAAV,EAAAjU,EAAAqB,MACAgU,EAAA,GAEApB,EAAA5L,KAAA,mBACAgN,EAAAgE,aAAApF,EAAA5L,KAAA,kBAEA4L,EAAA5L,KAAA,UACAgN,EAAAiE,KAAA/V,SAAA0Q,EAAA5L,KAAA,UAEA4L,EAAA5L,KAAA,cACAgN,EAAAkE,QAAAhW,SAAA0Q,EAAA5L,KAAA,cAEA4L,EAAA5L,KAAA,mBACAgN,EAAAmE,YAAAjW,SAAA0Q,EAAA5L,KAAA,mBAEA4L,EAAA5L,KAAA,UACAgN,EAAAoE,KAAAxF,EAAA5L,KAAA,SAEA4L,EAAA5L,KAAA,eACAgN,EAAAqE,SAAAzF,EAAA5L,KAAA,cAEA4L,EAAA5L,KAAA,eACAgN,EAAAsE,SAAA1F,EAAA5L,KAAA,cAEA4L,EAAA5L,KAAA,kBACAgN,EAAAuE,aAAA3F,EAAA5L,KAAA,iBAGA,IAAA9H,MAAAsZ,KAAAxY,KAAAgU,OAIAlB,SAAA,WACA,OAAA9S,KAAAsT,MAAA,WACA,IAAApU,MAAAuZ,SAAAzY,UAOA+S,eAAA,WACA,OAAA/S,KAAAsT,MAAA,WACA3U,EAAAqI,KAAAhH,KAAA,mBACA,IAAAoF,QAAAsT,eAAA1Y,UAQAgT,YAAA,WACA,OAAAhT,KAAAsT,MAAA,WACA3U,EAAAqI,KAAAhH,KAAA,gBACA,IAAAd,MAAAyZ,YAAA3Y,UAKAiT,YAAA,SAAAe,EAAA4E,EAAAC,GAEA,MAAA,aAAA7E,GACA,iBAAA4E,GACA5E,EAAA,IACA4E,GAAAC,EAEA7E,EAAA4E,EAGA5Y,KAAAsT,MAAA,WACA,IAAA7T,EAAAd,EAAAqI,KAAAhH,KAAA,eACAP,GACAA,EAAAqZ,YAAA9E,QAIArV,EAAAoG,cAAAiP,KACAA,EAAA,IAGAhU,KAAAsT,MAAA,WACA,IAAAyF,EAAApa,EAAAM,OAAA,GAAA+U,GAEA5O,QAAA4T,QAAAhZ,KAAA,gBACA+Y,EAAA5T,MAAAxG,EAAAqB,MAAAkO,KAAA,eAGA9I,QAAA4T,QAAAhZ,KAAA,8BACA+Y,EAAAE,mBAAAta,EAAAqB,MAAAkO,KAAA,6BAGAvP,EAAAqI,KAAAhH,KAAA,gBACA,IAAAd,MAAAga,YAAAlZ,KAAA+Y,QAMA7F,SAAA,WACA,OAAAlT,KAAAsT,MAAA,WACA3U,EAAAqI,KAAAhH,KAAA,aACA,IAAAoF,QAAA+T,SAAAnZ,UAKAmT,WAAA,WAEA,OAAAnT,KAAAoZ,GAAA,SAAA,SAAAC,GACA,IAAAC,EAAA3a,EAAA0a,EAAAE,eACAzZ,EAAAwZ,EAAAtS,KAAA,WAAA,GACAsS,EAAAtS,KAAA,WACAlH,EAAAwZ,EAAAtS,KAAA,UAAAsS,EAAAtS,KAAA,UAGA,IAAAwS,EAAAF,EAAAtS,KAAA,QAAAsS,EAAAtS,KAAA,QAAAwS,QAAAF,EACArL,EAAAuL,EAAAtL,KAAA,aAAAvP,EAAA,IAAA6a,EAAAtL,KAAA,cAAAsL,EAAAC,QAAA,QAEAva,MAAA0X,WAAA3I,EAAA,CACA4I,QAAAyC,EAAAtS,KAAA,WACAD,OAAAuS,EAAAtS,KAAA,UACA8P,SAAAwC,EAAAtS,KAAA,YACAlH,OAAAA,EACAkH,KAAA,CACA0S,cAAAJ,SAMAlG,QAAA,WACA,OAAApT,KAAAsT,MAAA,WACA,IAAAgG,EAAA3a,EAAAqB,MAEA,IAAAsZ,EAAAtS,KAAA,YAAAsS,EAAAK,OAAAhE,SAAA,QAAA,CACA,IAAA3B,EAAA,GAEAsF,EAAAtS,KAAA,iBACAgN,EAAA4F,WAAAN,EAAAtS,KAAA,gBAGA,IAAA5B,QAAAyU,QAAAP,EAAAtF,QAKAX,SAAA,WACA,OAAArT,KAAAsT,MAAA,WACA,IAAAwG,EAAAnb,EAAAqB,MACA+Z,EAAAD,EAAAlE,KAAA,mCACAoE,EAAA,KACA,IAAAC,GAAA,EACA,IAAA,IAAAva,EAAA,EAAAA,EAAAqa,EAAAzZ,OAAAZ,IACA,GAAAqa,EAAA5H,GAAAzS,GAAA4E,MAAA,CACA2V,GAAA,EACA,MAGA,GAAAA,GACA,IAAAH,EAAAI,SAAA,cAAA5Z,OAAA,CACA,IAAAgZ,EAAA3a,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,YACAC,MAAAlb,MAAAS,EAAA,MAAA,SACA0a,aAAAnb,MAAAS,EAAA,MAAA,WAEA2O,SAAAwL,GACAV,GAAA,QAAA,KACA,IAAA,IAAA1Z,EAAA,EAAAA,EAAAqa,EAAAzZ,OAAAZ,IACAqa,EAAA5H,GAAAzS,GAAA4E,IAAA,IAEAgV,EAAAgB,SACAP,EAAAQ,QAAAC,gBAIAV,EAAAI,SAAA,cAAAI,UAGAP,EAAAX,GAAA,SAAAY,GACAA,UAKA5U,QAAAqV,KAAAC,OAAA,WACAxb,MAAAyT,oBC5gEAzT,MAAAoV,kBAAAlP,QAAAuV,KAAA1b,OAAA,CACAyW,SAAA,KACAkF,UAAA,KACA9E,OAAA,KACAtJ,WAAA,KACAqO,YAAA,KAEA5M,MAAA,KACA6M,iBAAA,KACAC,WAAA,KACAC,SAAA,KACAC,SAAA,KAEAC,YAAA,KACAC,aAAA,KAEAC,IAAA,KAEAC,KAAA,SAAAhH,EAAAL,QAEA,IAAAA,GAAArV,EAAAoG,cAAAsP,KAEAL,EAAAK,EACAA,EAAA,MAGArU,KAAA0V,SAAA/W,EAAA0V,GACArU,KAAA8Y,YAAA9E,EAAA9U,MAAAoV,kBAAAgH,UAEAtb,KAAAub,WAGAC,oBAAA,SAAAvW,EAAAE,GACAnF,KAAAgU,SAAAyH,aACAzb,KAAAgU,SAAAyH,WAAA,IAGA,OAAAtW,SACAnF,KAAAgU,SAAAyH,WAAAxW,GAEAjF,KAAAgU,SAAAyH,WAAAxW,GAAAE,GAIAuW,YAAA,WACA,IAAA1U,EAAArI,EAAAM,OAAA,GAAAe,KAAAgU,SAAAlU,QA0BA,OAxBAE,KAAAgU,SAAA8B,OACA9O,EAAA8O,OAAA9V,KAAAgU,SAAA8B,OACA9V,KAAA0V,UAAA1V,KAAA0V,SAAA1O,KAAA,aACAA,EAAA8O,OAAA9V,KAAA0V,SAAA1O,KAAA,YAGAhH,KAAAgU,SAAA4G,UACA5T,EAAA4T,UAAA5a,KAAAgU,SAAA4G,UACA5a,KAAA0V,UAAA1V,KAAA0V,SAAA1O,KAAA,QACAA,EAAA4T,UAAA5a,KAAA0V,SAAA1O,KAAA,OAGAhH,KAAAgU,SAAAL,cACA3M,EAAA2M,YAAA3T,KAAAgU,SAAAL,aAGA3T,KAAAgU,SAAAyH,aACAzU,EAAAyU,WAAAzb,KAAAgU,SAAAyH,YAGAzb,KAAAgU,SAAA2H,cACA3U,EAAA2U,YAAA,GAGA3U,GAGAuU,QAAA,WACAvb,KAAA4b,iBACA,IAAA5U,EAAAhH,KAAA0b,cACA1U,EAAA6U,aAAA3c,MAAA4c,aAAA9b,KAAAgU,SAAA+H,iBACA7c,MAAA4H,kBAAA,2BAAAE,EAAAhH,KAAAgc,QAAAC,KAAAjc,QAGAgc,QAAA,SAAAvR,EAAA5C,GAGA,GAFA7H,KAAAkc,eAEA,YAAArU,EAAA,CACA,IAAAsU,EAAAxd,IAEA,GAAA8L,EAAA2R,MAAA,CACA,IAAAC,EAAA1d,EAAA,6BAEA,GAAA,IAAA8L,EAAA2R,MAAA9b,OACA3B,EAAA,QAAA,CAAA0E,KAAAoH,EAAA2R,MAAA,GAAAnX,OAAAqJ,SAAA+N,OACA,CACA,IAAAC,EAAA3d,EAAA,yBAAA2P,SAAA+N,GAEArc,KAAAkb,YAAAvc,EAAA,aAAA2P,SAAAgO,GACAtc,KAAAmb,aAAAxc,EAAA,iCAAA2P,SAAA+N,GAEA,IAAA,IAAA3c,EAAA,EAAAA,EAAA+K,EAAA2R,MAAA9b,OAAAZ,IAAA,CACA,IAAA6c,EAAA9R,EAAA2R,MAAA1c,GACAf,EAAA,kBAAA4d,EAAA1G,GAAA,KAAA0G,EAAA1G,IAAApL,EAAAqL,OAAA,uBAAA,IAAA,IAAAyG,EAAAtX,KAAA,aAAAqJ,SAAAtO,KAAAkb,aAGAlb,KAAAwc,YAAAxc,KAAAkb,YAAA,SAAA,cAGAiB,EAAAA,EAAAM,IAAAJ,GAGArc,KAAAiO,MAAAtP,EAAA,UACAqB,KAAA8a,iBAAAnc,EAAA,yBAAA2P,SAAAtO,KAAAiO,OAEAjO,KAAA0c,WAAAjS,GAAA,GAEAzK,KAAA2c,aAAA3c,KAAAiO,OAEA,IAAA2O,EAAAje,EAAA,6BAAA2P,SAAAtO,KAAAiO,OACA4O,EAAAle,EAAA,gCAAA2P,SAAAsO,GAeA,GAdA5c,KAAA+a,WAAApc,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,MACA9W,KAAAnE,MAAAS,EAAA,MAAA,YACA2O,SAAAuO,GACA7c,KAAAgb,SAAArc,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,aACA9W,KAAAnE,MAAAS,EAAA,MAAA,UACA2O,SAAAuO,GACA7c,KAAAib,SAAAtc,EAAA,iCAAA2P,SAAAuO,GAEAV,EAAAA,EAAAM,IAAAzc,KAAAiO,OAEAjO,KAAAob,IAyBApb,KAAAob,IAAA0B,WAAAX,GACAnc,KAAAob,IAAA2B,4BA1BA,CACA,IAAAC,EAAAhd,KAAAgU,SAAAgJ,YAAAhd,KAAA0V,SAEA1V,KAAAob,IAAA,IAAAhW,QAAA6X,IAAAD,EAAAb,EAAA,CACAe,UAAA,qBACAC,gBAAA,EACAC,WAAA,EACAC,kBAAA,EACAC,OAAAtd,KAAAud,UAAAtB,KAAAjc,MACAwd,OAAAxd,KAAAyd,UAAAxB,KAAAjc,MACA0d,SAAA1d,KAAA2d,YAAA1B,KAAAjc,QAGAoF,QAAAwY,gBAAAC,iBAAAzY,QAAA0Y,QAAA9d,KAAA+d,cAAA9B,KAAAjc,OACAA,KAAAob,IAAAoB,YAAAxc,KAAAob,IAAA4C,OAAA,QAAAhe,KAAA+d,cAAA9B,KAAAjc,OAEAA,KAAAob,IAAA6C,KAAAjX,KAAA,gBAAAhH,MAGAA,KAAAob,IAAA8C,MAAAhQ,KAAA,aAAA,IAEAlO,KAAAob,IAAAhC,GAAA,OAAA,YACApZ,KAAAob,MAQAe,EAAAvG,KAAA,eAAAqB,QAAA,SAEAjX,KAAAwc,YAAAxc,KAAA+a,WAAA,SAAA,WACA/a,KAAAob,IAAA+C,YAKAC,WAAA,WACA,IAAApe,KAAAqe,WAAAxH,QAAA3X,MAAAS,EAAA,MAAA,sFAAA,CAKA,IAAA2e,EAAAte,KAAAkb,YAAA5W,MAEAga,GAAAte,KAAA8V,SAIA9V,KAAAmb,aAAA/E,YAAA,UAEApW,KAAAue,WAAA,CAAAzI,OAAAwI,GAAAzW,IACA7H,KAAAmb,aAAArJ,SAAA,UACA,YAAAjK,GAEA7H,KAAAkb,YAAA5W,IAAAtE,KAAA8V,gBAhBA9V,KAAAkb,YAAA5W,IAAAtE,KAAA8V,SAqBAyI,WAAA,SAAAvX,EAAAC,GACAD,EAAArI,EAAAM,OAAAe,KAAA0b,cAAA1U,GAEA9H,MAAA4H,kBAAA,2BAAAE,EAAA,CAAAyD,EAAA5C,KACA,YAAAA,GACA7H,KAAA0c,WAAAjS,GAAA,GAGAxD,GACAA,EAAAY,MAKA6U,WAAA,SAAAjS,EAAA+T,GACAxe,KAAA8V,OAAArL,EAAAqL,OACA9V,KAAA8a,iBAAA/b,KAAA0L,EAAA1L,OAEA,IAAAyf,IACAxe,KAAAwM,WAAA/B,EAAA+B,YAIA,IAAAiS,EAAAze,KAAA8a,iBAAAlF,KAAA,oCAEA,IAAA,IAAAlW,EAAA,EAAAA,EAAA+e,EAAAne,OAAAZ,IAAA,CACA,IAAAgf,EAAAD,EAAAtM,GAAAzS,GACAif,EAAAD,EAAAE,SAAA,YAAA1E,SAAA,SACAvb,EAAA,UAAA,CACAwb,MAAA,OACApb,KAAA2f,EAAAxE,WAAAnb,SACAuP,SAAAqQ,GACAD,EAAApE,SAGAlV,QAAAyZ,sBAAA,KACA3f,MAAA8S,eAAAvH,EAAAqU,UACA5f,MAAAoT,eAAA7H,EAAAsU,UACA7f,MAAAyT,eAAA3S,KAAA8a,kBAEA0D,IACAxe,KAAA6a,YAAA7a,KAAAob,IAAA8C,MAAAc,gBAKArB,YAAA,WACA,IAAAsB,EAAAjf,KAAAgU,SAAAiL,WAEA,GAAAtgB,EAAAY,QAAA0f,GACA,IAAA,IAAAvf,EAAA,EAAAA,EAAAuf,EAAA3e,OAAAZ,IACA,GAAAf,EAAAugB,WAAAD,EAAAvf,MAAAuf,EAAAvf,GAAAyf,OACA,OAAA,EAKAnf,KAAAib,SAAA7E,YAAA,UAEA,IAAApP,EAAArI,EAAAyC,MAAApB,KAAA0b,eAAA,IAAA1b,KAAAob,IAAA8C,MAAAc,YACAhY,EAAA9H,MAAAmN,cAAArM,KAAA6a,YAAA7T,EAAAhH,KAAAwM,YAEAtN,MAAA4H,kBAAA,wBAAAE,EAAA,CAAAyD,EAAA5C,KAGA,GAFA7H,KAAAib,SAAAnJ,SAAA,UAEA,YAAAjK,EACA,GAAA4C,EAAA9C,QAAA,CACA,GAAA3H,KAAA0V,UAAA1V,KAAA8V,QAAA9V,KAAA0V,SAAA1O,KAAA,WAAA,CAEA,IAAAoY,EAAApf,KAAA0V,SAAAE,KAAA,UACAyJ,EAAAD,EAAAxJ,KAAA,KAEAyJ,EAAA/e,QAAAmK,EAAA6U,WACAD,EAAAnR,KAAA,OAAAzD,EAAA6U,WACAD,EAAAhc,KAAAoH,EAAA8U,WAEAH,EAAA/b,KAAAoH,EAAA8U,UAIAvf,KAAAgU,SAAAL,aAAAzU,MAAAsgB,iBAAAxf,KAAAgU,SAAAL,cACAzU,MAAA8I,GAAAyX,cAAAvgB,MAAAS,EAAA,MAAA,gBAAA,CACA4B,KAAArC,MAAAsgB,iBAAAxf,KAAAgU,SAAAL,aAAA,MAIA3T,KAAA0f,WACA1f,KAAA2f,cAAAlV,QAEAzK,KAAA0c,WAAAjS,GAAA,GACArF,QAAAwa,MAAA5f,KAAAob,IAAA6C,SAMAI,QAAA,WACA,OAAAre,KAAAob,IAAA8C,MAAAc,cAAAhf,KAAA6a,aAGAkD,cAAA,SAAA1E,GACArZ,KAAAob,KAAApb,KAAAob,IAAAyE,UAIA7f,KAAAqe,YAAAxH,QAAA,yEACA7W,KAAA0f,aAIAA,SAAA,WACA1f,KAAAob,KAAApb,KAAAob,IAAAyE,UAIA7f,KAAAob,IAAA+C,cACAne,KAAAob,MAMAmC,UAAA,WACAnY,QAAAwY,gBAAAC,iBAAA,CACAiC,QAAA1a,QAAA2a,MACAC,MAAA,GACAhgB,KAAA2d,YAAA1B,KAAAjc,OACAA,KAAAgU,SAAAuJ,YACAvd,KAAAiX,QAAA,YAGAwG,UAAA,WACAzd,KAAAgU,SAAAyJ,YACAzd,KAAAiX,QAAA,YAGA2E,eAAA,WACA5b,KAAA0V,UACA1V,KAAA0V,SAAA5D,SAAA,WAGA9R,KAAAgU,SAAA4H,iBACA5b,KAAAiX,QAAA,iBAGAiF,aAAA,WACAlc,KAAA0V,UACA1V,KAAA0V,SAAAU,YAAA,WAGApW,KAAAgU,SAAAkI,eACAlc,KAAAiX,QAAA,eAGA0I,cAAA,SAAAlV,GACAzK,KAAAgU,SAAA2L,cAAAlV,GACAzK,KAAAiX,QAAA,cAAA,CACAxM,SAAAA,IAIAvL,MAAA8I,GAAAiY,YAGAtD,aAAA,SAAA1O,GACAjO,KAAAgU,SAAA2I,aAAA1O,KAEA,CACAqN,SAAA,CACA0B,WAAA,KACAjB,kBAAA,EACAnB,UAAA,KACAjH,YAAA,KACAmC,OAAA,KACA2F,WAAA,KACA3b,OAAA,KACA6b,aAAA,EACAuE,aAAA,KAEA3C,UAAA5e,EAAAwhB,KACA1C,UAAA9e,EAAAwhB,KACAvE,eAAAjd,EAAAwhB,KACAjE,aAAAvd,EAAAwhB,KACAxD,aAAAhe,EAAAwhB,KACAR,cAAAhhB,EAAAwhB,KAEAlB,WAAA,MC3XA/f,MAAA+U,iBAAA7O,QAAAuV,KAAA1b,OAAA,CACAmhB,aAAA,EACAzM,YAAA,KAEA0M,cAAA,KACAC,aAAA,KACAC,uBAAA,KAEAC,cAAA,KACAC,aAAA,KAEA7N,WAAA,KACA8N,MAAA,KACAC,aAAA,EAEAC,SAAA,KACAC,eAAA,KACAC,UAAA,KACAC,gBAAA,KACAC,QAAA,KACAC,aAAA,KACAC,gBAAA,KAEAC,qBAAA,KACAC,sBAAA,KAEAC,SAAA,KACAC,cAAA,KAEAC,QAAA,KACAC,WAAA,EACAC,WAAA,KACAC,SAAA,EACAC,QAAA,EACAC,gBAAA,KAEAC,eAAA,KACAC,qBAAA,KACAC,WAAA,KACA5W,OAAA,KAEA6W,aAAA,KACAC,SAAA,KACAnM,OAAA,KAEAoM,aAAA,KACAC,SAAA,KACAC,oBAAA,KACAC,oBAAA,KACAC,oBAAA,KACAC,wBAAA,KAEAC,UAAA,KACAC,sBAAA,KACAC,aAAA,KACAC,SAAA,KACAC,KAAA,KACAC,oBAAA,KACAC,cAAA,KACAC,gBAAA,KACAC,KAAA,EACAC,UAAA,KACAC,aAAA,KACAC,WAAA,KAEAC,QAAA,KACAC,gBAAA,KACAC,gBAAA,KACAC,oBAAA,KACAC,mBAAA,KACAC,uBAAA,EACAC,UAAA,KACAC,gBAAA,KACAC,uBAAA,KACAC,WAAA,KAEAC,sBAAA,EACAC,aAAA,KAKA1I,KAAA,SAAA1H,EAAAf,EAAAoB,GAgDA,GA/CAhU,KAAA2T,YAAAA,EACA3T,KAAA4S,WAAAA,EACA5S,KAAA8Y,YAAA9E,EAAA9U,MAAA+U,iBAAAqH,UAKAtb,KAAAqgB,cAAArgB,KAAAgkB,0BAEAhkB,KAAAsgB,aAAA,GAGAtgB,KAAAgU,SAAAiQ,YACAtlB,EAAAM,OAAAe,KAAAqgB,cAAAnhB,MAAAqV,gBAAAvU,KAAAgU,SAAAiQ,YAAA,IAIAjkB,KAAAugB,uBAAA,oBAAAvgB,KAAA2T,YAAA,IAAA3T,KAAAgU,SAAAkQ,QACAvlB,EAAAM,OAAAe,KAAAsgB,aAAAphB,MAAAqV,gBAAAvU,KAAAugB,uBAAA,KAKAvgB,KAAA0gB,MAAA1gB,KAAA4S,WAAAgD,KAAA,SACA5V,KAAAqhB,SAAArhB,KAAA4S,WAAAgD,KAAA5V,KAAAgU,SAAAmQ,iBACAnkB,KAAA6hB,eAAA7hB,KAAAqhB,SAAAzL,KAAA,wBACA5V,KAAA8hB,qBAAA9hB,KAAA6hB,eAAAuC,SACApkB,KAAAgiB,aAAAhiB,KAAA4S,WAAAgD,KAAA,sBACA5V,KAAAkiB,aAAAliB,KAAAqhB,SAAAzL,KAAA,sBACA5V,KAAAuhB,QAAAvhB,KAAAqhB,SAAAzL,KAAA,6BACA5V,KAAA4hB,gBAAA5hB,KAAAqhB,SAAAzL,KAAA,0BACA5V,KAAA4gB,SAAA5gB,KAAA4S,WAAAgD,KAAA,kBACA5V,KAAAmhB,qBAAAnhB,KAAA4gB,SAAAhL,KAAA,sBACA5V,KAAAwiB,UAAAxiB,KAAA4S,WAAAgD,KAAA,mBACA5V,KAAA8iB,cAAA9iB,KAAA4S,WAAAgD,KAAA,kBACA5V,KAAA+iB,gBAAA/iB,KAAA4S,WAAAgD,KAAA,oBACA5V,KAAAmjB,WAAAnjB,KAAA4S,WAAAgD,KAAA,eAGA5V,KAAAgU,SAAAqQ,cACArkB,KAAA4gB,SAAAzC,OACAxf,EAAA,kBAAAqB,KAAA4S,YAAAwD,YAAA,gBAMApW,KAAAskB,cAAA,CAqBA,GAhBAtkB,KAAAmhB,qBAAA7gB,QACAN,KAAAwc,YAAAxc,KAAAmhB,qBAAA,QAAA,+BAMAnhB,KAAA6hB,eAAAvhB,SACAN,KAAA+hB,WAAA/hB,KAAA6hB,eAAAzO,UAAApM,KAAA,WAAAud,KACAvkB,KAAA+hB,WAAA3I,GAAA,eAAApZ,KAAAwkB,oBAAAvI,KAAAjc,QAOAA,KAAAgiB,aAAA1hB,OAAA,CACAN,KAAAiiB,SAAAjiB,KAAAgiB,aAAA5O,UAAApM,KAAA,WAAAud,KAGA,IAAAE,EAAAzkB,KAAAiiB,SAAAyC,SAAAC,OAAA,cAeA,GAbAF,EAAAnkB,SACAmkB,EAAAzkB,KAAAiiB,SAAAyC,SAAAnK,SAGAkK,EAAAnkB,OACAN,KAAA4kB,SAAAH,EAAAzd,KAAA,YAGAhH,KAAAgU,SAAA6Q,SAAA,CAAAhP,GAAA,KAGA7V,KAAAiiB,SAAA7I,GAAA,eAAApZ,KAAA8kB,kBAAA7I,KAAAjc,OAEAA,KAAA8V,OAAA,CAEA,IAAAiP,EAAA/kB,KAAAgU,SAAA+Q,eAAA7lB,MAAA8I,GAAAgd,YAEA,GAAAD,GAAAA,GAAA/kB,KAAA8V,OAAA,CAEA,IAAAmP,EAAAjlB,KAAAiiB,SAAAyC,SAAAC,OAAA,kBAAAI,EAAA,YAEAE,EAAA3kB,QAEA2kB,EAAAhO,QAAA,gBAIAjX,KAAAgU,SAAA6Q,UAAA7kB,KAAAgU,SAAA6Q,SAAA/O,QAAA,MAAA9V,KAAAgU,SAAA6Q,SAAA/O,OACA9V,KAAA4kB,SAAA5kB,KAAAgU,SAAA6Q,SAAA/O,QAEA9V,KAAA4kB,SAAA1lB,MAAA4W,QAIA9V,KAAAgU,SAAA6Q,UAAA7kB,KAAAgU,SAAA6Q,SAAA/O,eACA9V,KAAAgU,SAAA6Q,SAAA/O,OAOA9V,KAAAwc,YAAAxc,KAAAuhB,QAAA,QAAA,MACAvhB,KAAAwhB,WAAAxhB,KAAAuhB,QAAAjd,MACAtE,KAAAklB,iBACAllB,KAAAwhB,YAAAxhB,KAAAuhB,QAAAjd,OACAtE,KAAAmlB,gBAGAnlB,KAAAwgB,eACA4E,aAAAplB,KAAAwgB,eAGAxgB,KAAAwgB,cAAA6E,WAAArlB,KAAAslB,kCAAArJ,KAAAjc,MAAA,OAIAA,KAAAwc,YAAAxc,KAAAuhB,QAAA,WAAAlI,IACAA,EAAAyG,UAAA1a,QAAAmgB,aACAlM,EAAAmM,iBAEAxlB,KAAAwgB,eACA4E,aAAAplB,KAAAwgB,eAGAxgB,KAAAslB,uCAKAtlB,KAAAwc,YAAAxc,KAAA4hB,gBAAA,QAAA,KACA5hB,KAAAuhB,QAAAjd,IAAA,IAEAtE,KAAAwgB,eACA4E,aAAAplB,KAAAwgB,eAGApb,QAAAqgB,iBAAA,IACAzlB,KAAAuhB,QAAAtK,QAAA,SAGAjX,KAAAmlB,gBAEAnlB,KAAAslB,sCAIAlgB,QAAAqgB,iBAAA,IACAzlB,KAAAuhB,QAAAtK,QAAA,SAOAjX,KAAAkiB,aAAA5hB,SACAN,KAAAmiB,SAAAniB,KAAAkiB,aAAA9O,UAAApM,KAAA,WAAAud,KACAvkB,KAAAoiB,oBAAApiB,KAAAmiB,SAAAvP,WAAAsH,SAAA,oBACAla,KAAAqiB,oBAAAriB,KAAAmiB,SAAAvP,WAAAsH,SAAA,oBAEAla,KAAAmiB,SAAA/I,GAAA,eAAApZ,KAAA0lB,kBAAAzJ,KAAAjc,QAMAA,KAAAwc,YAAAxc,KAAAmjB,WAAA,QAAA,kBAKAnjB,KAAAogB,aAAA,EACApgB,KAAA2lB,YAKA3lB,KAAA4lB,sBAMA5lB,KAAA6lB,QAAA3mB,MAAA4mB,SAEA9lB,KAAA+lB,gBAAA,KAGAJ,UAAA,WACA3lB,KAAAgmB,eAGAC,mBAAA,WAEA,OADAjmB,KAAA+jB,aAAAxa,MAAA2c,YAAAC,SACAnmB,KAAA+jB,aAAAxjB,OAGA6lB,gBAAA,WACApmB,KAAA+jB,eACA/jB,KAAA8jB,sBAAA,EACA9jB,KAAA+jB,aAAAsC,SACAjhB,QAAAyZ,sBAAA,KACA7e,KAAA8jB,sBAAA,MAKAwC,mBAAA,WACA,OAAAtmB,KAAA4gB,SAAAhL,KAAA,aAGA2Q,eACA,GAAAvmB,KAAAygB,aAIA,OAAAzgB,KAAAygB,aAAA+F,QAGAlC,YAAA,WACA,IAAAiC,EAAAvmB,KAAAymB,kBAAAzmB,KAAAsmB,sBAGA,OAAA,IAAAC,EAAAjmB,SAKAN,KAAAygB,eACAzgB,KAAAygB,aAAA,IAAArb,QAAAshB,OAAA1mB,KAAA4gB,SAAAhL,KAAA,OAAA,CACA+Q,OAAA,EACAC,YAAA,EACAC,UAAA,EACAC,kBAAA9mB,KAAA+mB,6BAAA9K,KAAAjc,SAIAA,KAAAihB,aAAA,GACAjhB,KAAAgnB,aAAAT,IAEA,IAGAX,oBAAA,WACA,IACA5E,EADAF,EAAA9gB,KAAAinB,sBAiBA,OAdAnG,IACAE,EAAAhhB,KAAAknB,eAAApG,IAGA,IAAA9gB,KAAAkhB,gBAAA9hB,MAAA4hB,KACAA,EAAA,OAIAF,GAAAE,IAEAA,EAAAhhB,KAAAkhB,gBAAA3G,SAGAva,KAAAmnB,aAAAnG,IAGAoG,eAAA,WACApnB,KAAAygB,aAAA4G,iBAEA,IAAAvnB,EAAA,CACAokB,QAAAlkB,KAAAgU,SAAAkQ,QACAvQ,YAAA3T,KAAA2T,aAGA3T,KAAAsnB,eAEApoB,MAAA6J,kBAAA,OAAA/I,KAAAgU,SAAAuT,qBAAA,CACAvgB,KAAAlH,IACA2J,KAAAgB,IACAzK,KAAAwnB,oBACAxnB,KAAAsmB,qBAAA7P,YAAAhM,EAAAzD,KAAAjI,MACAiB,KAAAskB,cACAtkB,KAAA4lB,wBACAlc,MAAA,KACA1J,KAAAwnB,oBACAxnB,KAAA8jB,sBACA5kB,MAAA8I,GAAAC,aAAA/I,MAAAS,EAAA,MAAA,gCAKA8nB,WAAA,SAAAzG,GACAhhB,KAAAygB,aAAAiH,SAAA1G,GACAhhB,KAAA2nB,iBAAA3G,GACAhhB,KAAAihB,aAAAD,EAAAha,KAAA,QAAAga,EAEAA,EAAAha,KAAA,sBAAA,IAAAhH,KAAAqgB,cAAAuH,gBAAA9mB,QAAAkgB,EAAAha,KAAA,SACAhH,KAAA6nB,cAAA7G,IAIA2G,iBAAA,SAAA3G,GAEAhhB,KAAA8nB,mBAAA9G,GAEA,IAAA+G,EAAA/nB,KAAAgoB,iBAAAhH,GAEA+G,EAAAznB,QACAN,KAAAwc,YAAAwE,EAAA,WAAA,yBACAhhB,KAAAwc,YAAAuL,EAAA,QAAA,4BACA/G,EAAAha,KAAA,oBAAA,IAEAga,EAAAha,KAAA,oBAAA,IAIAihB,aAAA,SAAAjH,GACAhhB,KAAAygB,aAAAyH,YAAAlH,GACAhhB,KAAA8nB,mBAAA9G,UACAhhB,KAAAihB,aAAAD,EAAAha,KAAA,SAGA8gB,mBAAA,SAAA9G,GACAA,EAAAha,KAAA,sBACAhH,KAAAmoB,eAAAnH,EAAA,YACAhhB,KAAAmoB,eAAAnoB,KAAAgoB,iBAAAhH,GAAA,UAGAA,EAAAoH,WAAA,qBAGApE,wBAAA,WACA,MAAA,CACAqE,eAAA,KACAT,gBAAA,KAIAX,oBAAA,WACA,GAAAjnB,KAAAgU,SAAAsU,cAAA,CAKA,IAJA,IAAAC,EAAAvoB,KAAAgU,SAAAsU,cAAAnnB,MAAA,KACAyD,EAAA,GAGAlF,EAAA,EAAAA,EAAA6oB,EAAAjoB,OAAAZ,IAAA,CACAkF,GAAA2jB,EAAA7oB,GACA,IAAAshB,EAAAhhB,KAAAknB,eAAAtiB,GAGA,IAAAoc,EACA,OAAAhhB,KAAAqgB,cAAAgI,eAGAroB,KAAA6nB,cAAA7G,GACApc,GAAA,IAMA,OAFA5E,KAAA4kB,SAAA5kB,KAAA8V,QAEA9V,KAAAgU,SAAAsU,cAGA,OAAAtoB,KAAAqgB,cAAAgI,gBAGAG,0BAAA,WACA,OAAAxoB,KAAAqgB,cAAAuH,iBAGA1C,eAAA,WAEAllB,KAAA4hB,gBAAAxL,YAAA,UAEApW,KAAAsiB,sBACAtiB,KAAAsiB,oBAAA3jB,EAAA,4BAAAO,MAAAS,EAAA,MAAA,SAAA,aACAK,KAAAmiB,SAAAsG,WAAAzoB,KAAAsiB,oBAAApI,aAGAla,KAAAsiB,oBAAAoG,UAAA1oB,KAAAoiB,qBAEApiB,KAAAwhB,WAAA,EAEAxhB,KAAA2oB,6BACA3oB,KAAA4oB,iBAAA,UAGAzD,cAAA,WAEAnlB,KAAA4hB,gBAAA9P,SAAA,UAEA9R,KAAAsiB,oBAAAuG,SAEA7oB,KAAAwhB,WAAA,EAEAxhB,KAAA2oB,8BAGAG,iBAAA,SAAAxpB,EAAA6F,GACA,iBAAA7F,EACAX,EAAAM,OAAAe,KAAAqgB,cAAA/gB,GAEAU,KAAAqgB,cAAA/gB,GAAA6F,EAGAnF,KAAA+oB,sBAGAA,mBAAA,WACA/oB,KAAAgU,SAAAiQ,YACA/kB,MAAA0V,gBAAA5U,KAAAgU,SAAAiQ,WAAAjkB,KAAAqgB,gBAIA2I,eAAA,SAAA7C,EAAA7mB,EAAAkV,GAMA,YALA,IAAAxU,KAAAsgB,aAAA6F,KAEAnmB,KAAAsgB,aAAA6F,GAAA,SAGA,IAAA7mB,EACAU,KAAAsgB,aAAA6F,QACA,IAAAnmB,KAAAsgB,aAAA6F,GAAA7mB,GACAU,KAAAsgB,aAAA6F,GAAA7mB,QAEA,IAAAkV,EAAAA,EAAA,MAIAyU,uBAAA,SAAA3pB,EAAAkV,GACA,OAAAxU,KAAAgpB,eAAAhpB,KAAAqgB,cAAAgI,eAAA/oB,EAAAkV,IAGA0U,wBAAA,SAAA5pB,EAAA6F,GACA,IAAAgkB,EAAAnpB,KAAAipB,yBAEA,iBAAA3pB,EACAX,EAAAM,OAAAkqB,EAAA7pB,GAEA6pB,EAAA7pB,GAAA6F,EAGAnF,KAAAsgB,aAAAtgB,KAAAqgB,cAAAgI,gBAAAc,EAGAjqB,MAAA0V,gBAAA5U,KAAAugB,uBAAAvgB,KAAAsgB,eAGA8I,+BAAA,WACA,IAAAlb,EAAAlO,KAAAqpB,2BAEA,UAAAnb,GACAlO,KAAAkpB,wBAAA,CACAI,MAAApb,EACAzB,KAAAzM,KAAAupB,8BAQA1D,QAAA,SAAA7C,GACA,GAAA,UAAAhjB,KAAAgU,SAAAkQ,QAAA,CAIAlB,EAAArS,KAAA6Y,IAAAxG,EAAA,GACAhjB,KAAAgjB,KAAAA,EAGA,IAAA1d,EAAAkB,SAAAC,SAAAC,KACA1H,QAAA,QAAA,IACAA,QAAA,IAAAkF,OAAA,IAAAhF,MAAAuqB,YAAAzqB,QAAA,sBAAA,QAAA,SAAA,IACAA,QAAA,OAAA,IAEA,IAAAgB,KAAAgjB,OACA,MAAA9jB,MAAAuqB,YAAA,KACAnkB,GAAA,KAEAA,GAAApG,MAAAuqB,YAAAzpB,KAAAgjB,MAGA0G,QAAAC,aAAA,GAAA,GAAArkB,KAGAskB,YAAA,WACA5pB,KAAAijB,UAAA,KACAjjB,KAAAkjB,aAAA,MAOA2G,cAAA,WACA,IAAAhF,EAAA,CACA/O,OAAA9V,KAAA8V,OACAtQ,OAAAxF,KAAAyhB,WACA3f,OAAA9B,KAAAgU,SAAA8V,WAAA9pB,KAAAgjB,KAAA,GACA+G,MAAA/pB,KAAAgU,SAAA8V,WAKA9pB,KAAAgU,SAAAgW,gBACAhqB,KAAA2hB,QAAA,UAAA3hB,KAAAgU,SAAAkQ,UAAAlkB,KAAAmL,UAEA0Z,EAAAlD,OAAA3hB,KAAA2hB,QAAA,KACAkD,EAAAoF,iBAAA,EACAjqB,KAAA2hB,SACAkD,EAAAqF,SAAA,IAGAlqB,KAAA0hB,UACAmD,EAAAnD,SAAA,GAGAtc,QAAA4T,QAAAhZ,KAAAghB,QAAA,0BACA6D,EAAA1Z,OAAAnL,KAAAmL,QAGAxM,EAAAM,OAAA4lB,EAAA7kB,KAAAgU,SAAA6Q,UAEA,IAAA/kB,EAAA,CACAokB,QAAAlkB,KAAAgU,SAAAkQ,QACAvQ,YAAA3T,KAAA2T,YACAwS,OAAAnmB,KAAAqgB,cAAAgI,eACAxD,SAAAA,EACAsF,mBAAAnqB,KAAAgU,SAAAmW,mBACAhB,UAAAxqB,EAAAM,OAAA,GAAAe,KAAAipB,0BACAmB,UAAApqB,KAAAqqB,mBAAA,EAAA,GAmBA,OAfAvqB,EAAAqpB,UAAAG,MAAAtpB,KAAAqpB,2BACAvpB,EAAAqpB,UAAA1c,KAAAzM,KAAAupB,2BAEA,cAAAvpB,KAAAqpB,kCACA,IAAArpB,KAAAqgB,cAAAiK,sBACAtqB,KAAAqgB,cAAAiK,oBAAA,IAEAxqB,EAAAwqB,oBAAAtqB,KAAAqgB,cAAAiK,qBAIAtqB,KAAAiX,QAAA,qBAAA,CACAnX,OAAAA,IAGAA,GAGAimB,eAAA,SAAAwE,GAEA,GAAAvqB,KAAAogB,YAAA,CAKApgB,KAAAomB,kBAEApmB,KAAAsnB,eAGAtnB,KAAA4iB,OACA5iB,KAAA4iB,KAAA4H,iBACAxqB,KAAA4iB,OAGA,IAAA2H,IACAvqB,KAAA6lB,QAAA,GACA7lB,KAAA4pB,eAGA,IAAA9pB,EAAAE,KAAA6pB,gBAEA3qB,MAAA6J,kBAAA,OAAA/I,KAAAgU,SAAAyW,qBAAA,CACAzjB,KAAAlH,EACA+J,YAAA7J,KAAAimB,uBACAxc,KAAAgB,IACAzK,KAAAwnB,qBACA,UAAAxnB,KAAAgU,SAAAkQ,QAAA9e,QAAAslB,iBAAA1qB,KAAA0gB,OAAAiK,UAAA,GACA3qB,KAAA4qB,YAAA9qB,EAAA2K,EAAAzD,QACA0C,MAAAgB,IACA1K,KAAAwnB,oBACAxnB,KAAA8jB,sBACA5kB,MAAA8I,GAAAC,aAAA/I,MAAAS,EAAA,MAAA,iCAKA2lB,kCAAA,WACAtlB,KAAAyhB,cAAAzhB,KAAAyhB,WAAAzhB,KAAAwhB,UAAAxhB,KAAAuhB,QAAAjd,MAAA,OACAtE,KAAA+lB,kBAIA8E,mBAAA,WAEA7qB,KAAAyjB,wBAMAzjB,KAAAqhB,SAAAyJ,IAAA,aAAA9qB,KAAAqhB,SAAA0J,UAGA/qB,KAAA4jB,uBAAA5jB,KAAAqhB,SAAAnH,WACAla,KAAA4jB,uBAAAiF,SAEA7oB,KAAA6jB,WAGA7jB,KAAA6jB,WAAAvV,SAAAtO,KAAAqhB,UAFArhB,KAAAgrB,kBAKAhrB,KAAAyjB,uBAAA,IAGAwH,aAAA,SAAAlkB,EAAAmkB,GAEA,IAAAC,EAAAnrB,KAAA4iB,KAAAwI,wBAGA,GAAA,IAFAD,EAAA7qB,SAMA,iBAAAyG,IACAA,EAAA/G,KAAAqrB,YAAAtkB,KAGAA,EAAA8P,SAAAA,QAAA9P,EAAA8P,UAAA,CAKA7W,KAAAomB,kBAGA,IAAAkF,EAAAtrB,KAAA6pB,gBAEAqB,EAAAA,EAAAhsB,MAAAyO,gBAAAud,GAAA,GACA,IAAAprB,EAAAnB,EAAAM,OAAAqsB,EAAAvkB,EAAAiN,UAAA,GAAAkX,EAAA,CACAK,cAAAxkB,EAAAxF,KACAiqB,WAAAL,IAIAnrB,KAAAsnB,eACAtnB,KAAA6iB,oBAAAsI,EAEApkB,EAAAiF,UACA9M,MAAA0H,gBACA9G,EAAAZ,MAAA0H,eAAA1H,MAAA2H,gBAEA3H,MAAA2L,gBAAA,OAAA3L,MAAAmH,aAAArG,KAAAgU,SAAAyX,qBAAA3rB,GAAA2J,KAAAgB,IACAzK,KAAAwnB,sBACA9d,MAAAgB,IACA1K,KAAAwnB,uBAGAtoB,MAAA6J,kBAAA,OAAA/I,KAAAgU,SAAAyX,oBAAA,CACAzkB,KAAAlH,EACA+J,YAAA7J,KAAAimB,uBACAxc,KAAAgB,IACAzK,KAAAwnB,oBACA/c,EAAAzD,KAAAW,SAEA3H,KAAA4pB,cACA5pB,KAAA4qB,YAAAU,EAAA7gB,EAAAzD,MAEAyD,EAAAzD,KAAAnH,SACAX,MAAA8I,GAAAyX,cAAAhV,EAAAzD,KAAAnH,SAGAG,KAAA0rB,YAAA3kB,EAAAjH,IAEAZ,MAAA8I,GAAAC,aAAAwC,EAAAzD,KAAAnH,WAEA6J,MAAA,KACA1J,KAAAwnB,wBAKA6D,YAAA,SAAAM,GACA,IAAA,IAAAjsB,EAAA,EAAAA,EAAAM,KAAAojB,QAAA9iB,OAAAZ,IACA,GAAAM,KAAAojB,QAAA1jB,GAAA6B,OAAAoqB,EACA,OAAA3rB,KAAAojB,QAAA1jB,GAGA,KAAA,2BAAAisB,GAGAD,YAAA,SAAA3kB,EAAAjH,GAEAZ,MAAA8I,GAAAiY,WAEAjgB,KAAA4rB,cAAA7kB,EAAAjH,IAGA+rB,mBAAA,WAEA7rB,KAAAyjB,wBAIAzjB,KAAA4jB,uBAAAtV,SAAAtO,KAAAqhB,UACArhB,KAAA6jB,WAAAgF,SAIA7oB,KAAAqhB,SAAAyJ,IAAA,aAAA,IAEA9qB,KAAAyjB,uBAAA,IAGAqI,qBAAA,WAEA,GAAA9rB,KAAAojB,QAAA,CACA,IAAA2I,EAAA/rB,KAAA4iB,KAAAoJ,sBAAA1rB,OAEA,IAAAyrB,GACAA,IAAA/rB,KAAA4iB,KAAAqJ,qBAAA3rB,QACAN,KAAAwjB,mBAAApN,YAAA,iBACApW,KAAAwjB,mBAAA1R,SAAA,WACA9R,KAAAujB,oBAAArV,KAAA,eAAA,UAEAlO,KAAAwjB,mBAAA1R,SAAA,iBACA9R,KAAAwjB,mBAAApN,YAAA,WACApW,KAAAujB,oBAAArV,KAAA,eAAA,UAGAlO,KAAA6qB,uBAEA7qB,KAAAwjB,mBAAApN,YAAA,yBACApW,KAAAujB,oBAAArV,KAAA,eAAA,SACAlO,KAAA6rB,wBAKAG,oBAAA,WACA,OAAAhsB,KAAA4iB,KAAA5iB,KAAA4iB,KAAAoJ,sBAAArtB,KAGAysB,sBAAA,WACA,OAAAprB,KAAA4iB,KAAA5iB,KAAA4iB,KAAAwI,wBAAA,IAGAc,UAAA,SAAA/gB,GAEA,IAAAsZ,EAAAzkB,KAAA+hB,WAAA2C,SAAAC,OAAA,kBAAAxZ,EAAA,YAEAsZ,EAAAnkB,QACAN,KAAA+hB,WAAAoK,aAAA1H,EAAA,KAIA2H,uBAAA,SAAAle,GACA,OAAAlO,KAAAoiB,oBAAAxM,KAAA,gBAAA1H,EAAA,aAGAmb,yBAAA,WACA,OAAArpB,KAAAoiB,oBAAAxM,KAAA,eAAA5O,KAAA,SAGA4hB,iBAAA,SAAA1a,GAEA,IAAAuW,EAAAzkB,KAAAosB,uBAAAle,GAEA,GAAAuW,EAAAnkB,OAAA,CACAN,KAAAoiB,oBAAAxM,KAAA,SAAAQ,YAAA,OACAqO,EAAA3S,SAAA,OAEA,IAAAiE,EAAA0O,EAAAphB,OACArD,KAAAkiB,aAAAhU,KAAA,QAAAhP,MAAAS,EAAA,MAAA,sBAAA,CAAA0sB,UAAAtW,KACA/V,KAAAkiB,aAAA7e,KAAA0S,GAEA,UAAA7H,EACAlO,KAAAssB,iBAAA,QAEAtsB,KAAAssB,iBAAA7H,EAAAzd,KAAA,gBAAA,OAGA,cAAAkH,EACAlO,KAAAqiB,oBAAAzM,KAAA,KAAA9D,SAAA,YAEA9R,KAAAqiB,oBAAAzM,KAAA,KAAAQ,YAAA,cAKAmW,uBAAA,SAAAC,GACA,OAAAxsB,KAAAqiB,oBAAAzM,KAAA,cAAA4W,EAAA,YAGAjD,yBAAA,WACA,OAAAvpB,KAAAqiB,oBAAAzM,KAAA,eAAA5O,KAAA,QAGAylB,oBAAA,WACA,OAAAzsB,KAAAipB,uBAAA,SAAA,SAGAqD,iBAAA,SAAAE,GACA,SAAAA,IACAA,EAAA,OAGAxsB,KAAAkiB,aAAAhU,KAAA,YAAAse,GACAxsB,KAAAqiB,oBAAAzM,KAAA,SAAAQ,YAAA,OACApW,KAAAusB,uBAAAC,GAAA1a,SAAA,QAGAoV,eAAA,SAAA5nB,GACA,YAAA,IAAAU,KAAAihB,aAAA3hB,GACA,KAGAU,KAAAihB,aAAA3hB,IAGA6nB,aAAA,SAAAnG,GACA,IAAAA,IAAAA,EAAA1gB,OACA,OAAA,EAGA,GAAAN,KAAAghB,SAAAhhB,KAAAghB,QAAA,IAAAhhB,KAAAghB,QAAA,KAAAA,EAAA,IAAAA,EAAAha,KAAA,SAAAhH,KAAA8gB,UACA,OAAA,EAIA9gB,KAAA6rB,qBAEA7rB,KAAAghB,QAAAA,EACAhhB,KAAA8gB,UAAAE,EAAAha,KAAA,OACAhH,KAAA8oB,iBAAA,iBAAA9oB,KAAA8gB,WACA9gB,KAAAygB,aAAAiM,WAAA1L,GAEA9hB,MAAA8I,GAAA2kB,yBAEA3sB,KAAAwhB,YAEAxhB,KAAAyhB,WAAA,KACAzhB,KAAAuhB,QAAAjd,IAAA,IACAtE,KAAAmlB,iBAOAnlB,KAAAoiB,oBAAAlI,SAAA,kBAAAI,SAGA,IAAAsS,EAAA5sB,KAAAghB,QAAAha,KAAA,gBACA,GAAA4lB,EACA,IAAA,IAAAltB,EAAA,EAAAA,EAAAktB,EAAAtsB,OAAAZ,IAAA,CACA,IAAA+kB,EAAA9lB,EAAA,QAAA,CACAkuB,cAAA,IAEAxa,OACA1T,EAAA,OAAA,CACA0E,KAAAupB,EAAAltB,GAAA,GACAotB,YAAAF,EAAAltB,GAAA,MAGA4O,SAAAtO,KAAAoiB,qBACApiB,KAAAmiB,SAAAsG,WAAAhE,EAAAvK,YAqBA,GAhBA9U,QAAA4T,QAAAhZ,KAAAghB,QAAA,uBACAhhB,KAAAuiB,0BACAviB,KAAAuiB,wBAAA5jB,EAAA,gCAAAO,MAAAS,EAAA,MAAA,aAAA,aACAK,KAAAmiB,SAAAsG,WAAAzoB,KAAAuiB,wBAAArI,aAGAla,KAAAuiB,wBAAAmG,UAAA1oB,KAAAoiB,sBACApiB,KAAAuiB,yBACAviB,KAAAuiB,wBAAAnM,YAAA,OAAAyS,SAGA7oB,KAAA+sB,gCAKA/sB,KAAA6hB,eAAAvhB,SACA8E,QAAA4T,QAAAhZ,KAAAghB,QAAA,wBACAhhB,KAAA8hB,qBAAAhQ,SAAA,UAEA9R,KAAA8hB,qBAAA1L,YAAA,UAGApW,KAAA0hB,SAAA,CAEA,IAAAsL,EAAAhtB,KAAA+hB,WAAA2C,SAAAnK,QACAva,KAAAksB,UAAAc,EAAAhmB,KAAA,WAmBA,GAXAhH,KAAAyiB,uBACAziB,KAAAyiB,sBAAAnI,SAGAta,KAAA0iB,aAAA,GACA1iB,KAAA2iB,SAAA,KAGA3iB,KAAA+gB,gBAAA/gB,KAAAitB,wBAGAjtB,KAAA+gB,gBAAAzgB,OAAA,EAAA,CACAN,KAAAyiB,sBAAA9jB,EAAA,2BAAA2P,SAAAtO,KAAAqhB,UAEA,IAAA,IAAA3hB,EAAA,EAAAA,EAAAM,KAAA+gB,gBAAAzgB,OAAAZ,IAAA,CACA,IAAAwtB,EAAAltB,KAAA+gB,gBAAArhB,GAEAytB,EAAAxuB,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,YAAA,IAAA+S,EAAAE,UAAA,IAAAF,EAAAE,UAAA,IACAC,YAAAH,EAAA9U,KACAkV,YAAAJ,EAAAK,KACAlT,aAAA6S,EAAA9S,MACAA,MAAA8S,EAAA9S,QACA9L,SAAAtO,KAAAyiB,uBAEAziB,KAAA0iB,aAAAwK,EAAA9U,MAAA+U,EAEAntB,KAAAwc,YAAA2Q,EAAA,QAAA,CAAA/U,KAAA8U,EAAA9U,OAAA,SAAAiB,GACArZ,KAAAwtB,eAAAnU,EAAArS,KAAAoR,MACApY,KAAA+lB,qBAMA,IAAApD,EAAA3iB,KAAAysB,sBAiBA,OAfA9J,GAAA3iB,KAAAytB,uBAAA9K,KAGAA,EADA3iB,KAAA2iB,UAAA3iB,KAAAytB,uBAAAztB,KAAA2iB,UACA3iB,KAAA2iB,SAIA3iB,KAAA+gB,gBAAA,GAAA3I,MAIApY,KAAAwtB,eAAA7K,GAEA3iB,KAAA0tB,kBAEA,GAGAC,kBAAA,SAAAruB,GACA,IAAA0hB,EAAAhhB,KAAAknB,eAAA5nB,GAEA,QAAA0hB,GACAhhB,KAAAmnB,aAAAnG,IAMA+L,8BAAA,WACA,IAAAa,EAAA5tB,KAAAipB,uBAAA,SACA4E,EAAA7tB,KAAAipB,uBAAA,QAEA2E,GAAAC,IAEAD,EAAA5tB,KAAA8tB,iBAEA1oB,QAAA7F,QAAAquB,KACAC,EAAAD,EAAA,GACAA,EAAAA,EAAA,KAIA,QAAAC,GAAA,SAAAA,IACAA,EAAA,OAGA7tB,KAAA4oB,iBAAAgF,GACA5tB,KAAAssB,iBAAAuB,IAGAC,eAAA,WAEA,OAAA9tB,KAAAghB,SAAA5b,QAAA4T,QAAAhZ,KAAAghB,QAAA,qBACAhhB,KAAAghB,QAAA9S,KAAA,qBAAA/M,MAAA,KAGA,CAAAnB,KAAAoiB,oBAAAxM,KAAA,WAAA5O,KAAA,QAAA,QAIAimB,sBAAA,WACA,IAAAc,EAAA,CACA,CAAA3V,KAAA,QAAAgC,MAAAlb,MAAAS,EAAA,MAAA,sBAAA4tB,KAAA,SAOA,OAJAvtB,KAAAghB,SAAA5b,QAAA4T,QAAAhZ,KAAAghB,QAAA,oBACA+M,EAAA7sB,KAAA,CAAAkX,KAAA,SAAAgC,MAAAlb,MAAAS,EAAA,MAAA,yBAAA4tB,KAAA,SAGAQ,GAGAN,uBAAA,SAAA9K,GACA,IAAA,IAAAjjB,EAAA,EAAAA,EAAAM,KAAA+gB,gBAAAzgB,OAAAZ,IACA,GAAAM,KAAA+gB,gBAAArhB,GAAA0Y,OAAAuK,EACA,OAAA,EAIA,OAAA,GAGA6K,eAAA,SAAA7K,EAAAqL,GAEAA,GAAAhuB,KAAAytB,uBAAA9K,KACAA,EAAA3iB,KAAA+gB,gBAAA,GAAA3I,MAIAuK,IAAA3iB,KAAA2iB,WAKA3iB,KAAA2iB,eAAA,IAAA3iB,KAAA0iB,aAAA1iB,KAAA2iB,WACA3iB,KAAA0iB,aAAA1iB,KAAA2iB,UAAAvM,YAAA,UAGApW,KAAA2iB,SAAAA,EACA3iB,KAAAkpB,wBAAA,OAAAlpB,KAAA2iB,eAEA,IAAA3iB,KAAA0iB,aAAA1iB,KAAA2iB,WACA3iB,KAAA0iB,aAAA1iB,KAAA2iB,UAAA7Q,SAAA,YAIAmc,WAAA,SAAA7V,EAAApE,GAEA,OAAA,IADAhU,KAAAkuB,aAAA9V,GACA,CAAApY,KAAAA,KAAAwiB,UAAAxO,IAGAka,aAAA,SAAA9V,GACA,OAAAA,GACA,IAAA,QACA,OAAAlZ,MAAAivB,sBACA,IAAA,SACA,OAAAjvB,MAAAkvB,uBACA,QACA,KAAA,cAAAhW,sBAIAiW,0BAAA,SAAAxY,IAGA,IAFAlX,EAAAsO,QAAA4I,EAAA7V,KAAAgU,SAAAmW,qBAGAnqB,KAAAgU,SAAAmW,mBAAAjpB,KAAA2U,IAIAyY,wBAAA,SAAAzY,GACA,IAAAzW,EAAAT,EAAAsO,QAAA4I,EAAA7V,KAAAgU,SAAAmW,qBAEA,IAAA/qB,GACAY,KAAAgU,SAAAmW,mBAAA7a,OAAAlQ,EAAA,IAIAmvB,eAAA,SAAA/L,GACAA,EAAApM,YAAA,YAAAoY,QAAA,aAAApY,YAAA,YAEA,IAAA,IAAA1W,EAAA,EAAAA,EAAA8iB,EAAAliB,OAAAZ,IAAA,CACA,IAAAmW,EAAAlX,EAAA6jB,EAAA9iB,IAAAsH,KAAA,MACAhH,KAAAsuB,wBAAAzY,GAGA7V,KAAAyuB,iBAAAjM,IAGAkM,gBAAA,SAAAlM,GACAA,EAAApM,YAAA,OAAAtE,SAAA,YAEA,IAAA,IAAApS,EAAA,EAAAA,EAAA8iB,EAAAliB,OAAAZ,IAAA,CACA,IAAAmW,EAAAlX,EAAA6jB,EAAA9iB,IAAAsH,KAAA,MACAhH,KAAAquB,0BAAAxY,GAGA7V,KAAA2uB,kBAAAnM,IAGAoM,eAAA,SAAA/Y,GACA,OAAA7V,KAAA4iB,KAAAgM,eAAA/Y,IAGAgZ,mBAAA,SAAAC,GACAA,EAAAnwB,EAAAowB,UAAAD,GAEA,IAAA,IAAApvB,EAAA,EAAAA,EAAAovB,EAAAxuB,OAAAZ,IAAA,CACA,IAAAmW,EAAAiZ,EAAApvB,GACAgW,EAAA1V,KAAA4uB,eAAA/Y,GAEAH,GAAAA,EAAApV,OACAN,KAAAuuB,eAAA7Y,GAEA1V,KAAAsuB,wBAAAzY,KAKAmZ,oBAAA,SAAAF,GACAA,EAAAnwB,EAAAowB,UAAAD,GAEA,IAAA,IAAApvB,EAAA,EAAAA,EAAAovB,EAAAxuB,OAAAZ,IAAA,CACA,IAAAmW,EAAAiZ,EAAApvB,GACAgW,EAAA1V,KAAA4uB,eAAA/Y,GAEAH,GAAAA,EAAApV,OACAN,KAAA0uB,gBAAAhZ,GAEA1V,KAAAquB,0BAAAxY,KAKAoZ,yBAAA,SAAApZ,GACA,OAAA7V,KAAA6iB,sBACA7iB,KAAA6iB,oBAAA,IAGA7iB,KAAA6iB,oBAAA3hB,KAAA2U,IAGAqZ,UAAA,SAAAC,GACAnvB,KAAAovB,qBAAA/c,OAAA8c,IAGAE,iBAAA,WAKA,OAJA,OAAArvB,KAAA6gB,iBACA7gB,KAAA6gB,eAAA7gB,KAAA4gB,SAAAtgB,SAAAN,KAAA4gB,SAAAjL,SAAA,WAGA3V,KAAA6gB,gBAGAuO,mBAAA,WAEA,GAAApvB,KAAAgU,SAAAsb,gBACA,OAAA3wB,EAAAqB,KAAAgU,SAAAsb,iBAEA,IAAA1c,EAAAjU,EAAA,kBAMA,OAJAiU,EAAAtS,SACAsS,EAAAjU,EAAA,6BAAA2P,SAAA3P,EAAA,aAGAiU,GAIA0U,aAAA,WACAtnB,KAAAwiB,UAAA1Q,SAAA,QACA9R,KAAA2gB,aAAA,GAGA6G,kBAAA,WACAxnB,KAAAwiB,UAAApM,YAAA,QACApW,KAAA2gB,aAAA,GAGA4O,4BAAA,WAEA,IAAAC,EAAA,IAAAtwB,MAAAuwB,sBAAAzvB,KAAA,CACAwd,OAAA,WACAgS,EAAAhF,aAIA,OAAAgF,GAGA5X,QAAA,WACA5X,KAAAygB,cACAzgB,KAAAygB,aAAA7I,UAGA5X,KAAA4iB,MACA5iB,KAAA4iB,KAAAhL,UAGA5X,KAAA0vB,QAGA3X,OAAA,WACA/X,KAAAygB,cACAzgB,KAAAygB,aAAA1I,SAGA/X,KAAA4iB,MACA5iB,KAAA4iB,KAAA7K,SAGA/X,KAAA0vB,QAGA1J,YAAA,WACAhmB,KAAAgU,SAAAgS,cACAhmB,KAAAiX,QAAA,cAGAyW,eAAA,WACA1tB,KAAAgU,SAAA0Z,eAAA1tB,KAAA8gB,WACA9gB,KAAAiX,QAAA,eAAA,CAAA6J,UAAA9gB,KAAA8gB,aAGA6O,aAAA,WACA3vB,KAAAgU,SAAA2b,aAAA3vB,KAAA8V,QACA9V,KAAAiX,QAAA,aAAA,CAAAnB,OAAA9V,KAAA8V,UAGA8Z,iBAAA,WACA5vB,KAAAgU,SAAA4b,mBACA5vB,KAAAiX,QAAA,mBAGA6P,kBAAA,WACA9mB,KAAAgU,SAAA8S,oBACA9mB,KAAAiX,QAAA,oBAGAwX,iBAAA,SAAAjM,GACAxiB,KAAAgU,SAAAya,iBAAAjM,GACAxiB,KAAAiX,QAAA,iBAAA,CAAAN,SAAA6L,KAGAmM,kBAAA,SAAAnM,GACAxiB,KAAAgU,SAAA2a,kBAAAnM,GACAxiB,KAAAiX,QAAA,kBAAA,CAAAN,SAAA6L,KAGAoJ,cAAA,SAAA7kB,EAAAjH,GACAE,KAAAgU,SAAA4X,cAAA7kB,EAAAjH,GACAE,KAAAiX,QAAA,cAAA,CAAAlQ,OAAAA,EAAAjH,OAAAA,KAMAinB,6BAAA,WAGA/mB,KAAAygB,aAAAsL,cAKA/rB,KAAAmnB,aAAAnnB,KAAAygB,aAAAoP,iBACA7vB,KAAA+lB,iBALA/lB,KAAAygB,aAAAiM,WAAA1sB,KAAAkhB,gBAAA3G,UASAuV,2BAAA,SAAAzW,GACAA,EAAAmM,iBAEA,IAAAvX,EAAAtP,EAAA0a,EAAAE,eAGAtL,EAAA0H,SAAA,aAAA1H,EAAAjH,KAAA,mBAIAhH,KAAAirB,aAAAhd,EAAAjH,KAAA,UAAA5B,QAAA2qB,YAAA9hB,KAGA+hB,+BAAA,SAAA3W,GACA,IAAAoL,EAAA9lB,EAAA0a,EAAA4W,QAGAxL,EAAA9O,SAAA,aAAA8O,EAAAzd,KAAA,mBAIAhH,KAAAirB,aAAAxG,EAAAzd,KAAA,YAGAwd,oBAAA,SAAAnL,GACArZ,KAAA+hB,WAAA2C,SAAAtO,YAAA,OACA,IAAAqO,EAAA9lB,EAAA0a,EAAA6W,gBAAApe,SAAA,OACA9R,KAAA6hB,eAAA9iB,KAAA0lB,EAAA1lB,QAEAiB,KAAA0hB,SAAA,EACA1hB,KAAA2hB,QAAA,EACA3hB,KAAAmL,OAAA,KAEA/F,QAAA4T,QAAAyL,EAAA,gBACAzkB,KAAA0hB,SAAA,EACAtc,QAAA4T,QAAAyL,EAAA,eACAzkB,KAAA2hB,QAAA,EAEA3hB,KAAAmL,OAAAsZ,EAAAzd,KAAA,UAGAhH,KAAA2oB,6BACA3oB,KAAA+lB,kBAGAjB,kBAAA,SAAAzL,GACArZ,KAAAiiB,SAAAyC,SAAAtO,YAAA,OACA,IAAAqO,EAAA9lB,EAAA0a,EAAA6W,gBAAApe,SAAA,OACA9R,KAAAgiB,aAAAjjB,KAAA0lB,EAAA1lB,QACAiB,KAAA4kB,SAAAH,EAAAzd,KAAA,YACAhH,KAAA2vB,gBAGA/K,SAAA,SAAA9O,GACA,IAAAqa,EAAA,OAAAnwB,KAAA8V,OAKA,IAAAsa,EACApP,EALAhhB,KAAA8V,OAAAA,EACA9V,KAAAkhB,gBAAAviB,IASA,IAFA,IAAA0xB,IAAAF,GAAAnwB,KAAAghB,SAAAhhB,KAAAghB,QAAA1gB,QAEAZ,EAAA,EAAAA,EAAAM,KAAAumB,SAAAjmB,OAAAZ,SAEA,KADAshB,EAAAhhB,KAAAumB,SAAApU,GAAAzS,IACAsH,KAAA,WAAA,IAAAga,EAAAha,KAAA,SAAAspB,WAAAnvB,MAAA,KAAAL,QAAAgV,EAAAwa,aACAtP,EAAAoD,SAAAhO,YAAA,UACApW,KAAAkhB,gBAAAlhB,KAAAkhB,gBAAAzE,IAAAuE,GACAoP,IACAA,EAAApP,KAGAA,EAAAoD,SAAAtS,SAAA,UAGA9R,KAAAghB,SAAAhhB,KAAAghB,QAAAuP,IAAA,IAAAvP,EAAAuP,IAAA,KACAF,GAAA,IAKArwB,KAAAogB,aAAAiQ,GACArwB,KAAAmnB,aAAAiJ,GAIA,IACAI,EADAC,EAAAzwB,KAAAsmB,qBAAApM,SAAA,YAGA,IAAAxa,EAAA,EAAAA,EAAA+wB,EAAAnwB,OAAAZ,IAEA,KADA8wB,EAAAC,EAAAte,GAAAzS,IACAgxB,UAAA,WAAA,iBAAApwB,OACAkwB,EAAApa,YAAA,UAEAoa,EAAA1e,SAAA,UAIA9R,KAAAogB,cACA,UAAApgB,KAAAgU,SAAAkQ,SAEAhlB,MAAA8I,GAAA2oB,UAAA7a,GAIA9V,KAAA+lB,mBAIAL,kBAAA,SAAArM,GACA,IAAAoL,EAAA9lB,EAAA0a,EAAA6W,gBAEAzL,EAAA9O,SAAA,aAAA8O,EAAA9O,SAAA,SAKA8O,EAAAL,SAAAA,SAAAwM,GAAA5wB,KAAAoiB,qBACApiB,KAAA4oB,iBAAAnE,EAAAzd,KAAA,SAEAhH,KAAAssB,iBAAA7H,EAAAzd,KAAA,QAGAhH,KAAAopB,iCACAppB,KAAA+lB,mBAGA8K,uBAAA,WACA7wB,KAAA8rB,uBACA9rB,KAAA8mB,qBAGAgK,sBAAA,SAAAzX,GACArZ,KAAA+wB,cAAApyB,EAAA0a,EAAAE,gBACAF,EAAA2X,mBAGAC,yBAAA,SAAA5X,GACArZ,KAAA+wB,cAAApyB,EAAA0a,EAAAE,eAAA2X,KAAA,MACA7X,EAAA2X,mBAGArI,2BAAA,WACA,IAAAlE,EAAAzkB,KAAAosB,uBAAA,aAEA,GAAA3H,EAAAnkB,OAIA,GAAAN,KAAA0hB,SAAA1hB,KAAA2hB,QAAA3hB,KAAAwhB,WAEA,GADAiD,EAAA3S,SAAA,YACA,cAAA9R,KAAAqpB,2BAAA,CAEA,IAAA2D,EAAAhtB,KAAAoiB,oBAAAxM,KAAA,0BACA5V,KAAA4oB,iBAAAoE,EAAAhmB,KAAA,SACAhH,KAAAssB,iBAAA,aAGA7H,EAAArO,YAAA,YACApW,KAAA+sB,iCAOAtG,kBAAA,SAAA0K,GACA,OAAAA,EAAAjX,SAAA,MAAAA,SAAA,MAGAkX,iBAAA,SAAApQ,GACA,IAAAmQ,EAAAnQ,EAAApC,SAAA,MACA,OAAA5e,KAAAymB,kBAAA0K,IAGAnJ,iBAAA,SAAAhH,GACA,OAAAA,EAAApC,SAAA,YAGAoI,aAAA,SAAAT,GACA,IAAA,IAAA7mB,EAAA,EAAAA,EAAA6mB,EAAAjmB,OAAAZ,IACAM,KAAAynB,WAAA9oB,EAAA4nB,EAAA7mB,MAIA2xB,eAAA,SAAA9K,GACA,IAAA,IAAA7mB,EAAA,EAAAA,EAAA6mB,EAAAjmB,OAAAZ,IACAM,KAAAioB,aAAAtpB,EAAA4nB,EAAA7mB,MAIAqxB,cAAA,SAAA/P,GACAA,EAAAoD,OAAA,MAAAzO,SAAA,YACA3V,KAAAsxB,gBAAAtQ,GAEAhhB,KAAA6nB,cAAA7G,IAIA6G,cAAA,SAAA7G,GACAA,EAAArH,KAAA,WAAAzL,KAAA,CACAqjB,gBAAA,OACAlX,aAAAnb,MAAAS,EAAA,MAAA,yBAEAqhB,EAAAoD,OAAA,MAAAtS,SAAA,YAEA,IAAA0f,EAAAxxB,KAAAoxB,iBAAApQ,GACAhhB,KAAAgnB,aAAAwK,GAEA,IAAAlyB,EAAA0hB,EAAAha,KAAA,QACA,IAAAhH,KAAAqgB,cAAAuH,gBAAA9mB,QAAAxB,KACAU,KAAAqgB,cAAAuH,gBAAA1mB,KAAA5B,GACAU,KAAA+oB,uBAIAuI,gBAAA,SAAAtQ,GACAA,EAAArH,KAAA,WAAAzL,KAAA,CACAqjB,gBAAA,QACAlX,aAAAnb,MAAAS,EAAA,MAAA,yBAEAqhB,EAAAoD,OAAA,MAAAhO,YAAA,YAEA,IAAAob,EAAAxxB,KAAAoxB,iBAAApQ,GACAhhB,KAAAqxB,eAAAG,GAEA,IAAA9xB,EAAAM,KAAAqgB,cAAAuH,gBAAA9mB,QAAAkgB,EAAAha,KAAA,SACA,IAAAtH,IACAM,KAAAqgB,cAAAuH,gBAAAtY,OAAA5P,EAAA,GACAM,KAAA+oB,uBAOAsB,iBAAA,WACA,MAAA,UAAArqB,KAAAgU,SAAAkQ,SAAA,cAAAlkB,KAAAqpB,4BAGAuB,YAAA,SAAA9qB,EAAA2K,GAKAzK,KAAAojB,UACApjB,KAAA6rB,qBACA7rB,KAAAojB,QAAApjB,KAAAqjB,gBAAArjB,KAAAsjB,gBAAAtjB,KAAA6jB,WAAA,MAMA7jB,KAAA+iB,gBAAAziB,SACAN,KAAA8iB,cAAA1M,YAAA,UACApW,KAAA+iB,gBAAAhkB,KAAA,IAEAiB,KAAAyxB,gBACAhoB,KAAAioB,IACA1xB,KAAA8iB,cAAAhR,SAAA,UAEA,IAAA6f,EAAAzyB,MAAAsgB,iBAAAxf,KAAA2T,aAAAzU,MAAAsgB,iBAAAxf,KAAA2T,aAAA,GAAA,UACAie,EAAA1yB,MAAAsgB,iBAAAxf,KAAA2T,aAAAzU,MAAAsgB,iBAAAxf,KAAA2T,aAAA,GAAA,WAEA,GAAA3T,KAAAqqB,mBAOA,CACA,IAAA9P,EAAA5J,KAAAkhB,IAAA7xB,KAAAgU,SAAA8V,WAAA9pB,KAAAgjB,KAAA,GAAA,EAAA0O,GACAI,EAAAnhB,KAAAkhB,IAAAtX,GAAAva,KAAAgU,SAAA8V,UAAA,GAAA4H,GACAK,EAAA7yB,MAAAS,EAAA,MAAA,+FAAA,CACA4a,MAAAA,EACAuX,KAAAA,EACAJ,MAAAA,EACAM,KAAAL,EACAM,MAAAL,IAGAM,EAAAvzB,EAAA,kCAAA2P,SAAAtO,KAAA+iB,iBACAoP,EAAAxhB,KAAA6Y,IAAA7Y,KAAAyhB,KAAAV,EAAA1xB,KAAAgU,SAAA8V,WAAA,GAEAuI,EAAA1zB,EAAA,SAAA,CACAwb,MAAA,uBAAAna,KAAAgjB,KAAA,EAAA,GAAA,aACA5I,MAAAlb,MAAAS,EAAA,MAAA,mBACA2O,SAAA4jB,GACAI,EAAA3zB,EAAA,SAAA,CACAwb,MAAA,uBAAAna,KAAAgjB,KAAAmP,EAAA,GAAA,aACA/X,MAAAlb,MAAAS,EAAA,MAAA,eACA2O,SAAA4jB,GAEAvzB,EAAA,SAAA,CACAwb,MAAA,YACA9W,KAAA0uB,IACAzjB,SAAA4jB,GAEAlyB,KAAAgjB,KAAA,GACAhjB,KAAAwc,YAAA6V,EAAA,SAAA,WACAryB,KAAAmoB,eAAAkK,EAAA,SACAryB,KAAAmoB,eAAAmK,EAAA,SACAtyB,KAAA6lB,QAAA7lB,KAAAgjB,KAAA,GACAhjB,KAAA+lB,gBAAA,MAIA/lB,KAAAgjB,KAAAmP,GACAnyB,KAAAwc,YAAA8V,EAAA,SAAA,WACAtyB,KAAAmoB,eAAAkK,EAAA,SACAryB,KAAAmoB,eAAAmK,EAAA,SACAtyB,KAAA6lB,QAAA7lB,KAAAgjB,KAAA,GACAhjB,KAAA+lB,gBAAA,UAjDA,CACA,IAAAgM,EAAA7yB,MAAAS,EAAA,MAAA,6DAAA,CACA+xB,MAAAA,EACAM,KAAAL,EACAM,MAAAL,IAEA5xB,KAAA+iB,gBAAA1f,KAAA0uB,MAgDAroB,MAAA,KACA1J,KAAA8iB,cAAAhR,SAAA,aAOA9R,KAAAwiB,UAAAzjB,KAAA0L,EAAA1L,MACAG,MAAA8S,eAAAvH,EAAAqU,UACA5f,MAAAoT,eAAA7H,EAAAsU,UAKA/e,KAAAujB,oBAAAvjB,KAAAwiB,UAAA5M,KAAA,6BAEAnL,EAAA2Y,SAAA3Y,EAAA2Y,QAAA9iB,OACAN,KAAAujB,oBAAAjjB,SACAN,KAAAojB,QAAA3Y,EAAA2Y,QACApjB,KAAAqjB,gBAAA5Y,EAAA4Y,gBACArjB,KAAAsjB,gBAAA7Y,EAAA6Y,gBAGAtjB,KAAAwjB,mBAAA7kB,EAAA,2BAAA+pB,UAAA1oB,KAAAujB,qBAEAvjB,KAAAujB,oBAAArV,KAAA,CACAqkB,KAAA,WACAC,SAAA,IACAC,eAAA,QACApY,aAAAnb,MAAAS,EAAA,MAAA,gBAGAK,KAAAwc,YAAAxc,KAAAujB,oBAAA,SAAA,WACA,IAAAvjB,KAAA4iB,KAAAoJ,sBAAA1rB,OACAN,KAAA4iB,KAAA8P,oBAEA1yB,KAAA4iB,KAAA+P,yBAIA3yB,KAAAwc,YAAAxc,KAAAujB,oBAAA,WAAA,SAAAlK,GACAA,EAAAyG,UAAA1a,QAAAwtB,YACAvZ,EAAAmM,iBAEA7mB,EAAA0a,EAAAE,eAAAtC,QAAA,eAKAjX,KAAAujB,oBAAA3E,WAAAte,QACAN,KAAAujB,oBAAAa,OAAA,WAAA9J,SAEAta,KAAAujB,oBAAAjJ,UAMAta,KAAA0jB,UAAAjZ,EAAAiZ,UACA1jB,KAAA2jB,gBAAAzkB,MAAAE,MAAAY,KAAA0jB,WAAA,GAAAhZ,GAAAA,EAAAnJ,MAEAvB,KAAA0jB,WAAA1jB,KAAA0jB,UAAApjB,OACAN,KAAAmjB,WAAA/M,YAAA,UAEApW,KAAAmjB,WAAArR,SAAA,UAOA,IAAA+gB,EAAA7yB,KAAAojB,SAAApjB,KAAAgU,SAAA6e,WAeA,GAbA7yB,KAAA4iB,KAAA5iB,KAAAiuB,WAAAjuB,KAAAysB,sBAAA,CACAvI,QAAAlkB,KAAAgU,SAAAkQ,QACA4F,UAAA,UAAA9pB,KAAAgU,SAAAkQ,SAAA,cAAAlkB,KAAAqpB,2BAAArpB,KAAAgU,SAAA8V,UAAA,KACAhqB,OAAAA,EACA+yB,WAAAA,EACAC,YAAA9yB,KAAAojB,SAAApjB,KAAAgU,SAAA8e,YACAC,eAAA/yB,KAAAojB,QACA0D,kBAAA9mB,KAAA6wB,uBAAA5U,KAAAjc,QAMAA,KAAA6iB,oBAAA,CACA,GAAAgQ,EACA,IAAA,IAAAnzB,EAAA,EAAAA,EAAAM,KAAA6iB,oBAAAviB,OAAAZ,IACAM,KAAA4iB,KAAAoQ,kBAAAhzB,KAAA6iB,oBAAAnjB,IAIAM,KAAA6iB,oBAAA,KAMA7iB,KAAA4vB,oBAGA6B,cAAA,WACA,OAAA,IAAAxoB,QAAA,CAAAC,EAAAC,KACA,GAAA,OAAAnJ,KAAAkjB,aACAha,EAAAlJ,KAAAkjB,kBACA,CACA,IAAApjB,EAAAE,KAAA6pB,uBACA/pB,EAAA+kB,SAAA/iB,cACAhC,EAAA+kB,SAAAkF,MAGA,OAAA/pB,KAAAijB,YACAjjB,KAAAijB,UAAAtS,KAAAC,MAAA,IAAAD,KAAAe,WAEA5R,EAAAmjB,UAAAjjB,KAAAijB,UAEA/jB,MAAA6J,kBAAA,OAAA/I,KAAAgU,SAAAif,oBAAA,CACAjsB,KAAAlH,EACA+J,YAAA7J,KAAAimB,uBACAxc,KAAAgB,IACAA,EAAAzD,KAAAic,WAAAjjB,KAAAijB,WACAjjB,KAAAkjB,aAAAzY,EAAAzD,KAAAksB,MACAhqB,EAAAuB,EAAAzD,KAAAksB,QAEA/pB,MAEAO,MAAAP,OAKA6hB,gBAAA,WACA,IAIAtrB,EAqBA4Z,EAzBA6Z,EAAA,GACAC,EAAA,GACAC,EAAA,GAIA,IAAA3zB,EAAA,EAAAA,EAAAM,KAAAojB,QAAA9iB,OAAAZ,IAAA,CACA,IAAAqH,EAAA/G,KAAAojB,QAAA1jB,GAEA,GAAAqH,EAAAkQ,QAAA,CACA,IAAAhJ,EAAAtP,EAAA,aAAAO,MAAAsF,cAAAuC,EAAAxF,MAAA,qBACAyF,KAAA,SAAAD,GACAsL,OAAAtL,EAAAkQ,SAEAjX,KAAAwc,YAAAvO,EAAA,SAAA,8BACAklB,EAAAjyB,KAAA+M,QAEAlH,EAAAusB,YAGAD,EAAAnyB,KAAA6F,GAFAqsB,EAAAlyB,KAAA6F,GASA,GAAAqsB,EAAA9yB,QAAA+yB,EAAA/yB,OAAA,CACA,IAAAizB,EAAA50B,EAAA,WAEA2a,EAAA3a,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,cACAmT,YAAA,WACAlT,MAAAlb,MAAAS,EAAA,MAAA,aACA2O,SAAAilB,GAEA,IAAAC,EAAA70B,EAAA,sBAAA2P,SAAAilB,GACAE,EAAAzzB,KAAA0zB,uBAAAN,GAAA,GACAO,EAAA3zB,KAAA0zB,uBAAAL,GAAA,GAEAI,GACAA,EAAAnlB,SAAAklB,GAGAC,GAAAE,GACAh1B,EAAA,SAAA2P,SAAAklB,GAGAG,GACAA,EAAArlB,SAAAklB,GAGAL,EAAAjyB,KAAAqyB,GAKA,IAFAvzB,KAAA6jB,WAAAllB,IAEAe,EAAA,EAAAA,EAAAyzB,EAAA7yB,OAAAZ,IAAA,CACA,IAAAk0B,EAAAj1B,EAAA,UAAA0T,OAAA8gB,EAAAzzB,IACAM,KAAA6jB,WAAA7jB,KAAA6jB,WAAApH,IAAAmX,GAGA5zB,KAAA6jB,WAAAvV,SAAAtO,KAAAqhB,UACAniB,MAAA8S,eAAAhS,KAAAqjB,iBACAnkB,MAAAoT,eAAAtS,KAAAsjB,iBAEApkB,MAAAyT,eAAA3S,KAAA6jB,YAEAvK,GACAA,EAAAtS,KAAA,WAAAoS,GAAA,eAAApZ,KAAAgwB,+BAAA/T,KAAAjc,QAIA6zB,eAAA,WACA7zB,KAAAmjB,WAAArR,SAAA,UAOA,IALA,IAAA7D,EAAAtP,EAAA,UAAA,CACAwb,MAAA,gBAGA2Z,EAAA,GACAp0B,EAAA,EAAAA,EAAAM,KAAA0jB,UAAApjB,OAAAZ,IACAo0B,EAAA5yB,KAAA,CAAA6U,MAAA/V,KAAA0jB,UAAAhkB,GAAAuF,KAAAE,MAAAnF,KAAA0jB,UAAAhkB,GAAA6B,OAEA,IAAAwyB,EAAA70B,MAAA80B,GAAAC,kBAAA,CACAle,MAAA7W,MAAAS,EAAA,MAAA,eACAuH,QAAA4sB,EACA3Z,MAAA,cACA7L,SAAAL,GAEAimB,EAAAh1B,MAAA80B,GAAAC,kBAAA,CACAle,MAAA7W,MAAAS,EAAA,MAAA,UACAuH,QAAA,CACA,CAAA6O,MAAA,MAAA5Q,MAAA,OAAA,CAAA4Q,MAAA,OAAA5Q,MAAA,QAAA,CAAA4Q,MAAA,MAAA5Q,MAAA,QAEAgV,MAAA,cACA7L,SAAAL,GAEA,IAAAkmB,EAAAJ,EAAAne,KAAA,UACA5V,KAAAwc,YAAA2X,EAAA,SAAA,KACA,IAAA5yB,EAAA4yB,EAAA7vB,MACAtE,KAAA2jB,gBAAApiB,GAAA6yB,YACAF,EAAA9d,YAAA,UAEA8d,EAAApiB,SAAA,YAGAqiB,EAAAld,QAAA,UAGA,IAAAkU,EAAAnrB,KAAA4iB,KAAAwI,wBAEA,IAAAD,EAAA7qB,OACA,IAAA+zB,EAAAn1B,MAAA80B,GAAAM,gBAAA,CACAve,MAAA7W,MAAAS,EAAA,MAAA,SACA40B,YAAAr1B,MAAAS,EAAA,MAAA,YACA4B,KAAA,SACAswB,IAAA,IACAvjB,SAAAL,GAGAtP,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,uBACA9W,KAAAnE,MAAAS,EAAA,MAAA,YACA2O,SAAAL,GAEA,IAAAgN,EAAAtc,EAAA,SAAA,CACAwb,MAAA,mBACA7L,SAAAL,GAEA,IAAA7I,QAAA6X,IAAAjd,KAAAmjB,WAAAlV,GAEAmL,GAAA,OAAA,KACApZ,KAAAmjB,WAAA/M,YAAA,YAGA,IAAAoe,GAAA,EAEAx0B,KAAAwc,YAAAvO,EAAA,UAAA,SAAAoL,GAEA,GADAA,EAAAmM,kBACAgP,EAAA,CAIAA,GAAA,EACAvZ,EAAA7E,YAAA,UAEA,IAAAtW,EAAAE,KAAA6pB,gBAOA,UANA/pB,EAAA+kB,SAAA/iB,cACAhC,EAAA+kB,SAAAkF,MAEAjqB,EAAAyB,KAAAwyB,EAAAne,KAAA,UAAAtR,MACAxE,EAAA0B,OAAA0yB,EAAAte,KAAA,UAAAtR,MAEA6mB,EAAA7qB,OACAR,EAAA+kB,SAAAhP,GAAAsV,MACA,CACA,IAAApB,EAAA7nB,SAAAmyB,EAAAze,KAAA,SAAAtR,OACAylB,IAAA0K,MAAA1K,KACAjqB,EAAA+kB,SAAAkF,MAAAA,GAIA7qB,MAAA2H,iBACA/G,EAAAZ,MAAA0H,eAAA1H,MAAA2H,gBAGA3H,MAAA2L,gBAAA,OAAA3L,MAAAmH,aAAA,0BAAAvG,GACA2J,MAAA,WACA+qB,GAAA,EACAvZ,EAAAnJ,SAAA,aAEApI,OAAA,WACA8qB,GAAA,EACAvZ,EAAAnJ,SAAA,UACA9R,KAAA8jB,sBACA5kB,MAAA8I,GAAAC,aAAA/I,MAAAS,EAAA,MAAA,qCAMA+zB,uBAAA,SAAAtQ,EAAAkQ,GACA,GAAAlQ,GAAAA,EAAA9iB,OAAA,CAGA,IAFA,IAAAuR,EAAAlT,EAAA,SAEAe,EAAA,EAAAA,EAAA0jB,EAAA9iB,OAAAZ,IACAf,EAAA,SAAA0T,OAAA1T,EAAA,OAAA,CACAkX,GAAA3W,MAAAsF,cAAA4e,EAAA1jB,GAAA6B,MAAA,iBACA4Y,MAAAmZ,EAAA,QAAA,KACAtsB,KAAA,CACAD,OAAAqc,EAAA1jB,IAEA2D,KAAA+f,EAAA1jB,GAAAuF,QACAqJ,SAAAuD,GAGA,OAAAA,KAGA,CACAyJ,SAAA,CACA4I,QAAA,QACAsL,MAAA,KACAvL,WAAA,KACAY,SAAA,KACAiF,UAAA,IACAK,mBAAA,GACA0I,YAAA,EACAC,aAAA,EACAxD,gBAAA,KACAjL,aAAA,EACAF,gBAAA,iBACAoD,qBAAA,uCACAkD,qBAAA,+BACAwI,oBAAA,iCACAxH,oBAAA,iCACA1G,cAAA,KACAuD,cAAA,KACA0B,eAAA,EAEAhE,YAAArnB,EAAAwhB,KACAuN,eAAA/uB,EAAAwhB,KACAwP,aAAAhxB,EAAAwhB,KACAyP,iBAAAjxB,EAAAwhB,KACA2G,kBAAAnoB,EAAAwhB,KACAsO,iBAAA9vB,EAAAwhB,KACAwO,kBAAAhwB,EAAAwhB,KACAyL,cAAAjtB,EAAAwhB,QC1gEAjhB,MAAAw1B,qBAAAtvB,QAAAuV,KAAA1b,OAAA,CACA2T,WAAA,KACA+hB,oBAAA,KACAC,kBAAA,KACAC,UAAA,KAEA3U,aAAA,KACA4U,YAAA,KACAC,cAAA,KAEAC,aAAA,EAEAC,cAAA,KACAC,aAAA,KACAC,sBAAA,KACAC,uBAAA,KAEA/Z,KAAA,SAAA6E,EAAAmV,EAAArhB,GACAhU,KAAAkgB,aAAAA,EACAlgB,KAAA4S,WAAAjU,EAAA02B,GACAr1B,KAAA8Y,YAAA9E,EAAA9U,MAAAw1B,qBAAApZ,UAGAtb,KAAA20B,oBAAAh2B,EACA,iFAGA22B,YAAAt1B,KAAA4S,YAGA5S,KAAA40B,kBAAA50B,KAAAu1B,sBACA,IAAA/S,EAAAxiB,KAAA40B,kBAAA1a,WAEAla,KAAAw1B,gBAAAhT,EAAAliB,QACAN,KAAAy1B,eAAAz1B,KAAAgU,SAAA8V,WAAAtH,EAAAliB,QAAAN,KAAAgU,SAAA8V,WAGA9pB,KAAA80B,YAAA,IAAA51B,MAAAw2B,mBACA11B,KAAA80B,YAAAa,KAAAnT,GAEAxiB,KAAAgU,SAAA6e,aACA7yB,KAAA+0B,cAAA,IAAA3vB,QAAAshB,OACA1mB,KAAA40B,kBACApS,EAAAmC,OAAA,mBACA,CACAgC,MAAA3mB,KAAAgU,SAAA8e,YACAjM,SAAA7mB,KAAA41B,iBACAC,OAAA,UAAA71B,KAAAgU,SAAAkQ,QAAA,4BAAA,KACAS,OAAA,uBACAoO,aAAA/yB,KAAAgU,SAAA+e,aACAjM,kBAAA9mB,KAAA8mB,kBAAA7K,KAAAjc,QAGAA,KAAAm1B,sBAAA9b,IACArZ,KAAA+0B,cAAArN,SAAArO,EAAA1C,WAGA3W,KAAAo1B,uBAAA/b,IACArZ,KAAA+0B,cAAA7M,YAAA7O,EAAA1C,WAGA3W,KAAAkgB,aAAA9G,GAAA,iBAAApZ,KAAAm1B,uBACAn1B,KAAAkgB,aAAA9G,GAAA,kBAAApZ,KAAAo1B,yBAIA,UAAAp1B,KAAAgU,SAAAkQ,UACAlkB,KAAA81B,sBAAAzc,IACA,IAAA0c,EAAAp3B,EAAA0a,EAAA2c,QAEA,GAAA,MAAAD,EAAAE,KAAA,YAAA,CAKA,IAAAvgB,EAEA,GAAAqgB,EAAApgB,SAAA,WACAD,EAAAqgB,OAIA,KAFArgB,EAAAqgB,EAAAtc,QAAA,aAEAnZ,OACA,OAIA8E,QAAA4T,QAAAtD,EAAA,kBACA1V,KAAAoU,oBAAAsB,KAIA1V,KAAAkgB,aAAAwB,UACA1hB,KAAAwc,YAAAxc,KAAA40B,kBAAA,WAAA50B,KAAA81B,uBACAn3B,EAAAu3B,kBACAl2B,KAAAwc,YAAAxc,KAAA40B,kBAAA,UAAA50B,KAAA81B,yBAMA91B,KAAA2lB,YAGA3lB,KAAAgU,SAAA8V,YACA,UAAA9pB,KAAAgU,SAAAkQ,QACAlkB,KAAA60B,UAAAzvB,QAAAslB,iBAEA1qB,KAAA60B,UAAA70B,KAAAkgB,aAAAQ,MAGA1gB,KAAA60B,UAAAlK,UAAA,GACA3qB,KAAAwc,YAAAxc,KAAA60B,UAAA,SAAA,iBACA70B,KAAAm2B,kBAIAZ,oBAAA,WACA,KAAA,8FAGA5P,UAAA,aAGAyQ,eAAA,WACA,OAAAp2B,KAAA40B,kBAAA1a,YAGA+R,mBAAA,WACA,OAAAjsB,KAAA40B,kBAAA1a,SAAA,oBAGA0U,eAAA,SAAA/Y,GACA,IAAAH,EAAA1V,KAAA40B,kBAAA1a,SAAA,aAAArE,EAAA,YAEA,OAAAH,EAAApV,OACAoV,EAEA,MAIAsW,oBAAA,WACA,IAAAhsB,KAAA+0B,cACA,KAAA,+BAGA,OAAA/0B,KAAA+0B,cAAAlF,gBAGAzE,sBAAA,WACA,IAAAiL,EACA,IACAA,EAAAr2B,KAAAgsB,sBACA,MAAAthB,IAGA,IAAAokB,EAAA,GACA,GAAAuH,EACA,IAAA,IAAA32B,EAAA,EAAAA,EAAA22B,EAAA/1B,OAAAZ,IACAovB,EAAA5tB,KAAAm1B,EAAAlkB,GAAAzS,GAAAsH,KAAA,OAGA,OAAA8nB,GAGAwH,cAAA,SAAA5gB,GACA,IAAA1V,KAAA+0B,cACA,KAAA,+BAIA,OADA/0B,KAAA+0B,cAAArI,WAAAhX,GAAA,IACA,GAGAsd,kBAAA,SAAAnd,GACA,IAAA7V,KAAA+0B,cACA,KAAA,+BAGA,IAAArf,EAAA1V,KAAA4uB,eAAA/Y,GAEA,QAAAH,IACA1V,KAAA+0B,cAAArI,WAAAhX,GAAA,IACA,IAMAgd,kBAAA,WACA1yB,KAAA+0B,cAAAwB,aAGA5D,oBAAA,WACA3yB,KAAA+0B,cAAAyB,eAGAZ,eAAA,WACA,OAAA,GAGAa,gBAAA,WACA,OAAAz2B,KAAAi1B,eAGAO,gBAAA,SAAAkB,GACA12B,KAAAi1B,cAAAyB,GAGAC,eAAA,WACA,OAAA32B,KAAAk1B,cAGAO,eAAA,SAAAmB,GACA52B,KAAAk1B,aAAA0B,GAMAT,cAAA,WACAn2B,KAAA62B,eACA72B,KAAA82B,YAOAD,YAAA,WACA,SAAA72B,KAAA22B,mBAAA32B,KAAAgU,SAAA8V,aAOA9pB,KAAA60B,UAAA,KAAAzvB,QAAA2xB,KAAA,GACA3xB,QAAA2xB,KAAAC,cACA5xB,QAAA2xB,KAAApM,aACA3qB,KAAA4S,WAAA9Q,SAAAm1B,IACAj3B,KAAA4S,WAAAmY,SAIA/qB,KAAA60B,UAAAoB,KAAA,gBACAj2B,KAAA60B,UAAAlK,aACA3qB,KAAA60B,UAAAqC,cAEA,KAOAJ,SAAA,WACA,GAAA92B,KAAA22B,mBAAA32B,KAAAg1B,aAAAh1B,KAAAgU,SAAA8V,UAAA,CAIA9pB,KAAAg1B,aAAA,EACAh1B,KAAA20B,oBAAAve,YAAA,UACApW,KAAAmoB,eAAAnoB,KAAA60B,UAAA,UAEA,IAAA7tB,EAAAhH,KAAAm3B,oBAEAj4B,MAAA4H,kBAAA9G,KAAAgU,SAAAojB,uBAAApwB,EAAA,CAAAyD,EAAA5C,KAIA,GAHA7H,KAAAg1B,aAAA,EACAh1B,KAAA20B,oBAAA7iB,SAAA,UAEA,YAAAjK,EAAA,CACA,IAAAwvB,EAAA14B,EAAA8L,EAAA1L,MAEAiB,KAAAs3B,eAAAD,GACAn4B,MAAA8S,eAAAvH,EAAAqU,UACA5f,MAAAoT,eAAA7H,EAAAsU,UAEA/e,KAAA+0B,gBACA/0B,KAAA+0B,cAAArN,SAAA2P,EAAA1S,OAAA,oBACA3kB,KAAAkgB,aAAA4L,wBAGA9rB,KAAAw1B,gBAAAx1B,KAAAy2B,kBAAAY,EAAA/2B,QACAN,KAAAy1B,eAAA4B,EAAA/2B,QAAAN,KAAAgU,SAAA8V,WAGA9pB,KAAAwc,YAAAxc,KAAA60B,UAAA,SAAA,iBACA70B,KAAAm2B,qBAKAgB,kBAAA,WAEA,IAAAr3B,EAAAnB,EAAAM,QAAA,EAAA,GAAAe,KAAAgU,SAAAlU,QAEA,OADAA,EAAA+kB,SAAA/iB,OAAA9B,KAAAy2B,kBACA32B,GAGAw3B,eAAA,SAAAD,GACAA,EAAA/oB,SAAAtO,KAAA40B,mBACA50B,KAAA80B,YAAAa,KAAA0B,GACAr3B,KAAAu3B,iBAAAF,IAGAE,iBAAA,SAAAF,GACAr3B,KAAAgU,SAAAujB,iBAAAF,GACAr3B,KAAAiX,QAAA,iBAAA,CACAugB,YAAAH,KAIAvQ,kBAAA,WACA9mB,KAAAgU,SAAA8S,oBACA9mB,KAAAiX,QAAA,oBAGA7C,oBAAA,SAAAsB,GACAxW,MAAAkV,oBAAAsB,EAAA1O,KAAA,QAAA0O,EAAA,CACAwK,aAAAlgB,KAAAkgB,gBAIAtI,QAAA,WACA5X,KAAA+0B,eACA/0B,KAAA+0B,cAAAnd,WAIAG,OAAA,WACA/X,KAAA+0B,eACA/0B,KAAA+0B,cAAAhd,UAIAyS,QAAA,WAEAxqB,KAAA20B,oBAAAra,SAGAta,KAAA80B,YAAAtK,iBACAxqB,KAAA80B,YAGA90B,KAAA+0B,gBACA/0B,KAAAkgB,aAAAuX,IAAA,iBAAAz3B,KAAAm1B,uBACAn1B,KAAAkgB,aAAAuX,IAAA,kBAAAz3B,KAAAo1B,wBAEAp1B,KAAA+0B,cAAAvK,iBACAxqB,KAAA+0B,eAGA/0B,KAAA0vB,SAEA,CACApU,SAAA,CACA4I,QAAA,QACA4F,UAAA,KACAhqB,OAAA,KACA+yB,YAAA,EACAC,aAAA,EACAC,cAAA,EACAqE,uBAAA,oCACAG,iBAAA54B,EAAAwhB,KACA2G,kBAAAnoB,EAAAwhB,QC9WAjhB,MAAAw4B,uBAAAtyB,QAAAuV,KAAA1b,OAAA,CACA61B,YAAA,KACAC,cAAA,KACA4C,YAAA,KACAnI,MAAA,KACAoI,cAAA,KAEAhlB,WAAA,KACAilB,mBAAA,KACArV,UAAA,KACAsV,eAAA,KACAC,wBAAA,KAEAC,cAAA,EAEA3c,KAAA,SAAArH,GAKA,IAAArV,EAAAoG,cAAAiP,GAAA,CAKA,IAHA,IAAAikB,EAAA,GACA93B,EAAA,CAAA,KAAA,OAAA,cAAA,UAAA,WAAA,kBAAA,QAAA,kBAAA,WAEAT,EAAA,EAAAA,EAAAS,EAAAG,aACA,IAAA43B,UAAAx4B,GADAA,IAEAu4B,EAAA93B,EAAAT,IAAAw4B,UAAAx4B,GAMAsU,EAAAikB,EAGAj4B,KAAA8Y,YAAA9E,EAAA9U,MAAAw4B,uBAAApc,UAGAtb,KAAAgU,SAAAmkB,kBACAn4B,KAAAm4B,gBAAA,0BAAAn4B,KAAAgU,SAAAmkB,iBAIA,GAAAn4B,KAAAgU,SAAA+V,QACA/pB,KAAAgU,SAAAokB,UAAA,GAGAp4B,KAAA4S,WAAA5S,KAAAq4B,eAGAr4B,KAAA4S,WAAA5L,KAAA,gBAAAhH,MAEAA,KAAA63B,mBAAA73B,KAAAs4B,uBAEAt4B,KAAA83B,eAAA93B,KAAAu4B,oBACAv4B,KAAA83B,iBACA93B,KAAA+3B,wBAAA/3B,KAAA83B,eAAA1T,OAAA,SACApkB,KAAA+3B,wBAAAz3B,SACAN,KAAA+3B,wBAAA,OAIA/3B,KAAA80B,YAAA,IAAA51B,MAAAw2B,mBAEA11B,KAAAw4B,oBACAx4B,KAAAy4B,kBACAz4B,KAAA04B,gBAEA14B,KAAA83B,gBACA93B,KAAAwc,YAAAxc,KAAA83B,eAAA,WAAA,aAGA1yB,QAAAyZ,sBAAA,KACA7e,KAAAg4B,cAAA,KAIAjM,oBACA,OAAA/rB,KAAAwiB,UAAAliB,QAGA+3B,aAAA,WACA,OAAA15B,EAAA,IAAAqB,KAAAgU,SAAA6B,KAGAyiB,qBAAA,WACA,OAAAt4B,KAAA4S,WAAAsH,SAAA,cAGAye,YAAA,WACA,OAAA34B,KAAA63B,mBAAA3d,YAGAqe,kBAAA,WACA,OAAAv4B,KAAA4S,WAAAgD,KAAA,mBAGA4iB,kBAAA,WACAx4B,KAAAgU,SAAA6e,aACA7yB,KAAA+0B,cAAA,IAAA3vB,QAAAshB,OAAA,CACAC,MAAA3mB,KAAAgU,SAAAokB,SACAzT,OAAA,oBAKA8T,gBAAA,WACAz4B,KAAAgU,SAAAokB,WACAp4B,KAAA23B,YAAA,IAAAvyB,QAAAwzB,SAAA,CACAvD,UAAAr1B,KAAA63B,mBACAlT,OAAA3kB,KAAAgU,SAAA6e,WAAA,IAEA7yB,KAAA23B,YAAAkB,YAAAljB,SAAA,OACA3V,KAAA+0B,cAAA+D,mBAEA94B,KAAA23B,YAAAkB,YAEA,KACAE,qBAAA,UACAC,KAAAh5B,KAAAi5B,qBACAC,kBAAA,EACAC,eAAA,EACAC,cAAA,IACAC,aAAAr5B,KAAAgU,SAAA6e,WAAA,KACA7yB,KAAA+0B,cAAAuE,kBACA,SAKAL,mBAAA,WACA,MAAA,SAAAj5B,KAAAgU,SAAA2O,SAAA,IAAA,MAGA4W,mBAAA,WACA,OAAAv5B,KAAAgU,SAAA+V,OAAA/pB,KAAAwiB,UAAAliB,OAAAN,KAAAgU,SAAA+V,OAGAyP,qBAAA,WACAx5B,KAAAu5B,qBACAv5B,KAAAy5B,uBAEAz5B,KAAA05B,yBAIAA,sBAAA,WACA,IAAApgB,EAAAtZ,KAAA+3B,yBAAA/3B,KAAA83B,eACAxe,GACAA,EAAAxH,SAAA,WAIA2nB,qBAAA,WACA,IAAAngB,EAAAtZ,KAAA+3B,yBAAA/3B,KAAA83B,eACAxe,GACAA,EAAAlD,YAAA,WAIAsiB,cAAA,WACA,OAAA14B,KAAAwiB,UACAxiB,KAAA25B,eAAA35B,KAAAwiB,WAEAxiB,KAAAwiB,UAAA7jB,IAGAqB,KAAA45B,YAAA55B,KAAA24B,gBAGAiB,YAAA,SAAApX,GACAxiB,KAAA80B,YAAAa,KAAAnT,GAEAxiB,KAAAgU,SAAA6e,YACA7yB,KAAA+0B,cAAArN,SAAAlF,GAGAxiB,KAAAgU,SAAAokB,UACAp4B,KAAA23B,YAAAjQ,SAAAlF,GAGAxiB,KAAAgU,SAAA6lB,WACA75B,KAAA85B,yBAAAzgB,IACA,IAAA3D,EAAA/W,EAAA0a,EAAAE,gBACAnU,QAAA4T,QAAAtD,EAAA,kBAAAA,EAAAC,SAAA,aAAAD,EAAAC,SAAA,aACA3V,KAAA43B,cAAA53B,KAAAoU,oBAAAsB,KAIA1V,KAAAwc,YAAAgG,EAAA,WAAAxiB,KAAA85B,0BAEAn7B,EAAAu3B,kBACAl2B,KAAAwc,YAAAgG,EAAA,UAAAxiB,KAAA85B,2BAIAtX,EAAA5M,KAAA,WAAAwD,GAAA,iBAAAC,IACArZ,KAAA+5B,cAAAp7B,EAAA0a,EAAAE,eAAAE,QAAA,aAEAJ,EAAA2X,oBAGAhxB,KAAAwiB,UAAAxiB,KAAAwiB,UAAA/F,IAAA+F,GACAxiB,KAAAw5B,wBAGAplB,oBAAA,SAAAsB,EAAA1B,GAKA,OAJAA,IACAA,EAAA,IAEAA,EAAA2H,YAAA3b,KAAAgU,SAAA2H,YACAzc,MAAAkV,oBAAApU,KAAAgU,SAAAL,YAAA+B,EAAA1B,IAGA2lB,eAAA,SAAAnX,GAKA,GAJAxiB,KAAAgU,SAAA6e,YACA7yB,KAAA+0B,cAAA7M,YAAA1F,GAGAxiB,KAAAwvB,MAAA,CAGA,IAFA,IAAAV,EAAA,GAEApvB,EAAA,EAAAA,EAAA8iB,EAAAliB,OAAAZ,IAAA,CACA,IAAAmW,EAAA2M,EAAArQ,GAAAzS,GAAAsH,KAAA,MAEA6O,GACAiZ,EAAA5tB,KAAA2U,GAIAiZ,EAAAxuB,QACAN,KAAAwvB,MAAAtP,aAAA2O,mBAAAC,GAKAtM,EAAAtI,SAAA,SAAA+b,KAAA,YAAA,GAEAj2B,KAAAwiB,UAAAxiB,KAAAwiB,UAAAwX,IAAAxX,GACAxiB,KAAAw5B,uBAEAx5B,KAAAi6B,oBAGAF,cAAA,SAAArkB,GACA1V,KAAA25B,eAAAjkB,GACA1V,KAAAk6B,mBAAAxkB,EAAA,KACAA,EAAA4E,YAIA4f,mBAAA,SAAAxkB,EAAAzO,GACAyO,EAAAoV,IAAA,UAAA,GAEA,IAAAqP,EAAA,CACAC,SAAA,GAEAD,EAAA,UAAAj7B,MAAAuY,QAAA/B,EAAA2kB,aAAAn4B,SAAAwT,EAAAoV,IAAA,UAAA5rB,MAAAwY,SAEA,SAAA1X,KAAAgU,SAAA2O,UAAA,IAAA3iB,KAAAwiB,UAAAliB,SACA65B,EAAA,mBAAAzkB,EAAAwhB,cAAAh1B,SAAAwT,EAAAoV,IAAA,oBAIAjf,OAAAyuB,aACAzuB,OAAAyuB,YAAAC,QAGA7kB,EAAA8B,SAAA2iB,EAAAj7B,MAAAw4B,uBAAA8C,mBAAA,KACAvzB,IAGA4E,OAAAyuB,aACAzuB,OAAAyuB,YAAAG,YAKAC,UAAA,WAEA16B,KAAAu5B,uBAIAv5B,KAAAwvB,MAGAxvB,KAAAwvB,MAAAmL,OAFA36B,KAAAwvB,MAAAxvB,KAAA46B,gBAMAA,YAAA,WACA,OAAA17B,MAAAgV,2BAAAlU,KAAAgU,SAAAL,YAAA3T,KAAA66B,qBAGAA,iBAAA,WACA,OAAAl8B,EAAAM,OAAA,CACA67B,kBAAA,EACA7W,WAAAjkB,KAAAm4B,gBACA4C,QAAA/6B,KAAAgU,SAAA+mB,QACAlW,SAAA7kB,KAAAgU,SAAA6Q,SACAiO,YAAA,GAAA9yB,KAAAgU,SAAA+V,MACAiR,aAAAh7B,KAAAgU,SAAAgnB,aACA7Q,mBAAAnqB,KAAAi7B,wBACAC,SAAAl7B,KAAAm7B,cAAAlf,KAAAjc,OACAA,KAAAgU,SAAAonB,gBAGAhQ,sBAAA,WAGA,IAFA,IAAA0D,EAAA,GAEApvB,EAAA,EAAAA,EAAAM,KAAAwiB,UAAAliB,OAAAZ,IACAovB,EAAA5tB,KAAAlB,KAAAwiB,UAAArQ,GAAAzS,GAAAsH,KAAA,OAGA,OAAA8nB,GAGAmM,sBAAA,WACA,IAAAnM,EAAA9uB,KAAAorB,wBAUA,OARAprB,KAAAgU,SAAAqnB,oBAAAr7B,KAAAgU,SAAAsnB,iBACAxM,EAAA5tB,KAAAlB,KAAAgU,SAAAsnB,iBAGAt7B,KAAAgU,SAAAmW,oBACA2E,EAAA5tB,QAAAlB,KAAAgU,SAAAmW,oBAGA2E,GAGAqM,cAAA,SAAAxkB,GACA,GAAA3W,KAAAgU,SAAA+V,MAAA,CAEA,IAAAwR,EAAAv7B,KAAAgU,SAAA+V,MAAA/pB,KAAAwiB,UAAAliB,OAEAqW,EAAArW,OAAAi7B,IACA5kB,EAAAA,EAAA5V,MAAA,EAAAw6B,IAIAv7B,KAAAw7B,eAAA7kB,GACA3W,KAAAy7B,iCAGAD,eAAA,SAAA7kB,GACA,IAAA,IAAAjX,EAAA,EAAAA,EAAAiX,EAAArW,OAAAZ,IAAA,CACA,IAAAg8B,EAAA/kB,EAAAjX,GACAgW,EAAA1V,KAAA27B,iBAAAD,GAEA17B,KAAA47B,cAAAlmB,GACA1V,KAAA45B,YAAAlkB,GACA1V,KAAA67B,wBAAAH,EAAAhmB,SAAAA,GAGAgmB,EAAAhmB,SAAAA,EAGA1V,KAAA87B,iBAAAnlB,IAGAglB,iBAAA,SAAAD,GACA,IAAAhmB,EAAAgmB,EAAAhmB,SAAAqmB,QAQA,OALA78B,MAAA+W,eAAAP,EAAA,UAAA1V,KAAAgU,SAAA2O,SAAA,QAAA,SACAjN,EAAA5D,SAAA,aACA4D,EAAAsmB,QAAA,8BAAAh8B,KAAAgU,SAAA/O,KAAA,cAAAy2B,EAAA7lB,GAAA,mCACA3W,MAAAS,EAAA,MAAA,UAAA,UAEA+V,GAGAkmB,cAAA,SAAAlmB,GACAA,EAAApH,SAAAtO,KAAA63B,qBAGAgE,wBAAA,SAAAI,EAAAC,GACA,IAAAC,EAAAF,EAAAn6B,SACAs6B,EAAAF,EAAAp6B,SACAu6B,EAAAH,EAAAH,QAAAztB,SAAAlJ,QAAAsN,MAEAwpB,EAAApR,IAAA,aAAA,UAEAuR,EAAAvR,IAAA,CACAwR,SAAA,WACAC,OAAA,IACAtF,IAAAkF,EAAAlF,IACAxf,KAAA0kB,EAAA1kB,OAGA,IAAA0iB,EAAA,CACAlD,IAAAmF,EAAAnF,IACAxf,KAAA2kB,EAAA3kB,MAGA4kB,EAAA7kB,SAAA2iB,EAAAj7B,MAAAw4B,uBAAA8E,iBAAA,WACAH,EAAA/hB,SACA4hB,EAAApR,IAAA,aAAA,eAIA2Q,8BAAA,WACAz7B,KAAAwvB,MAAAtP,cACAlgB,KAAAwvB,MAAAtP,aAAA8O,oBAAAhvB,KAAAi7B,0BAIArM,eAAA,SAAA/Y,GACA,IAAA,IAAAnW,EAAA,EAAAA,EAAAM,KAAAwiB,UAAAliB,OAAAZ,IAAA,CACA,IAAAgW,EAAA1V,KAAAwiB,UAAArQ,GAAAzS,GAEA,GAAAgW,EAAA1O,KAAA,OAAA6O,EACA,OAAAH,IAKAomB,iBAAA,SAAAnlB,GACA3W,KAAAiX,QAAA,iBAAA,CAAAN,SAAAA,IACA3W,KAAAgU,SAAA8nB,iBAAAnlB,GAEA9K,OAAAyuB,aACAzuB,OAAAyuB,YAAAmC,aAIAxC,iBAAA,WACAj6B,KAAAiX,QAAA,kBACAjX,KAAAgU,SAAAimB,qBAEA,CACAuC,gBAAA,IACAhC,mBAAA,IAEAlf,SAAA,CACAzF,GAAA,KACA5Q,KAAA,KACAy3B,QAAA,KACA/oB,YAAA,KACAonB,QAAA,KACAlW,SAAA,GACAwW,oBAAA,EACAC,gBAAA,KACAnR,mBAAA,KACAxH,SAAA,OACAoH,MAAA,KACAiR,cAAA,EACA7C,gBAAA,KACAiD,cAAA,GACAU,iBAAAn9B,EAAAwhB,KACA8Z,iBAAAt7B,EAAAwhB,KACAiY,UAAA,EACAvF,YAAA,EACAgH,UAAA,EACAle,aAAA,EACAghB,eAAA,MC1cAz9B,MAAAiV,yBAAA/O,QAAAw3B,MAAA39B,OAAA,CACA0U,YAAA,KACAuM,aAAA,KAEAhC,MAAA,KACA2e,WAAA,KACAjc,SAAA,KACA2F,SAAA,KACAuW,eAAA,KACApc,MAAA,KACAa,QAAA,KACAiB,UAAA,KACAua,OAAA,KACAC,gBAAA,KACAC,kBAAA,KACAliB,WAAA,KACAmiB,eAAA,KAEA7hB,KAAA,SAAA1H,EAAAK,GACAhU,KAAA2T,YAAAA,EACA3T,KAAA8Y,YAAA9E,EAAA9U,MAAAiV,yBAAAmH,UAGA,IAAA1I,EAAAjU,EAAA,kDAAA2P,SAAAlJ,QAAAsN,MACAwL,EAAAvf,EAAA,2DAAA2P,SAAAsE,GACAgK,EAAAje,EAAA,yBAAA2P,SAAAsE,GAEA5S,KAAA0vB,KAAA9c,EAAA5S,KAAAgU,UAEAhU,KAAAk9B,eAAAv+B,EAAA,iCAAA2P,SAAAsO,GACA5c,KAAAg9B,gBAAAr+B,EAAA,gCAAA2P,SAAAsO,GACA5c,KAAAi9B,kBAAAt+B,EAAA,iDAAA2P,SAAAsO,GACA5c,KAAA+a,WAAApc,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,MACA9W,KAAAnE,MAAAS,EAAA,MAAA,YACA2O,SAAAtO,KAAAg9B,iBACAh9B,KAAA68B,WAAAl+B,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,sBACA9W,KAAAnE,MAAAS,EAAA,MAAA,YACA2O,SAAAtO,KAAAg9B,iBAEAh9B,KAAAke,MAAAA,EAEAle,KAAAwc,YAAAxc,KAAA+a,WAAA,WAAA,UACA/a,KAAAwc,YAAAxc,KAAA68B,WAAA,WAAA,mBAGAM,SAAA,WACAn9B,KAAAkgB,aAIA9a,QAAAqgB,iBAAA,IACAzlB,KAAAkgB,aAAAqB,QAAAtK,QAAA,SAJAjX,KAAAo9B,sBAQAp9B,KAAA0vB,QAGA5I,kBAAA,WACA9mB,KAAAq9B,wBAGAA,qBAAA,WACAr9B,KAAA68B,aACA78B,KAAAkgB,aAAA8L,sBAAA1rB,OACAN,KAAAs9B,kBAEAt9B,KAAAu9B,qBAKAD,gBAAA,WACAt9B,KAAA68B,WAAAzmB,YAAA,aAGAmnB,iBAAA,WACAv9B,KAAA68B,WAAA/qB,SAAA,aAGA0rB,gBAAA,WACAx9B,KAAA+a,WAAA3E,YAAA,aAGAqnB,iBAAA,WACAz9B,KAAA+a,WAAAjJ,SAAA,aAGA4rB,kBAAA,WACA19B,KAAAk9B,eAAA9mB,YAAA,WAGAunB,kBAAA,WACA39B,KAAAk9B,eAAAprB,SAAA,WAGAuU,OAAA,WACArmB,KAAA+a,WAAApF,SAAA,aACA3V,KAAAme,QAIAqd,eAAA,WACA,GAAAx7B,KAAAkgB,cAAAlgB,KAAAkgB,aAAA8L,sBAAA1rB,OAAA,CAEAN,KAAAkgB,aAAA0C,KAAAmS,cAAA6I,sBAEA,IAAAvH,EAAAr2B,KAAAkgB,aAAA8L,sBACA0P,EAAA17B,KAAAyV,eAAA4gB,GAEAr2B,KAAAk7B,SAAAQ,GAEA17B,KAAAgU,SAAA6pB,yBACA79B,KAAAkgB,aAAAwO,gBAAA1uB,KAAAkgB,aAAA8L,uBAGAhsB,KAAAgU,SAAA8pB,cACA99B,KAAAme,SAKA1I,eAAA,SAAA4gB,GAGA,IAFA,IAAA0H,EAAA,GAEAr+B,EAAA,EAAAA,EAAA22B,EAAA/1B,OAAAZ,IAAA,CACA,IAAAgW,EAAA/W,EAAA03B,EAAA32B,IACAg8B,EAAAx8B,MAAAuW,eAAAC,GAEAqoB,EAAA78B,KAAAw6B,GAGA,OAAAqC,GAGApD,KAAA,WACA36B,KAAAq9B,uBACAr9B,KAAA0vB,QAGAwL,SAAA,SAAAQ,GACA17B,KAAAgU,SAAAknB,SAAAQ,IAGA9jB,QAAA,WACA5X,KAAAkgB,cACAlgB,KAAAkgB,aAAAtI,UAGA5X,KAAA0vB,QAGA3X,OAAA,WACA/X,KAAAkgB,cACAlgB,KAAAkgB,aAAAnI,SAGA/X,KAAA0vB,QAGA0N,oBAAA,WAEA,IAAAp2B,EAAA,CACAkd,QAAA,QACAvQ,YAAA3T,KAAA2T,YACAonB,QAAA/6B,KAAAgU,SAAA+mB,SAGA,OAAA/6B,KAAAgU,SAAAgnB,cAAA,SAAAh7B,KAAAgU,SAAAgnB,eACAh0B,EAAAg0B,aAAAh7B,KAAAgU,SAAAgnB,aAAA,IAAA,KAGA97B,MAAA4H,kBAAA,0BAAAE,EAAA,CAAAyD,EAAA5C,KACA,YAAAA,IACA7H,KAAAke,MAAAnf,KAAA0L,EAAA1L,MAEAiB,KAAAke,MAAA8f,IAAA,yBAAA19B,QACAN,KAAAke,MAAApM,SAAA,eAIA9R,KAAAkgB,aAAAhhB,MAAA6U,mBAAA/T,KAAA2T,YAAA3T,KAAAke,MAAA,CACAgG,QAAA,QACAsL,MAAAxvB,KACAikB,WAAAjkB,KAAAgU,SAAAiQ,WACAY,SAAA7kB,KAAAgU,SAAA6Q,SACAsF,mBAAAnqB,KAAAgU,SAAAmW,mBACA0I,YAAA,EACAC,YAAA9yB,KAAAgU,SAAA8e,YACAxD,gBAAAtvB,KAAAi9B,kBACAnW,kBAAA9mB,KAAA8mB,kBAAA7K,KAAAjc,MACAqkB,YAAArkB,KAAAgU,SAAAqQ,YACAU,cAAA/kB,KAAAgU,SAAA+Q,cACAuD,cAAAtoB,KAAAgU,SAAAsU,gBAIAtoB,KAAAwc,YAAAxc,KAAAkgB,aAAAsC,UAAA,aAAA,SAAAnJ,EAAA4kB,GAGAA,EAAAC,SAAAlI,SAAAiI,EAAAE,UAAAnI,QACAh2B,KAAAw7B,yBAMA,CACAlgB,SAAA,CACA8iB,WAAA,EACAna,WAAA,KACA8W,QAAA,KACAlW,SAAA,KACAiO,aAAA,EACAkI,aAAA,KACA7Q,mBAAA,GACA0T,yBAAA,EACAC,cAAA,EACAO,SAAA1/B,EAAAwhB,KACA+a,SAAAv8B,EAAAwhB,KACAkE,aAAA,EACAU,cAAA,KACAuD,cAAA,QClOAppB,MAAAo/B,mBAAAl5B,QAAAuV,KAAA1b,OAAA,CACA+hB,QAAA,KACA+U,QAAA,KACA9nB,MAAA,KACA+F,SAAA,KAEAuqB,UAAA,KACAC,QAAA,KAEAnjB,KAAA,SAAA8K,EAAA6P,EAAAhiB,GACAhU,KAAAghB,QAAAriB,EAAAwnB,GACAnmB,KAAA+1B,QAAAp3B,EAAAq3B,GACAh2B,KAAAiO,MAAAjO,KAAAghB,QAAAvH,QAAA,QAEAzZ,KAAA8Y,YAAA9E,GAEAhU,KAAAy+B,kBAGAC,aAAA,SAAAvY,GACA,IAAAoY,EAAAv+B,KAAAu+B,UACAv+B,KAAA2+B,gBAEA3+B,KAAAghB,QAAAriB,EAAAwnB,GAEAoY,GACAv+B,KAAAy+B,kBAIAA,eAAA,WACAz+B,KAAAu+B,YAIAv+B,KAAAu+B,WAAA,EAEAv+B,KAAAwc,YAAAxc,KAAAghB,QAAA,QAAA,sBACAhhB,KAAAwc,YAAAxc,KAAA+1B,QAAA,QAAA,sBACA/1B,KAAAwc,YAAAxc,KAAAiO,MAAA,SAAA,kBAGA0wB,cAAA,WACA3+B,KAAAu+B,YAIAv+B,KAAAu+B,WAAA,EAEAv+B,KAAAw+B,SACApZ,aAAAplB,KAAAw+B,SAGAx+B,KAAA4+B,mBAAA5+B,KAAAghB,SACAhhB,KAAA4+B,mBAAA5+B,KAAA+1B,SACA/1B,KAAA4+B,mBAAA5+B,KAAAiO,SAGA4wB,mBAAA,WACA7+B,KAAAw+B,SACApZ,aAAAplB,KAAAw+B,SAGAx+B,KAAAw+B,QAAAnZ,WAAArlB,KAAA8+B,aAAA7iB,KAAAjc,MAAA,MAGA++B,mBAAA,WACA/+B,KAAA+1B,QAAAxF,IAAA,KAAA/pB,SAAAw4B,eACAh/B,KAAA2+B,iBAIAM,aAAA,WACAj/B,KAAAw+B,SACApZ,aAAAplB,KAAAw+B,SAGAx+B,KAAA8+B,gBAGAA,aAAA,WACA,GAAA9+B,KAAA+1B,QAAAnF,GAAA,YAAA,CAIA,IAAAsO,EAAAl/B,KAAAghB,QAAA1c,MAEA,QAAA,IAAA46B,EAAA,CAKA,IAAAC,EAAAn/B,KAAAo/B,oBAAAF,GAEAl/B,KAAA+1B,QAAAzxB,IAAA66B,GAEA,IAAA,IAAAz/B,EAAA,EAAAA,EAAAM,KAAA+1B,QAAAz1B,OAAAZ,IACAM,KAAA+1B,QAAAr2B,GAAA2/B,cAAA,IAAAC,WAAA,QAAA,CACAC,UAAA,gBAEAv/B,KAAA+1B,QAAAr2B,GAAA2/B,cAAA,IAAAG,MAAA,UAKAx/B,KAAA+1B,QAAAnF,GAAA,WACA1xB,MAAAiF,gBAAAnE,KAAA+1B,YAIAqJ,oBAAA,SAAAF,GACA,OAAAA,KC/GAhgC,MAAAugC,WAAAr6B,QAAAuV,KAAA1b,OAAA,CACA+U,SAAA,KACA0rB,WAAA,KACAC,OAAA,KAEAC,SAAA,KACAC,OAAA,KACA9C,OAAA,KACA+C,YAAA,KAEAzkB,KAAA,SAAArH,GACAhU,KAAA8Y,YAAA9E,EAAA9U,MAAAugC,WAAAnkB,UAEAtb,KAAAgU,SAAA+rB,iBACA//B,KAAAgU,SAAAgsB,SAAA,GAGAhgC,KAAA4/B,SAAAjhC,EAAAqB,KAAAgU,SAAAisB,iBACAjgC,KAAA6/B,OAAAlhC,EAAAqB,KAAAgU,SAAAksB,eACAlgC,KAAA+8B,OAAA/8B,KAAA6/B,OAAA3lB,SAAA,SACAla,KAAA0/B,WAAA1/B,KAAA+8B,OAAA7iB,WAAA5Z,OAEAN,KAAAgU,SAAAokB,WACAp4B,KAAA2/B,OAAA,IAAAzgC,MAAAihC,gBAAAngC,KAAA6/B,OAAA,CACAxG,aAAAr5B,KAAAogC,aAAAnkB,KAAAjc,SAIAA,KAAA8/B,YAAA9/B,KAAA6/B,OAAAjqB,KAAA,0BACA5V,KAAAwc,YAAAxc,KAAA8/B,YAAA,QAAA,wBAEA9/B,KAAAqgC,YAGAC,OAAA,SAAAC,GACA,KAAAvgC,KAAAgU,SAAAwsB,UAAAxgC,KAAA0/B,YAAA1/B,KAAAgU,SAAAwsB,UAAA,CAKA,IAAAC,EAAA9hC,EAAA4hC,GAAAjyB,SAAAtO,KAAA+8B,QACA2D,EAAAD,EAAA7qB,KAAA,WAEA5V,KAAAgU,SAAAokB,UACAp4B,KAAA2/B,OAAAjY,SAAA+Y,GAGAzgC,KAAA8/B,YAAA9/B,KAAA8/B,YAAArjB,IAAAikB,GAEA1gC,KAAAwc,YAAAkkB,EAAA,QAAA,wBACA1gC,KAAA0/B,aAEA1/B,KAAAqgC,aAGAD,aAAA,WACA,GAAApgC,KAAAgU,SAAAokB,SAAA,CAOA,IAFA,IAAAtJ,EAAA,GAEApvB,EAAA,EAAAA,EAAAM,KAAA2/B,OAAAnZ,OAAAlmB,OAAAZ,IAAA,CACA,IAAAmW,EAAAlX,EAAAqB,KAAA2/B,OAAAnZ,OAAA9mB,IAAAwO,KAAAlO,KAAAgU,SAAA2sB,aACA7R,EAAA5tB,KAAA2U,GAIA,IAAA7O,EAAA,CACA8nB,IAAA1nB,KAAAC,UAAAynB,IAGA5vB,MAAA4H,kBAAA9G,KAAAgU,SAAA4sB,cAAA55B,EAAA,CAAAyD,EAAA5C,KACA,YAAAA,IACA4C,EAAA9C,SACA3H,KAAA6gC,eAAA/R,GACA5vB,MAAA8I,GAAAyX,cAAAvgB,MAAAS,EAAA,MAAAK,KAAAgU,SAAA8sB,yBAEA5hC,MAAA8I,GAAAC,aAAA/I,MAAAS,EAAA,MAAAK,KAAAgU,SAAA+sB,0BAMAC,qBAAA,SAAAC,GACA,KAAAjhC,KAAAgU,SAAAgsB,UAAAhgC,KAAA0/B,YAAA1/B,KAAAgU,SAAAgsB,UAAA,CAKA,IAAAS,EAAA9hC,EAAAsiC,EAAAjL,QAAAvc,QAAA,MAEAzZ,KAAAkhC,kBAAAT,IACAzgC,KAAAmhC,WAAAV,KAIAS,kBAAA,SAAAT,GACA,IAAAx7B,EAAAjF,KAAAohC,YAAAX,GACA,OAAA5pB,QAAA3X,MAAAS,EAAA,MAAAK,KAAAgU,SAAAqtB,qBAAA,CAAAp8B,KAAAA,MAGAk8B,WAAA,SAAAV,GACA,IAAAz5B,EAAA,CACA6O,GAAA7V,KAAAshC,UAAAb,IAGAvhC,MAAA4H,kBAAA9G,KAAAgU,SAAAutB,aAAAv6B,EAAA,CAAAyD,EAAA5C,KACA,YAAAA,GACA7H,KAAAwhC,yBAAA/2B,EAAAg2B,MAKAe,yBAAA,SAAA/2B,EAAAg2B,GACA,IAAA5qB,EAAA7V,KAAAshC,UAAAb,GACAx7B,EAAAjF,KAAAohC,YAAAX,GAEAh2B,EAAA9C,SACA3H,KAAA2/B,QACA3/B,KAAA2/B,OAAAzX,YAAAuY,GAGAA,EAAAnmB,SACAta,KAAA0/B,aACA1/B,KAAAqgC,WACArgC,KAAAyhC,aAAA5rB,GAEA3W,MAAA8I,GAAAyX,cAAAvgB,MAAAS,EAAA,MAAAK,KAAAgU,SAAA0tB,qBAAA,CAAAz8B,KAAAA,MAEA/F,MAAA8I,GAAAC,aAAA/I,MAAAS,EAAA,MAAAK,KAAAgU,SAAA2tB,kBAAA,CAAA18B,KAAAA,MAIA47B,eAAA,SAAA/R,GACA9uB,KAAAgU,SAAA6sB,eAAA/R,IAGA2S,aAAA,SAAA5rB,GACA7V,KAAAgU,SAAAytB,aAAA5rB,IAGAyrB,UAAA,SAAAb,GACA,OAAAA,EAAAvyB,KAAAlO,KAAAgU,SAAA2sB,cAGAS,YAAA,SAAAX,GACA,OAAAvhC,MAAAiE,WAAAs9B,EAAAvyB,KAAAlO,KAAAgU,SAAA4tB,iBAGAvB,SAAA,WAWA,GATA,IAAArgC,KAAA0/B,YACA1/B,KAAA6/B,OAAA1hB,OACAne,KAAA4/B,SAAAxpB,YAAA,YAEApW,KAAA6/B,OAAAlF,OACA36B,KAAA4/B,SAAA9tB,SAAA,WAIA9R,KAAAgU,SAAAokB,SAAA,CACA,IAAAyJ,EAAA7hC,KAAA6/B,OAAAjqB,KAAA,SAEA,IAAA5V,KAAA0/B,WACAmC,EAAA/vB,SAAA,YAEA+vB,EAAAzrB,YAAA,YAKApW,KAAAgU,SAAAgsB,UAAAhgC,KAAA0/B,YAAA1/B,KAAAgU,SAAAgsB,SACAhgC,KAAA8/B,YAAAhuB,SAAA,YAEA9R,KAAA8/B,YAAA1pB,YAAA,YAIApW,KAAAgU,SAAA8tB,qBACA9hC,KAAAgU,SAAAwsB,UAAAxgC,KAAA0/B,YAAA1/B,KAAAgU,SAAAwsB,SACA7hC,EAAAqB,KAAAgU,SAAA8tB,oBAAAhwB,SAAA,UAEAnT,EAAAqB,KAAAgU,SAAA8tB,oBAAA1rB,YAAA,aAIA,CACAkF,SAAA,CACA4kB,cAAA,KACAD,gBAAA,KACA6B,mBAAA,KACAnB,YAAA,UACAiB,cAAA,YACAxJ,UAAA,EACA2H,gBAAA,EACAC,SAAA,EACAQ,SAAA,KACAI,cAAA,KACAW,aAAA,KACAT,sBAAA5hC,MAAAS,EAAA,MAAA,oBACAohC,mBAAA7hC,MAAAS,EAAA,MAAA,4BACA0hC,qBAAAniC,MAAAS,EAAA,MAAA,6CACA+hC,qBAAAxiC,MAAAS,EAAA,MAAA,qBACAgiC,kBAAAziC,MAAAS,EAAA,MAAA,6BACAkhC,eAAAliC,EAAAwhB,KACAshB,aAAA9iC,EAAAwhB,QC/MAjhB,MAAA6iC,YAAA7iC,MAAAoV,kBAAArV,OAAA,CACA+iC,aAAA,EAEAtlB,WAAA,SAAAjS,EAAA+T,GAGA,GAFAxe,KAAA0vB,KAAAjlB,EAAA+T,GAEAxe,KAAA0V,SAAA1O,KAAA,MAAA,CACA,IAAAi7B,EAAAjiC,KAAA8a,iBAAAlF,KAAA,+CAEAqsB,EAAA3hC,QACAN,KAAAwc,YAAAylB,EAAA,QAAA,qBAKAC,gBAAA,WACA,IAAAhjC,MAAAijC,iBAAAniC,KAAA0V,SAAA1O,KAAA,MAAA,CACAo7B,OAAA,KACApiC,KAAAgiC,aAAA,EACAhiC,KAAAue,iBAKAd,UAAA,WACAzd,KAAAgiC,aAAAhiC,KAAAgU,SAAAkM,aACAlgB,KAAAgU,SAAAkM,aAAA6F,iBACA/lB,KAAAgiC,aAAAhiC,KAAAgU,SAAA5P,OACApE,KAAAgU,SAAA5P,MAAAi+B,iBAAAriC,KAAA0V,SAAA1O,KAAA,OAGAhH,KAAA0vB,UAKAxwB,MAAA4U,2BAAA,yBAAA5U,MAAA6iC,aClCA7iC,MAAAijC,iBAAA/8B,QAAAw3B,MAAA39B,OAAA,CAEAif,MAAA,KACAtB,QAAA,KACA0lB,YAAA,KACAC,SAAA,KACAxnB,WAAA,KACAynB,YAAA,KACAxnB,SAAA,KACAynB,iBAAA,KACAC,YAAA,KACAC,gBAAA,KACAC,eAAA,KAGAC,OAAA,KACAC,MAAA,KACAC,SAAA,KACAC,WAAA,KACAnwB,KAAA,KACAowB,eAAA,KACAC,QAAA,KACAC,kBAAA,KACAC,eAAA,KACAC,YAAA,KACAC,cAAA,KACAC,iBAAA,KAGAC,qBAAA,EACAC,iBAAA,EACAC,cAAA,EACAC,eAAA,EACAC,mBAAA,KACAC,UAAA,EAGAC,qBAAA,EACAC,YAAA,GACAC,QAAA,KACAC,UAAA,KACAC,iBAAA,EACAC,gBAAA,EACAC,eAAA,EACAC,eAAA,EACAC,eAAA,EACAC,cAAA,EACAC,aAAA,EACAC,YAAA,EACAC,cAAA,EACAC,YAAA,EACAC,SAAA,GACAC,iBAAA,EACAC,gBAAA,KACAC,aAAA,KACAC,qBAAA,KACAC,gBAAA,EACAC,eAAA,KACAC,oBAAA,EACAC,sBAAA,YACAC,yBAAA,EAGAC,YAAA,KACAC,cAAA,KAEAlqB,KAAA,SAAA2oB,EAAAhwB,GACAhU,KAAAikC,UAAA1hC,KAAAijC,MAEAxlC,KAAA8Y,YAAA9E,EAAA9U,MAAAijC,iBAAA7mB,UAEA,OAAAtb,KAAAgU,SAAAyxB,uBACAzlC,KAAAgU,SAAAyxB,qBAAAvmC,MAAAwmC,WAGA1lC,KAAAgkC,QAAAA,EACAhkC,KAAA4kC,SAAA,CAAAe,EAAA,EAAAC,EAAA,GAGA5lC,KAAA4S,WAAAjU,EAAA,kDAAA2P,SAAAlJ,QAAAsN,MACA1S,KAAAke,MAAAvf,EAAA,4BAAA2P,SAAAtO,KAAA4S,YACA5S,KAAA4c,QAAAje,EAAA,yBAAA2P,SAAAtO,KAAA4S,YAEA5S,KAAA0vB,KAAA1vB,KAAA4S,WAAA5S,KAAAgU,UAEAhU,KAAAuiC,SAAA5jC,EAAA,gCAAA2P,SAAAtO,KAAA4c,SACA5c,KAAA+a,WAAApc,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,aACA9W,KAAAnE,MAAAS,EAAA,MAAA,YACA2O,SAAAtO,KAAAuiC,UACAviC,KAAAwiC,YAAA7jC,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,0BACA9W,KAAAnE,MAAAS,EAAA,MAAA,UACA2O,SAAAtO,KAAAuiC,UAEAviC,KAAAgU,SAAA6xB,mBACA7lC,KAAAgb,SAAArc,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,uBACA9W,KAAAnE,MAAAS,EAAA,MAAA,yBACA2O,SAAAtO,KAAAuiC,UACAviC,KAAAwc,YAAAxc,KAAAgb,SAAA,WAAAhb,KAAA8lC,YAGA9lC,KAAAwc,YAAAxc,KAAAwiC,YAAA,WAAAxiC,KAAA8lC,WACA9lC,KAAAwc,YAAAxc,KAAA+a,WAAA,WAAA/a,KAAAme,MACAne,KAAAmoB,eAAAnoB,KAAAge,OAAA,SAEAhe,KAAA+kC,aAAA/kC,KAAA+lC,kBAEA7mC,MAAA4H,kBAAA,sBAAA,CAAAk9B,QAAAA,GAAAhkC,KAAAgmC,WAAA/pB,KAAAjc,QAMA+lC,gBAAA,WACA,IAAAE,EAAA7gC,QAAAqV,KAAA8V,IAAA,GAAA2V,gBAAAC,YACAC,EAAAhhC,QAAAqV,KAAA8V,IAAA,GAAA2V,gBAAAG,aAEA,OAAA11B,KAAA6Y,IAAA4c,EAAAH,IAAAp6B,OAAAy6B,iBAAA,EAAA,EAAA,IAQAN,WAAA,SAAAh/B,GACAA,EAAAjI,MACAmJ,MAAAhJ,MAAAS,EAAA,MAAA,qCAGAK,KAAAke,MAAAnf,KAAAiI,EAAAjI,MACAiB,KAAAumC,MAAA5nC,EAAA,WAAAqB,KAAAke,OACAle,KAAAwmC,gBAAA7nC,EAAA,SAAAqB,KAAAke,OACAle,KAAAymC,OAAA9nC,EAAA,QAAAqB,KAAAwmC,iBACAxmC,KAAAsiC,YAAA3jC,EAAA,gCAAAqB,KAAAke,OACAle,KAAAyiC,iBAAA9jC,EAAA,0BAAAqB,KAAAke,OACAle,KAAAwkC,aAAAxkC,KAAAyiC,iBAAAzL,cACAh3B,KAAAykC,YAAAzkC,KAAAyiC,iBAAAiE,aAEA1mC,KAAA2mC,eAEA3mC,KAAA+c,wBAGA/c,KAAA6iC,OAAA,IAAA+D,OAAAC,aAAA,gBAGA7mC,KAAA2iC,gBAAAhkC,EAAA,mBAAAqB,KAAAyiC,kBACAziC,KAAA2iC,gBAAAmE,MAAA9mC,KAAAykC,aACAzkC,KAAA2iC,gBAAA5X,OAAA/qB,KAAAwkC,cAEAxkC,KAAA6iC,OAAAkE,qBAAA,EACA/mC,KAAAslC,YAAA,KACAlgC,QAAAyZ,sBAAA7e,KAAA6iC,OAAAmE,UAAA/qB,KAAAjc,KAAA6iC,UAIA,IAAAoE,EAAA/nC,MAAAmH,aAAA,oBAAA,CACA29B,QAAAhkC,KAAAgkC,QACA9tB,KAAAlW,KAAA+kC,aACAd,UAAAjkC,KAAAikC,YAIA2C,OAAAM,MAAAC,QAAAF,EAAAG,IACApnC,KAAA8iC,MAAAsE,EACApnC,KAAA8iC,MAAAuE,IAAA,CACAC,QAAA,SACAC,QAAA,SACA9vB,KAAAzX,KAAAykC,YAAA,EACAxN,IAAAj3B,KAAAwkC,aAAA,IAEAxkC,KAAA6iC,OAAApmB,IAAAzc,KAAA8iC,OAEA9iC,KAAA2jC,eAAA3jC,KAAA8iC,MAAA0E,YACAxnC,KAAA0jC,cAAA1jC,KAAA8iC,MAAA2E,WACAznC,KAAA6jC,UAAA,EAEA7jC,KAAAglC,qBAAAhlC,KAAA0nC,2BAGA1nC,KAAA2nC,oCACA3nC,KAAA4nC,4BAGA,IAAAC,EAAA,CACAC,gBAAA9nC,KAAA0nC,2BACAK,QAAA,EACAC,QAAA,GAGAC,GAAA,EACA,GAAAjhC,EAAAg8B,WAAA,CAEA,IAAAkF,EAAAlhC,EAAAg8B,WAGAmF,EAAAN,EAAAC,gBAAAhB,MAAAoB,EAAAvC,EACAyC,EAAAP,EAAAC,gBAAA/c,OAAAmd,EAAAtC,EAEAiC,EAAAE,QAAAI,EAAAN,EAAAC,gBAAAhB,MAAA,EACAe,EAAAG,QAAAI,EAAAP,EAAAC,gBAAA/c,OAAA,EAEAkd,GAAA,EAGAjoC,KAAAqoC,qBAAAR,GAEAI,GACAjoC,KAAAsoC,oBAGAtoC,KAAAuoC,kBACAvoC,KAAAwoC,oBAGAxoC,KAAAyoC,uBAGAzoC,KAAAwc,YAAAxc,KAAA2iC,gBAAA,sBAAA3iC,KAAA0oC,kBACA1oC,KAAAwc,YAAAxc,KAAA2iC,gBAAA,uBAAA3iC,KAAA2oC,kBACA3oC,KAAAwc,YAAAxc,KAAA2iC,gBAAA,mBAAA3iC,KAAA4oC,gBACA5oC,KAAAwc,YAAAxc,KAAA2iC,gBAAA,uBAAA3iC,KAAA6oC,iBAEA7oC,KAAA8oC,eAGA9oC,KAAAslC,cAGAtlC,KAAAumC,MAAAhsB,QAAAtD,QAAA,YAOA8xB,aAAA,WACA,IAAA/oC,KAAAilC,eAAA,CAIAjlC,KAAAilC,gBAAA,EACAjlC,KAAA+kC,aAAA/kC,KAAA+lC,kBAGA,IAAAkB,EAAA/nC,MAAAmH,aAAA,oBAAA,CACA29B,QAAAhkC,KAAAgkC,QACA9tB,KAAAlW,KAAA+kC,aACAd,UAAAjkC,KAAAikC,YAGAjkC,KAAA8iC,MAAAkG,OAAA/B,EAAAG,IACApnC,KAAA2jC,eAAAyD,EAAAI,YACAxnC,KAAA0jC,cAAA0D,EAAAK,WACAznC,KAAAglC,qBAAA,CAAA8B,MAAA9mC,KAAA2jC,eAAA5Y,OAAA/qB,KAAA0jC,eACA1jC,KAAA+c,wBACA/c,KAAAslC,cACAtlC,KAAAilC,gBAAA,MAOAloB,sBAAA,WACA,GAAA/c,KAAA4S,WAAA,CAKA,IAAA8zB,EAAA76B,OAAA66B,WACA1P,EAAAnrB,OAAAmrB,YAEAh3B,KAAA4S,WAAAkY,IAAA,CACAgc,MAAAJ,EACAuC,YAAAvC,EACAjvB,KAAA,EAEAsT,OAAAiM,EACAkS,aAAAlS,EACAC,IAAA,IAGAj3B,KAAAke,MAAA4M,IAAA,CACAC,OAAAiM,EAAA,KAGA0P,EAAA1P,EACAh3B,KAAA4S,WAAAd,SAAA,YAEA9R,KAAA4S,WAAAwD,YAAA,YAGApW,KAAA4iC,gBACA5iC,KAAA4iC,eAAA9X,IAAA,CACArT,KAAAzX,KAAA4iC,eAAAxe,SAAA0iB,QAAA,EAAA9mC,KAAA4iC,eAAAkE,QAAA,EAAA,KACA7P,IAAAj3B,KAAA4iC,eAAAxe,SAAA2G,SAAA,EAAA/qB,KAAA4iC,eAAA7X,SAAA,EAAA,OAKA/qB,KAAAyiC,kBAAAziC,KAAA8iC,OACA9iC,KAAA4nC,8BAOAA,0BAAA,WAEA,IAAAuB,EAAA,CACArC,MAAA9mC,KAAAykC,YACA1Z,OAAA/qB,KAAAwkC,cAGAxkC,KAAAwkC,aAAAxkC,KAAAyiC,iBAAAzL,cACAh3B,KAAAykC,YAAAzkC,KAAAyiC,iBAAAiE,aAEA1mC,KAAA6iC,OAAAuG,cAAA,CACAtC,MAAA9mC,KAAAykC,YACA1Z,OAAA/qB,KAAAwkC,eAGA,IAAA6E,EAAArpC,KAAA0nC,2BAIA,GAAA,SAAA1nC,KAAA+jC,YAAA,CACA/jC,KAAA6jC,UAAA7jC,KAAAspC,kBAAAtpC,KAAA0nC,4BACA,IAAA6B,EAAAvpC,KAAAwpC,sBAAAxpC,KAAA4jC,oBACA5jC,KAAA2nC,oCACA3nC,KAAAypC,mBAAAF,QAGAvpC,KAAA6jC,UAAA7jC,KAAA0pC,oBAAA1pC,KAAA0nC,4BAAA1nC,KAAA2kC,YAIA3kC,KAAA2pC,iBAAAR,GACAnpC,KAAA4pC,sBACA5pC,KAAA6pC,sBAAAV,GACAnpC,KAAA8pC,aAEA9pC,KAAAslC,eAEA+D,EAAAvC,MAAA9mC,KAAAglC,qBAAA8B,MAAA,KAAAuC,EAAAte,OAAA/qB,KAAAglC,qBAAAja,OAAA,MACA/qB,KAAA+oC,gBAUAY,iBAAA,SAAAR,GACAnpC,KAAA8iC,MAAAuE,IAAA,CACA5vB,KAAAzX,KAAA8iC,MAAArrB,MAAA0xB,EAAArC,MAAA9mC,KAAAykC,aAAA,EACAxN,IAAAj3B,KAAA8iC,MAAA7L,KAAAkS,EAAApe,OAAA/qB,KAAAwkC,cAAA,KAOA+D,gBAAA,WACAvoC,KAAA+iC,SAAA,IAAA6D,OAAAmD,KAAA,CACAjD,MAAA9mC,KAAA8iC,MAAAgE,MACA/b,OAAA/qB,KAAA8iC,MAAA/X,OACAif,KAAA,kBACA1C,QAAA,SACAC,QAAA,SACA0C,yBAAA,iBACAxyB,KAAAzX,KAAA8iC,MAAArrB,KACAwf,IAAAj3B,KAAA8iC,MAAA7L,MAEAj3B,KAAA6iC,OAAApmB,IAAAzc,KAAA+iC,UACA/iC,KAAAslC,eAMAgD,kBAAA,WACA,IAAAzD,EAAA7kC,KAAA6kC,gBACAqF,EAAAlqC,KAAA0nC,2BAAAZ,MAAAjC,EAAAiD,gBAAAhB,MAEAqD,EAAAtF,EAAAkD,QAAAmC,EAAAlqC,KAAA6jC,UAAA7jC,KAAA2kC,YACAyF,EAAAvF,EAAAmD,QAAAkC,EAAAlqC,KAAA6jC,UAAA7jC,KAAA2kC,YAGAwF,GAAAnqC,KAAA8iC,MAAArrB,KACA2yB,GAAApqC,KAAA8iC,MAAA7L,IAEA,IAAAoT,EAAA,EACAC,EAAA,EAGAtqC,KAAA+iC,UAAA,IAAA8B,EAAAkD,SAAA,IAAAlD,EAAAmD,UACA,SAAAhoC,KAAA+jC,aACAsG,EAAArqC,KAAA+iC,SAAAtrB,KAAAzX,KAAA8iC,MAAArrB,KACA6yB,EAAAtqC,KAAA+iC,SAAA9L,IAAAj3B,KAAA8iC,MAAA7L,MAGAoT,EAAArqC,KAAAkjC,QAAAzrB,KAAAzX,KAAA8iC,MAAArrB,KACA6yB,EAAAtqC,KAAAkjC,QAAAjM,IAAAj3B,KAAA8iC,MAAA7L,KAIAkT,GAAAE,EACAD,GAAAE,EAGAzF,EAAAkD,SAAAsC,GAAAH,EAAAlqC,KAAA6jC,UAAA7jC,KAAA2kC,aACAE,EAAAmD,SAAAsC,GAAAJ,EAAAlqC,KAAA6jC,UAAA7jC,KAAA2kC,cAGA3kC,KAAAgjC,WAAA,IAAA4D,OAAA2D,MAAA,CACA,IAAA3D,OAAA4D,OAAA,CAAAC,OAAA,EAAAT,KAAA,kBAAAU,YAAA,EAAAC,OAAA,wBAAAlzB,KAAA,EAAAwf,IAAA,EAAAqQ,QAAA,SAAAC,QAAA,WACA,IAAAX,OAAA4D,OAAA,CAAAC,OAAA,EAAAT,KAAA,sBAAAU,YAAA,EAAAC,OAAA,wBAAAlzB,KAAA,EAAAwf,IAAA,EAAAqQ,QAAA,SAAAC,QAAA,YACA,CACAD,QAAA,SACAC,QAAA,SACA9vB,KAAA0yB,EACAlT,IAAAmT,IAGApqC,KAAAqoC,qBAAAxD,GACA7kC,KAAA6iC,OAAApmB,IAAAzc,KAAAgjC,aAMA4H,iBAAA,WACA5qC,KAAAgjC,YAGAhjC,KAAA6iC,OAAAvoB,OAAAta,KAAAgjC,YACAhjC,KAAAgjC,WAAA,MAHAhjC,KAAAsoC,oBAMAtoC,KAAAslC,eAMAsE,oBAAA,WACA,GAAA5pC,KAAA+iC,SAAA,CACA,IAAA8H,EAAA,CACApzB,KAAAzX,KAAAykC,YAAA,EACAxN,IAAAj3B,KAAAwkC,aAAA,GAIA,GAAA,SAAAxkC,KAAA+jC,YACA8G,EAAA/D,MAAA9mC,KAAAykC,YACAoG,EAAA9f,OAAA/qB,KAAAwkC,kBAGA,GAAAxkC,KAAA0kC,aAAA,CAEA,IAAAoG,EAAA9qC,KAAA0kC,aAIAwF,EAFAlqC,KAAA0nC,2BAEAZ,MAAAgE,EAAAhD,gBAAAhB,MAGA+D,EAAA/D,MAAAgE,EAAAhE,MAAAoD,EAAAlqC,KAAA6jC,UACAgH,EAAA9f,OAAA+f,EAAA/f,OAAAmf,EAAAlqC,KAAA6jC,UAGA7jC,KAAA8iC,MAAAuE,IAAA,CACA5vB,KAAAzX,KAAAykC,YAAA,EAAAqG,EAAA/C,QAAAmC,EACAjT,IAAAj3B,KAAAwkC,aAAA,EAAAsG,EAAA9C,QAAAkC,SAGAvrC,EAAAM,OAAA4rC,EAAA7qC,KAAA0nC,4BAGA1nC,KAAA+iC,SAAAsE,IAAAwD,KAIAhB,sBAAA,SAAAV,GACA,GAAAnpC,KAAAgjC,WAAA,CACA,IAAA+E,EAAA/nC,KAAAgjC,WAAAvrB,KAAAzX,KAAAykC,YAAA,EACAuD,EAAAhoC,KAAAgjC,WAAA/L,IAAAj3B,KAAAwkC,aAAA,EAEAuG,EAAA/qC,KAAA8iC,MAAAgE,MAEAkE,EADAhrC,KAAA0nC,2BAAAZ,MAAA9mC,KAAA6jC,UACAkH,EAAA/qC,KAAA2kC,YAEAoD,IAAAoB,EAAArC,MAAA9mC,KAAAykC,aAAA,EACAuD,IAAAmB,EAAApe,OAAA/qB,KAAAwkC,cAAA,EAEAuD,GAAAiD,EACAhD,GAAAgD,EAEAhrC,KAAAgjC,WAAAqE,IAAA,CACA5vB,KAAAzX,KAAAykC,YAAA,EAAAsD,EACA9Q,IAAAj3B,KAAAwkC,aAAA,EAAAwD,MAQAiD,sBAAA,WACA,OAAAjrC,KAAAyjC,iBAAA,KAAA,GAMAiE,yBAAA,WAiBA,YAhBA,IAAA1nC,KAAA0nC,yBAAAwD,IACAlrC,KAAA0nC,yBAAAwD,EAAA,IAGAlrC,KAAA0nC,yBAAAwD,EAAAC,WAAAnrC,KAAA2jC,eAAA3jC,KAAA0jC,cACA1jC,KAAA0nC,yBAAAwD,EAAAE,YAAAprC,KAAAwkC,aAAAxkC,KAAAykC,YAEAzkC,KAAA0nC,yBAAAwD,EAAAL,WAAA,GACA7qC,KAAA0nC,yBAAAwD,EAAAC,WAAAnrC,KAAA0nC,yBAAAwD,EAAAE,aACAprC,KAAA0nC,yBAAAwD,EAAAL,WAAA9f,OAAApa,KAAAkhB,IAAA7xB,KAAAwkC,aAAAxkC,KAAA2jC,gBACA3jC,KAAA0nC,yBAAAwD,EAAAL,WAAA/D,MAAAn2B,KAAAK,MAAAhR,KAAA0jC,eAAA1jC,KAAA2jC,eAAA3jC,KAAA0nC,yBAAAwD,EAAAL,WAAA9f,WAEA/qB,KAAA0nC,yBAAAwD,EAAAL,WAAA/D,MAAAn2B,KAAAkhB,IAAA7xB,KAAAykC,YAAAzkC,KAAA0jC,eACA1jC,KAAA0nC,yBAAAwD,EAAAL,WAAA9f,OAAApa,KAAAK,MAAAhR,KAAA2jC,gBAAA3jC,KAAA0nC,yBAAAwD,EAAAL,WAAA/D,MAAA9mC,KAAA0jC,iBAGA1jC,KAAA0nC,yBAAAwD,EAAAL,YAMAf,WAAA,gBACA,IAAA9pC,KAAA8pC,WAAAoB,IACAlrC,KAAA8pC,WAAAoB,EAAA,IAGAlrC,KAAA8pC,WAAAoB,EAAApD,gBAAA9nC,KAAA0nC,2BACA1nC,KAAA8iC,MAAAuE,IAAA,CACAP,MAAA9mC,KAAA8pC,WAAAoB,EAAApD,gBAAAhB,MAAA9mC,KAAA6jC,UACA9Y,OAAA/qB,KAAA8pC,WAAAoB,EAAApD,gBAAA/c,OAAA/qB,KAAA6jC,aAOA4E,qBAAA,WAEAzoC,KAAAwc,YAAAxc,KAAAumC,MAAA,QAAAvmC,KAAAqrC,iBAGArrC,KAAAwc,YAAA7d,EAAA,gBAAA,QAAAqB,KAAA4qC,kBAGA5qC,KAAAwc,YAAA7d,EAAA,gBAAA,SAAA,WACAqB,KAAAsrC,aAAA,OAEAtrC,KAAAwc,YAAA7d,EAAA,iBAAA,SAAA,WACAqB,KAAAsrC,YAAA,OAEAtrC,KAAAwc,YAAA7d,EAAA,kBAAA,SAAA,WACAqB,KAAAurC,UAAA,QAEAvrC,KAAAwc,YAAA7d,EAAA,oBAAA,SAAA,WACAqB,KAAAurC,UAAA,QAIAvrC,KAAAwrC,mBAAA,IAAAtsC,MAAAusC,eAAA,aAAA,CACAC,QAAA,KACA1rC,KAAA2rC,aAEAC,SAAAC,IACA7rC,KAAA8rC,WAAAD,IAEAE,MAAA,KACA/rC,KAAAgsC,YACAhsC,KAAAisC,uCAKAjsC,KAAAwc,YAAApX,QAAAqV,KAAA,WAAA,SAAApB,GACAA,EAAAyG,UAAA1a,QAAA8mC,YACAlsC,KAAAukC,cAAA,MAGAvkC,KAAAwc,YAAApX,QAAAqV,KAAA,SAAA,SAAApB,GACAA,EAAAyG,UAAA1a,QAAA8mC,YACAlsC,KAAAukC,cAAA,MAIAvkC,KAAAwc,YAAA7d,EAAA,kCAAAqB,KAAA4S,YAAA,QAAA5S,KAAAmsC,wBACAnsC,KAAAwc,YAAA7d,EAAA,qBAAAqB,KAAA4S,YAAA,QAAA5S,KAAAosC,yBACApsC,KAAAwc,YAAA7d,EAAA,0CAAAqB,KAAA4S,YAAA,QAAA5S,KAAAqsC,yBAQAF,uBAAA,SAAA9yB,GACA,IAAAizB,EAAA3tC,EAAA0a,EAAAE,eAAAvS,KAAA,cACA+uB,EAAAp3B,EAAA0a,EAAAE,eAIA,GAHAwc,EAAAnX,WAAAxI,YAAA,UACA2f,EAAAjkB,SAAA,UAEA,UAAAw6B,EAGA,OAFAtsC,KAAAusC,6BACAvsC,KAAAqsC,yBAIArsC,KAAAwsC,wBAEAxsC,KAAAysC,sBAAAH,GACAtsC,KAAA0sC,6BAQAN,wBAAA,SAAA/yB,GACA,GAAAA,EAAAE,cAAApU,QAAAnF,KAAAolC,sBAAA,CAGAplC,KAAAolC,sBAAA/rB,EAAAE,cAAApU,MAIA,IAFA,IAAAwnC,EAAAhuC,EAAA,mBAAAqB,KAAA4S,YAEAlT,EAAA,EAAAA,EAAAitC,EAAArsC,OAAAZ,IAAA,CACA,IAAAktC,EAAAjuC,EAAAguC,EAAAjtC,IACAktC,EAAA5lC,KAAA,aAAA,EAAA4lC,EAAA5lC,KAAA,eACA4lC,EAAA7tC,KAAA6tC,EAAA7tC,OAAAoC,MAAA,KAAA0rC,UAAApsC,KAAA,MAGAksC,EAAAhoB,OAAA,WAAAzY,UAMAmgC,uBAAA,WACA,IAAAC,EAAAtsC,KAAA8sC,uBAEAR,EAAAS,EAAA,GAAAT,EAAAU,EAAA,IACAhtC,KAAAysC,sBAAAH,EAAAS,EAAAT,EAAAU,GACAhtC,KAAA0sC,8BASAI,qBAAA,WACA,IAAAC,EAAAE,WAAAtuC,EAAA,wBAAA2F,OACA0oC,EAAAC,WAAAtuC,EAAA,wBAAA2F,OACA,MAAA,CACAyoC,EAAAtY,MAAAsY,GAAA,EAAAA,EACAC,EAAAvY,MAAAuY,GAAA,EAAAA,IAUAE,qBAAA,SAAAH,EAAAC,GACAruC,EAAA,wBAAA2F,IAAA2oC,WAAAF,IACApuC,EAAA,wBAAA2F,IAAA2oC,WAAAD,KAMAR,sBAAA,WACAxsC,KAAAqlC,yBAAA,EACA1mC,EAAA,mCAAAqB,KAAA4S,YAAAd,SAAA,UACAnT,EAAA,mCAAAqB,KAAA4S,YAAAwD,YAAA,UACAzX,EAAA,eAAAqB,KAAA4S,YAAAwD,YAAA,WAMAm2B,sBAAA,WACAvsC,KAAAqlC,0BAIArlC,KAAAqlC,yBAAA,EACA1mC,EAAA,mCAAAqB,KAAA4S,YAAAwD,YAAA,UACAzX,EAAA,mCAAAqB,KAAA4S,YAAAd,SAAA,UACAnT,EAAA,eAAAqB,KAAA4S,YAAAd,SAAA,YAQAu5B,gBAAA,SAAAhyB,GACA,IAAArZ,KAAA8jC,oBAAA,CACA,IAAAqJ,EAAAxuC,EAAA0a,EAAAE,eACAqJ,EAAAuqB,EAAAnmC,KAAA,QACAhH,KAAAumC,MAAAnwB,YAAA,YACA+2B,EAAAr7B,SAAA,YACA9R,KAAAotC,SAAAxqB,KASAwqB,SAAA,SAAAxqB,GACA5iB,KAAA+jC,cAAAnhB,IAIA5iB,KAAAymC,OAAA30B,SAAA,UACA9R,KAAAymC,OAAA9hB,OAAA,eAAA/B,EAAA,MACAxM,YAAA,UAEA,WAAAwM,EACA5iB,KAAAqtC,eAEArtC,KAAAstC,gBAIAttC,KAAA+c,wBAGA,SAAA/c,KAAA+jC,aAAA,SAAAnhB,EACA5iB,KAAAutC,kBACA,SAAAvtC,KAAA+jC,aAAA,SAAAnhB,GACA5iB,KAAAwtC,iBAIAxtC,KAAA+jC,YAAAnhB,IAWA4lB,kBAAA,SAAAsC,QACA,IAAA9qC,KAAAwoC,kBAAA0C,IACAlrC,KAAAwoC,kBAAA0C,EAAA,IAIAJ,EACA9qC,KAAA0kC,aAAAoG,EACA9qC,KAAAkjC,SACAljC,KAAAwoC,kBAAA0C,EAAAuC,WAAA,EAAAztC,KAAA6jC,UAEA7jC,KAAA0kC,aAAA,CACAqD,SAAA/nC,KAAAkjC,QAAAzrB,KAAAzX,KAAA8iC,MAAArrB,MAAAzX,KAAAwoC,kBAAA0C,EAAAuC,WACAzF,SAAAhoC,KAAAkjC,QAAAjM,IAAAj3B,KAAA8iC,MAAA7L,KAAAj3B,KAAAwoC,kBAAA0C,EAAAuC,WACA1iB,OAAA/qB,KAAAkjC,QAAAnY,OAAA/qB,KAAAwoC,kBAAA0C,EAAAuC,WACA3G,MAAA9mC,KAAAkjC,QAAA4D,MAAA9mC,KAAAwoC,kBAAA0C,EAAAuC,WACA3F,gBAAA9nC,KAAA0nC,8BAGA1nC,KAAAwoC,kBAAA0C,EAAAL,WAAA7qC,KAAA0nC,2BACA1nC,KAAA0kC,aAAA,CACAqD,QAAA,EACAC,QAAA,EACAjd,OAAA/qB,KAAAwoC,kBAAA0C,EAAAL,WAAA9f,OACA+b,MAAA9mC,KAAAwoC,kBAAA0C,EAAAL,WAAA/D,MACAgB,gBAAA9nC,KAAAwoC,kBAAA0C,EAAAL,cAQAxC,qBAAA,SAAAyC,QACA,IAAA9qC,KAAAqoC,qBAAA6C,IACAlrC,KAAAqoC,qBAAA6C,EAAA,IAIAJ,EACA9qC,KAAA6kC,gBAAAiG,EACA9qC,KAAAgjC,aACAhjC,KAAAqoC,qBAAA6C,EAAAuC,WAAA,EAAAztC,KAAA6jC,UACA7jC,KAAA6kC,gBAAA,CACAkD,SAAA/nC,KAAAgjC,WAAAvrB,KAAAzX,KAAA8iC,MAAArrB,MAAAzX,KAAAqoC,qBAAA6C,EAAAuC,WAAAztC,KAAA2kC,YACAqD,SAAAhoC,KAAAgjC,WAAA/L,IAAAj3B,KAAA8iC,MAAA7L,KAAAj3B,KAAAqoC,qBAAA6C,EAAAuC,WAAAztC,KAAA2kC,YACAmD,gBAAA9nC,KAAA0nC,8BAUA4D,YAAA,SAAAoC,GACA,IAAA1tC,KAAA8jC,oBAAA,CAEA,GAAA,KAAA4J,IAAA,KAAAA,EACA,OAAA,EAGA1tC,KAAA8jC,qBAAA,EACA9jC,KAAAyjC,kBAAAiK,EAGA1tC,KAAAyjC,iBAAAvhC,UAAAlC,KAAAyjC,iBAAA,KAAA,IAAA,IAEA,IAEAkK,EAFAC,EAAA5tC,KAAA8iC,MAAA+K,MAAAH,EACAI,EAAA9tC,KAAA0nC,2BAIAiG,EADA3tC,KAAAirC,wBACAjrC,KAAA0pC,oBAAA,CAAA3e,OAAA+iB,EAAAhH,MAAAA,MAAAgH,EAAA/iB,SAEA/qB,KAAA0pC,oBAAAoE,GAKA9tC,KAAA6jC,UAAA8J,IACAA,EAAA3tC,KAAA6jC,WAGA,IAAAkK,EAAA,CACAF,MAAA,KAAAH,EAAA,OAAA,QAGAM,EAAA,CACAH,MAAAD,EACA9G,MAAAgH,EAAAhH,MAAA6G,EACA5iB,OAAA+iB,EAAA/iB,OAAA4iB,GAGAhJ,EAAA,EACA3kC,KAAA2kC,YAAA,GACAA,EAAA,EAAA3kC,KAAA2kC,YACA3kC,KAAA2kC,YAAA,IAEA3kC,KAAA+iC,SAAA+D,MAAA9mC,KAAAwkC,aACAG,EAAA3kC,KAAAwkC,aAAAxkC,KAAA+iC,SAAA+D,MACA9mC,KAAA+iC,SAAAhY,OAAA/qB,KAAAykC,cACAE,EAAA3kC,KAAAykC,YAAAzkC,KAAA+iC,SAAAhY,QAEA/qB,KAAA2kC,YAAAA,GAGAA,EAAA,IACAqJ,EAAAlH,OAAAnC,EACAqJ,EAAAjjB,QAAA4Z,GAGA,IAAAmG,EAAA9qC,KAAA0kC,aAGA2F,EAAAS,EAAA/C,QACAuC,EAAAQ,EAAA9C,QACAiG,EAAAP,GAAA/8B,KAAAu9B,GAAA,KAIAC,EAAA9D,EAAA15B,KAAAy9B,IAAAH,GAAA3D,EAAA35B,KAAA09B,IAAAJ,GACAK,EAAAjE,EAAA15B,KAAA09B,IAAAJ,GAAA3D,EAAA35B,KAAAy9B,IAAAH,GAEA/D,EAAA4D,EAAAhH,MAAAgE,EAAAhD,gBAAAhB,MAEAyH,EAAAJ,EAAAjE,EAAAlqC,KAAA6jC,UAAA7jC,KAAA2kC,YACA6J,EAAAF,EAAApE,EAAAlqC,KAAA6jC,UAAA7jC,KAAA2kC,YAEAqJ,EAAAv2B,KAAAzX,KAAAykC,YAAA,EAAA8J,EACAP,EAAA/W,IAAAj3B,KAAAwkC,aAAA,EAAAgK,EAEA1D,EAAA/C,QAAAoG,EACArD,EAAA9C,QAAAsG,EAEA,IAAAG,EAAA3D,EAAAhE,MACAgE,EAAAhE,MAAAgE,EAAA/f,OACA+f,EAAA/f,OAAA0jB,EAEAzuC,KAAAwoC,kBAAAsC,GAEA9qC,KAAAgjC,YACAhjC,KAAA6iC,OAAAvoB,OAAAta,KAAAgjC,YAGAhjC,KAAA+iC,SAAA2L,QAAAX,EAAA,CACA32B,SAAApX,KAAAgU,SAAA26B,kBACAC,WAAA,KAEA,IAAAH,EAAAzuC,KAAA+iC,SAAAhY,OAAA4Z,EACA3kC,KAAA+iC,SAAAhY,OAAA/qB,KAAA+iC,SAAA+D,MAAAnC,EACA3kC,KAAA+iC,SAAA+D,MAAA2H,EACAzuC,KAAA+iC,SAAAsE,IAAA,CAAAwG,MAAA,OAKA7tC,KAAA8iC,MAAA4L,QAAAV,EAAA,CACApC,SAAA5rC,KAAA6iC,OAAAmE,UAAA/qB,KAAAjc,KAAA6iC,QACAzrB,SAAApX,KAAAgU,SAAA26B,kBACAC,WAAA,KACA,IAAAC,EAAA5B,YAAAjtC,KAAA8iC,MAAA+K,MAAA,KAAA,KACA7tC,KAAA8iC,MAAAuE,IAAA,CAAAwG,MAAAgB,IACA7uC,KAAA8jC,qBAAA,EACA9jC,KAAAgjC,YACAhjC,KAAA8uC,yBAAApB,GACA1tC,KAAA8rC,WAAA9rC,KAAAwrC,oBACAxrC,KAAA6iC,OAAApmB,IAAAzc,KAAAgjC,aAEAhjC,KAAA+uC,gCAYAxD,UAAA,SAAAvS,GACA,IAAAh5B,KAAA8jC,oBAAA,CACA9jC,KAAA8jC,qBAAA,EAEA9jC,KAAAirC,0BACAjS,EAAA,MAAAA,EAAA,IAAA,KAGAh5B,KAAAgjC,WACAhjC,KAAA6iC,OAAAvoB,OAAAta,KAAAgjC,YAEAhjC,KAAA+uC,2BAGA,IAAAC,EAAA,CAAArJ,EAAA3lC,KAAAykC,YAAA,EAAAmB,EAAA5lC,KAAAwkC,aAAA,GACAxkC,KAAAwrC,mBAAAyD,UAAAjvC,KAAAwjC,sBACAxjC,KAAAwjC,sBAAAxjC,KAAAwjC,qBACA,IAIA8G,EAAAD,EAJA6E,EAAA,CACArB,MAAA7tC,KAAAyjC,iBAAAzjC,KAAAwjC,sBAIAkB,EAAA1kC,KAAA0kC,aACAG,EAAA7kC,KAAA6kC,gBAGA,MAAA7L,GAAAh5B,KAAAirC,yBAAA,MAAAjS,IAAAh5B,KAAAirC,yBACAvG,EAAAqD,SAAArD,EAAAqD,QACAlD,EAAAkD,SAAAlD,EAAAkD,QACAsC,EAAArqC,KAAA8iC,MAAArrB,KAAAu3B,EAAArJ,EACAuJ,EAAAz3B,KAAAu3B,EAAArJ,EAAA0E,IAEA3F,EAAAsD,SAAAtD,EAAAsD,QACAnD,EAAAmD,SAAAnD,EAAAmD,QACAsC,EAAAtqC,KAAA8iC,MAAA7L,IAAA+X,EAAApJ,EACAsJ,EAAAjY,IAAA+X,EAAApJ,EAAA0E,GAGA,MAAAtR,GACAkW,EAAAC,QAAA,EAAAnvC,KAAA8iC,MAAAqM,OACAnvC,KAAA4kC,SAAAgB,EAAA,EAAA5lC,KAAA4kC,SAAAgB,IAEAsJ,EAAAE,QAAA,EAAApvC,KAAA8iC,MAAAsM,OACApvC,KAAA4kC,SAAAe,EAAA,EAAA3lC,KAAA4kC,SAAAe,GAGA3lC,KAAAwoC,kBAAA9D,GACA1kC,KAAAqoC,qBAAAxD,GAEA7kC,KAAA8iC,MAAA4L,QAAAQ,EAAA,CACAtD,SAAA5rC,KAAA6iC,OAAAmE,UAAA/qB,KAAAjc,KAAA6iC,QACAzrB,SAAApX,KAAAgU,SAAA26B,kBACAC,WAAA,KACA5uC,KAAA8jC,qBAAA,EACA9jC,KAAAgjC,aAEAhjC,KAAA8uC,yBAAA,GACA9uC,KAAA6iC,OAAApmB,IAAAzc,KAAAgjC,kBAYA8I,WAAA,SAAAD,GACA,IAAA7rC,KAAA8jC,oBAAA,CACA9jC,KAAA8jC,qBAAA,EAEA,IAAAuL,EAAArvC,KAAA8iC,MAAA+K,MAEA7tC,KAAAwjC,sBAAAxjC,KAAAgU,SAAAyxB,qBAAAwH,WAAApB,EAAA1mC,OAAAwL,KAAAK,MAAAi8B,WAAApB,EAAA1mC,SAAA,IAGAnF,KAAA8iC,MAAAuE,IAAA,CACAwG,MAAA7tC,KAAAyjC,iBAAAzjC,KAAAwjC,uBAIAxjC,KAAA6jC,UAAA7jC,KAAA0pC,oBAAA1pC,KAAA0nC,4BAAA1nC,KAAA2kC,YACA3kC,KAAA8pC,aAEA9pC,KAAA0kC,cACA1kC,KAAAsvC,kCAAAD,GAGArvC,KAAAslC,cAEAtlC,KAAA8jC,qBAAA,IAWAwL,kCAAA,SAAAD,GACA,IAOAhF,EAAAC,EAAAiF,EAAAC,EAAAtF,EAPA4D,EAAA9tC,KAAA0nC,2BACA+H,EAAAzvC,KAAA8iC,MAAA+K,MAAAwB,EACAvE,EAAA9qC,KAAA0kC,aAEAgL,EAAA1vC,KAAA6jC,UACA8L,EAAA,EAIA,EAAA,CAEA,IAAAC,EAAA9E,EAAA/C,QACA8H,EAAA/E,EAAA9C,QACAiG,EAAAwB,GAAA9+B,KAAAu9B,GAAA,KAIAqB,EAAAK,EAAAj/B,KAAAy9B,IAAAH,GAAA4B,EAAAl/B,KAAA09B,IAAAJ,GACAuB,EAAAI,EAAAj/B,KAAA09B,IAAAJ,GAAA4B,EAAAl/B,KAAAy9B,IAAAH,GAKA5D,EAAAkF,EAAAG,GAHAxF,EAAA4D,EAAAhH,MAAAgE,EAAAhD,gBAAAhB,OAIAwD,EAAAkF,EAAAE,EAAAxF,EAGA,IAAA4F,EAAA9vC,KAAA+vC,sBAAAL,GACAM,EAAA,CACAlJ,MAAA9mC,KAAA+iC,SAAA+D,MACA/b,OAAA/qB,KAAA+iC,SAAAhY,OACAtT,KAAAzX,KAAAykC,YAAA,EAAAzkC,KAAA+iC,SAAA+D,MAAA,EAAAuD,EACApT,IAAAj3B,KAAAwkC,aAAA,EAAAxkC,KAAA+iC,SAAAhY,OAAA,EAAAuf,GAGAoF,GADAC,EAAA3vC,KAAAiwC,4BAAAD,EAAAF,SAIA,IAAAH,GAGA3vC,KAAA8iC,MAAAuE,IAAA,CACA5vB,KAAAzX,KAAAykC,YAAA,EAAA4F,EACApT,IAAAj3B,KAAAwkC,aAAA,EAAA8F,IAIAQ,EAAA/C,QAAAwH,EACAzE,EAAA9C,QAAAwH,EACA1E,EAAAhE,MAAA9mC,KAAA+iC,SAAA+D,MAAA4I,EAAAxF,EACAY,EAAA/f,OAAA/qB,KAAA+iC,SAAAhY,OAAA2kB,EAAAxF,EAEAlqC,KAAAwoC,kBAAAsC,GAGA9qC,KAAA6jC,UAAA6L,EAEA1vC,KAAAgjC,YACAhjC,KAAA8uC,yBAAAW,GAEAzvC,KAAAkwC,gBAAAlwC,KAAAgjC,WAAAhjC,KAAA+iC,UAGA/iC,KAAAgjC,WAAAqE,IAAA,CAAAjN,QAAA,IAFAp6B,KAAAgjC,WAAAqE,IAAA,CAAAjN,QAAA,KAIA,IAAAqV,GACAzvC,KAAA+uC,2BAGA/uC,KAAA8pC,cAMAmC,kCAAA,WACA,GAAAjsC,KAAAgjC,aAAAhjC,KAAAkwC,gBAAAlwC,KAAAgjC,WAAAhjC,KAAA+iC,UAAA,CACA/iC,KAAAgjC,WAAAqE,IAAA,CAAAjN,QAAA,IACA,IAAA0Q,EAAA9qC,KAAA6kC,gBACAiG,EAAA/C,QAAA,EACA+C,EAAA9C,QAAA,EACAhoC,KAAAqoC,qBAAAyC,GACA9qC,KAAA4qC,qBAOAmE,yBAAA,WACA,IAAAjE,EAAA9qC,KAAA6kC,gBACAiG,EAAA/C,QAAA,EACA+C,EAAA9C,QAAA,EACAhoC,KAAAqoC,qBAAAyC,IAWAoF,gBAAA,SAAAC,EAAAC,GACA,OAAAD,EAAA14B,KAAA24B,EAAA34B,KAAA24B,EAAAtJ,MAAA,GACAqJ,EAAAlZ,IAAAmZ,EAAAnZ,IAAAmZ,EAAArlB,OAAA,GACAolB,EAAA14B,KAAA24B,EAAA34B,KAAA24B,EAAAtJ,MAAA,GACAqJ,EAAAlZ,IAAAmZ,EAAAnZ,IAAAmZ,EAAArlB,OAAA,GAQA+jB,yBAAA,SAAAjB,GACA,IAAAI,EAAAJ,GAAAl9B,KAAAu9B,GAAA,KACApD,EAAA9qC,KAAA6kC,gBAEAsF,EAAAW,EAAA/C,QACAqC,EAAAU,EAAA9C,QAIAqI,EAAAlG,EAAAx5B,KAAAy9B,IAAAH,GAAA7D,EAAAz5B,KAAA09B,IAAAJ,GACAqC,EAAAnG,EAAAx5B,KAAA09B,IAAAJ,GAAA7D,EAAAz5B,KAAAy9B,IAAAH,GACA/D,EAAAlqC,KAAA0nC,2BAAAZ,MAAAgE,EAAAhD,gBAAAhB,MAEAyJ,EAAAF,EAAAnG,EAAAlqC,KAAA6jC,UACA2M,EAAAF,EAAApG,EAAAlqC,KAAA6jC,UAEA7jC,KAAAgjC,WAAAvrB,KAAAzX,KAAA8iC,MAAArrB,KAAA84B,EACAvwC,KAAAgjC,WAAA/L,IAAAj3B,KAAA8iC,MAAA7L,IAAAuZ,EAEA1F,EAAA/C,QAAAsI,EACAvF,EAAA9C,QAAAsI,EACAtwC,KAAAqoC,qBAAAyC,IAUAmF,4BAAA,SAAAD,EAAAS,GAKA,IAJA,IACAC,EAcAf,EAfAgB,EAAA3wC,KAAA4wC,sBAAAZ,GAIAa,EAAA,EAAAA,EAAAF,EAAArwC,SACAowC,EAAAC,EAAAE,GAEA7wC,KAAA8wC,yBAAA,CAAAJ,GAAAD,IAHAI,IAOAH,GAAA,EAMA,GAAAA,EAEA,CAEA,IAAAK,EAAA/wC,KAAAgxC,gBAAAP,EAAAC,GAEAO,EAAA,CACAtL,EAAAqK,EAAAv4B,KAAAu4B,EAAAlJ,MAAA,EACAlB,EAAAoK,EAAA/Y,IAAA+Y,EAAAjlB,OAAA,GAKAmmB,EAAAvgC,KAAAwgC,KAAAJ,EAAA,GAAAnL,EAAAmL,EAAA,GAAAnL,GAAA8K,EAAA/K,GAAAoL,EAAA,GAAApL,EAAAoL,EAAA,GAAApL,GAAA+K,EAAA9K,EAAAmL,EAAA,GAAApL,EAAAoL,EAAA,GAAAnL,EAAAmL,EAAA,GAAAnL,EAAAmL,EAAA,GAAApL,GAAAh1B,KAAAygC,KAAAzgC,KAAA0gC,IAAAN,EAAA,GAAAnL,EAAAmL,EAAA,GAAAnL,EAAA,GAAAj1B,KAAA0gC,IAAAN,EAAA,GAAApL,EAAAoL,EAAA,GAAApL,EAAA,IACA2L,EAAA3gC,KAAAwgC,KAAAJ,EAAA,GAAAnL,EAAAmL,EAAA,GAAAnL,GAAAqL,EAAAtL,GAAAoL,EAAA,GAAApL,EAAAoL,EAAA,GAAApL,GAAAsL,EAAArL,EAAAmL,EAAA,GAAApL,EAAAoL,EAAA,GAAAnL,EAAAmL,EAAA,GAAAnL,EAAAmL,EAAA,GAAApL,GAAAh1B,KAAAygC,KAAAzgC,KAAA0gC,IAAAN,EAAA,GAAAnL,EAAAmL,EAAA,GAAAnL,EAAA,GAAAj1B,KAAA0gC,IAAAN,EAAA,GAAApL,EAAAoL,EAAA,GAAApL,EAAA,IAGAgK,GAAAuB,EAAAI,GAAAA,OAhBA3B,EAAA,EAmBA,OAAAA,GAQA7J,UAAA,SAAAzsB,GACA,IAAA8V,EAAAxwB,EAAA0a,EAAAE,eACA,GAAA4V,EAAAxZ,SAAA,YACA,OAAA,EAGAhX,EAAA,OAAAqB,KAAAuiC,UAAAzwB,SAAA,YACA9R,KAAAuiC,SAAAlwB,OAAA,+BAEA,IAAAk/B,EAAA,CACAvN,QAAAhkC,KAAAgkC,QACAP,iBAAAzjC,KAAAyjC,iBACA+N,cAAAxxC,KAAAwjC,qBACAxkC,QAAAmwB,EAAAxZ,SAAA,WAAA,EAAA,GAGA,GAAA3V,KAAA0kC,aAAA,CACA,IAAA+M,EAAA,GAEAA,EAAA1mB,OAAA/qB,KAAA0kC,aAAA3Z,OACA0mB,EAAA3K,MAAA9mC,KAAA0kC,aAAAoC,MACA2K,EAAA1J,QAAA/nC,KAAA0kC,aAAAqD,QACA0J,EAAAzJ,QAAAhoC,KAAA0kC,aAAAsD,QAEAuJ,EAAAzJ,gBAAA9nC,KAAA0kC,aAAAoD,gBAEAyJ,EAAAE,SAAAA,OAEAF,EAAAzJ,gBAAA9nC,KAAA0nC,2BAGA1nC,KAAAgjC,aACAuO,EAAAvO,WAAAhjC,KAAA6kC,iBAGA0M,EAAA3M,SAAA5kC,KAAA4kC,SACA2M,EAAAG,KAAA1xC,KAAA6jC,UAEA3kC,MAAA4H,kBAAA,oBAAAyqC,EAAAvqC,IACAhH,KAAAuiC,SAAA3sB,KAAA,QAAAQ,YAAA,YAAAu7B,MAAA/7B,KAAA,YAAA0E,SAEAtT,EAAAY,MACAM,MAAAlB,EAAAY,QAIA5H,KAAAoiC,SACApiC,KAAAme,OACAjf,MAAA8I,GAAAiY,eASAypB,oBAAA,SAAAmB,GAEA,IAAAoD,EAAAt9B,KAAAwgC,IAAAnxC,KAAAwjC,uBAAA7yB,KAAAu9B,GAAA,KAGA0D,EAAAjhC,KAAA09B,IAAAJ,GAAApD,EAAA9f,OAAApa,KAAAy9B,IAAAH,GAAApD,EAAA/D,MACA+K,EAAAlhC,KAAA09B,IAAAJ,GAAApD,EAAA/D,MAAAn2B,KAAAy9B,IAAAH,GAAApD,EAAA9f,OAGA,OAAApa,KAAA6Y,IAAAooB,EAAA/G,EAAA/D,MAAA+K,EAAAhH,EAAA9f,SAQAue,kBAAA,SAAAuB,GAEA,IAAAiH,EAAA9xC,KAAA+xC,qBAAAlH,GAGAmH,EAAA,EACA,GAAAF,EAAA/mB,OAAA/qB,KAAAwkC,cAAAsN,EAAAhL,MAAA9mC,KAAAykC,YAAA,CACA,IAAAwN,EAAAjyC,KAAAwkC,aAAAsN,EAAA/mB,OACAmnB,EAAAlyC,KAAAykC,YAAAqN,EAAAhL,MACAkL,EAAArhC,KAAAkhB,IAAAqgB,EAAAD,GAGA,OAAAD,GAMAG,qBAAA,SAAAtH,GACA,OAAA7qC,KAAA0pC,oBAAAmB,GAAA7qC,KAAAspC,kBAAAuB,IAQAc,UAAA,WACA,IAAA3rC,KAAA6S,KAAA,CACA,IAyBAnT,EAzBA0yC,EAAA,CACA1H,YAAA,EACAC,OAAA,yBAIA0H,EAAAryC,KAAA+iC,SAAA+D,MACAwL,EAAAtyC,KAAA+iC,SAAAhY,OACAwnB,EAAAF,EAAA,EACAG,EAAAF,EAAA,EAEAz/B,EAAA,CACA,IAAA+zB,OAAAmD,KAAA,CACAW,YAAA,EACAC,OAAA,sBACArD,QAAA,SACAC,QAAA,SACAT,MAAAuL,EACAtnB,OAAAunB,EACA76B,KAAA46B,EAAA,EACApb,IAAAqb,EAAA,EACAtI,KAAA,yBAKA,IAAAtqC,EAAA,EAAAA,GArBA,EAqBAA,IACAmT,EAAA3R,KAAA,IAAA0lC,OAAA6L,KAAA,CAAA/yC,EAAA6yC,EAAA,EAAA7yC,EAAA6yC,EAAAD,GAAAF,IAEA,IAAA1yC,EAAA,EAAAA,GAxBA,EAwBAA,IACAmT,EAAA3R,KAAA,IAAA0lC,OAAA6L,KAAA,CAAA,EAAA/yC,EAAA8yC,EAAAH,EAAA3yC,EAAA8yC,GAAAJ,IAGApyC,KAAA6S,KAAA,IAAA+zB,OAAA2D,MAAA13B,EAAA,CACA4E,KAAAzX,KAAAykC,YAAA,EACAxN,IAAAj3B,KAAAwkC,aAAA,EACA8C,QAAA,SACAC,QAAA,SACAsG,MAAA7tC,KAAA+iC,SAAA8K,QAGA7tC,KAAA6iC,OAAApmB,IAAAzc,KAAA6S,MACA7S,KAAAslC,gBAOA0G,UAAA,WACAhsC,KAAA6iC,OAAAvoB,OAAAta,KAAA6S,MACA7S,KAAA6S,KAAA,KACA7S,KAAAslC,eAMAoN,UAAA,WACA1yC,KAAAwqB,WAMAmQ,KAAA,WACA36B,KAAA0vB,OAEA/wB,EAAA,QAAAmT,SAAA,aAMAqM,KAAA,WACAne,KAAA4+B,qBACA5+B,KAAAwrC,mBAAA5M,qBACAjgC,EAAA,QAAAyX,YAAA,YACApW,KAAA0vB,QAMA0S,OAAA,WACApiC,KAAAgU,SAAAouB,SACApiC,KAAAiX,QAAA,SAMAo2B,aAAA,WACArtC,KAAAsiC,YAAAlsB,YAAA,WAMAk3B,cAAA,WACAttC,KAAAsiC,YAAAxwB,SAAA,WAMA07B,eAAA,WACA,IAAA1F,EAAA9nC,KAAA0nC,2BACA1nC,KAAA6jC,UAAA7jC,KAAAspC,kBAAAxB,GAEA,IAAAiG,EAAA,CACAjH,MAAA9mC,KAAAykC,YACA1Z,OAAA/qB,KAAAwkC,cAGAwJ,EAAA,CACAlH,MAAAgB,EAAAhB,MAAA9mC,KAAA6jC,UACA9Y,OAAA+c,EAAA/c,OAAA/qB,KAAA6jC,UACApsB,KAAAzX,KAAAykC,YAAA,EACAxN,IAAAj3B,KAAAwkC,aAAA,GA6BAxkC,KAAA2yC,sBA1BA,KACA3yC,KAAA2nC,oCAGA,IAAAmD,EAAA9qC,KAAA0kC,aACAoJ,EAAA9tC,KAAA0nC,2BACAwC,EAAA4D,EAAAhH,MAAAgE,EAAAhD,gBAAAhB,MAGA8L,EAAA,CACAn7B,KAAAzX,KAAA8iC,MAAArrB,KAAAqzB,EAAA/C,QAAAmC,EAAAlqC,KAAA6jC,UACA5M,IAAAj3B,KAAA8iC,MAAA7L,IAAA6T,EAAA9C,QAAAkC,EAAAlqC,KAAA6jC,UACAiD,MAAAgE,EAAAhE,MAAAoD,EAAAlqC,KAAA6jC,UACA9Y,OAAA+f,EAAA/f,OAAAmf,EAAAlqC,KAAA6jC,WAGA7jC,KAAA6yC,aAAAD,GAEA5yC,KAAAgjC,aACAkH,EAAA4D,EAAAhH,MAAA9mC,KAAA6kC,gBAAAiD,gBAAAhB,MACA9mC,KAAAgjC,WAAAvrB,KAAAzX,KAAA8iC,MAAArrB,KAAAzX,KAAA6kC,gBAAAkD,QAAAmC,EAAAlqC,KAAA6jC,UACA7jC,KAAAgjC,WAAA/L,IAAAj3B,KAAA8iC,MAAA7L,IAAAj3B,KAAA6kC,gBAAAmD,QAAAkC,EAAAlqC,KAAA6jC,UACA7jC,KAAA6iC,OAAApmB,IAAAzc,KAAAgjC,cAIAgL,EAAAD,IAMAR,gBAAA,WACA,IAAAQ,EAAA,GAEA/tC,KAAA8yC,eACA,IAAAhL,EAAA9nC,KAAA0nC,2BACAqL,EAAA/yC,KAAA0pC,oBAAA5B,GAAA9nC,KAAA2kC,YACAqO,EAAAD,EAAA/yC,KAAA6jC,UACA7jC,KAAA6jC,UAAAkP,EAEA,IAAA/E,EAAA,CACAlH,MAAAgB,EAAAhB,MAAA9mC,KAAA6jC,UACA9Y,OAAA+c,EAAA/c,OAAA/qB,KAAA6jC,UACApsB,KAAAzX,KAAAykC,YAAA,EACAxN,IAAAj3B,KAAAwkC,aAAA,GAMAyO,GAHAjzC,KAAAkjC,QAAAzrB,KAAAzX,KAAA8iC,MAAArrB,MAGAu7B,EACAE,GAHAlzC,KAAAkjC,QAAAjM,IAAAj3B,KAAA8iC,MAAA7L,KAGA+b,EACAhF,EAAAv2B,KAAAzX,KAAAykC,YAAA,EAAAwO,EACAjF,EAAA/W,IAAAj3B,KAAAwkC,aAAA,EAAA0O,EAGAnF,EAAAhjB,OAAA/qB,KAAAkjC,QAAAnY,OAAAioB,EACAjF,EAAAjH,MAAA9mC,KAAAkjC,QAAA4D,MAAAkM,IAEAhzC,KAAAgjC,YAAAhjC,KAAAgjC,aAAAhjC,KAAAkwC,gBAAAlwC,KAAAgjC,WAAAhjC,KAAAkjC,YACAljC,KAAAgjC,YACAhjC,KAAA4qC,mBAGA5qC,KAAA+uC,4BAaA/uC,KAAA2yC,sBAVA,KAEA,GAAA3yC,KAAAgjC,WAAA,CACA,IAAAkH,EAAAlqC,KAAA0nC,2BAAAZ,MAAA9mC,KAAA6kC,gBAAAiD,gBAAAhB,MACA9mC,KAAAgjC,WAAAvrB,KAAAzX,KAAA8iC,MAAArrB,KAAAzX,KAAA6kC,gBAAAkD,QAAAmC,EAAAlqC,KAAA6jC,UACA7jC,KAAAgjC,WAAA/L,IAAAj3B,KAAA8iC,MAAA7L,IAAAj3B,KAAA6kC,gBAAAmD,QAAAkC,EAAAlqC,KAAA6jC,UACA7jC,KAAA6iC,OAAApmB,IAAAzc,KAAAgjC,cAIAgL,EAAAD,IAWA4E,sBAAA,SAAA1rC,EAAA+mC,EAAAD,GACA/tC,KAAA8jC,sBACA9jC,KAAA8jC,qBAAA,EAGA9jC,KAAAgjC,aACAhjC,KAAA6iC,OAAAvoB,OAAAta,KAAAgjC,YACAhjC,KAAAslC,eAGAtlC,KAAA8iC,MAAA4L,QAAAV,EAAA,CACApC,SAAA5rC,KAAA6iC,OAAAmE,UAAA/qB,KAAAjc,KAAA6iC,QACAzrB,SAAApX,KAAAgU,SAAA26B,kBACAC,WAAA,KACA3nC,IACAjH,KAAA8jC,qBAAA,EACA9jC,KAAAslC,iBAIAtlC,KAAA+iC,SAAA2L,QAAAX,EAAA,CACA32B,SAAApX,KAAAgU,SAAA26B,sBAKAhI,aAAA,WACA3mC,KAAA4iC,eAAAjkC,EAAA,yCAAA2P,SAAA3P,EAAA,SAAAqB,KAAA4S,aACA,IACAsR,EADA1d,SAAAooB,eAAA,kBACAukB,WAAA,MACAzyC,EAAA,IAAA6B,KAEA6wC,EAAAlvB,EAAA2e,OAAAiE,MACAuM,EAAAnvB,EAAA2e,OAAA9X,OAmBA/qB,KAAA8kC,gBAAAj5B,OAAAynC,aAjBA,WACA,IAAAC,EAAArxC,UAAA,IAAAK,KAAA7B,GAAA,IALA,IAAA,GAMAwjB,EAAAsvB,OACAtvB,EAAAuvB,UAAA,EAAA,EAAAL,EAAAC,GACAnvB,EAAAwvB,UAAAN,EAAA,EAAAC,EAAA,GACAnvB,EAAAyvB,OAAA,EAAAhjC,KAAAu9B,GAAAqF,GACA,IAAA,IAAA7zC,EAAA,EAAAA,EAVA,GAUAA,IACAwkB,EAAA0vB,YACA1vB,EAAAyvB,OAAA,EAAAhjC,KAAAu9B,GAZA,IAaAhqB,EAAA2vB,OAAAT,EAAA,GAAA,GACAlvB,EAAA4vB,OAAAV,EAAA,EAAA,GACAlvB,EAAA6vB,UAAAX,EAAA,GACAlvB,EAAA8vB,YAAA,oBAAAt0C,EAhBA,GAgBA,IACAwkB,EAAAymB,SAEAzmB,EAAA+vB,YAEA,IAAA,KAGAnL,aAAA,WACAj9B,OAAAqoC,cAAAl0C,KAAA8kC,iBACA9kC,KAAA4iC,eAAAtoB,SACAta,KAAA4iC,eAAA,MAQAiQ,aAAA,SAAAsB,GACAn0C,KAAAo0C,mBAAAD,GACAn0C,KAAAq0C,yBACAr0C,KAAAulC,iBAMAuN,aAAA,WACA9yC,KAAAkjC,UACAljC,KAAAijC,eAAA3oB,OAAAta,KAAAkjC,SACAljC,KAAAijC,eAAA3oB,OAAAta,KAAAsjC,eACAtjC,KAAAijC,eAAA3oB,OAAAta,KAAAojC,gBACApjC,KAAAijC,eAAA3oB,OAAAta,KAAAqjC,aACArjC,KAAAijC,eAAA3oB,OAAAta,KAAAmjC,mBACAnjC,KAAAijC,eAAA3oB,OAAAta,KAAAujC,kBAEAvjC,KAAAijC,eAAA,KACAjjC,KAAAulC,cAAA,OASA6O,mBAAA,SAAAD,GAEAn0C,KAAAijC,eAAA,IAAA2D,OAAAC,aAAA,kBAAA,CACAyN,gBAAA,gBACAC,YAAA,UACAC,WAAA,IAGAx0C,KAAAijC,eAAAmG,cAAA,CACAtC,MAAA9mC,KAAAykC,YACA1Z,OAAA/qB,KAAAwkC,eAGAxkC,KAAAulC,cAAA,IAAAngC,QAAAyZ,sBAAA7e,KAAAijC,eAAA+D,UAAA/qB,KAAAjc,KAAAijC,iBAEAtkC,EAAA,mBAAAqB,KAAAyiC,kBAAA3X,IAAA,CACAwR,SAAA,WACArF,IAAA,EACAxf,KAAA,IAGAzX,KAAAsjC,cAAA,IAAAsD,OAAAmD,KAAA,CACAtyB,KAAAzX,KAAAykC,YAAA,EACAxN,IAAAj3B,KAAAwkC,aAAA,EACA8C,QAAA,SACAC,QAAA,SACAT,MAAA9mC,KAAAykC,YACA1Z,OAAA/qB,KAAAwkC,aACAwF,KAAA,oBAIA,IAAAlC,EAAA9nC,KAAA0nC,2BACA+M,EAAA,IAAAz0C,KAAAwjC,qBAAA,EAAA,IAAAxjC,KAAAmyC,qBAAArK,GACA4M,EAAA5M,EAAAhB,MAAA2N,EACAE,EAAA7M,EAAA/c,OAAA0pB,EAEA,GAAAz0C,KAAAirC,wBAAA,CACA,IAAAwD,EAAAkG,EACAA,EAAAD,EACAA,EAAAjG,EAIAzuC,KAAAkjC,QAAA,IAAA0D,OAAAmD,KAAA,CACAtyB,KAAAzX,KAAAykC,YAAA,EACAxN,IAAAj3B,KAAAwkC,aAAA,EACA8C,QAAA,SACAC,QAAA,SACAT,MAAA4N,EACA3pB,OAAA4pB,EACAhK,OAAA,QACAX,KAAA,kBACAU,YAAA,IAIAyJ,GACAn0C,KAAAkjC,QAAAmE,IAAA8M,GAGAn0C,KAAAkjC,QAAA+G,yBAAA,kBACAjqC,KAAAijC,eAAAxmB,IAAAzc,KAAAsjC,eACAtjC,KAAAijC,eAAAxmB,IAAAzc,KAAAkjC,UAMAmR,uBAAA,gBACA,IAAAr0C,KAAAq0C,uBAAAnJ,IACAlrC,KAAAq0C,uBAAAnJ,EAAA,IAGAlrC,KAAAojC,iBACApjC,KAAAijC,eAAA3oB,OAAAta,KAAAojC,gBACApjC,KAAAijC,eAAA3oB,OAAAta,KAAAqjC,aACArjC,KAAAijC,eAAA3oB,OAAAta,KAAAmjC,mBACAnjC,KAAAijC,eAAA3oB,OAAAta,KAAAujC,mBAEAvjC,KAAAq0C,uBAAAnJ,EAAA0J,YAAA,CACAlK,YAAA,EACAC,OAAA,mBACAX,MAAA,GAGAhqC,KAAAq0C,uBAAAnJ,EAAA2J,YAAA,CACAnK,YAAA,EACAC,OAAA,yBAIA3qC,KAAAq0C,uBAAAnJ,EAAA4J,UAAA,CACA,IAAAlO,OAAAmO,KAAA,sBAAA/0C,KAAAq0C,uBAAAnJ,EAAA0J,aACA,IAAAhO,OAAAmO,KAAA,MAAA/0C,KAAAkjC,QAAA4D,MAAA,GAAA,SAAA9mC,KAAAkjC,QAAA4D,MAAA,GAAA,SAAA9mC,KAAAkjC,QAAA4D,MAAA,GAAA,MAAA9mC,KAAAq0C,uBAAAnJ,EAAA0J,aACA,IAAAhO,OAAAmO,KAAA,MAAA/0C,KAAAkjC,QAAA4D,MAAA,GAAA,KAAA9mC,KAAAkjC,QAAAnY,OAAA,GAAA,MAAA/qB,KAAAkjC,QAAA4D,MAAA,GAAA,KAAA9mC,KAAAkjC,QAAAnY,OAAA,GAAA,OAAA/qB,KAAAkjC,QAAA4D,MAAA,GAAA,KAAA9mC,KAAAkjC,QAAAnY,OAAA,GAAA/qB,KAAAq0C,uBAAAnJ,EAAA0J,aACA,IAAAhO,OAAAmO,KAAA,SAAA/0C,KAAAkjC,QAAAnY,OAAA,GAAA,SAAA/qB,KAAAkjC,QAAAnY,OAAA,GAAA,SAAA/qB,KAAAkjC,QAAAnY,OAAA,GAAA/qB,KAAAq0C,uBAAAnJ,EAAA0J,cAGA50C,KAAAojC,eAAA,IAAAwD,OAAA2D,MAAAvqC,KAAAq0C,uBAAAnJ,EAAA4J,UAAA,CACAr9B,KAAAzX,KAAAkjC,QAAAzrB,KACAwf,IAAAj3B,KAAAkjC,QAAAjM,IACAqQ,QAAA,SACAC,QAAA,WAIAvnC,KAAAmjC,kBAAA,IAAAyD,OAAAmD,KAAA,CACAtyB,KAAAzX,KAAAkjC,QAAAzrB,KACAwf,IAAAj3B,KAAAkjC,QAAAjM,IACA6P,MAAA9mC,KAAAkjC,QAAA4D,MACA/b,OAAA/qB,KAAAkjC,QAAAnY,OACAif,KAAA,gBACAW,OAAA,wBACAD,YAAA,EACApD,QAAA,SACAC,QAAA,WAGAvnC,KAAAqjC,YAAA,IAAAuD,OAAA2D,MACA,CACA,IAAA3D,OAAA6L,KAAA,CAAA,IAAAzyC,KAAAkjC,QAAA4D,MAAA,EAAA,IAAA9mC,KAAAkjC,QAAA4D,MAAA9mC,KAAAkjC,QAAAnY,QAAA/qB,KAAAq0C,uBAAAnJ,EAAA2J,aACA,IAAAjO,OAAA6L,KAAA,CAAA,IAAAzyC,KAAAkjC,QAAA4D,MAAA,EAAA,IAAA9mC,KAAAkjC,QAAA4D,MAAA9mC,KAAAkjC,QAAAnY,QAAA/qB,KAAAq0C,uBAAAnJ,EAAA2J,aACA,IAAAjO,OAAA6L,KAAA,CAAA,EAAA,IAAAzyC,KAAAkjC,QAAAnY,OAAA/qB,KAAAkjC,QAAA4D,MAAA,IAAA9mC,KAAAkjC,QAAAnY,QAAA/qB,KAAAq0C,uBAAAnJ,EAAA2J,aACA,IAAAjO,OAAA6L,KAAA,CAAA,EAAA,IAAAzyC,KAAAkjC,QAAAnY,OAAA/qB,KAAAkjC,QAAA4D,MAAA,IAAA9mC,KAAAkjC,QAAAnY,QAAA/qB,KAAAq0C,uBAAAnJ,EAAA2J,cACA,CACAp9B,KAAAzX,KAAAkjC,QAAAzrB,KACAwf,IAAAj3B,KAAAkjC,QAAAjM,IACAqQ,QAAA,SACAC,QAAA,WAGAvnC,KAAAq0C,uBAAAnJ,EAAA8J,YAAAh1C,KAAAmjC,kBAAAlM,IAAAj3B,KAAAkjC,QAAAnY,OAAA,EAAA,GACA/qB,KAAAq0C,uBAAAnJ,EAAA+J,wBAAA,gBAEAj1C,KAAAq0C,uBAAAnJ,EAAA8J,YAAA,GAAAh1C,KAAAwkC,aAAA,IACAxkC,KAAAq0C,uBAAAnJ,EAAA8J,aAAA,GACAh1C,KAAAq0C,uBAAAnJ,EAAA+J,wBAAA,mBAGAj1C,KAAAujC,iBAAA,IAAAqD,OAAAsO,QAAAvkC,KAAAK,MAAAhR,KAAAkjC,QAAA4D,OAAA,MAAAn2B,KAAAK,MAAAhR,KAAAkjC,QAAAnY,QAAA,CACAtT,KAAAzX,KAAAmjC,kBAAA1rB,KACAwf,IAAAj3B,KAAAq0C,uBAAAnJ,EAAA8J,YACAG,SAAA,GACAnL,KAAA,mBACAsK,gBAAAt0C,KAAAq0C,uBAAAnJ,EAAA+J,wBACAG,KAAA,QACAtO,MAAA,GACA/b,OAAA,GACAuc,QAAA,SACAC,QAAA,SACA8N,UAAA,WAGAr1C,KAAAijC,eAAAxmB,IAAAzc,KAAAojC,gBACApjC,KAAAijC,eAAAxmB,IAAAzc,KAAAqjC,aACArjC,KAAAijC,eAAAxmB,IAAAzc,KAAAmjC,mBACAnjC,KAAAijC,eAAAxmB,IAAAzc,KAAAujC,mBAQAkG,mBAAA,SAAA6L,GACA,GAAAt1C,KAAAijC,eAAA,CAKA,IAAAsS,EACAv1C,KAAAkjC,QAAAzrB,KAAAzX,KAAAijC,eAAA6D,MAAA,EADAyO,EAEAv1C,KAAAkjC,QAAAjM,IAAAj3B,KAAAijC,eAAAlY,OAAA,EAIA/qB,KAAAijC,eAAAmG,cAAA,CACAtC,MAAA9mC,KAAAykC,YACA1Z,OAAA/qB,KAAAwkC,eAIA,IACAgR,EADAx1C,KAAAwpC,sBAAAxpC,KAAA4jC,oBACAkD,MAAAwO,EAAAxO,MAGA9mC,KAAAkjC,QAAA4D,MAAAn2B,KAAAK,MAAAhR,KAAAkjC,QAAA4D,MAAA0O,GACAx1C,KAAAkjC,QAAAnY,OAAApa,KAAAK,MAAAhR,KAAAkjC,QAAAnY,OAAAyqB,GAIAx1C,KAAAkjC,QAAAzrB,KAAAzX,KAAAykC,YAAA,EAAA8Q,EAAAC,EACAx1C,KAAAkjC,QAAAjM,IAAAj3B,KAAAwkC,aAAA,EAAA+Q,EAAAC,EAGAx1C,KAAAsjC,cAAA+D,IAAA,CACAP,MAAA9mC,KAAAykC,YACA1Z,OAAA/qB,KAAAwkC,aACA/sB,KAAAzX,KAAAykC,YAAA,EACAxN,IAAAj3B,KAAAwkC,aAAA,IAGAxkC,KAAAq0C,yBACAr0C,KAAAulC,kBAQAiE,sBAAA,SAAAiM,GACA,MAAA,CACA3O,MAAAn2B,KAAA6Y,IAAAisB,EAAA/oC,EAAAi5B,EAAA8P,EAAA9oC,EAAAg5B,EAAA8P,EAAA5zC,EAAA8jC,EAAA8P,EAAAC,EAAA/P,GAAAh1B,KAAAkhB,IAAA4jB,EAAA/oC,EAAAi5B,EAAA8P,EAAA9oC,EAAAg5B,EAAA8P,EAAA5zC,EAAA8jC,EAAA8P,EAAAC,EAAA/P,GACA5a,OAAApa,KAAA6Y,IAAAisB,EAAA/oC,EAAAk5B,EAAA6P,EAAA9oC,EAAAi5B,EAAA6P,EAAA5zC,EAAA+jC,EAAA6P,EAAAC,EAAA9P,GAAAj1B,KAAAkhB,IAAA4jB,EAAA/oC,EAAAk5B,EAAA6P,EAAA9oC,EAAAi5B,EAAA6P,EAAA5zC,EAAA+jC,EAAA6P,EAAAC,EAAA9P,KASA+C,iBAAA,SAAAtvB,GAEA,IAAA4uB,EAAAjoC,KAAAgjC,YAAAhjC,KAAA21C,aAAAt8B,EAAArZ,KAAAgjC,YACA4S,EAAA51C,KAAAijC,gBAAAjjC,KAAA21C,aAAAt8B,EAAArZ,KAAAkjC,SACArN,EAAA71B,KAAAijC,gBAAAjjC,KAAA61C,sBAAAx8B,IAEAwc,GAAA+f,GAAA3N,KACAjoC,KAAAqkC,eAAAhrB,EAAAy8B,MACA91C,KAAAskC,eAAAjrB,EAAA08B,MAEA9N,EACAjoC,KAAAokC,eAAA,EACAvO,EACA71B,KAAAmkC,eAAAtO,EACA+f,IACA51C,KAAAkkC,iBAAA,KAUAwE,iBAAA,SAAArvB,GACA,OAAArZ,KAAAklC,gBACA9/B,QAAAyZ,sBAAA7e,KAAAg2C,yBAAA/5B,KAAAjc,OAEAA,KAAAklC,eAAA7rB,GAGA28B,yBAAA,WACA,OAAAh2C,KAAAklC,iBAIAllC,KAAAgjC,YAAAhjC,KAAAokC,eACApkC,KAAAi2C,iBAAAj2C,KAAAklC,gBACAllC,KAAAqoC,uBACAroC,KAAAslC,eACAtlC,KAAAkkC,iBAAAlkC,KAAAmkC,gBACAnkC,KAAAkkC,gBACAlkC,KAAAk2C,mBAAAl2C,KAAAklC,gBAEAllC,KAAAm2C,qBAAAn2C,KAAAklC,gBAGAllC,KAAAq0C,yBAEAr0C,KAAAwoC,oBACAxoC,KAAAulC,iBAEAvlC,KAAAo2C,gBAAAp2C,KAAAklC,gBAGAllC,KAAAqkC,eAAArkC,KAAAklC,eAAA4Q,MACA91C,KAAAskC,eAAAtkC,KAAAklC,eAAA6Q,MAEA/1C,KAAAklC,eAAA,OAQA0D,eAAA,SAAAvvB,GACArZ,KAAAkkC,iBAAA,EACAlkC,KAAAmkC,gBAAA,EACAnkC,KAAAokC,eAAA,GAQAyE,gBAAA,SAAAxvB,GACArZ,KAAA4oC,eAAAvvB,GACArZ,KAAAklC,eAAA7rB,EACArZ,KAAAg2C,4BAQAE,mBAAA,SAAA78B,GAQA,QAPA,IAAArZ,KAAAk2C,mBAAAhL,IACAlrC,KAAAk2C,mBAAAhL,EAAA,IAGAlrC,KAAAk2C,mBAAAhL,EAAAb,OAAAhxB,EAAAy8B,MAAA91C,KAAAqkC,eACArkC,KAAAk2C,mBAAAhL,EAAAZ,OAAAjxB,EAAA08B,MAAA/1C,KAAAskC,eAEA,IAAAtkC,KAAAk2C,mBAAAhL,EAAAb,QAAA,IAAArqC,KAAAk2C,mBAAAhL,EAAAZ,OACA,OAAA,EAaA,GAVAtqC,KAAAk2C,mBAAAhL,EAAA8E,UAAA,CACAv4B,KAAAzX,KAAAkjC,QAAAzrB,KAAAzX,KAAAkjC,QAAA4D,MAAA,EACA7P,IAAAj3B,KAAAkjC,QAAAjM,IAAAj3B,KAAAkjC,QAAAnY,OAAA,EACA+b,MAAA9mC,KAAAkjC,QAAA4D,MACA/b,OAAA/qB,KAAAkjC,QAAAnY,QAGA/qB,KAAAk2C,mBAAAhL,EAAAmL,SAAAr2C,KAAA4wC,sBAAA5wC,KAAAk2C,mBAAAhL,EAAA8E,UAAAhwC,KAAAk2C,mBAAAhL,EAAAb,OAAArqC,KAAAk2C,mBAAAhL,EAAAZ,SAGAtqC,KAAA8wC,yBAAA9wC,KAAAk2C,mBAAAhL,EAAAmL,SAAAr2C,KAAA4jC,oBAAA,CAcA,IAVA5jC,KAAAk2C,mBAAAhL,EAAAoL,IAAA,EACAt2C,KAAAk2C,mBAAAhL,EAAAqL,IAAA,EACAv2C,KAAAk2C,mBAAAhL,EAAAqH,MAAAvyC,KAAAk2C,mBAAAhL,EAAAb,OAAA,GAAA,EAAA,EACArqC,KAAAk2C,mBAAAhL,EAAAsH,MAAAxyC,KAAAk2C,mBAAAhL,EAAAZ,OAAA,GAAA,EAAA,EAGAtqC,KAAAk2C,mBAAAhL,EAAAsL,SAAA,EACAx2C,KAAAk2C,mBAAAhL,EAAAuL,eAAA,GAGAz2C,KAAAk2C,mBAAAhL,EAAAoL,IAAA3lC,KAAAkhB,IAAAlhB,KAAAwgC,IAAAnxC,KAAAk2C,mBAAAhL,EAAAb,QAAA,IAAArqC,KAAAk2C,mBAAAhL,EAAAoL,KAAA,EAAAt2C,KAAAk2C,mBAAAhL,EAAAoL,MACA,IAAAt2C,KAAAk2C,mBAAAhL,EAAAqL,IAAA5lC,KAAAkhB,IAAAlhB,KAAAwgC,IAAAnxC,KAAAk2C,mBAAAhL,EAAAZ,QAAA,IAAAtqC,KAAAk2C,mBAAAhL,EAAAqL,KAAA,EAAAv2C,KAAAk2C,mBAAAhL,EAAAqL,MACAv2C,KAAAk2C,mBAAAhL,EAAAmL,SAAAr2C,KAAA4wC,sBAAA5wC,KAAAk2C,mBAAAhL,EAAA8E,UAAAhwC,KAAAk2C,mBAAAhL,EAAAoL,KAAAt2C,KAAAk2C,mBAAAhL,EAAAb,OAAA,EAAA,GAAA,GAAArqC,KAAAk2C,mBAAAhL,EAAAqL,KAAAv2C,KAAAk2C,mBAAAhL,EAAAZ,OAAA,EAAA,GAAA,IAEAtqC,KAAA8wC,yBAAA9wC,KAAAk2C,mBAAAhL,EAAAmL,SAAAr2C,KAAA4jC,qBACA5jC,KAAAk2C,mBAAAhL,EAAAoL,IAAAt2C,KAAAk2C,mBAAAhL,EAAAqL,IAAAv2C,KAAAk2C,mBAAAhL,EAAAsL,WACAx2C,KAAAk2C,mBAAAhL,EAAAsL,SAAAx2C,KAAAk2C,mBAAAhL,EAAAoL,IAAAt2C,KAAAk2C,mBAAAhL,EAAAqL,IACAv2C,KAAAk2C,mBAAAhL,EAAAuL,eAAA,CACA9Q,EAAA3lC,KAAAk2C,mBAAAhL,EAAAoL,KAAAt2C,KAAAk2C,mBAAAhL,EAAAb,OAAA,EAAA,GAAA,GACAzE,EAAA5lC,KAAAk2C,mBAAAhL,EAAAqL,KAAAv2C,KAAAk2C,mBAAAhL,EAAAZ,OAAA,EAAA,GAAA,KAQA,GAAA,GAAAtqC,KAAAk2C,mBAAAhL,EAAAsL,SACA,OAEAx2C,KAAAk2C,mBAAAhL,EAAAb,OAAArqC,KAAAk2C,mBAAAhL,EAAAuL,eAAA9Q,EACA3lC,KAAAk2C,mBAAAhL,EAAAZ,OAAAtqC,KAAAk2C,mBAAAhL,EAAAuL,eAAA7Q,EAIA5lC,KAAAkjC,QAAAmE,IAAA,CACA5vB,KAAAzX,KAAAkjC,QAAAzrB,KAAAzX,KAAAk2C,mBAAAhL,EAAAb,OACApT,IAAAj3B,KAAAkjC,QAAAjM,IAAAj3B,KAAAk2C,mBAAAhL,EAAAZ,UASA2L,iBAAA,SAAA58B,GAKA,QAJA,IAAArZ,KAAAi2C,iBAAA/K,IACAlrC,KAAAi2C,iBAAA/K,EAAA,IAGAlrC,KAAAgjC,WAAA,CAIA,GAHAhjC,KAAAi2C,iBAAA/K,EAAAb,OAAAhxB,EAAAy8B,MAAA91C,KAAAqkC,eACArkC,KAAAi2C,iBAAA/K,EAAAZ,OAAAjxB,EAAA08B,MAAA/1C,KAAAskC,eAEA,IAAAtkC,KAAAi2C,iBAAA/K,EAAAb,QAAA,IAAArqC,KAAAi2C,iBAAA/K,EAAAZ,OACA,OAOA,GAJAtqC,KAAAi2C,iBAAA/K,EAAAwL,KAAA12C,KAAAgjC,WAAAvrB,KAAAzX,KAAAi2C,iBAAA/K,EAAAb,OACArqC,KAAAi2C,iBAAA/K,EAAAyL,KAAA32C,KAAAgjC,WAAA/L,IAAAj3B,KAAAi2C,iBAAA/K,EAAAZ,OAGA,SAAAtqC,KAAA+jC,aACA,IAAA/jC,KAAA8wC,yBAAA,CAAA,CAAAnL,EAAA3lC,KAAAi2C,iBAAA/K,EAAAwL,KAAA9Q,EAAA5lC,KAAAi2C,iBAAA/K,EAAAyL,OAAA32C,KAAA4jC,oBACA,YAGA,KAAA5jC,KAAA+iC,SAAAtrB,KAAAzX,KAAA+iC,SAAA+D,MAAA,EAAA9mC,KAAAi2C,iBAAA/K,EAAAwL,KAAA,GAAA12C,KAAA+iC,SAAAtrB,KAAAzX,KAAA+iC,SAAA+D,MAAA,EAAA9mC,KAAAi2C,iBAAA/K,EAAAwL,KAAA,GACA12C,KAAA+iC,SAAA9L,IAAAj3B,KAAA+iC,SAAAhY,OAAA,EAAA/qB,KAAAi2C,iBAAA/K,EAAAyL,KAAA,GAAA32C,KAAA+iC,SAAA9L,IAAAj3B,KAAA+iC,SAAAhY,OAAA,EAAA/qB,KAAAi2C,iBAAA/K,EAAAyL,KAAA,GACA,OAIA32C,KAAAgjC,WAAAqE,IAAA,CACA5vB,KAAAzX,KAAAgjC,WAAAvrB,KAAAzX,KAAAi2C,iBAAA/K,EAAAb,OACApT,IAAAj3B,KAAAgjC,WAAA/L,IAAAj3B,KAAAi2C,iBAAA/K,EAAAZ,WASAmC,sBAAA,SAAAH,GAIA,OAFAtsC,KAAA+c,wBAEAuvB,GACA,IAAA,OACAtsC,KAAAmlC,oBAAA,EACA,MAEA,IAAA,WACAnlC,KAAAmlC,mBAAAnlC,KAAA0jC,cAAA1jC,KAAA2jC,eACA,MAEA,IAAA,UACA3jC,KAAAmlC,mBAAAnlC,KAAAkjC,QAAA4D,MAAA9mC,KAAAkjC,QAAAnY,OACA,MAEA,IAAA,SAEA,MACA,QACA/qB,KAAAmlC,mBAAA8H,WAAAX,KASAI,0BAAA,gBACA,IAAA1sC,KAAA0sC,0BAAAxB,IACAlrC,KAAA0sC,0BAAAxB,EAAA,KAGAlrC,KAAA8jC,qBAAA9jC,KAAAmlC,qBAIAnlC,KAAA8jC,qBAAA,EAGA9jC,KAAA0sC,0BAAAxB,EAAA8E,UAAA,CACAv4B,KAAAzX,KAAAkjC,QAAAzrB,KAAAzX,KAAAkjC,QAAA4D,MAAA,EACA7P,IAAAj3B,KAAAkjC,QAAAjM,IAAAj3B,KAAAkjC,QAAAnY,OAAA,EACA+b,MAAA9mC,KAAAkjC,QAAA4D,MACA/b,OAAA/qB,KAAAkjC,QAAAnY,QAIA/qB,KAAAkjC,QAAA4D,MAAA9mC,KAAAkjC,QAAAnY,OAAA/qB,KAAAmlC,oBACAnlC,KAAA0sC,0BAAAxB,EAAA0L,eAAA52C,KAAA0sC,0BAAAxB,EAAA8E,UAAAjlB,OAGA/qB,KAAA0sC,0BAAAxB,EAAA8E,UAAAjlB,OAAA/qB,KAAAkjC,QAAA4D,MAAA9mC,KAAAmlC,mBAGAnlC,KAAA0sC,0BAAAxB,EAAA8E,UAAA/Y,MAAAj3B,KAAA0sC,0BAAAxB,EAAA8E,UAAAjlB,OAAA/qB,KAAA0sC,0BAAAxB,EAAA0L,gBAAA,EAGA52C,KAAA8wC,yBAAA9wC,KAAA4wC,sBAAA5wC,KAAA0sC,0BAAAxB,EAAA8E,WAAAhwC,KAAA4jC,sBACA5jC,KAAA0sC,0BAAAxB,EAAA8E,UAAAlJ,MAAA9mC,KAAAkjC,QAAAnY,OAAA/qB,KAAAmlC,mBACAnlC,KAAA0sC,0BAAAxB,EAAA8E,UAAAjlB,OAAA/qB,KAAA0sC,0BAAAxB,EAAA8E,UAAAlJ,MAAA9mC,KAAAmlC,sBAIAnlC,KAAA0sC,0BAAAxB,EAAA2L,cAAA72C,KAAA0sC,0BAAAxB,EAAA8E,UAAAlJ,MACA9mC,KAAA0sC,0BAAAxB,EAAA8E,UAAAlJ,MAAA9mC,KAAAkjC,QAAAnY,OAAA/qB,KAAAmlC,mBACAnlC,KAAA0sC,0BAAAxB,EAAA8E,UAAAv4B,OAAAzX,KAAA0sC,0BAAAxB,EAAA8E,UAAAlJ,MAAA9mC,KAAA0sC,0BAAAxB,EAAA2L,eAAA,EAEA72C,KAAA8wC,yBAAA9wC,KAAA4wC,sBAAA5wC,KAAA0sC,0BAAAxB,EAAA8E,WAAAhwC,KAAA4jC,sBACA5jC,KAAA0sC,0BAAAxB,EAAA8E,UAAAjlB,OAAA/qB,KAAAkjC,QAAA4D,MAAA9mC,KAAAmlC,mBACAnlC,KAAA0sC,0BAAAxB,EAAA8E,UAAAlJ,MAAA9mC,KAAA0sC,0BAAAxB,EAAA8E,UAAAjlB,OAAA/qB,KAAAmlC,qBAIAnlC,KAAA0sC,0BAAAxB,EAAAgE,WAAA,CACAnkB,OAAA/qB,KAAA0sC,0BAAAxB,EAAA8E,UAAAjlB,OACA+b,MAAA9mC,KAAA0sC,0BAAAxB,EAAA8E,UAAAlJ,OAIA9mC,KAAAkjC,QAAAwL,QAAA1uC,KAAA0sC,0BAAAxB,EAAAgE,WAAA,CACAtD,SAAA,KACA5rC,KAAAq0C,yBACAr0C,KAAAijC,eAAA+D,aAEA5vB,SAAApX,KAAAgU,SAAA26B,kBACAC,WAAA,KACA5uC,KAAAq0C,yBACAr0C,KAAA8jC,qBAAA,EACA9jC,KAAAulC,gBACAvlC,KAAAwoC,yBAUA2N,qBAAA,SAAA98B,QACA,IAAArZ,KAAAm2C,qBAAAjL,IACAlrC,KAAAm2C,qBAAAjL,EAAA,IAIAlrC,KAAAm2C,qBAAAjL,EAAAb,OAAAhxB,EAAAy8B,MAAA91C,KAAAqkC,eACArkC,KAAAm2C,qBAAAjL,EAAAZ,OAAAjxB,EAAA08B,MAAA/1C,KAAAskC,eAEA,MAAAtkC,KAAAmkC,gBAAA,MAAAnkC,KAAAmkC,iBACAnkC,KAAAm2C,qBAAAjL,EAAAb,OAAA,GAGA,MAAArqC,KAAAmkC,gBAAA,MAAAnkC,KAAAmkC,iBACAnkC,KAAAm2C,qBAAAjL,EAAAZ,OAAA,GAGA,IAAAtqC,KAAAm2C,qBAAAjL,EAAAb,QAAA,IAAArqC,KAAAm2C,qBAAAjL,EAAAZ,SAKAtqC,KAAAm2C,qBAAAjL,EAAA4L,kBAAA,CACAr/B,KAAAzX,KAAAkjC,QAAAzrB,KAAAzX,KAAAkjC,QAAA4D,MAAA,EACA7P,IAAAj3B,KAAAkjC,QAAAjM,IAAAj3B,KAAAkjC,QAAAnY,OAAA,EACA+b,MAAA9mC,KAAAkjC,QAAA4D,MACA/b,OAAA/qB,KAAAkjC,QAAAnY,QAGA/qB,KAAAm2C,qBAAAjL,EAAA8E,UAAAhwC,KAAA+2C,iCAAA/2C,KAAAm2C,qBAAAjL,EAAA4L,kBAAA92C,KAAAm2C,qBAAAjL,EAAAb,OAAArqC,KAAAm2C,qBAAAjL,EAAAZ,OAAAtqC,KAAAmkC,gBAEAnkC,KAAAm2C,qBAAAjL,EAAA8E,UAAAjlB,OAAA,IAAA/qB,KAAAm2C,qBAAAjL,EAAA8E,UAAAlJ,MAAA,IAIA9mC,KAAA8wC,yBAAA9wC,KAAA4wC,sBAAA5wC,KAAAm2C,qBAAAjL,EAAA8E,WAAAhwC,KAAA4jC,sBAKA5jC,KAAAkjC,QAAAmE,IAAA,CACApQ,IAAAj3B,KAAAm2C,qBAAAjL,EAAA8E,UAAA/Y,IAAAj3B,KAAAm2C,qBAAAjL,EAAA8E,UAAAjlB,OAAA,EACAtT,KAAAzX,KAAAm2C,qBAAAjL,EAAA8E,UAAAv4B,KAAAzX,KAAAm2C,qBAAAjL,EAAA8E,UAAAlJ,MAAA,EACAA,MAAA9mC,KAAAm2C,qBAAAjL,EAAA8E,UAAAlJ,MACA/b,OAAA/qB,KAAAm2C,qBAAAjL,EAAA8E,UAAAjlB,SAGA/qB,KAAAq0C,4BAGA0C,iCAAA,SAAAD,EAAAzM,EAAAC,EAAA0M,GAcA,QAbA,IAAAh3C,KAAA+2C,iCAAA7L,IACAlrC,KAAA+2C,iCAAA7L,EAAA,IAIAlrC,KAAA+2C,iCAAA7L,EAAA+L,SAAA,EACAj3C,KAAA+2C,iCAAA7L,EAAAgM,UAAA,EAEAl3C,KAAA+2C,iCAAA7L,EAAA8E,UAAA8G,EACA92C,KAAA+2C,iCAAA7L,EAAAb,OAAAA,EACArqC,KAAA+2C,iCAAA7L,EAAAZ,OAAAA,EAGAtqC,KAAAmlC,mBAAA,CAIA,OAHAnlC,KAAA+2C,iCAAA7L,EAAAiM,OAAA,EAGAH,GACA,IAAA,IACAh3C,KAAA+2C,iCAAA7L,EAAAiM,QAAAn3C,KAAA+2C,iCAAA7L,EAAAZ,OACA,MACA,IAAA,IACAtqC,KAAA+2C,iCAAA7L,EAAAiM,OAAAn3C,KAAA+2C,iCAAA7L,EAAAZ,OACA,MACA,IAAA,IACAtqC,KAAA+2C,iCAAA7L,EAAAiM,OAAAn3C,KAAA+2C,iCAAA7L,EAAAb,OACA,MACA,IAAA,IACArqC,KAAA+2C,iCAAA7L,EAAAiM,QAAAn3C,KAAA+2C,iCAAA7L,EAAAb,OACA,MACA,IAAA,KACArqC,KAAA+2C,iCAAA7L,EAAAiM,OAAAxmC,KAAAwgC,IAAAnxC,KAAA+2C,iCAAA7L,EAAAZ,QAAA35B,KAAAwgC,IAAAnxC,KAAA+2C,iCAAA7L,EAAAb,SAAArqC,KAAA+2C,iCAAA7L,EAAAZ,OAAAtqC,KAAA+2C,iCAAA7L,EAAAb,OACA,MACA,IAAA,KACArqC,KAAA+2C,iCAAA7L,EAAAiM,OAAAxmC,KAAAwgC,IAAAnxC,KAAA+2C,iCAAA7L,EAAAZ,QAAA35B,KAAAwgC,IAAAnxC,KAAA+2C,iCAAA7L,EAAAb,SAAArqC,KAAA+2C,iCAAA7L,EAAAZ,QAAAtqC,KAAA+2C,iCAAA7L,EAAAb,OACA,MACA,IAAA,KACArqC,KAAA+2C,iCAAA7L,EAAAiM,OAAAxmC,KAAAwgC,IAAAnxC,KAAA+2C,iCAAA7L,EAAAZ,QAAA35B,KAAAwgC,IAAAnxC,KAAA+2C,iCAAA7L,EAAAb,QAAArqC,KAAA+2C,iCAAA7L,EAAAZ,OAAAtqC,KAAA+2C,iCAAA7L,EAAAb,OACA,MACA,IAAA,KACArqC,KAAA+2C,iCAAA7L,EAAAiM,OAAAxmC,KAAAwgC,IAAAnxC,KAAA+2C,iCAAA7L,EAAAZ,QAAA35B,KAAAwgC,IAAAnxC,KAAA+2C,iCAAA7L,EAAAb,QAAArqC,KAAA+2C,iCAAA7L,EAAAZ,QAAAtqC,KAAA+2C,iCAAA7L,EAAAb,OAgBA,OAZArqC,KAAAmlC,mBAAA,GACAnlC,KAAA+2C,iCAAA7L,EAAAb,OAAArqC,KAAA+2C,iCAAA7L,EAAAiM,OACAn3C,KAAA+2C,iCAAA7L,EAAAZ,OAAAtqC,KAAA+2C,iCAAA7L,EAAAb,OAAArqC,KAAAmlC,qBAEAnlC,KAAA+2C,iCAAA7L,EAAAZ,OAAAtqC,KAAA+2C,iCAAA7L,EAAAiM,OACAn3C,KAAA+2C,iCAAA7L,EAAAb,OAAArqC,KAAA+2C,iCAAA7L,EAAAZ,OAAAtqC,KAAAmlC,oBAGAnlC,KAAA+2C,iCAAA7L,EAAA8E,UAAAjlB,QAAA/qB,KAAA+2C,iCAAA7L,EAAAZ,OACAtqC,KAAA+2C,iCAAA7L,EAAA8E,UAAAlJ,OAAA9mC,KAAA+2C,iCAAA7L,EAAAb,OAGA2M,GACA,IAAA,IACAh3C,KAAA+2C,iCAAA7L,EAAA8E,UAAA/Y,KAAAj3B,KAAA+2C,iCAAA7L,EAAAZ,OACAtqC,KAAA+2C,iCAAA7L,EAAA8E,UAAAv4B,MAAAzX,KAAA+2C,iCAAA7L,EAAAb,OAAA,EACA,MACA,IAAA,IACArqC,KAAA+2C,iCAAA7L,EAAA8E,UAAAv4B,OAAAzX,KAAA+2C,iCAAA7L,EAAAb,OAAA,EACA,MACA,IAAA,IACArqC,KAAA+2C,iCAAA7L,EAAA8E,UAAA/Y,MAAAj3B,KAAA+2C,iCAAA7L,EAAAZ,OAAA,EACA,MACA,IAAA,IACAtqC,KAAA+2C,iCAAA7L,EAAA8E,UAAA/Y,KAAAj3B,KAAA+2C,iCAAA7L,EAAAZ,OAAA,EACAtqC,KAAA+2C,iCAAA7L,EAAA8E,UAAAv4B,MAAAzX,KAAA+2C,iCAAA7L,EAAAb,OACA,MACA,IAAA,KACArqC,KAAA+2C,iCAAA7L,EAAA8E,UAAA/Y,KAAAj3B,KAAA+2C,iCAAA7L,EAAAZ,OACA,MACA,IAAA,KACAtqC,KAAA+2C,iCAAA7L,EAAA8E,UAAA/Y,KAAAj3B,KAAA+2C,iCAAA7L,EAAAZ,OACAtqC,KAAA+2C,iCAAA7L,EAAA8E,UAAAv4B,MAAAzX,KAAA+2C,iCAAA7L,EAAAb,OACA,MACA,IAAA,KACArqC,KAAA+2C,iCAAA7L,EAAA8E,UAAAv4B,MAAAzX,KAAA+2C,iCAAA7L,EAAAb,aAKArqC,KAAAukC,cACA,OAAAyS,GAAA,OAAAA,GACA,OAAAA,GAAA,OAAAA,IAEAh3C,KAAA+2C,iCAAA7L,EAAAF,MACAr6B,KAAAwgC,IAAA9G,GAAA15B,KAAAwgC,IAAA7G,IACAtqC,KAAA+2C,iCAAA7L,EAAAF,MAAA8L,EAAAhQ,MAAAgQ,EAAA/rB,OACA/qB,KAAA+2C,iCAAA7L,EAAAZ,OAAAtqC,KAAA+2C,iCAAA7L,EAAAb,OAAArqC,KAAA+2C,iCAAA7L,EAAAF,MACAhrC,KAAA+2C,iCAAA7L,EAAAZ,QAAA,OAAA0M,GAAA,OAAAA,GAAA,EAAA,IAEAh3C,KAAA+2C,iCAAA7L,EAAAF,MAAA8L,EAAAhQ,MAAAgQ,EAAA/rB,OACA/qB,KAAA+2C,iCAAA7L,EAAAb,OAAArqC,KAAA+2C,iCAAA7L,EAAAZ,OAAAtqC,KAAA+2C,iCAAA7L,EAAAF,MACAhrC,KAAA+2C,iCAAA7L,EAAAb,QAAA,OAAA2M,GAAA,OAAAA,GAAA,EAAA,IAIAA,EAAArxC,MAAA,OACA3F,KAAA+2C,iCAAA7L,EAAA8E,UAAA/Y,KAAAj3B,KAAA+2C,iCAAA7L,EAAAZ,OACAtqC,KAAA+2C,iCAAA7L,EAAA8E,UAAAjlB,QAAA/qB,KAAA+2C,iCAAA7L,EAAAZ,QAEA0M,EAAArxC,MAAA,OACA3F,KAAA+2C,iCAAA7L,EAAA8E,UAAAjlB,QAAA/qB,KAAA+2C,iCAAA7L,EAAAZ,QAEA0M,EAAArxC,MAAA,OACA3F,KAAA+2C,iCAAA7L,EAAA8E,UAAAlJ,OAAA9mC,KAAA+2C,iCAAA7L,EAAAb,QAEA2M,EAAArxC,MAAA,OACA3F,KAAA+2C,iCAAA7L,EAAA8E,UAAAv4B,MAAAzX,KAAA+2C,iCAAA7L,EAAAb,OACArqC,KAAA+2C,iCAAA7L,EAAA8E,UAAAlJ,OAAA9mC,KAAA+2C,iCAAA7L,EAAAb,QASA,OALArqC,KAAA+2C,iCAAA7L,EAAA8E,UAAA/Y,IAAAj3B,KAAA+2C,iCAAA7L,EAAA8E,UAAA/Y,IACAj3B,KAAA+2C,iCAAA7L,EAAA8E,UAAAv4B,KAAAzX,KAAA+2C,iCAAA7L,EAAA8E,UAAAv4B,KACAzX,KAAA+2C,iCAAA7L,EAAA8E,UAAAlJ,MAAA9mC,KAAA+2C,iCAAA7L,EAAA8E,UAAAlJ,MACA9mC,KAAA+2C,iCAAA7L,EAAA8E,UAAAjlB,OAAA/qB,KAAA+2C,iCAAA7L,EAAA8E,UAAAjlB,OAEA/qB,KAAA+2C,iCAAA7L,EAAA8E,WAQAoG,gBAAA,SAAA/8B,QACA,IAAArZ,KAAAo2C,gBAAAlL,IACAlrC,KAAAo2C,gBAAAlL,EAAA,IAGA9lC,QAAAqgB,iBAAA,KAGAzlB,KAAAo2C,gBAAAlL,EAAAkM,OAAA,UACAp3C,KAAAo2C,gBAAAlL,EAAArV,OAAA71B,KAAAijC,gBAAAjjC,KAAA61C,sBAAAx8B,GACArZ,KAAAgjC,YAAAhjC,KAAA21C,aAAAt8B,EAAArZ,KAAAgjC,YACAhjC,KAAAo2C,gBAAAlL,EAAAkM,OAAA,UACAp3C,KAAAo2C,gBAAAlL,EAAArV,OACA,MAAA71B,KAAAo2C,gBAAAlL,EAAArV,QAAA,MAAA71B,KAAAo2C,gBAAAlL,EAAArV,OACA71B,KAAAo2C,gBAAAlL,EAAAkM,OAAA,YACA,MAAAp3C,KAAAo2C,gBAAAlL,EAAArV,QAAA,MAAA71B,KAAAo2C,gBAAAlL,EAAArV,OACA71B,KAAAo2C,gBAAAlL,EAAAkM,OAAA,YACA,OAAAp3C,KAAAo2C,gBAAAlL,EAAArV,QAAA,OAAA71B,KAAAo2C,gBAAAlL,EAAArV,OACA71B,KAAAo2C,gBAAAlL,EAAAkM,OAAA,cACA,OAAAp3C,KAAAo2C,gBAAAlL,EAAArV,QAAA,OAAA71B,KAAAo2C,gBAAAlL,EAAArV,SACA71B,KAAAo2C,gBAAAlL,EAAAkM,OAAA,eAEAp3C,KAAAijC,gBAAAjjC,KAAA21C,aAAAt8B,EAAArZ,KAAAkjC,WACAljC,KAAAo2C,gBAAAlL,EAAAkM,OAAA,QAGAz4C,EAAA,SAAAmsB,IAAA,SAAA9qB,KAAAo2C,gBAAAlL,EAAAkM,UAQAvB,sBAAA,SAAAx8B,GAgBA,QAfA,IAAArZ,KAAA61C,sBAAA3K,IACAlrC,KAAA61C,sBAAA3K,EAAA,IAGAlrC,KAAA61C,sBAAA3K,EAAAmM,aAAAr3C,KAAA2iC,gBAAA7gC,SACA9B,KAAA61C,sBAAA3K,EAAAoM,OAAAj+B,EAAAy8B,MAAA91C,KAAA61C,sBAAA3K,EAAAmM,aAAA5/B,KACAzX,KAAA61C,sBAAA3K,EAAAqM,OAAAl+B,EAAA08B,MAAA/1C,KAAA61C,sBAAA3K,EAAAmM,aAAApgB,IAGAj3B,KAAA61C,sBAAA3K,EAAAsM,GAAAx3C,KAAAkjC,QAAAzrB,KAAAzX,KAAAkjC,QAAA4D,MAAA,EACA9mC,KAAA61C,sBAAA3K,EAAAuM,GAAAz3C,KAAA61C,sBAAA3K,EAAAsM,GAAAx3C,KAAAkjC,QAAA4D,MACA9mC,KAAA61C,sBAAA3K,EAAAwM,GAAA13C,KAAAkjC,QAAAjM,IAAAj3B,KAAAkjC,QAAAnY,OAAA,EACA/qB,KAAA61C,sBAAA3K,EAAAyM,GAAA33C,KAAA61C,sBAAA3K,EAAAwM,GAAA13C,KAAAkjC,QAAAnY,OAGA/qB,KAAA61C,sBAAA3K,EAAAoM,OAAAt3C,KAAA61C,sBAAA3K,EAAAsM,GAAA,IAAAx3C,KAAA61C,sBAAA3K,EAAAoM,OAAAt3C,KAAA61C,sBAAA3K,EAAAsM,GAAA,EAAA,CACA,GAAAx3C,KAAA61C,sBAAA3K,EAAAqM,OAAAv3C,KAAA61C,sBAAA3K,EAAAwM,GAAA,IAAA13C,KAAA61C,sBAAA3K,EAAAqM,OAAAv3C,KAAA61C,sBAAA3K,EAAAwM,GAAA,EACA,MAAA,KACA,GAAA13C,KAAA61C,sBAAA3K,EAAAqM,OAAAv3C,KAAA61C,sBAAA3K,EAAAyM,GAAA,GAAA33C,KAAA61C,sBAAA3K,EAAAqM,OAAAv3C,KAAA61C,sBAAA3K,EAAAyM,GAAA,GACA,MAAA,KAIA,GAAA33C,KAAA61C,sBAAA3K,EAAAoM,OAAAt3C,KAAA61C,sBAAA3K,EAAAuM,GAAA,IAAAz3C,KAAA61C,sBAAA3K,EAAAoM,OAAAt3C,KAAA61C,sBAAA3K,EAAAuM,GAAA,EAAA,CACA,GAAAz3C,KAAA61C,sBAAA3K,EAAAqM,OAAAv3C,KAAA61C,sBAAA3K,EAAAwM,GAAA,IAAA13C,KAAA61C,sBAAA3K,EAAAqM,OAAAv3C,KAAA61C,sBAAA3K,EAAAwM,GAAA,EACA,MAAA,KACA,GAAA13C,KAAA61C,sBAAA3K,EAAAqM,OAAAv3C,KAAA61C,sBAAA3K,EAAAyM,GAAA,GAAA33C,KAAA61C,sBAAA3K,EAAAqM,OAAAv3C,KAAA61C,sBAAA3K,EAAAyM,GAAA,GACA,MAAA,KAKA,OAAA33C,KAAA61C,sBAAA3K,EAAAoM,OAAAt3C,KAAA61C,sBAAA3K,EAAAsM,GAAA,GAAAx3C,KAAA61C,sBAAA3K,EAAAoM,OAAAt3C,KAAA61C,sBAAA3K,EAAAsM,GAAA,GAAAx3C,KAAA61C,sBAAA3K,EAAAqM,OAAAv3C,KAAA61C,sBAAA3K,EAAAyM,GAAA,IAAA33C,KAAA61C,sBAAA3K,EAAAqM,OAAAv3C,KAAA61C,sBAAA3K,EAAAwM,GAAA,GACA,IAEA13C,KAAA61C,sBAAA3K,EAAAoM,OAAAt3C,KAAA61C,sBAAA3K,EAAAuM,GAAA,GAAAz3C,KAAA61C,sBAAA3K,EAAAoM,OAAAt3C,KAAA61C,sBAAA3K,EAAAuM,GAAA,GAAAz3C,KAAA61C,sBAAA3K,EAAAqM,OAAAv3C,KAAA61C,sBAAA3K,EAAAyM,GAAA,IAAA33C,KAAA61C,sBAAA3K,EAAAqM,OAAAv3C,KAAA61C,sBAAA3K,EAAAwM,GAAA,GACA,IAIA13C,KAAA61C,sBAAA3K,EAAAqM,OAAAv3C,KAAA61C,sBAAA3K,EAAAwM,GAAA,GAAA13C,KAAA61C,sBAAA3K,EAAAqM,OAAAv3C,KAAA61C,sBAAA3K,EAAAwM,GAAA,GAAA13C,KAAA61C,sBAAA3K,EAAAoM,OAAAt3C,KAAA61C,sBAAA3K,EAAAsM,GAAA,IAAAx3C,KAAA61C,sBAAA3K,EAAAoM,OAAAt3C,KAAA61C,sBAAA3K,EAAAuM,GAAA,GACA,IAEAz3C,KAAA61C,sBAAA3K,EAAAqM,OAAAv3C,KAAA61C,sBAAA3K,EAAAyM,GAAA,GAAA33C,KAAA61C,sBAAA3K,EAAAqM,OAAAv3C,KAAA61C,sBAAA3K,EAAAyM,GAAA,GAAA33C,KAAA61C,sBAAA3K,EAAAoM,OAAAt3C,KAAA61C,sBAAA3K,EAAAsM,GAAA,IAAAx3C,KAAA61C,sBAAA3K,EAAAoM,OAAAt3C,KAAA61C,sBAAA3K,EAAAuM,GAAA,IACA,KAeA9B,aAAA,SAAA1U,EAAAkP,GAeA,YAdA,IAAAnwC,KAAA21C,aAAAzK,IACAlrC,KAAA21C,aAAAzK,EAAA,IAGAlrC,KAAA21C,aAAAzK,EAAAmM,aAAAr3C,KAAA2iC,gBAAA7gC,SACA9B,KAAA21C,aAAAzK,EAAAoM,OAAArW,EAAA6U,MAAA91C,KAAA21C,aAAAzK,EAAAmM,aAAA5/B,KACAzX,KAAA21C,aAAAzK,EAAAqM,OAAAtW,EAAA8U,MAAA/1C,KAAA21C,aAAAzK,EAAAmM,aAAApgB,IAGAj3B,KAAA21C,aAAAzK,EAAAsM,GAAArH,EAAA14B,KAAA04B,EAAArJ,MAAA,EACA9mC,KAAA21C,aAAAzK,EAAAuM,GAAAz3C,KAAA21C,aAAAzK,EAAAsM,GAAArH,EAAArJ,MACA9mC,KAAA21C,aAAAzK,EAAAwM,GAAAvH,EAAAlZ,IAAAkZ,EAAAplB,OAAA,EACA/qB,KAAA21C,aAAAzK,EAAAyM,GAAA33C,KAAA21C,aAAAzK,EAAAwM,GAAAvH,EAAAplB,OAGA/qB,KAAA21C,aAAAzK,EAAAoM,QAAAt3C,KAAA21C,aAAAzK,EAAAsM,IACAx3C,KAAA21C,aAAAzK,EAAAoM,QAAAt3C,KAAA21C,aAAAzK,EAAAuM,IACAz3C,KAAA21C,aAAAzK,EAAAqM,QAAAv3C,KAAA21C,aAAAzK,EAAAwM,IACA13C,KAAA21C,aAAAzK,EAAAqM,QAAAv3C,KAAA21C,aAAAzK,EAAAyM,IAaA/G,sBAAA,SAAAZ,EAAAjI,EAAAC,GAqBA,YApBA,IAAAhoC,KAAA4wC,sBAAA1F,IACAlrC,KAAA4wC,sBAAA1F,EAAA,SAGA,IAAAnD,IACAA,EAAA,QAEA,IAAAC,IACAA,EAAA,GAGAhoC,KAAA4wC,sBAAA1F,EAAA0M,QAAA,CACAjS,EAAAqK,EAAAv4B,KAAAswB,EACAnC,EAAAoK,EAAA/Y,IAAA+Q,GAGAhoC,KAAA4wC,sBAAA1F,EAAA2M,SAAA,CAAAlS,EAAA3lC,KAAA4wC,sBAAA1F,EAAA0M,QAAAjS,EAAAqK,EAAAlJ,MAAAlB,EAAA5lC,KAAA4wC,sBAAA1F,EAAA0M,QAAAhS,GACA5lC,KAAA4wC,sBAAA1F,EAAA4M,YAAA,CAAAnS,EAAA3lC,KAAA4wC,sBAAA1F,EAAA2M,SAAAlS,EAAAC,EAAA5lC,KAAA4wC,sBAAA1F,EAAA2M,SAAAjS,EAAAoK,EAAAjlB,QACA/qB,KAAA4wC,sBAAA1F,EAAA6M,WAAA,CAAApS,EAAA3lC,KAAA4wC,sBAAA1F,EAAA0M,QAAAjS,EAAAC,EAAA5lC,KAAA4wC,sBAAA1F,EAAA4M,YAAAlS,GAEA,CAAA5lC,KAAA4wC,sBAAA1F,EAAA0M,QAAA53C,KAAA4wC,sBAAA1F,EAAA2M,SAAA73C,KAAA4wC,sBAAA1F,EAAA4M,YAAA93C,KAAA4wC,sBAAA1F,EAAA6M,aAMApQ,kCAAA,WACA3nC,KAAA4jC,mBAAA5jC,KAAA+vC,sBAAA,QASAA,sBAAA,SAAAiI,GACA,IAIAhN,EAJAiD,GAAA,IAAAjuC,KAAAirC,wBAAA,GAAA,GAAAjrC,KAAAwjC,uBAAA7yB,KAAAu9B,GAAA,KAEApG,EAAA9nC,KAAA0nC,2BAKAsD,EADA,iBAAAgN,EACAA,EACA,UAAAA,EACAh4C,KAAA0pC,oBAAA5B,GAEA9nC,KAAAspC,kBAAAxB,GAIA,IAAA+J,EAAA/J,EAAA/c,OAAAigB,EACA4G,EAAA9J,EAAAhB,MAAAkE,EAKAiN,EAAAtnC,KAAAy9B,IAAAH,GAAA4D,EACAqG,EAAAvnC,KAAA09B,IAAAJ,GAAA2D,EACAuG,EAAAxnC,KAAAy9B,IAAAH,GAAA2D,EACAwG,EAAAznC,KAAA09B,IAAAJ,GAAA4D,EAGAwG,GAAAr4C,KAAAwkC,cAAAyT,EAAAC,IAAA,EACAI,GAAAt4C,KAAAykC,aAAA2T,EAAAD,IAAA,EAGA,MAAA,CACAzrC,EAAA,CACAi5B,EAAA2S,EAAAH,EACAvS,EAAAyS,GAEA1rC,EAAA,CACAg5B,EAAA3lC,KAAAykC,YAAA6T,EACA1S,EAAAyS,EAAAJ,GAEAp2C,EAAA,CACA8jC,EAAA2S,EAAAF,EACAxS,EAAA5lC,KAAAwkC,aAAA6T,GAEA3C,EAAA,CACA/P,EAAA2S,EACA1S,EAAAyS,EAAAH,KAUAK,OAAA,SAAAC,GACAx4C,KAAA6iC,OAAAvoB,OAAAta,KAAAy4C,UACAz4C,KAAAy4C,SAAAD,EACAx4C,KAAA6iC,OAAApmB,IAAAzc,KAAAy4C,WAaA3H,yBAAA,SAAA4H,EAAA1I,GAWA,SAVA,IAAAhwC,KAAA8wC,yBAAA5F,IACAlrC,KAAA8wC,yBAAA5F,EAAA,IAIAlrC,KAAA8wC,yBAAA5F,EAAAyN,GAAA34C,KAAA44C,WAAA5I,EAAAtjC,EAAAsjC,EAAArjC,GACA3M,KAAA8wC,yBAAA5F,EAAA2N,GAAA74C,KAAA44C,WAAA5I,EAAArjC,EAAAqjC,EAAAnuC,GACA7B,KAAA8wC,yBAAA5F,EAAA4N,WAAA94C,KAAA+4C,kBAAA/4C,KAAA8wC,yBAAA5F,EAAAyN,GAAA34C,KAAA8wC,yBAAA5F,EAAAyN,IACA34C,KAAA8wC,yBAAA5F,EAAA8N,WAAAh5C,KAAA+4C,kBAAA/4C,KAAA8wC,yBAAA5F,EAAA2N,GAAA74C,KAAA8wC,yBAAA5F,EAAA2N,IAEA74C,KAAA8wC,yBAAA5F,EAAAxrC,EAAA,EAAAM,KAAA8wC,yBAAA5F,EAAAxrC,EAAAg5C,EAAAp4C,OAAAN,KAAA8wC,yBAAA5F,EAAAxrC,IAeA,GAdAM,KAAA8wC,yBAAA5F,EAAA+N,MAAAP,EAAA14C,KAAA8wC,yBAAA5F,EAAAxrC,GAIAM,KAAA8wC,yBAAA5F,EAAAgO,GAAAl5C,KAAA44C,WAAA5I,EAAAtjC,EAAA1M,KAAA8wC,yBAAA5F,EAAA+N,OACAj5C,KAAA8wC,yBAAA5F,EAAAiO,GAAAn5C,KAAA44C,WAAA5I,EAAArjC,EAAA3M,KAAA8wC,yBAAA5F,EAAA+N,OAGAj5C,KAAA8wC,yBAAA5F,EAAAkO,WAAAp5C,KAAA+4C,kBAAA/4C,KAAA8wC,yBAAA5F,EAAAyN,GAAA34C,KAAA8wC,yBAAA5F,EAAAgO,IACAl5C,KAAA8wC,yBAAA5F,EAAAmO,WAAAr5C,KAAA+4C,kBAAA/4C,KAAA8wC,yBAAA5F,EAAA2N,GAAA74C,KAAA8wC,yBAAA5F,EAAAiO,IAEAn5C,KAAA8wC,yBAAA5F,EAAAoO,aAAA,GAAAt5C,KAAA8wC,yBAAA5F,EAAAkO,YAAAp5C,KAAA8wC,yBAAA5F,EAAAkO,YAAAp5C,KAAA8wC,yBAAA5F,EAAA4N,WACA94C,KAAA8wC,yBAAA5F,EAAAqO,aAAA,GAAAv5C,KAAA8wC,yBAAA5F,EAAAmO,YAAAr5C,KAAA8wC,yBAAA5F,EAAAmO,YAAAr5C,KAAA8wC,yBAAA5F,EAAA8N,YAEAh5C,KAAA8wC,yBAAA5F,EAAAoO,eAAAt5C,KAAA8wC,yBAAA5F,EAAAqO,aACA,OAAA,EAIA,OAAA,GASAX,WAAA,SAAAlsC,EAAAC,GACA,MAAA,CAAAg5B,EAAAh5B,EAAAg5B,EAAAj5B,EAAAi5B,EAAAC,EAAAj5B,EAAAi5B,EAAAl5B,EAAAk5B,IASAmT,kBAAA,SAAArsC,EAAAC,GACA,OAAAD,EAAAi5B,EAAAh5B,EAAAg5B,EAAAj5B,EAAAk5B,EAAAj5B,EAAAi5B,GASA4T,oBAAA,SAAAC,GACA,OAAA9oC,KAAAygC,KAAAqI,EAAA9T,EAAA8T,EAAA9T,EAAA8T,EAAA7T,EAAA6T,EAAA7T,IASA8T,wBAAA,SAAAhtC,EAAAC,GACA,OAAAgE,KAAAK,MAAA,IAAAL,KAAAgpC,KAAAhpC,KAAAkhB,IAAA,EAAA7xB,KAAA+4C,kBAAArsC,EAAAC,IAAA3M,KAAAw5C,oBAAA9sC,GAAA1M,KAAAw5C,oBAAA7sC,MAAAgE,KAAAu9B,GAAA,KAAA,KAWA8C,gBAAA,SAAAhB,EAAAU,GAcA,IAZA,IAAAkJ,EAAA,CACA,CAAA5J,EAAAtjC,EAAAsjC,EAAArjC,GACA,CAAAqjC,EAAArjC,EAAAqjC,EAAAnuC,GACA,CAAAmuC,EAAAnuC,EAAAmuC,EAAA0F,GACA,CAAA1F,EAAA0F,EAAA1F,EAAAtjC,IAGAmtC,EAAA,CAAAlU,EAAA3lC,KAAAykC,YAAA,EAAAmB,EAAA5lC,KAAAwkC,aAAA,GACAsV,EAAA,IACAC,EAAA,KAGAC,EAAA,EAAAA,EAAAJ,EAAAt5C,OAAA05C,IAAA,CACA,IAAAjJ,EAAA6I,EAAAI,GACAC,EAAAj6C,KAAA44C,WAAA7H,EAAA,GAAA8I,GACAK,EAAAl6C,KAAA44C,WAAA7H,EAAA,GAAAA,EAAA,IACAoJ,EAAAn6C,KAAA44C,WAAA7H,EAAA,GAAAL,GAMA0J,EAAAzpC,KAAAwgC,IAAAnxC,KAAA05C,wBAAAO,EAAAE,IAAAn6C,KAAA05C,wBAAAO,EAAAC,GAAAl6C,KAAA05C,wBAAAQ,EAAAC,KAEAC,EAAAN,IACAA,EAAAM,EACAL,EAAAhJ,GAIA,OAAAgJ,GAQAhI,qBAAA,SAAAlH,GACA,IAAAwP,EAAA,GAEApM,EAAAt9B,KAAAwgC,IAAAnxC,KAAAwjC,uBAAA7yB,KAAAu9B,GAAA,KAEAoM,EAAAzP,EAAA9f,OAAA8f,EAAA/D,MAIA,GAHAuT,EAAAtvB,OAAA8f,EAAA/D,OAAAn2B,KAAA09B,IAAAJ,GAAAt9B,KAAAy9B,IAAAH,GAAAqM,GACAD,EAAAvT,MAAA+D,EAAA/D,OAAAn2B,KAAAy9B,IAAAH,GAAAt9B,KAAA09B,IAAAJ,GAAAqM,GAEAt6C,KAAAirC,wBAAA,CACA,IAAAwD,EAAA4L,EAAAvT,MACAuT,EAAAvT,MAAAuT,EAAAtvB,OACAsvB,EAAAtvB,OAAA0jB,EAGA,OAAA4L,IAEA,CACA/+B,SAAA,CACAqzB,kBAAA,IACA9I,kBAAA,EACAzD,OAAAzjC,EAAAwhB,KACAslB,qBAAA,QClsFAvmC,MAAAq7C,WAAAr7C,MAAA+U,iBAAAhV,OAAA,CACAu7C,4BAAA,KACAC,2BAAA,KACAC,kCAAA,EAEAC,cAAA,KACAC,aAAA,KACAC,aAAA,KACAC,SAAA,KAEAC,SAAA,KACAC,cAAA,KACAC,YAAA,KAEAC,kBAAA,EACAC,oBAAA,GACAC,kBAAA,GACAC,yBAAA,GAEAC,WAAA,KACAC,YAAA,KACAC,+BAAA,KACAC,qBAAA,GAEAC,sBAAA,CACAC,QAAA,CACA,CAAAx2C,MAAA,WAAAiV,MAAAlb,MAAAS,EAAA,MAAA,cAAA,CAAAwF,MAAA,UAAAiV,MAAAlb,MAAAS,EAAA,MAAA,iBAGAi8C,wBAAA,CACAD,QAAA,CACA,CAAAx2C,MAAA,UAAAiV,MAAAlb,MAAAS,EAAA,MAAA,4DAAA,CAAAwF,MAAA,QAAAiV,MAAAlb,MAAAS,EAAA,MAAA,gEAIA0b,KAAA,SAAA1H,EAAAf,EAAAoB,GACAhU,KAAA0vB,KAAA/b,EAAAf,EAAAoB,GAEA,UAAAhU,KAAAgU,SAAAkQ,SACAlkB,KAAAu7C,aACAv7C,KAAA67C,qBAGA77C,KAAAwc,YAAApX,QAAA2xB,KAAA,gBAAA,0BAEA/2B,KAAAwc,YAAAxc,KAAA0gB,MAAA,SAAA,wBAEA1gB,KAAAgU,SAAAwb,OACAxvB,KAAAgU,SAAAwb,MAAApW,GAAA,wBAAApZ,KAAA87C,qBAAA7/B,KAAAjc,SAKAskB,YAAA,WAKA,MAJA,UAAAtkB,KAAAgU,SAAAkQ,SAAAlkB,KAAAu7C,aACAv7C,KAAA67C,qBAGA77C,KAAA0vB,QAGAjI,WAAA,SAAAzG,GACAhhB,KAAA0vB,KAAA1O,GAEAhhB,KAAA+7C,yBAAA/6B,GAEA,UAAAhhB,KAAAgU,SAAAkQ,UACAlkB,KAAAu7C,aAAAv7C,KAAAg8C,gBAAAh7B,GAAA,GACAA,EAAAha,KAAA,cACAhH,KAAAu7C,YAAA7zB,SAAA1G,EAAAoD,UAIApkB,KAAAs7C,YACAt7C,KAAAs7C,WAAAW,sBAKAh0B,aAAA,SAAAjH,GACAhhB,KAAA0vB,KAAA1O,GAGA,IAAAk7B,EAAAl7B,EAAAha,KAAA,eAEAk1C,GACAA,EAAA1xB,UAGA,UAAAxqB,KAAAgU,SAAAkQ,UACAlkB,KAAAu7C,aAAAv7C,KAAAg8C,gBAAAh7B,GAAA,GACAhhB,KAAAu7C,YAAArzB,YAAAlH,EAAAoD,UAGApkB,KAAAs7C,YACAt7C,KAAAs7C,WAAAW,sBAKAD,gBAAA,SAAAh7B,GACA,OAAAA,EAAAm7B,aAAA,MAAA,MAAA77C,QAMAu7C,mBAAA,WACA77C,KAAAu7C,cAKAv7C,KAAAgU,SAAA6e,YAAA,EACA7yB,KAAAgU,SAAA8e,aAAA,EAKA9yB,KAAAs7C,WAAA,IAAAl2C,QAAAg3C,SAAA,CACAC,sBAAA,MACAC,cAAA,IACA33B,OAAA,IAAA3kB,KAAA4iB,KAAAoJ,sBAAAgS,IAAA,6BACAue,OAAAC,GAAAx8C,KAAAy8C,mBAAAD,GACAE,YAAA,KAEA,IAAAxuC,EAEAA,EADAlO,KAAAs7C,WAAAqB,UAAA38C,KAAAs7C,WAAAqB,SAAA3e,IAAA,4BAAA19B,OACA,8BAEA,mBAKA,IAFA,IAAAs8C,EAAA,GAEAl9C,EAAA,EAAAA,EAAAM,KAAAumB,SAAAjmB,OAAAZ,IAAA,CAEA,IAAAshB,EAAAhhB,KAAAumB,SAAApU,GAAAzS,GACA0F,QAAA4T,QAAAgI,EAAA9S,IACA0uC,EAAA17C,KAAA8f,GAIA,OAAA47B,GAGAC,YAAA78C,KAAA88C,aAAA7gC,KAAAjc,MACA+8C,mBAAA/8C,KAAAg9C,oBAAA/gC,KAAAjc,MACAi9C,WAAAj9C,KAAAk9C,gBAAAjhC,KAAAjc,MACAm9C,iBAAA,MAMAn9C,KAAAu7C,YAAA,IAAAn2C,QAAAg3C,SAAA,CACAC,sBAAA,MACAC,cAAA,IAEA33B,OAAA,KAKA,IAHA,IAAAy4B,EAAAp9C,KAAAygB,aAAAqY,mBACAukB,EAAA,GAEA39C,EAAA,EAAAA,EAAA09C,EAAA98C,OAAAZ,IAAA,CACA,IAAAshB,EAAAo8B,EAAAjrC,GAAAzS,GAEAM,KAAAs9C,2BAAAt8B,EAAAha,KAAA,UAIAga,EAAArL,SAAA,QAAA3V,KAAAg8C,gBAAAh7B,GAAA,GACAq8B,EAAAn8C,KAAA8f,EAAAoD,SAAA,KAIA,OAAAzlB,EAAA0+C,IAGAd,OAAAgB,IACA,IAAAC,EAAA7+C,EAAA,qEACA8+C,EAAA9+C,EAAA,UAAA2P,SAAAkvC,GACAE,EAAA/+C,EAAA,SAAA2P,SAAAmvC,GAaA,OAXAF,EAAAjvC,SAAAovC,GAAAtnC,YAAA,YACAmnC,EAAArjC,SAAA,KAAApI,SAAA,OAGAyrC,EAAAzyB,IAAA,CACA6yB,cAAA39C,KAAAu7C,YAAAoB,SAAA7xB,IAAA,eACA8yB,gBAAA59C,KAAAu7C,YAAAoB,SAAA7xB,IAAA,iBACA+yB,iBAAA79C,KAAAu7C,YAAAoB,SAAA7xB,IAAA,kBACAgzB,eAAA99C,KAAAu7C,YAAAoB,SAAA7xB,IAAA,kBAGA0yB,GAGAd,YAAA,KACA,IAAAE,EAAA,GAGAmB,EAAA,GACA/9C,KAAAu7C,YAAAoB,SAAA/mC,KAAA,eAAAtC,MAAA,WACAyqC,EAAA78C,KAAAvC,EAAAqB,MAAAgH,KAAA,WAGA,IAAA,IAAAtH,EAAA,EAAAA,EAAAM,KAAAumB,SAAAjmB,OAAAZ,IAAA,CAEA,IAAAshB,EAAAhhB,KAAAumB,SAAApU,GAAAzS,GACAJ,EAAA0hB,EAAAha,KAAA,OAEAhH,KAAAs9C,2BAAAh+C,KAIAJ,MAAA+N,QAAA3N,EAAAy+C,IACAnB,EAAA17C,KAAA8f,IAIA,OAAA47B,GAGAC,YAAA78C,KAAA88C,aAAA7gC,KAAAjc,MACA+8C,mBAAA/8C,KAAAg9C,oBAAA/gC,KAAAjc,MACAi9C,WAAAj9C,KAAAg+C,kBAAA/hC,KAAAjc,UAOAk9C,gBAAA,WACA,GAAAl9C,KAAAs7C,WAAA2C,mBAAAj+C,KAAAs7C,WAAA2C,kBAAA,KAAAj+C,KAAAghB,QAAA,GAAA,CAQA,IANA,IAAAk9B,EAAAl+C,KAAAghB,QAEAm9B,EAAAn+C,KAAAs7C,WAAA2C,kBAAAj3C,KAAA,aACAo3C,EAAA,GAGA1+C,EAAA,EAAAA,EAAAM,KAAAs7C,WAAAqB,SAAAr8C,OAAAZ,IAAA,CACA,IAAA2+C,EAAAn/C,MAAAuW,eAAAzV,KAAAs7C,WAAAqB,SAAAj9C,IAAAmW,GAEAuoC,EAAAl9C,KAAAm9C,GAIA,GAAAD,EAAA99C,OAAA,CACAN,KAAAsnB,eAEAtnB,KAAA87C,uBACA97C,KAAAi7C,YAAAqD,mBACAt+C,KAAAi7C,YAAAsD,aAAAH,EAAA99C,QACAN,KAAAi7C,YAAAuD,kBAGA,IAAAC,EAAA,GACA,IAAA/+C,EAAA,EAAAA,EAAA0+C,EAAA99C,OAAAZ,IACA++C,EAAAv9C,KAAA,CACA6F,OAAA,oBACAjH,OAAA,CACAkkC,QAAAoa,EAAA1+C,GACAg/C,SAAAP,KAMA,IAAAQ,EAAAC,IACA5+C,KAAAg7C,cAAA6D,eAGA,IAAA,IAAAn/C,EAAA,EAAAA,EAAAk/C,EAAAt+C,OAAAZ,IAAA,CACA,IAAA+K,EAAAm0C,EAAAl/C,GAGA+K,EAAAq0C,UACA9+C,KAAAg7C,cAAA+D,UAAA,CACA/a,QAAAv5B,EAAAu5B,QACAgb,kBAAAv0C,EAAAu0C,kBACAC,OAAA,CAAAp/C,QAAA4K,EAAAq0C,SAAAnD,QAAA37C,KAAA07C,sBAAAC,WAIAlxC,EAAA7C,OACAM,MAAAuC,EAAA7C,OAIA5H,KAAAwnB,oBACAxnB,KAAAi7C,YAAAiE,kBACA,IAAAld,GAAA,EAEAmd,EAAA,WAEAn/C,KAAAygB,aAAAiM,WAAAwxB,GAGAl+C,KAAAi1B,eAAAj1B,KAAAs7C,WAAAqB,SAAAr8C,OAGA,IAAA,IAAAZ,EAAA,EAAAA,EAAA0+C,EAAA99C,OAAAZ,IACAf,EAAA,YAAAy/C,EAAA1+C,GAAA,KAAA4a,SAGAta,KAAA4iB,KAAA+P,sBACA3yB,KAAAo/C,8BAAAjB,GAEAnc,GACAhiC,KAAA+lB,kBAIA,GAAA/lB,KAAAg7C,cAAAqE,iBAAA,CAkDAr/C,KAAAs7C,WAAAgE,iBACAt/C,KAAAg7C,cAAAuE,iBAjDAC,IAIA,IAHA,IAAAC,EAAA,GAGA//C,EAAA,EAAAA,EAAA8/C,EAAAl/C,OAAAZ,IACA,WAAA8/C,EAAA9/C,GAAAggD,QAKA,aAAAF,EAAA9/C,GAAAggD,QACAD,EAAAv+C,KAAA,CACA6F,OAAA,oBACAjH,OAAA,CACA4+C,SAAAP,EACAna,QAAAwb,EAAA9/C,GAAAskC,QACAx4B,SAAAg0C,EAAA9/C,GAAAs/C,qBAKA,YAAAQ,EAAA9/C,GAAAggD,QACAD,EAAAv+C,KAAA,CACA6F,OAAA,oBACAjH,OAAA,CACA4+C,SAAAP,EACAna,QAAAwb,EAAA9/C,GAAAskC,QACAhW,OAAA,MArBAgU,GAAA,EA4BA,IAAAyd,EAAAn/C,OACA6+C,EAAAQ,MAAA3/C,OAGAA,KAAAsnB,eACAtnB,KAAAi7C,YAAAqD,mBACAt+C,KAAAi7C,YAAAsD,aAAAv+C,KAAAg7C,cAAAqE,kBACAr/C,KAAAi7C,YAAAuD,kBAGAx+C,KAAA4/C,sBAAAH,EAAAd,WAOAQ,EAAAQ,MAAA3/C,MACAA,KAAAs7C,WAAAgE,kBAQA,YAHAt/C,KAAA4/C,sBAAAnB,EAAAE,SAOA3+C,KAAAghB,QAAAlP,SAAA,OAEA9R,KAAAo/C,gCAGAp/C,KAAAs7C,WAAAuE,2BAMA7B,kBAAA,WAEA,GACAh+C,KAAAu7C,YAAA0C,mBACA,IAAAj+C,KAAAu7C,YAAA0C,kBAAAr/B,SAAA,MAAA1E,SAAA,MAAAyK,OAAA3kB,KAAAu7C,YAAAoB,UAAAr8C,OACA,CACA,IAAA69C,EAAAn+C,KAAAu7C,YAAA0C,kBAAAj3C,KAAA,aAEAhH,KAAAo/C,8BAAAjB,GAKA,IAFA,IAAA2B,EAAA,GAEApgD,EAAA,EAAAA,EAAAM,KAAAu7C,YAAAoB,SAAAr8C,OAAAZ,IAAA,CACA,IACAg/C,EADA1+C,KAAAu7C,YAAAoB,SAAAxqC,GAAAzS,GAAAwa,SAAA,KACAlT,KAAA,aAGA,GAAA03C,GAAAP,EAAA,CACA2B,EAAA5+C,KAAAw9C,GACA,OAIA,GAAAoB,EAAAx/C,OAAA,CACAw/C,EAAArzC,OACAqzC,EAAAjT,UAEA7sC,KAAAsnB,eACAtnB,KAAA87C,uBACA97C,KAAAi7C,YAAAqD,mBACAt+C,KAAAi7C,YAAAsD,aAAAuB,EAAAx/C,QACAN,KAAAi7C,YAAAuD,kBAEA,IAAAC,EAAA,GAEA,IAAA/+C,EAAA,EAAAA,EAAAogD,EAAAx/C,OAAAZ,IACA++C,EAAAv9C,KAAA,CACA6F,OAAA,qBACAjH,OAAA,CACA4+C,SAAAoB,EAAApgD,GACAqgD,SAAA5B,KAMAn+C,KAAAggD,YAmBA,IAAAC,EAAA,GAEAC,EAAA,GAEAvB,EAAAC,IACA5+C,KAAAg7C,cAAA6D,eAGA,IAAA,IAAAn/C,EAAA,EAAAA,EAAAk/C,EAAAt+C,OAAAZ,IAAA,CACA,IAAAsH,EAAA43C,EAAAl/C,GAGAsH,EAAAW,UACAX,EAAAm5C,eACAF,EAAAj5C,EAAAm5C,cAGAn5C,EAAAo5C,cACAF,EAAAlgD,KAAAu7C,YAAA0C,kBAAAj3C,KAAA,OAAA,WAAAA,EAAAq5C,eAKAr5C,EAAA83C,WACA93C,EAAAi4C,OAAA,CACAp/C,QAAAmH,EAAA83C,SACAnD,QAAA37C,KAAA47C,wBAAAD,SAGA37C,KAAAg7C,cAAA+D,UAAA/3C,IAGAA,EAAAY,OACAM,MAAAlB,EAAAY,OAIA,GAAA5H,KAAAg7C,cAAAqE,iBAAA,CA6CAr/C,KAAAg7C,cAAAuE,iBA3CAC,IACAx/C,KAAAg7C,cAAA6D,eAMA,IAJA,IAAAY,EAAA,GAEA3/C,EAAA,GAEAJ,EAAA,EAAAA,EAAA8/C,EAAAl/C,OAAAZ,IACA,WAAA8/C,EAAA9/C,GAAAggD,SAIA,YAAAF,EAAA9/C,GAAAggD,SACA5/C,EAAAkuB,OAAA,GAGA,UAAAwxB,EAAA9/C,GAAAggD,SACA5/C,EAAAwgD,OAAA,GAGAxgD,EAAA4+C,SAAA13C,EAAA03C,SACA5+C,EAAAigD,SAAA/4C,EAAA+4C,SAEAN,EAAAv+C,KAAA,CACA6F,OAAA,qBACAjH,OAAAA,KAKA,IAAA2/C,EAAAn/C,OACAN,KAAAugD,yBAAAN,EAAAH,EAAAI,IAGAlgD,KAAAsnB,eACAtnB,KAAAi7C,YAAAqD,mBACAt+C,KAAAi7C,YAAAsD,aAAAv+C,KAAAg7C,cAAAqE,kBACAr/C,KAAAi7C,YAAAuD,kBAEAx+C,KAAA4/C,sBAAAH,EAAAd,MAMA3+C,KAAAwnB,oBACAxnB,KAAAi7C,YAAAiE,uBAEAl/C,KAAAugD,yBAAAN,EAAAH,EAAAI,IAQA,YAHAlgD,KAAA4/C,sBAAAnB,EAAAE,SAOA3+C,KAAAghB,QAAAlP,SAAA,OAEA9R,KAAAo/C,gCAGAp/C,KAAAu7C,YAAAsE,2BAMAU,yBAAA,SAAAN,EAAAO,EAAAN,GACAlgD,KAAAsnB,eACAtnB,KAAAi7C,YAAAqD,mBACAt+C,KAAAi7C,YAAAsD,aAAA,GACAv+C,KAAAi7C,YAAAuD,kBAEA,IAAAiC,EAAAD,IAIA,IAFA,IAAAE,EAAA,EACA32B,EAAAy2B,EAAAlgD,OACAZ,EAAA,EAAAA,EAAA8gD,EAAAlgD,OAAAZ,IAEAR,MAAA4H,kBAAA,uBAAA,CAAA43C,SAAA8B,EAAA9gD,IAAA,OACAghD,IAAA32B,IACA/pB,KAAAwnB,oBACAxnB,KAAAi7C,YAAAiE,kBACAl/C,KAAAu7C,YAAAsE,0BACA7/C,KAAA8oB,iBAAA,iBAAAo3B,GACAlgD,KAAAonB,qBAMA,GAAA64B,EAAA3/C,OAAA,EAAA,CAGA,IAFA,IAAAm+C,EAAA,GAEA/+C,EAAA,EAAAA,EAAAugD,EAAA3/C,OAAAZ,IACA++C,EAAAv9C,KAAA,CACA6F,OAAA,oBACAjH,OAAAmgD,EAAAvgD,KAGAM,KAAA4/C,sBAAAnB,GAAA,WACAgC,EAAAD,WAGAC,EAAAD,IAWAG,eAAA,SAAA3/B,GAEA,IADA,IAAA4/B,GACAA,EAAA5gD,KAAA6gD,iBAAA7/B,KAAA4/B,EAAAtgD,QACA0gB,EAAA4/B,EAEA,OAAA5/B,GAUA6/B,iBAAA,SAAA7/B,GACA,GAAAhhB,KAAAg8C,gBAAAh7B,GAAA,EACA,OAAAA,EAAAoD,SAAAA,SAAAxF,SAAA,MAIAkiC,wBAAA,SAAA3C,GAMA,IALA,IAAA4C,EAAA/gD,KAAAghD,gBAAA7C,GAGA8C,EAAAF,EAAA38B,SAAAoK,QAAA,MAEA9uB,EAAA,EAAAA,EAAAuhD,EAAA3gD,OAAAZ,IAAA,CACA,IAAAwhD,EAAAviD,EAAAsiD,EAAAvhD,IAEAwhD,EAAAvrC,SAAA,aACAurC,EAAAhnC,SAAA,WAAAjD,QAAA,SAIAjX,KAAAmnB,aAAA45B,GACA/gD,KAAA+lB,kBAQAJ,UAAA,WACA3lB,KAAA26C,gBACA36C,KAAA26C,cAAAh8C,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,aACAmT,YAAA,SACA6zB,MAAA,wCACA99C,KAAAnE,MAAAS,EAAA,MAAA,kBAEAK,KAAAkvB,UAAAlvB,KAAA26C,eAEA36C,KAAA46C,aAAAj8C,EAAA,kEAAAwf,OAAAijC,aAAAphD,KAAA26C,gBAGA36C,KAAAg7C,cAAA,IAAA97C,MAAAmiD,cACArhD,KAAAi7C,YAAA,IAAA/7C,MAAAoiD,YAAAthD,KAAA0gB,OAAA,GAEA,IAAAxZ,EAAA,CACA5B,IAAApG,MAAAmH,aAAA,iBACAk7C,UAAAvhD,KAAA46C,aACA4G,SAAAxhD,KAAA4S,YAGA1L,EAAAu6C,OAAA,CACAC,gBAAA1hD,KAAA2hD,eAAA1lC,KAAAjc,MACA4hD,sBAAA5hD,KAAA6hD,kBAAA5lC,KAAAjc,MACA8hD,eAAA9hD,KAAA+hD,kBAAA9lC,KAAAjc,OAGAA,KAAAgU,SAAA6Q,eAAA,IAAA7kB,KAAAgU,SAAA6Q,SAAAm9B,OACA96C,EAAA+6C,aAAAjiD,KAAAgU,SAAA6Q,SAAAm9B,MAGAhiD,KAAAq7C,yBAAAn0C,EAEAlH,KAAA+6C,SAAA,IAAA77C,MAAAgjD,SAAAliD,KAAA26C,cAAAzzC,GAEAlH,KAAA26C,cAAAvhC,GAAA,QAAA,KACApZ,KAAA26C,cAAAhlC,SAAA,aAGA3V,KAAA2gB,aACA3gB,KAAA26C,cAAAv2B,SAAAxO,KAAA,6BAAAqB,QAAA,WAIAjX,KAAA0vB,QAGAzI,oBAAA,WAEA,GAAA,UAAAjnB,KAAAgU,SAAAkQ,SAAA,oBAAAi+B,oBACA,IAAA,IAAAziD,EAAA,EAAAA,EAAAM,KAAAumB,SAAAjmB,OAAAZ,IAAA,CACA,IAAAshB,EAAAriB,EAAAqB,KAAAumB,SAAA7mB,IACA,GAAAshB,EAAAha,KAAA,mBAAAm7C,oBACA,OAAAnhC,EAAAha,KAAA,OAKA,OAAAhH,KAAA0vB,QAGAhC,eAAA,WACA,IAAA1M,EAAAhhB,KAAAghD,gBAAAhhD,KAAA8gB,WAeA,GAdAE,EAAAha,KAAA,cAEA5B,QAAA4T,QAAAhZ,KAAAghB,QAAA,oBACAhhB,KAAA+6C,SAAAqH,UAAA,CACA1D,SAAA1+C,KAAAghB,QAAA9S,KAAA,oBAEAlO,KAAA26C,cAAAvkC,YAAA,aAEApW,KAAA26C,cAAA7oC,SAAA,YAMA,UAAA9R,KAAAgU,SAAAkQ,SAAA,oBAAAwF,QAAA,CACA,IAAA9f,EAAA,SACAy4C,EAAAriD,KAAA2gD,eAAA3/B,GACAqhC,GAAAA,EAAAr7C,KAAA,mBACA4C,GAAA,IAAAy4C,EAAAr7C,KAAA,kBAEA0iB,QAAAC,aAAA,GAAA,GAAAzqB,MAAAyF,OAAAiF,IAGA5J,KAAA0vB,QAGA4tB,2BAAA,SAAAx8B,GACA,IAAAjT,EAAAiT,EAAAnb,MAAA,2BAEA,OAAAkI,EAAAA,EAAA,GAAA,MAGAqX,eAAA,WAEA,IAAAllB,KAAAgU,SAAAqQ,aAAArkB,KAAAghB,QAAApC,SAAA,MAAAte,OAAA,CACA,GAAA,OAAAN,KAAAw6C,4BAAA,CACA,IAAA3kC,EAAA,qBAAAlF,KAAAC,MAAA,IAAAD,KAAAe,UAEA1R,KAAAw6C,4BAAA77C,EAAA,oDAAA22B,YAAAt1B,KAAAuhB,SACA,IAAA+gC,EAAA3jD,EAAA,oCAAA2P,SAAAtO,KAAAw6C,6BACAx6C,KAAAy6C,2BAAA97C,EAAA,8BAAAkX,EAAA,wBAAAvH,SAAAg0C,GACA3jD,EAAA,uCAAAkX,EAAA,OAAAxS,KAAA,IAAAnE,MAAAS,EAAA,MAAA,yBAAA2O,SAAAg0C,GAEAtiD,KAAAwc,YAAAxc,KAAAy6C,2BAAA,UAAA,WACAz6C,KAAAkpB,wBAAA,oBAAAlpB,KAAAy6C,2BAAAxkB,KAAA,YACAj2B,KAAA+lB,yBAGA/lB,KAAAw6C,4BAAAhjC,SAAA,QAGA,IAAA+qC,EAAAviD,KAAAipB,uBAAA,qBAAA,GACAjpB,KAAAy6C,2BAAAxkB,KAAA,UAAAssB,GAEAviD,KAAAw6C,4BAAAhjC,SAAA,CACAgrC,aAAA,EACApoB,QAAA,GACA,QAEAp6B,KAAA06C,kCAAA,EAGA16C,KAAA0vB,QAGAvK,cAAA,WACAnlB,KAAA06C,mCACA16C,KAAAw6C,4BAAAhjC,SAAA,QAEAxX,KAAAw6C,4BAAAhjC,SAAA,CACAgrC,cAAA,GACApoB,QAAA,GACA,QAEAp6B,KAAA06C,kCAAA,GAGA16C,KAAA0vB,QAGA7F,cAAA,WACA,IAAA7iB,EAAAhH,KAAA0vB,OAMA,OAJA1vB,KAAA06C,kCAAA16C,KAAAy6C,2BAAAxkB,KAAA,aACAjvB,EAAA6d,SAAA49B,mBAAA,GAGAz7C,GAQA26C,eAAA,WACA3hD,KAAAsnB,eAGAtnB,KAAA87C,uBACA97C,KAAAi7C,YAAAqD,mBACAt+C,KAAAi7C,YAAAuD,kBAEAx+C,KAAAg7C,cAAA6D,gBAMAgD,kBAAA,SAAA5gB,EAAAj6B,GACA,IAAA07C,EAAAxgD,SAAA8E,EAAA27C,OAAA37C,EAAA0qB,MAAA,IAAA,IACA1xB,KAAAi7C,YAAA2H,sBAAAF,IAMAX,kBAAA,SAAA9gB,EAAAj6B,GACA,IAAAyD,EAAAzD,EAAAyK,OACAjG,EAAAxE,EAAA67C,MAAA,GAAA59C,KAEA69C,GAAA,EAEAr4C,EAAA9C,SAAA8C,EAAAq0C,UAEA9+C,KAAAo7C,kBAAAl6C,KAAAuJ,EAAAu5B,SAGAv5B,EAAAq0C,WACAr0C,EAAAw0C,OAAA,CACAp/C,QAAAX,MAAAS,EAAA,MAAA8K,EAAAq0C,SAAA,CAAAiE,KAAAt4C,EAAAe,WACAmwC,QAAA37C,KAAA07C,sBAAAC,SAGA37C,KAAAg7C,cAAA+D,UAAAt0C,IAGAvL,MAAA8I,GAAAiY,aAEAxV,EAAA7C,MACAM,MAAAhJ,MAAAS,EAAA,MAAA,kDAAA,CAAAiI,MAAA6C,EAAA7C,SAEAM,MAAAhJ,MAAAS,EAAA,MAAA,gCAAA,CAAA6L,SAAAA,KAGAs3C,GAAA,GAIA9iD,KAAA+6C,SAAAiI,iBACAhjD,KAAAwnB,oBACAxnB,KAAAi7C,YAAAiE,kBAEAl/C,KAAAg7C,cAAAqE,iBACAr/C,KAAAg7C,cAAAuE,iBAAAv/C,KAAAijD,gBAAAhnC,KAAAjc,OAEA8iD,GACA9iD,KAAAkjD,uBAWAA,mBAAA,WACA,UAAAljD,KAAAgU,SAAAkQ,UACAlkB,KAAA4oB,iBAAA,gBACA5oB,KAAAssB,iBAAA,SAEAtsB,KAAA+lB,kBASAk9B,gBAAA,SAAAzD,GACAx/C,KAAAsnB,eACAtnB,KAAAi7C,YAAAqD,mBAEAt+C,KAAAg7C,cAAA6D,eAQA7+C,KAAAi7C,YAAAsD,aAAAiB,EAAAl/C,QAEA,IAAA6iD,EAAA,CAAA1E,EAAA2E,EAAAn8C,KACA,IAAAsqC,EAAA,GACAxqC,EAAA,KAEAs8C,EAAA,CAAAr8C,EAAAa,KACA,YAAAA,GAAAb,EAAAg9B,QACAhkC,KAAAo7C,kBAAAl6C,KAAA8F,EAAAg9B,SACAh9B,EAAAY,OACAM,MAAAlB,EAAAY,OAEAw7C,IACApjD,KAAAi7C,YAAAqI,4BAAA,GACAtjD,KAAAi7C,YAAAsI,oBAEAH,IAAA3E,EAAAn+C,OACA2G,IAEAk8C,EAAA1E,EAAA2E,EAAAn8C,IAIA,YAAAw3C,EAAA2E,GAAA1D,QACA34C,EAAA,sBACAwqC,EAAAiS,cAAA/E,EAAA2E,GAAApf,QAEAya,EAAA2E,GAAAK,mBACAlS,EAAAvN,QAAAya,EAAA2E,GAAAK,mBAEAlS,EAAAmS,eAAAjF,EAAA2E,GAAA53C,UAEA,WAAAizC,EAAA2E,GAAA1D,SACA34C,EAAA,sBACAwqC,EAAAvN,QAAAya,EAAA2E,GAAApf,SAGAj9B,EAIA7H,MAAA4H,kBAAAC,EAAAwqC,EAAA8R,GAFAA,EAAA,CAAArf,QAAAya,EAAA2E,GAAApf,SAAA,YAMAhkC,KAAAi7C,YAAAuD,kBACA2E,EAAA3D,EAAA,EApDA,KACAx/C,KAAAwnB,oBACAxnB,KAAAi7C,YAAAiE,kBACAl/C,KAAAkjD,wBAwDAtzB,iBAAA,WACA5vB,KAAA2jD,mBAAA,EAAA3jD,KAAA4iB,KAAAwT,kBACAp2B,KAAA4iB,KAAAxJ,GAAA,iBAAAC,IACArZ,KAAA2jD,mBAAA,EAAAtqC,EAAAme,eAGAx3B,KAAA0vB,QAOAi0B,kBAAA,SAAAtxC,EAAAglB,GAUA,GATA,UAAAr3B,KAAAgU,SAAAkQ,UACA7R,GACArS,KAAAs7C,WAAAj0B,iBAGArnB,KAAAs7C,WAAA5zB,SAAA2P,EAAA2G,IAAA,+BAIAh+B,KAAAo7C,kBAAA96C,OAAA,CACA,GAAAN,KAAA4iB,KAAA5O,SAAA6e,WACA,IAAA,IAAAnzB,EAAA,EAAAA,EAAAM,KAAAo7C,kBAAA96C,OAAAZ,IACAM,KAAA4iB,KAAAoQ,kBAAAhzB,KAAAo7C,kBAAA17C,IAKAM,KAAAo7C,kBAAA,GAGAp7C,KAAA0vB,KAAArd,EAAAglB,GAEAr3B,KAAAmoB,eAAAnoB,KAAAwiB,UAAA,WACAxiB,KAAAwc,YAAAxc,KAAAwiB,UAAA,UAAAxiB,KAAA4jD,WAAA3nC,KAAAjc,OACAA,KAAA4iB,KAAAmS,cAAA3b,GAAA,YAAApZ,KAAA6jD,gBAAA5nC,KAAAjc,QAOA4jD,WAAA,SAAAvqC,GACA,GAAAA,EAAAyG,UAAA1a,QAAAwtB,WAAAvZ,EAAAyqC,SAAA,CACA,GAAA5kD,MAAA6kD,iBAAAC,aACA9kD,MAAA6kD,iBAAAC,aAAAC,mBACA,CACA,IAAAvuC,EAAA1V,KAAA4iB,KAAAmS,cAAAmvB,aAAAtuC,KAAA,YAEAF,EAAApV,QACAN,KAAAmkD,aAAAzuC,GAKA,OADA2D,EAAA2X,mBACA,IAQA6yB,gBAAA,SAAAxqC,GACA,IAAA3D,EAAA/W,EAAA0a,EAAA2Y,MAAApc,KAAA,YAEA1W,MAAA6kD,iBAAAC,cAAAtuC,EAAApV,QACAN,KAAAmkD,aAAAzuC,IAQAyuC,aAAA,SAAAzuC,GACA,IAAA1B,EAAA,GAEA0B,EAAA1O,KAAA,iBACAgN,EAAAowC,cAAA1uC,EAAA1O,KAAA,eACAgN,EAAAqwC,eAAA3uC,EAAA1O,KAAA,iBAGA,IAAA9H,MAAA6kD,iBAAAruC,EAAA1O,KAAA,MAAAhH,KAAA4iB,KAAAmS,cAAA/gB,IAMA8oC,aAAA,WACA98C,KAAAy7C,qBAAA,IAMAgB,mBAAA,SAAA/mC,GACA,IACA4uC,EACAC,EAEA,OAJAvkD,KAAAipB,uBAAA,SAKA,IAAA,QACAq7B,EAAA3lD,EAAA,+CAAA2P,SAAAlJ,QAAAsN,MACA6xC,EAAA5lD,EAAA,4BAAA2P,SAAAg2C,GACA,IAAAzkB,EAAAlhC,EAAA,yBAAA2P,SAAAi2C,GACAxnB,EAAAp+B,EAAA,YAAA2P,SAAAuxB,GAEAnqB,EAAApH,SAAAyuB,GAGA/8B,KAAAwkD,gBAAAxkD,KAAA4iB,KAAAid,OAAA3lB,SAAA,SAAAA,SAAA,YAAAA,WAGA,IAFA,IAAAuqC,EAAA/uC,EAAAwE,WAEAxa,EAAA,EAAAA,EAAA+kD,EAAAnkD,OAAAZ,IAAA,CAEA,IAAAglD,EAAA/lD,EAAA8lD,EAAA/kD,IAGA,GAAAglD,EAAA/uC,SAAA,iBACA+uC,EAAApqC,SACAgqC,EAAAx5B,IAAA,UAAA5rB,MAAAuY,KAAA,QAFA,CAMA,IAAAktC,EAAAhmD,EAAAqB,KAAAwkD,gBAAA9kD,IACAonC,EAAA6d,EAAA7d,QAEA6d,EAAA7d,MAAAA,GACA4d,EAAA5d,MAAAA,IAGA,OAAAwd,EAEA,IAAA,SAMA,OALAA,EAAA3lD,EAAA,2CAAA2P,SAAAlJ,QAAAsN,MACA6xC,EAAA5lD,EAAA,4BAAA2P,SAAAg2C,GAEA5uC,EAAApH,SAAAi2C,GAEAD,EAIA,OAAA3lD,KAMAq+C,oBAAA,SAAA4H,GAGA,GAFAx/B,aAAAplB,KAAAw7C,gCAEAoJ,EAAA,CACA,IAAAlG,EAAAkG,EAAA59C,KAAA,aAEA03C,GACA1+C,KAAA6kD,iBAAA7kD,KAAAghD,gBAAAtC,GAEA1+C,KAAA8kD,eAAA9kD,KAAA6kD,oBAAA7kD,KAAA+kD,YAAA/kD,KAAA6kD,oBACA7kD,KAAAw7C,+BAAAn2B,WAAArlB,KAAAglD,cAAA/oC,KAAAjc,MAAA,OAGAA,KAAA6kD,iBAAA,KAIAD,GAAAA,EAAA,KAAA5kD,KAAAghB,QAAA,GAEAhhB,KAAAghB,QAAA5K,YAAA,OAEApW,KAAAghB,QAAAlP,SAAA,QAOAstC,8BAAA,SAAA6F,GAIA,IAAAC,EAHA9/B,aAAAplB,KAAAw7C,gCAKAyJ,IACAC,EAAAllD,KAAAghD,gBAAAiE,GAAAz2B,QAAA,MAAAtU,SAAA,MAGA,IAAA,IAAAxa,EAAAM,KAAAy7C,qBAAAn7C,OAAA,EAAAZ,GAAA,EAAAA,IAAA,CACA,IAAAshB,EAAAhhB,KAAAy7C,qBAAA/7C,QAGA,IAAAwlD,GAAA,IAAAA,EAAAvgC,OAAA,cAAA3D,EAAAha,KAAA,OAAA,MAAA1G,SACAN,KAAAmlD,gBAAAnkC,GACAhhB,KAAAy7C,qBAAAnsC,OAAA5P,EAAA,MAKAshD,gBAAA,SAAA1hD,GACA,OAAAU,KAAAumB,SAAA5B,OAAA,eAAArlB,EAAA,OAGAwlD,eAAA,SAAA9jC,GACA,OAAAA,EAAApC,SAAA,MAAAhJ,KAAA,MAAAtV,QAGAykD,YAAA,SAAA/jC,GACA,OAAAA,EAAAoD,OAAA,MAAAzO,SAAA,aAGAqvC,cAAA,WAEAhlD,KAAAo/C,8BAAAp/C,KAAA6kD,iBAAA79C,KAAA,cAEAhH,KAAA6kD,iBAAAjmC,SAAA,WAAA3H,QAAA,SAGAjX,KAAAy7C,qBAAAv6C,KAAAlB,KAAA6kD,mBAGAM,gBAAA,SAAAnkC,GACAA,EAAAoD,SAAAzO,SAAA,aACAqL,EAAApC,SAAA,WAAA3H,QAAA,UAIA8kC,yBAAA,SAAA/6B,GAEA,GAAAhhB,KAAAs9C,2BAAAt8B,EAAAha,KAAA,QAAA,CAIA,IAAAo+C,EAAA,CACA,CACArvC,MAAA7W,MAAAS,EAAA,MAAA,iBACA0lD,QAAA,KACArlD,KAAAslD,iBAAAtkC,MAMA,UAAAhhB,KAAAgU,SAAAkQ,SAAAlkB,KAAAg8C,gBAAAh7B,GAAA,IACAokC,EAAAlkD,KAAA,CACA6U,MAAA7W,MAAAS,EAAA,MAAA,iBACA0lD,QAAA,KACArlD,KAAAulD,cAAAvkC,MAGAokC,EAAAlkD,KAAA,CACA6U,MAAA7W,MAAAS,EAAA,MAAA,iBACA0lD,QAAA,KACArlD,KAAAwlD,cAAAxkC,OAKA,IAAA5b,QAAAqgD,YAAAzkC,EAAAokC,EAAA,CAAAM,UAAA,WAGAJ,iBAAA,SAAAK,GACA,IAAAC,EAAA3G,OAAA//C,MAAAS,EAAA,MAAA,iCAEA,GAAAimD,EAAA,CACA,IAAA9lD,EAAA,CACAigD,SAAA4F,EAAA3+C,KAAA,aACA6+C,WAAAD,GAGA5lD,KAAAsnB,eAEApoB,MAAA4H,kBAAA,uBAAAhH,EAAA,CAAAkH,EAAAa,KAGA,GAFA7H,KAAAwnB,oBAEA,YAAA3f,GAAAb,EAAAW,QAAA,CACA3H,KAAA8lD,0BAAAH,GAEA,IAAAI,EAAApnD,EACA,oBACAgnD,EAAA3+C,KAAA,OAAA,WAAAA,EAAAg/C,UAAA,KACA5gD,QAAA4T,QAAA2sC,EAAA,mBAAA,mBAAA,IACA,oBAAA3+C,EAAA03C,SAAA,KACAt5C,QAAA4T,QAAA2sC,EAAA,mBAAA,mBAAA,KACAvgD,QAAA4T,QAAA2sC,EAAA,oBAAA,oBAAA,KACAvgD,QAAA4T,QAAA2sC,EAAA,+BAAA,+BAAA,IACA,IACA3+C,EAAA6+C,WARA,aAaAxmC,EAAA0mC,EAAA7rC,SAAA,WACAla,KAAAimD,iBAAAN,EAAAI,GACA/lD,KAAAynB,WAAApI,GAGA,YAAAxX,GAAAb,EAAAY,OACAM,MAAAlB,EAAAY,WAMA49C,cAAA,SAAAU,GACA,GAAArvC,QAAA3X,MAAAS,EAAA,MAAA,mCAAA,CAAAwmD,OAAAxnD,EAAA0C,KAAA6kD,EAAA7iD,WAAA,CACA,IAAAvD,EAAA,CACA4+C,SAAAwH,EAAAl/C,KAAA,cAGAhH,KAAAsnB,eAEApoB,MAAA4H,kBAAA,uBAAAhH,EAAA,CAAAkH,EAAAa,KAGA,GAFA7H,KAAAwnB,oBAEA,YAAA3f,GAAAb,EAAAW,QAAA,CACA,IAAAg+C,EAAA3lD,KAAA6gD,iBAAAqF,GAGAlmD,KAAAioB,aAAAi+B,GAEAA,EAAA9hC,SAAA9J,SACAta,KAAAomD,aAAAT,GAGA,YAAA99C,GAAAb,EAAAY,OACAM,MAAAlB,EAAAY,WASA29C,cAAA,SAAAW,GACA,IAAAG,EAAA1nD,EAAA0C,KAAA6kD,EAAA7iD,QACAijD,EAAArH,OAAA//C,MAAAS,EAAA,MAAA,iBAAA0mD,GAEA,GAAAC,GAAAA,IAAAD,EAAA,CACA,IAAAvmD,EAAA,CACA4+C,SAAAwH,EAAAl/C,KAAA,aACAs/C,QAAAA,GAGAtmD,KAAAsnB,eAEApoB,MAAA4H,kBAAA,uBAAAhH,EAAA,CAAAkH,EAAAa,KACA7H,KAAAwnB,oBAEA,YAAA3f,GAAAb,EAAAW,UACAu+C,EAAA7iD,KAAA2D,EAAAs/C,SAGAtmD,KAAAs9C,2BAAAt9C,KAAAygB,aAAAoP,eAAA7oB,KAAA,UAAAhH,KAAAs9C,2BAAA4I,EAAAl/C,KAAA,SACAhH,KAAA+lB,kBAIA,YAAAle,GAAAb,EAAAY,OACAM,MAAAlB,EAAAY,QAEA,UAUAk+C,0BAAA,SAAAH,GACA3lD,KAAA8kD,eAAAa,KACAA,EAAAvhC,SAAAtS,SAAA,YAAAO,OAAA,uCACArS,KAAA2nB,iBAAAg+B,KAWAM,iBAAA,SAAAN,EAAAI,GAMA,IALA,IACAQ,EADAZ,EAAA/mC,SAAA,MACA1E,SAAA,MACAssC,EAAA7nD,EAAA0C,KAAA0kD,EAAA7rC,SAAA,WAAA7W,QACAojD,GAAA,EAEA/mD,EAAA,EAAAA,EAAA6mD,EAAAjmD,OAAAZ,IAAA,CACA,IAAAgnD,EAAA/nD,EAAA4nD,EAAA7mD,IAEA,GAAAf,EAAA0C,KAAAqlD,EAAAxsC,SAAA,WAAA7W,QAAAmjD,EAAA,CACAE,EAAAC,OAAAZ,GACAU,GAAA,EACA,OAIAA,GACAd,EAAA/mC,SAAA,MAAAvM,OAAA0zC,IAIAK,aAAA,SAAAT,GACA,OAAAA,GAAA,IAAAA,EAAA/mC,SAAA,MAAA1E,SAAA,MAAA5Z,SACAN,KAAA8nB,mBAAA69B,GACAA,EAAA/mC,SAAA,MAAAtE,SACAqrC,EAAA/mC,SAAA,WAAAtE,SACAqrC,EAAAvhC,SAAAhO,YAAA,cAIA0lC,qBAAA,WACA97C,KAAAi7C,cACAj7C,KAAAi7C,YAAA,IAAA/7C,MAAAoiD,YAAAthD,KAAA0gB,OAAA,IAGA,IAAA9N,EAAAjU,IACAgsB,EAAA,EACA7oB,EAAA,EAEA,UAAA9B,KAAAgU,SAAAkQ,SACAtR,EAAA5S,KAAAi7C,YAAAJ,aAAAphC,QAAA,YACAkR,EAAAvlB,QAAA2xB,KAAApM,cAEA/X,EAAA5S,KAAAi7C,YAAAJ,aAAAphC,QAAA,SACAkR,EAAA3qB,KAAA0gB,MAAAiK,aAGA,IACAyvB,EAAAzvB,EADA/X,EAAA9Q,SAAAm1B,IAEA2vB,EAAAxhD,QAAA2xB,KAAAhM,SAGAjpB,EADA8Q,EAAAmY,SAAA67B,EACAA,EAAA,EAAA,EAAAxM,EAEAxnC,EAAAmY,SAAA,EAAA,EAGA,UAAA/qB,KAAAgU,SAAAkQ,UACApiB,EAAA6oB,GAAA/X,EAAAmY,SAAA,EAAA,IAGA/qB,KAAAi7C,YAAAJ,aAAA/vB,IAAA,CACAmM,IAAAn1B,KAIA89C,sBAAA,SAAAnB,EAAAoI,GAqBA,IApBA,IAAAjI,EAAA,GAEAkI,EAAAC,IACA7nD,MAAA4H,kBAAAigD,EAAAhgD,OAAAggD,EAAAjnD,OAAA,CAAAkH,EAAAa,KACA7H,KAAAi7C,YAAAqI,4BAAA,GACAtjD,KAAAi7C,YAAAsI,oBAEA,YAAA17C,IACA+2C,EAAA19C,KAAA8F,GAGA9H,MAAA8I,GAAAiY,YAGA2+B,EAAAt+C,QAAAm+C,EAAAn+C,QACAumD,EAAAjI,MAKAl/C,EAAA,EAAAA,EAAA++C,EAAAn+C,OAAAZ,IACAonD,EAAArI,EAAA/+C,OAMAR,MAAAwU,0BAAA,yBAAAxU,MAAAq7C,YC/6CAr7C,MAAA8nD,iBAAA9nD,MAAAw4B,uBAAAz4B,OAAA,CACA+gD,UAAA,EACA5kC,IAAA,KACA6rC,WAAA,KACAlM,SAAA,KACAE,YAAA,KAEAiM,iBAAA,GACAC,kBAAA,GAEA9rC,KAAA,WACA6c,UAAA53B,OAAA,GAAA,iBAAA43B,UAAA,KACAA,UAAA,GAAAyE,eAAA,CACApf,UAAAvd,KAAAonD,sBAAAnrC,KAAAjc,MACA2c,aAAA3c,KAAAqnD,cAAAprC,KAAAjc,MACAif,WAAA,CACAjf,KAAAsnD,oBAAArrC,KAAAjc,SAKAA,KAAA0vB,KAAAiwB,MAAA3/C,KAAAk4B,WAEAl4B,KAAAgU,SAAAuzC,WACAvnD,KAAAwnD,kBAGAxnD,KAAAwc,YAAAxc,KAAA63B,mBAAA,UAAA73B,KAAA4jD,WAAA3nC,KAAAjc,OACAA,KAAA+0B,cAAA3b,GAAA,YAAApZ,KAAA6jD,gBAAA5nC,KAAAjc,QAOA4jD,WAAA,SAAAvqC,GACA,GAAAA,EAAAyG,UAAA1a,QAAAwtB,WAAAvZ,EAAAyqC,SAAA,CACA,GAAA5kD,MAAA6kD,iBAAAC,aACA9kD,MAAA6kD,iBAAAC,aAAAC,mBACA,CACA,IAAAvuC,EAAA1V,KAAA+0B,cAAAmvB,aAEAxuC,EAAApV,QACAN,KAAAmkD,aAAAzuC,GAMA,OAFA2D,EAAA2X,mBAEA,IAQA6yB,gBAAA,SAAAxqC,GACA,IAAA3D,EAAA/W,EAAA0a,EAAA2Y,MAEA9yB,MAAA6kD,iBAAAC,cAAAtuC,EAAApV,QACAN,KAAAmkD,aAAAzuC,IAQAyuC,aAAA,SAAAzuC,GACA,IAAA1B,EAAA,GAEA0B,EAAA1O,KAAA,iBACAgN,EAAAowC,cAAA1uC,EAAA1O,KAAA,eACAgN,EAAAqwC,eAAA3uC,EAAA1O,KAAA,iBAGA,IAAA9H,MAAA6kD,iBAAAruC,EAAA1O,KAAA,MAAAhH,KAAA+0B,cAAA/gB,IAMAI,oBAAA,SAAAsB,GACA,OAAA1V,KAAA0vB,KAAAha,EAAA,CACA5V,OAAA,CACA2nD,qBAAAznD,KAAAgU,SAAAyzC,sBAEArjD,MAAApE,QAOAwnD,gBAAA,WACAxnD,KAAAi7C,YAAA,IAAA/7C,MAAAoiD,YAAA3iD,EAAA,sCAAA2P,SAAAtO,KAAA4S,aAEA,IAAA1L,EAAA,CACA5B,IAAApG,MAAAmH,aAAA,iBACAm7C,SAAAxhD,KAAA4S,WACA80C,SAAA,CACAhrB,QAAA18B,KAAAgU,SAAA0oB,UAIA18B,KAAAgU,SAAAsnB,kBACAp0B,EAAAwgD,SAAA9sC,UAAA5a,KAAAgU,SAAAsnB,iBAGAt7B,KAAAgU,SAAA6Q,SAAA/O,SACA5O,EAAAwgD,SAAA5xC,OAAA9V,KAAAgU,SAAA6Q,SAAA/O,QAGA9V,KAAA83B,iBACA93B,KAAAinD,WAAAtoD,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,aACAmT,YAAA,SACAjqB,KAAA,GAAArD,KAAAgU,SAAA+V,MAAA7qB,MAAAS,EAAA,MAAA,iBAAAT,MAAAS,EAAA,MAAA,kBACA21B,YAAAt1B,KAAA83B,gBACA5wB,EAAAq6C,UAAA5iD,EAAA,WAAA,CACA4C,KAAA,OACA4Y,MAAA,SACAwtC,SAAA,GAAA3nD,KAAAgU,SAAA+V,QACAuL,YAAAt1B,KAAAinD,YAGA7hD,QAAA2xB,KAAA9f,QAAA,gBAIA,IAAA/X,MAAA0H,oBAAA,IAAA1H,MAAA2H,iBAEAK,EAAAwgD,SAAAxoD,MAAA0H,eAAA1H,MAAA2H,qBAGA,IAAA7G,KAAAgU,SAAA6Q,SAAAm9B,OACA96C,EAAA+6C,aAAAjiD,KAAAgU,SAAA6Q,SAAAm9B,MAGA96C,EAAA0gD,gBAAA5nD,KAAA4nD,gBAAA3rC,KAAAjc,MAEAkH,EAAAu6C,OAAA,GACAv6C,EAAAu6C,OAAAC,gBAAA1hD,KAAA2hD,eAAA1lC,KAAAjc,MACAkH,EAAAu6C,OAAAG,sBAAA5hD,KAAA6hD,kBAAA5lC,KAAAjc,MACAkH,EAAAu6C,OAAAK,eAAA9hD,KAAA+hD,kBAAA9lC,KAAAjc,MAEAA,KAAA+6C,SAAA,IAAA77C,MAAAgjD,SAAAliD,KAAA4S,WAAA1L,GAEAlH,KAAAinD,YACAjnD,KAAAinD,WAAA7tC,GAAA,QAAAC,IAGArZ,KAAAinD,WAAAttC,KAAA,oBAAA1C,QAAA,YAKAorB,iBAAA,SAAAznB,GACA,IAAAmsC,EAAA,CACAnsC,UAAAA,EACA9E,OAAA9V,KAAAgU,SAAA6Q,SAAA/O,OACAI,KAAAlW,KAAAgU,SAAA2O,UAGAzjB,MAAA4H,kBAAA,4BAAAigD,EAAA//C,IACA,GAAAA,EAAAY,MACAM,MAAAlB,EAAAY,WACA,CACA,IAAAigD,EAAA7nD,KAAAwiB,UAAAmC,OAAA,aAAA/J,EAAA,MACAitC,EAAAjyC,KAAA,iBAAAa,YAAA9X,EAAAqI,EAAAjI,MAAA6W,KAAA,kBACA5V,KAAA80B,YAAAa,KAAAkyB,OAQAC,mBAAA,SAAAzzC,GAEA,GAAArU,KAAAu5B,qBAAA,CAIA,IAAAwuB,EAAA1zC,EAAAqB,SAGAqyC,EAAAj2C,SAAA,aACAi2C,EAAA/rB,QAAA,8BAAAh8B,KAAAgU,SAAA/O,KAAA,cAAAoP,EAAAwB,GAAA,mCACA3W,MAAAS,EAAA,MAAA,UAAA,UAEAooD,EAAAz5C,SAAAtO,KAAA63B,oBAEA,IAAAmwB,IAAAD,EAAA1tB,aAAA,IAEAr6B,KAAA83B,eAAAhN,IAAA,UAAA5rB,MAAAuY,KAAAuwC,EAAA,MAEA,IAAA7tB,EAAA,GACAA,EAAA,UAAAj7B,MAAAuY,MAAA,EACAzX,KAAA83B,eAAAtgB,SAAA2iB,EAAA,QAEAn6B,KAAA45B,YAAAmuB,UAEA/nD,KAAAwvB,QAMAmyB,eAAA,WACA3hD,KAAAi7C,YAAAJ,aAAA/vB,IAAA,CACAmM,IAAAtmB,KAAAK,MAAAhR,KAAA4S,WAAAskB,cAAA,GAAA,IAGAl3B,KAAA4S,WAAAd,SAAA,aACA9R,KAAAi7C,YAAAqD,mBACAt+C,KAAAi7C,YAAAuD,mBAMAqD,kBAAA,SAAA5gB,EAAAj6B,GACA,IAAA07C,EAAAxgD,SAAA8E,EAAA27C,OAAA37C,EAAA0qB,MAAA,IAAA,IACA1xB,KAAAi7C,YAAA2H,sBAAAF,IAMAX,kBAAA,SAAA9gB,EAAAj6B,GACA,GAAAA,EAAAyK,OAAA7J,MACAM,MAAAlB,EAAAyK,OAAA7J,WACA,CACA,IAAAm/C,EAAA,CACAnsC,UAAA5T,EAAAyK,OAAAuyB,QACAluB,OAAA9V,KAAAgU,SAAA6Q,SAAA/O,OACAI,KAAAlW,KAAAgU,SAAA2O,UAGAzjB,MAAA4H,kBAAA,4BAAAigD,EAAA//C,IACA,GAAAA,EAAAY,MACAM,MAAAlB,EAAAY,WACA,CACA,IAAA7I,EAAAJ,EAAAqI,EAAAjI,MACAG,MAAA8S,eAAAhL,EAAA8X,UACA9e,KAAA8nD,mBAAA5oD,MAAAuW,eAAA1W,IAIAiB,KAAA+6C,SAAAiI,iBACAhjD,KAAAi7C,YAAAiE,kBACAl/C,KAAA4S,WAAAwD,YAAA,aAEAvK,OAAAyuB,aACAzuB,OAAAyuB,YAAAmC,eAKAv9B,MAAA8I,GAAAiY,aAOA2nC,gBAAA,SAAAK,GACA,OAAAjoD,KAAAgU,SAAA+V,OAAA/pB,KAAAwiB,UAAAliB,OAAA2nD,EAAAjoD,KAAAgU,SAAA+V,OASAm+B,eAAA,SAAA18C,GACA,IAAA28C,EAAA38C,EAAArK,MAAA,KACAinD,EAAA,GAMA,OAJAD,EAAA7nD,OAAA,IACA8nD,EAAAD,EAAAE,OAGA,CAAAD,UAAAA,EAAAE,aADAH,EAAA1nD,KAAA,OAQA4mD,cAAA,SAAAp5C,GACAtP,EAAA,gBAAAsP,GAAAmL,GAAA,QAAA1O,IACA,IAAAtG,EAAAsG,EAAA6O,cACA/N,EAAAxL,KAAAkoD,eAAA9jD,EAAAe,OAEA,KAAAnF,KAAAknD,kBAAA,KAAAlnD,KAAAmnD,oBACAnnD,KAAAknD,iBAAA17C,EAAA88C,aACAtoD,KAAAmnD,kBAAA37C,EAAA48C,WAGA,IACAG,EAAA/8C,EAAA88C,aAAAhoD,OAEA,QAAA,IAAA8D,EAAAokD,eACApkD,EAAAokD,eAJA,EAKApkD,EAAAqkD,aAAAF,OACA,GAAA/hD,SAAAguC,WAAAhuC,SAAAguC,UAAAkU,YAAA,CAEAtkD,EAAAukD,SACA,IAAAC,EAAApiD,SAAAguC,UAAAkU,cACAE,EAAAC,UAAA,GACAD,EAAAE,QAAA,YAAAP,GACAK,EAAAG,UAAA,YAZA,GAaAH,EAAAD,aAKAvB,sBAAA,WACApnD,KAAAknD,iBAAA,GACAlnD,KAAAmnD,kBAAA,IAGAG,oBAAA,WACA,IAAA0B,EAAArqD,EAAA,gBAAAqB,KAAA43B,cAAAxc,IAAA6C,KAAAjX,KAAA,iBAAAiH,OACAzC,EAAAxL,KAAAkoD,eAAAc,EAAA1kD,OAEA,OAAAkH,EAAA48C,YAAApoD,KAAAmnD,oBAEA,KAAA37C,EAAA48C,UAEApoD,KAAAknD,mBAAA17C,EAAA88C,cACAU,EAAA1kD,IAAAkH,EAAA88C,aAAA,IAAAtoD,KAAAmnD,oBACA,GAGAtwC,QAAA3X,MAAAS,EAAA,MAAA,0DAAA,CAAAspD,IAAAjpD,KAAAmnD,qBAIAtwC,QAAA3X,MAAAS,EAAA,MAAA,iFACA,CACAupD,OAAAlpD,KAAAmnD,kBACAgC,OAAA39C,EAAA48C,iBC3VAlpD,MAAAkqD,mBAAAlqD,MAAAiV,yBAAAlV,OAAA,CACAoqD,oBAAA,KACAC,mBAAA,KAEAjuC,KAAA,SAAA1H,EAAAK,GACAA,EAAArV,EAAAM,OAAA,GAAAC,MAAAkqD,mBAAA9tC,SAAAtH,GAEAhU,KAAA0vB,KAAA/b,EAAAK,GAEAA,EAAAu1C,WAAAjpD,QACAN,KAAAwpD,4BAAAx1C,EAAAu1C,aAIAC,4BAAA,SAAAD,GACA,GAAAA,GAAAA,EAAAjpD,OAAA,CAIA,IAAAmpD,EAAA9qD,EAAA,2BAAA2P,SAAAtO,KAAAg9B,iBACAh9B,KAAA68B,WAAAvuB,SAAAm7C,GAEAzpD,KAAAqpD,oBAAA1qD,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,uBACA9W,KAAAnE,MAAAS,EAAA,MAAA,sBACA2O,SAAAm7C,GAKA,IAHA,IAAAj2B,EAAA70B,EAAA,+CAAA22B,YAAAt1B,KAAAqpD,qBACAK,EAAA/qD,EAAA,aAAA2P,SAAAklB,GAEA9zB,EAAA,EAAAA,EAAA6pD,EAAAjpD,OAAAZ,IACAf,EAAA,0BAAA4qD,EAAA7pD,GAAAm2B,OAAA,KAAA0zB,EAAA7pD,GAAAuF,KAAA,aAAAqJ,SAAAo7C,GAGA,IAAAC,EAAA,IAAAvkD,QAAAyU,QAAA7Z,KAAAqpD,oBAAA,CACAO,eAAA5pD,KAAA6pD,kBAAA5tC,KAAAjc,QAEA2pD,EAAA/xC,UAEA5X,KAAAqpD,oBAAAriD,KAAA,aAAA2iD,KAGA7iC,kBAAA,SAAAzN,GACA,IAAAgd,EAAAr2B,KAAAkgB,aAAA8L,sBACA89B,GAAA,EAEA,GAAAzzB,EAAA/1B,QAAAN,KAAAgU,SAAAu1C,WAAAjpD,OAAA,CACAwpD,GAAA,EAEA,IAAA,IAAApqD,EAAA,EAAAA,EAAA22B,EAAA/1B,QACA3B,EAAA,0BAAA03B,EAAA32B,IAAAY,OADAZ,MAOA,IAAAma,EAAA,KAEA7Z,KAAAqpD,sBACAxvC,EAAA7Z,KAAAqpD,oBAAAriD,KAAA,eAGA8iD,GACAjwC,GACAA,EAAA9B,SAGA/X,KAAAqpD,oBAAAjzC,YAAA,aACApW,KAAAqpD,sBACAxvC,GACAA,EAAAjC,UAGA5X,KAAAqpD,oBAAAv3C,SAAA,aAGA9R,KAAA0vB,QAGAm6B,kBAAA,SAAA55B,GACA,IAAA85B,EAAAprD,EAAAsxB,GAAAjpB,KAAA,aACAhH,KAAAgqD,0BAAAD,IAGAC,0BAAA,SAAAD,QAEA,IAAA7qD,MAAAkqD,mBAAAa,cAAAF,KACA7qD,MAAAkqD,mBAAAa,cAAAF,GAAA,IAMA,IAHA,IAAA1zB,EAAAr2B,KAAAkgB,aAAA8L,sBACAk+B,EAAA,GAEAxqD,EAAA,EAAAA,EAAA22B,EAAA/1B,OAAAZ,IAAA,CACA,IAAAyqD,EAAAxrD,EAAA03B,EAAA32B,IACAkb,EAAA1b,MAAAuW,eAAA00C,GAAAt0C,QAEA,IAAA3W,MAAAkqD,mBAAAa,cAAAF,GAAAnvC,IACAsvC,EAAAhpD,KAAA0Z,GAIAsvC,EAAA5pD,QACAN,KAAA09B,oBAEA19B,KAAAoqD,0BAAAF,EAAAH,EAAA,KACA/pD,KAAA29B,oBACA39B,KAAAgqD,0BAAAD,OAGA/pD,KAAAspD,mBAAAS,EACA/pD,KAAAw7B,iBACAx7B,KAAAspD,mBAAA,OAIAc,0BAAA,SAAAF,EAAAH,EAAA9iD,GACA,IAAA2T,EAAAsvC,EAAA7B,MAEArhD,EAAA,CACAg9B,QAAAppB,EACAib,OAAAk0B,GAGA7qD,MAAA4H,kBAAA,4BAAAE,EAAA,CAAAyD,EAAA5C,KACA3I,MAAAkqD,mBAAAa,cAAAF,GAAAnvC,IAAA,EAEA,YAAA/S,GACA4C,EAAAnF,MACApG,MAAAkqD,mBAAAa,cAAAF,GAAAnvC,GAAAnQ,EAAAnF,KAKA4kD,EAAA5pD,OACAN,KAAAoqD,0BAAAF,EAAAH,EAAA9iD,GAEAA,OAKAwO,eAAA,SAAA4gB,GACA,IAAA0H,EAAA/9B,KAAA0vB,KAAA2G,GAEA,GAAAr2B,KAAAspD,mBACA,IAAA,IAAA5pD,EAAA,EAAAA,EAAAq+B,EAAAz9B,OAAAZ,IAAA,CACA,IAAAkb,EAAAmjB,EAAAr+B,GAAAmW,QAGA,IAAA3W,MAAAkqD,mBAAAa,cAAAjqD,KAAAspD,oBAAA1uC,KACA,IAAA1b,MAAAkqD,mBAAAa,cAAAjqD,KAAAspD,oBAAA1uC,KAEAmjB,EAAAr+B,GAAA4F,IAAApG,MAAAkqD,mBAAAa,cAAAjqD,KAAAspD,oBAAA1uC,IAKA,OAAAmjB,GAGA7C,SAAA,SAAAQ,GACA17B,KAAAgU,SAAAknB,SAAAQ,EAAA17B,KAAAspD,sBAEA,CACAhuC,SAAA,CACA+uC,0BAAA,EACAd,WAAA,IAGAU,cAAA,KAIA/qD,MAAA2U,kCAAA,yBAAA3U,MAAAkqD,oBC/KAlqD,MAAAorD,YAAAllD,QAAAuV,KAAA1b,OAAA,CACAsrD,qBAAA,KACAC,2BAAA,KACAC,oBAAA,KACAC,+BAAA,KAEAC,2BAAA,EACAC,mBAAA,EAEAC,mBAAA,KACAC,WAAA,KAEAC,mBAAA,KACAC,eAAA,KACAC,iBAAA,KACAC,UAAA,KACAC,gBAAA,KAEAC,wBAAA,EAKA/vC,KAAA,WACArb,KAAAqrD,2BAAAnsD,MAAAqrD,uBAMAe,8BAAA,SAAA96C,GACAxQ,KAAAwqD,4BACAplC,aAAAplB,KAAAwqD,4BAGAxqD,KAAAwqD,2BAAAnlC,WAAArlB,KAAAurD,0BAAAtvC,KAAAjc,MAAA,IAAAwQ,IAMA+6C,0BAAA,SAAAC,GACA7sD,EAAA4I,KAAA,CACAjC,IAAApG,MAAAmH,aAAA,qBAAAmlD,EAAA,KAAA,uBACAjqD,KAAA,MACAiG,SAAA,OACA8P,SAAA,CAAAhQ,EAAAO,KACA,YAAAA,QACA,IAAAP,EAAAmkD,aAAA5kD,qBAAA,IAAA3H,MAAA2H,iBACA3H,MAAA2H,eAAAS,EAAAmkD,aAAA5kD,gBAGA7G,KAAAqrD,2BAAA/jD,EAAAmkD,aAAAjtB,SACAx+B,KAAAorD,wBAAA,GAEAprD,KAAAqrD,4BAAA,OASAA,2BAAA,SAAAd,GACAvqD,KAAAuqD,qBAAAroD,SAAAqoD,IAGA,IAAAvqD,KAAAuqD,sBAAAvqD,KAAAuqD,qBAAArrD,MAAAorD,YAAAoB,oBAEA1rD,KAAAuqD,sBACAvqD,KAAA2qD,2BAEA3qD,KAAA2rD,yBAIA3rD,KAAAuqD,qBAAArrD,MAAAorD,YAAAsB,gBACA5rD,KAAAyqD,qBACArlC,aAAAplB,KAAAyqD,qBAGAzqD,KAAAyqD,oBAAAplC,WAAArlB,KAAA6rD,eAAA5vC,KAAAjc,MAAA,IAAAA,KAAAuqD,wBAGAvqD,KAAA4qD,kBACA5qD,KAAAorD,wBACAprD,KAAA8rD,cAIA9rD,KAAA6rD,iBAIA7rD,KAAAsrD,8BAAApsD,MAAAorD,YAAAsB,iBAGA5rD,KAAA+rD,yBACA/rD,KAAAgsD,kBAGA,IAAAhsD,KAAAuqD,sBAAAvqD,KAAAuqD,qBAAArrD,MAAAorD,YAAAoB,mBAAAxsD,MAAAorD,YAAAsB,cACA5rD,KAAAsrD,8BAAAtrD,KAAAuqD,qBAAArrD,MAAAorD,YAAAoB,mBAAA,GAEA1rD,KAAAsrD,8BAAApsD,MAAAorD,YAAAsB,iBAQAD,uBAAA,WACA,IAAAM,EAWA,GATAjsD,KAAA4qD,mBACA5qD,KAAAgsD,gBAAA,GACAC,GAAA,GAEAA,GAAA,EAGAjsD,KAAA2qD,2BAAA,GAEA3qD,KAAA6qD,mBAAA,CACA,IAAA58C,EAAAtP,EAAA,8DACAuf,EAAAvf,EAAA,uBAAA2P,SAAAL,GACAs0B,EAAA5jC,EAAA,gCAAA2P,SAAA4P,GACAguC,EAAAvtD,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,MACA9W,KAAAnE,MAAAS,EAAA,MAAA,iBACA2O,SAAAi0B,GACA4pB,EAAAxtD,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,aACA9W,KAAAnE,MAAAS,EAAA,MAAA,uBACA2O,SAAAi0B,GAEAviC,KAAA+qD,mBAAApsD,EAAA,QAAA+pB,UAAAxK,GAEAle,KAAA6qD,mBAAA,IAAAzlD,QAAAw3B,MAAA3uB,EAAA,CACAm+C,UAAA,EACAtxB,kBAAA,EACA1d,WAAA,EACAC,kBAAA,EACAgvC,WAAA,2CACAlvB,SAAA,WACA/3B,QAAAqgB,iBAAA,IAEAJ,YAAA,WACA8mC,EAAAl1C,QAAA,WACA,QAKAjX,KAAAwc,YAAA0vC,EAAA,WAAA,UACAlsD,KAAAwc,YAAAvO,EAAA,SAAA,gBAGAg+C,EACAjsD,KAAA6qD,mBAAAoB,YAEAjsD,KAAA6qD,mBAAAlwB,OAGA36B,KAAAssD,6BAEAtsD,KAAA0qD,+BAAApX,YAAAtzC,KAAAusD,uBAAAtwC,KAAAjc,MAAA,MAMAssD,2BAAA,WACAtsD,KAAA+qD,mBAAA1nD,KAAAnE,MAAAS,EAAA,MAAA,sCAAA,CACA6sD,KAAAttD,MAAAqR,2BAAAvQ,KAAAuqD,yBAGAvqD,KAAA6qD,mBAAA9tC,yBAGAwvC,uBAAA,WACAvsD,KAAAuqD,qBAAA,IACAvqD,KAAAuqD,uBACAvqD,KAAAssD,8BAGA,IAAAtsD,KAAAuqD,sBACArW,cAAAl0C,KAAA0qD,iCAOAqB,uBAAA,SAAAU,GACAzsD,KAAA2qD,2BAAA,EAEA3qD,KAAA6qD,qBACA4B,EACAzsD,KAAA6qD,mBAAA6B,YAEA1sD,KAAA6qD,mBAAA1sC,OAGAne,KAAA0qD,gCACAxW,cAAAl0C,KAAA0qD,kCAQAmB,eAAA,WACA,IAAAI,EAWA,GATAjsD,KAAA2qD,2BACA3qD,KAAA+rD,wBAAA,GACAE,GAAA,GAEAA,GAAA,EAGAjsD,KAAA4qD,mBAAA,GAEA5qD,KAAA8qD,WAAA,CACA,IAAA78C,EAAAtP,EAAA,sDACAuf,EAAAvf,EAAA,yBAAAO,MAAAS,EAAA,MAAA,2BAAA,WAAAT,MAAAS,EAAA,MAAA,uCAAA,cAAA2O,SAAAL,GACA0+C,EAAAhuD,EAAA,gCAAA2P,SAAA4P,GACA0uC,EAAAjuD,EAAA,uBAAA2P,SAAAq+C,GACAE,EAAAluD,EAAA,4BAAA2P,SAAAs+C,GACAE,EAAAnuD,EAAA,UAAA2P,SAAAs+C,GACAG,EAAApuD,EAAA,kCAAA2P,SAAAu+C,GAEA7sD,KAAAgrD,eAAArsD,EAAA,uEAAAO,MAAAS,EAAA,MAAA,YAAA,OAAA2O,SAAAy+C,GACA/sD,KAAAirD,iBAAAtsD,EAAA,iCAAA2P,SAAAq+C,GACA3sD,KAAAkrD,UAAAvsD,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,sBACA9W,KAAAnE,MAAAS,EAAA,MAAA,WACA2O,SAAAw+C,GACA9sD,KAAAmrD,gBAAAxsD,EAAA,sBAAA2P,SAAA4P,GAEAle,KAAA8qD,WAAA,IAAA1lD,QAAAw3B,MAAA3uB,EAAA,CACAm+C,UAAA,EACAtxB,kBAAA,EACA1d,WAAA,EACAC,kBAAA,EACAgvC,WAAA,mCACAlvB,SAAA,KACA/3B,QAAAqgB,iBAAA,IAEAJ,WAAA,KACArlB,KAAAgrD,eAAA/zC,QAAA,UACA,MAGAy7B,UAAA,KACA1yC,KAAAgrD,eAAA1mD,IAAA,OAIA,IAAApF,MAAA8tD,cAAAhtD,KAAAgrD,eAAA,CACAiC,cAAAC,IACAltD,KAAAgrD,eAAAkC,KAIAltD,KAAAwc,YAAAxc,KAAAgrD,eAAA,QAAA,oBACAhrD,KAAAwc,YAAAvO,EAAA,SAAA,SAGAg+C,EACAjsD,KAAA8qD,WAAAmB,YAEAjsD,KAAA8qD,WAAAnwB,QAOAqxB,eAAA,SAAAS,GACAzsD,KAAA4qD,mBAAA,EAEA5qD,KAAA8qD,aACA2B,EACAzsD,KAAA8qD,WAAA4B,YAEA1sD,KAAA8qD,WAAA3sC,SAKAgvC,OAAA,WACAxuD,EAAA4xB,IAAA,CACAjrB,IAAApG,MAAAmH,aAAA,gBACAmB,SAAA,OACAG,QAAA,KACAzI,MAAAqH,WAAA,QAKA6mD,aAAA,SAAA/zC,GACAA,GACAA,EAAAmM,iBAGAxlB,KAAA+rD,yBACA/rD,KAAAurD,2BAAA,IAGA8B,iBAAA,WACA,OAAArtD,KAAAgrD,eAAA1mD,MAAAhE,QAAA,GACAN,KAAAkrD,UAAA90C,YAAA,aACA,IAEApW,KAAAkrD,UAAAp5C,SAAA,aACA,IAIAw7C,MAAA,SAAAj0C,GACAA,GACAA,EAAAmM,iBAGAxlB,KAAAqtD,qBACArtD,KAAAirD,iBAAA70C,YAAA,UACApW,KAAAutD,uBAEA,IAAAruD,MAAA2H,gBAGA7G,KAAAorD,wBAAA,EACAprD,KAAAurD,6BAEAvrD,KAAA8rD,gBAKAA,YAAA,WACA,IAAA9kD,EAAA,CACAwmD,UAAAtuD,MAAAuuD,SACAC,SAAA1tD,KAAAgrD,eAAA1mD,OAGApF,MAAA4H,kBAAA,cAAAE,EAAA,CAAAyD,EAAA5C,KACA7H,KAAAirD,iBAAAn5C,SAAA,UAEA,YAAAjK,EACA4C,EAAA9C,SACA3H,KAAAgsD,iBACAhsD,KAAAurD,8BAEAvrD,KAAA2tD,eAAAljD,EAAA7C,OACAxC,QAAAwa,MAAA5f,KAAA8qD,WAAAl4C,YAEAxN,QAAAqgB,iBAAA,IACAzlB,KAAAgrD,eAAA/zC,QAAA,UAIAjX,KAAA2tD,oBAKAA,eAAA,SAAA/lD,GACAA,MAAAA,IACAA,EAAA1I,MAAAS,EAAA,MAAA,6BAGAK,KAAAmrD,gBAAA9nD,KAAAuE,GACA5H,KAAA8qD,WAAA/tC,yBAGAwwC,gBAAA,WACAvtD,KAAA2tD,eAAA,MAEA,CACA/B,cAAA,GACAF,mBAAA,MCpYAxsD,MAAA0uD,GAAAxoD,QAAAuV,KAAA1b,OAAA,CACA4uD,YAAA,KAEAC,KAAA,KACAC,eAAA,KACAC,QAAA,KACAC,QAAA,KACAC,uBAAA,KACAxtC,MAAA,KACAytC,aAAA,KACAC,iBAAA,KACA/xC,QAAA,KACAgyC,aAAA,KACAC,SAAA,KACAC,eAAA,KACAC,UAAA,KACAjoB,MAAA,KACAkoB,gBAAA,KACAC,iBAAA,KACAC,aAAA,KACAC,iBAAA,KACAC,kBAAA,KACAjuC,SAAA,KACAkuC,kBAAA,KACAC,SAAA,KAEAC,oBAAA,KACAC,YAAA,KACAC,mBAAA,KAEAC,aAAA,EAEAC,aAAA,EACAC,UAAA,EACAC,QAAA,KACAC,iBAAA,KACAC,0BAAA,EACAC,wBAAA,KACAC,gBAAA,KAEAC,oBAAA,EACAC,8BAAA,EACAC,gCAAA,EACAC,yBAAA,KAEAz0C,KAAA,WAEA,IAAAnc,MAAAqrD,uBACAvqD,KAAA6tD,YAAA,IAAA3uD,MAAAorD,aAIAtqD,KAAA8tD,KAAAnvD,EAAA,QACAqB,KAAA+tD,eAAApvD,EAAA,mBACAqB,KAAAguD,QAAArvD,EAAA,WACAqB,KAAAiuD,QAAAtvD,EAAA,WACAqB,KAAAkuD,uBAAAvvD,EAAA,kBACAqB,KAAA0gB,MAAA/hB,EAAA,SACAqB,KAAAmuD,aAAAxvD,EAAA,cACAqB,KAAAouD,iBAAAzvD,EAAA,qBACAqB,KAAAqc,QAAA1d,EAAA,WACAqB,KAAAquD,aAAA1vD,EAAA,iBACAqB,KAAAsuD,SAAA3vD,EAAA,YACAqB,KAAA6uD,kBAAAlwD,EAAA,sBACAqB,KAAA4gB,SAAAjiB,EAAA,YACAqB,KAAA8uD,kBAAAnwD,EAAA,sBACAqB,KAAAkvD,mBAAAvwD,EAAA,qBAEAqB,KAAA2sB,yBAGA,IAAAlO,EAAAze,KAAAsuD,SAAA14C,KAAA,kCAEA,IAAA,IAAAlW,EAAA,EAAAA,EAAA+e,EAAAne,OAAAZ,IAAA,CACA,IAAAgf,EAAAD,EAAAtM,GAAAzS,GACAif,EAAAD,EAAAE,SAAA,YAAA1E,SAAA,SACAvb,EAAA,UAAA,CACAwb,MAAA,OACApb,KAAA2f,EAAAxE,WAAAnb,SACAuP,SAAAqQ,GACAD,EAAApE,SAwCA,GArCAta,KAAAqc,QAAA/b,SACAN,KAAAwc,YAAApX,QAAA2xB,KAAA,SAAA,qBACA/2B,KAAA+vD,qBAGA3qD,QAAAqV,KAAAC,MAAA,KAEA1a,KAAAwc,YAAApX,QAAA2xB,KAAA,SAAA,sBACA/2B,KAAAgwD,qBAGA,IAAAC,EAAAjwD,KAAAkuD,uBAAAh0C,SAAA,UACAg2C,EAAAlwD,KAAAkuD,uBAAAh0C,SAAA,gBAEA+1C,EAAAE,MAAA,EAAAjxD,MAAA0uD,GAAAwC,sBAAA54C,SAAA,WACA04C,EAAAC,MAAAjxD,MAAA0uD,GAAAwC,sBAAA54C,SAAA,WAIApS,QAAAyZ,sBAAA7e,KAAAqwD,iBAAAp0C,KAAAjc,SAIAA,KAAAguD,QAAA1tD,QACAN,KAAAswD,aAIAtwD,KAAAwc,YAAA7d,EAAA,eAAA,QAAA,aACAqB,KAAAwc,YAAA7d,EAAA,mBAAA,QAAA,iBAGAqB,KAAAmuD,aAAA7tD,SACAN,KAAAmuD,aAAAxvD,EAAA,kCAIAqB,KAAAmuD,aAAA7tD,QAAA8E,QAAA4T,QAAAhZ,KAAAmuD,aAAA,qBAAA,CACA,IAAAoC,EAAA,GACAntC,EAAApjB,KAAAmuD,aAAAnnD,KAAA,WACA,QAAA,IAAAoc,EACAmtC,EAAArvD,KAAA,CACA,CACA4e,QAAA1a,QAAA2a,MACAC,MAAA,GACA,CACAlJ,SAAA9W,KAAAmuD,aAAAnnD,KAAA,yBACA+P,aAAA3R,QAAA4T,QAAAhZ,KAAAmuD,aAAA,+BAIA,IAAA,IAAAzuD,EAAA,EAAAA,EAAA0jB,EAAA9iB,OAAAZ,IAAA,CACA,IAAAqH,EAAAqc,EAAA1jB,GACAqH,EAAAypD,UAGAD,EAAArvD,KAAA,CACA,CACA4e,QAAA1a,QAAA2a,MACAC,MAAA,EACAhd,QAAA+D,EAAA/D,OACA,CACA+D,OAAAA,EAAAA,OACA+P,SAAA/P,EAAA+P,SACAD,QAAA9P,EAAA8P,QACA/W,OAAAiH,EAAAjH,OACAkH,KAAAD,EAAAC,KACA+P,aAAAhQ,EAAAgQ,gBAKA,IAAA,IAAArX,EAAA,EAAAA,EAAA6wD,EAAAjwD,OAAAZ,IACA0F,QAAAwY,gBAAAC,iBAAA0yC,EAAA7wD,GAAA,GAAA,KACAM,KAAAywD,kBAAAF,EAAA7wD,GAAA,MAKAM,KAAA0wD,WAGA,IAAA15C,EAAA9X,MAAAqV,gBAAA,gBACA,IAAAyC,IACA9X,MAAA2V,mBAAA,WACAzP,QAAAqV,KAAAC,MAAA,KACAtV,QAAAyZ,sBAAA,KACAhT,OAAA8kD,SAAA,EAAA35C,QAKArY,EAAAu3B,mBACAl2B,KAAA+tD,eAAA30C,GAAA,QAAA,oCAAApZ,KAAA4wD,kBAAA30C,KAAAjc,OACAA,KAAA+tD,eAAA30C,GAAA,OAAA,oCAAApZ,KAAA6wD,iBAAA50C,KAAAjc,SAIAqwD,iBAAA,WAKA,GAHArwD,KAAAgvD,oBAAArwD,EAAA,6BACAqB,KAAAivD,YAAAtwD,EAAA,oBAEAqB,KAAAgvD,oBAAA1uD,OAAA,CAOA,IAHA,IACA2N,EAAA6iD,EADAC,EAAA/wD,KAAAgvD,oBAAAvyC,IAAAzc,KAAAivD,aAGAvvD,EAAA,EAAAA,EAAAqxD,EAAAzwD,OAAAZ,KACAuO,EAAA8iD,EAAA5+C,GAAAzS,IACAsH,KAAA,4BAEA8pD,EADA,mBAAA7iD,EAAAjH,KAAA,cACAiH,EAAAjH,KAAA,aAAAiH,GAEAA,EAAA+Q,YAEA/Q,EAAAjH,KAAA,yBAAA8pD,IAEA9wD,KAAAwc,YAAAvO,EAAA,UAAA,SAAAoL,GAIA,GAHAjU,QAAA4T,QAAA/K,EAAA,wBACAjO,KAAAmoB,eAAA/iB,QAAA2xB,KAAA,gBAEA3xB,QAAA4T,QAAA/K,EAAA,cAAA,CAEA,IAAA6iD,EADAz3C,EAAAmM,iBAGAsrC,EADA,mBAAA7iD,EAAAjH,KAAA,cACAiH,EAAAjH,KAAA,aAAAiH,GAEAA,EAAA+Q,YAEA,IAAAhY,EAAA9H,MAAAmN,cAAA4B,EAAAjH,KAAA,0BAAA8pD,EAAA5xD,MAAAsN,YACAtN,MAAA8O,WAAAhH,GACAsH,SAAAlJ,QAAAsN,MACAs+C,aAKAhxD,KAAAwc,YAAApX,QAAA2xB,KAAA,gBAAA,SAAA1d,GACA,IACApL,EAAA6iD,EADAG,GAAA,EAEA,QAAA,IAAA/xD,MAAAgyD,aAAAhyD,MAAAgyD,YAAAC,cACAF,GAAA,OAEA,IAAA,IAAAvxD,EAAA,EAAAA,EAAAM,KAAAgvD,oBAAA1uD,OAAAZ,IAOA,GAJAoxD,EADA,mBADA7iD,EAAAjO,KAAAgvD,oBAAA78C,GAAAzS,IACAsH,KAAA,cACAiH,EAAAjH,KAAA,aAAAiH,GAEAA,EAAA+Q,YAEA/Q,EAAAjH,KAAA,4BAAA8pD,EAAA,CACAG,GAAA,EACA,MAKA,GAAAA,EAAA,CACA,IAAApxD,EAAAX,MAAAS,EAAA,MAAA,oDAQA,OANA0Z,EACAA,EAAA+3C,cAAAC,YAAAxxD,EAEAgM,OAAAo1B,MAAAowB,YAAAxxD,EAGAA,QAKA+wD,kBAAA,WACA5wD,KAAA+vD,qBAGAc,iBAAA,WACA7wD,KAAA+vD,qBAaAU,kBAAA,SAAAvpD,GAEAlH,KAAAiX,QAAA,sBAEA,iBAAA/P,GAAAvI,EAAAoG,cAAAmC,KACAA,EAAA,IAGAA,EAAA4P,WACA5P,EAAA4P,SAAA9W,KAAAmuD,aAAAnnD,KAAA,0BAGAE,EAAAF,OACAE,EAAAF,KAAA,IAEAE,EAAAF,KAAAsqD,cAAA,EAEApyD,MAAA0X,WAAA5W,KAAAmuD,aAAAjnD,IAGAylB,uBAAA,WACA,IAAAw9B,EAAAnqD,KAAA4gB,SAAAhL,KAAA,eACA+I,EAAAwrC,EAAAjwC,SAAA,UACAvb,EAAA,gCAAA0E,KAAAsb,EAAAre,OAAAqe,EAAAtb,OAAA8mD,EAAA9mD,QACA+B,QAAAsN,KAAA0D,YAAA,oBAGAm7C,UAAA,WACAnsD,QAAAsN,KAAA8+C,YAAA,gBAGAC,cAAA,WACArsD,QAAAsN,KAAA8+C,YAAA,oBAGAd,SAAA,WAkBA,IAAAhxD,EAAA2f,EAAA3Y,EAZA,GAJA1G,KAAAwuD,UAAAxuD,KAAAumC,MAAAvmC,KAAAyuD,gBAAAzuD,KAAA0uD,iBAAA1uD,KAAA2uD,aACA3uD,KAAA4uD,iBAAA,KAEA5uD,KAAAuuD,eAAA5vD,EAAA,SACAqB,KAAAuuD,eAAAjuD,OAcA,IATAN,KAAAwuD,UAAAxuD,KAAAuuD,eAAA34C,KAAA,QACA5V,KAAAumC,MAAAvmC,KAAAwuD,UAAA54C,KAAA,QACA5V,KAAAyuD,gBAAA9vD,EAAA,qBACAqB,KAAAyuD,gBAAAznD,KAAA,YACA,IAAA5B,QAAAyU,QAAA7Z,KAAAyuD,iBAEAzuD,KAAA0uD,iBAAA1uD,KAAAyuD,gBAAAznD,KAAA,WAAAud,KAAA3R,WAAAgD,KAAA,QAGAlW,EAAA,EAAAA,EAAAM,KAAAumC,MAAAjmC,OAAAZ,KAKAgH,GADA2Y,EAHArf,KAAAumC,MAAAp0B,GAAAzS,GAGAwa,SAAA,MACAhM,KAAA,UACA,MAAAxH,EAAA+I,OAAA,KACAzP,KAAAwc,YAAA6C,EAAA,SAAA,SAAAhG,GACAA,EAAAmM,iBACAxlB,KAAA0xD,UAAAr4C,EAAAE,kBAGA9V,mBAAAiD,EAAA/E,OAAA,MAAA6E,SAAAC,SAAA0J,KAAAxO,OAAA,IACA3B,KAAA0xD,UAAAryC,KAIArf,KAAA2uD,cAAAtvC,EAAA1J,SAAA,QACA3V,KAAA2xD,WAAAtyC,EAAA3f,QA/BAM,KAAAuuD,eAAA,MAoCAmD,UAAA,SAAAE,GACA,IAAAzkB,EAAAxuC,EAAAizD,GAEA,GAAA5xD,KAAA2uD,aAAA,CACA,GAAA3uD,KAAA2uD,aAAAp+B,IAAA,KAAA4c,EAAA5c,IAAA,GACA,OAEAvwB,KAAA6xD,cAGA1kB,EAAAr7B,SAAA,OACA,IAAApL,EAAAymC,EAAAj/B,KAAA,QACAvP,EAAA+H,GAAA0P,YAAA,UACA,oBAAAsT,SACAA,QAAAC,kBAAAphB,OAAAA,EAAA7B,GAEA1G,KAAA2xD,WAAAxkB,EAAAntC,KAAAumC,MAAAnnC,MAAA+tC,EAAA/oB,WACApkB,KAAA8xD,aACA9xD,KAAAyuD,gBAAAznD,KAAA,WAAAud,KAAApG,QAGAwzC,WAAA,SAAAxkB,EAAA/tC,GACA,GAAA+tC,IAAAntC,KAAA2uD,aACA,OAGA3uD,KAAA2uD,aAAAxhB,EACAntC,KAAA4uD,iBAAAxvD,EACA,IAAAA,EACAT,EAAA,YAAAmT,SAAA,UAEAnT,EAAA,YAAAyX,YAAA,UAGAhR,QAAA2xB,KAAA9f,QAAA,UAEA7R,QAAAqV,KAAAxD,QAAA,UAGA,IAAAvQ,EAAAymC,GAAAA,EAAAj/B,KAAA,QACA,GAAAxH,GAAA,MAAAA,EAAA+I,OAAA,GAAA,CACA,IAAA2D,EAAAzU,EAAA,gBAAAyU,UAAApM,KAAA,WACA,GAAAoM,EACA,IAAA,IAAA1T,EAAA,EAAAA,EAAA0T,EAAAmR,KAAAG,SAAApkB,OAAAZ,IAAA,CACA,IAAAgN,EAAA0G,EAAAmR,KAAAG,SAAAhlB,GACAgN,EAAAhG,OACAgG,EAAAhG,KAAAgG,EAAAhG,KAAAf,MAAA,UAAA,GAAAe,MAOAmrD,YAAA,WACA7xD,KAAA2uD,eAIA3uD,KAAA2uD,aAAAv4C,YAAA,OACA,MAAApW,KAAA2uD,aAAAzgD,KAAA,QAAAuB,OAAA,IACA9Q,EAAAqB,KAAA2uD,aAAAzgD,KAAA,SAAA4D,SAAA,UAEA9R,KAAA2xD,WAAA,KAAA,QAGA3B,mBAAA,WACAhwD,KAAA8xD,aACA9xD,KAAA+xD,0BAGAD,WAAA,WACA,GAAA9xD,KAAAuuD,eAAA,CAIA,IAIAphB,EAJA6kB,EAAArhD,KAAAC,MAAA5Q,KAAAuuD,eAAAznB,SAAA,GACAmrB,EAAA,EACAC,GAAA,EACAC,EAAA/sD,QAAAsN,KAAAo0B,SAAA,KAAA,IAAA,EAIA9mC,KAAA2uD,eACA3uD,KAAA2uD,aAAAvqC,OAAA,MAAA9V,SAAAtO,KAAAwuD,WACAyD,EAAAthD,KAAAyhB,KAAApyB,KAAA2uD,aAAAvqC,OAAA,MAAA0iB,UAGA,IAAA,IAAApnC,EAAA,EAAAA,EAAAM,KAAAumC,MAAAjmC,OAAAZ,IACAytC,EAAAntC,KAAAumC,MAAAp0B,GAAAzS,GAAA4O,SAAAtO,KAAAwuD,WACA9uD,IAAAM,KAAA4uD,mBACAqD,GAAAthD,KAAAyhB,KAAA+a,EAAArG,UAEA,IAAApnC,GAAAM,KAAA2uD,gBACAsD,GAAAE,IAIAzyD,IAAAM,KAAA4uD,kBAAAqD,GAAAD,EACA7kB,EAAAv3B,KAAA,OAAAkC,WAAA,SAEAq1B,EAAA7+B,SAAAtO,KAAA0uD,kBAAA94C,KAAA,OAAA1H,KAAA,OAAA,UACAgkD,GAAA,GAIAA,EACAlyD,KAAAyuD,gBAAAr4C,YAAA,UAEApW,KAAAyuD,gBAAA38C,SAAA,YAIAigD,uBAAA,WACA,IAAA/xD,KAAA+xD,uBAAAK,GAAA,EAAApyD,KAAA+xD,uBAAAK,GAAApyD,KAAAkvD,mBAAA5uD,OAAAN,KAAA+xD,uBAAAK,KACApyD,KAAA+xD,uBAAAM,QAAAryD,KAAAkvD,mBAAA/8C,GAAAnS,KAAA+xD,uBAAAK,IACApyD,KAAA+xD,uBAAAO,gBAAAtyD,KAAA+xD,uBAAAM,QAAAjuC,SAAA0iB,QACA9mC,KAAA+xD,uBAAAQ,QAAA,EAEAvyD,KAAA+xD,uBAAAO,gBAAA,SAEA,IAAAtyD,KAAA+xD,uBAAAM,QAAArrD,KAAA,sBACAhH,KAAA+xD,uBAAAQ,QAAA,GAEAvyD,KAAA+xD,uBAAAS,aAAAxyD,KAAA+xD,uBAAAM,QAAA18C,SAAA,aAGA3V,KAAA+xD,uBAAAO,gBAAAtyD,KAAA+xD,uBAAAM,QAAArrD,KAAA,sBACAhH,KAAA+xD,uBAAAS,eACAxyD,KAAA+xD,uBAAAM,QAAAj8C,YAAA,aACApW,KAAA+xD,uBAAAQ,QAAA,GAEAvyD,KAAA+xD,uBAAAS,eACAxyD,KAAA+xD,uBAAAQ,QAAA,IAKAvyD,KAAA+xD,uBAAAQ,QACAvyD,KAAA+xD,uBAAAM,QAAAvrB,QAAA,GAAA9mC,KAAA+xD,uBAAAO,iBACAtyD,KAAA+xD,uBAAAM,QAAAvgD,SAAA,aAKA9R,KAAA+xD,uBAAAM,QAAArrD,KAAA,qBAAAhH,KAAA+xD,uBAAAO,mBAKAvC,kBAAA,WAEA,GAAA/vD,KAAA0gB,MAAApgB,QAAAN,KAAAouD,iBAAA,GAAAqE,wBAAAx7B,IAAA,GACA,IAAAj3B,KAAAmvD,YAAA,CACA,IAAAuD,EAAA1yD,KAAAouD,iBAAArjC,SAGA/qB,KAAA8uD,kBAAAhkC,IAAA,aAAA,iBAAA4nC,EAAA,GAAA,GAAA,GAAA,OAGA1yD,KAAAouD,iBAAArjC,OAAA2nC,GACAttD,QAAAsN,KAAAZ,SAAA,gBAGA9R,KAAA8uD,kBAAA53B,cACAl3B,KAAAsuD,SAAAp3B,cADA,IAEApM,EAAA,CACAmM,IAAAy7B,EAAA,KACAC,aAAA,gBAAAD,EAAA,OAEA1yD,KAAA4gB,SAAA9O,SAAA,SAAAgZ,IAAAA,GACA9qB,KAAAsuD,SAAAx8C,SAAA,SAAAgZ,IAAAA,GACA9qB,KAAAmvD,aAAA,QAEAnvD,KAAAmvD,cACAnvD,KAAAouD,iBAAArjC,OAAA,QACA3lB,QAAAsN,KAAA0D,YAAA,gBACApW,KAAA8uD,kBAAAhkC,IAAA,aAAA,IACA9qB,KAAA4gB,SAAAxK,YAAA,SAAA0U,IAAA,CACAmM,IAAA,GACA07B,aAAA,KAEA3yD,KAAAsuD,SAAAl4C,YAAA,SAAA0U,IAAA,CACAmM,IAAA,GACA07B,aAAA,KAEA3yD,KAAAmvD,aAAA,IAUAyD,oBAAA,SAAArxD,EAAA1B,GACA,IAAAuwD,EAAAlxD,MAAA0uD,GAAAwC,qBAEA,UAAA7uD,IACA6uD,GAAA,GAGA,IAAAyC,EAAAl0D,EAAA,4BAAA4C,EAAA,KAAA1B,EAAA,UACAyO,SAAAtO,KAAAkuD,wBAEA4E,GAAAD,EAAAx4B,aAAA,EAAA,KAEAw4B,EACA10C,OACA2M,IAAA,CAAAsP,QAAA,EAAA24B,cAAAD,EAAAE,eAAAF,IACAt7C,SAAA,CAAA4iB,QAAA,EAAA24B,cAAA,MAAAC,eAAA,OAAA,CAAAC,QAAA,eAAA77C,SAAA,SACA+4C,MAAAC,GACA54C,SAAA,CAAA4iB,QAAA,EAAA24B,cAAAD,EAAAE,eAAAF,GAAA,CACAx7C,SAAA,WACAu7C,EAAAv4C,YAIAta,KAAAiX,QAAA,sBAAA,CACAi8C,iBAAA3xD,EACA1B,QAAAA,KASA4f,cAAA,SAAA5f,GACAG,KAAA4yD,oBAAA,SAAA/yD,IAQAoI,aAAA,SAAApI,GACAA,IACAA,EAAAX,MAAAS,EAAA,MAAA,6BAGAK,KAAA4yD,oBAAA,QAAA/yD,IAGAszD,YAAA,WACA,IAAAnsD,EAAA,CACApC,KAAA1F,MAAA0F,MAGA1F,MAAAoJ,mBAAA,oBAAAtB,EAAAhH,KAAAozD,cAAAn3C,KAAAjc,QAGAozD,cAAA,SAAAC,GAGA,GAFArzD,KAAAguD,QAAA1zC,SAEAlV,QAAA7F,QAAA8zD,IAAAA,EAAA/yD,OAAA,CACAN,KAAAguD,QAAArvD,EAAA,qBAAA+pB,UAAA/pB,EAAA,oBAEA,IAAA,IAAAe,EAAA,EAAAA,EAAA2zD,EAAA/yD,OAAAZ,IACAf,EAAA,OAAA00D,EAAA3zD,GAAA,SAAA4O,SAAAtO,KAAAguD,SAGA,IAAAjjC,EAAA/qB,KAAAguD,QAAA92B,cACAl3B,KAAAguD,QAAAljC,IAAA,cAAAC,GAAAvT,SAAA,CAAA87C,aAAA,GAAA,QAEAtzD,KAAAswD,eAIAA,WAAA,WAIA,IAFA,IAAAiD,EAAAvzD,KAAAguD,QAAAp4C,KAAA,qBAEAlW,EAAA,EAAAA,EAAA6zD,EAAAjzD,OAAAZ,IACAM,KAAAwc,YAAA+2C,EAAA7zD,GAAA,QAAA2Z,IACAA,EAAAmM,iBAEA,IAAAguC,EAAA70D,EAAA0a,EAAAE,eAEAvS,EAAA,CACAnH,QAAA2zD,EAAAv9B,KAAA,aAAAt0B,OAAA,IAGAzC,MAAAoJ,mBAAA,oBAAAtB,EAAA,CAAAyD,EAAA5C,KACA,YAAAA,IACA4C,EAAA9C,QACA6rD,EAAApvC,SAAA9J,SAEAta,KAAAiI,aAAAwC,EAAA7C,aAQA6rD,gBAAA,SAAAC,EAAAC,EAAA1sD,GASA,GAPA,mBAAA0sD,IACA1sD,EAAA0sD,EACAA,GAAA,GAKA3zD,KAAA2vD,sBACA,IAAA+D,IAAA1zD,KAAA4vD,+BACA,IAAA+D,IAAA3zD,KAAA6vD,gCACA,CACA,IAAA+D,EAAA3sD,EACAA,EAAA,KACAjH,KAAAyzD,gBAAAC,EAAAC,EAAAC,IAKA,mBAAA3sD,IACA7B,QAAA7F,QAAAS,KAAA8vD,4BACA9vD,KAAA8vD,yBAAA,IAGA9vD,KAAA8vD,yBAAA5uD,KAAA+F,IAGAjH,KAAA2vD,qBACA3vD,KAAA2vD,oBAAA,EACA3vD,KAAA4vD,8BAAA,IAAA8D,EACA1zD,KAAA6vD,gCAAA,IAAA8D,EAEA3zD,KAAA6zD,iBAAAH,EAAAC,GACAlqD,KAAAs0B,IAIA,GAHA/9B,KAAA8zD,uBACA9zD,KAAA2vD,oBAAA,EAEAvqD,QAAA7F,QAAAS,KAAA8vD,0BAAA,CACA,IAAAiE,EAAA/zD,KAAA8vD,yBACA9vD,KAAA8vD,yBAAA,KAEA,IAAA,IAAApwD,EAAA,EAAAA,EAAAq0D,EAAAzzD,OAAAZ,IACAq0D,EAAAr0D,GAAAq+B,GAIA/9B,KAAAiX,QAAA,kBAAA,CACA+8C,WAAAj2B,QAMA81B,iBAAA,SAAAH,EAAAC,GACA,OAAA,IAAA1qD,QAAA,CAAAC,EAAAC,KACAuqD,EAaA1zD,KAAAi0D,YAAAN,GACAlqD,KAAAs0B,IACA70B,EAAA60B,KAdA/9B,KAAAk0D,uBAAAP,GACAlqD,KAAAs0B,KACA,IAAAA,EAAAo2B,QACAjrD,EAAA60B,GAGA/9B,KAAAi0D,YAAAN,GACAlqD,KAAAs0B,IACA70B,EAAA60B,UAYAm2B,uBAAA,SAAAP,GACA,OAAA,IAAA1qD,SAAA,SAAAC,EAAAC,GACA,IAAAnC,EAAA,CACAotD,cAAA,EACAT,eAAAA,GAEAz0D,MAAA4H,kBAAA,wBAAAE,GAAA,SAAA+2B,EAAAl2B,GAEAqB,EADA,YAAArB,EACAk2B,EAEA,CAAAo2B,QAAA,WAMAF,YAAA,SAAAN,GACA,OAAA,IAAA1qD,QAAA,CAAAC,EAAAC,KACAjK,MAAAyK,eAAA,MAAA,WACAF,KAAA4qD,IACAr0D,KAAAs0D,cAAAD,EAAAV,GAAAlqD,KAAAP,KAEAQ,MAAAgB,IACA1K,KAAAs0D,cAAA,IAAA7qD,KAAAP,QAKAorD,cAAA,SAAAD,EAAAV,GACA,OAAA,IAAA1qD,SAAA,SAAAC,EAAAC,GACAjK,MAAA4H,kBAAA,oBAAA,CACAutD,QAAAA,EACAV,eAAAA,IACA,SAAA51B,EAAAl2B,GACA,YAAAA,EACAqB,EAAA60B,GAEA50B,MAEA,CACAhC,YAAA,aAKA2sD,qBAAA,WACA,IAAAS,EAAA51D,EAAA,kBAAAiX,KAAA,iBAGA2+C,EAAAj0D,QAIApB,MAAAoJ,mBAAA,gCAAAmC,IAEA,IAAA+pD,EAAAD,EAAAr6C,SAAA,UAEAzP,EAAAgqD,YACAD,EAAAl0D,SACAk0D,EAAA71D,EAAA,yBAAA2P,SAAAimD,IAEAC,EAAAnxD,KAAAoH,EAAAgqD,aACAD,EAAAl0D,QACAk0D,EAAAl6C,YAKA2F,SAAA,WACAjgB,KAAAovD,cAIAlwD,MAAAw1D,sBACAx1D,MAAAoJ,mBAAA,YAAA,CAAAmC,EAAA5C,KACA,YAAAA,GACA7H,KAAA20D,kBAAA,GAAA,KAIA30D,KAAA20D,kBAAA,GAAA,KAIAA,iBAAA,SAAAxE,EAAAniC,GAOA,GANAA,GAAAhuB,KAAAyvD,0BACArqC,aAAAplB,KAAAyvD,yBACAzvD,KAAAyvD,wBAAA,OAIAzvD,KAAAyvD,yBAAAzvD,KAAAovD,YAIA,IAAA,IAAAe,EAAA,CAEA,IAAA3xB,EAAA7tB,KAAAkhB,IAAA,IAAA,IAAA7xB,KAAAwvD,2BACAxvD,KAAAyvD,wBAAApqC,WAAArlB,KAAA40D,0BAAA34C,KAAAjc,MAAAw+B,QAEAx+B,KAAA40D,6BAIAA,0BAAA,WACA11D,MAAAoJ,mBAAA,kDAAA,CAAAmC,EAAA5C,KACA,YAAAA,IACA7H,KAAAyvD,wBAAA,KACAzvD,KAAAqvD,UAAA5kD,EAAAinB,MACA1xB,KAAA60D,WAAApqD,EAAAqqD,MAEA90D,KAAAsvD,QAAAhvD,QAEAN,KAAA20D,kBAAA,OAMAE,WAAA,SAAAvF,GACA,GAAAtvD,KAAAovD,YAAA,CAIApvD,KAAAsvD,QAAAA,EAGA,IAAAyF,EAAA/0D,KAAAuvD,iBACAvvD,KAAAuvD,iBAAAvvD,KAAAg1D,sBAIAD,GACA/0D,KAAAuvD,kBACAwF,EAAAl/C,KAAA7V,KAAAuvD,iBAAA15C,IACAk/C,EAAArS,WAAA1iD,KAAAuvD,iBAAA7M,UACAqS,EAAAE,gBAAAj1D,KAAAuvD,iBAAA0F,eACAF,EAAA5pD,SAAAnL,KAAAuvD,iBAAApkD,OAEAnL,KAAAwvD,4BAGAxvD,KAAAwvD,0BAAA,EAGAxvD,KAAAk1D,gBAGAl1D,KAAAiX,QAAA,gBAMA+9C,oBAAA,WACA,IAAAh1D,KAAAovD,YACA,OAAA,KAUA,IANA,IAAA+F,EAAA,CACAj2D,MAAA0uD,GAAAwH,oBACAl2D,MAAA0uD,GAAAyH,kBACAn2D,MAAA0uD,GAAA0H,oBAGA51D,EAAA,EAAAA,EAAAy1D,EAAA70D,OAAAZ,IACA,IAAA,IAAA61D,EAAA,EAAAA,EAAAv1D,KAAAsvD,QAAAhvD,OAAAi1D,IACA,GAAAv1D,KAAAsvD,QAAAiG,GAAApqD,SAAAgqD,EAAAz1D,GACA,OAAAM,KAAAsvD,QAAAiG,IAMAL,cAAA,WACAl1D,KAAAovD,aAAApvD,KAAA8tD,KAAAxtD,SAIAN,KAAAuvD,kBACAvvD,KAAA0vD,kBACA1vD,KAAA0vD,gBAAA,IAAA8F,GAGAx1D,KAAAuvD,iBAAApkD,SAAAjM,MAAA0uD,GAAAwH,qBAAAp1D,KAAAuvD,iBAAApkD,SAAAjM,MAAA0uD,GAAA0H,oBACAt1D,KAAA0vD,gBAAA+F,eACAz1D,KAAA0vD,gBAAAgG,eAAA11D,KAAAuvD,iBAAAoG,YAAA31D,KAAAuvD,iBAAA0F,eACAj1D,KAAA0vD,gBAAAkG,YAAA51D,KAAAuvD,iBAAA7M,WACA1iD,KAAAuvD,iBAAApkD,SAAAjM,MAAA0uD,GAAAyH,mBACAr1D,KAAA0vD,gBAAAmG,aAAA32D,MAAAS,EAAA,MAAA,YAGAK,KAAA0vD,kBACA1vD,KAAA0vD,gBAAA+F,eACAz1D,KAAA0vD,gBAAAp4C,kBACAtX,KAAA0vD,mBAUA1qC,UAAA,WAEA,IAAAlP,EAAA5W,MAAAqV,gBAAA,2BACA,YAAA,IAAAuB,GACA5W,MAAA2V,mBAAA,2BACA7U,KAAA2wB,UAAA7a,GACAA,GAEA5W,MAAA6V,UAAA,WAOA4b,UAAA,SAAA7a,GACA5W,MAAA+V,UAAA,SAAAa,EAAA,CACAV,OAAA,YAGA,CAEAg7C,qBAAA,IAEAkF,mBAAA,EACAF,oBAAA,EACAU,gBAAA,EACAT,kBAAA,IAGAjwD,QAAAslB,iBAAAtlB,QAAA2xB,KACA73B,MAAA8I,GAAA,IAAA9I,MAAA0uD,GAKA,IAAA4H,EAAApwD,QAAAuV,KAAA1b,OAAA,CACA8S,IAAA,KACAsN,GAAA,KACAV,OAAA,KACAo3C,eAAA,KAEArT,SAAA,KACAsT,UAAA,EAEAC,WAAA,KACAC,eAAA,KACAC,cAAA,KACAC,aAAA,KAEAC,WAAA,KACAC,UAAA,KACAC,YAAA,KACAC,QAAA,KACAC,WAAA,KACAC,WAAA,KAEAC,aAAA,EACAC,WAAA,EACAC,kBAAA,KACAC,gBAAA,KACAC,SAAA,KACAC,gBAAA,KACAC,oBAAA,KAEAC,aAAA,KAEA77C,KAAA,WACArb,KAAA+R,IAAApT,EAAA,SAAA2P,SAAApP,MAAA8I,GAAA8lD,KAAA5zC,SAAA,OACAla,KAAAqf,GAAA1gB,EAAA,OAAA,CACAkX,GAAA,WACAnP,KAAAxH,MAAAi4D,sBAAAj4D,MAAAyF,OAAA,2BAAA,OACA2J,SAAAtO,KAAA+R,KACA/R,KAAAo3D,iBAAAz4D,EAAA,wBAAA2P,SAAAtO,KAAAqf,IACA,IAAAg4C,EAAA14D,EAAA,yBAAA2P,SAAAtO,KAAAqf,IACArf,KAAA2e,OAAAhgB,EAAA,WAAA2P,SAAA+oD,GACAr3D,KAAA+1D,eAAAp3D,EAAA,kCAAA2P,SAAA+oD,GAAAl5C,OAEA,IAAAtQ,EAAAhC,OAAAy6B,iBAAA,EAAA,EAAA,EACAtmC,KAAAu2D,YAAA,GAAA1oD,EACA7N,KAAAw2D,QAAAx2D,KAAAu2D,YAAA,EACAv2D,KAAAy2D,WAAA,EAAA5oD,EACA7N,KAAA02D,WAAA,EAAA7oD,EAEA7N,KAAAi2D,WAAAj2D,KAAAs3D,cAAA,KAAA,WACAt3D,KAAAk2D,eAAAl2D,KAAAs3D,cAAA,SAAA,WACAt3D,KAAAm2D,cAAAn2D,KAAAs3D,cAAA,QAAA,QACAt3D,KAAAo2D,aAAAp2D,KAAAs3D,cAAA,OAAA,WAAAn5C,OAEAne,KAAAq2D,WAAAr2D,KAAAk2D,eAAA,GAAA/iB,WAAA,MACAnzC,KAAAs2D,UAAAt2D,KAAAm2D,cAAA,GAAAhjB,WAAA,MAEAnzC,KAAAu3D,SAAAv3D,KAAAi2D,WAAA,GAAA9iB,WAAA,MAAA,EAAA,GACAnzC,KAAAu3D,SAAAv3D,KAAAo2D,aAAA,GAAAjjB,WAAA,MAAA,EAAA,IAGAuiB,eAAA,SAAAC,EAAAV,GACAj1D,KAAAqf,GAAAnR,KAAA,QAAAynD,GACA31D,KAAA2e,OAAAtb,KAAAsyD,GACAV,EACAj1D,KAAA+1D,eAAA1yD,KAAA4xD,GAAAt6B,OAEA36B,KAAA+1D,eAAA53C,QAIAy3C,YAAA,SAAAlT,GACA,GAAAA,GACA1iD,KAAAk2D,eAAA/3C,OACAne,KAAAm2D,cAAAh4C,SAEAne,KAAAk2D,eAAAv7B,OACA36B,KAAAm2D,cAAAx7B,OACA36B,KAAA0iD,UAAAA,EAAA1iD,KAAA0iD,SACA1iD,KAAAw3D,YAAA,EAAA9U,EAAA,KAEA1iD,KAAAy3D,QAAA,EAAA/U,EAAA,MAIA1iD,KAAA0iD,SAAAA,GAGAprC,SAAA,WACAtX,KAAAw3D,YAAA,EAAA,EAAA,KACAx3D,KAAAi2D,WAAAz+C,SAAA,WAEAxX,KAAAw3D,YAAA,EAAA,EAAA,KACAx3D,KAAAqf,GAAA/E,SACAta,KAAAwqB,eAKAqrC,aAAA,SAAAh2D,GACAG,KAAAg2D,WAIAh2D,KAAAg2D,UAAA,EACAh2D,KAAA0iD,SAAA,KAEA1iD,KAAAi2D,WAAA93C,OACAne,KAAAk2D,eAAA/3C,OACAne,KAAAm2D,cAAAh4C,OACAne,KAAAo2D,aAAAz7B,OAEA36B,KAAA01D,eAAA71D,KAGA41D,aAAA,WACAz1D,KAAAg2D,WAIAh2D,KAAAg2D,UAAA,EAEAh2D,KAAAi2D,WAAAt7B,OACA36B,KAAAk2D,eAAAv7B,OACA36B,KAAAm2D,cAAAx7B,OACA36B,KAAAo2D,aAAAj4C,SAGAm5C,cAAA,SAAAzhD,EAAA6hD,GACA,IAAAC,EAAAh5D,EAAA,wBAAAkX,EAAA,YAAA7V,KAAAu2D,YAAA,aAAAv2D,KAAAu2D,YAAA,OAAAjoD,SAAAtO,KAAAo3D,kBACAQ,EAAAD,EAAA,GAAAxkB,WAAA,MAKA,OAHAykB,EAAA5jB,YAAA0jB,EACAE,EAAA7jB,UAAA/zC,KAAA02D,WACAkB,EAAAC,QAAA,QACAF,GAGAF,QAAA,SAAAK,EAAAvP,GACAvoD,KAAA22D,aAAAmB,EACA93D,KAAA42D,WAAArO,EAEAvoD,KAAAu3D,SAAAv3D,KAAAq2D,WAAAyB,EAAAvP,GACAvoD,KAAAu3D,SAAAv3D,KAAAs2D,UAAAwB,EAAAvP,IAGAgP,SAAA,SAAAK,EAAAE,EAAAvP,GACAqP,EAAAnkB,UAAA,EAAA,EAAAzzC,KAAAu2D,YAAAv2D,KAAAu2D,aACAqB,EAAAhkB,YACAgkB,EAAAG,IAAA/3D,KAAAw2D,QAAAx2D,KAAAw2D,QAAAx2D,KAAAy2D,YAAA,IAAA,EAAAqB,GAAAnnD,KAAAu9B,IAAA,IAAA,EAAAqa,GAAA53C,KAAAu9B,IACA0pB,EAAAjtB,SACAitB,EAAAI,aAGAR,YAAA,SAAAS,EAAAC,EAAAjxD,GACAjH,KAAAg3D,iBACA5xC,aAAAplB,KAAAg3D,iBAGAh3D,KAAA+2D,SAAA,EACA/2D,KAAA62D,mBAAAoB,EAAAj4D,KAAA22D,cAAA,GACA32D,KAAA82D,iBAAAoB,EAAAl4D,KAAA42D,YAAA,GACA52D,KAAAi3D,oBAAAhwD,EACAjH,KAAAm4D,oBAGAA,iBAAA,WACAn4D,KAAAy3D,QAAAz3D,KAAA22D,aAAA32D,KAAA62D,kBAAA72D,KAAA42D,WAAA52D,KAAA82D,iBAEA92D,KAAA+2D,WAEA/2D,KAAA+2D,SAAA,GACA/2D,KAAAg3D,gBAAA3xC,WAAArlB,KAAAm4D,iBAAAl8C,KAAAjc,MAAA,IACAA,KAAAi3D,qBACAj3D,KAAAi3D,yBCvnCA/3D,MAAAk5D,cAAAl5D,MAAA+U,iBAAAhV,OAAA,CACAo5D,eAAA,KACAC,qBAAA,KACAC,gBAAA,KAEAl9C,KAAA,SAAA1H,EAAAf,EAAAoB,GACAhU,KAAAoZ,GAAA,eAAApZ,KAAAw4D,aAAAv8C,KAAAjc,OACAA,KAAAoZ,GAAA,aAAApZ,KAAAw4D,aAAAv8C,KAAAjc,OACAA,KAAA0vB,KAAA/b,EAAAf,EAAAoB,IAGA2R,UAAA,WAEA3lB,KAAAq4D,eAAA,GAEA,IAAA,IAAA34D,EAAA,EAAAA,EAAAR,MAAAu5D,uBAAAn4D,OAAAZ,IAAA,CACA,IAAAg5D,EAAAx5D,MAAAu5D,uBAAA/4D,GAEAM,KAAAknB,eAAA,SAAAwxC,EAAAC,MACA34D,KAAAq4D,eAAAn3D,KAAAw3D,GAIA14D,KAAA0vB,QAGAzI,oBAAA,WAEA,GAAA,UAAAjnB,KAAAgU,SAAAkQ,SAAA,oBAAA00C,mBACA,IAAA,IAAAl5D,EAAA,EAAAA,EAAAM,KAAAumB,SAAAjmB,OAAAZ,IAAA,CACA,IAAAshB,EAAAriB,EAAAqB,KAAAumB,SAAA7mB,IAEA,GAAAshB,EAAAha,KAAA,YAAA4xD,mBACA,OAAA53C,EAAAha,KAAA,OAKA,OAAAhH,KAAA0vB,QAGA8oC,aAAA,WACA,GAAAx4D,KAAAghB,QAAA,CAKA,IAEAthB,EAAAgH,EAAAqP,EAFA8iD,EAAA74D,KAAAghB,QAAAha,KAAA,UAOA,GAAAhH,KAAAq4D,eAAA/3D,OAAA,CAOA,IAAAw4D,EAYAC,EAVA,GAPA/4D,KAAAs4D,sBACAt4D,KAAAs4D,qBAAAh+C,SAMAu+C,EACA,IAAAn5D,EAAA,EAAAA,EAAAM,KAAAq4D,eAAA/3D,OAAAZ,IACA,GAAAM,KAAAq4D,eAAA34D,GAAAm2B,SAAAgjC,EAAA,CACAC,EAAA94D,KAAAq4D,eAAA34D,GACA,MAmCA,GA9BAM,KAAAs4D,qBAAA35D,EAAA,kCAKAm6D,GACApyD,EAAA1G,KAAAg5D,qBAAAF,GACA/iD,EAAA,UAAA/V,KAAAgU,SAAAkQ,QAAAhlB,MAAAS,EAAA,MAAA,gBAAAT,MAAAS,EAAA,MAAA,uBAAA,CAAA+4D,MAAAI,EAAA7zD,OACAjF,KAAAu4D,gBAAA55D,EAAA,kCAAA+H,EAAA,IAAAxH,MAAAiE,WAAA4S,GAAA,QAAAzH,SAAAtO,KAAAs4D,sBAEA,UAAAt4D,KAAAgU,SAAAkQ,SACAlkB,KAAAwc,YAAAxc,KAAAu4D,gBAAA,SAAA,SAAAl/C,GACArZ,KAAAi5D,yBAAA5/C,EAAAE,cAAA2/C,aAAA,eAIAl5D,KAAAq4D,eAAA/3D,OAAA,IACAy4D,EAAAp6D,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,uBACA7L,SAAAtO,KAAAs4D,wBAGAt4D,KAAAu4D,gBAAAQ,EAAAp6D,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,8BACA9W,KAAAnE,MAAAS,EAAA,MAAA,kBACA2O,SAAAtO,KAAAs4D,sBAGAS,EAAA,CACA,IAAAI,EAAA,yBAEA,IAAAz5D,EAAA,EAAAA,EAAAM,KAAAq4D,eAAA/3D,OAAAZ,IAAA,CACA,IAAAg5D,EAAA14D,KAAAq4D,eAAA34D,GAEA,UAAAM,KAAAgU,SAAAkQ,SAAAw0C,IAAAI,IACApyD,EAAA1G,KAAAg5D,qBAAAN,GACA3iD,EAAA,UAAA/V,KAAAgU,SAAAkQ,QAAAw0C,EAAAzzD,KAAA/F,MAAAS,EAAA,MAAA,uBAAA,CAAA+4D,MAAAA,EAAAzzD,OACAk0D,GAAA,UAAAzyD,EAAA,IAAAxH,MAAAiE,WAAA4S,GAAA,aAMApX,EAFAw6D,GAAA,eAEA7qD,SAAAtO,KAAAs4D,sBACA,IAAAc,EAAA,IAAAh0D,QAAAyU,QAAAk/C,GAEA,UAAA/4D,KAAAgU,SAAAkQ,SACAk1C,EAAAhgD,GAAA,eAAAC,IACArZ,KAAAi5D,yBAAA5/C,EAAA4W,OAAAipC,aAAA,cAKAl5D,KAAAkvB,UAAAlvB,KAAAs4D,sBAMA,GAAA,UAAAt4D,KAAAgU,SAAAkQ,SAAA,oBAAAwF,QAAA,CACA,IAAA9f,EAAA,aAEAivD,IACAjvD,GAAA,IAAAivD,GAGAnvC,QAAAC,aAAA,GAAA,GAAAzqB,MAAAyF,OAAAiF,OAIAovD,qBAAA,SAAAN,GACA,GAAA,UAAA14D,KAAAgU,SAAAkQ,QAAA,CACA,IAAAta,EAAA,cAAA8uD,EAAA7iC,OAAA,OACA,GAAA71B,KAAA8V,QAAA9V,KAAA8V,QAAA5W,MAAAm6D,cACA,IAAA,IAAA35D,EAAA,EAAAA,EAAAR,MAAAkd,MAAA9b,OAAAZ,IACAR,MAAAkd,MAAA1c,GAAAmW,IAAA7V,KAAA8V,SACAlM,GAAA,IAAA1K,MAAAkd,MAAA1c,GAAAm2B,QAIA,MAAA,SAAA32B,MAAAyF,OAAAiF,GAAA,IAEA,MAAA,YAAA8uD,EAAA7iD,GAAA,KAIAojD,yBAAA,SAAAK,GACA,IAAAt5D,KAAAu4D,gBAAA5iD,SAAA,WAAA,CAOA,IAFA,IAAA+iD,EAEAh5D,EAAA,EAAAA,EAAAM,KAAAq4D,eAAA/3D,OAAAZ,IACA,GAAAM,KAAAq4D,eAAA34D,GAAAmW,IAAAyjD,EAAA,CACAZ,EAAA14D,KAAAq4D,eAAA34D,GACA,MAIA,GAAAg5D,EAAA,CAIA14D,KAAAu4D,gBAAAzmD,SAAA,YACA,IAAAynD,EAAAv5D,KAAAu4D,gBAAAl1D,OACArD,KAAAu4D,gBAAAl1D,KAAAnE,MAAAS,EAAA,MAAA,uBAAA,CAAA+4D,MAAAA,EAAAzzD,QAEA/F,MAAAkV,oBAAApU,KAAA2T,YAAA,CACAqJ,WAAAhd,KAAAs4D,qBACAxiD,OAAA9V,KAAA8V,OACA2F,WAAA,CACA69C,QAAAA,GAEA19C,eAAA,KACA5b,KAAAu4D,gBAAAzmD,SAAA,YAEAoK,aAAA,KACAlc,KAAAu4D,gBAAAniD,YAAA,YAEAqH,UAAA,KACAzd,KAAAu4D,gBAAAniD,YAAA,YAAA/S,KAAAk2D,IAEA55C,cAAAlV,IAEA,IAAA+uD,EAAA,SAAAd,EAAAC,IAEA34D,KAAA8gB,YAAA04C,GACAx5D,KAAA2tB,kBAAA6rC,GAGAx5D,KAAAivB,yBAAAxkB,EAAAoL,IACA7V,KAAA+lB,yBAOA7mB,MAAAwU,0BAAA,4BAAAxU,MAAAk5D,eCtNAl5D,MAAAu6D,oBAAAv6D,MAAAw4B,uBAAAz4B,OAAA,CACA6Z,YAAA,WACA9Y,KAAA0vB,KAAAiwB,MAAA3/C,KAAAk4B,WACAl4B,KAAAgU,SAAAokB,UAAA,GAGAyC,iBAAA,WACA,IAAA7mB,EAAAhU,KAAA0vB,OAEA,OADA1b,EAAA8pB,cAAA,EACA9pB,GAGA2kB,YAAA,WACA,OAAA34B,KAAA63B,mBAAAjiB,KAAA,aAGAulB,cAAA,SAAAxkB,GAEA3W,KAAAwvB,MAAA5X,UACA5X,KAAAwvB,MAAAiO,mBACAz9B,KAAAwvB,MAAA+N,mBACAv9B,KAAAwvB,MAAAkO,oBAKA,IAFA,IAAAg8B,EAAA15D,KAAAorB,wBAEA1rB,EAAA,EAAAA,EAAAiX,EAAArW,OAAAZ,IACAg6D,EAAAx4D,KAAAyV,EAAAjX,GAAAmW,IAGA,IAAA7O,EAAA,CACA2yD,YAAAD,EACA5jD,OAAAa,EAAA,GAAAb,OACAD,GAAA7V,KAAAgU,SAAA6B,GACA5Q,KAAAjF,KAAAgU,SAAA/O,KACA20D,YAAA55D,KAAAgU,SAAA4lD,YACAC,eAAA75D,KAAAgU,SAAA6lD,gBAGA36D,MAAA4H,kBAAA,qCAAAE,EAAA,CAAAyD,EAAA5C,KAMA,GALA7H,KAAAwvB,MAAAzX,SACA/X,KAAAwvB,MAAAgO,kBACAx9B,KAAAwvB,MAAA8N,kBACAt9B,KAAAwvB,MAAAmO,oBAEA,YAAA91B,EAAA,CACA,IACAiyD,EADAn7D,EAAA8L,EAAA1L,MACAmb,SAAA,aAEAla,KAAA63B,mBAAAphB,YAAAqjD,GACA95D,KAAA63B,mBAAAiiC,EACA95D,KAAA04B,gBAIA,IAFA,IAAAqhC,EAAA,GAEAr6D,EAAA,EAAAA,EAAAiX,EAAArW,OAAAZ,IAAA,CACA,IAAA2U,EAAAsC,EAAAjX,GACAgW,EAAA1V,KAAA4uB,eAAAva,EAAAwB,IAEAH,IACA1V,KAAA67B,wBAAAxnB,EAAAqB,SAAAA,GACAqkD,EAAA74D,KAAAmT,IAIArU,KAAAy7B,gCACAz7B,KAAAwvB,MAAArR,OACAne,KAAA87B,iBAAAi+B,OAKAhgC,cAAA,SAAArkB,GAEA,IAAAskD,EAAAtkD,EAAA+G,IAAA/G,EAAA0O,SAAAxF,SAAA,MAAAhJ,KAAA,aAGA5V,KAAA25B,eAAAqgC,GAGA,IAAA,IAAAt6D,EAAA,EAAAA,EAAAs6D,EAAA15D,OAAAZ,IACAM,KAAAi6D,qBAAAD,EAAAt6D,IAIAu6D,qBAAA,SAAAD,EAAAt6D,GACA,IAAAuH,EAGAvH,IAAAs6D,EAAA15D,OAAA,IACA2G,EAAA,KACA,IAAA8K,EAAAioD,EAAAz/C,QAAA6J,SAAAA,SACAvS,EAAAE,EAAAqS,SAEAvS,EAAA,KAAA7R,KAAA63B,mBAAA,IAAA9lB,EAAA6M,WAAAte,OACAyR,EAAAuI,SAEAzI,EAAAyI,WAKA,IAAA1G,EAAA,KACA5T,KAAAk6B,mBAAA8/B,EAAA7nD,GAAAzS,GAAAuH,IAGA,IAAAvH,EACAkU,IAEAyR,WAAAzR,EAAA,IAAAlU,MC5GAR,MAAAg7D,OAAA,GAOAh7D,MAAAg7D,OAAAC,UAAA/0D,QAAAuV,KAAA1b,OAAA,CACAm7D,QAAA,KACAC,KAAA,KAEAh/C,KAAA,SAAArU,GACA,IAAAozD,EAAApzD,EAAAozD,QACAC,EAAArzD,EAAAqzD,KAEAA,EAAAC,QAAA5kB,IACA/2C,EAAA2U,KAAAoiC,GAAA,SAAA6kB,GACA,IAEAC,EAEA,OAJAJ,EAAAG,GAIAh5D,MACA,IAAA,OACAi5D,EAAA73D,GAAA83D,UAAA,YACA/kB,EAAA6kB,GAAAC,EAAA9kB,EAAA6kB,IACA,MAEA,IAAA,WACAC,EAAA73D,GAAA83D,UAAA,qBACA/kB,EAAA6kB,GAAAC,EAAA9kB,EAAA6kB,IACA,MAEA,IAAA,UACA7kB,EAAA6kB,GAAA7kB,EAAA6kB,GAAA,IACA,MAEA,IAAA,SACA7kB,EAAA6kB,IAAA7kB,EAAA6kB,SASAv6D,KAAAo6D,QAAAA,EACAp6D,KAAAq6D,KAAAA,KAUAn7D,MAAAg7D,OAAAQ,IAAAt1D,QAAAuV,KAAA1b,OAAA,CACA2T,WAAA,KACA+nD,KAAA,KAEAt/C,KAAA,SAAAzI,GACA5S,KAAA4S,WAAAA,EAEA5S,KAAA26D,KAAAh8D,EAAA,+BAAA2P,SAAAtO,KAAA4S,YAEA5S,KAAAme,QAGAy8C,WAAA,SAAA77D,GACAiB,KAAA26D,KAAA57D,KAAAA,IAGA87D,YAAA,SAAAv+B,GACAt8B,KAAA26D,KAAA7vC,IAAA,OAAAwR,EAAA7kB,KAAA,MACAzX,KAAA26D,KAAA7vC,IAAA,MAAAwR,EAAArF,IAAA,OAGA0D,KAAA,WACA36B,KAAA26D,KAAA7vC,IAAA,UAAA,UAGA3M,KAAA,WACAne,KAAA26D,KAAA7vC,IAAA,UAAA,WASA5rB,MAAAg7D,OAAAY,UAAA11D,QAAAuV,KAAA1b,OAAA,CACA2T,WAAA,KACAmoD,OAAA,KAEAC,eAAA,WACAC,UAAA,KAEAr4D,aAAA,KACAs4D,iBAAA,KACA3jD,YAAA,KAEA4jD,IAAA,KACAr0B,MAAA,KACA/b,OAAA,KAEA1P,KAAA,SAAAga,EAAArhB,GACAhU,KAAA4S,WAAAyiB,EAEAr1B,KAAA8Y,YAAA5Z,MAAAg7D,OAAAY,UAAAx/C,UACAtb,KAAA8Y,YAAA9E,GAEA,IAAAonD,EAAA,CACAC,QAAAxvD,OAAAyvD,UACAC,uBAAA1vD,OAAAhJ,yBACA24D,2BAAA3vD,OAAA4vD,8BAGAz7D,KAAA8Y,YAAAsiD,GAEAz4D,GAAAgmD,OAAA98C,QAAAuN,GAAA,SAAA,KACApZ,KAAA07D,YAIA5iD,YAAA,SAAA9E,EAAAsH,GACA,IAAAqgD,OAAA,IAAA37D,KAAAgU,SAAA,GAAAhU,KAAAgU,SACAhU,KAAAgU,SAAArV,EAAAM,QAAA,EAAA,GAAA08D,EAAArgD,EAAAtH,IAGA4nD,KAAA,SAAAX,EAAAjnD,GAGAhU,KAAA8Y,YAAA9E,GAEAhU,KAAAi7D,UAAAA,EACAj7D,KAAA4C,aAAAD,GAAAC,aAAA5C,KAAAgU,SAAAunD,wBACAv7D,KAAAk7D,iBAAAv4D,GAAAu4D,iBAAAl7D,KAAAgU,SAAAwnD,4BACAx7D,KAAAuX,YAAAvX,KAAAgU,SAAAuD,YAIAvX,KAAA+6D,QACA/6D,KAAA+6D,OAAAzgD,SAGA,IAAA8S,EAAAptB,KAAAg7D,eAEAh7D,KAAAgU,SAAA6nD,aACAzuC,GAAA,IAAAptB,KAAAgU,SAAA6nD,YAGA77D,KAAA+6D,OAAAp8D,EAAA,eAAAyuB,SAAA9e,SAAAtO,KAAA4S,aAGA8oD,OAAA,WACA17D,KAAA47D,KAAA57D,KAAAi7D,UAAAj7D,KAAAgU,WAGA8nD,iBAAA,WAEAn9D,EAAA,QAAAqB,KAAA+6D,QAAAznD,MAAA,SAAAyoD,EAAAC,GACA,IAAAC,EAAAt9D,EAAA,OAAAq9D,GAEAC,EAAAlgC,QACAztB,SAAA0tD,GAEAC,EAAA/tD,KAAA,SAAA,WACA+tD,EAAA/tD,KAAA,eAAA,QAGA,CACAoN,SAAA,CACAigD,uBAAA,KACAC,2BAAA,KACAH,QAAA,CACAa,aAAA,OACAC,cAAA,OACAC,eAAA,QACAC,iBAAA,CACAC,IAAA,UACAC,MAAA,SACAC,KAAA,OAGAxU,OAAA,CAAA/wB,IAAA,EAAAvf,MAAA,EAAA+kD,OAAA,EAAAhlD,KAAA,GACAokD,WAAA,KACAa,OAAA,CAAA,UAAA,UAAA,UAAA,UAAA,cASAx9D,MAAAg7D,OAAAyC,KAAAz9D,MAAAg7D,OAAAY,UAAA77D,OAAA,CACA29D,IAAA,KACAC,YAAA,KAEAxhD,KAAA,SAAAga,EAAArhB,GACAhU,KAAA0vB,KAAA2F,EAAAn2B,MAAAg7D,OAAAyC,KAAArhD,UAEAtb,KAAA8Y,YAAA9E,IAGA4nD,KAAA,SAAAX,EAAAjnD,GACAhU,KAAA0vB,KAAAurC,EAAAjnD,GAEAhU,KAAA48D,MACA58D,KAAA48D,IAAA,MAGA,IAAA5U,EAAAhoD,KAAA88D,iBAEA98D,KAAA8mC,MAAA9mC,KAAA+6D,OAAAj0B,QAAAkhB,EAAAvwC,KAAAuwC,EAAAtwC,MACA1X,KAAA+qB,OAAA/qB,KAAA+6D,OAAAhwC,SAAAi9B,EAAA/wB,IAAA+wB,EAAAyU,OAIA,IAAAtB,EAAA,CACAr0B,MAAA9mC,KAAA8mC,OAAAkhB,EAAAvwC,KAAAuwC,EAAAtwC,OACAqT,OAAA/qB,KAAA+qB,QAAAi9B,EAAA/wB,IAAA+wB,EAAAyU,QACAM,WAAA,QAAA/8D,KAAAuX,YAAAywC,EAAAvwC,KAAAuwC,EAAAtwC,MACAslD,WAAAhV,EAAA/wB,KAGAj3B,KAAAm7D,IAAAx4D,GAAAgmD,OAAA3oD,KAAA+6D,OAAAxqC,IAAA,IAAAle,OAAA,OACAnE,KAAA,QAAAitD,EAAAr0B,OACA54B,KAAA,SAAAitD,EAAApwC,QAEA/qB,KAAA68D,YAAA78D,KAAAm7D,IAAA9oD,OAAA,KACAnE,KAAA,YAAA,aAAAitD,EAAA4B,cAAA5B,EAAA6B,eAIAh9D,KAAAi9D,YACAj9D,KAAAk9D,WACAl9D,KAAAm9D,YACAn9D,KAAAo9D,mBAGAH,UAAA,WAGA,IAAAt3B,EAAA3lC,KAAAq9D,MAAA,GAEAC,EAAA36D,GAAA46D,WAAA53B,GACA63B,WAAAx9D,KAAAy9D,iBACAC,MAHA,GAKA19D,KAAA68D,YAAAxqD,OAAA,KACAnE,KAAA,QAAA,gBACAA,KAAA,YAAA,gBAAAlO,KAAA+qB,WACA5L,KAAAm+C,GAIA,IAEAK,EAFA/3B,EAAA5lC,KAAA49D,OAIA,QAAA59D,KAAAuX,aACAomD,EAAAh7D,GAAAk7D,SAAAj4B,GACA43B,WAAAx9D,KAAA89D,iBACAC,WAAA/9D,KAAAg+D,kBACAN,MAPA,GASA19D,KAAA68D,YAAAxqD,OAAA,KACAnE,KAAA,QAAA,gBACAiR,KAAAw+C,KAEAA,EAAAh7D,GAAAs7D,UAAAr4B,GACA43B,WAAAx9D,KAAA89D,iBACAC,WAAA/9D,KAAAg+D,kBACAN,MAhBA,GAkBA19D,KAAA68D,YAAAxqD,OAAA,KACAnE,KAAA,QAAA,gBACAA,KAAA,YAAA,aAAAlO,KAAA8mC,YACA3nB,KAAAw+C,IAKA39D,KAAA87D,oBAGAoB,SAAA,WACA,GAAAl9D,KAAAgU,SAAAspD,MAAAY,SAAA,CACA,IAAAv4B,EAAA3lC,KAAAq9D,OACAC,EAAA36D,GAAA46D,WAAA53B,GAAA+3B,MAAA,GAAAS,cAAA,GACAn+D,KAAA68D,YAAAxqD,OAAA,KACAnE,KAAA,QAAA,UACAA,KAAA,YAAA,gBAAAlO,KAAA+qB,WACA5L,KAAAm+C,GAGA,GAAAt9D,KAAAgU,SAAA2pD,MAAAO,SAAA,CACA,IAEAP,EAFA/3B,EAAA5lC,KAAA49D,OAIA,QAAA59D,KAAAuX,aACAomD,EAAAh7D,GAAAk7D,SAAAj4B,GAAA83B,MAAA,GACA19D,KAAA68D,YAAAxqD,OAAA,KACAnE,KAAA,QAAA,UACAA,KAAA,YAAA,aAAAlO,KAAA8mC,MAPA,SAQA3nB,KAAAw+C,KAEAA,EAAAh7D,GAAAs7D,UAAAr4B,GAAA83B,MAAA,GACA19D,KAAA68D,YAAAxqD,OAAA,KACAnE,KAAA,QAAA,UACAA,KAAA,YAAA,mBACAiR,KAAAw+C,MAKAR,UAAA,WACA,IAAAx3B,EAAA3lC,KAAAq9D,MAAA,GACAz3B,EAAA5lC,KAAA49D,OAIA,GAAA59D,KAAAgU,SAAAspD,MAAAc,UAAA,CACA,IAAAC,EAAA17D,GAAA46D,WAAA53B,GAEA3lC,KAAA68D,YAAAxqD,OAAA,KACAnE,KAAA,QAAA,eACAA,KAAA,YAAA,eAAAlO,KAAA+qB,WACA5L,KAAAk/C,EACAC,UAAAt+D,KAAA+qB,OAAA,EAAA,GACAyyC,WAAA,KAMA,GAAAx9D,KAAAgU,SAAA2pD,MAAAS,UAAA,CACA,IAAAG,EAAA57D,GAAAk7D,SAAAj4B,GAEA5lC,KAAA68D,YAAAxqD,OAAA,KACAnE,KAAA,QAAA,eACAA,KAAA,YAAA,oBACAiR,KAAAo/C,EACAD,UAAAt+D,KAAA8mC,MAAA,GACA02B,WAAA,IACAO,WAAA/9D,KAAAg+D,kBACAN,MAZA,IAkBA,IAAAc,EAAA77D,GAAA67D,OACA74B,GAAA,SAAA+P,GACA,OAAA/P,EAAA+P,EAAA,OAEA9P,GAAA,SAAA8P,GACA,OAAA9P,EAAA8P,EAAA,OAGA11C,KAAA68D,YACAxqD,OAAA,KACAnE,KAAA,QAAA,cACAmE,OAAA,QACAosD,MAAAz+D,KAAAi7D,UAAAZ,MACAlZ,MAAA,OAAA,QACAA,MAAA,SAAAnhD,KAAAgU,SAAA0oD,OAAA,IACAvb,MAAA,eAAA,OACAjzC,KAAA,IAAAswD,GAIA,IAAAE,EAAA/7D,GAAA+7D,OACA/4B,GAAA,SAAA+P,GACA,OAAA/P,EAAA+P,EAAA,OAEAipB,GAAA3+D,KAAA+qB,QACA6zC,IAAA,SAAAlpB,GACA,OAAA9P,EAAA8P,EAAA,OAGA11C,KAAA68D,YACAxqD,OAAA,KACAnE,KAAA,QAAA,cACAmE,OAAA,QACAosD,MAAAz+D,KAAAi7D,UAAAZ,MACAlZ,MAAA,OAAAnhD,KAAAgU,SAAA0oD,OAAA,IACAvb,MAAA,eAAA,OACAjzC,KAAA,IAAAwwD,GAIA1+D,KAAAgU,SAAA6qD,OACA7+D,KAAA68D,YAAAxqD,OAAA,KACAnE,KAAA,QAAA,SACAqoB,UAAA,UACAvvB,KAAAhH,KAAAi7D,UAAAZ,MACAyE,QACAzsD,OAAA,UACA8uC,MAAA,OAAAnhD,KAAAgU,SAAA0oD,OAAA,IACAxuD,KAAA,QAAA,CAAAwnC,EAAAt2C,IAAA,aAAAA,GACA8O,KAAA,IAAA,GACAA,KAAA,KAAAwnC,GAAA/P,EAAA+P,EAAA,KACAxnC,KAAA,KAAAwnC,GAAA9P,EAAA8P,EAAA,MAIA0nB,gBAAA,WACA,GAAAp9D,KAAAgU,SAAA+qD,KAAA,CACA/+D,KAAA48D,MACA58D,KAAA48D,IAAA,IAAA19D,MAAAg7D,OAAAQ,IAAA16D,KAAA+6D,SAKA,IAAAiE,EAAAh/D,KAAA88D,iBAGAmC,GADAj/D,KAAA68D,YAAAlU,OAAA,kBAAAuW,OAAAC,iBAAAH,EAAAvnD,KAAAunD,EAAAtnD,MAAAymD,KACAn+D,KAAAi7D,UAAAZ,KAAA/5D,OAAA,GAIA8+D,EAAAzuD,KAAA6Y,IAAA,EAAAy1C,GAIAt5B,EAAA3lC,KAAAq9D,MAAA,GACAz3B,EAAA5lC,KAAA49D,OAEA59D,KAAA68D,YAAAxqD,OAAA,KACAnE,KAAA,QAAA,gBACAqoB,UAAA,QACAvvB,KAAAhH,KAAAi7D,UAAAZ,MACAyE,QAAAzsD,OAAA,QACAnE,KAAA,QAAA,eACAizC,MAAA,OAAA,eACAA,MAAA,eAAA,KACAjzC,KAAA,QAAAkxD,GACAlxD,KAAA,SAAAlO,KAAA+qB,QACA7c,KAAA,IAAAwnC,GAAA/P,EAAA+P,EAAA,IAAA0pB,EAAA,GACAhmD,GAAA,YAAA,CAAAs8B,EAAAt2C,KAGAY,KAAA68D,YAAAlU,OAAA,SAAAvpD,GAAA8O,KAAA,IAAA,GAIA,IAAAmxD,EAAA1gE,EAAA,WACA2gE,EAAA3gE,EAAA,2BAAA2P,SAAA+wD,GACAE,EAAA5gE,EAAA,2BAAA2P,SAAA+wD,GAEAC,EAAAvgE,KAAAiB,KAAAy9D,eAAAz9D,CAAA01C,EAAA,KACA6pB,EAAAxgE,KAAAiB,KAAA89D,eAAA99D,CAAA01C,EAAA,KAEA,IAAA8pB,EAAAH,EAAA9uC,IAAA,GAEAvwB,KAAA48D,IAAAhC,WAAA4E,GAIA,IAIA/nD,EAJAuwC,EAAAhoD,KAAA88D,iBAGA7lC,EAAA2O,EAAA8P,EAAA,IADA,GAIA,QAAA11C,KAAAuX,aACAE,EAAAkuB,EAAA+P,EAAA,IAAAsS,EAAAvwC,KALA,GAOAzX,KAAA+6D,OAAAj5D,SAAA2V,KAAAA,EAAAzX,KAAA48D,IAAAjC,KAAA7zB,QACA9mC,KAAA+6D,OAAAj5D,SAAA2V,KAAAzX,KAAA+6D,OAAAj0B,QARA,KAWArvB,EAAAkuB,EAAA+P,EAAA,KAAA11C,KAAA48D,IAAAjC,KAAA7zB,QAXA,MAcArvB,EAAAkuB,EAAA+P,EAAA,KAAA11C,KAAA48D,IAAAjC,KAAA7zB,QAAAkhB,EAAAvwC,KAdA,IAiBAA,EAAA,IACAA,EAAAkuB,EAAA+P,EAAA,IAAAsS,EAAAvwC,KAlBA,IAqBA,IAAA6kB,EAAA,CACArF,IAAAA,EACAxf,KAAAA,GAGAzX,KAAA48D,IAAA/B,YAAAv+B,GAIAt8B,KAAA48D,IAAAjiC,SAEAvhB,GAAA,WAAA,CAAAs8B,EAAAt2C,KAEAY,KAAA68D,YAAAlU,OAAA,SAAAvpD,GAAA8O,KAAA,IAAA,GAGAlO,KAAA48D,IAAAz+C,WAKA2+C,eAAA,WACA,IAAA9U,EAAAhoD,KAAAgU,SAAAg0C,OAIA35C,EAAArO,KAAAg+D,iBACAyB,EAAA,EAmBA,OAjBA9gE,EAAA2U,KAAAjF,EAAA,CAAA/O,EAAA6F,KACA,IAKAu6D,EALA,EAEA1/D,KAAA89D,eAEAh7D,CAAAqC,GACA7E,OAEAo/D,EAAAD,IACAA,EAAAC,KAIAD,GAAA,GAEAzX,EAAAvwC,KAAAgoD,EAEAzX,GAGAqV,KAAA,SAAAsC,GACA,IAAAC,EAAAj9D,GAAAkvB,IAAA7xB,KAAAi7D,UAAAZ,MAAA,SAAA3kB,GACA,OAAAA,EAAA,MAGAmqB,EAAAl9D,GAAA6mB,IAAAxpB,KAAAi7D,UAAAZ,MAAA,SAAA3kB,GACA,OAAAA,EAAA,MAGAoqB,EAAA,CAAAF,EAAAC,GAEA,QAAA7/D,KAAAuX,cACAuoD,EAAA,CAAAD,EAAAD,IAGA,IAAAnoD,EAAA,EACAC,EAAA,EAEAioD,IACAloD,EAAA,EACAC,EAAA,GAGA,IAAAiuB,EAAAhjC,GAAAo9D,YAAAnX,MAAA,CAAAnxC,EAAAzX,KAAA8mC,MAAApvB,IAIA,OAFAiuB,EAAAxwB,OAAA2qD,GAEAn6B,GAGAi4B,KAAA,WACA,IAAAoC,EAAA,CAAA,EAAAhgE,KAAAigE,gBAEAr6B,EAAAjjC,GAAAu9D,cAAAtX,MAAA,CAAA5oD,KAAA+qB,OAAA,IAIA,OAFA6a,EAAAzwB,OAAA6qD,GAEAp6B,GAGA63B,cAAA,WASA,OANAz9D,KAAAgU,SAAAspD,MAAAx6D,YAAAnE,EAAAwhB,KACAngB,KAAAgU,SAAAspD,MAAAx6D,UAAA9C,MAEAd,MAAAg7D,OAAAiG,MAAAC,iBAAApgE,KAAAk7D,iBAAAl7D,KAAAgU,WAMA8pD,cAAA,WASA,OANA99D,KAAAgU,SAAA2pD,MAAA76D,YAAAnE,EAAAwhB,KACAngB,KAAAgU,SAAA2pD,MAAA76D,UAAA9C,MAEAd,MAAAg7D,OAAAiG,MAAAE,mBAAArgE,KAAA4C,aAAA5C,KAAAi7D,UAAAb,QAAA,GAAA74D,KAAAvB,KAAAgU,WAMAisD,aAAA,WACA,OAAAt9D,GAAA6mB,IAAAxpB,KAAAi7D,UAAAZ,MAAA,SAAA3kB,GACA,OAAAA,EAAA,OAIAsoB,eAAA,WACA,IAAAsC,EAAAtgE,KAAAigE,eAEA,OAAAK,EAAA,EACA,CAAAA,EAAA,EAAAA,GAEA,CAAA,EAAAA,KAGA,CACAhlD,SAAA,CACAugD,WAAA,OACA7T,OAAA,CAAA/wB,IAAA,GAAAvf,MAAA,EAAA+kD,OAAA,GAAAhlD,KAAA,GACAonD,OAAA,EACAE,MAAA,EACAzB,MAAA,CACAc,WAAA,EACAF,UAAA,EACAp7D,UAAAnE,EAAAwhB,MAEAw9C,MAAA,CACAS,WAAA,EACAF,UAAA,EACAp7D,UAAAnE,EAAAwhB,SAUAjhB,MAAAg7D,OAAAiG,MAAA,CACAI,YAAA,SAAA/vD,GACA,IAAAgwD,EAAAt+D,SAAAsO,EAAA,IAEA4G,EAAA,CACArG,MAAAJ,KAAAC,MAAA4vD,EAAA,MACA1vD,QAAAH,KAAAC,OAAA4vD,EAAA,KAAAppD,EAAArG,OAAA,IACAP,QAAAgwD,EAAA,KAAAppD,EAAArG,MAAA,GAAAqG,EAAAtG,SAeA,OAZAsG,EAAArG,MAAA,KACAqG,EAAArG,MAAA,IAAAqG,EAAArG,OAGAqG,EAAAtG,QAAA,KACAsG,EAAAtG,QAAA,IAAAsG,EAAAtG,SAGAsG,EAAA5G,QAAA,KACA4G,EAAA5G,QAAA,IAAA4G,EAAA5G,SAGA,GAAA4G,EAAArG,SAAAqG,EAAAtG,WAAAsG,EAAA5G,WAGA4vD,iBAAA,SAAAlF,EAAAuF,GACA,OAAAA,EAAAC,WACA,IAAA,OACA,OAAAxF,EAAA15D,OAAA,MAEA,IAAA,QACA,OAAA05D,EAAA15D,OAAAi/D,EAAApF,QAAAgB,iBAAAE,OAEA,IAAA,OACA,OAAArB,EAAA15D,OAAAi/D,EAAApF,QAAAgB,iBAAAC,IAAA,aAEA,QACA,OAAApB,EAAA15D,OAAAi/D,EAAApF,QAAAgB,iBAAAC,OAIA+D,mBAAA,SAAAz9D,EAAArB,EAAAk/D,GACA,OAAAl/D,GACA,IAAA,WACA,OAAAqB,EAAApB,OAAAi/D,EAAApF,QAAAe,gBAEA,IAAA,UACA,OAAAx5D,EAAApB,OAAAi/D,EAAApF,QAAAc,eAEA,IAAA,OACA,OAAAj9D,MAAAg7D,OAAAiG,MAAAI,YAEA,IAAA,SACA,OAAA39D,EAAApB,OAAAi/D,EAAApF,QAAAa,iBCrrBAh9D,MAAAyhE,WAAAv7D,QAAAuV,KAAA1b,OAAA,CACA2T,WAAA,KACAvO,OAAA,KACAu8D,gBAAA,KACAC,cAAA,KACAC,YAAA,KAEAzlD,KAAA,SAAAga,GACAr1B,KAAA4S,WAAAjU,EAAA02B,GACAr1B,KAAAqE,OAAArE,KAAA4S,WAAAsH,SAAA,gBACAla,KAAA4gE,gBAAA5gE,KAAA4S,WAAAsH,SAAA,UACAla,KAAA6gE,cAAA7gE,KAAA4gE,gBAAA1mD,SAAA,kBAEAla,KAAA+gE,mBACA/gE,KAAAghE,mBAEAhhE,KAAAwc,YAAAxc,KAAAqE,OAAA,QAAA,qBAGA08D,iBAAA,WACA,IAAA38D,EAAAoC,SAAAoF,cAAA,SACAxH,EAAA68D,aAAA,OAAA,SAEA,UAAA78D,EAAA7C,OAKAvB,KAAA4gE,gBAAAxqD,YAAA,UACApW,KAAA8gE,YAAAniE,EAAAyF,GACA0N,SAAA,uBACAxD,SAAAtO,KAAA6gE,eAEA7gE,KAAAwc,YAAAxc,KAAA8gE,YAAA,SAAA,SAAAznD,GACAA,EAAA2X,qBAGAhxB,KAAAwc,YAAAxc,KAAA4gE,gBAAA,SAAA,WACA5gE,KAAA8gE,YAAA7pD,QAAA,YAGAjX,KAAAwc,YAAAxc,KAAA8gE,YAAA,QAAA,iBAGAI,YAAA,WACAlhE,KAAAqE,OAAAC,IAAAtE,KAAA8gE,YAAAx8D,OACAtE,KAAAghE,oBAGAA,iBAAA,WACA,IAAA18D,EAAAtE,KAAAqE,OAAAC,MAGAA,EAAAhE,QAAA,MAAAgE,GAMA,MAAAA,EAAA,KACAA,EAAA,IAAAA,EACAtE,KAAAqE,OAAAC,IAAAA,IAGAtE,KAAA6gE,cAAA/1C,IAAA,mBAAAxmB,GAEAtE,KAAA8gE,aACA9gE,KAAA8gE,YAAAx8D,IAAAA,IAbAtE,KAAA6gE,cAAA/1C,IAAA,mBAAA,MAgBA,CACAq2C,4BAAA,KAEAC,8BAAA,WAIA,OAHAliE,MAAAyhE,WAAAQ,4BAGAjiE,MAAAyhE,WAAAQ,+BC7EAjiE,MAAAuwB,sBAAArqB,QAAAw3B,MAAA39B,OAAA,CACAihB,aAAA,KACAmhD,8BAAA,KAEAzgD,SAAA,KACA0gD,kBAAA,KACAC,yBAAA,KACAC,eAAA,KACA5kD,QAAA,KACA6kD,oBAAA,KACAzmD,SAAA,KACAD,WAAA,KACA2mD,aAAA,KACAC,gBAAA,KAEAC,WAAA,KACA7mC,QAAA,KACA1S,eAAA,KACAw5C,qBAAA,EAEAC,yBAAA,KAEAzmD,KAAA,SAAA6E,EAAAlM,GACAhU,KAAA0vB,OAEA1vB,KAAA8Y,YAAA9E,EAAA,CACAoqB,WAAA,IAGAp+B,KAAAkgB,aAAAA,EACAlgB,KAAAqhE,8BAAArhE,KAAAkgB,aAAAU,SAAA1G,SAAA,OAAAA,SAAA,MAEA,IAAAtH,EAAAjU,EAAA,iDAAA2P,SAAAlJ,QAAAsN,MAEA1S,KAAA4gB,SAAAjiB,EAAA,yCAAA2P,SAAAsE,GACA5S,KAAAshE,kBAAA3iE,EAAA,yBAAA2P,SAAAtO,KAAA4gB,UACA5gB,KAAAuhE,yBAAA5iE,EAAA,iCAAA2P,SAAAsE,GAEA5S,KAAA4c,QAAAje,EAAA,yBAAA2P,SAAAsE,GACA5S,KAAAyhE,oBAAA9iE,EAAA,gCAAA2P,SAAAtO,KAAA4c,SACA5c,KAAA+a,WAAApc,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,MACA9W,KAAAnE,MAAAS,EAAA,MAAA,YACA2O,SAAAtO,KAAAyhE,qBACAzhE,KAAAgb,SAAArc,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,sBACA9W,KAAAnE,MAAAS,EAAA,MAAA,UACA2O,SAAAtO,KAAAyhE,qBACAzhE,KAAA0hE,aAAA/iE,EAAA,iCAAA2P,SAAAtO,KAAAyhE,qBACAzhE,KAAAwhE,eAAA7iE,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,sBACA9W,KAAAnE,MAAAS,EAAA,MAAA,iBACA2O,SAAA3P,EAAA,iDAAA2P,SAAAtO,KAAA4c,UAEA5c,KAAA2hE,gBAAAhjE,EAAA,0BAAA2P,SAAAsE,GAEA5S,KAAA+hE,aAAAnvD,GACA5S,KAAA26B,OAEA,IAAA3zB,EAAA,CACA2M,YAAA3T,KAAAkgB,aAAAvM,aAGAzU,MAAA4H,kBAAA,0DAAAE,EAAA,CAAAyD,EAAA5C,KACA7H,KAAA2hE,gBAAArnD,SAEA,YAAAzS,IACA7H,KAAAgb,SAAA5E,YAAA,YACApW,KAAAgiE,WAAAv3D,MAIAzK,KAAAwc,YAAAxc,KAAAwhE,eAAA,QAAA,4BACAxhE,KAAAwc,YAAAxc,KAAA+a,WAAA,QAAA,QACA/a,KAAAwc,YAAAxc,KAAAgb,SAAA,QAAA,QACAhb,KAAAwc,YAAAxc,KAAA4S,WAAA,SAAA,SAGAovD,WAAA,SAAAv3D,GAEAzK,KAAA8hE,yBAAAr3D,EAAAq3D,yBAGA9hE,KAAA4hE,WAAA,IAAAx8D,QAAAwzB,SAAA,CACA/C,OAAA,QACAmD,KAAA,IACAK,aAAA,KACAr5B,KAAA6hE,qBAAA,KAKA7hE,KAAA+6B,QAAA,GAEA,IAAA,IAAAr7B,EAAA,EAAAA,EAAA+K,EAAAswB,QAAAz6B,OAAAZ,IAAA,CACA,IAAAymB,EAAAnmB,KAAAiiE,UAAAx3D,EAAAswB,QAAAr7B,IACAM,KAAA+6B,QAAA75B,KAAAilB,GAGAnmB,KAAAqoB,qBAAA,IAAAroB,KAAA+6B,QAAA,IACA/6B,KAAA+6B,QAAA,GAAA4tB,UAIAsZ,UAAA,SAAAC,GACA,IAKA/7C,EALAgkC,EAAAxrD,EAAA,yCAAA2P,SAAAtO,KAAAshE,mBACAa,EAAAxjE,EAAA,wBAAA2P,SAAA67C,GACAiY,EAAAzjE,EAAA,0BAAA2P,SAAA67C,GAwBA,OAvBAxrD,EAAA,+BAAAO,MAAAS,EAAA,MAAA,WAAA,wBAAA2O,SAAA67C,QAKA,IAAA+X,EAAAG,SACAlY,EAAAr4C,SAAA,WACAswD,EAAAl0D,KAAA,OAAA,2BACAiY,EAAA,IAAAjnB,MAAAuwB,sBAAA6yC,QAAAtiE,KAAAmqD,EAAAgY,EAAAC,EAAAF,IACAK,gBAAAL,EAAAG,WAEAD,EAAAl0D,KAAA,OAAA,sBAAA5J,IAAA49D,EAAA5iE,MACA6mB,EAAA,IAAAjnB,MAAAuwB,sBAAA+yC,OAAAxiE,KAAAmqD,EAAAgY,EAAAC,EAAAF,IACAK,gBAAAL,EAAAnsD,QAGA/V,KAAAkgB,aAAAY,UAAA,KAAAnf,OAAA,EAAAugE,EAAA5iE,IAAAgB,OAAA,KAAA4hE,EAAA5iE,IAAA,KACA6mB,EAAAwiC,UAIA3oD,KAAA4hE,WAAAl6C,SAAAyiC,GAEAhkC,GAGAs8C,yBAAA,WACA,IAAAt8C,EAAAnmB,KAAAiiE,UAAA,CACAI,QAAA,KAGAj9D,QAAAs9D,yBAAA1iE,KAAA4gB,SAAAuF,EAAAgkC,OAEAhkC,EAAAwiC,SACA3oD,KAAA6hE,qBAAA,GAGAruB,KAAA,SAAAn6B,GAKA,GAJAA,GACAA,EAAAmM,kBAGAxlB,KAAAgb,SAAArF,SAAA,aAAA3V,KAAA0hE,aAAA/rD,SAAA,UAAA,CAIA3V,KAAA0hE,aAAAtrD,YAAA,UACA,IAAApP,EAAAhH,KAAA4S,WAAAoM,YAAA,gBAAAhf,KAAAkgB,aAAAvM,YAEAzU,MAAA4H,kBAAA,+DAAAE,EAAA,CAAAyD,EAAA5C,KAGA,GAFA7H,KAAA0hE,aAAA5vD,SAAA,UAEA,YAAAjK,GAAA4C,EAAA9C,QAAA,CAEA,GAAA3H,KAAA6hE,qBACA7hE,KAAAqhE,8BAAA/gE,OAAA,CAIA,IAHA,IACAqiE,EADAC,EAAA,KAGAljE,EAAA,EAAAA,EAAAM,KAAA4hE,WAAAp7C,OAAAlmB,OAAAZ,IAAA,CACA,IACAymB,EADAnmB,KAAA4hE,WAAAp7C,OAAArU,GAAAzS,GACAsH,KAAA,UACA67D,EAAA18C,EAAA28C,iBAEAD,IAIA18C,EAAA48C,YACAJ,EAAAE,GAEAF,IACA3iE,KAAAgjE,aAAAL,EAAAC,GACAA,EAAAD,EACAA,EAAA,MAGA3iE,KAAAgjE,aAAAH,EAAAD,GACAA,EAAAC,IAKA,GAAAD,EAAA,CACA,IAAAK,EAAAL,EAAAM,UACAljE,KAAAkgB,aAAAO,aAAAyH,YAAA+6C,GACAA,EAAA3oD,UAMAta,KAAAqoB,gBAAAroB,KAAAqoB,eAAA65C,WAAA5iE,MACAU,KAAAkgB,aAAAyN,kBAAA3tB,KAAAqoB,eAAA65C,WAAA5iE,KACAU,KAAAkgB,aAAA6F,kBAGA7mB,MAAA8I,GAAAyX,cAAAvgB,MAAAS,EAAA,MAAA,0BACAK,KAAAme,WACA,CACA,IAAAvW,EAAA,YAAAC,GAAA4C,EAAA7C,MAAA6C,EAAA7C,MAAA1I,MAAAS,EAAA,MAAA,4BACAT,MAAA8I,GAAAC,aAAAL,QAKAo7D,aAAA,SAAAhiD,EAAA4hD,GACAA,EAGA5hD,EAAAsU,YAAAstC,GAFA5hD,EAAA0H,UAAA1oB,KAAAqhE,gCAMA72C,QAAA,WACA,IAAA,IAAA9qB,EAAA,EAAAA,EAAAM,KAAA+6B,QAAAz6B,OAAAZ,IACAM,KAAA+6B,QAAAr7B,GAAA8qB,iBAGAxqB,KAAA+6B,QACA/6B,KAAA0vB,UAIAxwB,MAAAuwB,sBAAA0zC,WAAA/9D,QAAAuV,KAAA1b,OAAA,CACAuwB,MAAA,KAEA26B,MAAA,KACAgY,WAAA,KACAC,WAAA,KACAgB,mBAAA,KAEAlB,WAAA,KAEA7mD,KAAA,SAAAmU,EAAA26B,EAAAgY,EAAAC,EAAAF,GACAliE,KAAAwvB,MAAAA,EACAxvB,KAAAmqD,MAAAA,EACAnqD,KAAAmiE,WAAAA,EACAniE,KAAAoiE,WAAAA,EACApiE,KAAAkiE,WAAAA,EAEAliE,KAAAmqD,MAAAnjD,KAAA,SAAAhH,MAEAA,KAAAwc,YAAAxc,KAAAmqD,MAAA,QAAA,WAGA4Y,UAAA,WACA,OAAA,GAGAM,WAAA,WACA,OAAArjE,KAAAwvB,MAAAnH,iBAAAroB,MAGA2oD,OAAA,WACA3oD,KAAAqjE,eAIArjE,KAAAwvB,MAAAnH,gBACAroB,KAAAwvB,MAAAnH,eAAAi7C,WAGAtjE,KAAAmqD,MAAAr4C,SAAA,OACA9R,KAAAwvB,MAAAnH,eAAAroB,KAEAA,KAAAojE,mBAIApjE,KAAAojE,mBAAAhtD,YAAA,UAHApW,KAAAojE,mBAAApjE,KAAAujE,iBACAj1D,SAAAtO,KAAAwvB,MAAA+xC,0BAKAvhE,KAAAwvB,MAAA+xC,yBAAA52C,UAAA,KAGA44C,eAAA,WACA,OAAA5kE,EAAA,WAGAmkE,eAAA,aAGAQ,SAAA,WACAtjE,KAAAmqD,MAAA/zC,YAAA,OACApW,KAAAwvB,MAAAnH,eAAA,KACAroB,KAAAojE,mBAAAtxD,SAAA,WAGAywD,gBAAA,SAAAj+D,GACAtE,KAAAmiE,WAAA9+D,KAAAiB,IAGAkmB,QAAA,WACAxqB,KAAAmqD,MAAAnjD,KAAA,SAAA,MACAhH,KAAA0vB,UAIAxwB,MAAAuwB,sBAAA+yC,OAAAtjE,MAAAuwB,sBAAA0zC,WAAAlkE,OAAA,CACAskE,eAAA,WACA,IAAAC,EAAA7kE,EAAA,UAAA0T,OAAAnT,MAAA80B,GAAAM,gBAAA,CACAve,MAAA7W,MAAAS,EAAA,MAAA,yBACAkW,GAAA,0BAAAlF,KAAAC,MAAA,IAAAD,KAAAe,UACAzM,KAAA,WAAAjF,KAAAkiE,WAAA5iE,yBACA6F,MAAAnF,KAAAkiE,WAAAuB,iBACAlvC,YAAAv0B,KAAAkiE,WAAAwB,2BAOA,OAJA1jE,KAAAkiE,WAAAyB,gBAAArjE,QACAkjE,EAAAnxD,OAAArS,KAAA4jE,2BAGAJ,GAGAI,wBAAA,WAEA,IAAAC,EAAAC,GAAA9jE,KAAAkiE,WAAAyB,gBAAA,GACAI,EAAA/jE,KAAAgkE,wBAAAH,EAAAC,GAAA,GAAA,GAGAG,EAAAtlE,EAAA,UACAulE,EAAA,CAAAL,GAEAllE,EAAA,sCAAAqB,KAAAkiE,WAAA5iE,IAAA,oCAAAgP,SAAA21D,GAGA,IAAA,IAAAvkE,EAAA,EAAAA,EAAAM,KAAAkiE,WAAAyB,gBAAArjE,OAAAZ,IAAA,CACA,IAAAJ,EAAAyW,GAAA/V,KAAAkiE,WAAAyB,gBAAAjkE,GACAukE,EAAA5xD,OAAArS,KAAAgkE,wBAAA1kE,EAAAyW,GAAA,GAAA,IACAmuD,EAAAhjE,KAAA5B,GAIA,IAAAwiE,EAAA9hE,KAAAwvB,MAAAsyC,yBAAA/gE,MAAA,GACA+gE,EAAA5gE,QAAAlB,KAAAkiE,WAAAJ,0BAEA,IAAA,IAAApiE,EAAA,EAAAA,EAAAoiE,EAAAxhE,OAAAZ,IAAA,CACA,IAAAJ,EAAAyW,GAAA+rD,EAAApiE,GACAR,MAAA+N,QAAA3N,EAAA4kE,IACAD,EAAA5xD,OAAArS,KAAAgkE,wBAAA1kE,EAAAyW,GAAA,GAAA,IASA,OALA,IAAA3Q,QAAAwzB,SAAAqrC,EAAA/pD,WAAA,CACA2b,OAAA,QACAmD,KAAA,MAGA95B,MAAA80B,GAAAmwC,YAAAxlE,EAAA,CAAAolE,EAAA,GAAAE,EAAA,KAAA,CACAluD,MAAA7W,MAAAS,EAAA,MAAA,iBACAykE,aAAAllE,MAAAS,EAAA,MAAA,wFAIAqkE,wBAAA,SAAA1kE,EAAAyW,EAAAwE,EAAAgoC,GACA,IAAA99B,EAAA9lB,EAAA,iDACA0T,OAAA,4BACAA,OACAnT,MAAA80B,GAAAqwC,eAAA,CACAtuD,MAAA7W,MAAAiE,WAAA4S,GACA9Q,KAAA,WAAAjF,KAAAkiE,WAAA5iE,IAAA,uBACA6F,MAAA7F,EACAijD,QAAAA,EACA+hB,SAAA/pD,KAQA,OAJAA,GACAkK,EAAAvK,SAAA,SAAApI,SAAA,YAGA2S,GAGAq+C,eAAA,WACA,IAAA9hD,EAAAhhB,KAAAwvB,MAAAtP,aAAAgH,eAAAlnB,KAAAkiE,WAAA5iE,KAEA,GAAA0hB,EACA,OAAAA,EAAAvH,QAAA,SAKAva,MAAAuwB,sBAAA6yC,QAAApjE,MAAAuwB,sBAAA0zC,WAAAlkE,OAAA,CACAslE,YAAA,KACAC,YAAA,KACA9jC,WAAA,KAEAqiC,UAAA,WACA,OAAA,GAGApa,OAAA,WACA3oD,KAAA0vB,OACA1vB,KAAAwkE,YAAAvtD,QAAA,UAGAssD,eAAA,WACA,IAAAC,EAAA7kE,EAAA,UAkBA,OAhBAqB,KAAAukE,YAAArlE,MAAA80B,GAAAM,gBAAA,CACAve,MAAA7W,MAAAS,EAAA,MAAA,WACAykE,aAAAllE,MAAAS,EAAA,MAAA,mEACAwF,MAAAnF,KAAAkiE,WAAAG,UACA/zD,SAAAk1D,GAEAxjE,KAAAwkE,YAAAxkE,KAAAukE,YAAA3uD,KAAA,SAEA4tD,EAAAnxD,OAAA,SAEArS,KAAA0gC,WAAA/hC,EAAA,6BAAA0E,KAAAnE,MAAAS,EAAA,MAAA,mBACA2O,SAAAk1D,GAEAxjE,KAAAwc,YAAAxc,KAAAwkE,YAAA,QAAA,0BACAxkE,KAAAwc,YAAAxc,KAAA0gC,WAAA,QAAA,iBAEA8iC,GAGAiB,uBAAA,WACAzkE,KAAAuiE,gBAAAviE,KAAAwkE,YAAAlgE,OACAtE,KAAAwvB,MAAAqyC,qBAAA,GAGAU,gBAAA,SAAAj+D,GACAtE,KAAAmiE,WAAApjE,MAAAuF,EAAApF,MAAAiE,WAAAmB,GAAA,qBAAApF,MAAAS,EAAA,MAAA,WAAA,SAAA,UACAK,KAAAoiE,WAAA99D,IAAAA,IAGAogE,cAAA,WACA1kE,KAAAwvB,MAAAoyC,WAAA15C,YAAAloB,KAAAmqD,OACAnqD,KAAAwvB,MAAAuL,QAAAzrB,OAAA3Q,EAAAsO,QAAAjN,KAAAA,KAAAwvB,MAAAuL,SAAA,GACA/6B,KAAAwvB,MAAAqyC,qBAAA,EAEA7hE,KAAAqjE,eACArjE,KAAAsjE,WAEAtjE,KAAAwvB,MAAAuL,QAAAz6B,QACAN,KAAAwvB,MAAAuL,QAAA,GAAA4tB,UAIA3oD,KAAAmqD,MAAA7vC,SACAta,KAAAojE,mBAAA9oD,SACAta,KAAAwqB,WAGAs4C,eAAA,WACA,IAAA/sD,EAAA/V,KAAAwkE,YAAAxkE,KAAAwkE,YAAAlgE,MAAAtE,KAAAkiE,WAAAG,QACA,OAAA1jE,EAAA,yBAAA0T,OAAA1T,EAAA,WAAA0E,KAAA0S,OC9cA7W,MAAAihC,gBAAA/6B,QAAAwzB,SAAA35B,OAAA,CACA4gC,OAAA,KAEAxkB,KAAA,SAAAspD,EAAA3wD,GACAhU,KAAA6/B,OAAAlhC,EAAAgmE,GACA,IAAAC,EAAA5kE,KAAA6/B,OAAA3lB,SAAA,SAAAA,SAAA,kBAEAlG,EAAArV,EAAAM,OAAA,GAAAC,MAAAihC,gBAAA7kB,SAAAtH,IAEAqhB,UAAAr1B,KAAA6/B,OAAA3lB,SAAA,SACAlG,EAAAuoC,OAAAv8C,KAAA6kE,UAAA5oD,KAAAjc,MACAgU,EAAA8wD,QAAA,QACA9wD,EAAAglB,KAAA5zB,QAAA2/D,OACA/wD,EAAAmlB,eAAA,EACAnlB,EAAAolB,cAAA,IAEAp5B,KAAA0vB,KAAAk1C,EAAA5wD,IAGA6wD,UAAA,SAAAG,GACA,IAAA3oC,EAAA19B,EAAA,eAAAqB,KAAAgU,SAAAixD,YAAA,OAAA32D,SAAAlJ,QAAAsN,MACAmtB,EAAAlhC,EAAA,YAAA2P,SAAA+tB,GACAU,EAAAp+B,EAAA,YAAA2P,SAAAuxB,GAEAmlC,EAAA12D,SAAAyuB,GAGA8C,EAAAiH,MAAA9mC,KAAA6/B,OAAAiH,SACAjH,EAAA5J,KAAA,YAAAj2B,KAAA6/B,OAAA5J,KAAA,cAOA,IAJA,IACAivC,EADAllE,KAAA6/B,OAAAjqB,KAAA,YACAsE,WACAuqC,EAAAugB,EAAA9qD,WAEAxa,EAAA,EAAAA,EAAA+kD,EAAAnkD,OAAAZ,IACAf,EAAA8lD,EAAA/kD,IAAAonC,MAAAnoC,EAAAumE,EAAAxlE,IAAAonC,SAGA,OAAAzK,IAEA,CACA/gB,SAAA,CACAua,OAAA,QACAovC,YAAA,yBC5CA/lE,MAAAimE,gBAAA//D,QAAAw3B,MAAA39B,OAAA,CACA4W,GAAA,KACAuvD,OAAA,KAEAC,oBAAA,KACAC,eAAA,KAEAC,WAAA,KACAC,WAAA,EAEAnqD,KAAA,SAAA+pD,EAAApxD,GACAhU,KAAA6V,GAAAlF,KAAAC,MAAA,IAAAD,KAAAe,UACA1R,KAAAolE,OAAAA,EACApxD,EAAArV,EAAAM,OAAAC,MAAAimE,gBAAA7pD,SAAAtH,GAEA,IAAA/F,EAAAtP,EACA,mFACAO,MAAAyH,eACA,kEACAvB,QAAA7F,QAAAS,KAAAolE,QAAA,GAAA,6CAAAplE,KAAAolE,OAAA,QACApxD,EAAA8C,SAAA,+CAAA9C,EAAA8C,SAAA,MAAA,IACA,WACAxI,SAAAlJ,QAAAsN,MACAwL,EAAAvf,EACA,qDAEAO,MAAAS,EAAA,MAAA,8CAFA,8HAMAT,MAAAS,EAAA,MAAA,mBANA,kCAOAK,KAAA6V,GAPA,yGASA3W,MAAAS,EAAA,MAAA,iBATA,4GAaAT,MAAAS,EAAA,MAAA,wBAbA,wBAgBA2O,SAAAL,GACAs0B,EAAA5jC,EAAA,gCAAA2P,SAAA4P,GACAnD,EAAApc,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,MACA9W,KAAAnE,MAAAS,EAAA,MAAA,YACA2O,SAAAi0B,GAEA,GAAAvuB,EAAAyxD,eAAAnlE,OACA,IAAA,IAAAZ,EAAA,EAAAA,EAAAsU,EAAAyxD,eAAAnlE,OAAAZ,IACAwe,EAAAtI,KAAA,MAAAvD,OAAA1T,EAAA,QAAA,CAAA0E,KAAA2Q,EAAAyxD,eAAA/lE,WAGAwe,EAAAtI,KAAA,MAAA0E,SAWA,IAAAorD,EAEA,GAVA1lE,KAAAqlE,oBAAAnnD,EAAAtI,KAAA,qBACA5V,KAAA2lE,iBAAAhnE,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,sBACA9W,KAAArD,KAAA4lE,iBAAA,KACAt3D,SAAAi0B,GACAviC,KAAAslE,eAAA3mE,EAAA,iCAAA2P,SAAAi0B,GAIAn9B,QAAA7F,QAAAS,KAAAolE,QAAA,CACAM,EAAA,CAAA,OAEA,IAAA,IAAAhmE,EAAA,EAAAA,EAAAM,KAAAolE,OAAA9kE,OAAAZ,IACAgmE,EAAAxkE,KAAA,OAAAlB,KAAAolE,OAAA1lE,SAGAgmE,EAAA,OAAA1lE,KAAAolE,OAGAplE,KAAAulE,WAAA,IAAArmE,MAAAw4B,uBAAA,CACA7hB,GAAA,iBAAA7V,KAAA6V,GACA5Q,KAAA,oBACA0O,YAAA,wBACAkR,SAAA,CACAhP,GAAA6vD,GAEA37C,MAAA,EACAqR,cAAA,CACAN,kBAAA,GAEAgB,iBAAA,KACA97B,KAAA+c,wBAEA/c,KAAAqlE,oBAAA9qD,QAAA0b,KAAA,WAGAj2B,KAAA6lE,uBAFA7lE,KAAAqlE,oBAAA9qD,QAAAtD,QAAA,UAKAgjB,iBAAAj6B,KAAA6lE,qBAAA5pD,KAAAjc,MACA6yB,YAAA,EACAgH,UAAA,IAGA75B,KAAAwc,YAAAzB,EAAA,QAAA,QAEA/a,KAAAwc,YAAAxc,KAAAqlE,oBAAA,SAAA,wBACArlE,KAAAwc,YAAAvO,EAAA,SAAA,gBAEAjO,KAAA0vB,KAAAzhB,EAAA+F,IAGA4xD,gBAAA,SAAAE,GACA,IAAAjmE,EAAAimE,EACA,0DACA,8CAEA,OAAA5mE,MAAAS,EAAA,MAAAE,EAAA,CACAkmE,IAAA3gE,QAAA7F,QAAAS,KAAAolE,QAAAplE,KAAAolE,OAAA9kE,OAAA,KAIAulE,qBAAA,WACA,IAAAG,GAAA,EAoBA,OAlBAhmE,KAAAqlE,oBAAAlzD,GAAA,GAAA8jB,KAAA,YACA+vC,GAAA,EACAhmE,KAAA2lE,iBAAAtiE,KAAArD,KAAA4lE,iBAAA,MAEA5lE,KAAA2lE,iBAAAtiE,KAAArD,KAAA4lE,iBAAA,IACA5lE,KAAAqlE,oBAAAlzD,GAAA,GAAA8jB,KAAA,aACA+vC,IAAAhmE,KAAAulE,WAAAx5C,gBAIA/rB,KAAA+c,wBAEAipD,EACAhmE,KAAA2lE,iBAAAvvD,YAAA,YAEApW,KAAA2lE,iBAAA7zD,SAAA,YAGAk0D,GAGAC,aAAA,SAAA5sD,GACA,IAAArZ,KAAAwlE,WAAAxlE,KAAA6lE,uBAAA,CAKA7lE,KAAA2lE,iBAAA7zD,SAAA,UACA9R,KAAAslE,eAAAlvD,YAAA,UACApW,KAAA4X,UACA5X,KAAAulE,WAAA3tD,UACA5X,KAAAwlE,WAAA,EAGA,KACA,IAAAxlE,KAAAgU,SAAA0J,YACArE,EAAAmM,iBAEA,MAAA9a,GAGA,MAFA2O,EAAAmM,iBACAxlB,KAAAslE,eAAAxzD,SAAA,UACApH,QAlBA2O,EAAAmM,kBAsBA2X,SAAA,WAEA/3B,QAAAqgB,iBAAA,IACAzlB,KAAAqlE,oBAAA9qD,QAAAtD,QAAA,SAGAjX,KAAA0vB,SAEA,CACApU,SAAA,CACAmqD,eAAA,GACA/nD,SAAA/e,EAAAwhB,KACArJ,SAAA,QCnLA5X,MAAAgnE,YAAA9gE,QAAAuV,KAAA1b,OAAA,CACAknE,aAAA,KACAC,eAAA,KACAnrD,SAAA,KACAorD,uBAAA,KACAC,YAAA,KAEAC,aAAA,KACAC,QAAA,KACAC,eAAA,KACAC,aAAA,KAEAC,gBAAA,KACAC,mBAAA,KACAC,mBAAA,KACAC,eAAA,KAEAC,QAAA,KACAC,WAAA,KAEAC,oBAAA,KACAC,qBAAA,EACAC,WAAA,EACA3oC,QAAA,KACA4oC,QAAA,EACAC,QAAA,KACAC,MAAA,KACAC,gBAAA,EAEAC,mBAAA,KACA51D,OAAA,KAEA61D,gBAAA,EACAC,QAAA,KACAC,aAAA,KACAC,uBAAA,EAEAvsD,KAAA,SAAArH,GAoBA,GAnBAhU,KAAA8Y,YAAA9E,EAAA9U,MAAAgnE,YAAA5qD,UAEAtb,KAAAsnE,MAAA,GACAtnE,KAAAwnE,mBAAA,GAEAxnE,KAAA+mE,QAAAr+D,OAAAC,KAAA3I,KAAAgU,SAAA6zD,cAAA1lE,IAAA2T,GACA5T,SAAA4T,IAGA9V,KAAAmmE,aAAAxnE,EAAA,gBACAqB,KAAAomE,eAAAznE,EAAA,mBACAqB,KAAAib,SAAAtc,EAAA,qBACAqB,KAAAqmE,uBAAA1nE,EAAA,sBACAqB,KAAAsmE,YAAA3nE,EAAA,oBAEAqB,KAAAgU,SAAA8zD,sBACA9nE,KAAAwc,YAAAxc,KAAAqmE,uBAAA,QAAA,sBAGArmE,KAAAgU,SAAA+zD,eAAAznE,OAAA,CACAN,KAAAgU,SAAAg0D,eACAhoE,KAAAwc,YAAA7d,EAAA,gBAAA,QAAA,eAGA,MAAAspE,EAAAtpE,EAAA,cAEA,IAAAqB,KAAAgU,SAAA+zD,eAAAznE,OACAN,KAAAwc,YAAAyrD,EAAA,SAAA,WACAjoE,KAAAkoE,cAAAloE,KAAAgU,SAAA+zD,eAAA,GAAAziE,QAGAtF,KAAAmoE,gBAAAF,GAKAjoE,KAAAgU,SAAAo0D,aAKAlpE,MAAA8I,GAAAmmD,aAAAnnD,KAAA,aAAA,IAAAhH,KAAAqoE,eAAA,IAEAroE,KAAAwc,YAAAtd,MAAA8I,GAAAmmD,aAAA,SAAA,oBAEAnuD,KAAAgU,SAAAs0D,QACAtoE,KAAAuoE,gBAGAvoE,KAAAwc,YAAA7d,EAAA,mBAAA,QAAA0a,IACAA,EAAAmM,iBACAxlB,KAAAwoE,cACAxoE,KAAAmoB,eAAAjpB,MAAA8I,GAAAmmD,aAAA,yBAIAnuD,KAAAgU,SAAAy0D,iBACAzoE,KAAAwc,YAAAtd,MAAA8I,GAAAmmD,aAAA,sBAAA90C,IACAA,EAAAi4C,eACAj4C,EAAAmM,iBACAxlB,KAAAwoE,cACAxoE,KAAAmoB,eAAAjpB,MAAA8I,GAAAmmD,aAAA,6BAOAua,iBAAA,WACA1oE,KAAAknE,qBAAAlnE,KAAAmnE,WAAA,IAAAjoE,MAAAypE,iBAIA3oE,KAAAknE,qBAAA,EAEAlnE,KAAAwc,YAAApX,QAAAsN,KAAA,4DAAA,SAAA2G,GACA1a,EAAA0a,EAAA2c,QAAApF,GAAA5wB,KAAA4oE,iBAGAxjD,aAAAplB,KAAAw+B,SAEA,CAAA,WAAA,QAAA,UAAApvB,SAAAiK,EAAA9X,MACAvB,KAAAw+B,QAAAnZ,WAAArlB,KAAAy8B,UAAAxgB,KAAAjc,MAAA,KAEAA,KAAAy8B,kBAKAosC,wBAAA,WACA7oE,KAAAknE,sBAIAlnE,KAAAmoB,eAAA/iB,QAAAsN,KAAA,4DACA0S,aAAAplB,KAAAw+B,SACAx+B,KAAAknE,qBAAA,IAGA3sC,MAAA,WACAv6B,KAAAmnE,aACAnnE,KAAA6oE,2BAGApuC,OAAA,WACA,GAAA,IAAAz6B,KAAAmnE,WACA,KAAA,mEAKAnnE,KAAAmnE,aACA,IAAAnnE,KAAAmnE,aACAjoE,MAAAypE,gBACA3oE,KAAAy8B,YAEAz8B,KAAA0oE,qBAIAH,aAAA,WAEAvoE,KAAA8oE,oBAEA9oE,KAAAwc,YAAAxc,KAAAsmE,YAAA,QAAA,KACAtmE,KAAA+oE,cAAA/oE,KAAAsmE,eAGApnE,MAAAypE,gBACA3oE,KAAA0oE,mBAGA1oE,KAAAgU,SAAAy0D,iBACArjE,QAAAwY,gBAAAC,iBAAA,CACAiC,QAAA1a,QAAA2a,MACAC,MAAA,EACA/c,KAAA,GACA,KACA/D,MAAA0X,WAAA1X,MAAA8I,GAAAmmD,aAAA,CACApnD,OAAA/G,KAAAgU,SAAAg1D,mBACAlyD,SAAA9W,KAAAgU,SAAAi1D,mBAEA,IAIAC,mBAAA,WACAlpE,KAAAmoB,eAAAnoB,KAAAqmE,uBAAA,SACArmE,KAAAqmE,uBAAA7uD,SAAA,CAAA4iB,QAAA,GAAA,OAAA,KACAp6B,KAAAqmE,uBAAA/rD,WAGA,MAAA6uD,EAAAxqE,EAAA,mBAAAqB,KAAAgU,SAAA8B,gBAIA,GAHA9V,KAAA2mE,gBAAAwC,EAAA/kD,SAGApkB,KAAAgU,SAAAo0D,WAEA,YADApoE,KAAAopE,0BAAA9O,QAAA+O,GAAArpE,KAAAspE,uBAAAD,IAIAF,EAAAr3D,SAAA,UACA,MAAAy3D,EAAArqE,MAAA80B,GAAAw1C,uBAAA,CACA3zD,GAAA,UACAE,MAAA7W,MAAAS,EAAA,MAAA,WACAsF,KAAA,YACAm8C,aAAA+nB,GACAI,EAAA3zD,KAAA,SAAAkV,IAAA,cAAA,QACA9qB,KAAA4mE,mBAAA2C,EAAA3zD,KAAA,gBAEA5V,KAAAgU,SAAAo0D,YACApoE,KAAAypE,WAAAF,GAIA,MAAAG,EAAA1pE,KAAAgU,SAAA21D,UAAAzqE,MAAA+N,SAAA,EAAAjN,KAAAgU,SAAA6zD,cACA,IACA7nE,KAAAgU,SAAA41D,eAAA,IAAA,GACAC,EAAApmE,mBAAA,kBAAAzD,KAAAgU,SAAA8B,WACA,KAAA9V,KAAAgU,SAAA41D,eAAA,IAAA,IAEA5pE,KAAA6mE,mBAAAsC,EAAAvzD,KAAA,gBACAwD,GAAA,SAAApZ,KAAA8pE,oBAAA7tD,KAAAjc,OAEAA,KAAAopE,0BAAA9O,QAAA+O,GAAArpE,KAAAspE,uBAAAD,IAEA,IAAAU,EAAA,WAAAL,EACA,IAAA,IAAAhqE,EAAA,EAAAA,EAAAM,KAAA6mE,mBAAAvmE,OAAAZ,IAAA,CACA,MAAA2E,EAAArE,KAAA6mE,mBAAA10D,GAAAzS,GAAAsH,KAAA,eAAA3C,OACA0lE,GAAA,IAAAtmE,mBAAAY,EAAA6J,KAAA,SAAA,IAAA7J,EAAAC,MAGApF,MAAA8I,GAAAmmD,aAAAnnD,KAAA,yBACA9H,MAAA8I,GAAAmmD,aAAAnnD,KAAA,0BAAAhI,QAAA6qE,EAAAE,IAGA/pE,KAAAgU,SAAAg2D,aAAAhqE,KAAAgU,SAAAg2D,YAAA1pE,QACAN,KAAAiqE,uBAGAjqE,KAAA4mE,mBAAAxtD,GAAA,SAAApZ,KAAAkqE,oBAAAjuD,KAAAjc,OACAA,KAAA8pE,uBAMAV,wBAAA,WACA,OAAAlqE,MAAAkd,MAAAuI,OAAA0kD,GAAAA,EAAAxzD,IAAA7V,KAAAgU,SAAA8B,QAAA9V,KAAA+mE,QAAA33D,SAAAi6D,EAAAxzD,MAGA4zD,WAAA,SAAAU,GACA,MAAAp/C,EAAAo/C,EAAAp/C,SACAo/C,EACAr/C,IAAA,WAAA,UACAC,OAAA,GACAvT,SAAA,CAAAuT,OAAAA,GAAA,OAAA,KACAo/C,EAAAr/C,IAAA,CACAs/C,SAAA,GACAr/C,OAAA,QAKAs/C,aAAA,SAAAF,GACAA,EAAAp/C,SACAo/C,EACAr/C,IAAA,WAAA,UACAtT,SAAA,CAAAuT,OAAA,GAAA,OAAA,KACAo/C,EAAA7vD,YAIAwvD,oBAAA,WACA,IAAAQ,GAAA,EAAAC,GAAA,EACAvqE,KAAA6mE,mBAAAvzD,MAAA,WAOA,GANA3U,EAAAqB,MAAAgH,KAAA,eAAAoS,GAEAmxD,GAAA,EAEAD,GAAA,GAEAA,IAAAC,EACA,OAAA,KAGAD,EACAtqE,KAAA4mE,mBAAA5/D,KAAA,eAAAwjE,QAAA,GACAD,EACAvqE,KAAA4mE,mBAAA5/D,KAAA,eAAAyjE,SAAA,GAEAzqE,KAAA4mE,mBAAA5/D,KAAA,eAAA0jE,mBAAA,IAIAR,oBAAA,WACA,MAAAP,EAAA3pE,KAAA4mE,mBAAA5/D,KAAA,eAAAoS,GACApZ,KAAA6mE,mBAAAvzD,MAAA,WACAq2D,EACAhrE,EAAAqB,MAAAgH,KAAA,eAAAwjE,QAAA,GAEA7rE,EAAAqB,MAAAgH,KAAA,eAAAyjE,SAAA,OAKAnB,uBAAA,SAAAqB,GACA,MAAAR,EAAAjrE,MAAA80B,GAAAw1C,uBAAA,CACA3zD,GAAA,kBAAA80D,EAAA90D,GACAE,MAAA7W,MAAAS,EAAA,MAAA,qBAAA,CAAAgrE,KAAAA,EAAA1lE,OACAA,KAAA,kBAAA0lE,EAAA90D,MACAuD,IAAApZ,KAAAgU,SAAA6zD,aAAA3iE,eAAAylE,EAAA90D,KACA7V,KAAAgU,SAAA6zD,aAAA8C,EAAA90D,IAEAyuD,WAAAtkE,KAAAgU,SAAAo0D,aASA,GANApoE,KAAA8mE,eACAqD,EAAA/oB,aAAAphD,KAAA8mE,gBAEAqD,EAAA77D,SAAAtO,KAAA2mE,kBAGA3mE,KAAAgU,SAAAo0D,WAAA,CACA+B,EAAAr4D,SAAA,UACA,MAAA84D,EAAAT,EAAAv0D,KAAA,gBACAwD,GAAA,SAAApZ,KAAA8pE,oBAAA7tD,KAAAjc,OACAA,KAAA6mE,mBAAA7mE,KAAA6mE,mBAAApqD,IAAAmuD,GAKA,OAFA5qE,KAAAypE,WAAAU,GAEAA,GAGAF,qBAAA,WACA,MAAAY,EAAA3rE,MAAAkd,MAAAuI,OAAA0kD,IACArpE,KAAA+mE,QAAA33D,SAAAi6D,EAAAxzD,KAAA7V,KAAAgU,SAAAg2D,YAAA56D,SAAAi6D,EAAAxzD,KAGA,IAAAg1D,EAAAvqE,OACA,OAGA,MAAAwqE,EAAA5rE,MAAA80B,GAAA+2C,aAAA,CACA7jE,QAAA,CACA,CAAA6O,MAAA7W,MAAAS,EAAA,MAAA,mBACAkrE,EAAA1oE,IAAAknE,IACA,CAAAtzD,MAAAszD,EAAApkE,KAAAE,MAAAkkE,EAAAxzD,SAGA/D,SAAA,aAEA9R,KAAA8mE,eAAA5nE,MAAA80B,GAAAmwC,YAAA2G,EAAA,IACAh5D,SAAA,cACAxD,SAAAtO,KAAA2mE,iBAEA,MAAAqE,EAAAF,EAAAl1D,KAAA,UAEAo1D,EAAA5xD,GAAA,SAAA,KACA,MAAAtD,EAAA5T,SAAA8oE,EAAA1mE,OACAqmE,EAAAzrE,MAAAkd,MAAAxG,KAAAyzD,GAAAA,EAAAxzD,KAAAC,GAEA60D,IAIA3qE,KAAAspE,uBAAAqB,GAEAK,EACA1mE,IAAA,IACAsR,KAAA,iBAAAE,OAAAwE,SAEA,OAAAta,KAAAgnE,aACAhnE,KAAAgnE,WAAA,IAGAhnE,KAAA+mE,QAAA7lE,KAAA4U,GACA9V,KAAAgnE,WAAA9lE,KAAA4U,GAGA,IAAAk1D,EAAAp1D,KAAA,UAAAtV,QACAN,KAAAqqE,aAAArqE,KAAA8mE,mBAIA9mE,KAAAypE,WAAAzpE,KAAA8mE,iBAGAiC,cAAA,SAAA/yC,GACA,IAAAi1C,EAEA,OAAAjrE,KAAA4R,OACAq5D,EAAA,MAAA/rE,MAAAS,EAAA,MAAA,6BAAA,QAEAsrE,EAAA,oBAAA/rE,MAAAS,EAAA,MAAA,iCAAA,OAEAK,KAAA4R,OAAAtR,SACA2qE,GAAA,sBACAjrE,KAAA4R,OAAAzP,IAAAuI,GAAA,OAAAxL,MAAAiE,WAAAuH,WAAAjK,KAAA,IACA,UAIA,MAAA2a,EAAA,IAAAhW,QAAA6X,IAAA+Y,EAAAi1C,EAAA,CACAztD,OAAA,WACApC,EAAAoP,cAKA0gD,SAAA,WACA,OAAAlrE,KAAA0nE,QACA1nE,KAAAib,SAAAwB,IAAAzc,KAAA0nE,QAAAzsD,UACAjb,KAAAib,UAGA2tD,YAAA,WACA,OAAA5oE,KAAA0nE,QACA1nE,KAAAsmE,YAAA7pD,IAAAzc,KAAA0nE,QAAApB,aACAtmE,KAAAsmE,aAGAwC,kBAAA,WACA9oE,KAAAumE,aAAA5nE,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,gBACAC,MAAAlb,MAAAS,EAAA,MAAA,yBACA2O,SAAA3P,EAAA,sBACAqB,KAAAwc,YAAAxc,KAAAumE,aAAA,QAAA,gBAGA4B,gBAAA,SAAAF,GACAA,EAAAn2D,SAAA,WAEA,MAAA0hB,EAAA70B,EAAA,SAAA,CAAAwb,MAAA,SAAAmb,YAAA2yC,GACAp2D,EAAAlT,EAAA,SAAA2P,SAAAklB,GAEAxzB,KAAAgU,SAAA+zD,eAAAzN,QAAAtkC,IACA,MAAAjkB,EAAApT,EAAA,SAAA2P,SAAAuD,GACAwN,EAAA1gB,EAAA,OAAA,CACA0E,KAAA2yB,EAAAjgB,QACAzH,SAAAyD,GACA/R,KAAAwc,YAAA6C,EAAA,QAAA,KACArf,KAAAkoE,cAAAlyC,EAAA1wB,UAKA6lE,gBAAA,WACA,OAAA,IAAAliE,QAAA,CAAAC,EAAAC,KACAnJ,KAAA2nE,aACAz+D,EAAAlJ,KAAA2nE,cAIAzoE,MAAA4H,kBAAA,uBAAA,CACA6M,YAAA3T,KAAAgU,SAAAL,YACAy3D,SAAAprE,KAAAgU,SAAAo3D,SACAt1D,OAAA9V,KAAAgU,SAAA8B,OACAwyD,QAAAtoE,KAAAgU,SAAAs0D,QACAF,WAAApoE,KAAAgU,SAAAo0D,YACA,CAAA39D,EAAA5C,KACA,YAAAA,GACA7H,KAAA2nE,aAAAl9D,EAAAlK,MACA2I,EAAAlJ,KAAA2nE,eAEAx+D,SAMAkiE,uBAAA,SAAA/lE,EAAAgmE,GACA,OAAA,IAAAriE,QAAA,CAAAC,EAAAC,KACA,MAAArJ,EAAA,IAEAwrE,GAAAtrE,KAAAgU,SAAAu3D,SAEAzrE,EAAAwrE,GAAA,mBAAApsE,MAAAsS,aAAA,KAGAxR,KAAAgU,SAAAw3D,YACA1rE,EAAAZ,MAAAssE,WAAAxrE,KAAAgU,SAAAw3D,WAIAxrE,KAAAgU,SAAAu3D,OACAriE,EAAAhK,MAAAyF,OAAAW,EAAAxF,IAIAE,KAAAmrE,kBAAA1hE,MAAA,SAAAlJ,GACAT,EAAAZ,MAAAusE,YAAAlrE,EACA2I,EAAAhK,MAAAyF,OAAAW,EAAAxF,OACA4J,MAAAP,MAIA++D,cAAA,SAAA5iE,GACAtF,KAAAqrE,uBAAA/lE,GAAAmE,MAAA,SAAAnE,GACAuG,OAAA7K,KAAAsE,OAIAomE,WAAA,WAsBA,OArBA1rE,KAAA0nE,UACA1nE,KAAA0nE,QAAA,IAAAxoE,MAAAysE,QAAA3rE,MACAA,KAAA0nE,QAAAtuD,GAAA,OAAA,KACApZ,KAAAgU,SAAAs0D,SACAtoE,KAAA0oE,qBAGA1oE,KAAA0nE,QAAAtuD,GAAA,QAAA,KACApZ,KAAAgU,SAAAs0D,SACAtoE,KAAA6oE,0BAIA7oE,KAAA4nE,uBACAviD,WAAA,KACArlB,KAAA4rE,uBACA5rE,KAAA4nE,uBAAA,GACA,QAIA5nE,KAAA0nE,SAGAkE,qBAAA,WACA,MAAAC,EAAAltE,EAAA,YAAA,CACAwb,MAAA,MACA5Y,KAAA,SACA8B,KAAAnE,MAAAS,EAAA,MAAA,aAEA+gC,EAAA/hC,EAAA,YAAA,CACAwb,MAAA,cACA5Y,KAAA,SACA8B,KAAAnE,MAAAS,EAAA,MAAA,eAGAyb,EAAA,IAAAhW,QAAA6X,IACAte,EAAA,qBACAA,EAAA,SAAA,CAAAwb,MAAA,yBACA9H,OACA1T,EAAA,OAAA,CACA0E,KAAAnE,MAAAS,EAAA,MAAA,kCAGA0S,OACA1T,EAAA,SAAA,CAAAwb,MAAA,qBACA9H,OAAAw5D,GACAx5D,OAAAquB,IAEA,CACAtjB,WAAA,EACAC,kBAAA,IAIAwuD,EAAAzyD,GAAA,QAAA,KACAgC,EAAA+C,OACA/C,EAAAoP,YAGAkW,EAAAtnB,GAAA,QAAA,KACAvC,QAAA3X,MAAAS,EAAA,MAAA,iDACAT,MAAA0X,WAAA1X,MAAA8I,GAAAmmD,aAAA,CACApnD,OAAA/G,KAAAgU,SAAA83D,kBACAh1D,SAAA9W,KAAAgU,SAAAi1D,qBAMA8C,YAAA,WACA,OAAA,IAAA9iE,QAAA,CAAAC,EAAAC,KACAnJ,KAAAynE,gBAAA,EACAznE,KAAAgsE,yBAAA,GACAviE,KAAA,KACAzJ,KAAA0rE,aAAA1qE,OACAhB,KAAAynE,gBAAA,EACAv+D,MAEAQ,MAAAP,MAIA6iE,wBAAA,SAAAC,GACA,OAAA,IAAAhjE,QAAA,CAAAC,EAAAC,KACA,GAAAnJ,KAAAgU,SAAAs0D,SAAAtoE,KAAAgU,SAAAo0D,WAaAl/D,QAbA,CACA,GACA+iE,GACAjsE,KAAAqoE,eAAA,KAAAnpE,MAAA8I,GAAAmmD,aAAAnnD,KAAA,0BAGA,YADAkC,IAIAlJ,KAAAwoE,cACA/+D,KAAAP,GACAQ,MAAAP,OAOAk/D,cAAA,SAAA6D,GACA,IAAAllE,EAAA9H,MAAA8I,GAAAmmD,aAAAnvC,YAaA,OAXAhf,KAAAmsE,oBAEAnlE,EAAAA,EAAAhI,QAAA,uBAAAgB,KAAA0nE,QAAA0E,QAAAptD,cAGAktD,IAAAlsE,KAAAgU,SAAAq4D,qBAEArlE,EAAAA,EAAAhI,QAAA,gBAAA,IACAgI,EAAAA,EAAAhI,QAAA,kBAAA,KAGAgI,GAGAy1B,UAAA,SAAAzO,GAEA,GACAhuB,KAAAgU,SAAAo0D,aACApoE,KAAAgU,SAAAs0D,UAAAtoE,KAAAmsE,mBACAnsE,KAAAmnE,WAAA,EAEA,OAEA/hD,aAAAplB,KAAAw+B,SACAx+B,KAAAw+B,QAAA,KAGA,MAAAx3B,EAAAhH,KAAAqoE,eAAA,IACAr6C,GAAAhnB,KAAAhH,KAAAinE,qBAAA/nE,MAAA8I,GAAAmmD,aAAAnnD,KAAA,6BACAhH,KAAAssE,UAAAtlE,IAIAmlE,gBAAA,WACA,OAAAnsE,KAAA0nE,SAAA1nE,KAAA0nE,QAAA6E,UAGA/D,YAAA,WACA,OAAA,IAAAv/D,QAAA,CAAAC,EAAAC,KACAnJ,KAAAssE,UAAAtsE,KAAAqoE,eAAA,IACA5+D,KAAAP,GACAQ,MAAAP,MAIAmjE,UAAA,SAAAtlE,GACA,OAAA,IAAAiC,QAAA,CAAAC,EAAAC,KAEA,GAAAnJ,KAAAunE,eAEA,YADAp+D,IAIA,GAAAnJ,KAAAonE,OAIA,YAHApnE,KAAAsnE,MAAApmE,KAAA,KACAlB,KAAAy8B,cAKAz8B,KAAAinE,oBAAAjgE,EACAhH,KAAAonE,QAAA,EACA,MAAAoF,EAAAxsE,KAAAkrE,WAAA90D,YAAA,UACAq2D,EAAAzsE,KAAA4oE,cACApxD,SAAA,QACAsT,IAAA,UAAA,IACA1U,YAAA,gDACAtE,SAAA,UACA9R,KAAA0mE,cACA1mE,KAAA0mE,aAAA50D,SAAA,UAEA9R,KAAA4R,OAAA,KAEA,MAAAtM,EAAApG,MAAAmH,aAAArG,KAAAgU,SAAA04D,iBAEA1sE,KAAAqnE,QAAAnoE,MAAA4H,kBAAAxB,EAAAtF,KAAA2sE,YAAA3lE,GAAA,CAAAyD,EAAA5C,KAOA,GANA2kE,EAAA16D,SAAA,UACA9R,KAAA0mE,cACA1mE,KAAA0mE,aAAAtwD,YAAA,UAEApW,KAAAonE,QAAA,EAEA,UAAAv/D,EACA,OAGA,GAAA,YAAAA,GAAA4C,EAAAmH,OASA,OARA5R,KAAA4R,QAAAnH,EAAAA,EAAAmH,OAAA,OAAA,GACA66D,EACAj1D,SAAA,QACAsT,IAAA,UAAA,IACA1U,YAAA,yBACAtE,SAAA,cACA5D,KAAA,QAAAhP,MAAAS,EAAA,MAAA,uCACAwJ,IAIAsB,EAAA2P,OACAzb,EAAA,cAAA0E,KAAAoH,EAAA2P,OAGA3P,EAAAmiE,WACApmE,SAAA4T,MAAA3P,EAAAmiE,UAGA5sE,KAAAomE,eAAA/iE,KAAAoH,EAAAoiE,WAEA7sE,KAAAgU,SAAA64D,UAAApiE,EAAAoiE,UAEA,IAAAC,EAAA9sE,KAAAmmE,aAAAn/D,KAAA,WAAAhH,KAAAmmE,aAAAn/D,KAAA,WAAAud,KAAA,KAGAvkB,KAAAgnE,aAEA8F,IACA9sE,KAAAmmE,aAAA/vD,YAAA,YAAAtE,SAAA,WACA,IAAA1M,QAAAyU,QAAA7Z,KAAAmmE,cACA2G,EAAA9sE,KAAAmmE,aAAAn/D,KAAA,WAAAud,KACAuoD,EAAAl6D,WAAAwD,YAAA,WAEApW,KAAAgnE,WAAA1M,QAAAxkD,IACA,MAAA2O,EAAAqoD,EAAApoD,SAAAC,OAAA,iBAAA7O,MACA2O,EAAA7O,KAAA,WAAAQ,YAAA,YAAAtE,SAAA,WACA2S,EAAAL,SAAAhO,YAAA,UACAqD,QAAA,eAAArD,YAAA,YAEA02D,EAAAl6D,WAAAgD,KAAA,gBAAAQ,YAAA,UACApW,KAAAgnE,WAAA,MAIA,MAAA+F,GAAA/sE,KAAAgU,SAAAs0D,QACA,GAAAyE,EAAA,CAEA,IAAAC,EACA,MAAAC,EAAAzmE,SAAAC,SAAAC,KAAAlB,OAAA,KAEAwnE,GADA,IAAAC,EACAzmE,SAAAC,SAAAC,KAAA/E,OAAA,EAAAsrE,GAEAzmE,SAAAC,SAAAC,KAEAsmE,IAAAA,EAAArnE,MAAA,MAAA,IAAA,KAAA,WAAA8E,EAAA69D,SACA,IAAA2E,IACAD,GAAAxmE,SAAAC,SAAAC,KAAA/E,OAAAsrE,IAEAvjD,QAAAC,aAAA,GAAA,GAAAqjD,GAGAruE,EAAA,WAAA2b,SACA3b,EAAA,WAAA,CACAkX,GAAA,SACAtU,KAAA,SACA0D,KAAA,SACAE,MAAAnF,KAAAgU,SAAA04D,kBACAp+D,SAAApP,MAAA8I,GAAAmmD,cAGAxvD,EAAA,6BAAA2b,SACA3b,EAAA,uBAAA2b,SAEA,MAAA4yD,EAAAvuE,EAAA,mBAGAqB,KAAAgU,SAAAy0D,iBACA9pE,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,2BACA9W,KAAAnE,MAAAS,EAAA,MAAA,iBACAya,MAAAlb,MAAA6D,aAAA,KAAA,GAAA,GACAiE,KAAA,CACAD,OAAA/G,KAAAgU,SAAAg1D,mBACAlyD,SAAA9W,KAAAgU,SAAAi1D,mBAEA36D,SAAA4+D,GAAA/5D,aAIA,MAAAg6D,EAAAxuE,EAAA,SAAA,CACAkX,GAAA,qBACAsE,MAAA,oBACA7L,SAAA4+D,GAQA,GANAvuE,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,aACA9W,KAAAnE,MAAAS,EAAA,MAAA,gBACA2O,SAAA6+D,GAEAntE,KAAAgU,SAAA04D,iBAAA1sE,KAAAgU,SAAA83D,kBAAA,CACAntE,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,uBACA7L,SAAA6+D,GAHA,MAIA35C,EAAA70B,EAAA,SAAA,CACAwb,MAAA,OACAjM,KAAA,CACAk/D,aAAA,WAEA9+D,SAAA6+D,GAEA,GAAAntE,KAAAgU,SAAA04D,gBAAA,CACA,MAAA76D,EAAAlT,EAAA,SACA2P,SAAAklB,GACAnhB,OACA1T,EAAA,SACA0T,OACA1T,EAAA,OAAA,CACAwb,MAAA,aACAnT,KAAA,CACAD,OAAA/G,KAAAgU,SAAA04D,iBAEArpE,KAAAnE,MAAAS,EAAA,MAAA,+BAEAq8B,QACAr9B,EAAA,UAAA,CACAwb,MAAA,WACA9W,KAAAnE,MAAA6D,aAAA,UAKA/C,KAAAgU,SAAAy0D,iBAAAzoE,KAAAgU,SAAAq5D,6BACAx7D,EAAAQ,OACA1T,EAAA,SACA0T,OACA1T,EAAA,OAAA,CACAwb,MAAA,aACAnT,KAAA,CACAD,OAAA/G,KAAAgU,SAAAg1D,mBACAlyD,SAAA9W,KAAAgU,SAAAq5D,6BAEAhqE,KAAAnE,MAAAS,EAAA,MAAA,+BAKAK,KAAAgU,SAAA83D,mBACAntE,EAAA,SAAA2P,SAAAklB,GAIAxzB,KAAAgU,SAAA83D,mBACAntE,EAAA,SACA2P,SAAAklB,GACAnhB,OACA1T,EAAA,SACA0T,OACA1T,EAAA,OAAA,CACAwb,MAAA,mBACAnT,KAAA,CACAD,OAAA/G,KAAAgU,SAAA83D,kBACAh1D,SAAA9W,KAAAgU,SAAAi1D,gBACApyD,QAAA3X,MAAAS,EAAA,MAAA,gDAEA0D,KAAAnE,MAAAS,EAAA,MAAA,oBAgBA,GATAT,MAAAyT,eAAAw6D,GAGAntE,KAAAgU,SAAAs0D,QAAA79D,EAAA69D,QACAtoE,KAAAgU,SAAAu3D,QAAA,EACAvrE,KAAA2nE,aAAA,KACA3nE,KAAAuoE,eAGAuE,EAAA,CACAA,EAAApoD,SAAAC,OAAA,sBAAAvO,YAAA,OACA,IAAAk3D,EAAAR,EAAAl6D,WAAAgD,KAAA,0BACA,IAAA03D,EAAAhtE,OAAA,CACA,MAAAitE,EAAA5uE,EAAA,QAAA,CACA0E,KAAAnE,MAAAS,EAAA,MAAA,YACA21B,YAAAw3C,EAAAl6D,WAAAgD,KAAA,4BACA03D,EAAA3uE,EAAA,QAAA,CACAwb,MAAA,iCACAmb,YAAAi4C,GAEA,MAAAC,EAAA7uE,EAAA,SAAA+pB,UAAA4kD,GACAG,EAAA9uE,EAAA,OAAA,CACAwb,MAAA,MACApb,KAAA,4EACAuP,SAAAk/D,GACAV,EAAArkD,WAAAglD,GACAX,EAAA3gD,aAAAshD,GAGA,MAAAC,EAAAZ,EAAApoD,SAAAC,OAAA,sBACA,IAAA,IAAAjlB,EAAA,EAAAA,EAAAguE,EAAAptE,OAAAZ,IAAA,CACA,MAAAiuE,EAAAD,EAAAv7D,GAAAzS,GACAiuE,EAAAz/D,KAAA,OAAAhP,MAAAyF,OAAAgpE,EAAAz/D,KAAA,QAAA,CAAAo6D,QAAA79D,EAAA69D,aAKAtoE,KAAAynE,gBAAAznE,KAAA0nE,SAAA1nE,KAAA0nE,QAAA6E,YACAvsE,KAAA4nE,uBAAA,GAIAkF,IACAA,EAAApoD,SAAAC,OAAA,QAAA/O,KAAA,eAAAvS,KAAAoH,EAAAoiE,WACAC,EAAApoD,SAAAC,OAAA,QAAA/O,KAAA,eAAAvS,KAAA,MAAAoH,EAAAmjE,QACA1uE,MAAAS,EAAA,MAAA,iCAAA,CACAkuE,UAAApjE,EAAAojE,UACAD,QAAAnjE,EAAAmjE,UAEA1uE,MAAAS,EAAA,MAAA,sBAAA,CACAkuE,UAAApjE,EAAAojE,eAOApjE,EAAAs9D,gBACA3gE,KAAAC,UAAAoD,EAAAs9D,kBAAA3gE,KAAAC,UAAArH,KAAAgU,SAAA+zD,iBAEA/nE,KAAA8tE,qBAAArjE,EAAAs9D,gBAGA/nE,KAAA+tE,YAAA/mE,GAEA+lE,GACA/sE,KAAAiX,QAAA,eAGAjX,KAAAymE,gBACAzmE,KAAAguE,kBAGA,IAAA,MAAAC,KAAAxjE,EAAA+8D,mBACAyG,GAAAjuE,KAAAgU,SAAAo3D,UAAA3gE,EAAA+8D,mBAAAtiE,eAAA+oE,KACAjuE,KAAAwnE,mBAAAyG,GAAAxjE,EAAA+8D,mBAAAyG,IAIA/kE,SAKAyjE,YAAA,SAAA3lE,GAEAA,EAAAhH,KAAAkuE,yBAAAlnE,GAGAhH,KAAAgU,SAAAs0D,UACAthE,GAAA,YAAAhH,KAAAgU,SAAAs0D,SAGA,OAAAtoE,KAAAgU,SAAA64D,YACA7lE,GAAA,cAAAhH,KAAAgU,SAAA64D,WAIA,MAAAhyD,EAAA7a,KAAAkuE,yBAAAhvE,MAAA8I,GAAAmmD,aAAAnnD,KAAA,2BACA,OAAA9H,MAAAmN,cAAAwO,EAAA7T,EAAAhH,KAAAmuE,kBAGAD,yBAAA,SAAAlnE,GACA,MAAAonE,EAAA1lE,OAAAC,KAAA3I,KAAAwnE,oBAAA/mE,KAAA,KACA,GAAA,KAAA2tE,EACA,OAAApnE,EAEA,MAAAwwC,EAAA/zC,mBAAA,KACAg0C,EAAAh0C,mBAAA,KAEA,KACAuD,KACAA,EAAAA,EAEAhI,QAAA,IAAAkF,OAAA,WAAAszC,SAAAC,IAAAD,MAAA42B,MAAA32B,KAAA,KAAA,CAAA5pC,EAAAwgE,EAAAx4D,EAAAy4D,IACAD,EAAAruE,KAAAwnE,mBAAA3xD,GAAAy4D,GAGAtvE,QAAA,IAAAkF,OAAA,WAAAszC,YAAA42B,QAAA,KAAA,CAAAvgE,EAAAwgE,EAAAx4D,IACAw4D,EAAAruE,KAAAwnE,mBAAA3xD,OAMA,OAAA7O,GAGAmnE,cAAA,WACA,MAAA3hE,EAAAtN,MAAAsN,WAAAzL,MAAA,GACA,IAAA,IAAArB,EAAA,EAAAA,EAAA8M,EAAAlM,OAAAZ,IACA,IAAA,MAAAuuE,KAAAjuE,KAAAwnE,mBACAxnE,KAAAwnE,mBAAAtiE,eAAA+oE,KACAzhE,EAAA9M,GAAA8M,EAAA9M,GAAAV,QAAA,KAAAivE,EAAA,IAAA,KAAAjuE,KAAAwnE,mBAAAyG,GAAA,MAIA,OAAAzhE,GAGAshE,qBAAA,SAAA/F,GACAA,EAAAzN,QAAAiU,IACA,MAAAh1D,EAAAvZ,KAAAgU,SAAA+zD,eAAAnyD,KAAAjW,GAAAA,EAAAoW,QAAAw4D,EAAAx4D,OACAwD,IACAA,EAAAjU,IAAAipE,EAAAjpE,QAKAyoE,YAAA,SAAA/mE,GACA9H,MAAA8I,GAAAmmD,aAAAnnD,KAAA,yBAAAA,GACA9H,MAAAwO,mBAAA,GACA,MAAA++D,EAAAzsE,KAAA4oE,cACApxD,SAAA,QACAsT,IAAA,UAAA,IACA1U,YAAA,UACAtE,SAAA,kBACA5D,KAAA,QAAAhP,MAAAS,EAAA,MAAA,8BAEAT,MAAAypE,gBAEA8D,EACAj1D,SAAA,QACAA,SAAA,CACA4iB,QAAA,GACA,CACA+1B,MAAA,IACA74C,SAAA,KACAm1D,EAAA36D,SAAA,aAKA9R,KAAAiX,QAAA,UAEAjX,KAAAwuE,eAGAA,YAAA,WACAxuE,KAAAsnE,MAAAhnE,QACAN,KAAAsnE,MAAAtkE,OAAAhD,IAIAyuE,YAAA,WACAzuE,KAAAwmE,QAIAxmE,KAAAwmE,QAAA7rC,QAHA36B,KAAA0uE,gBACA1uE,KAAA2uE,iBAKAvpE,QAAAqgB,iBAAA,IACAzlB,KAAAymE,eAAAxvD,QAAA,UAIAy3D,cAAA,WACA,MAAAE,EAAAjwE,EAAA,UAGAkwE,EAAAlwE,EAAA,mEAAAO,MAAAS,EAAA,MAAA,cAAA,wBAAA2O,SAAAsgE,GACAE,EAAAnwE,EAAA,wBAAA2P,SAAAugE,GACA7uE,KAAAymE,eAAA9nE,EAAA,+DAAA2P,SAAAwgE,GAAAxqE,IAAAtE,KAAAgU,SAAA64D,WAGA,MAAAjwD,EAAAje,EAAA,8CAAA2P,SAAAsgE,GAEAjwE,EAAA,iCAAA2P,SAAAsO,GACA5c,KAAA0mE,aAAA/nE,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,sBACA9W,KAAAnE,MAAAS,EAAA,MAAA,UACA2O,SAAAsO,GAEA5c,KAAAwmE,QAAA,IAAAphE,QAAA6X,IAAAjd,KAAAumE,aAAAqI,EAAA,CACAlxD,SAAA1d,KAAA+uE,SAAA9yD,KAAAjc,QAGAA,KAAAwc,YAAAxc,KAAAymE,eAAA,QAAA,mBAEAzmE,KAAAwmE,QAAAptD,GAAA,OAAApZ,KAAA2uE,cAAA1yD,KAAAjc,OACAA,KAAAwmE,QAAAptD,GAAA,OAAApZ,KAAAgvE,cAAA/yD,KAAAjc,OACAA,KAAAwmE,QAAAptD,GAAA,SAAApZ,KAAAivE,gBAAAhzD,KAAAjc,QAGA2uE,cAAA,WACA3uE,KAAAumE,aAAAz0D,SAAA,WAGAk9D,cAAA,WACAhvE,KAAAumE,aAAAnwD,YAAA,WAGA64D,gBAAA,WACAjvE,KAAAymE,eAAAniE,IAAAtE,KAAAgU,SAAA64D,YAGAmB,gBAAA,WACA,OACAhuE,KAAAymE,eAAAniE,OACAtE,KAAAymE,eAAAniE,QAAAtE,KAAAgU,SAAA64D,WAEA7sE,KAAA0mE,aAAAtwD,YAAA,aACA,IAGApW,KAAA0mE,aAAA50D,SAAA,aACA,IAGAo9D,aAAA,WACA9pE,QAAAwa,MAAA5f,KAAAwmE,QAAAvoD,OAGA8wD,SAAA,WACA/uE,KAAAguE,mBAKAhuE,KAAAgU,SAAA64D,UAAA7sE,KAAAymE,eAAAniE,MAEAtE,KAAAwmE,QAAAroD,OACAne,KAAAy8B,WAAA,IAPAz8B,KAAAkvE,gBAUAC,iBAAA,SAAA91D,GAIA,GAHAA,EAAAmM,iBAGAxlB,KAAAunE,eACA,OAKA,GACAvnE,KAAAgU,SAAAs0D,eACA,IAAAjvD,EAAA+1D,UAAA/1D,EAAA+1D,YACA/1D,EAAAi4C,cAAAj4C,EAAAK,eAAAL,EAAAK,cAAA1S,KAAA,YAAAhH,KAAAgU,SAAA04D,iBAGA,YADA1sE,KAAAy8B,WAAA,GAKAv9B,MAAA8I,GAAAgnD,oBAAA9vD,MAAA8I,GAAAgnD,oBAAAh1B,IAAA96B,MAAA8I,GAAAmmD,cAGAnuD,KAAAonE,QACApnE,KAAAqnE,QAAAgI,QAIA,MAAAroE,EAAAhH,KAAA2sE,YAAA3sE,KAAAqoE,eAAA,IACAp6D,EAAA/O,MAAA8O,WAAAhH,GAEAiH,EAAAK,SAAAlJ,QAAAsN,MACAzE,EAAA+iD,SACAhxD,KAAAunE,gBAAA,IAEA,CACAjsD,SAAA,CACA3H,YAAA,KACAy3D,SAAA,KACAt1D,OAAA,KACAu2D,oBAAA,EACA1C,SAAA,EACAC,gBAAA,EACA2B,QAAA,EACA1D,aAAA,KACAmC,YAAA,GACA1qD,UAAA,KACAgpD,QAAA,KACAF,WAAA,KACAyE,UAAA,KACA/E,sBAAA,EACAW,iBAAA,EACAiE,gBAAA,KACAZ,kBAAA,KACA9C,mBAAA,KACAC,gBAAA,KACAoE,4BAAA,KACArF,eAAA,EACAD,eAAA,GACAyD,UAAA,QC9qCAtsE,MAAAowE,iBAAApwE,MAAAo/B,mBAAAr/B,OAAA,CACAgI,SAAAtI,EAAAwhB,KAEA9E,KAAA,SAAA8K,EAAA6P,EAAA/uB,GACAjH,KAAAiH,SAAAA,EACAjH,KAAA0vB,KAAAvJ,EAAA6P,IAGAoJ,oBAAA,SAAAF,GACA,OAAAl/B,KAAAiH,SAAAi4B,MCTAhgC,MAAAqwE,cAAAnqE,QAAAuV,KAAA1b,OAAA,CACAmhB,aAAA,EAEAvK,GAAA,KACA25D,SAAA,KACApV,QAAA,KACAz6B,OAAA,KACA8vC,WAAA,EAEA5vC,OAAA,KACA9C,OAAA,KACA2yC,WAAA,KAEAC,SAAA,EACAC,YAAA,EACAC,YAAA,EAEAC,gBAAA,KAEAz0D,KAAA,SAAAxF,EAAA25D,EAAApV,EAAApmD,GA+BA,GA9BAhU,KAAA6V,GAAAA,EACA7V,KAAAwvE,SAAAA,EACAxvE,KAAAo6D,QAAAA,EACAp6D,KAAA8Y,YAAA9E,EAAA9U,MAAAqwE,cAAAj0D,UACAtb,KAAA8vE,gBAAA,GAEA9vE,KAAA6/B,OAAAlhC,EAAA,IAAAkX,GACA7V,KAAA+8B,OAAA/8B,KAAA6/B,OAAA3lB,SAAA,SACAla,KAAA2vE,SAAA3vE,KAAA+8B,OAAAnnB,KAAA,MAAAtV,OAGAN,KAAA6/B,OAAA74B,KAAA,oBACA5B,QAAA2qE,IAAA,wDACA/vE,KAAA6/B,OAAA74B,KAAA,kBAAAwjB,WAGAxqB,KAAA6/B,OAAA74B,KAAA,iBAAAhH,MAEAA,KAAA2/B,OAAA,IAAAzgC,MAAAihC,gBAAAngC,KAAA6/B,OAAA,CACAolC,YAAA,0BACA+K,gCAAA,IAGAhwE,KAAAiwE,YACAjwE,KAAAkwE,aAGA7qD,WAAArlB,KAAAmwE,oBAAAl0D,KAAAjc,MAAA,KAGAA,KAAAgU,SAAAo8D,SAAApwE,KAAA2vE,SAAA3vE,KAAAgU,SAAAo8D,QACA,IAAA,IAAA1wE,EAAAM,KAAA2vE,SAAAjwE,EAAAM,KAAAgU,SAAAo8D,QAAA1wE,IACAM,KAAAsgC,UAKA2vC,UAAA,WACA,OAAAjwE,KAAA6/B,OAAAzb,SAAA2G,SAAA,GAGAmlD,WAAA,WACA,GAAAlwE,KAAAogB,YACA,OAAA,EAGApgB,KAAAogB,aAAA,EACApgB,KAAAmoB,eAAA/iB,QAAA2xB,KAAA,UAIA,IAFA,IAAA6tC,EAAA5kE,KAAA+8B,OAAA7iB,WAEAxa,EAAA,EAAAA,EAAAklE,EAAAtkE,OAAAZ,IACAM,KAAAqwE,aAAAzL,EAAAllE,IAMA,OAHAM,KAAA0vE,WAAA1vE,KAAA6/B,OAAAlmB,KAAA,QACA3Z,KAAAswE,qBACAtwE,KAAAwc,YAAAxc,KAAA0vE,WAAA,WAAA,WACA,GAEAS,oBAAA,WACAnwE,KAAAmoB,eAAA/iB,QAAA2xB,KAAA,UAEA/2B,KAAAiwE,YACAjwE,KAAAkwE,aAEAlwE,KAAAwc,YAAApX,QAAA2xB,KAAA,SAAA,wBAGAu5C,mBAAA,WACAtwE,KAAAuwE,aAIAvwE,KAAA0vE,WAAA5kD,IAAA,UAAA,KACA9qB,KAAA0vE,WAAA5kD,IAAA,iBAAA,UAJA9qB,KAAA0vE,WAAA5kD,IAAA,UAAA,OACA9qB,KAAA0vE,WAAA5kD,IAAA,iBAAA,UAMA0lD,aAAA,WACA,OAAAxwE,KAAA2vE,SAAA3vE,KAAAgU,SAAAo8D,SAEAK,UAAA,SAAAlwC,GACAvgC,KAAAwwE,iBAIAxwE,KAAA2/B,OAAAzX,YAAAqY,EAAAmwC,KACAnwC,EAAAmwC,IAAAp2D,SAEAta,KAAA2vE,WAEA3vE,KAAAswE,qBACA,IAAAtwE,KAAA2vE,UACA3vE,KAAA6/B,OAAA/tB,SAAA,UAIA9R,KAAAgU,SAAA28D,YAAApwC,EAAAmwC,KAEAnwC,EAAA/V,YAEA+lD,UAAA,WACA,OAAAvwE,KAAAgU,SAAA48D,cAIA5wE,KAAAgU,SAAA68D,SACA7wE,KAAA2vE,SAAA3vE,KAAAgU,SAAA68D,UAKAvwC,OAAA,SAAA9lB,EAAAwhB,GACA,GAAAh8B,KAAAuwE,YAAA,CAIA,IAAAO,EAAA9wE,KAAAgU,SAAA+8D,aAAA/wE,KAAAyvE,UAAA,GACAiB,EAAA1wE,KAAAgxE,UAAAF,EAAA9wE,KAAAo6D,QAAAp6D,KAAAwvE,SAAA7wE,EAAAM,OAAA,GAAAe,KAAAgU,SAAAi9D,gBAEAj1C,EACA00C,EAAAhoD,UAAA1oB,KAAA+8B,QAEA2zC,EAAApiE,SAAAtO,KAAA+8B,QAGA,IAAAwD,EAAAvgC,KAAAqwE,aAAAK,GAeA,OAdA1wE,KAAA2/B,OAAAjY,SAAAgpD,IAGA,IAAAl2D,GACAk2D,EAAA96D,KAAA,iDAAA2E,QAAAtD,QAAA,SAGAjX,KAAA2vE,WACA3vE,KAAAswE,qBACAtwE,KAAA6/B,OAAAzpB,YAAA,UAGApW,KAAAgU,SAAAk9D,SAAAR,GAEAnwC,IAGAywC,UAAA,SAAAF,EAAA1W,EAAAoV,EAAAnhE,GACA,OAAAnP,MAAAqwE,cAAAyB,UAAAF,EAAA1W,EAAAoV,EAAAnhE,IAGAgiE,aAAA,SAAAK,GACA,OAAA,IAAAxxE,MAAAqwE,cAAA4B,IAAAnxE,KAAA0wE,IAGAU,eAAA,SAAAV,EAAAW,EAAAC,GACA,IACAC,EADAC,EAAAd,EAAAx/C,KAAA,MAUA,IANAqgD,EADAC,EAAAlxE,OACAkxE,EAAAxqE,KAAA,sBAEAhH,KAAAsgC,QAAA,GAAA,KAQAixC,EAAAE,KAAAJ,GAIA,GAAA1yE,EAAA4yE,EAAAE,KAAAJ,IAAA17D,SAAA,YACA67D,GACAxxE,KAAAoxE,eAAAI,EAAAH,EAAAC,OAFA,CAOA,IAAAjtE,EAAA1F,EAAA,sBAAA4yE,EAAAE,KAAAJ,IACAhtE,EAAA/D,SACA3B,EAAA2yE,GAAAr6D,QAAA,QACA5S,EAAA4S,QAAA,YAIAy6D,eAAA,SAAAhB,EAAAW,EAAAC,GACA,IACAK,EADAC,EAAAlB,EAAA/2D,KAAA,MAUA,IANAg4D,EADAC,EAAAtxE,OACAsxE,EAAA5qE,KAAA,sBAEAhH,KAAAsgC,QAAA,KAQAqxC,EAAAF,KAAAJ,GAIA,GAAA1yE,EAAAgzE,EAAAF,KAAAJ,IAAA17D,SAAA,YACAi8D,GACA5xE,KAAA0xE,eAAAE,EAAAP,EAAAC,OAFA,CAOA,IAAAjtE,EAAA1F,EAAA,sBAAAgzE,EAAAF,KAAAJ,IACAhtE,EAAA/D,SACA3B,EAAA2yE,GAAAr6D,QAAA,QACA5S,EAAA4S,QAAA,YAIA46D,WAAA,SAAA7qE,EAAAu5B,EAAA8wC,GACA,IAAAS,EAAA9qE,EAAA7F,MAAA,YACA,IAAA,IAAAzB,EAAA,EAAAA,EAAAoyE,EAAAxxE,OAAAZ,IAAA,CACA,IAAA2O,EAAAyjE,EAAApyE,GAAAyB,MAAA,MACA,IAAA,IAAAo0D,EAAA,EAAAA,EAAAlnD,EAAA/N,OAAAi1D,IAAA,CACA,IAAApwD,EAAAkJ,EAAAknD,GACAh1B,EAAAkxC,KAAAt/D,GAAAk/D,EAAA9b,GAAA3/C,KAAA,gCACAtR,IAAAa,GACA8R,QAAA,SAIA,IAAA26D,EAAArxC,EAAAmwC,IAAA/2D,KAAA,MAEA4mB,EADAqxC,EAAAtxE,OACAsxE,EAAA5qE,KAAA,sBAEAhH,KAAAsgC,QAAA,MAIA,CACAyxC,gBAAA,CAAA,QAAA,OAAA,QAAA,YAAA,SAAA,aAAA,WAAA,OAAA,OACAz2D,SAAA,CACAy1D,YAAA,GACAE,cAAA,GACAL,YAAA,EACAR,QAAA,KACAS,QAAA,KACAK,SAAAvyE,EAAAwhB,KACAwwD,YAAAhyE,EAAAwhB,MAGA6wD,UAAA,SAAAF,EAAA1W,EAAAoV,EAAAnhE,GACA,IAAAqiE,EAAA/xE,EAAA,QAAA,CACAqzE,UAAAlB,IAGA,IAAA,IAAAmB,KAAA7X,EACA,GAAAA,EAAAl1D,eAAA+sE,GAAA,CAIA,IAEAC,EAFAC,EAAA/X,EAAA6X,GACA9sE,OAAA,IAAAkJ,EAAA4jE,GAAA5jE,EAAA4jE,GAAA,GAGA,GAAA,YAAAE,EAAA5wE,KACA2wE,EAAAvzE,EAAA,QAAA,CACAyzE,MAAA,MACAj4D,MAAAg4D,EAAA,MACApzE,KAAAoG,QAEA,CACA,IAAAF,EAAAuqE,EAAA,IAAAsB,EAAA,KAAAmB,EAAA,IAeA,OAbAC,EAAAvzE,EAAA,QAAA,CACAwb,MAAA,GAAAg4D,EAAAh4D,SAAAg4D,EAAA5wE,YACAulC,MAAAqrC,EAAArrC,QAGA5nC,MAAA+N,QAAAklE,EAAA5wE,KAAArC,MAAAqwE,cAAAwC,kBACAG,EAAApgE,SAAA,WAGAqgE,EAAAE,MACAH,EAAApgE,SAAA,QAGAqgE,EAAA5wE,MACA,IAAA,WACA5C,EAAA,mCACA0T,OAAAnT,MAAA80B,GAAAqwC,eAAA,CACAp/D,KAAAA,EACAE,MAAAgtE,EAAAhtE,OAAA,IACAo9C,UAAAp9C,KAGAmJ,SAAA4jE,GACA,MAEA,IAAA,QACAhzE,MAAA80B,GAAA+sC,iBAAA,CACA97D,KAAAA,EACAE,MAAAA,EACAmtE,OAAA,IACAhkE,SAAA4jE,GACA,MAEA,IAAA,OACAhzE,MAAA80B,GAAAu+C,gBAAA,CACAttE,KAAAA,EACAE,MAAAA,IACAmJ,SAAA4jE,GACA,MAEA,IAAA,cACAhzE,MAAA80B,GAAAw+C,kBAAA,CACAvtE,KAAAA,EACAE,MAAAgtE,EAAAhtE,OAAA,IACAiU,KAAAjU,EACAmtE,OAAA,IACAhkE,SAAA4jE,GACA,MAEA,IAAA,SACAhzE,MAAA80B,GAAA+2C,aAAA,CACA9lE,KAAAA,EACAiC,QAAAirE,EAAAjrE,QACA/B,MAAAA,GAAA,WACA,IAAA,IAAA7F,KAAA6yE,EAAAjrE,QACA,GAAAirE,EAAAjrE,QAAAhC,eAAA5F,IAAA6yE,EAAAjrE,QAAA5H,GAAAmzE,QACA,YAAA,IAAAN,EAAAjrE,QAAA5H,GAAA6F,MAAAgtE,EAAAjrE,QAAA5H,GAAA6F,MAAA7F,EAGA,OAAA,KANA,GAQA6a,MAAA,UACA7L,SAAA4jE,GACA,MAEA,IAAA,OACAhzE,MAAA80B,GAAA0+C,gBAAA,CACAztE,KAAAA,EACAE,MAAAA,IACAmJ,SAAA4jE,GACA,MAEA,IAAA,QACA,IAAA,MACAhzE,MAAA80B,GAAA2+C,gBAAA,CACA1tE,KAAAA,EACAE,MAAAA,EACA5D,KAAA4wE,EAAA5wE,KACAgzB,YAAA49C,EAAA59C,aAAA,OACAjmB,SAAA4jE,GACA,MAEA,QACAvzE,EAAA,cAAA,CACAsG,KAAAA,EACAo1D,KAAA8X,EAAA9X,MAAA,EACA/1D,IAAAa,EACAovB,YAAA49C,EAAA59C,cACAjmB,SAAA4jE,IAIAA,EAAA5jE,SAAAoiE,GAqBA,OAlBA/xE,EAAA,QAAA,CACAwb,MAAA,gBACA9H,OACA1T,EAAA,OAAA,CACAwb,MAAA,YACAC,MAAAlb,MAAAS,EAAA,MAAA,cAEA2O,SAAAoiE,GAEA/xE,EAAA,QAAA,CACAwb,MAAA,gBACA9H,OACA1T,EAAA,OAAA,CACAwb,MAAA,cACAC,MAAAlb,MAAAS,EAAA,MAAA,aAEA2O,SAAAoiE,GAEAA,KAOAxxE,MAAAqwE,cAAA4B,IAAA/rE,QAAAuV,KAAA1b,OAAA,CACA0lE,MAAA,KACA9uD,GAAA,KACA+8D,UAAA,KAEAlC,IAAA,KACAe,KAAA,KACAoB,IAAA,KACAC,WAAA,KACApyC,WAAA,KAEArlB,KAAA,SAAAspD,EAAAoO,GACA/yE,KAAA2kE,MAAAA,EACA3kE,KAAA0wE,IAAA/xE,EAAAo0E,GACA/yE,KAAAyxE,KAAAzxE,KAAA0wE,IAAAx2D,WACAla,KAAA6yE,IAAA,GACA7yE,KAAA6V,GAAA7V,KAAA0wE,IAAAxiE,KAAA,WAEAlO,KAAA0wE,IAAA1pE,KAAA,qBAAAhH,MAGA,IAAA6V,EAAA3T,SAAAlC,KAAA6V,GAAAlU,OAAA3B,KAAA2kE,MAAA3wD,SAAA+8D,YAAAzwE,SAEAuV,EAAA7V,KAAA2kE,MAAA8K,YACAzvE,KAAA2kE,MAAA8K,UAAA55D,GAGA7V,KAAA8yE,WAAAn0E,IACAqB,KAAA4yE,UAAA,GACA,IAGAX,EAAAE,EAAAa,EAAAC,EAAAC,EAHAC,EAAA,GAEAzzE,EAAA,EAGA,IAAAuyE,KAAAjyE,KAAA2kE,MAAAvK,QACAp6D,KAAA2kE,MAAAvK,QAAAl1D,eAAA+sE,KAIAE,EAAAnyE,KAAA2kE,MAAAvK,QAAA6X,GACAe,EAAAhzE,KAAA6yE,IAAAZ,GAAAjyE,KAAAyxE,KAAA/xE,GAEAR,MAAA+N,QAAAklE,EAAA5wE,KAAArC,MAAAqwE,cAAAwC,kBACAkB,EAAAt0E,EAAA,WAAAq0E,GACAhzE,KAAA8yE,WAAA9yE,KAAA8yE,WAAAr2D,IAAAw2D,GAEAjzE,KAAAwc,YAAAy2D,EAAA,QAAA,mBACAjzE,KAAAwc,YAAAy2D,EAAA,YAAA,2BAEAjzE,KAAA4yE,UAAA1xE,KAAA,IAAAkE,QAAA+T,SAAA85D,EAAA,CACAG,eAAApzE,KAAAqzE,uBAAAp3D,KAAAjc,SAGAA,KAAAwc,YAAAy2D,EAAA,WAAA,CAAA5B,QAAA3xE,EAAA6B,KAAA4wE,EAAA5wE,MAAA,kBACAvB,KAAAwc,YAAAy2D,EAAA,QAAA,CAAA1xE,KAAA4wE,EAAA5wE,MAAA,iBACA0xE,EAAAh8D,QAAA,SAEA,cAAAk7D,EAAA5wE,MACAvB,KAAAwc,YAAAy2D,EAAA,QAAA,CAAA5B,QAAA3xE,EAAA6B,KAAA4wE,EAAA5wE,MAAA,eAGA4xE,EAAAlB,GAAAgB,GACA,aAAAd,EAAA5wE,OACA2xE,EAAAv0E,EAAA,yBAAAq0E,GAEAb,EAAAmB,iBACA,IAAAtzE,KAAA2kE,MAAAmL,gBAAAmC,KACAjyE,KAAA2kE,MAAAmL,gBAAAmC,GAAA,IAEAjyE,KAAA2kE,MAAAmL,gBAAAmC,GAAA/wE,KAAAgyE,EAAA,IACAlzE,KAAAwc,YAAA02D,EAAA,SAAA,CAAAjB,MAAAA,GAAA,0BAGAE,EAAAoB,QACAvzE,KAAAwc,YAAA02D,EAAA,SAAA,CAAAjB,MAAAA,IAAA,SAAA54D,GACArZ,KAAAwzE,oBAAAn6D,EAAArS,KAAAirE,WAKAtzE,EAAAq0E,GAAAr9D,SAAA,aACA3V,KAAAwc,YAAAw2D,EAAA,QAAA,CAAAA,GAAAA,IAAA,SAAA35D,GACAA,EAAA2c,SAAA3c,EAAArS,KAAAgsE,IACAr0E,EAAA0a,EAAArS,KAAAgsE,IAAAp9D,KAAA,sCAAA4E,WAKA9a,KAOA,IAAAuyE,KAHAjyE,KAAAqzE,yBAGArzE,KAAA2kE,MAAAvK,QACAp6D,KAAA2kE,MAAAvK,QAAAl1D,eAAA+sE,IAIA,cADAE,EAAAnyE,KAAA2kE,MAAAvK,QAAA6X,IACA1wE,MAAA4wE,EAAAoB,QACAvzE,KAAAwzE,oBAAAvB,GAKA,IAAAA,KAAAjyE,KAAA2kE,MAAAvK,QACAp6D,KAAA2kE,MAAAvK,QAAAl1D,eAAA+sE,KAIAE,EAAAnyE,KAAA2kE,MAAAvK,QAAA6X,IAEAwB,mBAAA,IAAAN,EAAAhB,EAAAsB,gBAAAN,EAAAlB,GAAA3tE,OACA,IAAApF,MAAAw0E,gBAAAP,EAAAlB,GAAAkB,EAAAhB,EAAAsB,cAAA,CACAE,oBAAA,IAKA,IAAAjzC,EAAA1gC,KAAA0wE,IAAAx2D,WAAA4X,OAAAlc,KAAA,WACA5V,KAAAwc,YAAAkkB,EAAA,QAAA,aAEA,IAAA3mB,EAAA/Z,KAAA0wE,IAAA96D,KAAA,sCACA5V,KAAAwc,YAAAzC,EAAA,SAAA,SAAAV,GACA1a,EAAA0a,EAAAE,eAAAE,QAAA,qBAAA3H,SAAA,YAEA9R,KAAAwc,YAAAzC,EAAA,QAAA,SAAAV,GACA1a,EAAA0a,EAAAE,eAAAE,QAAA,MAAArD,YAAA,aAIAw9D,gBAAA,SAAAv6D,GACArZ,KAAAqzE,yBAEA,IAAAJ,EAAAt0E,EAAA0a,EAAAE,eAEA05D,EAAAjsE,KAAA,mBACAisE,EAAAjsE,KAAA,mBAAA,GAIAqe,YAAA,WACAnmB,MAAAiF,gBAAA8uE,KACA,IAGAY,sBAAA,SAAAx6D,GACA,GAAAA,EAAAE,cAAAgpC,QACA,IAAA,IAAA7iD,EAAA,EAAAA,EAAAM,KAAA2kE,MAAAmL,gBAAAz2D,EAAArS,KAAAirE,OAAA3xE,OAAAZ,IAAA,CACA,IAAAo0E,EAAA9zE,KAAA2kE,MAAAmL,gBAAAz2D,EAAArS,KAAAirE,OAAAvyE,GACAo0E,EAAAvxB,QAAAuxB,IAAAz6D,EAAAE,gBAKAi6D,oBAAA,SAAAO,GAIA,IAHA,IAEA9B,EAAA+B,EAFAC,EAAAj0E,KAAA2kE,MAAAvK,QAAA2Z,GACAxxB,EAAA5jD,EAAA,yBAAAqB,KAAA6yE,IAAAkB,IAAA99C,KAAA,WAEAv2B,EAAA,EAAAA,EAAAu0E,EAAAV,OAAAjzE,OAAAZ,IACAuyE,EAAAgC,EAAAV,OAAA7zE,GACAM,KAAA2kE,MAAAuP,OACAF,EAAA,MAAA/B,EAAA,MAEAA,EAAAA,EAAAtwE,OAAA,IAEA4gD,IAAAyxB,IAAAzxB,GAAAyxB,EACAr1E,EAAAqB,KAAA6yE,IAAAZ,IACA77D,YAAA,YACAR,KAAA,mBAAAqgB,KAAA,YAAA,GAEAt3B,EAAAqB,KAAA6yE,IAAAZ,IACAngE,SAAA,YACA8D,KAAA,mBAAAqgB,KAAA,YAAA,IAKAk+C,wBAAA,SAAA96D,GACA1a,EAAAqI,KAAAqS,EAAAE,cAAA,mBAAA,IAGA66D,eAAA,SAAA/6D,GACA,IAAAyG,EAAAzG,EAAAyG,QAAAzG,EAAAyG,QAAAzG,EAAAg7D,SACAr0D,EAAA5a,QAAAkvE,iBAAAj7D,GAGA,GAAAyG,IAAA1a,QAAAmgB,aAAA,cAAAlM,EAAArS,KAAAzF,MAAAye,GAOA,OANA3G,EAAAmM,sBACAnM,EAAAyqC,SACA9jD,KAAA2kE,MAAAyM,eAAApxE,KAAA0wE,IAAAr3D,EAAArS,KAAAqqE,QAAAh4D,EAAAE,eAEAvZ,KAAA2kE,MAAA+M,eAAA1xE,KAAA0wE,IAAAr3D,EAAArS,KAAAqqE,QAAAh4D,EAAAE,gBAMA,WAAAF,EAAArS,KAAAzF,MAAAye,GAAA9gB,MAAA+N,QAAA6S,EAAA5gB,MAAAqwE,cAAA4B,IAAAoD,kBACAl7D,EAAAmM,kBAIAgvD,YAAA,SAAAn7D,GACA,IAAArS,EAAA9H,MAAAmC,KAAAgY,EAAA+3C,cAAAqjB,cAAAC,QAAA,QAAA,SACA1tE,EAAArB,MAAA,cAGA0T,EAAAmM,iBACAxlB,KAAA2kE,MAAAkN,WAAA7qE,EAAAhH,KAAAqZ,EAAArS,KAAAqqE,WAGAsD,cAAA,SAAAt7D,GACA,GAAA,cAAAA,EAAArS,KAAAzF,KAAA,CAIA,IAAAqzE,EAEA,GAAA,WAAAv7D,EAAArS,KAAAzF,KAAA,CAEA,IAAAoE,EAAA0T,EAAAE,cAAApU,MAAAQ,MAAA,oBAGAivE,EADA,OAAAjvE,EACAA,EAAA,GAEA,QAIAivE,EAAAv7D,EAAAE,cAAApU,MAAAnG,QAAA,UAAA,IAGA41E,IAAAv7D,EAAAE,cAAApU,QACAkU,EAAAE,cAAApU,MAAAyvE,KAIAvB,uBAAA,WAIA,IAFA,IAAAwB,GAAA,EAEAn1E,EAAA,EAAAA,EAAAM,KAAA4yE,UAAAtyE,OAAAZ,IACAM,KAAA4yE,UAAAlzE,GAAAqrB,OAAA8pD,IACAA,EAAA70E,KAAA4yE,UAAAlzE,GAAAqrB,QAIA/qB,KAAA8yE,WAAAhoD,IAAA,aAAA+pD,GAGA,IAAAC,EAAA90E,KAAA8yE,WAAAnuD,OAAA,YAAApK,QAAA6J,SAAA2G,SAEA+pD,EAAAD,GACA70E,KAAA8yE,WAAAhoD,IAAA,aAAAgqD,IAIArE,UAAA,WACAzwE,KAAA2kE,MAAA8L,UAAAzwE,QAEA,CACAu0E,gBAAA,CAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,MCpqBAr1E,MAAA61E,qBAAA3vE,QAAAuV,KAAA1b,OAAA,CACA+1E,UAAA,KACAC,YAAA,KACAC,SAAA,KACArlD,eAAA,KACAslD,gBAAA,EAEA95D,KAAA,SAAArH,GACAhU,KAAA8Y,YAAA9E,EAAA9U,MAAA61E,qBAAAz5D,UAEAtb,KAAAk1E,SAAAv2E,EAAA,IAAAqV,EAAAzS,KAAAvC,QAAA,aAAA,KAAA,kBAGAgB,KAAAgU,SAAAohE,WAEAp1E,KAAAk1E,SAAAluE,KAAA,kBAAA,GAGA,SAAAhH,KAAAk1E,SAAAj/C,KAAA,YACAj2B,KAAAwc,YAAAxc,KAAAk1E,SAAA,SAAA,2BAEAl1E,KAAAwc,YAAAxc,KAAAk1E,SAAA,QAAA,4BAIAl1E,KAAAq1E,gBACAn2E,MAAAghB,aAAA9G,GAAA,kBAAApZ,KAAAq1E,cAAAp5D,KAAAjc,QAGAq1E,cAAA,WAEA,IAAAn2E,MAAAghB,aAAA8L,sBAAA1rB,SAIAN,KAAAs1E,oBACAt1E,KAAAu1E,gBAEAv1E,KAAAw1E,mBASAF,kBAAA,WACA,IAAAG,GAAA,EASA,OARAz1E,KAAA6vB,eAAA3wB,MAAAghB,aAAA8L,uBAEAhsB,KAAAgU,SAAA0hE,OAAA11E,KAAA6vB,eAAAvvB,OAAA,EACAm1E,GAAA,EACA,mBAAAz1E,KAAAgU,SAAAshE,oBACAG,EAAAz1E,KAAAgU,SAAAshE,kBAAAt1E,KAAA6vB,iBAGA4lD,GAGAF,cAAA,WACAv1E,KAAAm1E,iBAIAn1E,KAAAk1E,SAAA9+D,YAAA,YACApW,KAAAm1E,gBAAA,IAGAK,eAAA,WACAx1E,KAAAm1E,iBAIAn1E,KAAAk1E,SAAApjE,SAAA,YACA9R,KAAAm1E,gBAAA,IAGAQ,wBAAA,SAAAt8D,GACAA,EAAAmM,iBACAnM,EAAA2X,kBAEAhxB,KAAAm1E,gBACAn1E,KAAAgU,SAAAohE,SAAAp1E,KAAA6vB,kBAGA,CACAvU,SAAA,CACA/Z,KAAA,KACAm0E,OAAA,EACAJ,kBAAA,KACAF,SAAA,QC3FAl2E,MAAAw2B,mBAAAtwB,QAAAuV,KAAA1b,OAAA,CACAqoE,MAAA,KACAsO,QAAA,GAEAv6D,KAAA,WACArb,KAAAsnE,MAAA,GAEA,IAAA,IAAA5nE,EAAA,EAAAA,EAAA,EAAAA,IACAM,KAAA41E,QAAA10E,KAAA,IAAAhC,MAAAw2B,mBAAAmgD,OAAA71E,QAIA21B,KAAA,SAAAnT,GAEA,IAAAszD,EAAAtzD,EAAA5M,KAAA,iBACA,IAAA,IAAAlW,EAAA,EAAAA,EAAAo2E,EAAAx1E,OAAAZ,IAAA,CACA,IAAAq2E,EAAAD,EAAA3jE,GAAAzS,GACAs2E,EAAAD,EAAAE,eACA,GAAAj2E,KAAAiwE,UAAA8F,EAAAC,GACAh2E,KAAAk2E,WAAAH,EAAA,QACA,CACA,IAAAz2E,EAAA,QAAAqR,KAAAC,MAAA,IAAAD,KAAAe,UACAxS,MAAAw2B,mBAAAygD,gBAAA72E,GAAA,CAAAU,KAAA+1E,EAAAC,GACAA,EAAA58D,GAAA,UAAA9Z,EAAA,CACAy2E,OAAAA,EACAC,cAAAA,EACA12E,IAAAA,GACA+Z,IACArZ,KAAAiwE,UAAA52D,EAAArS,KAAA+uE,OAAA18D,EAAArS,KAAAgvE,wBACA92E,MAAAw2B,mBAAAygD,gBAAA98D,EAAArS,KAAA1H,KACA02E,EAAAv+C,IAAA,UAAApe,EAAArS,KAAA1H,KACAU,KAAAk2E,WAAA78D,EAAArS,KAAA+uE,OAAA,UAOAG,WAAA,SAAAE,GACAp2E,KAAAsnE,MAAApmE,KAAAk1E,GAGA,IAAA,IAAA12E,EAAA,EAAAA,EAAAM,KAAA41E,QAAAt1E,OAAAZ,IACAM,KAAA41E,QAAAl2E,GAAA22E,QACAr2E,KAAA41E,QAAAl2E,GAAA42E,YAKArG,UAAA,SAAA8F,EAAAC,GACA,IACAO,EAAAC,EADAC,EAAAV,EAAAj0E,SAAAm1B,IASA,OAPA++C,EAAA,KAAAxvE,UACA+vE,EAAAP,EAAArrD,YACA6rD,EAAApxE,QAAA2xB,KAAAhM,WAEAwrD,EAAAP,EAAAl0E,SAAAm1B,IACAu/C,EAAAR,EAAAjrD,UAEA0rD,EAAAF,GAAAE,EAAAF,EAAAC,EAAA,KAGAhsD,QAAA,WACA,IAAA,IAAA9qB,EAAA,EAAAA,EAAAM,KAAA41E,QAAAt1E,OAAAZ,IACAM,KAAA41E,QAAAl2E,GAAA8qB,UAGAxqB,KAAA0vB,SAEA,CACAymD,gBAAA,GACAO,SAAA,WACA,IAAA,IAAAp3E,KAAAJ,MAAAw2B,mBAAAygD,gBAAA,CACA,IAAA7O,EAAAyO,EAAAC,GAAA92E,MAAAw2B,mBAAAygD,gBAAA72E,UACAJ,MAAAw2B,mBAAAygD,gBAAA72E,GACA02E,EAAAv+C,IAAA,UAAAn4B,GACAgoE,EAAA3xC,KAAAogD,EAAA3xD,cAKAllB,MAAAw2B,mBAAAmgD,OAAAzwE,QAAAuV,KAAA1b,OAAA,CACA03E,OAAA,KACAN,QAAA,EAEAh7D,KAAA,SAAAs7D,GACA32E,KAAA22E,OAAAA,GAGAL,SAAA,WACA,IAAAjhD,EAAAr1B,KAAA22E,OAAArP,MAAAtkE,QACA,QAAA,IAAAqyB,EAAA,CAKAr1B,KAAAq2E,QAAA,EACA,IAAAzjE,EAAAjU,EAAA02B,GACA,GAAAziB,EAAAgD,KAAA,OAAAtV,OACAN,KAAAs2E,eADA,CAIA,IAAAM,EAAAj4E,EAAA,SAAA,CACA4X,MAAA3D,EAAA1E,KAAA,cACAsI,OAAA5D,EAAA1E,KAAA,eACAjL,IAAA,KAEAjD,KAAAwc,YAAAo6D,EAAA,aAAA,YACAA,EAAAtoE,SAAAsE,GACA8D,YAAA,CACAC,SAAA,CAAAigE,EAAA,YAlBA52E,KAAAq2E,QAAA,KC5FAn3E,MAAA23E,oBAAAzxE,QAAAuV,KAAA1b,OAAA,CACAgP,MAAA,KACA6oE,OAAA,KAEAz7D,KAAA,SAAA07D,EAAAD,GAIA,GAHA92E,KAAAiO,MAAAtP,EAAAo4E,QAGA,IAAAD,EAAA,CACA92E,KAAA82E,OAAA,GACAA,EAAAn4E,EAAAowB,UAAA+nD,GAEA,IAAA,IAAAp3E,EAAA,EAAAA,EAAAo3E,EAAAx2E,OAAAZ,IAGA,IAFA,IAAAqa,EAAApb,EAAAm4E,EAAAp3E,IAEA61D,EAAA,EAAAA,EAAAx7C,EAAAzZ,OAAAi1D,IAAA,CACA,IAAAlxD,EAAA0V,EAAA5H,GAAAojD,GAEAv1D,KAAA82E,OAAA51E,KAAA,CACAkD,MAAAC,EACAC,IAAAc,QAAA4xE,gBAAA3yE,MAMArE,KAAAwc,YAAAxc,KAAAiO,MAAA,SAAA,qBAGAkhE,iBAAA,SAAA91D,GAEA,GAAAna,MAAA+3E,uBAAAC,gBAGA,OAFA79D,EAAAmM,sBACAnM,EAAA89D,2BAKA,GAAAn3E,KAAA82E,OAAA,CAIA,IAHA,IACAzyE,EADA+yE,GAAA,EAGA13E,EAAA,EAAAA,EAAAM,KAAA82E,OAAAx2E,OAAAZ,IAQA,IAPA2E,EAAArE,KAAA82E,OAAAp3E,GAAA0E,OAEA4C,KAAA,mBACA3C,EAAAA,EAAA2C,KAAA,iBAAAqwE,eAIAjyE,QAAA4xE,gBAAA3yE,KAAArE,KAAA82E,OAAAp3E,GAAA4E,IAAA,CACA8yE,GAAA,EACA,MAIA,IAAAA,EAEA,OAKA/9D,EAAAmM,iBACAnM,EAAA89D,2BACAj4E,MAAA+3E,uBAAAK,uBAAAt3E,KAAA4W,WAAAqF,KAAAjc,QAGA4W,WAAA,WAEA5W,KAAA4X,UACA5X,KAAAiO,MAAAgJ,QAAA,UACAjX,KAAA+X,YCxEA7Y,MAAAq4E,uBAAAnyE,QAAAuV,KAAA1b,OAAA,CACAi4E,iBAAA,EAEAM,cAAA,KACAxsB,eAAA,KACAC,iBAAA,KACAwsB,WAAA,KACAC,WAAA,KAEAzwE,SAAA,KAOAqwE,uBAAA,SAAArwE,GACAjH,KAAAiH,SAAAA,EAGAjH,KAAAk3E,iBAAA,EAEAh4E,MAAA4H,kBAAA,qCAAA,CAAA2D,EAAA5C,KACA7H,KAAAk3E,iBAAA,EAEA,YAAArvE,KAEA,IAAA4C,EAAA+zB,SAAA/zB,EAAA+zB,SAAAt/B,MAAAq4E,uBAAAI,8BACA33E,KAAAiH,WAGAjH,KAAA43E,wBAMAA,kBAAA,WACA,GAAA53E,KAAAw3E,cAqCAx3E,KAAAw3E,cAAA78C,WArCA,CACA,IAAAk9C,EAAAl5E,EAAA,iEACAuf,EAAAvf,EAAA,wBAAAO,MAAAS,EAAA,MAAA,oCAAA,cAAA2O,SAAAupE,GACAlrB,EAAAhuD,EAAA,gCAAA2P,SAAA4P,GACA0uC,EAAAjuD,EAAA,uBAAA2P,SAAAq+C,GACAE,EAAAluD,EAAA,4BAAA2P,SAAAs+C,GACAE,EAAAnuD,EAAA,SAAA2P,SAAAs+C,GACAG,EAAApuD,EAAA,kCAAA2P,SAAAu+C,GAEA7sD,KAAAgrD,eAAArsD,EAAA,uEAAAO,MAAAS,EAAA,MAAA,YAAA,uCAAA2O,SAAAy+C,GACA/sD,KAAAirD,iBAAAtsD,EAAA,iCAAA2P,SAAAq+C,GACA3sD,KAAAy3E,WAAA94E,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,sBACA9W,KAAAnE,MAAAS,EAAA,MAAA,YACA2O,SAAAw+C,GACA9sD,KAAA03E,WAAA/4E,EAAA,sBAAA2P,SAAA4P,GAEAle,KAAAw3E,cAAA,IAAApyE,QAAAw3B,MAAAi7C,EAAA,CACA/8C,kBAAA,EACAqC,SAAA,KACA9X,WAAArlB,KAAA83E,mBAAA77D,KAAAjc,MAAA,MAEA0yC,UAAA,KACA1yC,KAAAgrD,eAAA1mD,IAAA,OAIA,IAAApF,MAAA8tD,cAAAhtD,KAAAgrD,eAAA,CACAiC,cAAAC,IACAltD,KAAAgrD,eAAAkC,KAIAltD,KAAAwc,YAAAxc,KAAAgrD,eAAA,QAAA,oBACAhrD,KAAAwc,YAAAq7D,EAAA,SAAA,oBAMAC,mBAAA,WACA1yE,QAAAqgB,iBAAA,IACAzlB,KAAAgrD,eAAA/zC,QAAA,UAIAo2C,iBAAA,WACA,OAAArtD,KAAAgrD,eAAA1mD,MAAAhE,QAAA,GACAN,KAAAy3E,WAAArhE,YAAA,aACA,IAEApW,KAAAy3E,WAAA3lE,SAAA,aACA,IAIAimE,eAAA,SAAA1+D,GAKA,GAJAA,GACAA,EAAAmM,iBAGAxlB,KAAAqtD,mBAAA,CAIArtD,KAAAirD,iBAAA70C,YAAA,UACApW,KAAAutD,kBAEA,IAAAvmD,EAAA,CACAgxE,gBAAAh4E,KAAAgrD,eAAA1mD,OAGApF,MAAA4H,kBAAA,+BAAAE,EAAA,CAAAyD,EAAA5C,KACA7H,KAAAirD,iBAAAn5C,SAAA,UAEA,YAAAjK,EACA4C,EAAA9C,SACA3H,KAAAw3E,cAAAr5D,OACAne,KAAAiH,aAEAjH,KAAAi4E,kBAAAxtE,EAAA5K,SAAAX,MAAAS,EAAA,MAAA,wBACAyF,QAAAwa,MAAA5f,KAAAw3E,cAAA5kE,YACA5S,KAAA83E,sBAGA93E,KAAAi4E,wBAKAA,kBAAA,SAAArwE,GACAA,MAAAA,IACAA,EAAA1I,MAAAS,EAAA,MAAA,6BAGAK,KAAA03E,WAAAr0E,KAAAuE,GACA5H,KAAAw3E,cAAAz6D,yBAGAwwC,gBAAA,WACAvtD,KAAAi4E,kBAAA,MAEA,CACAN,8BAAA,IAIAz4E,MAAA+3E,uBAAA,IAAA/3E,MAAAq4E,uBClJAr4E,MAAAg5E,WAAAh5E,MAAA+U,iBAAAhV,OAAA,CACAk5E,oBAAA,KACAC,kBAAA,KACAC,aAAA,KAEAh9D,KAAA,SAAA1H,EAAAf,EAAAoB,GACAhU,KAAAoZ,GAAA,eAAApZ,KAAAw4D,aAAAv8C,KAAAjc,OACAA,KAAAoZ,GAAA,aAAApZ,KAAAw4D,aAAAv8C,KAAAjc,OACAA,KAAA0vB,KAAA/b,EAAAf,EAAAoB,IAGA2R,UAAA,WAEA3lB,KAAAm4E,oBAAA,GAEA,IAAA,IAAAz4E,EAAA,EAAAA,EAAAR,MAAAi5E,oBAAA73E,OAAAZ,IAAA,CACA,IAAA44E,EAAAp5E,MAAAi5E,oBAAAz4E,GAEAM,KAAAknB,eAAA,WAAAoxD,EAAA3f,MACA34D,KAAAm4E,oBAAAj3E,KAAAo3E,GAIAt4E,KAAA0vB,QAGAzI,oBAAA,WAEA,GAAA,UAAAjnB,KAAAgU,SAAAkQ,SAAA,oBAAAq0D,qBAAA,CACA,GAAA,YAAAA,qBACA,MAAA,UAEA,IAAA,IAAA74E,EAAA,EAAAA,EAAAM,KAAAumB,SAAAjmB,OAAAZ,IAAA,CACA,IAAAshB,EAAAriB,EAAAqB,KAAAumB,SAAA7mB,IAEA,GAAAshB,EAAAha,KAAA,YAAAuxE,qBACA,OAAAv3D,EAAAha,KAAA,QAMA,OAAAhH,KAAA0vB,QAGA8oC,aAAA,WACA,GAAAx4D,KAAAghB,QAAA,CAIA,IAAA6U,EAYAn2B,EAAAgH,EAAAqP,EAEA,GAVA8f,EADA,YAAA71B,KAAAghB,QAAAha,KAAA,OACA,UAEAhH,KAAAghB,QAAAha,KAAA,UAQAhH,KAAAm4E,oBAAA73E,OAAA,CAOA,IAAAk4E,EAYAzf,EAVA,GAPA/4D,KAAAo4E,mBACAp4E,KAAAo4E,kBAAA99D,SAMAub,EACA,IAAAn2B,EAAA,EAAAA,EAAAM,KAAAm4E,oBAAA73E,OAAAZ,IACA,GAAAM,KAAAm4E,oBAAAz4E,GAAAm2B,SAAAA,EAAA,CACA2iD,EAAAx4E,KAAAm4E,oBAAAz4E,GACA,MAmCA,GA9BAM,KAAAo4E,kBAAAz5E,EAAA,kCAKA65E,GACA9xE,EAAA1G,KAAAy4E,uBAAAD,GACAziE,EAAA,UAAA/V,KAAAgU,SAAAkQ,QAAAhlB,MAAAS,EAAA,MAAA,aAAAT,MAAAS,EAAA,MAAA,sBAAA,CAAA24E,QAAAE,EAAAvzE,OACAjF,KAAAq4E,aAAA15E,EAAA,kCAAA+H,EAAA,+BAAAxH,MAAAiE,WAAA4S,GAAA,QAAAzH,SAAAtO,KAAAo4E,mBAEA,UAAAp4E,KAAAgU,SAAAkQ,SACAlkB,KAAAwc,YAAAxc,KAAAq4E,aAAA,SAAA,SAAAh/D,GACArZ,KAAA04E,sBAAAr/D,EAAAE,cAAA2/C,aAAA,eAIAl5D,KAAAm4E,oBAAA73E,OAAA,IACAy4D,EAAAp6D,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,uBACA7L,SAAAtO,KAAAo4E,qBAGAp4E,KAAAq4E,aAAAtf,EAAAp6D,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,8BACA9W,KAAAnE,MAAAS,EAAA,MAAA,eACA2O,SAAAtO,KAAAo4E,mBAGArf,EAAA,CACA,IAAAI,EAAA,yBAEA,IAAAz5D,EAAA,EAAAA,EAAAM,KAAAm4E,oBAAA73E,OAAAZ,IAAA,CACA,IAAA44E,EAAAt4E,KAAAm4E,oBAAAz4E,IAGA,UAAAM,KAAAgU,SAAAkQ,UAAA,IAAAvlB,EAAAsO,QAAAjN,KAAA8V,OAAAwiE,EAAAl8D,QACA,UAAApc,KAAAgU,SAAAkQ,SAAAo0D,IAAAE,KAEA9xE,EAAA1G,KAAAy4E,uBAAAH,GACAviE,EAAA,UAAA/V,KAAAgU,SAAAkQ,QAAAo0D,EAAArzE,KAAA/F,MAAAS,EAAA,MAAA,sBAAA,CAAA24E,QAAAA,EAAArzE,OACAk0D,GAAA,UAAAzyD,EAAA,IAAAxH,MAAAiE,WAAA4S,GAAA,aAMApX,EAFAw6D,GAAA,eAEA7qD,SAAAtO,KAAAo4E,mBACA,IAAAhf,EAAA,IAAAh0D,QAAAyU,QAAAk/C,GAEA,UAAA/4D,KAAAgU,SAAAkQ,SACAk1C,EAAAhgD,GAAA,eAAAC,IACArZ,KAAA04E,sBAAAr/D,EAAA4W,OAAAipC,aAAA,cAKAl5D,KAAAkvB,UAAAlvB,KAAAo4E,mBAMA,GAAA,UAAAp4E,KAAAgU,SAAAkQ,SAAA,oBAAAwF,QAAA,CACA,IAAA9f,EAAA,UAEAisB,IACAjsB,GAAA,IAAAisB,GAGAnM,QAAAC,aAAA,GAAA,GAAAzqB,MAAAyF,OAAAiF,OAIA6uE,uBAAA,SAAAH,GACA,GAAA,UAAAt4E,KAAAgU,SAAAkQ,QAAA,CACA,IAAAta,EAAA,WAAA0uE,EAAAziD,OAAA,OACA,IAAA/1B,EAAA,GACA,GAAAE,KAAA8V,OACA,IAAA,IAAApW,EAAA,EAAAA,EAAAR,MAAAkd,MAAA9b,OAAAZ,IACAR,MAAAkd,MAAA1c,GAAAmW,IAAA7V,KAAA8V,SACAhW,EAAA6qE,KAAAzrE,MAAAkd,MAAA1c,GAAAm2B,QAIA,MAAA,SAAA32B,MAAAyF,OAAAiF,EAAA9J,GAAA,IAEA,MAAA,YAAAw4E,EAAAziE,GAAA,KAIA6iE,sBAAA,SAAAC,GACA,IAAA34E,KAAAq4E,aAAA1iE,SAAA,WAAA,CAOA,IAFA,IAAA2iE,EAEA54E,EAAA,EAAAA,EAAAM,KAAAm4E,oBAAA73E,OAAAZ,IACA,GAAAM,KAAAm4E,oBAAAz4E,GAAAmW,IAAA8iE,EAAA,CACAL,EAAAt4E,KAAAm4E,oBAAAz4E,GACA,MAIA,GAAA44E,EAAA,CAIAt4E,KAAAq4E,aAAAvmE,SAAA,YACA,IAAA8mE,EAAA54E,KAAAq4E,aAAAh1E,OACArD,KAAAq4E,aAAAh1E,KAAAnE,MAAAS,EAAA,MAAA,sBAAA,CAAA24E,QAAAA,EAAArzE,QAEA/F,MAAAkV,oBAAApU,KAAA2T,YAAA,CACAqJ,WAAAhd,KAAAo4E,kBACAtiE,OAAA9V,KAAA8V,OACA2F,WAAA,CACAk9D,UAAAA,EACAE,OAAAP,EAAAQ,WAAA,GAAAjjE,GACA8zD,QAAA2O,EAAAS,WAAA,EAAA,GAEAn9D,eAAA,KACA5b,KAAAq4E,aAAAvmE,SAAA,YAEAoK,aAAA,KACAlc,KAAAq4E,aAAAjiE,YAAA,YAEAqH,UAAA,KACAzd,KAAAq4E,aAAAjiE,YAAA,YAAA/S,KAAAu1E,IAEAj5D,cAAAlV,IAEA,IAAAuuE,EAAA,WAAAV,EAAA3f,IAEA34D,KAAA8gB,YAAAk4D,GACAh5E,KAAA2tB,kBAAAqrD,GAGAh5E,KAAAivB,yBAAAxkB,EAAAoL,IACA7V,KAAA+lB,yBAOA7mB,MAAAwU,0BAAA,yBAAAxU,MAAAg5E,YCzOAh5E,MAAA+5E,oBAAA7zE,QAAAuV,KAAA1b,OAAA,CACA2T,WAAA,KACAsmE,cAAA,KACAC,WAAA,KACAv4D,SAAA,KACAw4D,eAAA,KACAC,iBAAA,KACAC,cAAA,KACAC,WAAA,KACAC,mBAAA,KACAC,aAAA,KACAC,qBAAA,KACAC,aAAA,KACAC,QAAA,KAEAC,QAAA,KACAC,YAAA,KAEAz+D,KAAA,SAAAga,EAAArhB,GACAhU,KAAA4S,WAAAjU,EAAA02B,GACAr1B,KAAA8Y,YAAA9E,EAAA9U,MAAA+5E,oBAAA39D,UAEA,IAAAy+D,EAAA/5E,KAAA4S,WAAAsH,SAAA,kBACAla,KAAAk5E,cAAAa,EAAA7/D,SAAA,aACAla,KAAAm5E,WAAAY,EAAA7/D,SAAA,oBACAla,KAAA4gB,SAAA5gB,KAAA4S,WAAAsH,SAAA,gBAEAla,KAAAs5E,cAAAt5E,KAAAq5E,iBAAAr5E,KAAA4gB,SAAA1G,SAAA,sBACA,IAAA8/D,EAAAh6E,KAAAs5E,cAAAp/D,SAAA,WACAla,KAAAy5E,aAAAO,EAAA9/D,SAAA,SACAla,KAAA05E,qBAAAM,EAAA9/D,SAAA,UACAla,KAAA25E,aAAA35E,KAAA4gB,SAAAhL,KAAA,oBACA5V,KAAA45E,QAAA55E,KAAA25E,aAAAz/D,SAAA,gBACAla,KAAAu5E,WAAAv5E,KAAA4gB,SAAA1G,SAAA,mBACAla,KAAAw5E,mBAAAx5E,KAAAu5E,WAAAr/D,WAGAla,KAAA65E,QAAA,IAAA36E,MAAAsZ,KAAAxY,KAAAk5E,cAAA,CACAlhE,aAAA,WACAG,YAAA,IACAE,SAAA,OACAE,WAAA,KAGA,IAAAguB,EAAAvmC,KAAAk5E,cAAAh/D,WACA,IAAA,IAAAxa,EAAA,EAAAA,EAAA6mC,EAAAjmC,OAAAZ,IACAM,KAAAi6E,QAAAt7E,EAAA4nC,EAAA7mC,KAmBA,GAfAf,EAAA,WAAA,CACA4C,KAAA,SACA0D,KAAAjF,KAAAgU,SAAAkmE,0BAAAl7E,QAAA,mBAAA,IACAmG,MAAA,KACAi8C,aAAAphD,KAAA4S,YAEA5S,KAAA85E,YAAA,IAAA56E,MAAA+5E,oBAAAkB,YAAAn6E,MAEAA,KAAAgU,SAAAomE,mBACAp6E,KAAAq6E,QAAA,IAAAn7E,MAAA+5E,oBAAAqB,QAAAt6E,MAEAA,KAAAwc,YAAAxc,KAAAm5E,WAAA,WAAA,WAIAn5E,KAAAgU,SAAAumE,eAAA,CACA,IAAAC,EAAAx6E,KAAA4gB,SAAA1G,SAAA,aACA,IAAAhb,MAAAu7E,QAAAD,EAAA,CACA5uC,SAAA8uC,IACA16E,KAAAq5E,iBAAAvnE,SAAA,UACA9R,KAAAq5E,iBAAAr5E,KAAA,IAAA06E,EAAA1zE,KAAA,qBACAoP,YAAA,aAKApW,KAAAwc,YAAAxc,KAAAy5E,aAAA,QAAA,KACA,IAAAn1E,EAAAtE,KAAAy5E,aAAAn1E,MAAAsL,cAAA5Q,QAAA,QAAA,IACA,IAAAsF,EAGA,OAFAtE,KAAAs5E,cAAA1jE,KAAA,aAAAQ,YAAA,iBACApW,KAAA05E,qBAAA5nE,SAAA,UAIA9R,KAAA05E,qBAAAtjE,YAAA,UACA,IAAAukE,EAAA36E,KAAA45E,QAAAj1D,OAAA,oBAAArgB,OACAmY,IAAAzc,KAAA25E,aAAAh1D,OAAA,gBAAArgB,OAAA4V,SAAA,iBACA9D,YAAA,YACApW,KAAA45E,QAAA5/C,IAAA2gD,GAAA7oE,SAAA,YAGA,IAAA,IAAApS,EAAA,EAAAA,EAAAM,KAAA25E,aAAAr5E,OAAAZ,IAAA,CACA,IAAAk7E,EAAA56E,KAAA25E,aAAAxnE,GAAAzS,GACAk7E,EAAAhlE,KAAA,4CAAAtV,OACAs6E,EAAAxkE,YAAA,YAEAwkE,EAAA9oE,SAAA,eAKA9R,KAAAwc,YAAAxc,KAAAy5E,aAAA,UAAApgE,IACAA,EAAAyG,UAAA1a,QAAA0Y,SACA9d,KAAAy5E,aAAAn1E,IAAA,IAAA2S,QAAA,WAKAjX,KAAAwc,YAAAxc,KAAA05E,qBAAA,QAAA,KACA15E,KAAAy5E,aAAAn1E,IAAA,IAAA2S,QAAA,YAIAgjE,QAAA,SAAA9sC,GACA,GAAAntC,KAAAgU,SAAAomE,iBAAA,CACA,IAAAS,EAAA1tC,EAAAv3B,KAAA,mBACAjX,EAAA,2CACA22B,YAAAulD,GACAxoE,OACA1T,EAAA,SACA0T,OAAA1T,EAAA,SACA0T,OAAA1T,EAAA,OAAA,CACAm8E,cAAA,SACAz3E,KAAAnE,MAAAS,EAAA,MAAA,cAEA0S,OAAA1T,EAAA,SACA0T,OAAA1T,EAAA,OAAA,CACAm8E,cAAA,SACAz3E,KAAAnE,MAAAS,EAAA,MAAA,eAGA0S,OAAA1T,EAAA,UACA0T,OACA1T,EAAA,SACA0T,OAAA1T,EAAA,SACA0T,OAAA1T,EAAA,OAAA,CACAm8E,cAAA,WACAz3E,KAAAnE,MAAAS,EAAA,MAAA,wBAEA0S,OAAA1T,EAAA,SACA0T,OAAA1T,EAAA,OAAA,CACAm8E,cAAA,YACAz3E,KAAAnE,MAAAS,EAAA,MAAA,0BAIA,IAAAy5D,EAAA,IAAAh0D,QAAAyU,QAAAghE,EAAA,CACAjxB,eAAA5pD,KAAA+6E,kBAAA9+D,KAAAjc,QAEAo5D,EAAA70C,KAAAnL,GAAA,OAAA,KACA+zB,EAAAjc,KAAA,YAAA5wB,OACA84D,EAAA70C,KAAA3R,WAAAgD,KAAA,0BAAAQ,YAAA,YAEAgjD,EAAA70C,KAAA3R,WAAAgD,KAAA,0BAAA9D,SAAA,YAGAq7B,EAAAxzB,KAAA,YAAArZ,OACA84D,EAAA70C,KAAA3R,WAAAgD,KAAA,2BAAAQ,YAAA,YAEAgjD,EAAA70C,KAAA3R,WAAAgD,KAAA,2BAAA9D,SAAA,cAMA,IAAA0Q,EAAA2qB,EAAAjzB,SAAA,mBAAAA,WAEA,IAAA,IAAAxa,EAAA,EAAAA,EAAA8iB,EAAAliB,OAAAZ,IACAM,KAAAg7E,YAAAr8E,EAAA6jB,EAAA9iB,MAIAs7E,YAAA,SAAAtlE,GACA,IAAAxW,MAAA+5E,oBAAAgC,QAAAj7E,KAAA0V,IAGAqlE,kBAAA,SAAA9qD,GACA,IAAAjwB,KAAAgU,SAAAomE,iBACA,OAGA,IAAA31D,EAAA9lB,EAAAsxB,GACAkd,EAAA1oB,EAAAzd,KAAA,QAAAwS,QAAA4K,SAAAA,SAAAA,SAGA,OAFAK,EAAAzd,KAAA,WAGA,IAAA,SACAhH,KAAAk7E,UAAA/tC,GACA,MACA,IAAA,SACAntC,KAAAm7E,UAAAhuC,GACA,MACA,IAAA,WACA,IAAAiuC,EAAAjuC,EAAAjc,KAAA,YACAkqD,EAAA96E,QACA6sC,EAAAiU,aAAAg6B,GAEA,MACA,IAAA,YACA,IAAAC,EAAAluC,EAAAxzB,KAAA,YACA0hE,EAAA/6E,QACA6sC,EAAA7X,YAAA+lD,KAMAH,UAAA,SAAA/tC,GACA,IAAAntC,KAAAgU,SAAAomE,iBACA,OAGA,MAAAkB,EAAAnuC,EAAAv3B,KAAA,mBACAywC,EAAAi1B,EAAAj4E,OACAijD,EAAAtmD,KAAAu7E,iBAAAl1B,GAEAC,GAAAA,IAAAD,IACAi1B,EAAAj4E,KAAAijD,GACAnZ,EAAAv3B,KAAA,oBAAA1H,KAAA,OAAAlO,KAAAw7E,6BAAAl1B,MAIAi1B,iBAAA,SAAAl1B,GACA,OAAApH,OAAA//C,MAAAS,EAAA,MAAA,yBAAA0mD,IAGA80B,UAAA,SAAAhuC,GACA,IAAAntC,KAAAgU,SAAAomE,iBACA,OAIA,IAAAR,EAAAzsC,EAAAv3B,KAAA,gBAEA,IAAA,IAAAlW,EAAA,EAAAA,EAAAk6E,EAAAt5E,OAAAZ,IAAA,CACA,IAAA2sB,EAAA1tB,EAAAi7E,EAAAl6E,IAAAwO,KAAA,kBACAlO,KAAAy7E,oBAAApvD,GAGArsB,KAAA65E,QAAA3xD,YAAAilB,GACAntC,KAAAq6E,QAAAnyD,YAAAilB,GAEAA,EAAA7yB,UAGAohE,YAAA,SAAAvR,GACA,IAAA99C,EAAA89C,EAAAj8D,KAAA,kBAEAi8D,EAAA7vD,SAEAta,KAAAy7E,oBAAApvD,GACArsB,KAAA65E,QAAA8B,aAAA,IAGAF,oBAAA,SAAApvD,GACArsB,KAAA45E,QAAAj1D,OAAA,oBAAA0H,aACAjW,YAAA,UACAqD,QAAA,oBAAArD,YAAA,WAGAwlE,OAAA,WACA,IAAA57E,KAAAgU,SAAAomE,iBACA,OAGA,MAAAn1E,EAAAjF,KAAAu7E,mBACA,IAAAt2E,EACA,OAGA,MAAAkoC,EAAAxuC,EAAA,mGAIAsG,mDACA/F,MAAAS,EAAA,MAAA,yFAMA2O,SAAAtO,KAAAk5E,eAEAl5E,KAAA65E,QAAAnyD,SAAAylB,GACAntC,KAAAq6E,QAAA3yD,SAAAylB,GAEAntC,KAAAi6E,QAAA9sC,IAGAquC,6BAAA,SAAAK,GACA,OAAA77E,KAAAgU,SAAAkmE,0BAAAl7E,QAAA,gBAAAE,MAAAsE,mBAAAq4E,MAEA,CACAvgE,SAAA,CACA8+D,kBAAA,EACAG,gBAAA,EACAL,0BAAA,oCACA4B,uBAAA,qCAIA58E,MAAA+5E,oBAAAgC,QAAA71E,QAAAuV,KAAA1b,OAAA,CACA88E,SAAA,KACAnpE,WAAA,KACAopE,gBAAA,KACAC,aAAA,KACA7Y,mBAAA,KACAyX,SAAA,KAEAqB,OAAA,KACAC,SAAA,EACA9vD,UAAA,KACA+vD,YAAA,EACA98E,IAAA,KACA+8E,gBAAA,EACAC,aAAA,EACAlhE,IAAA,KAEAC,KAAA,SAAA0gE,EAAAnpE,GACA5S,KAAA+7E,SAAAA,EACA/7E,KAAA4S,WAAAA,EACA5S,KAAA4S,WAAA5L,KAAA,cAAAhH,MAEAA,KAAAk8E,OAAAl8E,KAAA4S,WAAA5L,KAAA,UACArI,EAAAoG,cAAA/E,KAAAk8E,UACAl8E,KAAAk8E,OAAA,IAEAl8E,KAAAk8E,OAAA36E,KAAAvB,KAAA4S,WAAA5L,KAAA,QAEAhH,KAAAm8E,QAAAn8E,KAAA4S,WAAA+C,SAAA,aACA3V,KAAAo8E,WAAAp8E,KAAAm8E,SAAA/2E,QAAA4T,QAAAhZ,KAAA4S,WAAA,mBACA5S,KAAAV,IAAAJ,MAAAsS,aAAA,IAEAxR,KAAAm8E,UACAn8E,KAAAqsB,UAAArsB,KAAA4S,WAAA5L,KAAA,cAGA,IAAAu1E,EAAAv8E,KAAA4S,WAAA5L,KAAA,iBACAw1E,EAAAx8E,KAAAo8E,YAAAp8E,KAAA4S,WAAA+C,SAAA,gBACA3V,KAAAq8E,eAAAr8E,KAAA+7E,SAAA/nE,SAAAumE,gBAAAn1E,QAAA4T,QAAAhZ,KAAA4S,WAAA,yBACA5S,KAAAs8E,YAAAC,GAAAv8E,KAAAo8E,WAEAp8E,KAAAs8E,cAEAC,EAAAA,EAAAA,EAAAv9E,QAAA,uBAAAgB,KAAAV,KAAA,GAGAU,KAAAojE,mBAAAzkE,EAAA,SAAA,CACAwb,MAAA,WAIAna,KAAA66E,SAAAl8E,EAAA,OAAA,CACA4zB,KAAA,SACAC,SAAA,EACArY,MAAA,gBACAC,MAAAlb,MAAAS,EAAA,MAAA,UAGAK,KAAA66E,SAAAzhE,GAAA,QAAA,KACApZ,KAAAob,KAGApb,KAAAob,IAAAuf,OACA36B,KAAAob,IAAA2B,uBAAA,IAHA/c,KAAAy8E,kBAAAF,EAAAC,MAQAx8E,KAAA08E,SAGA18E,KAAA4S,WAAA1E,KAAA,cAAA,MACAlO,KAAA4S,WAAA1E,KAAA,gBAAA,MACAlO,KAAA4S,WAAA1E,KAAA,qBAAA,OAGAwuE,OAAA,WAeA,GAdA18E,KAAAg8E,gBAAAr9E,EAAA,WAAA,CACAwb,MAAA,kBACA5Y,KAAA,SACA0D,KAAA,GACAE,MAAAnF,KAAAV,MACAgP,SAAAtO,KAAA4S,YACA5S,KAAA28E,uBAEA38E,KAAAi8E,aAAAt9E,EAAA,WAAA,CACA4C,KAAA,SACA0D,KAAAjF,KAAA+7E,SAAA/nE,SAAA8nE,uBAAA98E,QAAA,uBAAAgB,KAAAV,OACAgP,SAAAtO,KAAA4S,YACA5S,KAAA48E,oBAEA58E,KAAAq8E,eAAA,CACA,IAAAn9E,MAAA29E,YAAA78E,KAAAk8E,OAAAp1C,OAAA,IAAA,CACAjV,IAAA,GACArI,IAAA,IACAszD,KAAA,GACAC,WAAAj2C,GACA5nC,MAAAS,EAAA,MAAA,cAAA,CAAAq9E,IAAAl2C,EAAA,MAEA8E,SAAA9E,IACA9mC,KAAAk8E,OAAAp1C,MAAAA,EACA9mC,KAAA48E,uBAGAhqE,WAAAtE,SAAAtO,KAAA4S,YAGA5S,KAAAs8E,aACAt8E,KAAA66E,SAAAvsE,SAAAtO,KAAA4S,aAIA6pE,kBAAA,SAAAF,EAAAC,GACA,IAAAvR,EAAA,2CAEAsR,kHAGAr9E,MAAAS,EAAA,MAAA,8FAqBA,GAfAK,KAAAob,IAAA,IAAAhW,QAAA6X,IAAAjd,KAAA4S,WAAAq4D,EAAA,CACA3tD,OAAA5S,IAEAtF,QAAAyZ,sBAAA,KAEA7e,KAAAob,IAAAsF,MAAA9K,KAAA,eAAAqB,QAAA,YAGAyG,SAAA,KACA1d,KAAAi9E,sBAIA/9E,MAAAyT,eAAA3S,KAAAob,IAAAsF,OAEA1gB,KAAAo8E,WAAA,CACAl9E,MAAA80B,GAAAw1C,uBAAA,CACAzzD,MAAA7W,MAAAS,EAAA,MAAA,YACAkW,GAAA7V,KAAAV,IAAA,YACA2F,KAAA,WACAmU,GAAAojE,IACA9zD,UAAA1oB,KAAAob,IAAAsF,OAGA1gB,KAAAiX,QAAA,sBAGAgmE,iBAAA,WACAj9E,KAAAob,IAAA8C,MAAAg/D,iBAAA5iB,QAAA,EAAAr1D,KAAAA,EAAAE,MAAAA,MACAnF,KAAAk8E,OAAAj3E,GAAAE,IAEAnF,KAAA48E,oBAGA,IAAA3hE,EAAAjb,KAAAob,IAAA8C,MAAAtI,KAAA,YAAAQ,YAAA,UAEAlX,MAAA6J,kBAAA,OAAA,wCAAA,CACA/B,KAAA,CACAk1E,OAAAl8E,KAAAk8E,UAEAzyE,KAAAgB,IACAwQ,EAAAnJ,SAAA,UACA9R,KAAA66E,SAAAhyD,SACA7oB,KAAA4S,WAAA7T,KAAAJ,EAAA8L,EAAAzD,KAAAjI,MAAAA,QACAiB,KAAA08E,SACA18E,KAAAm9E,sBACAn9E,KAAAob,IAAA+C,SACAzU,MAAAgB,IAEA0yE,QAAAx1E,MAAA8C,GACAuQ,EAAAnJ,SAAA,UACA9R,KAAAm9E,sBACAn9E,KAAAob,IAAA+C,UAIAw+D,qBAAA,WACA,IAAAxvC,EAAAntC,KAAA4S,WAAA6G,QAAA,YAAA7D,KAAA,aACA,IAAAu3B,EAAA7sC,OACA,OAEA,IAAAmE,EAAAzE,KAAA+7E,SAAAP,6BAAAruC,EAAA9pC,QACArD,KAAAg8E,gBAAA9tE,KAAA,OAAAzJ,IAGAm4E,kBAAA,WACA58E,KAAAi8E,aAAA33E,IAAA8C,KAAAC,UAAArH,KAAAk8E,UAGAiB,oBAAA,WACAn9E,KAAAo8E,aAIAp8E,KAAAk8E,OAAAmB,SACAr9E,KAAA4S,WAAAd,SAAA,gBAEA9R,KAAA4S,WAAAwD,YAAA,oBAKAlX,MAAA+5E,oBAAAqE,SAAAl4E,QAAAm4E,KAAAt+E,OAAA,CACA88E,SAAA,KACAyB,WAAA,KACAC,kBAAA,EACAC,SAAA,KAKAriE,KAAA,SAAA0gE,EAAA/nE,GACAhU,KAAA+7E,SAAAA,EACA/7E,KAAA0vB,KAAA1vB,KAAA29E,YAAA3pE,IAMA6oC,YAAA,WACA78C,KAAA0vB,OAGA1vB,KAAAw9E,WAAAx9E,KAAA49E,kBAGA59E,KAAA09E,SAAA19E,KAAA69E,gBACA79E,KAAAwmB,OAAA7nB,IAAA8d,IAAAzc,KAAAwmB,OAAA/J,IAAAzc,KAAA09E,WAEAt4E,QAAAsN,KAAAZ,SAAA,aAGAgsE,cAAA,WACA99E,KAAAwmB,OAAAxmB,KAAAwmB,OAAAwT,IAAAh6B,KAAA09E,UACA19E,KAAA09E,SAAApjE,UAGAyjE,yBAAA,WACA/9E,KAAAw9E,WAAAp8B,aAAAphD,KAAA28C,UACA38C,KAAA28C,SAAA9zB,SACA7oB,KAAAwmB,OAAA7nB,IAAA8d,IAAAzc,KAAAwmB,OAAAwT,IAAAh6B,KAAA28C,UAAAlgC,IAAAzc,KAAAw9E,aACAx9E,KAAAy9E,kBAAA,GAGAO,yBAAA,WACAh+E,KAAAw9E,WAAA/mE,YAAAzW,KAAA28C,UACA38C,KAAAwmB,OAAA7nB,IAAA8d,IAAAzc,KAAAwmB,OAAAwT,IAAAh6B,KAAAw9E,YAAA/gE,IAAAzc,KAAA28C,WACA38C,KAAAy9E,kBAAA,GAMAQ,aAAA,WACA,IAAA,IAAAv+E,EAAA,EAAAA,EAAAM,KAAAwmB,OAAAlmB,OAAAZ,IAAA,CACA,IAAAyqD,EAAAxrD,EAAAqB,KAAAwmB,OAAA9mB,IACAoC,EAAAqoD,EAAAroD,SAGAqoD,EAAAx0C,SAAA,WAIAw0C,EAAAnjD,KAAA,WAAA,CACAyQ,KAAA3V,EAAA2V,KAAA0yC,EAAA9vB,aAAA,EACApD,IAAAn1B,EAAAm1B,IAAAkzB,EAAAjzB,cAAA,MAQAgnD,eAAA,WAIA,IAHAl+E,KAAAk+E,eAAAC,aAAA,KACAn+E,KAAAk+E,eAAAE,sBAAA,KAEAp+E,KAAAk+E,eAAA9rB,GAAA,EAAApyD,KAAAk+E,eAAA9rB,GAAApyD,KAAAwmB,OAAAlmB,OAAAN,KAAAk+E,eAAA9rB,KACApyD,KAAAk+E,eAAAG,OAAA1/E,EAAAqB,KAAAwmB,OAAAxmB,KAAAk+E,eAAA9rB,KAEApyD,KAAAk+E,eAAAI,UAAAt+E,KAAAk+E,eAAAG,OAAAr3E,KAAA,YACAhH,KAAAk+E,eAAAI,YAIAt+E,KAAAk+E,eAAAK,WAAAn5E,QAAAo5E,QAAAx+E,KAAAk+E,eAAAI,UAAA7mE,KAAAzX,KAAAk+E,eAAAI,UAAArnD,IAAAj3B,KAAAs3C,OAAAt3C,KAAAu3C,SAEA,OAAAv3C,KAAAk+E,eAAAC,cAAAn+E,KAAAk+E,eAAAK,WAAAv+E,KAAAk+E,eAAAE,yBACAp+E,KAAAk+E,eAAAC,aAAAn+E,KAAAk+E,eAAAG,OAAA,GACAr+E,KAAAk+E,eAAAE,sBAAAp+E,KAAAk+E,eAAAK,aAIA,OAAAv+E,KAAAk+E,eAAAC,cAGAM,uBAAA,WAEAz+E,KAAAy+E,uBAAAN,aAAAn+E,KAAAk+E,iBAEAl+E,KAAAy+E,uBAAAN,eAAAn+E,KAAAw9E,WAAA,KAIAx9E,KAAAy9E,kBACA9+E,EAAAsO,QAAAjN,KAAAw9E,WAAA,GAAAx9E,KAAAwmB,QAAA7nB,EAAAsO,QAAAjN,KAAAy+E,uBAAAN,aAAAn+E,KAAAwmB,UACA,IAAA7nB,EAAAsO,QAAAjN,KAAAy+E,uBAAAN,aAAAn+E,KAAA09E,UAEA19E,KAAAw9E,WAAAloD,YAAAt1B,KAAAy+E,uBAAAN,cAEAn+E,KAAAw9E,WAAAp8B,aAAAphD,KAAAy+E,uBAAAN,cAGAn+E,KAAAwmB,OAAA7nB,IAAA8d,IAAAzc,KAAAwmB,OAAA/J,IAAAzc,KAAAw9E,aACAx9E,KAAAy9E,kBAAA,EACAz9E,KAAA+7E,SAAAlC,QAAA8B,aAAA,GACA37E,KAAAi+E,iBAMAhhC,WAAA,WACAj9C,KAAAy9E,kBACAz9E,KAAAg+E,2BAGAh+E,KAAA89E,gBAEA99E,KAAA+7E,SAAAlC,QAAA8B,aAAA,GAGA,IAAA75E,EAAA9B,KAAA28C,SAAA76C,UACAA,GAAA,IAAAA,EAAAm1B,KAAA,IAAAn1B,EAAA2V,MACAzX,KAAA28C,SACA7xB,IAAA,CACAmoC,QAAAjzD,KAAA0+E,eACAC,WAAA,UACAvkD,QAAA,IAEA5iB,SAAA,CAAA4iB,QAAA,GAAAh1B,QAAAw5E,aACA5+E,KAAA6+E,QAAA,GACArnE,SAAA,CAAA4iB,QAAA,GAAAh1B,QAAAw5E,YAAA,KACA5+E,KAAA8+E,kBAGA9+E,KAAA6/C,0BAGA7/C,KAAA0vB,OAEAtqB,QAAAsN,KAAA0D,YAAA,eAIAlX,MAAA+5E,oBAAAqB,QAAAp7E,MAAA+5E,oBAAAqE,SAAAr+E,OAAA,CAIAoc,KAAA,SAAA0gE,GAKA/7E,KAAA0vB,KAAAqsD,EAJA,CACAlmD,OAAA,UAMA8nD,UAAA,WACA,OAAA39E,KAAA+7E,SAAA7C,cAAAtjE,KAAA,kBAMAinC,YAAA,WACA78C,KAAA0vB,OACA1vB,KAAA+9E,2BACA/9E,KAAAi+E,gBAGAF,yBAAA,WACA/9E,KAAA0vB,OACA1vB,KAAA+7E,SAAAlC,QAAA3xD,YAAAloB,KAAA28C,UACA38C,KAAA+7E,SAAAlC,QAAAnyD,SAAA1nB,KAAAw9E,aAGAQ,yBAAA,WACAh+E,KAAA0vB,OACA1vB,KAAA+7E,SAAAlC,QAAA3xD,YAAAloB,KAAAw9E,YACAx9E,KAAA+7E,SAAAlC,QAAAnyD,SAAA1nB,KAAA28C,WAMAoiC,OAAA,WACA/+E,KAAAy+E,yBACAz+E,KAAA0vB,QAMAutB,WAAA,WACAj9C,KAAA0vB,OAGA1vB,KAAA28C,SAAA7xB,IAAA,CACAmoC,QAAAjzD,KAAA0+E,eACAC,WAAA,YAOAd,cAAA,WACA,IAAAH,EAAA/+E,EAAA,0CAAA2P,SAAAtO,KAAA+7E,SAAA7C,eAEA,OADAl5E,KAAA+7E,SAAAlC,QAAAnyD,SAAAg2D,GACAA,GAMAI,cAAA,WACA99E,KAAA0vB,OACA1vB,KAAA+7E,SAAAlC,QAAA3xD,YAAAloB,KAAA09E,WAMAE,gBAAA,WACA,IAAAzwC,EAAAntC,KAAA28C,SAAA/mC,KAAA,QAEA,OAAAjX,EAAA,uDACAqB,KAAA28C,SAAA5xB,mFACAoiB,EAAArG,sBAAAqG,EAAApiB,2EACA/qB,KAAA28C,SAAA/mC,KAAA,mBAAAmV,oCAMA7rB,MAAA+5E,oBAAAkB,YAAAj7E,MAAA+5E,oBAAAqE,SAAAr+E,OAAA,CACA+/E,wBAAA,EACAC,eAAA,EAKApiC,YAAA,WACA78C,KAAA0vB,OAGA1vB,KAAAg/E,uBAAAh/E,KAAA28C,SAAAhnC,SAAA,UAGA3V,KAAAi/E,cAAAj/E,KAAA28C,SAAAhnC,SAAA,aAGA3V,KAAAg/E,yBAAAh/E,KAAAi/E,eACAj/E,KAAA28C,SAAA7xB,IAAA,CACAmoC,QAAAjzD,KAAA0+E,eACAC,WAAA,YAKA3+E,KAAAg/E,wBACAh/E,KAAA+9E,2BAGA/9E,KAAAi+E,gBAMAc,OAAA,WACA/+E,KAAAk/E,sBAAAl/E,KAAAm/E,oBACAn/E,KAAAy+E,yBACAz+E,KAAAy9E,mBACAz9E,KAAAw9E,WAAAljE,SACAta,KAAAwmB,OAAA7nB,IAAA8d,IAAAzc,KAAAwmB,OAAAwT,IAAAh6B,KAAAw9E,aACAx9E,KAAAy9E,kBAAA,EACAz9E,KAAA+7E,SAAAlC,QAAA8B,aAAA,GACA37E,KAAAi+E,gBAGAj+E,KAAA0vB,QAGAwvD,mBAAA,WACA,OAAA95E,QAAA4T,QAAAhZ,KAAA28C,SAAA,mBAGAwiC,kBAAA,WACA,IAAA,IAAAz/E,EAAA,EAAAA,EAAAM,KAAA+7E,SAAAlC,QAAArzD,OAAAlmB,OAAAZ,IACA,GAAA0F,QAAAg6E,QAAAp/E,KAAAs3C,OAAAt3C,KAAAu3C,OAAAv3C,KAAA+7E,SAAAlC,QAAArzD,OAAArU,GAAAzS,IACA,OAAA,EAIA,OAAA,GAGAi+E,UAAA,WAEA,OAAA39E,KAAA+7E,SAAA7C,cAAAtjE,KAAA,gBACA6G,IAAAzc,KAAA+7E,SAAAn7D,SAAAhL,KAAA,kBAMAioE,cAAA,WACA,IAAAH,EAAA/+E,IACA0gF,EAAAr/E,KAAA+7E,SAAA7C,cAAAtjE,KAAA,gCAEA,IAAA,IAAAlW,EAAA,EAAAA,EAAA2/E,EAAA/+E,OAAAZ,IACAg+E,EAAAA,EAAAjhE,IAAA9d,EAAA,UAAA2P,SAAA+wE,EAAA3/E,KAGA,OAAAg+E,GAMAE,gBAAA,WACA,OAAAj/E,EAAA,yDAAAqB,KAAA28C,SAAAzlB,wBAMA+lB,WAAA,WACA,IAAAwgC,EAAAz9E,KAAAy9E,iBACA,GAAAA,GACA,GAAAz9E,KAAAg/E,uBAAA,CAEA,IAAAtpE,EAAA1V,KAAA28C,SAAA5gB,QAAA3lB,YAAA,UACApW,KAAA+7E,SAAAf,YAAAtlE,GAEA1V,KAAAi/E,gBAEAj/E,KAAA28C,SAAA7xB,IAAA,CAAA6zD,WAAA,UAAA1rB,QAAA,UAAAnhD,SAAA,UAGA,IAAA9R,KAAA28C,SAAA/9B,SAAA,2BAAAte,QACAN,KAAA28C,SAAAljC,QAAA,oBAAA3H,SAAA,WAKA9R,KAAA28C,SAAAjnC,EAGA1V,KAAA0nB,SAAAhS,SAEA,IAAA1V,KAAAg/E,uBAAA,CACA,IAAAM,EAAAt/E,KAAAi/E,cACAj/E,KAAA+7E,SAAAnC,QAAAj1D,OAAA,oBAAA3kB,KAAA28C,SAAA31C,KAAA,wBACAhH,KAAA+7E,SAAAvC,mBAAA70D,OAAA,eAAA3kB,KAAA28C,SAAA31C,KAAA,QAAAhI,QAAA,MAAA,mBAEAgB,KAAAi/E,gBAEAK,EAAAlpE,YAAA,UACAkpE,EAAA7lE,QAAA,oBAAArD,YAAA,WAIApW,KAAAkoB,YAAAloB,KAAA28C,UAGA38C,KAAA28C,SAAA2iC,EAGAt/E,KAAA0vB,OAEA1vB,KAAA28C,SAAA7xB,IAAA,CACAmoC,QAAAjzD,KAAA0+E,eACAC,WAAA3+E,KAAAi/E,eAAAxB,EAAA,SAAA,YAGAA,GACAz9E,KAAA28C,SAAA31C,KAAA,eAAA21E,0BC13BAz9E,MAAAyZ,YAAAvT,QAAAuV,KAAA1b,OAAA,CACA8oB,QAAA,KACAw3D,aAAA,KACAC,eAAA,KACAC,sBAAA,KAEAC,SAAA,KACAC,gBAAA,KACAp+E,KAAA,KAEA8Z,KAAA,SAAAk4D,GAsBA,OArBAvzE,KAAA+nB,QAAAppB,EAAA40E,GAGAvzE,KAAA+nB,QAAA/gB,KAAA,iBACA5B,QAAA2qE,IAAA,qDACA/vE,KAAA+nB,QAAA/gB,KAAA,eAAAwjB,WAGAxqB,KAAA+nB,QAAA/gB,KAAA,cAAAhH,MAEAA,KAAAuB,KAAAvB,KAAA4/E,UAEA,WAAA5/E,KAAAuB,MAAA,aAAAvB,KAAAuB,KACAvB,KAAAu/E,aAAAv/E,KAAA+nB,QAAA7Z,KAAA,uBAAA,IAEAlO,KAAAw/E,eAAAx/E,KAAA6/E,wBAAA7/E,KAAA+nB,QAAA/gB,KAAA,WACAhH,KAAAy/E,sBAAAz/E,KAAA6/E,wBAAA7/E,KAAA+nB,QAAA/gB,KAAA,oBAGAhH,KAAA8/E,cAEA9/E,KAAAuB,MACA,IAAA,OACAvB,KAAAwc,YAAAxc,KAAA+nB,QAAA,QAAA,kBACA,MACA,IAAA,WACA/nB,KAAAwc,YAAAxc,KAAA+nB,QAAAnS,KAAA,SAAA,SAAA,kBACA,MACA,QACA5V,KAAAwc,YAAAxc,KAAA+nB,QAAA,SAAA,kBACA/nB,KAAA+/E,mBAIAF,wBAAA,SAAA99E,GAKA,OAJAA,IAAAA,EAAA4D,MAAA,YACA5D,EAAA,IAAAA,GAGAA,GAGA69E,QAAA,WACA,IAAAI,EAAAhgF,KAAA+nB,QAAAkO,KAAA,YACA,GACA,UAAA+pD,GAAA,aAAAhgF,KAAA+nB,QAAA7Z,KAAA,SACA,aAAAlO,KAAA+nB,QAAA7Z,KAAA,SACA,WAAAlO,KAAA+nB,QAAA7Z,KAAA,QAEA,MAAA,WAGA,OAAA8xE,GACA,IAAA,SACA,MAAA,SACA,IAAA,IACA,MAAA,OACA,IAAA,WACA,MAAA,WAGA5C,QAAA6C,KAAA,2BAAAjgF,KAAA+nB,QAAA,KAGA+3D,YAAA,WACA,GAAA,WAAA9/E,KAAAuB,MAAA,aAAAvB,KAAAuB,KAAA,CACAvB,KAAAkgF,eACAlgF,KAAA0/E,SAAA/gF,EAAAqB,KAAA6/E,wBAAA7/E,KAAAu/E,aAAAv/E,KAAAkgF,sBAEAlgF,KAAAw/E,iBACAx/E,KAAA0/E,SAAA/gF,EAAAqB,KAAAw/E,iBAGAx/E,KAAAy/E,wBACAz/E,KAAA2/E,gBAAAhhF,EAAAqB,KAAAy/E,yBAKAS,aAAA,WACA,GAAA,aAAAlgF,KAAAuB,KACA,YAAA,IAAAvB,KAAA+nB,QAAAkO,KAAA,WACAj2B,KAAA+nB,QAAAkO,KAAA,WAEA,SAAAj2B,KAAA+nB,QAAA7Z,KAAA,gBAGA,IAAAiyE,EAQA,OANAA,EADA,aAAAngF,KAAAuB,KACAvB,KAAA+nB,QAAAnS,KAAA,uBAAAtR,MAEAc,QAAA4xE,gBAAAh3E,KAAA+nB,SAIA,MAAAo4D,EAAA,KAAAA,EAAAnhF,QAAA,UAAA,MAGA+gF,eAAA,WACA,WAAA//E,KAAAuB,MAAA,aAAAvB,KAAAuB,MACAvB,KAAAogF,WAAApgF,KAAA0/E,UACA1/E,KAAA8/E,cACA9/E,KAAAqgF,WAAArgF,KAAA0/E,YAEA1/E,KAAA8/E,cAEA,SAAA9/E,KAAAuB,KACAvB,KAAA+/E,eAAAO,MAAAtgF,KAAA+nB,QAAApS,SAAA,eAAA3V,KAAA+nB,QAAApS,SAAA,YAEA3V,KAAA+/E,eAAAO,QAAAtgF,KAAAkgF,eAGAlgF,KAAA+/E,eAAAO,OACAtgF,KAAAqgF,WAAArgF,KAAA0/E,UACA1/E,KAAAogF,WAAApgF,KAAA2/E,mBAEA3/E,KAAAogF,WAAApgF,KAAA0/E,UACA1/E,KAAAqgF,WAAArgF,KAAA2/E,yBAGA3/E,KAAA+/E,eAAAO,QAIAD,WAAA,SAAAtqD,GACA,GAAAA,GAAAA,EAAAz1B,OAAA,CAKA,GAJAN,KAAAqgF,WAAAE,eAAAxqD,EAAAhL,SAEAgL,EAAA3f,YAAA,UAEA,WAAApW,KAAAuB,MAAA,aAAAvB,KAAAuB,KAAA,CACA,SAAAvB,KAAAuB,OACAvB,KAAA+nB,QAAA3R,YAAA,aACApW,KAAA+nB,QAAAjW,SAAA,aAGA,IAAA,IAAApS,EAAA,EAAAA,EAAAq2B,EAAAz1B,OAAAZ,IACA,CAAA8gF,IACA,SAAAA,EAAAvqD,KAAA,cACAuqD,EAAAz1D,OAAA,QACA/qB,KAAAqgF,WAAAI,cAAAD,EAAAz1D,SACAy1D,EAAA11D,IAAA,CACAC,OAAA/qB,KAAAqgF,WAAAE,eACAnW,SAAA,WAGAoW,EAAAhpE,SAAA,QAEAgpE,EAAAhpE,SAAA,CAAAuT,OAAA/qB,KAAAqgF,WAAAI,eAAA,QAAA,WACAD,EAAA11D,IAAA,CACAC,OAAA,GACAq/C,SAAA,UAdA,CAkBAr0C,EAAA5jB,GAAAzS,WAGAM,KAAAqgF,WAAAI,qBAGAzgF,KAAAqgF,WAAAE,eAGAn7E,QAAA2xB,KAAA9f,QAAA,YAIAmpE,WAAA,SAAArqD,GACA,GAAAA,GAAAA,EAAAz1B,OACA,GAAA,WAAAN,KAAAuB,MAAA,aAAAvB,KAAAuB,KACAw0B,EAAAjkB,SAAA,cACA,CACA,SAAA9R,KAAAuB,OACAvB,KAAA+nB,QAAA3R,YAAA,YACApW,KAAA+nB,QAAAjW,SAAA,cAGA,IAAA,IAAApS,EAAA,EAAAA,EAAAq2B,EAAAz1B,OAAAZ,IACA,CAAA8gF,IACAA,EAAA7qE,SAAA,YAGA,SAAA6qE,EAAAvqD,KAAA,YACAuqD,EAAA1uE,SAAA,WAEA0uE,EAAA11D,IAAA,WAAA,UACA01D,EAAAhpE,SAAA,QACAgpE,EAAAhpE,SAAA,CAAAuT,OAAA,GAAA,QAAA,WACAy1D,EAAA1uE,SAAA,gBAVA,CAaAikB,EAAA5jB,GAAAzS,QC9MAR,MAAAsZ,KAAApT,QAAAuV,KAAA1b,OAAA,CACA2T,WAAA,KAEA4T,OAAA,KACAyL,MAAA,KACAyuD,UAAA,KACAC,cAAA,KACAC,YAAA,KAEAC,qBAAA,KACAC,+BAAA,KAEAC,cAAA,KACAC,uBAAA,KAEAC,QAAA,KACAC,OAAA,KACAC,YAAA,KACAC,YAAA,KAEAC,iBAAA,EACAC,0BAAA,EACAC,+BAAA,EAEAlmE,KAAA,SAAAga,EAAArhB,GACAhU,KAAA4S,WAAAjU,EAAA02B,GAGAr1B,KAAA4S,WAAA5L,KAAA,UACA5B,QAAA2qE,IAAA,6CACA/vE,KAAA4S,WAAA5L,KAAA,QAAAwjB,WAGAxqB,KAAA4S,WAAA5L,KAAA,OAAAhH,MAEAA,KAAA8Y,YAAA9E,EAAA9U,MAAAsZ,KAAA8C,UAGAtb,KAAAwhF,2BAAA,KACAxhF,KAAA27E,aAAA,GAAA,IAGA37E,KAAAwmB,OAAAxmB,KAAA4S,WAAAsH,SAAAla,KAAAgU,SAAAgE,cACAhY,KAAAyhF,WACAzhF,KAAA27E,aAAA,GAAA,GAEAv2E,QAAAqV,KAAAC,MAAA,KACA1a,KAAA27E,aAAA,GAAA,MAIAj0D,SAAA,SAAAuK,GACAjyB,KAAAwmB,OAAA7nB,IAAA8d,IAAAzc,KAAAwmB,OAAA/J,IAAAwV,IACAjyB,KAAAyhF,WACAzhF,KAAA27E,aAAA,GAAA,IAGAzzD,YAAA,SAAA+J,GACAjyB,KAAAwmB,OAAA7nB,IAAA8d,IAAAzc,KAAAwmB,OAAAwT,IAAA/H,IACAjyB,KAAAyhF,WACAzhF,KAAA27E,aAAA,GAAA,IAGAriD,eAAA,WACAt5B,KAAAwmB,OAAA7nB,IAAA8d,IAAAzc,KAAAwmB,QACAxmB,KAAAyhF,WACAzhF,KAAA27E,aAAA,GAAA,IAGA8F,SAAA,WAKA,IAJAzhF,KAAAyhF,SAAAv2C,EAAA,GAEAlrC,KAAAiyB,MAAA,GAEAjyB,KAAAyhF,SAAAv2C,EAAAxrC,EAAA,EAAAM,KAAAyhF,SAAAv2C,EAAAxrC,EAAAM,KAAAwmB,OAAAlmB,OAAAN,KAAAyhF,SAAAv2C,EAAAxrC,IACAM,KAAAiyB,MAAA/wB,KAAAvC,EAAAqB,KAAAwmB,OAAAxmB,KAAAyhF,SAAAv2C,EAAAxrC,YAGAM,KAAAyhF,SAAAv2C,GAGAywC,YAAA,SAAA3tD,GACA,GAAAhuB,KAAAqhF,gBAKA,OAJArhF,KAAAshF,0BAAA,OACAtzD,IACAhuB,KAAAuhF,+BAAA,IAOA,GAFAvhF,KAAAqhF,iBAAA,EAEArhF,KAAAiyB,MAAA3xB,OAaA,GARAN,KAAA27E,YAAAzwC,EAAA,GAGAlrC,KAAA27E,YAAAzwC,EAAAw2C,UAAA1hF,KAAA4S,WAAA,GAAAuuC,MAAAp2B,OACA/qB,KAAA4S,WAAA,GAAAuuC,MAAAp2B,OAAA,EACA/qB,KAAA27E,YAAAzwC,EAAAy2C,aAAA3hF,KAAA4S,WAAA,GAAA+uE,aACA3hF,KAAA4S,WAAA,GAAAuuC,MAAAp2B,OAAA/qB,KAAA27E,YAAAzwC,EAAAw2C,UAEA,IAAA1hF,KAAA27E,YAAAzwC,EAAAy2C,aAyBA,GApBA3hF,KAAAgU,SAAAiE,KACAjY,KAAA27E,YAAAzwC,EAAAw1C,UAAA1gF,KAAAgU,SAAAiE,MAEAjY,KAAA27E,YAAAzwC,EAAAw1C,UAAA/vE,KAAAC,MAAA5Q,KAAA4S,WAAAk0B,QAAA9mC,KAAAgU,SAAAmE,aAGA,OAAAnY,KAAA0gF,WAAA1gF,KAAA27E,YAAAzwC,EAAAw1C,UAAA1gF,KAAA0gF,YACA1gF,KAAA27E,YAAAzwC,EAAAw1C,UAAA/vE,KAAAC,OAAA5Q,KAAA4S,WAAAk0B,QAAA,IAAA9mC,KAAAgU,SAAAmE,cAGAnY,KAAAgU,SAAAkE,SAAAlY,KAAA27E,YAAAzwC,EAAAw1C,UAAA1gF,KAAAgU,SAAAkE,UACAlY,KAAA27E,YAAAzwC,EAAAw1C,UAAA1gF,KAAAgU,SAAAkE,UAIA,IAAAlY,KAAA27E,YAAAzwC,EAAAw1C,YACA1gF,KAAA27E,YAAAzwC,EAAAw1C,UAAA,IAIA,IAAA1yD,GAAAhuB,KAAA0gF,YAAA1gF,KAAA27E,YAAAzwC,EAAAw1C,UAAA,CAWA,GANA1gF,KAAA0gF,UAAA1gF,KAAA27E,YAAAzwC,EAAAw1C,UACA1gF,KAAA2gF,cAAA3gF,KAAAgU,SAAA4tE,QAAA5hF,KAAA0gF,UAAA,GAAA1gF,KAAA0gF,UAGA1gF,KAAAmoB,eAAAnoB,KAAA4S,WAAA,UAEA,SAAA5S,KAAAgU,SAAAqE,SAGA,IAFArY,KAAA27E,YAAAzwC,EAAA22C,UAAA,EAEA7hF,KAAA27E,YAAAzwC,EAAA22C,UAAA7hF,KAAAiyB,MAAA3xB,QAAA,CAKA,IAHAN,KAAA27E,YAAAzwC,EAAA42C,mBAAA,EACA9hF,KAAA27E,YAAAzwC,EAAA62C,SAAA,EAEA/hF,KAAA27E,YAAAzwC,EAAAxrC,EAAAM,KAAA27E,YAAAzwC,EAAA22C,UAAA7hF,KAAA27E,YAAAzwC,EAAAxrC,EAAAM,KAAA27E,YAAAzwC,EAAA22C,UAAA7hF,KAAA0gF,WAAA1gF,KAAA27E,YAAAzwC,EAAAxrC,EAAAM,KAAAiyB,MAAA3xB,OAAAN,KAAA27E,YAAAzwC,EAAAxrC,IACAM,KAAA27E,YAAAzwC,EAAA82C,WAAAhiF,KAAAiyB,MAAAjyB,KAAA27E,YAAAzwC,EAAAxrC,GAAAqrB,OAAA,QAAAA,SAEA/qB,KAAA27E,YAAAzwC,EAAA82C,WAAAhiF,KAAA27E,YAAAzwC,EAAA42C,oBACA9hF,KAAA27E,YAAAzwC,EAAA42C,kBAAA9hF,KAAA27E,YAAAzwC,EAAA82C,YAGAhiF,KAAA27E,YAAAzwC,EAAA62C,WAYA,IATA/hF,KAAAgU,SAAAuE,aACAvY,KAAA27E,YAAAzwC,EAAA+2C,UAAAjiF,KAAA27E,YAAAzwC,EAAA42C,kBAAA9hF,KAAAgU,SAAAuE,WAEAvY,KAAA27E,YAAAzwC,EAAA+2C,YACAjiF,KAAA27E,YAAAzwC,EAAA42C,mBAAA9hF,KAAAgU,SAAAuE,WAAAvY,KAAA27E,YAAAzwC,EAAA+2C,YAKAjiF,KAAA27E,YAAAzwC,EAAAxrC,EAAAM,KAAA27E,YAAAzwC,EAAA22C,UAAA7hF,KAAA27E,YAAAzwC,EAAAxrC,EAAAM,KAAA27E,YAAAzwC,EAAA22C,UAAA7hF,KAAA0gF,WAAA1gF,KAAA27E,YAAAzwC,EAAAxrC,EAAAM,KAAAiyB,MAAA3xB,OAAAN,KAAA27E,YAAAzwC,EAAAxrC,IACAM,KAAAiyB,MAAAjyB,KAAA27E,YAAAzwC,EAAAxrC,GAAAqrB,OAAA/qB,KAAA27E,YAAAzwC,EAAA42C,mBAIA9hF,KAAA27E,YAAAzwC,EAAA22C,WAAA7hF,KAAA0gF,eAMA,GAHA1gF,KAAAmoB,eAAAnoB,KAAAwmB,OAAA,UAGA,IAAAxmB,KAAA0gF,UACA1gF,KAAA4S,WAAAmY,OAAA,QACA/qB,KAAAwmB,OACAmU,OACA7P,IAAA,CACAwR,SAAA,WACAwK,MAAA,OACA7P,IAAA,IAEAnM,IAAA5rB,MAAAuY,KAAA,OACA,CAkBA,IAjBAzX,KAAAwmB,OAAAsE,IAAA,WAAA,YACA9qB,KAAA4gF,YAAA,IAAA5gF,KAAA0gF,UAIA1gF,KAAAihF,QAAA,GAEAjhF,KAAA+gF,cAAA,GACA/gF,KAAAghF,uBAAA,GAKAhhF,KAAA6gF,qBAAA,GACA7gF,KAAA8gF,+BAAA,GACA9gF,KAAAkiF,qBAAA,GAEAliF,KAAA27E,YAAAzwC,EAAAlZ,KAAA,EAAAhyB,KAAA27E,YAAAzwC,EAAAlZ,KAAAhyB,KAAAiyB,MAAA3xB,OAAAN,KAAA27E,YAAAzwC,EAAAlZ,OAkBA,IAjBAhyB,KAAA6gF,qBAAA7gF,KAAA27E,YAAAzwC,EAAAlZ,MAAA,GACAhyB,KAAA8gF,+BAAA9gF,KAAA27E,YAAAzwC,EAAAlZ,MAAA,GACAhyB,KAAAkiF,qBAAAliF,KAAA27E,YAAAzwC,EAAAlZ,MAAA,GAEAhyB,KAAA27E,YAAAzwC,EAAAif,MAAAnqD,KAAAiyB,MAAAjyB,KAAA27E,YAAAzwC,EAAAlZ,MAAA2I,OACA36B,KAAA27E,YAAAzwC,EAAAi3C,cAAA,UAAAniF,KAAA27E,YAAAzwC,EAAAif,MAAAnjD,KAAA,YACAhH,KAAA27E,YAAAzwC,EAAAk3C,aAAA,SAAApiF,KAAA27E,YAAAzwC,EAAAif,MAAAnjD,KAAA,YACAhH,KAAA27E,YAAAzwC,EAAAm3C,WAAAriF,KAAA27E,YAAAzwC,EAAAif,MAAAnjD,KAAA,WAAAhH,KAAA27E,YAAAzwC,EAAAif,MAAAnjD,KAAA,WAAAhH,KAAA27E,YAAAzwC,EAAAif,MAAAnjD,KAAA,eAAAhH,KAAA27E,YAAAzwC,EAAAif,MAAAnjD,KAAA,eAAA,EACAhH,KAAA27E,YAAAzwC,EAAAo3C,WAAAtiF,KAAA27E,YAAAzwC,EAAAif,MAAAnjD,KAAA,WAAAhH,KAAA27E,YAAAzwC,EAAAif,MAAAnjD,KAAA,WAAAhH,KAAA27E,YAAAzwC,EAAAif,MAAAnjD,KAAA,eAAAhH,KAAA27E,YAAAzwC,EAAAif,MAAAnjD,KAAA,eAAAhH,KAAA0gF,UAEA1gF,KAAA27E,YAAAzwC,EAAAm3C,WAAAriF,KAAA0gF,YACA1gF,KAAA27E,YAAAzwC,EAAAm3C,WAAAriF,KAAA0gF,WAEA1gF,KAAA27E,YAAAzwC,EAAAo3C,WAAAtiF,KAAA0gF,YACA1gF,KAAA27E,YAAAzwC,EAAAo3C,WAAAtiF,KAAA0gF,WAGA1gF,KAAA27E,YAAAzwC,EAAAq3C,QAAAviF,KAAA27E,YAAAzwC,EAAAm3C,WAAAriF,KAAA27E,YAAAzwC,EAAAq3C,SAAAviF,KAAA27E,YAAAzwC,EAAAo3C,WAAAtiF,KAAA27E,YAAAzwC,EAAAq3C,UAmBA,IAjBAviF,KAAA27E,YAAAzwC,EAAAif,MAAAr/B,IAAA,QAAA9qB,KAAAwiF,gBAAAxiF,KAAA27E,YAAAzwC,EAAAq3C,UACAviF,KAAAkiF,qBAAAliF,KAAA27E,YAAAzwC,EAAAlZ,MAAAhyB,KAAA27E,YAAAzwC,EAAAq3C,SAAAviF,KAAA27E,YAAAzwC,EAAAif,MAAAjzB,cAEAl3B,KAAA6gF,qBAAA7gF,KAAA27E,YAAAzwC,EAAAlZ,MAAA9wB,KAAAlB,KAAA27E,YAAAzwC,EAAAq3C,SACAviF,KAAA8gF,+BAAA9gF,KAAA27E,YAAAzwC,EAAAlZ,MAAAhyB,KAAA27E,YAAAzwC,EAAAq3C,SAAA,GAEAviF,KAAA27E,YAAAzwC,EAAAk3C,cACApiF,KAAA27E,YAAAzwC,EAAAu3C,YAAA,EACAziF,KAAA27E,YAAAzwC,EAAAw3C,YAAA,GACA1iF,KAAA27E,YAAAzwC,EAAAi3C,eACAniF,KAAA27E,YAAAzwC,EAAAu3C,YAAAziF,KAAA0gF,UAAA1gF,KAAA27E,YAAAzwC,EAAAq3C,QACAviF,KAAA27E,YAAAzwC,EAAAw3C,YAAA1iF,KAAA27E,YAAAzwC,EAAAu3C,cAEAziF,KAAA27E,YAAAzwC,EAAAu3C,YAAA,EACAziF,KAAA27E,YAAAzwC,EAAAw3C,YAAA1iF,KAAA0gF,UAAA1gF,KAAA27E,YAAAzwC,EAAAq3C,SAGAviF,KAAA27E,YAAAzwC,EAAA5O,SAAAt8B,KAAA27E,YAAAzwC,EAAAu3C,YAAAziF,KAAA27E,YAAAzwC,EAAA5O,UAAAt8B,KAAA27E,YAAAzwC,EAAAw3C,YAAA1iF,KAAA27E,YAAAzwC,EAAA5O,WACAt8B,KAAA8gF,+BAAA9gF,KAAA27E,YAAAzwC,EAAAlZ,MAAAhyB,KAAA27E,YAAAzwC,EAAAq3C,SAAArhF,KAAAlB,KAAA27E,YAAAzwC,EAAA5O,UASA,IAFAt8B,KAAA27E,YAAAzwC,EAAAy3C,WAAA,GAEA3iF,KAAA27E,YAAAzwC,EAAAxrC,EAAA,EAAAM,KAAA27E,YAAAzwC,EAAAxrC,EAAAM,KAAA0gF,UAAA1gF,KAAA27E,YAAAzwC,EAAAxrC,IACAM,KAAA27E,YAAAzwC,EAAAy3C,WAAAzhF,KAAA,GAUA,IAPAlB,KAAA4iF,cAAA,EAAA,GAAA,GAAA5iF,KAAA27E,YAAAzwC,EAAAy3C,WAAA,GAKA3iF,KAAA27E,YAAAzwC,EAAA23C,gBAAA,GAEA7iF,KAAA27E,YAAAzwC,EAAAxrC,EAAA,EAAAM,KAAA27E,YAAAzwC,EAAAxrC,EAAAM,KAAAihF,QAAA3gF,OAAAN,KAAA27E,YAAAzwC,EAAAxrC,IAGA,IAFAM,KAAA27E,YAAAzwC,EAAA23C,gBAAA7iF,KAAA27E,YAAAzwC,EAAAxrC,GAAA,EAEAM,KAAA27E,YAAAzwC,EAAAqqB,EAAA,EAAAv1D,KAAA27E,YAAAzwC,EAAAqqB,EAAAv1D,KAAA0gF,UAAA1gF,KAAA27E,YAAAzwC,EAAAqqB,IACAv1D,KAAAihF,QAAAjhF,KAAA27E,YAAAzwC,EAAAxrC,GAAAijF,WAAA3iF,KAAA27E,YAAAzwC,EAAAqqB,IACAv1D,KAAA27E,YAAAzwC,EAAA23C,gBAAA7iF,KAAA27E,YAAAzwC,EAAAxrC,KAQA,IAHAM,KAAA27E,YAAAzwC,EAAA43C,iBAAAnyE,KAAA6Y,IAAAm2B,MAAA,KAAA3/C,KAAA27E,YAAAzwC,EAAA23C,iBAGA7iF,KAAA27E,YAAAzwC,EAAAxrC,EAAAM,KAAAihF,QAAA3gF,OAAA,EAAAN,KAAA27E,YAAAzwC,EAAAxrC,GAAA,EAAAM,KAAA27E,YAAAzwC,EAAAxrC,IACAM,KAAA27E,YAAAzwC,EAAA23C,gBAAA7iF,KAAA27E,YAAAzwC,EAAAxrC,KAAAM,KAAA27E,YAAAzwC,EAAA43C,kBACA9iF,KAAAihF,QAAA3xE,OAAAtP,KAAA27E,YAAAzwC,EAAAxrC,EAAA,GAOA,IAFAM,KAAA27E,YAAAzwC,EAAA63C,cAAA,GAEA/iF,KAAA27E,YAAAzwC,EAAAxrC,EAAA,EAAAM,KAAA27E,YAAAzwC,EAAAxrC,EAAAM,KAAAihF,QAAA3gF,OAAAN,KAAA27E,YAAAzwC,EAAAxrC,IACAM,KAAA27E,YAAAzwC,EAAA63C,cAAA7hF,KAAAyP,KAAA6Y,IAAAm2B,MAAA,KAAA3/C,KAAAihF,QAAAjhF,KAAA27E,YAAAzwC,EAAAxrC,GAAAijF,aAOA,IAJA3iF,KAAA27E,YAAAzwC,EAAA83C,eAAAryE,KAAAkhB,IAAA8tB,MAAA,KAAA3/C,KAAA27E,YAAAzwC,EAAA63C,eACA/iF,KAAA27E,YAAAzwC,EAAA+3C,gBAAA,GACAjjF,KAAA27E,YAAAzwC,EAAAg4C,YAAA,GAEAljF,KAAA27E,YAAAzwC,EAAAxrC,EAAA,EAAAM,KAAA27E,YAAAzwC,EAAAxrC,EAAAM,KAAA27E,YAAAzwC,EAAA63C,cAAAziF,OAAAN,KAAA27E,YAAAzwC,EAAAxrC,IACA,GAAAM,KAAA27E,YAAAzwC,EAAA63C,cAAA/iF,KAAA27E,YAAAzwC,EAAAxrC,KAAAM,KAAA27E,YAAAzwC,EAAA83C,eAAA,CAMA,IALAhjF,KAAA27E,YAAAzwC,EAAA+3C,gBAAA/hF,KAAAlB,KAAAihF,QAAAjhF,KAAA27E,YAAAzwC,EAAAxrC,IAGAM,KAAA27E,YAAAzwC,EAAAi4C,WAAAnjF,KAAAihF,QAAAjhF,KAAA27E,YAAAzwC,EAAAxrC,GAAAyjF,WAEAnjF,KAAA27E,YAAAzwC,EAAAqqB,EAAA,EAAAv1D,KAAA27E,YAAAzwC,EAAAqqB,EAAAv1D,KAAA0gF,UAAA1gF,KAAA27E,YAAAzwC,EAAAqqB,IACAv1D,KAAA27E,YAAAzwC,EAAAi4C,YAAAnjF,KAAA27E,YAAAzwC,EAAA83C,eAAAhjF,KAAAihF,QAAAjhF,KAAA27E,YAAAzwC,EAAAxrC,GAAAijF,WAAA3iF,KAAA27E,YAAAzwC,EAAAqqB,GAGAv1D,KAAA27E,YAAAzwC,EAAAg4C,YAAAhiF,KAAAlB,KAAA27E,YAAAzwC,EAAAi4C,YAQA,IAHAnjF,KAAAkhF,OAAAlhF,KAAA27E,YAAAzwC,EAAA+3C,gBAAAtkF,EAAAsO,QAAA0D,KAAAkhB,IAAA8tB,MAAA,KAAA3/C,KAAA27E,YAAAzwC,EAAAg4C,aAAAljF,KAAA27E,YAAAzwC,EAAAg4C,cAGAljF,KAAA27E,YAAAzwC,EAAAxrC,EAAA,EAAAM,KAAA27E,YAAAzwC,EAAAxrC,EAAAM,KAAAiyB,MAAA3xB,OAAAN,KAAA27E,YAAAzwC,EAAAxrC,IACAM,KAAA27E,YAAAzwC,EAAApgB,IAAA,CACAgc,MAAA9mC,KAAAwiF,gBAAAxiF,KAAAkhF,OAAAkC,SAAApjF,KAAA27E,YAAAzwC,EAAAxrC,KAEAM,KAAA27E,YAAAzwC,EAAApgB,IAAA5rB,MAAAuY,MAAAzX,KAAAqjF,kBAAArjF,KAAAkhF,OAAAoC,UAAAtjF,KAAA27E,YAAAzwC,EAAAxrC,IACAM,KAAAiyB,MAAAjyB,KAAA27E,YAAAzwC,EAAAxrC,GAAAorB,IAAA9qB,KAAA27E,YAAAzwC,EAAApgB,KAIA9qB,KAAAujF,kBACAvjF,KAAA4S,WAAAmY,OAAA,QACA/qB,KAAAwmB,OAAAsE,IAAA,CACAwR,SAAA,WACArF,IAAA,EACAusD,gBAAAxjF,KAAAgU,SAAA4tE,OAAA,SAGA5hF,KAAAwmB,OAAAsE,IAAA,WAAA,YAGA9qB,KAAAyjF,gBAGAzjF,KAAAwc,YAAAxc,KAAAwmB,OAAA,SAAA,iBAKAxmB,KAAA0jF,sBAGA1jF,KAAAwc,YAAAxc,KAAA4S,WAAA,SAAA5S,KAAAwhF,4BAEAxhF,KAAA2jF,qBAxNA3jF,KAAA0jF,2BAzBA1jF,KAAA0jF,2BAbA1jF,KAAA0jF,uBAiQAA,oBAAA,WAQA,QANA,IAAA1jF,KAAA27E,YAAAzwC,UACAlrC,KAAA27E,YAAAzwC,EAGAlrC,KAAAqhF,iBAAA,EAEArhF,KAAAshF,yBAAA,CACA,IAAAtzD,EAAAhuB,KAAAuhF,8BACAvhF,KAAAshF,0BAAA,EACAthF,KAAAuhF,+BAAA,EAEAn8E,QAAAyZ,sBAAA,KACA7e,KAAA27E,YAAA3tD,OAKA41D,aAAA,SAAArB,GACA,OAAAviF,KAAA4gF,YAAA2B,GAGAC,gBAAA,SAAAD,GACA,MAAA,QAAAviF,KAAA4jF,aAAArB,GAAA,OAAAviF,KAAA2gF,cAAA,OAGAkD,iBAAA,SAAAtB,GACA,OAAAviF,KAAA4jF,aAAArB,GAAA,IAAAviF,KAAA4S,WAAAk0B,QAAA9mC,KAAA2gF,eAGA0C,kBAAA,SAAA/mD,GACA,MAAA,SAAAt8B,KAAA4jF,aAAA,GAAA,QAAA5jF,KAAAgU,SAAA4tE,OAAA5hF,KAAA2gF,eAAA,SAAArkD,EAAA,KAGAwnD,mBAAA,SAAAxnD,GACA,OAAAt8B,KAAA4jF,aAAA,GAAA,IAAA5jF,KAAA4S,WAAAk0B,SAAA9mC,KAAAgU,SAAA4tE,OAAA5hF,KAAA2gF,gBAAArkD,GAGAsmD,cAAA,SAAA5wD,EAAA+xD,EAAAC,EAAAC,EAAAC,GACA,IAAAhlF,MAAAsZ,KAAA2rE,gBAAAnkF,MAAA4iF,cAAA5wD,EAAA+xD,EAAAC,EAAAC,EAAAC,IAGAX,eAAA,WAGA,IAFAvjF,KAAAujF,eAAAr4C,EAAA,GAEAlrC,KAAAujF,eAAAr4C,EAAAxrC,EAAA,EAAAM,KAAAujF,eAAAr4C,EAAAxrC,EAAAM,KAAAkhF,OAAAoC,UAAAhjF,OAAAN,KAAAujF,eAAAr4C,EAAAxrC,IACA,GAAA,IAAAM,KAAAkhF,OAAAoC,UAAAtjF,KAAAujF,eAAAr4C,EAAAxrC,GAEA,cADAM,KAAAujF,eAAAr4C,GACA,EAKA,cADAlrC,KAAAujF,eAAAr4C,GACA,GAGAu4C,cAAA,WAKA,IAJAzjF,KAAAyjF,cAAAv4C,EAAA,GAEAlrC,KAAAyjF,cAAAv4C,EAAAy3C,WAAA,GAEA3iF,KAAAyjF,cAAAv4C,EAAAxrC,EAAA,EAAAM,KAAAyjF,cAAAv4C,EAAAxrC,EAAAM,KAAA0gF,UAAA1gF,KAAAyjF,cAAAv4C,EAAAxrC,IACAM,KAAAyjF,cAAAv4C,EAAAy3C,WAAAzhF,KAAA,GAGA,IAAAlB,KAAAyjF,cAAAv4C,EAAAxrC,EAAA,EAAAM,KAAAyjF,cAAAv4C,EAAAxrC,EAAAM,KAAAiyB,MAAA3xB,OAAAN,KAAAyjF,cAAAv4C,EAAAxrC,IAAA,CAIA,IAHAM,KAAAyjF,cAAAv4C,EAAAk5C,UAAApkF,KAAAkhF,OAAAoC,UAAAtjF,KAAAyjF,cAAAv4C,EAAAxrC,GAAAM,KAAAkhF,OAAAkC,SAAApjF,KAAAyjF,cAAAv4C,EAAAxrC,GAAA,EACAM,KAAAyjF,cAAAv4C,EAAAm5C,mBAAA,GAEArkF,KAAAyjF,cAAAv4C,EAAAinC,IAAAnyE,KAAAkhF,OAAAoC,UAAAtjF,KAAAyjF,cAAAv4C,EAAAxrC,GAAAM,KAAAyjF,cAAAv4C,EAAAinC,KAAAnyE,KAAAyjF,cAAAv4C,EAAAk5C,UAAApkF,KAAAyjF,cAAAv4C,EAAAinC,MACAnyE,KAAAyjF,cAAAv4C,EAAAm5C,mBAAAnjF,KAAAlB,KAAAyjF,cAAAv4C,EAAAy3C,WAAA3iF,KAAAyjF,cAAAv4C,EAAAinC,MAWA,IARAnyE,KAAAyjF,cAAAv4C,EAAAjU,IAAAtmB,KAAA6Y,IAAAm2B,MAAA,KAAA3/C,KAAAyjF,cAAAv4C,EAAAm5C,oBACArkF,KAAAyjF,cAAAv4C,EAAAjU,IAAA,IACAj3B,KAAAyjF,cAAAv4C,EAAAjU,KAAAj3B,KAAAgU,SAAA4tE,QAGA5hF,KAAAiyB,MAAAjyB,KAAAyjF,cAAAv4C,EAAAxrC,GAAAorB,IAAA,MAAA9qB,KAAAyjF,cAAAv4C,EAAAjU,KAGAj3B,KAAAyjF,cAAAv4C,EAAAinC,IAAAnyE,KAAAkhF,OAAAoC,UAAAtjF,KAAAyjF,cAAAv4C,EAAAxrC,GAAAM,KAAAyjF,cAAAv4C,EAAAinC,KAAAnyE,KAAAyjF,cAAAv4C,EAAAk5C,UAAApkF,KAAAyjF,cAAAv4C,EAAAinC,MACAnyE,KAAAyjF,cAAAv4C,EAAAy3C,WAAA3iF,KAAAyjF,cAAAv4C,EAAAinC,KAAAnyE,KAAAyjF,cAAAv4C,EAAAjU,IAAAj3B,KAAAkiF,qBAAAliF,KAAAyjF,cAAAv4C,EAAAxrC,GAAAM,KAAAkhF,OAAAkC,SAAApjF,KAAAyjF,cAAAv4C,EAAAxrC,IAKAM,KAAA4S,WAAAmY,OAAApa,KAAA6Y,IAAAm2B,MAAA,KAAA3/C,KAAAyjF,cAAAv4C,EAAAy3C,oBAEA3iF,KAAAyjF,cAAAv4C,GAGAo5C,aAAA,SAAAjrE,GACArZ,KAAAskF,aAAAp5C,EAAA,GAGA7xB,EAAA2X,kBAEAhxB,KAAAskF,aAAAp5C,EAAAlZ,KAAArzB,EAAAsO,QAAAoM,EAAAE,cAAAvZ,KAAAwmB,SAEA,IAAAxmB,KAAAskF,aAAAp5C,EAAAlZ,OAEAhyB,KAAAskF,aAAAp5C,EAAAq5C,UAAAvkF,KAAAiyB,MAAAjyB,KAAAskF,aAAAp5C,EAAAlZ,MAAAkF,cAEAl3B,KAAAskF,aAAAp5C,EAAAq5C,YAAAvkF,KAAAkiF,qBAAAliF,KAAAskF,aAAAp5C,EAAAlZ,MAAAhyB,KAAAkhF,OAAAkC,SAAApjF,KAAAskF,aAAAp5C,EAAAlZ,SACAhyB,KAAAkiF,qBAAAliF,KAAAskF,aAAAp5C,EAAAlZ,MAAAhyB,KAAAkhF,OAAAkC,SAAApjF,KAAAskF,aAAAp5C,EAAAlZ,OAAAhyB,KAAAskF,aAAAp5C,EAAAq5C,UACAvkF,KAAAyjF,eAAA,YAIAzjF,KAAAskF,aAAAp5C,GAGAy4C,cAAA,WACA3jF,KAAAiX,QAAA,eACAjX,KAAAgU,SAAA2vE,kBAEA,CACAroE,SAAA,CACAtD,aAAA,QACAC,KAAA,KACAC,QAAA,KACAC,YAAA,IACAypE,OAAA,GACAvpE,SAAA,MACAC,SAAA,MACAC,WAAA,KAEAorE,cAAAhlF,EAAAwhB,QAIAjhB,MAAAsZ,KAAA2rE,gBAAA/+E,QAAAuV,KAAA1b,OAAA,CACA4T,KAAA,KACAq4B,EAAA,KAEA7vB,KAAA,SAAAxI,GACA7S,KAAA6S,KAAAA,GAGA+vE,cAAA,SAAA5wD,EAAA+xD,EAAAC,EAAAC,EAAAC,GAIA,IAHAlkF,KAAAkrC,EAAA,GAGAlrC,KAAAkrC,EAAArpC,EAAA,EAAA7B,KAAAkrC,EAAArpC,EAAA7B,KAAA6S,KAAAguE,qBAAA7uD,GAAA1xB,OAAAN,KAAAkrC,EAAArpC,IAAA,CAQA,IAPA7B,KAAAkrC,EAAAq3C,QAAAviF,KAAA6S,KAAAguE,qBAAA7uD,GAAAhyB,KAAAkrC,EAAArpC,GAKA7B,KAAAkrC,EAAAs5C,4BAAA,GAEAxkF,KAAAkrC,EAAA9oC,EAAA,EAAApC,KAAAkrC,EAAA9oC,EAAApC,KAAA6S,KAAAiuE,+BAAA9uD,GAAAhyB,KAAAkrC,EAAAq3C,SAAAjiF,OAAAN,KAAAkrC,EAAA9oC,IAAA,CAMA,IALApC,KAAAkrC,EAAA5O,SAAAt8B,KAAA6S,KAAAiuE,+BAAA9uD,GAAAhyB,KAAAkrC,EAAAq3C,SAAAviF,KAAAkrC,EAAA9oC,GAEApC,KAAAkrC,EAAAu5C,sBAAA,GACAzkF,KAAAkrC,EAAAk5C,UAAApkF,KAAAkrC,EAAA5O,SAAAt8B,KAAAkrC,EAAAq3C,QAAA,EAEAviF,KAAAkrC,EAAAinC,IAAAnyE,KAAAkrC,EAAA5O,SAAAt8B,KAAAkrC,EAAAinC,KAAAnyE,KAAAkrC,EAAAk5C,UAAApkF,KAAAkrC,EAAAinC,MACAnyE,KAAAkrC,EAAAu5C,sBAAAvjF,KAAA+iF,EAAAjkF,KAAAkrC,EAAAinC,MAGAnyE,KAAAkrC,EAAAs5C,4BAAAxkF,KAAAkrC,EAAA9oC,GAAAuO,KAAA6Y,IAAAm2B,MAAA,KAAA3/C,KAAAkrC,EAAAu5C,uBAoBA,IAhBAzkF,KAAAkrC,EAAA9oC,EAAAzD,EAAAsO,QAAA0D,KAAAkhB,IAAA8tB,MAAA,KAAA3/C,KAAAkrC,EAAAs5C,6BAAAxkF,KAAAkrC,EAAAs5C,6BACAxkF,KAAAkrC,EAAA5O,SAAAt8B,KAAA6S,KAAAiuE,+BAAA9uD,GAAAhyB,KAAAkrC,EAAAq3C,SAAAviF,KAAAkrC,EAAA9oC,GAGApC,KAAAkrC,EAAAo4C,UAAAS,EAAAhjF,MAAA,GACAf,KAAAkrC,EAAAk4C,SAAAY,EAAAjjF,MAAA,GACAf,KAAAkrC,EAAAy3C,WAAAsB,EAAAljF,MAAA,GACAf,KAAAkrC,EAAAi4C,WAAAe,EAEAlkF,KAAAkrC,EAAAo4C,UAAApiF,KAAAlB,KAAAkrC,EAAA5O,UACAt8B,KAAAkrC,EAAAk4C,SAAAliF,KAAAlB,KAAAkrC,EAAAq3C,SAGAviF,KAAAkrC,EAAAw5C,iBAAA1kF,KAAAkrC,EAAAs5C,4BAAAxkF,KAAAkrC,EAAA9oC,GACApC,KAAAkrC,EAAAk5C,UAAApkF,KAAAkrC,EAAA5O,SAAAt8B,KAAAkrC,EAAAq3C,QAAA,EAEAviF,KAAAkrC,EAAAinC,IAAAnyE,KAAAkrC,EAAA5O,SAAAt8B,KAAAkrC,EAAAinC,KAAAnyE,KAAAkrC,EAAAk5C,UAAApkF,KAAAkrC,EAAAinC,MACAnyE,KAAAkrC,EAAAi4C,YAAAnjF,KAAAkrC,EAAAw5C,iBAAA1kF,KAAAkrC,EAAAy3C,WAAA3iF,KAAAkrC,EAAAinC,KACAnyE,KAAAkrC,EAAAy3C,WAAA3iF,KAAAkrC,EAAAinC,KAAAnyE,KAAAkrC,EAAAw5C,iBAAA1kF,KAAA6S,KAAAqvE,qBAAAlwD,GAAAhyB,KAAAkrC,EAAAq3C,SAIAvwD,IAAAhyB,KAAA6S,KAAAof,MAAA3xB,OAAA,EACAN,KAAA6S,KAAAouE,QAAA//E,KAAA,CACAoiF,UAAAtjF,KAAAkrC,EAAAo4C,UACAF,SAAApjF,KAAAkrC,EAAAk4C,SACAT,WAAA3iF,KAAAkrC,EAAAy3C,WACAQ,WAAAnjF,KAAAkrC,EAAAi4C,aAIAnjF,KAAA6S,KAAA+vE,cAAA5wD,EAAA,EAAAhyB,KAAAkrC,EAAAo4C,UAAAtjF,KAAAkrC,EAAAk4C,SAAApjF,KAAAkrC,EAAAy3C,WAAA3iF,KAAAkrC,EAAAi4C,mBAIAnjF,KAAAkrC,KCriBAhsC,MAAAw0E,gBAAAx0E,MAAAo/B,mBAAAr/B,OAAA,CACAmgC,oBAAA,SAAAF,GAEA,IAAArJ,EAAAqJ,EAAAlgC,QAAA,aAAA,IAMA62B,GAHAA,EAAAA,EAAA72B,QAAA,yBAAA,KAGA4Q,cAGAimB,EAAA32B,MAAAgS,YAAA2kB,GAEA71B,KAAAgU,SAAA2/D,qBAEA99C,EAAAA,EAAA72B,QAAA,WAAA,KAIA,IAAA2lF,EAAAzlF,MAAA+P,YAAA4mB,EAAA10B,MAAA,eAGA,GAFA00B,EAAA,GAEA,UAAA32B,MAAA0lF,aACA,OAAAD,EAAAlkF,KAAA,KAIA,IAAA,IAAAf,EAAA,EAAAA,EAAAilF,EAAArkF,OAAAZ,IACA,WAAAR,MAAA0lF,cAAA,IAAAllF,EACAm2B,GAAA8uD,EAAAjlF,GAEAm2B,GAAA8uD,EAAAjlF,GAAA+P,OAAA,GAAAC,cAAAi1E,EAAAjlF,GAAAiC,OAAA,GAIA,OAAAk0B,KCnCA32B,MAAA2lF,YAAAz/E,QAAAuV,KAAA1b,OAAA,CACA2T,WAAA,KACAqoC,YAAA,KACAF,SAAA,KAEA1/B,KAAA,SAAArH,GACAhU,KAAA8Y,YAAA9E,EAAA9U,MAAA2lF,YAAAvpE,UACAtb,KAAA8kF,mBAGAA,gBAAA,WACA9kF,KAAA4S,WAAAjU,EAAAqB,KAAAgU,SAAA+wE,mBACA/kF,KAAAi7C,YAAA,IAAA/7C,MAAAoiD,YAAA3iD,EAAA,sCAAA2P,SAAAtO,KAAA4S,aAEA,IAAA1L,EAAA,CACA5B,IAAApG,MAAAmH,aAAArG,KAAAgU,SAAAgxE,cACAt9B,SAAA1nD,KAAAgU,SAAAixE,eACA1jC,UAAAvhD,KAAA4S,WAAAgD,KAAA5V,KAAAgU,SAAAkxE,mBACA53E,UAAAtN,KAAAgU,SAAAmxE,sBAIA,IAAAjmF,MAAA0H,oBAAA,IAAA1H,MAAA2H,iBAEAK,EAAAwgD,SAAAxoD,MAAA0H,eAAA1H,MAAA2H,gBAGAK,EAAAu6C,OAAA,GACAv6C,EAAAu6C,OAAAC,gBAAA1hD,KAAA2hD,eAAA1lC,KAAAjc,MACAkH,EAAAu6C,OAAAG,sBAAA5hD,KAAA6hD,kBAAA5lC,KAAAjc,MACAkH,EAAAu6C,OAAAK,eAAA9hD,KAAA+hD,kBAAA9lC,KAAAjc,MACAkH,EAAAu6C,OAAA2jC,eAAAplF,KAAAqlF,eAAAppE,KAAAjc,MAEAA,KAAA+6C,SAAA,IAAA77C,MAAAgjD,SAAAliD,KAAA4S,WAAA1L,GAEAlH,KAAAslF,eAGAA,YAAA,WACAtlF,KAAA4S,WAAAgD,KAAA5V,KAAAgU,SAAAuxE,sBAAAnsE,GAAA,QAAAC,IACArZ,KAAA4S,WAAAgD,KAAA5V,KAAAgU,SAAAkxE,mBAAAjuE,QAAA,WAGAjX,KAAA4S,WAAAgD,KAAA5V,KAAAgU,SAAAwxE,sBAAApsE,GAAA,QAAAC,IACAxC,QAAA3X,MAAAS,EAAA,MAAA,kDACAhB,EAAA0a,EAAAE,eAAA6K,SAAA/R,OAAA,sCACAnT,MAAA4H,kBAAA9G,KAAAgU,SAAAutB,aAAAvhC,KAAAgU,SAAAixE,eAAA,CAAAx6E,EAAA5C,KACA,YAAAA,GACA7H,KAAAylF,aAAAh7E,SAOAg7E,aAAA,SAAAh7E,GACA9L,EAAAqB,KAAAgU,SAAA+wE,mBAAAtuE,YAAAhM,EAAA1L,MACAiB,KAAAgU,SAAA0xE,oBAAAj7E,GACAzK,KAAA8kF,mBAMAnjC,eAAA,SAAA1gB,GACAjhC,KAAAi7C,YAAAJ,aAAA/vB,IAAA,CACAmM,IAAAtmB,KAAAK,MAAAhR,KAAA4S,WAAAskB,cAAA,GAAA,IAGAl3B,KAAA4S,WAAAd,SAAA,aACA9R,KAAAi7C,YAAAqD,mBACAt+C,KAAAi7C,YAAAuD,mBAMAqD,kBAAA,SAAA5gB,EAAAj6B,GACA,IAAA07C,EAAAxgD,SAAA8E,EAAA27C,OAAA37C,EAAA0qB,MAAA,IAAA,IACA1xB,KAAAi7C,YAAA2H,sBAAAF,IAMAX,kBAAA,SAAA9gB,EAAAj6B,GACA,GAAAA,EAAAyK,OAAA7J,MACAM,MAAAlB,EAAAyK,OAAA7J,WACA,CACAjJ,EAAAqI,EAAAyK,OAAA1S,MACAiB,KAAAylF,aAAAz+E,EAAAyK,QAIAzR,KAAA+6C,SAAAiI,iBACAhjD,KAAAi7C,YAAAiE,kBACAl/C,KAAA4S,WAAAwD,YAAA,eAOAivE,eAAA,SAAApkD,EAAAj6B,GACAA,EAAAM,MAAAmkD,aAAA7jD,QACAM,MAAAlB,EAAAM,MAAAmkD,aAAA7jD,OACA5H,KAAA4S,WAAAwD,YAAA,aACApW,KAAAi7C,YAAAiE,kBACAl/C,KAAAi7C,YAAAqD,sBAGA,CACAhjC,SAAA,CACA2pE,eAAA,GACAD,aAAA,GACAzjD,aAAA,GACA2jD,kBAAA,GAEAQ,oBAAA/mF,EAAAwhB,KACA4kE,kBAAA,KAEAQ,qBAAA,KACAC,qBAAA,KAEAL,gBAAA,WC7HAjmF,MAAAuZ,SAAArT,QAAAuV,KAAA1b,OAAA,CACA0mF,MAAA,KACAnmB,QAAA,KACApkD,IAAA,KAEAC,KAAA,SAAAkS,GAoBA,GAnBAvtB,KAAA2lF,MAAAhnF,EAAA4uB,GAEAvtB,KAAA2lF,MAAA3+E,KAAA,aACA5B,QAAA2qE,IAAA,mDACA/vE,KAAAw/D,QAAAx/D,KAAA2lF,MAAA3+E,KAAA,YAAAw4D,QACAx/D,KAAA2lF,MAAA3+E,KAAA,YAAAwjB,YAEAxqB,KAAAw/D,QAAAx/D,KAAA2lF,MAAA5mF,OACAiB,KAAA2lF,MACA5mF,KAAA,IACAmP,KAAA,CACAskB,SAAA,EACAD,KAAA,SACAlY,aAAAnb,MAAAS,EAAA,MAAA,kBAIAK,KAAA2lF,MAAA3+E,KAAA,WAAAhH,MAEAA,KAAA2lF,MAAA,GAAAC,iBAAA5lF,KAAA2lF,MAAA,GAAAC,gBAAAC,WAAAC,KAAAC,UAAA,CAGA,IADA/lF,KAAA2lF,MAAAvhE,SACAzO,SAAA,UAAA,CAEA,MAAA9H,EAAA7N,KAAA2lF,MAAA,GAAAC,gBAAAI,UAAArgF,MAAA,gBACAkI,IACA7N,KAAA2lF,MAAA,GAAAC,gBAAAI,UAAAhmF,KAAA2lF,MAAA,GAAAC,gBAAAI,UAAArkF,OAAA,EAAAkM,EAAAzO,OACAT,EAAA,UAAA,CACAwb,MAAA,SACApb,KAAA8O,EAAA,GAAA7O,QAAA,OAAA,IAAA,MAEAs2B,YAAAt1B,KAAA2lF,MAAA,GAAAC,iBACAvzE,OAAArS,KAAA2lF,SAKA3lF,KAAAwc,YAAAxc,KAAA2lF,MAAA,QAAAtsE,IACAA,EAAAmM,iBACAnM,EAAA2X,kBACAhxB,KAAAgc,YAGAhc,KAAAwc,YAAAxc,KAAA2lF,MAAA,UAAAtsE,IACArZ,KAAAob,KAAApb,KAAAob,IAAAyE,UAAA,CAAAza,QAAAwtB,UAAAxtB,QAAAmgB,YAAAnW,SAAAiK,EAAAyG,WACAzG,EAAAmM,iBACAnM,EAAA2X,kBACAhxB,KAAAgc,cAKAA,QAAA,SAAA3C,GACArZ,KAAAob,IAYApb,KAAAob,IAAAuf,QAXA36B,KAAAob,IAAA,IAAAhW,QAAA6X,IAAAjd,KAAA2lF,MAAA3lF,KAAAw/D,QAAA,CACAymB,SAAA,eACA9oE,gBAAA,EACAG,OAAA,KACAlY,QAAAwY,gBAAAC,iBAAAzY,QAAAwtB,UAAA,KACA5yB,KAAAob,IAAA+C,YAIAjf,MAAAyT,eAAA3S,KAAAob,IAAA8C,WCrEAhf,MAAAga,YAAA9T,QAAAuV,KAAA1b,OAAA,CACA+U,SAAA,KACAswC,gBAAA,KACAC,gBAAA,KACAlgD,OAAA,KACAiuE,OAAA,EACAl5D,IAAA,EACA8sE,eAAA,EACAC,QAAA,KAEAC,gBAAA,KAEA/qE,KAAA,SAAAgrE,EAAAryE,GAmBA,GAlBAhU,KAAAskD,gBAAA3lD,EAAA0nF,GAGArmF,KAAAskD,gBAAAt9C,KAAA,iBACA5B,QAAA2qE,IAAA,oDACA/vE,KAAAskD,gBAAAt9C,KAAA,eAAAwjB,WAGAxqB,KAAAskD,gBAAAt9C,KAAA,cAAAhH,MAEAA,KAAAsyE,MAAAtyE,KAAAskD,gBAAA3uC,SAAA,SAEA3V,KAAA8Y,YAAA9E,EAAA9U,MAAAga,YAAAoC,UAEAtb,KAAAukD,gBAAAvkD,KAAAskD,gBAAA1uC,KAAA,gCACA5V,KAAAqE,OAAArE,KAAAskD,gBAAA1uC,KAAA,eAGA5V,KAAAqE,OAAA4xB,KAAA,YACA,OAGAj2B,KAAAoZ,GAAApZ,KAAAskD,gBAAA3uC,SAAA,MACA3V,KAAAkmF,cAAAlmF,KAAAskD,gBAAA3uC,SAAA,iBAEA3V,KAAAwc,YAAAxc,KAAAskD,gBAAA,YAAA,gBACAtkD,KAAAwc,YAAAxc,KAAAskD,gBAAA,UAAA,cAEAtkD,KAAAmmF,QAAA,IAAA/gF,QAAAk4E,SAAAt9E,KAAAskD,gBAAA,CACAtrB,KAAA5zB,QAAAkhF,OACAvtD,qBAAA,KACA8jB,YAAA78C,KAAA88C,aAAA7gC,KAAAjc,MACA++E,OAAA/+E,KAAAumF,QAAAtqE,KAAAjc,MACAi9C,WAAAj9C,KAAAwmF,YAAAvqE,KAAAjc,QAIA,IAAA8Z,EAAA9Z,KAAAskD,gBAAAlgC,OAAA,gCACAtK,EAAAxZ,SACAN,KAAAwc,YAAA1C,EAAAI,SAAA,2BAAA,QAAAla,KAAAyqE,SACAzqE,KAAAwc,YAAA1C,EAAAI,SAAA,0BAAA,QAAAla,KAAAwqE,UAIAA,OAAA,SAAAic,GACA,IAAAC,GAAA1mF,KAAAoZ,GAEApZ,KAAAoZ,IAAA,EACApZ,KAAAkmF,eAAA,EAEAlmF,KAAAskD,gBAAAxyC,SAAA,YACA,IAAAqoB,EAAA,GACAA,EAAA,UAAAj7B,MAAAuY,MAAA,EACAzX,KAAAukD,gBAAA/sC,SAAA,QAAAA,SAAA2iB,EAAAj7B,MAAAga,YAAAy1B,kBAAA3uC,KAAA2mF,UAAA1qE,KAAAjc,OAEAA,KAAAqE,OAAAC,IAAAtE,KAAAgU,SAAA7O,OACAnF,KAAAskD,gBAAAxyC,SAAA,MACA9R,KAAAskD,gBAAAluC,YAAA,iBACApW,KAAAskD,gBAAAp2C,KAAA,eAAA,QAEAw4E,IAAA,IAAAD,GACAzmF,KAAA4rC,YAIA6+B,QAAA,SAAAgc,GACA,IAAAC,EAAA1mF,KAAAoZ,IAAApZ,KAAAkmF,cAEAlmF,KAAAoZ,IAAA,EACApZ,KAAAkmF,eAAA,EAEAlmF,KAAAskD,gBAAAxyC,SAAA,YACA,IAAAqoB,EAAA,GACAA,EAAA,UAAAj7B,MAAAuY,MAAAzX,KAAA4mF,gBACA5mF,KAAAukD,gBAAA/sC,SAAA,QAAAA,SAAA2iB,EAAAj7B,MAAAga,YAAAy1B,kBAAA3uC,KAAA2mF,UAAA1qE,KAAAjc,OAEAA,KAAAqE,OAAAC,IAAA,IACAtE,KAAAskD,gBAAAluC,YAAA,MACApW,KAAAskD,gBAAAluC,YAAA,iBACApW,KAAAskD,gBAAAp2C,KAAA,eAAA,SAEAw4E,IAAA,IAAAD,GACAzmF,KAAA4rC,YAIA8+B,kBAAA,SAAA+b,GACA,IAAAC,GAAA1mF,KAAAkmF,cAEAlmF,KAAAoZ,IAAA,EACApZ,KAAAkmF,eAAA,EAEAlmF,KAAAskD,gBAAAxyC,SAAA,YACA,IAAAqoB,EAAA,GACAA,EAAA,UAAAj7B,MAAAuY,MAAAzX,KAAA4mF,gBAAA,EACA5mF,KAAAukD,gBAAA/sC,SAAA,QAAAA,SAAA2iB,EAAAj7B,MAAAga,YAAAy1B,kBAAA3uC,KAAA2mF,UAAA1qE,KAAAjc,OAEAA,KAAAqE,OAAAC,IAAAtE,KAAAgU,SAAAiF,oBACAjZ,KAAAskD,gBAAAluC,YAAA,MACApW,KAAAskD,gBAAAxyC,SAAA,iBACA9R,KAAAskD,gBAAAp2C,KAAA,eAAA,SAEAw4E,IAAA,IAAAD,GACAzmF,KAAA4rC,YAIA2nC,OAAA,WACAvzE,KAAAkmF,gBAAAlmF,KAAAoZ,GACApZ,KAAAwqE,SAEAxqE,KAAAyqE,WAIA7+B,SAAA,WACA5rC,KAAAiX,QAAA,UACAjX,KAAAgU,SAAA43B,SAAA5rC,KAAAoZ,IACApZ,KAAAskD,gBAAArtC,QAAA,WAGA4vE,aAAA,WACA7mF,KAAAwc,YAAApX,QAAAqV,KAAA,UAAA,eAGAqsE,WAAA,WACA9mF,KAAAmoB,eAAA/iB,QAAAqV,KAAA,WAGAza,KAAAmmF,QAAAY,UACA/mF,KAAAuzE,UAIA3vB,WAAA,SAAA3iB,GACA,OAAAA,EAAAnhB,SACA,KAAA1a,QAAAwtB,UACA5yB,KAAAuzE,SACAtyC,EAAAzb,iBACA,MAEA,KAAApgB,QAAA4hF,UACA,QAAA9nF,MAAAqY,YACAvX,KAAAwqE,SAEAxqE,KAAAyqE,UAGAxpC,EAAAzb,iBACA,MAEA,KAAApgB,QAAA6hF,SACA,QAAA/nF,MAAAqY,YACAvX,KAAAyqE,UAEAzqE,KAAAwqE,SAGAvpC,EAAAzb,mBAMA0hE,WAAA,WACA,OAAAhlF,SAAAlC,KAAAukD,gBAAAz5B,IAAA,UAAA5rB,MAAAuY,QAGAqlC,aAAA,WACA98C,KAAAskD,gBAAAxyC,SAAA,YACA9R,KAAAomF,gBAAApmF,KAAAknF,cAGAX,QAAA,WACA,IAAAv+B,GAGAA,EADA,QAAA9oD,MAAAqY,YACAvX,KAAAomF,gBAAApmF,KAAAmmF,QAAAgB,WAEAnnF,KAAAomF,gBAAApmF,KAAAmmF,QAAAgB,YAGAnnF,KAAA4mF,gBACA5+B,EAAAhoD,KAAA4mF,gBACA5+B,EAAA,IACAA,EAAA,GAGAhoD,KAAAukD,gBAAAz5B,IAAA,UAAA5rB,MAAAuY,KAAAuwC,IAGAw+B,YAAA,WACA,IAAAx+B,EAAAhoD,KAAAknF,aACA9J,QAAArN,IAAA/nB,GAEAA,EAAAhoD,KAAA4mF,gBAAA,EACA5mF,KAAAwqE,SAEAxqE,KAAAyqE,WAIAkc,UAAA,WACA3mF,KAAAskD,gBAAAluC,YAAA,aAGAoU,QAAA,WACAxqB,KAAA0vB,OACA1vB,KAAAmmF,QAAA37D,WAGAo8D,cAAA,WACA,OAAA5mF,KAAAsyE,OAAA,IAAA,KAEA,CACA3jC,kBAAA,IACArzB,SAAA,CACAnW,MAAA,IACA8T,mBAAA,IACA2yB,SAAAjtC,EAAAwhB,QCxOAjhB,MAAAu7E,QAAAr1E,QAAAuV,KAAA1b,OAAA,CACA2T,WAAA,KACA8R,SAAA,KACAg2D,gBAAA,KACA0M,oBAAA,KAEA/rE,KAAA,SAAAga,EAAArhB,GACAhU,KAAA4S,WAAAjU,EAAA02B,GACAr1B,KAAA8Y,YAAA9E,EAAA9U,MAAAu7E,QAAAn/D,UAGAtb,KAAA4S,WAAA5L,KAAA,aACA5B,QAAA2qE,IAAA,gDACA/vE,KAAA4S,WAAA5L,KAAA,WAAAwjB,WAGAxqB,KAAA4S,WAAA5L,KAAA,UAAAhH,MACAA,KAAA0kB,SAAA1kB,KAAA4S,WAAAgD,KAAA,iBAGA5V,KAAA06E,gBAAA16E,KAAA0kB,SAAAC,OAAA,wBACA3kB,KAAA06E,gBAAAp6E,OACAN,KAAAonF,oBAAApnF,KAAA0kB,SAAAtlB,MAAAY,KAAA06E,iBAEA16E,KAAA06E,gBAAA,KAGA16E,KAAAwc,YAAAxc,KAAA4S,WAAA,UAAAyG,IACA,OAAAA,EAAAyG,SACA,KAAA1a,QAAAiiF,OACArnF,KAAAsnF,aACAjuE,EAAAmM,iBACA,MACA,KAAApgB,QAAAmiF,SACAvnF,KAAAwnF,aACAnuE,EAAAmM,iBACA,MACA,KAAApgB,QAAA6hF,SACA,QAAA/nF,MAAAqY,YACAvX,KAAAsnF,aAEAtnF,KAAAwnF,aAEAnuE,EAAAmM,iBACA,MACA,KAAApgB,QAAA4hF,UACA,QAAA9nF,MAAAqY,YACAvX,KAAAwnF,aAEAxnF,KAAAsnF,aAEAjuE,EAAAmM,oBAKAxlB,KAAAwc,YAAAxc,KAAA0kB,SAAA,QAAArL,IACArZ,KAAA2oD,OAAA3oD,KAAA0kB,SAAAtlB,MAAAT,EAAA0a,EAAAE,iBACAF,EAAAmM,oBAIAmjC,OAAA,SAAAvpD,GACAA,EAAA,GAAAA,GAAAY,KAAA0kB,SAAApkB,QAAAlB,IAAAY,KAAAonF,sBAIApnF,KAAA06E,gBACAtkE,YAAApW,KAAAgU,SAAAyzE,eACAv5E,KAAA,gBAAA,SAEAlO,KAAA06E,gBAAA16E,KAAA0kB,SAAAvS,GAAA/S,GACA0S,SAAA9R,KAAAgU,SAAAyzE,eACAv5E,KAAA,gBAAA,QAEAlO,KAAAonF,oBAAAhoF,EAEAY,KAAAgU,SAAA43B,SAAA5rC,KAAA06E,gBAAAt7E,GACAY,KAAAiX,QAAA,SAAA,CACAyjE,gBAAA16E,KAAA06E,gBACA0M,oBAAAhoF,MAIAkoF,WAAA,WACA,OAAAtnF,KAAAonF,oBACApnF,KAAA2oD,OAAA,GAEA3oD,KAAA2oD,OAAA3oD,KAAAonF,oBAAA,IAIAI,WAAA,WACA,OAAAxnF,KAAAonF,oBACApnF,KAAA2oD,OAAA,GAEA3oD,KAAA2oD,OAAA3oD,KAAAonF,oBAAA,KAGA,CACA9rE,SAAA,CACAmsE,cAAA,SACAC,WAAA,QACA97C,SAAAjtC,EAAAwhB,QCvGAjhB,MAAAyoF,YAAAviF,QAAAuV,KAAA1b,OAAA,CACA2oF,aAAA,KACA1S,SAAA,KACAl3D,OAAA,KACAykB,iBAAA,KACA2pC,QAAA,KACAyb,YAAA,KACAC,kBAAA,KACAC,iBAAA,KACAC,QAAA,KACAC,kBAAA,KAEAC,WAAA,KACA3nF,MAAA,KACA4nF,aAAA,KACAh3B,eAAA,EACAi3B,OAAA,KACAC,aAAA,KACAC,qBAAA,KACAC,SAAA,EACAC,YAAA,EAEArC,QAAA,KACAsC,qBAAA,KAEAC,sBAAA,EACAC,wBAAA,KAEAC,SAAA,KACAC,SAAA,KAEAC,aAAA,KACAC,iBAAA,KAEA1tE,KAAA,SAAArH,GACAhU,KAAA8Y,YAAA9E,EAAA9U,MAAAyoF,YAAArsE,UAKAtb,KAAAgU,SAAAk0E,WACAloF,KAAAkoF,WAAAloF,KAAAgU,SAAAk0E,WAEAloF,KAAAkoF,WAAAhpF,MAAAkH,YAAApH,QAAA,OAAA,IAAA,IAIA,WAAAwH,SAAAC,SAAAuiF,WACAhpF,KAAAkoF,WAAAloF,KAAAkoF,WAAAlpF,QAAA,SAAA,WAIAgB,KAAAmoF,aAAAxpF,EAAAM,OAAA,GAAAe,KAAAgU,SAAAi1E,eAEAjpF,KAAA2oF,wBAAA3oF,KAAAkpF,kBAAAjtE,KAAAjc,MAGAA,KAAA4nF,aAAAjpF,EAAAqB,KAAAgU,SAAAm1E,aACAnpF,KAAAk1E,SAAAv2E,EAAAqB,KAAAgU,SAAAiD,SACAjX,KAAAioF,kBAAAtpF,EAAA,UAGAqB,KAAAykC,YAAAvlC,MAAAqV,gBAAA,0BAAArV,MAAAyoF,YAAAyB,oBAGAppF,KAAAwc,YAAAxc,KAAAk1E,SAAA,WAAA,UAEAh2E,MAAA8I,GAAAoR,GAAA,qBAAA,KACApZ,KAAAmxD,eACAnxD,KAAAqpF,oBAKA5kD,kBACA,OAAAzkC,KAAA8oF,cAGAQ,sBACA,OAAAtpF,KAAA+oF,kBAGAtkD,gBAAAqC,GACA,IAAAyiD,EAGAziD,GAAA,GACAyiD,EAAAziD,EACAA,GAAA1hC,QAAA2xB,KAAA+P,SAEAyiD,EAAA54E,KAAAK,MAAA81B,EAAA1hC,QAAA2xB,KAAA+P,SAIAyiD,EAAArqF,MAAAyoF,YAAA6B,qBAEA1iD,GADAyiD,EAAArqF,MAAAyoF,YAAA6B,oBACApkF,QAAA2xB,KAAA+P,SAGA9mC,KAAA8oF,aAAAhiD,EACA9mC,KAAA+oF,iBAAAQ,GAGAhW,OAAA,WACAvzE,KAAAmxD,cACAnxD,KAAAypF,OAEAzpF,KAAA8+D,SAIAA,MAAA,WACA,IAAA9+D,KAAAmxD,cAIA,GAAAnxD,KAAAO,MAAA,CASA,GAJAP,KAAAiX,QAAA,eAEAtY,EAAA6H,SAAAw4B,eAAA/nB,QAAA,SAEAjX,KAAAosE,QAAA,CACApsE,KAAAge,OAAArf,EAAA,SAAA,CAAAwb,MAAA,qBAAA7L,SAAAlJ,QAAAsN,MACA1S,KAAA8nF,kBAAAnpF,EAAA,SAAA,CAAAwb,MAAA,yBAAA7L,SAAAlJ,QAAAsN,MACA1S,KAAA+nF,iBAAAppF,EAAA,SAAA,CAAAwb,MAAA,wBAAA7L,SAAAtO,KAAA8nF,mBACA9nF,KAAAyiC,iBAAA9jC,EAAA,SAAA,CAAAwb,MAAA,wBAAA7L,SAAAlJ,QAAAsN,MAEA,IAAAg3E,EAAA/qF,EAAA,YAAA,CAAAwb,MAAA,SAAA7L,SAAAtO,KAAAyiC,kBACAziC,KAAAosE,QAAAztE,EAAA,UAAA,CAAAwb,MAAA,cAAA7L,SAAAtO,KAAAyiC,kBACAziC,KAAA6nF,YAAAlpF,EAAA,SAAA,CAAAwb,MAAA,kBAAA7L,SAAAtO,KAAAyiC,kBACA,IAAAopC,EAAAltE,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,MACA9W,KAAAnE,MAAAS,EAAA,MAAA,mBACA2O,SAAAo7E,GACA/qF,EAAA,SAAA,CAAAwb,MAAA,cAAA7L,SAAAo7E,GACA,IAAA1uE,EAAArc,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,aACA9W,KAAAnE,MAAAS,EAAA,MAAA,UACA2O,SAAAo7E,GAEA1pF,KAAAmmF,QAAA,IAAA/gF,QAAAk4E,SAAAt9E,KAAA6nF,YAAA,CACA7uD,KAAA5zB,QAAAkhF,OACAzpC,YAAA78C,KAAA88C,aAAA7gC,KAAAjc,MACA++E,OAAA/+E,KAAAumF,QAAAtqE,KAAAjc,MACAi9C,WAAAj9C,KAAAwmF,YAAAvqE,KAAAjc,QAGAA,KAAAwc,YAAAqvD,EAAA,QAAA,QACA7rE,KAAAwc,YAAAxB,EAAA,QAAA,QAIAhb,KAAAgwD,qBACAhwD,KAAAwc,YAAApX,QAAA2xB,KAAA,SAAA,sBAEA/2B,KAAAyiC,iBAAA3X,IAAA5rB,MAAAuY,MAAAzX,KAAAspF,gBAAA,MACAtpF,KAAA8nF,kBAAAh9D,IAAA5rB,MAAAwY,OAAA1X,KAAA2pF,kBAIA3pF,KAAAooF,OAAA,GAGA,IAFA,IAAAxO,EAAAj7E,EAAAqB,KAAAgU,SAAAo0E,QAEA1oF,EAAA,EAAAA,EAAAk6E,EAAAt5E,OAAAZ,IAAA,CACA,IAAAyqE,EAAAxrE,EAAAi7E,EAAAl6E,IACAkqF,EAAA5pF,KAAA6pF,UAAA1f,GAIAnqE,KAAAioF,kBAAA3yD,YAAA60C,GACAA,EAAAthD,SACA7oB,KAAAioF,kBAAAxxE,YAAAmzE,GACAzf,EAAA77D,SAAAtO,KAAAosE,SAEApsE,KAAAooF,OAAAlnF,KAAA,CACAipE,OAAAA,EACAyf,OAAAA,IAIA5pF,KAAA8pF,eACA9pF,KAAA0oF,sBAAA,EAEA1oF,KAAA+pF,UAGA3kF,QAAAgU,GAAAla,MAAAoV,kBAAA,cAAAtU,KAAA2oF,yBACAvjF,QAAAgU,GAAAla,MAAAijC,iBAAA,OAAAniC,KAAA2oF,yBAEAzpF,MAAAw2B,mBAAAghD,WAEA12E,KAAAmxD,eAAA,EACAnxD,KAAAiX,QAAA,cAjFAjX,KAAAgqF,eAoFAA,YAAA,WACA9qF,MAAA4H,kBAAA,4BAAA,CACAmjF,cAAAjqF,KAAAgU,SAAAi2E,eACA,CAAAx/E,EAAA5C,KACA,YAAAA,IACA7H,KAAAO,MAAAkK,EAAAlK,MACAP,KAAA8+D,YAKAtrB,KAAA,WACAt0C,MAAA8I,GAAAyoD,qBAGAT,mBAAA,WAEAhwD,KAAAykC,YAAAzkC,KAAAykC,YAGAzkC,KAAAkqF,gBAGAH,QAAA,WACAprF,EAAA,QAAAmT,SAAA,YACA9R,KAAAge,OAAAxG,SAAA,UAEAxX,KAAAyiC,iBAAA9H,OAAAnjB,SAAA,QAAAL,YAAA,EAAA,OAAA,KACAnX,KAAAiX,QAAA,WACA7R,QAAA2xB,KAAA9f,QAAA,YAGAjX,KAAA8nF,kBAAAntD,OAAAnjB,SAAA,QAAAG,aAAA,EAAA,OAAA,KACA3X,KAAAsoF,qBAAAh1C,YAAAtzC,KAAA8pF,aAAA7tE,KAAAjc,MAAA,KAEAA,KAAAwc,YAAApX,QAAAsN,KAAA,SAAA,SAAA2G,GACAA,EAAAyG,UAAA1a,QAAA0Y,SACA9d,KAAAypF,aAMAA,KAAA,WACAzpF,KAAAmxD,gBAIAnxD,KAAAiX,QAAA,cAEAtY,EAAA,QAAAyX,YAAA,YAEApW,KAAAmoB,eAAA/iB,QAAA2xB,KAAA,UACA/2B,KAAAmoB,eAAA/iB,QAAAsN,KAAA,SAEA1S,KAAAsoF,sBACAp0C,cAAAl0C,KAAAsoF,sBAGAtoF,KAAAqpF,iBAEArpF,KAAAge,OAAAmyC,MAAA,KAAA34C,SAAA,WAEAxX,KAAAyiC,iBAAAjrB,SAAA,QAAAL,aAAAnX,KAAAspF,gBAAA,OAAA,KACA,IAAA,IAAA5pF,EAAA,EAAAA,EAAAM,KAAAooF,OAAA9nF,OAAAZ,IACAM,KAAAooF,OAAA1oF,GAAAyqF,UAAA7vE,SAEAta,KAAAyiC,iBAAAtkB,OACAne,KAAAiX,QAAA,cAGAjX,KAAA8nF,kBAAAtwE,SAAA,QAAAG,cAAA3X,KAAA2pF,iBAAA,OAAA,KACA3pF,KAAA8nF,kBAAA3pE,SAGA/Y,QAAAqyB,IAAAv4B,MAAAoV,kBAAA,cAAAtU,KAAA2oF,yBAEAzpF,MAAAw2B,mBAAAghD,WAEA12E,KAAAmxD,eAAA,EACAnxD,KAAAiX,QAAA,UAGAoyE,eAAA,WACA,IAAA,IAAA3pF,EAAA,EAAAA,EAAAM,KAAAooF,OAAA9nF,OAAAZ,IAAA,CACA,IAAA0qF,EAAApqF,KAAAooF,OAAA1oF,GACA0qF,EAAAD,UAAAnqF,KAAA6pF,UAAAO,EAAAjgB,QAIAnqE,KAAAioF,kBAAA3yD,YAAA80D,EAAAjgB,QACAigB,EAAAjgB,OAAAthD,SACA7oB,KAAAioF,kBAAAxxE,YAAA2zE,EAAAD,WACAC,EAAAR,OAAAnzE,YAAA2zE,EAAAjgB,QAGA/kE,QAAA2xB,KAAA9f,QAAA,WAGA0yE,eAAA,WACA,OAAAvkF,QAAA2xB,KAAA+P,QAAA9mC,KAAAspF,iBAGAY,aAAA,WACAlqF,KAAAyiC,iBAAA3X,IAAA,QAAA9qB,KAAAspF,gBAAA,MACAtpF,KAAA8nF,kBAAAhhD,MAAA9mC,KAAA2pF,mBAGAG,aAAA,SAAA97D,GAKA,GAJAA,IACAhuB,KAAAqoF,aAAA,OAGAroF,KAAAmxD,cACA,OAAA,EAGA,GAAAnxD,KAAAuoF,QAEA,OADAvoF,KAAAwoF,YAAA,GACA,EAIA,IAAAj3C,EAAA5yC,EAAAM,OAAAmG,QAAA2qB,YAAA/vB,KAAAosE,SAAAhnE,QAAA2qB,YAAA/vB,KAAA4nF,eAEA,GAAA5nF,KAAAqoF,cAAAnpF,MAAAqP,QAAAgjC,EAAAvxC,KAAAqoF,cAAA,GA0BA,OAAA,EAzBAroF,KAAAqoF,aAAA92C,EACAvxC,KAAAuoF,SAAA,EAEA,IAAA9tE,EAAAza,KAAAgoF,QAAArpF,EAAAqB,KAAAgoF,QAAA,GAAAqC,cAAA7jF,UAAA,KAoBA,OAlBAxG,KAAA4oF,SAAAnuE,EAAAA,EAAA6vE,aAAA,EACAtqF,KAAA6oF,SAAApuE,EAAAA,EAAAkQ,YAAA,EAEAhsB,EAAA4I,KAAA,CACAjC,IAAAtF,KAAAkoF,aAAA,IAAAloF,KAAAkoF,WAAApnF,QAAA,KAAA,IAAA,KAAA5B,MAAAusE,WAAA,IAAAzrE,KAAAO,MACAyI,OAAA,OACAhC,KAAArI,EAAAM,OAAA,GAAAsyC,EAAAvxC,KAAAmoF,cACA1gF,QAAA,CACA8iF,gBAAAvqF,KAAAO,OAEAiqF,UAAA,CACAC,iBAAA,GAEAC,aAAA,EACA/iF,QAAA3H,KAAA2qF,cAAA1uE,KAAAjc,MACA4H,MAAA5H,KAAA4qF,YAAA3uE,KAAAjc,SAGA,GAMAkpF,kBAAA,WACA,OAAAlpF,KAAA8pF,cAAA,IAGAa,cAAA,SAAA3jF,GACA,IAAAjI,EAAAiI,EACA,kDAAAhH,KAAA4oF,SAAA,KAAA5oF,KAAA6oF,SAAA,eAGAb,EAAArpF,EAAA,gDACAqB,KAAAgoF,QACAA,EAAA5mC,aAAAphD,KAAAgoF,SAEAA,EAAA15E,SAAAtO,KAAA+nF,kBAGA/nF,KAAAwc,YAAAwrE,EAAA,QAAA,WACAhoF,KAAAgoF,SACAhoF,KAAAgoF,QAAA1tE,SAEAta,KAAAgoF,QAAAA,EAEAhoF,KAAA0oF,uBACA1oF,KAAA+pF,UACA/pF,KAAA0oF,sBAAA,GAGA1oF,KAAAmoB,eAAA6/D,EAAA,WAGA5iF,QAAAyZ,sBAAA,KACAmpE,EAAA,GAAAqC,cAAA7jF,SAAAxF,OACAgnF,EAAA,GAAAqC,cAAA7jF,SAAAqkF,MAAA9rF,GACAipF,EAAA,GAAAqC,cAAA7jF,SAAAvF,QACAjB,KAAA8qF,gBAIAF,YAAA,WACA5qF,KAAA8qF,cAGAA,WAAA,WACA9qF,KAAAuoF,SAAA,EAEAvoF,KAAAwoF,aACAxoF,KAAAwoF,YAAA,EACAxoF,KAAA8pF,iBAIAD,UAAA,SAAA1f,GACA,IAAAyf,EAAAzf,EAAApuC,QASA,OANA32B,QAAA2lF,gBAAA5gB,EAAAyf,GAGAA,EAAA17E,KAAA,KAAA,IACA07E,EAAAh0E,KAAA,QAAA1H,KAAA,KAAA,IAEA07E,GAGA9sC,aAAA,WACA98C,KAAAyoF,qBAAAzoF,KAAAspF,gBACAtpF,KAAA8nF,kBAAAh2E,SAAA,aAGAy0E,QAAA,WACA,QAAArnF,MAAAqY,YACAvX,KAAAykC,YAAAzkC,KAAAyoF,qBAAAzoF,KAAAmmF,QAAAgB,WAEAnnF,KAAAykC,YAAAzkC,KAAAyoF,qBAAAzoF,KAAAmmF,QAAAgB,WAGAnnF,KAAAkqF,gBAGA1D,YAAA,WACAxmF,KAAA8nF,kBAAA1xE,YAAA,YACAlX,MAAA0V,gBAAA,0BAAA5U,KAAAykC,eAEA,CACA2kD,mBAAA,IACAI,mBAAA,IAEAluE,SAAA,CACArE,QAAA,kBACAmxE,OAAA,KACAe,YAAA,KACAjB,WAAA,KACA+B,cAAA,KACAhB,cAAA,MAIA/pF,MAAAyoF,YAAAtsE,KAAA,SAAArH,GACA9U,MAAAgyD,YAAA,IAAAhyD,MAAAyoF,YAAA3zE,ICtcA9U,MAAA8tD,cAAA5nD,QAAAuV,KAAA1b,OAAA,CACA8tD,iBAAA,KACA/B,eAAA,KACAggC,WAAA,KACA3T,cAAA,KAEA4T,oBAAA,KACAC,gBAAA,KAEA7vE,KAAA,SAAA8vE,EAAAn3E,GACAhU,KAAAgrD,eAAArsD,EAAAwsF,GACAnrF,KAAA+sD,iBAAA/sD,KAAAgrD,eAAA5mC,OAAA,oBACApkB,KAAAgU,SAAArV,EAAAM,OAAA,GAAAC,MAAA8tD,cAAA1xC,SAAAtH,GAGAhU,KAAAgrD,eAAAhkD,KAAA,mBACA5B,QAAA2qE,IAAA,uDACA/vE,KAAAgrD,eAAAhkD,KAAA,iBAAAwjB,WAGAxqB,KAAAgrD,eAAAhkD,KAAA,gBAAAhH,MAEAA,KAAAirF,oBAAAtsF,EAAA,8CACAqB,KAAAirF,oBAAAn5E,SAAA,mBACA9R,KAAAirF,oBAAA31D,YAAAt1B,KAAAgrD,gBAEAhrD,KAAAorF,qBAAAprF,KAAAgrD,gBACAhrD,KAAAwc,YAAAxc,KAAAirF,oBAAA,QAAA,WACAjrF,KAAAqrF,gBAGAC,gBAAA,SAAAjnF,GACArE,KAAAq3E,gBAEAhzE,EAAAixB,YAAAt1B,KAAAq3E,eACAr3E,KAAAq3E,cAAAxuD,SACAxkB,EAAA4S,QAAA,SAGA5S,EAAAC,IAAAtE,KAAAq3E,cAAA/yE,QAGAtE,KAAAq3E,cAAAhzE,EAEArE,KAAAwc,YAAAxc,KAAAq3E,cAAA,6BAAA,kBAGAkU,kBAAA,SAAAx1E,GACA/V,KAAAirF,oBAAA5nF,KAAA0S,IAGAq1E,qBAAA,SAAA/mF,GACArE,KAAAwc,YAAAnY,EAAA,SAAA,WACArE,KAAA+sD,iBAAAj7C,SAAA,YAEA9R,KAAAwc,YAAAnY,EAAA,QAAA,WACArE,KAAA+sD,iBAAA32C,YAAA,aAIAo1E,aAAA,WACAxrF,KAAAkrF,kBAIAlrF,KAAAgrF,aACAhrF,KAAAgrF,WAAAhrF,KAAAgrD,eAAAjvB,OAAA,GACA/7B,KAAAgrF,WAAA98E,KAAA,OAAA,QACAlO,KAAAorF,qBAAAprF,KAAAgrF,aAGAhrF,KAAAsrF,gBAAAtrF,KAAAgrF,YACAhrF,KAAAurF,kBAAArsF,MAAAS,EAAA,MAAA,SACAK,KAAAkrF,iBAAA,IAGAG,aAAA,YAEA,IAAArrF,KAAAkrF,kBAIAlrF,KAAAsrF,gBAAAtrF,KAAAgrD,gBACAhrD,KAAAurF,kBAAArsF,MAAAS,EAAA,MAAA,SACAK,KAAAkrF,iBAAA,EAGAlrF,KAAAwc,YAAAxc,KAAAgrD,eAAA,UAAA,eAGAygC,eAAA,WACAzrF,KAAAkrF,gBACAlrF,KAAAqrF,eAEArrF,KAAAwrF,eAGAxrF,KAAAgU,SAAAi5C,cAAAjtD,KAAAq3E,gBAGAqU,UAAA,SAAAryE,GACAA,EAAAyG,UAAA1a,QAAAumF,SAAA3rF,KAAAq3E,cAAA/yE,QACAtE,KAAAwrF,eACAxrF,KAAAirF,oBAAAn5E,SAAA,aACA9R,KAAAwc,YAAAxc,KAAAgrF,WAAA,QAAA,aAIAY,QAAA,SAAAvyE,GACAA,EAAAmM,iBAEAnM,EAAAyG,UAAA1a,QAAAumF,UACA3rF,KAAAqrF,eACArrF,KAAAirF,oBAAA70E,YAAA,eAIAy1E,cAAA,WACA7rF,KAAAq3E,cAAA/yE,MACAtE,KAAAirF,oBAAA70E,YAAA,aAEApW,KAAAirF,oBAAAn5E,SAAA,cAIAuzC,QAAA,SAAAhsC,GACA,GAAArZ,KAAAq3E,cAAA,GAAA9yE,kBAAA,CACA,IAAAikD,EAAAxoD,KAAAq3E,cAAA,GAAA7uB,eACAC,EAAAzoD,KAAAq3E,cAAA,GAAA5uB,aAEAzoD,KAAAyrF,iBACAzrF,KAAAq3E,cAAA,GAAA9yE,kBAAAikD,EAAAC,QAEAzoD,KAAAyrF,mBAGA,CACAnwE,SAAA,CACA2xC,cAAAtuD,EAAAwhB,QC1IAjhB,MAAAysE,QAAAvmE,QAAAuV,KAAA1b,OAAA,CACAq7B,YAAA,KAEAtc,OAAA,KACAykB,iBAAA,KACA2pC,QAAA,KACAnxD,SAAA,KACAqrD,YAAA,KACAuhB,YAAA,KACAC,kBAAA,KACAC,iBAAA,KACA+D,eAAA,KACAC,WAAA,KACAC,YAAA,KACAC,qBAAA,KACAC,gBAAA,KACAC,YAAA,KACAC,wBAAA,KACApE,QAAA,KACAqE,cAAA,EACAC,WAAA,KACArE,kBAAA,KAEA1b,UAAA,EACA0D,WAAA,EACAsc,aAAA,EAEAC,kBAAA,EACAC,uBAAA,KACAC,kBAAA,UACAC,kBAAA,KACAC,YAAA,GACAC,aAAA,GACAC,qBAAA,CACAC,MAAA,CACAjmD,MAAA,IACA/b,OAAA,KAEAiiE,OAAA,CACAlmD,MAAA,IACA/b,OAAA,OAIAu9C,QAAA,KACAhjE,IAAA,KACA8iF,OAAA,KAEA6E,aAAA,KACAtiE,UAAA,KAEAw7D,QAAA,KACAsC,qBAAA,KAEAyE,mBAAA,KAEApE,aAAA,KACAC,iBAAA,KAEA1tE,KAAA,SAAAif,GACAt6B,KAAAs6B,YAAAA,EAEAt6B,KAAAktF,mBAAAltF,KAAA8pF,aAAA7tE,KAAAjc,MAEAA,KAAAssF,WAAA3tF,EAAA,WAAA,CAAA4C,KAAA,SAAA0D,KAAA,qBAAAE,MAAA,MACAnF,KAAAioF,kBAAAtpF,EAAA,UAGAqB,KAAAykC,YAAAvlC,MAAAqV,gBAAA,0BAAArV,MAAAysE,QAAAyd,qBAGA3kD,kBACA,OAAAzkC,KAAA8oF,cAGAQ,sBACA,OAAAtpF,KAAA+oF,kBAGAtkD,gBAAAqC,GACA,IAAAyiD,EAGAziD,GAAA,GACAyiD,EAAAziD,EACAA,GAAA1hC,QAAA2xB,KAAA+P,SAEAyiD,EAAA54E,KAAAK,MAAA81B,EAAA1hC,QAAA2xB,KAAA+P,SAIAyiD,EAAArqF,MAAAysE,QAAA6d,qBAEA1iD,GADAyiD,EAAArqF,MAAAysE,QAAA6d,oBACApkF,QAAA2xB,KAAA+P,SAGA9mC,KAAA8oF,aAAAhiD,EACA9mC,KAAA+oF,iBAAAQ,GAGAvoF,KAAA,WACA,IAAAhB,KAAAusE,SAAA,CASA,GALAvsE,KAAAusE,UAAA,EACAvsE,KAAAiX,QAAA,cAEAtY,EAAA6H,SAAAw4B,eAAA/nB,QAAA,SAEAjX,KAAAosE,QAAA,CACApsE,KAAAge,OAAArf,EAAA,SAAA,CAAAwb,MAAA,qBAAA7L,SAAAlJ,QAAAsN,MACA1S,KAAA8nF,kBAAAnpF,EAAA,SAAA,CAAAwb,MAAA,yBAAA7L,SAAAlJ,QAAAsN,MACA1S,KAAAyiC,iBAAA9jC,EAAA,SAAA,CAAAwb,MAAA,wBAAA7L,SAAAlJ,QAAAsN,MAEA,IAAAg3E,EAAA/qF,EAAA,YAAA,CAAAwb,MAAA,SAAA7L,SAAAtO,KAAAyiC,kBACAziC,KAAAosE,QAAAztE,EAAA,UAAA,CAAAwb,MAAA,cAAA7L,SAAAtO,KAAAyiC,kBACAziC,KAAA6nF,YAAAlpF,EAAA,SAAA,CAAAwb,MAAA,kBAAA7L,SAAAtO,KAAAyiC,kBACA,IAAAopC,EAAAltE,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,MACA9W,KAAAnE,MAAAS,EAAA,MAAA,mBACA2O,SAAAo7E,GAKA,GAJA/qF,EAAA,SAAA,CAAAwb,MAAA,cAAA7L,SAAAo7E,GACA1pF,KAAAib,SAAAtc,EAAA,SAAA,CAAAwb,MAAA,iBAAAC,MAAAlb,MAAAS,EAAA,MAAA,YAAA2O,SAAAo7E,GACA1pF,KAAAsmE,YAAA3nE,EAAA,SAAA,CAAAwb,MAAA,cAAA7L,SAAAo7E,GAEAxqF,MAAAiuF,IAAA,CAIA,GAHAntF,KAAA8rF,eAAAntF,EAAA,YAAA,CAAAwb,MAAA,sBAAA7L,SAAAtO,KAAA8nF,mBAGA9nF,KAAAs6B,YAAAtmB,SAAA+zD,eAAAznE,OAAA,EAAA,CACAN,KAAA+rF,WAAAptF,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,cACA9W,KAAArD,KAAAs6B,YAAAtmB,SAAA+zD,eAAA,GAAAhyD,QACAzH,SAAAtO,KAAA8rF,gBACA9rF,KAAAgsF,YAAArtF,EAAA,SAAA,CAAAwb,MAAA,wBAAAmb,YAAAt1B,KAAA+rF,YACA,MAAAl6E,EAAAlT,EAAA,QAAA,CAAAwb,MAAA,WAAA7L,SAAAtO,KAAAgsF,aACA,IAAAj6E,EAAAsN,EACA,IAAA,IAAA3f,EAAA,EAAAA,EAAAM,KAAAs6B,YAAAtmB,SAAA+zD,eAAAznE,OAAAZ,IACAqS,EAAApT,EAAA,SAAA2P,SAAAuD,GACAwN,EAAA1gB,EAAA,OAAA,CACAqI,KAAA,CAAAgvB,OAAAt2B,GACA2D,KAAArD,KAAAs6B,YAAAtmB,SAAA+zD,eAAAroE,GAAAqW,MACAoE,MAAA,IAAAza,EAAA,MAAA,OACA4O,SAAAyD,GAEA,IAAA3M,QAAAyU,QAAA7Z,KAAA+rF,WAAA,CACAniC,eAAA35B,IACAjwB,KAAAotF,aAAAzuF,EAAAsxB,GAAAjpB,KAAA,cAIArI,EAAA,4BAAA2P,SAAAtO,KAAA8rF,gBAIA9rF,KAAAisF,qBAAAttF,EAAA,SAAA,CACAwb,MAAA,0BACAoY,KAAA,UACAlY,aAAAnb,MAAAS,EAAA,MAAA,eACA6yB,SAAA,MACAlkB,SAAAtO,KAAA8rF,gBACAntF,EAAA,YAAA,CACA4C,KAAA,SACAgxB,KAAA,SACApY,MAAA,yCACAC,MAAAlb,MAAAS,EAAA,MAAA,WACA0a,aAAAnb,MAAAS,EAAA,MAAA,WACA0tF,gBAAA,OACA76D,SAAA,KACAxrB,KAAA,CACA8/B,MAAA,GACA/b,OAAA,GACAuiE,WAAA,aAEAh/E,SAAAtO,KAAAisF,sBACAttF,EAAA,YAAA,CACA4C,KAAA,SACAgxB,KAAA,SACApY,MAAA,iCACAC,MAAAlb,MAAAS,EAAA,MAAA,UACA0a,aAAAnb,MAAAS,EAAA,MAAA,UACA0tF,gBAAA,QACA76D,SAAA,KACAxrB,KAAA,CACA8/B,MAAA,IACA/b,OAAA,KACAuiE,WAAA,YAEAh/E,SAAAtO,KAAAisF,sBACAttF,EAAA,YAAA,CACA4C,KAAA,SACAgxB,KAAA,SACApY,MAAA,gCACAC,MAAAlb,MAAAS,EAAA,MAAA,UACA0a,aAAAnb,MAAAS,EAAA,MAAA,UACA0tF,gBAAA,QACA76D,SAAA,KACAxrB,KAAA,CACA8/B,MAAA,IACA/b,OAAA,IACAuiE,WAAA,WAEAh/E,SAAAtO,KAAAisF,sBAEAttF,EAAA,4BAAA2P,SAAAtO,KAAA8rF,gBAGA9rF,KAAAksF,gBAAAvtF,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,eACAmT,YAAA,UACAg3C,SAAA,GACAipB,cAAA,GACAlqF,KAAAnE,MAAAS,EAAA,MAAA,YACA2O,SAAAtO,KAAA8rF,gBACA9rF,KAAAwc,YAAAxc,KAAAksF,gBAAA,QAAA,qBAGAlsF,KAAA2sF,kBAAAztF,MAAAqV,gBAAA,2BAGAvU,KAAAwc,YAAA7d,EAAA,OAAAqB,KAAAisF,sBAAA,QAAA,oBAGAjsF,KAAAmsF,YAAAxtF,EAAA,SAAA,CACAwb,MAAA,mBAIAna,KAAA+nF,iBAAAppF,EAAA,SAAA,CAAAwb,MAAA,wBAAA7L,SAAAtO,KAAA8nF,mBAEA9nF,KAAAmsF,aACAnsF,KAAA+nF,iBAAA11E,OAAArS,KAAAmsF,aAGAnsF,KAAAmmF,QAAA,IAAA/gF,QAAAk4E,SAAAt9E,KAAA6nF,YAAA,CACA7uD,KAAA5zB,QAAAkhF,OACAzpC,YAAA78C,KAAA88C,aAAA7gC,KAAAjc,MACA++E,OAAA/+E,KAAAumF,QAAAtqE,KAAAjc,MACAi9C,WAAAj9C,KAAAwmF,YAAAvqE,KAAAjc,QAGAA,KAAAwc,YAAAqvD,EAAA,QAAA,SACA7rE,KAAAwc,YAAAxc,KAAAsmE,YAAA,QAAA,KACAtmE,KAAAs6B,YAAAyuC,cAAA/oE,KAAAsmE,eAKAtmE,KAAAgwD,qBACAhwD,KAAAwc,YAAApX,QAAA2xB,KAAA,SAAA,sBAEA/2B,KAAAyiC,iBAAA3X,IAAA5rB,MAAAuY,MAAAzX,KAAAspF,gBAAA,MACAtpF,KAAA8nF,kBAAAh9D,IAAA5rB,MAAAwY,OAAA1X,KAAA2pF,kBAGA3pF,KAAAooF,OAAA,GACA,IAAAxO,EAAAj7E,EAAA,mBAAAq7B,IAAAr7B,EAAA,2BAEA,GAAAi7E,EAAAt5E,OAAA,CAEAN,KAAAssF,WAAAlrC,aAAAw4B,EAAArpD,IAAA,IAIA,IAAA,IAAA7wB,EAAA,EAAAA,EAAAk6E,EAAAt5E,OAAAZ,IAAA,CACA,IAAAyqE,EAAAxrE,EAAAi7E,EAAAl6E,IACAkqF,EAAA5pF,KAAA6pF,UAAA1f,GAIAnqE,KAAAioF,kBAAA3yD,YAAA60C,GACAA,EAAAthD,SACA7oB,KAAAioF,kBAAAxxE,YAAAmzE,GACAzf,EAAA77D,SAAAtO,KAAAosE,SAEApsE,KAAAooF,OAAAlnF,KAAA,CACAipE,OAAAA,EACAyf,OAAAA,KAKA5pF,KAAA8pF,eAEA9pF,KAAAs6B,YAAAlhB,GAAA,SAAApZ,KAAAktF,oBACA9nF,QAAAgU,GAAAla,MAAAoV,kBAAA,cAAAtU,KAAAktF,oBACA9nF,QAAAgU,GAAAla,MAAAijC,iBAAA,OAAAniC,KAAAktF,oBAEAhuF,MAAAw2B,mBAAAghD,WAEA12E,KAAAiX,QAAA,UAGAm2E,aAAA,SAAA1tF,GACAM,KAAAusF,aAAA7sF,EACAM,KAAA+rF,WAAA1oF,KAAArD,KAAAs6B,YAAAtmB,SAAA+zD,eAAAroE,GAAAqW,OACA/V,KAAAgsF,YAAAp2E,KAAA,SAAAQ,YAAA,OACApW,KAAAgsF,YAAAp2E,KAAA,KAAAzD,GAAAzS,GAAAoS,SAAA,OACA9R,KAAA8pF,cAAA,GACA9pF,KAAAiX,QAAA,eAAA,CACAu2E,cAAAxtF,KAAAs6B,YAAAtmB,SAAA+zD,eAAAroE,MAIAswD,mBAAA,WAEAhwD,KAAAykC,YAAAzkC,KAAAykC,YAGAzkC,KAAAkqF,gBAGAH,QAAA,WACA/pF,KAAAusE,WAAAvsE,KAAAiwE,YAIAtxE,EAAA,QAAAmT,SAAA,YACA9R,KAAAge,OAAAxG,SAAA,UAEAxX,KAAAyiC,iBAAA9H,OAAAnjB,SAAA,QAAAL,YAAA,EAAA,OAAA,KACAnX,KAAAiX,QAAA,WACA7R,QAAA2xB,KAAA9f,QAAA,YAGAjX,KAAA8nF,kBAAAntD,OAAAnjB,SAAA,QAAAG,aAAA,EAAA,OAAA,KACA3X,KAAAwc,YAAApX,QAAAsN,KAAA,SAAA,SAAA2G,GACAA,EAAAyG,UAAA1a,QAAA0Y,SACA9d,KAAAiB,aAKAjB,KAAAiwE,WAAA,IAGAhvE,MAAA,WACAjB,KAAAusE,UAAAvsE,KAAAiwE,YAIAjwE,KAAAiX,QAAA,eAEAtY,EAAA,QAAAyX,YAAA,YAEApW,KAAAmoB,eAAA/iB,QAAA2xB,KAAA,UACA/2B,KAAAmoB,eAAA/iB,QAAAsN,KAAA,SAGA1S,KAAAssF,WAAAzjE,SACA7oB,KAAAqpF,iBAEArpF,KAAAge,OAAAmyC,MAAA,KAAA34C,SAAA,WAEAxX,KAAAyiC,iBAAAjrB,SAAA,QAAAL,aAAAnX,KAAAspF,gBAAA,OAAA,KACA,IAAA,IAAA5pF,EAAA,EAAAA,EAAAM,KAAAooF,OAAA9nF,OAAAZ,IACAM,KAAAooF,OAAA1oF,GAAAyqF,UAAA7vE,SAEAta,KAAAyiC,iBAAAtkB,OACAne,KAAAiX,QAAA,cAGAjX,KAAA8nF,kBAAAtwE,SAAA,QAAAG,cAAA3X,KAAA2pF,iBAAA,OAAA,KACA3pF,KAAA8nF,kBAAA3pE,OACAne,KAAAytF,uBAGAztF,KAAAs6B,YAAA7C,IAAA,SAAAz3B,KAAAktF,oBACA9nF,QAAAqyB,IAAAv4B,MAAAoV,kBAAA,cAAAtU,KAAAktF,oBACA9nF,QAAAqyB,IAAAv4B,MAAAijC,iBAAA,OAAAniC,KAAAktF,oBAEAhuF,MAAAw2B,mBAAAghD,WAEA12E,KAAAusE,UAAA,EACAvsE,KAAAiwE,WAAA,EACAjwE,KAAAiX,QAAA,WAGAoyE,eAAA,WACA,IAAA,IAAA3pF,EAAA,EAAAA,EAAAM,KAAAooF,OAAA9nF,OAAAZ,IAAA,CACA,IAAA0qF,EAAApqF,KAAAooF,OAAA1oF,GACA0qF,EAAAD,UAAAnqF,KAAA6pF,UAAAO,EAAAjgB,QAIAnqE,KAAAioF,kBAAA3yD,YAAA80D,EAAAjgB,QACAigB,EAAAjgB,OAAAthD,SACA7oB,KAAAioF,kBAAAxxE,YAAA2zE,EAAAD,WACAC,EAAAR,OAAAnzE,YAAA2zE,EAAAjgB,QAGA/kE,QAAA2xB,KAAA9f,QAAA,WAGA0yE,eAAA,WACA,OAAAvkF,QAAA2xB,KAAA+P,QAAA9mC,KAAAspF,iBAGAY,aAAA,WACAlqF,KAAAyiC,iBAAA3X,IAAA,QAAA9qB,KAAAspF,gBAAA,MACAtpF,KAAA8nF,kBAAAhhD,MAAA9mC,KAAA2pF,kBACA3pF,KAAA0tF,0BACA1tF,KAAA2tF,uBAIAC,kBAAA,WACA,OAAA,IAAA1uF,MAAA2uF,6BAGA/D,aAAA,SAAAgE,GACA,IAAA9tF,KAAAusE,SACA,OAAA,EAIAuhB,GAAA,IAAAA,EAEA,IAAA93D,EAAAh2B,KAAAs6B,YAAAtmB,SAAA+zD,eAAA/nE,KAAAusF,cACAwB,IACA/tF,KAAAsoE,WAAAtoE,KAAAsoE,QAAAtoE,KAAAs6B,YAAAtmB,SAAAs0D,UACAtoE,KAAAgoF,UACA8F,QACA,IAAA93D,EAAA+3D,UACA/3D,EAAA+3D,SAGA/tF,KAAAiX,QAAA,qBAAA,CACAu2E,cAAAx3D,EACA83D,YAAAA,EACAC,QAAAA,IAIAA,EAKA/tF,KAAAs6B,YAAA+wC,uBAAAr1C,EAAA1wB,IAAA,wBAAAmE,KAAAnE,IAEA,IAAA0oF,EACAF,EACA9tF,KAAA2qB,UAAA,KACA3qB,KAAAqsF,cAAArsF,KAAAgoF,UACAhoF,KAAA4tF,qBACA5tF,KAAAitF,aAAAjtF,KAAAgoF,QAAAj9D,SACA/qB,KAAA2qB,UAAA3qB,KAAA+nF,iBAAAp9D,cAEAqjE,EAAA9uF,MAAAkR,WAAA9K,GACA0oF,GAAAhuF,KAAAgoF,QAAA,GAAAqC,gBACArqF,KAAA2qB,UAAAhsB,EAAAqB,KAAAgoF,QAAA,GAAAqC,cAAA7jF,UAAAmkB,eAKA3qB,KAAAqsF,cAAA,EAEA,IAAArE,EAAArpF,EAAA,YAAA,CACAwb,MAAA,aACA8zE,YAAA,EACAz7E,IAAAlN,IAGAtF,KAAAgoF,QACAhoF,KAAAgoF,QAAAvxE,YAAAuxE,GAEAA,EAAA15E,SAAAtO,KAAA+nF,kBAKA/nF,KAAA0tF,2BACA1tF,KAAAosF,0BACApsF,KAAAosF,wBAAAztF,EAAA,SAAA,CACAwb,MAAA,gCAEA6tE,EAAAkG,KAAA,mDACAluF,KAAAosF,wBAAApsF,KAAA+nF,iBAAAnyE,KAAA,kCAKA5V,KAAA4tF,qBACAE,GAAA,OAAA9tF,KAAAitF,eACAjF,EAAAj9D,OAAA/qB,KAAAitF,cACAjtF,KAAA+nF,iBAAAp9D,UAAA3qB,KAAA2qB,YAGAwjE,aAAAxvF,EAAAM,OAAA,CACAmvF,aAAA,EAEAC,WAAA,EACAC,OAAAC,IACAvuF,KAAAqsF,cAAA,EACArsF,KAAAitF,aAAA,KACAjtF,KAAA2qB,UAAA,KACA4jE,EAAAF,UAAA,OAEAnvF,MAAA2uF,6BAAA,IAAA7F,EAAA,KAEAA,EAAA5uE,GAAA,OAAA,KACApZ,KAAAqsF,cAAA,GACAyB,GAAAE,GAAA,OAAAhuF,KAAA2qB,WACAhsB,EAAAqpF,EAAA,GAAAqC,cAAA7jF,UAAAmkB,UAAA3qB,KAAA2qB,aAKA3qB,KAAAsF,IAAAA,EACAtF,KAAAgoF,QAAAA,EAEAhoF,KAAA0tF,0BACA1tF,KAAA2tF,sBAGA3tF,KAAAiX,QAAA,oBAAA,CACAu2E,cAAAxtF,KAAAs6B,YAAAtmB,SAAA+zD,eAAA/nE,KAAAusF,cACAvE,QAAAhoF,KAAAgoF,UAGAhoF,KAAA+pF,YAtFA/pF,KAAA+pF,WA0FA2D,uBAAA,WACA,MAAA,YAAA1tF,KAAA0sF,mBAGA8B,iBAAA,SAAAn1E,GACA,GAAArZ,KAAAwsF,iBACA,OAAA,EAGAxsF,KAAA+nF,iBAAA3xE,YAAA,kCAEA,MAAAkD,EAAA3a,EAAA0a,EAAA2c,QACAy4D,EAAAn1E,EAAAtS,KAAA,cAGA,GAAAynF,IAAAzuF,KAAA0sF,kBACA,OAAA,EAIA1sF,KAAA0sF,kBAAA+B,EACAzuF,KAAA4sF,YAAAtzE,EAAAtS,KAAA,SACAhH,KAAA6sF,aAAAvzE,EAAAtS,KAAA,UAGAhH,KAAAisF,qBAAAr2E,KAAA,QACAQ,YAAA,UACAlI,KAAA,gBAAA,SAEAoL,EACAxH,SAAA,UACA5D,KAAA,gBAAA,QAGA,YAAAlO,KAAA0sF,kBACA1sF,KAAAytF,sBAEAztF,KAAA+nF,iBAAAj2E,SAAA,iCACA9R,KAAA8pF,eACA9pF,KAAA2tF,wBAIAe,kBAAA,WAEA,GAAA1uF,KAAAwsF,mBAAAxsF,KAAA0tF,yBACA,OAAA,EAIA1tF,KAAA2sF,mBAAA,aAAA3sF,KAAA2sF,kBAGA3sF,KAAA2sF,kBAAA,WAFA3sF,KAAA2sF,kBAAA,YAMAztF,MAAA0V,gBAAA,0BAAA5U,KAAA2sF,mBAGA3sF,KAAA+nF,iBAAAj2E,SAAA,kCAGA9R,KAAA2tF,uBAGAA,oBAAA,WAEA,GAAA3tF,KAAAwsF,iBACA,OAAA,EAGAxsF,KAAAwsF,kBAAA,EAGAxsF,KAAAksF,gBACA91E,YAAA,YACA0B,WAAA,YACAA,WAAA,eAGA9X,KAAA+nF,iBAAAj2E,SAAA,2CAGA,WAAA9R,KAAA0sF,kBACA1sF,KAAA+nF,iBAAAj2E,SAAA,+BAEA9R,KAAA+nF,iBAAA3xE,YAAA,+BAIA,IAAAu4E,EAAA,EACAC,EAAA,EACAl9C,EAAA,EACAm9C,EAAA7uF,KAAA8nF,kBAAA/8D,SAAA,GAAA,GACA+jE,EAAA9uF,KAAA8nF,kBAAAhhD,QAAA,GACAioD,EAAA/uF,KAAA8sF,qBAAA9sF,KAAA0sF,mBAAA3hE,OACAikE,EAAAhvF,KAAA8sF,qBAAA9sF,KAAA0sF,mBAAA5lD,MAEA,cAAA9mC,KAAA2sF,mBACAmC,EAAAC,IACAJ,EAAAG,EAAAC,GAEAF,EAAAG,IACAJ,EAAAC,EAAAG,KAGAH,EAAAE,IACAJ,EAAAE,EAAAE,GAEAD,EAAAE,IACAJ,EAAAE,EAAAE,IAIAt9C,EAAAi9C,EACAC,EAAAD,IACAj9C,EAAAk9C,GAIA,MAAAl7C,GAAA,IAAAhC,EAAA,EACAu9C,EAAA,cAAAjvF,KAAA2sF,kBAAA,SAAA,OAGA3sF,KAAAmsF,YAAArhE,IAAA,CACAgc,MAAA9mC,KAAA8sF,qBAAA9sF,KAAA0sF,mBAAA5lD,MAAA,KACA/b,OAAA/qB,KAAA8sF,qBAAA9sF,KAAA0sF,mBAAA3hE,OAAA,KACAg/B,UAAA,SAAArY,EAAA,eAAAgC,EAAA,MAAAA,EAAA,aAAAu7C,EAAA,MAIAjvF,KAAAysF,wBACArnE,aAAAplB,KAAAysF,wBAEAzsF,KAAAysF,uBAAApnE,WAAA,KAEA,cAAArlB,KAAA2sF,kBACA3sF,KAAAosF,wBAAAthE,IAAA,CACAgc,MAAA9mC,KAAA6sF,aAAA,KACA9hE,OAAA/qB,KAAA4sF,YAAA,KACA7iC,UAAA,SAAArY,EAAA,eAAAgC,EAAA,MAAAA,EAAA,KACAw7C,UAAA,EACAC,WAAA,IAAA,GAAAz9C,EAAA,OAGA1xC,KAAAosF,wBAAAthE,IAAA,CACAgc,MAAA9mC,KAAA4sF,YAAA,KACA7hE,OAAA/qB,KAAA6sF,aAAA,KACA9iC,UAAA,SAAArY,EAAA,eAAAgC,EAAA,MAAAA,EAAA,KACAw7C,UAAA,IAAA,GAAAx9C,EAAA,KACAy9C,WAAA,IAKAnvF,KAAA+nF,iBAAA3xE,YAAA,kCACApW,KAAA+nF,iBAAA3xE,YAAA,iCACApW,KAAAwsF,kBAAA,GAEA,MAGAiB,mBAAA,WAEAztF,KAAAysF,wBACArnE,aAAAplB,KAAAysF,wBAEAzsF,KAAA0sF,kBAAA,UACA1sF,KAAAisF,qBAAAr2E,KAAA,QACAQ,YAAA,UACAlI,KAAA,gBAAA,SACAlO,KAAAisF,qBAAAr2E,KAAA,gCACA9D,SAAA,UACA5D,KAAA,gBAAA,QACAlO,KAAAksF,gBACAp6E,SAAA,YACA5D,KAAA,WAAA,IACAA,KAAA,cAAA,IACAlO,KAAA+nF,iBAAA3xE,YAAA,kCACApW,KAAA+nF,iBAAA3xE,YAAA,2CACApW,KAAA+nF,iBAAA3xE,YAAA,+BAGApW,KAAAosF,0BAEApsF,KAAA4tF,qBACA5tF,KAAAgoF,QAAA,GAAAoH,cAAAC,kBAEArvF,KAAAosF,wBAAAvjE,SACA7oB,KAAAosF,wBAAA,KACApsF,KAAAgoF,QAAA,KACAhoF,KAAA8pF,gBAGA9pF,KAAAwsF,kBAAA,GAGA3C,UAAA,SAAA1f,GACA,IAAAyf,EAAAzf,EAAApuC,QAYA,OATA32B,QAAA2lF,gBAAA5gB,EAAAyf,GAGAA,EAAA17E,KAAA,KAAA,IACA07E,EAAAh0E,KAAA,QAAA1H,KAAA,KAAA,IAGA07E,EAAAh0E,KAAA,UAAAqgB,KAAA,YAAA,GAEA2zD,GAGA9sC,aAAA,WACA98C,KAAAyoF,qBAAAzoF,KAAAspF,gBACAtpF,KAAA8nF,kBAAAh2E,SAAA,aAGAy0E,QAAA,WACA,QAAArnF,MAAAqY,YACAvX,KAAAykC,YAAAzkC,KAAAyoF,qBAAAzoF,KAAAmmF,QAAAgB,WAEAnnF,KAAAykC,YAAAzkC,KAAAyoF,qBAAAzoF,KAAAmmF,QAAAgB,WAGAnnF,KAAAkqF,gBAGA1D,YAAA,WACAxmF,KAAA8nF,kBAAA1xE,YAAA,YACAlX,MAAA0V,gBAAA,0BAAA5U,KAAAykC,eAEA,CACA2kD,mBAAA,IACAI,mBAAA,MC5vBAtqF,MAAA6kD,iBAAA3+C,QAAAw3B,MAAA39B,OAAA,CACA+kC,QAAA,KACA/oB,SAAA,KACA8Z,cAAA,KACAxzB,KAAA,KACAohD,OAAA,KACA3C,UAAA,EAMA3kC,KAAA,SAAA2oB,EAAAjP,EAAA/gB,GAKA,IAJAA,EAAArV,EAAAM,OAAAe,KAAAsvF,gBAAAt7E,IAEAwJ,OAAAxd,KAAAuvF,QAAAtzE,KAAAjc,MAEAd,MAAA6kD,iBAAAC,aAAA,CACA,IAAAwrC,EAAAtwF,MAAA6kD,iBAAAC,aAOA,OALAwrC,EAAAxrD,UAAAA,IACAwrD,EAAAC,UAAAzrD,EAAAhwB,EAAAowC,cAAApwC,EAAAqwC,gBACAmrC,EAAAz6D,cAAAA,GAGA/0B,KAAAwqB,UAGAtrB,MAAA6kD,iBAAAC,aAAAhkD,KACAA,KAAA+0B,cAAAA,EAEA/0B,KAAA4S,WAAAjU,EAAA,6CAAA2P,SAAAlJ,QAAAsN,MAEA1S,KAAA0vB,KAAA1vB,KAAA4S,WAAAjU,EAAAM,OAAA,CACAm/B,WAAA,GACApqB,IAGAhU,KAAA4S,aACA5S,KAAA4S,WAAA4E,SAAA,QACAxX,KAAA4S,WAAA+nB,OAAA7P,IAAA,UAAA,GAEA9qB,KAAAge,OAAAxG,SAAA,QACAxX,KAAAge,OAAA2c,OAAA7P,IAAA,UAAA,IAGA9qB,KAAAyvF,UAAAzrD,EAAAhwB,EAAAowC,cAAApwC,EAAAqwC,iBAOAkrC,QAAA,WAQA,OAPArwF,MAAA6kD,iBAAAC,aAAA,KACAhkD,KAAA+0B,eACA/0B,KAAA+0B,cAAA26D,UAAA1vF,KAAA+0B,cAAAmvB,cAGAlkD,KAAAge,OAAA1D,SAEAta,KAAAwqB,WAOAy5B,aAAA,WACA,IAAAurC,EAAAtwF,MAAA6kD,iBAAAC,aAQA,OANAwrC,EAAArxE,OACAqxE,EAAAxxE,OAAA1D,SACAk1E,EAAAhlE,UAEAtrB,MAAA6kD,iBAAAC,aAAA,MAEA,GASAyrC,UAAA,SAAAzrD,EAAAogB,EAAAC,GACArkD,KAAAgkC,QAAAA,EAEAhkC,KAAA4S,WAAA+8E,QACA3vF,KAAA2iD,QAAA,EAEA3iD,KAAA4vF,cAAA,KACA5vF,KAAA6vF,aAAA,KAEA,IAAAC,EAAA,IAAA1qF,QAAA2xB,KAAAhM,SACAglE,EAAAp/E,KAAAkhB,IAAAi+D,EAAA,EAAA,EAAA1qF,QAAA2xB,KAAA+P,QAAA,EAAA9mC,KAAAgU,SAAAg8E,WAGA,GAFAF,EAAAC,EAAA,EAAA,EAEA3rC,GAAAC,EAAA,CACA,IAAArZ,EAAAoZ,EAAAC,EACA0rC,EAAAp/E,KAAAkhB,IAAAuyB,EAAAh/C,QAAA2xB,KAAA+P,QAAA,EAAA9mC,KAAAgU,SAAAg8E,YAEAD,GADAD,EAAAn/E,KAAAkhB,IAAAk+D,EAAA/kD,EAAA5lC,QAAA2xB,KAAAhM,SAAA,EAAA/qB,KAAAgU,SAAAg8E,YACAhlD,GAGAr6B,KAAAkhB,IAAAuyB,EAAAh/C,QAAA2xB,KAAA+P,QAAA,EAAA9mC,KAAAgU,SAAAg8E,aAEAF,GADAC,EAAAp/E,KAAAkhB,IAAAuyB,EAAAh/C,QAAA2xB,KAAA+P,QAAA,EAAA9mC,KAAAgU,SAAAg8E,YACAhlD,GAIAhrC,KAAAiwF,iBAAAF,EAAAD,GAEA9vF,KAAAib,SAAAtc,EAAA,2CAAA2P,SAAAtO,KAAA4S,YACA,IAAAqkB,EAAAj3B,KAAA4S,WAAAmY,SAAA,EAAA/qB,KAAAib,SAAA8P,SAAA,EAAA,KACAtT,EAAAzX,KAAA4S,WAAAk0B,QAAA,EAAA9mC,KAAAib,SAAA6rB,QAAA,EAAA,KAEA9mC,KAAAib,SAAA6P,IAAA,CAAArT,KAAAA,EAAAwf,IAAAA,EAAAqF,SAAA,aACAt8B,KAAAggD,YAEA9gD,MAAA4H,kBAAA,sBAAA,CAAAk9B,QAAAA,EAAAgc,UAAAhgD,KAAAggD,WAAA,CAAAv1C,EAAA5C,KAKA,GAJA7H,KAAA4S,WAAAwD,YAAA,WACApW,KAAAib,SAAAX,SACAta,KAAA2iD,QAAA,EAEA,YAAA96C,EACA,GAAA4C,EAAA9C,QAAA,CACA,GAAA8C,EAAAu1C,WAAAhgD,KAAAggD,UACA,OAGA,IAAAv1C,EAAAylF,YAGA,OAFAlwF,KAAA4S,WAAAd,SAAA,cACA9R,KAAA4S,WAAAP,OAAA1T,EAAA,OAAA,CAAA0E,KAAAnE,MAAAS,EAAA,MAAA,4BAIAK,KAAA4S,WAAAwD,YAAA,SACApW,KAAA4S,WAAAP,OAAA5H,EAAAylF,aACAhxF,MAAA8S,eAAAvH,EAAAqU,UACA5f,MAAAoT,eAAA7H,EAAAsU,eAEA7W,MAAAuC,EAAA7C,OAEA5H,KAAAme,UAYA8xE,iBAAA,SAAAF,EAAAD,GACA9vF,KAAA4S,WAAAkY,IAAA,CACAgc,MAAAipD,EACA9mD,YAAA8mD,EACAI,YAAAJ,EACAhlE,OAAA+kE,EACA5mD,aAAA4mD,EACAn9B,aAAAm9B,EACA74D,KAAA7xB,QAAA2xB,KAAAhM,SAAA+kE,GAAA,EACAr4E,MAAArS,QAAA2xB,KAAA+P,QAAAipD,GAAA,MAGA,CACAT,gBAAA,CACAlrC,cAAA,KACAC,eAAA,QC5KAnlD,MAAAoiD,YAAAl8C,QAAAuV,KAAA1b,OAAA,CACA47C,aAAA,KACAu1C,kBAAA,KACAC,mBAAA,KAEAC,WAAA,EACAC,oBAAA,EACAC,eAAA,EAEAn1E,KAAA,SAAA3F,EAAA+6E,GACAA,IACAzwF,KAAAwwF,eAAA,GAGAxwF,KAAA66C,aAAAl8C,EAAA,6CAAA2P,SAAAoH,GACA1V,KAAAowF,kBAAAzxF,EAAA,oCAAA2P,SAAAtO,KAAA66C,cACA76C,KAAAqwF,mBAAA1xF,EAAA,6CAAA22B,YAAAt1B,KAAA66C,cAEA76C,KAAAs+C,oBAMAA,iBAAA,WAGAt+C,KAAA4iD,sBAAA,KACA5iD,KAAA66C,aAAA/oC,SAAA,WAGA9R,KAAAu+C,aAAA,GACAv+C,KAAA0wF,sBAAA,GACA1wF,KAAAqwF,mBAAAtxF,KAAA,IAEAiB,KAAAwwF,eACAxwF,KAAA66C,aAAA/oC,SAAA,eAOAotC,gBAAA,WACAl/C,KAAA66C,aAAA81C,OAAA,OAAA,IAAA,KACA3wF,KAAA66C,aAAA/oC,SAAA,UAAA6+E,OAAA,EAAA,EAAAhyF,EAAAwhB,SAIAq+B,gBAAA,WACAx+C,KAAA66C,aAAAzkC,YAAA,UACApW,KAAAqwF,mBAAAj6E,YAAA,WAGAmoC,aAAA,SAAArrB,GACAlzB,KAAAswF,WAAAp9D,GAGA09D,mBAAA,SAAA19D,GACAlzB,KAAAswF,YAAAp9D,GAGAw9D,sBAAA,SAAAx9D,GACAlzB,KAAAuwF,oBAAAr9D,GAGAowB,4BAAA,SAAApwB,GACAlzB,KAAAuwF,qBAAAr9D,GAGAqwB,kBAAA,WAEAvjD,KAAAswF,WAAA3/E,KAAA6Y,IAAAxpB,KAAAswF,WAAA,GAEA,IAAAxpD,EAAAn2B,KAAAkhB,IAAA,IAAAlhB,KAAAK,MAAA,IAAAhR,KAAAuwF,oBAAAvwF,KAAAswF,aAEAtwF,KAAA4iD,sBAAA9b,GAEA9mC,KAAAwwF,eACAxwF,KAAAqwF,mBAAAtxF,KAAAiB,KAAAuwF,oBAAA,MAAAvwF,KAAAswF,aAIA1tC,sBAAA,SAAAiuC,EAAAniD,GACA,IAAAmiD,EACA7wF,KAAA66C,aAAA/oC,SAAA,YAEA9R,KAAA66C,aAAAzkC,YAAA,WAEAs4B,EACA1uC,KAAAowF,kBAAA54E,SAAA,QAAAA,SAAA,CAAAsvB,MAAA+pD,EAAA,KAAA,QAEA7wF,KAAAowF,kBAAA54E,SAAA,QAAAsvB,MAAA+pD,EAAA,SC5FA3xF,MAAAmiD,cAAAj8C,QAAAuV,KAAA1b,OAAA,CACAuwB,MAAA,KACAshE,mBAAA,KACAC,QAAA,KACAC,iCAAA,KACAC,gCAAA,KACAC,6BAAA,KACAC,cAAA,KAEAC,SAAA,GACAC,qBAAA1yF,EAAAwhB,KACAmxE,uBAAA,GACAC,gBAAA,EAEA1yC,aAAA,WACA7+C,KAAAoxF,SAAA,GACApxF,KAAAqxF,qBAAA1yF,EAAAwhB,KACAngB,KAAAsxF,uBAAA,GACAtxF,KAAAuxF,gBAAA,GAGAxyC,UAAA,SAAAE,GACAj/C,KAAAoxF,SAAAlwF,KAAA+9C,IAGAI,eAAA,WACA,OAAAr/C,KAAAoxF,SAAA9wF,QAGAi/C,iBAAA,SAAAt4C,GACAjH,KAAAqxF,qBAAApqF,EACAjH,KAAAsxF,uBAAA,GACAtxF,KAAAuxF,gBAAA,EAEAvxF,KAAAwxF,0BAGAA,uBAAA,WACA,IAAAvyC,EAAAj/C,KAAAoxF,SAAApxF,KAAAuxF,iBAAAtyC,OACAwyC,EAAAzxF,KAAAoxF,SAAA9wF,QAAAN,KAAAuxF,gBAAA,GAEAvxF,KAAA0xF,YAAAzyC,EAAAp/C,QAAAo/C,EAAAtD,QAAA37C,KAAA2xF,4BAAA11E,KAAAjc,MAAAyxF,IAUAE,4BAAA,SAAAjyC,EAAAkyC,GACA,IAAA3yC,EAAAj/C,KAAAoxF,SAAApxF,KAAAuxF,iBACAE,EAAAzxF,KAAAoxF,SAAA9wF,QAAAN,KAAAuxF,gBAAA,GAGAM,EAAAlzF,EAAAM,OAAAggD,EAAA,CAAAS,OAAAA,IACA1/C,KAAAsxF,uBAAApwF,KAAA2wF,GAGAJ,GAEAzxF,KAAAuxF,kBAGAK,EACA5xF,KAAA2xF,4BAAAjyC,GAAA,GAGA1/C,KAAAwxF,0BAIA,mBAAAxxF,KAAAqxF,sBACArxF,KAAAqxF,qBAAArxF,KAAAsxF,yBAaAI,YAAA,SAAA7xF,EAAA87C,EAAA10C,EAAA6qF,GACA9xF,KAAA+xF,gBAAA9qF,EAEA,OAAAjH,KAAAwvB,QACAxvB,KAAAwvB,MAAA,IAAApqB,QAAAw3B,MAAA,CAAA9B,kBAAA,KAGA,OAAA96B,KAAA8wF,qBACA9wF,KAAA8wF,mBAAAnyF,EAAA,iDAAAmT,WAAAxD,SAAAlJ,QAAAsN,OAGA1S,KAAA+wF,QAAApyF,EAAA,4BAAA2P,SAAAtO,KAAA8wF,mBAAAnB,SAEA3vF,KAAAgyF,eAAArzF,EAAA,2BAAA2P,SAAAtO,KAAA+wF,SAEA/wF,KAAAiyF,eAAAtzF,EAAA,+BAAA2P,SAAAtO,KAAA+wF,SAEA/wF,KAAAgxF,iCAAAryF,EAAA,4CAAA2P,SAAAtO,KAAA+wF,SAAA5yE,OACAne,KAAAixF,gCAAAtyF,EAAA,4BAAA2P,SAAAtO,KAAAgxF,kCACAhxF,KAAAkxF,6BAAAvyF,EAAA,WAAA2P,SAAAtO,KAAAgxF,kCAEAhxF,KAAAkyF,eAAAvzF,EAAA,gCAAA2P,SAAAtO,KAAA+wF,SAEA/wF,KAAAwvB,MAAAuyC,aAAA/hE,KAAA8wF,oBAEA9wF,KAAAgyF,eAAAjzF,KAAAc,GAEA,IAAAkb,EAAApc,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,MACA9W,KAAAnE,MAAAS,EAAA,MAAA,YACA2O,SAAAtO,KAAAkyF,gBACAza,EAAA94E,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,sBACA9W,KAAAnE,MAAAS,EAAA,MAAA,QACA2O,SAAAtO,KAAAkyF,gBAEA,IAAA,IAAAxyF,EAAA,EAAAA,EAAAi8C,EAAAr7C,OAAAZ,IAAA,CACA,IACAyyF,EADAxzF,EAAA,8DAAAg9C,EAAAj8C,GAAAyF,MAAA,OAAAw2C,EAAAj8C,GAAA0a,MAAA,kBAAA9L,SAAAtO,KAAAiyF,gBACAr8E,KAAA,SAEA5V,KAAAwc,YAAA21E,EAAA,SAAA,WACA1a,EAAArhE,YAAA,eAIApW,KAAAwc,YAAAi7D,EAAA,YAAA,SAAAp+D,GACA,IAAAqmC,EAAA/gD,EAAA0a,EAAAE,eAAAiV,QAAA,UAAA5Y,KAAA,oCAAAtR,MACAstF,EAAA5xF,KAAAixF,gCAAAh7D,KAAA,WAEAj2B,KAAAoyF,oBAAA1yC,EAAAkyC,MAGA5xF,KAAAwc,YAAAzB,EAAA,YAAA,WACA,IACA62E,EAAA5xF,KAAAixF,gCAAAh7D,KAAA,WAEAj2B,KAAAoyF,oBAHA,SAGAR,MAGAE,IACA9xF,KAAAgxF,iCAAAr2D,OACA36B,KAAAkxF,6BAAAnyF,KAAA,IAAAG,MAAAS,EAAA,MAAA,kDAAA,CAAA8B,OAAAqwF,MAGA9xF,KAAAwvB,MAAAmL,OACA36B,KAAAwvB,MAAArH,eAAA/iB,QAAAw3B,MAAA5e,OAAA,SACAhe,KAAAwc,YAAApX,QAAAw3B,MAAA5e,OAAA,QAAA,kBAUAo0E,oBAAA,SAAA1yC,EAAAkyC,GACA5xF,KAAA+wF,QAAAsB,QAAA,OAAA,KACAryF,KAAAwvB,MAAArR,OACAne,KAAA+xF,gBAAAryC,EAAAkyC,MAOAU,cAAA,WACAtyF,KAAAoyF,oBAAA,UAAA,MCrLA,SAAAzzF,GAMAO,MAAA29E,YAAAz3E,QAAAuV,KAAA1b,OAAA,CACA4yB,IAAA,KACArI,IAAA,KACA+oE,WAAA,KACAptF,MAAA,KAEAyN,WAAA,KACA2vB,SAAA,KAEAlnB,KAAA,SAAAlW,EAAA6O,GACAhU,KAAA8Y,YAAA9E,EAAA9U,MAAA29E,YAAAvhE,UAEAtb,KAAA4S,WAAAjU,EAAA,SAAA,CACAwb,MAAA,eACAoY,KAAA,SACAC,SAAA,IAGAxyB,KAAA+tF,UACA/tF,KAAAivC,SAAA9pC,GAAA,GAEAnF,KAAAwc,YAAAxc,KAAA4S,WAAA,UAAAyG,IACA,OAAAA,EAAAyG,SACA,KAAA1a,QAAAiiF,OACArnF,KAAAivC,SAAAjvC,KAAAmF,MAAAnF,KAAAgU,SAAA8oE,MACAzjE,EAAAmM,iBACA,MACA,KAAApgB,QAAAmiF,SACAvnF,KAAAivC,SAAAjvC,KAAAmF,MAAAnF,KAAAgU,SAAA8oE,MACAzjE,EAAAmM,iBACA,MACA,KAAApgB,QAAA4hF,UACA,QAAA9nF,MAAAqY,YACAvX,KAAAivC,SAAAjvC,KAAAmF,MAAAnF,KAAAgU,SAAA8oE,MAEA98E,KAAAivC,SAAAjvC,KAAAmF,MAAAnF,KAAAgU,SAAA8oE,MAEAzjE,EAAAmM,iBACA,MACA,KAAApgB,QAAA6hF,SACA,QAAA/nF,MAAAqY,YACAvX,KAAAivC,SAAAjvC,KAAAmF,MAAAnF,KAAAgU,SAAA8oE,MAEA98E,KAAAivC,SAAAjvC,KAAAmF,MAAAnF,KAAAgU,SAAA8oE,MAEAzjE,EAAAmM,qBAMAuoE,QAAA,WAMA,GAJA/tF,KAAA6xB,IAAA7xB,KAAAwyF,OACAxyF,KAAAwpB,IAAAxpB,KAAAyyF,OACAzyF,KAAAuyF,YAAAvyF,KAAAwpB,IAAAxpB,KAAA6xB,KAAA7xB,KAAAgU,SAAA8oE,MAEA4V,OAAAC,UAAA3yF,KAAAuyF,YACA,KAAA,6BAGAvyF,KAAAuiC,UACAviC,KAAAuiC,SAAAjoB,SAGAta,KAAA4S,WAAA1E,KAAA,gBAAAlO,KAAA6xB,KACA7xB,KAAA4S,WAAA1E,KAAA,gBAAAlO,KAAAwpB,KACAxpB,KAAAuiC,SAAA5jC,IAGA,IAAA,IAAAwG,EAAAnF,KAAA6xB,IAAA1sB,GAAAnF,KAAAwpB,IAAArkB,GAAAnF,KAAAgU,SAAA8oE,KACA98E,KAAAuiC,SAAAviC,KAAAuiC,SAAA9lB,IAAA9d,EAAA,OAAA,CACAyb,MAAApa,KAAAgU,SAAA+oE,WAAA53E,GACA6B,KAAA,CAAA7B,MAAAA,MAMA,GAFAnF,KAAAuiC,SAAAj0B,SAAAtO,KAAA4S,YAEA,OAAA5S,KAAAmF,MAAA,CACA,IAAAA,EAAAnF,KAAAmF,MACAnF,KAAAmF,MAAA,KACAnF,KAAAivC,SAAA9pC,GAAA,GAGAnF,KAAAwc,YAAAxc,KAAAuiC,SAAA,YAAAlpB,IACArZ,KAAAuiC,SAAAnsB,YAAA,kCACAzX,EAAA0a,EAAAE,eACAzH,SAAA,kCACA8gF,UAAA9gF,SAAA,kBAGA9R,KAAAwc,YAAAxc,KAAAuiC,SAAA,WAAA,KACAviC,KAAAuiC,SAAAnsB,YAAA,kBAGApW,KAAAwc,YAAAxc,KAAAuiC,SAAA,QAAAlpB,IACArZ,KAAAivC,SAAAtwC,EAAAqI,KAAAqS,EAAAE,cAAA,UACAF,EAAA2X,kBACAhxB,KAAA4S,WAAA4H,WAIAy0B,SAAA,SAAA9pC,EAAA0tF,GAGA,GAFA1tF,EAAAwL,KAAA6Y,IAAA7Y,KAAAkhB,IAAA1sB,EAAAnF,KAAAwpB,KAAAxpB,KAAA6xB,KAEA7xB,KAAAmF,SAAAnF,KAAAmF,MAAAA,GACA,OAGAnF,KAAA4S,WAAA1E,KAAA,CACA4kF,gBAAA9yF,KAAAmF,MACA4tF,iBAAA/yF,KAAAgU,SAAA+oE,WAAA/8E,KAAAmF,SAGAnF,KAAAuiC,SAAAnsB,YAAA,sBACA,IAAA48E,EAAAhzF,KAAAuiC,SAAApwB,IAAAnS,KAAAmF,MAAAnF,KAAA6xB,KAAA7xB,KAAAgU,SAAA8oE,MACAkW,EAAAv2E,IAAAu2E,EAAAJ,WAAA9gF,SAAA,UACAkhF,EAAAlhF,SAAA,gBAEA,IAAA+gF,GACA7yF,KAAAgU,SAAA43B,SAAAzmC,IAIAqtF,KAAA,WACA,MAAA,mBAAAxyF,KAAAgU,SAAA6d,IACA7xB,KAAAgU,SAAA6d,MAEA7xB,KAAAgU,SAAA6d,KAGA4gE,KAAA,WACA,MAAA,mBAAAzyF,KAAAgU,SAAAwV,IACAxpB,KAAAgU,SAAAwV,MAEAxpB,KAAAgU,SAAAwV,MAEA,CACAlO,SAAA,CACAuW,IAAA,EACArI,IAAA,IACAszD,KAAA,GACAC,WAAA,KACAnxC,SAAAjtC,EAAAwhB,QAtJA,CAyJAthB,QCvJAK,MAAAusC,eAAArmC,QAAAuV,KAAA1b,OAAA,CACA2T,WAAA,KACA8R,SAAA,KACAg2D,gBAAA,KACAr2E,OAAA,KACAc,MAAA,KAEA8tF,eAAA,KAEA53E,KAAA,SAAAxF,EAAA7B,GACAhU,KAAA8Y,YAAA9E,EAAA9U,MAAAusC,eAAA6jD,iBAEAtvF,KAAAmF,MAAA,EACAnF,KAAAkzF,gBAAA,GACAlzF,KAAAmzF,eAAA,GACAnzF,KAAAozF,UAAA,GACApzF,KAAAqzF,SAAA,GAEArzF,KAAA4S,WAAAjU,EAAA,IAAAkX,GACA7V,KAAAszF,SAAA30F,EAAA,+BAAA2P,SAAAtO,KAAA4S,YACA5S,KAAAuzF,QAAA50F,EAAA,8BAAA2P,SAAAtO,KAAA4S,YACA5S,KAAAwzF,aAAA70F,EAAA,mCAAA2P,SAAAtO,KAAA4S,YACA5S,KAAAyzF,eAAA90F,EAAA,aAAA2P,SAAAtO,KAAAwzF,cAEA,IAAA,IAAA9zF,EAAAM,KAAAkzF,eAAAxzF,GAAAM,KAAAmzF,eAAAzzF,IAAA,CACA,IAAAqS,EAAApT,EAAA,2CAAAe,EAAA,wBAAAA,EAAA,eAAA4O,SAAAtO,KAAAyzF,gBAEA/zF,EAAA,GAAA,GACAqS,EAAAD,SAAA,mBAGA,IAAApS,GACAqS,EAAAD,SAAA,YAIA9R,KAAA0kB,SAAA1kB,KAAA4S,WAAAgD,KAAA,eAEA5V,KAAAwc,YAAAxc,KAAA4S,WAAA,SAAA5S,KAAA0zF,cAAAz3E,KAAAjc,OACAA,KAAAwc,YAAAxc,KAAA4S,WAAA,WAAA5S,KAAA2zF,gBAAA13E,KAAAjc,OACAA,KAAAwc,YAAApX,QAAAsN,KAAA,UAAA1S,KAAA4zF,eAAA33E,KAAAjc,OACAA,KAAAwc,YAAApX,QAAAsN,KAAA,SAAA1S,KAAA6zF,cAAA53E,KAAAjc,OAMAqlB,WAAA,KAEArlB,KAAA8zF,2BAAA,IAAA9zF,KAAA0kB,SAAApkB,OAAA,GACAN,KAAAyzF,eAAA3oE,IAAA,QAAA9qB,KAAA8zF,2BAAA,EAAA9zF,KAAA4S,WAAAk0B,QAAA,IACA,KAGA4sD,cAAA,WACA,IAAAj8E,EAAAzX,KAAA+zF,gBAAA/zF,KAAAmF,OACAnF,KAAAyzF,eAAA3oE,IAAA,OAAArT,IAGAk8E,gBAAA,SAAAt6E,EAAA26E,GACA36E,EAAAmM,iBAEAxlB,KAAAizF,eAAAe,EAAA13D,SAAAqJ,EACA3lC,KAAAi0F,UAAAj0F,KAAAyzF,eAAAn3D,WAAA7kB,KAEAzX,KAAA+mF,UAAA,EACA/mF,KAAA0rC,WAGAkoD,eAAA,SAAAv6E,EAAA26E,GACA,GAAAh0F,KAAA+mF,SAAA,CACA1tE,EAAAmM,iBAEA,IAAA0uE,EAAAl0F,KAAAizF,eAAAe,EAAA13D,SAAAqJ,EACAluB,EAAAzX,KAAAi0F,UAAAC,EACA/uF,EAAAnF,KAAAm0F,gBAAA18E,GAEAzX,KAAAivC,SAAA9pC,GAEAnF,KAAA4rC,aAIAqD,SAAA,SAAA9pC,GACA,IAAAsS,EAAAzX,KAAA+zF,gBAAA5uF,GACAA,EAAAnF,KAAAozF,UACAjuF,EAAAnF,KAAAozF,SACA37E,EAAAzX,KAAA+zF,gBAAA5uF,IACAA,EAAAnF,KAAAqzF,WACAluF,EAAAnF,KAAAqzF,SACA57E,EAAAzX,KAAA+zF,gBAAA5uF,IAGAnF,KAAAyzF,eAAA3oE,IAAA,OAAArT,GAEAtS,GAAAnF,KAAAozF,UAAAjuF,GAAAnF,KAAAqzF,WACArzF,KAAA0kB,SAAAtO,YAAA,YAEAzX,EAAA2U,KAAAtT,KAAA0kB,UAAA,SAAAplB,EAAA2wB,GACAtxB,EAAAsxB,GAAAjpB,KAAA,cAAA,GACArI,EAAAsxB,GAAAjpB,KAAA,eAAA7B,GACAxG,EAAAsxB,GAAAne,SAAA,YAGAnT,EAAAsxB,GAAAjpB,KAAA,cAAA,GACArI,EAAAsxB,GAAAjpB,KAAA,eAAA7B,GACAxG,EAAAsxB,GAAAne,SAAA,YAIA,GAAAnT,EAAAsxB,GAAAjpB,KAAA,eACArI,EAAAsxB,GAAAne,SAAA,gBAKA9R,KAAAmF,MAAAA,GAGA0uF,cAAA,SAAAx6E,GACArZ,KAAA+mF,WACA1tE,EAAAmM,iBACAxlB,KAAA+mF,UAAA,EACA/mF,KAAA+rC,UAIAooD,gBAAA,SAAA73D,GACA,IAAA83D,GAAA,EAAAp0F,KAAAkzF,eACAmB,GAAA,GAAAr0F,KAAAkzF,eAAAlzF,KAAAmzF,gBAEA,OAAAnzF,KAAAwzF,aAAA1sD,QAAA,GAAA,EAAAxK,GAAAt8B,KAAA8zF,2BAAAO,EAAAD,GAGAL,gBAAA,SAAA5uF,GACA,IAAAivF,GAAA,EAAAp0F,KAAAkzF,eACAmB,GAAA,GAAAr0F,KAAAkzF,eAAAlzF,KAAAmzF,gBAEA,SAAAhuF,EAAAivF,GAAAp0F,KAAA8zF,2BAAAO,EAAAr0F,KAAAwzF,aAAA1sD,QAAA,IAGA4E,QAAA,WACA,mBAAA1rC,KAAAgU,SAAA43B,UACA5rC,KAAAgU,SAAA03B,QAAA1rC,OAIA4rC,SAAA,WACA,mBAAA5rC,KAAAgU,SAAA43B,UACA5rC,KAAAgU,SAAA43B,SAAA5rC,OAIA+rC,MAAA,WACA,mBAAA/rC,KAAAgU,SAAA43B,UACA5rC,KAAAgU,SAAA+3B,MAAA/rC,OAIAsvF,gBAAA,CACA5jD,QAAA/sC,EAAAwhB,KACAyrB,SAAAjtC,EAAAwhB,KACA4rB,MAAAptC,EAAAwhB,QC/JAjhB,MAAAo1F,cAAAp1F,MAAAo/B,mBAAAr/B,OAAA,CACAmgC,oBAAA,SAAAF,GAKAA,GAHAA,EAAAA,EAAAlgC,QAAA,WAAA,KAGAA,QAAA,yBAAA,IAGAE,MAAAq1F,uBACAr1D,EAAAA,EAAAtvB,eAGA1Q,MAAAs1F,wBAEAt1D,EAAAhgC,MAAAgS,YAAAguB,EAAAl/B,KAAAgU,SAAA7C,UAKA,IAAAwzE,EAAAzlF,MAAA+P,YAAAwlF,QAAAC,WAAAx1D,EAAA,CAAAu1D,QAAA,4BAEA,OAAA9P,EAAArkF,OACAqkF,EAAAlkF,KAAAvB,MAAAy1F,mBAEA,MCzBAz1F,MAAA01F,UAAAxvF,QAAAuV,KAAA1b,OAAA,CACA4W,GAAA,KAEAjD,WAAA,KACAk4B,MAAA,KACA+pD,cAAA,KAKAx5E,KAAA,SAAAxF,EAAAwf,EAAArhB,GACAhU,KAAA6V,GAAAA,EACA7V,KAAA4S,WAAAjU,EAAA02B,GACAr1B,KAAA8Y,YAAA9E,EAAA9U,MAAA01F,UAAAt5E,UAGAtb,KAAA4S,WAAA5L,KAAA,eACA5B,QAAA2qE,IAAA,kDACA/vE,KAAA4S,WAAA5L,KAAA,aAAAwjB,WAGAxqB,KAAA4S,WAAA5L,KAAA,YAAAhH,MAEAA,KAAA8qC,MAAA,GAEA9qC,KAAAgU,SAAAiQ,YACAtlB,EAAAM,OAAAe,KAAA8qC,MAAA5rC,MAAAqV,gBAAAvU,KAAAgU,SAAAiQ,WAAA,UAGA,IAAAjkB,KAAA8qC,MAAAxgB,sBACAtqB,KAAA8qC,MAAAxgB,oBAAA,IAKA,IAFA,IAAAwqE,EAAA90F,KAAA4S,WAAAgD,KAAA,MAAAsb,KAAA,QAEAxxB,EAAA,EAAAA,EAAAo1F,EAAAx0F,OAAAZ,IAAA,CACA,IAAA+gC,EAAA9hC,EAAAm2F,EAAAp1F,IACAqS,EAAA0uB,EAAArc,SACA2D,EAAAppB,EAAA,8BAAAO,MAAAS,EAAA,MAAA,sBAAA,OAAA+oB,UAAA+X,IAEA,IAAA9hC,EAAAsO,QAAAwzB,EAAAvmB,SAAA,YAAAlT,KAAA,MAAAhH,KAAA8qC,MAAAxgB,sBACAvY,EAAAD,SAAA,aAGA9R,KAAA+0F,WAAAhtE,GAGA/nB,KAAAgU,SAAAokB,WACAp4B,KAAA60F,cAAA,IAAA31F,MAAA81F,cAAAh1F,KAAAA,KAAAgU,SAAAghE,YAGAh1E,KAAAgU,SAAAihE,aACAj1E,KAAAi1F,kBAAAj1F,KAAA4S,WAAAgD,KAAA,UAIAm/E,WAAA,SAAAhtE,GACAA,EAAA3O,GAAA,QAAAC,IACA,IAAAtH,EAAApT,EAAA0a,EAAAE,eAAAE,QAAA,MACAmB,EAAA7I,EAAAmI,SAAA,QAAAtE,KAAA,kBAAA5O,KAAA,MACAkuF,EAAAv2F,EAAAsO,QAAA2N,EAAA5a,KAAA8qC,MAAAxgB,qBAEAvY,EAAA4D,SAAA,cACA5D,EAAAqE,YAAA,cAEA,IAAA8+E,GACAl1F,KAAA8qC,MAAAxgB,oBAAAhb,OAAA4lF,EAAA,KAGAnjF,EAAAD,SAAA,cAEA,IAAAojF,GACAl1F,KAAA8qC,MAAAxgB,oBAAAppB,KAAA0Z,IAIA5a,KAAAgU,SAAAiQ,YACA/kB,MAAA0V,gBAAA5U,KAAAgU,SAAAiQ,WAAAjkB,KAAA8qC,UAKAmqD,kBAAA,SAAAE,GACAn1F,KAAAwc,YAAA24E,EAAA,QAAA,wBAGAC,oBAAA,SAAA/7E,GACA,IAAAC,EAAA3a,EAAA0a,EAAAE,eAEA,IAAAD,EAAAtS,KAAA,WAAA,CACA,IAAA4T,EAAAtB,EAAA8K,SAAAlK,SAAA,YAAAlT,KAAA,MACAiuE,EAAA/1E,MAAAyF,OAAA3E,KAAAgU,SAAAihE,YAAA,YAAAr6D,GAEAjc,EAAA,sCAAAs2E,EAAA,KAAA/1E,MAAAS,EAAA,MAAA,aAAA,wBAAA21B,YAAAhc,GAEA,IAAAlU,QAAAyU,QAAAP,GACA+7E,aAIAC,UAAA,SAAAC,GACA,OAAAr2F,MAAA01F,UAAAY,YAAAD,EAAA,GAAAr2F,MAAA01F,UAAAa,cAGAC,WAAA,SAAAhgF,GACA,IAAA3D,EAAApT,EAAA,wBAAA2P,SAAAtO,KAAA4S,YACA6tB,EAAA9hC,EAAA,kCAAAO,MAAAuY,KAAA,MAAAvY,MAAA01F,UAAAY,WAAA,eAAAt2F,MAAAuY,KAAA,KAAAvY,MAAA01F,UAAAY,WAAA,SAAAlnF,SAAAyD,GASA,GAPA0uB,EAAApuB,OAAAqD,GAEA1V,KAAAgU,SAAAokB,WACAqI,EAAApuB,OAAA,+BAAAnT,MAAAS,EAAA,MAAA,QAAA,UACAK,KAAA60F,cAAAntE,SAAA3V,IAGA/R,KAAAgU,SAAAihE,YAAA,CACA,IAAA0gB,EAAAh3F,EAAA,8BAAAO,MAAAS,EAAA,MAAA,aAAA,UAAA2O,SAAAmyB,GACAzgC,KAAAi1F,kBAAAU,GAGAl1D,EAAA3V,IAAA,iBAAA,IACA2V,EAAAjpB,SAAA,CAAAgsE,gBAAA,GAAA,SAGAzpD,cAAA,SAAArkB,GACA,IAMAkgF,EANA7jF,EAAA2D,EAAA0O,SAAAA,SAEApkB,KAAAgU,SAAAokB,UACAp4B,KAAA60F,cAAA3sE,YAAAnW,GAKAA,EAAA6M,WAAAte,SACAs1F,EAAA7jF,EAAAqS,UAGArS,EAAA+Y,IAAA,aAAA,UAAAtT,SAAA,CAAAgrC,cAAAzwC,EAAAgZ,UAAA,OAAA,KACAhZ,EAAAuI,cAEA,IAAAs7E,GACA51F,KAAA61F,UAAAD,MAKAC,UAAA,SAAAhkF,GACAA,EAAA+M,SAAA,QAAA1E,SAAA,WAAAI,SACAzI,EAAAyI,WAEA,CACAk7E,WAAA,EACAC,aAAA,GAEAn6E,SAAA,CACA2I,WAAA,KACAmU,UAAA,EACA68C,YAAA,KACAD,UAAA,QC9JA91E,MAAA81F,cAAA5vF,QAAAm4E,KAAAt+E,OAAA,CACA62F,UAAA,KACA9gB,UAAA,KACA+gB,aAAA,KAEAC,UAAA,KACAC,SAAA,KACAC,cAAA,KAEA76E,KAAA,SAAAy6E,EAAA9gB,GACAh1E,KAAA81F,UAAAA,EACA91F,KAAAg1E,UAAAA,EAEAh1E,KAAAw9E,WAAA7+E,EAAA,+BAEA,IAAA6nB,EAAAxmB,KAAA81F,UAAAljF,WAAAgD,KAAA,MAEA5V,KAAA0vB,KAAAlJ,EAAA,CACAqP,OAAA,8BACA0mB,OAAAv8C,KAAA6kE,UAAA5oD,KAAAjc,SAIA6kE,UAAA,SAAAxoC,GACAr8B,KAAAg2F,UAAA35D,EACA,IAAAxqB,EAAAlT,EAAA,sCAAA0T,OAAAgqB,GAGA,OAFAA,EAAAvR,IAAA,WAAA5rB,MAAAuY,KAAAzX,KAAA28C,SAAA7xB,IAAA,WAAA5rB,MAAAuY,OACA4kB,EAAAzmB,KAAA,SAAAkC,WAAA,SACAjG,GAGAgrC,YAAA,WACA78C,KAAAi2F,SAAAt3F,IAGAqB,KAAA8/E,YAAA9/E,KAAA81F,UAAAljF,YAGA5S,KAAA+1F,aAAA,EACA,IAAAI,EAAAn2F,KAAA28C,SACA,GACA38C,KAAA+1F,eACAI,EAAAA,EAAAvgF,KAAA,mBACAugF,EAAA71F,QAGAN,KAAAk2F,cAAAl2F,KAAA28C,SAAA5xB,SACA/qB,KAAA28C,SAAAnlC,SAAA,CACAuT,OAAA,GACA,OAAA,KACA/qB,KAAA28C,SAAA7qC,SAAA,YAEA9R,KAAA0vB,OAEA1vB,KAAAwc,YAAApX,QAAAqV,KAAA,WAAA,SAAApB,GACAA,EAAAyG,UAAA1a,QAAA0Y,SACA9d,KAAAo2F,iBAKAtW,YAAA,SAAAjuE,GAGA,IAFA,IAAAwkF,EAAAxkF,EAAAqI,WAAA8f,IAAAh6B,KAAA28C,UAEAj9C,EAAA,EAAAA,EAAA22F,EAAA/1F,OAAAZ,IAAA,CACA,IAAAqS,EAAApT,EAAA03F,EAAA32F,IACAM,KAAAi2F,SAAAj2F,KAAAi2F,SAAAx5E,IAAA1K,EAAAmI,SAAA,SAEAnI,EAAA4D,SAAA,cACA3V,KAAA8/E,YAAA/tE,EAAAmI,SAAA,SAKA6kE,OAAA,WAaA,IAZA/+E,KAAAkrC,EAAAorD,iBACAt2F,KAAAkrC,EAAAorD,eAAAlgF,YAAA,aACApW,KAAAw9E,WAAAljE,UAIAta,KAAAkrC,EAAAorD,eAAA,KACAt2F,KAAAkrC,EAAAqrD,iBAAA,KACAv2F,KAAAkrC,EAAAsrD,mBAAA,KACAx2F,KAAAkrC,EAAAurD,oBAAA,KACAz2F,KAAAkrC,EAAAwrD,oBAAA,KAEA12F,KAAAkrC,EAAAxrC,EAAA,EAAAM,KAAAkrC,EAAAxrC,EAAAM,KAAAi2F,SAAA31F,SACAN,KAAAkrC,EAAAnV,QAAAp3B,EAAAqB,KAAAi2F,SAAAj2F,KAAAkrC,EAAAxrC,IACAM,KAAAkrC,EAAAyrD,aAAA32F,KAAAkrC,EAAAnV,QAAAj0B,SACA9B,KAAAkrC,EAAA0rD,aAAA52F,KAAAkrC,EAAAnV,QAAAmB,cACAl3B,KAAAkrC,EAAA2rD,gBAAA72F,KAAAkrC,EAAAyrD,aAAA1/D,IAAAj3B,KAAAkrC,EAAA0rD,aAAA,EACA52F,KAAAkrC,EAAA4rD,YAAAnmF,KAAAwgC,IAAAnxC,KAAAu3C,OAAAv3C,KAAAkrC,EAAA2rD,iBAEA,IAAA72F,KAAAkrC,EAAAxrC,GAAAM,KAAAu3C,QAAAv3C,KAAAkrC,EAAAyrD,aAAA1/D,IAAA,GAAAj3B,KAAAkrC,EAAA4rD,YAAA92F,KAAAkrC,EAAAsrD,oBAPAx2F,KAAAkrC,EAAAxrC,IAQAM,KAAAkrC,EAAAorD,eAAAt2F,KAAAkrC,EAAAnV,QACA/1B,KAAAkrC,EAAAqrD,iBAAAv2F,KAAAkrC,EAAAxrC,EACAM,KAAAkrC,EAAAsrD,mBAAAx2F,KAAAkrC,EAAA4rD,YACA92F,KAAAkrC,EAAAurD,oBAAAz2F,KAAAkrC,EAAAyrD,aACA32F,KAAAkrC,EAAAwrD,oBAAA12F,KAAAkrC,EAAA0rD,aAOA,GAAA52F,KAAAkrC,EAAAorD,eAKA,GAAA,IAAAt2F,KAAAkrC,EAAAqrD,kBAAAv2F,KAAAu3C,OAAAv3C,KAAAkrC,EAAAurD,oBAAAx/D,IAAA,EACAj3B,KAAAw9E,WAAA90D,UAAA1oB,KAAA81F,UAAAljF,iBAyBA,GAvBA5S,KAAAkrC,EAAA6rD,iBAAA/2F,KAAAkrC,EAAAorD,eAAAlyE,SACApkB,KAAAkrC,EAAA8rD,mBAAAh3F,KAAAkrC,EAAA6rD,iBAAA/vF,KAAA,SAGAhH,KAAAkrC,EAAAqrD,iBAAAv2F,KAAAi2F,SAAA31F,OAAA,GACAN,KAAAkrC,EAAA+rD,cAAAt4F,EAAAqB,KAAAi2F,SAAAj2F,KAAAkrC,EAAAqrD,iBAAA,IAAAnyE,SACApkB,KAAAkrC,EAAAgsD,gBAAAl3F,KAAAkrC,EAAA+rD,cAAAjwF,KAAA,WAEAhH,KAAAkrC,EAAA+rD,cAAA,KACAj3F,KAAAkrC,EAAAgsD,gBAAA,MAIAl3F,KAAAkrC,EAAAisD,oBAAAn3F,KAAAu3C,QAAAv3C,KAAAkrC,EAAAurD,oBAAAx/D,IAAAj3B,KAAAkrC,EAAAwrD,oBAAA,EAUA12F,KAAAkrC,EAAA+rD,eAAAj3F,KAAAkrC,EAAAgsD,iBAAAl3F,KAAAkrC,EAAA8rD,mBACAh3F,KAAAkrC,EAAAisD,sBACAn3F,KAAAg1E,WAAAh1E,KAAAg1E,WAAAh1E,KAAAkrC,EAAA8rD,mBAAAh3F,KAAA+1F,aAAA,IAEA/1F,KAAAw9E,WAAAloD,YAAAt1B,KAAAkrC,EAAA6rD,oBAGA/2F,KAAAg1E,WAAAh1E,KAAAg1E,WAAAh1E,KAAAkrC,EAAA8rD,mBAAAh3F,KAAA+1F,eACA/1F,KAAAkrC,EAAAorD,eAAAxkF,SAAA,kBAaA,GAAA9R,KAAAkrC,EAAA+rD,eAAAj3F,KAAAkrC,EAAAgsD,gBAAAl3F,KAAAkrC,EAAA8rD,qBACAh3F,KAAAg1E,WAAAh1E,KAAAg1E,WAAAh1E,KAAAkrC,EAAAgsD,gBAAAl3F,KAAA+1F,aAAA,KACA/1F,KAAAkrC,EAAAisD,oBAEAn3F,KAAAw9E,WAAAp8B,aAAAphD,KAAAkrC,EAAA+rD,gBAEAj3F,KAAAkrC,EAAAorD,eAAAxkF,SAAA,aACA9R,KAAAw9E,WAAAlvE,SAAAtO,KAAAkrC,EAAA6rD,iBAAA78E,SAAA,cAcA,GAAAla,KAAAkrC,EAAAisD,oBAAA,CAaA,IAXAn3F,KAAAkrC,EAAAksD,SAAAp3F,KAAAs3C,OAAAt3C,KAAAq3F,qBAEA,QAAAn4F,MAAAqY,cACAvX,KAAAkrC,EAAAksD,UAAAp3F,KAAAg2F,UAAAlvD,SAGA9mC,KAAAkrC,EAAAosD,WAAAt3F,KAAAkrC,EAAAorD,eAAAn6C,aAAAn8C,KAAA81F,UAAAljF,WAAA,MACA5S,KAAAkrC,EAAAqsD,iBAAA,KACAv3F,KAAAkrC,EAAAssD,qBAAA,KACAx3F,KAAAkrC,EAAAusD,mBAAA,KAEAz3F,KAAAkrC,EAAAxrC,EAAA,EAAAM,KAAAkrC,EAAAxrC,EAAAM,KAAAkrC,EAAAosD,WAAAh3F,OAAAN,KAAAkrC,EAAAxrC,IACAM,KAAAkrC,EAAAwsD,UAAA/4F,EAAAqB,KAAAkrC,EAAAosD,WAAAt3F,KAAAkrC,EAAAxrC,IACAM,KAAAkrC,EAAAysD,UAAA33F,KAAAkrC,EAAAwsD,UAAA51F,SAAA2V,KAEA,QAAAvY,MAAAqY,cACAvX,KAAAkrC,EAAAysD,WAAA33F,KAAAkrC,EAAAwsD,UAAA5wD,SAGA9mC,KAAAkrC,EAAA0sD,cAAAjnF,KAAAwgC,IAAAnxC,KAAAkrC,EAAAysD,UAAA33F,KAAAkrC,EAAAksD,UACAp3F,KAAAkrC,EAAA2sD,YAAA73F,KAAAkrC,EAAAwsD,UAAA1wF,KAAA,WAEAhH,KAAAg1E,WAAAh1E,KAAAg1E,WAAAh1E,KAAAkrC,EAAA2sD,YAAA73F,KAAA+1F,aAAA,MACA/1F,KAAAkrC,EAAAqsD,kBACAv3F,KAAAkrC,EAAA0sD,cAAA53F,KAAAkrC,EAAAssD,wBACAx3F,KAAAkrC,EAAA+rD,eAAAj3F,KAAAkrC,EAAA2sD,aAAA73F,KAAAkrC,EAAAgsD,oBAGAl3F,KAAAkrC,EAAAqsD,iBAAAv3F,KAAAkrC,EAAAwsD,UACA13F,KAAAkrC,EAAAssD,qBAAAx3F,KAAAkrC,EAAA0sD,cACA53F,KAAAkrC,EAAAusD,mBAAAz3F,KAAAkrC,EAAA2sD,aAIA73F,KAAAkrC,EAAAqsD,kBACAv3F,KAAAw9E,WAAAloD,YAAAt1B,KAAAkrC,EAAAqsD,wBAGAv3F,KAAAg1E,WAAAh1E,KAAAg1E,WAAAh1E,KAAAkrC,EAAA8rD,mBAAAh3F,KAAA+1F,eACA/1F,KAAAkrC,EAAAorD,eAAAxkF,SAAA,cAOAskF,WAAA,WACAp2F,KAAAw9E,WAAAljE,SAEAta,KAAAkrC,EAAAorD,gBACAt2F,KAAAkrC,EAAAorD,eAAAlgF,YAAA,aAGApW,KAAA83F,aAGA76C,WAAA,WAEA,GAAAj9C,KAAAkrC,EAAAorD,iBAAAt2F,KAAAw9E,WAAAp5D,SAAA9jB,QAAAN,KAAAkrC,EAAAorD,eAAA3gF,SAAA,cAAA,CACA,IAAAoiF,EACAC,EAOA,GAJAh4F,KAAA28C,SAAA/9B,WAAAte,SACAy3F,EAAA/3F,KAAA28C,SAAAv4B,UAGApkB,KAAAw9E,WAAAp5D,SAAA9jB,OAAA,CAEA,IAAA23F,EAAAj4F,KAAAw9E,WAAA7jE,OAAA8C,IAAAzc,KAAAw9E,WAAAtsD,SAEA,IAAAvyB,EAAAsO,QAAAjN,KAAA28C,SAAA,GAAAs7C,IACAj4F,KAAAw9E,WAAA/mE,YAAAzW,KAAA28C,UACAq7C,GAAA,IAEAh4F,KAAAw9E,WAAAljE,SACA09E,GAAA,OAEA,CACA,IAAAnmF,EAAA7R,KAAAkrC,EAAA6rD,iBAAA78E,SAAA,MAGA,GAAA69E,GAAAlmF,EAAAvR,QAAAuR,EAAA,KAAAkmF,EAAA,GAaAC,GAAA,MAbA,CACA,GAAAnmF,EAAAvR,OAKAN,KAAAkrC,EAAA6rD,iBAAAphF,SAAA,cACA3V,KAAAkrC,EAAAorD,eAAAp8E,SAAA,WAAAjD,QAAA,aANA,CACA,IAAA8Q,EAAAppB,EAAA,8BAAAO,MAAAS,EAAA,MAAA,sBAAA,OAAA+oB,UAAA1oB,KAAAkrC,EAAAorD,gBACAt2F,KAAA81F,UAAAf,WAAAhtE,GAEAlW,EAAAlT,EAAA,QAAA2P,SAAAtO,KAAAkrC,EAAA6rD,kBAKA/2F,KAAA28C,SAAAruC,SAAAuD,GACAmmF,GAAA,GASA,GAFAh4F,KAAAkrC,EAAAorD,eAAAlgF,YAAA,aAEA4hF,EAAA,CAEAD,GACA/3F,KAAA81F,UAAAD,UAAAkC,GAIA,IAEA59D,EAFA+9D,EAAAl4F,KAAA28C,SAAAR,aAAAn8C,KAAA81F,UAAAljF,WAAA,MAAAtS,OAAA,EAIA43F,GAAAl4F,KAAA28C,SAAA31C,KAAA,WAEA,GAAAhH,KAAA28C,SAAA31C,KAAA,WACAmzB,EAAA,IACA,WAAAj7B,MAAAuY,MAAA,GACAzX,KAAAg2F,UAAAx+E,SAAA2iB,EAAA,SACA,GAAA+9D,KACA/9D,EAAA,IACA,WAAAj7B,MAAAuY,MAAAvY,MAAA01F,UAAAY,WACAx1F,KAAAg2F,UAAAx+E,SAAA2iB,EAAA,SAGAn6B,KAAAm4F,SAAAn4F,KAAA28C,SAAAu7C,IAIA,IAAAxiF,EAAA1V,KAAA28C,SAAAziC,SAAA,QAAAA,SAAA,YAEAlT,EAAA,CACAoxF,YAAAp4F,KAAA81F,UAAAjgF,GACA+E,UAAAlF,EAAA1O,KAAA,MACA8O,OAAAJ,EAAA1O,KAAA,WACAqxF,OAAAr4F,KAAA28C,SAAAzrB,OAAAhX,SAAA,QAAAA,SAAA,YAAAlT,KAAA,MACA+4C,SAAA//C,KAAA28C,SAAAv4B,OAAA,MAAAA,OAAA,MAAAlK,SAAA,QAAAA,SAAA,YAAAlT,KAAA,OAGA9H,MAAA4H,kBAAA,0BAAAE,GAAA,SAAAyD,EAAA5C,GACA,YAAAA,GACA3I,MAAA8I,GAAAyX,cAAAvgB,MAAAS,EAAA,MAAA,yBAOAK,KAAA28C,SAAAnlC,SAAA,QAAApB,YAAA,UAAAoB,SAAA,CACAuT,OAAA/qB,KAAAk2F,eACA,OAAA,KACAl2F,KAAA28C,SAAA7xB,IAAA,SAAA,UAGA9qB,KAAA6/C,0BAEA7/C,KAAA0vB,QAGAyoE,SAAA,SAAApmF,EAAAwjF,GACAxjF,EAAA/K,KAAA,QAAAuuF,GAEA,IAAA+C,EAAAt4F,KAAA81F,UAAAR,UAAAC,GAEAzqE,EAAA,GACAA,EAAA,UAAA5rB,MAAAuY,MAAA,IAAA6gF,EAAA,KACAxtE,EAAA,WAAA5rB,MAAAuY,MAAA6gF,EAAA,KACAt4F,KAAA28C,SAAAziC,SAAA,QAAA4Q,IAAAA,GAIA,IAFA,IAAAytE,EAAAxmF,EAAAmI,SAAA,MAAAA,WAEAxa,EAAA,EAAAA,EAAA64F,EAAAj4F,OAAAZ,IACAM,KAAAm4F,SAAAx5F,EAAA45F,EAAA74F,IAAA61F,EAAA,MCpWAr2F,MAAAs5F,qBAAApzF,QAAAwzB,SAAA35B,OAAA,CACAw5F,UAAA,KACAL,YAAA,KACApjB,UAAA,KAEA0jB,aAAA,KACAC,cAAA,KAEAn0C,gBAAA,KACAo0C,kBAAA,KAEAC,2BAAA,KAEAC,WAAA,KACAC,sBAAA,KAEAC,cAAA,KACAC,mBAAA,KACAC,qBAAA,KACAC,2BAAA,EAEAC,aAAA,KACAC,mBAAA,KAEAC,iBAAA,KAKAj+E,KAAA,SAAAo9E,EAAAj2E,EAAAxO,GACAhU,KAAAy4F,UAAAA,EACAz4F,KAAAo4F,YAAAp4F,KAAAy4F,UAAA54D,OAAA74B,KAAA,gBACAhH,KAAAg1E,UAAA9yE,SAAAlC,KAAAy4F,UAAA54D,OAAA3xB,KAAA,oBAEAlO,KAAA04F,aAAA,IAAA14F,KAAAy4F,UAAAv4E,aAAAkD,QAAA,GAAA,IACApjB,KAAA24F,cAAA34F,KAAAy4F,UAAAv4E,aAAAkD,QAAA,GAAA,EAEApP,EAAArV,EAAAM,OAAA,GAAAC,MAAAs5F,qBAAAl9E,SAAAtH,EAAA,CACA6hB,OAAA,QACAqD,kBAAA,EACAqgE,cAAA,EACAC,eAAA,EACArgE,eAAA,EACAojB,OAAAv8C,KAAA6kE,UAAA5oD,KAAAjc,MACAo5B,cAAA,IACAJ,KAAA5zB,QAAA2/D,SAGA/kE,KAAA0vB,KAAAlN,EAAAxO,IAMAylF,YAAA,WACAz5F,KAAAg5F,cAAAh5F,KAAAo5F,aAAAp5F,KAAA64B,YAAA7xB,KAAA,SACAhH,KAAAi5F,mBAAA,EAKA,IAHA,IAAAt8C,EAAAh+C,EAAAqB,KAAA64B,aACA6gE,EAAA15F,KAAA64B,YAAAlf,OAEA+/E,EAAAp5F,QAAA,CAEA,IAAAq5F,EAAAD,EAAA1yF,KAAA,SAEA,GAAA2yF,GAAA35F,KAAAg5F,cACA,MAIA,IAAAY,EAAAD,EAAA35F,KAAAg5F,cAEAY,EAAA55F,KAAAi5F,qBACAj5F,KAAAi5F,mBAAAW,GAIAj9C,EAAAA,EAAAlgC,IAAAi9E,GACAA,EAAAA,EAAA//E,OAQA,GAJA3Z,KAAAk5F,sBAAAQ,EAAAp5F,OAKAN,KAAAg1E,WACAh1E,KAAAk5F,sBACAl5F,KAAAy4F,UAAA9hE,iBACA,CAEA32B,KAAAm5F,2BAAA,EAEA,IAAAnyF,EAAAhH,KAAA65F,iBAAA75F,KAAA64B,aAEA35B,MAAA4H,kBAAA,qCAAAE,EAAA,CAAAyD,EAAA5C,KACA,YAAAA,IACA7H,KAAAm5F,2BAAA,EAEAn5F,KAAA+mF,WACA/mF,KAAAi5F,mBAAAxuF,EAAAqvF,MACA95F,KAAA+5F,MAAA,OAMA,OAAAp9C,GAMAkoB,UAAA,SAAAG,GACA,IAAA1gB,EAAA3lD,EAAA,+CAAA2P,SAAAlJ,QAAAsN,MACA6xC,EAAA5lD,EAAA,4BAAA2P,SAAAg2C,GACAzkB,EAAAlhC,EAAA,yBAAA2P,SAAAi2C,GACAxnB,EAAAp+B,EAAA,YAAA2P,SAAAuxB,GAEAmlC,EAAA12D,SAAAyuB,GAGA/8B,KAAAwkD,gBAAAxkD,KAAAy4F,UAAA7jE,kBAAA1a,SAAA,YAAAA,WAGA,IAFA,IAAAuqC,EAAAugB,EAAA9qD,WAEAxa,EAAA,EAAAA,EAAA+kD,EAAAnkD,OAAAZ,IAAA,CACA,IAAAglD,EAAA/lD,EAAA8lD,EAAA/kD,IAGA,GAAAglD,EAAA/uC,SAAA,iBACA+uC,EAAApqC,aADA,CAMA,IAAAqqC,EAAAhmD,EAAAqB,KAAAwkD,gBAAA9kD,IACAonC,EAAA6d,EAAA,GAAA8N,wBAAA3rB,MAMA,GAJA6d,EAAA75B,IAAA,QAAAgc,EAAA,MACA4d,EAAA55B,IAAA,QAAAgc,EAAA,MAGA1hC,QAAA4T,QAAA2rC,EAAA,kBAAA,CACA3kD,KAAA44F,kBAAAl0C,EAEAxiD,SAAAyiD,EAAA75B,IAAA,WAAA5rB,MAAAuY,OACAzX,KAAA64F,2BAAA/xD,EAEA4d,EAAA55B,IAAA,WAAA5rB,MAAAuY,KAAAzX,KAAA04F,gBAIA,OAAAp0C,GAMA01C,gBAAA,SAAA7vC,GACA,OAAAnqD,KAAAm5F,4BAIA,IAAAn5F,KAAAi6F,gBAAA9vC,EAAAj5B,OAAAi5B,IAMA+vC,eAAA,SAAA/vC,GACA,OAAAnqD,KAAAm5F,4BAIA,IAAAn5F,KAAAi6F,gBAAA9vC,EAAAA,EAAAxwC,SASAkjC,YAAA,WAEA78C,KAAA84F,WAAA94F,KAAAm6F,cAAAn6F,KAAA64B,YAAA74B,KAAA64B,YAAA7xB,KAAA,UAGAhH,KAAAo6F,wBAGAp6F,KAAAy4F,UAAAtiE,gBAEAn2B,KAAA0vB,QAMAqvD,OAAA,WACA/+E,KAAA0vB,OACA1vB,KAAAq6F,iBAMAC,uBAAA,WACAt6F,KAAAo6F,wBACAp6F,KAAAu6F,gCACAv6F,KAAA0vB,QAMAutB,WAAA,WAOA,GANAj9C,KAAAs5F,kBAAA,EACAt5F,KAAA0vB,OAKA1vB,KAAAo5F,cAAAp5F,KAAAg5F,cAAA,CAGA,IAFA,IAAAwB,EAAAx6F,KAAAo5F,aAAAp5F,KAAAg5F,cAEAt5F,EAAA,EAAAA,EAAAM,KAAA28C,SAAAr8C,OAAAZ,IAAA,CACA,IAAAi9C,EAAAh+C,EAAAqB,KAAA28C,SAAAj9C,IAEAw4F,EADAv7C,EAAA31C,KAAA,SACAwzF,EACAC,EAAAz6F,KAAA04F,aAAA14F,KAAA06F,gBAAAxC,GAEAv7C,EAAA31C,KAAA,QAAAkxF,GACAv7C,EAAA/mC,KAAA,YAAA5O,KAAA,QAAAkxF,GACAv7C,EAAAziC,SAAA,0BAAA4Q,IAAA,WAAA5rB,MAAAuY,KAAAgjF,GAGAz6F,KAAAs5F,kBAAA,EAIA,GAAAt5F,KAAAs5F,iBAAA,CASA,IALA,IAAAtyF,EAAAhH,KAAA65F,iBAAA75F,KAAA28C,UAGAg+C,EAAA36F,KAAA28C,SAAApiC,QAAA2W,OAEAypE,EAAAr6F,QAAA,CACA,IAAAs6F,EAAAD,EAAA3zF,KAAA,SAEA,GAAA4zF,GAAA56F,KAAAo5F,aAAA,CACApyF,EAAAqxF,OAAAsC,EAAA3zF,KAAA,MACA,MAGA,GAAA4zF,EAAA56F,KAAAo5F,aAAA,CACApyF,EAAA+4C,SAAA46C,EAAA3zF,KAAA,MAGA,IAAA+gB,EAAA4yE,EAAA/kF,KAAA,kBAEA,IAAAmS,EAAApS,SAAA,YAAA,CAEAoS,EAAAjW,SAAA,YAGA,IAAA+oF,EAAA76F,KAAAy4F,UAAAqC,uBAAAH,GAGA36F,KAAAy4F,UAAA1jE,eACA/0B,KAAAy4F,UAAA1jE,cAAA7M,YAAAloB,KAAA64B,aAGA74B,KAAAkoB,YAAAloB,KAAA64B,aACA74B,KAAA64B,YAAAve,SACAta,KAAAy4F,UAAAxjE,gBAGA,MAGA0lE,EAAAA,EAAAzpE,OAGAhyB,MAAA4H,kBAAA,0BAAAE,EAAA,CAAAyD,EAAA5C,KACA,GAAA,YAAAA,EAAA,CACA,IAAA4C,EAAA9C,QAGA,OAFAzI,MAAA8I,GAAAC,aAAA/I,MAAAS,EAAA,MAAA,kCACAK,KAAAy4F,UAAAv4E,aAAA6F,iBAGA7mB,MAAA8I,GAAAyX,cAAAvgB,MAAAS,EAAA,MAAA,wBACAK,KAAA+6F,mBAGAF,GAAAA,EAAAz2E,SAAA9jB,SACAu6F,EAAAvgF,SACAta,KAAAy4F,UAAAuC,eAAAjzE,GAAA,IAIA7oB,MAAA8I,GAAAiY,gBAMAoZ,aAAA,WACAr5B,KAAAy4F,UAAA1jE,eACA/0B,KAAAy4F,UAAA1jE,cAAAuE,iBAGAt5B,KAAAs5F,kBAAA,EACAt5F,KAAA0vB,QAGAqrE,iBAAA,WACA31F,QAAAyZ,sBAAA,KACA7e,KAAAiX,QAAA,kBACAjX,KAAAgU,SAAA+mF,sBAIAE,0BAAA,WAMA,GALAj7F,KAAAwkD,gBAAA15B,IAAA,QAAA,IAKA9qB,KAAAk5F,sBAAAl5F,KAAAy4F,UAAA9hE,iBAAA,CAEA32B,KAAAy4F,UAAAxjE,eAAAj1B,KAAAk7F,kBAAA,GAAAl7F,KAAAm7F,kBAAA,GAEA,IAAAC,EAAAp7F,KAAA28C,SAAA7qB,OAAAoxC,UAEAk4B,EAAA96F,SACAN,KAAAkoB,YAAAkzE,GACAA,EAAA9gF,SACAta,KAAAy4F,UAAAtiE,iBAIAn2B,KAAA0vB,QAOAuqE,gBAAA,SAAAU,EAAAjB,GAgBA,GAdAA,GAAAA,EAAAp5F,OACAN,KAAAi6F,gBAAAoB,UAAA3B,EAAA1yF,KAAA,SAEAhH,KAAAi6F,gBAAAoB,UAAA,EAIAV,GAAAA,EAAAr6F,OACAN,KAAAi6F,gBAAAqB,UAAAX,EAAA3zF,KAAA,SAAA,EAEAhH,KAAAi6F,gBAAAqB,UAAA,EAIAt7F,KAAAg1E,UAAA,CAEA,GACA,GAAAh1E,KAAAi6F,gBAAAoB,WACAr7F,KAAAi6F,gBAAAoB,UAAAr7F,KAAAi5F,mBAAAj5F,KAAAg1E,UAEA,OAAA,EAIAh1E,KAAAi6F,gBAAAqB,UAAAt7F,KAAAi5F,mBAAAj5F,KAAAg1E,YACAh1E,KAAAi6F,gBAAAqB,UAAAt7F,KAAAg1E,UAAAh1E,KAAAi5F,mBAEAj5F,KAAAi6F,gBAAAqB,UAAAt7F,KAAAi6F,gBAAAoB,YACAr7F,KAAAi6F,gBAAAqB,UAAAt7F,KAAAi6F,gBAAAoB,YAKA,MAAA,CACAxpE,IAAA7xB,KAAAi6F,gBAAAoB,UACA7xE,IAAAxpB,KAAAi6F,gBAAAqB,YAOAlB,sBAAA,WACAp6F,KAAAq5F,mBAAAr5F,KAAAi6F,gBACAj6F,KAAA28C,SAAApiC,QAAA2W,OACAlxB,KAAA28C,SAAA7qB,OAAAnY,SAOA0gF,cAAA,SAAAkB,GAKAv7F,KAAAq6F,cAAAmB,WAAAx7F,KAAAy7F,WAAAz7F,KAAA07F,WAGA,QAAAx8F,MAAAqY,cACAvX,KAAAq6F,cAAAmB,aAAA,GAIAx7F,KAAAq6F,cAAAsB,iBAAAhrF,KAAAK,MAAAhR,KAAAq6F,cAAAmB,WAAAt8F,MAAAs5F,qBAAAoD,cAGA57F,KAAAq6F,cAAAjB,aAAAp5F,KAAAg5F,cAAAh5F,KAAAq6F,cAAAsB,iBAGA37F,KAAAq6F,cAAAjB,aAAAp5F,KAAAq5F,mBAAAxnE,KACA7xB,KAAAq6F,cAAAsB,kBAAA37F,KAAAq5F,mBAAAxnE,IAAA7xB,KAAAq6F,cAAAjB,aACAp5F,KAAAq6F,cAAAjB,aAAAp5F,KAAAq5F,mBAAAxnE,KACA7xB,KAAAq6F,cAAAjB,aAAAp5F,KAAAq5F,mBAAA7vE,MACAxpB,KAAAq6F,cAAAsB,kBAAA37F,KAAAq6F,cAAAjB,aAAAp5F,KAAAq5F,mBAAA7vE,IACAxpB,KAAAq6F,cAAAjB,aAAAp5F,KAAAq5F,mBAAA7vE,KAIAxpB,KAAAo5F,gBAAAp5F,KAAAo5F,aAAAp5F,KAAAq6F,cAAAjB,eAEAp5F,KAAAu6F,gCAOAv6F,KAAAq6F,cAAAwB,sBAAA77F,KAAAq6F,cAAAmB,WAAAx7F,KAAAq6F,cAAAsB,iBAAAz8F,MAAAs5F,qBAAAoD,aAGA57F,KAAAq6F,cAAAyB,cAAAnrF,KAAAK,MAAAhR,KAAAq6F,cAAAwB,sBAAA,IAGAlrF,KAAAwgC,IAAAnxC,KAAAq6F,cAAAyB,eAAA58F,MAAAs5F,qBAAAuD,WACA/7F,KAAAq6F,cAAAyB,eAAA97F,KAAAq6F,cAAAyB,cAAA,EAAA,GAAA,GAAA58F,MAAAs5F,qBAAAuD,UAIA/7F,KAAAq6F,cAAA2B,0BAAAh8F,KAAA06F,gBAAA16F,KAAAo5F,cAAAp5F,KAAAq6F,cAAAyB,cACA97F,KAAA6+E,QAAA,GAAA/zD,IAAA,UAAA5rB,MAAAuY,KAAAzX,KAAAq6F,cAAA2B,0BAAAh8F,KAAA24F,eACA34F,KAAA44F,kBAAA9tE,IAAA,QAAA9qB,KAAA64F,2BAAA74F,KAAAq6F,cAAA2B,4BAMAtB,gBAAA,SAAAnF,GACA,OAAAA,EAAA,GAAAr2F,MAAAs5F,qBAAAoD,cAMA/B,iBAAA,SAAAp5D,GACA,MAAA,CACA23D,YAAAp4F,KAAAo4F,YACAx9E,UAAA6lB,EAAAz5B,KAAA,MACA8O,OAAA2qB,EAAA7qB,KAAA,kBAAA5O,KAAA,aAOAmzF,cAAA,SAAA15D,EAAAw7D,GAGA,GAFAj8F,KAAAm6F,cAAArB,WAAA,GAEA,GAAAmD,EAIA,IAHAj8F,KAAAm6F,cAAA+B,OAAAD,EACAj8F,KAAAm6F,cAAAgC,UAAA17D,EAAAvP,OAEAlxB,KAAAm6F,cAAAgC,UAAA77F,UACAN,KAAAm6F,cAAAgC,UAAAn1F,KAAA,SAAAhH,KAAAm6F,cAAA+B,SACAl8F,KAAAm6F,cAAArB,WAAAhrF,QAAA9N,KAAAm6F,cAAAgC,WACAn8F,KAAAm6F,cAAA+B,OAAAl8F,KAAAm6F,cAAAgC,UAAAn1F,KAAA,SAGA,GAAAhH,KAAAm6F,cAAA+B,UAKAl8F,KAAAm6F,cAAAgC,UAAAn8F,KAAAm6F,cAAAgC,UAAAjrE,OAIA,OAAAlxB,KAAAm6F,cAAArB,YAMAyB,8BAAA,WACAv6F,KAAA+4F,uBACA3zF,QAAAg3F,qBAAAp8F,KAAA+4F,uBAGA/4F,KAAA+4F,sBAAA3zF,QAAAyZ,sBAAA7e,KAAAq8F,iBAAApgF,KAAAjc,QAGAq8F,iBAAA,WAMA,IALAr8F,KAAA+4F,sBAAA,KAKA/4F,KAAAq8F,iBAAAjqC,GAAA,EAAApyD,KAAAq8F,iBAAAjqC,GAAApyD,KAAA84F,WAAAx4F,OAAAN,KAAAq8F,iBAAAjqC,KACApyD,KAAAq8F,iBAAAC,WAAAt8F,KAAA84F,WAAA94F,KAAAq8F,iBAAAjqC,IAGApyD,KAAAq8F,iBAAAC,WAAAt1F,KAAA,cAAAhH,KAAAq8F,iBAAAC,WAAAt1F,KAAA,eAAA,GAGA,GAAAhH,KAAAq8F,iBAAAC,WAAAt1F,KAAA,gBAEAhH,KAAAq8F,iBAAAC,WAAA1mF,KAAA,wBAAA0E,SASA,IAFAta,KAAAq8F,iBAAAE,cAAAv8F,KAAAm6F,cAAAn6F,KAAA64B,YAAA74B,KAAAo5F,cAEAp5F,KAAAq8F,iBAAAjqC,GAAA,EAAApyD,KAAAq8F,iBAAAjqC,GAAApyD,KAAAq8F,iBAAAE,cAAAj8F,OAAAN,KAAAq8F,iBAAAjqC,KACApyD,KAAAq8F,iBAAAC,WAAAt8F,KAAAq8F,iBAAAE,cAAAv8F,KAAAq8F,iBAAAjqC,IAGApyD,KAAAq8F,iBAAAC,WAAAt1F,KAAA,cAAAhH,KAAAq8F,iBAAAC,WAAAt1F,KAAA,eAAA,GAGA,GAAAhH,KAAAq8F,iBAAAC,WAAAt1F,KAAA,gBAEArI,EAAA,wCAAAO,MAAAS,EAAA,MAAA,sBAAA,aACA21B,YAAAt1B,KAAAq8F,iBAAAC,WAAA1mF,KAAA,qBAIA5V,KAAA84F,WAAA94F,KAAAq8F,iBAAAE,qBAEAv8F,KAAAq8F,iBAAAjqC,UACApyD,KAAAq8F,iBAAAC,kBACAt8F,KAAAq8F,iBAAAE,gBAEA,CACAC,cAAA,EACAZ,aAAA,GACAG,SAAA,GAEAzgF,SAAA,CACAy/E,iBAAAp8F,EAAAwhB,QCpjBAjhB,MAAAivB,sBAAAjvB,MAAAw1B,qBAAAz1B,OAAA,CACA4gC,OAAA,KACA48D,oBAAA,KAEAC,mBAAA,KAEAC,uCAAA,KACAC,uCAAA,EAEArnE,oBAAA,WAGA,OADAv1B,KAAA6/B,OAAA7/B,KAAA4S,WAAAgD,KAAA,eACA5V,KAAA6/B,OAAA3lB,SAAA,gBAGAyL,UAAA,WAEA3lB,KAAA68F,mBAIA,UAAA78F,KAAAkgB,aAAAlM,SAAAkQ,SACA,cAAAlkB,KAAAkgB,aAAAmJ,4BACAjkB,QAAA4T,QAAAhZ,KAAA6/B,OAAA,qBAEA7/B,KAAA08F,mBAAA,IAAAx9F,MAAAs5F,qBAAAx4F,KAAAA,KAAAo2B,kBAEAp2B,KAAA08F,mBAAA,KAIA,cAAA18F,KAAAkgB,aAAAmJ,4BACArpB,KAAAwc,YAAAxc,KAAA40B,kBAAA,SAAA,SAAAvb,GACA,IAAA0c,EAAAp3B,EAAA0a,EAAA2c,QAEAD,EAAApgB,SAAA,YACA,IAAA3V,KAAA88F,iBAAA/mE,IACA/1B,KAAAg7F,eAAAjlE,OAOA8mE,iBAAA,WAIA,IAHA,IAAAE,EAAA/8F,KAAAkgB,aAAAmJ,2BACA2zE,EAAAh9F,KAAA6/B,OAAA3lB,SAAA,SAAAA,WAAAA,SAAA,oBAEAxa,EAAA,EAAAA,EAAAs9F,EAAA18F,OAAAZ,IAAA,CACA,IAAA2c,EAAA2gF,EAAA7qF,GAAAzS,GACAwO,EAAAmO,EAAAnO,KAAA,kBAGA,GAAAA,IAAA6uF,EAAA,CACA/8F,KAAAy8F,oBAAApgF,EACA,IAAA4gF,EAAAj9F,KAAAkgB,aAAAqJ,2BAEAlN,EACAvK,SAAA,WAAAmrF,GACA7jF,GAAA,QAAApZ,KAAAk9F,+BAAAjhF,KAAAjc,WACA,CAEAA,KAAAkgB,aAAAkM,uBAAAle,GAEA5N,QACA+b,EACAvK,SAAA,aACAsH,GAAA,QAAApZ,KAAAm9F,iCAAAlhF,KAAAjc,UAMA41B,eAAA,WACA,OAAA,GAGAa,gBAAA,WACA,OAAAz2B,KAAAo9F,wCACAp9F,KAAA28F,uCAEA38F,KAAAi1B,eAIAO,gBAAA,SAAAkB,GACA12B,KAAAo9F,wCACAp9F,KAAA28F,uCAAAjmE,EAEA12B,KAAAi1B,cAAAyB,GAIAC,eAAA,WACA,OAAA32B,KAAAo9F,wCACAp9F,KAAA48F,sCAEA58F,KAAAk1B,cAIAO,eAAA,SAAAmB,GACA52B,KAAAo9F,wCACAp9F,KAAA48F,sCAAAhmE,EAEA52B,KAAAk1B,aAAAl1B,KAAA48F,sCAAAhmE,GAIAO,kBAAA,WACA,IAAAr3B,EAAAE,KAAA0vB,OAQA,OAJA1vB,KAAAo9F,0CACAt9F,EAAA+kB,SAAAw4E,gBAAAr9F,KAAA08F,mBAAA7jE,YAAA7xB,KAAA,OAGAlH,GAGAw3B,eAAA,SAAAD,GACAr3B,KAAA0vB,KAAA2H,GAEAr3B,KAAA08F,oBACA18F,KAAA08F,mBAAAh1E,SAAA2P,GAGAn4B,MAAA8I,GAAA+pD,0BAGA39C,oBAAA,SAAAsB,GACAxW,MAAAkV,oBAAAsB,EAAA1O,KAAA,QAAA0O,EAAA,CACA5V,OAAA,CACAw9F,gCAAAt9F,KAAAkgB,aAAAY,WAEAnB,cAAAlV,IACAA,EAAAk5D,iBACA3jE,KAAAu9F,uBAAA7nF,EAAAjL,EAAAk5D,kBAGAzjD,aAAAlgB,KAAAkgB,gBAIA48E,iBAAA,SAAA/0E,EAAAiG,GACA,IAAAA,IAAAjG,EAAApS,SAAA,YACA,OAAA,EAGAoS,EAAA3R,YAAA,YAQA,IALA,IAAAqqB,EAAA1Y,EAAA3D,SAAAA,SACAvO,EAAA4qB,EAAAz5B,KAAA,MACAuuF,EAAA90D,EAAAz5B,KAAA,SACA0yF,EAAAj5D,EAAA9mB,OAEA+/E,EAAAp5F,QAAA,CACA,IAAA8E,QAAA4T,QAAA0gF,EAAA,mBAAA,CACA,GAAAA,EAAA1yF,KAAA,UAAAuuF,EACA,MAGAv1F,KAAA+0B,eACA/0B,KAAA+0B,cAAA7M,YAAAwxE,GAGA15F,KAAA08F,oBACA18F,KAAA08F,mBAAAx0E,YAAAwxE,GAGA15F,KAAAi1B,gBAGA,IAAAuoE,EAAA9D,EAAA//E,OACA+/E,EAAAp/E,SACAo/E,EAAA8D,EAIAx9F,KAAAkgB,aAAAG,cAAAiK,sBACAtqB,KAAAkgB,aAAAG,cAAAiK,oBAAA,IAGAtqB,KAAAkgB,aAAAG,cAAAiK,oBAAAppB,KAAA2U,GACA7V,KAAAkgB,aAAA4I,iBAAA,sBAAA9oB,KAAAkgB,aAAAG,cAAAiK,qBAGAtqB,KAAAm2B,iBAGA6kE,eAAA,SAAAjzE,EAAAiG,GACA,IAAAA,GAAAjG,EAAApS,SAAA,YACA,OAAA,EAMA,GAHAoS,EAAAjW,SAAA,YAGA9R,KAAAkgB,aAAAG,cAAAiK,oBAAA,CACA,IAAAmW,EAAA1Y,EAAA3D,SAAAA,SACAvO,EAAA4qB,EAAAz5B,KAAA,MACA5H,EAAAT,EAAAsO,QAAA4I,EAAA7V,KAAAkgB,aAAAG,cAAAiK,qBAEA,IAAA,IAAAlrB,EAAA,CACAY,KAAAkgB,aAAAG,cAAAiK,oBAAAhb,OAAAlQ,EAAA,GACAY,KAAAkgB,aAAA4I,iBAAA,sBAAA9oB,KAAAkgB,aAAAG,cAAAiK,qBAGA,IAAAuwE,EAAA76F,KAAA86F,uBAAAr6D,GAGA3gC,EAAAnB,EAAAM,QAAA,EAAA,GAAAe,KAAAgU,SAAAlU,QACAA,EAAA+kB,SAAA44E,aAAA5nF,EAEA3W,MAAA4H,kBAAA,oCAAAhH,EAAA,CAAA2K,EAAA5C,KAEA,GAAAgzF,EAAAz2E,SAAA9jB,QAIA,YAAAuH,EAAA,CACA,IAAAwvB,EAAA14B,EAAA8L,EAAA1L,MAGA23B,EAAA12B,KAAAi1B,cAAAoC,EAAA/2B,OACAs2B,EAAA52B,KAAAgU,SAAA8V,WAAAuN,EAAA/2B,SAAAN,KAAAgU,SAAA8V,UAEA,GAAA8M,EAAA,CAEA,IAAA8mE,EAAA7C,EAAA33B,UAEAljE,KAAA+0B,eACA/0B,KAAA+0B,cAAA7M,YAAAw1E,GAGA19F,KAAA08F,oBACA18F,KAAA08F,mBAAAx0E,YAAAw1E,GAGAA,EAAApjF,SACAoc,GAAAgnE,EAAAp9F,YAGAs2B,EAAA52B,KAAAk1B,aAGA2lE,EAAApkF,YAAA4gB,GACAr3B,KAAA80B,YAAAa,KAAA0B,IAEAr3B,KAAAkgB,aAAAkD,SAAApjB,KAAAgU,SAAA6e,cACA7yB,KAAA+0B,cAAArN,SAAA2P,EAAA1S,OAAA,oBACA3kB,KAAAkgB,aAAA4L,wBAGA9rB,KAAA08F,oBACA18F,KAAA08F,mBAAAh1E,SAAA2P,GAGAn4B,MAAA8S,eAAAvH,EAAAqU,UACA5f,MAAAoT,eAAA7H,EAAAsU,UACA7f,MAAA8I,GAAA+pD,yBAEA/xD,KAAAw1B,gBAAAkB,GACA12B,KAAAy1B,eAAAmB,GAGA52B,KAAAm2B,sBAOA2kE,uBAAA,SAAAr6D,GACA,OAAA9hC,EACA,wDACA8hC,EAAAvmB,WAAA5Z,OADA,sCAKAg1B,YAAAmL,IAGA28D,sCAAA,WACA,OACAp9F,KAAA08F,oBACA18F,KAAA08F,mBAAA3V,UACA/mF,KAAA08F,mBAAAxD,sBAIAgE,+BAAA,SAAA7jF,GACA,IAAAgD,EAAA1d,EAAA0a,EAAAE,eAEA,IAAA8C,EAAA1G,SAAA,WAAA,CAKA,IACAgoF,EAAA,QADA39F,KAAAkgB,aAAAqJ,2BACA,OAAA,MAEAvpB,KAAAkgB,aAAAoM,iBAAAqxE,GACA39F,KAAA49F,uBAAAvkF,EAAAgD,KAGA8gF,iCAAA,SAAA9jF,GACA,IAAAgD,EAAA1d,EAAA0a,EAAAE,eAEA,IAAA8C,EAAA1G,SAAA,WAAA,CAIA,IAAAzH,EAAAmO,EAAAnO,KAAA,kBAEAlO,KAAAkgB,aAAA0I,iBAAA1a,GACAlO,KAAA49F,uBAAAvkF,EAAAgD,KAGAuhF,uBAAA,SAAAvkF,EAAAgD,GACArc,KAAAy8F,qBACAz8F,KAAAy8F,oBAAArmF,YAAA,oBAGAiG,EAAAjG,YAAA,aAAAtE,SAAA,mBACA9R,KAAAkgB,aAAAkJ,iCACAppB,KAAAkgB,aAAA6F,iBAGA/lB,KAAAkgB,aAAAsH,qBAGA+1E,uBAAA,SAAA7nF,EAAAiuD,GACA,IAAA+M,EAAAh7D,EAAA+D,QAAA,MAEA,IAAA,IAAAvL,KAAAy1D,EACAA,EAAAz+D,eAAAgJ,IAIAwiE,EAAAx2D,SAAA,eAAAhM,EAAA,YAAAnP,KAAA4kE,EAAAz1D,OCtVAhP,MAAA2+F,eAAA3+F,MAAAw4B,uBAAAz4B,OAAA,CACAuhB,cAAA,KACAs9E,WAAA,KAEAlrF,WAAA,KACAilB,mBAAA,KACArV,UAAA,KACAu7E,aAAA,KACA9iF,SAAA,KAEA+iF,aAAA,EAEA3iF,KAAA,SAAArH,GAKA,IAAArV,EAAAoG,cAAAiP,GAAA,CAKA,IAHA,IAAAikB,EAAA,GACA93B,EAAA,CAAA,KAAA,OAAA,aAAA,mBAEAT,EAAA,EAAAA,EAAAS,EAAAG,aACA,IAAA43B,UAAAx4B,GADAA,IAEAu4B,EAAA93B,EAAAT,IAAAw4B,UAAAx4B,GAMAsU,EAAAikB,EAGAj4B,KAAA0vB,KAAA/wB,EAAAM,OAAA,GAAAC,MAAA2+F,eAAAviF,SAAAtH,IAEAhU,KAAA+9F,aAAA/9F,KAAA4S,WAAAsH,SAAA,QAAAA,SAAA,SACAla,KAAAib,SAAAjb,KAAA+9F,aAAApkF,OAEA3Z,KAAAwc,YAAAxc,KAAA+9F,aAAA,QAAA,KACA/9F,KAAAwgB,eACA4E,aAAAplB,KAAAwgB,eAGAxgB,KAAAwgB,cAAA6E,WAAArlB,KAAAi+F,cAAAhiF,KAAAjc,MAAA,OAGAA,KAAAwc,YAAAxc,KAAA+9F,aAAA,WAAA,SAAA1kF,GAOA,OANAA,EAAAyG,UAAA1a,QAAAmgB,YACAlM,EAAAmM,iBAKAnM,EAAAyG,SACA,KAAA1a,QAAAmgB,WAKA,OAJAlM,EAAAmM,sBACAxlB,KAAA89F,YACA99F,KAAAk+F,UAAAl+F,KAAA89F,WAAAp5E,SAAAC,OAAA,YAKA,KAAAvf,QAAAmiF,SAEA,GADAluE,EAAAmM,iBACAxlB,KAAA89F,WAAA,CACA,IAAAK,EAAAn+F,KAAA89F,WAAAp5E,SAAAC,OAAA,UACA,GAAAw5E,EAAA79F,OAAA,CACA,IAAA89F,EAAAD,EAAA/5E,SAAA8+C,UAAAttD,KAAA,oBAAA2E,QACA6jF,EAAA99F,QACAN,KAAAq+F,YAAAD,QAGAp+F,KAAAq+F,YAAAr+F,KAAA89F,WAAAp5E,SAAAvS,GAAA,IAGA,OAGA,KAAA/M,QAAAiiF,OAEA,GADAhuE,EAAAmM,iBACAxlB,KAAA89F,WAAA,CACA,IAAAK,EAAAn+F,KAAA89F,WAAAp5E,SAAAC,OAAA,UACA,GAAAw5E,EAAA79F,OAAA,CACA,IAAAg+F,EAAAH,EAAA/5E,SAAAwuE,UAAAh9E,KAAA,oBAAAkc,OACAwsE,EAAAh+F,QACAN,KAAAq+F,YAAAC,QAGAt+F,KAAAq+F,YAAAr+F,KAAA89F,WAAAp5E,SAAAvS,GAAAnS,KAAA89F,WAAAp5E,SAAApkB,OAAA,IAGA,WAKAN,KAAAwc,YAAAxc,KAAA+9F,aAAA,SAAA,WACA/9F,KAAA89F,YACA99F,KAAA89F,WAAAnjE,UAIA36B,KAAAwc,YAAAxc,KAAA+9F,aAAA,QAAA,WACA/9F,KAAAg+F,YACAh+F,KAAAg+F,aAAA,EAIA34E,WAAA,KACArlB,KAAA89F,YACA99F,KAAA89F,WAAA3/E,QAEA,OAIAkgF,YAAA,SAAA55E,GACAzkB,KAAA89F,WAAAp5E,SAAAtO,YAAA,SACAqO,EAAA3S,SAAA,SACA9R,KAAA89F,WAAAp0C,UAAAx7C,KAAA,wBAAAuW,EAAAvW,KAAA,QAIAqqB,kBAAA55B,EAAAwhB,KAEA8Y,mBAAA,WACA,OAAA,MAGAglE,cAAA,WAOA,GANAj+F,KAAA89F,YACA99F,KAAAu+F,iBAGAv+F,KAAA+9F,aAAAz5F,MAEA,CACAtE,KAAAib,SAAA7E,YAAA,UAIA,IAFA,IAAAooF,EAAA,GAEA9+F,EAAA,EAAAA,EAAAM,KAAAwiB,UAAAliB,OAAAZ,IAAA,CACA,IAAAmW,EAAAlX,EAAAqB,KAAAwiB,UAAA9iB,IAAAsH,KAAA,MAEA6O,GACA2oF,EAAAt9F,KAAA2U,GAIA7V,KAAAgU,SAAAsnB,iBACAkjE,EAAAt9F,KAAAlB,KAAAgU,SAAAsnB,iBAGA,IAAAt0B,EAAA,CACAxB,OAAAxF,KAAA+9F,aAAAz5F,MACAm6F,WAAAz+F,KAAAgU,SAAAyqF,WACAD,WAAAA,GAGAt/F,MAAA4H,kBAAA,uBAAAE,EAAA,CAAAyD,EAAA5C,KAQA,GANA7H,KAAA89F,YACA99F,KAAAu+F,iBAGAv+F,KAAAib,SAAAnJ,SAAA,UAEA,YAAAjK,EAAA,CAMA,IALA,IAGAkK,EAHAyhB,EAAA70B,EAAA,+BAAA2P,SAAAlJ,QAAAsN,MACAb,EAAAlT,EAAA,SAAA2P,SAAAklB,GAIA9zB,EAAA,EAAAA,EAAA+K,EAAAi0F,KAAAp+F,OAAAZ,IACAqS,EAAApT,EAAA,SACA2P,SAAAuD,GAEAlT,EAAA,wBACA2P,SAAAyD,GACA1O,KAAAoH,EAAAi0F,KAAAh/F,GAAA0a,OACApT,KAAA,KAAAyD,EAAAi0F,KAAAh/F,GAAAmW,IACA/D,SAAArH,EAAAi0F,KAAAh/F,GAAAi/F,QAAA,WAAA,IAGAl0F,EAAAm0F,aACA7sF,EAAApT,EAAA,SAAA2P,SAAAuD,GACAlT,EAAA,yBAAA2P,SAAAyD,GAAA1O,KAAA2D,EAAAxB,SAGAqM,EAAA+D,KAAA,0BAAA9D,SAAA,SAEA9R,KAAA89F,WAAA,IAAA14F,QAAAy5F,KAAArrE,EAAA,CACAsrE,gBAAA9+F,KAAA+9F,aACAn0C,eAAA5pD,KAAAk+F,UAAAjiF,KAAAjc,QAGAA,KAAAwc,YAAAgX,EAAA,YAAA,KACAxzB,KAAAg+F,aAAA,IAGAh+F,KAAA89F,WAAAnjE,eAIA36B,KAAAib,SAAAnJ,SAAA,WAIAosF,UAAA,SAAAjuE,GACA,IAAAxL,EAAA9lB,EAAAsxB,GAEA,IAAAxL,EAAA9O,SAAA,YAAA,CAIA,IAAAE,EAAA4O,EAAAzd,KAAA,MACAoT,EAAAqK,EAAAphB,OAEAqS,EAAA/W,EAAA,SAAA,CACAwb,MAAA,0BACA63D,UAAAn8D,EACAkpF,eAAA/+F,KAAAgU,SAAAgrF,aACAC,aAAA7kF,EACA8kF,gBAAA,MACA5wF,SAAAtO,KAAA63B,oBAEAxzB,EAAA1F,EAAA,WAAA,CACA4C,KAAA,SACA0D,KAAAjF,KAAAgU,SAAA/O,KAAA,KACAE,MAAA0Q,IACAvH,SAAAoH,GAEA/W,EAAA,OAAA,CACAwb,MAAA,cACAC,MAAAlb,MAAAS,EAAA,MAAA,YACA2O,SAAAoH,GAEA,IAAAypF,EAAAxgG,EAAA,SAAA,CACAwb,MAAA,UACA7L,SAAAoH,GAEA/W,EAAA,UAAA,CACAwb,MAAA,QACA9W,KAAA+W,IACA9L,SAAA6wF,GAEA,IAAAn3C,IAAAtyC,EAAA2kB,aAAA,IACAr6B,KAAA+9F,aAAAjzE,IAAA,UAAA5rB,MAAAuY,KAAAuwC,EAAA,MAEA,IAAA7tB,EAAA,GAYA,GAXAA,EAAA,UAAAj7B,MAAAuY,MAAA,EACAzX,KAAA+9F,aAAAvmF,SAAA2iB,EAAA,QAEAn6B,KAAAwiB,UAAAxiB,KAAAwiB,UAAA/F,IAAA/G,GAEA1V,KAAA45B,YAAAlkB,GAEA1V,KAAAu+F,iBACAv+F,KAAA+9F,aAAAz5F,IAAA,IACAtE,KAAA+9F,aAAA9mF,QAAA,UAEApB,EAAA,CAEAH,EAAA5D,SAAA,oBAEA,IAAA9K,EAAA,CACAsyD,QAAAt5D,KAAAgU,SAAAyqF,WACArkF,MAAAA,GAGAlb,MAAA4H,kBAAA,kBAAAE,EAAA,CAAAyD,EAAA5C,KACA,YAAAA,GAAA4C,EAAA9C,SACA+N,EAAAxH,KAAA,UAAAzD,EAAAoL,IACAxR,EAAAC,IAAAmG,EAAAoL,IAEAH,EAAAU,YAAA,sBAEApW,KAAA+5B,cAAArkB,GAEA,YAAA7N,GAEA3I,MAAA8I,GAAAC,aAAA/I,MAAAS,EAAA,MAAA,mCAOA4+F,eAAA,WACAv+F,KAAA89F,WAAA3/E,OACAne,KAAA89F,WAAAtzE,UACAxqB,KAAA89F,WAAA,OAEA,CACAxiF,SAAA,CACAmjF,WAAA,QCvSAv/F,MAAAkvB,uBAAAlvB,MAAAw1B,qBAAAz1B,OAAA,CACAs2B,oBAAA,WACA,OAAAv1B,KAAA4S,WAAAsH,SAAA,SCLAhb,MAAA80B,GACA,CACA2+C,gBAAA,SAAAuJ,GACAA,EAAAv9E,EAAAM,OAAA,CACAmgG,cAAA,GACAljB,GACA,IAAA73E,EAAA1F,EAAA,WAAA,CACAuP,KAAA,CACAiM,MAAA,OACA5Y,KAAA26E,EAAA36E,MAAA,OACA89F,UAAAnjB,EAAAmjB,UACAxpF,GAAAqmE,EAAArmE,GACAK,KAAAgmE,EAAAhmE,KACAjR,KAAAi3E,EAAAj3E,KACAE,MAAA+2E,EAAA/2E,MACAm6F,UAAApjB,EAAAojB,UACAC,UAAAv/F,KAAAw/F,kBAAAtjB,EAAAqjB,WACAH,aAAA,kBAAAljB,EAAAkjB,aAAAljB,EAAAkjB,aAAA,KAAA,MAAAljB,EAAAkjB,aACA96B,SAAAtkE,KAAAy/F,iBAAAvjB,EAAA5X,UACAo7B,SAAAxjB,EAAAwjB,SACAtlF,MAAA8hE,EAAA9hE,MACAma,YAAA2nD,EAAA3nD,YACAuoD,KAAAZ,EAAAY,KACAjrD,IAAAqqD,EAAArqD,IACArI,IAAA0yD,EAAA1yD,OA8BA,OA1BA0yD,EAAA/hE,OACA9V,EAAAyN,SAAAoqE,EAAA/hE,OAEA+hE,EAAA3nD,aACAlwB,EAAAyN,SAAA,YAEA,aAAAoqE,EAAA36E,MACA8C,EAAAyN,SAAA,YAEAoqE,EAAA5X,UACAjgE,EAAAyN,SAAA,YAEAoqE,EAAAhmE,MACA7R,EAAAyN,SAAA,aAGAoqE,EAAAyjB,eAAAzjB,EAAAojB,WACAj7F,EACA6J,KAAA,wBACA4c,IAAA,YAAA,QAAA5rB,MAAAqY,YAAA,QAAA,QAAA,IAAA2kE,EAAAojB,UAAAhvE,WAAAhwB,OAAA,GAAA,OAGA47E,EAAA3nD,aAAA2nD,EAAAyjB,gBACA,IAAAv6F,QAAA+T,SAAA9U,GAGA,aAAA63E,EAAA36E,KACA5C,EAAA,kCAAA0T,OAAAhO,GAEAA,GAIAiwB,gBAAA,SAAA4nD,GAIA,OAHAA,EAAArmE,KACAqmE,EAAArmE,GAAA,OAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAEA1R,KAAAmkE,YAAAnkE,KAAA2yE,gBAAAuJ,GAAAA,IAGA0jB,oBAAA,SAAA1jB,GACA,IAAArmE,EAAAqmE,EAAArmE,IAAA,WAAAlF,KAAAC,MAAA,IAAAD,KAAAe,UACAmuF,EAAA3jB,EAAA2jB,UAAAhqF,EAAA,OAEAjD,EAAAjU,EAAA,SAAA,CACAwb,MAAA,aAGA9V,EAAArE,KAAA2yE,gBAAAh0E,EAAAM,OAAA,GAAAi9E,EAAA,CACAwjB,UAAA,KACApxF,SAAAsE,GAmBA,OAjBAjU,EAAA,YAAA,CACA4C,KAAA,SACAsU,GAAAgqF,EACA1lF,MAAA,MACAmT,YAAA,YACAlT,MAAAlb,MAAAS,EAAA,MAAA,qBACA0a,aAAAnb,MAAAS,EAAA,MAAA,uBACA2O,SAAAsE,GAEAwG,GAAA,QAAA,KACA/U,EAAA,GAAAskD,SACAniD,SAAAs5F,YAAA,QACA5gG,MAAA8I,GAAAyX,cAAAvgB,MAAAS,EAAA,MAAA,yBACAiT,EAAAqE,QAAA,QACA5S,EAAA,GAAAE,kBAAA,EAAA,KAGAqO,GAGAmtF,oBAAA,SAAA7jB,GAIA,OAHAA,EAAArmE,KACAqmE,EAAArmE,GAAA,WAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAEA1R,KAAAmkE,YAAAnkE,KAAA4/F,oBAAA1jB,GAAAA,IAGA8jB,qBAAA,SAAA9jB,GACA,IAAAtpE,EAAAjU,EAAA,SAAA,CACAwb,MAAA,iBAEA+D,EAAAvf,EAAA,SAAA,CACAwb,MAAA,SACA7L,SAAAsE,GACA5S,KAAA+/F,oBAAAphG,EAAAM,OAAA,CACAiX,KAAAvF,KAAA6Y,IAAA7Y,KAAAkhB,IAAAqqD,EAAA/2E,MAAA7E,OAAA,IAAA,KACA47E,IAAA5tE,SAAA4P,GACA,IAAAsR,EAAA,IAAApqB,QAAAw3B,MAAAhqB,EAAA,CACAkoB,kBAAA,IAKA,OAHAloB,EAAAwG,GAAA,OAAA,KACAoW,EAAArR,SAEAvL,GAGAqtF,eAAA,SAAA/jB,GACA,IAAAjJ,EAAAt0E,EAAA,cAAA,CACAwb,MAAA,OACAkgD,KAAA6hB,EAAA7hB,MAAA,EACApiD,KAAAikE,EAAAjkE,MAAA,GACApC,GAAAqmE,EAAArmE,GACA5Q,KAAAi3E,EAAAj3E,KACAq6F,UAAApjB,EAAAojB,UACAC,UAAArjB,EAAAqjB,YAAAn6F,QAAAqgB,iBAAA,GACA6+C,WAAA4X,EAAA5X,SACA/vC,YAAA2nD,EAAA3nD,YACAx1B,KAAAm9E,EAAA/2E,QAeA,OAZA+2E,EAAAyjB,eACA1sB,EAAA/kE,KAAA,uBAAA,IAGAguE,EAAA/hE,OACA84D,EAAAnhE,SAAAoqE,EAAA/hE,OAGA+hE,EAAAhmE,MACA+8D,EAAAnhE,SAAA,aAGAmhE,GAGAitB,oBAAA,SAAAhkB,GAIA,OAHAA,EAAArmE,KACAqmE,EAAArmE,GAAA,WAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAEA1R,KAAAmkE,YAAAnkE,KAAAigG,eAAA/jB,GAAAA,IAGAnR,aAAA,SAAAmR,GACA,IAAAtpE,EAAAjU,EAAA,SAAA,CACAwb,MAAA,WAGA+hE,EAAA/hE,OACAvH,EAAAd,SAAAoqE,EAAA/hE,OAGA,IAAAgmF,EAAAxhG,EAAA,YAAA,CACAkX,GAAAqmE,EAAArmE,GACA5Q,KAAAi3E,EAAAj3E,KACAs6F,UAAArjB,EAAAqjB,WAAAn6F,QAAAqgB,iBAAA,GACA6+C,SAAA4X,EAAA5X,SACA87B,qBAAAlkB,EAAAqD,eACAjxE,SAAAsE,GAGA,GAAAjU,EAAAoG,cAAAm3E,EAAAh1E,SAAA,CACA,IAAAA,EAAA,GACA,IAAA,IAAA5H,KAAA48E,EAAAh1E,QAAA,CACA,IAAAg1E,EAAAh1E,QAAAhC,eAAA5F,GACA,SAEA,IAAA2wB,EAAAisD,EAAAh1E,QAAA5H,GACAX,EAAAoG,cAAAkrB,QACA,IAAAA,EAAAowE,SACAn5F,EAAAhG,KAAA+uB,GAEA/oB,EAAAhG,KAAA,CACA6U,MAAAka,EAAAla,MACA5Q,WAAA,IAAA8qB,EAAA9qB,MAAA8qB,EAAA9qB,MAAA7F,EACAglE,cAAA,IAAAr0C,EAAAq0C,UAAAr0C,EAAAq0C,WAIAp9D,EAAAhG,KAAA,CACA6U,MAAAka,EACA9qB,MAAA7F,IAIA48E,EAAAh1E,QAAAA,EAGA,IAAAo5F,EAAA,KAEA,IAAA,IAAA5gG,EAAA,EAAAA,EAAAw8E,EAAAh1E,QAAA5G,OAAAZ,IAAA,CACA,IAAAuwB,EAAAisD,EAAAh1E,QAAAxH,QAGA,IAAAuwB,EAAAowE,SACAC,EAAA3hG,EAAA,cAAA,CACAoX,MAAAka,EAAAla,QACAzH,SAAA6xF,GAEAxhG,EAAA,YAAA,CACAwG,MAAA8qB,EAAA9qB,MACAo7F,SAAAtwE,EAAA9qB,OAAA+2E,EAAA/2E,MACAm/D,cAAA,IAAAr0C,EAAAq0C,UAAAr0C,EAAAq0C,SACAvlE,KAAAkxB,EAAAla,QACAzH,SAAAgyF,GAAAH,GASA,OALAjkB,EAAA3I,SACA4sB,EAAAruF,SAAA,eACA,IAAA5S,MAAAyZ,YAAAwnF,IAGAvtF,GAGAqhB,kBAAA,SAAAioD,GAIA,OAHAA,EAAArmE,KACAqmE,EAAArmE,GAAA,SAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAEA1R,KAAAmkE,YAAAnkE,KAAA+qE,aAAAmR,GAAAA,IAGA7X,eAAA,SAAA6X,GACA,IAAArmE,EAAAqmE,EAAArmE,IAAA,WAAAlF,KAAAC,MAAA,IAAAD,KAAAe,UAEArN,EAAA1F,EAAA,WAAA,CACA4C,KAAA,WACA4D,WAAA,IAAA+2E,EAAA/2E,MAAA+2E,EAAA/2E,MAAA,IACA0Q,GAAAA,EACAsE,MAAA,WACAlV,KAAAi3E,EAAAj3E,KACAs9C,QAAA25B,EAAA35B,QAAA,UAAA,KACAg9C,UAAAv/F,KAAAw/F,kBAAAtjB,EAAAqjB,WACAj7B,SAAAtkE,KAAAy/F,iBAAAvjB,EAAA5X,UACAk8B,cAAAtkB,EAAA3I,OACAktB,sBAAAvkB,EAAAwkB,gBAGAxkB,EAAA/hE,OACA9V,EAAAyN,SAAAoqE,EAAA/hE,QAGA+hE,EAAA3I,QAAA2I,EAAAwkB,iBACAr8F,EAAAyN,SAAA,eACA,IAAA5S,MAAAyZ,YAAAtU,IAGA,IAAAsa,EAAAhgB,EAAA,WAAA,CACAgiG,IAAA9qF,EACA9W,KAAAm9E,EAAAnmE,QAIA,OAAAmmE,EAAAj3E,OAAAi3E,EAAAj3E,KAAA3E,OAAA,GAAA,OAAA47E,EAAAj3E,KAAAtD,QAAA,IACAhD,EAAA,CACAA,EAAA,WAAA,CACA4C,KAAA,SACA0D,KAAAi3E,EAAAj3E,KACAE,MAAA,KACA,GACAd,EAAA,GACAsa,EAAA,KAGAhgB,EAAA,CACA0F,EAAA,GACAsa,EAAA,MAKAiiF,oBAAA,SAAA1kB,GACAA,EAAArmE,KACAqmE,EAAArmE,GAAA,WAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAGA,IAAAy4D,EAAAxrE,EAAA,qCAAA,CACAkX,GAAAqmE,EAAArmE,GAAA,WAgBA,OAbAqmE,EAAA3hE,OACA4vD,EAAAr4D,SAAA,SAEAoqE,EAAA9X,cACA+F,EAAAr4D,SAAA,oBAGA9R,KAAAqkE,eAAA6X,GAAA5tE,SAAA67D,GAEA+R,EAAA9X,cACAzlE,EAAA,+BAAA0E,KAAA64E,EAAA9X,cAAA91D,SAAA67D,GAGAA,GAGA02B,qBAAA,SAAA3kB,GACA,IAMA4kB,EAAAC,EANAnuF,EAAAjU,EAAA,uCAEAu9E,EAAA/hE,OACAvH,EAAAd,SAAAoqE,EAAA/hE,OAKA+hE,EAAA8kB,eACAF,EAAA5kB,EAAA4kB,UAAA,IACAC,EAAA7kB,EAAA7tE,QAAAyyF,EAGAniG,EAAA,UAAA2P,SAAAsE,GAAAP,OACArS,KAAAqkE,eAAA,CACAxuD,GAAAqmE,EAAArmE,GACAsE,MAAA,MACApE,MAAA,OAAAmmE,EAAA+kB,UAAA/hG,MAAAS,EAAA,MAAA,QAAA,OACAsF,KAAAi3E,EAAAj3E,KACAE,MAAA27F,EACAv+C,QAAAw+C,EACAxB,UAAArjB,EAAAqjB,cAIAwB,GAAA,EAIA,IAAA,IAAArhG,EAAA,EAAAA,EAAAw8E,EAAAh1E,QAAA5G,OAAAZ,IAAA,CACA,IAAAuwB,EAAAisD,EAAAh1E,QAAAxH,GAEAuwB,EAAA9qB,OAAA27F,GAIAniG,EAAA,UAAA2P,SAAAsE,GAAAP,OACArS,KAAAqkE,eAAA,CACAtuD,MAAAka,EAAAla,MACA9Q,KAAAi3E,EAAAj3E,KAAAi3E,EAAAj3E,KAAA,KAAA,KACAE,MAAA8qB,EAAA9qB,MACAo9C,QAAAw+C,IAAA7kB,EAAA7tE,QAAA,IAAAe,SAAA6gB,EAAA9qB,OACAm/D,SAAAy8B,KAOA,OAFA,IAAA37F,QAAAsT,eAAA9F,GAEAA,GAGAsuF,0BAAA,SAAAhlB,GAKA,OAJAA,EAAAilB,UAAA,EACAjlB,EAAArmE,KACAqmE,EAAArmE,GAAA,iBAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAEA1R,KAAAmkE,YAAAnkE,KAAA6gG,qBAAA3kB,GAAAA,IAGA1J,kBAAA,SAAA0J,GACA,IAAA/2E,EAAA+2E,EAAA/2E,OAAA,IACA8T,EAAAijE,EAAAjjE,oBAAA,IAEArG,EAAAjU,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,cACAinF,aAAAj8F,EACAk8F,2BAAApoF,EACApD,GAAAqmE,EAAArmE,GACA0c,KAAA,WACAE,eAAAypD,EAAA9iE,GAAA,OAAA8iE,EAAAgK,cAAA,QAAA,QACAob,kBAAAplB,EAAAqlB,QACAf,cAAAtkB,EAAA3I,OACAktB,sBAAAvkB,EAAAwkB,gBAyCA,OAtCAxkB,EAAA9iE,GACAxG,EAAAd,SAAA,MACAoqE,EAAAgK,eACAtzE,EAAAd,SAAA,iBAGAoqE,EAAA5J,OACA1/D,EAAAd,SAAA,SAGAoqE,EAAA5X,UACA1xD,EAAAd,SAAA,YAGAnT,EACA,uEAGA2P,SAAAsE,GAEAspE,EAAAj3E,MACAtG,EAAA,WAAA,CACA4C,KAAA,SACA0D,KAAAi3E,EAAAj3E,KACAE,MAAA+2E,EAAA9iE,GAAAjU,EAAA+2E,EAAAgK,cAAAjtE,EAAA,GACAqrD,SAAA4X,EAAA5X,WACAh2D,SAAAsE,IAGAspE,EAAA3I,QAAA2I,EAAAwkB,iBACA9tF,EAAAd,SAAA,eACA,IAAA5S,MAAAyZ,YAAA/F,IAGA,IAAA1T,MAAAga,YAAAtG,EAAA,CACAg5B,SAAAswC,EAAAtwC,UAAAjtC,EAAAwhB,OAGAvN,GAGA42D,uBAAA,SAAA0S,GAIA,OAHAA,EAAArmE,KACAqmE,EAAArmE,GAAA,cAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAEA1R,KAAAmkE,YAAAnkE,KAAAwyE,kBAAA0J,GAAAA,GACApqE,SAAA,sBAGAivD,iBAAA,SAAAmb,GACA,IAAArmE,EAAAqmE,EAAArmE,IAAA,QAAAlF,KAAAC,MAAA,IAAAD,KAAAe,UACA8vF,EAAAtlB,EAAAslB,aAAA3rF,EAAA,aACA5Q,EAAAi3E,EAAAj3E,MAAA,KACAE,EAAA+2E,EAAA/2E,OAAA,KACAmtE,EAAA4J,EAAA5J,QAAA,EACAitB,EAAArjB,EAAAqjB,WAAAn6F,QAAAqgB,iBAAA,GACA6+C,EAAA4X,EAAA5X,WAAA,EAEA1xD,EAAAjU,EAAA,SAAA,CACAkX,GAAA2rF,EACArnF,MAAA,yBAGAsnF,EAAA9iG,EAAA,SAAA,CACAwb,MAAA,gBAAAm4D,EAAA,SAAA,MACAhkE,SAAAsE,GAEAjU,EAAA,SAAA,CACAwb,MAAA,gBACAgnC,MAAA+6B,EAAA/2E,MAAA,CAAAmvC,gBAAA4nC,EAAA/2E,OAAA,OACAmJ,SAAAmzF,GAEAzhG,KAAA2yE,gBAAA,CACA98D,GAAAA,EACA5Q,KAAAA,EACAE,MAAAA,EACA+Q,KAAA,GACAiE,MAAA,cACAolF,UAAAA,EACAj7B,SAAAA,IACAh2D,SAAAsE,GAGA,OADA,IAAA1T,MAAAyhE,WAAA/tD,GACAA,GAGA8uF,iBAAA,SAAAxlB,GAIA,OAHAA,EAAArmE,KACAqmE,EAAArmE,GAAA,QAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAEA1R,KAAAmkE,YAAAnkE,KAAA+gE,iBAAAmb,GAAAA,IAGA3J,gBAAA,SAAA2J,GACA,IAAArmE,GAAAqmE,EAAArmE,IAAA,OAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAAA,QACAzM,EAAAi3E,EAAAj3E,MAAA,KACAR,EAAAQ,EAAAA,EAAA,SAAA,KACAE,EAAA+2E,EAAA/2E,OAAA,mBAAA+2E,EAAA/2E,MAAAw8F,SAAAzlB,EAAA/2E,MAAA,KACAy8F,EAAAz8F,EAAAjG,MAAAmD,WAAA8C,GAAA,KACAo6F,EAAArjB,EAAAqjB,WAAAn6F,QAAAqgB,iBAAA,GACA6+C,EAAA4X,EAAA5X,WAAA,EAEA1xD,EAAAjU,EAAA,SAAA,CACAwb,MAAA,gBAGA9V,EAAArE,KAAA2yE,gBAAA,CACA98D,GAAAA,EACA5Q,KAAAR,EACAU,MAAAy8F,EACArtE,YAAA,IACA6qE,cAAA,EACAG,UAAAA,EACAj7B,SAAAA,IACAh2D,SAAAsE,GAgBA,OAdAjU,EAAA,gCAAA2P,SAAAsE,GAEA3N,GACAtG,EAAA,WAAA,CACA4C,KAAA,SACA0D,KAAAA,EAAA,aACAX,IAAApF,MAAA2iG,WACAvzF,SAAAsE,GAGAvO,EAAA7B,WAAA7D,EAAAM,OAAA,CACA6iG,YAAA38F,GAAA,IAAA5C,MACArD,MAAAuD,oBAEAmQ,GAGAmvF,gBAAA,SAAA7lB,GAIA,OAHAA,EAAArmE,KACAqmE,EAAArmE,GAAA,OAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAEA1R,KAAAmkE,YAAAnkE,KAAAuyE,gBAAA2J,GAAAA,IAGA8lB,sBAAA,SAAA9lB,GACA,IAAA12C,EAAA,IAAAjjC,KACA0/F,EAAA,IAAA1/F,KAAAijC,EAAA08D,cAAA18D,EAAAm8D,WAAAn8D,EAAA28D,WACAjmB,EAAAv9E,EAAAM,OAAA,CACAkb,MAAA,GACAjT,QAAA,CACA,QACA,WACA,YACA,WACA,YACA,aACA,aACA,YAEA0kC,SAAAjtC,EAAAwhB,KACAogF,SAAA,KACA6B,UAAA,KACAC,QAAA,MACAnmB,GAEA,IAWAjsD,EACAC,EAZAsD,EAAA70B,EAAA,SAAA,CAAAwb,MAAA,SACAtI,EAAAlT,EAAA,QAAA,CAAAwb,MAAA,WAAA7L,SAAAklB,GACA8uE,EAAA3jG,EAAA,QACAmT,SAAA,OACAzO,KAAAnE,MAAAS,EAAA,MAAA,QACAqH,KAAA,SAAA,OAEArI,EAAA,SACA0T,OAAAiwF,GACAh0F,SAAAuD,GAIA,IAAA,IAAAnS,EAAA,EAAAA,EAAAw8E,EAAAh1E,QAAA5G,OAAAZ,IAAA,CACA,IAAAm2B,EAAAqmD,EAAAh1E,QAAAxH,GACA,OAAAm2B,GACA,IAAA,QACA5F,EAAA,CACAla,MAAA7W,MAAAS,EAAA,MAAA,SACAyiG,UAAAH,EACAI,QAAAJ,GAEA,MACA,IAAA,WACA,IAAAM,EAAA/8D,EAAAg9D,SAAAtjG,MAAAuD,kBAAAggG,SACAF,EAAA,IACAA,GAAA,GAEAtyE,EAAA,CACAla,MAAA7W,MAAAS,EAAA,MAAA,aACAyiG,UAAA,IAAA7/F,KAAAijC,EAAA08D,cAAA18D,EAAAm8D,WAAAn8D,EAAA28D,UAAAI,GACAF,QAAAJ,GAEA,MACA,IAAA,YACAhyE,EAAA,CACAla,MAAA7W,MAAAS,EAAA,MAAA,cACAyiG,UAAA,IAAA7/F,KAAAijC,EAAA08D,cAAA18D,EAAAm8D,YACAU,QAAAJ,GAEA,MACA,IAAA,WACAhyE,EAAA,CACAla,MAAA7W,MAAAS,EAAA,MAAA,aACAyiG,UAAA,IAAA7/F,KAAAijC,EAAA08D,cAAA,GACAG,QAAAJ,GAEA,MACA,IAAA,YACAhyE,EAAA,CACAla,MAAA7W,MAAAS,EAAA,MAAA,kBAAA,CAAAomE,IAAA,IACAq8B,UAAA,IAAA7/F,KAAAijC,EAAA08D,cAAA18D,EAAAm8D,WAAAn8D,EAAA28D,UAAA,GACAE,QAAAJ,GAEA,MACA,IAAA,aACAhyE,EAAA,CACAla,MAAA7W,MAAAS,EAAA,MAAA,kBAAA,CAAAomE,IAAA,KACAq8B,UAAA,IAAA7/F,KAAAijC,EAAA08D,cAAA18D,EAAAm8D,WAAAn8D,EAAA28D,UAAA,IACAE,QAAAJ,GAEA,MACA,IAAA,aACAhyE,EAAA,CACAla,MAAA7W,MAAAS,EAAA,MAAA,kBAAA,CAAAomE,IAAA,KACAq8B,UAAA,IAAA7/F,KAAAijC,EAAA08D,cAAA18D,EAAAm8D,WAAAn8D,EAAA28D,UAAA,IACAE,QAAAJ,GAEA,MACA,IAAA,WACAhyE,EAAA,CACAla,MAAA7W,MAAAS,EAAA,MAAA,aACAyiG,UAAA,IAAA7/F,KAAAijC,EAAA08D,cAAA18D,EAAAm8D,WAAAn8D,EAAA28D,UAAA,KACAE,QAAAJ,GAKA,IAAAlwF,EAAApT,EAAA,SACA0gB,EAAA1gB,EAAA,OAAA,CAAA0E,KAAA4sB,EAAAla,QACA/O,KAAA,SAAA6uB,GACA7uB,KAAA,YAAAipB,EAAAmyE,WACAp7F,KAAA,UAAAipB,EAAAoyE,SACAr7F,KAAA,YAAAipB,EAAAmyE,UAAAnyE,EAAAmyE,UAAA94F,UAAA,MACAtC,KAAA,UAAAipB,EAAAoyE,QAAApyE,EAAAoyE,QAAA/4F,UAAA,MAEA4yE,EAAAqkB,UAAA1qE,GAAAqmD,EAAAqkB,WACArwE,EAAA7Q,EAAA,IAGAtN,EAAAM,OAAAgN,GACAtN,EAAAzD,SAAAuD,GAGAlT,EAAA,SAAA2P,SAAAklB,GAEA,IAAAkvE,EAAA/jG,EAAA,SAAA,CAAAwb,MAAA,4BAAA7L,SAAAklB,GACAmvE,EAAA3iG,KAAA+hG,gBAAA,CAAAhsF,MAAA7W,MAAAS,EAAA,MAAA,UAAA2O,SAAAo0F,GAAA9sF,KAAA,SACAgtF,EAAA5iG,KAAA+hG,gBAAA,CAAAhsF,MAAA7W,MAAAS,EAAA,MAAA,QAAA2O,SAAAo0F,GAAA9sF,KAAA,SAGAitF,EAAAF,EAAAlmF,IAAAmmF,GACAC,EAAAzpF,GAAA,SAAA,SAAAC,GACAA,EAAAyG,UAAA1a,QAAA0Y,SAAAnf,EAAAqB,MAAAgH,KAAA,cAAA87F,MAAAlyE,GAAA,aACAvX,EAAA2X,qBAKA2xE,EAAA37F,KAAA,cAAA87F,MAAA1pF,GAAA,aAAA,SAAAC,GACAA,EAAA2X,qBAEA4xE,EAAA57F,KAAA,cAAA87F,MAAA1pF,GAAA,aAAA,SAAAC,GACAA,EAAA2X,qBAGA,IAAAzM,EAAA,IAAAnf,QAAAy5F,KAAArrE,EAAA,CACAo2B,eAAA,SAAA35B,GACA,IAAAxL,EAAA9lB,EAAAsxB,GACA3W,EAAAjW,KAAAohB,EAAAphB,QACAkhB,EAAAw+E,8BACAvvE,EAAA5d,KAAA,QAAAQ,YAAA,OACAqO,EAAA3S,SAAA,OAGA6wF,EAAAngG,WAAA,UAAAiiB,EAAAzd,KAAA,cACA47F,EAAApgG,WAAA,UAAAiiB,EAAAzd,KAAA,YAEAk1E,EAAAtwC,SAAAnnB,EAAAzd,KAAA,cAAA,KAAAyd,EAAAzd,KAAA,YAAA,KAAAyd,EAAAzd,KAAA,cAIA67F,EAAAzpF,GAAA,UAAA,WAEA,IAMAqL,EANA29E,EAAAO,EAAAngG,WAAA,WACA6/F,EAAAO,EAAApgG,WAAA,WACAwgG,EAAAZ,EAAAA,EAAA94F,UAAA,KACA25F,EAAAZ,EAAAA,EAAA/4F,UAAA,KAEAob,EAAA7S,EAAA+D,KAAA,KAEAstF,GAAA,EAEA,IAAA,IAAAxjG,EAAA,EAAAA,EAAAglB,EAAApkB,OAAAZ,IAEA,GADA+kB,EAAAC,EAAAvS,GAAAzS,GAEAsjG,KAAAv+E,EAAAzd,KAAA,cAAA,OACAi8F,KAAAx+E,EAAAzd,KAAA,YAAA,MACA,CACAud,EAAA4H,aAAA1H,EAAA,IACAy+E,GAAA,EACAhnB,EAAAtwC,SAAA,KAAA,KAAAnnB,EAAAzd,KAAA,WACA,MAIAk8F,IACA1vE,EAAA5d,KAAA,QAAAQ,YAAA,OACAssF,EAAA5wF,SAAA,OAEAkxF,GAAAC,EAEAD,GAAAC,EACA3pF,EAAAjW,KAAAs/F,EAAAr+F,MAAA,MAAAs+F,EAAAt+F,OACA0+F,EACA1pF,EAAAjW,KAAAnE,MAAAS,EAAA,MAAA,cAAA,CAAA2C,KAAAqgG,EAAAr+F,SAEAgV,EAAAjW,KAAAnE,MAAAS,EAAA,MAAA,YAAA,CAAA2C,KAAAsgG,EAAAt+F,SANAgV,EAAAjW,KAAAnE,MAAAS,EAAA,MAAA,QAQA4kB,EAAAw+E,8BAEA7mB,EAAAtwC,SAAAw2D,EAAAC,EAAA,cAIA99E,EAAAnL,GAAA,QAAA,WACAupF,EAAAngG,WAAA,QACAogG,EAAApgG,WAAA,WAGA,IAAA2gG,EAAA,cACAjnB,EAAA/hE,QACAgpF,EAAAA,EAAA,IAAAjnB,EAAA/hE,OAGA,IAAAb,EAAA3a,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAAgpF,EACA71E,YAAA,OACAjqB,KAAAnE,MAAAS,EAAA,MAAA,SAqBA,OAlBA,IAAAyF,QAAAyU,QAAAP,EAAAiL,GAEA2L,GACA3L,EAAA4H,aAAA+D,GAGAgsD,EAAAkmB,WACAO,EAAAngG,WAAA,UAAA05E,EAAAkmB,WAGAlmB,EAAAmmB,SACAO,EAAApgG,WAAA,UAAA05E,EAAAmmB,UAGAnmB,EAAAkmB,WAAAlmB,EAAAmmB,UACAQ,EAAA5rF,QAAA,UAGAqC,GAGAo5D,gBAAA,SAAAwJ,GACA,IAAArmE,GAAAqmE,EAAArmE,IAAA,OAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAAA,QACAzM,EAAAi3E,EAAAj3E,MAAA,KACAR,EAAAQ,EAAAA,EAAA,SAAA,KACAE,EAAA+2E,EAAA/2E,OAAA,mBAAA+2E,EAAA/2E,MAAAw8F,SAAAzlB,EAAA/2E,MAAA,KACAo6F,EAAArjB,EAAAqjB,WAAAn6F,QAAAqgB,iBAAA,GACA6+C,EAAA4X,EAAA5X,WAAA,EAEA1xD,EAAAjU,EAAA,SAAA,CACAwb,MAAA,gBAGA9V,EAAArE,KAAA2yE,gBAAA,CACA98D,GAAAA,EACA5Q,KAAAR,EACA8vB,YAAA,IACA6qE,cAAA,EACAG,UAAAA,EACAj7B,SAAAA,IACAh2D,SAAAsE,GAiBA,OAfAjU,EAAA,gCAAA2P,SAAAsE,GAEA3N,GACAtG,EAAA,WAAA,CACA4C,KAAA,SACA0D,KAAAA,EAAA,aACAX,IAAApF,MAAA2iG,WACAvzF,SAAAsE,GAGAvO,EAAA++F,WAAAlkG,MAAAmkG,mBACAl+F,GACAd,EAAA++F,WAAA,UAAA,KAAAj+F,EAAAm+F,WAAA,GAAAn+F,EAAAo+F,aAAAp+F,EAAAq+F,cAGA5wF,GAGA6wF,gBAAA,SAAAvnB,GAIA,OAHAA,EAAArmE,KACAqmE,EAAArmE,GAAA,OAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAEA1R,KAAAmkE,YAAAnkE,KAAA0yE,gBAAAwJ,GAAAA,IAGA/X,YAAA,SAAA//D,EAAA83E,GACA,IAAAnmE,EAAAmmE,EAAAnmE,OAAA,cAAAmmE,EAAAnmE,MAAAmmE,EAAAnmE,MAAA,KAGAo0D,GAFAjrE,MAAA4c,aAAAogE,EAAApmE,QAAAomE,EAAApmE,OAEAnX,EAAAu9E,EAAAilB,SAAA,cAAA,SAAA,CACAhnF,MAAA,QACAtE,GAAAqmE,EAAAx/C,UAAAw/C,EAAArmE,GAAAqmE,EAAArmE,GAAA,SAAA,SAOA,GAJAqmE,EAAA3hE,OACA4vD,EAAAr4D,SAAA,SAGAiE,EACA,CAAA,IAAAya,EAAA7xB,EAAA,0BAAA2P,SAAA67D,GAEAxrE,EAAAu9E,EAAAilB,SAAA,YAAA,WAAA,CACAtrF,GAAAqmE,EAAAqlB,UAAArlB,EAAArmE,GAAA,GAAAqmE,EAAArmE,MAAAqmE,EAAAilB,SAAA,SAAA,UAAA,MACAhnF,MAAA+hE,EAAAmB,SAAA,WAAA,KACAsjB,KAAAzkB,EAAAilB,UAAAjlB,EAAArmE,GACAxS,KAAA0S,IACAzH,SAAAkiB,GAiBA,OAdA0rD,EAAA9X,cACAzlE,EAAA,+BAAA0E,KAAA64E,EAAA9X,cAAA91D,SAAA67D,GAGAxrE,EAAA,wBAAA0T,OAAAjO,GAAAkK,SAAA67D,GAEA+R,EAAAwnB,SACA/kG,EAAA,wBAAA0E,KAAA64E,EAAAwnB,SAAAp1F,SAAA67D,GAGA+R,EAAAtqE,QACA5R,KAAA2jG,iBAAAx5B,EAAA+R,EAAAtqE,QAGAu4D,GAGAx4D,gBAAA,SAAAC,GACA,IAAAuf,EAAAxyB,EAAA,wBAMA,OAJAiT,GACA5R,KAAA4jG,gBAAAzyE,EAAAvf,GAGAuf,GAGAyyE,gBAAA,SAAAzyE,EAAAvf,GACA,IAAA,IAAAlS,EAAA,EAAAA,EAAAkS,EAAAtR,OAAAZ,IACAf,EAAA,SAAA0E,KAAAuO,EAAAlS,IAAA4O,SAAA6iB,IAIAwyE,iBAAA,SAAAx5B,EAAAv4D,GACA,GAAAA,EAAA,CAIAu4D,EAAAr4D,SAAA,cACAq4D,EAAAjwD,SAAA,UAAApI,SAAA,UAEA,IAAA+xF,EAAA15B,EAAAjwD,SAAA,aAEA2pF,EAAAvjG,SACAujG,EAAA7jG,KAAA2R,kBAAArD,SAAA67D,IAGAnqE,KAAA4jG,gBAAAC,EAAAjyF,KAGAkyF,qBAAA,SAAA35B,GACAA,EAAA/zD,YAAA,cACA+zD,EAAAjwD,SAAA,UAAA9D,YAAA,UACA+zD,EAAAjwD,SAAA,aAAAI,UAGAklF,kBAAA,SAAAD,GACA,OAAAA,IAAAn6F,QAAAqgB,iBAAA,GAAA,YAAA,MAGAg6E,iBAAA,SAAAn7B,GACA,OAAAA,EAAA,WAAA,OCh4BAplE,MAAAgjD,SAAA98C,QAAAuV,KAAA1b,OAAA,CACA87C,SAAA,KACAkH,aAAA,KACAvsC,SAAA,KACA1B,SAAA,KACA+vF,eAAA,GACAC,eAAA,KACAC,kBAAA,EACAC,kBAAA,EAEA7oF,KAAA,SAAA3F,EAAA1B,GACAhU,KAAA+jG,eAAA,CAAA7tF,KAAA,GAAA3U,KAAA,GAAAwoB,MAAA,IACA/pB,KAAA0V,SAAAA,EACA1V,KAAAiiD,aAAA,KACAjiD,KAAAgkG,eAAA,KACAhkG,KAAAikG,kBAAA,EACAjkG,KAAAkkG,kBAAA,EAIA,IAAAziD,GAFAztC,EAAArV,EAAAM,OAAA,GAAAC,MAAAgjD,SAAA5mC,SAAAtH,IAEAytC,OAeA,IAAA,IAAAxgB,YAdAjtB,EAAAytC,OAEAztC,EAAAiuC,cAAAjuC,EAAAiuC,aAAA3hD,SACA,iBAAA0T,EAAAiuC,eACAjuC,EAAAiuC,aAAA,CAAAjuC,EAAAiuC,eAGAjiD,KAAAiiD,aAAAjuC,EAAAiuC,oBACAjuC,EAAAiuC,cAGAjuC,EAAAmwF,YAAA,EAEAnkG,KAAA+6C,SAAA/6C,KAAA0V,SAAA0uF,WAAApwF,GACAytC,EACAA,EAAAv8C,eAAA+7B,IAIAjhC,KAAA+6C,SAAA3hC,GAAA6nB,EAAAwgB,EAAAxgB,IAGAjhC,KAAAgU,SAAAA,EAEAhU,KAAA+6C,SAAA3hC,GAAA,gBAAApZ,KAAAqkG,UAAApoF,KAAAjc,QAMAoiD,UAAA,SAAAkiD,QAEA,IAAAplG,MAAA0H,oBAAA,IAAA1H,MAAA2H,iBAEAy9F,EAAAplG,MAAA0H,eAAA1H,MAAA2H,gBAGA7G,KAAA+6C,SAAAqpD,WAAA,SAAA,CAAA18C,SAAA48C,KAMAC,cAAA,WACA,OAAAvkG,KAAA+6C,SAAAqpD,WAAA,WAMAphD,aAAA,WAEA,OAAAhjD,KAAAukG,gBAAA,GAMAF,UAAA,SAAA35F,EAAA1D,GACA0D,EAAAsmB,kBAEA,IAAAwzE,GAAA,EA8CA,OA5CAxkG,KAAAiiD,eACAjiD,KAAAgkG,gBACAhkG,KAAAykG,uBAGAD,GAAA,GAIAx9F,EAAA09F,UAAAC,KAAA,KACA,IAAA5hD,EAAA/7C,EAAA67C,MAAA,GACA+hD,GAAA,EACA,GAAAJ,EAAA,CACA,IACAK,EADA9hD,EAAA99C,KAAAU,MAAA,oBACA,IACA,IAAAhH,EAAAsO,QAAA43F,EAAAj1F,cAAA5P,KAAAgkG,kBACAY,GAAA,EACA5kG,KAAA+jG,eAAAxiG,KAAAL,KAAA,IAAA6hD,EAAA99C,KAAA,MAIA89C,EAAA7sC,KAAAlW,KAAAgU,SAAA8wF,cACA9kG,KAAA+jG,eAAA7tF,KAAAhV,KAAA,IAAA6hD,EAAA99C,KAAA,KACA2/F,GAAA,GAIAA,GAAA,mBAAA5kG,KAAAgU,SAAA4zC,kBAAA5nD,KAAAgU,SAAA4zC,gBAAA5nD,KAAAkkG,qBACAlkG,KAAA+jG,eAAAh6E,MAAA7oB,KAAA,IAAA6hD,EAAA99C,KAAA,KACA2/F,GAAA,GAGAA,IACA5kG,KAAAkkG,oBACAl9F,EAAAgqD,YAGAhxD,KAAAikG,oBAAAj9F,EAAA+9F,cAAAzkG,SACAN,KAAAikG,kBAAA,EACAjkG,KAAAkkG,kBAAA,EACAlkG,KAAAglG,2BAIA,GAMAA,qBAAA,WACA,IAAA5hG,EAEApD,KAAA+jG,eAAAxiG,KAAAjB,SAEA8C,EADA,IAAApD,KAAA+jG,eAAAxiG,KAAAjB,OACA,+EAEA,gFAGA8C,EAAAlE,MAAAS,EAAA,MAAAyD,EAAA,CAAAy/C,MAAA7iD,KAAA+jG,eAAAxiG,KAAAd,KAAA,MAAAwkG,MAAAjlG,KAAAiiD,aAAAxhD,KAAA,QACAT,KAAA+jG,eAAAxiG,KAAA,GACA2G,MAAA9E,IAGApD,KAAA+jG,eAAA7tF,KAAA5V,SAEA8C,EADA,IAAApD,KAAA+jG,eAAA7tF,KAAA5V,OACA,gGAEA,oGAGA8C,EAAAlE,MAAAS,EAAA,MAAAyD,EAAA,CAAAy/C,MAAA7iD,KAAA+jG,eAAA7tF,KAAAzV,KAAA,MAAAyV,KAAAlW,KAAAklG,cAAAhmG,MAAAimG,iBACAnlG,KAAA+jG,eAAA7tF,KAAA,GACAhO,MAAA9E,IAGApD,KAAA+jG,eAAAh6E,MAAAzpB,SAEA8C,EADA,IAAApD,KAAA+jG,eAAAh6E,MAAAzpB,OACA,oFAEA,qFAGA8C,EAAAlE,MAAAS,EAAA,MAAAyD,EAAA,CAAAy/C,MAAA7iD,KAAA+jG,eAAAh6E,MAAAtpB,KAAA,QACAT,KAAA+jG,eAAAh6E,MAAA,GACA7hB,MAAA9E,KAIA8hG,cAAA,SAAAE,GAGA,GAAAA,EAFA,KAGA,OAAAA,EAAA,KAGA,IAEAC,GAAA,EAEA,GACAD,GAXA,OAYAC,QAEAD,GAdA,MAgBA,OAAAA,EAAAE,QAAA,GAAA,IAVA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,MAUAD,IAGAZ,qBAAA,WACAzkG,KAAAgkG,eAAA,GAEA,IAAA,IAAAtkG,EAAA,EAAAA,EAAAM,KAAAiiD,aAAA3hD,OAAAZ,IAAA,CACA,IAAA6lG,EAAAvlG,KAAAiiD,aAAAviD,GAEA,QAAA,IAAAR,MAAAsmG,UAAAD,GACA,IAAA,IAAAhwC,EAAA,EAAAA,EAAAr2D,MAAAsmG,UAAAD,GAAAE,WAAAnlG,OAAAi1D,IAAA,CACA,IAAAtM,EAAA/pD,MAAAsmG,UAAAD,GAAAE,WAAAlwC,GACAv1D,KAAAgkG,eAAA9iG,KAAA+nD,MAMAz+B,QAAA,WACAxqB,KAAA0V,SAAA0uF,WAAA,WACApkG,KAAA0vB,SAEA,CACApU,SAAA,CACAkmC,SAAA,KACAkkD,UAAA,KACAnkD,UAAA,KACAokD,mBAAA,EACAb,YAAA5lG,MAAAimG,cACAljD,aAAA,KACAR,OAAA,GACAmG,gBAAA,KACAngD,QAAA,CAAAm+F,OAAA,oCACAt4F,UAAA,mBChOApO,MAAA2mG,mBAAA3mG,MAAAo/B,mBAAAr/B,OAAA,CACAmgC,oBAAA,SAAAF,GAKAA,GAHAA,EAAAA,EAAAlgC,QAAA,aAAA,KAGA4Q,cAOAsvB,GADAA,GAHAA,EAAAhgC,MAAAgS,YAAAguB,IAGAlgC,QAAA,WAAA,KACAA,QAAA,cAAA,IAGA,IAEA8mG,EAFA5mG,MAAA+P,YAAAiwB,EAAA/9B,MAAA,eAEAV,KAAAvB,MAAAy1F,mBAMA,OAJAmR,GAAA9lG,KAAAgU,SAAA+xF,SACAD,GAAA9lG,KAAAgU,SAAA+xF,QAGAD,KxD7BA,CA6mvBGjnG","file":"Craft.min.js","sourcesContent":["(function($){\n\n/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function(html) {\n    return html.replace(rxhtmlTag, \"<$1></$2>\");\n};\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} shift\n         * @param {boolean} alt\n         */\n        shortcutText: function (key, shift, alt) {\n            if (Craft.clientOs === 'Mac') {\n                return (alt ? '⌥' : '') + (shift ? '⇧' : '') + '⌘' + key;\n            }\n            return 'Ctrl+' + (alt ? 'Alt+' : '') + (shift ? 'Shift+' : '') + key;\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n\n                // Get the latest headers\n                this._getApiHeaders(cancelToken).then(apiHeaders => {\n                    // Send the API request\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    // Force the API to process the Craft headers if this is the first API request\n                    if (!this._apiHeaders) {\n                        options.params.processCraftHeaders = 1;\n                    }\n\n                    axios.request(options).then((apiResponse) => {\n                        // Process the response headers\n                        this._processApiHeaders(apiResponse.headers, cancelToken).then(() => {\n                            // Finally return the API response data\n                            resolve(apiResponse.data);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        _getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    resolve(response.data);\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _processApiHeaders: function(headers, cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Have we already processed them?\n                if (this._apiHeaders) {\n                    resolve();\n                    return;\n                }\n\n                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                    data: {\n                        headers: headers,\n                    },\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    this._loadingApiHeaders = false;\n\n                    resolve();\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                    }\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _rejectApiRequests: function(reject, e) {\n            this._loadingApiHeaders = false;\n            reject(e);\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1](e);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = () => {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                };\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         */\n        findDeltaData: function(oldData, newData, deltaNames) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, true);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                }\n            }\n\n            return params.join('&');\n        },\n\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, useInitialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = decodeURIComponent(params[p]).substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(params[p]);\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(params[p]);\n                }\n            }\n\n            if (useInitialValues) {\n                for (let name in Craft.initialDeltaValues) {\n                    if (Craft.initialDeltaValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(Craft.initialDeltaValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return arr.includes(elem);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a', $container).each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n    });\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: {\n                        customTrigger: $btn,\n                    }\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                                'aria-label': Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                    $inputs.first().focus();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend({\n    $element: null,\n    elementId: null,\n    siteId: null,\n    deltaNames: null,\n    initialData: null,\n\n    $form: null,\n    $fieldsContainer: null,\n    $cancelBtn: null,\n    $saveBtn: null,\n    $spinner: null,\n\n    $siteSelect: null,\n    $siteSpinner: null,\n\n    hud: null,\n\n    init: function(element, settings) {\n        // Param mapping\n        if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n            // (settings)\n            settings = element;\n            element = null;\n        }\n\n        this.$element = $(element);\n        this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n        this.loadHud();\n    },\n\n    setElementAttribute: function(name, value) {\n        if (!this.settings.attributes) {\n            this.settings.attributes = {};\n        }\n\n        if (value === null) {\n            delete this.settings.attributes[name];\n        } else {\n            this.settings.attributes[name] = value;\n        }\n    },\n\n    getBaseData: function() {\n        var data = $.extend({}, this.settings.params);\n\n        if (this.settings.siteId) {\n            data.siteId = this.settings.siteId;\n        } else if (this.$element && this.$element.data('site-id')) {\n            data.siteId = this.$element.data('site-id');\n        }\n\n        if (this.settings.elementId) {\n            data.elementId = this.settings.elementId;\n        } else if (this.$element && this.$element.data('id')) {\n            data.elementId = this.$element.data('id');\n        }\n\n        if (this.settings.elementType) {\n            data.elementType = this.settings.elementType;\n        }\n\n        if (this.settings.attributes) {\n            data.attributes = this.settings.attributes;\n        }\n\n        if (this.settings.prevalidate) {\n            data.prevalidate = 1;\n        }\n\n        return data;\n    },\n\n    loadHud: function() {\n        this.onBeginLoading();\n        var data = this.getBaseData();\n        data.includeSites = Craft.isMultiSite && this.settings.showSiteSwitcher;\n        Craft.postActionRequest('elements/get-editor-html', data, this.showHud.bind(this));\n    },\n\n    showHud: function(response, textStatus) {\n        this.onEndLoading();\n\n        if (textStatus === 'success') {\n            var $hudContents = $();\n\n            if (response.sites) {\n                var $header = $('<div class=\"hud-header\"/>');\n\n                if (response.sites.length === 1) {\n                    $('<h5/>', {text: response.sites[0].name}).appendTo($header);\n                } else {\n                    var $siteSelectContainer = $('<div class=\"select\"/>').appendTo($header);\n\n                    this.$siteSelect = $('<select/>').appendTo($siteSelectContainer);\n                    this.$siteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($header);\n\n                    for (var i = 0; i < response.sites.length; i++) {\n                        var siteInfo = response.sites[i];\n                        $('<option value=\"' + siteInfo.id + '\"' + (siteInfo.id == response.siteId ? ' selected=\"selected\"' : '') + '>' + siteInfo.name + '</option>').appendTo(this.$siteSelect);\n                    }\n\n                    this.addListener(this.$siteSelect, 'change', 'switchSite');\n                }\n\n                $hudContents = $hudContents.add($header);\n            }\n\n            this.$form = $('<div/>');\n            this.$fieldsContainer = $('<div class=\"fields\"/>').appendTo(this.$form);\n\n            this.updateForm(response, true);\n\n            this.onCreateForm(this.$form);\n\n            var $footer = $('<div class=\"hud-footer\"/>').appendTo(this.$form),\n                $buttonsContainer = $('<div class=\"buttons right\"/>').appendTo($footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo($buttonsContainer);\n            this.$saveBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($buttonsContainer);\n            this.$spinner = $('<div class=\"spinner hidden\"/>').appendTo($buttonsContainer);\n\n            $hudContents = $hudContents.add(this.$form);\n\n            if (!this.hud) {\n                var hudTrigger = (this.settings.hudTrigger || this.$element);\n\n                this.hud = new Garnish.HUD(hudTrigger, $hudContents, {\n                    bodyClass: 'body elementeditor',\n                    closeOtherHUDs: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    onShow: this.onShowHud.bind(this),\n                    onHide: this.onHideHud.bind(this),\n                    onSubmit: this.saveElement.bind(this),\n                });\n\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.maybeCloseHud.bind(this));\n                this.hud.addListener(this.hud.$shade, 'click', this.maybeCloseHud.bind(this));\n\n                this.hud.$hud.data('elementEditor', this);\n\n                // Disable browser input validation\n                this.hud.$body.attr('novalidate', '');\n\n                this.hud.on('hide', () => {\n                    delete this.hud;\n                });\n            } else {\n                this.hud.updateBody($hudContents);\n                this.hud.updateSizeAndPosition();\n            }\n\n            // Focus on the first text input\n            $hudContents.find('.text:first').trigger('focus');\n\n            this.addListener(this.$cancelBtn, 'click', function() {\n                this.hud.hide();\n            });\n        }\n    },\n\n    switchSite: function() {\n        if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n            this.$siteSelect.val(this.siteId);\n            return;\n        }\n\n        var newSiteId = this.$siteSelect.val();\n\n        if (newSiteId == this.siteId) {\n            return;\n        }\n\n        this.$siteSpinner.removeClass('hidden');\n\n        this.reloadForm({siteId: newSiteId}, textStatus => {\n            this.$siteSpinner.addClass('hidden');\n            if (textStatus !== 'success') {\n                // Reset the site select\n                this.$siteSelect.val(this.siteId);\n            }\n        });\n    },\n\n    reloadForm: function(data, callback) {\n        data = $.extend(this.getBaseData(), data);\n\n        Craft.postActionRequest('elements/get-editor-html', data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.updateForm(response, true);\n            }\n\n            if (callback) {\n                callback(textStatus);\n            }\n        });\n    },\n\n    updateForm: function(response, refreshInitialData) {\n        this.siteId = response.siteId;\n        this.$fieldsContainer.html(response.html);\n\n        if (refreshInitialData !== false) {\n            this.deltaNames = response.deltaNames;\n        }\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$fieldsContainer.find('> .meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            Craft.appendHeadHtml(response.headHtml);\n            Craft.appendFootHtml(response.footHtml);\n            Craft.initUiElements(this.$fieldsContainer);\n\n            if (refreshInitialData) {\n                this.initialData = this.hud.$body.serialize();\n            }\n        });\n    },\n\n    saveElement: function() {\n        var validators = this.settings.validators;\n\n        if ($.isArray(validators)) {\n            for (var i = 0; i < validators.length; i++) {\n                if ($.isFunction(validators[i]) && !validators[i].call()) {\n                    return false;\n                }\n            }\n        }\n\n        this.$spinner.removeClass('hidden');\n\n        var data = $.param(this.getBaseData()) + '&' + this.hud.$body.serialize();\n        data = Craft.findDeltaData(this.initialData, data, this.deltaNames);\n\n        Craft.postActionRequest('elements/save-element', data, (response, textStatus) => {\n            this.$spinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (this.$element && this.siteId == this.$element.data('site-id')) {\n                        // Update the label\n                        var $title = this.$element.find('.title'),\n                            $a = $title.find('a');\n\n                        if ($a.length && response.cpEditUrl) {\n                            $a.attr('href', response.cpEditUrl);\n                            $a.text(response.newTitle);\n                        } else {\n                            $title.text(response.newTitle);\n                        }\n                    }\n\n                    if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                        Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                            type: Craft.elementTypeNames[this.settings.elementType][0],\n                        }));\n                    }\n\n                    this.closeHud();\n                    this.onSaveElement(response);\n                } else {\n                    this.updateForm(response, false);\n                    Garnish.shake(this.hud.$hud);\n                }\n            }\n        });\n    },\n\n    isDirty: function() {\n        return this.hud.$body.serialize() !== this.initialData;\n    },\n\n    maybeCloseHud: function(ev) {\n        if (!this.hud || !this.hud.showing) {\n            return;\n        }\n\n        if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n            this.closeHud();\n        }\n    },\n\n    closeHud: function() {\n        if (!this.hud || !this.hud.showing) {\n            return;\n        }\n\n        this.hud.hide();\n        delete this.hud;\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    onShowHud: function() {\n        Garnish.shortcutManager.registerShortcut({\n            keyCode: Garnish.S_KEY,\n            ctrl: true,\n        }, this.saveElement.bind(this));\n        this.settings.onShowHud();\n        this.trigger('showHud');\n    },\n\n    onHideHud: function() {\n        this.settings.onHideHud();\n        this.trigger('hideHud');\n    },\n\n    onBeginLoading: function() {\n        if (this.$element) {\n            this.$element.addClass('loading');\n        }\n\n        this.settings.onBeginLoading();\n        this.trigger('beginLoading');\n    },\n\n    onEndLoading: function() {\n        if (this.$element) {\n            this.$element.removeClass('loading');\n        }\n\n        this.settings.onEndLoading();\n        this.trigger('endLoading');\n    },\n\n    onSaveElement: function(response) {\n        this.settings.onSaveElement(response);\n        this.trigger('saveElement', {\n            response: response\n        });\n\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n    },\n\n    onCreateForm: function($form) {\n        this.settings.onCreateForm($form);\n    }\n}, {\n    defaults: {\n        hudTrigger: null,\n        showSiteSwitcher: true,\n        elementId: null,\n        elementType: null,\n        siteId: null,\n        attributes: null,\n        params: null,\n        prevalidate: false,\n        elementIndex: null,\n\n        onShowHud: $.noop,\n        onHideHud: $.noop,\n        onBeginLoading: $.noop,\n        onEndLoading: $.noop,\n        onCreateForm: $.noop,\n        onSaveElement: $.noop,\n\n        validators: []\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend({\n    initialized: false,\n    elementType: null,\n\n    instanceState: null,\n    sourceStates: null,\n    sourceStatesStorageKey: null,\n\n    searchTimeout: null,\n    sourceSelect: null,\n\n    $container: null,\n    $main: null,\n    isIndexBusy: false,\n\n    $sidebar: null,\n    showingSidebar: null,\n    sourceKey: null,\n    sourceViewModes: null,\n    $source: null,\n    sourcesByKey: null,\n    $visibleSources: null,\n\n    $customizeSourcesBtn: null,\n    customizeSourcesModal: null,\n\n    $toolbar: null,\n    toolbarOffset: null,\n\n    $search: null,\n    searching: false,\n    searchText: null,\n    trashed: false,\n    drafts: false,\n    $clearSearchBtn: null,\n\n    $statusMenuBtn: null,\n    $statusMenuContainer: null,\n    statusMenu: null,\n    status: null,\n\n    $siteMenuBtn: null,\n    siteMenu: null,\n    siteId: null,\n\n    $sortMenuBtn: null,\n    sortMenu: null,\n    $sortAttributesList: null,\n    $sortDirectionsList: null,\n    $scoreSortAttribute: null,\n    $structureSortAttribute: null,\n\n    $elements: null,\n    $viewModeBtnContainer: null,\n    viewModeBtns: null,\n    viewMode: null,\n    view: null,\n    _autoSelectElements: null,\n    $countSpinner: null,\n    $countContainer: null,\n    page: 1,\n    resultSet: null,\n    totalResults: null,\n    $exportBtn: null,\n\n    actions: null,\n    actionsHeadHtml: null,\n    actionsFootHtml: null,\n    $selectAllContainer: null,\n    $selectAllCheckbox: null,\n    showingActionTriggers: false,\n    exporters: null,\n    exportersByType: null,\n    _$detachedToolbarItems: null,\n    _$triggers: null,\n\n    _ignoreFailedRequest: false,\n    _cancelToken: null,\n\n    /**\n     * Constructor\n     */\n    init: function(elementType, $container, settings) {\n        this.elementType = elementType;\n        this.$container = $container;\n        this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n        // Set the state objects\n        // ---------------------------------------------------------------------\n\n        this.instanceState = this.getDefaultInstanceState();\n\n        this.sourceStates = {};\n\n        // Instance states (selected source) are stored by a custom storage key defined in the settings\n        if (this.settings.storageKey) {\n            $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n        }\n\n        // Source states (view mode, etc.) are stored by the element type and context\n        this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n        $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n        // Find the DOM elements\n        // ---------------------------------------------------------------------\n\n        this.$main = this.$container.find('.main');\n        this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n        this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n        this.$statusMenuContainer = this.$statusMenuBtn.parent();\n        this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n        this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n        this.$search = this.$toolbar.find('.search:first input:first');\n        this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n        this.$sidebar = this.$container.find('.sidebar:first');\n        this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n        this.$elements = this.$container.find('.elements:first');\n        this.$countSpinner = this.$container.find('#count-spinner');\n        this.$countContainer = this.$container.find('#count-container');\n        this.$exportBtn = this.$container.find('#export-btn');\n\n        // Hide sidebar if needed\n        if (this.settings.hideSidebar) {\n            this.$sidebar.hide();\n            $('.body, .content', this.$container).removeClass('has-sidebar');\n        }\n\n        // Initialize the sources\n        // ---------------------------------------------------------------------\n\n        if (!this.initSources()) {\n            return;\n        }\n\n        // Customize button\n        if (this.$customizeSourcesBtn.length) {\n            this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n        }\n\n        // Initialize the status menu\n        // ---------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n            this.statusMenu.on('optionselect', this._handleStatusChange.bind(this));\n        }\n\n        // Initialize the site menu\n        // ---------------------------------------------------------------------\n\n        // Is there a site menu?\n        if (this.$siteMenuBtn.length) {\n            this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n            // Figure out the initial site\n            var $option = this.siteMenu.$options.filter('.sel:first');\n\n            if (!$option.length) {\n                $option = this.siteMenu.$options.first();\n            }\n\n            if ($option.length) {\n                this._setSite($option.data('site-id'));\n            } else {\n                // No site options -- they must not have any site permissions\n                this.settings.criteria = {id: '0'};\n            }\n\n            this.siteMenu.on('optionselect', this._handleSiteChange.bind(this));\n\n            if (this.siteId) {\n                // Should we be using a different default site?\n                var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                if (defaultSiteId && defaultSiteId != this.siteId) {\n                    // Is that one available here?\n                    var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                    if ($storedSiteOption.length) {\n                        // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                        $storedSiteOption.trigger('click');\n                    }\n                }\n            }\n        } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n            this._setSite(this.settings.criteria.siteId);\n        } else {\n            this._setSite(Craft.siteId);\n        }\n\n        // Don't let the criteria override the selected site\n        if (this.settings.criteria && this.settings.criteria.siteId) {\n            delete this.settings.criteria.siteId;\n        }\n\n        // Initialize the search input\n        // ---------------------------------------------------------------------\n\n        // Automatically update the elements after new search text has been sitting for a 1/2 second\n        this.addListener(this.$search, 'input', () => {\n            if (!this.searching && this.$search.val()) {\n                this.startSearching();\n            } else if (this.searching && !this.$search.val()) {\n                this.stopSearching();\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.updateElementsIfSearchTextChanged.bind(this), 500);\n        });\n\n        // Update the elements when the Return key is pressed\n        this.addListener(this.$search, 'keypress', ev => {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.updateElementsIfSearchTextChanged();\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearSearchBtn, 'click', () => {\n            this.$search.val('');\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            this.stopSearching();\n\n            this.updateElementsIfSearchTextChanged();\n        });\n\n        // Auto-focus the Search box\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$search.trigger('focus');\n        }\n\n        // Initialize the sort menu\n        // ---------------------------------------------------------------------\n\n        // Is there a sort menu?\n        if (this.$sortMenuBtn.length) {\n            this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n            this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n            this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n            this.sortMenu.on('optionselect', this._handleSortChange.bind(this));\n        }\n\n        // Initialize the Export button\n        // ---------------------------------------------------------------------\n\n        this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n        // Let everyone know that the UI is initialized\n        // ---------------------------------------------------------------------\n\n        this.initialized = true;\n        this.afterInit();\n\n        // Select the initial source\n        // ---------------------------------------------------------------------\n\n        this.selectDefaultSource();\n\n        // Load the first batch of elements!\n        // ---------------------------------------------------------------------\n\n        // Default to whatever page is in the URL\n        this.setPage(Craft.pageNum);\n\n        this.updateElements(true);\n    },\n\n    afterInit: function() {\n        this.onAfterInit();\n    },\n\n    _createCancelToken: function() {\n        this._cancelToken = axios.CancelToken.source();\n        return this._cancelToken.token;\n    },\n\n    _cancelRequests: function() {\n        if (this._cancelToken) {\n            this._ignoreFailedRequest = true;\n            this._cancelToken.cancel();\n            Garnish.requestAnimationFrame(() => {\n                this._ignoreFailedRequest = false;\n            });\n        }\n    },\n\n    getSourceContainer: function() {\n        return this.$sidebar.find('nav > ul');\n    },\n\n    get $sources() {\n        if (!this.sourceSelect) {\n            return undefined;\n        }\n\n        return this.sourceSelect.$items;\n    },\n\n    initSources: function() {\n        var $sources = this._getSourcesInList(this.getSourceContainer());\n\n        // No source, no party.\n        if ($sources.length === 0) {\n            return false;\n        }\n\n        // The source selector\n        if (!this.sourceSelect) {\n            this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                multi: false,\n                allowEmpty: false,\n                vertical: true,\n                onSelectionChange: this._handleSourceSelectionChange.bind(this)\n            });\n        }\n\n        this.sourcesByKey = {};\n        this._initSources($sources);\n\n        return true;\n    },\n\n    selectDefaultSource: function() {\n        var sourceKey = this.getDefaultSourceKey(),\n            $source;\n\n        if (sourceKey) {\n            $source = this.getSourceByKey(sourceKey);\n\n            // Make sure it's visible\n            if (this.$visibleSources.index($source) === -1) {\n                $source = null;\n            }\n        }\n\n        if (!sourceKey || !$source) {\n            // Select the first source by default\n            $source = this.$visibleSources.first();\n        }\n\n        return this.selectSource($source);\n    },\n\n    refreshSources: function() {\n        this.sourceSelect.removeAllItems();\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType\n        };\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n            data: params,\n        }).then((response) => {\n            this.setIndexAvailable();\n            this.getSourceContainer().replaceWith(response.data.html);\n            this.initSources();\n            this.selectDefaultSource();\n        }).catch(() => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    initSource: function($source) {\n        this.sourceSelect.addItems($source);\n        this.initSourceToggle($source);\n        this.sourcesByKey[$source.data('key')] = $source;\n\n        if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n            this._expandSource($source);\n        }\n    },\n\n    initSourceToggle: function($source) {\n        // Remove handlers for the same thing. Just in case.\n        this.deinitSourceToggle($source);\n\n        var $toggle = this._getSourceToggle($source);\n\n        if ($toggle.length) {\n            this.addListener($source, 'dblclick', '_handleSourceDblClick');\n            this.addListener($toggle, 'click', '_handleSourceToggleClick');\n            $source.data('hasNestedSources', true);\n        } else {\n            $source.data('hasNestedSources', false);\n        }\n    },\n\n    deinitSource: function($source) {\n        this.sourceSelect.removeItems($source);\n        this.deinitSourceToggle($source);\n        delete this.sourcesByKey[$source.data('key')];\n    },\n\n    deinitSourceToggle: function($source) {\n        if ($source.data('hasNestedSources')) {\n            this.removeListener($source, 'dblclick');\n            this.removeListener(this._getSourceToggle($source), 'click');\n        }\n\n        $source.removeData('hasNestedSources');\n    },\n\n    getDefaultInstanceState: function() {\n        return {\n            selectedSource: null,\n            expandedSources: []\n        };\n    },\n\n    getDefaultSourceKey: function() {\n        if (this.settings.defaultSource) {\n            var paths = this.settings.defaultSource.split('/'),\n                path = '';\n\n            // Expand the tree\n            for (var i = 0; i < paths.length; i++) {\n                path += paths[i];\n                var $source = this.getSourceByKey(path);\n\n                // If the folder can't be found, then just go to the stored instance source.\n                if (!$source) {\n                    return this.instanceState.selectedSource;\n                }\n\n                this._expandSource($source);\n                path += '/';\n            }\n\n            // Just make sure that the modal is aware of the newly expanded sources, too.\n            this._setSite(this.siteId);\n\n            return this.settings.defaultSource;\n        }\n\n        return this.instanceState.selectedSource;\n    },\n\n    getDefaultExpandedSources: function() {\n        return this.instanceState.expandedSources;\n    },\n\n    startSearching: function() {\n        // Show the clear button and add/select the Score sort option\n        this.$clearSearchBtn.removeClass('hidden');\n\n        if (!this.$scoreSortAttribute) {\n            this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n            this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n        }\n\n        this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n        this.searching = true;\n\n        this._updateStructureSortOption();\n        this.setSortAttribute('score');\n    },\n\n    stopSearching: function() {\n        // Hide the clear button and Score sort option\n        this.$clearSearchBtn.addClass('hidden');\n\n        this.$scoreSortAttribute.detach();\n\n        this.searching = false;\n\n        this._updateStructureSortOption();\n    },\n\n    setInstanceState: function(key, value) {\n        if (typeof key === 'object') {\n            $.extend(this.instanceState, key);\n        } else {\n            this.instanceState[key] = value;\n        }\n\n        this.storeInstanceState();\n    },\n\n    storeInstanceState: function() {\n        if (this.settings.storageKey) {\n            Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n        }\n    },\n\n    getSourceState: function(source, key, defaultValue) {\n        if (typeof this.sourceStates[source] === 'undefined') {\n            // Set it now so any modifications to it by whoever's calling this will be stored.\n            this.sourceStates[source] = {};\n        }\n\n        if (typeof key === 'undefined') {\n            return this.sourceStates[source];\n        } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n            return this.sourceStates[source][key];\n        } else {\n            return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n        }\n    },\n\n    getSelectedSourceState: function(key, defaultValue) {\n        return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n    },\n\n    setSelecetedSourceState: function(key, value) {\n        var viewState = this.getSelectedSourceState();\n\n        if (typeof key === 'object') {\n            $.extend(viewState, key);\n        } else {\n            viewState[key] = value;\n        }\n\n        this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n        // Store it in localStorage too\n        Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n    },\n\n    storeSortAttributeAndDirection: function() {\n        var attr = this.getSelectedSortAttribute();\n\n        if (attr !== 'score') {\n            this.setSelecetedSourceState({\n                order: attr,\n                sort: this.getSelectedSortDirection()\n            });\n        }\n    },\n\n    /**\n     * Sets the page number.\n     */\n    setPage: function(page) {\n        if (this.settings.context !== 'index') {\n            return;\n        }\n\n        page = Math.max(page, 1);\n        this.page = page;\n\n        // Update the URL\n        var url = document.location.href\n            .replace(/\\?.*$/, '')\n            .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n            .replace(/\\/+$/, '');\n\n        if (this.page !== 1) {\n            if (Craft.pageTrigger[0] !== '?') {\n                url += '/';\n            }\n            url += Craft.pageTrigger + this.page;\n        }\n\n        history.replaceState({}, '', url);\n    },\n\n    _resetCount: function() {\n        this.resultSet = null;\n        this.totalResults = null;\n    },\n\n    /**\n     * Returns the data that should be passed to the elementIndex/getElements controller action\n     * when loading elements.\n     */\n    getViewParams: function() {\n        var criteria = {\n            siteId: this.siteId,\n            search: this.searchText,\n            offset: this.settings.batchSize * (this.page - 1),\n            limit: this.settings.batchSize,\n        };\n\n        // Only set drafts/draftOf/trashed params when needed, so we don't potentially override a source's criteria\n        if (\n            this.settings.canHaveDrafts &&\n            (this.drafts || (this.settings.context === 'index' && !this.status))\n        ) {\n            criteria.drafts = this.drafts || null;\n            criteria.savedDraftsOnly = true;\n            if (!this.drafts) {\n                criteria.draftOf = false;\n            }\n        }\n        if (this.trashed) {\n            criteria.trashed = true;\n        }\n\n        if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n            criteria.status = this.status;\n        }\n\n        $.extend(criteria, this.settings.criteria);\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType,\n            source: this.instanceState.selectedSource,\n            criteria: criteria,\n            disabledElementIds: this.settings.disabledElementIds,\n            viewState: $.extend({}, this.getSelectedSourceState()),\n            paginated: this._isViewPaginated() ? 1 : 0,\n        };\n\n        // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n        params.viewState.order = this.getSelectedSortAttribute();\n        params.viewState.sort = this.getSelectedSortDirection();\n\n        if (this.getSelectedSortAttribute() === 'structure') {\n            if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                this.instanceState.collapsedElementIds = [];\n            }\n            params.collapsedElementIds = this.instanceState.collapsedElementIds;\n        }\n\n        // Give plugins a chance to hook in here\n        this.trigger('registerViewParams', {\n            params: params,\n        });\n\n        return params;\n    },\n\n    updateElements: function(preservePagination) {\n        // Ignore if we're not fully initialized yet\n        if (!this.initialized) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        this.setIndexBusy();\n\n        // Kill the old view class\n        if (this.view) {\n            this.view.destroy();\n            delete this.view;\n        }\n\n        if (preservePagination !== true) {\n            this.setPage(1);\n            this._resetCount();\n        }\n\n        var params = this.getViewParams();\n\n        Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n            data: params,\n            cancelToken: this._createCancelToken(),\n        }).then((response) => {\n            this.setIndexAvailable();\n            (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n            this._updateView(params, response.data);\n        }).catch(e => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    updateElementsIfSearchTextChanged: function() {\n        if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n            this.updateElements();\n        }\n    },\n\n    showActionTriggers: function() {\n        // Ignore if they're already shown\n        if (this.showingActionTriggers) {\n            return;\n        }\n\n        // Hard-code the min toolbar height in case it was taller than the actions toolbar\n        // (prevents the elements from jumping if this ends up being a double-click)\n        this.$toolbar.css('min-height', this.$toolbar.height());\n\n        // Hide any toolbar inputs\n        this._$detachedToolbarItems = this.$toolbar.children();\n        this._$detachedToolbarItems.detach();\n\n        if (!this._$triggers) {\n            this._createTriggers();\n        } else {\n            this._$triggers.appendTo(this.$toolbar);\n        }\n\n        this.showingActionTriggers = true;\n    },\n\n    submitAction: function(action, actionParams) {\n        // Make sure something's selected\n        var selectedElementIds = this.view.getSelectedElementIds(),\n            totalSelected = selectedElementIds.length;\n\n        if (totalSelected === 0) {\n            return;\n        }\n\n        if (typeof action === 'string') {\n            action = this._findAction(action);\n        }\n\n        if (action.confirm && !confirm(action.confirm)) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        // Get ready to submit\n        var viewParams = this.getViewParams();\n\n        actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n        var params = $.extend(viewParams, action.settings || {}, actionParams, {\n            elementAction: action.type,\n            elementIds: selectedElementIds\n        });\n\n        // Do it\n        this.setIndexBusy();\n        this._autoSelectElements = selectedElementIds;\n\n        if (action.download) {\n            if (Craft.csrfTokenName) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n            Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                this.setIndexAvailable();\n            }).catch(e => {\n                this.setIndexAvailable();\n            });\n        } else {\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        }\n    },\n\n    _findAction: function(actionClass) {\n        for (var i = 0; i < this.actions.length; i++) {\n            if (this.actions[i].type === actionClass) {\n                return this.actions[i];\n            }\n        }\n        throw `Invalid element action: ${actionClass}`;\n    },\n\n    afterAction: function(action, params) {\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n\n        this.onAfterAction(action, params);\n    },\n\n    hideActionTriggers: function() {\n        // Ignore if there aren't any\n        if (!this.showingActionTriggers) {\n            return;\n        }\n\n        this._$detachedToolbarItems.appendTo(this.$toolbar);\n        this._$triggers.detach();\n        // this._$detachedToolbarItems.removeClass('hidden');\n\n        // Unset the min toolbar height\n        this.$toolbar.css('min-height', '');\n\n        this.showingActionTriggers = false;\n    },\n\n    updateActionTriggers: function() {\n        // Do we have an action UI to update?\n        if (this.actions) {\n            var totalSelected = this.view.getSelectedElements().length;\n\n            if (totalSelected !== 0) {\n                if (totalSelected === this.view.getEnabledElements().length) {\n                    this.$selectAllCheckbox.removeClass('indeterminate');\n                    this.$selectAllCheckbox.addClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'true');\n                } else {\n                    this.$selectAllCheckbox.addClass('indeterminate');\n                    this.$selectAllCheckbox.removeClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'mixed');\n                }\n\n                this.showActionTriggers();\n            } else {\n                this.$selectAllCheckbox.removeClass('indeterminate checked');\n                this.$selectAllContainer.attr('aria-checked', 'false');\n                this.hideActionTriggers();\n            }\n        }\n    },\n\n    getSelectedElements: function() {\n        return this.view ? this.view.getSelectedElements() : $();\n    },\n\n    getSelectedElementIds: function() {\n        return this.view ? this.view.getSelectedElementIds() : [];\n    },\n\n    setStatus: function(status) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n        if ($option.length) {\n            this.statusMenu.selectOption($option[0]);\n        }\n    },\n\n    getSortAttributeOption: function(attr) {\n        return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n    },\n\n    getSelectedSortAttribute: function() {\n        return this.$sortAttributesList.find('a.sel:first').data('attr');\n    },\n\n    setSortAttribute: function(attr) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.getSortAttributeOption(attr);\n\n        if ($option.length) {\n            this.$sortAttributesList.find('a.sel').removeClass('sel');\n            $option.addClass('sel');\n\n            var label = $option.text();\n            this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n            this.$sortMenuBtn.text(label);\n\n            if (attr === 'score') {\n                this.setSortDirection('desc');\n            } else {\n                this.setSortDirection($option.data('default-dir') || 'asc');\n            }\n\n            if (attr === 'structure') {\n                this.$sortDirectionsList.find('a').addClass('disabled');\n            } else {\n                this.$sortDirectionsList.find('a').removeClass('disabled');\n            }\n        }\n    },\n\n    getSortDirectionOption: function(dir) {\n        return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n    },\n\n    getSelectedSortDirection: function() {\n        return this.$sortDirectionsList.find('a.sel:first').data('dir');\n    },\n\n    getSelectedViewMode: function() {\n        return this.getSelectedSourceState('mode') || 'table';\n    },\n\n    setSortDirection: function(dir) {\n        if (dir !== 'desc') {\n            dir = 'asc';\n        }\n\n        this.$sortMenuBtn.attr('data-icon', dir);\n        this.$sortDirectionsList.find('a.sel').removeClass('sel');\n        this.getSortDirectionOption(dir).addClass('sel');\n    },\n\n    getSourceByKey: function(key) {\n        if (typeof this.sourcesByKey[key] === 'undefined') {\n            return null;\n        }\n\n        return this.sourcesByKey[key];\n    },\n\n    selectSource: function($source) {\n        if (!$source || !$source.length) {\n            return false;\n        }\n\n        if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n            return false;\n        }\n\n        // Hide action triggers if they're currently being shown\n        this.hideActionTriggers();\n\n        this.$source = $source;\n        this.sourceKey = $source.data('key');\n        this.setInstanceState('selectedSource', this.sourceKey);\n        this.sourceSelect.selectItem($source);\n\n        Craft.cp.updateSidebarMenuLabel();\n\n        if (this.searching) {\n            // Clear the search value without causing it to update elements\n            this.searchText = null;\n            this.$search.val('');\n            this.stopSearching();\n        }\n\n        // Sort menu\n        // ----------------------------------------------------------------------\n\n        // Remove any existing custom sort options from the menu\n        this.$sortAttributesList.children('li[data-extra]').remove();\n\n        // Does this source have any custom sort options?\n        let sortOptions = this.$source.data('sort-options')\n        if (sortOptions) {\n            for (let i = 0; i < sortOptions.length; i++) {\n                let $option = $('<li/>', {\n                    'data-extra': true,\n                })\n                    .append(\n                        $('<a/>', {\n                            text: sortOptions[i][0],\n                            'data-attr': sortOptions[i][1],\n                        })\n                    )\n                    .appendTo(this.$sortAttributesList);\n                this.sortMenu.addOptions($option.children());\n            }\n        }\n\n        // Does this source have a structure?\n        if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n            if (!this.$structureSortAttribute) {\n                this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                this.sortMenu.addOptions(this.$structureSortAttribute.children());\n            }\n\n            this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n        } else if (this.$structureSortAttribute) {\n            this.$structureSortAttribute.removeClass('sel').detach();\n        }\n\n        this.setStoredSortOptionsForSource();\n\n        // Status menu\n        // ----------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                this.$statusMenuContainer.addClass('hidden');\n            } else {\n                this.$statusMenuContainer.removeClass('hidden');\n            }\n\n            if (this.trashed) {\n                // Swap to the initial status\n                var $firstOption = this.statusMenu.$options.first();\n                this.setStatus($firstOption.data('status'));\n            }\n        }\n\n        // View mode buttons\n        // ----------------------------------------------------------------------\n\n        // Clear out any previous view mode data\n        if (this.$viewModeBtnContainer) {\n            this.$viewModeBtnContainer.remove();\n        }\n\n        this.viewModeBtns = {};\n        this.viewMode = null;\n\n        // Get the new list of view modes\n        this.sourceViewModes = this.getViewModesForSource();\n\n        // Create the buttons if there's more than one mode available to this source\n        if (this.sourceViewModes.length > 1) {\n            this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                let sourceViewMode = this.sourceViewModes[i];\n\n                let $viewModeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                    'data-view': sourceViewMode.mode,\n                    'data-icon': sourceViewMode.icon,\n                    'aria-label': sourceViewMode.title,\n                    title: sourceViewMode.title,\n                }).appendTo(this.$viewModeBtnContainer);\n\n                this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                    this.selectViewMode(ev.data.mode);\n                    this.updateElements();\n                });\n            }\n        }\n\n        // Figure out which mode we should start with\n        var viewMode = this.getSelectedViewMode();\n\n        if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n            // Try to keep using the current view mode\n            if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                viewMode = this.viewMode;\n            }\n            // Just use the first one\n            else {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n        }\n\n        this.selectViewMode(viewMode);\n\n        this.onSelectSource();\n\n        return true;\n    },\n\n    selectSourceByKey: function(key) {\n        var $source = this.getSourceByKey(key);\n\n        if ($source) {\n            return this.selectSource($source);\n        } else {\n            return false;\n        }\n    },\n\n    setStoredSortOptionsForSource: function() {\n        var sortAttr = this.getSelectedSourceState('order'),\n            sortDir = this.getSelectedSourceState('sort');\n\n        if (!sortAttr || !sortDir) {\n            // Get the default\n            sortAttr = this.getDefaultSort();\n\n            if (Garnish.isArray(sortAttr)) {\n                sortDir = sortAttr[1];\n                sortAttr = sortAttr[0];\n            }\n        }\n\n        if (sortDir !== 'asc' && sortDir !== 'desc') {\n            sortDir = 'asc';\n        }\n\n        this.setSortAttribute(sortAttr);\n        this.setSortDirection(sortDir);\n    },\n\n    getDefaultSort: function() {\n        // Does the source specify what to do?\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n            return this.$source.attr('data-default-sort').split(':');\n        } else {\n            // Default to whatever's first\n            return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n        }\n    },\n\n    getViewModesForSource: function() {\n        var viewModes = [\n            {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n        ];\n\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n            viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n        }\n\n        return viewModes;\n    },\n\n    doesSourceHaveViewMode: function(viewMode) {\n        for (var i = 0; i < this.sourceViewModes.length; i++) {\n            if (this.sourceViewModes[i].mode === viewMode) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    selectViewMode: function(viewMode, force) {\n        // Make sure that the current source supports it\n        if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n            viewMode = this.sourceViewModes[0].mode;\n        }\n\n        // Has anything changed?\n        if (viewMode === this.viewMode) {\n            return;\n        }\n\n        // Deselect the previous view mode\n        if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].removeClass('active');\n        }\n\n        this.viewMode = viewMode;\n        this.setSelecetedSourceState('mode', this.viewMode);\n\n        if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].addClass('active');\n        }\n    },\n\n    createView: function(mode, settings) {\n        var viewClass = this.getViewClass(mode);\n        return new viewClass(this, this.$elements, settings);\n    },\n\n    getViewClass: function(mode) {\n        switch (mode) {\n            case 'table':\n                return Craft.TableElementIndexView;\n            case 'thumbs':\n                return Craft.ThumbsElementIndexView;\n            default:\n                throw `View mode \"${mode}\" not supported.`;\n        }\n    },\n\n    rememberDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index === -1) {\n            this.settings.disabledElementIds.push(id);\n        }\n    },\n\n    forgetDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index !== -1) {\n            this.settings.disabledElementIds.splice(index, 1);\n        }\n    },\n\n    enableElements: function($elements) {\n        $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.forgetDisabledElementId(id);\n        }\n\n        this.onEnableElements($elements);\n    },\n\n    disableElements: function($elements) {\n        $elements.removeClass('sel').addClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.rememberDisabledElementId(id);\n        }\n\n        this.onDisableElements($elements);\n    },\n\n    getElementById: function(id) {\n        return this.view.getElementById(id);\n    },\n\n    enableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.enableElements($element);\n            } else {\n                this.forgetDisabledElementId(id);\n            }\n        }\n    },\n\n    disableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.disableElements($element);\n            } else {\n                this.rememberDisabledElementId(id);\n            }\n        }\n    },\n\n    selectElementAfterUpdate: function(id) {\n        if (this._autoSelectElements === null) {\n            this._autoSelectElements = [];\n        }\n\n        this._autoSelectElements.push(id);\n    },\n\n    addButton: function($button) {\n        this.getButtonContainer().append($button);\n    },\n\n    isShowingSidebar: function() {\n        if (this.showingSidebar === null) {\n            this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n        }\n\n        return this.showingSidebar;\n    },\n\n    getButtonContainer: function() {\n        // Is there a predesignated place where buttons should go?\n        if (this.settings.buttonContainer) {\n            return $(this.settings.buttonContainer);\n        } else {\n            var $container = $('#action-button');\n\n            if (!$container.length) {\n                $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n            }\n\n            return $container;\n        }\n    },\n\n    setIndexBusy: function() {\n        this.$elements.addClass('busy');\n        this.isIndexBusy = true;\n    },\n\n    setIndexAvailable: function() {\n        this.$elements.removeClass('busy');\n        this.isIndexBusy = false;\n    },\n\n    createCustomizeSourcesModal: function() {\n        // Recreate it each time\n        var modal = new Craft.CustomizeSourcesModal(this, {\n            onHide: function() {\n                modal.destroy();\n            }\n        });\n\n        return modal;\n    },\n\n    disable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.disable();\n        }\n\n        if (this.view) {\n            this.view.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.enable();\n        }\n\n        if (this.view) {\n            this.view.enable();\n        }\n\n        this.base();\n    },\n\n    onAfterInit: function() {\n        this.settings.onAfterInit();\n        this.trigger('afterInit');\n    },\n\n    onSelectSource: function() {\n        this.settings.onSelectSource(this.sourceKey);\n        this.trigger('selectSource', {sourceKey: this.sourceKey});\n    },\n\n    onSelectSite: function() {\n        this.settings.onSelectSite(this.siteId);\n        this.trigger('selectSite', {siteId: this.siteId});\n    },\n\n    onUpdateElements: function() {\n        this.settings.onUpdateElements();\n        this.trigger('updateElements');\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    onEnableElements: function($elements) {\n        this.settings.onEnableElements($elements);\n        this.trigger('enableElements', {elements: $elements});\n    },\n\n    onDisableElements: function($elements) {\n        this.settings.onDisableElements($elements);\n        this.trigger('disableElements', {elements: $elements});\n    },\n\n    onAfterAction: function(action, params) {\n        this.settings.onAfterAction(action, params);\n        this.trigger('afterAction', {action: action, params: params});\n    },\n\n    // UI state handlers\n    // -------------------------------------------------------------------------\n\n    _handleSourceSelectionChange: function() {\n        // If the selected source was just removed (maybe because its parent was collapsed),\n        // there won't be a selected source\n        if (!this.sourceSelect.totalSelected) {\n            this.sourceSelect.selectItem(this.$visibleSources.first());\n            return;\n        }\n\n        if (this.selectSource(this.sourceSelect.$selectedItems)) {\n            this.updateElements();\n        }\n    },\n\n    _handleActionTriggerSubmit: function(ev) {\n        ev.preventDefault();\n\n        var $form = $(ev.currentTarget);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($form.data('action'), Garnish.getPostData($form));\n    },\n\n    _handleMenuActionTriggerSubmit: function(ev) {\n        var $option = $(ev.option);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($option.data('action'));\n    },\n\n    _handleStatusChange: function(ev) {\n        this.statusMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$statusMenuBtn.html($option.html());\n\n        this.trashed = false;\n        this.drafts = false;\n        this.status = null;\n\n        if (Garnish.hasAttr($option, 'data-trashed')) {\n            this.trashed = true;\n        } else if (Garnish.hasAttr($option, 'data-drafts')) {\n            this.drafts = true;\n        } else {\n            this.status = $option.data('status');\n        }\n\n        this._updateStructureSortOption();\n        this.updateElements();\n    },\n\n    _handleSiteChange: function(ev) {\n        this.siteMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$siteMenuBtn.html($option.html());\n        this._setSite($option.data('site-id'));\n        this.onSelectSite();\n    },\n\n    _setSite: function(siteId) {\n        let firstSite = this.siteId === null;\n        this.siteId = siteId;\n        this.$visibleSources = $();\n\n        // Hide any sources that aren't available for this site\n        var $firstVisibleSource;\n        var $source;\n        // Select a new source automatically if a site is already selected, but we don't have a selected source\n        // (or if the currently selected source ends up not supporting the new site)\n        var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n        for (var i = 0; i < this.$sources.length; i++) {\n            $source = this.$sources.eq(i);\n            if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                $source.parent().removeClass('hidden');\n                this.$visibleSources = this.$visibleSources.add($source);\n                if (!$firstVisibleSource) {\n                    $firstVisibleSource = $source;\n                }\n            } else {\n                $source.parent().addClass('hidden');\n\n                // Is this the currently selected source?\n                if (this.$source && this.$source.get(0) == $source.get(0)) {\n                    selectNewSource = true;\n                }\n            }\n        }\n\n        if (this.initialized && selectNewSource) {\n            this.selectSource($firstVisibleSource);\n        }\n\n        // Hide any empty-nester headings\n        var $headings = this.getSourceContainer().children('.heading');\n        var $heading;\n\n        for (i = 0; i < $headings.length; i++) {\n            $heading = $headings.eq(i);\n            if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                $heading.removeClass('hidden');\n            } else {\n                $heading.addClass('hidden');\n            }\n        }\n\n        if (this.initialized) {\n            if (this.settings.context === 'index') {\n                // Remember this site for later\n                Craft.cp.setSiteId(siteId);\n            }\n\n            // Update the elements\n            this.updateElements();\n        }\n    },\n\n    _handleSortChange: function(ev) {\n        var $option = $(ev.selectedOption);\n\n        if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n            return;\n        }\n\n        // Is this an attribute or a direction?\n        if ($option.parent().parent().is(this.$sortAttributesList)) {\n            this.setSortAttribute($option.data('attr'));\n        } else {\n            this.setSortDirection($option.data('dir'));\n        }\n\n        this.storeSortAttributeAndDirection();\n        this.updateElements();\n    },\n\n    _handleSelectionChange: function() {\n        this.updateActionTriggers();\n        this.onSelectionChange();\n    },\n\n    _handleSourceDblClick: function(ev) {\n        this._toggleSource($(ev.currentTarget));\n        ev.stopPropagation();\n    },\n\n    _handleSourceToggleClick: function(ev) {\n        this._toggleSource($(ev.currentTarget).prev('a'));\n        ev.stopPropagation();\n    },\n\n    _updateStructureSortOption: function() {\n        var $option = this.getSortAttributeOption('structure');\n\n        if (!$option.length) {\n            return;\n        }\n\n        if (this.trashed || this.drafts || this.searching) {\n            $option.addClass('disabled');\n            if (this.getSelectedSortAttribute() === 'structure') {\n                // Temporarily set the sort to the first option\n                var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                this.setSortAttribute($firstOption.data('attr'));\n                this.setSortDirection('asc');\n            }\n        } else {\n            $option.removeClass('disabled');\n            this.setStoredSortOptionsForSource();\n        }\n    },\n\n    // Source managemnet\n    // -------------------------------------------------------------------------\n\n    _getSourcesInList: function($list) {\n        return $list.children('li').children('a');\n    },\n\n    _getChildSources: function($source) {\n        var $list = $source.siblings('ul');\n        return this._getSourcesInList($list);\n    },\n\n    _getSourceToggle: function($source) {\n        return $source.siblings('.toggle');\n    },\n\n    _initSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.initSource($($sources[i]));\n        }\n    },\n\n    _deinitSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.deinitSource($($sources[i]));\n        }\n    },\n\n    _toggleSource: function($source) {\n        if ($source.parent('li').hasClass('expanded')) {\n            this._collapseSource($source);\n        } else {\n            this._expandSource($source);\n        }\n    },\n\n    _expandSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'true',\n            'aria-label': Craft.t('app', 'Hide nested sources'),\n        });\n        $source.parent('li').addClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._initSources($childSources);\n\n        var key = $source.data('key');\n        if (this.instanceState.expandedSources.indexOf(key) === -1) {\n            this.instanceState.expandedSources.push(key);\n            this.storeInstanceState();\n        }\n    },\n\n    _collapseSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'false',\n            'aria-label': Craft.t('app', 'Show nested sources'),\n        });\n        $source.parent('li').removeClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._deinitSources($childSources);\n\n        var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n        if (i !== -1) {\n            this.instanceState.expandedSources.splice(i, 1);\n            this.storeInstanceState();\n        }\n    },\n\n    // View\n    // -------------------------------------------------------------------------\n\n    _isViewPaginated: function() {\n        return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n    },\n\n    _updateView: function(params, response) {\n        // Cleanup\n        // -------------------------------------------------------------\n\n        // Get rid of the old action triggers regardless of whether the new batch has actions or not\n        if (this.actions) {\n            this.hideActionTriggers();\n            this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n        }\n\n        // Update the count text\n        // -------------------------------------------------------------\n\n        if (this.$countContainer.length) {\n            this.$countSpinner.removeClass('hidden');\n            this.$countContainer.html('');\n\n            this._countResults()\n                .then((total) => {\n                    this.$countSpinner.addClass('hidden');\n\n                    let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                    let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                    if (!this._isViewPaginated()) {\n                        let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n                        this.$countContainer.text(countLabel);\n                    } else {\n                        let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                        let last = Math.min(first + (this.settings.batchSize - 1), total);\n                        let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            first: first,\n                            last: last,\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n\n                        let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                        let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                        let $prevBtn = $('<div/>', {\n                            'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                            title: Craft.t('app', 'Previous Page')\n                        }).appendTo($paginationContainer);\n                        let $nextBtn = $('<div/>', {\n                            'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                            title: Craft.t('app', 'Next Page')\n                        }).appendTo($paginationContainer);\n\n                        $('<div/>', {\n                            'class': 'page-info',\n                            text: countLabel\n                        }).appendTo($paginationContainer);\n\n                        if (this.page > 1) {\n                            this.addListener($prevBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page - 1);\n                                this.updateElements(true);\n                            });\n                        }\n\n                        if (this.page < totalPages) {\n                            this.addListener($nextBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page + 1);\n                                this.updateElements(true);\n                            });\n                        }\n                    }\n                })\n                .catch(() => {\n                    this.$countSpinner.addClass('hidden');\n                });\n        }\n\n        // Update the view with the new container + elements HTML\n        // -------------------------------------------------------------\n\n        this.$elements.html(response.html);\n        Craft.appendHeadHtml(response.headHtml);\n        Craft.appendFootHtml(response.footHtml);\n\n        // Batch actions setup\n        // -------------------------------------------------------------\n\n        this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n        if (response.actions && response.actions.length) {\n            if (this.$selectAllContainer.length) {\n                this.actions = response.actions;\n                this.actionsHeadHtml = response.actionsHeadHtml;\n                this.actionsFootHtml = response.actionsFootHtml;\n\n                // Create the select all checkbox\n                this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                this.$selectAllContainer.attr({\n                    'role': 'checkbox',\n                    'tabindex': '0',\n                    'aria-checked': 'false',\n                    'aria-label': Craft.t('app', 'Select all'),\n                });\n\n                this.addListener(this.$selectAllContainer, 'click', function() {\n                    if (this.view.getSelectedElements().length === 0) {\n                        this.view.selectAllElements();\n                    } else {\n                        this.view.deselectAllElements();\n                    }\n                });\n\n                this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                    if (ev.keyCode === Garnish.SPACE_KEY) {\n                        ev.preventDefault();\n\n                        $(ev.currentTarget).trigger('click');\n                    }\n                });\n            }\n        } else {\n            if (!this.$selectAllContainer.siblings().length) {\n                this.$selectAllContainer.parent('.header').remove();\n            }\n            this.$selectAllContainer.remove();\n        }\n\n        // Exporters setup\n        // -------------------------------------------------------------\n\n        this.exporters = response.exporters;\n        this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n        if (this.exporters && this.exporters.length) {\n            this.$exportBtn.removeClass('hidden');\n        } else {\n            this.$exportBtn.addClass('hidden');\n        }\n\n        // Create the view\n        // -------------------------------------------------------------\n\n        // Should we make the view selectable?\n        var selectable = (this.actions || this.settings.selectable);\n\n        this.view = this.createView(this.getSelectedViewMode(), {\n            context: this.settings.context,\n            batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n            params: params,\n            selectable: selectable,\n            multiSelect: (this.actions || this.settings.multiSelect),\n            checkboxMode: !!this.actions,\n            onSelectionChange: this._handleSelectionChange.bind(this)\n        });\n\n        // Auto-select elements\n        // -------------------------------------------------------------\n\n        if (this._autoSelectElements) {\n            if (selectable) {\n                for (var i = 0; i < this._autoSelectElements.length; i++) {\n                    this.view.selectElementById(this._autoSelectElements[i]);\n                }\n            }\n\n            this._autoSelectElements = null;\n        }\n\n        // Trigger the event\n        // -------------------------------------------------------------\n\n        this.onUpdateElements();\n    },\n\n    _countResults: function() {\n        return new Promise((resolve, reject) => {\n            if (this.totalResults !== null) {\n                resolve(this.totalResults);\n            } else {\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                // Make sure we've got an active result set ID\n                if (this.resultSet === null) {\n                    this.resultSet = Math.floor(Math.random() * 100000000);\n                }\n                params.resultSet = this.resultSet;\n\n                Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    if (response.data.resultSet == this.resultSet) {\n                        this.totalResults = response.data.count;\n                        resolve(response.data.count);\n                    } else {\n                        reject();\n                    }\n                }).catch(reject);\n            }\n        });\n    },\n\n    _createTriggers: function() {\n        var triggers = [],\n            safeMenuActions = [],\n            destructiveMenuActions = [];\n\n        var i;\n\n        for (i = 0; i < this.actions.length; i++) {\n            var action = this.actions[i];\n\n            if (action.trigger) {\n                var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                    .data('action', action)\n                    .append(action.trigger);\n\n                this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                triggers.push($form);\n            } else {\n                if (!action.destructive) {\n                    safeMenuActions.push(action);\n                } else {\n                    destructiveMenuActions.push(action);\n                }\n            }\n        }\n\n        var $btn;\n\n        if (safeMenuActions.length || destructiveMenuActions.length) {\n            var $menuTrigger = $('<form/>');\n\n            $btn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn',\n                'data-icon': 'settings',\n                title: Craft.t('app', 'Actions'),\n            }).appendTo($menuTrigger);\n\n            var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n            if ($safeList) {\n                $safeList.appendTo($menu);\n            }\n\n            if ($safeList && $destructiveList) {\n                $('<hr/>').appendTo($menu);\n            }\n\n            if ($destructiveList) {\n                $destructiveList.appendTo($menu);\n            }\n\n            triggers.push($menuTrigger);\n        }\n\n        this._$triggers = $();\n\n        for (i = 0; i < triggers.length; i++) {\n            var $div = $('<div/>').append(triggers[i]);\n            this._$triggers = this._$triggers.add($div);\n        }\n\n        this._$triggers.appendTo(this.$toolbar);\n        Craft.appendHeadHtml(this.actionsHeadHtml);\n        Craft.appendFootHtml(this.actionsFootHtml);\n\n        Craft.initUiElements(this._$triggers);\n\n        if ($btn) {\n            $btn.data('menubtn').on('optionSelect', this._handleMenuActionTriggerSubmit.bind(this));\n        }\n    },\n\n    _showExportHud: function() {\n        this.$exportBtn.addClass('active');\n\n        var $form = $('<form/>', {\n            'class': 'export-form'\n        });\n\n        var typeOptions = [];\n        for (var i = 0; i < this.exporters.length; i++) {\n            typeOptions.push({label: this.exporters[i].name, value: this.exporters[i].type});\n        }\n        var $typeField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Export Type'),\n            options: typeOptions,\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        var $formatField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Format'),\n            options: [\n                {label: 'CSV', value: 'csv'}, {label: 'JSON', value: 'json'}, {label: 'XML', value: 'xml'},\n            ],\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        let $typeSelect = $typeField.find('select');\n        this.addListener($typeSelect, 'change', () => {\n            let type = $typeSelect.val();\n            if (this.exportersByType[type].formattable) {\n                $formatField.removeClass('hidden');\n            } else {\n                $formatField.addClass('hidden');\n            }\n        });\n        $typeSelect.trigger('change');\n\n        // Only show the Limit field if there aren't any selected elements\n        var selectedElementIds = this.view.getSelectedElementIds();\n\n        if (!selectedElementIds.length) {\n            var $limitField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Limit'),\n                placeholder: Craft.t('app', 'No limit'),\n                type: 'number',\n                min: 1\n            }).appendTo($form);\n        }\n\n        $('<button/>', {\n            type: 'submit',\n            'class': 'btn submit fullwidth',\n            text: Craft.t('app', 'Export')\n        }).appendTo($form)\n\n        var $spinner = $('<div/>', {\n            'class': 'spinner hidden'\n        }).appendTo($form);\n\n        var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n        hud.on('hide', () => {\n            this.$exportBtn.removeClass('active');\n        });\n\n        var submitting = false;\n\n        this.addListener($form, 'submit', function(ev) {\n            ev.preventDefault();\n            if (submitting) {\n                return;\n            }\n\n            submitting = true;\n            $spinner.removeClass('hidden');\n\n            var params = this.getViewParams();\n            delete params.criteria.offset;\n            delete params.criteria.limit;\n\n            params.type = $typeField.find('select').val();\n            params.format = $formatField.find('select').val();\n\n            if (selectedElementIds.length) {\n                params.criteria.id = selectedElementIds;\n            } else {\n                var limit = parseInt($limitField.find('input').val());\n                if (limit && !isNaN(limit)) {\n                    params.criteria.limit = limit;\n                }\n            }\n\n            if (Craft.csrfTokenValue) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                .then(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                })\n                .catch(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                });\n        });\n    },\n\n    _createMenuTriggerList: function(actions, destructive) {\n        if (actions && actions.length) {\n            var $ul = $('<ul/>');\n\n            for (var i = 0; i < actions.length; i++) {\n                $('<li/>').append($('<a/>', {\n                    id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                    'class': (destructive ? 'error' : null),\n                    data: {\n                        action: actions[i],\n                    },\n                    text: actions[i].name\n                })).appendTo($ul);\n            }\n\n            return $ul;\n        }\n    }\n}, {\n    defaults: {\n        context: 'index',\n        modal: null,\n        storageKey: null,\n        criteria: null,\n        batchSize: 100,\n        disabledElementIds: [],\n        selectable: false,\n        multiSelect: false,\n        buttonContainer: null,\n        hideSidebar: false,\n        toolbarSelector: '.toolbar:first',\n        refreshSourcesAction: 'element-indexes/get-source-tree-html',\n        updateElementsAction: 'element-indexes/get-elements',\n        countElementsAction: 'element-indexes/count-elements',\n        submitActionsAction: 'element-indexes/perform-action',\n        defaultSiteId: null,\n        defaultSource: null,\n        canHaveDrafts: false,\n\n        onAfterInit: $.noop,\n        onSelectSource: $.noop,\n        onSelectSite: $.noop,\n        onUpdateElements: $.noop,\n        onSelectionChange: $.noop,\n        onEnableElements: $.noop,\n        onDisableElements: $.noop,\n        onAfterAction: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend({\n    $container: null,\n    $loadingMoreSpinner: null,\n    $elementContainer: null,\n    $scroller: null,\n\n    elementIndex: null,\n    thumbLoader: null,\n    elementSelect: null,\n\n    loadingMore: false,\n\n    _totalVisible: null,\n    _morePending: null,\n    _handleEnableElements: null,\n    _handleDisableElements: null,\n\n    init: function(elementIndex, container, settings) {\n        this.elementIndex = elementIndex;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n        // Create a \"loading-more\" spinner\n        this.$loadingMoreSpinner = $(\n            '<div class=\"centeralign hidden\">' +\n            '<div class=\"spinner loadingmore\"></div>' +\n            '</div>'\n        ).insertAfter(this.$container);\n\n        // Get the actual elements container and its child elements\n        this.$elementContainer = this.getElementContainer();\n        var $elements = this.$elementContainer.children();\n\n        this.setTotalVisible($elements.length);\n        this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n        // Instantiate the thumb loader\n        this.thumbLoader = new Craft.ElementThumbLoader();\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select(\n                this.$elementContainer,\n                $elements.filter(':not(.disabled)'),\n                {\n                    multi: this.settings.multiSelect,\n                    vertical: this.isVerticalList(),\n                    handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                    filter: ':not(a):not(.toggle)',\n                    checkboxMode: this.settings.checkboxMode,\n                    onSelectionChange: this.onSelectionChange.bind(this)\n                });\n\n            this._handleEnableElements = ev => {\n                this.elementSelect.addItems(ev.elements);\n            };\n\n            this._handleDisableElements = ev => {\n                this.elementSelect.removeItems(ev.elements);\n            };\n\n            this.elementIndex.on('enableElements', this._handleEnableElements);\n            this.elementIndex.on('disableElements', this._handleDisableElements);\n        }\n\n        // Enable inline element editing if this is an index page\n        if (this.settings.context === 'index') {\n            this._handleElementEditing = ev => {\n                var $target = $(ev.target);\n\n                if ($target.prop('nodeName') === 'A') {\n                    // Let the link do its thing\n                    return;\n                }\n\n                var $element;\n\n                if ($target.hasClass('element')) {\n                    $element = $target;\n                } else {\n                    $element = $target.closest('.element');\n\n                    if (!$element.length) {\n                        return;\n                    }\n                }\n\n                if (Garnish.hasAttr($element, 'data-editable')) {\n                    this.createElementEditor($element);\n                }\n            };\n\n            if (!this.elementIndex.trashed) {\n                this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                if ($.isTouchCapable()) {\n                    this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                }\n            }\n        }\n\n        // Give sub-classes a chance to do post-initialization stuff here\n        this.afterInit();\n\n        // Set up lazy-loading\n        if (this.settings.batchSize) {\n            if (this.settings.context === 'index') {\n                this.$scroller = Garnish.$scrollContainer;\n            } else {\n                this.$scroller = this.elementIndex.$main;\n            }\n\n            this.$scroller.scrollTop(0);\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }\n    },\n\n    getElementContainer: function() {\n        throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n    },\n\n    afterInit: function() {\n    },\n\n    getAllElements: function() {\n        return this.$elementContainer.children();\n    },\n\n    getEnabledElements: function() {\n        return this.$elementContainer.children(':not(.disabled)');\n    },\n\n    getElementById: function(id) {\n        var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n        if ($element.length) {\n            return $element;\n        } else {\n            return null;\n        }\n    },\n\n    getSelectedElements: function() {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        return this.elementSelect.$selectedItems;\n    },\n\n    getSelectedElementIds: function() {\n        let $selectedElements;\n        try {\n            $selectedElements = this.getSelectedElements();\n        } catch (e) {\n        }\n\n        let ids = [];\n        if ($selectedElements) {\n            for (var i = 0; i < $selectedElements.length; i++) {\n                ids.push($selectedElements.eq(i).data('id'));\n            }\n        }\n        return ids;\n    },\n\n    selectElement: function($element) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        this.elementSelect.selectItem($element, true);\n        return true;\n    },\n\n    selectElementById: function(id) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        var $element = this.getElementById(id);\n\n        if ($element) {\n            this.elementSelect.selectItem($element, true);\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    selectAllElements: function() {\n        this.elementSelect.selectAll();\n    },\n\n    deselectAllElements: function() {\n        this.elementSelect.deselectAll();\n    },\n\n    isVerticalList: function() {\n        return false;\n    },\n\n    getTotalVisible: function() {\n        return this._totalVisible;\n    },\n\n    setTotalVisible: function(totalVisible) {\n        this._totalVisible = totalVisible;\n    },\n\n    getMorePending: function() {\n        return this._morePending;\n    },\n\n    setMorePending: function(morePending) {\n        this._morePending = morePending;\n    },\n\n    /**\n     * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n     */\n    maybeLoadMore: function() {\n        if (this.canLoadMore()) {\n            this.loadMore();\n        }\n    },\n\n    /**\n     * Returns whether the user has reached the bottom of the scroll area.\n     */\n    canLoadMore: function() {\n        if (!this.getMorePending() || !this.settings.batchSize) {\n            return false;\n        }\n\n        // Check if the user has reached the bottom of the scroll area\n        var containerHeight;\n\n        if (this.$scroller[0] === Garnish.$win[0]) {\n            var winHeight = Garnish.$win.innerHeight(),\n                winScrollTop = Garnish.$win.scrollTop(),\n                containerOffset = this.$container.offset().top;\n            containerHeight = this.$container.height();\n\n            return (winHeight + winScrollTop >= containerOffset + containerHeight);\n        } else {\n            var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                containerScrollTop = this.$scroller.scrollTop();\n            containerHeight = this.$scroller.outerHeight();\n\n            return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n        }\n    },\n\n    /**\n     * Loads the next batch of elements.\n     */\n    loadMore: function() {\n        if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n            return;\n        }\n\n        this.loadingMore = true;\n        this.$loadingMoreSpinner.removeClass('hidden');\n        this.removeListener(this.$scroller, 'scroll');\n\n        var data = this.getLoadMoreParams();\n\n        Craft.postActionRequest(this.settings.loadMoreElementsAction, data, (response, textStatus) => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                var $newElements = $(response.html);\n\n                this.appendElements($newElements);\n                Craft.appendHeadHtml(response.headHtml);\n                Craft.appendFootHtml(response.footHtml);\n\n                if (this.elementSelect) {\n                    this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                    this.elementIndex.updateActionTriggers();\n                }\n\n                this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n                this.setMorePending($newElements.length == this.settings.batchSize);\n\n                // Is there room to load more right now?\n                this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                this.maybeLoadMore();\n            }\n        });\n    },\n\n    getLoadMoreParams: function() {\n        // Use the same params that were passed when initializing this view\n        var params = $.extend(true, {}, this.settings.params);\n        params.criteria.offset = this.getTotalVisible();\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        $newElements.appendTo(this.$elementContainer);\n        this.thumbLoader.load($newElements);\n        this.onAppendElements($newElements);\n    },\n\n    onAppendElements: function($newElements) {\n        this.settings.onAppendElements($newElements);\n        this.trigger('appendElements', {\n            newElements: $newElements\n        });\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            elementIndex: this.elementIndex\n        });\n    },\n\n    disable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.disable();\n        }\n    },\n\n    enable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.enable();\n        }\n    },\n\n    destroy: function() {\n        // Remove the \"loading-more\" spinner, since we added that outside of the view container\n        this.$loadingMoreSpinner.remove();\n\n        // Kill the thumb loader\n        this.thumbLoader.destroy();\n        delete this.thumbLoader;\n\n        // Delete the element select\n        if (this.elementSelect) {\n            this.elementIndex.off('enableElements', this._handleEnableElements);\n            this.elementIndex.off('disableElements', this._handleDisableElements);\n\n            this.elementSelect.destroy();\n            delete this.elementSelect;\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        context: 'index',\n        batchSize: null,\n        params: null,\n        selectable: false,\n        multiSelect: false,\n        checkboxMode: false,\n        loadMoreElementsAction: 'element-indexes/get-more-elements',\n        onAppendElements: $.noop,\n        onSelectionChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend({\n    thumbLoader: null,\n    elementSelect: null,\n    elementSort: null,\n    modal: null,\n    elementEditor: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addElementBtn: null,\n    $addElementBtnContainer: null,\n\n    _initialized: false,\n\n    init: function(settings) {\n        // Normalize the settings and set them\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n        // Apply the storage key prefix\n        if (this.settings.modalStorageKey) {\n            this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n        }\n\n        // No reason for this to be sortable if we're only allowing 1 selection\n        if (this.settings.limit == 1) {\n            this.settings.sortable = false;\n        }\n\n        this.$container = this.getContainer();\n\n        // Store a reference to this class\n        this.$container.data('elementSelect', this);\n\n        this.$elementsContainer = this.getElementsContainer();\n\n        this.$addElementBtn = this.getAddElementsBtn();\n        if (this.$addElementBtn) {\n            this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n            if (!this.$addElementBtnContainer.length) {\n                this.$addElementBtnContainer = null;\n            }\n        }\n\n        this.thumbLoader = new Craft.ElementThumbLoader();\n\n        this.initElementSelect();\n        this.initElementSort();\n        this.resetElements();\n\n        if (this.$addElementBtn) {\n            this.addListener(this.$addElementBtn, 'activate', 'showModal');\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            this._initialized = true;\n        });\n    },\n\n    get totalSelected() {\n        return this.$elements.length;\n    },\n\n    getContainer: function() {\n        return $('#' + this.settings.id);\n    },\n\n    getElementsContainer: function() {\n        return this.$container.children('.elements');\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.children();\n    },\n\n    getAddElementsBtn: function() {\n        return this.$container.find('.btn.add:first');\n    },\n\n    initElementSelect: function() {\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select({\n                multi: this.settings.sortable,\n                filter: ':not(.delete)'\n            });\n        }\n    },\n\n    initElementSort: function() {\n        if (this.settings.sortable) {\n            this.elementSort = new Garnish.DragSort({\n                container: this.$elementsContainer,\n                filter: (this.settings.selectable ? () => {\n                    // Only return all the selected items if the target item is selected\n                    if (this.elementSort.$targetItem.hasClass('sel')) {\n                        return this.elementSelect.getSelectedItems();\n                    } else {\n                        return this.elementSort.$targetItem;\n                    }\n                } : null),\n                ignoreHandleSelector: '.delete',\n                axis: this.getElementSortAxis(),\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                onSortChange: (this.settings.selectable ? () => {\n                    this.elementSelect.resetItemOrder();\n                } : null)\n            });\n        }\n    },\n\n    getElementSortAxis: function() {\n        return (this.settings.viewMode === 'list' ? 'y' : null);\n    },\n\n    canAddMoreElements: function() {\n        return (!this.settings.limit || this.$elements.length < this.settings.limit);\n    },\n\n    updateAddElementsBtn: function() {\n        if (this.canAddMoreElements()) {\n            this.enableAddElementsBtn();\n        } else {\n            this.disableAddElementsBtn();\n        }\n    },\n\n    disableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.addClass('hidden');\n        }\n    },\n\n    enableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.removeClass('hidden');\n        }\n    },\n\n    resetElements: function() {\n        if (this.$elements !== null) {\n            this.removeElements(this.$elements);\n        } else {\n            this.$elements = $();\n        }\n\n        this.addElements(this.getElements());\n    },\n\n    addElements: function($elements) {\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect.addItems($elements);\n        }\n\n        if (this.settings.sortable) {\n            this.elementSort.addItems($elements);\n        }\n\n        if (this.settings.editable) {\n            this._handleShowElementEditor = ev => {\n                var $element = $(ev.currentTarget);\n                if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                    this.elementEditor = this.createElementEditor($element);\n                }\n            };\n\n            this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n            if ($.isTouchCapable()) {\n                this.addListener($elements, 'taphold', this._handleShowElementEditor);\n            }\n        }\n\n        $elements.find('.delete').on('click dblclick', ev => {\n            this.removeElement($(ev.currentTarget).closest('.element'));\n            // Prevent this from acting as one of a double-click\n            ev.stopPropagation();\n        });\n\n        this.$elements = this.$elements.add($elements);\n        this.updateAddElementsBtn();\n    },\n\n    createElementEditor: function($element, settings) {\n        if (!settings) {\n            settings = {};\n        }\n        settings.prevalidate = this.settings.prevalidate;\n        return Craft.createElementEditor(this.settings.elementType, $element, settings);\n    },\n\n    removeElements: function($elements) {\n        if (this.settings.selectable) {\n            this.elementSelect.removeItems($elements);\n        }\n\n        if (this.modal) {\n            var ids = [];\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $elements.eq(i).data('id');\n\n                if (id) {\n                    ids.push(id);\n                }\n            }\n\n            if (ids.length) {\n                this.modal.elementIndex.enableElementsById(ids);\n            }\n        }\n\n        // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n        $elements.children('input').prop('disabled', true);\n\n        this.$elements = this.$elements.not($elements);\n        this.updateAddElementsBtn();\n\n        this.onRemoveElements();\n    },\n\n    removeElement: function($element) {\n        this.removeElements($element);\n        this.animateElementAway($element, () => {\n            $element.remove();\n        });\n    },\n\n    animateElementAway: function($element, callback) {\n        $element.css('z-index', 0);\n\n        var animateCss = {\n            opacity: -1\n        };\n        animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n        if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n            animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n        }\n\n        // Pause the draft editor\n        if (window.draftEditor) {\n            window.draftEditor.pause();\n        }\n\n        $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n            callback();\n\n            // Resume the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.resume();\n            }\n        });\n    },\n\n    showModal: function() {\n        // Make sure we haven't reached the limit\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        if (!this.modal) {\n            this.modal = this.createModal();\n        } else {\n            this.modal.show();\n        }\n    },\n\n    createModal: function() {\n        return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n    },\n\n    getModalSettings: function() {\n        return $.extend({\n            closeOtherModals: false,\n            storageKey: this.modalStorageKey,\n            sources: this.settings.sources,\n            criteria: this.settings.criteria,\n            multiSelect: (this.settings.limit != 1),\n            showSiteMenu: this.settings.showSiteMenu,\n            disabledElementIds: this.getDisabledElementIds(),\n            onSelect: this.onModalSelect.bind(this)\n        }, this.settings.modalSettings);\n    },\n\n    getSelectedElementIds: function() {\n        var ids = [];\n\n        for (var i = 0; i < this.$elements.length; i++) {\n            ids.push(this.$elements.eq(i).data('id'));\n        }\n\n        return ids;\n    },\n\n    getDisabledElementIds: function() {\n        var ids = this.getSelectedElementIds();\n\n        if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n            ids.push(this.settings.sourceElementId);\n        }\n\n        if (this.settings.disabledElementIds) {\n            ids.push(...this.settings.disabledElementIds);\n        }\n\n        return ids;\n    },\n\n    onModalSelect: function(elements) {\n        if (this.settings.limit) {\n            // Cut off any excess elements\n            var slotsLeft = this.settings.limit - this.$elements.length;\n\n            if (elements.length > slotsLeft) {\n                elements = elements.slice(0, slotsLeft);\n            }\n        }\n\n        this.selectElements(elements);\n        this.updateDisabledElementsInModal();\n    },\n\n    selectElements: function(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            let elementInfo = elements[i],\n                $element = this.createNewElement(elementInfo);\n\n            this.appendElement($element);\n            this.addElements($element);\n            this.animateElementIntoPlace(elementInfo.$element, $element);\n\n            // Override the element reference with the new one\n            elementInfo.$element = $element;\n        }\n\n        this.onSelectElements(elements);\n    },\n\n    createNewElement: function(elementInfo) {\n        var $element = elementInfo.$element.clone();\n\n        // Make a couple tweaks\n        Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n        $element.addClass('removable');\n        $element.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + elementInfo.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        return $element;\n    },\n\n    appendElement: function($element) {\n        $element.appendTo(this.$elementsContainer);\n    },\n\n    animateElementIntoPlace: function($modalElement, $inputElement) {\n        var origOffset = $modalElement.offset(),\n            destOffset = $inputElement.offset(),\n            $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n        $inputElement.css('visibility', 'hidden');\n\n        $helper.css({\n            position: 'absolute',\n            zIndex: 10000,\n            top: origOffset.top,\n            left: origOffset.left\n        });\n\n        var animateCss = {\n            top: destOffset.top,\n            left: destOffset.left\n        };\n\n        $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n            $helper.remove();\n            $inputElement.css('visibility', 'visible');\n        });\n    },\n\n    updateDisabledElementsInModal: function() {\n        if (this.modal.elementIndex) {\n            this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n        }\n    },\n\n    getElementById: function(id) {\n        for (var i = 0; i < this.$elements.length; i++) {\n            var $element = this.$elements.eq(i);\n\n            if ($element.data('id') == id) {\n                return $element;\n            }\n        }\n    },\n\n    onSelectElements: function(elements) {\n        this.trigger('selectElements', {elements});\n        this.settings.onSelectElements(elements);\n\n        if (window.draftEditor) {\n            window.draftEditor.checkForm();\n        }\n    },\n\n    onRemoveElements: function() {\n        this.trigger('removeElements');\n        this.settings.onRemoveElements();\n    }\n}, {\n    ADD_FX_DURATION: 200,\n    REMOVE_FX_DURATION: 200,\n\n    defaults: {\n        id: null,\n        name: null,\n        fieldId: null,\n        elementType: null,\n        sources: null,\n        criteria: {},\n        allowSelfRelations: false,\n        sourceElementId: null,\n        disabledElementIds: null,\n        viewMode: 'list',\n        limit: null,\n        showSiteMenu: false,\n        modalStorageKey: null,\n        modalSettings: {},\n        onSelectElements: $.noop,\n        onRemoveElements: $.noop,\n        sortable: true,\n        selectable: true,\n        editable: true,\n        prevalidate: false,\n        editorSettings: {}\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend({\n    elementType: null,\n    elementIndex: null,\n\n    $body: null,\n    $selectBtn: null,\n    $sidebar: null,\n    $sources: null,\n    $sourceToggles: null,\n    $main: null,\n    $search: null,\n    $elements: null,\n    $tbody: null,\n    $primaryButtons: null,\n    $secondaryButtons: null,\n    $cancelBtn: null,\n    $footerSpinner: null,\n\n    init: function(elementType, settings) {\n        this.elementType = elementType;\n        this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n        // Build the modal\n        var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n            $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n            $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n        this.base($container, this.settings);\n\n        this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n        this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$primaryButtons);\n        this.$selectBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn disabled submit',\n            text: Craft.t('app', 'Select'),\n        }).appendTo(this.$primaryButtons);\n\n        this.$body = $body;\n\n        this.addListener(this.$cancelBtn, 'activate', 'cancel');\n        this.addListener(this.$selectBtn, 'activate', 'selectElements');\n    },\n\n    onFadeIn: function() {\n        if (!this.elementIndex) {\n            this._createElementIndex();\n        } else {\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.elementIndex.$search.trigger('focus');\n            }\n        }\n\n        this.base();\n    },\n\n    onSelectionChange: function() {\n        this.updateSelectBtnState();\n    },\n\n    updateSelectBtnState: function() {\n        if (this.$selectBtn) {\n            if (this.elementIndex.getSelectedElements().length) {\n                this.enableSelectBtn();\n            } else {\n                this.disableSelectBtn();\n            }\n        }\n    },\n\n    enableSelectBtn: function() {\n        this.$selectBtn.removeClass('disabled');\n    },\n\n    disableSelectBtn: function() {\n        this.$selectBtn.addClass('disabled');\n    },\n\n    enableCancelBtn: function() {\n        this.$cancelBtn.removeClass('disabled');\n    },\n\n    disableCancelBtn: function() {\n        this.$cancelBtn.addClass('disabled');\n    },\n\n    showFooterSpinner: function() {\n        this.$footerSpinner.removeClass('hidden');\n    },\n\n    hideFooterSpinner: function() {\n        this.$footerSpinner.addClass('hidden');\n    },\n\n    cancel: function() {\n        if (!this.$cancelBtn.hasClass('disabled')) {\n            this.hide();\n        }\n    },\n\n    selectElements: function() {\n        if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n            // TODO: This code shouldn't know about views' elementSelect objects\n            this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                elementInfo = this.getElementInfo($selectedElements);\n\n            this.onSelect(elementInfo);\n\n            if (this.settings.disableElementsOnSelect) {\n                this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n            }\n\n            if (this.settings.hideOnSelect) {\n                this.hide();\n            }\n        }\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $element = $($selectedElements[i]);\n            var elementInfo = Craft.getElementInfo($element);\n\n            info.push(elementInfo);\n        }\n\n        return info;\n    },\n\n    show: function() {\n        this.updateSelectBtnState();\n        this.base();\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo);\n    },\n\n    disable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.enable();\n        }\n\n        this.base();\n    },\n\n    _createElementIndex: function() {\n        // Get the modal body HTML based on the settings\n        var data = {\n            context: 'modal',\n            elementType: this.elementType,\n            sources: this.settings.sources\n        };\n\n        if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n            data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n        }\n\n        Craft.postActionRequest('elements/get-modal-body', data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.$body.html(response.html);\n\n                if (this.$body.has('.sidebar:not(.hidden)').length) {\n                    this.$body.addClass('has-sidebar');\n                }\n\n                // Initialize the element index\n                this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                    context: 'modal',\n                    modal: this,\n                    storageKey: this.settings.storageKey,\n                    criteria: this.settings.criteria,\n                    disabledElementIds: this.settings.disabledElementIds,\n                    selectable: true,\n                    multiSelect: this.settings.multiSelect,\n                    buttonContainer: this.$secondaryButtons,\n                    onSelectionChange: this.onSelectionChange.bind(this),\n                    hideSidebar: this.settings.hideSidebar,\n                    defaultSiteId: this.settings.defaultSiteId,\n                    defaultSource: this.settings.defaultSource\n                });\n\n                // Double-clicking or double-tapping should select the elements\n                this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                    // Make sure the touch targets are the same\n                    // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                    if (touchData.firstTap.target === touchData.secondTap.target) {\n                        this.selectElements();\n                    }\n                });\n            }\n        });\n    }\n}, {\n    defaults: {\n        resizable: true,\n        storageKey: null,\n        sources: null,\n        criteria: null,\n        multiSelect: false,\n        showSiteMenu: null,\n        disabledElementIds: [],\n        disableElementsOnSelect: false,\n        hideOnSelect: true,\n        onCancel: $.noop,\n        onSelect: $.noop,\n        hideSidebar: false,\n        defaultSiteId: null,\n        defaultSource: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend({\n    $source: null,\n    $target: null,\n    $form: null,\n    settings: null,\n\n    listening: null,\n    timeout: null,\n\n    init: function(source, target, settings) {\n        this.$source = $(source);\n        this.$target = $(target);\n        this.$form = this.$source.closest('form');\n\n        this.setSettings(settings);\n\n        this.startListening();\n    },\n\n    setNewSource: function(source) {\n        var listening = this.listening;\n        this.stopListening();\n\n        this.$source = $(source);\n\n        if (listening) {\n            this.startListening();\n        }\n    },\n\n    startListening: function() {\n        if (this.listening) {\n            return;\n        }\n\n        this.listening = true;\n\n        this.addListener(this.$source, 'input', 'onSourceTextChange');\n        this.addListener(this.$target, 'input', 'onTargetTextChange');\n        this.addListener(this.$form, 'submit', 'onFormSubmit');\n    },\n\n    stopListening: function() {\n        if (!this.listening) {\n            return;\n        }\n\n        this.listening = false;\n\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.removeAllListeners(this.$source);\n        this.removeAllListeners(this.$target);\n        this.removeAllListeners(this.$form);\n    },\n\n    onSourceTextChange: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout(this.updateTarget.bind(this), 250);\n    },\n\n    onTargetTextChange: function() {\n        if (this.$target.get(0) === document.activeElement) {\n            this.stopListening();\n        }\n    },\n\n    onFormSubmit: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.updateTarget();\n    },\n\n    updateTarget: function() {\n        if (!this.$target.is(':visible')) {\n            return;\n        }\n\n        var sourceVal = this.$source.val();\n\n        if (typeof sourceVal === 'undefined') {\n            // The source input may not exist anymore\n            return;\n        }\n\n        var targetVal = this.generateTargetValue(sourceVal);\n\n        this.$target.val(targetVal);\n\n        for (let i = 0; i < this.$target.length; i++) {\n            this.$target[i].dispatchEvent(new InputEvent('input', {\n                inputType: 'insertText',\n            }));\n            this.$target[i].dispatchEvent(new Event('input'));\n        }\n\n        // If the target already has focus, select its whole value to mimic\n        // the behavior if the value had already been generated and they just tabbed in\n        if (this.$target.is(':focus')) {\n            Craft.selectFullValue(this.$target);\n        }\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return sourceVal;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend({\n    settings: null,\n    totalItems: null,\n    sorter: null,\n\n    $noItems: null,\n    $table: null,\n    $tbody: null,\n    $deleteBtns: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.AdminTable.defaults);\n\n        if (!this.settings.allowDeleteAll) {\n            this.settings.minItems = 1;\n        }\n\n        this.$noItems = $(this.settings.noItemsSelector);\n        this.$table = $(this.settings.tableSelector);\n        this.$tbody = this.$table.children('tbody');\n        this.totalItems = this.$tbody.children().length;\n\n        if (this.settings.sortable) {\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                onSortChange: this.reorderItems.bind(this),\n            });\n        }\n\n        this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n        this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n        this.updateUI();\n    },\n\n    addRow: function(row) {\n        if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(row).appendTo(this.$tbody),\n            $deleteBtn = $row.find('.delete');\n\n        if (this.settings.sortable) {\n            this.sorter.addItems($row);\n        }\n\n        this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n        this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n        this.totalItems++;\n\n        this.updateUI();\n    },\n\n    reorderItems: function() {\n        if (!this.settings.sortable) {\n            return;\n        }\n\n        // Get the new field order\n        var ids = [];\n\n        for (var i = 0; i < this.sorter.$items.length; i++) {\n            var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n            ids.push(id);\n        }\n\n        // Send it to the server\n        var data = {\n            ids: JSON.stringify(ids)\n        };\n\n        Craft.postActionRequest(this.settings.reorderAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.onReorderItems(ids);\n                    Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                } else {\n                    Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                }\n            }\n        });\n    },\n\n    handleDeleteBtnClick: function(event) {\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(event.target).closest('tr');\n\n        if (this.confirmDeleteItem($row)) {\n            this.deleteItem($row);\n        }\n    },\n\n    confirmDeleteItem: function($row) {\n        var name = this.getItemName($row);\n        return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name}));\n    },\n\n    deleteItem: function($row) {\n        var data = {\n            id: this.getItemId($row)\n        };\n\n        Craft.postActionRequest(this.settings.deleteAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.handleDeleteItemResponse(response, $row);\n            }\n        });\n    },\n\n    handleDeleteItemResponse: function(response, $row) {\n        var id = this.getItemId($row),\n            name = this.getItemName($row);\n\n        if (response.success) {\n            if (this.sorter) {\n                this.sorter.removeItems($row);\n            }\n\n            $row.remove();\n            this.totalItems--;\n            this.updateUI();\n            this.onDeleteItem(id);\n\n            Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name}));\n        } else {\n            Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name}));\n        }\n    },\n\n    onReorderItems: function(ids) {\n        this.settings.onReorderItems(ids);\n    },\n\n    onDeleteItem: function(id) {\n        this.settings.onDeleteItem(id);\n    },\n\n    getItemId: function($row) {\n        return $row.attr(this.settings.idAttribute);\n    },\n\n    getItemName: function($row) {\n        return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n    },\n\n    updateUI: function() {\n        // Show the \"No Whatever Exists\" message if there aren't any\n        if (this.totalItems === 0) {\n            this.$table.hide();\n            this.$noItems.removeClass('hidden');\n        } else {\n            this.$table.show();\n            this.$noItems.addClass('hidden');\n        }\n\n        // Disable the sort buttons if there's only one row\n        if (this.settings.sortable) {\n            var $moveButtons = this.$table.find('.move');\n\n            if (this.totalItems === 1) {\n                $moveButtons.addClass('disabled');\n            } else {\n                $moveButtons.removeClass('disabled');\n            }\n        }\n\n        // Disable the delete buttons if we've reached the minimum items\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            this.$deleteBtns.addClass('disabled');\n        } else {\n            this.$deleteBtns.removeClass('disabled');\n        }\n\n        // Hide the New Whatever button if we've reached the maximum items\n        if (this.settings.newItemBtnSelector) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                $(this.settings.newItemBtnSelector).addClass('hidden');\n            } else {\n                $(this.settings.newItemBtnSelector).removeClass('hidden');\n            }\n        }\n    }\n}, {\n    defaults: {\n        tableSelector: null,\n        noItemsSelector: null,\n        newItemBtnSelector: null,\n        idAttribute: 'data-id',\n        nameAttribute: 'data-name',\n        sortable: false,\n        allowDeleteAll: true,\n        minItems: 0,\n        maxItems: null,\n        reorderAction: null,\n        deleteAction: null,\n        reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n        reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n        confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n        deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n        deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n        onReorderItems: $.noop,\n        onDeleteItem: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend({\n    reloadIndex: false,\n\n    updateForm: function(response, refreshInitialData) {\n        this.base(response, refreshInitialData);\n\n        if (this.$element.data('id')) {\n            var $imageEditorTrigger = this.$fieldsContainer.find('> .meta > .preview-thumb-container.editable');\n\n            if ($imageEditorTrigger.length) {\n                this.addListener($imageEditorTrigger, 'click', 'showImageEditor');\n            }\n        }\n    },\n\n    showImageEditor: function() {\n        new Craft.AssetImageEditor(this.$element.data('id'), {\n            onSave: () => {\n                this.reloadIndex = true;\n                this.reloadForm();\n            },\n        });\n    },\n\n    onHideHud: function() {\n        if (this.reloadIndex && this.settings.elementIndex) {\n            this.settings.elementIndex.updateElements();\n        } else if (this.reloadIndex && this.settings.input) {\n            this.settings.input.refreshThumbnail(this.$element.data('id'));\n        }\n\n        this.base();\n    }\n});\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend({\n    // jQuery objects\n    $body: null,\n    $footer: null,\n    $imageTools: null,\n    $buttons: null,\n    $cancelBtn: null,\n    $replaceBtn: null,\n    $saveBtn: null,\n    $editorContainer: null,\n    $straighten: null,\n    $croppingCanvas: null,\n    $spinnerCanvas: null,\n\n    // FabricJS objects\n    canvas: null,\n    image: null,\n    viewport: null,\n    focalPoint: null,\n    grid: null,\n    croppingCanvas: null,\n    clipper: null,\n    croppingRectangle: null,\n    cropperHandles: null,\n    cropperGrid: null,\n    croppingShade: null,\n    croppingAreaText: null,\n\n    // Image state attributes\n    imageStraightenAngle: 0,\n    viewportRotation: 0,\n    originalWidth: 0,\n    originalHeight: 0,\n    imageVerticeCoords: null,\n    zoomRatio: 1,\n\n    // Editor state attributes\n    animationInProgress: false,\n    currentView: '',\n    assetId: null,\n    cacheBust: null,\n    draggingCropper: false,\n    scalingCropper: false,\n    draggingFocal: false,\n    previousMouseX: 0,\n    previousMouseY: 0,\n    shiftKeyHeld: false,\n    editorHeight: 0,\n    editorWidth: 0,\n    cropperState: false,\n    scaleFactor: 1,\n    flipData: {},\n    focalPointState: false,\n    spinnerInterval: null,\n    maxImageSize: null,\n    lastLoadedDimensions: null,\n    imageIsLoading: false,\n    mouseMoveEvent: null,\n    croppingConstraint: false,\n    constraintOrientation: 'landscape',\n    showingCustomConstraint: false,\n\n    // Rendering proxy functions\n    renderImage: null,\n    renderCropper: null,\n\n    init: function(assetId, settings) {\n        this.cacheBust = Date.now();\n\n        this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n        if (this.settings.allowDegreeFractions === null) {\n            this.settings.allowDegreeFractions = Craft.isImagick;\n        }\n\n        this.assetId = assetId;\n        this.flipData = {x: 0, y: 0};\n\n        // Build the modal\n        this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n        this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n        this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n        this.base(this.$container, this.settings);\n\n        this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn cancel',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$buttons);\n        this.$replaceBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit save replace',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$buttons);\n\n        if (this.settings.allowSavingAsNew) {\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save copy',\n                text: Craft.t('app', 'Save as a new asset'),\n            }).appendTo(this.$buttons);\n            this.addListener(this.$saveBtn, 'activate', this.saveImage);\n        }\n\n        this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n        this.addListener(this.$cancelBtn, 'activate', this.hide);\n        this.removeListener(this.$shade, 'click');\n\n        this.maxImageSize = this.getMaxImageSize();\n\n        Craft.postActionRequest('assets/image-editor', {assetId}, this.loadEditor.bind(this));\n    },\n\n    /**\n     * Get the max image size that is viewable in the editor currently\n     */\n    getMaxImageSize: function() {\n        var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n        var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n        return Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n    },\n\n    /**\n     * Load the editor markup and start loading components and the image.\n     *\n     * @param data\n     */\n    loadEditor: function(data) {\n        if (!data.html) {\n            alert(Craft.t('app', 'Could not load the image editor.'));\n        }\n\n        this.$body.html(data.html);\n        this.$tabs = $('.tabs li', this.$body);\n        this.$viewsContainer = $('.views', this.$body);\n        this.$views = $('> div', this.$viewsContainer);\n        this.$imageTools = $('.image-container .image-tools', this.$body);\n        this.$editorContainer = $('.image-container .image', this.$body);\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this._showSpinner();\n\n        this.updateSizeAndPosition();\n\n        // Load the canvas on which we'll host our image and set up the proxy render function\n        this.canvas = new fabric.StaticCanvas('image-canvas');\n\n        // Set up the cropping canvas jquery element for tracking all the nice events\n        this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n        this.$croppingCanvas.width(this.editorWidth);\n        this.$croppingCanvas.height(this.editorHeight);\n\n        this.canvas.enableRetinaScaling = true;\n        this.renderImage = () => {\n            Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n        };\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        // Load image and set up the initial properties\n        fabric.Image.fromURL(imageUrl, imageObject => {\n            this.image = imageObject;\n            this.image.set({\n                originX: 'center',\n                originY: 'center',\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n            this.canvas.add(this.image);\n\n            this.originalHeight = this.image.getHeight();\n            this.originalWidth = this.image.getWidth();\n            this.zoomRatio = 1;\n\n            this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n            // Set up the image bounding box, viewport and position everything\n            this._setFittedImageVerticeCoordinates();\n            this._repositionEditorElements();\n\n            // Set up the focal point\n            var focalState = {\n                imageDimensions: this.getScaledImageDimensions(),\n                offsetX: 0,\n                offsetY: 0\n            };\n\n            var focal = false;\n            if (data.focalPoint) {\n                // Transform the focal point coordinates from relative to absolute\n                var focalData = data.focalPoint;\n\n                // Resolve for the current image dimensions.\n                var adjustedX = focalState.imageDimensions.width * focalData.x;\n                var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                focal = true;\n            }\n\n            this.storeFocalPointState(focalState);\n\n            if (focal) {\n                this._createFocalPoint();\n            }\n\n            this._createViewport();\n            this.storeCropperState();\n\n            // Add listeners to buttons\n            this._addControlListeners();\n\n            // Add mouse event listeners\n            this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n            this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n            this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n            this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n            this._hideSpinner();\n\n            // Render it, finally\n            this.renderImage();\n\n            // Make sure verything gets fired for the first tab\n            this.$tabs.first().trigger('click');\n        });\n    },\n\n    /**\n     * Reload the image to better fit the current available image editor viewport.\n     */\n    _reloadImage: function() {\n        if (this.imageIsLoading) {\n            return;\n        }\n\n        this.imageIsLoading = true;\n        this.maxImageSize = this.getMaxImageSize();\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        this.image.setSrc(imageUrl, imageObject => {\n            this.originalHeight = imageObject.getHeight();\n            this.originalWidth = imageObject.getWidth();\n            this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n            this.updateSizeAndPosition();\n            this.renderImage();\n            this.imageIsLoading = false;\n        });\n    },\n\n    /**\n     * Update the modal size and position on browser resize\n     */\n    updateSizeAndPosition: function() {\n        if (!this.$container) {\n            return;\n        }\n\n        // Fullscreen modal\n        var innerWidth = window.innerWidth;\n        var innerHeight = window.innerHeight;\n\n        this.$container.css({\n            'width': innerWidth,\n            'min-width': innerWidth,\n            'left': 0,\n\n            'height': innerHeight,\n            'min-height': innerHeight,\n            'top': 0\n        });\n\n        this.$body.css({\n            'height': innerHeight - 62\n        });\n\n        if (innerWidth < innerHeight) {\n            this.$container.addClass('vertical');\n        } else {\n            this.$container.removeClass('vertical');\n        }\n\n        if (this.$spinnerCanvas) {\n            this.$spinnerCanvas.css({\n                left: ((this.$spinnerCanvas.parent().width() / 2) - (this.$spinnerCanvas.width() / 2)) + 'px',\n                top: ((this.$spinnerCanvas.parent().height() / 2) - (this.$spinnerCanvas.height() / 2)) + 'px'\n            });\n        }\n\n        // If image is already loaded, make sure it looks pretty.\n        if (this.$editorContainer && this.image) {\n            this._repositionEditorElements();\n        }\n    },\n\n    /**\n     * Reposition the editor elements to accurately reflect the editor state with current dimensions\n     */\n    _repositionEditorElements: function() {\n        // Remember what the dimensions were before the resize took place\n        var previousEditorDimensions = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this.canvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        var currentScaledDimensions = this.getScaledImageDimensions();\n\n        // If we're cropping now, we have to reposition the cropper correctly in case\n        // the area for image changes, forcing the image size to change as well.\n        if (this.currentView === 'crop') {\n            this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n            var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            this._setFittedImageVerticeCoordinates();\n            this._repositionCropper(previouslyOccupiedArea);\n        } else {\n            // Otherwise just recalculate the image zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n        }\n\n        // Reposition the image relatively to the previous editor dimensions.\n        this._repositionImage(previousEditorDimensions);\n        this._repositionViewport();\n        this._repositionFocalPoint(previousEditorDimensions);\n        this._zoomImage();\n\n        this.renderImage();\n\n        if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n            this._reloadImage();\n        }\n    },\n\n    /**\n     * Reposition image based on how the editor dimensions have changed.\n     * This ensures keeping the image center offset, if there is any.\n     *\n     * @param previousEditorDimensions\n     */\n    _repositionImage: function(previousEditorDimensions) {\n        this.image.set({\n            left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n            top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n        });\n    },\n\n    /**\n     * Create the viewport for image editor.\n     */\n    _createViewport: function() {\n        this.viewport = new fabric.Rect({\n            width: this.image.width,\n            height: this.image.height,\n            fill: 'rgba(127,0,0,1)',\n            originX: 'center',\n            originY: 'center',\n            globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n            left: this.image.left,\n            top: this.image.top\n        });\n        this.canvas.add(this.viewport);\n        this.renderImage();\n    },\n\n    /**\n     * Create the focal point.\n     */\n    _createFocalPoint: function() {\n        var focalPointState = this.focalPointState;\n        var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n        var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n        var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n        // Adjust by image margins\n        focalX += this.image.left;\n        focalY += this.image.top;\n\n        var deltaX = 0;\n        var deltaY = 0;\n\n        // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n        if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n            if (this.currentView !== 'crop') {\n                deltaX = this.viewport.left - this.image.left;\n                deltaY = this.viewport.top - this.image.top;\n            } else {\n                // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                deltaX = this.clipper.left - this.image.left;\n                deltaY = this.clipper.top - this.image.top;\n            }\n\n            // Bump focal to middle of viewport\n            focalX += deltaX;\n            focalY += deltaY;\n\n            // Reflect changes in saved state\n            focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n        }\n\n        this.focalPoint = new fabric.Group([\n            new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n            new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n        ], {\n            originX: 'center',\n            originY: 'center',\n            left: focalX,\n            top: focalY\n        });\n\n        this.storeFocalPointState(focalPointState);\n        this.canvas.add(this.focalPoint);\n    },\n\n    /**\n     * Toggle focal point\n     */\n    toggleFocalPoint: function() {\n        if (!this.focalPoint) {\n            this._createFocalPoint();\n        } else {\n            this.canvas.remove(this.focalPoint);\n            this.focalPoint = null;\n        }\n\n        this.renderImage();\n    },\n\n    /**\n     * Reposition the viewport to handle editor resizing.\n     */\n    _repositionViewport: function() {\n        if (this.viewport) {\n            var dimensions = {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            // If we're cropping, nothing exciting happens for the viewport\n            if (this.currentView === 'crop') {\n                dimensions.width = this.editorWidth;\n                dimensions.height = this.editorHeight;\n            } else {\n                // If this is the first initial reposition, no cropper state yet\n                if (this.cropperState) {\n                    // Recall the state\n                    var state = this.cropperState;\n\n                    var scaledImageDimensions = this.getScaledImageDimensions();\n                    // Make sure we have the correct current image size\n                    var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                    // Set the viewport dimensions\n                    dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                    dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                    // Adjust the image position to show the correct part of the image in the viewport\n                    this.image.set({\n                        left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                        top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                    });\n                } else {\n                    $.extend(dimensions, this.getScaledImageDimensions());\n                }\n            }\n            this.viewport.set(dimensions);\n        }\n    },\n\n    _repositionFocalPoint: function(previousEditorDimensions) {\n        if (this.focalPoint) {\n            var offsetX = this.focalPoint.left - this.editorWidth / 2;\n            var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n            var currentWidth = this.image.width;\n            var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n            var ratio = newWidth / currentWidth / this.scaleFactor;\n\n            offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n            offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n            offsetX *= ratio;\n            offsetY *= ratio;\n\n            this.focalPoint.set({\n                left: this.editorWidth / 2 + offsetX,\n                top: this.editorHeight / 2 + offsetY\n            });\n        }\n    },\n\n    /**\n     * Return true if the image orientation has changed\n     */\n    hasOrientationChanged: function() {\n        return this.viewportRotation % 180 !== 0;\n    },\n\n    /**\n     * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n     */\n    getScaledImageDimensions: function() {\n        if (typeof this.getScaledImageDimensions._ === 'undefined') {\n            this.getScaledImageDimensions._ = {};\n        }\n\n        this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n        this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n        this.getScaledImageDimensions._.dimensions = {};\n        if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n            this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n            this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n        } else {\n            this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n            this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n        }\n\n        return this.getScaledImageDimensions._.dimensions;\n    },\n\n    /**\n     * Set the image dimensions to reflect the current zoom ratio.\n     */\n    _zoomImage: function() {\n        if (typeof this._zoomImage._ === 'undefined') {\n            this._zoomImage._ = {};\n        }\n\n        this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n        this.image.set({\n            width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n            height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n        });\n    },\n\n    /**\n     * Set up listeners for the controls.\n     */\n    _addControlListeners: function() {\n        // Tabs\n        this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n        // Focal point\n        this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n        // Rotate controls\n        this.addListener($('.rotate-left'), 'click', function() {\n            this.rotateImage(-90);\n        });\n        this.addListener($('.rotate-right'), 'click', function() {\n            this.rotateImage(90);\n        });\n        this.addListener($('.flip-vertical'), 'click', function() {\n            this.flipImage('y');\n        });\n        this.addListener($('.flip-horizontal'), 'click', function() {\n            this.flipImage('x');\n        });\n\n        // Straighten slider\n        this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n            onStart: () => {\n                this._showGrid();\n            },\n            onChange: slider => {\n                this.straighten(slider);\n            },\n            onEnd: () => {\n                this._hideGrid();\n                this._cleanupFocalPointAfterStraighten();\n            },\n        });\n\n        // Cropper scale modifier key\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = true;\n            }\n        });\n        this.addListener(Garnish.$doc, 'keyup', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = false;\n            }\n        });\n\n        this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n        this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n        this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n    },\n\n    /**\n     * Handle a constraint button click.\n     *\n     * @param ev\n     */\n    _handleConstraintClick: function(ev) {\n        var constraint = $(ev.currentTarget).data('constraint');\n        var $target = $(ev.currentTarget);\n        $target.siblings().removeClass('active');\n        $target.addClass('active');\n\n        if (constraint == 'custom') {\n            this._showCustomConstraint();\n            this._applyCustomConstraint();\n            return;\n        }\n\n        this._hideCustomConstraint();\n\n        this.setCroppingConstraint(constraint);\n        this.enforceCroppingConstraint();\n    },\n\n    /**\n     * Handle an orientation switch click.\n     *\n     * @param ev\n     */\n    _handleOrientationClick: function(ev) {\n        if (ev.currentTarget.value === this.constraintOrientation) {\n            return;\n        }\n        this.constraintOrientation = ev.currentTarget.value;\n\n        var $constraints = $('.constraint.flip', this.$container);\n\n        for (var i = 0; i < $constraints.length; i++) {\n            var $constraint = $($constraints[i]);\n            $constraint.data('constraint', 1 / $constraint.data('constraint'));\n            $constraint.html($constraint.html().split(':').reverse().join(':'));\n        }\n\n        $constraints.filter('.active').click();\n    },\n\n    /**\n     * Apply the custom ratio set in the inputs\n     */\n    _applyCustomConstraint: function() {\n        var constraint = this._getCustomConstraint();\n\n        if (constraint.w > 0 && constraint.h > 0) {\n            this.setCroppingConstraint(constraint.w / constraint.h);\n            this.enforceCroppingConstraint();\n        }\n    },\n\n    /**\n     * Get the custom constraint.\n     *\n     * @returns {{w: *, h: *}}\n     */\n    _getCustomConstraint: function() {\n        var w = parseFloat($('.custom-constraint-w').val());\n        var h = parseFloat($('.custom-constraint-h').val());\n        return {\n            w: isNaN(w) ? 0 : w,\n            h: isNaN(h) ? 0 : h,\n        }\n    },\n\n    /**\n     * Set the custom constraint.\n     *\n     * @param w\n     * @param h\n     */\n    _setCustomConstraint: function(w, h) {\n        $('.custom-constraint-w').val(parseFloat(w));\n        $('.custom-constraint-h').val(parseFloat(h));\n    },\n\n    /**\n     * Hide the custom constraint inputs.\n     */\n    _hideCustomConstraint: function() {\n        this.showingCustomConstraint = false;\n        $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n        $('.orientation', this.$container).removeClass('hidden');\n    },\n\n    /**\n     * Show the custom constraint inputs.\n     */\n    _showCustomConstraint: function() {\n        if (this.showingCustomConstraint) {\n            return;\n        }\n\n        this.showingCustomConstraint = true;\n        $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n        $('.orientation', this.$container).addClass('hidden');\n    },\n\n    /**\n     * Handle tab click.\n     *\n     * @param ev\n     */\n    _handleTabClick: function(ev) {\n        if (!this.animationInProgress) {\n            var $tab = $(ev.currentTarget);\n            var view = $tab.data('view');\n            this.$tabs.removeClass('selected');\n            $tab.addClass('selected');\n            this.showView(view);\n        }\n    },\n\n    /**\n     * Show a view.\n     *\n     * @param view\n     */\n    showView: function(view) {\n        if (this.currentView === view) {\n            return;\n        }\n\n        this.$views.addClass('hidden');\n        var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n        $view.removeClass('hidden');\n\n        if (view === 'rotate') {\n            this.enableSlider();\n        } else {\n            this.disableSlider();\n        }\n\n        // Now that most likely our editor dimensions have changed, time to reposition stuff\n        this.updateSizeAndPosition();\n\n        // See if we have to enable or disable crop mode as we transition between tabs\n        if (this.currentView === 'crop' && view !== 'crop') {\n            this.disableCropMode();\n        } else if (this.currentView !== 'crop' && view === 'crop') {\n            this.enableCropMode();\n        }\n\n        // Mark the current view\n        this.currentView = view;\n    },\n\n    /**\n     * Store the current cropper state.\n     *\n     * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n     * as the basis for recalculating the cropper position and dimensions.\n     *\n     * @param [state]\n     */\n    storeCropperState: function(state) {\n        if (typeof this.storeCropperState._ === 'undefined') {\n            this.storeCropperState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.cropperState = state;\n        } else if (this.clipper) {\n            this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n            this.cropperState = {\n                offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        } else {\n            this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n            this.cropperState = {\n                offsetX: 0,\n                offsetY: 0,\n                height: this.storeCropperState._.dimensions.height,\n                width: this.storeCropperState._.dimensions.width,\n                imageDimensions: this.storeCropperState._.dimensions\n            };\n        }\n    },\n\n    /**\n     * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n     */\n    storeFocalPointState: function(state) {\n        if (typeof this.storeFocalPointState._ === 'undefined') {\n            this.storeFocalPointState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.focalPointState = state;\n        } else if (this.focalPoint) {\n            this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n            this.focalPointState = {\n                offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        }\n    },\n\n    /**\n     * Rotate the image along with the viewport.\n     *\n     * @param degrees\n     */\n    rotateImage: function(degrees) {\n        if (!this.animationInProgress) {\n            // We're not that kind of an establishment, sir.\n            if (degrees !== 90 && degrees !== -90) {\n                return false;\n            }\n\n            this.animationInProgress = true;\n            this.viewportRotation += degrees;\n\n            // Normalize the viewport rotation angle so it's between 0 and 359\n            this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n            var newAngle = this.image.angle + degrees;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var imageZoomRatio;\n\n            if (this.hasOrientationChanged()) {\n                imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n            } else {\n                imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n            }\n\n            // In cases when for some reason we've already zoomed in on the image,\n            // use existing zoom.\n            if (this.zoomRatio > imageZoomRatio) {\n                imageZoomRatio = this.zoomRatio;\n            }\n\n            var viewportProperties = {\n                angle: degrees === 90 ? '+=90' : '-=90'\n            };\n\n            var imageProperties = {\n                angle: newAngle,\n                width: scaledImageDimensions.width * imageZoomRatio,\n                height: scaledImageDimensions.height * imageZoomRatio\n            };\n\n            var scaleFactor = 1;\n            if (this.scaleFactor < 1) {\n                scaleFactor = 1 / this.scaleFactor;\n                this.scaleFactor = 1;\n            } else {\n                if (this.viewport.width > this.editorHeight) {\n                    scaleFactor = this.editorHeight / this.viewport.width;\n                } else if (this.viewport.height > this.editorWidth) {\n                    scaleFactor = this.editorWidth / this.viewport.height;\n                }\n                this.scaleFactor = scaleFactor;\n            }\n\n            if (scaleFactor < 1) {\n                imageProperties.width *= scaleFactor;\n                imageProperties.height *= scaleFactor;\n            }\n\n            var state = this.cropperState;\n\n            // Make sure we reposition the image as well to focus on the same image area\n            var deltaX = state.offsetX;\n            var deltaY = state.offsetY;\n            var angleInRadians = degrees * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n            var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n            imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n            state.offsetX = newDeltaX;\n            state.offsetY = newDeltaY;\n\n            var temp = state.width;\n            state.width = state.height;\n            state.height = temp;\n\n            this.storeCropperState(state);\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            }\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    // If we're zooming the image in or out, better do the same to viewport\n                    var temp = this.viewport.height * scaleFactor;\n                    this.viewport.height = this.viewport.width * scaleFactor;\n                    this.viewport.width = temp;\n                    this.viewport.set({angle: 0});\n                },\n            });\n\n            // Animate the rotation and dimension change\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                    this.image.set({angle: cleanAngle});\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        this._adjustFocalPointByAngle(degrees);\n                        this.straighten(this.straighteningInput);\n                        this.canvas.add(this.focalPoint);\n                    } else {\n                        this._resetFocalPointPosition();\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Flip an image along an axis.\n     *\n     * @param axis\n     */\n    flipImage: function(axis) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            if (this.hasOrientationChanged()) {\n                axis = axis === 'y' ? 'x' : 'y';\n            }\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            } else {\n                this._resetFocalPointPosition();\n            }\n\n            var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            this.straighteningInput.setValue(-this.imageStraightenAngle);\n            this.imageStraightenAngle = -this.imageStraightenAngle;\n            var properties = {\n                angle: this.viewportRotation + this.imageStraightenAngle\n            };\n\n            var deltaY, deltaX;\n            var cropperState = this.cropperState;\n            var focalPointState = this.focalPointState;\n\n            // Reposition the image, viewport, and stored cropper and focal point states.\n            if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                cropperState.offsetX = -cropperState.offsetX;\n                focalPointState.offsetX = -focalPointState.offsetX;\n                deltaX = this.image.left - editorCenter.x;\n                properties.left = editorCenter.x - deltaX;\n            } else {\n                cropperState.offsetY = -cropperState.offsetY;\n                focalPointState.offsetY = -focalPointState.offsetY;\n                deltaY = this.image.top - editorCenter.y;\n                properties.top = editorCenter.y - deltaY;\n            }\n\n            if (axis === 'y') {\n                properties.scaleY = this.image.scaleY * -1;\n                this.flipData.y = 1 - this.flipData.y;\n            } else {\n                properties.scaleX = this.image.scaleX * -1;\n                this.flipData.x = 1 - this.flipData.x;\n            }\n\n            this.storeCropperState(cropperState);\n            this.storeFocalPointState(focalPointState);\n\n            this.image.animate(properties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        // Well this is handy\n                        this._adjustFocalPointByAngle(0);\n                        this.canvas.add(this.focalPoint);\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Perform the straightening with input slider.\n     *\n     * @param {Craft.SlideRuleInput} slider\n     */\n    straighten: function(slider) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            var previousAngle = this.image.angle;\n\n            this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n            // Straighten the image\n            this.image.set({\n                angle: this.viewportRotation + this.imageStraightenAngle\n            });\n\n            // Set the new zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            this._zoomImage();\n\n            if (this.cropperState) {\n                this._adjustEditorElementsOnStraighten(previousAngle);\n            }\n\n            this.renderImage();\n\n            this.animationInProgress = false;\n        }\n    },\n\n    /**\n     * Adjust the cropped viewport when straightening the image to correct for\n     * bumping into edges, keeping focus on the cropped area center and to\n     * maintain the illusion that the image is being straightened relative to the viewport center.\n     *\n     * @param {integer} previousAngle integer the previous image angle before straightening\n     */\n    _adjustEditorElementsOnStraighten: function(previousAngle) {\n        var scaledImageDimensions = this.getScaledImageDimensions();\n        var angleDelta = this.image.angle - previousAngle;\n        var state = this.cropperState;\n\n        var currentZoomRatio = this.zoomRatio;\n        var adjustmentRatio = 1;\n\n        var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n        do {\n            // Get the cropper center coordinates\n            var cropperCenterX = state.offsetX;\n            var cropperCenterY = state.offsetY;\n            var angleInRadians = angleDelta * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n            newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n            sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Figure out the final image offset to keep the viewport focused where we need it\n            deltaX = newCenterX * currentZoomRatio * sizeFactor;\n            deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n            // If the image would creep in the viewport, figure out how to math around it.\n            var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n            var rectangle = {\n                width: this.viewport.width,\n                height: this.viewport.height,\n                left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n            };\n            adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n            currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n            // If we had to make adjustments, do the calculations again\n        } while (adjustmentRatio !== 1);\n\n        // Reposition the image correctly\n        this.image.set({\n            left: this.editorWidth / 2 - deltaX,\n            top: this.editorHeight / 2 - deltaY\n        });\n\n        // Finally, store the new cropper state to reflect the rotation change.\n        state.offsetX = newCenterX;\n        state.offsetY = newCenterY;\n        state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n        state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n        this.storeCropperState(state);\n\n        // Zoom the image in and we're done.\n        this.zoomRatio = currentZoomRatio;\n\n        if (this.focalPoint) {\n            this._adjustFocalPointByAngle(angleDelta);\n\n            if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 0});\n            } else {\n                this.focalPoint.set({opacity: 1});\n            }\n        } else if (angleDelta !== 0) {\n            this._resetFocalPointPosition();\n        }\n\n        this._zoomImage();\n    },\n\n    /**\n     * If focal point is active and outside of viewport after straightening, reset it.\n     */\n    _cleanupFocalPointAfterStraighten: function() {\n        if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n            this.focalPoint.set({opacity: 1});\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n            this.toggleFocalPoint();\n        }\n    },\n\n    /**\n     * Reset focal point to the middle of image.\n     */\n    _resetFocalPointPosition: function() {\n        var state = this.focalPointState;\n        state.offsetX = 0;\n        state.offsetY = 0;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n     *\n     * @param object\n     * @param containingObject\n     *\n     * @returns {boolean}\n     */\n    _isCenterInside: function(object, containingObject) {\n        return (object.left > containingObject.left - containingObject.width / 2\n            && object.top > containingObject.top - containingObject.height / 2\n            && object.left < containingObject.left + containingObject.width / 2\n            && object.top < containingObject.top + containingObject.height / 2\n        );\n    },\n\n    /**\n     * Adjust the focal point by an angle in degrees.\n     * @param angle\n     */\n    _adjustFocalPointByAngle: function(angle) {\n        var angleInRadians = angle * (Math.PI / 180);\n        var state = this.focalPointState;\n\n        var focalX = state.offsetX;\n        var focalY = state.offsetY;\n\n        // Calculate how the focal point would need to move in a circle to keep on the same spot\n        // on the image if it was rotated with zoom intact.\n        var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n        var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n        var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n        var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n        var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n        this.focalPoint.left = this.image.left + adjustedFocalX;\n        this.focalPoint.top = this.image.top + adjustedFocalY;\n\n        state.offsetX = newFocalX;\n        state.offsetY = newFocalY;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n     * If the rectangle fits, 1 will be returned.\n     *\n     * @param rectangle\n     * @param containingVertices\n     */\n    _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n        var rectangleVertices = this._getRectangleVertices(rectangle);\n        var vertex;\n\n        // Check if any of the viewport vertices end up out of bounds\n        for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n            vertex = rectangleVertices[verticeIndex];\n\n            if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                break;\n            }\n\n            vertex = false;\n        }\n\n        // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n        var adjustmentRatio;\n\n        if (!vertex) {\n            adjustmentRatio = 1;\n        } else {\n            // Find out which edge got crossed by the vertex\n            var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n            var rectangleCenter = {\n                x: rectangle.left + rectangle.width / 2,\n                y: rectangle.top + rectangle.height / 2\n            };\n\n            // Calculate how much further that edge needs to be.\n            // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n            var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n            var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n            // Adjust the zoom ratio\n            adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n        }\n\n        return adjustmentRatio;\n    },\n\n    /**\n     * Save the image.\n     *\n     * @param ev\n     */\n    saveImage: function(ev) {\n        var $button = $(ev.currentTarget);\n        if ($button.hasClass('disabled')) {\n            return false;\n        }\n\n        $('.btn', this.$buttons).addClass('disabled');\n        this.$buttons.append('<div class=\"spinner\"></div>');\n\n        var postData = {\n            assetId: this.assetId,\n            viewportRotation: this.viewportRotation,\n            imageRotation: this.imageStraightenAngle,\n            replace: $button.hasClass('replace') ? 1 : 0\n        };\n\n        if (this.cropperState) {\n            var cropData = {};\n\n            cropData.height = this.cropperState.height;\n            cropData.width = this.cropperState.width;\n            cropData.offsetX = this.cropperState.offsetX;\n            cropData.offsetY = this.cropperState.offsetY;\n\n            postData.imageDimensions = this.cropperState.imageDimensions;\n\n            postData.cropData = cropData;\n        } else {\n            postData.imageDimensions = this.getScaledImageDimensions();\n        }\n\n        if (this.focalPoint) {\n            postData.focalPoint = this.focalPointState;\n        }\n\n        postData.flipData = this.flipData;\n        postData.zoom = this.zoomRatio;\n\n        Craft.postActionRequest('assets/save-image', postData, data => {\n            this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n            if (data.error) {\n                alert(data.error);\n                return;\n            }\n\n            this.onSave();\n            this.hide();\n            Craft.cp.runQueue();\n        });\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToCoverRatio: function(dimensions) {\n        // Convert the angle to radians\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        // Calculate the dimensions of the scaled image using the magic of math\n        var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n        var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n        // Calculate the ratio\n        return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToFitRatio: function(dimensions) {\n        // Get the bounding box for a rotated image\n        var boundingBox = this._getImageBoundingBox(dimensions);\n\n        // Scale the bounding box to fit\n        var scale = 1;\n        if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n            var vertScale = this.editorHeight / boundingBox.height;\n            var horiScale = this.editorWidth / boundingBox.width;\n            scale = Math.min(horiScale, vertScale);\n        }\n\n        return scale;\n    },\n\n    /**\n     * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n     */\n    getCombinedZoomRatio: function(dimensions) {\n        return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n    },\n\n    /**\n     * Draw the grid.\n     *\n     * @private\n     */\n    _showGrid: function() {\n        if (!this.grid) {\n            var strokeOptions = {\n                strokeWidth: 1,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            var lineCount = 8;\n            var gridWidth = this.viewport.width;\n            var gridHeight = this.viewport.height;\n            var xStep = gridWidth / (lineCount + 1);\n            var yStep = gridHeight / (lineCount + 1);\n\n            var grid = [\n                new fabric.Rect({\n                    strokeWidth: 2,\n                    stroke: 'rgba(255,255,255,1)',\n                    originX: 'center',\n                    originY: 'center',\n                    width: gridWidth,\n                    height: gridHeight,\n                    left: gridWidth / 2,\n                    top: gridHeight / 2,\n                    fill: 'rgba(255,255,255,0)'\n                })\n            ];\n\n            var i;\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n            }\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n            }\n\n            this.grid = new fabric.Group(grid, {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                angle: this.viewport.angle\n            });\n\n            this.canvas.add(this.grid);\n            this.renderImage();\n        }\n    },\n\n    /**\n     * Hide the grid\n     */\n    _hideGrid: function() {\n        this.canvas.remove(this.grid);\n        this.grid = null;\n        this.renderImage();\n    },\n\n    /**\n     * Remove all the events when hiding the editor.\n     */\n    onFadeOut: function() {\n        this.destroy();\n    },\n\n    /**\n     * Make sure underlying content is not scrolled by accident.\n     */\n    show: function() {\n        this.base();\n\n        $('html').addClass('noscroll');\n    },\n\n    /**\n     * Allow the content to scroll.\n     */\n    hide: function() {\n        this.removeAllListeners();\n        this.straighteningInput.removeAllListeners();\n        $('html').removeClass('noscroll');\n        this.base();\n    },\n\n    /**\n     * onSave callback.\n     */\n    onSave: function() {\n        this.settings.onSave();\n        this.trigger('save');\n    },\n\n    /**\n     * Enable the rotation slider.\n     */\n    enableSlider: function() {\n        this.$imageTools.removeClass('hidden');\n    },\n\n    /**\n     * Disable the rotation slider.\n     */\n    disableSlider: function() {\n        this.$imageTools.addClass('hidden');\n    },\n\n    /**\n     * Switch to crop mode.\n     */\n    enableCropMode: function() {\n        var imageDimensions = this.getScaledImageDimensions();\n        this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n        var viewportProperties = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var callback = () => {\n            this._setFittedImageVerticeCoordinates();\n\n            // Restore cropper\n            var state = this.cropperState;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Restore based on the stored information\n            var cropperData = {\n                left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                width: state.width * sizeFactor * this.zoomRatio,\n                height: state.height * sizeFactor * this.zoomRatio\n            };\n\n            this._showCropper(cropperData);\n\n            if (this.focalPoint) {\n                sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Switch out of crop mode.\n     */\n    disableCropMode: function() {\n        var viewportProperties = {};\n\n        this._hideCropper();\n        var imageDimensions = this.getScaledImageDimensions();\n        var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n        var inverseZoomFactor = targetZoom / this.zoomRatio;\n        this.zoomRatio = targetZoom;\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var offsetX = this.clipper.left - this.image.left;\n        var offsetY = this.clipper.top - this.image.top;\n\n        var imageOffsetX = offsetX * inverseZoomFactor;\n        var imageOffsetY = offsetY * inverseZoomFactor;\n        imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n        imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n        // Calculate the cropper dimensions after all the zooming\n        viewportProperties.height = this.clipper.height * inverseZoomFactor;\n        viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n        if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n            if (this.focalPoint) {\n                this.toggleFocalPoint();\n            }\n\n            this._resetFocalPointPosition();\n        }\n\n        var callback = () => {\n            // Reposition focal point correctly\n            if (this.focalPoint) {\n                var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Transition between cropping end editor modes\n     *\n     * @param callback\n     * @param imageProperties\n     * @param viewportProperties\n     * @private\n     */\n    _editorModeTransition: function(callback, imageProperties, viewportProperties) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            // Without this it looks semi-broken during animation\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n                this.renderImage();\n            }\n\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    callback();\n                    this.animationInProgress = false;\n                    this.renderImage();\n                },\n            });\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration\n            });\n        }\n    },\n\n    _showSpinner: function() {\n        this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n        var canvas = document.getElementById('spinner-canvas');\n        var context = canvas.getContext('2d');\n        var start = new Date();\n        var lines = 16,\n            cW = context.canvas.width,\n            cH = context.canvas.height;\n\n        var draw = function() {\n            var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n            context.save();\n            context.clearRect(0, 0, cW, cH);\n            context.translate(cW / 2, cH / 2);\n            context.rotate(Math.PI * 2 * rotation);\n            for (var i = 0; i < lines; i++) {\n                context.beginPath();\n                context.rotate(Math.PI * 2 / lines);\n                context.moveTo(cW / 10, 0);\n                context.lineTo(cW / 4, 0);\n                context.lineWidth = cW / 30;\n                context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                context.stroke();\n            }\n            context.restore();\n        };\n        this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n    },\n\n    _hideSpinner: function() {\n        window.clearInterval(this.spinnerInterval);\n        this.$spinnerCanvas.remove();\n        this.$spinnerCanvas = null;\n    },\n\n    /**\n     * Show the cropper.\n     *\n     * @param clipperData\n     */\n    _showCropper: function(clipperData) {\n        this._setupCropperLayer(clipperData);\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Hide the cropper.\n     */\n    _hideCropper: function() {\n        if (this.clipper) {\n            this.croppingCanvas.remove(this.clipper);\n            this.croppingCanvas.remove(this.croppingShade);\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n\n            this.croppingCanvas = null;\n            this.renderCropper = null;\n        }\n    },\n\n    /**\n     * Draw the cropper.\n     *\n     * @param clipperData\n     */\n    _setupCropperLayer: function(clipperData) {\n        // Set up the canvas for cropper\n        this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n            backgroundColor: 'rgba(0,0,0,0)',\n            hoverCursor: 'default',\n            selection: false\n        });\n\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        this.renderCropper = () => Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n\n        $('#cropping-canvas', this.$editorContainer).css({\n            position: 'absolute',\n            top: 0,\n            left: 0\n        });\n\n        this.croppingShade = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: this.editorWidth,\n            height: this.editorHeight,\n            fill: 'rgba(0,0,0,0.7)'\n        });\n\n        // Calculate the cropping rectangle size\n        var imageDimensions = this.getScaledImageDimensions();\n        var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n        var rectWidth = imageDimensions.width / rectangleRatio;\n        var rectHeight = imageDimensions.height / rectangleRatio;\n\n        if (this.hasOrientationChanged()) {\n            var temp = rectHeight;\n            rectHeight = rectWidth;\n            rectWidth = temp;\n        }\n\n        // Set up the cropping viewport rectangle\n        this.clipper = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: rectWidth,\n            height: rectHeight,\n            stroke: 'black',\n            fill: 'rgba(128,0,0,1)',\n            strokeWidth: 0\n        });\n\n        // Set from clipper data\n        if (clipperData) {\n            this.clipper.set(clipperData);\n        }\n\n        this.clipper.globalCompositeOperation = 'destination-out';\n        this.croppingCanvas.add(this.croppingShade);\n        this.croppingCanvas.add(this.clipper);\n    },\n\n    /**\n     * Redraw the cropper boundaries\n     */\n    _redrawCropperElements: function() {\n        if (typeof this._redrawCropperElements._ === 'undefined') {\n            this._redrawCropperElements._ = {};\n        }\n\n        if (this.cropperHandles) {\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n        }\n        this._redrawCropperElements._.lineOptions = {\n            strokeWidth: 4,\n            stroke: 'rgb(255,255,255)',\n            fill: false\n        };\n\n        this._redrawCropperElements._.gridOptions = {\n            strokeWidth: 2,\n            stroke: 'rgba(255,255,255,0.5)'\n        };\n\n        // Draw the handles\n        this._redrawCropperElements._.pathGroup = [\n            new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n        ];\n\n        this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n            left: this.clipper.left,\n            top: this.clipper.top,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        // Don't forget the rectangle\n        this.croppingRectangle = new fabric.Rect({\n            left: this.clipper.left,\n            top: this.clipper.top,\n            width: this.clipper.width,\n            height: this.clipper.height,\n            fill: 'rgba(0,0,0,0)',\n            stroke: 'rgba(255,255,255,0.8)',\n            strokeWidth: 2,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        this.cropperGrid = new fabric.Group(\n            [\n                new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n            ], {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n        this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n        this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n        if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n            this._redrawCropperElements._.cropTextTop -= 24;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n        }\n\n        this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n            left: this.croppingRectangle.left,\n            top: this._redrawCropperElements._.cropTextTop,\n            fontSize: 13,\n            fill: 'rgb(200,200,200)',\n            backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n            font: 'Craft',\n            width: 70,\n            height: 15,\n            originX: 'center',\n            originY: 'center',\n            textAlign: 'center'\n        });\n\n        this.croppingCanvas.add(this.cropperHandles);\n        this.croppingCanvas.add(this.cropperGrid);\n        this.croppingCanvas.add(this.croppingRectangle);\n        this.croppingCanvas.add(this.croppingAreaText);\n    },\n\n    /**\n     * Reposition the cropper when the image editor dimensions change.\n     *\n     * @param previousImageArea\n     */\n    _repositionCropper: function(previousImageArea) {\n        if (!this.croppingCanvas) {\n            return;\n        }\n\n        // Get the current clipper offset relative to center\n        var currentOffset = {\n            x: this.clipper.left - this.croppingCanvas.width / 2,\n            y: this.clipper.top - this.croppingCanvas.height / 2\n        };\n\n        // Resize the cropping canvas\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        // Check by what factor will the new final bounding box be different\n        var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n        var areaFactor = currentArea.width / previousImageArea.width;\n\n        // Adjust the cropper size to scale along with the bounding box\n        this.clipper.width = Math.round(this.clipper.width * areaFactor);\n        this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n        // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n        // for editor size changes and then multiply by the size factor to adjust for image size changes\n        this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n        this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n        // Resize the cropping shade\n        this.croppingShade.set({\n            width: this.editorWidth,\n            height: this.editorHeight,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        });\n\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Get the dimensions of a bounding rectangle by a set of four coordinates.\n     *\n     * @param coordinateSet\n     */\n    _getBoundingRectangle: function(coordinateSet) {\n        return {\n            width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n            height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n        };\n    },\n\n    /**\n     * Handle the mouse being clicked.\n     *\n     * @param ev\n     */\n    _handleMouseDown: function(ev) {\n        // Focal before resize before dragging\n        var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n        var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n        var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n        if (handle || move || focal) {\n            this.previousMouseX = ev.pageX;\n            this.previousMouseY = ev.pageY;\n\n            if (focal) {\n                this.draggingFocal = true;\n            } else if (handle) {\n                this.scalingCropper = handle;\n            } else if (move) {\n                this.draggingCropper = true;\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse being moved.\n     *\n     * @param ev\n     */\n    _handleMouseMove: function(ev) {\n        if (this.mouseMoveEvent !== null) {\n            Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n        }\n        this.mouseMoveEvent = ev;\n    },\n\n    _handleMouseMoveInternal: function() {\n        if (this.mouseMoveEvent === null) {\n            return;\n        }\n\n        if (this.focalPoint && this.draggingFocal) {\n            this._handleFocalDrag(this.mouseMoveEvent);\n            this.storeFocalPointState();\n            this.renderImage();\n        } else if (this.draggingCropper || this.scalingCropper) {\n            if (this.draggingCropper) {\n                this._handleCropperDrag(this.mouseMoveEvent);\n            } else {\n                this._handleCropperResize(this.mouseMoveEvent);\n            }\n\n            this._redrawCropperElements();\n\n            this.storeCropperState();\n            this.renderCropper();\n        } else {\n            this._setMouseCursor(this.mouseMoveEvent);\n        }\n\n        this.previousMouseX = this.mouseMoveEvent.pageX;\n        this.previousMouseY = this.mouseMoveEvent.pageY;\n\n        this.mouseMoveEvent = null;\n    },\n\n    /**\n     * Handle mouse being released.\n     *\n     * @param ev\n     */\n    _handleMouseUp: function(ev) {\n        this.draggingCropper = false;\n        this.scalingCropper = false;\n        this.draggingFocal = false;\n    },\n\n    /**\n     * Handle mouse out\n     *\n     * @param ev\n     */\n    _handleMouseOut: function(ev) {\n        this._handleMouseUp(ev);\n        this.mouseMoveEvent = ev;\n        this._handleMouseMoveInternal();\n    },\n\n    /**\n     * Handle cropper being dragged.\n     *\n     * @param ev\n     */\n    _handleCropperDrag: function(ev) {\n        if (typeof this._handleCropperDrag._ === 'undefined') {\n            this._handleCropperDrag._ = {};\n        }\n\n        this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n            return false;\n        }\n\n        this._handleCropperDrag._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n        // If this would drag it outside of the image\n        if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n            // Try to find the furthest point in the same general direction where we can drag it\n\n            // Delta iterator setup\n            this._handleCropperDrag._.dxi = 0;\n            this._handleCropperDrag._.dyi = 0;\n            this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n            this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n            // The furthest we can move\n            this._handleCropperDrag._.furthest = 0;\n            this._handleCropperDrag._.furthestDeltas = {};\n\n            // Loop through every combination of dragging it not so far\n            for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                    this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                    if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                        if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                            this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                            this._handleCropperDrag._.furthestDeltas = {\n                                x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                            }\n                        }\n                    }\n                }\n            }\n\n            // REALLY can't drag along the cursor movement\n            if (this._handleCropperDrag._.furthest == 0) {\n                return;\n            } else {\n                this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n            }\n        }\n\n        this.clipper.set({\n            left: this.clipper.left + this._handleCropperDrag._.deltaX,\n            top: this.clipper.top + this._handleCropperDrag._.deltaY\n        });\n    },\n\n    /**\n     * Handle focal point being dragged.\n     *\n     * @param ev\n     */\n    _handleFocalDrag: function(ev) {\n        if (typeof this._handleFocalDrag._ === 'undefined') {\n            this._handleFocalDrag._ = {};\n        }\n\n        if (this.focalPoint) {\n            this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                return;\n            }\n\n            this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n            this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n            // Just make sure that the focal point stays inside the image\n            if (this.currentView === 'crop') {\n                if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                    return;\n                }\n            } else {\n                if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                    && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                    return;\n                }\n            }\n\n            this.focalPoint.set({\n                left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n            });\n        }\n    },\n\n    /**\n     * Set the cropping constraint\n     * @param constraint\n     */\n    setCroppingConstraint: function(constraint) {\n        // In case this caused the sidebar width to change.\n        this.updateSizeAndPosition();\n\n        switch (constraint) {\n            case 'none':\n                this.croppingConstraint = false;\n                break;\n\n            case 'original':\n                this.croppingConstraint = this.originalWidth / this.originalHeight;\n                break;\n\n            case 'current':\n                this.croppingConstraint = this.clipper.width / this.clipper.height;\n                break;\n\n            case 'custom':\n\n                break;\n            default:\n                this.croppingConstraint = parseFloat(constraint);\n\n                break;\n        }\n    },\n\n    /**\n     * Enforce the cropping constraint\n     */\n    enforceCroppingConstraint: function() {\n        if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n            this.enforceCroppingConstraint._ = {};\n        }\n\n        if (this.animationInProgress || !this.croppingConstraint) {\n            return;\n        }\n\n        this.animationInProgress = true;\n\n        // Mock the clipping rectangle for collision tests\n        this.enforceCroppingConstraint._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        // If wider than it should be\n        if (this.clipper.width > this.clipper.height * this.croppingConstraint) {\n            this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n            // Make it taller!\n            this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n            // Getting really awkward having to convert between 0;0 being center or top-left corner.\n            this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n            // If the clipper would end up out of bounds, make it narrower instead.\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n            }\n        } else {\n            // Follow the same pattern, if taller than it should be.\n            this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n            this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n            this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n            }\n        }\n\n        this.enforceCroppingConstraint._.properties = {\n            height: this.enforceCroppingConstraint._.rectangle.height,\n            width: this.enforceCroppingConstraint._.rectangle.width\n        };\n\n        // Make sure to redraw cropper handles and gridlines when resizing\n        this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n            onChange: () => {\n                this._redrawCropperElements();\n                this.croppingCanvas.renderAll();\n            },\n            duration: this.settings.animationDuration,\n            onComplete: () => {\n                this._redrawCropperElements();\n                this.animationInProgress = false;\n                this.renderCropper();\n                this.storeCropperState();\n            },\n        });\n    },\n\n    /**\n     * Handle cropper being resized.\n     *\n     * @param ev\n     */\n    _handleCropperResize: function(ev) {\n        if (typeof this._handleCropperResize._ === 'undefined') {\n            this._handleCropperResize._ = {};\n        }\n\n        // Size deltas\n        this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n            this._handleCropperResize._.deltaX = 0;\n        }\n\n        if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n            this._handleCropperResize._.deltaY = 0;\n        }\n\n        if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n            return;\n        }\n\n        // Translate from center-center origin to absolute coords\n        this._handleCropperResize._.startingRectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        }\n\n        this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n        if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n            return;\n        }\n\n        if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n            return;\n        }\n\n        // Translate back to center-center origin.\n        this.clipper.set({\n            top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n            left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n            width: this._handleCropperResize._.rectangle.width,\n            height: this._handleCropperResize._.rectangle.height\n        });\n\n        this._redrawCropperElements();\n    },\n\n    _calculateNewCropperSizeByDeltas: function(startingRectangle, deltaX, deltaY, cropperDirection) {\n        if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n            this._calculateNewCropperSizeByDeltas._ = {};\n        }\n\n        // Center deltas\n        this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n        this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n        this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n        this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n        this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n        // Lock the aspect ratio if needed\n        if (this.croppingConstraint) {\n            this._calculateNewCropperSizeByDeltas._.change = 0;\n\n            // Take into account the mouse direction and figure out the \"real\" change in cropper size\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'br':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n\n            if (this.croppingConstraint > 1) {\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n            } else {\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n            // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n        } else {\n            // Lock the aspect ratio\n            if (this.shiftKeyHeld &&\n                (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                    cropperDirection === 'bl' || cropperDirection === 'br')\n            ) {\n                this._calculateNewCropperSizeByDeltas._.ratio;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                }\n            }\n\n            if (cropperDirection.match(/t/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/b/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/r/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n            if (cropperDirection.match(/l/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n        }\n\n        this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n        this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n        this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n        this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n        return this._calculateNewCropperSizeByDeltas._.rectangle;\n    },\n\n    /**\n     * Set mouse cursor by it's position over cropper.\n     *\n     * @param ev\n     */\n    _setMouseCursor: function(ev) {\n        if (typeof this._setMouseCursor._ === 'undefined') {\n            this._setMouseCursor._ = {};\n        }\n\n        if (Garnish.isMobileBrowser(true)) {\n            return;\n        }\n        this._setMouseCursor._.cursor = 'default';\n        this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n        if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n            this._setMouseCursor._.cursor = 'pointer';\n        } else if (this._setMouseCursor._.handle) {\n            if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                this._setMouseCursor._.cursor = 'ns-resize';\n            } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                this._setMouseCursor._.cursor = 'ew-resize';\n            } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                this._setMouseCursor._.cursor = 'nwse-resize';\n            } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                this._setMouseCursor._.cursor = 'nesw-resize';\n            }\n        } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n            this._setMouseCursor._.cursor = 'move';\n        }\n\n        $('.body').css('cursor', this._setMouseCursor._.cursor);\n    },\n\n    /**\n     * Test whether the mouse cursor is on any cropper handles.\n     *\n     * @param ev\n     */\n    _cropperHandleHitTest: function(ev) {\n        if (typeof this._cropperHandleHitTest._ === 'undefined') {\n            this._cropperHandleHitTest._ = {};\n        }\n\n        this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n        this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n        this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n        this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n        this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n        this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n        // Left side top/bottom\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tl';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'bl';\n            }\n        }\n        // Right side top/bottom\n        if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tr';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'br';\n            }\n        }\n\n        // Left or right\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'l';\n        }\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'r';\n        }\n\n        // Top or bottom\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 't';\n        }\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 'b';\n        }\n\n        return false;\n    },\n\n    /**\n     * Test whether the mouse cursor is on a fabricJS object.\n     *\n     * @param object\n     * @param event\n     *\n     * @return boolean\n     */\n\n    _isMouseOver: function(event, object) {\n        if (typeof this._isMouseOver._ === 'undefined') {\n            this._isMouseOver._ = {};\n        }\n\n        this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n        this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n        this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._isMouseOver._.lb = object.left - object.width / 2;\n        this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n        this._isMouseOver._.tb = object.top - object.height / 2;\n        this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n        return (\n            this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n            this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n            this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n            this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n        );\n    },\n\n    /**\n     * Get vertices of a rectangle defined by left,top,height and width properties.\n     * Optionally it's possible to provide offsetX and offsetY values.\n     * Left and top properties of rectangle reference the top-left corner.\n     *\n     * @param rectangle\n     * @param [offsetX]\n     * @param [offsetY]\n     */\n    _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n        if (typeof this._getRectangleVertices._ === 'undefined') {\n            this._getRectangleVertices._ = {};\n        }\n\n        if (typeof offsetX === 'undefined') {\n            offsetX = 0;\n        }\n        if (typeof offsetY === 'undefined') {\n            offsetY = 0;\n        }\n\n        this._getRectangleVertices._.topLeft = {\n            x: rectangle.left + offsetX,\n            y: rectangle.top + offsetY\n        };\n\n        this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n        this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n        this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n        return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n    },\n\n    /**\n     * Set image vertice coordinates for an image that's been zoomed to fit.\n     */\n    _setFittedImageVerticeCoordinates: function() {\n        this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n    },\n\n    /**\n     * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n     * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n     *\n     * @param zoomMode\n     */\n    getImageVerticeCoords: function(zoomMode) {\n        var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n        var imageDimensions = this.getScaledImageDimensions();\n\n        var ratio;\n\n        if (typeof zoomMode === \"number\") {\n            ratio = zoomMode;\n        } else if (zoomMode === \"cover\") {\n            ratio = this.getZoomToCoverRatio(imageDimensions);\n        } else {\n            ratio = this.getZoomToFitRatio(imageDimensions);\n        }\n\n        // Get the dimensions of the scaled image\n        var scaledHeight = imageDimensions.height * ratio;\n        var scaledWidth = imageDimensions.width * ratio;\n\n        // Calculate the segments of the containing box for the image.\n        // When referring to top/bottom or right/left segments, these are on the\n        // right-side and bottom projection of the containing box for the zoomed out image.\n        var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n        var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n        var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n        var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n        // Calculate the offsets from editor box for the image-containing box\n        var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n        var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n        // Finally, calculate the image vertice coordinates\n        return {\n            a: {\n                x: horizontalOffset + rightHorizontalSegment,\n                y: verticalOffset\n            },\n            b: {\n                x: this.editorWidth - horizontalOffset,\n                y: verticalOffset + topVerticalSegment\n            },\n            c: {\n                x: horizontalOffset + leftHorizontalSegment,\n                y: this.editorHeight - verticalOffset\n            },\n            d: {\n                x: horizontalOffset,\n                y: verticalOffset + bottomVerticalSegment\n            }\n        };\n    },\n\n    /**\n     * Debug stuff by continuously rendering a fabric object on canvas.\n     *\n     * @param fabricObj\n     */\n    _debug: function(fabricObj) {\n        this.canvas.remove(this.debugger);\n        this.debugger = fabricObj;\n        this.canvas.add(this.debugger);\n    },\n\n    /**\n     * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n     * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n     * return true if the point is in the rectangle.\n     *\n     * Adapted from: http://stackoverflow.com/a/2763387/2040791\n     *\n     * @param points\n     * @param rectangle\n     */\n    arePointsInsideRectangle: function(points, rectangle) {\n        if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n            this.arePointsInsideRectangle._ = {};\n        }\n\n        // Pre-calculate the vectors and scalar products for two rectangle edges\n        this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n        this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n        this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n        this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n        for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n            this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n            // Calculate the vectors for two rectangle sides and for\n            // the vector from vertices a and b to the point P\n            this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n            this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n            // Calculate scalar or dot products for some vector combinations\n            this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n            this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n            this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n            this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n            if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    /**\n     * Returns an object representing the vector between points a and b.\n     *\n     * @param a\n     * @param b\n     */\n    _getVector: function(a, b) {\n        return {x: b.x - a.x, y: b.y - a.y};\n    },\n\n    /**\n     * Returns the scalar product of two vectors\n     *\n     * @param a\n     * @param b\n     */\n    _getScalarProduct: function(a, b) {\n        return a.x * b.x + a.y * b.y;\n    },\n\n    /**\n     * Returns the magnitude of a vector_redrawCropperElements\n     * .\n     *\n     * @param vector\n     */\n    _getVectorMagnitude: function(vector) {\n        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    },\n\n    /**\n     * Returns the angle between two vectors in degrees with two decimal points\n     *\n     * @param a\n     * @param b\n     */\n    _getAngleBetweenVectors: function(a, b) {\n        return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n    },\n\n    /**\n     * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n     *\n     * @param rectangle\n     * @param vertex\n     *\n     * @returns {*}\n     */\n    _getEdgeCrossed: function(rectangle, vertex) {\n        // Determine over which edge the vertex is\n        var edgePoints = [\n            [rectangle.a, rectangle.b],\n            [rectangle.b, rectangle.c],\n            [rectangle.c, rectangle.d],\n            [rectangle.d, rectangle.a]\n        ];\n\n        var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n        var smallestDiff = 180;\n        var edgeCrossed = null;\n\n        // Test each edge\n        for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n            var edge = edgePoints[edgeIndex];\n            var toCenter = this._getVector(edge[0], centerPoint);\n            var edgeVector = this._getVector(edge[0], edge[1]);\n            var toVertex = this._getVector(edge[0], vertex);\n\n            // If the angle between toCenter/toVertex is the sum of\n            // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n            // the edgeVector is between the other two meaning that this is the offending vertex.\n            // To avoid the rounding errors, we'll take the closest match\n            var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n            if (diff < smallestDiff) {\n                smallestDiff = diff;\n                edgeCrossed = edge;\n            }\n        }\n\n        return edgeCrossed;\n    },\n\n    /**\n     * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n     *\n     * @param dimensions\n     */\n    _getImageBoundingBox: function(dimensions) {\n        var box = {};\n\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        var proportion = dimensions.height / dimensions.width;\n        box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n        box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n        if (this.hasOrientationChanged()) {\n            var temp = box.width;\n            box.width = box.height;\n            box.height = temp;\n        }\n\n        return box;\n    }\n}, {\n    defaults: {\n        animationDuration: 100,\n        allowSavingAsNew: true,\n        onSave: $.noop,\n        allowDegreeFractions: null,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend({\n    $includeSubfoldersContainer: null,\n    $includeSubfoldersCheckbox: null,\n    showingIncludeSubfoldersCheckbox: false,\n\n    $uploadButton: null,\n    $uploadInput: null,\n    $progressBar: null,\n    $folders: null,\n\n    uploader: null,\n    promptHandler: null,\n    progressBar: null,\n\n    _uploadTotalFiles: 0,\n    _uploadFileProgress: {},\n    _uploadedAssetIds: [],\n    _currentUploaderSettings: {},\n\n    _assetDrag: null,\n    _folderDrag: null,\n    _expandDropTargetFolderTimeout: null,\n    _tempExpandedFolders: [],\n\n    _fileConflictTemplate: {\n        choices: [\n            {value: 'keepBoth', title: Craft.t('app', 'Keep both')}, {value: 'replace', title: Craft.t('app', 'Replace it')}\n        ]\n    },\n    _folderConflictTemplate: {\n        choices: [\n            {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')}, {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n        ]\n    },\n\n    init: function(elementType, $container, settings) {\n        this.base(elementType, $container, settings);\n\n        if (this.settings.context === 'index') {\n            if (!this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n        } else {\n            this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n            if (this.settings.modal) {\n                this.settings.modal.on('updateSizeAndPosition', this._positionProgressBar.bind(this));\n            }\n        }\n    },\n\n    initSources: function() {\n        if (this.settings.context === 'index' && !this._folderDrag) {\n            this._initIndexPageMode();\n        }\n\n        return this.base();\n    },\n\n    initSource: function($source) {\n        this.base($source);\n\n        this._createFolderContextMenu($source);\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                if ($source.data('folder-id')) {\n                    this._folderDrag.addItems($source.parent());\n                }\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    deinitSource: function($source) {\n        this.base($source);\n\n        // Does this source have a context menu?\n        var contextMenu = $source.data('contextmenu');\n\n        if (contextMenu) {\n            contextMenu.destroy();\n        }\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                this._folderDrag.removeItems($source.parent());\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    _getSourceLevel: function($source) {\n        return $source.parentsUntil('nav', 'ul').length;\n    },\n\n    /**\n     * Initialize the index page-specific features\n     */\n    _initIndexPageMode: function() {\n        if (this._folderDrag) {\n            return;\n        }\n\n        // Make the elements selectable\n        this.settings.selectable = true;\n        this.settings.multiSelect = true;\n\n        // Asset dragging\n        // ---------------------------------------------------------------------\n\n        this._assetDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n            filter: () => this.view.getSelectedElements().has('div.element[data-movable]'),\n            helper: $file => this._getFileDragHelper($file),\n            dropTargets: () => {\n                // Which data attribute should we be checking?\n                var attr;\n                if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                    attr = 'data-can-move-peer-files-to';\n                } else {\n                    attr = 'data-can-move-to';\n                }\n\n                var targets = [];\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder\n                    var $source = this.$sources.eq(i);\n                    if (Garnish.hasAttr($source, attr)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFileDragStop.bind(this),\n            helperBaseZindex: 800\n        });\n\n        // Folder dragging\n        // ---------------------------------------------------------------------\n\n        this._folderDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: () => {\n                // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                var $selected = this.sourceSelect.getSelectedItems(),\n                    draggees = [];\n\n                for (var i = 0; i < $selected.length; i++) {\n                    var $source = $selected.eq(i);\n\n                    if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                        continue;\n                    }\n\n                    if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                        draggees.push($source.parent()[0]);\n                    }\n                }\n\n                return $(draggees);\n            },\n\n            helper: $draggeeHelper => {\n                var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                    $helperNav = $('<nav/>').appendTo($helperSidebar),\n                    $helperUl = $('<ul/>').appendTo($helperNav);\n\n                $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                $draggeeHelper.children('a').addClass('sel');\n\n                // Match the style\n                $draggeeHelper.css({\n                    'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                    'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                    'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                    'padding-left': this._folderDrag.$draggee.css('padding-left')\n                });\n\n                return $helperSidebar;\n            },\n\n            dropTargets: () => {\n                var targets = [];\n\n                // Tag the dragged folder and it's subfolders\n                var draggedSourceIds = [];\n                this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                    draggedSourceIds.push($(this).data('key'));\n                });\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder and not one of the dragged folders\n                    var $source = this.$sources.eq(i),\n                        key = $source.data('key');\n\n                    if (!this._getFolderUidFromSourceKey(key)) {\n                        continue;\n                    }\n\n                    if (!Craft.inArray(key, draggedSourceIds)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFolderDragStop.bind(this),\n        });\n    },\n\n    /**\n     * On file drag stop\n     */\n    _onFileDragStop: function() {\n        if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n            // Keep it selected\n            var originatingSource = this.$source;\n\n            var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                originalAssetIds = [];\n\n            // For each file, prepare array data.\n            for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                originalAssetIds.push(originalAssetId);\n            }\n\n            // Are any files actually getting moved?\n            if (originalAssetIds.length) {\n                this.setIndexBusy();\n\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(originalAssetIds.length);\n                this.progressBar.showProgressBar();\n\n                // For each file to move a separate request\n                var parameterArray = [];\n                for (i = 0; i < originalAssetIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: {\n                            assetId: originalAssetIds[i],\n                            folderId: targetFolderId\n                        }\n                    });\n                }\n\n                // Define the callback for when all file moves are complete\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var response = responseArray[i];\n\n                        // Push prompt into prompt array\n                        if (response.conflict) {\n                            this.promptHandler.addPrompt({\n                                assetId: response.assetId,\n                                suggestedFilename: response.suggestedFilename,\n                                prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                            });\n                        }\n\n                        if (response.error) {\n                            alert(response.error);\n                        }\n                    }\n\n                    this.setIndexAvailable();\n                    this.progressBar.hideProgressBar();\n                    var reloadIndex = false;\n\n                    var performAfterMoveActions = function() {\n                        // Select original source\n                        this.sourceSelect.selectItem(originatingSource);\n\n                        // Make sure we use the correct offset when fetching the next page\n                        this._totalVisible -= this._assetDrag.$draggee.length;\n\n                        // And remove the elements that have been moved away\n                        for (var i = 0; i < originalAssetIds.length; i++) {\n                            $('[data-id=' + originalAssetIds[i] + ']').remove();\n                        }\n\n                        this.view.deselectAllElements();\n                        this._collapseExtraExpandedFolders(targetFolderId);\n\n                        if (reloadIndex) {\n                            this.updateElements();\n                        }\n                    };\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            var newParameterArray = [];\n\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    reloadIndex = true;\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'keepBoth') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            filename: returnData[i].suggestedFilename\n                                        }\n                                    });\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            force: true\n                                        }\n                                    });\n                                }\n                            }\n\n                            // Nothing to do, carry on\n                            if (newParameterArray.length === 0) {\n                                performAfterMoveActions.apply(this);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                // Move conflicting files again with resolutions now\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this._assetDrag.fadeOutHelpers();\n                        this.promptHandler.showBatchPrompts(promptCallback);\n                    } else {\n                        performAfterMoveActions.apply(this);\n                        this._assetDrag.fadeOutHelpers();\n                    }\n                };\n\n                // Initiate the file move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._assetDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * On folder drag stop\n     */\n    _onFolderDragStop: function() {\n        // Only move if we have a valid target and we're not trying to move into our direct parent\n        if (\n            this._folderDrag.$activeDropTarget &&\n            this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n        ) {\n            var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n            this._collapseExtraExpandedFolders(targetFolderId);\n\n            // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n            var folderIds = [];\n\n            for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                    folderId = $a.data('folder-id');\n\n                // Make sure it's not already in the target folder and use this single folder Id.\n                if (folderId != targetFolderId) {\n                    folderIds.push(folderId);\n                    break;\n                }\n            }\n\n            if (folderIds.length) {\n                folderIds.sort();\n                folderIds.reverse();\n\n                this.setIndexBusy();\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(folderIds.length);\n                this.progressBar.showProgressBar();\n\n                var parameterArray = [];\n\n                for (i = 0; i < folderIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-folder',\n                        params: {\n                            folderId: folderIds[i],\n                            parentId: targetFolderId\n                        }\n                    });\n                }\n\n                // Increment, so to avoid displaying folder files that are being moved\n                this.requestId++;\n\n                /*\n                 Here's the rundown:\n                 1) Send all the folders being moved\n                 2) Get results:\n                 a) For all conflicting, receive prompts and resolve them to get:\n                 b) For all valid move operations: by now server has created the needed folders\n                 in target destination. Server returns an array of file move operations\n                 c) server also returns a list of all the folder id changes\n                 d) and the data-id of node to be removed, in case of conflict\n                 e) and a list of folders to delete after the move\n                 3) From data in 2) build a large file move operation array\n                 4) Create a request loop based on this, so we can display progress bar\n                 5) when done, delete all the folders and perform other maintenance\n                 6) Champagne\n                 */\n\n                // This will hold the final list of files to move\n                var fileMoveList = [];\n\n                var newSourceKey = '';\n\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var data = responseArray[i];\n\n                        // If successful and have data, then update\n                        if (data.success) {\n                            if (data.transferList) {\n                                fileMoveList = data.transferList;\n                            }\n\n                            if (data.newFolderId) {\n                                newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                            }\n                        }\n\n                        // Push prompt into prompt array\n                        if (data.conflict) {\n                            data.prompt = {\n                                message: data.conflict,\n                                choices: this._folderConflictTemplate.choices\n                            };\n\n                            this.promptHandler.addPrompt(data);\n                        }\n\n                        if (data.error) {\n                            alert(data.error);\n                        }\n                    }\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            this.promptHandler.resetPrompts();\n\n                            var newParameterArray = [];\n\n                            var params = {};\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    params.force = true;\n                                }\n\n                                if (returnData[i].choice === 'merge') {\n                                    params.merge = true;\n                                }\n\n                                params.folderId = data.folderId;\n                                params.parentId = data.parentId;\n\n                                newParameterArray.push({\n                                    action: 'assets/move-folder',\n                                    params: params\n                                });\n                            }\n\n                            // Start working on them lists, baby\n                            if (newParameterArray.length === 0) {\n                                this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this.promptHandler.showBatchPrompts(promptCallback);\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                    } else {\n                        this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                    }\n                };\n\n                // Initiate the folder move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees until we get the Ajax response\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._folderDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * Really move the folder. Like really. For real.\n     */\n    _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n        this.progressBar.setItemCount(1);\n        this.progressBar.showProgressBar();\n\n        var moveCallback = folderDeleteList => {\n            // Delete the old folders\n            var counter = 0;\n            var limit = folderDeleteList.length;\n            for (var i = 0; i < folderDeleteList.length; i++) {\n                // When all folders are deleted, reload the sources.\n                Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, () => {\n                    if (++counter === limit) {\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        this._folderDrag.returnHelpersToDraggees();\n                        this.setInstanceState('selectedSource', newSourceKey);\n                        this.refreshSources();\n                    }\n                });\n            }\n        };\n\n        if (fileMoveList.length > 0) {\n            var parameterArray = [];\n\n            for (var i = 0; i < fileMoveList.length; i++) {\n                parameterArray.push({\n                    action: 'assets/move-asset',\n                    params: fileMoveList[i]\n                });\n            }\n            this._performBatchRequests(parameterArray, function() {\n                moveCallback(folderDeleteList);\n            });\n        } else {\n            moveCallback(folderDeleteList);\n        }\n    },\n\n    /**\n     * Returns the root level source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getRootSource: function($source) {\n        var $parent;\n        while (($parent = this._getParentSource($source)) && $parent.length) {\n            $source = $parent;\n        }\n        return $source;\n    },\n\n    /**\n     * Get parent source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getParentSource: function($source) {\n        if (this._getSourceLevel($source) > 1) {\n            return $source.parent().parent().siblings('a');\n        }\n    },\n\n    _selectSourceByFolderId: function(targetFolderId) {\n        var $targetSource = this._getSourceByKey(targetFolderId);\n\n        // Make sure that all the parent sources are expanded and this source is visible.\n        var $parentSources = $targetSource.parent().parents('li');\n\n        for (var i = 0; i < $parentSources.length; i++) {\n            var $parentSource = $($parentSources[i]);\n\n            if (!$parentSource.hasClass('expanded')) {\n                $parentSource.children('.toggle').trigger('click');\n            }\n        }\n\n        this.selectSource($targetSource);\n        this.updateElements();\n    },\n\n    /**\n     * Initialize the uploader.\n     *\n     * @private\n     */\n    afterInit: function() {\n        if (!this.$uploadButton) {\n            this.$uploadButton = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                'data-icon': 'upload',\n                style: 'position: relative; overflow: hidden;',\n                text: Craft.t('app', 'Upload files'),\n            });\n            this.addButton(this.$uploadButton);\n\n            this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n        }\n\n        this.promptHandler = new Craft.PromptHandler();\n        this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            fileInput: this.$uploadInput,\n            dropZone: this.$container\n        };\n\n        options.events = {\n            fileuploadstart: this._onUploadStart.bind(this),\n            fileuploadprogressall: this._onUploadProgress.bind(this),\n            fileuploaddone: this._onUploadComplete.bind(this),\n        };\n\n        if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        this._currentUploaderSettings = options;\n\n        this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n        this.$uploadButton.on('click', () => {\n            if (this.$uploadButton.hasClass('disabled')) {\n                return;\n            }\n            if (!this.isIndexBusy) {\n                this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n            }\n        });\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific volume in the URL?\n        if (this.settings.context === 'index' && typeof defaultVolumeHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n                if ($source.data('volume-handle') === defaultVolumeHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    onSelectSource: function() {\n        var $source = this._getSourceByKey(this.sourceKey);\n        var folderId = $source.data('folder-id');\n\n        if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n            this.uploader.setParams({\n                folderId: this.$source.attr('data-folder-id')\n            });\n            this.$uploadButton.removeClass('disabled');\n        } else {\n            this.$uploadButton.addClass('disabled');\n        }\n\n        // Update the URL if we're on the Assets index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'assets';\n            var $rootSource = this._getRootSource($source);\n            if ($rootSource && $rootSource.data('volume-handle')) {\n                uri += '/' + $rootSource.data('volume-handle');\n            }\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n\n        this.base();\n    },\n\n    _getFolderUidFromSourceKey: function(sourceKey) {\n        var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n        return m ? m[1] : null;\n    },\n\n    startSearching: function() {\n        // Does this source have subfolders?\n        if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n            if (this.$includeSubfoldersContainer === null) {\n                var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                    this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                    this.updateElements();\n                });\n            } else {\n                this.$includeSubfoldersContainer.velocity('stop');\n            }\n\n            var checked = this.getSelectedSourceState('includeSubfolders', false);\n            this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: 0,\n                opacity: 1\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = true;\n        }\n\n        this.base();\n    },\n\n    stopSearching: function() {\n        if (this.showingIncludeSubfoldersCheckbox) {\n            this.$includeSubfoldersContainer.velocity('stop');\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: -25,\n                opacity: 0\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = false;\n        }\n\n        this.base();\n    },\n\n    getViewParams: function() {\n        var data = this.base();\n\n        if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n            data.criteria.includeSubfolders = true;\n        }\n\n        return data;\n    },\n\n    /**\n     * React on upload submit.\n     *\n     * @private\n     */\n    _onUploadStart: function() {\n        this.setIndexBusy();\n\n        // Initial values\n        this._positionProgressBar();\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n\n        this.promptHandler.resetPrompts();\n    },\n\n    /**\n     * Update uploaded byte count.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On Upload Complete.\n     */\n    _onUploadComplete: function(event, data) {\n        var response = data.result;\n        var filename = data.files[0].name;\n\n        var doReload = true;\n\n        if (response.success || response.conflict) {\n            // Add the uploaded file to the selected ones, if appropriate\n            this._uploadedAssetIds.push(response.assetId);\n\n            // If there is a prompt, add it to the queue\n            if (response.conflict) {\n                response.prompt = {\n                    message: Craft.t('app', response.conflict, {file: response.filename}),\n                    choices: this._fileConflictTemplate.choices\n                };\n\n                this.promptHandler.addPrompt(response);\n            }\n\n            Craft.cp.runQueue();\n        } else {\n            if (response.error) {\n                alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n            } else {\n                alert(Craft.t('app', 'Upload failed for {filename}.', {filename}));\n            }\n\n            doReload = false;\n        }\n\n        // For the last file, display prompts, if any. If not - just update the element view.\n        if (this.uploader.isLastUpload()) {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n\n            if (this.promptHandler.getPromptCount()) {\n                this.promptHandler.showBatchPrompts(this._uploadFollowup.bind(this));\n            } else {\n                if (doReload) {\n                    this._updateAfterUpload();\n                }\n            }\n        }\n    },\n\n    /**\n     * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n     *\n     * @private\n     */\n    _updateAfterUpload: function() {\n        if (this.settings.context !== 'index') {\n            this.setSortAttribute('dateModified');\n            this.setSortDirection('desc');\n        }\n        this.updateElements();\n    },\n\n    /**\n     * Follow up to an upload that triggered at least one conflict resolution prompt.\n     *\n     * @param returnData\n     * @private\n     */\n    _uploadFollowup: function(returnData) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n\n        this.promptHandler.resetPrompts();\n\n        var finalCallback = () => {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n            this._updateAfterUpload();\n        };\n\n        this.progressBar.setItemCount(returnData.length);\n\n        var doFollowup = (parameterArray, parameterIndex, callback) => {\n            var postData = {};\n            var action = null;\n\n            var followupCallback = (data, textStatus) => {\n                if (textStatus === 'success' && data.assetId) {\n                    this._uploadedAssetIds.push(data.assetId);\n                } else if (data.error) {\n                    alert(data.error);\n                }\n                parameterIndex++;\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (parameterIndex === parameterArray.length) {\n                    callback();\n                } else {\n                    doFollowup(parameterArray, parameterIndex, callback);\n                }\n            };\n\n            if (parameterArray[parameterIndex].choice === 'replace') {\n                action = 'assets/replace-file';\n                postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                if (parameterArray[parameterIndex].conflictingAssetId) {\n                    postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                } else {\n                    postData.targetFilename = parameterArray[parameterIndex].filename;\n                }\n            } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                action = 'assets/delete-asset';\n                postData.assetId = parameterArray[parameterIndex].assetId;\n            }\n\n            if (!action) {\n                // We don't really need to do another request, so let's pretend that already happened\n                followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n            } else {\n                Craft.postActionRequest(action, postData, followupCallback);\n            }\n        };\n\n        this.progressBar.showProgressBar();\n        doFollowup(returnData, 0, finalCallback);\n    },\n\n    /**\n     * Perform actions after updating elements\n     * @private\n     */\n    onUpdateElements: function() {\n        this._onUpdateElements(false, this.view.getAllElements());\n        this.view.on('appendElements', ev => {\n            this._onUpdateElements(true, ev.newElements);\n        });\n\n        this.base();\n    },\n\n    /**\n     * Do the after-update initializations\n     * @private\n     */\n    _onUpdateElements: function(append, $newElements) {\n        if (this.settings.context === 'index') {\n            if (!append) {\n                this._assetDrag.removeAllItems();\n            }\n\n            this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n        }\n\n        // See if we have freshly uploaded files to add to selection\n        if (this._uploadedAssetIds.length) {\n            if (this.view.settings.selectable) {\n                for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                    this.view.selectElementById(this._uploadedAssetIds[i]);\n                }\n            }\n\n            // Reset the list.\n            this._uploadedAssetIds = [];\n        }\n\n        this.base(append, $newElements);\n\n        this.removeListener(this.$elements, 'keydown');\n        this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n        this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item).find('.element');\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    _onDragStart: function() {\n        this._tempExpandedFolders = [];\n    },\n\n    /**\n     * Get File Drag Helper\n     */\n    _getFileDragHelper: function($element) {\n        var currentView = this.getSelectedSourceState('mode');\n        var $outerContainer;\n        var $innerContainer;\n\n        switch (currentView) {\n            case 'table': {\n                $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                var $tbody = $('<tbody/>').appendTo($table);\n\n                $element.appendTo($tbody);\n\n                // Copy the column widths\n                this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                var $helperCells = $element.children();\n\n                for (var i = 0; i < $helperCells.length; i++) {\n                    // Hard-set the cell widths\n                    var $helperCell = $($helperCells[i]);\n\n                    // Skip the checkbox cell\n                    if ($helperCell.hasClass('checkbox-cell')) {\n                        $helperCell.remove();\n                        $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                        continue;\n                    }\n\n                    var $firstRowCell = $(this._$firstRowCells[i]),\n                        width = $firstRowCell.width();\n\n                    $firstRowCell.width(width);\n                    $helperCell.width(width);\n                }\n\n                return $outerContainer;\n            }\n            case 'thumbs': {\n                $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                $element.appendTo($innerContainer);\n\n                return $outerContainer;\n            }\n        }\n\n        return $();\n    },\n\n    /**\n     * On Drop Target Change\n     */\n    _onDropTargetChange: function($dropTarget) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        if ($dropTarget) {\n            var folderId = $dropTarget.data('folder-id');\n\n            if (folderId) {\n                this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                    this._expandDropTargetFolderTimeout = setTimeout(this._expandFolder.bind(this), 500);\n                }\n            } else {\n                this.dropTargetFolder = null;\n            }\n        }\n\n        if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n            // Temporarily remove the .sel class on the active source\n            this.$source.removeClass('sel');\n        } else {\n            this.$source.addClass('sel');\n        }\n    },\n\n    /**\n     * Collapse Extra Expanded Folders\n     */\n    _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        // If a source ID is passed in, exclude its parents\n        var $excludedSources;\n\n        if (dropTargetFolderId) {\n            $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n        }\n\n        for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n            var $source = this._tempExpandedFolders[i];\n\n            // Check the parent list, if a source id is passed in\n            if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                this._collapseFolder($source);\n                this._tempExpandedFolders.splice(i, 1);\n            }\n        }\n    },\n\n    _getSourceByKey: function(key) {\n        return this.$sources.filter('[data-key$=\"' + key + '\"]');\n    },\n\n    _hasSubfolders: function($source) {\n        return $source.siblings('ul').find('li').length;\n    },\n\n    _isExpanded: function($source) {\n        return $source.parent('li').hasClass('expanded');\n    },\n\n    _expandFolder: function() {\n        // Collapse any temp-expanded drop targets that aren't parents of this one\n        this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n        this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n        // Keep a record of that\n        this._tempExpandedFolders.push(this.dropTargetFolder);\n    },\n\n    _collapseFolder: function($source) {\n        if ($source.parent().hasClass('expanded')) {\n            $source.siblings('.toggle').trigger('click');\n        }\n    },\n\n    _createFolderContextMenu: function($source) {\n        // Make sure it's a volume folder\n        if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n            return;\n        }\n\n        var menuOptions = [\n            {\n                label: Craft.t('app', 'New subfolder'),\n                onClick: () => {\n                    this._createSubfolder($source);\n                },\n            },\n        ];\n\n        // For all folders that are not top folders\n        if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n            menuOptions.push({\n                label: Craft.t('app', 'Rename folder'),\n                onClick: () => {\n                    this._renameFolder($source);\n                },\n            });\n            menuOptions.push({\n                label: Craft.t('app', 'Delete folder'),\n                onClick: () => {\n                    this._deleteFolder($source);\n                },\n            });\n        }\n\n        new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n    },\n\n    _createSubfolder: function($parentFolder) {\n        var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n        if (subfolderName) {\n            var params = {\n                parentId: $parentFolder.data('folder-id'),\n                folderName: subfolderName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/create-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    this._prepareParentForChildren($parentFolder);\n\n                    var $subfolder = $(\n                        '<li>' +\n                        '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                        ' data-folder-id=\"' + data.folderId + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                        '>' +\n                        data.folderName +\n                        '</a>' +\n                        '</li>'\n                    );\n\n                    var $a = $subfolder.children('a:first');\n                    this._appendSubfolder($parentFolder, $subfolder);\n                    this.initSource($a);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    _deleteFolder: function($targetFolder) {\n        if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n            var params = {\n                folderId: $targetFolder.data('folder-id')\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/delete-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    var $parentFolder = this._getParentSource($targetFolder);\n\n                    // Remove folder and any trace from its parent, if needed\n                    this.deinitSource($targetFolder);\n\n                    $targetFolder.parent().remove();\n                    this._cleanUpTree($parentFolder);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    /**\n     * Rename\n     */\n    _renameFolder: function($targetFolder) {\n        var oldName = $.trim($targetFolder.text()),\n            newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n        if (newName && newName !== oldName) {\n            var params = {\n                folderId: $targetFolder.data('folder-id'),\n                newName: newName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/rename-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    $targetFolder.text(data.newName);\n\n                    // If the current folder was renamed.\n                    if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                        this.updateElements();\n                    }\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, 'json');\n        }\n    },\n\n    /**\n     * Prepare a source folder for children folder.\n     *\n     * @param $parentFolder\n     * @private\n     */\n    _prepareParentForChildren: function($parentFolder) {\n        if (!this._hasSubfolders($parentFolder)) {\n            $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n            this.initSourceToggle($parentFolder);\n        }\n    },\n\n    /**\n     * Appends a subfolder to the parent folder at the correct spot.\n     *\n     * @param $parentFolder\n     * @param $subfolder\n     * @private\n     */\n    _appendSubfolder: function($parentFolder, $subfolder) {\n        var $subfolderList = $parentFolder.siblings('ul'),\n            $existingChildren = $subfolderList.children('li'),\n            subfolderLabel = $.trim($subfolder.children('a:first').text()),\n            folderInserted = false;\n\n        for (var i = 0; i < $existingChildren.length; i++) {\n            var $existingChild = $($existingChildren[i]);\n\n            if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                $existingChild.before($subfolder);\n                folderInserted = true;\n                break;\n            }\n        }\n\n        if (!folderInserted) {\n            $parentFolder.siblings('ul').append($subfolder);\n        }\n    },\n\n    _cleanUpTree: function($parentFolder) {\n        if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n            this.deinitSourceToggle($parentFolder);\n            $parentFolder.siblings('ul').remove();\n            $parentFolder.siblings('.toggle').remove();\n            $parentFolder.parent().removeClass('expanded');\n        }\n    },\n\n    _positionProgressBar: function() {\n        if (!this.progressBar) {\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n        }\n\n        var $container = $(),\n            scrollTop = 0,\n            offset = 0;\n\n        if (this.settings.context === 'index') {\n            $container = this.progressBar.$progressBar.closest('#content');\n            scrollTop = Garnish.$win.scrollTop();\n        } else {\n            $container = this.progressBar.$progressBar.closest('.main');\n            scrollTop = this.$main.scrollTop();\n        }\n\n        var containerTop = $container.offset().top;\n        var diff = scrollTop - containerTop;\n        var windowHeight = Garnish.$win.height();\n\n        if ($container.height() > windowHeight) {\n            offset = (windowHeight / 2) - 6 + diff;\n        } else {\n            offset = ($container.height() / 2) - 6;\n        }\n\n        if (this.settings.context !== 'index') {\n            offset = scrollTop + (($container.height() / 2) - 6);\n        }\n\n        this.progressBar.$progressBar.css({\n            top: offset\n        });\n    },\n\n    _performBatchRequests: function(parameterArray, finalCallback) {\n        var responseArray = [];\n\n        var doRequest = parameters => {\n            Craft.postActionRequest(parameters.action, parameters.params, (data, textStatus) => {\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (textStatus === 'success') {\n                    responseArray.push(data);\n\n                    // If assets were just merged we should get the reference tags updated right away\n                    Craft.cp.runQueue();\n                }\n\n                if (responseArray.length >= parameterArray.length) {\n                    finalCallback(responseArray);\n                }\n            });\n        };\n\n        for (var i = 0; i < parameterArray.length; i++) {\n            doRequest(parameterArray[i]);\n        }\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend({\n    requestId: 0,\n    hud: null,\n    $uploadBtn: null,\n    uploader: null,\n    progressBar: null,\n\n    originalFilename: '',\n    originalExtension: '',\n\n    init: function() {\n        if (arguments.length > 0 && typeof arguments[0] === 'object') {\n            arguments[0].editorSettings = {\n                onShowHud: this.resetOriginalFilename.bind(this),\n                onCreateForm: this._renameHelper.bind(this),\n                validators: [\n                    this.validateElementForm.bind(this),\n                ],\n            };\n        }\n\n        this.base.apply(this, arguments);\n\n        if (this.settings.canUpload) {\n            this._attachUploader();\n        }\n\n        this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n        this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.elementSelect.$focusedItem;\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item);\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n    },\n\n    /**\n     * Create the element editor\n     */\n    createElementEditor: function($element) {\n        return this.base($element, {\n            params: {\n                defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n            },\n            input: this\n        });\n    },\n\n    /**\n     * Attach the uploader with drag event handler\n     */\n    _attachUploader: function() {\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            dropZone: this.$container,\n            formData: {\n                fieldId: this.settings.fieldId,\n            }\n        };\n\n        if (this.settings.sourceElementId) {\n            options.formData.elementId = this.settings.sourceElementId;\n        }\n\n        if (this.settings.criteria.siteId) {\n            options.formData.siteId = this.settings.criteria.siteId;\n        }\n\n        if (this.$addElementBtn) {\n            this.$uploadBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn dashed',\n                'data-icon': 'upload',\n                text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n            }).insertAfter(this.$addElementBtn);\n            options.fileInput = $('<input/>', {\n                type: 'file',\n                class: 'hidden',\n                multiple: this.settings.limit != 1,\n            }).insertAfter(this.$uploadBtn);\n\n            // Trigger a window resize in case the field is inside an element editor HUD\n            Garnish.$win.trigger('resize');\n        }\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        if (typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        options.canAddMoreFiles = this.canAddMoreFiles.bind(this);\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        if (this.$uploadBtn) {\n            this.$uploadBtn.on('click', ev => {\n                // We can't store a reference to the file input, because it gets replaced with a new input\n                // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                this.$uploadBtn.next('input[type=file]').trigger('click');\n            });\n        }\n    },\n\n    refreshThumbnail: function(elementId) {\n        var parameters = {\n            elementId: elementId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, data => {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                this.thumbLoader.load($existing);\n            }\n        });\n    },\n\n    /**\n     * Add the freshly uploaded file to the input field.\n     */\n    selectUploadedFile: function(element) {\n        // Check if we're able to add new elements\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        var $newElement = element.$element;\n\n        // Make a couple tweaks\n        $newElement.addClass('removable');\n        $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        $newElement.appendTo(this.$elementsContainer);\n\n        var margin = -($newElement.outerWidth() + 10);\n\n        this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addElementBtn.velocity(animateCss, 'fast');\n\n        this.addElements($newElement);\n\n        delete this.modal;\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function() {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var parameters = {\n                elementId: data.result.assetId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, data => {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var html = $(data.html);\n                    Craft.appendHeadHtml(data.headHtml);\n                    this.selectUploadedFile(Craft.getElementInfo(html));\n                }\n\n                // Last file\n                if (this.uploader.isLastUpload()) {\n                    this.progressBar.hideProgressBar();\n                    this.$container.removeClass('uploading');\n\n                    if (window.draftEditor) {\n                        window.draftEditor.checkForm();\n                    }\n                }\n            });\n\n            Craft.cp.runQueue();\n        }\n    },\n\n    /**\n     * We have to take into account files about to be added as well\n     */\n    canAddMoreFiles: function(slotsTaken) {\n        return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n    },\n\n    /**\n     * Parse the passed filename into the base filename and extension.\n     *\n     * @param filename\n     * @returns {{extension: string, baseFileName: string}}\n     */\n    _parseFilename: function(filename) {\n        var parts = filename.split('.'),\n            extension = '';\n\n        if (parts.length > 1) {\n            extension = parts.pop();\n        }\n        var baseFileName = parts.join('.');\n        return {extension: extension, baseFileName: baseFileName};\n    },\n\n    /**\n     * A helper function or the filename field.\n     * @private\n     */\n    _renameHelper: function($form) {\n        $('.renameHelper', $form).on('focus', e => {\n            var input = e.currentTarget,\n                filename = this._parseFilename(input.value);\n\n            if (this.originalFilename === '' && this.originalExtension === '') {\n                this.originalFilename = filename.baseFileName;\n                this.originalExtension = filename.extension;\n            }\n\n            var startPos = 0,\n                endPos = filename.baseFileName.length;\n\n            if (typeof input.selectionStart !== 'undefined') {\n                input.selectionStart = startPos;\n                input.selectionEnd = endPos;\n            } else if (document.selection && document.selection.createRange) {\n                // IE branch\n                input.select();\n                var range = document.selection.createRange();\n                range.collapse(true);\n                range.moveEnd(\"character\", endPos);\n                range.moveStart(\"character\", startPos);\n                range.select();\n            }\n        });\n    },\n\n    resetOriginalFilename: function() {\n        this.originalFilename = \"\";\n        this.originalExtension = \"\";\n    },\n\n    validateElementForm: function() {\n        var $filenameField = $('.renameHelper', this.elementEditor.hud.$hud.data('elementEditor').$form);\n        var filename = this._parseFilename($filenameField.val());\n\n        if (filename.extension !== this.originalExtension) {\n            // Blank extension\n            if (filename.extension === '') {\n                // If filename changed as well, assume removal of extension a mistake\n                if (this.originalFilename !== filename.baseFileName) {\n                    $filenameField.val(filename.baseFileName + '.' + this.originalExtension);\n                    return true;\n                } else {\n                    // If filename hasn't changed, make sure they want to remove extension\n                    return confirm(Craft.t('app', \"Are you sure you want to remove the extension “.{ext}”?\", {ext: this.originalExtension}));\n                }\n            } else {\n                // If the extension has changed, make sure it s intentional\n                return confirm(Craft.t('app', \"Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?\",\n                    {\n                        oldExt: this.originalExtension,\n                        newExt: filename.extension\n                    }));\n            }\n        }\n        return true;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend({\n    $selectTransformBtn: null,\n    _selectedTransform: null,\n\n    init: function(elementType, settings) {\n        settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n        this.base(elementType, settings);\n\n        if (settings.transforms.length) {\n            this.createSelectTransformButton(settings.transforms);\n        }\n    },\n\n    createSelectTransformButton: function(transforms) {\n        if (!transforms || !transforms.length) {\n            return;\n        }\n\n        var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n        this.$selectBtn.appendTo($btnGroup);\n\n        this.$selectTransformBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn disabled',\n            text: Craft.t('app', 'Select transform'),\n        }).appendTo($btnGroup);\n\n        var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n            $menuList = $('<ul></ul>').appendTo($menu);\n\n        for (var i = 0; i < transforms.length; i++) {\n            $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n        }\n\n        var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n            onOptionSelect: this.onSelectTransform.bind(this),\n        });\n        MenuButton.disable();\n\n        this.$selectTransformBtn.data('menuButton', MenuButton);\n    },\n\n    onSelectionChange: function(ev) {\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            allowTransforms = false;\n\n        if ($selectedElements.length && this.settings.transforms.length) {\n            allowTransforms = true;\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                    break;\n                }\n            }\n        }\n\n        var MenuBtn = null;\n\n        if (this.$selectTransformBtn) {\n            MenuBtn = this.$selectTransformBtn.data('menuButton');\n        }\n\n        if (allowTransforms) {\n            if (MenuBtn) {\n                MenuBtn.enable();\n            }\n\n            this.$selectTransformBtn.removeClass('disabled');\n        } else if (this.$selectTransformBtn) {\n            if (MenuBtn) {\n                MenuBtn.disable();\n            }\n\n            this.$selectTransformBtn.addClass('disabled');\n        }\n\n        this.base();\n    },\n\n    onSelectTransform: function(option) {\n        var transform = $(option).data('transform');\n        this.selectImagesWithTransform(transform);\n    },\n\n    selectImagesWithTransform: function(transform) {\n        // First we must get any missing transform URLs\n        if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n            Craft.AssetSelectorModal.transformUrls[transform] = {};\n        }\n\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            imageIdsWithMissingUrls = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $item = $($selectedElements[i]),\n                elementId = Craft.getElementInfo($item).id;\n\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                imageIdsWithMissingUrls.push(elementId);\n            }\n        }\n\n        if (imageIdsWithMissingUrls.length) {\n            this.showFooterSpinner();\n\n            this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, () => {\n                this.hideFooterSpinner();\n                this.selectImagesWithTransform(transform);\n            });\n        } else {\n            this._selectedTransform = transform;\n            this.selectElements();\n            this._selectedTransform = null;\n        }\n    },\n\n    fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n        var elementId = imageIdsWithMissingUrls.pop();\n\n        var data = {\n            assetId: elementId,\n            handle: transform\n        };\n\n        Craft.postActionRequest('assets/generate-transform', data, (response, textStatus) => {\n            Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n            if (textStatus === 'success') {\n                if (response.url) {\n                    Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                }\n            }\n\n            // More to load?\n            if (imageIdsWithMissingUrls.length) {\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n            } else {\n                callback();\n            }\n        });\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = this.base($selectedElements);\n\n        if (this._selectedTransform) {\n            for (var i = 0; i < info.length; i++) {\n                var elementId = info[i].id;\n\n                if (\n                    typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                    Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                ) {\n                    info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                }\n            }\n        }\n\n        return info;\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo, this._selectedTransform);\n    }\n}, {\n    defaults: {\n        canSelectImageTransforms: false,\n        transforms: []\n    },\n\n    transformUrls: {}\n});\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend({\n    remainingSessionTime: null,\n    checkRemainingSessionTimer: null,\n    showLoginModalTimer: null,\n    decrementLogoutWarningInterval: null,\n\n    showingLogoutWarningModal: false,\n    showingLoginModal: false,\n\n    logoutWarningModal: null,\n    loginModal: null,\n\n    $logoutWarningPara: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $loginBtn: null,\n    $loginErrorPara: null,\n\n    submitLoginIfLoggedOut: false,\n\n    /**\n     * Init\n     */\n    init: function() {\n        this.updateRemainingSessionTime(Craft.remainingSessionTime);\n    },\n\n    /**\n     * Sets a timer for the next time to check the auth timeout.\n     */\n    setCheckRemainingSessionTimer: function(seconds) {\n        if (this.checkRemainingSessionTimer) {\n            clearTimeout(this.checkRemainingSessionTimer);\n        }\n\n        this.checkRemainingSessionTimer = setTimeout(this.checkRemainingSessionTime.bind(this), seconds * 1000);\n    },\n\n    /**\n     * Pings the server to see how many seconds are left on the current user session, and handles the response.\n     */\n    checkRemainingSessionTime: function(extendSession) {\n        $.ajax({\n            url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n            type: 'GET',\n            dataType: 'json',\n            complete: (jqXHR, textStatus) => {\n                if (textStatus === 'success') {\n                    if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                        Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                    }\n\n                    this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                    this.submitLoginIfLoggedOut = false;\n                } else {\n                    this.updateRemainingSessionTime(-1);\n                }\n            },\n        });\n    },\n\n    /**\n     * Updates our record of the auth timeout, and handles it.\n     */\n    updateRemainingSessionTime: function(remainingSessionTime) {\n        this.remainingSessionTime = parseInt(remainingSessionTime);\n\n        // Are we within the warning window?\n        if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n            // Is there still time to renew the session?\n            if (this.remainingSessionTime) {\n                if (!this.showingLogoutWarningModal) {\n                    // Show the warning modal\n                    this.showLogoutWarningModal();\n                }\n\n                // Will the session expire before the next checkup?\n                if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                    if (this.showLoginModalTimer) {\n                        clearTimeout(this.showLoginModalTimer);\n                    }\n\n                    this.showLoginModalTimer = setTimeout(this.showLoginModal.bind(this), this.remainingSessionTime * 1000);\n                }\n            } else {\n                if (this.showingLoginModal) {\n                    if (this.submitLoginIfLoggedOut) {\n                        this.submitLogin();\n                    }\n                } else {\n                    // Show the login modal\n                    this.showLoginModal();\n                }\n            }\n\n            this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n        } else {\n            // Everything's good!\n            this.hideLogoutWarningModal();\n            this.hideLoginModal();\n\n            // Will be be within the minSafeSessionTime before the next update?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n            } else {\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the logout warning modal.\n     */\n    showLogoutWarningModal: function() {\n        var quickShow;\n\n        if (this.showingLoginModal) {\n            this.hideLoginModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLogoutWarningModal = true;\n\n        if (!this.logoutWarningModal) {\n            let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n            let $body = $('<div class=\"body\"/>').appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $logoutBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Log out now'),\n            }).appendTo($buttons);\n            let $renewSessionBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Keep me logged in'),\n            }).appendTo($buttons);\n\n            this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n            this.logoutWarningModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                onFadeIn: function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the renew button\n                        setTimeout(function() {\n                            $renewSessionBtn.trigger('focus');\n                        }, 100);\n                    }\n                }\n            });\n\n            this.addListener($logoutBtn, 'activate', 'logout');\n            this.addListener($form, 'submit', 'renewSession');\n        }\n\n        if (quickShow) {\n            this.logoutWarningModal.quickShow();\n        } else {\n            this.logoutWarningModal.show();\n        }\n\n        this.updateLogoutWarningMessage();\n\n        this.decrementLogoutWarningInterval = setInterval(this.decrementLogoutWarning.bind(this), 1000);\n    },\n\n    /**\n     * Updates the logout warning message indicating that the session is about to expire.\n     */\n    updateLogoutWarningMessage: function() {\n        this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n            time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n        }));\n\n        this.logoutWarningModal.updateSizeAndPosition();\n    },\n\n    decrementLogoutWarning: function() {\n        if (this.remainingSessionTime > 0) {\n            this.remainingSessionTime--;\n            this.updateLogoutWarningMessage();\n        }\n\n        if (this.remainingSessionTime === 0) {\n            clearInterval(this.decrementLogoutWarningInterval);\n        }\n    },\n\n    /**\n     * Hides the logout warning modal.\n     */\n    hideLogoutWarningModal: function(quick) {\n        this.showingLogoutWarningModal = false;\n\n        if (this.logoutWarningModal) {\n            if (quick) {\n                this.logoutWarningModal.quickHide();\n            } else {\n                this.logoutWarningModal.hide();\n            }\n\n            if (this.decrementLogoutWarningInterval) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the login modal.\n     */\n    showLoginModal: function() {\n        var quickShow;\n\n        if (this.showingLogoutWarningModal) {\n            this.hideLogoutWarningModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLoginModal = true;\n\n        if (!this.loginModal) {\n            var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$loginBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Login'),\n            }).appendTo($buttonContainer);\n            this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.loginModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark loginmodalshade',\n                onFadeIn: () => {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the password input\n                        setTimeout(() => {\n                            this.$passwordInput.trigger('focus');\n                        }, 100);\n                    }\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($form, 'submit', 'login');\n        }\n\n        if (quickShow) {\n            this.loginModal.quickShow();\n        } else {\n            this.loginModal.show();\n        }\n    },\n\n    /**\n     * Hides the login modal.\n     */\n    hideLoginModal: function(quick) {\n        this.showingLoginModal = false;\n\n        if (this.loginModal) {\n            if (quick) {\n                this.loginModal.quickHide();\n            } else {\n                this.loginModal.hide();\n            }\n        }\n    },\n\n    logout: function() {\n        $.get({\n            url: Craft.getActionUrl('users/logout'),\n            dataType: 'json',\n            success: () => {\n                Craft.redirectTo('');\n            },\n        });\n    },\n\n    renewSession: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        this.hideLogoutWarningModal();\n        this.checkRemainingSessionTime(true);\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$loginBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$loginBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    login: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.validatePassword()) {\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            if (typeof Craft.csrfTokenValue !== 'undefined') {\n                // Check the auth status one last time before sending this off,\n                // in case the user has already logged back in from another window/tab\n                this.submitLoginIfLoggedOut = true;\n                this.checkRemainingSessionTime();\n            } else {\n                this.submitLogin();\n            }\n        }\n    },\n\n    submitLogin: function() {\n        var data = {\n            loginName: Craft.username,\n            password: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/login', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.hideLoginModal();\n                    this.checkRemainingSessionTime();\n                } else {\n                    this.showLoginError(response.error);\n                    Garnish.shake(this.loginModal.$container);\n\n                    if (!Garnish.isMobileBrowser(true)) {\n                        this.$passwordInput.trigger('focus');\n                    }\n                }\n            } else {\n                this.showLoginError();\n            }\n        });\n    },\n\n    showLoginError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$loginErrorPara.text(error);\n        this.loginModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showLoginError('');\n    }\n}, {\n    checkInterval: 60,\n    minSafeSessionTime: 120\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend({\n    authManager: null,\n\n    $nav: null,\n    $mainContainer: null,\n    $alerts: null,\n    $crumbs: null,\n    $notificationContainer: null,\n    $main: null,\n    $primaryForm: null,\n    $headerContainer: null,\n    $header: null,\n    $mainContent: null,\n    $details: null,\n    $tabsContainer: null,\n    $tabsList: null,\n    $tabs: null,\n    $overflowTabBtn: null,\n    $overflowTabList: null,\n    $selectedTab: null,\n    selectedTabIndex: null,\n    $sidebarContainer: null,\n    $sidebar: null,\n    $contentContainer: null,\n    $edition: null,\n\n    $confirmUnloadForms: null,\n    $deltaForms: null,\n    $collapsibleTables: null,\n\n    fixedHeader: false,\n\n    enableQueue: true,\n    totalJobs: 0,\n    jobInfo: null,\n    displayedJobInfo: null,\n    displayedJobInfoUnchanged: 1,\n    trackJobProgressTimeout: null,\n    jobProgressIcon: null,\n\n    checkingForUpdates: false,\n    forcingRefreshOnUpdatesCheck: false,\n    includingDetailsOnUpdatesCheck: false,\n    checkForUpdatesCallbacks: null,\n\n    init: function() {\n        // Is this session going to expire?\n        if (Craft.remainingSessionTime !== 0) {\n            this.authManager = new Craft.AuthManager();\n        }\n\n        // Find all the key elements\n        this.$nav = $('#nav');\n        this.$mainContainer = $('#main-container');\n        this.$alerts = $('#alerts');\n        this.$crumbs = $('#crumbs');\n        this.$notificationContainer = $('#notifications');\n        this.$main = $('#main');\n        this.$primaryForm = $('#main-form');\n        this.$headerContainer = $('#header-container');\n        this.$header = $('#header');\n        this.$mainContent = $('#main-content');\n        this.$details = $('#details');\n        this.$sidebarContainer = $('#sidebar-container');\n        this.$sidebar = $('#sidebar');\n        this.$contentContainer = $('#content-container');\n        this.$collapsibleTables = $('table.collapsible');\n\n        this.updateSidebarMenuLabel();\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        if (this.$header.length) {\n            this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n            this.updateFixedHeader();\n        }\n\n        Garnish.$doc.ready(() => {\n            // Update responsive tables on window resize\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n            this.handleWindowResize();\n\n            // Fade the notification out two seconds after page load\n            var $errorNotifications = this.$notificationContainer.children('.error'),\n                $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n            $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n            $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n            // Wait a frame before initializing any confirm-unload forms,\n            // so other JS that runs on ready() has a chance to initialize\n            Garnish.requestAnimationFrame(this.initSpecialForms.bind(this));\n        });\n\n        // Alerts\n        if (this.$alerts.length) {\n            this.initAlerts();\n        }\n\n        // Toggles\n        this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n        this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n        // Does this page have a primary form?\n        if (!this.$primaryForm.length) {\n            this.$primaryForm = $('form[data-saveshortcut]:first');\n        }\n\n        // Does the primary form support the save shortcut?\n        if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n            let shortcuts = [];\n            let actions = this.$primaryForm.data('actions');\n            if (typeof actions === 'undefined') {\n                shortcuts.push([\n                    {\n                        keyCode: Garnish.S_KEY,\n                        ctrl: true,\n                    }, {\n                        redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                        retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                    }\n                ]);\n            } else {\n                for (let i = 0; i < actions.length; i++) {\n                    let action = actions[i];\n                    if (!action.shortcut) {\n                        continue;\n                    }\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                            shift: !!action.shift,\n                        }, {\n                            action: action.action,\n                            redirect: action.redirect,\n                            confirm: action.confirm,\n                            params: action.params,\n                            data: action.data,\n                            retainScroll: action.retainScroll,\n                        }\n                    ]);\n                }\n            }\n            for (let i = 0; i < shortcuts.length; i++) {\n                Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                    this.submitPrimaryForm(shortcuts[i][1]);\n                });\n            }\n        }\n\n        this.initTabs();\n\n        // Should we match the previous scroll position?\n        let scrollY = Craft.getLocalStorage('scrollY');\n        if (typeof scrollY !== 'undefined') {\n            Craft.removeLocalStorage('scrollY');\n            Garnish.$doc.ready(() => {\n                Garnish.requestAnimationFrame(() => {\n                    window.scrollTo(0, scrollY);\n                });\n            });\n        }\n\n        if ($.isTouchCapable()) {\n            this.$mainContainer.on('focus', 'input, textarea, .focusable-input', this._handleInputFocus.bind(this));\n            this.$mainContainer.on('blur', 'input, textarea, .focusable-input', this._handleInputBlur.bind(this));\n        }\n    },\n\n    initSpecialForms: function() {\n        // Look for forms that we should watch for changes on\n        this.$confirmUnloadForms = $('form[data-confirm-unload]');\n        this.$deltaForms = $('form[data-delta]');\n\n        if (!this.$confirmUnloadForms.length) {\n            return;\n        }\n\n        var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n        var $form, serialized;\n\n        for (var i = 0; i < $forms.length; i++) {\n            $form = $forms.eq(i);\n            if (!$form.data('initialSerializedValue')) {\n                if (typeof $form.data('serializer') === 'function') {\n                    serialized = $form.data('serializer')();\n                } else {\n                    serialized = $form.serialize();\n                }\n                $form.data('initialSerializedValue', serialized);\n            }\n            this.addListener($form, 'submit', function(ev) {\n                if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                    this.removeListener(Garnish.$win, 'beforeunload');\n                }\n                if (Garnish.hasAttr($form, 'data-delta')) {\n                    ev.preventDefault();\n                    var serialized;\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                    Craft.createForm(data)\n                        .appendTo(Garnish.$bod)\n                        .submit();\n                }\n            });\n        }\n\n        this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n            var confirmUnload = false;\n            var $form, serialized;\n            if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                confirmUnload = true;\n            } else {\n                for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                    $form = this.$confirmUnloadForms.eq(i);\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    if ($form.data('initialSerializedValue') !== serialized) {\n                        confirmUnload = true;\n                        break;\n                    }\n                }\n            }\n\n            if (confirmUnload) {\n                var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                if (ev) {\n                    ev.originalEvent.returnValue = message;\n                } else {\n                    window.event.returnValue = message;\n                }\n\n                return message;\n            }\n        });\n    },\n\n    _handleInputFocus: function() {\n        this.updateFixedHeader();\n    },\n\n    _handleInputBlur: function() {\n        this.updateFixedHeader();\n    },\n\n    /**\n     * Submits a form.\n     * @param {Object} [options]\n     * @param {string} [options.action] The `action` param value override\n     * @param {string} [options.redirect] The `redirect` param value override\n     * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n     * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n     * @param {Object} [options.data] Additional data to be passed to the submit event\n     * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n     */\n    submitPrimaryForm: function(options) {\n        // Give other stuff on the page a chance to prepare\n        this.trigger('beforeSaveShortcut');\n\n        if (typeof options !== 'object' || !$.isPlainObject(options)) {\n            options = {};\n        }\n\n        if (!options.redirect) {\n            options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n        }\n\n        if (!options.data) {\n            options.data = {};\n        }\n        options.data.saveShortcut = true;\n\n        Craft.submitForm(this.$primaryForm, options);\n    },\n\n    updateSidebarMenuLabel: function() {\n        var $item = this.$sidebar.find('a.sel:first');\n        var $label = $item.children('.label');\n        $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n        Garnish.$bod.removeClass('showing-sidebar');\n    },\n\n    toggleNav: function() {\n        Garnish.$bod.toggleClass('showing-nav');\n    },\n\n    toggleSidebar: function() {\n        Garnish.$bod.toggleClass('showing-sidebar');\n    },\n\n    initTabs: function() {\n        // Clear out all our old info in case the tabs were just replaced\n        this.$tabsList = this.$tabs = this.$overflowTabBtn = this.$overflowTabList = this.$selectedTab =\n            this.selectedTabIndex = null;\n\n        this.$tabsContainer = $('#tabs');\n        if (!this.$tabsContainer.length) {\n            this.$tabsContainer = null;\n            return;\n        }\n\n        this.$tabsList = this.$tabsContainer.find('> ul');\n        this.$tabs = this.$tabsList.find('> li');\n        this.$overflowTabBtn = $('#overflow-tab-btn');\n        if (!this.$overflowTabBtn.data('menubtn')) {\n            new Garnish.MenuBtn(this.$overflowTabBtn);\n        }\n        this.$overflowTabList = this.$overflowTabBtn.data('menubtn').menu.$container.find('> ul');\n        var i, $tab, $a, href;\n\n        for (i = 0; i < this.$tabs.length; i++) {\n            $tab = this.$tabs.eq(i);\n\n            // Does it link to an anchor?\n            $a = $tab.children('a');\n            href = $a.attr('href');\n            if (href && href.charAt(0) === '#') {\n                this.addListener($a, 'click', function(ev) {\n                    ev.preventDefault();\n                    this.selectTab(ev.currentTarget);\n                });\n\n                if (encodeURIComponent(href.substr(1)) === document.location.hash.substr(1)) {\n                    this.selectTab($a);\n                }\n            }\n\n            if (!this.$selectedTab && $a.hasClass('sel')) {\n                this._selectTab($a, i);\n            }\n        }\n    },\n\n    selectTab: function(tab) {\n        var $tab = $(tab);\n\n        if (this.$selectedTab) {\n            if (this.$selectedTab.get(0) === $tab.get(0)) {\n                return;\n            }\n            this.deselectTab();\n        }\n\n        $tab.addClass('sel');\n        var href = $tab.attr('href')\n        $(href).removeClass('hidden');\n        if (typeof history !== 'undefined') {\n            history.replaceState(undefined, undefined, href);\n        }\n        this._selectTab($tab, this.$tabs.index($tab.parent()));\n        this.updateTabs();\n        this.$overflowTabBtn.data('menubtn').menu.hide();\n    },\n\n    _selectTab: function($tab, index) {\n        if ($tab === this.$selectedTab) {\n            return;\n        }\n\n        this.$selectedTab = $tab;\n        this.selectedTabIndex = index;\n        if (index === 0) {\n            $('#content').addClass('square');\n        } else {\n            $('#content').removeClass('square');\n        }\n\n        Garnish.$win.trigger('resize');\n        // Fixes Redactor fixed toolbars on previously hidden panes\n        Garnish.$doc.trigger('scroll');\n\n        // If there is a revision menu, set its links to this tab ID\n        let href = $tab && $tab.attr('href');\n        if (href && href.charAt(0) === '#') {\n            let menubtn = $('#context-btn').menubtn().data('menubtn');\n            if (menubtn) {\n                for (let i = 0; i < menubtn.menu.$options.length; i++) {\n                    let a = menubtn.menu.$options[i];\n                    if (a.href) {\n                        a.href = a.href.match(/^[^#]*/)[0] + href;\n                    }\n                }\n            }\n        }\n    },\n\n    deselectTab: function() {\n        if (!this.$selectedTab) {\n            return;\n        }\n\n        this.$selectedTab.removeClass('sel');\n        if (this.$selectedTab.attr('href').charAt(0) === '#') {\n            $(this.$selectedTab.attr('href')).addClass('hidden');\n        }\n        this._selectTab(null, null);\n    },\n\n    handleWindowResize: function() {\n        this.updateTabs();\n        this.updateResponsiveTables();\n    },\n\n    updateTabs: function() {\n        if (!this.$tabsContainer) {\n            return;\n        }\n\n        var maxWidth = Math.floor(this.$tabsContainer.width()) - 40;\n        var totalWidth = 0;\n        var showOverflowMenu = false;\n        var tabMargin = Garnish.$bod.width() >= 768 ? -12 : -7;\n        var $tab;\n\n        // Start with the selected tab, because that needs to be visible\n        if (this.$selectedTab) {\n            this.$selectedTab.parent('li').appendTo(this.$tabsList);\n            totalWidth = Math.ceil(this.$selectedTab.parent('li').width());\n        }\n\n        for (var i = 0; i < this.$tabs.length; i++) {\n            $tab = this.$tabs.eq(i).appendTo(this.$tabsList);\n            if (i !== this.selectedTabIndex) {\n                totalWidth += Math.ceil($tab.width());\n                // account for the negative margin\n                if (i !== 0 || this.$selectedTab) {\n                    totalWidth += tabMargin;\n                }\n            }\n\n            if (i === this.selectedTabIndex || totalWidth <= maxWidth) {\n                $tab.find('> a').removeAttr('role');\n            } else {\n                $tab.appendTo(this.$overflowTabList).find('> a').attr('role', 'option');\n                showOverflowMenu = true;\n            }\n        }\n\n        if (showOverflowMenu) {\n            this.$overflowTabBtn.removeClass('hidden');\n        } else {\n            this.$overflowTabBtn.addClass('hidden');\n        }\n    },\n\n    updateResponsiveTables: function() {\n        for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n            this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n            this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n            this.updateResponsiveTables._check = false;\n\n            if (this.updateResponsiveTables._containerWidth > 0) {\n                // Is this the first time we've checked this table?\n                if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                    this.updateResponsiveTables._check = true;\n                } else {\n                    this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                    // Getting wider?\n                    if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                        if (this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._$table.removeClass('collapsed');\n                            this.updateResponsiveTables._check = true;\n                        }\n                    } else if (!this.updateResponsiveTables._isCollapsed) {\n                        this.updateResponsiveTables._check = true;\n                    }\n                }\n\n                // Are we checking the table width?\n                if (this.updateResponsiveTables._check) {\n                    if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                        this.updateResponsiveTables._$table.addClass('collapsed');\n                    }\n                }\n\n                // Remember the container width for next time\n                this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n            }\n        }\n    },\n\n    updateFixedHeader: function() {\n        // Have we scrolled passed the top of #main?\n        if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n            if (!this.fixedHeader) {\n                var headerHeight = this.$headerContainer.height();\n\n                // Hard-set the minimum content container height\n                this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                // Hard-set the header container height\n                this.$headerContainer.height(headerHeight);\n                Garnish.$bod.addClass('fixed-header');\n\n                // Fix the sidebar and details pane positions if they are taller than #content-container\n                var contentHeight = this.$contentContainer.outerHeight();\n                var $detailsHeight = this.$details.outerHeight();\n                var css = {\n                    top: headerHeight + 'px',\n                    'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                };\n                this.$sidebar.addClass('fixed').css(css);\n                this.$details.addClass('fixed').css(css);\n                this.fixedHeader = true;\n            }\n        } else if (this.fixedHeader) {\n            this.$headerContainer.height('auto');\n            Garnish.$bod.removeClass('fixed-header');\n            this.$contentContainer.css('min-height', '');\n            this.$sidebar.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.$details.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.fixedHeader = false;\n        }\n    },\n\n    /**\n     * Dispays a notification.\n     *\n     * @param {string} type\n     * @param {string} message\n     */\n    displayNotification: function(type, message) {\n        var notificationDuration = Craft.CP.notificationDuration;\n\n        if (type === 'error') {\n            notificationDuration *= 2;\n        }\n\n        var $notification = $('<div class=\"notification ' + type + '\">' + message + '</div>')\n            .appendTo(this.$notificationContainer);\n\n        var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n        $notification\n            .hide()\n            .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n            .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n            .delay(notificationDuration)\n            .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                complete: function() {\n                    $notification.remove();\n                }\n            });\n\n        this.trigger('displayNotification', {\n            notificationType: type,\n            message: message\n        });\n    },\n\n    /**\n     * Displays a notice.\n     *\n     * @param {string} message\n     */\n    displayNotice: function(message) {\n        this.displayNotification('notice', message);\n    },\n\n    /**\n     * Displays an error.\n     *\n     * @param {string} message\n     */\n    displayError: function(message) {\n        if (!message) {\n            message = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.displayNotification('error', message);\n    },\n\n    fetchAlerts: function() {\n        var data = {\n            path: Craft.path\n        };\n\n        Craft.queueActionRequest('app/get-cp-alerts', data, this.displayAlerts.bind(this));\n    },\n\n    displayAlerts: function(alerts) {\n        this.$alerts.remove();\n\n        if (Garnish.isArray(alerts) && alerts.length) {\n            this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n            for (var i = 0; i < alerts.length; i++) {\n                $('<li>' + alerts[i] + '</li>').appendTo(this.$alerts);\n            }\n\n            var height = this.$alerts.outerHeight();\n            this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n            this.initAlerts();\n        }\n    },\n\n    initAlerts: function() {\n        // Are there any shunnable alerts?\n        var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n        for (var i = 0; i < $shunnableAlerts.length; i++) {\n            this.addListener($shunnableAlerts[i], 'click', ev => {\n                ev.preventDefault();\n\n                var $link = $(ev.currentTarget);\n\n                var data = {\n                    message: $link.prop('className').substr(5)\n                };\n\n                Craft.queueActionRequest('app/shun-cp-alert', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            $link.parent().remove();\n                        } else {\n                            this.displayError(response.error);\n                        }\n                    }\n                });\n            });\n        }\n    },\n\n    checkForUpdates: function(forceRefresh, includeDetails, callback) {\n        // Make 'includeDetails' optional\n        if (typeof includeDetails === 'function') {\n            callback = includeDetails;\n            includeDetails = false;\n        }\n\n        // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n        // then just set a new callback that re-checks for updates when the current one is done.\n        if (this.checkingForUpdates && (\n            (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n            (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n        )) {\n            var realCallback = callback;\n            callback = () => {\n                this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n            };\n        }\n\n        // Callback function?\n        if (typeof callback === 'function') {\n            if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                this.checkForUpdatesCallbacks = [];\n            }\n\n            this.checkForUpdatesCallbacks.push(callback);\n        }\n\n        if (!this.checkingForUpdates) {\n            this.checkingForUpdates = true;\n            this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n            this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n            this._checkForUpdates(forceRefresh, includeDetails)\n                .then(info => {\n                    this.updateUtilitiesBadge();\n                    this.checkingForUpdates = false;\n\n                    if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                        var callbacks = this.checkForUpdatesCallbacks;\n                        this.checkForUpdatesCallbacks = null;\n\n                        for (var i = 0; i < callbacks.length; i++) {\n                            callbacks[i](info);\n                        }\n                    }\n\n                    this.trigger('checkForUpdates', {\n                        updateInfo: info\n                    });\n                });\n        }\n    },\n\n    _checkForUpdates: function(forceRefresh, includeDetails) {\n        return new Promise((resolve, reject) => {\n            if (!forceRefresh) {\n                this._checkForCachedUpdates(includeDetails)\n                    .then(info => {\n                        if (info.cached !== false) {\n                            resolve(info);\n                        }\n\n                        this._getUpdates(includeDetails)\n                            .then(info => {\n                                resolve(info);\n                            });\n                    });\n            } else {\n                this._getUpdates(includeDetails)\n                    .then(info => {\n                        resolve(info);\n                    });\n            }\n        });\n    },\n\n    _checkForCachedUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            var data = {\n                onlyIfCached: true,\n                includeDetails: includeDetails,\n            };\n            Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    resolve({cached: false});\n                }\n            });\n        });\n    },\n\n    _getUpdates: function(includeDetails) {\n        return new Promise((resolve, reject) => {\n            Craft.sendApiRequest('GET', 'updates')\n                .then(updates => {\n                    this._cacheUpdates(updates, includeDetails).then(resolve);\n                })\n                .catch(e => {\n                    this._cacheUpdates({}).then(resolve);\n                });\n        });\n    },\n\n    _cacheUpdates: function(updates, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.postActionRequest('app/cache-updates', {\n                updates: updates,\n                includeDetails: includeDetails,\n            }, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    reject();\n                }\n            }, {\n                contentType: 'json'\n            });\n        });\n    },\n\n    updateUtilitiesBadge: function() {\n        var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n        // Ignore if there is no (non-selected) Utilities nav item\n        if (!$utilitiesLink.length) {\n            return;\n        }\n\n        Craft.queueActionRequest('app/get-utilities-badge-count', response => {\n            // Get the existing utility nav badge, if any\n            var $badge = $utilitiesLink.children('.badge');\n\n            if (response.badgeCount) {\n                if (!$badge.length) {\n                    $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                }\n                $badge.text(response.badgeCount);\n            } else if ($badge.length) {\n                $badge.remove();\n            }\n        });\n    },\n\n    runQueue: function() {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        if (Craft.runQueueAutomatically) {\n            Craft.queueActionRequest('queue/run', (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this.trackJobProgress(false, true);\n                }\n            });\n        } else {\n            this.trackJobProgress(false, true);\n        }\n    },\n\n    trackJobProgress: function(delay, force) {\n        if (force && this.trackJobProgressTimeout) {\n            clearTimeout(this.trackJobProgressTimeout);\n            this.trackJobProgressTimeout = null;\n        }\n\n        // Ignore if we're already tracking jobs, or the queue is disabled\n        if (this.trackJobProgressTimeout || !this.enableQueue) {\n            return;\n        }\n\n        if (delay === true) {\n            // Determine the delay based on how long the displayed job info has remained unchanged\n            var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n            this.trackJobProgressTimeout = setTimeout(this._trackJobProgressInternal.bind(this), timeout);\n        } else {\n            this._trackJobProgressInternal();\n        }\n    },\n\n    _trackJobProgressInternal: function() {\n        Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.trackJobProgressTimeout = null;\n                this.totalJobs = response.total;\n                this.setJobInfo(response.jobs);\n\n                if (this.jobInfo.length) {\n                    // Check again after a delay\n                    this.trackJobProgress(true);\n                }\n            }\n        });\n    },\n\n    setJobInfo: function(jobInfo) {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        this.jobInfo = jobInfo;\n\n        // Update the displayed job info\n        var oldInfo = this.displayedJobInfo;\n        this.displayedJobInfo = this.getDisplayedJobInfo();\n\n        // Same old same old?\n        if (\n            oldInfo &&\n            this.displayedJobInfo &&\n            oldInfo.id === this.displayedJobInfo.id &&\n            oldInfo.progress === this.displayedJobInfo.progress &&\n            oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n            oldInfo.status === this.displayedJobInfo.status\n        ) {\n            this.displayedJobInfoUnchanged++;\n        } else {\n            // Reset the counter\n            this.displayedJobInfoUnchanged = 1;\n        }\n\n        this.updateJobIcon();\n\n        // Fire a setJobInfo event\n        this.trigger('setJobInfo');\n    },\n\n    /**\n     * Returns info for the job that should be displayed in the CP sidebar\n     */\n    getDisplayedJobInfo: function() {\n        if (!this.enableQueue) {\n            return null;\n        }\n\n        // Set the status preference order\n        var statuses = [\n            Craft.CP.JOB_STATUS_RESERVED,\n            Craft.CP.JOB_STATUS_FAILED,\n            Craft.CP.JOB_STATUS_WAITING\n        ];\n\n        for (var i = 0; i < statuses.length; i++) {\n            for (var j = 0; j < this.jobInfo.length; j++) {\n                if (this.jobInfo[j].status === statuses[i]) {\n                    return this.jobInfo[j];\n                }\n            }\n        }\n    },\n\n    updateJobIcon: function() {\n        if (!this.enableQueue || !this.$nav.length) {\n            return;\n        }\n\n        if (this.displayedJobInfo) {\n            if (!this.jobProgressIcon) {\n                this.jobProgressIcon = new JobProgressIcon();\n            }\n\n            if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n            } else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n            }\n        } else {\n            if (this.jobProgressIcon) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.complete();\n                delete this.jobProgressIcon;\n            }\n        }\n    },\n\n    /**\n     * Returns the active site for the control panel\n     *\n     * @return {number}\n     */\n    getSiteId: function() {\n        // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n        let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n        if (typeof siteId !== 'undefined') {\n            Craft.removeLocalStorage('BaseElementIndex.siteId');\n            this.setSiteId(siteId);\n            return siteId;\n        }\n        return Craft.getCookie('siteId');\n    },\n\n    /**\n     * Sets the active site for the control panel\n     * @param {number} siteId\n     */\n    setSiteId: function(siteId) {\n        Craft.setCookie('siteId', siteId, {\n            maxAge: 31536000 // 1 year\n        });\n    }\n}, {\n    //maxWidth: 1051, //1024,\n    notificationDuration: 2000,\n\n    JOB_STATUS_WAITING: 1,\n    JOB_STATUS_RESERVED: 2,\n    JOB_STATUS_DONE: 3,\n    JOB_STATUS_FAILED: 4\n});\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend({\n    $li: null,\n    $a: null,\n    $label: null,\n    $progressLabel: null,\n\n    progress: null,\n    failMode: false,\n\n    _$bgCanvas: null,\n    _$staticCanvas: null,\n    _$hoverCanvas: null,\n    _$failCanvas: null,\n\n    _staticCtx: null,\n    _hoverCtx: null,\n    _canvasSize: null,\n    _arcPos: null,\n    _arcRadius: null,\n    _lineWidth: null,\n\n    _arcStartPos: 0,\n    _arcEndPos: 0,\n    _arcStartStepSize: null,\n    _arcEndStepSize: null,\n    _arcStep: null,\n    _arcStepTimeout: null,\n    _arcAnimateCallback: null,\n\n    _progressBar: null,\n\n    init: function() {\n        this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n        this.$a = $('<a/>', {\n            id: 'job-icon',\n            href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n        }).appendTo(this.$li);\n        this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n        var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n        this.$label = $('<span/>').appendTo($labelContainer);\n        this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n        let m = (window.devicePixelRatio > 1 ? 2 : 1);\n        this._canvasSize = 18 * m;\n        this._arcPos = this._canvasSize / 2;\n        this._arcRadius = 7 * m;\n        this._lineWidth = 3 * m;\n\n        this._$bgCanvas = this._createCanvas('bg', '#61666b');\n        this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n        this._$hoverCanvas = this._createCanvas('hover', '#fff');\n        this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n        this._staticCtx = this._$staticCanvas[0].getContext('2d');\n        this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n        this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n        this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n    },\n\n    setDescription: function(description, progressLabel) {\n        this.$a.attr('title', description);\n        this.$label.text(description);\n        if (progressLabel) {\n            this.$progressLabel.text(progressLabel).show();\n        } else {\n            this.$progressLabel.hide();\n        }\n    },\n\n    setProgress: function(progress) {\n        if (progress == 0) {\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n        } else {\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            if (this.progress && progress > this.progress) {\n                this._animateArc(0, progress / 100);\n            } else {\n                this._setArc(0, progress / 100);\n            }\n        }\n\n        this.progress = progress;\n    },\n\n    complete: function() {\n        this._animateArc(0, 1, () => {\n            this._$bgCanvas.velocity('fadeOut');\n\n            this._animateArc(1, 1, () => {\n                this.$a.remove();\n                this.destroy();\n            });\n        });\n    },\n\n    showFailMode: function(message) {\n        if (this.failMode) {\n            return;\n        }\n\n        this.failMode = true;\n        this.progress = null;\n\n        this._$bgCanvas.hide();\n        this._$staticCanvas.hide();\n        this._$hoverCanvas.hide();\n        this._$failCanvas.show();\n\n        this.setDescription(message);\n    },\n\n    hideFailMode: function() {\n        if (!this.failMode) {\n            return;\n        }\n\n        this.failMode = false;\n\n        this._$bgCanvas.show();\n        this._$staticCanvas.show();\n        this._$hoverCanvas.show();\n        this._$failCanvas.hide();\n    },\n\n    _createCanvas: function(id, color) {\n        var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n            ctx = $canvas[0].getContext('2d');\n\n        ctx.strokeStyle = color;\n        ctx.lineWidth = this._lineWidth;\n        ctx.lineCap = 'round';\n        return $canvas;\n    },\n\n    _setArc: function(startPos, endPos) {\n        this._arcStartPos = startPos;\n        this._arcEndPos = endPos;\n\n        this._drawArc(this._staticCtx, startPos, endPos);\n        this._drawArc(this._hoverCtx, startPos, endPos);\n    },\n\n    _drawArc: function(ctx, startPos, endPos) {\n        ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n        ctx.beginPath();\n        ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n    },\n\n    _animateArc: function(targetStartPos, targetEndPos, callback) {\n        if (this._arcStepTimeout) {\n            clearTimeout(this._arcStepTimeout);\n        }\n\n        this._arcStep = 0;\n        this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n        this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n        this._arcAnimateCallback = callback;\n        this._takeNextArcStep();\n    },\n\n    _takeNextArcStep: function() {\n        this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n        this._arcStep++;\n\n        if (this._arcStep < 10) {\n            this._arcStepTimeout = setTimeout(this._takeNextArcStep.bind(this), 50);\n        } else if (this._arcAnimateCallback) {\n            this._arcAnimateCallback();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend({\n    editableGroups: null,\n    $newCategoryBtnGroup: null,\n    $newCategoryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible groups the user has permission to create new categories in\n        this.editableGroups = [];\n\n        for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n            var group = Craft.editableCategoryGroups[i];\n\n            if (this.getSourceByKey('group:' + group.uid)) {\n                this.editableGroups.push(group);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific category group in the URL?\n        if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n\n                if ($source.data('handle') === defaultGroupHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        // Get the handle of the selected source\n        var selectedSourceHandle = this.$source.data('handle');\n\n        var i, href, label;\n\n        // Update the New Category button\n        // ---------------------------------------------------------------------\n\n        if (this.editableGroups.length) {\n            // Remove the old button, if there is one\n            if (this.$newCategoryBtnGroup) {\n                this.$newCategoryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a group that they have permission to create categories in\n            var selectedGroup;\n\n            if (selectedSourceHandle) {\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    if (this.editableGroups[i].handle === selectedSourceHandle) {\n                        selectedGroup = this.editableGroups[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n            // Otherwise only show a menu button\n            if (selectedGroup) {\n                href = this._getGroupTriggerHref(selectedGroup);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                        this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.editableGroups.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n            } else {\n                this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New category'),\n                }).appendTo(this.$newCategoryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    var group = this.editableGroups[i];\n\n                    if (this.settings.context === 'index' || group !== selectedGroup) {\n                        href = this._getGroupTriggerHref(group);\n                        label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newCategoryBtnGroup);\n        }\n\n        // Update the URL if we're on the Categories index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'categories';\n\n            if (selectedSourceHandle) {\n                uri += '/' + selectedSourceHandle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getGroupTriggerHref: function(group) {\n        if (this.settings.context === 'index') {\n            var uri = 'categories/' + group.handle + '/new';\n            if (this.siteId && this.siteId != Craft.primarySiteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        uri += '/' + Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri) + '\"';\n        } else {\n            return 'data-id=\"' + group.id + '\"';\n        }\n    },\n\n    _openCreateCategoryModal: function(groupId) {\n        if (this.$newCategoryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the group\n        var group;\n\n        for (var i = 0; i < this.editableGroups.length; i++) {\n            if (this.editableGroups[i].id == groupId) {\n                group = this.editableGroups[i];\n                break;\n            }\n        }\n\n        if (!group) {\n            return;\n        }\n\n        this.$newCategoryBtn.addClass('inactive');\n        var newCategoryBtnText = this.$newCategoryBtn.text();\n        this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newCategoryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                groupId: groupId\n            },\n            onBeginLoading: () => {\n                this.$newCategoryBtn.addClass('loading');\n            },\n            onEndLoading: () => {\n                this.$newCategoryBtn.removeClass('loading');\n            },\n            onHideHud: () => {\n                this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right group is selected\n                var groupSourceKey = 'group:' + group.uid;\n\n                if (this.sourceKey !== groupSourceKey) {\n                    this.selectSourceByKey(groupSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend({\n    setSettings: function() {\n        this.base.apply(this, arguments);\n        this.settings.sortable = false;\n    },\n\n    getModalSettings: function() {\n        var settings = this.base();\n        settings.hideOnSelect = false;\n        return settings;\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.find('.element');\n    },\n\n    onModalSelect: function(elements) {\n        // Disable the modal\n        this.modal.disable();\n        this.modal.disableCancelBtn();\n        this.modal.disableSelectBtn();\n        this.modal.showFooterSpinner();\n\n        // Get the new category HTML\n        var selectedCategoryIds = this.getSelectedElementIds();\n\n        for (var i = 0; i < elements.length; i++) {\n            selectedCategoryIds.push(elements[i].id);\n        }\n\n        var data = {\n            categoryIds: selectedCategoryIds,\n            siteId: elements[0].siteId,\n            id: this.settings.id,\n            name: this.settings.name,\n            branchLimit: this.settings.branchLimit,\n            selectionLabel: this.settings.selectionLabel\n        };\n\n        Craft.postActionRequest('elements/get-categories-input-html', data, (response, textStatus) => {\n            this.modal.enable();\n            this.modal.enableCancelBtn();\n            this.modal.enableSelectBtn();\n            this.modal.hideFooterSpinner();\n\n            if (textStatus === 'success') {\n                var $newInput = $(response.html),\n                    $newElementsContainer = $newInput.children('.elements');\n\n                this.$elementsContainer.replaceWith($newElementsContainer);\n                this.$elementsContainer = $newElementsContainer;\n                this.resetElements();\n\n                var filteredElements = [];\n\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i],\n                        $element = this.getElementById(element.id);\n\n                    if ($element) {\n                        this.animateElementIntoPlace(element.$element, $element);\n                        filteredElements.push(element);\n                    }\n                }\n\n                this.updateDisabledElementsInModal();\n                this.modal.hide();\n                this.onSelectElements(filteredElements);\n            }\n        });\n    },\n\n    removeElement: function($element) {\n        // Find any descendants this category might have\n        var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n        // Remove our record of them all at once\n        this.removeElements($allCategories);\n\n        // Animate them away one at a time\n        for (var i = 0; i < $allCategories.length; i++) {\n            this._animateCategoryAway($allCategories, i);\n        }\n    },\n\n    _animateCategoryAway: function($allCategories, i) {\n        var callback;\n\n        // Is this the last one?\n        if (i === $allCategories.length - 1) {\n            callback = () => {\n                var $li = $allCategories.first().parent().parent(),\n                    $ul = $li.parent();\n\n                if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                    $li.remove();\n                } else {\n                    $ul.remove();\n                }\n            };\n        }\n\n        var func = () => {\n            this.animateElementAway($allCategories.eq(i), callback);\n        };\n\n        if (i === 0) {\n            func();\n        } else {\n            setTimeout(func, 100 * i);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend({\n    columns: null,\n    rows: null,\n\n    init: function(data) {\n        let columns = data.columns;\n        let rows = data.rows;\n\n        rows.forEach(d => {\n            $.each(d, function(cellIndex) {\n                var column = columns[cellIndex];\n\n                var parseTime;\n\n                switch (column.type) {\n                    case 'date':\n                        parseTime = d3.timeParse('%Y-%m-%d');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'datetime':\n                        parseTime = d3.timeParse('%Y-%m-%d %H:00:00');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'percent':\n                        d[cellIndex] = d[cellIndex] / 100;\n                        break;\n\n                    case 'number':\n                        d[cellIndex] = +d[cellIndex];\n                        break;\n\n                    default:\n                    // do nothing\n                }\n            });\n        });\n\n        this.columns = columns;\n        this.rows = rows;\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend({\n    $container: null,\n    $tip: null,\n\n    init: function($container) {\n        this.$container = $container;\n\n        this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n        this.hide();\n    },\n\n    setContent: function(html) {\n        this.$tip.html(html);\n    },\n\n    setPosition: function(position) {\n        this.$tip.css('left', `${position.left}px`);\n        this.$tip.css('top', `${position.top}px`);\n    },\n\n    show: function() {\n        this.$tip.css('display', 'block');\n    },\n\n    hide: function() {\n        this.$tip.css('display', 'none');\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend({\n    $container: null,\n    $chart: null,\n\n    chartBaseClass: 'cp-chart',\n    dataTable: null,\n\n    formatLocale: null,\n    timeFormatLocale: null,\n    orientation: null,\n\n    svg: null,\n    width: null,\n    height: null,\n\n    init: function(container, settings) {\n        this.$container = container;\n\n        this.setSettings(Craft.charts.BaseChart.defaults);\n        this.setSettings(settings);\n\n        var globalSettings = {\n            formats: window.d3Formats,\n            formatLocaleDefinition: window.d3FormatLocaleDefinition,\n            timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n        };\n\n        this.setSettings(globalSettings);\n\n        d3.select(window).on('resize', () => {\n            this.resize();\n        });\n    },\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n    },\n\n    draw: function(dataTable, settings) {\n        // Settings and chart attributes\n\n        this.setSettings(settings);\n\n        this.dataTable = dataTable;\n        this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n        this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n        this.orientation = this.settings.orientation;\n\n        // Set (or reset) the chart element\n\n        if (this.$chart) {\n            this.$chart.remove();\n        }\n\n        var className = this.chartBaseClass;\n\n        if (this.settings.chartClass) {\n            className += ' ' + this.settings.chartClass;\n        }\n\n        this.$chart = $(`<div class=\"${className}\" />`).appendTo(this.$container);\n    },\n\n    resize: function() {\n        this.draw(this.dataTable, this.settings);\n    },\n\n    onAfterDrawTicks: function() {\n        // White border for ticks' text\n        $('.tick', this.$chart).each(function(tickKey, tick) {\n            var $tickText = $('text', tick);\n\n            var $clone = $tickText.clone();\n            $clone.appendTo(tick);\n\n            $tickText.attr('stroke', '#ffffff');\n            $tickText.attr('stroke-width', 3);\n        });\n    }\n}, {\n    defaults: {\n        formatLocaleDefinition: null,\n        timeFormatLocaleDefinition: null,\n        formats: {\n            numberFormat: ',.2f',\n            percentFormat: ',.2%',\n            currencyFormat: '$,.2f',\n            shortDateFormats: {\n                day: '%-m/%-d',\n                month: '%-m/%y',\n                year: '%Y'\n            }\n        },\n        margin: {top: 0, right: 0, bottom: 0, left: 0},\n        chartClass: null,\n        colors: ['#0594D1', '#DE3800', '#FF9A00', '#009802', '#9B009B']\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend({\n    tip: null,\n    drawingArea: null,\n\n    init: function(container, settings) {\n        this.base(container, Craft.charts.Area.defaults);\n\n        this.setSettings(settings);\n    },\n\n    draw: function(dataTable, settings) {\n        this.base(dataTable, settings);\n\n        if (this.tip) {\n            this.tip = null;\n        }\n\n        var margin = this.getChartMargin();\n\n        this.width = this.$chart.width() - margin.left - margin.right;\n        this.height = this.$chart.height() - margin.top - margin.bottom;\n\n        // Append SVG to chart element\n\n        var svg = {\n            width: this.width + (margin.left + margin.right),\n            height: this.height + (margin.top + margin.bottom),\n            translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n            translateY: margin.top\n        };\n\n        this.svg = d3.select(this.$chart.get(0)).append('svg')\n            .attr('width', svg.width)\n            .attr('height', svg.height);\n\n        this.drawingArea = this.svg.append('g')\n            .attr('transform', `translate(${svg.translateX},${svg.translateY})`);\n\n        // Draw elements\n\n        this.drawTicks();\n        this.drawAxes();\n        this.drawChart();\n        this.drawTipTriggers();\n    },\n\n    drawTicks: function() {\n        // Draw X ticks\n\n        var x = this.getX(true);\n        var xTicks = 3;\n        var xAxis = d3.axisBottom(x)\n            .tickFormat(this.getXFormatter())\n            .ticks(xTicks);\n\n        this.drawingArea.append('g')\n            .attr('class', 'x ticks-axis')\n            .attr('transform', `translate(0, ${this.height})`)\n            .call(xAxis);\n\n        // Draw Y ticks\n\n        var y = this.getY();\n        var yTicks = 2;\n        var yAxis;\n\n        if (this.orientation !== 'rtl') {\n            yAxis = d3.axisLeft(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .call(yAxis);\n        } else {\n            yAxis = d3.axisRight(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .attr('transform', `translate(${this.width},0)`)\n                .call(yAxis);\n        }\n\n        // On after draw ticks\n\n        this.onAfterDrawTicks();\n    },\n\n    drawAxes: function() {\n        if (this.settings.xAxis.showAxis) {\n            var x = this.getX();\n            var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n            this.drawingArea.append('g')\n                .attr('class', 'x axis')\n                .attr('transform', `translate(0, ${this.height})`)\n                .call(xAxis);\n        }\n\n        if (this.settings.yAxis.showAxis) {\n            var y = this.getY();\n            var chartPadding = 0;\n            var yAxis;\n\n            if (this.orientation === 'rtl') {\n                yAxis = d3.axisLeft(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${this.width - chartPadding}, 0)`)\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${chartPadding}, 0)`)\n                    .call(yAxis);\n            }\n        }\n    },\n\n    drawChart: function() {\n        var x = this.getX(true);\n        var y = this.getY();\n\n        // X & Y grid lines\n\n        if (this.settings.xAxis.gridlines) {\n            var xLineAxis = d3.axisBottom(x);\n\n            this.drawingArea.append('g')\n                .attr('class', 'x grid-line')\n                .attr('transform', `translate(0,${this.height})`)\n                .call(xLineAxis\n                    .tickSize(-this.height, 0, 0)\n                    .tickFormat('')\n                );\n        }\n\n        var yTicks = 2;\n\n        if (this.settings.yAxis.gridlines) {\n            var yLineAxis = d3.axisLeft(y);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y grid-line')\n                .attr('transform', 'translate(0 , 0)')\n                .call(yLineAxis\n                    .tickSize(-(this.width), 0)\n                    .tickFormat('')\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks)\n                );\n        }\n\n        // Line\n\n        var line = d3.line()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-line')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', 'none')\n            .style('stroke', this.settings.colors[0])\n            .style('stroke-width', '3px')\n            .attr('d', line);\n\n        // Area\n\n        var area = d3.area()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y0(this.height)\n            .y1(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-area')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', this.settings.colors[0])\n            .style('fill-opacity', '0.3')\n            .attr('d', area);\n\n        // Plots\n\n        if (this.settings.plots) {\n            this.drawingArea.append('g')\n                .attr('class', 'plots')\n                .selectAll('circle')\n                .data(this.dataTable.rows)\n                .enter()\n                .append('circle')\n                .style('fill', this.settings.colors[0])\n                .attr('class', (d, index) => `plot plot-${index}`)\n                .attr('r', 4)\n                .attr('cx', d => x(d[0]))\n                .attr('cy', d => y(d[1]));\n        }\n    },\n\n    drawTipTriggers: function() {\n        if (this.settings.tips) {\n            if (!this.tip) {\n                this.tip = new Craft.charts.Tip(this.$chart);\n            }\n\n            // Define xAxisTickInterval\n\n            var chartMargin = this.getChartMargin();\n            var tickSizeOuter = 6;\n            var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n            var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n            // Tip trigger width\n\n            var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n            // Draw triggers\n\n            var x = this.getX(true);\n            var y = this.getY();\n\n            this.drawingArea.append('g')\n                .attr('class', 'tip-triggers')\n                .selectAll('rect')\n                .data(this.dataTable.rows)\n                .enter().append('rect')\n                .attr('class', 'tip-trigger')\n                .style('fill', 'transparent')\n                .style('fill-opacity', '1')\n                .attr('width', tipTriggerWidth)\n                .attr('height', this.height)\n                .attr('x', d => x(d[0]) - tipTriggerWidth / 2)\n                .on('mouseover', (d, index) => {\n                    // Expand plot\n\n                    this.drawingArea.select('.plot-' + index).attr('r', 5);\n\n                    // Set tip content\n\n                    var $content = $('<div />');\n                    var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                    var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                    $xValue.html(this.getXFormatter()(d[0]));\n                    $yValue.html(this.getYFormatter()(d[1]));\n\n                    var content = $content.get(0);\n\n                    this.tip.setContent(content);\n\n                    // Set tip position\n\n                    var margin = this.getChartMargin();\n\n                    var offset = 24;\n                    var top = (y(d[1]) + offset);\n                    var left;\n\n                    if (this.orientation !== 'rtl') {\n                        left = (x(d[0]) + margin.left + offset);\n\n                        var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                        var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                        if (calcLeft > maxLeft) {\n                            left = x(d[0]) - (this.tip.$tip.width() + offset);\n                        }\n                    } else {\n                        left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                    }\n\n                    if (left < 0) {\n                        left = (x(d[0]) + margin.left + offset);\n                    }\n\n                    var position = {\n                        top: top,\n                        left: left\n                    };\n\n                    this.tip.setPosition(position);\n\n                    // Show tip\n\n                    this.tip.show();\n                })\n                .on('mouseout', (d, index) => {\n                    // Unexpand Plot\n                    this.drawingArea.select('.plot-' + index).attr('r', 4);\n\n                    // Hide tip\n                    this.tip.hide();\n                });\n        }\n    },\n\n    getChartMargin: function() {\n        var margin = this.settings.margin;\n\n        // Estimate the max width of y ticks and set it as the left margin\n\n        var values = this.getYTickValues();\n        var yTicksMaxWidth = 0;\n\n        $.each(values, (key, value) => {\n            var characterWidth = 8;\n\n            var formatter = this.getYFormatter();\n\n            var formattedValue = formatter(value);\n            var computedTickWidth = formattedValue.length * characterWidth;\n\n            if (computedTickWidth > yTicksMaxWidth) {\n                yTicksMaxWidth = computedTickWidth;\n            }\n        });\n\n        yTicksMaxWidth += 10;\n\n        margin.left = yTicksMaxWidth;\n\n        return margin;\n    },\n\n    getX: function(padded) {\n        var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomain = [xDomainMin, xDomainMax];\n\n        if (this.orientation === 'rtl') {\n            xDomain = [xDomainMax, xDomainMin];\n        }\n\n        var left = 0;\n        var right = 0;\n\n        if (padded) {\n            left = 0;\n            right = 0;\n        }\n\n        var x = d3.scaleTime().range([left, (this.width - right)]);\n\n        x.domain(xDomain);\n\n        return x;\n    },\n\n    getY: function() {\n        var yDomain = [0, this.getYMaxValue()];\n\n        var y = d3.scaleLinear().range([this.height, 0]);\n\n        y.domain(yDomain);\n\n        return y;\n    },\n\n    getXFormatter: function() {\n        var formatter;\n\n        if (this.settings.xAxis.formatter !== $.noop) {\n            formatter = this.settings.xAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYFormatter: function() {\n        var formatter;\n\n        if (this.settings.yAxis.formatter !== $.noop) {\n            formatter = this.settings.yAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYMaxValue: function() {\n        return d3.max(this.dataTable.rows, function(d) {\n            return d[1];\n        });\n    },\n\n    getYTickValues: function() {\n        var maxValue = this.getYMaxValue();\n\n        if (maxValue > 1) {\n            return [(maxValue / 2), maxValue];\n        } else {\n            return [0, maxValue];\n        }\n    }\n}, {\n    defaults: {\n        chartClass: 'area',\n        margin: {top: 25, right: 5, bottom: 25, left: 0},\n        plots: true,\n        tips: true,\n        xAxis: {\n            gridlines: false,\n            showAxis: true,\n            formatter: $.noop\n        },\n        yAxis: {\n            gridlines: true,\n            showAxis: false,\n            formatter: $.noop\n        }\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = `0${duration.hours}`;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = `0${duration.minutes}`;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = `0${duration.seconds}`;\n        }\n\n        return `${duration.hours}:${duration.minutes}:${duration.seconds}`;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(`${chartSettings.formats.shortDateFormats.day} %H:00:00`);\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.children('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorInput, 'click', function (ev) {\n            ev.stopPropagation();\n        });\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'input', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        var val = this.$input.val();\n\n        // If empty, set the preview to transparent\n        if (!val.length || val === '#') {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Make sure the value starts with a #\n        if (val[0] !== '#') {\n            val = '#' + val;\n            this.$input.val(val);\n        }\n\n        this.$colorPreview.css('background-color', val);\n\n        if (this.$colorInput) {\n            this.$colorInput.val(val);\n        }\n    }\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function() {\n        if (Craft.ColorInput._browserSupportsColorInputs === null) {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend({\n    elementIndex: null,\n    $elementIndexSourcesContainer: null,\n\n    $sidebar: null,\n    $sourcesContainer: null,\n    $sourceSettingsContainer: null,\n    $newHeadingBtn: null,\n    $footer: null,\n    $footerBtnContainer: null,\n    $saveBtn: null,\n    $cancelBtn: null,\n    $saveSpinner: null,\n    $loadingSpinner: null,\n\n    sourceSort: null,\n    sources: null,\n    selectedSource: null,\n    updateSourcesOnSave: false,\n\n    availableTableAttributes: null,\n\n    init: function(elementIndex, settings) {\n        this.base();\n\n        this.setSettings(settings, {\n            resizable: true\n        });\n\n        this.elementIndex = elementIndex;\n        this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n        var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n        this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n        this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n        this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n        this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n        this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n        this.$newHeadingBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit add icon',\n            text: Craft.t('app', 'New heading'),\n        }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n        this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n        this.setContainer($container);\n        this.show();\n\n        var data = {\n            elementType: this.elementIndex.elementType\n        };\n\n        Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, (response, textStatus) => {\n            this.$loadingSpinner.remove();\n\n            if (textStatus === 'success') {\n                this.$saveBtn.removeClass('disabled');\n                this.buildModal(response);\n            }\n        });\n\n        this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n        this.addListener(this.$cancelBtn, 'click', 'hide');\n        this.addListener(this.$saveBtn, 'click', 'save');\n        this.addListener(this.$container, 'submit', 'save');\n    },\n\n    buildModal: function(response) {\n        // Store the available table attribute options\n        this.availableTableAttributes = response.availableTableAttributes;\n\n        // Create the source item sorter\n        this.sourceSort = new Garnish.DragSort({\n            handle: '.move',\n            axis: 'y',\n            onSortChange: () => {\n                this.updateSourcesOnSave = true;\n            },\n        });\n\n        // Create the sources\n        this.sources = [];\n\n        for (var i = 0; i < response.sources.length; i++) {\n            var source = this.addSource(response.sources[i]);\n            this.sources.push(source);\n        }\n\n        if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n            this.sources[0].select();\n        }\n    },\n\n    addSource: function(sourceData) {\n        var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n        var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n        var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n        $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n        var source;\n\n        // Is this a heading?\n        if (typeof sourceData.heading !== 'undefined') {\n            $item.addClass('heading');\n            $itemInput.attr('name', 'sourceOrder[][heading]');\n            source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.heading);\n        } else {\n            $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n            source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.label);\n\n            // Select this by default?\n            if ((this.elementIndex.sourceKey + '/').substr(0, sourceData.key.length + 1) === sourceData.key + '/') {\n                source.select();\n            }\n        }\n\n        this.sourceSort.addItems($item);\n\n        return source;\n    },\n\n    handleNewHeadingBtnClick: function() {\n        var source = this.addSource({\n            heading: ''\n        });\n\n        Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n        source.select();\n        this.updateSourcesOnSave = true;\n    },\n\n    save: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n            return;\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n        var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n        Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success' && response.success) {\n                // Have any changes been made to the source list?\n                if (this.updateSourcesOnSave) {\n                    if (this.$elementIndexSourcesContainer.length) {\n                        var $lastSource = null,\n                            $pendingHeading;\n\n                        for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                            var $item = this.sourceSort.$items.eq(i),\n                                source = $item.data('source'),\n                                $indexSource = source.getIndexSource();\n\n                            if (!$indexSource) {\n                                continue;\n                            }\n\n                            if (source.isHeading()) {\n                                $pendingHeading = $indexSource;\n                            } else {\n                                if ($pendingHeading) {\n                                    this.appendSource($pendingHeading, $lastSource);\n                                    $lastSource = $pendingHeading;\n                                    $pendingHeading = null;\n                                }\n\n                                this.appendSource($indexSource, $lastSource);\n                                $lastSource = $indexSource;\n                            }\n                        }\n\n                        // Remove any additional sources (most likely just old headings)\n                        if ($lastSource) {\n                            var $extraSources = $lastSource.nextAll();\n                            this.elementIndex.sourceSelect.removeItems($extraSources);\n                            $extraSources.remove();\n                        }\n                    }\n                }\n\n                // If a source is selected, have the element index select that one by default on the next request\n                if (this.selectedSource && this.selectedSource.sourceData.key) {\n                    this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                    this.elementIndex.updateElements();\n                }\n\n                Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                this.hide();\n            } else {\n                var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                Craft.cp.displayError(error);\n            }\n        });\n    },\n\n    appendSource: function($source, $lastSource) {\n        if (!$lastSource) {\n            $source.prependTo(this.$elementIndexSourcesContainer);\n        } else {\n            $source.insertAfter($lastSource);\n        }\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.sources.length; i++) {\n            this.sources[i].destroy();\n        }\n\n        delete this.sources;\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend({\n    modal: null,\n\n    $item: null,\n    $itemLabel: null,\n    $itemInput: null,\n    $settingsContainer: null,\n\n    sourceData: null,\n\n    init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n        this.modal = modal;\n        this.$item = $item;\n        this.$itemLabel = $itemLabel;\n        this.$itemInput = $itemInput;\n        this.sourceData = sourceData;\n\n        this.$item.data('source', this);\n\n        this.addListener(this.$item, 'click', 'select');\n    },\n\n    isHeading: function() {\n        return false;\n    },\n\n    isSelected: function() {\n        return (this.modal.selectedSource === this);\n    },\n\n    select: function() {\n        if (this.isSelected()) {\n            return;\n        }\n\n        if (this.modal.selectedSource) {\n            this.modal.selectedSource.deselect();\n        }\n\n        this.$item.addClass('sel');\n        this.modal.selectedSource = this;\n\n        if (!this.$settingsContainer) {\n            this.$settingsContainer = this.createSettings()\n                .appendTo(this.modal.$sourceSettingsContainer);\n        } else {\n            this.$settingsContainer.removeClass('hidden');\n        }\n\n        this.modal.$sourceSettingsContainer.scrollTop(0);\n    },\n\n    createSettings: function() {\n        return $('<div/>');\n    },\n\n    getIndexSource: function() {\n    },\n\n    deselect: function() {\n        this.$item.removeClass('sel');\n        this.modal.selectedSource = null;\n        this.$settingsContainer.addClass('hidden');\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.text(val);\n    },\n\n    destroy: function() {\n        this.$item.data('source', null);\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend({\n    createSettings: function() {\n        let $settings = $('<div/>').append(Craft.ui.createTextField({\n            label: Craft.t('app', 'Header Column Heading'),\n            id: 'defaultHeaderColHeading' + Math.floor(Math.random() * 100000),\n            name: `sources[${this.sourceData.key}][headerColHeading]`,\n            value: this.sourceData.headerColHeading,\n            placeholder: this.sourceData.defaultHeaderColHeading,\n        }));\n\n        if (this.sourceData.tableAttributes.length) {\n            $settings.append(this.createTableColumnsField());\n        }\n\n        return $settings;\n    },\n\n    createTableColumnsField: function() {\n        // Create the title column option\n        let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n        let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n        // Create the rest of the options\n        let $columnCheckboxes = $('<div/>');\n        let selectedAttributes = [firstKey];\n\n        $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n        // Add the selected columns, in the selected order\n        for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n            let [key, label] = this.sourceData.tableAttributes[i];\n            $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n            selectedAttributes.push(key);\n        }\n\n        // Add the rest\n        let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n        availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n        for (let i = 0; i < availableTableAttributes.length; i++) {\n            let [key, label] = availableTableAttributes[i];\n            if (!Craft.inArray(key, selectedAttributes)) {\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n            }\n        }\n\n        new Garnish.DragSort($columnCheckboxes.children(), {\n            handle: '.move',\n            axis: 'y'\n        });\n\n        return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n            label: Craft.t('app', 'Table Columns'),\n            instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n        });\n    },\n\n    createTableColumnOption: function(key, label, first, checked) {\n        var $option = $('<div class=\"customize-sources-table-column\"/>')\n            .append('<div class=\"icon move\"/>')\n            .append(\n                Craft.ui.createCheckbox({\n                    label: Craft.escapeHtml(label),\n                    name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                    value: key,\n                    checked: checked,\n                    disabled: first\n                })\n            );\n\n        if (first) {\n            $option.children('.move').addClass('disabled');\n        }\n\n        return $option;\n    },\n\n    getIndexSource: function() {\n        var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n        if ($source) {\n            return $source.closest('li');\n        }\n    }\n});\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend({\n    $labelField: null,\n    $labelInput: null,\n    $deleteBtn: null,\n\n    isHeading: function() {\n        return true;\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.trigger('focus');\n    },\n\n    createSettings: function() {\n        let $settings = $('<div/>');\n\n        this.$labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Heading'),\n            instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n            value: this.sourceData.heading\n        }).appendTo($settings);\n\n        this.$labelInput = this.$labelField.find('.text');\n\n        $settings.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n            .appendTo($settings);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n        return $settings;\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n        this.$itemInput.val(val);\n    },\n\n    deleteHeading: function() {\n        this.modal.sourceSort.removeItems(this.$item);\n        this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n        this.modal.updateSourcesOnSave = true;\n\n        if (this.isSelected()) {\n            this.deselect();\n\n            if (this.modal.sources.length) {\n                this.modal.sources[0].select();\n            }\n        }\n\n        this.$item.remove();\n        this.$settingsContainer.remove();\n        this.destroy();\n    },\n\n    getIndexSource: function() {\n        var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n        return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend({\n    $table: null,\n\n    init: function(table, settings) {\n        this.$table = $(table);\n        var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n        settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n        settings.container = this.$table.children('tbody');\n        settings.helper = this.getHelper.bind(this);\n        settings.caboose = '<tr/>';\n        settings.axis = Garnish.Y_AXIS;\n        settings.magnetStrength = 4;\n        settings.helperLagBase = 1.5;\n\n        this.base($rows, settings);\n    },\n\n    getHelper: function($helperRow) {\n        var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n            $table = $('<table/>').appendTo($helper),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the table width and classes\n        $table.width(this.$table.width());\n        $table.prop('className', this.$table.prop('className'));\n\n        // Copy the column widths\n        var $firstRow = this.$table.find('tr:first'),\n            $cells = $firstRow.children(),\n            $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            $($helperCells[i]).width($($cells[i]).width());\n        }\n\n        return $helper;\n    }\n}, {\n    defaults: {\n        handle: '.move',\n        helperClass: 'datatablesorthelper'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend({\n    id: null,\n    userId: null,\n\n    $deleteActionRadios: null,\n    $deleteSpinner: null,\n\n    userSelect: null,\n    _deleting: false,\n\n    init: function(userId, settings) {\n        this.id = Math.floor(Math.random() * 1000000000);\n        this.userId = userId;\n        settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n        let $form = $(\n            '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n            Craft.getCsrfInput() +\n            '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n            (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n            (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n            '</form>'\n        ).appendTo(Garnish.$bod);\n        let $body = $(\n            '<div class=\"body\">' +\n            '<div class=\"content-summary\">' +\n            '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n            '<ul class=\"bullets\"></ul>' +\n            '</div>' +\n            '<div class=\"options\">' +\n            '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n            '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n            '<div class=\"elements\"></div>' +\n            '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n            '</div>' +\n            '</div>' +\n            '<div>' +\n            '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n            '</div>' +\n            '</div>'\n        ).appendTo($form);\n        let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo($buttons);\n\n        if (settings.contentSummary.length) {\n            for (let i = 0; i < settings.contentSummary.length; i++) {\n                $body.find('ul').append($('<li/>', {text: settings.contentSummary[i]}));\n            }\n        } else {\n            $body.find('ul').remove();\n        }\n\n        this.$deleteActionRadios = $body.find('input[type=radio]');\n        this.$deleteSubmitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: this._submitBtnLabel(false),\n        }).appendTo($buttons);\n        this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n        var idParam;\n\n        if (Garnish.isArray(this.userId)) {\n            idParam = ['and'];\n\n            for (let i = 0; i < this.userId.length; i++) {\n                idParam.push('not ' + this.userId[i]);\n            }\n        } else {\n            idParam = 'not ' + this.userId;\n        }\n\n        this.userSelect = new Craft.BaseElementSelectInput({\n            id: 'transferselect' + this.id,\n            name: 'transferContentTo',\n            elementType: 'craft\\\\elements\\\\User',\n            criteria: {\n                id: idParam\n            },\n            limit: 1,\n            modalSettings: {\n                closeOtherModals: false\n            },\n            onSelectElements: () => {\n                this.updateSizeAndPosition();\n\n                if (!this.$deleteActionRadios.first().prop('checked')) {\n                    this.$deleteActionRadios.first().trigger('click');\n                } else {\n                    this.validateDeleteInputs();\n                }\n            },\n            onRemoveElements: this.validateDeleteInputs.bind(this),\n            selectable: false,\n            editable: false\n        });\n\n        this.addListener($cancelBtn, 'click', 'hide');\n\n        this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n        this.addListener($form, 'submit', 'handleSubmit');\n\n        this.base($form, settings);\n    },\n\n    _submitBtnLabel: function(withContent) {\n        let message = withContent\n            ? 'Delete {num, plural, =1{user} other{users}} and content'\n            : 'Delete {num, plural, =1{user} other{users}}';\n\n        return Craft.t('app', message, {\n            num: Garnish.isArray(this.userId) ? this.userId.length : 1,\n        });\n    },\n\n    validateDeleteInputs: function() {\n        var validates = false;\n\n        if (this.$deleteActionRadios.eq(1).prop('checked')) {\n            validates = true;\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(true));\n        } else {\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(false));\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n        }\n\n        this.updateSizeAndPosition();\n\n        if (validates) {\n            this.$deleteSubmitBtn.removeClass('disabled');\n        } else {\n            this.$deleteSubmitBtn.addClass('disabled');\n        }\n\n        return validates;\n    },\n\n    handleSubmit: function(ev) {\n        if (this._deleting || !this.validateDeleteInputs()) {\n            ev.preventDefault();\n            return;\n        }\n\n        this.$deleteSubmitBtn.addClass('active');\n        this.$deleteSpinner.removeClass('hidden');\n        this.disable();\n        this.userSelect.disable();\n        this._deleting = true;\n\n        // Let the onSubmit callback prevent the form from getting submitted\n        try {\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        } catch (e) {\n            ev.preventDefault();\n            this.$deleteSpinner.addClass('hidden');\n            throw e;\n        }\n    },\n\n    onFadeIn: function() {\n        // Auto-focus the first radio\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$deleteActionRadios.first().trigger('focus');\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        contentSummary: [],\n        onSubmit: $.noop,\n        redirect: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend({\n    $revisionBtn: null,\n    $revisionLabel: null,\n    $spinner: null,\n    $expandSiteStatusesBtn: null,\n    $statusIcon: null,\n\n    $editMetaBtn: null,\n    metaHud: null,\n    $nameTextInput: null,\n    $saveMetaBtn: null,\n\n    $siteStatusPane: null,\n    $globalLightswitch: null,\n    $siteLightswitches: null,\n    $addlSiteField: null,\n\n    siteIds: null,\n    newSiteIds: null,\n\n    lastSerializedValue: null,\n    listeningForChanges: false,\n    pauseLevel: 0,\n    timeout: null,\n    saving: false,\n    saveXhr: null,\n    queue: null,\n    submittingForm: false,\n\n    duplicatedElements: null,\n    errors: null,\n\n    openingPreview: false,\n    preview: null,\n    previewToken: null,\n    createdDraftInPreview: false,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.DraftEditor.defaults);\n\n        this.queue = [];\n        this.duplicatedElements = {};\n\n        this.siteIds = Object.keys(this.settings.siteStatuses).map(siteId => {\n            return parseInt(siteId)\n        });\n\n        this.$revisionBtn = $('#context-btn');\n        this.$revisionLabel = $('#revision-label');\n        this.$spinner = $('#revision-spinner');\n        this.$expandSiteStatusesBtn = $('#expand-status-btn');\n        this.$statusIcon = $('#revision-status');\n\n        if (this.settings.canEditMultipleSites) {\n            this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n        }\n\n        if (this.settings.previewTargets.length) {\n            if (this.settings.enablePreview) {\n                this.addListener($('#preview-btn'), 'click', 'openPreview');\n            }\n\n            const $shareBtn = $('#share-btn');\n\n            if (this.settings.previewTargets.length === 1) {\n                this.addListener($shareBtn, 'click', function() {\n                    this.openShareLink(this.settings.previewTargets[0].url);\n                });\n            } else {\n                this.createShareMenu($shareBtn);\n            }\n        }\n\n        // If this is a revision, we're done here\n        if (this.settings.revisionId) {\n            return;\n        }\n\n        // Override the serializer to use our own\n        Craft.cp.$primaryForm.data('serializer', () => this.serializeForm(true));\n\n        this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n        if (this.settings.draftId) {\n            this.initForDraft();\n        } else {\n            // If the \"Create a draft\" button is a secondary button, then add special handling for it\n            this.addListener($('#save-draft-btn'), 'click', ev => {\n                ev.preventDefault();\n                this.createDraft();\n                this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n            });\n\n            // If they're not allowed to update the source element, override the save shortcut to create a draft too\n            if (!this.settings.canUpdateSource) {\n                this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', ev => {\n                    if (ev.saveShortcut) {\n                        ev.preventDefault();\n                        this.createDraft();\n                        this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                    }\n                });\n            }\n        }\n    },\n\n    listenForChanges: function() {\n        if (this.listeningForChanges || this.pauseLevel > 0 || !Craft.autosaveDrafts) {\n            return;\n        }\n\n        this.listeningForChanges = true;\n\n        this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n            if ($(ev.target).is(this.statusIcons())) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            // If they are typing, wait half a second before checking the form\n            if (['keypress', 'keyup', 'change'].includes(ev.type)) {\n                this.timeout = setTimeout(this.checkForm.bind(this), 500);\n            } else {\n                this.checkForm();\n            }\n        });\n    },\n\n    stopListeningForChanges: function() {\n        if (!this.listeningForChanges) {\n            return;\n        }\n\n        this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n        clearTimeout(this.timeout);\n        this.listeningForChanges = false;\n    },\n\n    pause: function() {\n        this.pauseLevel++;\n        this.stopListeningForChanges();\n    },\n\n    resume: function() {\n        if (this.pauseLevel === 0) {\n            throw 'Craft.DraftEditor::resume() should only be called after pause().';\n        }\n\n        // Only actually resume operation if this has been called the same\n        // number of times that pause() was called\n        this.pauseLevel--;\n        if (this.pauseLevel === 0) {\n            if (Craft.autosaveDrafts) {\n                this.checkForm();\n            }\n            this.listenForChanges();\n        }\n    },\n\n    initForDraft: function() {\n        // Create the edit draft button\n        this.createEditMetaBtn();\n\n        this.addListener(this.$statusIcon, 'click', () => {\n            this.showStatusHud(this.$statusIcon);\n        });\n\n        if (Craft.autosaveDrafts) {\n            this.listenForChanges();\n        }\n\n        if (this.settings.canUpdateSource) {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n                alt: true\n            }, () => {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.publishDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }, 0);\n        }\n    },\n\n    expandSiteStatuses: function() {\n        this.removeListener(this.$expandSiteStatusesBtn, 'click');\n        this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', () => {\n            this.$expandSiteStatusesBtn.remove();\n        });\n\n        const $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n        this.$siteStatusPane = $enabledForSiteField.parent();\n\n        // If this is a revision, just show the site statuses statically and be done\n        if (this.settings.revisionId) {\n            this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n            return;\n        }\n\n        $enabledForSiteField.addClass('nested');\n        const $globalField = Craft.ui.createLightswitchField({\n            id: 'enabled',\n            label: Craft.t('app', 'Enabled'),\n            name: 'enabled',\n        }).insertBefore($enabledForSiteField);\n        $globalField.find('label').css('font-weight', 'bold');\n        this.$globalLightswitch = $globalField.find('.lightswitch');\n\n        if (!this.settings.revisionId) {\n            this._showField($globalField);\n        }\n\n        // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n        const originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n            ? '1'\n            : (this.settings.enabledForSite ? '-' : '');\n        const originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n            '=' + (this.settings.enabledForSite ? '1' : '');\n\n        this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n            .on('change', this._updateGlobalStatus.bind(this));\n\n        this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n\n        let serializedStatuses = `enabled=${originalEnabledValue}`;\n        for (let i = 0; i < this.$siteLightswitches.length; i++) {\n            const $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n            serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n        }\n\n        Craft.cp.$primaryForm.data('initialSerializedValue',\n            Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n        // Are there additional sites that can be added?\n        if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n            this._createAddlSiteField();\n        }\n\n        this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n        this._updateGlobalStatus();\n    },\n\n    /**\n     * @returns {Array}\n     */\n    _getOtherSupportedSites: function() {\n        return Craft.sites.filter(s => s.id != this.settings.siteId && this.siteIds.includes(s.id));\n    },\n\n    _showField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .height(0)\n            .velocity({height}, 'fast', () => {\n                $field.css({\n                    overflow: '',\n                    height: '',\n                });\n            });\n    },\n\n    _removeField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .velocity({height: 0}, 'fast', () => {\n                $field.remove();\n            });\n    },\n\n    _updateGlobalStatus: function() {\n        let allEnabled = true, allDisabled = true;\n        this.$siteLightswitches.each(function() {\n            const enabled = $(this).data('lightswitch').on;\n            if (enabled) {\n                allDisabled = false;\n            } else {\n                allEnabled = false;\n            }\n            if (!allEnabled && !allDisabled) {\n                return false;\n            }\n        });\n        if (allEnabled) {\n            this.$globalLightswitch.data('lightswitch').turnOn(true);\n        } else if (allDisabled) {\n            this.$globalLightswitch.data('lightswitch').turnOff(true);\n        } else {\n            this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n        }\n    },\n\n    _updateSiteStatuses: function() {\n        const enabled = this.$globalLightswitch.data('lightswitch').on;\n        this.$siteLightswitches.each(function() {\n            if (enabled) {\n                $(this).data('lightswitch').turnOn(true);\n            } else {\n                $(this).data('lightswitch').turnOff(true);\n            }\n        });\n    },\n\n    _createSiteStatusField: function(site) {\n        const $field = Craft.ui.createLightswitchField({\n            id: `enabledForSite-${site.id}`,\n            label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n            name: `enabledForSite[${site.id}]`,\n            on: this.settings.siteStatuses.hasOwnProperty(site.id)\n                ? this.settings.siteStatuses[site.id]\n                : true,\n            disabled: !!this.settings.revisionId,\n        });\n\n        if (this.$addlSiteField) {\n            $field.insertBefore(this.$addlSiteField);\n        } else {\n            $field.appendTo(this.$siteStatusPane);\n        }\n\n        if (!this.settings.revisionId) {\n            $field.addClass('nested');\n            const $lightswitch = $field.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n        }\n\n        this._showField($field);\n\n        return $field;\n    },\n\n    _createAddlSiteField: function() {\n        const addlSites = Craft.sites.filter(s => {\n            return !this.siteIds.includes(s.id) && this.settings.addlSiteIds.includes(s.id);\n        });\n\n        if (!addlSites.length) {\n            return;\n        }\n\n        const $addlSiteSelectContainer = Craft.ui.createSelect({\n            options: [\n                {label: Craft.t('app', 'Add a site…')},\n                ...addlSites.map(s => {\n                    return {label: s.name, value: s.id};\n                }),\n            ],\n        }).addClass('fullwidth');\n\n        this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n            .addClass('nested add')\n            .appendTo(this.$siteStatusPane);\n\n        const $addlSiteSelect = $addlSiteSelectContainer.find('select');\n\n        $addlSiteSelect.on('change', () => {\n            const siteId = parseInt($addlSiteSelect.val());\n            const site = Craft.sites.find(s => s.id === siteId);\n\n            if (!site) {\n                return;\n            }\n\n            this._createSiteStatusField(site);\n\n            $addlSiteSelect\n                .val('')\n                .find(`option[value=\"${siteId}\"]`).remove();\n\n            if (this.newSiteIds === null) {\n                this.newSiteIds = [];\n            }\n\n            this.siteIds.push(siteId);\n            this.newSiteIds.push(siteId);\n\n            // Was that the last site?\n            if ($addlSiteSelect.find('option').length === 1) {\n                this._removeField(this.$addlSiteField);\n            }\n        });\n\n        this._showField(this.$addlSiteField);\n    },\n\n    showStatusHud: function(target) {\n        let bodyHtml;\n\n        if (this.errors === null) {\n            bodyHtml = '<p>' + Craft.t('app', 'The draft has been saved.') + '</p>';\n        } else {\n            bodyHtml = '<p class=\"error\">' + Craft.t('app', 'The draft could not be saved.') + '</p>';\n\n            if (this.errors.length) {\n                bodyHtml += '<ul class=\"errors\">' +\n                    this.errors.map(e => `<li>${Craft.escapeHtml(e)}</li>`).join('') +\n                    '</ul>';\n            }\n        }\n\n        const hud = new Garnish.HUD(target, bodyHtml, {\n            onHide: function() {\n                hud.destroy();\n            }\n        });\n    },\n\n    spinners: function() {\n        return this.preview\n            ? this.$spinner.add(this.preview.$spinner)\n            : this.$spinner;\n    },\n\n    statusIcons: function() {\n        return this.preview\n            ? this.$statusIcon.add(this.preview.$statusIcon)\n            : this.$statusIcon;\n    },\n\n    createEditMetaBtn: function() {\n        this.$editMetaBtn = $('<button/>', {\n            type: 'button',\n            'class': 'btn edit icon',\n            title: Craft.t('app', 'Edit draft settings'),\n        }).appendTo($('#context-btngroup'));\n        this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n    },\n\n    createShareMenu: function($shareBtn) {\n        $shareBtn.addClass('menubtn');\n\n        const $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n        const $ul = $('<ul/>').appendTo($menu);\n\n        this.settings.previewTargets.forEach(target => {\n            const $li = $('<li/>').appendTo($ul);\n            const $a = $('<a/>', {\n                text: target.label,\n            }).appendTo($li);\n            this.addListener($a, 'click', () => {\n                this.openShareLink(target.url);\n            });\n        });\n    },\n\n    getPreviewToken: function() {\n        return new Promise((resolve, reject) => {\n            if (this.previewToken) {\n                resolve(this.previewToken);\n                return;\n            }\n\n            Craft.postActionRequest('preview/create-token', {\n                elementType: this.settings.elementType,\n                sourceId: this.settings.sourceId,\n                siteId: this.settings.siteId,\n                draftId: this.settings.draftId,\n                revisionId: this.settings.revisionId,\n            }, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this.previewToken = response.token;\n                    resolve(this.previewToken);\n                } else {\n                    reject();\n                }\n            });\n        });\n    },\n\n    getTokenizedPreviewUrl: function(url, randoParam) {\n        return new Promise((resolve, reject) => {\n            const params = {};\n\n            if (randoParam || !this.settings.isLive) {\n                // Randomize the URL so CDNs don't return cached pages\n                params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n            }\n\n            if (this.settings.siteToken) {\n                params[Craft.siteToken] = this.settings.siteToken;\n            }\n\n            // No need for a token if we're looking at a live element\n            if (this.settings.isLive) {\n                resolve(Craft.getUrl(url, params));\n                return;\n            }\n\n            this.getPreviewToken().then(function(token) {\n                params[Craft.tokenParam] = token;\n                resolve(Craft.getUrl(url, params));\n            }).catch(reject);\n        });\n    },\n\n    openShareLink: function(url) {\n        this.getTokenizedPreviewUrl(url).then(function(url) {\n            window.open(url);\n        });\n    },\n\n    getPreview: function() {\n        if (!this.preview) {\n            this.preview = new Craft.Preview(this);\n            this.preview.on('open', () => {\n                if (!this.settings.draftId) {\n                    this.listenForChanges();\n                }\n            });\n            this.preview.on('close', () => {\n                if (!this.settings.draftId) {\n                    this.stopListeningForChanges();\n                }\n\n                // did we just create a draft?\n                if (this.createdDraftInPreview) {\n                    setTimeout(() => {\n                        this.createDraftNoticeHud();\n                        this.createdDraftInPreview = false;\n                    }, 750);\n                }\n            });\n        }\n        return this.preview;\n    },\n\n    createDraftNoticeHud: function() {\n        const $closeBtn = $('<button/>', {\n            class: 'btn',\n            type: 'button',\n            text: Craft.t('app', 'Keep it'),\n        });\n        const $deleteBtn = $('<button/>', {\n            class: 'btn caution',\n            type: 'button',\n            text: Craft.t('app', 'Delete it'),\n        });\n\n        const hud = new Garnish.HUD(\n            $('#context-btngroup'),\n            $('<div/>', {class: 'readable centeralign'})\n                .append(\n                    $('<p/>', {\n                        text: Craft.t('app', 'You’re now editing a draft.'),\n                    })\n                )\n                .append(\n                    $('<div/>', {class: 'flex flex-nowrap'})\n                        .append($closeBtn)\n                        .append($deleteBtn)\n                ),\n            {\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n            }\n        );\n\n        $closeBtn.on('click', () => {\n            hud.hide();\n            hud.destroy();\n        });\n\n        $deleteBtn.on('click', () => {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this draft?'))) {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.deleteDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }\n        })\n    },\n\n    openPreview: function() {\n        return new Promise((resolve, reject) => {\n            this.openingPreview = true;\n            this.ensureIsDraftOrRevision(true)\n                .then(() => {\n                    this.getPreview().open();\n                    this.openingPreview = false;\n                    resolve();\n                })\n                .catch(reject);\n        })\n    },\n\n    ensureIsDraftOrRevision: function(onlyIfChanged) {\n        return new Promise((resolve, reject) => {\n            if (!this.settings.draftId && !this.settings.revisionId) {\n                if (\n                    onlyIfChanged &&\n                    this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                ) {\n                    resolve();\n                    return;\n                }\n\n                this.createDraft()\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                resolve();\n            }\n        });\n    },\n\n    serializeForm: function(removeActionParams) {\n        let data = Craft.cp.$primaryForm.serialize();\n\n        if (this.isPreviewActive()) {\n            // Replace the temp input with the preview form data\n            data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n        }\n\n        if (removeActionParams && !this.settings.isUnpublishedDraft) {\n            // Remove action and redirect params\n            data = data.replace(/&action=[^&]*/, '');\n            data = data.replace(/&redirect=[^&]*/, '');\n        }\n\n        return data;\n    },\n\n    checkForm: function(force) {\n        // If this isn't a draft and there's no active preview, then there's nothing to check\n        if (\n            this.settings.revisionId ||\n            (!this.settings.draftId && !this.isPreviewActive()) ||\n            this.pauseLevel > 0\n        ) {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.timeout = null;\n\n        // Has anything changed?\n        const data = this.serializeForm(true);\n        if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n            this.saveDraft(data);\n        }\n    },\n\n    isPreviewActive: function() {\n        return this.preview && this.preview.isActive;\n    },\n\n    createDraft: function() {\n        return new Promise((resolve, reject) => {\n            this.saveDraft(this.serializeForm(true))\n                .then(resolve)\n                .catch(reject);\n        });\n    },\n\n    saveDraft: function(data) {\n        return new Promise((resolve, reject) => {\n            // Ignore if we're already submitting the main form\n            if (this.submittingForm) {\n                reject();\n                return;\n            }\n\n            if (this.saving) {\n                this.queue.push(() => {\n                    this.checkForm()\n                });\n                return;\n            }\n\n            this.lastSerializedValue = data;\n            this.saving = true;\n            const $spinners = this.spinners().removeClass('hidden');\n            const $statusIcons = this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('invisible checkmark-icon alert-icon fade-out')\n                .addClass('hidden');\n            if (this.$saveMetaBtn) {\n                this.$saveMetaBtn.addClass('active');\n            }\n            this.errors = null;\n\n            const url = Craft.getActionUrl(this.settings.saveDraftAction);\n\n            this.saveXhr = Craft.postActionRequest(url, this.prepareData(data), (response, textStatus) => {\n                $spinners.addClass('hidden');\n                if (this.$saveMetaBtn) {\n                    this.$saveMetaBtn.removeClass('active');\n                }\n                this.saving = false;\n\n                if (textStatus === 'abort') {\n                    return;\n                }\n\n                if (textStatus !== 'success' || response.errors) {\n                    this.errors = (response ? response.errors : null) || [];\n                    $statusIcons\n                        .velocity('stop')\n                        .css('opacity', '')\n                        .removeClass('hidden checkmark-icon')\n                        .addClass('alert-icon')\n                        .attr('title', Craft.t('app', 'The draft could not be saved.'));\n                    reject();\n                    return;\n                }\n\n                if (response.title) {\n                    $('#header h1').text(response.title);\n                }\n\n                if (response.docTitle) {\n                    document.title = response.docTitle;\n                }\n\n                this.$revisionLabel.text(response.draftName);\n\n                this.settings.draftName = response.draftName;\n\n                let revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                // Did we just add a site?\n                if (this.newSiteIds) {\n                    // Do we need to create the revision menu?\n                    if (!revisionMenu) {\n                        this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                        new Garnish.MenuBtn(this.$revisionBtn);\n                        revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                        revisionMenu.$container.removeClass('hidden');\n                    }\n                    this.newSiteIds.forEach(siteId => {\n                        const $option = revisionMenu.$options.filter(`[data-site-id=${siteId}]`);\n                        $option.find('.status').removeClass('disabled').addClass('enabled');\n                        const $li = $option.parent().removeClass('hidden');\n                        $li.closest('.site-group').removeClass('hidden');\n                    });\n                    revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                    this.newSiteIds = null;\n                }\n\n                // Did we just create a draft?\n                const draftCreated = !this.settings.draftId;\n                if (draftCreated) {\n                    // Update the document location HREF\n                    let newHref;\n                    const anchorPos = document.location.href.search('#');\n                    if (anchorPos !== -1) {\n                        newHref = document.location.href.substr(0, anchorPos);\n                    } else {\n                        newHref = document.location.href;\n                    }\n                    newHref += (newHref.match(/\\?/) ? '&' : '?') + 'draftId=' + response.draftId;\n                    if (anchorPos !== -1) {\n                        newHref += document.location.href.substr(anchorPos);\n                    }\n                    history.replaceState({}, '', newHref);\n\n                    // Replace the action input\n                    $('#action').remove();\n                    $('<input/>', {\n                        id: 'action',\n                        type: 'hidden',\n                        name: 'action',\n                        value: this.settings.saveDraftAction,\n                    }).appendTo(Craft.cp.$primaryForm);\n\n                    // Remove the \"Create a draft\" and \"Save\" buttons\n                    $('#save-draft-btn-container').remove();\n                    $('#save-btn-container').remove();\n\n                    const $actionButtonContainer = $('#action-buttons');\n\n                    // If they're allowed to update the source, add a \"Publish draft\" button\n                    if (this.settings.canUpdateSource) {\n                        $('<button/>', {\n                            type: 'button',\n                            class: 'btn secondary formsubmit',\n                            text: Craft.t('app', 'Publish draft'),\n                            title: Craft.shortcutText('S', false, true),\n                            data: {\n                                action: this.settings.publishDraftAction,\n                                redirect: this.settings.hashedCpEditUrl,\n                            },\n                        }).appendTo($actionButtonContainer).formsubmit();\n                    }\n\n                    // Add a \"Save draft\" button\n                    const $saveBtnContainer = $('<div/>', {\n                        id: 'save-btn-container',\n                        class: 'btngroup submit',\n                    }).appendTo($actionButtonContainer);\n\n                    $('<button/>', {\n                        type: 'submit',\n                        class: 'btn submit',\n                        text: Craft.t('app', 'Save draft'),\n                    }).appendTo($saveBtnContainer);\n\n                    if (this.settings.saveDraftAction || this.settings.deleteDraftAction) {\n                        const $menuBtn = $('<button/>', {\n                            type: 'button',\n                            class: 'btn submit menubtn',\n                        }).appendTo($saveBtnContainer);\n                        const $menu = $('<div/>', {\n                            class: 'menu',\n                            attr: {\n                                'data-align': 'right',\n                            },\n                        }).appendTo($saveBtnContainer);\n\n                        if (this.settings.saveDraftAction) {\n                            const $ul = $('<ul/>')\n                                .appendTo($menu)\n                                .append(\n                                    $('<li/>')\n                                        .append(\n                                            $('<a/>', {\n                                                class: 'formsubmit',\n                                                data: {\n                                                    action: this.settings.saveDraftAction,\n                                                },\n                                                text: Craft.t('app', 'Save and continue editing'),\n                                            })\n                                                .prepend(\n                                                    $('<span/>', {\n                                                        class: 'shortcut',\n                                                        text: Craft.shortcutText('S'),\n                                                    })\n                                                )\n                                        )\n                                );\n                            if (this.settings.canUpdateSource && this.settings.hashedAddAnotherRedirectUrl) {\n                                $ul.append(\n                                    $('<li/>')\n                                        .append(\n                                            $('<a/>', {\n                                                class: 'formsubmit',\n                                                data: {\n                                                    action: this.settings.publishDraftAction,\n                                                    redirect: this.settings.hashedAddAnotherRedirectUrl,\n                                                },\n                                                text: Craft.t('app', 'Publish and add another'),\n                                            })\n                                        )\n                                );\n                            }\n                            if (this.settings.deleteDraftAction) {\n                                $('<hr/>').appendTo($menu);\n                            }\n                        }\n\n                        if (this.settings.deleteDraftAction) {\n                            $('<ul/>')\n                                .appendTo($menu)\n                                .append(\n                                    $('<li/>')\n                                        .append(\n                                            $('<a/>', {\n                                                class: 'formsubmit error',\n                                                data: {\n                                                    action: this.settings.deleteDraftAction,\n                                                    redirect: this.settings.hashedCpEditUrl,\n                                                    confirm: Craft.t('app', 'Are you sure you want to delete this draft?'),\n                                                },\n                                                text: Craft.t('app', 'Delete draft'),\n                                            })\n                                        )\n                                )\n                        }\n                    }\n\n                    Craft.initUiElements($saveBtnContainer);\n\n                    // Update the editor settings\n                    this.settings.draftId = response.draftId;\n                    this.settings.isLive = false;\n                    this.previewToken = null;\n                    this.initForDraft();\n\n                    // Add the draft to the revision menu\n                    if (revisionMenu) {\n                        revisionMenu.$options.filter(':not(.site-option)').removeClass('sel');\n                        let $draftsUl = revisionMenu.$container.find('.revision-group-drafts');\n                        if (!$draftsUl.length) {\n                            const $draftHeading = $('<h6/>', {\n                                text: Craft.t('app', 'Drafts'),\n                            }).insertAfter(revisionMenu.$container.find('.revision-group-current'));\n                            $draftsUl = $('<ul/>', {\n                                'class': 'padded revision-group-drafts',\n                            }).insertAfter($draftHeading);\n                        }\n                        const $draftLi = $('<li/>').prependTo($draftsUl);\n                        const $draftA = $('<a/>', {\n                            'class': 'sel',\n                            html: '<span class=\"draft-name\"></span> <span class=\"draft-meta light\"></span>',\n                        }).appendTo($draftLi);\n                        revisionMenu.addOptions($draftA);\n                        revisionMenu.selectOption($draftA);\n\n                        // Update the site URLs\n                        const $siteOptions = revisionMenu.$options.filter('.site-option[href]');\n                        for (let i = 0; i < $siteOptions.length; i++) {\n                            const $siteOption = $siteOptions.eq(i);\n                            $siteOption.attr('href', Craft.getUrl($siteOption.attr('href'), {draftId: response.draftId}));\n                        }\n                    }\n\n                    // is Live Preview currently active?\n                    if (this.openingPreview || (this.preview && this.preview.isActive)) {\n                        this.createdDraftInPreview = true;\n                    }\n                }\n\n                if (revisionMenu) {\n                    revisionMenu.$options.filter('.sel').find('.draft-name').text(response.draftName);\n                    revisionMenu.$options.filter('.sel').find('.draft-meta').text('– ' + (response.creator\n                            ? Craft.t('app', 'saved {timestamp} by {creator}', {\n                                timestamp: response.timestamp,\n                                creator: response.creator\n                            })\n                            : Craft.t('app', 'updated {timestamp}', {\n                                timestamp: response.timestamp,\n                            })\n                    ));\n                }\n\n                // Did the controller send us updated preview targets?\n                if (\n                    response.previewTargets &&\n                    JSON.stringify(response.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                ) {\n                    this.updatePreviewTargets(response.previewTargets);\n                }\n\n                this.afterUpdate(data);\n\n                if (draftCreated) {\n                    this.trigger('createDraft');\n                }\n\n                if (this.$nameTextInput) {\n                    this.checkMetaValues();\n                }\n\n                for (const oldId in response.duplicatedElements) {\n                    if (oldId != this.settings.sourceId && response.duplicatedElements.hasOwnProperty(oldId)) {\n                        this.duplicatedElements[oldId] = response.duplicatedElements[oldId];\n                    }\n                }\n\n                resolve();\n            });\n        });\n    },\n\n    prepareData: function(data) {\n        // Swap out element IDs with their duplicated ones\n        data = this.swapDuplicatedElementIds(data);\n\n        // Add the draft info\n        if (this.settings.draftId) {\n            data += `&draftId=${this.settings.draftId}`;\n        }\n\n        if (this.settings.draftName !== null) {\n            data += `&draftName=${this.settings.draftName}`;\n        }\n\n        // Filter out anything that hasn't changed\n        const initialData = this.swapDuplicatedElementIds(Craft.cp.$primaryForm.data('initialSerializedValue'));\n        return Craft.findDeltaData(initialData, data, this.getDeltaNames());\n    },\n\n    swapDuplicatedElementIds: function(data) {\n        const idsRE = Object.keys(this.duplicatedElements).join('|');\n        if (idsRE === '') {\n            return data;\n        }\n        const lb = encodeURIComponent('[');\n        const rb = encodeURIComponent(']');\n        // Keep replacing field IDs until data stops changing\n        while (true) {\n            if (data === (\n                data = data\n                    // &fields[...][X]\n                    .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                        return pre + this.duplicatedElements[id] + post;\n                    })\n                    // &fields[...=X\n                    .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                        return pre + this.duplicatedElements[id];\n                    })\n            )) {\n                break;\n            }\n        }\n        return data;\n    },\n\n    getDeltaNames: function() {\n        const deltaNames = Craft.deltaNames.slice(0);\n        for (let i = 0; i < deltaNames.length; i++) {\n            for (const oldId in this.duplicatedElements) {\n                if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                    deltaNames[i] = deltaNames[i].replace('][' + oldId + ']', '][' + this.duplicatedElements[oldId] + ']');\n                }\n            }\n        }\n        return deltaNames;\n    },\n\n    updatePreviewTargets: function(previewTargets) {\n        previewTargets.forEach(newTarget => {\n            const currentTarget = this.settings.previewTargets.find(t => t.label === newTarget.label);\n            if (currentTarget) {\n                currentTarget.url = newTarget.url;\n            }\n        });\n    },\n\n    afterUpdate: function(data) {\n        Craft.cp.$primaryForm.data('initialSerializedValue', data);\n        Craft.initialDeltaValues = {};\n        const $statusIcons = this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden')\n            .addClass('checkmark-icon')\n            .attr('title', Craft.t('app', 'The draft has been saved.'));\n\n        if (!Craft.autosaveDrafts) {\n            // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n            $statusIcons\n                .velocity('stop')\n                .velocity({\n                    opacity: 0,\n                }, {\n                    delay: 2000,\n                    complete: () => {\n                        $statusIcons.addClass('hidden');\n                    },\n                });\n        }\n\n        this.trigger('update');\n\n        this.nextInQueue();\n    },\n\n    nextInQueue: function() {\n        if (this.queue.length) {\n            this.queue.shift()();\n        }\n    },\n\n    showMetaHud: function() {\n        if (!this.metaHud) {\n            this.createMetaHud();\n            this.onMetaHudShow();\n        } else {\n            this.metaHud.show();\n        }\n\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$nameTextInput.trigger('focus');\n        }\n    },\n\n    createMetaHud: function() {\n        const $hudBody = $('<div/>');\n\n        // Add the Name field\n        const $nameField = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n        const $nameInputContainer = $('<div class=\"input\"/>').appendTo($nameField);\n        this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($nameInputContainer).val(this.settings.draftName);\n\n        // HUD footer\n        const $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n        $('<div class=\"flex-grow\"></div>').appendTo($footer);\n        this.$saveMetaBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo($footer);\n\n        this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n            onSubmit: this.saveMeta.bind(this)\n        });\n\n        this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n\n        this.metaHud.on('show', this.onMetaHudShow.bind(this));\n        this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n        this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n    },\n\n    onMetaHudShow: function() {\n        this.$editMetaBtn.addClass('active');\n    },\n\n    onMetaHudHide: function() {\n        this.$editMetaBtn.removeClass('active');\n    },\n\n    onMetaHudEscape: function() {\n        this.$nameTextInput.val(this.settings.draftName);\n    },\n\n    checkMetaValues: function() {\n        if (\n            this.$nameTextInput.val() &&\n            this.$nameTextInput.val() !== this.settings.draftName\n        ) {\n            this.$saveMetaBtn.removeClass('disabled');\n            return true;\n        }\n\n        this.$saveMetaBtn.addClass('disabled');\n        return false;\n    },\n\n    shakeMetaHud: function() {\n        Garnish.shake(this.metaHud.$hud);\n    },\n\n    saveMeta: function() {\n        if (!this.checkMetaValues()) {\n            this.shakeMetaHud();\n            return;\n        }\n\n        this.settings.draftName = this.$nameTextInput.val();\n\n        this.metaHud.hide();\n        this.checkForm(true);\n    },\n\n    handleFormSubmit: function(ev) {\n        ev.preventDefault();\n\n        // Prevent double form submits\n        if (this.submittingForm) {\n            return;\n        }\n\n        // If this a draft and was this a normal save (either via submit button or save shortcut),\n        // then trigger an autosave\n        if (\n            this.settings.draftId &&\n            (typeof ev.autosave === 'undefined' || ev.autosave) &&\n            (ev.saveShortcut || (ev.customTrigger && ev.customTrigger.data('action') === this.settings.saveDraftAction))\n        ) {\n            this.checkForm(true);\n            return;\n        }\n\n        // Prevent the normal unload confirmation dialog\n        Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n        // Abort the current save request if there is one\n        if (this.saving) {\n            this.saveXhr.abort();\n        }\n\n        // Duplicate the form with normalized data\n        const data = this.prepareData(this.serializeForm(false));\n        const $form = Craft.createForm(data);\n\n        $form.appendTo(Garnish.$bod);\n        $form.submit();\n        this.submittingForm = true;\n    },\n}, {\n    defaults: {\n        elementType: null,\n        sourceId: null,\n        siteId: null,\n        isUnpublishedDraft: false,\n        enabled: false,\n        enabledForSite: false,\n        isLive: false,\n        siteStatuses: null,\n        addlSiteIds: [],\n        cpEditUrl: null,\n        draftId: null,\n        revisionId: null,\n        draftName: null,\n        canEditMultipleSites: false,\n        canUpdateSource: false,\n        saveDraftAction: null,\n        deleteDraftAction: null,\n        publishDraftAction: null,\n        hashedCpEditUrl: null,\n        hashedAddAnotherRedirectUrl: null,\n        enablePreview: false,\n        previewTargets: [],\n        siteToken: null,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend({\n    callback: $.noop,\n\n    init: function(source, target, callback) {\n        this.callback = callback;\n        this.base(source, target);\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return this.callback(sourceVal);\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend({\n    initialized: false,\n\n    id: null,\n    baseName: null,\n    columns: null,\n    sorter: null,\n    biggestId: -1,\n\n    $table: null,\n    $tbody: null,\n    $addRowBtn: null,\n\n    rowCount: 0,\n    hasMaxRows: false,\n    hasMinRows: false,\n\n    radioCheckboxes: null,\n\n    init: function(id, baseName, columns, settings) {\n        this.id = id;\n        this.baseName = baseName;\n        this.columns = columns;\n        this.setSettings(settings, Craft.EditableTable.defaults);\n        this.radioCheckboxes = {};\n\n        this.$table = $('#' + id);\n        this.$tbody = this.$table.children('tbody');\n        this.rowCount = this.$tbody.find('tr').length;\n\n        // Is this already an editable table?\n        if (this.$table.data('editable-table')) {\n            Garnish.log('Double-instantiating an editable table on an element');\n            this.$table.data('editable-table').destroy();\n        }\n\n        this.$table.data('editable-table', this);\n\n        this.sorter = new Craft.DataTableSorter(this.$table, {\n            helperClass: 'editabletablesorthelper',\n            copyDraggeeInputValuesToHelper: true\n        });\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            // Give everything a chance to initialize\n            setTimeout(this.initializeIfVisible.bind(this), 500);\n        }\n\n        if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n            for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                this.addRow()\n            }\n        }\n    },\n\n    isVisible: function() {\n        return (this.$table.parent().height() > 0);\n    },\n\n    initialize: function() {\n        if (this.initialized) {\n            return false;\n        }\n\n        this.initialized = true;\n        this.removeListener(Garnish.$win, 'resize');\n\n        var $rows = this.$tbody.children();\n\n        for (var i = 0; i < $rows.length; i++) {\n            this.createRowObj($rows[i]);\n        }\n\n        this.$addRowBtn = this.$table.next('.add');\n        this.updateAddRowButton();\n        this.addListener(this.$addRowBtn, 'activate', 'addRow');\n        return true;\n    },\n    initializeIfVisible: function() {\n        this.removeListener(Garnish.$win, 'resize');\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n        }\n    },\n    updateAddRowButton: function() {\n        if (!this.canAddRow()) {\n            this.$addRowBtn.css('opacity', '0.2');\n            this.$addRowBtn.css('pointer-events', 'none');\n        } else {\n            this.$addRowBtn.css('opacity', '1');\n            this.$addRowBtn.css('pointer-events', 'auto');\n        }\n    },\n    canDeleteRow: function() {\n        return (this.rowCount > this.settings.minRows);\n    },\n    deleteRow: function(row) {\n        if (!this.canDeleteRow()) {\n            return;\n        }\n\n        this.sorter.removeItems(row.$tr);\n        row.$tr.remove();\n\n        this.rowCount--;\n\n        this.updateAddRowButton();\n        if (this.rowCount === 0) {\n            this.$table.addClass('hidden');\n        }\n\n        // onDeleteRow callback\n        this.settings.onDeleteRow(row.$tr);\n\n        row.destroy();\n    },\n    canAddRow: function() {\n        if (this.settings.staticRows) {\n            return false;\n        }\n\n        if (this.settings.maxRows) {\n            return (this.rowCount < this.settings.maxRows);\n        }\n\n        return true;\n    },\n    addRow: function(focus, prepend) {\n        if (!this.canAddRow()) {\n            return;\n        }\n\n        var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n            $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n        if (prepend) {\n            $tr.prependTo(this.$tbody);\n        } else {\n            $tr.appendTo(this.$tbody);\n        }\n\n        var row = this.createRowObj($tr);\n        this.sorter.addItems($tr);\n\n        // Focus the first input in the row\n        if (focus !== false) {\n            $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n        }\n\n        this.rowCount++;\n        this.updateAddRowButton();\n        this.$table.removeClass('hidden');\n\n        // onAddRow callback\n        this.settings.onAddRow($tr);\n\n        return row;\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n    },\n\n    createRowObj: function($tr) {\n        return new Craft.EditableTable.Row(this, $tr);\n    },\n\n    focusOnPrevRow: function($tr, tdIndex, blurTd) {\n        var $prevTr = $tr.prev('tr');\n        var prevRow;\n\n        if ($prevTr.length) {\n            prevRow = $prevTr.data('editable-table-row');\n        } else {\n            prevRow = this.addRow(false, true);\n        }\n\n        // Focus on the same cell in the previous row\n        if (!prevRow) {\n            return;\n        }\n\n        if (!prevRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($prevTr) {\n                this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    focusOnNextRow: function($tr, tdIndex, blurTd) {\n        var $nextTr = $tr.next('tr');\n        var nextRow;\n\n        if ($nextTr.length) {\n            nextRow = $nextTr.data('editable-table-row');\n        } else {\n            nextRow = this.addRow(false);\n        }\n\n        // Focus on the same cell in the next row\n        if (!nextRow) {\n            return;\n        }\n\n        if (!nextRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($nextTr) {\n                this.focusOnNextRow($nextTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    importData: function(data, row, tdIndex) {\n        let lines = data.split(/\\r?\\n|\\r/);\n        for (let i = 0; i < lines.length; i++) {\n            let values = lines[i].split(\"\\t\");\n            for (let j = 0; j < values.length; j++) {\n                let value = values[j];\n                row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                    .val(value)\n                    .trigger('input');\n            }\n\n            // move onto the next row\n            let $nextTr = row.$tr.next('tr');\n            if ($nextTr.length) {\n                row = $nextTr.data('editable-table-row');\n            } else {\n                row = this.addRow(false);\n            }\n        }\n    },\n}, {\n    textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n    defaults: {\n        rowIdPrefix: '',\n        defaultValues: {},\n        staticRows: false,\n        minRows: null,\n        maxRows: null,\n        onAddRow: $.noop,\n        onDeleteRow: $.noop\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        var $tr = $('<tr/>', {\n            'data-id': rowId\n        });\n\n        for (var colId in columns) {\n            if (!columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            var col = columns[colId],\n                value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                $cell;\n\n            if (col.type === 'heading') {\n                $cell = $('<th/>', {\n                    'scope': 'row',\n                    'class': col['class'],\n                    'html': value\n                });\n            } else {\n                var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                $cell = $('<td/>', {\n                    'class': `${col.class} ${col.type}-cell`,\n                    'width': col.width\n                });\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $cell.addClass('textual');\n                }\n\n                if (col.code) {\n                    $cell.addClass('code');\n                }\n\n                switch (col.type) {\n                    case 'checkbox':\n                        $('<div class=\"checkbox-wrapper\"/>')\n                            .append(Craft.ui.createCheckbox({\n                                    name: name,\n                                    value: col.value || '1',\n                                    checked: !!value\n                                })\n                            )\n                            .appendTo($cell);\n                        break;\n\n                    case 'color':\n                        Craft.ui.createColorInput({\n                            name: name,\n                            value: value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'date':\n                        Craft.ui.createDateInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'lightswitch':\n                        Craft.ui.createLightswitch({\n                            name: name,\n                            value: col.value || '1',\n                            on: !!value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'select':\n                        Craft.ui.createSelect({\n                            name: name,\n                            options: col.options,\n                            value: value || (function() {\n                                for (var key in col.options) {\n                                    if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                        return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                    }\n                                }\n                                return null;\n                            })(),\n                            'class': 'small'\n                        }).appendTo($cell);\n                        break;\n\n                    case 'time':\n                        Craft.ui.createTimeInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'email':\n                    case 'url':\n                        Craft.ui.createTextInput({\n                            name: name,\n                            value: value,\n                            type: col.type,\n                            placeholder: col.placeholder || null,\n                        }).appendTo($cell);\n                        break;\n\n                    default:\n                        $('<textarea/>', {\n                            'name': name,\n                            'rows': col.rows || 1,\n                            'val': value,\n                            'placeholder': col.placeholder\n                        }).appendTo($cell);\n                }\n            }\n\n            $cell.appendTo($tr);\n        }\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'move icon',\n                'title': Craft.t('app', 'Reorder')\n            })\n        ).appendTo($tr);\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Delete')\n            })\n        ).appendTo($tr);\n\n        return $tr;\n    }\n});\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend({\n    table: null,\n    id: null,\n    niceTexts: null,\n\n    $tr: null,\n    $tds: null,\n    tds: null,\n    $textareas: null,\n    $deleteBtn: null,\n\n    init: function(table, tr) {\n        this.table = table;\n        this.$tr = $(tr);\n        this.$tds = this.$tr.children();\n        this.tds = [];\n        this.id = this.$tr.attr('data-id');\n\n        this.$tr.data('editable-table-row', this);\n\n        // Get the row ID, sans prefix\n        var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n        if (id > this.table.biggestId) {\n            this.table.biggestId = id;\n        }\n\n        this.$textareas = $();\n        this.niceTexts = [];\n        var textareasByColId = {};\n\n        var i = 0;\n        var colId, col, td, $textarea, $checkbox;\n\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n            td = this.tds[colId] = this.$tds[i];\n\n            if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                $textarea = $('textarea', td);\n                this.$textareas = this.$textareas.add($textarea);\n\n                this.addListener($textarea, 'focus', 'onTextareaFocus');\n                this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                this.niceTexts.push(new Garnish.NiceText($textarea, {\n                    onHeightChange: this.onTextareaHeightChange.bind(this)\n                }));\n\n                this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                $textarea.trigger('input');\n\n                if (col.type !== 'multiline') {\n                    this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                }\n\n                textareasByColId[colId] = $textarea;\n            } else if (col.type === 'checkbox') {\n                $checkbox = $('input[type=\"checkbox\"]', td);\n\n                if (col.radioMode) {\n                    if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                        this.table.radioCheckboxes[colId] = [];\n                    }\n                    this.table.radioCheckboxes[colId].push($checkbox[0]);\n                    this.addListener($checkbox, 'change', {colId}, 'onRadioCheckboxChange');\n                }\n\n                if (col.toggle) {\n                    this.addListener($checkbox, 'change', {colId}, function(ev) {\n                        this.applyToggleCheckbox(ev.data.colId);\n                    });\n                }\n            }\n\n            if (!$(td).hasClass('disabled')) {\n                this.addListener(td, 'click', {td}, function(ev) {\n                    if (ev.target === ev.data.td) {\n                        $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                    }\n                });\n            }\n\n            i++;\n        }\n\n        // Now that all of the text cells have been nice-ified, let's normalize the heights\n        this.onTextareaHeightChange();\n\n        // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n            col = this.table.columns[colId];\n            if (col.type === 'checkbox' && col.toggle) {\n                this.applyToggleCheckbox(colId);\n            }\n        }\n\n        // Now look for any autopopulate columns\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n\n            if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                    allowNonAlphaStart: true\n                });\n            }\n        }\n\n        var $deleteBtn = this.$tr.children().last().find('.delete');\n        this.addListener($deleteBtn, 'click', 'deleteRow');\n\n        var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n        this.addListener($inputs, 'focus', function(ev) {\n            $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n        });\n        this.addListener($inputs, 'blur', function(ev) {\n            $(ev.currentTarget).closest('td').removeClass('focus');\n        });\n    },\n\n    onTextareaFocus: function(ev) {\n        this.onTextareaHeightChange();\n\n        var $textarea = $(ev.currentTarget);\n\n        if ($textarea.data('ignoreNextFocus')) {\n            $textarea.data('ignoreNextFocus', false);\n            return;\n        }\n\n        setTimeout(function() {\n            Craft.selectFullValue($textarea);\n        }, 0);\n    },\n\n    onRadioCheckboxChange: function(ev) {\n        if (ev.currentTarget.checked) {\n            for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                checkbox.checked = (checkbox === ev.currentTarget);\n            }\n        }\n    },\n\n    applyToggleCheckbox: function(checkboxColId) {\n        var checkboxCol = this.table.columns[checkboxColId];\n        var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n        var colId, colIndex, neg;\n        for (var i = 0; i < checkboxCol.toggle.length; i++) {\n            colId = checkboxCol.toggle[i];\n            colIndex = this.table.colum;\n            neg = colId[0] === '!';\n            if (neg) {\n                colId = colId.substr(1);\n            }\n            if ((checked && !neg) || (!checked && neg)) {\n                $(this.tds[colId])\n                    .removeClass('disabled')\n                    .find('textarea, input').prop('disabled', false);\n            } else {\n                $(this.tds[colId])\n                    .addClass('disabled')\n                    .find('textarea, input').prop('disabled', true);\n            }\n        }\n    },\n\n    ignoreNextTextareaFocus: function(ev) {\n        $.data(ev.currentTarget, 'ignoreNextFocus', true);\n    },\n\n    handleKeypress: function(ev) {\n        var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n        var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n        // Going to the next/previous row?\n        if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n            ev.preventDefault();\n            if (ev.shiftKey) {\n                this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            } else {\n                this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            }\n            return;\n        }\n\n        // Was this an invalid number character?\n        if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n            ev.preventDefault();\n        }\n    },\n\n    handlePaste: function(ev) {\n        let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n        if (!data.match(/[\\t\\r\\n]/)) {\n            return;\n        }\n        ev.preventDefault();\n        this.table.importData(data, this, ev.data.tdIndex);\n    },\n\n    validateValue: function(ev) {\n        if (ev.data.type === 'multiline') {\n            return;\n        }\n\n        var safeValue;\n\n        if (ev.data.type === 'number') {\n            // Only grab the number at the beginning of the value (if any)\n            var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n            if (match !== null) {\n                safeValue = match[1];\n            } else {\n                safeValue = '';\n            }\n        } else {\n            // Just strip any newlines\n            safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n        }\n\n        if (safeValue !== ev.currentTarget.value) {\n            ev.currentTarget.value = safeValue;\n        }\n    },\n\n    onTextareaHeightChange: function() {\n        // Keep all the textareas' heights in sync\n        var tallestTextareaHeight = -1;\n\n        for (var i = 0; i < this.niceTexts.length; i++) {\n            if (this.niceTexts[i].height > tallestTextareaHeight) {\n                tallestTextareaHeight = this.niceTexts[i].height;\n            }\n        }\n\n        this.$textareas.css('min-height', tallestTextareaHeight);\n\n        // If the <td> is still taller, go with that instead\n        var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n        if (tdHeight > tallestTextareaHeight) {\n            this.$textareas.css('min-height', tdHeight);\n        }\n    },\n\n    deleteRow: function() {\n        this.table.deleteRow(this);\n    }\n}, {\n    numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend({\n    maxLevels: null,\n    newChildUrl: null,\n    $trigger: null,\n    $selectedItems: null,\n    triggerEnabled: true,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n        this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n        // Do we have a custom handler?\n        if (this.settings.activate) {\n            // Prevent the element index's click handler\n            this.$trigger.data('custom-handler', true);\n\n            // Is this a custom trigger?\n            if (this.$trigger.prop('nodeName') === 'FORM') {\n                this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n            } else {\n                this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n            }\n        }\n\n        this.updateTrigger();\n        Craft.elementIndex.on('selectionChange', this.updateTrigger.bind(this));\n    },\n\n    updateTrigger: function() {\n        // Ignore if the last element was just unselected\n        if (Craft.elementIndex.getSelectedElements().length === 0) {\n            return;\n        }\n\n        if (this.validateSelection()) {\n            this.enableTrigger();\n        } else {\n            this.disableTrigger();\n        }\n    },\n\n    /**\n     * Determines if this action can be performed on the currently selected elements.\n     *\n     * @return boolean\n     */\n    validateSelection: function() {\n        var valid = true;\n        this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n        if (!this.settings.batch && this.$selectedItems.length > 1) {\n            valid = false;\n        } else if (typeof this.settings.validateSelection === 'function') {\n            valid = this.settings.validateSelection(this.$selectedItems);\n        }\n\n        return valid;\n    },\n\n    enableTrigger: function() {\n        if (this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.removeClass('disabled');\n        this.triggerEnabled = true;\n    },\n\n    disableTrigger: function() {\n        if (!this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.addClass('disabled');\n        this.triggerEnabled = false;\n    },\n\n    handleTriggerActivation: function(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (this.triggerEnabled) {\n            this.settings.activate(this.$selectedItems);\n        }\n    }\n}, {\n    defaults: {\n        type: null,\n        batch: true,\n        validateSelection: null,\n        activate: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend({\n    queue: null,\n    workers: [],\n\n    init: function() {\n        this.queue = [];\n\n        for (var i = 0; i < 3; i++) {\n            this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n        }\n    },\n\n    load: function($elements) {\n        // Only immediately load the visible images\n        let $thumbs = $elements.find('.elementthumb');\n        for (let i = 0; i < $thumbs.length; i++) {\n            let $thumb = $thumbs.eq(i);\n            let $scrollParent = $thumb.scrollParent();\n            if (this.isVisible($thumb, $scrollParent)) {\n                this.addToQueue($thumb[0]);\n            } else {\n                let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                $scrollParent.on(`scroll.${key}`, {\n                    $thumb: $thumb,\n                    $scrollParent: $scrollParent,\n                    key: key,\n                }, (ev) => {\n                    if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                        delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                        $scrollParent.off(`scroll.${ev.data.key}`);\n                        this.addToQueue(ev.data.$thumb[0]);\n                    }\n                });\n            }\n        }\n    },\n\n    addToQueue: function(thumb) {\n        this.queue.push(thumb);\n\n        // See if there are any inactive workers\n        for (var i = 0; i < this.workers.length; i++) {\n            if (!this.workers[i].active) {\n                this.workers[i].loadNext();\n            }\n        }\n    },\n\n    isVisible: function($thumb, $scrollParent) {\n        let thumbOffset = $thumb.offset().top;\n        let scrollParentOffset, scrollParentHeight;\n        if ($scrollParent[0] === document) {\n            scrollParentOffset = $scrollParent.scrollTop();\n            scrollParentHeight = Garnish.$win.height();\n        } else {\n            scrollParentOffset = $scrollParent.offset().top;\n            scrollParentHeight = $scrollParent.height();\n        }\n        return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.workers.length; i++) {\n            this.workers[i].destroy();\n        }\n\n        this.base();\n    }\n}, {\n    invisibleThumbs: {},\n    retryAll: function() {\n        for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n            let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n            delete Craft.ElementThumbLoader.invisibleThumbs[key];\n            $scrollParent.off(`scroll.${key}`);\n            queue.load($thumb.parent());\n        }\n    }\n});\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend({\n    loader: null,\n    active: false,\n\n    init: function(loader) {\n        this.loader = loader;\n    },\n\n    loadNext: function() {\n        var container = this.loader.queue.shift();\n        if (typeof container === 'undefined') {\n            this.active = false;\n            return;\n        }\n\n        this.active = true;\n        var $container = $(container);\n        if ($container.find('img').length) {\n            this.loadNext();\n            return;\n        }\n        var $img = $('<img/>', {\n            sizes: $container.attr('data-sizes'),\n            srcset: $container.attr('data-srcset'),\n            alt: ''\n        });\n        this.addListener($img, 'load,error', 'loadNext');\n        $img.appendTo($container);\n        picturefill({\n            elements: [$img[0]]\n        });\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend({\n    $form: null,\n    inputs: null,\n\n    init: function(form, inputs) {\n        this.$form = $(form);\n\n        // Only check specific inputs?\n        if (typeof inputs !== 'undefined') {\n            this.inputs = [];\n            inputs = $.makeArray(inputs);\n\n            for (var i = 0; i < inputs.length; i++) {\n                var $inputs = $(inputs[i]);\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $inputs.eq(j);\n\n                    this.inputs.push({\n                        input: $input,\n                        val: Garnish.getInputPostVal($input)\n                    });\n                }\n            }\n        }\n\n        this.addListener(this.$form, 'submit', 'handleFormSubmit');\n    },\n\n    handleFormSubmit: function(ev) {\n        // Ignore if we're in the middle of getting the elevated session timeout\n        if (Craft.elevatedSessionManager.fetchingTimeout) {\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            return;\n        }\n\n        // Are we only interested in certain inputs?\n        if (this.inputs) {\n            var inputsChanged = false;\n            var $input;\n\n            for (var i = 0; i < this.inputs.length; i++) {\n                $input = this.inputs[i].input;\n                // Is this a password input?\n                if ($input.data('passwordInput')) {\n                    $input = $input.data('passwordInput').$currentInput;\n                }\n\n                // Has this input's value changed?\n                if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                    inputsChanged = true;\n                    break;\n                }\n            }\n\n            if (!inputsChanged) {\n                // No need to interrupt the submit\n                return;\n            }\n        }\n\n        // Prevent the form from submitting until the user has an elevated session\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n        Craft.elevatedSessionManager.requireElevatedSession(this.submitForm.bind(this));\n    },\n\n    submitForm: function() {\n        // Don't let handleFormSubmit() interrupt this time\n        this.disable();\n        this.$form.trigger('submit');\n        this.enable();\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend({\n    fetchingTimeout: false,\n\n    passwordModal: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $submitBtn: null,\n    $errorPara: null,\n\n    callback: null,\n\n    /**\n     * Requires that the user has an elevated session.\n     *\n     * @param {function} callback The callback function that should be called once the user has an elevated session\n     */\n    requireElevatedSession: function(callback) {\n        this.callback = callback;\n\n        // Check the time remaining on the user's elevated session (if any)\n        this.fetchingTimeout = true;\n\n        Craft.postActionRequest('users/get-elevated-session-timeout', (response, textStatus) => {\n            this.fetchingTimeout = false;\n\n            if (textStatus === 'success') {\n                // Is there still enough time left or has it been disabled?\n                if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                    this.callback();\n                } else {\n                    // Show the password modal\n                    this.showPasswordModal();\n                }\n            }\n        });\n    },\n\n    showPasswordModal: function() {\n        if (!this.passwordModal) {\n            var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<td/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Submit'),\n            }).appendTo($buttonContainer);\n            this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.passwordModal = new Garnish.Modal($passwordModal, {\n                closeOtherModals: false,\n                onFadeIn: () => {\n                    setTimeout(this.focusPasswordInput.bind(this), 100);\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($passwordModal, 'submit', 'submitPassword');\n        } else {\n            this.passwordModal.show();\n        }\n    },\n\n    focusPasswordInput: function() {\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$passwordInput.trigger('focus');\n        }\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$submitBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$submitBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    submitPassword: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (!this.validatePassword()) {\n            return;\n        }\n\n        this.$passwordSpinner.removeClass('hidden');\n        this.clearLoginError();\n\n        var data = {\n            currentPassword: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/start-elevated-session', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.passwordModal.hide();\n                    this.callback();\n                } else {\n                    this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                    Garnish.shake(this.passwordModal.$container);\n                    this.focusPasswordInput();\n                }\n            } else {\n                this.showPasswordError();\n            }\n        });\n    },\n\n    showPasswordError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$errorPara.text(error);\n        this.passwordModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showPasswordError('');\n    }\n}, {\n    minSafeElevatedSessionTimeout: 5\n});\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend({\n    publishableSections: null,\n    $newEntryBtnGroup: null,\n    $newEntryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible sections the user has permission to create new entries in\n        this.publishableSections = [];\n\n        for (var i = 0; i < Craft.publishableSections.length; i++) {\n            var section = Craft.publishableSections[i];\n\n            if (this.getSourceByKey('section:' + section.uid)) {\n                this.publishableSections.push(section);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific section in the URL?\n        if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n            if (defaultSectionHandle === 'singles') {\n                return 'singles';\n            } else {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultSectionHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        var handle;\n\n        // Get the handle of the selected source\n        if (this.$source.data('key') === 'singles') {\n            handle = 'singles';\n        } else {\n            handle = this.$source.data('handle');\n        }\n\n        // Update the New Entry button\n        // ---------------------------------------------------------------------\n\n        var i, href, label;\n\n        if (this.publishableSections.length) {\n            // Remove the old button, if there is one\n            if (this.$newEntryBtnGroup) {\n                this.$newEntryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a section that they have permission to create entries in\n            var selectedSection;\n\n            if (handle) {\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    if (this.publishableSections[i].handle === handle) {\n                        selectedSection = this.publishableSections[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n            // Otherwise only show a menu button\n            if (selectedSection) {\n                href = this._getSectionTriggerHref(selectedSection);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                        this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.publishableSections.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n            } else {\n                this.$newEntryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New entry'),\n                }).appendTo(this.$newEntryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    var section = this.publishableSections[i];\n\n                    if (\n                        (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                        (this.settings.context !== 'index' && section !== selectedSection)\n                    ) {\n                        href = this._getSectionTriggerHref(section);\n                        label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newEntryBtnGroup);\n        }\n\n        // Update the URL if we're on the Entries index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'entries';\n\n            if (handle) {\n                uri += '/' + handle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getSectionTriggerHref: function(section) {\n        if (this.settings.context === 'index') {\n            var uri = 'entries/' + section.handle + '/new';\n            let params = {};\n            if (this.siteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        params.site = Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n        } else {\n            return 'data-id=\"' + section.id + '\"';\n        }\n    },\n\n    _openCreateEntryModal: function(sectionId) {\n        if (this.$newEntryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the section\n        var section;\n\n        for (var i = 0; i < this.publishableSections.length; i++) {\n            if (this.publishableSections[i].id == sectionId) {\n                section = this.publishableSections[i];\n                break;\n            }\n        }\n\n        if (!section) {\n            return;\n        }\n\n        this.$newEntryBtn.addClass('inactive');\n        var newEntryBtnText = this.$newEntryBtn.text();\n        this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newEntryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                sectionId: sectionId,\n                typeId: section.entryTypes[0].id,\n                enabled: section.canPublish ? 1 : 0,\n            },\n            onBeginLoading: () => {\n                this.$newEntryBtn.addClass('loading');\n            },\n            onEndLoading: () => {\n                this.$newEntryBtn.removeClass('loading');\n            },\n            onHideHud: () => {\n                this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right section is selected\n                var sectionSourceKey = 'section:' + section.uid;\n\n                if (this.sourceKey !== sectionSourceKey) {\n                    this.selectSourceByKey(sectionSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n\n/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: this.onTabOptionSelect.bind(this)\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const $labelSpan = $tab.find('.tabs .tab span');\n        const oldName = $labelSpan.text();\n        const newName = this.promptForTabName(oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    promptForTabName: function(oldName) {\n        return prompt(Craft.t('app', 'Give your tab a name.'), oldName);\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const name = this.promptForTabName();\n        if (!name) {\n            return;\n        }\n\n        const $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>${name}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend({\n    $toggle: null,\n    targetPrefix: null,\n    targetSelector: null,\n    reverseTargetSelector: null,\n\n    _$target: null,\n    _$reverseTarget: null,\n    type: null,\n\n    init: function(toggle) {\n        this.$toggle = $(toggle);\n\n        // Is this already a field toggle?\n        if (this.$toggle.data('fieldtoggle')) {\n            Garnish.log('Double-instantiating a field toggle on an element');\n            this.$toggle.data('fieldtoggle').destroy();\n        }\n\n        this.$toggle.data('fieldtoggle', this);\n\n        this.type = this.getType();\n\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n        } else {\n            this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n            this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n        }\n\n        this.findTargets();\n\n        switch (this.type) {\n            case 'link':\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n                break;\n            case 'fieldset':\n                this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                break;\n            default:\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n                this.onToggleChange();\n        }\n    },\n\n    normalizeTargetSelector: function(selector) {\n        if (selector && !selector.match(/^[#\\.]/)) {\n            selector = '#' + selector;\n        }\n\n        return selector;\n    },\n\n    getType: function() {\n        let nodeName = this.$toggle.prop('nodeName');\n        if (\n            (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n            this.$toggle.attr('role') === 'checkbox' ||\n            this.$toggle.attr('role') === 'switch'\n        ) {\n            return 'checkbox';\n        }\n\n        switch (nodeName) {\n            case 'SELECT':\n                return 'select';\n            case 'A':\n                return 'link';\n            case 'FIELDSET':\n                return 'fieldset';\n        }\n\n        console.warn('Unexpected field toggle:', this.$toggle[0]);\n    },\n\n    findTargets: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            var toggleVal = this.getToggleVal();\n            this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n        } else {\n            if (this.targetSelector) {\n                this._$target = $(this.targetSelector);\n            }\n\n            if (this.reverseTargetSelector) {\n                this._$reverseTarget = $(this.reverseTargetSelector);\n            }\n        }\n    },\n\n    getToggleVal: function() {\n        if (this.type === 'checkbox') {\n            if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                return this.$toggle.prop('checked');\n            }\n            return this.$toggle.attr('aria-checked') === 'true';\n        }\n\n        let postVal;\n        if (this.type === 'fieldset') {\n            postVal = this.$toggle.find('input:checked:first').val();\n        } else {\n            postVal = Garnish.getInputPostVal(this.$toggle);\n        }\n\n        // Normalize the value\n        return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n    },\n\n    onToggleChange: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.hideTarget(this._$target);\n            this.findTargets();\n            this.showTarget(this._$target);\n        } else {\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n            } else {\n                this.onToggleChange._show = !!this.getToggleVal();\n            }\n\n            if (this.onToggleChange._show) {\n                this.showTarget(this._$target);\n                this.hideTarget(this._$reverseTarget);\n            } else {\n                this.hideTarget(this._$target);\n                this.showTarget(this._$reverseTarget);\n            }\n\n            delete this.onToggleChange._show;\n        }\n    },\n\n    showTarget: function($target) {\n        if ($target && $target.length) {\n            this.showTarget._currentHeight = $target.height();\n\n            $target.removeClass('hidden');\n\n            if (this.type !== 'select' && this.type !== 'fieldset') {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('collapsed');\n                    this.$toggle.addClass('expanded');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.prop('nodeName') !== 'SPAN') {\n                            $t.height('auto');\n                            this.showTarget._targetHeight = $t.height();\n                            $t.css({\n                                height: this.showTarget._currentHeight,\n                                overflow: 'hidden'\n                            });\n\n                            $t.velocity('stop');\n\n                            $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                $t.css({\n                                    height: '',\n                                    overflow: ''\n                                });\n                            });\n                        }\n                    })($target.eq(i));\n                }\n\n                delete this.showTarget._targetHeight;\n            }\n\n            delete this.showTarget._currentHeight;\n\n            // Trigger a resize event in case there are any grids in the target that need to initialize\n            Garnish.$win.trigger('resize');\n        }\n    },\n\n    hideTarget: function($target) {\n        if ($target && $target.length) {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                $target.addClass('hidden');\n            } else {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('expanded');\n                    this.$toggle.addClass('collapsed');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.hasClass('hidden')) {\n                            return;\n                        }\n                        if ($t.prop('nodeName') === 'SPAN') {\n                            $t.addClass('hidden');\n                        } else {\n                            $t.css('overflow', 'hidden');\n                            $t.velocity('stop');\n                            $t.velocity({height: 0}, 'fast', function() {\n                                $t.addClass('hidden');\n                            });\n                        }\n                    })($target.eq(i));\n                }\n            }\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend({\n    $container: null,\n\n    $items: null,\n    items: null,\n    totalCols: null,\n    colGutterDrop: null,\n    colPctWidth: null,\n\n    possibleItemColspans: null,\n    possibleItemPositionsByColspan: null,\n\n    itemPositions: null,\n    itemColspansByPosition: null,\n\n    layouts: null,\n    layout: null,\n    itemHeights: null,\n    leftPadding: null,\n\n    _refreshingCols: false,\n    _refreshColsAfterRefresh: false,\n    _forceRefreshColsAfterRefresh: false,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n\n        // Is this already a grid?\n        if (this.$container.data('grid')) {\n            Garnish.log('Double-instantiating a grid on an element');\n            this.$container.data('grid').destroy();\n        }\n\n        this.$container.data('grid', this);\n\n        this.setSettings(settings, Craft.Grid.defaults);\n\n        // Set the refreshCols() proxy that container resizes will trigger\n        this.handleContainerHeightProxy = () => {\n            this.refreshCols(false, true);\n        };\n\n        this.$items = this.$container.children(this.settings.itemSelector);\n        this.setItems();\n        this.refreshCols(true, false);\n\n        Garnish.$doc.ready(() => {\n            this.refreshCols(false, false);\n        });\n    },\n\n    addItems: function(items) {\n        this.$items = $().add(this.$items.add(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    removeItems: function(items) {\n        this.$items = $().add(this.$items.not(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    resetItemOrder: function() {\n        this.$items = $().add(this.$items);\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    setItems: function() {\n        this.setItems._ = {};\n\n        this.items = [];\n\n        for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n            this.items.push($(this.$items[this.setItems._.i]));\n        }\n\n        delete this.setItems._;\n    },\n\n    refreshCols: function(force) {\n        if (this._refreshingCols) {\n            this._refreshColsAfterRefresh = true;\n            if (force) {\n                this._forceRefreshColsAfterRefresh = true;\n            }\n            return;\n        }\n\n        this._refreshingCols = true;\n\n        if (!this.items.length) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.refreshCols._ = {};\n\n        // Check to see if the grid is actually visible\n        this.refreshCols._.oldHeight = this.$container[0].style.height;\n        this.$container[0].style.height = 1;\n        this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n        this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n        if (this.refreshCols._.scrollHeight === 0) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        if (this.settings.cols) {\n            this.refreshCols._.totalCols = this.settings.cols;\n        } else {\n            this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n            // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n            if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n            }\n\n            if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                this.refreshCols._.totalCols = this.settings.maxCols;\n            }\n        }\n\n        if (this.refreshCols._.totalCols === 0) {\n            this.refreshCols._.totalCols = 1;\n        }\n\n        // Same number of columns as before?\n        if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.totalCols = this.refreshCols._.totalCols;\n        this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n        // Temporarily stop listening to container resizes\n        this.removeListener(this.$container, 'resize');\n\n        if (this.settings.fillMode === 'grid') {\n            this.refreshCols._.itemIndex = 0;\n\n            while (this.refreshCols._.itemIndex < this.items.length) {\n                // Append the next X items and figure out which one is the tallest\n                this.refreshCols._.tallestItemHeight = -1;\n                this.refreshCols._.colIndex = 0;\n\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                    if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                        this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                    }\n\n                    this.refreshCols._.colIndex++;\n                }\n\n                if (this.settings.snapToGrid) {\n                    this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                    if (this.refreshCols._.remainder) {\n                        this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                    }\n                }\n\n                // Now set their heights to the tallest one\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                }\n\n                // set the this.refreshCols._.itemIndex pointer to the next one up\n                this.refreshCols._.itemIndex += this.totalCols;\n            }\n        } else {\n            this.removeListener(this.$items, 'resize');\n\n            // If there's only one column, sneak out early\n            if (this.totalCols === 1) {\n                this.$container.height('auto');\n                this.$items\n                    .show()\n                    .css({\n                        position: 'relative',\n                        width: 'auto',\n                        top: 0\n                    })\n                    .css(Craft.left, 0);\n            } else {\n                this.$items.css('position', 'absolute');\n                this.colPctWidth = (100 / this.totalCols);\n\n                // The setup\n\n                this.layouts = [];\n\n                this.itemPositions = [];\n                this.itemColspansByPosition = [];\n\n                // Figure out all of the possible colspans for each item,\n                // as well as all the possible positions for each item at each of its colspans\n\n                this.possibleItemColspans = [];\n                this.possibleItemPositionsByColspan = [];\n                this.itemHeightsByColspan = [];\n\n                for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                    this.possibleItemColspans[this.refreshCols._.item] = [];\n                    this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                    this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                    this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                    this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                    this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                    this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                    this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                    if (this.refreshCols._.minColspan > this.totalCols) {\n                        this.refreshCols._.minColspan = this.totalCols;\n                    }\n                    if (this.refreshCols._.maxColspan > this.totalCols) {\n                        this.refreshCols._.maxColspan = this.totalCols;\n                    }\n\n                    for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                        // Get the height for this colspan\n                        this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                        this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                        this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                        if (this.refreshCols._.positionLeft) {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = 0;\n                        } else if (this.refreshCols._.positionRight) {\n                            this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                            this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                        } else {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                        }\n\n                        for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                        }\n                    }\n                }\n\n                // Find all the possible layouts\n\n                this.refreshCols._.colHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                    this.refreshCols._.colHeights.push(0);\n                }\n\n                this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                // Now find the layout that looks the best.\n\n                // First find the layouts with the highest number of used columns\n                this.refreshCols._.layoutTotalCols = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                    for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                        if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                            this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                        }\n                    }\n                }\n\n                this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                // Filter out the ones that aren't using as many columns as they could be\n                for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                    if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                        this.layouts.splice(this.refreshCols._.i, 1);\n                    }\n                }\n\n                // Find the layout(s) with the least overall height\n                this.refreshCols._.layoutHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                }\n\n                this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                this.refreshCols._.shortestLayouts = [];\n                this.refreshCols._.emptySpaces = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                    if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                        this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                        // Now get its total empty space, including any trailing empty space\n                        this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                        }\n\n                        this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                    }\n                }\n\n                // And the layout with the least empty space is...\n                this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                // Set the item widths and left positions\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                    this.refreshCols._.css = {\n                        width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                    };\n                    this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                    this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                }\n\n                // If every item is at position 0, then let them lay out au naturel\n                if (this.isSimpleLayout()) {\n                    this.$container.height('auto');\n                    this.$items.css({\n                        position: 'relative',\n                        top: 0,\n                        'margin-bottom': this.settings.gutter + 'px'\n                    });\n                } else {\n                    this.$items.css('position', 'absolute');\n\n                    // Now position the items\n                    this.positionItems();\n\n                    // Update the positions as the items' heigthts change\n                    this.addListener(this.$items, 'resize', 'onItemResize');\n                }\n            }\n        }\n\n        this.completeRefreshCols();\n\n        // Resume container resize listening\n        this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n        this.onRefreshCols();\n    },\n\n    completeRefreshCols: function() {\n        // Delete the internal variable object\n        if (typeof this.refreshCols._ !== 'undefined') {\n            delete this.refreshCols._;\n        }\n\n        this._refreshingCols = false;\n\n        if (this._refreshColsAfterRefresh) {\n            var force = this._forceRefreshColsAfterRefresh;\n            this._refreshColsAfterRefresh = false;\n            this._forceRefreshColsAfterRefresh = false;\n\n            Garnish.requestAnimationFrame(() => {\n                this.refreshCols(force);\n            });\n        }\n    },\n\n    getItemWidth: function(colspan) {\n        return (this.colPctWidth * colspan);\n    },\n\n    getItemWidthCss: function(colspan) {\n        return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n    },\n\n    getItemWidthInPx: function(colspan) {\n        return this.getItemWidth(colspan) / 100 * this.$container.width() - this.colGutterDrop;\n    },\n\n    getItemLeftPosCss: function(position) {\n        return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n    },\n\n    getItemLeftPosInPx: function(position) {\n        return (this.getItemWidth(1) / 100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n    },\n\n    isSimpleLayout: function() {\n        this.isSimpleLayout._ = {};\n\n        for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n            if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                delete this.isSimpleLayout._;\n                return false;\n            }\n        }\n\n        delete this.isSimpleLayout._;\n        return true;\n    },\n\n    positionItems: function() {\n        this.positionItems._ = {};\n\n        this.positionItems._.colHeights = [];\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n            this.positionItems._.colHeights.push(0);\n        }\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n            this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n            this.positionItems._.affectedColHeights = [];\n\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n            }\n\n            this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n            if (this.positionItems._.top > 0) {\n                this.positionItems._.top += this.settings.gutter;\n            }\n\n            this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n            // Now add the new heights to those columns\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n            }\n        }\n\n        // Set the container height\n        this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n        delete this.positionItems._;\n    },\n\n    onItemResize: function(ev) {\n        this.onItemResize._ = {};\n\n        // Prevent this from bubbling up to the container, which has its own resize listener\n        ev.stopPropagation();\n\n        this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n        if (this.onItemResize._.item !== -1) {\n            // Update the height and reposition the items\n            this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n            if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                this.positionItems(false);\n            }\n        }\n\n        delete this.onItemResize._;\n    },\n\n    onRefreshCols: function() {\n        this.trigger('refreshCols');\n        this.settings.onRefreshCols();\n    }\n}, {\n    defaults: {\n        itemSelector: '.item',\n        cols: null,\n        maxCols: null,\n        minColWidth: 320,\n        gutter: 14,\n        fillMode: 'top',\n        colClass: 'col',\n        snapToGrid: null,\n\n        onRefreshCols: $.noop\n    }\n});\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend({\n    grid: null,\n    _: null,\n\n    init: function(grid) {\n        this.grid = grid;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        this._ = {};\n\n        // Loop through all possible colspans\n        for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n            this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n            // Loop through all the possible positions for this colspan,\n            // and find the one that is closest to the top\n\n            this._.tallestColHeightsByPosition = [];\n\n            for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                this._.colHeightsForPosition = [];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                }\n\n                this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n            }\n\n            // And the shortest position for this colspan is...\n            this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n            this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n            // Now log the colspan/position placement\n            this._.positions = prevPositions.slice(0);\n            this._.colspans = prevColspans.slice(0);\n            this._.colHeights = prevColHeights.slice(0);\n            this._.emptySpace = prevEmptySpace;\n\n            this._.positions.push(this._.position);\n            this._.colspans.push(this._.colspan);\n\n            // Add the new heights to those columns\n            this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n            this._.endingCol = this._.position + this._.colspan - 1;\n\n            for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n            }\n\n            // If this is the last item, create the layout\n            if (item === this.grid.items.length - 1) {\n                this.grid.layouts.push({\n                    positions: this._.positions,\n                    colspans: this._.colspans,\n                    colHeights: this._.colHeights,\n                    emptySpace: this._.emptySpace\n                });\n            } else {\n                // Dive deeper\n                this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n            }\n        }\n\n        delete this._;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Remove inner-word punctuation\n        handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        handle = handle.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        handle = Craft.asciiString(handle);\n\n        if (!this.settings.allowNonAlphaStart) {\n            // Handle must start with a letter\n            handle = handle.replace(/^[^a-z]+/, '');\n        }\n\n        // Get the \"words\"\n        var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n        handle = '';\n\n        if (Craft.handleCasing === 'snake') {\n            return words.join('_');\n        }\n\n        // Make it camelCase\n        for (let i = 0; i < words.length; i++) {\n            if (Craft.handleCasing !== 'pascal' && i === 0) {\n                handle += words[i];\n            } else {\n                handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n            }\n        }\n\n        return handle;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend({\n    $container: null,\n    progressBar: null,\n    uploader: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ImageUpload.defaults);\n        this.initImageUpload();\n    },\n\n    initImageUpload: function() {\n        this.$container = $(this.settings.containerSelector);\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl(this.settings.uploadAction),\n            formData: this.settings.postParameters,\n            fileInput: this.$container.find(this.settings.fileInputSelector),\n            paramName: this.settings.uploadParamName\n        };\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n        options.events.fileuploadfail = this._onUploadError.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        this.initButtons();\n    },\n\n    initButtons: function() {\n        this.$container.find(this.settings.uploadButtonSelector).on('click', ev => {\n            this.$container.find(this.settings.fileInputSelector).trigger('click');\n        });\n\n        this.$container.find(this.settings.deleteButtonSelector).on('click', ev => {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        this.refreshImage(response);\n                    }\n                });\n            }\n        });\n    },\n\n    refreshImage: function(response) {\n        $(this.settings.containerSelector).replaceWith(response.html);\n        this.settings.onAfterRefreshImage(response);\n        this.initImageUpload();\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function(event) {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var html = $(data.result.html);\n            this.refreshImage(data.result);\n        }\n\n        // Last file\n        if (this.uploader.isLastUpload()) {\n            this.progressBar.hideProgressBar();\n            this.$container.removeClass('uploading');\n        }\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadError: function(event, data) {\n        if (data.jqXHR.responseJSON.error) {\n            alert(data.jqXHR.responseJSON.error);\n            this.$container.removeClass('uploading');\n            this.progressBar.hideProgressBar();\n            this.progressBar.resetProgressBar();\n        }\n    }\n}, {\n    defaults: {\n        postParameters: {},\n        uploadAction: \"\",\n        deleteAction: \"\",\n        fileInputSelector: \"\",\n\n        onAfterRefreshImage: $.noop,\n        containerSelector: null,\n\n        uploadButtonSelector: null,\n        deleteButtonSelector: null,\n\n        uploadParamName: 'files'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend({\n    $icon: null,\n    content: null,\n    hud: null,\n\n    init: function(icon) {\n        this.$icon = $(icon);\n\n        if (this.$icon.data('infoicon')) {\n            Garnish.log('Double-instantiating an info icon on an element');\n            this.content = this.$icon.data('infoicon').content;\n            this.$icon.data('infoicon').destroy();\n        } else {\n            this.content = this.$icon.html();\n            this.$icon\n                .html('')\n                .attr({\n                    tabindex: 0,\n                    'role': 'button',\n                    'aria-label': Craft.t('app', 'Information'),\n                });\n        }\n\n        this.$icon.data('infoicon', this);\n\n        if (this.$icon[0].previousSibling && this.$icon[0].previousSibling.nodeType === Node.TEXT_NODE) {\n            // Make sure it's in a .nowrap container\n            const $parent = this.$icon.parent();\n            if (!$parent.hasClass('nowrap')) {\n                // Find the last word in the text\n                const m = this.$icon[0].previousSibling.nodeValue.match(/[^\\s\\-]+\\s*$/);\n                if (m) {\n                    this.$icon[0].previousSibling.nodeValue = this.$icon[0].previousSibling.nodeValue.substr(0, m.index);\n                    $('<span/>', {\n                        class: 'nowrap',\n                        html: m[0].replace(/\\s+$/, '') + ' ',\n                    })\n                        .insertAfter(this.$icon[0].previousSibling)\n                        .append(this.$icon);\n                }\n            }\n        }\n\n        this.addListener(this.$icon, 'click', ev => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.showHud();\n        });\n\n        this.addListener(this.$icon, 'keydown', ev => {\n            if (!(this.hud && this.hud.showing) && [Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.showHud();\n            }\n        });\n    },\n\n    showHud: function(ev) {\n        if (!this.hud) {\n            this.hud = new Garnish.HUD(this.$icon, this.content, {\n                hudClass: 'hud info-hud',\n                closeOtherHUDs: false,\n                onShow: () => {\n                    Garnish.shortcutManager.registerShortcut(Garnish.SPACE_KEY, () => {\n                        this.hud.hide();\n                    });\n                },\n            });\n            Craft.initUiElements(this.hud.$body);\n        } else {\n            this.hud.show();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend({\n    settings: null,\n    $outerContainer: null,\n    $innerContainer: null,\n    $input: null,\n    small: false,\n    on: false,\n    indeterminate: false,\n    dragger: null,\n\n    dragStartMargin: null,\n\n    init: function(outerContainer, settings) {\n        this.$outerContainer = $(outerContainer);\n\n        // Is this already a lightswitch?\n        if (this.$outerContainer.data('lightswitch')) {\n            Garnish.log('Double-instantiating a lightswitch on an element');\n            this.$outerContainer.data('lightswitch').destroy();\n        }\n\n        this.$outerContainer.data('lightswitch', this);\n\n        this.small = this.$outerContainer.hasClass('small');\n\n        this.setSettings(settings, Craft.LightSwitch.defaults);\n\n        this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n        this.$input = this.$outerContainer.find('input:first');\n\n        // If the input is disabled, go no further\n        if (this.$input.prop('disabled')) {\n            return;\n        }\n\n        this.on = this.$outerContainer.hasClass('on');\n        this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n        this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n        this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n        this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n            axis: Garnish.X_AXIS,\n            ignoreHandleSelector: null,\n            onDragStart: this._onDragStart.bind(this),\n            onDrag: this._onDrag.bind(this),\n            onDragStop: this._onDragStop.bind(this)\n        });\n\n        // Does the input have on/off labels?\n        let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n        if ($wrapper.length) {\n            this.addListener($wrapper.children('span[data-toggle=\"off\"]'), 'click', this.turnOff);\n            this.addListener($wrapper.children('span[data-toggle=\"on\"]'), 'click', this.turnOn);\n        }\n    },\n\n    turnOn: function(muteEvent) {\n        var changed = !this.on;\n\n        this.on = true;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.value);\n        this.$outerContainer.addClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'true');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnOff: function(muteEvent) {\n        var changed = this.on || this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin();\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val('');\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'false');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnIndeterminate: function(muteEvent) {\n        var changed = !this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = true;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.indeterminateValue);\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.addClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'mixed');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    toggle: function() {\n        if (this.indeterminate || !this.on) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    onChange: function() {\n        this.trigger('change');\n        this.settings.onChange(this.on);\n        this.$outerContainer.trigger('change');\n    },\n\n    _onMouseDown: function() {\n        this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n    },\n\n    _onMouseUp: function() {\n        this.removeListener(Garnish.$doc, 'mouseup');\n\n        // Was this a click?\n        if (!this.dragger.dragging) {\n            this.toggle();\n        }\n    },\n\n    _onKeyDown: function(event) {\n        switch (event.keyCode) {\n            case Garnish.SPACE_KEY: {\n                this.toggle();\n                event.preventDefault();\n                break;\n            }\n            case Garnish.RIGHT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOn();\n                } else {\n                    this.turnOff();\n                }\n\n                event.preventDefault();\n                break;\n            }\n            case Garnish.LEFT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOff();\n                } else {\n                    this.turnOn();\n                }\n\n                event.preventDefault();\n                break;\n            }\n        }\n    },\n\n    _getMargin: function() {\n        return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n    },\n\n    _onDragStart: function() {\n        this.$outerContainer.addClass('dragging');\n        this.dragStartMargin = this._getMargin();\n    },\n\n    _onDrag: function() {\n        var margin;\n\n        if (Craft.orientation === 'ltr') {\n            margin = this.dragStartMargin + this.dragger.mouseDistX;\n        } else {\n            margin = this.dragStartMargin - this.dragger.mouseDistX;\n        }\n\n        if (margin < this._getOffMargin()) {\n            margin = this._getOffMargin();\n        } else if (margin > 0) {\n            margin = 0;\n        }\n\n        this.$innerContainer.css('margin-' + Craft.left, margin);\n    },\n\n    _onDragStop: function() {\n        var margin = this._getMargin();\n        console.log(margin);\n\n        if (margin > (this._getOffMargin() / 2)) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    _onSettle: function() {\n        this.$outerContainer.removeClass('dragging');\n    },\n\n    destroy: function() {\n        this.base();\n        this.dragger.destroy();\n    },\n\n    _getOffMargin: function() {\n        return (this.small ? -10 : -12);\n    }\n}, {\n    animationDuration: 100,\n    defaults: {\n        value: '1',\n        indeterminateValue: '-',\n        onChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend({\n    $extraFields: null,\n    $trigger: null,\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $iframe: null,\n    $fieldPlaceholder: null,\n\n    previewUrl: null,\n    token: null,\n    basePostData: null,\n    inPreviewMode: false,\n    fields: null,\n    lastPostData: null,\n    updateIframeInterval: null,\n    loading: false,\n    checkAgain: false,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _slideInOnIframeLoad: false,\n    _forceUpdateIframeProxy: null,\n\n    _scrollX: null,\n    _scrollY: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.LivePreview.defaults);\n\n        // Should preview requests use a specific URL?\n        // This won't affect how the request gets routed (the action param will override it),\n        // but it will allow the templates to change behavior based on the request URI.\n        if (this.settings.previewUrl) {\n            this.previewUrl = this.settings.previewUrl;\n        } else {\n            this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n        }\n\n        // Load the preview over SSL if the current request is\n        if (document.location.protocol === 'https:') {\n            this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n        }\n\n        // Set the base post data\n        this.basePostData = $.extend({}, this.settings.previewParams);\n\n        this._forceUpdateIframeProxy = this.forceUpdateIframe.bind(this);\n\n        // Find the DOM elements\n        this.$extraFields = $(this.settings.extraFields);\n        this.$trigger = $(this.settings.trigger);\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n        // Event Listeners\n        this.addListener(this.$trigger, 'activate', 'toggle');\n\n        Craft.cp.on('beforeSaveShortcut', () => {\n            if (this.inPreviewMode) {\n                this.moveFieldsBack();\n            }\n        });\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n            inPx = Craft.LivePreview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    toggle: function() {\n        if (this.inPreviewMode) {\n            this.exit();\n        } else {\n            this.enter();\n        }\n    },\n\n    enter: function() {\n        if (this.inPreviewMode) {\n            return;\n        }\n\n        if (!this.token) {\n            this.createToken();\n            return;\n        }\n\n        this.trigger('beforeEnter');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            let $saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($editorHeader);\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this)\n            });\n\n            this.addListener($closeBtn, 'click', 'exit');\n            this.addListener($saveBtn, 'click', 'save');\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Move all the fields into the editor rather than copying them\n        // so any JS that's referencing the elements won't break.\n        this.fields = [];\n        var $fields = $(this.settings.fields);\n\n        for (var i = 0; i < $fields.length; i++) {\n            var $field = $($fields[i]),\n                $clone = this._getClone($field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter($field);\n            $field.detach();\n            this.$fieldPlaceholder.replaceWith($clone);\n            $field.appendTo(this.$editor);\n\n            this.fields.push({\n                $field: $field,\n                $clone: $clone\n            });\n        }\n\n        if (this.updateIframe()) {\n            this._slideInOnIframeLoad = true;\n        } else {\n            this.slideIn();\n        }\n\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = true;\n        this.trigger('enter');\n    },\n\n    createToken: function() {\n        Craft.postActionRequest('live-preview/create-token', {\n            previewAction: this.settings.previewAction\n        }, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.token = response.token;\n                this.enter();\n            }\n        });\n    },\n\n    save: function() {\n        Craft.cp.submitPrimaryForm();\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.updateIframeInterval = setInterval(this.updateIframe.bind(this), 1000);\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.exit();\n                }\n            });\n        });\n    },\n\n    exit: function() {\n        if (!this.inPreviewMode) {\n            return;\n        }\n\n        this.trigger('beforeExit');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        if (this.updateIframeInterval) {\n            clearInterval(this.updateIframeInterval);\n        }\n\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n        });\n\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = false;\n        this.trigger('exit');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n    },\n\n    updateIframe: function(force) {\n        if (force) {\n            this.lastPostData = null;\n        }\n\n        if (!this.inPreviewMode) {\n            return false;\n        }\n\n        if (this.loading) {\n            this.checkAgain = true;\n            return false;\n        }\n\n        // Has the post data changed?\n        var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n        if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n            this.lastPostData = postData;\n            this.loading = true;\n\n            var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n            this._scrollX = $doc ? $doc.scrollLeft() : 0;\n            this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n            $.ajax({\n                url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                method: 'POST',\n                data: $.extend({}, postData, this.basePostData),\n                headers: {\n                    'X-Craft-Token': this.token\n                },\n                xhrFields: {\n                    withCredentials: true\n                },\n                crossDomain: true,\n                success: this.handleSuccess.bind(this),\n                error: this.handleError.bind(this),\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    forceUpdateIframe: function() {\n        return this.updateIframe(true);\n    },\n\n    handleSuccess: function(data) {\n        var html = data +\n            '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n        // Create a new iframe\n        var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n        if (this.$iframe) {\n            $iframe.insertBefore(this.$iframe);\n        } else {\n            $iframe.appendTo(this.$iframeContainer);\n        }\n\n        this.addListener($iframe, 'load', function() {\n            if (this.$iframe) {\n                this.$iframe.remove();\n            }\n            this.$iframe = $iframe;\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n\n            this.removeListener($iframe, 'load');\n        });\n\n        Garnish.requestAnimationFrame(() => {\n            $iframe[0].contentWindow.document.open();\n            $iframe[0].contentWindow.document.write(html);\n            $iframe[0].contentWindow.document.close();\n            this.onResponse();\n        });\n    },\n\n    handleError: function() {\n        this.onResponse();\n    },\n\n    onResponse: function() {\n        this.loading = false;\n\n        if (this.checkAgain) {\n            this.checkAgain = false;\n            this.updateIframe();\n        }\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n\n    defaults: {\n        trigger: '.livepreviewbtn',\n        fields: null,\n        extraFields: null,\n        previewUrl: null,\n        previewAction: null,\n        previewParams: {}\n    }\n});\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend({\n    $passwordWrapper: null,\n    $passwordInput: null,\n    $textInput: null,\n    $currentInput: null,\n\n    $showPasswordToggle: null,\n    showingPassword: null,\n\n    init: function(passwordInput, settings) {\n        this.$passwordInput = $(passwordInput);\n        this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n        this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n        // Is this already a password input?\n        if (this.$passwordInput.data('passwordInput')) {\n            Garnish.log('Double-instantiating a password input on an element');\n            this.$passwordInput.data('passwordInput').destroy();\n        }\n\n        this.$passwordInput.data('passwordInput', this);\n\n        this.$showPasswordToggle = $('<button type=\"button\" class=\"invisible\" />');\n        this.$showPasswordToggle.addClass('password-toggle');\n        this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n        this.initInputFocusEvents(this.$passwordInput);\n        this.addListener(this.$showPasswordToggle, 'click', 'onClick');\n        this.hidePassword();\n    },\n\n    setCurrentInput: function($input) {\n        if (this.$currentInput) {\n            // Swap the inputs, while preventing the focus animation\n            $input.insertAfter(this.$currentInput);\n            this.$currentInput.detach();\n            $input.trigger('focus');\n\n            // Restore the input value\n            $input.val(this.$currentInput.val());\n        }\n\n        this.$currentInput = $input;\n\n        this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n    },\n\n    updateToggleLabel: function(label) {\n        this.$showPasswordToggle.text(label);\n    },\n\n    initInputFocusEvents: function($input) {\n        this.addListener($input, 'focus', function() {\n            this.$passwordWrapper.addClass('focus');\n        });\n        this.addListener($input, 'blur', function() {\n            this.$passwordWrapper.removeClass('focus');\n        });\n    },\n\n    showPassword: function() {\n        if (this.showingPassword) {\n            return;\n        }\n\n        if (!this.$textInput) {\n            this.$textInput = this.$passwordInput.clone(true);\n            this.$textInput.attr('type', 'text');\n            this.initInputFocusEvents(this.$textInput);\n        }\n\n        this.setCurrentInput(this.$textInput);\n        this.updateToggleLabel(Craft.t('app', 'Hide'));\n        this.showingPassword = true;\n    },\n\n    hidePassword: function() {\n        // showingPassword could be null, which is acceptable\n        if (this.showingPassword === false) {\n            return;\n        }\n\n        this.setCurrentInput(this.$passwordInput);\n        this.updateToggleLabel(Craft.t('app', 'Show'));\n        this.showingPassword = false;\n\n        // Alt key temporarily shows the password\n        this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n    },\n\n    togglePassword: function() {\n        if (this.showingPassword) {\n            this.hidePassword();\n        } else {\n            this.showPassword();\n        }\n\n        this.settings.onToggleInput(this.$currentInput);\n    },\n\n    onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n            this.showPassword();\n            this.$showPasswordToggle.addClass('invisible');\n            this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n        }\n    },\n\n    onKeyUp: function(ev) {\n        ev.preventDefault();\n\n        if (ev.keyCode === Garnish.ALT_KEY) {\n            this.hidePassword();\n            this.$showPasswordToggle.removeClass('invisible');\n        }\n    },\n\n    onInputChange: function() {\n        if (this.$currentInput.val()) {\n            this.$showPasswordToggle.removeClass('invisible');\n        } else {\n            this.$showPasswordToggle.addClass('invisible');\n        }\n    },\n\n    onClick: function(ev) {\n        if (this.$currentInput[0].setSelectionRange) {\n            var selectionStart = this.$currentInput[0].selectionStart,\n                selectionEnd = this.$currentInput[0].selectionEnd;\n\n            this.togglePassword();\n            this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n        } else {\n            this.togglePassword();\n        }\n    }\n}, {\n    defaults: {\n        onToggleInput: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend({\n    draftEditor: null,\n\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $spinner: null,\n    $statusIcon: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $previewHeader: null,\n    $targetBtn: null,\n    $targetMenu: null,\n    $deviceTypeContainer: null,\n    $orientationBtn: null,\n    $deviceMask: null,\n    $devicePreviewContainer: null,\n    $iframe: null,\n    iframeLoaded: false,\n    $tempInput: null,\n    $fieldPlaceholder: null,\n\n    isActive: false,\n    isVisible: false,\n    activeTarget: 0,\n\n    isDeviceUpdating: false,\n    deviceAnimationTimeout: null,\n    currentDeviceType: 'desktop',\n    deviceOrientation: null,\n    deviceWidth: '',\n    deviceHeight: '',\n    deviceMaskDimensions: {\n        phone: {\n            width: 375,\n            height: 753\n        },\n        tablet: {\n            width: 768,\n            height: 1110\n        }\n    },\n\n    draftId: null,\n    url: null,\n    fields: null,\n\n    iframeHeight: null,\n    scrollTop: null,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _updateIframeProxy: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(draftEditor) {\n        this.draftEditor = draftEditor;\n\n        this._updateIframeProxy = this.updateIframe.bind(this);\n\n        this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.Preview.minEditorWidthInPx) {\n            inPx = Craft.Preview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    open: function() {\n        if (this.isActive) {\n            return;\n        }\n\n        this.isActive = true;\n        this.trigger('beforeOpen');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n            this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n            if (Craft.Pro) {\n                this.$previewHeader = $('<header/>', {'class': 'lp-preview-header'}).appendTo(this.$previewContainer);\n\n                // Preview targets\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo(this.$previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    const $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    let $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n\n                    $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                }\n\n                // Device type buttons\n                this.$deviceTypeContainer = $('<div/>', {\n                    class: 'btngroup lp-device-type',\n                    role: 'listbox',\n                    'aria-label': Craft.t('app', 'Device type'),\n                    tabindex: '0',\n                }).appendTo(this.$previewHeader);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--desktop active',\n                    title: Craft.t('app', 'Desktop'),\n                    'aria-label': Craft.t('app', 'Desktop'),\n                    'aria-selected': 'true',\n                    tabindex: '-1',\n                    data: {\n                        width: '',\n                        height: '',\n                        deviceType: 'desktop'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--tablet',\n                    title: Craft.t('app', 'Tablet'),\n                    'aria-label': Craft.t('app', 'Tablet'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 768,\n                        height: 1024,\n                        deviceType: 'tablet'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--phone',\n                    title: Craft.t('app', 'Mobile'),\n                    'aria-label': Craft.t('app', 'Mobile'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 375,\n                        height: 667,\n                        deviceType: 'phone'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n\n                $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n\n                // Orientation toggle\n                this.$orientationBtn = $('<button/>', {\n                    type: 'button',\n                    'class': 'btn disabled',\n                    'data-icon': 'refresh',\n                    disabled: '',\n                    'aria-hidden': '',\n                    'text': Craft.t('app', 'Rotate')\n                }).appendTo(this.$previewHeader);\n                this.addListener(this.$orientationBtn, 'click', 'switchOrientation');\n\n                // Get the last stored orientation\n                this.deviceOrientation = Craft.getLocalStorage('LivePreview.orientation');\n\n                // Device type button click handler\n                this.addListener($('.btn', this.$deviceTypeContainer), 'click', 'switchDeviceType');\n\n                // Device mask\n                this.$deviceMask = $('<div/>', {\n                    'class': 'lp-device-mask'\n                });\n            }\n\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n            if (this.$deviceMask) {\n                this.$iframeContainer.append(this.$deviceMask);\n            }\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this),\n            });\n\n            this.addListener($closeBtn, 'click', 'close');\n            this.addListener(this.$statusIcon, 'click', () => {\n                this.draftEditor.showStatusHud(this.$statusIcon);\n            });\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Find the fields, excluding nested fields\n        this.fields = [];\n        var $fields = $('#content .field').not($('#content .field .field'));\n\n        if ($fields.length) {\n            // Insert our temporary input before the first field so we know where to swap in the serialized form values\n            this.$tempInput.insertBefore($fields.get(0));\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            for (let i = 0; i < $fields.length; i++) {\n                let $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n        }\n\n        this.updateIframe();\n\n        this.draftEditor.on('update', this._updateIframeProxy);\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.trigger('open');\n    },\n\n    switchTarget: function(i) {\n        this.activeTarget = i;\n        this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n        this.$targetMenu.find('a.sel').removeClass('sel');\n        this.$targetMenu.find('a').eq(i).addClass('sel');\n        this.updateIframe(true);\n        this.trigger('switchTarget', {\n            previewTarget: this.draftEditor.settings.previewTargets[i],\n        });\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        if (!this.isActive || this.isVisible) {\n            return;\n        }\n\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.close();\n                }\n            });\n        });\n\n        this.isVisible = true;\n    },\n\n    close: function() {\n        if (!this.isActive || !this.isVisible) {\n            return;\n        }\n\n        this.trigger('beforeClose');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        // Remove our temporary input and move the preview fields back into place\n        this.$tempInput.detach();\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n            this.resetDevicePreview();\n        });\n\n        this.draftEditor.off('update', this._updateIframeProxy);\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.isActive = false;\n        this.isVisible = false;\n        this.trigger('close');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n        if (this._devicePreviewIsActive()) {\n            this.updateDevicePreview();\n        }\n    },\n\n    _useIframeResizer: function() {\n        return Craft.previewIframeResizerOptions !== false;\n    },\n\n    updateIframe: function(resetScroll) {\n        if (!this.isActive) {\n            return false;\n        }\n\n        // Ignore non-boolean resetScroll values\n        resetScroll = resetScroll === true;\n\n        var target = this.draftEditor.settings.previewTargets[this.activeTarget];\n        var refresh = !!(\n            this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n            !this.$iframe ||\n            resetScroll ||\n            typeof target.refresh === 'undefined' ||\n            target.refresh\n        );\n\n        this.trigger('beforeUpdateIframe', {\n            previewTarget: target,\n            resetScroll: resetScroll,\n            refresh: refresh,\n        });\n\n        // If this is an existing preview target, make sure it wants to be refreshed automatically\n        if (!refresh) {\n            this.slideIn();\n            return;\n        }\n\n        this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n            // Maintain the current scroll position?\n            let sameHost;\n            if (resetScroll) {\n                this.scrollTop = null;\n            } else if (this.iframeLoaded && this.$iframe) {\n                if (this._useIframeResizer()) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                } else {\n                    sameHost = Craft.isSameHost(url);\n                    if (sameHost && this.$iframe[0].contentWindow) {\n                        this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                    }\n                }\n            }\n\n            this.iframeLoaded = false;\n\n            var $iframe = $('<iframe/>', {\n                'class': 'lp-preview',\n                frameborder: 0,\n                src: url,\n            });\n\n            if (this.$iframe) {\n                this.$iframe.replaceWith($iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            // If we’re on tablet/phone then wrap the iframe in our own container\n            // so we can keep all the iFrameResizer() stuff working\n            if (this._devicePreviewIsActive()) {\n                if (!this.$devicePreviewContainer) {\n                    this.$devicePreviewContainer = $('<div/>', {\n                        'class': 'lp-device-preview-container'\n                    });\n                    $iframe.wrap('<div class=\"lp-device-preview-container\"></div>');\n                    this.$devicePreviewContainer = this.$iframeContainer.find('.lp-device-preview-container');\n                }\n            }\n\n            // Keep the iframe height consistent with its content\n            if (this._useIframeResizer()) {\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                iFrameResize($.extend({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n            } else {\n                $iframe.on('load', () => {\n                    this.iframeLoaded = true;\n                    if (!resetScroll && sameHost && this.scrollTop !== null) {\n                        $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                    }\n                });\n            }\n\n            this.url = url;\n            this.$iframe = $iframe;\n\n            if (this._devicePreviewIsActive()) {\n                this.updateDevicePreview();\n            }\n\n            this.trigger('afterUpdateIframe', {\n                previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            this.slideIn();\n        });\n    },\n\n    _devicePreviewIsActive: function() {\n        return this.currentDeviceType !== 'desktop';\n    },\n\n    switchDeviceType: function(ev) {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n\n        const $btn = $(ev.target);\n        const newDeviceType = $btn.data('deviceType');\n\n        // Bail if we’re just smashing the same button\n        if (newDeviceType === this.currentDeviceType) {\n            return false;\n        }\n\n        // Store new device type data\n        this.currentDeviceType = newDeviceType;\n        this.deviceWidth = $btn.data('width');\n        this.deviceHeight = $btn.data('height');\n\n        // Set the active state on the button\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n\n        $btn\n            .addClass('active')\n            .attr('aria-selected', 'true');\n\n        // Update or reset\n        if (this.currentDeviceType === 'desktop') {\n            this.resetDevicePreview();\n        } else {\n            this.$iframeContainer.addClass('lp-iframe-container--updating');\n            this.updateIframe();\n            this.updateDevicePreview();\n        }\n    },\n\n    switchOrientation: function()\n    {\n        if (this.isDeviceUpdating || !this._devicePreviewIsActive()) {\n            return false;\n        }\n\n        // Switch to whichever orientation is currently not stored\n        if (!this.deviceOrientation || this.deviceOrientation === 'portrait') {\n            this.deviceOrientation = 'landscape';\n        } else {\n            this.deviceOrientation = 'portrait';\n        }\n\n        // Store the new one\n        Craft.setLocalStorage('LivePreview.orientation', this.deviceOrientation);\n\n        // Allow the animation to take place\n        this.$iframeContainer.addClass('lp-iframe-container--animating');\n\n        // Update the device preview\n        this.updateDevicePreview();\n    },\n\n    updateDevicePreview: function()\n    {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.isDeviceUpdating = true;\n\n        // Enable the orientation button\n        this.$orientationBtn\n            .removeClass('disabled')\n            .removeAttr('disabled')\n            .removeAttr('aria-hidden');\n\n        // Trigger the resized css mods\n        this.$iframeContainer.addClass('lp-iframe-container--has-device-preview');\n\n        // Add the tablet class if needed\n        if (this.currentDeviceType === 'tablet') {\n            this.$iframeContainer.addClass('lp-iframe-container--tablet');\n        } else {\n            this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n        }\n\n        // Figure out the best zoom\n        let hZoom = 1;\n        let wZoom = 1;\n        let zoom = 1;\n        let previewHeight = (this.$previewContainer.height() - 50) - 48; // 50px for the header bar and 24px clearance\n        let previewWidth = this.$previewContainer.width() - 48;\n        let maskHeight = this.deviceMaskDimensions[this.currentDeviceType].height;\n        let maskWidth = this.deviceMaskDimensions[this.currentDeviceType].width;\n\n        if (this.deviceOrientation === 'landscape') {\n            if (previewWidth < maskHeight) {\n                hZoom = previewWidth / maskHeight;\n            }\n            if (previewHeight < maskWidth) {\n                wZoom = previewHeight / maskWidth;\n            }\n        } else {\n            if (previewHeight < maskHeight) {\n                hZoom = previewHeight / maskHeight;\n            }\n            if (previewWidth < maskWidth) {\n                wZoom = previewWidth / maskWidth;\n            }\n        }\n\n        zoom = hZoom;\n        if (wZoom < hZoom) {\n            zoom = wZoom;\n        }\n\n        // Figure out the css values\n        const translate = -((100/zoom)/2);\n        const rotationDeg = this.deviceOrientation === 'landscape' ? '-90deg' : '0deg';\n\n        // Apply first to the device mask\n        this.$deviceMask.css({\n            width: this.deviceMaskDimensions[this.currentDeviceType].width + 'px',\n            height: this.deviceMaskDimensions[this.currentDeviceType].height + 'px',\n            transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%) rotate('+rotationDeg+')'\n        });\n\n        // After the animation duration we can update the iframe sizes and show it\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.deviceAnimationTimeout = setTimeout(() => {\n            // Then make the size change to the preview container\n            if (this.deviceOrientation === 'landscape') {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceHeight + 'px',\n                    height: this.deviceWidth + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: 0,\n                    marginLeft: '-' + (12*zoom) + 'px'\n                });\n            } else {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceWidth + 'px',\n                    height: this.deviceHeight + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: '-' + (12*zoom) + 'px',\n                    marginLeft: 0\n                });\n            }\n\n            // Remove the animating class and show the iframe\n            this.$iframeContainer.removeClass('lp-iframe-container--animating');\n            this.$iframeContainer.removeClass('lp-iframe-container--updating');\n            this.isDeviceUpdating = false;\n\n        }, 300);\n    },\n\n    resetDevicePreview: function()\n    {\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.currentDeviceType = 'desktop';\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n        this.$deviceTypeContainer.find('.lp-device-type-btn--desktop')\n            .addClass('active')\n            .attr('aria-selected', 'true');\n        this.$orientationBtn\n            .addClass('disabled')\n            .attr('disabled', '')\n            .attr('aria-hidden', '');\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n        this.$iframeContainer.removeClass('lp-iframe-container--has-device-preview');\n        this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n\n        // Flat out remove the iframe and let it get regenerated\n        if (this.$devicePreviewContainer) {\n            // If using iFrameResizer then remove the listeners first so we don’t get zombie instances\n            if (this._useIframeResizer()) {\n                this.$iframe[0].iFrameResizer.removeListeners();\n            }\n            this.$devicePreviewContainer.detach();\n            this.$devicePreviewContainer = null;\n            this.$iframe = null;\n            this.updateIframe();\n        }\n\n        this.isDeviceUpdating = false;\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        // Disable anything with a name attribute\n        $clone.find('[name]').prop('disabled', true);\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend({\n    assetId: null,\n    $spinner: null,\n    elementSelect: null,\n    type: null,\n    loaded: null,\n    requestId: 0,\n\n    /**\n     * Initialize the preview file modal.\n     * @returns {*|void}\n     */\n    init: function(assetId, elementSelect, settings) {\n        settings = $.extend(this.defaultSettings, settings);\n\n        settings.onHide = this._onHide.bind(this);\n\n        if (Craft.PreviewFileModal.openInstance) {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            if (instance.assetId !== assetId) {\n                instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                instance.elementSelect = elementSelect;\n            }\n\n            return this.destroy();\n        }\n\n        Craft.PreviewFileModal.openInstance = this;\n        this.elementSelect = elementSelect;\n\n        this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n        this.base(this.$container, $.extend({\n            resizable: true\n        }, settings));\n\n        // Cut the flicker, just show the nice person the preview.\n        if (this.$container) {\n            this.$container.velocity('stop');\n            this.$container.show().css('opacity', 1);\n\n            this.$shade.velocity('stop');\n            this.$shade.show().css('opacity', 1);\n        }\n\n        this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n    },\n\n    /**\n     * When hiding, remove all traces and focus last focused element.\n     * @private\n     */\n    _onHide: function() {\n        Craft.PreviewFileModal.openInstance = null;\n        if (this.elementSelect) {\n            this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n        }\n\n        this.$shade.remove();\n\n        return this.destroy();\n    },\n\n    /**\n     * Disappear immediately forever.\n     * @returns {boolean}\n     */\n    selfDestruct: function() {\n        var instance = Craft.PreviewFileModal.openInstance;\n\n        instance.hide();\n        instance.$shade.remove();\n        instance.destroy();\n\n        Craft.PreviewFileModal.openInstance = null;\n\n        return true;\n    },\n\n    /**\n     * Load an asset, using starting width and height, if applicable\n     * @param assetId\n     * @param startingWidth\n     * @param startingHeight\n     */\n    loadAsset: function(assetId, startingWidth, startingHeight) {\n        this.assetId = assetId;\n\n        this.$container.empty();\n        this.loaded = false;\n\n        this.desiredHeight = null;\n        this.desiredWidth = null;\n\n        var containerHeight = Garnish.$win.height() * 0.66;\n        var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n        containerHeight = containerWidth / 4 * 3;\n\n        if (startingWidth && startingHeight) {\n            var ratio = startingWidth / startingHeight;\n            containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n            containerWidth = containerHeight * ratio;\n\n            // This might actually have put width over the viewport limits, so doublecheck\n            if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = containerWidth / ratio;\n            }\n        }\n\n        this._resizeContainer(containerWidth, containerHeight);\n\n        this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n        var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n            left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n        this.$spinner.css({left: left, top: top, position: 'absolute'});\n        this.requestId++;\n\n        Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, (response, textStatus) => {\n            this.$container.removeClass('loading');\n            this.$spinner.remove();\n            this.loaded = true;\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (response.requestId != this.requestId) {\n                        return;\n                    }\n\n                    if (!response.previewHtml) {\n                        this.$container.addClass('zilch');\n                        this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                        return;\n                    }\n\n                    this.$container.removeClass('zilch');\n                    this.$container.append(response.previewHtml);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n                } else {\n                    alert(response.error);\n\n                    this.hide();\n                }\n            }\n        });\n    },\n\n    /**\n     * Resize the container to specified dimensions\n     * @param containerWidth\n     * @param containerHeight\n     * @private\n     */\n    _resizeContainer: function(containerWidth, containerHeight) {\n        this.$container.css({\n            'width': containerWidth,\n            'min-width': containerWidth,\n            'max-width': containerWidth,\n            'height': containerHeight,\n            'min-height': containerHeight,\n            'max-height': containerHeight,\n            'top': (Garnish.$win.height() - containerHeight) / 2,\n            'left': (Garnish.$win.width() - containerWidth) / 2\n        });\n    }\n}, {\n    defaultSettings: {\n        startingWidth: null,\n        startingHeight: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend({\n    $progressBar: null,\n    $innerProgressBar: null,\n    $progressBarStatus: null,\n\n    _itemCount: 0,\n    _processedItemCount: 0,\n    _displaySteps: false,\n\n    init: function($element, displaySteps) {\n        if (displaySteps) {\n            this._displaySteps = true;\n        }\n\n        this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n        this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n        this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n        this.resetProgressBar();\n    },\n\n    /**\n     * Reset the progress bar\n     */\n    resetProgressBar: function() {\n        // Since setting the progress percentage implies that there is progress to be shown\n        // It removes the pending class - we must add it back.\n        this.setProgressPercentage(100);\n        this.$progressBar.addClass('pending');\n\n        // Reset all the counters\n        this.setItemCount(1);\n        this.setProcessedItemCount(0);\n        this.$progressBarStatus.html('');\n\n        if (this._displaySteps) {\n            this.$progressBar.addClass('has-status');\n        }\n    },\n\n    /**\n     * Fade to invisible, hide it using a class and reset opacity to visible\n     */\n    hideProgressBar: function() {\n        this.$progressBar.fadeTo('fast', 0.01, () => {\n            this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n    },\n\n    showProgressBar: function() {\n        this.$progressBar.removeClass('hidden');\n        this.$progressBarStatus.removeClass('hidden');\n    },\n\n    setItemCount: function(count) {\n        this._itemCount = count;\n    },\n\n    incrementItemCount: function(count) {\n        this._itemCount += count;\n    },\n\n    setProcessedItemCount: function(count) {\n        this._processedItemCount = count;\n    },\n\n    incrementProcessedItemCount: function(count) {\n        this._processedItemCount += count;\n    },\n\n    updateProgressBar: function() {\n        // Only fools would allow accidental division by zero.\n        this._itemCount = Math.max(this._itemCount, 1);\n\n        var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n        this.setProgressPercentage(width);\n\n        if (this._displaySteps) {\n            this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n        }\n    },\n\n    setProgressPercentage: function(percentage, animate) {\n        if (percentage === 0) {\n            this.$progressBar.addClass('pending');\n        } else {\n            this.$progressBar.removeClass('pending');\n\n            if (animate) {\n                this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n            } else {\n                this.$innerProgressBar.velocity('stop').width(percentage + '%');\n            }\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, this._handleBatchPromptSelection.bind(this), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            } else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        } else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', () => {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        });\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n\n(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n\n/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', this._handleResize.bind(this));\n        this.addListener(this.$container, 'tapstart', this._handleTapStart.bind(this));\n        this.addListener(Garnish.$bod, 'tapmove', this._handleTapMove.bind(this));\n        this.addListener(Garnish.$bod, 'tapend', this._handleTapEnd.bind(this));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout(() => {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        } else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (((this.$graduations.width() / 2) + (position * -1)) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n        // Remove inner-word punctuation\n        sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        if (!Craft.allowUppercaseInSlug) {\n            sourceVal = sourceVal.toLowerCase();\n        }\n\n        if (Craft.limitAutoSlugsToAscii) {\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n        }\n\n        // Get the \"words\". Split on anything that is not alphanumeric.\n        // Reference: http://www.regular-expressions.info/unicode.html\n        var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n        if (words.length) {\n            return words.join(Craft.slugWordSeparator);\n        } else {\n            return '';\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend({\n    id: null,\n\n    $container: null,\n    state: null,\n    structureDrag: null,\n\n    /**\n     * Init\n     */\n    init: function(id, container, settings) {\n        this.id = id;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Structure.defaults);\n\n        // Is this already a structure?\n        if (this.$container.data('structure')) {\n            Garnish.log('Double-instantiating a structure on an element');\n            this.$container.data('structure').destroy();\n        }\n\n        this.$container.data('structure', this);\n\n        this.state = {};\n\n        if (this.settings.storageKey) {\n            $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n        }\n\n        if (typeof this.state.collapsedElementIds === 'undefined') {\n            this.state.collapsedElementIds = [];\n        }\n\n        var $parents = this.$container.find('ul').prev('.row');\n\n        for (var i = 0; i < $parents.length; i++) {\n            var $row = $($parents[i]),\n                $li = $row.parent(),\n                $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n            if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                $li.addClass('collapsed');\n            }\n\n            this.initToggle($toggle);\n        }\n\n        if (this.settings.sortable) {\n            this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n        }\n\n        if (this.settings.newChildUrl) {\n            this.initNewChildMenus(this.$container.find('.add'));\n        }\n    },\n\n    initToggle: function($toggle) {\n        $toggle.on('click', ev => {\n            var $li = $(ev.currentTarget).closest('li'),\n                elementId = $li.children('.row').find('.element:first').data('id'),\n                viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n            if ($li.hasClass('collapsed')) {\n                $li.removeClass('collapsed');\n\n                if (viewStateKey !== -1) {\n                    this.state.collapsedElementIds.splice(viewStateKey, 1);\n                }\n            } else {\n                $li.addClass('collapsed');\n\n                if (viewStateKey === -1) {\n                    this.state.collapsedElementIds.push(elementId);\n                }\n            }\n\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.state);\n            }\n        });\n    },\n\n    initNewChildMenus: function($addBtns) {\n        this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n    },\n\n    onNewChildMenuClick: function(ev) {\n        var $btn = $(ev.currentTarget);\n\n        if (!$btn.data('menubtn')) {\n            var elementId = $btn.parent().children('.element').data('id'),\n                newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n            $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n            var menuBtn = new Garnish.MenuBtn($btn);\n            menuBtn.showMenu();\n        }\n    },\n\n    getIndent: function(level) {\n        return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n    },\n\n    addElement: function($element) {\n        var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n            $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n        $row.append($element);\n\n        if (this.settings.sortable) {\n            $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n            this.structureDrag.addItems($li);\n        }\n\n        if (this.settings.newChildUrl) {\n            var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n            this.initNewChildMenus($addBtn);\n        }\n\n        $row.css('margin-bottom', -30);\n        $row.velocity({'margin-bottom': 0}, 'fast');\n    },\n\n    removeElement: function($element) {\n        var $li = $element.parent().parent();\n\n        if (this.settings.sortable) {\n            this.structureDrag.removeItems($li);\n        }\n\n        var $parentUl;\n\n        if (!$li.siblings().length) {\n            $parentUl = $li.parent();\n        }\n\n        $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', () => {\n            $li.remove();\n\n            if (typeof $parentUl !== 'undefined') {\n                this._removeUl($parentUl);\n            }\n        });\n    },\n\n    _removeUl: function($ul) {\n        $ul.siblings('.row').children('.toggle').remove();\n        $ul.remove();\n    }\n}, {\n    baseIndent: 8,\n    nestedIndent: 35,\n\n    defaults: {\n        storageKey: null,\n        sortable: false,\n        newChildUrl: null,\n        maxLevels: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend({\n    structure: null,\n    maxLevels: null,\n    draggeeLevel: null,\n\n    $helperLi: null,\n    $targets: null,\n    draggeeHeight: null,\n\n    init: function(structure, maxLevels) {\n        this.structure = structure;\n        this.maxLevels = maxLevels;\n\n        this.$insertion = $('<li class=\"draginsertion\"/>');\n\n        var $items = this.structure.$container.find('li');\n\n        this.base($items, {\n            handle: '.element:first, .move:first',\n            helper: this.getHelper.bind(this)\n        });\n    },\n\n    getHelper: function($helper) {\n        this.$helperLi = $helper;\n        var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n        $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n        $helper.find('.move').removeAttr('title');\n        return $ul;\n    },\n\n    onDragStart: function() {\n        this.$targets = $();\n\n        // Recursively find each of the targets, in the order they appear to be in\n        this.findTargets(this.structure.$container);\n\n        // How deep does the rabbit hole go?\n        this.draggeeLevel = 0;\n        var $level = this.$draggee;\n        do {\n            this.draggeeLevel++;\n            $level = $level.find('> ul > li');\n        } while ($level.length);\n\n        // Collapse the draggee\n        this.draggeeHeight = this.$draggee.height();\n        this.$draggee.velocity({\n            height: 0\n        }, 'fast', () => {\n            this.$draggee.addClass('hidden');\n        });\n        this.base();\n\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.cancelDrag();\n            }\n        });\n    },\n\n    findTargets: function($ul) {\n        var $lis = $ul.children().not(this.$draggee);\n\n        for (var i = 0; i < $lis.length; i++) {\n            var $li = $($lis[i]);\n            this.$targets = this.$targets.add($li.children('.row'));\n\n            if (!$li.hasClass('collapsed')) {\n                this.findTargets($li.children('ul'));\n            }\n        }\n    },\n\n    onDrag: function() {\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n            this.$insertion.remove();\n        }\n\n        // First let's find the closest target\n        this._.$closestTarget = null;\n        this._.closestTargetPos = null;\n        this._.closestTargetYDiff = null;\n        this._.closestTargetOffset = null;\n        this._.closestTargetHeight = null;\n\n        for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n            this._.$target = $(this.$targets[this._.i]);\n            this._.targetOffset = this._.$target.offset();\n            this._.targetHeight = this._.$target.outerHeight();\n            this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n            this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n            if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                this._.$closestTarget = this._.$target;\n                this._.closestTargetPos = this._.i;\n                this._.closestTargetYDiff = this._.targetYDiff;\n                this._.closestTargetOffset = this._.targetOffset;\n                this._.closestTargetHeight = this._.targetHeight;\n            } else {\n                // Getting colder\n                break;\n            }\n        }\n\n        if (!this._.$closestTarget) {\n            return;\n        }\n\n        // Are we hovering above the first row?\n        if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n            this.$insertion.prependTo(this.structure.$container);\n        } else {\n            this._.$closestTargetLi = this._.$closestTarget.parent();\n            this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n            // Is there a next row?\n            if (this._.closestTargetPos < this.$targets.length - 1) {\n                this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n            } else {\n                this._.$nextTargetLi = null;\n                this._.nextTargetLevel = null;\n            }\n\n            // Are we hovering between this row and the next one?\n            this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n            /**\n             * Scenario 1: Both rows have the same level.\n             *\n             *     * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                if (this._.hoveringBetweenRows) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                        // Position the insertion after the closest target\n                        this.$insertion.insertAfter(this._.$closestTargetLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n\n            /**\n             * Scenario 2: Next row is a child of this one.\n             *\n             *     * Row 1\n             *     ----------------------\n             *         * Row 2\n             */\n\n            else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                    if (this._.hoveringBetweenRows) {\n                        // Position the insertion as the first child of the closest target\n                        this.$insertion.insertBefore(this._.$nextTargetLi);\n                    } else {\n                        this._.$closestTarget.addClass('draghover');\n                        this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                    }\n                }\n            }\n\n            /**\n             * Scenario 3: Next row is a child of a parent node, or there is no next row.\n             *\n             *         * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            else {\n                if (this._.hoveringBetweenRows) {\n                    // Determine which <li> to position the insertion after\n                    this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                    if (Craft.orientation === 'rtl') {\n                        this._.draggeeX += this.$helperLi.width();\n                    }\n\n                    this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                    this._.$closestParentLi = null;\n                    this._.closestParentLiXDiff = null;\n                    this._.closestParentLevel = null;\n\n                    for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                        this._.$parentLi = $(this._.$parentLis[this._.i]);\n                        this._.parentLiX = this._.$parentLi.offset().left;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.parentLiX += this._.$parentLi.width();\n                        }\n\n                        this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                        this._.parentLevel = this._.$parentLi.data('level');\n\n                        if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                            !this._.$closestParentLi || (\n                                this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                            )\n                        )) {\n                            this._.$closestParentLi = this._.$parentLi;\n                            this._.closestParentLiXDiff = this._.parentLiXDiff;\n                            this._.closestParentLevel = this._.parentLevel;\n                        }\n                    }\n\n                    if (this._.$closestParentLi) {\n                        this.$insertion.insertAfter(this._.$closestParentLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n        }\n    },\n\n    cancelDrag: function() {\n        this.$insertion.remove();\n\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n        }\n\n        this.onMouseUp();\n    },\n\n    onDragStop: function() {\n        // Are we repositioning the draggee?\n        if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n            var $draggeeParent,\n                moved;\n\n            // Are we about to leave the draggee's original parent childless?\n            if (!this.$draggee.siblings().length) {\n                $draggeeParent = this.$draggee.parent();\n            }\n\n            if (this.$insertion.parent().length) {\n                // Make sure the insertion isn't right next to the draggee\n                var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                    this.$insertion.replaceWith(this.$draggee);\n                    moved = true;\n                } else {\n                    this.$insertion.remove();\n                    moved = false;\n                }\n            } else {\n                var $ul = this._.$closestTargetLi.children('ul');\n\n                // Make sure this is a different parent than the draggee's\n                if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                    if (!$ul.length) {\n                        var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                        this.structure.initToggle($toggle);\n\n                        $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                    } else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                        this._.$closestTarget.children('.toggle').trigger('click');\n                    }\n\n                    this.$draggee.appendTo($ul);\n                    moved = true;\n                } else {\n                    moved = false;\n                }\n            }\n\n            // Remove the class either way\n            this._.$closestTarget.removeClass('draghover');\n\n            if (moved) {\n                // Now deal with the now-childless parent\n                if ($draggeeParent) {\n                    this.structure._removeUl($draggeeParent);\n                }\n\n                // Has the level changed?\n                var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                var animateCss;\n\n                if (newLevel != this.$draggee.data('level')) {\n                    // Correct the helper's padding if moving to/from level 1\n                    if (this.$draggee.data('level') == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = 38;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    } else if (newLevel == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    }\n\n                    this.setLevel(this.$draggee, newLevel);\n                }\n\n                // Make it real\n                var $element = this.$draggee.children('.row').children('.element');\n\n                var data = {\n                    structureId: this.structure.id,\n                    elementId: $element.data('id'),\n                    siteId: $element.data('site-id'),\n                    prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                    parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                };\n\n                Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                    }\n                });\n            }\n        }\n\n        // Animate things back into place\n        this.$draggee.velocity('stop').removeClass('hidden').velocity({\n            height: this.draggeeHeight\n        }, 'fast', () => {\n            this.$draggee.css('height', 'auto');\n        });\n\n        this.returnHelpersToDraggees();\n\n        this.base();\n    },\n\n    setLevel: function($li, level) {\n        $li.data('level', level);\n\n        var indent = this.structure.getIndent(level);\n\n        var css = {};\n        css['margin-' + Craft.left] = '-' + indent + 'px';\n        css['padding-' + Craft.left] = indent + 'px';\n        this.$draggee.children('.row').css(css);\n\n        var $childLis = $li.children('ul').children();\n\n        for (var i = 0; i < $childLis.length; i++) {\n            this.setLevel($($childLis[i]), level + 1);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n    tableView: null,\n    structureId: null,\n    maxLevels: null,\n\n    _basePadding: null,\n    _helperMargin: null,\n\n    _$firstRowCells: null,\n    _$titleHelperCell: null,\n\n    _titleHelperCellOuterWidth: null,\n\n    _ancestors: null,\n    _updateAncestorsFrame: null,\n\n    _draggeeLevel: null,\n    _draggeeLevelDelta: null,\n    draggingLastElements: null,\n    _loadingDraggeeLevelDelta: false,\n\n    _targetLevel: null,\n    _targetLevelBounds: null,\n\n    _positionChanged: null,\n\n    /**\n     * Constructor\n     */\n    init: function(tableView, $elements, settings) {\n        this.tableView = tableView;\n        this.structureId = this.tableView.$table.data('structure-id');\n        this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n        this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n        this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n        settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n            handle: '.move',\n            collapseDraggees: true,\n            singleHelper: true,\n            helperSpacingY: 2,\n            magnetStrength: 4,\n            helper: this.getHelper.bind(this),\n            helperLagBase: 1.5,\n            axis: Garnish.Y_AXIS\n        });\n\n        this.base($elements, settings);\n    },\n\n    /**\n     * Returns the draggee rows (including any descendent rows).\n     */\n    findDraggee: function() {\n        this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n        this._draggeeLevelDelta = 0;\n\n        var $draggee = $(this.$targetItem),\n            $nextRow = this.$targetItem.next();\n\n        while ($nextRow.length) {\n            // See if this row is a descendant of the draggee\n            var nextRowLevel = $nextRow.data('level');\n\n            if (nextRowLevel <= this._draggeeLevel) {\n                break;\n            }\n\n            // Is this the deepest descendant we've seen so far?\n            var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n            if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                this._draggeeLevelDelta = nextRowLevelDelta;\n            }\n\n            // Add it and prep the next row\n            $draggee = $draggee.add($nextRow);\n            $nextRow = $nextRow.next();\n        }\n\n        // Are we dragging the last elements on the page?\n        this.draggingLastElements = !$nextRow.length;\n\n        // Do we have a maxLevels to enforce,\n        // and does it look like this draggee has descendants we don't know about yet?\n        if (\n            this.maxLevels &&\n            this.draggingLastElements &&\n            this.tableView.getMorePending()\n        ) {\n            // Only way to know the true descendant level delta is to ask PHP\n            this._loadingDraggeeLevelDelta = true;\n\n            var data = this._getAjaxBaseData(this.$targetItem);\n\n            Craft.postActionRequest('structures/get-element-level-delta', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this._loadingDraggeeLevelDelta = false;\n\n                    if (this.dragging) {\n                        this._draggeeLevelDelta = response.delta;\n                        this.drag(false);\n                    }\n                }\n            });\n        }\n\n        return $draggee;\n    },\n\n    /**\n     * Returns the drag helper.\n     */\n    getHelper: function($helperRow) {\n        var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n            $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n            $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the column widths\n        this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n        var $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            var $helperCell = $($helperCells[i]);\n\n            // Skip the checkbox cell\n            if ($helperCell.hasClass('checkbox-cell')) {\n                $helperCell.remove();\n                continue;\n            }\n\n            // Hard-set the cell widths\n            var $firstRowCell = $(this._$firstRowCells[i]);\n            var width = $firstRowCell[0].getBoundingClientRect().width;\n\n            $firstRowCell.css('width', width + 'px');\n            $helperCell.css('width', width + 'px');\n\n            // Is this the title cell?\n            if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                this._$titleHelperCell = $helperCell;\n\n                var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                this._titleHelperCellOuterWidth = width;\n\n                $helperCell.css('padding-' + Craft.left, this._basePadding);\n            }\n        }\n\n        return $outerContainer;\n    },\n\n    /**\n     * Returns whether the draggee can be inserted before a given item.\n     */\n    canInsertBefore: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item.prev(), $item) !== false);\n    },\n\n    /**\n     * Returns whether the draggee can be inserted after a given item.\n     */\n    canInsertAfter: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item, $item.next()) !== false);\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        // Get the initial set of ancestors, before the item gets moved\n        this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n        // Set the initial target level bounds\n        this._setTargetLevelBounds();\n\n        // Check to see if we should load more elements now\n        this.tableView.maybeLoadMore();\n\n        this.base();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.base();\n        this._updateIndent();\n    },\n\n    /**\n     * On Insertion Point Change\n     */\n    onInsertionPointChange: function() {\n        this._setTargetLevelBounds();\n        this._updateAncestorsBeforeRepaint();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this._positionChanged = false;\n        this.base();\n\n        // Update the draggee's padding if the position just changed\n        // ---------------------------------------------------------------------\n\n        if (this._targetLevel != this._draggeeLevel) {\n            var levelDiff = this._targetLevel - this._draggeeLevel;\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                var $draggee = $(this.$draggee[i]),\n                    oldLevel = $draggee.data('level'),\n                    newLevel = oldLevel + levelDiff,\n                    padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                $draggee.data('level', newLevel);\n                $draggee.find('.element').data('level', newLevel);\n                $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n            }\n\n            this._positionChanged = true;\n        }\n\n        // Keep in mind this could have also been set by onSortChange()\n        if (this._positionChanged) {\n            // Tell the server about the new position\n            // -----------------------------------------------------------------\n\n            var data = this._getAjaxBaseData(this.$draggee);\n\n            // Find the previous sibling/parent, if there is one\n            var $prevRow = this.$draggee.first().prev();\n\n            while ($prevRow.length) {\n                var prevRowLevel = $prevRow.data('level');\n\n                if (prevRowLevel == this._targetLevel) {\n                    data.prevId = $prevRow.data('id');\n                    break;\n                }\n\n                if (prevRowLevel < this._targetLevel) {\n                    data.parentId = $prevRow.data('id');\n\n                    // Is this row collapsed?\n                    var $toggle = $prevRow.find('> th > .toggle');\n\n                    if (!$toggle.hasClass('expanded')) {\n                        // Make it look expanded\n                        $toggle.addClass('expanded');\n\n                        // Add a temporary row\n                        var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                        // Remove the target item\n                        if (this.tableView.elementSelect) {\n                            this.tableView.elementSelect.removeItems(this.$targetItem);\n                        }\n\n                        this.removeItems(this.$targetItem);\n                        this.$targetItem.remove();\n                        this.tableView._totalVisible--;\n                    }\n\n                    break;\n                }\n\n                $prevRow = $prevRow.prev();\n            }\n\n            Craft.postActionRequest('structures/move-element', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    if (!response.success) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        this.tableView.elementIndex.updateElements();\n                        return;\n                    }\n                    Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                    this.onPositionChange();\n\n                    // Were we waiting on this to complete so we can expand the new parent?\n                    if ($spinnerRow && $spinnerRow.parent().length) {\n                        $spinnerRow.remove();\n                        this.tableView._expandElement($toggle, true);\n                    }\n\n                    // See if we should run any pending tasks\n                    Craft.cp.runQueue();\n                }\n            });\n        }\n    },\n\n    onSortChange: function() {\n        if (this.tableView.elementSelect) {\n            this.tableView.elementSelect.resetItemOrder();\n        }\n\n        this._positionChanged = true;\n        this.base();\n    },\n\n    onPositionChange: function() {\n        Garnish.requestAnimationFrame(() => {\n            this.trigger('positionChange');\n            this.settings.onPositionChange();\n        });\n    },\n\n    onReturnHelpersToDraggees: function() {\n        this._$firstRowCells.css('width', '');\n\n        // If we were dragging the last elements on the page and ended up loading any additional elements in,\n        // there could be a gap between the last draggee item and whatever now comes after it.\n        // So remove the post-draggee elements and possibly load up the next batch.\n        if (this.draggingLastElements && this.tableView.getMorePending()) {\n            // Update the element index's record of how many items are actually visible\n            this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n            var $postDraggeeItems = this.$draggee.last().nextAll();\n\n            if ($postDraggeeItems.length) {\n                this.removeItems($postDraggeeItems);\n                $postDraggeeItems.remove();\n                this.tableView.maybeLoadMore();\n            }\n        }\n\n        this.base();\n    },\n\n    /**\n     * Returns the min and max levels that the draggee could occupy between\n     * two given rows, or false if it’s not going to work out.\n     */\n    _getLevelBounds: function($prevRow, $nextRow) {\n        // Can't go any lower than the next row, if there is one\n        if ($nextRow && $nextRow.length) {\n            this._getLevelBounds._minLevel = $nextRow.data('level');\n        } else {\n            this._getLevelBounds._minLevel = 1;\n        }\n\n        // Can't go any higher than the previous row + 1\n        if ($prevRow && $prevRow.length) {\n            this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n        } else {\n            this._getLevelBounds._maxLevel = 1;\n        }\n\n        // Does this structure have a max level?\n        if (this.maxLevels) {\n            // Make sure it's going to fit at all here\n            if (\n                this._getLevelBounds._minLevel != 1 &&\n                this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n            ) {\n                return false;\n            }\n\n            // Limit the max level if we have to\n            if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                    this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                }\n            }\n        }\n\n        return {\n            min: this._getLevelBounds._minLevel,\n            max: this._getLevelBounds._maxLevel\n        };\n    },\n\n    /**\n     * Determines the min and max possible levels at the current draggee's position.\n     */\n    _setTargetLevelBounds: function() {\n        this._targetLevelBounds = this._getLevelBounds(\n            this.$draggee.first().prev(),\n            this.$draggee.last().next()\n        );\n    },\n\n    /**\n     * Determines the target level based on the current mouse position.\n     */\n    _updateIndent: function(forcePositionChange) {\n        // Figure out the target level\n        // ---------------------------------------------------------------------\n\n        // How far has the cursor moved?\n        this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n        // Flip that if this is RTL\n        if (Craft.orientation === 'rtl') {\n            this._updateIndent._mouseDist *= -1;\n        }\n\n        // What is that in indentation levels?\n        this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // Combine with the original level to get the new target level\n        this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n        // Contain it within our min/max levels\n        if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n            this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n            this._updateIndent._targetLevel = this._targetLevelBounds.min;\n        } else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n            this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n            this._updateIndent._targetLevel = this._targetLevelBounds.max;\n        }\n\n        // Has the target level changed?\n        if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n            // Target level is changing, so update the ancestors\n            this._updateAncestorsBeforeRepaint();\n        }\n\n        // Update the UI\n        // ---------------------------------------------------------------------\n\n        // How far away is the cursor from the exact target level distance?\n        this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // What's the magnet impact of that?\n        this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n        // Put it on a leash\n        if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n            this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n        }\n\n        // Apply the new margin/width\n        this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n        this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n        this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n    },\n\n    /**\n     * Returns the indent size for a given level\n     */\n    _getLevelIndent: function(level) {\n        return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n    },\n\n    /**\n     * Returns the base data that should be sent with StructureController Ajax requests.\n     */\n    _getAjaxBaseData: function($row) {\n        return {\n            structureId: this.structureId,\n            elementId: $row.data('id'),\n            siteId: $row.find('.element:first').data('site-id')\n        };\n    },\n\n    /**\n     * Returns a row's ancestor rows\n     */\n    _getAncestors: function($row, targetLevel) {\n        this._getAncestors._ancestors = [];\n\n        if (targetLevel != 0) {\n            this._getAncestors._level = targetLevel;\n            this._getAncestors._$prevRow = $row.prev();\n\n            while (this._getAncestors._$prevRow.length) {\n                if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                    this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                    this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                    // Did we just reach the top?\n                    if (this._getAncestors._level == 0) {\n                        break;\n                    }\n                }\n\n                this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n            }\n        }\n\n        return this._getAncestors._ancestors;\n    },\n\n    /**\n     * Prepares to have the ancestors updated before the screen is repainted.\n     */\n    _updateAncestorsBeforeRepaint: function() {\n        if (this._updateAncestorsFrame) {\n            Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n        }\n\n        this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestors.bind(this));\n    },\n\n    _updateAncestors: function() {\n        this._updateAncestorsFrame = null;\n\n        // Update the old ancestors\n        // -----------------------------------------------------------------\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n            // One less descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n            // Is it now childless?\n            if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                // Remove its toggle\n                this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n            }\n        }\n\n        // Update the new ancestors\n        // -----------------------------------------------------------------\n\n        this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n            // One more descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n            // Is this its first child?\n            if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                // Create its toggle\n                $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                    .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n            }\n        }\n\n        this._ancestors = this._updateAncestors._newAncestors;\n\n        delete this._updateAncestors._i;\n        delete this._updateAncestors._$ancestor;\n        delete this._updateAncestors._newAncestors;\n    }\n}, {\n    HELPER_MARGIN: 0,\n    LEVEL_INDENT: 44,\n    MAX_GIVE: 22,\n\n    defaults: {\n        onPositionChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend({\n    $table: null,\n    $selectedSortHeader: null,\n\n    structureTableSort: null,\n\n    _totalVisiblePostStructureTableDraggee: null,\n    _morePendingPostStructureTableDraggee: false,\n\n    getElementContainer: function() {\n        // Save a reference to the table\n        this.$table = this.$container.find('table:first');\n        return this.$table.children('tbody:first');\n    },\n\n    afterInit: function() {\n        // Set the sort header\n        this.initTableHeaders();\n\n        // Create the Structure Table Sorter\n        if (\n            this.elementIndex.settings.context === 'index' &&\n            this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n            Garnish.hasAttr(this.$table, 'data-structure-id')\n        ) {\n            this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements());\n        } else {\n            this.structureTableSort = null;\n        }\n\n        // Handle expand/collapse toggles for Structures\n        if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n            this.addListener(this.$elementContainer, 'click', function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.hasClass('toggle')) {\n                    if (this._collapseElement($target) === false) {\n                        this._expandElement($target);\n                    }\n                }\n            });\n        }\n    },\n\n    initTableHeaders: function() {\n        var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n            $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n        for (var i = 0; i < $tableHeaders.length; i++) {\n            var $header = $tableHeaders.eq(i),\n                attr = $header.attr('data-attribute');\n\n            // Is this the selected sort attribute?\n            if (attr === selectedSortAttr) {\n                this.$selectedSortHeader = $header;\n                var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                $header\n                    .addClass('ordered ' + selectedSortDir)\n                    .on('click', this._handleSelectedSortHeaderClick.bind(this));\n            } else {\n                // Is this attribute sortable?\n                var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                if ($sortAttribute.length) {\n                    $header\n                        .addClass('orderable')\n                        .on('click', this._handleUnselectedSortHeaderClick.bind(this));\n                }\n            }\n        }\n    },\n\n    isVerticalList: function() {\n        return true;\n    },\n\n    getTotalVisible: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._totalVisiblePostStructureTableDraggee;\n        } else {\n            return this._totalVisible;\n        }\n    },\n\n    setTotalVisible: function(totalVisible) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._totalVisiblePostStructureTableDraggee = totalVisible;\n        } else {\n            this._totalVisible = totalVisible;\n        }\n    },\n\n    getMorePending: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._morePendingPostStructureTableDraggee;\n        } else {\n            return this._morePending;\n        }\n    },\n\n    setMorePending: function(morePending) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._morePendingPostStructureTableDraggee = morePending;\n        } else {\n            this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n        }\n    },\n\n    getLoadMoreParams: function() {\n        var params = this.base();\n\n        // If we are dragging the last elements on the page,\n        // tell the controller to only load elements positioned after the draggee.\n        if (this._isStructureTableDraggingLastElements()) {\n            params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n        }\n\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        this.base($newElements);\n\n        if (this.structureTableSort) {\n            this.structureTableSort.addItems($newElements);\n        }\n\n        Craft.cp.updateResponsiveTables();\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            params: {\n                includeTableAttributesForSource: this.elementIndex.sourceKey\n            },\n            onSaveElement: response => {\n                if (response.tableAttributes) {\n                    this._updateTableAttributes($element, response.tableAttributes);\n                }\n            },\n            elementIndex: this.elementIndex\n        });\n    },\n\n    _collapseElement: function($toggle, force) {\n        if (!force && !$toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.removeClass('expanded');\n\n        // Find and remove the descendant rows\n        var $row = $toggle.parent().parent(),\n            id = $row.data('id'),\n            level = $row.data('level'),\n            $nextRow = $row.next();\n\n        while ($nextRow.length) {\n            if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                if ($nextRow.data('level') <= level) {\n                    break;\n                }\n\n                if (this.elementSelect) {\n                    this.elementSelect.removeItems($nextRow);\n                }\n\n                if (this.structureTableSort) {\n                    this.structureTableSort.removeItems($nextRow);\n                }\n\n                this._totalVisible--;\n            }\n\n            var $nextNextRow = $nextRow.next();\n            $nextRow.remove();\n            $nextRow = $nextNextRow;\n        }\n\n        // Remember that this row should be collapsed\n        if (!this.elementIndex.instanceState.collapsedElementIds) {\n            this.elementIndex.instanceState.collapsedElementIds = [];\n        }\n\n        this.elementIndex.instanceState.collapsedElementIds.push(id);\n        this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n        // Bottom of the index might be viewable now\n        this.maybeLoadMore();\n    },\n\n    _expandElement: function($toggle, force) {\n        if (!force && $toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.addClass('expanded');\n\n        // Remove this element from our list of collapsed elements\n        if (this.elementIndex.instanceState.collapsedElementIds) {\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n            if (index !== -1) {\n                this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                // Add a temporary row\n                var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                // Load the nested elements\n                var params = $.extend(true, {}, this.settings.params);\n                params.criteria.descendantOf = id;\n\n                Craft.postActionRequest('element-indexes/get-more-elements', params, (response, textStatus) => {\n                    // Do we even care about this anymore?\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n\n                    if (textStatus === 'success') {\n                        var $newElements = $(response.html);\n\n                        // Are there more descendants we didn't get in this batch?\n                        var totalVisible = (this._totalVisible + $newElements.length),\n                            morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                        if (morePending) {\n                            // Remove all the elements after it\n                            var $nextRows = $spinnerRow.nextAll();\n\n                            if (this.elementSelect) {\n                                this.elementSelect.removeItems($nextRows);\n                            }\n\n                            if (this.structureTableSort) {\n                                this.structureTableSort.removeItems($nextRows);\n                            }\n\n                            $nextRows.remove();\n                            totalVisible -= $nextRows.length;\n                        } else {\n                            // Maintain the current 'more' status\n                            morePending = this._morePending;\n                        }\n\n                        $spinnerRow.replaceWith($newElements);\n                        this.thumbLoader.load($newElements);\n\n                        if (this.elementIndex.actions || this.settings.selectable) {\n                            this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                            this.elementIndex.updateActionTriggers();\n                        }\n\n                        if (this.structureTableSort) {\n                            this.structureTableSort.addItems($newElements);\n                        }\n\n                        Craft.appendHeadHtml(response.headHtml);\n                        Craft.appendFootHtml(response.footHtml);\n                        Craft.cp.updateResponsiveTables();\n\n                        this.setTotalVisible(totalVisible);\n                        this.setMorePending(morePending);\n\n                        // Is there room to load more right now?\n                        this.maybeLoadMore();\n                    }\n                });\n            }\n        }\n    },\n\n    _createSpinnerRowAfter: function($row) {\n        return $(\n            '<tr data-spinnerrow>' +\n            '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n            '<div class=\"spinner\"/>' +\n            '</td>' +\n            '</tr>'\n        ).insertAfter($row);\n    },\n\n    _isStructureTableDraggingLastElements: function() {\n        return (\n            this.structureTableSort &&\n            this.structureTableSort.dragging &&\n            this.structureTableSort.draggingLastElements\n        );\n    },\n\n    _handleSelectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        // Reverse the sort direction\n        var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n            newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n        this.elementIndex.setSortDirection(newSortDir);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleUnselectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        var attr = $header.attr('data-attribute');\n\n        this.elementIndex.setSortAttribute(attr);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleSortHeaderClick: function(ev, $header) {\n        if (this.$selectedSortHeader) {\n            this.$selectedSortHeader.removeClass('ordered asc desc');\n        }\n\n        $header.removeClass('orderable').addClass('ordered loading');\n        this.elementIndex.storeSortAttributeAndDirection();\n        this.elementIndex.updateElements();\n\n        // No need for two spinners\n        this.elementIndex.setIndexAvailable();\n    },\n\n    _updateTableAttributes: function($element, tableAttributes) {\n        var $tr = $element.closest('tr');\n\n        for (var attr in tableAttributes) {\n            if (!tableAttributes.hasOwnProperty(attr)) {\n                continue;\n            }\n\n            $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend({\n    searchTimeout: null,\n    searchMenu: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addTagInput: null,\n    $spinner: null,\n\n    _ignoreBlur: false,\n\n    init: function(settings) {\n        // Normalize the settings\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n        this.$addTagInput = this.$container.children('.add').children('.text');\n        this.$spinner = this.$addTagInput.next();\n\n        this.addListener(this.$addTagInput, 'input', () => {\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.searchForTags.bind(this), 500);\n        });\n\n        this.addListener(this.$addTagInput, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n            }\n\n            let $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options.filter('.hover'));\n                    }\n                    return;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                            if ($nextOption.length) {\n                                this.focusOption($nextOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(0));\n                        }\n                    }\n                    return;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                            if ($prevOption.length) {\n                                this.focusOption($prevOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                        }\n                    }\n                    return;\n                }\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'focus', function() {\n            if (this.searchMenu) {\n                this.searchMenu.show();\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'blur', function() {\n            if (this._ignoreBlur) {\n                this._ignoreBlur = false;\n                return;\n            }\n\n            setTimeout(() => {\n                if (this.searchMenu) {\n                    this.searchMenu.hide();\n                }\n            }, 1);\n        });\n    },\n\n    focusOption: function($option) {\n        this.searchMenu.$options.removeClass('hover');\n        $option.addClass('hover');\n        this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n    },\n\n    // No \"add\" button\n    getAddElementsBtn: $.noop,\n\n    getElementSortAxis: function() {\n        return null;\n    },\n\n    searchForTags: function() {\n        if (this.searchMenu) {\n            this.killSearchMenu();\n        }\n\n        var val = this.$addTagInput.val();\n\n        if (val) {\n            this.$spinner.removeClass('hidden');\n\n            var excludeIds = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                var id = $(this.$elements[i]).data('id');\n\n                if (id) {\n                    excludeIds.push(id);\n                }\n            }\n\n            if (this.settings.sourceElementId) {\n                excludeIds.push(this.settings.sourceElementId);\n            }\n\n            var data = {\n                search: this.$addTagInput.val(),\n                tagGroupId: this.settings.tagGroupId,\n                excludeIds: excludeIds\n            };\n\n            Craft.postActionRequest('tags/search-for-tags', data, (response, textStatus) => {\n                // Just in case\n                if (this.searchMenu) {\n                    this.killSearchMenu();\n                }\n\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                        $ul = $('<ul/>').appendTo($menu);\n\n                    var $li;\n\n                    for (var i = 0; i < response.tags.length; i++) {\n                        $li = $('<li/>')\n                            .appendTo($ul);\n\n                        $('<a data-icon=\"tag\"/>')\n                            .appendTo($li)\n                            .text(response.tags[i].title)\n                            .data('id', response.tags[i].id)\n                            .addClass(response.tags[i].exclude ? 'disabled' : '');\n                    }\n\n                    if (!response.exactMatch) {\n                        $li = $('<li/>').appendTo($ul);\n                        $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                    }\n\n                    $ul.find('a:not(.disabled):first').addClass('hover');\n\n                    this.searchMenu = new Garnish.Menu($menu, {\n                        attachToElement: this.$addTagInput,\n                        onOptionSelect: this.selectTag.bind(this)\n                    });\n\n                    this.addListener($menu, 'mousedown', () => {\n                        this._ignoreBlur = true;\n                    });\n\n                    this.searchMenu.show();\n                }\n            });\n        } else {\n            this.$spinner.addClass('hidden');\n        }\n    },\n\n    selectTag: function(option) {\n        var $option = $(option);\n\n        if ($option.hasClass('disabled')) {\n            return;\n        }\n\n        var id = $option.data('id');\n        var title = $option.text();\n\n        var $element = $('<div/>', {\n            'class': 'element small removable',\n            'data-id': id,\n            'data-site-id': this.settings.targetSiteId,\n            'data-label': title,\n            'data-editable': '1'\n        }).appendTo(this.$elementsContainer);\n\n        var $input = $('<input/>', {\n            'type': 'hidden',\n            'name': this.settings.name + '[]',\n            'value': id\n        }).appendTo($element);\n\n        $('<a/>', {\n            'class': 'delete icon',\n            'title': Craft.t('app', 'Remove')\n        }).appendTo($element);\n\n        var $titleContainer = $('<div/>', {\n            'class': 'label'\n        }).appendTo($element);\n\n        $('<span/>', {\n            'class': 'title',\n            text: title\n        }).appendTo($titleContainer);\n\n        var margin = -($element.outerWidth() + 10);\n        this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addTagInput.velocity(animateCss, 'fast');\n\n        this.$elements = this.$elements.add($element);\n\n        this.addElements($element);\n\n        this.killSearchMenu();\n        this.$addTagInput.val('');\n        this.$addTagInput.trigger('focus');\n\n        if (!id) {\n            // We need to create the tag first\n            $element.addClass('loading disabled');\n\n            var data = {\n                groupId: this.settings.tagGroupId,\n                title: title\n            };\n\n            Craft.postActionRequest('tags/create-tag', data, (response, textStatus) => {\n                if (textStatus === 'success' && response.success) {\n                    $element.attr('data-id', response.id);\n                    $input.val(response.id);\n\n                    $element.removeClass('loading disabled');\n                } else {\n                    this.removeElement($element);\n\n                    if (textStatus === 'success') {\n                        // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                }\n            });\n        }\n    },\n\n    killSearchMenu: function() {\n        this.searchMenu.hide();\n        this.searchMenu.destroy();\n        this.searchMenu = null;\n    }\n}, {\n    defaults: {\n        tagGroupId: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend({\n    getElementContainer: function() {\n        return this.$container.children('ul');\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            config = $.extend({\n                autocomplete: false,\n            }, config);\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: typeof config.autocomplete === 'boolean' ? (config.autocomplete ? 'on' : 'off') : config.autocomplete,\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            } else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n                'aria-label': Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html': option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                html: config.label,\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            } else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: allChecked || (config.values || []).includes(option.value),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            config.fieldset = true;\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<button/>', {\n                'type': 'button',\n                'class': 'lightswitch',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'checkbox',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            var id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            var containerId = config.containerId || id + '-container';\n            var name = config.name || null;\n            var value = config.value || null;\n            var small = config.small || false;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                id: containerId,\n                'class': 'flex color-container'\n            });\n\n            var $colorPreviewContainer = $('<div/>', {\n                'class': 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            var $colorPreview = $('<div/>', {\n                'class': 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            var $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: value,\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000)) + '-date';\n            var name = config.name || null;\n            var inputName = name ? name + '[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate: null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000)) + '-time';\n            var name = config.name || null;\n            var inputName = name ? name + '[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours() * 3600 + value.getMinutes() * 60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $(config.fieldset ? '<fieldset/>' : '<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $(config.fieldset ? '<legend/>' : '<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-${config.fieldset ? 'legend' : 'label'}` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': !config.fieldset && config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend({\n    uploader: null,\n    allowedKinds: null,\n    $element: null,\n    settings: null,\n    _rejectedFiles: {},\n    _extensionList: null,\n    _totalFileCounter: 0,\n    _validFileCounter: 0,\n\n    init: function($element, settings) {\n        this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n        this.$element = $element;\n        this.allowedKinds = null;\n        this._extensionList = null;\n        this._totalFileCounter = 0;\n        this._validFileCounter = 0;\n\n        settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n        var events = settings.events;\n        delete settings.events;\n\n        if (settings.allowedKinds && settings.allowedKinds.length) {\n            if (typeof settings.allowedKinds === 'string') {\n                settings.allowedKinds = [settings.allowedKinds];\n            }\n\n            this.allowedKinds = settings.allowedKinds;\n            delete settings.allowedKinds;\n        }\n\n        settings.autoUpload = false;\n\n        this.uploader = this.$element.fileupload(settings);\n        for (var event in events) {\n            if (!events.hasOwnProperty(event)) {\n                continue;\n            }\n\n            this.uploader.on(event, events[event]);\n        }\n\n        this.settings = settings;\n\n        this.uploader.on('fileuploadadd', this.onFileAdd.bind(this));\n    },\n\n    /**\n     * Set uploader parameters.\n     */\n    setParams: function(paramObject) {\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        this.uploader.fileupload('option', {formData: paramObject});\n    },\n\n    /**\n     * Get the number of uploads in progress.\n     */\n    getInProgress: function() {\n        return this.uploader.fileupload('active');\n    },\n\n    /**\n     * Return true, if this is the last upload.\n     */\n    isLastUpload: function() {\n        // Processing the last file or not processing at all.\n        return this.getInProgress() < 2;\n    },\n\n    /**\n     * Called on file add.\n     */\n    onFileAdd: function(e, data) {\n        e.stopPropagation();\n\n        var validateExtension = false;\n\n        if (this.allowedKinds) {\n            if (!this._extensionList) {\n                this._createExtensionList();\n            }\n\n            validateExtension = true;\n        }\n\n        // Make sure that file API is there before relying on it\n        data.process().done(() => {\n            var file = data.files[0];\n            var pass = true;\n            if (validateExtension) {\n                var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                var fileExtension = matches[1];\n                if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                    pass = false;\n                    this._rejectedFiles.type.push('“' + file.name + '”');\n                }\n            }\n\n            if (file.size > this.settings.maxFileSize) {\n                this._rejectedFiles.size.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            // If the validation has passed for this file up to now, check if we're not hitting any limits\n            if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                this._rejectedFiles.limit.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            if (pass) {\n                this._validFileCounter++;\n                data.submit();\n            }\n\n            if (++this._totalFileCounter === data.originalFiles.length) {\n                this._totalFileCounter = 0;\n                this._validFileCounter = 0;\n                this.processErrorMessages();\n            }\n        });\n\n        return true;\n    },\n\n    /**\n     * Process error messages.\n     */\n    processErrorMessages: function() {\n        var str;\n\n        if (this._rejectedFiles.type.length) {\n            if (this._rejectedFiles.type.length === 1) {\n                str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            } else {\n                str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n            this._rejectedFiles.type = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.size.length) {\n            if (this._rejectedFiles.size.length === 1) {\n                str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n            this._rejectedFiles.size = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.limit.length) {\n            if (this._rejectedFiles.limit.length === 1) {\n                str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n            this._rejectedFiles.limit = [];\n            alert(str);\n        }\n    },\n\n    humanFileSize: function(bytes) {\n        var threshold = 1024;\n\n        if (bytes < threshold) {\n            return bytes + ' B';\n        }\n\n        var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        var u = -1;\n\n        do {\n            bytes = bytes / threshold;\n            ++u;\n        }\n        while (bytes >= threshold);\n\n        return bytes.toFixed(1) + ' ' + units[u];\n    },\n\n    _createExtensionList: function() {\n        this._extensionList = [];\n\n        for (var i = 0; i < this.allowedKinds.length; i++) {\n            var allowedKind = this.allowedKinds[i];\n\n            if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                    var ext = Craft.fileKinds[allowedKind].extensions[j];\n                    this._extensionList.push(ext);\n                }\n            }\n        }\n    },\n\n    destroy: function() {\n        this.$element.fileupload('destroy');\n        this.base();\n    }\n}, {\n    defaults: {\n        dropZone: null,\n        pasteZone: null,\n        fileInput: null,\n        sequentialUploads: true,\n        maxFileSize: Craft.maxUploadSize,\n        allowedKinds: null,\n        events: {},\n        canAddMoreFiles: null,\n        headers: {'Accept': 'application/json;q=0.9,*/*;q=0.8'},\n        paramName: 'assets-upload'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Make it lowercase\n        sourceVal = sourceVal.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        sourceVal = Craft.asciiString(sourceVal);\n\n        // Handle must start with a letter and end with a letter/number\n        sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n        sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n        // Get the \"words\"\n        var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n        var uriFormat = words.join(Craft.slugWordSeparator);\n\n        if (uriFormat && this.settings.suffix) {\n            uriFormat += this.settings.suffix;\n        }\n\n        return uriFormat;\n    }\n});\n\n})(jQuery);\n","/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function(html) {\n    return html.replace(rxhtmlTag, \"<$1></$2>\");\n};\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} shift\n         * @param {boolean} alt\n         */\n        shortcutText: function (key, shift, alt) {\n            if (Craft.clientOs === 'Mac') {\n                return (alt ? '⌥' : '') + (shift ? '⇧' : '') + '⌘' + key;\n            }\n            return 'Ctrl+' + (alt ? 'Alt+' : '') + (shift ? 'Shift+' : '') + key;\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n\n                // Get the latest headers\n                this._getApiHeaders(cancelToken).then(apiHeaders => {\n                    // Send the API request\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    // Force the API to process the Craft headers if this is the first API request\n                    if (!this._apiHeaders) {\n                        options.params.processCraftHeaders = 1;\n                    }\n\n                    axios.request(options).then((apiResponse) => {\n                        // Process the response headers\n                        this._processApiHeaders(apiResponse.headers, cancelToken).then(() => {\n                            // Finally return the API response data\n                            resolve(apiResponse.data);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        _getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    resolve(response.data);\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _processApiHeaders: function(headers, cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Have we already processed them?\n                if (this._apiHeaders) {\n                    resolve();\n                    return;\n                }\n\n                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                    data: {\n                        headers: headers,\n                    },\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    this._loadingApiHeaders = false;\n\n                    resolve();\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                    }\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _rejectApiRequests: function(reject, e) {\n            this._loadingApiHeaders = false;\n            reject(e);\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1](e);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = () => {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                };\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         */\n        findDeltaData: function(oldData, newData, deltaNames) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, true);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                }\n            }\n\n            return params.join('&');\n        },\n\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, useInitialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = decodeURIComponent(params[p]).substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(params[p]);\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(params[p]);\n                }\n            }\n\n            if (useInitialValues) {\n                for (let name in Craft.initialDeltaValues) {\n                    if (Craft.initialDeltaValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(Craft.initialDeltaValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return arr.includes(elem);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a', $container).each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n    });\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: {\n                        customTrigger: $btn,\n                    }\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                                'aria-label': Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                    $inputs.first().focus();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend({\n    $element: null,\n    elementId: null,\n    siteId: null,\n    deltaNames: null,\n    initialData: null,\n\n    $form: null,\n    $fieldsContainer: null,\n    $cancelBtn: null,\n    $saveBtn: null,\n    $spinner: null,\n\n    $siteSelect: null,\n    $siteSpinner: null,\n\n    hud: null,\n\n    init: function(element, settings) {\n        // Param mapping\n        if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n            // (settings)\n            settings = element;\n            element = null;\n        }\n\n        this.$element = $(element);\n        this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n        this.loadHud();\n    },\n\n    setElementAttribute: function(name, value) {\n        if (!this.settings.attributes) {\n            this.settings.attributes = {};\n        }\n\n        if (value === null) {\n            delete this.settings.attributes[name];\n        } else {\n            this.settings.attributes[name] = value;\n        }\n    },\n\n    getBaseData: function() {\n        var data = $.extend({}, this.settings.params);\n\n        if (this.settings.siteId) {\n            data.siteId = this.settings.siteId;\n        } else if (this.$element && this.$element.data('site-id')) {\n            data.siteId = this.$element.data('site-id');\n        }\n\n        if (this.settings.elementId) {\n            data.elementId = this.settings.elementId;\n        } else if (this.$element && this.$element.data('id')) {\n            data.elementId = this.$element.data('id');\n        }\n\n        if (this.settings.elementType) {\n            data.elementType = this.settings.elementType;\n        }\n\n        if (this.settings.attributes) {\n            data.attributes = this.settings.attributes;\n        }\n\n        if (this.settings.prevalidate) {\n            data.prevalidate = 1;\n        }\n\n        return data;\n    },\n\n    loadHud: function() {\n        this.onBeginLoading();\n        var data = this.getBaseData();\n        data.includeSites = Craft.isMultiSite && this.settings.showSiteSwitcher;\n        Craft.postActionRequest('elements/get-editor-html', data, this.showHud.bind(this));\n    },\n\n    showHud: function(response, textStatus) {\n        this.onEndLoading();\n\n        if (textStatus === 'success') {\n            var $hudContents = $();\n\n            if (response.sites) {\n                var $header = $('<div class=\"hud-header\"/>');\n\n                if (response.sites.length === 1) {\n                    $('<h5/>', {text: response.sites[0].name}).appendTo($header);\n                } else {\n                    var $siteSelectContainer = $('<div class=\"select\"/>').appendTo($header);\n\n                    this.$siteSelect = $('<select/>').appendTo($siteSelectContainer);\n                    this.$siteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($header);\n\n                    for (var i = 0; i < response.sites.length; i++) {\n                        var siteInfo = response.sites[i];\n                        $('<option value=\"' + siteInfo.id + '\"' + (siteInfo.id == response.siteId ? ' selected=\"selected\"' : '') + '>' + siteInfo.name + '</option>').appendTo(this.$siteSelect);\n                    }\n\n                    this.addListener(this.$siteSelect, 'change', 'switchSite');\n                }\n\n                $hudContents = $hudContents.add($header);\n            }\n\n            this.$form = $('<div/>');\n            this.$fieldsContainer = $('<div class=\"fields\"/>').appendTo(this.$form);\n\n            this.updateForm(response, true);\n\n            this.onCreateForm(this.$form);\n\n            var $footer = $('<div class=\"hud-footer\"/>').appendTo(this.$form),\n                $buttonsContainer = $('<div class=\"buttons right\"/>').appendTo($footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo($buttonsContainer);\n            this.$saveBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($buttonsContainer);\n            this.$spinner = $('<div class=\"spinner hidden\"/>').appendTo($buttonsContainer);\n\n            $hudContents = $hudContents.add(this.$form);\n\n            if (!this.hud) {\n                var hudTrigger = (this.settings.hudTrigger || this.$element);\n\n                this.hud = new Garnish.HUD(hudTrigger, $hudContents, {\n                    bodyClass: 'body elementeditor',\n                    closeOtherHUDs: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    onShow: this.onShowHud.bind(this),\n                    onHide: this.onHideHud.bind(this),\n                    onSubmit: this.saveElement.bind(this),\n                });\n\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.maybeCloseHud.bind(this));\n                this.hud.addListener(this.hud.$shade, 'click', this.maybeCloseHud.bind(this));\n\n                this.hud.$hud.data('elementEditor', this);\n\n                // Disable browser input validation\n                this.hud.$body.attr('novalidate', '');\n\n                this.hud.on('hide', () => {\n                    delete this.hud;\n                });\n            } else {\n                this.hud.updateBody($hudContents);\n                this.hud.updateSizeAndPosition();\n            }\n\n            // Focus on the first text input\n            $hudContents.find('.text:first').trigger('focus');\n\n            this.addListener(this.$cancelBtn, 'click', function() {\n                this.hud.hide();\n            });\n        }\n    },\n\n    switchSite: function() {\n        if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n            this.$siteSelect.val(this.siteId);\n            return;\n        }\n\n        var newSiteId = this.$siteSelect.val();\n\n        if (newSiteId == this.siteId) {\n            return;\n        }\n\n        this.$siteSpinner.removeClass('hidden');\n\n        this.reloadForm({siteId: newSiteId}, textStatus => {\n            this.$siteSpinner.addClass('hidden');\n            if (textStatus !== 'success') {\n                // Reset the site select\n                this.$siteSelect.val(this.siteId);\n            }\n        });\n    },\n\n    reloadForm: function(data, callback) {\n        data = $.extend(this.getBaseData(), data);\n\n        Craft.postActionRequest('elements/get-editor-html', data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.updateForm(response, true);\n            }\n\n            if (callback) {\n                callback(textStatus);\n            }\n        });\n    },\n\n    updateForm: function(response, refreshInitialData) {\n        this.siteId = response.siteId;\n        this.$fieldsContainer.html(response.html);\n\n        if (refreshInitialData !== false) {\n            this.deltaNames = response.deltaNames;\n        }\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$fieldsContainer.find('> .meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            Craft.appendHeadHtml(response.headHtml);\n            Craft.appendFootHtml(response.footHtml);\n            Craft.initUiElements(this.$fieldsContainer);\n\n            if (refreshInitialData) {\n                this.initialData = this.hud.$body.serialize();\n            }\n        });\n    },\n\n    saveElement: function() {\n        var validators = this.settings.validators;\n\n        if ($.isArray(validators)) {\n            for (var i = 0; i < validators.length; i++) {\n                if ($.isFunction(validators[i]) && !validators[i].call()) {\n                    return false;\n                }\n            }\n        }\n\n        this.$spinner.removeClass('hidden');\n\n        var data = $.param(this.getBaseData()) + '&' + this.hud.$body.serialize();\n        data = Craft.findDeltaData(this.initialData, data, this.deltaNames);\n\n        Craft.postActionRequest('elements/save-element', data, (response, textStatus) => {\n            this.$spinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (this.$element && this.siteId == this.$element.data('site-id')) {\n                        // Update the label\n                        var $title = this.$element.find('.title'),\n                            $a = $title.find('a');\n\n                        if ($a.length && response.cpEditUrl) {\n                            $a.attr('href', response.cpEditUrl);\n                            $a.text(response.newTitle);\n                        } else {\n                            $title.text(response.newTitle);\n                        }\n                    }\n\n                    if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                        Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                            type: Craft.elementTypeNames[this.settings.elementType][0],\n                        }));\n                    }\n\n                    this.closeHud();\n                    this.onSaveElement(response);\n                } else {\n                    this.updateForm(response, false);\n                    Garnish.shake(this.hud.$hud);\n                }\n            }\n        });\n    },\n\n    isDirty: function() {\n        return this.hud.$body.serialize() !== this.initialData;\n    },\n\n    maybeCloseHud: function(ev) {\n        if (!this.hud || !this.hud.showing) {\n            return;\n        }\n\n        if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n            this.closeHud();\n        }\n    },\n\n    closeHud: function() {\n        if (!this.hud || !this.hud.showing) {\n            return;\n        }\n\n        this.hud.hide();\n        delete this.hud;\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    onShowHud: function() {\n        Garnish.shortcutManager.registerShortcut({\n            keyCode: Garnish.S_KEY,\n            ctrl: true,\n        }, this.saveElement.bind(this));\n        this.settings.onShowHud();\n        this.trigger('showHud');\n    },\n\n    onHideHud: function() {\n        this.settings.onHideHud();\n        this.trigger('hideHud');\n    },\n\n    onBeginLoading: function() {\n        if (this.$element) {\n            this.$element.addClass('loading');\n        }\n\n        this.settings.onBeginLoading();\n        this.trigger('beginLoading');\n    },\n\n    onEndLoading: function() {\n        if (this.$element) {\n            this.$element.removeClass('loading');\n        }\n\n        this.settings.onEndLoading();\n        this.trigger('endLoading');\n    },\n\n    onSaveElement: function(response) {\n        this.settings.onSaveElement(response);\n        this.trigger('saveElement', {\n            response: response\n        });\n\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n    },\n\n    onCreateForm: function($form) {\n        this.settings.onCreateForm($form);\n    }\n}, {\n    defaults: {\n        hudTrigger: null,\n        showSiteSwitcher: true,\n        elementId: null,\n        elementType: null,\n        siteId: null,\n        attributes: null,\n        params: null,\n        prevalidate: false,\n        elementIndex: null,\n\n        onShowHud: $.noop,\n        onHideHud: $.noop,\n        onBeginLoading: $.noop,\n        onEndLoading: $.noop,\n        onCreateForm: $.noop,\n        onSaveElement: $.noop,\n\n        validators: []\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend({\n    initialized: false,\n    elementType: null,\n\n    instanceState: null,\n    sourceStates: null,\n    sourceStatesStorageKey: null,\n\n    searchTimeout: null,\n    sourceSelect: null,\n\n    $container: null,\n    $main: null,\n    isIndexBusy: false,\n\n    $sidebar: null,\n    showingSidebar: null,\n    sourceKey: null,\n    sourceViewModes: null,\n    $source: null,\n    sourcesByKey: null,\n    $visibleSources: null,\n\n    $customizeSourcesBtn: null,\n    customizeSourcesModal: null,\n\n    $toolbar: null,\n    toolbarOffset: null,\n\n    $search: null,\n    searching: false,\n    searchText: null,\n    trashed: false,\n    drafts: false,\n    $clearSearchBtn: null,\n\n    $statusMenuBtn: null,\n    $statusMenuContainer: null,\n    statusMenu: null,\n    status: null,\n\n    $siteMenuBtn: null,\n    siteMenu: null,\n    siteId: null,\n\n    $sortMenuBtn: null,\n    sortMenu: null,\n    $sortAttributesList: null,\n    $sortDirectionsList: null,\n    $scoreSortAttribute: null,\n    $structureSortAttribute: null,\n\n    $elements: null,\n    $viewModeBtnContainer: null,\n    viewModeBtns: null,\n    viewMode: null,\n    view: null,\n    _autoSelectElements: null,\n    $countSpinner: null,\n    $countContainer: null,\n    page: 1,\n    resultSet: null,\n    totalResults: null,\n    $exportBtn: null,\n\n    actions: null,\n    actionsHeadHtml: null,\n    actionsFootHtml: null,\n    $selectAllContainer: null,\n    $selectAllCheckbox: null,\n    showingActionTriggers: false,\n    exporters: null,\n    exportersByType: null,\n    _$detachedToolbarItems: null,\n    _$triggers: null,\n\n    _ignoreFailedRequest: false,\n    _cancelToken: null,\n\n    /**\n     * Constructor\n     */\n    init: function(elementType, $container, settings) {\n        this.elementType = elementType;\n        this.$container = $container;\n        this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n        // Set the state objects\n        // ---------------------------------------------------------------------\n\n        this.instanceState = this.getDefaultInstanceState();\n\n        this.sourceStates = {};\n\n        // Instance states (selected source) are stored by a custom storage key defined in the settings\n        if (this.settings.storageKey) {\n            $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n        }\n\n        // Source states (view mode, etc.) are stored by the element type and context\n        this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n        $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n        // Find the DOM elements\n        // ---------------------------------------------------------------------\n\n        this.$main = this.$container.find('.main');\n        this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n        this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n        this.$statusMenuContainer = this.$statusMenuBtn.parent();\n        this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n        this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n        this.$search = this.$toolbar.find('.search:first input:first');\n        this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n        this.$sidebar = this.$container.find('.sidebar:first');\n        this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n        this.$elements = this.$container.find('.elements:first');\n        this.$countSpinner = this.$container.find('#count-spinner');\n        this.$countContainer = this.$container.find('#count-container');\n        this.$exportBtn = this.$container.find('#export-btn');\n\n        // Hide sidebar if needed\n        if (this.settings.hideSidebar) {\n            this.$sidebar.hide();\n            $('.body, .content', this.$container).removeClass('has-sidebar');\n        }\n\n        // Initialize the sources\n        // ---------------------------------------------------------------------\n\n        if (!this.initSources()) {\n            return;\n        }\n\n        // Customize button\n        if (this.$customizeSourcesBtn.length) {\n            this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n        }\n\n        // Initialize the status menu\n        // ---------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n            this.statusMenu.on('optionselect', this._handleStatusChange.bind(this));\n        }\n\n        // Initialize the site menu\n        // ---------------------------------------------------------------------\n\n        // Is there a site menu?\n        if (this.$siteMenuBtn.length) {\n            this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n            // Figure out the initial site\n            var $option = this.siteMenu.$options.filter('.sel:first');\n\n            if (!$option.length) {\n                $option = this.siteMenu.$options.first();\n            }\n\n            if ($option.length) {\n                this._setSite($option.data('site-id'));\n            } else {\n                // No site options -- they must not have any site permissions\n                this.settings.criteria = {id: '0'};\n            }\n\n            this.siteMenu.on('optionselect', this._handleSiteChange.bind(this));\n\n            if (this.siteId) {\n                // Should we be using a different default site?\n                var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                if (defaultSiteId && defaultSiteId != this.siteId) {\n                    // Is that one available here?\n                    var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                    if ($storedSiteOption.length) {\n                        // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                        $storedSiteOption.trigger('click');\n                    }\n                }\n            }\n        } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n            this._setSite(this.settings.criteria.siteId);\n        } else {\n            this._setSite(Craft.siteId);\n        }\n\n        // Don't let the criteria override the selected site\n        if (this.settings.criteria && this.settings.criteria.siteId) {\n            delete this.settings.criteria.siteId;\n        }\n\n        // Initialize the search input\n        // ---------------------------------------------------------------------\n\n        // Automatically update the elements after new search text has been sitting for a 1/2 second\n        this.addListener(this.$search, 'input', () => {\n            if (!this.searching && this.$search.val()) {\n                this.startSearching();\n            } else if (this.searching && !this.$search.val()) {\n                this.stopSearching();\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.updateElementsIfSearchTextChanged.bind(this), 500);\n        });\n\n        // Update the elements when the Return key is pressed\n        this.addListener(this.$search, 'keypress', ev => {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.updateElementsIfSearchTextChanged();\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearSearchBtn, 'click', () => {\n            this.$search.val('');\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            this.stopSearching();\n\n            this.updateElementsIfSearchTextChanged();\n        });\n\n        // Auto-focus the Search box\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$search.trigger('focus');\n        }\n\n        // Initialize the sort menu\n        // ---------------------------------------------------------------------\n\n        // Is there a sort menu?\n        if (this.$sortMenuBtn.length) {\n            this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n            this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n            this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n            this.sortMenu.on('optionselect', this._handleSortChange.bind(this));\n        }\n\n        // Initialize the Export button\n        // ---------------------------------------------------------------------\n\n        this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n        // Let everyone know that the UI is initialized\n        // ---------------------------------------------------------------------\n\n        this.initialized = true;\n        this.afterInit();\n\n        // Select the initial source\n        // ---------------------------------------------------------------------\n\n        this.selectDefaultSource();\n\n        // Load the first batch of elements!\n        // ---------------------------------------------------------------------\n\n        // Default to whatever page is in the URL\n        this.setPage(Craft.pageNum);\n\n        this.updateElements(true);\n    },\n\n    afterInit: function() {\n        this.onAfterInit();\n    },\n\n    _createCancelToken: function() {\n        this._cancelToken = axios.CancelToken.source();\n        return this._cancelToken.token;\n    },\n\n    _cancelRequests: function() {\n        if (this._cancelToken) {\n            this._ignoreFailedRequest = true;\n            this._cancelToken.cancel();\n            Garnish.requestAnimationFrame(() => {\n                this._ignoreFailedRequest = false;\n            });\n        }\n    },\n\n    getSourceContainer: function() {\n        return this.$sidebar.find('nav > ul');\n    },\n\n    get $sources() {\n        if (!this.sourceSelect) {\n            return undefined;\n        }\n\n        return this.sourceSelect.$items;\n    },\n\n    initSources: function() {\n        var $sources = this._getSourcesInList(this.getSourceContainer());\n\n        // No source, no party.\n        if ($sources.length === 0) {\n            return false;\n        }\n\n        // The source selector\n        if (!this.sourceSelect) {\n            this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                multi: false,\n                allowEmpty: false,\n                vertical: true,\n                onSelectionChange: this._handleSourceSelectionChange.bind(this)\n            });\n        }\n\n        this.sourcesByKey = {};\n        this._initSources($sources);\n\n        return true;\n    },\n\n    selectDefaultSource: function() {\n        var sourceKey = this.getDefaultSourceKey(),\n            $source;\n\n        if (sourceKey) {\n            $source = this.getSourceByKey(sourceKey);\n\n            // Make sure it's visible\n            if (this.$visibleSources.index($source) === -1) {\n                $source = null;\n            }\n        }\n\n        if (!sourceKey || !$source) {\n            // Select the first source by default\n            $source = this.$visibleSources.first();\n        }\n\n        return this.selectSource($source);\n    },\n\n    refreshSources: function() {\n        this.sourceSelect.removeAllItems();\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType\n        };\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n            data: params,\n        }).then((response) => {\n            this.setIndexAvailable();\n            this.getSourceContainer().replaceWith(response.data.html);\n            this.initSources();\n            this.selectDefaultSource();\n        }).catch(() => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    initSource: function($source) {\n        this.sourceSelect.addItems($source);\n        this.initSourceToggle($source);\n        this.sourcesByKey[$source.data('key')] = $source;\n\n        if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n            this._expandSource($source);\n        }\n    },\n\n    initSourceToggle: function($source) {\n        // Remove handlers for the same thing. Just in case.\n        this.deinitSourceToggle($source);\n\n        var $toggle = this._getSourceToggle($source);\n\n        if ($toggle.length) {\n            this.addListener($source, 'dblclick', '_handleSourceDblClick');\n            this.addListener($toggle, 'click', '_handleSourceToggleClick');\n            $source.data('hasNestedSources', true);\n        } else {\n            $source.data('hasNestedSources', false);\n        }\n    },\n\n    deinitSource: function($source) {\n        this.sourceSelect.removeItems($source);\n        this.deinitSourceToggle($source);\n        delete this.sourcesByKey[$source.data('key')];\n    },\n\n    deinitSourceToggle: function($source) {\n        if ($source.data('hasNestedSources')) {\n            this.removeListener($source, 'dblclick');\n            this.removeListener(this._getSourceToggle($source), 'click');\n        }\n\n        $source.removeData('hasNestedSources');\n    },\n\n    getDefaultInstanceState: function() {\n        return {\n            selectedSource: null,\n            expandedSources: []\n        };\n    },\n\n    getDefaultSourceKey: function() {\n        if (this.settings.defaultSource) {\n            var paths = this.settings.defaultSource.split('/'),\n                path = '';\n\n            // Expand the tree\n            for (var i = 0; i < paths.length; i++) {\n                path += paths[i];\n                var $source = this.getSourceByKey(path);\n\n                // If the folder can't be found, then just go to the stored instance source.\n                if (!$source) {\n                    return this.instanceState.selectedSource;\n                }\n\n                this._expandSource($source);\n                path += '/';\n            }\n\n            // Just make sure that the modal is aware of the newly expanded sources, too.\n            this._setSite(this.siteId);\n\n            return this.settings.defaultSource;\n        }\n\n        return this.instanceState.selectedSource;\n    },\n\n    getDefaultExpandedSources: function() {\n        return this.instanceState.expandedSources;\n    },\n\n    startSearching: function() {\n        // Show the clear button and add/select the Score sort option\n        this.$clearSearchBtn.removeClass('hidden');\n\n        if (!this.$scoreSortAttribute) {\n            this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n            this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n        }\n\n        this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n        this.searching = true;\n\n        this._updateStructureSortOption();\n        this.setSortAttribute('score');\n    },\n\n    stopSearching: function() {\n        // Hide the clear button and Score sort option\n        this.$clearSearchBtn.addClass('hidden');\n\n        this.$scoreSortAttribute.detach();\n\n        this.searching = false;\n\n        this._updateStructureSortOption();\n    },\n\n    setInstanceState: function(key, value) {\n        if (typeof key === 'object') {\n            $.extend(this.instanceState, key);\n        } else {\n            this.instanceState[key] = value;\n        }\n\n        this.storeInstanceState();\n    },\n\n    storeInstanceState: function() {\n        if (this.settings.storageKey) {\n            Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n        }\n    },\n\n    getSourceState: function(source, key, defaultValue) {\n        if (typeof this.sourceStates[source] === 'undefined') {\n            // Set it now so any modifications to it by whoever's calling this will be stored.\n            this.sourceStates[source] = {};\n        }\n\n        if (typeof key === 'undefined') {\n            return this.sourceStates[source];\n        } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n            return this.sourceStates[source][key];\n        } else {\n            return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n        }\n    },\n\n    getSelectedSourceState: function(key, defaultValue) {\n        return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n    },\n\n    setSelecetedSourceState: function(key, value) {\n        var viewState = this.getSelectedSourceState();\n\n        if (typeof key === 'object') {\n            $.extend(viewState, key);\n        } else {\n            viewState[key] = value;\n        }\n\n        this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n        // Store it in localStorage too\n        Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n    },\n\n    storeSortAttributeAndDirection: function() {\n        var attr = this.getSelectedSortAttribute();\n\n        if (attr !== 'score') {\n            this.setSelecetedSourceState({\n                order: attr,\n                sort: this.getSelectedSortDirection()\n            });\n        }\n    },\n\n    /**\n     * Sets the page number.\n     */\n    setPage: function(page) {\n        if (this.settings.context !== 'index') {\n            return;\n        }\n\n        page = Math.max(page, 1);\n        this.page = page;\n\n        // Update the URL\n        var url = document.location.href\n            .replace(/\\?.*$/, '')\n            .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n            .replace(/\\/+$/, '');\n\n        if (this.page !== 1) {\n            if (Craft.pageTrigger[0] !== '?') {\n                url += '/';\n            }\n            url += Craft.pageTrigger + this.page;\n        }\n\n        history.replaceState({}, '', url);\n    },\n\n    _resetCount: function() {\n        this.resultSet = null;\n        this.totalResults = null;\n    },\n\n    /**\n     * Returns the data that should be passed to the elementIndex/getElements controller action\n     * when loading elements.\n     */\n    getViewParams: function() {\n        var criteria = {\n            siteId: this.siteId,\n            search: this.searchText,\n            offset: this.settings.batchSize * (this.page - 1),\n            limit: this.settings.batchSize,\n        };\n\n        // Only set drafts/draftOf/trashed params when needed, so we don't potentially override a source's criteria\n        if (\n            this.settings.canHaveDrafts &&\n            (this.drafts || (this.settings.context === 'index' && !this.status))\n        ) {\n            criteria.drafts = this.drafts || null;\n            criteria.savedDraftsOnly = true;\n            if (!this.drafts) {\n                criteria.draftOf = false;\n            }\n        }\n        if (this.trashed) {\n            criteria.trashed = true;\n        }\n\n        if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n            criteria.status = this.status;\n        }\n\n        $.extend(criteria, this.settings.criteria);\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType,\n            source: this.instanceState.selectedSource,\n            criteria: criteria,\n            disabledElementIds: this.settings.disabledElementIds,\n            viewState: $.extend({}, this.getSelectedSourceState()),\n            paginated: this._isViewPaginated() ? 1 : 0,\n        };\n\n        // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n        params.viewState.order = this.getSelectedSortAttribute();\n        params.viewState.sort = this.getSelectedSortDirection();\n\n        if (this.getSelectedSortAttribute() === 'structure') {\n            if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                this.instanceState.collapsedElementIds = [];\n            }\n            params.collapsedElementIds = this.instanceState.collapsedElementIds;\n        }\n\n        // Give plugins a chance to hook in here\n        this.trigger('registerViewParams', {\n            params: params,\n        });\n\n        return params;\n    },\n\n    updateElements: function(preservePagination) {\n        // Ignore if we're not fully initialized yet\n        if (!this.initialized) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        this.setIndexBusy();\n\n        // Kill the old view class\n        if (this.view) {\n            this.view.destroy();\n            delete this.view;\n        }\n\n        if (preservePagination !== true) {\n            this.setPage(1);\n            this._resetCount();\n        }\n\n        var params = this.getViewParams();\n\n        Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n            data: params,\n            cancelToken: this._createCancelToken(),\n        }).then((response) => {\n            this.setIndexAvailable();\n            (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n            this._updateView(params, response.data);\n        }).catch(e => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    updateElementsIfSearchTextChanged: function() {\n        if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n            this.updateElements();\n        }\n    },\n\n    showActionTriggers: function() {\n        // Ignore if they're already shown\n        if (this.showingActionTriggers) {\n            return;\n        }\n\n        // Hard-code the min toolbar height in case it was taller than the actions toolbar\n        // (prevents the elements from jumping if this ends up being a double-click)\n        this.$toolbar.css('min-height', this.$toolbar.height());\n\n        // Hide any toolbar inputs\n        this._$detachedToolbarItems = this.$toolbar.children();\n        this._$detachedToolbarItems.detach();\n\n        if (!this._$triggers) {\n            this._createTriggers();\n        } else {\n            this._$triggers.appendTo(this.$toolbar);\n        }\n\n        this.showingActionTriggers = true;\n    },\n\n    submitAction: function(action, actionParams) {\n        // Make sure something's selected\n        var selectedElementIds = this.view.getSelectedElementIds(),\n            totalSelected = selectedElementIds.length;\n\n        if (totalSelected === 0) {\n            return;\n        }\n\n        if (typeof action === 'string') {\n            action = this._findAction(action);\n        }\n\n        if (action.confirm && !confirm(action.confirm)) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        // Get ready to submit\n        var viewParams = this.getViewParams();\n\n        actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n        var params = $.extend(viewParams, action.settings || {}, actionParams, {\n            elementAction: action.type,\n            elementIds: selectedElementIds\n        });\n\n        // Do it\n        this.setIndexBusy();\n        this._autoSelectElements = selectedElementIds;\n\n        if (action.download) {\n            if (Craft.csrfTokenName) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n            Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                this.setIndexAvailable();\n            }).catch(e => {\n                this.setIndexAvailable();\n            });\n        } else {\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        }\n    },\n\n    _findAction: function(actionClass) {\n        for (var i = 0; i < this.actions.length; i++) {\n            if (this.actions[i].type === actionClass) {\n                return this.actions[i];\n            }\n        }\n        throw `Invalid element action: ${actionClass}`;\n    },\n\n    afterAction: function(action, params) {\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n\n        this.onAfterAction(action, params);\n    },\n\n    hideActionTriggers: function() {\n        // Ignore if there aren't any\n        if (!this.showingActionTriggers) {\n            return;\n        }\n\n        this._$detachedToolbarItems.appendTo(this.$toolbar);\n        this._$triggers.detach();\n        // this._$detachedToolbarItems.removeClass('hidden');\n\n        // Unset the min toolbar height\n        this.$toolbar.css('min-height', '');\n\n        this.showingActionTriggers = false;\n    },\n\n    updateActionTriggers: function() {\n        // Do we have an action UI to update?\n        if (this.actions) {\n            var totalSelected = this.view.getSelectedElements().length;\n\n            if (totalSelected !== 0) {\n                if (totalSelected === this.view.getEnabledElements().length) {\n                    this.$selectAllCheckbox.removeClass('indeterminate');\n                    this.$selectAllCheckbox.addClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'true');\n                } else {\n                    this.$selectAllCheckbox.addClass('indeterminate');\n                    this.$selectAllCheckbox.removeClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'mixed');\n                }\n\n                this.showActionTriggers();\n            } else {\n                this.$selectAllCheckbox.removeClass('indeterminate checked');\n                this.$selectAllContainer.attr('aria-checked', 'false');\n                this.hideActionTriggers();\n            }\n        }\n    },\n\n    getSelectedElements: function() {\n        return this.view ? this.view.getSelectedElements() : $();\n    },\n\n    getSelectedElementIds: function() {\n        return this.view ? this.view.getSelectedElementIds() : [];\n    },\n\n    setStatus: function(status) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n        if ($option.length) {\n            this.statusMenu.selectOption($option[0]);\n        }\n    },\n\n    getSortAttributeOption: function(attr) {\n        return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n    },\n\n    getSelectedSortAttribute: function() {\n        return this.$sortAttributesList.find('a.sel:first').data('attr');\n    },\n\n    setSortAttribute: function(attr) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.getSortAttributeOption(attr);\n\n        if ($option.length) {\n            this.$sortAttributesList.find('a.sel').removeClass('sel');\n            $option.addClass('sel');\n\n            var label = $option.text();\n            this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n            this.$sortMenuBtn.text(label);\n\n            if (attr === 'score') {\n                this.setSortDirection('desc');\n            } else {\n                this.setSortDirection($option.data('default-dir') || 'asc');\n            }\n\n            if (attr === 'structure') {\n                this.$sortDirectionsList.find('a').addClass('disabled');\n            } else {\n                this.$sortDirectionsList.find('a').removeClass('disabled');\n            }\n        }\n    },\n\n    getSortDirectionOption: function(dir) {\n        return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n    },\n\n    getSelectedSortDirection: function() {\n        return this.$sortDirectionsList.find('a.sel:first').data('dir');\n    },\n\n    getSelectedViewMode: function() {\n        return this.getSelectedSourceState('mode') || 'table';\n    },\n\n    setSortDirection: function(dir) {\n        if (dir !== 'desc') {\n            dir = 'asc';\n        }\n\n        this.$sortMenuBtn.attr('data-icon', dir);\n        this.$sortDirectionsList.find('a.sel').removeClass('sel');\n        this.getSortDirectionOption(dir).addClass('sel');\n    },\n\n    getSourceByKey: function(key) {\n        if (typeof this.sourcesByKey[key] === 'undefined') {\n            return null;\n        }\n\n        return this.sourcesByKey[key];\n    },\n\n    selectSource: function($source) {\n        if (!$source || !$source.length) {\n            return false;\n        }\n\n        if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n            return false;\n        }\n\n        // Hide action triggers if they're currently being shown\n        this.hideActionTriggers();\n\n        this.$source = $source;\n        this.sourceKey = $source.data('key');\n        this.setInstanceState('selectedSource', this.sourceKey);\n        this.sourceSelect.selectItem($source);\n\n        Craft.cp.updateSidebarMenuLabel();\n\n        if (this.searching) {\n            // Clear the search value without causing it to update elements\n            this.searchText = null;\n            this.$search.val('');\n            this.stopSearching();\n        }\n\n        // Sort menu\n        // ----------------------------------------------------------------------\n\n        // Remove any existing custom sort options from the menu\n        this.$sortAttributesList.children('li[data-extra]').remove();\n\n        // Does this source have any custom sort options?\n        let sortOptions = this.$source.data('sort-options')\n        if (sortOptions) {\n            for (let i = 0; i < sortOptions.length; i++) {\n                let $option = $('<li/>', {\n                    'data-extra': true,\n                })\n                    .append(\n                        $('<a/>', {\n                            text: sortOptions[i][0],\n                            'data-attr': sortOptions[i][1],\n                        })\n                    )\n                    .appendTo(this.$sortAttributesList);\n                this.sortMenu.addOptions($option.children());\n            }\n        }\n\n        // Does this source have a structure?\n        if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n            if (!this.$structureSortAttribute) {\n                this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                this.sortMenu.addOptions(this.$structureSortAttribute.children());\n            }\n\n            this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n        } else if (this.$structureSortAttribute) {\n            this.$structureSortAttribute.removeClass('sel').detach();\n        }\n\n        this.setStoredSortOptionsForSource();\n\n        // Status menu\n        // ----------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                this.$statusMenuContainer.addClass('hidden');\n            } else {\n                this.$statusMenuContainer.removeClass('hidden');\n            }\n\n            if (this.trashed) {\n                // Swap to the initial status\n                var $firstOption = this.statusMenu.$options.first();\n                this.setStatus($firstOption.data('status'));\n            }\n        }\n\n        // View mode buttons\n        // ----------------------------------------------------------------------\n\n        // Clear out any previous view mode data\n        if (this.$viewModeBtnContainer) {\n            this.$viewModeBtnContainer.remove();\n        }\n\n        this.viewModeBtns = {};\n        this.viewMode = null;\n\n        // Get the new list of view modes\n        this.sourceViewModes = this.getViewModesForSource();\n\n        // Create the buttons if there's more than one mode available to this source\n        if (this.sourceViewModes.length > 1) {\n            this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                let sourceViewMode = this.sourceViewModes[i];\n\n                let $viewModeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                    'data-view': sourceViewMode.mode,\n                    'data-icon': sourceViewMode.icon,\n                    'aria-label': sourceViewMode.title,\n                    title: sourceViewMode.title,\n                }).appendTo(this.$viewModeBtnContainer);\n\n                this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                    this.selectViewMode(ev.data.mode);\n                    this.updateElements();\n                });\n            }\n        }\n\n        // Figure out which mode we should start with\n        var viewMode = this.getSelectedViewMode();\n\n        if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n            // Try to keep using the current view mode\n            if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                viewMode = this.viewMode;\n            }\n            // Just use the first one\n            else {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n        }\n\n        this.selectViewMode(viewMode);\n\n        this.onSelectSource();\n\n        return true;\n    },\n\n    selectSourceByKey: function(key) {\n        var $source = this.getSourceByKey(key);\n\n        if ($source) {\n            return this.selectSource($source);\n        } else {\n            return false;\n        }\n    },\n\n    setStoredSortOptionsForSource: function() {\n        var sortAttr = this.getSelectedSourceState('order'),\n            sortDir = this.getSelectedSourceState('sort');\n\n        if (!sortAttr || !sortDir) {\n            // Get the default\n            sortAttr = this.getDefaultSort();\n\n            if (Garnish.isArray(sortAttr)) {\n                sortDir = sortAttr[1];\n                sortAttr = sortAttr[0];\n            }\n        }\n\n        if (sortDir !== 'asc' && sortDir !== 'desc') {\n            sortDir = 'asc';\n        }\n\n        this.setSortAttribute(sortAttr);\n        this.setSortDirection(sortDir);\n    },\n\n    getDefaultSort: function() {\n        // Does the source specify what to do?\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n            return this.$source.attr('data-default-sort').split(':');\n        } else {\n            // Default to whatever's first\n            return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n        }\n    },\n\n    getViewModesForSource: function() {\n        var viewModes = [\n            {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n        ];\n\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n            viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n        }\n\n        return viewModes;\n    },\n\n    doesSourceHaveViewMode: function(viewMode) {\n        for (var i = 0; i < this.sourceViewModes.length; i++) {\n            if (this.sourceViewModes[i].mode === viewMode) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    selectViewMode: function(viewMode, force) {\n        // Make sure that the current source supports it\n        if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n            viewMode = this.sourceViewModes[0].mode;\n        }\n\n        // Has anything changed?\n        if (viewMode === this.viewMode) {\n            return;\n        }\n\n        // Deselect the previous view mode\n        if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].removeClass('active');\n        }\n\n        this.viewMode = viewMode;\n        this.setSelecetedSourceState('mode', this.viewMode);\n\n        if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].addClass('active');\n        }\n    },\n\n    createView: function(mode, settings) {\n        var viewClass = this.getViewClass(mode);\n        return new viewClass(this, this.$elements, settings);\n    },\n\n    getViewClass: function(mode) {\n        switch (mode) {\n            case 'table':\n                return Craft.TableElementIndexView;\n            case 'thumbs':\n                return Craft.ThumbsElementIndexView;\n            default:\n                throw `View mode \"${mode}\" not supported.`;\n        }\n    },\n\n    rememberDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index === -1) {\n            this.settings.disabledElementIds.push(id);\n        }\n    },\n\n    forgetDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index !== -1) {\n            this.settings.disabledElementIds.splice(index, 1);\n        }\n    },\n\n    enableElements: function($elements) {\n        $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.forgetDisabledElementId(id);\n        }\n\n        this.onEnableElements($elements);\n    },\n\n    disableElements: function($elements) {\n        $elements.removeClass('sel').addClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.rememberDisabledElementId(id);\n        }\n\n        this.onDisableElements($elements);\n    },\n\n    getElementById: function(id) {\n        return this.view.getElementById(id);\n    },\n\n    enableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.enableElements($element);\n            } else {\n                this.forgetDisabledElementId(id);\n            }\n        }\n    },\n\n    disableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.disableElements($element);\n            } else {\n                this.rememberDisabledElementId(id);\n            }\n        }\n    },\n\n    selectElementAfterUpdate: function(id) {\n        if (this._autoSelectElements === null) {\n            this._autoSelectElements = [];\n        }\n\n        this._autoSelectElements.push(id);\n    },\n\n    addButton: function($button) {\n        this.getButtonContainer().append($button);\n    },\n\n    isShowingSidebar: function() {\n        if (this.showingSidebar === null) {\n            this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n        }\n\n        return this.showingSidebar;\n    },\n\n    getButtonContainer: function() {\n        // Is there a predesignated place where buttons should go?\n        if (this.settings.buttonContainer) {\n            return $(this.settings.buttonContainer);\n        } else {\n            var $container = $('#action-button');\n\n            if (!$container.length) {\n                $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n            }\n\n            return $container;\n        }\n    },\n\n    setIndexBusy: function() {\n        this.$elements.addClass('busy');\n        this.isIndexBusy = true;\n    },\n\n    setIndexAvailable: function() {\n        this.$elements.removeClass('busy');\n        this.isIndexBusy = false;\n    },\n\n    createCustomizeSourcesModal: function() {\n        // Recreate it each time\n        var modal = new Craft.CustomizeSourcesModal(this, {\n            onHide: function() {\n                modal.destroy();\n            }\n        });\n\n        return modal;\n    },\n\n    disable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.disable();\n        }\n\n        if (this.view) {\n            this.view.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.enable();\n        }\n\n        if (this.view) {\n            this.view.enable();\n        }\n\n        this.base();\n    },\n\n    onAfterInit: function() {\n        this.settings.onAfterInit();\n        this.trigger('afterInit');\n    },\n\n    onSelectSource: function() {\n        this.settings.onSelectSource(this.sourceKey);\n        this.trigger('selectSource', {sourceKey: this.sourceKey});\n    },\n\n    onSelectSite: function() {\n        this.settings.onSelectSite(this.siteId);\n        this.trigger('selectSite', {siteId: this.siteId});\n    },\n\n    onUpdateElements: function() {\n        this.settings.onUpdateElements();\n        this.trigger('updateElements');\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    onEnableElements: function($elements) {\n        this.settings.onEnableElements($elements);\n        this.trigger('enableElements', {elements: $elements});\n    },\n\n    onDisableElements: function($elements) {\n        this.settings.onDisableElements($elements);\n        this.trigger('disableElements', {elements: $elements});\n    },\n\n    onAfterAction: function(action, params) {\n        this.settings.onAfterAction(action, params);\n        this.trigger('afterAction', {action: action, params: params});\n    },\n\n    // UI state handlers\n    // -------------------------------------------------------------------------\n\n    _handleSourceSelectionChange: function() {\n        // If the selected source was just removed (maybe because its parent was collapsed),\n        // there won't be a selected source\n        if (!this.sourceSelect.totalSelected) {\n            this.sourceSelect.selectItem(this.$visibleSources.first());\n            return;\n        }\n\n        if (this.selectSource(this.sourceSelect.$selectedItems)) {\n            this.updateElements();\n        }\n    },\n\n    _handleActionTriggerSubmit: function(ev) {\n        ev.preventDefault();\n\n        var $form = $(ev.currentTarget);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($form.data('action'), Garnish.getPostData($form));\n    },\n\n    _handleMenuActionTriggerSubmit: function(ev) {\n        var $option = $(ev.option);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($option.data('action'));\n    },\n\n    _handleStatusChange: function(ev) {\n        this.statusMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$statusMenuBtn.html($option.html());\n\n        this.trashed = false;\n        this.drafts = false;\n        this.status = null;\n\n        if (Garnish.hasAttr($option, 'data-trashed')) {\n            this.trashed = true;\n        } else if (Garnish.hasAttr($option, 'data-drafts')) {\n            this.drafts = true;\n        } else {\n            this.status = $option.data('status');\n        }\n\n        this._updateStructureSortOption();\n        this.updateElements();\n    },\n\n    _handleSiteChange: function(ev) {\n        this.siteMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$siteMenuBtn.html($option.html());\n        this._setSite($option.data('site-id'));\n        this.onSelectSite();\n    },\n\n    _setSite: function(siteId) {\n        let firstSite = this.siteId === null;\n        this.siteId = siteId;\n        this.$visibleSources = $();\n\n        // Hide any sources that aren't available for this site\n        var $firstVisibleSource;\n        var $source;\n        // Select a new source automatically if a site is already selected, but we don't have a selected source\n        // (or if the currently selected source ends up not supporting the new site)\n        var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n        for (var i = 0; i < this.$sources.length; i++) {\n            $source = this.$sources.eq(i);\n            if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                $source.parent().removeClass('hidden');\n                this.$visibleSources = this.$visibleSources.add($source);\n                if (!$firstVisibleSource) {\n                    $firstVisibleSource = $source;\n                }\n            } else {\n                $source.parent().addClass('hidden');\n\n                // Is this the currently selected source?\n                if (this.$source && this.$source.get(0) == $source.get(0)) {\n                    selectNewSource = true;\n                }\n            }\n        }\n\n        if (this.initialized && selectNewSource) {\n            this.selectSource($firstVisibleSource);\n        }\n\n        // Hide any empty-nester headings\n        var $headings = this.getSourceContainer().children('.heading');\n        var $heading;\n\n        for (i = 0; i < $headings.length; i++) {\n            $heading = $headings.eq(i);\n            if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                $heading.removeClass('hidden');\n            } else {\n                $heading.addClass('hidden');\n            }\n        }\n\n        if (this.initialized) {\n            if (this.settings.context === 'index') {\n                // Remember this site for later\n                Craft.cp.setSiteId(siteId);\n            }\n\n            // Update the elements\n            this.updateElements();\n        }\n    },\n\n    _handleSortChange: function(ev) {\n        var $option = $(ev.selectedOption);\n\n        if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n            return;\n        }\n\n        // Is this an attribute or a direction?\n        if ($option.parent().parent().is(this.$sortAttributesList)) {\n            this.setSortAttribute($option.data('attr'));\n        } else {\n            this.setSortDirection($option.data('dir'));\n        }\n\n        this.storeSortAttributeAndDirection();\n        this.updateElements();\n    },\n\n    _handleSelectionChange: function() {\n        this.updateActionTriggers();\n        this.onSelectionChange();\n    },\n\n    _handleSourceDblClick: function(ev) {\n        this._toggleSource($(ev.currentTarget));\n        ev.stopPropagation();\n    },\n\n    _handleSourceToggleClick: function(ev) {\n        this._toggleSource($(ev.currentTarget).prev('a'));\n        ev.stopPropagation();\n    },\n\n    _updateStructureSortOption: function() {\n        var $option = this.getSortAttributeOption('structure');\n\n        if (!$option.length) {\n            return;\n        }\n\n        if (this.trashed || this.drafts || this.searching) {\n            $option.addClass('disabled');\n            if (this.getSelectedSortAttribute() === 'structure') {\n                // Temporarily set the sort to the first option\n                var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                this.setSortAttribute($firstOption.data('attr'));\n                this.setSortDirection('asc');\n            }\n        } else {\n            $option.removeClass('disabled');\n            this.setStoredSortOptionsForSource();\n        }\n    },\n\n    // Source managemnet\n    // -------------------------------------------------------------------------\n\n    _getSourcesInList: function($list) {\n        return $list.children('li').children('a');\n    },\n\n    _getChildSources: function($source) {\n        var $list = $source.siblings('ul');\n        return this._getSourcesInList($list);\n    },\n\n    _getSourceToggle: function($source) {\n        return $source.siblings('.toggle');\n    },\n\n    _initSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.initSource($($sources[i]));\n        }\n    },\n\n    _deinitSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.deinitSource($($sources[i]));\n        }\n    },\n\n    _toggleSource: function($source) {\n        if ($source.parent('li').hasClass('expanded')) {\n            this._collapseSource($source);\n        } else {\n            this._expandSource($source);\n        }\n    },\n\n    _expandSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'true',\n            'aria-label': Craft.t('app', 'Hide nested sources'),\n        });\n        $source.parent('li').addClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._initSources($childSources);\n\n        var key = $source.data('key');\n        if (this.instanceState.expandedSources.indexOf(key) === -1) {\n            this.instanceState.expandedSources.push(key);\n            this.storeInstanceState();\n        }\n    },\n\n    _collapseSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'false',\n            'aria-label': Craft.t('app', 'Show nested sources'),\n        });\n        $source.parent('li').removeClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._deinitSources($childSources);\n\n        var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n        if (i !== -1) {\n            this.instanceState.expandedSources.splice(i, 1);\n            this.storeInstanceState();\n        }\n    },\n\n    // View\n    // -------------------------------------------------------------------------\n\n    _isViewPaginated: function() {\n        return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n    },\n\n    _updateView: function(params, response) {\n        // Cleanup\n        // -------------------------------------------------------------\n\n        // Get rid of the old action triggers regardless of whether the new batch has actions or not\n        if (this.actions) {\n            this.hideActionTriggers();\n            this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n        }\n\n        // Update the count text\n        // -------------------------------------------------------------\n\n        if (this.$countContainer.length) {\n            this.$countSpinner.removeClass('hidden');\n            this.$countContainer.html('');\n\n            this._countResults()\n                .then((total) => {\n                    this.$countSpinner.addClass('hidden');\n\n                    let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                    let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                    if (!this._isViewPaginated()) {\n                        let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n                        this.$countContainer.text(countLabel);\n                    } else {\n                        let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                        let last = Math.min(first + (this.settings.batchSize - 1), total);\n                        let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            first: first,\n                            last: last,\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n\n                        let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                        let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                        let $prevBtn = $('<div/>', {\n                            'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                            title: Craft.t('app', 'Previous Page')\n                        }).appendTo($paginationContainer);\n                        let $nextBtn = $('<div/>', {\n                            'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                            title: Craft.t('app', 'Next Page')\n                        }).appendTo($paginationContainer);\n\n                        $('<div/>', {\n                            'class': 'page-info',\n                            text: countLabel\n                        }).appendTo($paginationContainer);\n\n                        if (this.page > 1) {\n                            this.addListener($prevBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page - 1);\n                                this.updateElements(true);\n                            });\n                        }\n\n                        if (this.page < totalPages) {\n                            this.addListener($nextBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page + 1);\n                                this.updateElements(true);\n                            });\n                        }\n                    }\n                })\n                .catch(() => {\n                    this.$countSpinner.addClass('hidden');\n                });\n        }\n\n        // Update the view with the new container + elements HTML\n        // -------------------------------------------------------------\n\n        this.$elements.html(response.html);\n        Craft.appendHeadHtml(response.headHtml);\n        Craft.appendFootHtml(response.footHtml);\n\n        // Batch actions setup\n        // -------------------------------------------------------------\n\n        this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n        if (response.actions && response.actions.length) {\n            if (this.$selectAllContainer.length) {\n                this.actions = response.actions;\n                this.actionsHeadHtml = response.actionsHeadHtml;\n                this.actionsFootHtml = response.actionsFootHtml;\n\n                // Create the select all checkbox\n                this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                this.$selectAllContainer.attr({\n                    'role': 'checkbox',\n                    'tabindex': '0',\n                    'aria-checked': 'false',\n                    'aria-label': Craft.t('app', 'Select all'),\n                });\n\n                this.addListener(this.$selectAllContainer, 'click', function() {\n                    if (this.view.getSelectedElements().length === 0) {\n                        this.view.selectAllElements();\n                    } else {\n                        this.view.deselectAllElements();\n                    }\n                });\n\n                this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                    if (ev.keyCode === Garnish.SPACE_KEY) {\n                        ev.preventDefault();\n\n                        $(ev.currentTarget).trigger('click');\n                    }\n                });\n            }\n        } else {\n            if (!this.$selectAllContainer.siblings().length) {\n                this.$selectAllContainer.parent('.header').remove();\n            }\n            this.$selectAllContainer.remove();\n        }\n\n        // Exporters setup\n        // -------------------------------------------------------------\n\n        this.exporters = response.exporters;\n        this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n        if (this.exporters && this.exporters.length) {\n            this.$exportBtn.removeClass('hidden');\n        } else {\n            this.$exportBtn.addClass('hidden');\n        }\n\n        // Create the view\n        // -------------------------------------------------------------\n\n        // Should we make the view selectable?\n        var selectable = (this.actions || this.settings.selectable);\n\n        this.view = this.createView(this.getSelectedViewMode(), {\n            context: this.settings.context,\n            batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n            params: params,\n            selectable: selectable,\n            multiSelect: (this.actions || this.settings.multiSelect),\n            checkboxMode: !!this.actions,\n            onSelectionChange: this._handleSelectionChange.bind(this)\n        });\n\n        // Auto-select elements\n        // -------------------------------------------------------------\n\n        if (this._autoSelectElements) {\n            if (selectable) {\n                for (var i = 0; i < this._autoSelectElements.length; i++) {\n                    this.view.selectElementById(this._autoSelectElements[i]);\n                }\n            }\n\n            this._autoSelectElements = null;\n        }\n\n        // Trigger the event\n        // -------------------------------------------------------------\n\n        this.onUpdateElements();\n    },\n\n    _countResults: function() {\n        return new Promise((resolve, reject) => {\n            if (this.totalResults !== null) {\n                resolve(this.totalResults);\n            } else {\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                // Make sure we've got an active result set ID\n                if (this.resultSet === null) {\n                    this.resultSet = Math.floor(Math.random() * 100000000);\n                }\n                params.resultSet = this.resultSet;\n\n                Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    if (response.data.resultSet == this.resultSet) {\n                        this.totalResults = response.data.count;\n                        resolve(response.data.count);\n                    } else {\n                        reject();\n                    }\n                }).catch(reject);\n            }\n        });\n    },\n\n    _createTriggers: function() {\n        var triggers = [],\n            safeMenuActions = [],\n            destructiveMenuActions = [];\n\n        var i;\n\n        for (i = 0; i < this.actions.length; i++) {\n            var action = this.actions[i];\n\n            if (action.trigger) {\n                var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                    .data('action', action)\n                    .append(action.trigger);\n\n                this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                triggers.push($form);\n            } else {\n                if (!action.destructive) {\n                    safeMenuActions.push(action);\n                } else {\n                    destructiveMenuActions.push(action);\n                }\n            }\n        }\n\n        var $btn;\n\n        if (safeMenuActions.length || destructiveMenuActions.length) {\n            var $menuTrigger = $('<form/>');\n\n            $btn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn',\n                'data-icon': 'settings',\n                title: Craft.t('app', 'Actions'),\n            }).appendTo($menuTrigger);\n\n            var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n            if ($safeList) {\n                $safeList.appendTo($menu);\n            }\n\n            if ($safeList && $destructiveList) {\n                $('<hr/>').appendTo($menu);\n            }\n\n            if ($destructiveList) {\n                $destructiveList.appendTo($menu);\n            }\n\n            triggers.push($menuTrigger);\n        }\n\n        this._$triggers = $();\n\n        for (i = 0; i < triggers.length; i++) {\n            var $div = $('<div/>').append(triggers[i]);\n            this._$triggers = this._$triggers.add($div);\n        }\n\n        this._$triggers.appendTo(this.$toolbar);\n        Craft.appendHeadHtml(this.actionsHeadHtml);\n        Craft.appendFootHtml(this.actionsFootHtml);\n\n        Craft.initUiElements(this._$triggers);\n\n        if ($btn) {\n            $btn.data('menubtn').on('optionSelect', this._handleMenuActionTriggerSubmit.bind(this));\n        }\n    },\n\n    _showExportHud: function() {\n        this.$exportBtn.addClass('active');\n\n        var $form = $('<form/>', {\n            'class': 'export-form'\n        });\n\n        var typeOptions = [];\n        for (var i = 0; i < this.exporters.length; i++) {\n            typeOptions.push({label: this.exporters[i].name, value: this.exporters[i].type});\n        }\n        var $typeField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Export Type'),\n            options: typeOptions,\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        var $formatField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Format'),\n            options: [\n                {label: 'CSV', value: 'csv'}, {label: 'JSON', value: 'json'}, {label: 'XML', value: 'xml'},\n            ],\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        let $typeSelect = $typeField.find('select');\n        this.addListener($typeSelect, 'change', () => {\n            let type = $typeSelect.val();\n            if (this.exportersByType[type].formattable) {\n                $formatField.removeClass('hidden');\n            } else {\n                $formatField.addClass('hidden');\n            }\n        });\n        $typeSelect.trigger('change');\n\n        // Only show the Limit field if there aren't any selected elements\n        var selectedElementIds = this.view.getSelectedElementIds();\n\n        if (!selectedElementIds.length) {\n            var $limitField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Limit'),\n                placeholder: Craft.t('app', 'No limit'),\n                type: 'number',\n                min: 1\n            }).appendTo($form);\n        }\n\n        $('<button/>', {\n            type: 'submit',\n            'class': 'btn submit fullwidth',\n            text: Craft.t('app', 'Export')\n        }).appendTo($form)\n\n        var $spinner = $('<div/>', {\n            'class': 'spinner hidden'\n        }).appendTo($form);\n\n        var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n        hud.on('hide', () => {\n            this.$exportBtn.removeClass('active');\n        });\n\n        var submitting = false;\n\n        this.addListener($form, 'submit', function(ev) {\n            ev.preventDefault();\n            if (submitting) {\n                return;\n            }\n\n            submitting = true;\n            $spinner.removeClass('hidden');\n\n            var params = this.getViewParams();\n            delete params.criteria.offset;\n            delete params.criteria.limit;\n\n            params.type = $typeField.find('select').val();\n            params.format = $formatField.find('select').val();\n\n            if (selectedElementIds.length) {\n                params.criteria.id = selectedElementIds;\n            } else {\n                var limit = parseInt($limitField.find('input').val());\n                if (limit && !isNaN(limit)) {\n                    params.criteria.limit = limit;\n                }\n            }\n\n            if (Craft.csrfTokenValue) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                .then(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                })\n                .catch(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                });\n        });\n    },\n\n    _createMenuTriggerList: function(actions, destructive) {\n        if (actions && actions.length) {\n            var $ul = $('<ul/>');\n\n            for (var i = 0; i < actions.length; i++) {\n                $('<li/>').append($('<a/>', {\n                    id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                    'class': (destructive ? 'error' : null),\n                    data: {\n                        action: actions[i],\n                    },\n                    text: actions[i].name\n                })).appendTo($ul);\n            }\n\n            return $ul;\n        }\n    }\n}, {\n    defaults: {\n        context: 'index',\n        modal: null,\n        storageKey: null,\n        criteria: null,\n        batchSize: 100,\n        disabledElementIds: [],\n        selectable: false,\n        multiSelect: false,\n        buttonContainer: null,\n        hideSidebar: false,\n        toolbarSelector: '.toolbar:first',\n        refreshSourcesAction: 'element-indexes/get-source-tree-html',\n        updateElementsAction: 'element-indexes/get-elements',\n        countElementsAction: 'element-indexes/count-elements',\n        submitActionsAction: 'element-indexes/perform-action',\n        defaultSiteId: null,\n        defaultSource: null,\n        canHaveDrafts: false,\n\n        onAfterInit: $.noop,\n        onSelectSource: $.noop,\n        onSelectSite: $.noop,\n        onUpdateElements: $.noop,\n        onSelectionChange: $.noop,\n        onEnableElements: $.noop,\n        onDisableElements: $.noop,\n        onAfterAction: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend({\n    $container: null,\n    $loadingMoreSpinner: null,\n    $elementContainer: null,\n    $scroller: null,\n\n    elementIndex: null,\n    thumbLoader: null,\n    elementSelect: null,\n\n    loadingMore: false,\n\n    _totalVisible: null,\n    _morePending: null,\n    _handleEnableElements: null,\n    _handleDisableElements: null,\n\n    init: function(elementIndex, container, settings) {\n        this.elementIndex = elementIndex;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n        // Create a \"loading-more\" spinner\n        this.$loadingMoreSpinner = $(\n            '<div class=\"centeralign hidden\">' +\n            '<div class=\"spinner loadingmore\"></div>' +\n            '</div>'\n        ).insertAfter(this.$container);\n\n        // Get the actual elements container and its child elements\n        this.$elementContainer = this.getElementContainer();\n        var $elements = this.$elementContainer.children();\n\n        this.setTotalVisible($elements.length);\n        this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n        // Instantiate the thumb loader\n        this.thumbLoader = new Craft.ElementThumbLoader();\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select(\n                this.$elementContainer,\n                $elements.filter(':not(.disabled)'),\n                {\n                    multi: this.settings.multiSelect,\n                    vertical: this.isVerticalList(),\n                    handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                    filter: ':not(a):not(.toggle)',\n                    checkboxMode: this.settings.checkboxMode,\n                    onSelectionChange: this.onSelectionChange.bind(this)\n                });\n\n            this._handleEnableElements = ev => {\n                this.elementSelect.addItems(ev.elements);\n            };\n\n            this._handleDisableElements = ev => {\n                this.elementSelect.removeItems(ev.elements);\n            };\n\n            this.elementIndex.on('enableElements', this._handleEnableElements);\n            this.elementIndex.on('disableElements', this._handleDisableElements);\n        }\n\n        // Enable inline element editing if this is an index page\n        if (this.settings.context === 'index') {\n            this._handleElementEditing = ev => {\n                var $target = $(ev.target);\n\n                if ($target.prop('nodeName') === 'A') {\n                    // Let the link do its thing\n                    return;\n                }\n\n                var $element;\n\n                if ($target.hasClass('element')) {\n                    $element = $target;\n                } else {\n                    $element = $target.closest('.element');\n\n                    if (!$element.length) {\n                        return;\n                    }\n                }\n\n                if (Garnish.hasAttr($element, 'data-editable')) {\n                    this.createElementEditor($element);\n                }\n            };\n\n            if (!this.elementIndex.trashed) {\n                this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                if ($.isTouchCapable()) {\n                    this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                }\n            }\n        }\n\n        // Give sub-classes a chance to do post-initialization stuff here\n        this.afterInit();\n\n        // Set up lazy-loading\n        if (this.settings.batchSize) {\n            if (this.settings.context === 'index') {\n                this.$scroller = Garnish.$scrollContainer;\n            } else {\n                this.$scroller = this.elementIndex.$main;\n            }\n\n            this.$scroller.scrollTop(0);\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }\n    },\n\n    getElementContainer: function() {\n        throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n    },\n\n    afterInit: function() {\n    },\n\n    getAllElements: function() {\n        return this.$elementContainer.children();\n    },\n\n    getEnabledElements: function() {\n        return this.$elementContainer.children(':not(.disabled)');\n    },\n\n    getElementById: function(id) {\n        var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n        if ($element.length) {\n            return $element;\n        } else {\n            return null;\n        }\n    },\n\n    getSelectedElements: function() {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        return this.elementSelect.$selectedItems;\n    },\n\n    getSelectedElementIds: function() {\n        let $selectedElements;\n        try {\n            $selectedElements = this.getSelectedElements();\n        } catch (e) {\n        }\n\n        let ids = [];\n        if ($selectedElements) {\n            for (var i = 0; i < $selectedElements.length; i++) {\n                ids.push($selectedElements.eq(i).data('id'));\n            }\n        }\n        return ids;\n    },\n\n    selectElement: function($element) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        this.elementSelect.selectItem($element, true);\n        return true;\n    },\n\n    selectElementById: function(id) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        var $element = this.getElementById(id);\n\n        if ($element) {\n            this.elementSelect.selectItem($element, true);\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    selectAllElements: function() {\n        this.elementSelect.selectAll();\n    },\n\n    deselectAllElements: function() {\n        this.elementSelect.deselectAll();\n    },\n\n    isVerticalList: function() {\n        return false;\n    },\n\n    getTotalVisible: function() {\n        return this._totalVisible;\n    },\n\n    setTotalVisible: function(totalVisible) {\n        this._totalVisible = totalVisible;\n    },\n\n    getMorePending: function() {\n        return this._morePending;\n    },\n\n    setMorePending: function(morePending) {\n        this._morePending = morePending;\n    },\n\n    /**\n     * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n     */\n    maybeLoadMore: function() {\n        if (this.canLoadMore()) {\n            this.loadMore();\n        }\n    },\n\n    /**\n     * Returns whether the user has reached the bottom of the scroll area.\n     */\n    canLoadMore: function() {\n        if (!this.getMorePending() || !this.settings.batchSize) {\n            return false;\n        }\n\n        // Check if the user has reached the bottom of the scroll area\n        var containerHeight;\n\n        if (this.$scroller[0] === Garnish.$win[0]) {\n            var winHeight = Garnish.$win.innerHeight(),\n                winScrollTop = Garnish.$win.scrollTop(),\n                containerOffset = this.$container.offset().top;\n            containerHeight = this.$container.height();\n\n            return (winHeight + winScrollTop >= containerOffset + containerHeight);\n        } else {\n            var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                containerScrollTop = this.$scroller.scrollTop();\n            containerHeight = this.$scroller.outerHeight();\n\n            return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n        }\n    },\n\n    /**\n     * Loads the next batch of elements.\n     */\n    loadMore: function() {\n        if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n            return;\n        }\n\n        this.loadingMore = true;\n        this.$loadingMoreSpinner.removeClass('hidden');\n        this.removeListener(this.$scroller, 'scroll');\n\n        var data = this.getLoadMoreParams();\n\n        Craft.postActionRequest(this.settings.loadMoreElementsAction, data, (response, textStatus) => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                var $newElements = $(response.html);\n\n                this.appendElements($newElements);\n                Craft.appendHeadHtml(response.headHtml);\n                Craft.appendFootHtml(response.footHtml);\n\n                if (this.elementSelect) {\n                    this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                    this.elementIndex.updateActionTriggers();\n                }\n\n                this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n                this.setMorePending($newElements.length == this.settings.batchSize);\n\n                // Is there room to load more right now?\n                this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                this.maybeLoadMore();\n            }\n        });\n    },\n\n    getLoadMoreParams: function() {\n        // Use the same params that were passed when initializing this view\n        var params = $.extend(true, {}, this.settings.params);\n        params.criteria.offset = this.getTotalVisible();\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        $newElements.appendTo(this.$elementContainer);\n        this.thumbLoader.load($newElements);\n        this.onAppendElements($newElements);\n    },\n\n    onAppendElements: function($newElements) {\n        this.settings.onAppendElements($newElements);\n        this.trigger('appendElements', {\n            newElements: $newElements\n        });\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            elementIndex: this.elementIndex\n        });\n    },\n\n    disable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.disable();\n        }\n    },\n\n    enable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.enable();\n        }\n    },\n\n    destroy: function() {\n        // Remove the \"loading-more\" spinner, since we added that outside of the view container\n        this.$loadingMoreSpinner.remove();\n\n        // Kill the thumb loader\n        this.thumbLoader.destroy();\n        delete this.thumbLoader;\n\n        // Delete the element select\n        if (this.elementSelect) {\n            this.elementIndex.off('enableElements', this._handleEnableElements);\n            this.elementIndex.off('disableElements', this._handleDisableElements);\n\n            this.elementSelect.destroy();\n            delete this.elementSelect;\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        context: 'index',\n        batchSize: null,\n        params: null,\n        selectable: false,\n        multiSelect: false,\n        checkboxMode: false,\n        loadMoreElementsAction: 'element-indexes/get-more-elements',\n        onAppendElements: $.noop,\n        onSelectionChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend({\n    thumbLoader: null,\n    elementSelect: null,\n    elementSort: null,\n    modal: null,\n    elementEditor: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addElementBtn: null,\n    $addElementBtnContainer: null,\n\n    _initialized: false,\n\n    init: function(settings) {\n        // Normalize the settings and set them\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n        // Apply the storage key prefix\n        if (this.settings.modalStorageKey) {\n            this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n        }\n\n        // No reason for this to be sortable if we're only allowing 1 selection\n        if (this.settings.limit == 1) {\n            this.settings.sortable = false;\n        }\n\n        this.$container = this.getContainer();\n\n        // Store a reference to this class\n        this.$container.data('elementSelect', this);\n\n        this.$elementsContainer = this.getElementsContainer();\n\n        this.$addElementBtn = this.getAddElementsBtn();\n        if (this.$addElementBtn) {\n            this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n            if (!this.$addElementBtnContainer.length) {\n                this.$addElementBtnContainer = null;\n            }\n        }\n\n        this.thumbLoader = new Craft.ElementThumbLoader();\n\n        this.initElementSelect();\n        this.initElementSort();\n        this.resetElements();\n\n        if (this.$addElementBtn) {\n            this.addListener(this.$addElementBtn, 'activate', 'showModal');\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            this._initialized = true;\n        });\n    },\n\n    get totalSelected() {\n        return this.$elements.length;\n    },\n\n    getContainer: function() {\n        return $('#' + this.settings.id);\n    },\n\n    getElementsContainer: function() {\n        return this.$container.children('.elements');\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.children();\n    },\n\n    getAddElementsBtn: function() {\n        return this.$container.find('.btn.add:first');\n    },\n\n    initElementSelect: function() {\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select({\n                multi: this.settings.sortable,\n                filter: ':not(.delete)'\n            });\n        }\n    },\n\n    initElementSort: function() {\n        if (this.settings.sortable) {\n            this.elementSort = new Garnish.DragSort({\n                container: this.$elementsContainer,\n                filter: (this.settings.selectable ? () => {\n                    // Only return all the selected items if the target item is selected\n                    if (this.elementSort.$targetItem.hasClass('sel')) {\n                        return this.elementSelect.getSelectedItems();\n                    } else {\n                        return this.elementSort.$targetItem;\n                    }\n                } : null),\n                ignoreHandleSelector: '.delete',\n                axis: this.getElementSortAxis(),\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                onSortChange: (this.settings.selectable ? () => {\n                    this.elementSelect.resetItemOrder();\n                } : null)\n            });\n        }\n    },\n\n    getElementSortAxis: function() {\n        return (this.settings.viewMode === 'list' ? 'y' : null);\n    },\n\n    canAddMoreElements: function() {\n        return (!this.settings.limit || this.$elements.length < this.settings.limit);\n    },\n\n    updateAddElementsBtn: function() {\n        if (this.canAddMoreElements()) {\n            this.enableAddElementsBtn();\n        } else {\n            this.disableAddElementsBtn();\n        }\n    },\n\n    disableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.addClass('hidden');\n        }\n    },\n\n    enableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.removeClass('hidden');\n        }\n    },\n\n    resetElements: function() {\n        if (this.$elements !== null) {\n            this.removeElements(this.$elements);\n        } else {\n            this.$elements = $();\n        }\n\n        this.addElements(this.getElements());\n    },\n\n    addElements: function($elements) {\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect.addItems($elements);\n        }\n\n        if (this.settings.sortable) {\n            this.elementSort.addItems($elements);\n        }\n\n        if (this.settings.editable) {\n            this._handleShowElementEditor = ev => {\n                var $element = $(ev.currentTarget);\n                if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                    this.elementEditor = this.createElementEditor($element);\n                }\n            };\n\n            this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n            if ($.isTouchCapable()) {\n                this.addListener($elements, 'taphold', this._handleShowElementEditor);\n            }\n        }\n\n        $elements.find('.delete').on('click dblclick', ev => {\n            this.removeElement($(ev.currentTarget).closest('.element'));\n            // Prevent this from acting as one of a double-click\n            ev.stopPropagation();\n        });\n\n        this.$elements = this.$elements.add($elements);\n        this.updateAddElementsBtn();\n    },\n\n    createElementEditor: function($element, settings) {\n        if (!settings) {\n            settings = {};\n        }\n        settings.prevalidate = this.settings.prevalidate;\n        return Craft.createElementEditor(this.settings.elementType, $element, settings);\n    },\n\n    removeElements: function($elements) {\n        if (this.settings.selectable) {\n            this.elementSelect.removeItems($elements);\n        }\n\n        if (this.modal) {\n            var ids = [];\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $elements.eq(i).data('id');\n\n                if (id) {\n                    ids.push(id);\n                }\n            }\n\n            if (ids.length) {\n                this.modal.elementIndex.enableElementsById(ids);\n            }\n        }\n\n        // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n        $elements.children('input').prop('disabled', true);\n\n        this.$elements = this.$elements.not($elements);\n        this.updateAddElementsBtn();\n\n        this.onRemoveElements();\n    },\n\n    removeElement: function($element) {\n        this.removeElements($element);\n        this.animateElementAway($element, () => {\n            $element.remove();\n        });\n    },\n\n    animateElementAway: function($element, callback) {\n        $element.css('z-index', 0);\n\n        var animateCss = {\n            opacity: -1\n        };\n        animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n        if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n            animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n        }\n\n        // Pause the draft editor\n        if (window.draftEditor) {\n            window.draftEditor.pause();\n        }\n\n        $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n            callback();\n\n            // Resume the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.resume();\n            }\n        });\n    },\n\n    showModal: function() {\n        // Make sure we haven't reached the limit\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        if (!this.modal) {\n            this.modal = this.createModal();\n        } else {\n            this.modal.show();\n        }\n    },\n\n    createModal: function() {\n        return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n    },\n\n    getModalSettings: function() {\n        return $.extend({\n            closeOtherModals: false,\n            storageKey: this.modalStorageKey,\n            sources: this.settings.sources,\n            criteria: this.settings.criteria,\n            multiSelect: (this.settings.limit != 1),\n            showSiteMenu: this.settings.showSiteMenu,\n            disabledElementIds: this.getDisabledElementIds(),\n            onSelect: this.onModalSelect.bind(this)\n        }, this.settings.modalSettings);\n    },\n\n    getSelectedElementIds: function() {\n        var ids = [];\n\n        for (var i = 0; i < this.$elements.length; i++) {\n            ids.push(this.$elements.eq(i).data('id'));\n        }\n\n        return ids;\n    },\n\n    getDisabledElementIds: function() {\n        var ids = this.getSelectedElementIds();\n\n        if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n            ids.push(this.settings.sourceElementId);\n        }\n\n        if (this.settings.disabledElementIds) {\n            ids.push(...this.settings.disabledElementIds);\n        }\n\n        return ids;\n    },\n\n    onModalSelect: function(elements) {\n        if (this.settings.limit) {\n            // Cut off any excess elements\n            var slotsLeft = this.settings.limit - this.$elements.length;\n\n            if (elements.length > slotsLeft) {\n                elements = elements.slice(0, slotsLeft);\n            }\n        }\n\n        this.selectElements(elements);\n        this.updateDisabledElementsInModal();\n    },\n\n    selectElements: function(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            let elementInfo = elements[i],\n                $element = this.createNewElement(elementInfo);\n\n            this.appendElement($element);\n            this.addElements($element);\n            this.animateElementIntoPlace(elementInfo.$element, $element);\n\n            // Override the element reference with the new one\n            elementInfo.$element = $element;\n        }\n\n        this.onSelectElements(elements);\n    },\n\n    createNewElement: function(elementInfo) {\n        var $element = elementInfo.$element.clone();\n\n        // Make a couple tweaks\n        Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n        $element.addClass('removable');\n        $element.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + elementInfo.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        return $element;\n    },\n\n    appendElement: function($element) {\n        $element.appendTo(this.$elementsContainer);\n    },\n\n    animateElementIntoPlace: function($modalElement, $inputElement) {\n        var origOffset = $modalElement.offset(),\n            destOffset = $inputElement.offset(),\n            $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n        $inputElement.css('visibility', 'hidden');\n\n        $helper.css({\n            position: 'absolute',\n            zIndex: 10000,\n            top: origOffset.top,\n            left: origOffset.left\n        });\n\n        var animateCss = {\n            top: destOffset.top,\n            left: destOffset.left\n        };\n\n        $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n            $helper.remove();\n            $inputElement.css('visibility', 'visible');\n        });\n    },\n\n    updateDisabledElementsInModal: function() {\n        if (this.modal.elementIndex) {\n            this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n        }\n    },\n\n    getElementById: function(id) {\n        for (var i = 0; i < this.$elements.length; i++) {\n            var $element = this.$elements.eq(i);\n\n            if ($element.data('id') == id) {\n                return $element;\n            }\n        }\n    },\n\n    onSelectElements: function(elements) {\n        this.trigger('selectElements', {elements});\n        this.settings.onSelectElements(elements);\n\n        if (window.draftEditor) {\n            window.draftEditor.checkForm();\n        }\n    },\n\n    onRemoveElements: function() {\n        this.trigger('removeElements');\n        this.settings.onRemoveElements();\n    }\n}, {\n    ADD_FX_DURATION: 200,\n    REMOVE_FX_DURATION: 200,\n\n    defaults: {\n        id: null,\n        name: null,\n        fieldId: null,\n        elementType: null,\n        sources: null,\n        criteria: {},\n        allowSelfRelations: false,\n        sourceElementId: null,\n        disabledElementIds: null,\n        viewMode: 'list',\n        limit: null,\n        showSiteMenu: false,\n        modalStorageKey: null,\n        modalSettings: {},\n        onSelectElements: $.noop,\n        onRemoveElements: $.noop,\n        sortable: true,\n        selectable: true,\n        editable: true,\n        prevalidate: false,\n        editorSettings: {}\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend({\n    elementType: null,\n    elementIndex: null,\n\n    $body: null,\n    $selectBtn: null,\n    $sidebar: null,\n    $sources: null,\n    $sourceToggles: null,\n    $main: null,\n    $search: null,\n    $elements: null,\n    $tbody: null,\n    $primaryButtons: null,\n    $secondaryButtons: null,\n    $cancelBtn: null,\n    $footerSpinner: null,\n\n    init: function(elementType, settings) {\n        this.elementType = elementType;\n        this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n        // Build the modal\n        var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n            $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n            $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n        this.base($container, this.settings);\n\n        this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n        this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$primaryButtons);\n        this.$selectBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn disabled submit',\n            text: Craft.t('app', 'Select'),\n        }).appendTo(this.$primaryButtons);\n\n        this.$body = $body;\n\n        this.addListener(this.$cancelBtn, 'activate', 'cancel');\n        this.addListener(this.$selectBtn, 'activate', 'selectElements');\n    },\n\n    onFadeIn: function() {\n        if (!this.elementIndex) {\n            this._createElementIndex();\n        } else {\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.elementIndex.$search.trigger('focus');\n            }\n        }\n\n        this.base();\n    },\n\n    onSelectionChange: function() {\n        this.updateSelectBtnState();\n    },\n\n    updateSelectBtnState: function() {\n        if (this.$selectBtn) {\n            if (this.elementIndex.getSelectedElements().length) {\n                this.enableSelectBtn();\n            } else {\n                this.disableSelectBtn();\n            }\n        }\n    },\n\n    enableSelectBtn: function() {\n        this.$selectBtn.removeClass('disabled');\n    },\n\n    disableSelectBtn: function() {\n        this.$selectBtn.addClass('disabled');\n    },\n\n    enableCancelBtn: function() {\n        this.$cancelBtn.removeClass('disabled');\n    },\n\n    disableCancelBtn: function() {\n        this.$cancelBtn.addClass('disabled');\n    },\n\n    showFooterSpinner: function() {\n        this.$footerSpinner.removeClass('hidden');\n    },\n\n    hideFooterSpinner: function() {\n        this.$footerSpinner.addClass('hidden');\n    },\n\n    cancel: function() {\n        if (!this.$cancelBtn.hasClass('disabled')) {\n            this.hide();\n        }\n    },\n\n    selectElements: function() {\n        if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n            // TODO: This code shouldn't know about views' elementSelect objects\n            this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                elementInfo = this.getElementInfo($selectedElements);\n\n            this.onSelect(elementInfo);\n\n            if (this.settings.disableElementsOnSelect) {\n                this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n            }\n\n            if (this.settings.hideOnSelect) {\n                this.hide();\n            }\n        }\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $element = $($selectedElements[i]);\n            var elementInfo = Craft.getElementInfo($element);\n\n            info.push(elementInfo);\n        }\n\n        return info;\n    },\n\n    show: function() {\n        this.updateSelectBtnState();\n        this.base();\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo);\n    },\n\n    disable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.enable();\n        }\n\n        this.base();\n    },\n\n    _createElementIndex: function() {\n        // Get the modal body HTML based on the settings\n        var data = {\n            context: 'modal',\n            elementType: this.elementType,\n            sources: this.settings.sources\n        };\n\n        if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n            data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n        }\n\n        Craft.postActionRequest('elements/get-modal-body', data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.$body.html(response.html);\n\n                if (this.$body.has('.sidebar:not(.hidden)').length) {\n                    this.$body.addClass('has-sidebar');\n                }\n\n                // Initialize the element index\n                this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                    context: 'modal',\n                    modal: this,\n                    storageKey: this.settings.storageKey,\n                    criteria: this.settings.criteria,\n                    disabledElementIds: this.settings.disabledElementIds,\n                    selectable: true,\n                    multiSelect: this.settings.multiSelect,\n                    buttonContainer: this.$secondaryButtons,\n                    onSelectionChange: this.onSelectionChange.bind(this),\n                    hideSidebar: this.settings.hideSidebar,\n                    defaultSiteId: this.settings.defaultSiteId,\n                    defaultSource: this.settings.defaultSource\n                });\n\n                // Double-clicking or double-tapping should select the elements\n                this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                    // Make sure the touch targets are the same\n                    // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                    if (touchData.firstTap.target === touchData.secondTap.target) {\n                        this.selectElements();\n                    }\n                });\n            }\n        });\n    }\n}, {\n    defaults: {\n        resizable: true,\n        storageKey: null,\n        sources: null,\n        criteria: null,\n        multiSelect: false,\n        showSiteMenu: null,\n        disabledElementIds: [],\n        disableElementsOnSelect: false,\n        hideOnSelect: true,\n        onCancel: $.noop,\n        onSelect: $.noop,\n        hideSidebar: false,\n        defaultSiteId: null,\n        defaultSource: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend({\n    $source: null,\n    $target: null,\n    $form: null,\n    settings: null,\n\n    listening: null,\n    timeout: null,\n\n    init: function(source, target, settings) {\n        this.$source = $(source);\n        this.$target = $(target);\n        this.$form = this.$source.closest('form');\n\n        this.setSettings(settings);\n\n        this.startListening();\n    },\n\n    setNewSource: function(source) {\n        var listening = this.listening;\n        this.stopListening();\n\n        this.$source = $(source);\n\n        if (listening) {\n            this.startListening();\n        }\n    },\n\n    startListening: function() {\n        if (this.listening) {\n            return;\n        }\n\n        this.listening = true;\n\n        this.addListener(this.$source, 'input', 'onSourceTextChange');\n        this.addListener(this.$target, 'input', 'onTargetTextChange');\n        this.addListener(this.$form, 'submit', 'onFormSubmit');\n    },\n\n    stopListening: function() {\n        if (!this.listening) {\n            return;\n        }\n\n        this.listening = false;\n\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.removeAllListeners(this.$source);\n        this.removeAllListeners(this.$target);\n        this.removeAllListeners(this.$form);\n    },\n\n    onSourceTextChange: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout(this.updateTarget.bind(this), 250);\n    },\n\n    onTargetTextChange: function() {\n        if (this.$target.get(0) === document.activeElement) {\n            this.stopListening();\n        }\n    },\n\n    onFormSubmit: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.updateTarget();\n    },\n\n    updateTarget: function() {\n        if (!this.$target.is(':visible')) {\n            return;\n        }\n\n        var sourceVal = this.$source.val();\n\n        if (typeof sourceVal === 'undefined') {\n            // The source input may not exist anymore\n            return;\n        }\n\n        var targetVal = this.generateTargetValue(sourceVal);\n\n        this.$target.val(targetVal);\n\n        for (let i = 0; i < this.$target.length; i++) {\n            this.$target[i].dispatchEvent(new InputEvent('input', {\n                inputType: 'insertText',\n            }));\n            this.$target[i].dispatchEvent(new Event('input'));\n        }\n\n        // If the target already has focus, select its whole value to mimic\n        // the behavior if the value had already been generated and they just tabbed in\n        if (this.$target.is(':focus')) {\n            Craft.selectFullValue(this.$target);\n        }\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return sourceVal;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend({\n    settings: null,\n    totalItems: null,\n    sorter: null,\n\n    $noItems: null,\n    $table: null,\n    $tbody: null,\n    $deleteBtns: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.AdminTable.defaults);\n\n        if (!this.settings.allowDeleteAll) {\n            this.settings.minItems = 1;\n        }\n\n        this.$noItems = $(this.settings.noItemsSelector);\n        this.$table = $(this.settings.tableSelector);\n        this.$tbody = this.$table.children('tbody');\n        this.totalItems = this.$tbody.children().length;\n\n        if (this.settings.sortable) {\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                onSortChange: this.reorderItems.bind(this),\n            });\n        }\n\n        this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n        this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n        this.updateUI();\n    },\n\n    addRow: function(row) {\n        if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(row).appendTo(this.$tbody),\n            $deleteBtn = $row.find('.delete');\n\n        if (this.settings.sortable) {\n            this.sorter.addItems($row);\n        }\n\n        this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n        this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n        this.totalItems++;\n\n        this.updateUI();\n    },\n\n    reorderItems: function() {\n        if (!this.settings.sortable) {\n            return;\n        }\n\n        // Get the new field order\n        var ids = [];\n\n        for (var i = 0; i < this.sorter.$items.length; i++) {\n            var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n            ids.push(id);\n        }\n\n        // Send it to the server\n        var data = {\n            ids: JSON.stringify(ids)\n        };\n\n        Craft.postActionRequest(this.settings.reorderAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.onReorderItems(ids);\n                    Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                } else {\n                    Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                }\n            }\n        });\n    },\n\n    handleDeleteBtnClick: function(event) {\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(event.target).closest('tr');\n\n        if (this.confirmDeleteItem($row)) {\n            this.deleteItem($row);\n        }\n    },\n\n    confirmDeleteItem: function($row) {\n        var name = this.getItemName($row);\n        return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name}));\n    },\n\n    deleteItem: function($row) {\n        var data = {\n            id: this.getItemId($row)\n        };\n\n        Craft.postActionRequest(this.settings.deleteAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.handleDeleteItemResponse(response, $row);\n            }\n        });\n    },\n\n    handleDeleteItemResponse: function(response, $row) {\n        var id = this.getItemId($row),\n            name = this.getItemName($row);\n\n        if (response.success) {\n            if (this.sorter) {\n                this.sorter.removeItems($row);\n            }\n\n            $row.remove();\n            this.totalItems--;\n            this.updateUI();\n            this.onDeleteItem(id);\n\n            Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name}));\n        } else {\n            Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name}));\n        }\n    },\n\n    onReorderItems: function(ids) {\n        this.settings.onReorderItems(ids);\n    },\n\n    onDeleteItem: function(id) {\n        this.settings.onDeleteItem(id);\n    },\n\n    getItemId: function($row) {\n        return $row.attr(this.settings.idAttribute);\n    },\n\n    getItemName: function($row) {\n        return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n    },\n\n    updateUI: function() {\n        // Show the \"No Whatever Exists\" message if there aren't any\n        if (this.totalItems === 0) {\n            this.$table.hide();\n            this.$noItems.removeClass('hidden');\n        } else {\n            this.$table.show();\n            this.$noItems.addClass('hidden');\n        }\n\n        // Disable the sort buttons if there's only one row\n        if (this.settings.sortable) {\n            var $moveButtons = this.$table.find('.move');\n\n            if (this.totalItems === 1) {\n                $moveButtons.addClass('disabled');\n            } else {\n                $moveButtons.removeClass('disabled');\n            }\n        }\n\n        // Disable the delete buttons if we've reached the minimum items\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            this.$deleteBtns.addClass('disabled');\n        } else {\n            this.$deleteBtns.removeClass('disabled');\n        }\n\n        // Hide the New Whatever button if we've reached the maximum items\n        if (this.settings.newItemBtnSelector) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                $(this.settings.newItemBtnSelector).addClass('hidden');\n            } else {\n                $(this.settings.newItemBtnSelector).removeClass('hidden');\n            }\n        }\n    }\n}, {\n    defaults: {\n        tableSelector: null,\n        noItemsSelector: null,\n        newItemBtnSelector: null,\n        idAttribute: 'data-id',\n        nameAttribute: 'data-name',\n        sortable: false,\n        allowDeleteAll: true,\n        minItems: 0,\n        maxItems: null,\n        reorderAction: null,\n        deleteAction: null,\n        reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n        reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n        confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n        deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n        deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n        onReorderItems: $.noop,\n        onDeleteItem: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend({\n    reloadIndex: false,\n\n    updateForm: function(response, refreshInitialData) {\n        this.base(response, refreshInitialData);\n\n        if (this.$element.data('id')) {\n            var $imageEditorTrigger = this.$fieldsContainer.find('> .meta > .preview-thumb-container.editable');\n\n            if ($imageEditorTrigger.length) {\n                this.addListener($imageEditorTrigger, 'click', 'showImageEditor');\n            }\n        }\n    },\n\n    showImageEditor: function() {\n        new Craft.AssetImageEditor(this.$element.data('id'), {\n            onSave: () => {\n                this.reloadIndex = true;\n                this.reloadForm();\n            },\n        });\n    },\n\n    onHideHud: function() {\n        if (this.reloadIndex && this.settings.elementIndex) {\n            this.settings.elementIndex.updateElements();\n        } else if (this.reloadIndex && this.settings.input) {\n            this.settings.input.refreshThumbnail(this.$element.data('id'));\n        }\n\n        this.base();\n    }\n});\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend({\n    // jQuery objects\n    $body: null,\n    $footer: null,\n    $imageTools: null,\n    $buttons: null,\n    $cancelBtn: null,\n    $replaceBtn: null,\n    $saveBtn: null,\n    $editorContainer: null,\n    $straighten: null,\n    $croppingCanvas: null,\n    $spinnerCanvas: null,\n\n    // FabricJS objects\n    canvas: null,\n    image: null,\n    viewport: null,\n    focalPoint: null,\n    grid: null,\n    croppingCanvas: null,\n    clipper: null,\n    croppingRectangle: null,\n    cropperHandles: null,\n    cropperGrid: null,\n    croppingShade: null,\n    croppingAreaText: null,\n\n    // Image state attributes\n    imageStraightenAngle: 0,\n    viewportRotation: 0,\n    originalWidth: 0,\n    originalHeight: 0,\n    imageVerticeCoords: null,\n    zoomRatio: 1,\n\n    // Editor state attributes\n    animationInProgress: false,\n    currentView: '',\n    assetId: null,\n    cacheBust: null,\n    draggingCropper: false,\n    scalingCropper: false,\n    draggingFocal: false,\n    previousMouseX: 0,\n    previousMouseY: 0,\n    shiftKeyHeld: false,\n    editorHeight: 0,\n    editorWidth: 0,\n    cropperState: false,\n    scaleFactor: 1,\n    flipData: {},\n    focalPointState: false,\n    spinnerInterval: null,\n    maxImageSize: null,\n    lastLoadedDimensions: null,\n    imageIsLoading: false,\n    mouseMoveEvent: null,\n    croppingConstraint: false,\n    constraintOrientation: 'landscape',\n    showingCustomConstraint: false,\n\n    // Rendering proxy functions\n    renderImage: null,\n    renderCropper: null,\n\n    init: function(assetId, settings) {\n        this.cacheBust = Date.now();\n\n        this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n        if (this.settings.allowDegreeFractions === null) {\n            this.settings.allowDegreeFractions = Craft.isImagick;\n        }\n\n        this.assetId = assetId;\n        this.flipData = {x: 0, y: 0};\n\n        // Build the modal\n        this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n        this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n        this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n        this.base(this.$container, this.settings);\n\n        this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn cancel',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$buttons);\n        this.$replaceBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit save replace',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$buttons);\n\n        if (this.settings.allowSavingAsNew) {\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save copy',\n                text: Craft.t('app', 'Save as a new asset'),\n            }).appendTo(this.$buttons);\n            this.addListener(this.$saveBtn, 'activate', this.saveImage);\n        }\n\n        this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n        this.addListener(this.$cancelBtn, 'activate', this.hide);\n        this.removeListener(this.$shade, 'click');\n\n        this.maxImageSize = this.getMaxImageSize();\n\n        Craft.postActionRequest('assets/image-editor', {assetId}, this.loadEditor.bind(this));\n    },\n\n    /**\n     * Get the max image size that is viewable in the editor currently\n     */\n    getMaxImageSize: function() {\n        var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n        var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n        return Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n    },\n\n    /**\n     * Load the editor markup and start loading components and the image.\n     *\n     * @param data\n     */\n    loadEditor: function(data) {\n        if (!data.html) {\n            alert(Craft.t('app', 'Could not load the image editor.'));\n        }\n\n        this.$body.html(data.html);\n        this.$tabs = $('.tabs li', this.$body);\n        this.$viewsContainer = $('.views', this.$body);\n        this.$views = $('> div', this.$viewsContainer);\n        this.$imageTools = $('.image-container .image-tools', this.$body);\n        this.$editorContainer = $('.image-container .image', this.$body);\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this._showSpinner();\n\n        this.updateSizeAndPosition();\n\n        // Load the canvas on which we'll host our image and set up the proxy render function\n        this.canvas = new fabric.StaticCanvas('image-canvas');\n\n        // Set up the cropping canvas jquery element for tracking all the nice events\n        this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n        this.$croppingCanvas.width(this.editorWidth);\n        this.$croppingCanvas.height(this.editorHeight);\n\n        this.canvas.enableRetinaScaling = true;\n        this.renderImage = () => {\n            Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n        };\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        // Load image and set up the initial properties\n        fabric.Image.fromURL(imageUrl, imageObject => {\n            this.image = imageObject;\n            this.image.set({\n                originX: 'center',\n                originY: 'center',\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n            this.canvas.add(this.image);\n\n            this.originalHeight = this.image.getHeight();\n            this.originalWidth = this.image.getWidth();\n            this.zoomRatio = 1;\n\n            this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n            // Set up the image bounding box, viewport and position everything\n            this._setFittedImageVerticeCoordinates();\n            this._repositionEditorElements();\n\n            // Set up the focal point\n            var focalState = {\n                imageDimensions: this.getScaledImageDimensions(),\n                offsetX: 0,\n                offsetY: 0\n            };\n\n            var focal = false;\n            if (data.focalPoint) {\n                // Transform the focal point coordinates from relative to absolute\n                var focalData = data.focalPoint;\n\n                // Resolve for the current image dimensions.\n                var adjustedX = focalState.imageDimensions.width * focalData.x;\n                var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                focal = true;\n            }\n\n            this.storeFocalPointState(focalState);\n\n            if (focal) {\n                this._createFocalPoint();\n            }\n\n            this._createViewport();\n            this.storeCropperState();\n\n            // Add listeners to buttons\n            this._addControlListeners();\n\n            // Add mouse event listeners\n            this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n            this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n            this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n            this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n            this._hideSpinner();\n\n            // Render it, finally\n            this.renderImage();\n\n            // Make sure verything gets fired for the first tab\n            this.$tabs.first().trigger('click');\n        });\n    },\n\n    /**\n     * Reload the image to better fit the current available image editor viewport.\n     */\n    _reloadImage: function() {\n        if (this.imageIsLoading) {\n            return;\n        }\n\n        this.imageIsLoading = true;\n        this.maxImageSize = this.getMaxImageSize();\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        this.image.setSrc(imageUrl, imageObject => {\n            this.originalHeight = imageObject.getHeight();\n            this.originalWidth = imageObject.getWidth();\n            this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n            this.updateSizeAndPosition();\n            this.renderImage();\n            this.imageIsLoading = false;\n        });\n    },\n\n    /**\n     * Update the modal size and position on browser resize\n     */\n    updateSizeAndPosition: function() {\n        if (!this.$container) {\n            return;\n        }\n\n        // Fullscreen modal\n        var innerWidth = window.innerWidth;\n        var innerHeight = window.innerHeight;\n\n        this.$container.css({\n            'width': innerWidth,\n            'min-width': innerWidth,\n            'left': 0,\n\n            'height': innerHeight,\n            'min-height': innerHeight,\n            'top': 0\n        });\n\n        this.$body.css({\n            'height': innerHeight - 62\n        });\n\n        if (innerWidth < innerHeight) {\n            this.$container.addClass('vertical');\n        } else {\n            this.$container.removeClass('vertical');\n        }\n\n        if (this.$spinnerCanvas) {\n            this.$spinnerCanvas.css({\n                left: ((this.$spinnerCanvas.parent().width() / 2) - (this.$spinnerCanvas.width() / 2)) + 'px',\n                top: ((this.$spinnerCanvas.parent().height() / 2) - (this.$spinnerCanvas.height() / 2)) + 'px'\n            });\n        }\n\n        // If image is already loaded, make sure it looks pretty.\n        if (this.$editorContainer && this.image) {\n            this._repositionEditorElements();\n        }\n    },\n\n    /**\n     * Reposition the editor elements to accurately reflect the editor state with current dimensions\n     */\n    _repositionEditorElements: function() {\n        // Remember what the dimensions were before the resize took place\n        var previousEditorDimensions = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this.canvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        var currentScaledDimensions = this.getScaledImageDimensions();\n\n        // If we're cropping now, we have to reposition the cropper correctly in case\n        // the area for image changes, forcing the image size to change as well.\n        if (this.currentView === 'crop') {\n            this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n            var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            this._setFittedImageVerticeCoordinates();\n            this._repositionCropper(previouslyOccupiedArea);\n        } else {\n            // Otherwise just recalculate the image zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n        }\n\n        // Reposition the image relatively to the previous editor dimensions.\n        this._repositionImage(previousEditorDimensions);\n        this._repositionViewport();\n        this._repositionFocalPoint(previousEditorDimensions);\n        this._zoomImage();\n\n        this.renderImage();\n\n        if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n            this._reloadImage();\n        }\n    },\n\n    /**\n     * Reposition image based on how the editor dimensions have changed.\n     * This ensures keeping the image center offset, if there is any.\n     *\n     * @param previousEditorDimensions\n     */\n    _repositionImage: function(previousEditorDimensions) {\n        this.image.set({\n            left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n            top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n        });\n    },\n\n    /**\n     * Create the viewport for image editor.\n     */\n    _createViewport: function() {\n        this.viewport = new fabric.Rect({\n            width: this.image.width,\n            height: this.image.height,\n            fill: 'rgba(127,0,0,1)',\n            originX: 'center',\n            originY: 'center',\n            globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n            left: this.image.left,\n            top: this.image.top\n        });\n        this.canvas.add(this.viewport);\n        this.renderImage();\n    },\n\n    /**\n     * Create the focal point.\n     */\n    _createFocalPoint: function() {\n        var focalPointState = this.focalPointState;\n        var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n        var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n        var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n        // Adjust by image margins\n        focalX += this.image.left;\n        focalY += this.image.top;\n\n        var deltaX = 0;\n        var deltaY = 0;\n\n        // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n        if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n            if (this.currentView !== 'crop') {\n                deltaX = this.viewport.left - this.image.left;\n                deltaY = this.viewport.top - this.image.top;\n            } else {\n                // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                deltaX = this.clipper.left - this.image.left;\n                deltaY = this.clipper.top - this.image.top;\n            }\n\n            // Bump focal to middle of viewport\n            focalX += deltaX;\n            focalY += deltaY;\n\n            // Reflect changes in saved state\n            focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n        }\n\n        this.focalPoint = new fabric.Group([\n            new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n            new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n        ], {\n            originX: 'center',\n            originY: 'center',\n            left: focalX,\n            top: focalY\n        });\n\n        this.storeFocalPointState(focalPointState);\n        this.canvas.add(this.focalPoint);\n    },\n\n    /**\n     * Toggle focal point\n     */\n    toggleFocalPoint: function() {\n        if (!this.focalPoint) {\n            this._createFocalPoint();\n        } else {\n            this.canvas.remove(this.focalPoint);\n            this.focalPoint = null;\n        }\n\n        this.renderImage();\n    },\n\n    /**\n     * Reposition the viewport to handle editor resizing.\n     */\n    _repositionViewport: function() {\n        if (this.viewport) {\n            var dimensions = {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            // If we're cropping, nothing exciting happens for the viewport\n            if (this.currentView === 'crop') {\n                dimensions.width = this.editorWidth;\n                dimensions.height = this.editorHeight;\n            } else {\n                // If this is the first initial reposition, no cropper state yet\n                if (this.cropperState) {\n                    // Recall the state\n                    var state = this.cropperState;\n\n                    var scaledImageDimensions = this.getScaledImageDimensions();\n                    // Make sure we have the correct current image size\n                    var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                    // Set the viewport dimensions\n                    dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                    dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                    // Adjust the image position to show the correct part of the image in the viewport\n                    this.image.set({\n                        left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                        top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                    });\n                } else {\n                    $.extend(dimensions, this.getScaledImageDimensions());\n                }\n            }\n            this.viewport.set(dimensions);\n        }\n    },\n\n    _repositionFocalPoint: function(previousEditorDimensions) {\n        if (this.focalPoint) {\n            var offsetX = this.focalPoint.left - this.editorWidth / 2;\n            var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n            var currentWidth = this.image.width;\n            var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n            var ratio = newWidth / currentWidth / this.scaleFactor;\n\n            offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n            offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n            offsetX *= ratio;\n            offsetY *= ratio;\n\n            this.focalPoint.set({\n                left: this.editorWidth / 2 + offsetX,\n                top: this.editorHeight / 2 + offsetY\n            });\n        }\n    },\n\n    /**\n     * Return true if the image orientation has changed\n     */\n    hasOrientationChanged: function() {\n        return this.viewportRotation % 180 !== 0;\n    },\n\n    /**\n     * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n     */\n    getScaledImageDimensions: function() {\n        if (typeof this.getScaledImageDimensions._ === 'undefined') {\n            this.getScaledImageDimensions._ = {};\n        }\n\n        this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n        this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n        this.getScaledImageDimensions._.dimensions = {};\n        if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n            this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n            this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n        } else {\n            this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n            this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n        }\n\n        return this.getScaledImageDimensions._.dimensions;\n    },\n\n    /**\n     * Set the image dimensions to reflect the current zoom ratio.\n     */\n    _zoomImage: function() {\n        if (typeof this._zoomImage._ === 'undefined') {\n            this._zoomImage._ = {};\n        }\n\n        this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n        this.image.set({\n            width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n            height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n        });\n    },\n\n    /**\n     * Set up listeners for the controls.\n     */\n    _addControlListeners: function() {\n        // Tabs\n        this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n        // Focal point\n        this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n        // Rotate controls\n        this.addListener($('.rotate-left'), 'click', function() {\n            this.rotateImage(-90);\n        });\n        this.addListener($('.rotate-right'), 'click', function() {\n            this.rotateImage(90);\n        });\n        this.addListener($('.flip-vertical'), 'click', function() {\n            this.flipImage('y');\n        });\n        this.addListener($('.flip-horizontal'), 'click', function() {\n            this.flipImage('x');\n        });\n\n        // Straighten slider\n        this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n            onStart: () => {\n                this._showGrid();\n            },\n            onChange: slider => {\n                this.straighten(slider);\n            },\n            onEnd: () => {\n                this._hideGrid();\n                this._cleanupFocalPointAfterStraighten();\n            },\n        });\n\n        // Cropper scale modifier key\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = true;\n            }\n        });\n        this.addListener(Garnish.$doc, 'keyup', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = false;\n            }\n        });\n\n        this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n        this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n        this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n    },\n\n    /**\n     * Handle a constraint button click.\n     *\n     * @param ev\n     */\n    _handleConstraintClick: function(ev) {\n        var constraint = $(ev.currentTarget).data('constraint');\n        var $target = $(ev.currentTarget);\n        $target.siblings().removeClass('active');\n        $target.addClass('active');\n\n        if (constraint == 'custom') {\n            this._showCustomConstraint();\n            this._applyCustomConstraint();\n            return;\n        }\n\n        this._hideCustomConstraint();\n\n        this.setCroppingConstraint(constraint);\n        this.enforceCroppingConstraint();\n    },\n\n    /**\n     * Handle an orientation switch click.\n     *\n     * @param ev\n     */\n    _handleOrientationClick: function(ev) {\n        if (ev.currentTarget.value === this.constraintOrientation) {\n            return;\n        }\n        this.constraintOrientation = ev.currentTarget.value;\n\n        var $constraints = $('.constraint.flip', this.$container);\n\n        for (var i = 0; i < $constraints.length; i++) {\n            var $constraint = $($constraints[i]);\n            $constraint.data('constraint', 1 / $constraint.data('constraint'));\n            $constraint.html($constraint.html().split(':').reverse().join(':'));\n        }\n\n        $constraints.filter('.active').click();\n    },\n\n    /**\n     * Apply the custom ratio set in the inputs\n     */\n    _applyCustomConstraint: function() {\n        var constraint = this._getCustomConstraint();\n\n        if (constraint.w > 0 && constraint.h > 0) {\n            this.setCroppingConstraint(constraint.w / constraint.h);\n            this.enforceCroppingConstraint();\n        }\n    },\n\n    /**\n     * Get the custom constraint.\n     *\n     * @returns {{w: *, h: *}}\n     */\n    _getCustomConstraint: function() {\n        var w = parseFloat($('.custom-constraint-w').val());\n        var h = parseFloat($('.custom-constraint-h').val());\n        return {\n            w: isNaN(w) ? 0 : w,\n            h: isNaN(h) ? 0 : h,\n        }\n    },\n\n    /**\n     * Set the custom constraint.\n     *\n     * @param w\n     * @param h\n     */\n    _setCustomConstraint: function(w, h) {\n        $('.custom-constraint-w').val(parseFloat(w));\n        $('.custom-constraint-h').val(parseFloat(h));\n    },\n\n    /**\n     * Hide the custom constraint inputs.\n     */\n    _hideCustomConstraint: function() {\n        this.showingCustomConstraint = false;\n        $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n        $('.orientation', this.$container).removeClass('hidden');\n    },\n\n    /**\n     * Show the custom constraint inputs.\n     */\n    _showCustomConstraint: function() {\n        if (this.showingCustomConstraint) {\n            return;\n        }\n\n        this.showingCustomConstraint = true;\n        $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n        $('.orientation', this.$container).addClass('hidden');\n    },\n\n    /**\n     * Handle tab click.\n     *\n     * @param ev\n     */\n    _handleTabClick: function(ev) {\n        if (!this.animationInProgress) {\n            var $tab = $(ev.currentTarget);\n            var view = $tab.data('view');\n            this.$tabs.removeClass('selected');\n            $tab.addClass('selected');\n            this.showView(view);\n        }\n    },\n\n    /**\n     * Show a view.\n     *\n     * @param view\n     */\n    showView: function(view) {\n        if (this.currentView === view) {\n            return;\n        }\n\n        this.$views.addClass('hidden');\n        var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n        $view.removeClass('hidden');\n\n        if (view === 'rotate') {\n            this.enableSlider();\n        } else {\n            this.disableSlider();\n        }\n\n        // Now that most likely our editor dimensions have changed, time to reposition stuff\n        this.updateSizeAndPosition();\n\n        // See if we have to enable or disable crop mode as we transition between tabs\n        if (this.currentView === 'crop' && view !== 'crop') {\n            this.disableCropMode();\n        } else if (this.currentView !== 'crop' && view === 'crop') {\n            this.enableCropMode();\n        }\n\n        // Mark the current view\n        this.currentView = view;\n    },\n\n    /**\n     * Store the current cropper state.\n     *\n     * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n     * as the basis for recalculating the cropper position and dimensions.\n     *\n     * @param [state]\n     */\n    storeCropperState: function(state) {\n        if (typeof this.storeCropperState._ === 'undefined') {\n            this.storeCropperState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.cropperState = state;\n        } else if (this.clipper) {\n            this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n            this.cropperState = {\n                offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        } else {\n            this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n            this.cropperState = {\n                offsetX: 0,\n                offsetY: 0,\n                height: this.storeCropperState._.dimensions.height,\n                width: this.storeCropperState._.dimensions.width,\n                imageDimensions: this.storeCropperState._.dimensions\n            };\n        }\n    },\n\n    /**\n     * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n     */\n    storeFocalPointState: function(state) {\n        if (typeof this.storeFocalPointState._ === 'undefined') {\n            this.storeFocalPointState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.focalPointState = state;\n        } else if (this.focalPoint) {\n            this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n            this.focalPointState = {\n                offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        }\n    },\n\n    /**\n     * Rotate the image along with the viewport.\n     *\n     * @param degrees\n     */\n    rotateImage: function(degrees) {\n        if (!this.animationInProgress) {\n            // We're not that kind of an establishment, sir.\n            if (degrees !== 90 && degrees !== -90) {\n                return false;\n            }\n\n            this.animationInProgress = true;\n            this.viewportRotation += degrees;\n\n            // Normalize the viewport rotation angle so it's between 0 and 359\n            this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n            var newAngle = this.image.angle + degrees;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var imageZoomRatio;\n\n            if (this.hasOrientationChanged()) {\n                imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n            } else {\n                imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n            }\n\n            // In cases when for some reason we've already zoomed in on the image,\n            // use existing zoom.\n            if (this.zoomRatio > imageZoomRatio) {\n                imageZoomRatio = this.zoomRatio;\n            }\n\n            var viewportProperties = {\n                angle: degrees === 90 ? '+=90' : '-=90'\n            };\n\n            var imageProperties = {\n                angle: newAngle,\n                width: scaledImageDimensions.width * imageZoomRatio,\n                height: scaledImageDimensions.height * imageZoomRatio\n            };\n\n            var scaleFactor = 1;\n            if (this.scaleFactor < 1) {\n                scaleFactor = 1 / this.scaleFactor;\n                this.scaleFactor = 1;\n            } else {\n                if (this.viewport.width > this.editorHeight) {\n                    scaleFactor = this.editorHeight / this.viewport.width;\n                } else if (this.viewport.height > this.editorWidth) {\n                    scaleFactor = this.editorWidth / this.viewport.height;\n                }\n                this.scaleFactor = scaleFactor;\n            }\n\n            if (scaleFactor < 1) {\n                imageProperties.width *= scaleFactor;\n                imageProperties.height *= scaleFactor;\n            }\n\n            var state = this.cropperState;\n\n            // Make sure we reposition the image as well to focus on the same image area\n            var deltaX = state.offsetX;\n            var deltaY = state.offsetY;\n            var angleInRadians = degrees * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n            var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n            imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n            state.offsetX = newDeltaX;\n            state.offsetY = newDeltaY;\n\n            var temp = state.width;\n            state.width = state.height;\n            state.height = temp;\n\n            this.storeCropperState(state);\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            }\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    // If we're zooming the image in or out, better do the same to viewport\n                    var temp = this.viewport.height * scaleFactor;\n                    this.viewport.height = this.viewport.width * scaleFactor;\n                    this.viewport.width = temp;\n                    this.viewport.set({angle: 0});\n                },\n            });\n\n            // Animate the rotation and dimension change\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                    this.image.set({angle: cleanAngle});\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        this._adjustFocalPointByAngle(degrees);\n                        this.straighten(this.straighteningInput);\n                        this.canvas.add(this.focalPoint);\n                    } else {\n                        this._resetFocalPointPosition();\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Flip an image along an axis.\n     *\n     * @param axis\n     */\n    flipImage: function(axis) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            if (this.hasOrientationChanged()) {\n                axis = axis === 'y' ? 'x' : 'y';\n            }\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            } else {\n                this._resetFocalPointPosition();\n            }\n\n            var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            this.straighteningInput.setValue(-this.imageStraightenAngle);\n            this.imageStraightenAngle = -this.imageStraightenAngle;\n            var properties = {\n                angle: this.viewportRotation + this.imageStraightenAngle\n            };\n\n            var deltaY, deltaX;\n            var cropperState = this.cropperState;\n            var focalPointState = this.focalPointState;\n\n            // Reposition the image, viewport, and stored cropper and focal point states.\n            if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                cropperState.offsetX = -cropperState.offsetX;\n                focalPointState.offsetX = -focalPointState.offsetX;\n                deltaX = this.image.left - editorCenter.x;\n                properties.left = editorCenter.x - deltaX;\n            } else {\n                cropperState.offsetY = -cropperState.offsetY;\n                focalPointState.offsetY = -focalPointState.offsetY;\n                deltaY = this.image.top - editorCenter.y;\n                properties.top = editorCenter.y - deltaY;\n            }\n\n            if (axis === 'y') {\n                properties.scaleY = this.image.scaleY * -1;\n                this.flipData.y = 1 - this.flipData.y;\n            } else {\n                properties.scaleX = this.image.scaleX * -1;\n                this.flipData.x = 1 - this.flipData.x;\n            }\n\n            this.storeCropperState(cropperState);\n            this.storeFocalPointState(focalPointState);\n\n            this.image.animate(properties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        // Well this is handy\n                        this._adjustFocalPointByAngle(0);\n                        this.canvas.add(this.focalPoint);\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Perform the straightening with input slider.\n     *\n     * @param {Craft.SlideRuleInput} slider\n     */\n    straighten: function(slider) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            var previousAngle = this.image.angle;\n\n            this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n            // Straighten the image\n            this.image.set({\n                angle: this.viewportRotation + this.imageStraightenAngle\n            });\n\n            // Set the new zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            this._zoomImage();\n\n            if (this.cropperState) {\n                this._adjustEditorElementsOnStraighten(previousAngle);\n            }\n\n            this.renderImage();\n\n            this.animationInProgress = false;\n        }\n    },\n\n    /**\n     * Adjust the cropped viewport when straightening the image to correct for\n     * bumping into edges, keeping focus on the cropped area center and to\n     * maintain the illusion that the image is being straightened relative to the viewport center.\n     *\n     * @param {integer} previousAngle integer the previous image angle before straightening\n     */\n    _adjustEditorElementsOnStraighten: function(previousAngle) {\n        var scaledImageDimensions = this.getScaledImageDimensions();\n        var angleDelta = this.image.angle - previousAngle;\n        var state = this.cropperState;\n\n        var currentZoomRatio = this.zoomRatio;\n        var adjustmentRatio = 1;\n\n        var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n        do {\n            // Get the cropper center coordinates\n            var cropperCenterX = state.offsetX;\n            var cropperCenterY = state.offsetY;\n            var angleInRadians = angleDelta * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n            newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n            sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Figure out the final image offset to keep the viewport focused where we need it\n            deltaX = newCenterX * currentZoomRatio * sizeFactor;\n            deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n            // If the image would creep in the viewport, figure out how to math around it.\n            var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n            var rectangle = {\n                width: this.viewport.width,\n                height: this.viewport.height,\n                left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n            };\n            adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n            currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n            // If we had to make adjustments, do the calculations again\n        } while (adjustmentRatio !== 1);\n\n        // Reposition the image correctly\n        this.image.set({\n            left: this.editorWidth / 2 - deltaX,\n            top: this.editorHeight / 2 - deltaY\n        });\n\n        // Finally, store the new cropper state to reflect the rotation change.\n        state.offsetX = newCenterX;\n        state.offsetY = newCenterY;\n        state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n        state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n        this.storeCropperState(state);\n\n        // Zoom the image in and we're done.\n        this.zoomRatio = currentZoomRatio;\n\n        if (this.focalPoint) {\n            this._adjustFocalPointByAngle(angleDelta);\n\n            if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 0});\n            } else {\n                this.focalPoint.set({opacity: 1});\n            }\n        } else if (angleDelta !== 0) {\n            this._resetFocalPointPosition();\n        }\n\n        this._zoomImage();\n    },\n\n    /**\n     * If focal point is active and outside of viewport after straightening, reset it.\n     */\n    _cleanupFocalPointAfterStraighten: function() {\n        if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n            this.focalPoint.set({opacity: 1});\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n            this.toggleFocalPoint();\n        }\n    },\n\n    /**\n     * Reset focal point to the middle of image.\n     */\n    _resetFocalPointPosition: function() {\n        var state = this.focalPointState;\n        state.offsetX = 0;\n        state.offsetY = 0;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n     *\n     * @param object\n     * @param containingObject\n     *\n     * @returns {boolean}\n     */\n    _isCenterInside: function(object, containingObject) {\n        return (object.left > containingObject.left - containingObject.width / 2\n            && object.top > containingObject.top - containingObject.height / 2\n            && object.left < containingObject.left + containingObject.width / 2\n            && object.top < containingObject.top + containingObject.height / 2\n        );\n    },\n\n    /**\n     * Adjust the focal point by an angle in degrees.\n     * @param angle\n     */\n    _adjustFocalPointByAngle: function(angle) {\n        var angleInRadians = angle * (Math.PI / 180);\n        var state = this.focalPointState;\n\n        var focalX = state.offsetX;\n        var focalY = state.offsetY;\n\n        // Calculate how the focal point would need to move in a circle to keep on the same spot\n        // on the image if it was rotated with zoom intact.\n        var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n        var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n        var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n        var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n        var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n        this.focalPoint.left = this.image.left + adjustedFocalX;\n        this.focalPoint.top = this.image.top + adjustedFocalY;\n\n        state.offsetX = newFocalX;\n        state.offsetY = newFocalY;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n     * If the rectangle fits, 1 will be returned.\n     *\n     * @param rectangle\n     * @param containingVertices\n     */\n    _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n        var rectangleVertices = this._getRectangleVertices(rectangle);\n        var vertex;\n\n        // Check if any of the viewport vertices end up out of bounds\n        for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n            vertex = rectangleVertices[verticeIndex];\n\n            if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                break;\n            }\n\n            vertex = false;\n        }\n\n        // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n        var adjustmentRatio;\n\n        if (!vertex) {\n            adjustmentRatio = 1;\n        } else {\n            // Find out which edge got crossed by the vertex\n            var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n            var rectangleCenter = {\n                x: rectangle.left + rectangle.width / 2,\n                y: rectangle.top + rectangle.height / 2\n            };\n\n            // Calculate how much further that edge needs to be.\n            // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n            var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n            var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n            // Adjust the zoom ratio\n            adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n        }\n\n        return adjustmentRatio;\n    },\n\n    /**\n     * Save the image.\n     *\n     * @param ev\n     */\n    saveImage: function(ev) {\n        var $button = $(ev.currentTarget);\n        if ($button.hasClass('disabled')) {\n            return false;\n        }\n\n        $('.btn', this.$buttons).addClass('disabled');\n        this.$buttons.append('<div class=\"spinner\"></div>');\n\n        var postData = {\n            assetId: this.assetId,\n            viewportRotation: this.viewportRotation,\n            imageRotation: this.imageStraightenAngle,\n            replace: $button.hasClass('replace') ? 1 : 0\n        };\n\n        if (this.cropperState) {\n            var cropData = {};\n\n            cropData.height = this.cropperState.height;\n            cropData.width = this.cropperState.width;\n            cropData.offsetX = this.cropperState.offsetX;\n            cropData.offsetY = this.cropperState.offsetY;\n\n            postData.imageDimensions = this.cropperState.imageDimensions;\n\n            postData.cropData = cropData;\n        } else {\n            postData.imageDimensions = this.getScaledImageDimensions();\n        }\n\n        if (this.focalPoint) {\n            postData.focalPoint = this.focalPointState;\n        }\n\n        postData.flipData = this.flipData;\n        postData.zoom = this.zoomRatio;\n\n        Craft.postActionRequest('assets/save-image', postData, data => {\n            this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n            if (data.error) {\n                alert(data.error);\n                return;\n            }\n\n            this.onSave();\n            this.hide();\n            Craft.cp.runQueue();\n        });\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToCoverRatio: function(dimensions) {\n        // Convert the angle to radians\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        // Calculate the dimensions of the scaled image using the magic of math\n        var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n        var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n        // Calculate the ratio\n        return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToFitRatio: function(dimensions) {\n        // Get the bounding box for a rotated image\n        var boundingBox = this._getImageBoundingBox(dimensions);\n\n        // Scale the bounding box to fit\n        var scale = 1;\n        if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n            var vertScale = this.editorHeight / boundingBox.height;\n            var horiScale = this.editorWidth / boundingBox.width;\n            scale = Math.min(horiScale, vertScale);\n        }\n\n        return scale;\n    },\n\n    /**\n     * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n     */\n    getCombinedZoomRatio: function(dimensions) {\n        return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n    },\n\n    /**\n     * Draw the grid.\n     *\n     * @private\n     */\n    _showGrid: function() {\n        if (!this.grid) {\n            var strokeOptions = {\n                strokeWidth: 1,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            var lineCount = 8;\n            var gridWidth = this.viewport.width;\n            var gridHeight = this.viewport.height;\n            var xStep = gridWidth / (lineCount + 1);\n            var yStep = gridHeight / (lineCount + 1);\n\n            var grid = [\n                new fabric.Rect({\n                    strokeWidth: 2,\n                    stroke: 'rgba(255,255,255,1)',\n                    originX: 'center',\n                    originY: 'center',\n                    width: gridWidth,\n                    height: gridHeight,\n                    left: gridWidth / 2,\n                    top: gridHeight / 2,\n                    fill: 'rgba(255,255,255,0)'\n                })\n            ];\n\n            var i;\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n            }\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n            }\n\n            this.grid = new fabric.Group(grid, {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                angle: this.viewport.angle\n            });\n\n            this.canvas.add(this.grid);\n            this.renderImage();\n        }\n    },\n\n    /**\n     * Hide the grid\n     */\n    _hideGrid: function() {\n        this.canvas.remove(this.grid);\n        this.grid = null;\n        this.renderImage();\n    },\n\n    /**\n     * Remove all the events when hiding the editor.\n     */\n    onFadeOut: function() {\n        this.destroy();\n    },\n\n    /**\n     * Make sure underlying content is not scrolled by accident.\n     */\n    show: function() {\n        this.base();\n\n        $('html').addClass('noscroll');\n    },\n\n    /**\n     * Allow the content to scroll.\n     */\n    hide: function() {\n        this.removeAllListeners();\n        this.straighteningInput.removeAllListeners();\n        $('html').removeClass('noscroll');\n        this.base();\n    },\n\n    /**\n     * onSave callback.\n     */\n    onSave: function() {\n        this.settings.onSave();\n        this.trigger('save');\n    },\n\n    /**\n     * Enable the rotation slider.\n     */\n    enableSlider: function() {\n        this.$imageTools.removeClass('hidden');\n    },\n\n    /**\n     * Disable the rotation slider.\n     */\n    disableSlider: function() {\n        this.$imageTools.addClass('hidden');\n    },\n\n    /**\n     * Switch to crop mode.\n     */\n    enableCropMode: function() {\n        var imageDimensions = this.getScaledImageDimensions();\n        this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n        var viewportProperties = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var callback = () => {\n            this._setFittedImageVerticeCoordinates();\n\n            // Restore cropper\n            var state = this.cropperState;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Restore based on the stored information\n            var cropperData = {\n                left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                width: state.width * sizeFactor * this.zoomRatio,\n                height: state.height * sizeFactor * this.zoomRatio\n            };\n\n            this._showCropper(cropperData);\n\n            if (this.focalPoint) {\n                sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Switch out of crop mode.\n     */\n    disableCropMode: function() {\n        var viewportProperties = {};\n\n        this._hideCropper();\n        var imageDimensions = this.getScaledImageDimensions();\n        var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n        var inverseZoomFactor = targetZoom / this.zoomRatio;\n        this.zoomRatio = targetZoom;\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var offsetX = this.clipper.left - this.image.left;\n        var offsetY = this.clipper.top - this.image.top;\n\n        var imageOffsetX = offsetX * inverseZoomFactor;\n        var imageOffsetY = offsetY * inverseZoomFactor;\n        imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n        imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n        // Calculate the cropper dimensions after all the zooming\n        viewportProperties.height = this.clipper.height * inverseZoomFactor;\n        viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n        if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n            if (this.focalPoint) {\n                this.toggleFocalPoint();\n            }\n\n            this._resetFocalPointPosition();\n        }\n\n        var callback = () => {\n            // Reposition focal point correctly\n            if (this.focalPoint) {\n                var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Transition between cropping end editor modes\n     *\n     * @param callback\n     * @param imageProperties\n     * @param viewportProperties\n     * @private\n     */\n    _editorModeTransition: function(callback, imageProperties, viewportProperties) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            // Without this it looks semi-broken during animation\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n                this.renderImage();\n            }\n\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    callback();\n                    this.animationInProgress = false;\n                    this.renderImage();\n                },\n            });\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration\n            });\n        }\n    },\n\n    _showSpinner: function() {\n        this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n        var canvas = document.getElementById('spinner-canvas');\n        var context = canvas.getContext('2d');\n        var start = new Date();\n        var lines = 16,\n            cW = context.canvas.width,\n            cH = context.canvas.height;\n\n        var draw = function() {\n            var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n            context.save();\n            context.clearRect(0, 0, cW, cH);\n            context.translate(cW / 2, cH / 2);\n            context.rotate(Math.PI * 2 * rotation);\n            for (var i = 0; i < lines; i++) {\n                context.beginPath();\n                context.rotate(Math.PI * 2 / lines);\n                context.moveTo(cW / 10, 0);\n                context.lineTo(cW / 4, 0);\n                context.lineWidth = cW / 30;\n                context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                context.stroke();\n            }\n            context.restore();\n        };\n        this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n    },\n\n    _hideSpinner: function() {\n        window.clearInterval(this.spinnerInterval);\n        this.$spinnerCanvas.remove();\n        this.$spinnerCanvas = null;\n    },\n\n    /**\n     * Show the cropper.\n     *\n     * @param clipperData\n     */\n    _showCropper: function(clipperData) {\n        this._setupCropperLayer(clipperData);\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Hide the cropper.\n     */\n    _hideCropper: function() {\n        if (this.clipper) {\n            this.croppingCanvas.remove(this.clipper);\n            this.croppingCanvas.remove(this.croppingShade);\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n\n            this.croppingCanvas = null;\n            this.renderCropper = null;\n        }\n    },\n\n    /**\n     * Draw the cropper.\n     *\n     * @param clipperData\n     */\n    _setupCropperLayer: function(clipperData) {\n        // Set up the canvas for cropper\n        this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n            backgroundColor: 'rgba(0,0,0,0)',\n            hoverCursor: 'default',\n            selection: false\n        });\n\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        this.renderCropper = () => Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n\n        $('#cropping-canvas', this.$editorContainer).css({\n            position: 'absolute',\n            top: 0,\n            left: 0\n        });\n\n        this.croppingShade = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: this.editorWidth,\n            height: this.editorHeight,\n            fill: 'rgba(0,0,0,0.7)'\n        });\n\n        // Calculate the cropping rectangle size\n        var imageDimensions = this.getScaledImageDimensions();\n        var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n        var rectWidth = imageDimensions.width / rectangleRatio;\n        var rectHeight = imageDimensions.height / rectangleRatio;\n\n        if (this.hasOrientationChanged()) {\n            var temp = rectHeight;\n            rectHeight = rectWidth;\n            rectWidth = temp;\n        }\n\n        // Set up the cropping viewport rectangle\n        this.clipper = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: rectWidth,\n            height: rectHeight,\n            stroke: 'black',\n            fill: 'rgba(128,0,0,1)',\n            strokeWidth: 0\n        });\n\n        // Set from clipper data\n        if (clipperData) {\n            this.clipper.set(clipperData);\n        }\n\n        this.clipper.globalCompositeOperation = 'destination-out';\n        this.croppingCanvas.add(this.croppingShade);\n        this.croppingCanvas.add(this.clipper);\n    },\n\n    /**\n     * Redraw the cropper boundaries\n     */\n    _redrawCropperElements: function() {\n        if (typeof this._redrawCropperElements._ === 'undefined') {\n            this._redrawCropperElements._ = {};\n        }\n\n        if (this.cropperHandles) {\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n        }\n        this._redrawCropperElements._.lineOptions = {\n            strokeWidth: 4,\n            stroke: 'rgb(255,255,255)',\n            fill: false\n        };\n\n        this._redrawCropperElements._.gridOptions = {\n            strokeWidth: 2,\n            stroke: 'rgba(255,255,255,0.5)'\n        };\n\n        // Draw the handles\n        this._redrawCropperElements._.pathGroup = [\n            new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n        ];\n\n        this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n            left: this.clipper.left,\n            top: this.clipper.top,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        // Don't forget the rectangle\n        this.croppingRectangle = new fabric.Rect({\n            left: this.clipper.left,\n            top: this.clipper.top,\n            width: this.clipper.width,\n            height: this.clipper.height,\n            fill: 'rgba(0,0,0,0)',\n            stroke: 'rgba(255,255,255,0.8)',\n            strokeWidth: 2,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        this.cropperGrid = new fabric.Group(\n            [\n                new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n            ], {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n        this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n        this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n        if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n            this._redrawCropperElements._.cropTextTop -= 24;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n        }\n\n        this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n            left: this.croppingRectangle.left,\n            top: this._redrawCropperElements._.cropTextTop,\n            fontSize: 13,\n            fill: 'rgb(200,200,200)',\n            backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n            font: 'Craft',\n            width: 70,\n            height: 15,\n            originX: 'center',\n            originY: 'center',\n            textAlign: 'center'\n        });\n\n        this.croppingCanvas.add(this.cropperHandles);\n        this.croppingCanvas.add(this.cropperGrid);\n        this.croppingCanvas.add(this.croppingRectangle);\n        this.croppingCanvas.add(this.croppingAreaText);\n    },\n\n    /**\n     * Reposition the cropper when the image editor dimensions change.\n     *\n     * @param previousImageArea\n     */\n    _repositionCropper: function(previousImageArea) {\n        if (!this.croppingCanvas) {\n            return;\n        }\n\n        // Get the current clipper offset relative to center\n        var currentOffset = {\n            x: this.clipper.left - this.croppingCanvas.width / 2,\n            y: this.clipper.top - this.croppingCanvas.height / 2\n        };\n\n        // Resize the cropping canvas\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        // Check by what factor will the new final bounding box be different\n        var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n        var areaFactor = currentArea.width / previousImageArea.width;\n\n        // Adjust the cropper size to scale along with the bounding box\n        this.clipper.width = Math.round(this.clipper.width * areaFactor);\n        this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n        // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n        // for editor size changes and then multiply by the size factor to adjust for image size changes\n        this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n        this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n        // Resize the cropping shade\n        this.croppingShade.set({\n            width: this.editorWidth,\n            height: this.editorHeight,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        });\n\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Get the dimensions of a bounding rectangle by a set of four coordinates.\n     *\n     * @param coordinateSet\n     */\n    _getBoundingRectangle: function(coordinateSet) {\n        return {\n            width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n            height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n        };\n    },\n\n    /**\n     * Handle the mouse being clicked.\n     *\n     * @param ev\n     */\n    _handleMouseDown: function(ev) {\n        // Focal before resize before dragging\n        var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n        var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n        var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n        if (handle || move || focal) {\n            this.previousMouseX = ev.pageX;\n            this.previousMouseY = ev.pageY;\n\n            if (focal) {\n                this.draggingFocal = true;\n            } else if (handle) {\n                this.scalingCropper = handle;\n            } else if (move) {\n                this.draggingCropper = true;\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse being moved.\n     *\n     * @param ev\n     */\n    _handleMouseMove: function(ev) {\n        if (this.mouseMoveEvent !== null) {\n            Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n        }\n        this.mouseMoveEvent = ev;\n    },\n\n    _handleMouseMoveInternal: function() {\n        if (this.mouseMoveEvent === null) {\n            return;\n        }\n\n        if (this.focalPoint && this.draggingFocal) {\n            this._handleFocalDrag(this.mouseMoveEvent);\n            this.storeFocalPointState();\n            this.renderImage();\n        } else if (this.draggingCropper || this.scalingCropper) {\n            if (this.draggingCropper) {\n                this._handleCropperDrag(this.mouseMoveEvent);\n            } else {\n                this._handleCropperResize(this.mouseMoveEvent);\n            }\n\n            this._redrawCropperElements();\n\n            this.storeCropperState();\n            this.renderCropper();\n        } else {\n            this._setMouseCursor(this.mouseMoveEvent);\n        }\n\n        this.previousMouseX = this.mouseMoveEvent.pageX;\n        this.previousMouseY = this.mouseMoveEvent.pageY;\n\n        this.mouseMoveEvent = null;\n    },\n\n    /**\n     * Handle mouse being released.\n     *\n     * @param ev\n     */\n    _handleMouseUp: function(ev) {\n        this.draggingCropper = false;\n        this.scalingCropper = false;\n        this.draggingFocal = false;\n    },\n\n    /**\n     * Handle mouse out\n     *\n     * @param ev\n     */\n    _handleMouseOut: function(ev) {\n        this._handleMouseUp(ev);\n        this.mouseMoveEvent = ev;\n        this._handleMouseMoveInternal();\n    },\n\n    /**\n     * Handle cropper being dragged.\n     *\n     * @param ev\n     */\n    _handleCropperDrag: function(ev) {\n        if (typeof this._handleCropperDrag._ === 'undefined') {\n            this._handleCropperDrag._ = {};\n        }\n\n        this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n            return false;\n        }\n\n        this._handleCropperDrag._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n        // If this would drag it outside of the image\n        if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n            // Try to find the furthest point in the same general direction where we can drag it\n\n            // Delta iterator setup\n            this._handleCropperDrag._.dxi = 0;\n            this._handleCropperDrag._.dyi = 0;\n            this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n            this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n            // The furthest we can move\n            this._handleCropperDrag._.furthest = 0;\n            this._handleCropperDrag._.furthestDeltas = {};\n\n            // Loop through every combination of dragging it not so far\n            for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                    this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                    if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                        if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                            this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                            this._handleCropperDrag._.furthestDeltas = {\n                                x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                            }\n                        }\n                    }\n                }\n            }\n\n            // REALLY can't drag along the cursor movement\n            if (this._handleCropperDrag._.furthest == 0) {\n                return;\n            } else {\n                this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n            }\n        }\n\n        this.clipper.set({\n            left: this.clipper.left + this._handleCropperDrag._.deltaX,\n            top: this.clipper.top + this._handleCropperDrag._.deltaY\n        });\n    },\n\n    /**\n     * Handle focal point being dragged.\n     *\n     * @param ev\n     */\n    _handleFocalDrag: function(ev) {\n        if (typeof this._handleFocalDrag._ === 'undefined') {\n            this._handleFocalDrag._ = {};\n        }\n\n        if (this.focalPoint) {\n            this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                return;\n            }\n\n            this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n            this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n            // Just make sure that the focal point stays inside the image\n            if (this.currentView === 'crop') {\n                if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                    return;\n                }\n            } else {\n                if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                    && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                    return;\n                }\n            }\n\n            this.focalPoint.set({\n                left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n            });\n        }\n    },\n\n    /**\n     * Set the cropping constraint\n     * @param constraint\n     */\n    setCroppingConstraint: function(constraint) {\n        // In case this caused the sidebar width to change.\n        this.updateSizeAndPosition();\n\n        switch (constraint) {\n            case 'none':\n                this.croppingConstraint = false;\n                break;\n\n            case 'original':\n                this.croppingConstraint = this.originalWidth / this.originalHeight;\n                break;\n\n            case 'current':\n                this.croppingConstraint = this.clipper.width / this.clipper.height;\n                break;\n\n            case 'custom':\n\n                break;\n            default:\n                this.croppingConstraint = parseFloat(constraint);\n\n                break;\n        }\n    },\n\n    /**\n     * Enforce the cropping constraint\n     */\n    enforceCroppingConstraint: function() {\n        if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n            this.enforceCroppingConstraint._ = {};\n        }\n\n        if (this.animationInProgress || !this.croppingConstraint) {\n            return;\n        }\n\n        this.animationInProgress = true;\n\n        // Mock the clipping rectangle for collision tests\n        this.enforceCroppingConstraint._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        // If wider than it should be\n        if (this.clipper.width > this.clipper.height * this.croppingConstraint) {\n            this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n            // Make it taller!\n            this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n            // Getting really awkward having to convert between 0;0 being center or top-left corner.\n            this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n            // If the clipper would end up out of bounds, make it narrower instead.\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n            }\n        } else {\n            // Follow the same pattern, if taller than it should be.\n            this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n            this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n            this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n            }\n        }\n\n        this.enforceCroppingConstraint._.properties = {\n            height: this.enforceCroppingConstraint._.rectangle.height,\n            width: this.enforceCroppingConstraint._.rectangle.width\n        };\n\n        // Make sure to redraw cropper handles and gridlines when resizing\n        this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n            onChange: () => {\n                this._redrawCropperElements();\n                this.croppingCanvas.renderAll();\n            },\n            duration: this.settings.animationDuration,\n            onComplete: () => {\n                this._redrawCropperElements();\n                this.animationInProgress = false;\n                this.renderCropper();\n                this.storeCropperState();\n            },\n        });\n    },\n\n    /**\n     * Handle cropper being resized.\n     *\n     * @param ev\n     */\n    _handleCropperResize: function(ev) {\n        if (typeof this._handleCropperResize._ === 'undefined') {\n            this._handleCropperResize._ = {};\n        }\n\n        // Size deltas\n        this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n            this._handleCropperResize._.deltaX = 0;\n        }\n\n        if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n            this._handleCropperResize._.deltaY = 0;\n        }\n\n        if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n            return;\n        }\n\n        // Translate from center-center origin to absolute coords\n        this._handleCropperResize._.startingRectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        }\n\n        this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n        if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n            return;\n        }\n\n        if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n            return;\n        }\n\n        // Translate back to center-center origin.\n        this.clipper.set({\n            top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n            left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n            width: this._handleCropperResize._.rectangle.width,\n            height: this._handleCropperResize._.rectangle.height\n        });\n\n        this._redrawCropperElements();\n    },\n\n    _calculateNewCropperSizeByDeltas: function(startingRectangle, deltaX, deltaY, cropperDirection) {\n        if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n            this._calculateNewCropperSizeByDeltas._ = {};\n        }\n\n        // Center deltas\n        this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n        this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n        this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n        this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n        this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n        // Lock the aspect ratio if needed\n        if (this.croppingConstraint) {\n            this._calculateNewCropperSizeByDeltas._.change = 0;\n\n            // Take into account the mouse direction and figure out the \"real\" change in cropper size\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'br':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n\n            if (this.croppingConstraint > 1) {\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n            } else {\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n            // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n        } else {\n            // Lock the aspect ratio\n            if (this.shiftKeyHeld &&\n                (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                    cropperDirection === 'bl' || cropperDirection === 'br')\n            ) {\n                this._calculateNewCropperSizeByDeltas._.ratio;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                }\n            }\n\n            if (cropperDirection.match(/t/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/b/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/r/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n            if (cropperDirection.match(/l/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n        }\n\n        this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n        this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n        this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n        this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n        return this._calculateNewCropperSizeByDeltas._.rectangle;\n    },\n\n    /**\n     * Set mouse cursor by it's position over cropper.\n     *\n     * @param ev\n     */\n    _setMouseCursor: function(ev) {\n        if (typeof this._setMouseCursor._ === 'undefined') {\n            this._setMouseCursor._ = {};\n        }\n\n        if (Garnish.isMobileBrowser(true)) {\n            return;\n        }\n        this._setMouseCursor._.cursor = 'default';\n        this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n        if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n            this._setMouseCursor._.cursor = 'pointer';\n        } else if (this._setMouseCursor._.handle) {\n            if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                this._setMouseCursor._.cursor = 'ns-resize';\n            } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                this._setMouseCursor._.cursor = 'ew-resize';\n            } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                this._setMouseCursor._.cursor = 'nwse-resize';\n            } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                this._setMouseCursor._.cursor = 'nesw-resize';\n            }\n        } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n            this._setMouseCursor._.cursor = 'move';\n        }\n\n        $('.body').css('cursor', this._setMouseCursor._.cursor);\n    },\n\n    /**\n     * Test whether the mouse cursor is on any cropper handles.\n     *\n     * @param ev\n     */\n    _cropperHandleHitTest: function(ev) {\n        if (typeof this._cropperHandleHitTest._ === 'undefined') {\n            this._cropperHandleHitTest._ = {};\n        }\n\n        this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n        this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n        this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n        this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n        this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n        this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n        // Left side top/bottom\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tl';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'bl';\n            }\n        }\n        // Right side top/bottom\n        if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tr';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'br';\n            }\n        }\n\n        // Left or right\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'l';\n        }\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'r';\n        }\n\n        // Top or bottom\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 't';\n        }\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 'b';\n        }\n\n        return false;\n    },\n\n    /**\n     * Test whether the mouse cursor is on a fabricJS object.\n     *\n     * @param object\n     * @param event\n     *\n     * @return boolean\n     */\n\n    _isMouseOver: function(event, object) {\n        if (typeof this._isMouseOver._ === 'undefined') {\n            this._isMouseOver._ = {};\n        }\n\n        this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n        this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n        this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._isMouseOver._.lb = object.left - object.width / 2;\n        this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n        this._isMouseOver._.tb = object.top - object.height / 2;\n        this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n        return (\n            this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n            this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n            this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n            this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n        );\n    },\n\n    /**\n     * Get vertices of a rectangle defined by left,top,height and width properties.\n     * Optionally it's possible to provide offsetX and offsetY values.\n     * Left and top properties of rectangle reference the top-left corner.\n     *\n     * @param rectangle\n     * @param [offsetX]\n     * @param [offsetY]\n     */\n    _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n        if (typeof this._getRectangleVertices._ === 'undefined') {\n            this._getRectangleVertices._ = {};\n        }\n\n        if (typeof offsetX === 'undefined') {\n            offsetX = 0;\n        }\n        if (typeof offsetY === 'undefined') {\n            offsetY = 0;\n        }\n\n        this._getRectangleVertices._.topLeft = {\n            x: rectangle.left + offsetX,\n            y: rectangle.top + offsetY\n        };\n\n        this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n        this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n        this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n        return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n    },\n\n    /**\n     * Set image vertice coordinates for an image that's been zoomed to fit.\n     */\n    _setFittedImageVerticeCoordinates: function() {\n        this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n    },\n\n    /**\n     * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n     * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n     *\n     * @param zoomMode\n     */\n    getImageVerticeCoords: function(zoomMode) {\n        var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n        var imageDimensions = this.getScaledImageDimensions();\n\n        var ratio;\n\n        if (typeof zoomMode === \"number\") {\n            ratio = zoomMode;\n        } else if (zoomMode === \"cover\") {\n            ratio = this.getZoomToCoverRatio(imageDimensions);\n        } else {\n            ratio = this.getZoomToFitRatio(imageDimensions);\n        }\n\n        // Get the dimensions of the scaled image\n        var scaledHeight = imageDimensions.height * ratio;\n        var scaledWidth = imageDimensions.width * ratio;\n\n        // Calculate the segments of the containing box for the image.\n        // When referring to top/bottom or right/left segments, these are on the\n        // right-side and bottom projection of the containing box for the zoomed out image.\n        var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n        var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n        var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n        var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n        // Calculate the offsets from editor box for the image-containing box\n        var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n        var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n        // Finally, calculate the image vertice coordinates\n        return {\n            a: {\n                x: horizontalOffset + rightHorizontalSegment,\n                y: verticalOffset\n            },\n            b: {\n                x: this.editorWidth - horizontalOffset,\n                y: verticalOffset + topVerticalSegment\n            },\n            c: {\n                x: horizontalOffset + leftHorizontalSegment,\n                y: this.editorHeight - verticalOffset\n            },\n            d: {\n                x: horizontalOffset,\n                y: verticalOffset + bottomVerticalSegment\n            }\n        };\n    },\n\n    /**\n     * Debug stuff by continuously rendering a fabric object on canvas.\n     *\n     * @param fabricObj\n     */\n    _debug: function(fabricObj) {\n        this.canvas.remove(this.debugger);\n        this.debugger = fabricObj;\n        this.canvas.add(this.debugger);\n    },\n\n    /**\n     * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n     * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n     * return true if the point is in the rectangle.\n     *\n     * Adapted from: http://stackoverflow.com/a/2763387/2040791\n     *\n     * @param points\n     * @param rectangle\n     */\n    arePointsInsideRectangle: function(points, rectangle) {\n        if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n            this.arePointsInsideRectangle._ = {};\n        }\n\n        // Pre-calculate the vectors and scalar products for two rectangle edges\n        this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n        this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n        this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n        this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n        for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n            this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n            // Calculate the vectors for two rectangle sides and for\n            // the vector from vertices a and b to the point P\n            this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n            this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n            // Calculate scalar or dot products for some vector combinations\n            this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n            this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n            this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n            this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n            if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    /**\n     * Returns an object representing the vector between points a and b.\n     *\n     * @param a\n     * @param b\n     */\n    _getVector: function(a, b) {\n        return {x: b.x - a.x, y: b.y - a.y};\n    },\n\n    /**\n     * Returns the scalar product of two vectors\n     *\n     * @param a\n     * @param b\n     */\n    _getScalarProduct: function(a, b) {\n        return a.x * b.x + a.y * b.y;\n    },\n\n    /**\n     * Returns the magnitude of a vector_redrawCropperElements\n     * .\n     *\n     * @param vector\n     */\n    _getVectorMagnitude: function(vector) {\n        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    },\n\n    /**\n     * Returns the angle between two vectors in degrees with two decimal points\n     *\n     * @param a\n     * @param b\n     */\n    _getAngleBetweenVectors: function(a, b) {\n        return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n    },\n\n    /**\n     * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n     *\n     * @param rectangle\n     * @param vertex\n     *\n     * @returns {*}\n     */\n    _getEdgeCrossed: function(rectangle, vertex) {\n        // Determine over which edge the vertex is\n        var edgePoints = [\n            [rectangle.a, rectangle.b],\n            [rectangle.b, rectangle.c],\n            [rectangle.c, rectangle.d],\n            [rectangle.d, rectangle.a]\n        ];\n\n        var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n        var smallestDiff = 180;\n        var edgeCrossed = null;\n\n        // Test each edge\n        for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n            var edge = edgePoints[edgeIndex];\n            var toCenter = this._getVector(edge[0], centerPoint);\n            var edgeVector = this._getVector(edge[0], edge[1]);\n            var toVertex = this._getVector(edge[0], vertex);\n\n            // If the angle between toCenter/toVertex is the sum of\n            // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n            // the edgeVector is between the other two meaning that this is the offending vertex.\n            // To avoid the rounding errors, we'll take the closest match\n            var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n            if (diff < smallestDiff) {\n                smallestDiff = diff;\n                edgeCrossed = edge;\n            }\n        }\n\n        return edgeCrossed;\n    },\n\n    /**\n     * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n     *\n     * @param dimensions\n     */\n    _getImageBoundingBox: function(dimensions) {\n        var box = {};\n\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        var proportion = dimensions.height / dimensions.width;\n        box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n        box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n        if (this.hasOrientationChanged()) {\n            var temp = box.width;\n            box.width = box.height;\n            box.height = temp;\n        }\n\n        return box;\n    }\n}, {\n    defaults: {\n        animationDuration: 100,\n        allowSavingAsNew: true,\n        onSave: $.noop,\n        allowDegreeFractions: null,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend({\n    $includeSubfoldersContainer: null,\n    $includeSubfoldersCheckbox: null,\n    showingIncludeSubfoldersCheckbox: false,\n\n    $uploadButton: null,\n    $uploadInput: null,\n    $progressBar: null,\n    $folders: null,\n\n    uploader: null,\n    promptHandler: null,\n    progressBar: null,\n\n    _uploadTotalFiles: 0,\n    _uploadFileProgress: {},\n    _uploadedAssetIds: [],\n    _currentUploaderSettings: {},\n\n    _assetDrag: null,\n    _folderDrag: null,\n    _expandDropTargetFolderTimeout: null,\n    _tempExpandedFolders: [],\n\n    _fileConflictTemplate: {\n        choices: [\n            {value: 'keepBoth', title: Craft.t('app', 'Keep both')}, {value: 'replace', title: Craft.t('app', 'Replace it')}\n        ]\n    },\n    _folderConflictTemplate: {\n        choices: [\n            {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')}, {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n        ]\n    },\n\n    init: function(elementType, $container, settings) {\n        this.base(elementType, $container, settings);\n\n        if (this.settings.context === 'index') {\n            if (!this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n        } else {\n            this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n            if (this.settings.modal) {\n                this.settings.modal.on('updateSizeAndPosition', this._positionProgressBar.bind(this));\n            }\n        }\n    },\n\n    initSources: function() {\n        if (this.settings.context === 'index' && !this._folderDrag) {\n            this._initIndexPageMode();\n        }\n\n        return this.base();\n    },\n\n    initSource: function($source) {\n        this.base($source);\n\n        this._createFolderContextMenu($source);\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                if ($source.data('folder-id')) {\n                    this._folderDrag.addItems($source.parent());\n                }\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    deinitSource: function($source) {\n        this.base($source);\n\n        // Does this source have a context menu?\n        var contextMenu = $source.data('contextmenu');\n\n        if (contextMenu) {\n            contextMenu.destroy();\n        }\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                this._folderDrag.removeItems($source.parent());\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    _getSourceLevel: function($source) {\n        return $source.parentsUntil('nav', 'ul').length;\n    },\n\n    /**\n     * Initialize the index page-specific features\n     */\n    _initIndexPageMode: function() {\n        if (this._folderDrag) {\n            return;\n        }\n\n        // Make the elements selectable\n        this.settings.selectable = true;\n        this.settings.multiSelect = true;\n\n        // Asset dragging\n        // ---------------------------------------------------------------------\n\n        this._assetDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n            filter: () => this.view.getSelectedElements().has('div.element[data-movable]'),\n            helper: $file => this._getFileDragHelper($file),\n            dropTargets: () => {\n                // Which data attribute should we be checking?\n                var attr;\n                if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                    attr = 'data-can-move-peer-files-to';\n                } else {\n                    attr = 'data-can-move-to';\n                }\n\n                var targets = [];\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder\n                    var $source = this.$sources.eq(i);\n                    if (Garnish.hasAttr($source, attr)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFileDragStop.bind(this),\n            helperBaseZindex: 800\n        });\n\n        // Folder dragging\n        // ---------------------------------------------------------------------\n\n        this._folderDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: () => {\n                // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                var $selected = this.sourceSelect.getSelectedItems(),\n                    draggees = [];\n\n                for (var i = 0; i < $selected.length; i++) {\n                    var $source = $selected.eq(i);\n\n                    if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                        continue;\n                    }\n\n                    if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                        draggees.push($source.parent()[0]);\n                    }\n                }\n\n                return $(draggees);\n            },\n\n            helper: $draggeeHelper => {\n                var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                    $helperNav = $('<nav/>').appendTo($helperSidebar),\n                    $helperUl = $('<ul/>').appendTo($helperNav);\n\n                $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                $draggeeHelper.children('a').addClass('sel');\n\n                // Match the style\n                $draggeeHelper.css({\n                    'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                    'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                    'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                    'padding-left': this._folderDrag.$draggee.css('padding-left')\n                });\n\n                return $helperSidebar;\n            },\n\n            dropTargets: () => {\n                var targets = [];\n\n                // Tag the dragged folder and it's subfolders\n                var draggedSourceIds = [];\n                this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                    draggedSourceIds.push($(this).data('key'));\n                });\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder and not one of the dragged folders\n                    var $source = this.$sources.eq(i),\n                        key = $source.data('key');\n\n                    if (!this._getFolderUidFromSourceKey(key)) {\n                        continue;\n                    }\n\n                    if (!Craft.inArray(key, draggedSourceIds)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFolderDragStop.bind(this),\n        });\n    },\n\n    /**\n     * On file drag stop\n     */\n    _onFileDragStop: function() {\n        if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n            // Keep it selected\n            var originatingSource = this.$source;\n\n            var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                originalAssetIds = [];\n\n            // For each file, prepare array data.\n            for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                originalAssetIds.push(originalAssetId);\n            }\n\n            // Are any files actually getting moved?\n            if (originalAssetIds.length) {\n                this.setIndexBusy();\n\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(originalAssetIds.length);\n                this.progressBar.showProgressBar();\n\n                // For each file to move a separate request\n                var parameterArray = [];\n                for (i = 0; i < originalAssetIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: {\n                            assetId: originalAssetIds[i],\n                            folderId: targetFolderId\n                        }\n                    });\n                }\n\n                // Define the callback for when all file moves are complete\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var response = responseArray[i];\n\n                        // Push prompt into prompt array\n                        if (response.conflict) {\n                            this.promptHandler.addPrompt({\n                                assetId: response.assetId,\n                                suggestedFilename: response.suggestedFilename,\n                                prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                            });\n                        }\n\n                        if (response.error) {\n                            alert(response.error);\n                        }\n                    }\n\n                    this.setIndexAvailable();\n                    this.progressBar.hideProgressBar();\n                    var reloadIndex = false;\n\n                    var performAfterMoveActions = function() {\n                        // Select original source\n                        this.sourceSelect.selectItem(originatingSource);\n\n                        // Make sure we use the correct offset when fetching the next page\n                        this._totalVisible -= this._assetDrag.$draggee.length;\n\n                        // And remove the elements that have been moved away\n                        for (var i = 0; i < originalAssetIds.length; i++) {\n                            $('[data-id=' + originalAssetIds[i] + ']').remove();\n                        }\n\n                        this.view.deselectAllElements();\n                        this._collapseExtraExpandedFolders(targetFolderId);\n\n                        if (reloadIndex) {\n                            this.updateElements();\n                        }\n                    };\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            var newParameterArray = [];\n\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    reloadIndex = true;\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'keepBoth') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            filename: returnData[i].suggestedFilename\n                                        }\n                                    });\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            force: true\n                                        }\n                                    });\n                                }\n                            }\n\n                            // Nothing to do, carry on\n                            if (newParameterArray.length === 0) {\n                                performAfterMoveActions.apply(this);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                // Move conflicting files again with resolutions now\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this._assetDrag.fadeOutHelpers();\n                        this.promptHandler.showBatchPrompts(promptCallback);\n                    } else {\n                        performAfterMoveActions.apply(this);\n                        this._assetDrag.fadeOutHelpers();\n                    }\n                };\n\n                // Initiate the file move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._assetDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * On folder drag stop\n     */\n    _onFolderDragStop: function() {\n        // Only move if we have a valid target and we're not trying to move into our direct parent\n        if (\n            this._folderDrag.$activeDropTarget &&\n            this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n        ) {\n            var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n            this._collapseExtraExpandedFolders(targetFolderId);\n\n            // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n            var folderIds = [];\n\n            for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                    folderId = $a.data('folder-id');\n\n                // Make sure it's not already in the target folder and use this single folder Id.\n                if (folderId != targetFolderId) {\n                    folderIds.push(folderId);\n                    break;\n                }\n            }\n\n            if (folderIds.length) {\n                folderIds.sort();\n                folderIds.reverse();\n\n                this.setIndexBusy();\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(folderIds.length);\n                this.progressBar.showProgressBar();\n\n                var parameterArray = [];\n\n                for (i = 0; i < folderIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-folder',\n                        params: {\n                            folderId: folderIds[i],\n                            parentId: targetFolderId\n                        }\n                    });\n                }\n\n                // Increment, so to avoid displaying folder files that are being moved\n                this.requestId++;\n\n                /*\n                 Here's the rundown:\n                 1) Send all the folders being moved\n                 2) Get results:\n                 a) For all conflicting, receive prompts and resolve them to get:\n                 b) For all valid move operations: by now server has created the needed folders\n                 in target destination. Server returns an array of file move operations\n                 c) server also returns a list of all the folder id changes\n                 d) and the data-id of node to be removed, in case of conflict\n                 e) and a list of folders to delete after the move\n                 3) From data in 2) build a large file move operation array\n                 4) Create a request loop based on this, so we can display progress bar\n                 5) when done, delete all the folders and perform other maintenance\n                 6) Champagne\n                 */\n\n                // This will hold the final list of files to move\n                var fileMoveList = [];\n\n                var newSourceKey = '';\n\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var data = responseArray[i];\n\n                        // If successful and have data, then update\n                        if (data.success) {\n                            if (data.transferList) {\n                                fileMoveList = data.transferList;\n                            }\n\n                            if (data.newFolderId) {\n                                newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                            }\n                        }\n\n                        // Push prompt into prompt array\n                        if (data.conflict) {\n                            data.prompt = {\n                                message: data.conflict,\n                                choices: this._folderConflictTemplate.choices\n                            };\n\n                            this.promptHandler.addPrompt(data);\n                        }\n\n                        if (data.error) {\n                            alert(data.error);\n                        }\n                    }\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            this.promptHandler.resetPrompts();\n\n                            var newParameterArray = [];\n\n                            var params = {};\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    params.force = true;\n                                }\n\n                                if (returnData[i].choice === 'merge') {\n                                    params.merge = true;\n                                }\n\n                                params.folderId = data.folderId;\n                                params.parentId = data.parentId;\n\n                                newParameterArray.push({\n                                    action: 'assets/move-folder',\n                                    params: params\n                                });\n                            }\n\n                            // Start working on them lists, baby\n                            if (newParameterArray.length === 0) {\n                                this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this.promptHandler.showBatchPrompts(promptCallback);\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                    } else {\n                        this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                    }\n                };\n\n                // Initiate the folder move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees until we get the Ajax response\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._folderDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * Really move the folder. Like really. For real.\n     */\n    _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n        this.progressBar.setItemCount(1);\n        this.progressBar.showProgressBar();\n\n        var moveCallback = folderDeleteList => {\n            // Delete the old folders\n            var counter = 0;\n            var limit = folderDeleteList.length;\n            for (var i = 0; i < folderDeleteList.length; i++) {\n                // When all folders are deleted, reload the sources.\n                Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, () => {\n                    if (++counter === limit) {\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        this._folderDrag.returnHelpersToDraggees();\n                        this.setInstanceState('selectedSource', newSourceKey);\n                        this.refreshSources();\n                    }\n                });\n            }\n        };\n\n        if (fileMoveList.length > 0) {\n            var parameterArray = [];\n\n            for (var i = 0; i < fileMoveList.length; i++) {\n                parameterArray.push({\n                    action: 'assets/move-asset',\n                    params: fileMoveList[i]\n                });\n            }\n            this._performBatchRequests(parameterArray, function() {\n                moveCallback(folderDeleteList);\n            });\n        } else {\n            moveCallback(folderDeleteList);\n        }\n    },\n\n    /**\n     * Returns the root level source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getRootSource: function($source) {\n        var $parent;\n        while (($parent = this._getParentSource($source)) && $parent.length) {\n            $source = $parent;\n        }\n        return $source;\n    },\n\n    /**\n     * Get parent source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getParentSource: function($source) {\n        if (this._getSourceLevel($source) > 1) {\n            return $source.parent().parent().siblings('a');\n        }\n    },\n\n    _selectSourceByFolderId: function(targetFolderId) {\n        var $targetSource = this._getSourceByKey(targetFolderId);\n\n        // Make sure that all the parent sources are expanded and this source is visible.\n        var $parentSources = $targetSource.parent().parents('li');\n\n        for (var i = 0; i < $parentSources.length; i++) {\n            var $parentSource = $($parentSources[i]);\n\n            if (!$parentSource.hasClass('expanded')) {\n                $parentSource.children('.toggle').trigger('click');\n            }\n        }\n\n        this.selectSource($targetSource);\n        this.updateElements();\n    },\n\n    /**\n     * Initialize the uploader.\n     *\n     * @private\n     */\n    afterInit: function() {\n        if (!this.$uploadButton) {\n            this.$uploadButton = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                'data-icon': 'upload',\n                style: 'position: relative; overflow: hidden;',\n                text: Craft.t('app', 'Upload files'),\n            });\n            this.addButton(this.$uploadButton);\n\n            this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n        }\n\n        this.promptHandler = new Craft.PromptHandler();\n        this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            fileInput: this.$uploadInput,\n            dropZone: this.$container\n        };\n\n        options.events = {\n            fileuploadstart: this._onUploadStart.bind(this),\n            fileuploadprogressall: this._onUploadProgress.bind(this),\n            fileuploaddone: this._onUploadComplete.bind(this),\n        };\n\n        if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        this._currentUploaderSettings = options;\n\n        this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n        this.$uploadButton.on('click', () => {\n            if (this.$uploadButton.hasClass('disabled')) {\n                return;\n            }\n            if (!this.isIndexBusy) {\n                this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n            }\n        });\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific volume in the URL?\n        if (this.settings.context === 'index' && typeof defaultVolumeHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n                if ($source.data('volume-handle') === defaultVolumeHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    onSelectSource: function() {\n        var $source = this._getSourceByKey(this.sourceKey);\n        var folderId = $source.data('folder-id');\n\n        if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n            this.uploader.setParams({\n                folderId: this.$source.attr('data-folder-id')\n            });\n            this.$uploadButton.removeClass('disabled');\n        } else {\n            this.$uploadButton.addClass('disabled');\n        }\n\n        // Update the URL if we're on the Assets index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'assets';\n            var $rootSource = this._getRootSource($source);\n            if ($rootSource && $rootSource.data('volume-handle')) {\n                uri += '/' + $rootSource.data('volume-handle');\n            }\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n\n        this.base();\n    },\n\n    _getFolderUidFromSourceKey: function(sourceKey) {\n        var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n        return m ? m[1] : null;\n    },\n\n    startSearching: function() {\n        // Does this source have subfolders?\n        if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n            if (this.$includeSubfoldersContainer === null) {\n                var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                    this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                    this.updateElements();\n                });\n            } else {\n                this.$includeSubfoldersContainer.velocity('stop');\n            }\n\n            var checked = this.getSelectedSourceState('includeSubfolders', false);\n            this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: 0,\n                opacity: 1\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = true;\n        }\n\n        this.base();\n    },\n\n    stopSearching: function() {\n        if (this.showingIncludeSubfoldersCheckbox) {\n            this.$includeSubfoldersContainer.velocity('stop');\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: -25,\n                opacity: 0\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = false;\n        }\n\n        this.base();\n    },\n\n    getViewParams: function() {\n        var data = this.base();\n\n        if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n            data.criteria.includeSubfolders = true;\n        }\n\n        return data;\n    },\n\n    /**\n     * React on upload submit.\n     *\n     * @private\n     */\n    _onUploadStart: function() {\n        this.setIndexBusy();\n\n        // Initial values\n        this._positionProgressBar();\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n\n        this.promptHandler.resetPrompts();\n    },\n\n    /**\n     * Update uploaded byte count.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On Upload Complete.\n     */\n    _onUploadComplete: function(event, data) {\n        var response = data.result;\n        var filename = data.files[0].name;\n\n        var doReload = true;\n\n        if (response.success || response.conflict) {\n            // Add the uploaded file to the selected ones, if appropriate\n            this._uploadedAssetIds.push(response.assetId);\n\n            // If there is a prompt, add it to the queue\n            if (response.conflict) {\n                response.prompt = {\n                    message: Craft.t('app', response.conflict, {file: response.filename}),\n                    choices: this._fileConflictTemplate.choices\n                };\n\n                this.promptHandler.addPrompt(response);\n            }\n\n            Craft.cp.runQueue();\n        } else {\n            if (response.error) {\n                alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n            } else {\n                alert(Craft.t('app', 'Upload failed for {filename}.', {filename}));\n            }\n\n            doReload = false;\n        }\n\n        // For the last file, display prompts, if any. If not - just update the element view.\n        if (this.uploader.isLastUpload()) {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n\n            if (this.promptHandler.getPromptCount()) {\n                this.promptHandler.showBatchPrompts(this._uploadFollowup.bind(this));\n            } else {\n                if (doReload) {\n                    this._updateAfterUpload();\n                }\n            }\n        }\n    },\n\n    /**\n     * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n     *\n     * @private\n     */\n    _updateAfterUpload: function() {\n        if (this.settings.context !== 'index') {\n            this.setSortAttribute('dateModified');\n            this.setSortDirection('desc');\n        }\n        this.updateElements();\n    },\n\n    /**\n     * Follow up to an upload that triggered at least one conflict resolution prompt.\n     *\n     * @param returnData\n     * @private\n     */\n    _uploadFollowup: function(returnData) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n\n        this.promptHandler.resetPrompts();\n\n        var finalCallback = () => {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n            this._updateAfterUpload();\n        };\n\n        this.progressBar.setItemCount(returnData.length);\n\n        var doFollowup = (parameterArray, parameterIndex, callback) => {\n            var postData = {};\n            var action = null;\n\n            var followupCallback = (data, textStatus) => {\n                if (textStatus === 'success' && data.assetId) {\n                    this._uploadedAssetIds.push(data.assetId);\n                } else if (data.error) {\n                    alert(data.error);\n                }\n                parameterIndex++;\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (parameterIndex === parameterArray.length) {\n                    callback();\n                } else {\n                    doFollowup(parameterArray, parameterIndex, callback);\n                }\n            };\n\n            if (parameterArray[parameterIndex].choice === 'replace') {\n                action = 'assets/replace-file';\n                postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                if (parameterArray[parameterIndex].conflictingAssetId) {\n                    postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                } else {\n                    postData.targetFilename = parameterArray[parameterIndex].filename;\n                }\n            } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                action = 'assets/delete-asset';\n                postData.assetId = parameterArray[parameterIndex].assetId;\n            }\n\n            if (!action) {\n                // We don't really need to do another request, so let's pretend that already happened\n                followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n            } else {\n                Craft.postActionRequest(action, postData, followupCallback);\n            }\n        };\n\n        this.progressBar.showProgressBar();\n        doFollowup(returnData, 0, finalCallback);\n    },\n\n    /**\n     * Perform actions after updating elements\n     * @private\n     */\n    onUpdateElements: function() {\n        this._onUpdateElements(false, this.view.getAllElements());\n        this.view.on('appendElements', ev => {\n            this._onUpdateElements(true, ev.newElements);\n        });\n\n        this.base();\n    },\n\n    /**\n     * Do the after-update initializations\n     * @private\n     */\n    _onUpdateElements: function(append, $newElements) {\n        if (this.settings.context === 'index') {\n            if (!append) {\n                this._assetDrag.removeAllItems();\n            }\n\n            this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n        }\n\n        // See if we have freshly uploaded files to add to selection\n        if (this._uploadedAssetIds.length) {\n            if (this.view.settings.selectable) {\n                for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                    this.view.selectElementById(this._uploadedAssetIds[i]);\n                }\n            }\n\n            // Reset the list.\n            this._uploadedAssetIds = [];\n        }\n\n        this.base(append, $newElements);\n\n        this.removeListener(this.$elements, 'keydown');\n        this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n        this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item).find('.element');\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    _onDragStart: function() {\n        this._tempExpandedFolders = [];\n    },\n\n    /**\n     * Get File Drag Helper\n     */\n    _getFileDragHelper: function($element) {\n        var currentView = this.getSelectedSourceState('mode');\n        var $outerContainer;\n        var $innerContainer;\n\n        switch (currentView) {\n            case 'table': {\n                $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                var $tbody = $('<tbody/>').appendTo($table);\n\n                $element.appendTo($tbody);\n\n                // Copy the column widths\n                this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                var $helperCells = $element.children();\n\n                for (var i = 0; i < $helperCells.length; i++) {\n                    // Hard-set the cell widths\n                    var $helperCell = $($helperCells[i]);\n\n                    // Skip the checkbox cell\n                    if ($helperCell.hasClass('checkbox-cell')) {\n                        $helperCell.remove();\n                        $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                        continue;\n                    }\n\n                    var $firstRowCell = $(this._$firstRowCells[i]),\n                        width = $firstRowCell.width();\n\n                    $firstRowCell.width(width);\n                    $helperCell.width(width);\n                }\n\n                return $outerContainer;\n            }\n            case 'thumbs': {\n                $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                $element.appendTo($innerContainer);\n\n                return $outerContainer;\n            }\n        }\n\n        return $();\n    },\n\n    /**\n     * On Drop Target Change\n     */\n    _onDropTargetChange: function($dropTarget) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        if ($dropTarget) {\n            var folderId = $dropTarget.data('folder-id');\n\n            if (folderId) {\n                this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                    this._expandDropTargetFolderTimeout = setTimeout(this._expandFolder.bind(this), 500);\n                }\n            } else {\n                this.dropTargetFolder = null;\n            }\n        }\n\n        if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n            // Temporarily remove the .sel class on the active source\n            this.$source.removeClass('sel');\n        } else {\n            this.$source.addClass('sel');\n        }\n    },\n\n    /**\n     * Collapse Extra Expanded Folders\n     */\n    _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        // If a source ID is passed in, exclude its parents\n        var $excludedSources;\n\n        if (dropTargetFolderId) {\n            $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n        }\n\n        for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n            var $source = this._tempExpandedFolders[i];\n\n            // Check the parent list, if a source id is passed in\n            if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                this._collapseFolder($source);\n                this._tempExpandedFolders.splice(i, 1);\n            }\n        }\n    },\n\n    _getSourceByKey: function(key) {\n        return this.$sources.filter('[data-key$=\"' + key + '\"]');\n    },\n\n    _hasSubfolders: function($source) {\n        return $source.siblings('ul').find('li').length;\n    },\n\n    _isExpanded: function($source) {\n        return $source.parent('li').hasClass('expanded');\n    },\n\n    _expandFolder: function() {\n        // Collapse any temp-expanded drop targets that aren't parents of this one\n        this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n        this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n        // Keep a record of that\n        this._tempExpandedFolders.push(this.dropTargetFolder);\n    },\n\n    _collapseFolder: function($source) {\n        if ($source.parent().hasClass('expanded')) {\n            $source.siblings('.toggle').trigger('click');\n        }\n    },\n\n    _createFolderContextMenu: function($source) {\n        // Make sure it's a volume folder\n        if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n            return;\n        }\n\n        var menuOptions = [\n            {\n                label: Craft.t('app', 'New subfolder'),\n                onClick: () => {\n                    this._createSubfolder($source);\n                },\n            },\n        ];\n\n        // For all folders that are not top folders\n        if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n            menuOptions.push({\n                label: Craft.t('app', 'Rename folder'),\n                onClick: () => {\n                    this._renameFolder($source);\n                },\n            });\n            menuOptions.push({\n                label: Craft.t('app', 'Delete folder'),\n                onClick: () => {\n                    this._deleteFolder($source);\n                },\n            });\n        }\n\n        new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n    },\n\n    _createSubfolder: function($parentFolder) {\n        var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n        if (subfolderName) {\n            var params = {\n                parentId: $parentFolder.data('folder-id'),\n                folderName: subfolderName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/create-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    this._prepareParentForChildren($parentFolder);\n\n                    var $subfolder = $(\n                        '<li>' +\n                        '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                        ' data-folder-id=\"' + data.folderId + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                        '>' +\n                        data.folderName +\n                        '</a>' +\n                        '</li>'\n                    );\n\n                    var $a = $subfolder.children('a:first');\n                    this._appendSubfolder($parentFolder, $subfolder);\n                    this.initSource($a);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    _deleteFolder: function($targetFolder) {\n        if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n            var params = {\n                folderId: $targetFolder.data('folder-id')\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/delete-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    var $parentFolder = this._getParentSource($targetFolder);\n\n                    // Remove folder and any trace from its parent, if needed\n                    this.deinitSource($targetFolder);\n\n                    $targetFolder.parent().remove();\n                    this._cleanUpTree($parentFolder);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    /**\n     * Rename\n     */\n    _renameFolder: function($targetFolder) {\n        var oldName = $.trim($targetFolder.text()),\n            newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n        if (newName && newName !== oldName) {\n            var params = {\n                folderId: $targetFolder.data('folder-id'),\n                newName: newName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/rename-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    $targetFolder.text(data.newName);\n\n                    // If the current folder was renamed.\n                    if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                        this.updateElements();\n                    }\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, 'json');\n        }\n    },\n\n    /**\n     * Prepare a source folder for children folder.\n     *\n     * @param $parentFolder\n     * @private\n     */\n    _prepareParentForChildren: function($parentFolder) {\n        if (!this._hasSubfolders($parentFolder)) {\n            $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n            this.initSourceToggle($parentFolder);\n        }\n    },\n\n    /**\n     * Appends a subfolder to the parent folder at the correct spot.\n     *\n     * @param $parentFolder\n     * @param $subfolder\n     * @private\n     */\n    _appendSubfolder: function($parentFolder, $subfolder) {\n        var $subfolderList = $parentFolder.siblings('ul'),\n            $existingChildren = $subfolderList.children('li'),\n            subfolderLabel = $.trim($subfolder.children('a:first').text()),\n            folderInserted = false;\n\n        for (var i = 0; i < $existingChildren.length; i++) {\n            var $existingChild = $($existingChildren[i]);\n\n            if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                $existingChild.before($subfolder);\n                folderInserted = true;\n                break;\n            }\n        }\n\n        if (!folderInserted) {\n            $parentFolder.siblings('ul').append($subfolder);\n        }\n    },\n\n    _cleanUpTree: function($parentFolder) {\n        if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n            this.deinitSourceToggle($parentFolder);\n            $parentFolder.siblings('ul').remove();\n            $parentFolder.siblings('.toggle').remove();\n            $parentFolder.parent().removeClass('expanded');\n        }\n    },\n\n    _positionProgressBar: function() {\n        if (!this.progressBar) {\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n        }\n\n        var $container = $(),\n            scrollTop = 0,\n            offset = 0;\n\n        if (this.settings.context === 'index') {\n            $container = this.progressBar.$progressBar.closest('#content');\n            scrollTop = Garnish.$win.scrollTop();\n        } else {\n            $container = this.progressBar.$progressBar.closest('.main');\n            scrollTop = this.$main.scrollTop();\n        }\n\n        var containerTop = $container.offset().top;\n        var diff = scrollTop - containerTop;\n        var windowHeight = Garnish.$win.height();\n\n        if ($container.height() > windowHeight) {\n            offset = (windowHeight / 2) - 6 + diff;\n        } else {\n            offset = ($container.height() / 2) - 6;\n        }\n\n        if (this.settings.context !== 'index') {\n            offset = scrollTop + (($container.height() / 2) - 6);\n        }\n\n        this.progressBar.$progressBar.css({\n            top: offset\n        });\n    },\n\n    _performBatchRequests: function(parameterArray, finalCallback) {\n        var responseArray = [];\n\n        var doRequest = parameters => {\n            Craft.postActionRequest(parameters.action, parameters.params, (data, textStatus) => {\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (textStatus === 'success') {\n                    responseArray.push(data);\n\n                    // If assets were just merged we should get the reference tags updated right away\n                    Craft.cp.runQueue();\n                }\n\n                if (responseArray.length >= parameterArray.length) {\n                    finalCallback(responseArray);\n                }\n            });\n        };\n\n        for (var i = 0; i < parameterArray.length; i++) {\n            doRequest(parameterArray[i]);\n        }\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend({\n    requestId: 0,\n    hud: null,\n    $uploadBtn: null,\n    uploader: null,\n    progressBar: null,\n\n    originalFilename: '',\n    originalExtension: '',\n\n    init: function() {\n        if (arguments.length > 0 && typeof arguments[0] === 'object') {\n            arguments[0].editorSettings = {\n                onShowHud: this.resetOriginalFilename.bind(this),\n                onCreateForm: this._renameHelper.bind(this),\n                validators: [\n                    this.validateElementForm.bind(this),\n                ],\n            };\n        }\n\n        this.base.apply(this, arguments);\n\n        if (this.settings.canUpload) {\n            this._attachUploader();\n        }\n\n        this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n        this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.elementSelect.$focusedItem;\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item);\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n    },\n\n    /**\n     * Create the element editor\n     */\n    createElementEditor: function($element) {\n        return this.base($element, {\n            params: {\n                defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n            },\n            input: this\n        });\n    },\n\n    /**\n     * Attach the uploader with drag event handler\n     */\n    _attachUploader: function() {\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            dropZone: this.$container,\n            formData: {\n                fieldId: this.settings.fieldId,\n            }\n        };\n\n        if (this.settings.sourceElementId) {\n            options.formData.elementId = this.settings.sourceElementId;\n        }\n\n        if (this.settings.criteria.siteId) {\n            options.formData.siteId = this.settings.criteria.siteId;\n        }\n\n        if (this.$addElementBtn) {\n            this.$uploadBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn dashed',\n                'data-icon': 'upload',\n                text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n            }).insertAfter(this.$addElementBtn);\n            options.fileInput = $('<input/>', {\n                type: 'file',\n                class: 'hidden',\n                multiple: this.settings.limit != 1,\n            }).insertAfter(this.$uploadBtn);\n\n            // Trigger a window resize in case the field is inside an element editor HUD\n            Garnish.$win.trigger('resize');\n        }\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        if (typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        options.canAddMoreFiles = this.canAddMoreFiles.bind(this);\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        if (this.$uploadBtn) {\n            this.$uploadBtn.on('click', ev => {\n                // We can't store a reference to the file input, because it gets replaced with a new input\n                // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                this.$uploadBtn.next('input[type=file]').trigger('click');\n            });\n        }\n    },\n\n    refreshThumbnail: function(elementId) {\n        var parameters = {\n            elementId: elementId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, data => {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                this.thumbLoader.load($existing);\n            }\n        });\n    },\n\n    /**\n     * Add the freshly uploaded file to the input field.\n     */\n    selectUploadedFile: function(element) {\n        // Check if we're able to add new elements\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        var $newElement = element.$element;\n\n        // Make a couple tweaks\n        $newElement.addClass('removable');\n        $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        $newElement.appendTo(this.$elementsContainer);\n\n        var margin = -($newElement.outerWidth() + 10);\n\n        this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addElementBtn.velocity(animateCss, 'fast');\n\n        this.addElements($newElement);\n\n        delete this.modal;\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function() {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var parameters = {\n                elementId: data.result.assetId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, data => {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var html = $(data.html);\n                    Craft.appendHeadHtml(data.headHtml);\n                    this.selectUploadedFile(Craft.getElementInfo(html));\n                }\n\n                // Last file\n                if (this.uploader.isLastUpload()) {\n                    this.progressBar.hideProgressBar();\n                    this.$container.removeClass('uploading');\n\n                    if (window.draftEditor) {\n                        window.draftEditor.checkForm();\n                    }\n                }\n            });\n\n            Craft.cp.runQueue();\n        }\n    },\n\n    /**\n     * We have to take into account files about to be added as well\n     */\n    canAddMoreFiles: function(slotsTaken) {\n        return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n    },\n\n    /**\n     * Parse the passed filename into the base filename and extension.\n     *\n     * @param filename\n     * @returns {{extension: string, baseFileName: string}}\n     */\n    _parseFilename: function(filename) {\n        var parts = filename.split('.'),\n            extension = '';\n\n        if (parts.length > 1) {\n            extension = parts.pop();\n        }\n        var baseFileName = parts.join('.');\n        return {extension: extension, baseFileName: baseFileName};\n    },\n\n    /**\n     * A helper function or the filename field.\n     * @private\n     */\n    _renameHelper: function($form) {\n        $('.renameHelper', $form).on('focus', e => {\n            var input = e.currentTarget,\n                filename = this._parseFilename(input.value);\n\n            if (this.originalFilename === '' && this.originalExtension === '') {\n                this.originalFilename = filename.baseFileName;\n                this.originalExtension = filename.extension;\n            }\n\n            var startPos = 0,\n                endPos = filename.baseFileName.length;\n\n            if (typeof input.selectionStart !== 'undefined') {\n                input.selectionStart = startPos;\n                input.selectionEnd = endPos;\n            } else if (document.selection && document.selection.createRange) {\n                // IE branch\n                input.select();\n                var range = document.selection.createRange();\n                range.collapse(true);\n                range.moveEnd(\"character\", endPos);\n                range.moveStart(\"character\", startPos);\n                range.select();\n            }\n        });\n    },\n\n    resetOriginalFilename: function() {\n        this.originalFilename = \"\";\n        this.originalExtension = \"\";\n    },\n\n    validateElementForm: function() {\n        var $filenameField = $('.renameHelper', this.elementEditor.hud.$hud.data('elementEditor').$form);\n        var filename = this._parseFilename($filenameField.val());\n\n        if (filename.extension !== this.originalExtension) {\n            // Blank extension\n            if (filename.extension === '') {\n                // If filename changed as well, assume removal of extension a mistake\n                if (this.originalFilename !== filename.baseFileName) {\n                    $filenameField.val(filename.baseFileName + '.' + this.originalExtension);\n                    return true;\n                } else {\n                    // If filename hasn't changed, make sure they want to remove extension\n                    return confirm(Craft.t('app', \"Are you sure you want to remove the extension “.{ext}”?\", {ext: this.originalExtension}));\n                }\n            } else {\n                // If the extension has changed, make sure it s intentional\n                return confirm(Craft.t('app', \"Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?\",\n                    {\n                        oldExt: this.originalExtension,\n                        newExt: filename.extension\n                    }));\n            }\n        }\n        return true;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend({\n    $selectTransformBtn: null,\n    _selectedTransform: null,\n\n    init: function(elementType, settings) {\n        settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n        this.base(elementType, settings);\n\n        if (settings.transforms.length) {\n            this.createSelectTransformButton(settings.transforms);\n        }\n    },\n\n    createSelectTransformButton: function(transforms) {\n        if (!transforms || !transforms.length) {\n            return;\n        }\n\n        var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n        this.$selectBtn.appendTo($btnGroup);\n\n        this.$selectTransformBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn disabled',\n            text: Craft.t('app', 'Select transform'),\n        }).appendTo($btnGroup);\n\n        var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n            $menuList = $('<ul></ul>').appendTo($menu);\n\n        for (var i = 0; i < transforms.length; i++) {\n            $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n        }\n\n        var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n            onOptionSelect: this.onSelectTransform.bind(this),\n        });\n        MenuButton.disable();\n\n        this.$selectTransformBtn.data('menuButton', MenuButton);\n    },\n\n    onSelectionChange: function(ev) {\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            allowTransforms = false;\n\n        if ($selectedElements.length && this.settings.transforms.length) {\n            allowTransforms = true;\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                    break;\n                }\n            }\n        }\n\n        var MenuBtn = null;\n\n        if (this.$selectTransformBtn) {\n            MenuBtn = this.$selectTransformBtn.data('menuButton');\n        }\n\n        if (allowTransforms) {\n            if (MenuBtn) {\n                MenuBtn.enable();\n            }\n\n            this.$selectTransformBtn.removeClass('disabled');\n        } else if (this.$selectTransformBtn) {\n            if (MenuBtn) {\n                MenuBtn.disable();\n            }\n\n            this.$selectTransformBtn.addClass('disabled');\n        }\n\n        this.base();\n    },\n\n    onSelectTransform: function(option) {\n        var transform = $(option).data('transform');\n        this.selectImagesWithTransform(transform);\n    },\n\n    selectImagesWithTransform: function(transform) {\n        // First we must get any missing transform URLs\n        if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n            Craft.AssetSelectorModal.transformUrls[transform] = {};\n        }\n\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            imageIdsWithMissingUrls = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $item = $($selectedElements[i]),\n                elementId = Craft.getElementInfo($item).id;\n\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                imageIdsWithMissingUrls.push(elementId);\n            }\n        }\n\n        if (imageIdsWithMissingUrls.length) {\n            this.showFooterSpinner();\n\n            this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, () => {\n                this.hideFooterSpinner();\n                this.selectImagesWithTransform(transform);\n            });\n        } else {\n            this._selectedTransform = transform;\n            this.selectElements();\n            this._selectedTransform = null;\n        }\n    },\n\n    fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n        var elementId = imageIdsWithMissingUrls.pop();\n\n        var data = {\n            assetId: elementId,\n            handle: transform\n        };\n\n        Craft.postActionRequest('assets/generate-transform', data, (response, textStatus) => {\n            Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n            if (textStatus === 'success') {\n                if (response.url) {\n                    Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                }\n            }\n\n            // More to load?\n            if (imageIdsWithMissingUrls.length) {\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n            } else {\n                callback();\n            }\n        });\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = this.base($selectedElements);\n\n        if (this._selectedTransform) {\n            for (var i = 0; i < info.length; i++) {\n                var elementId = info[i].id;\n\n                if (\n                    typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                    Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                ) {\n                    info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                }\n            }\n        }\n\n        return info;\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo, this._selectedTransform);\n    }\n}, {\n    defaults: {\n        canSelectImageTransforms: false,\n        transforms: []\n    },\n\n    transformUrls: {}\n});\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend({\n    remainingSessionTime: null,\n    checkRemainingSessionTimer: null,\n    showLoginModalTimer: null,\n    decrementLogoutWarningInterval: null,\n\n    showingLogoutWarningModal: false,\n    showingLoginModal: false,\n\n    logoutWarningModal: null,\n    loginModal: null,\n\n    $logoutWarningPara: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $loginBtn: null,\n    $loginErrorPara: null,\n\n    submitLoginIfLoggedOut: false,\n\n    /**\n     * Init\n     */\n    init: function() {\n        this.updateRemainingSessionTime(Craft.remainingSessionTime);\n    },\n\n    /**\n     * Sets a timer for the next time to check the auth timeout.\n     */\n    setCheckRemainingSessionTimer: function(seconds) {\n        if (this.checkRemainingSessionTimer) {\n            clearTimeout(this.checkRemainingSessionTimer);\n        }\n\n        this.checkRemainingSessionTimer = setTimeout(this.checkRemainingSessionTime.bind(this), seconds * 1000);\n    },\n\n    /**\n     * Pings the server to see how many seconds are left on the current user session, and handles the response.\n     */\n    checkRemainingSessionTime: function(extendSession) {\n        $.ajax({\n            url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n            type: 'GET',\n            dataType: 'json',\n            complete: (jqXHR, textStatus) => {\n                if (textStatus === 'success') {\n                    if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                        Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                    }\n\n                    this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                    this.submitLoginIfLoggedOut = false;\n                } else {\n                    this.updateRemainingSessionTime(-1);\n                }\n            },\n        });\n    },\n\n    /**\n     * Updates our record of the auth timeout, and handles it.\n     */\n    updateRemainingSessionTime: function(remainingSessionTime) {\n        this.remainingSessionTime = parseInt(remainingSessionTime);\n\n        // Are we within the warning window?\n        if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n            // Is there still time to renew the session?\n            if (this.remainingSessionTime) {\n                if (!this.showingLogoutWarningModal) {\n                    // Show the warning modal\n                    this.showLogoutWarningModal();\n                }\n\n                // Will the session expire before the next checkup?\n                if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                    if (this.showLoginModalTimer) {\n                        clearTimeout(this.showLoginModalTimer);\n                    }\n\n                    this.showLoginModalTimer = setTimeout(this.showLoginModal.bind(this), this.remainingSessionTime * 1000);\n                }\n            } else {\n                if (this.showingLoginModal) {\n                    if (this.submitLoginIfLoggedOut) {\n                        this.submitLogin();\n                    }\n                } else {\n                    // Show the login modal\n                    this.showLoginModal();\n                }\n            }\n\n            this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n        } else {\n            // Everything's good!\n            this.hideLogoutWarningModal();\n            this.hideLoginModal();\n\n            // Will be be within the minSafeSessionTime before the next update?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n            } else {\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the logout warning modal.\n     */\n    showLogoutWarningModal: function() {\n        var quickShow;\n\n        if (this.showingLoginModal) {\n            this.hideLoginModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLogoutWarningModal = true;\n\n        if (!this.logoutWarningModal) {\n            let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n            let $body = $('<div class=\"body\"/>').appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $logoutBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Log out now'),\n            }).appendTo($buttons);\n            let $renewSessionBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Keep me logged in'),\n            }).appendTo($buttons);\n\n            this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n            this.logoutWarningModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                onFadeIn: function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the renew button\n                        setTimeout(function() {\n                            $renewSessionBtn.trigger('focus');\n                        }, 100);\n                    }\n                }\n            });\n\n            this.addListener($logoutBtn, 'activate', 'logout');\n            this.addListener($form, 'submit', 'renewSession');\n        }\n\n        if (quickShow) {\n            this.logoutWarningModal.quickShow();\n        } else {\n            this.logoutWarningModal.show();\n        }\n\n        this.updateLogoutWarningMessage();\n\n        this.decrementLogoutWarningInterval = setInterval(this.decrementLogoutWarning.bind(this), 1000);\n    },\n\n    /**\n     * Updates the logout warning message indicating that the session is about to expire.\n     */\n    updateLogoutWarningMessage: function() {\n        this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n            time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n        }));\n\n        this.logoutWarningModal.updateSizeAndPosition();\n    },\n\n    decrementLogoutWarning: function() {\n        if (this.remainingSessionTime > 0) {\n            this.remainingSessionTime--;\n            this.updateLogoutWarningMessage();\n        }\n\n        if (this.remainingSessionTime === 0) {\n            clearInterval(this.decrementLogoutWarningInterval);\n        }\n    },\n\n    /**\n     * Hides the logout warning modal.\n     */\n    hideLogoutWarningModal: function(quick) {\n        this.showingLogoutWarningModal = false;\n\n        if (this.logoutWarningModal) {\n            if (quick) {\n                this.logoutWarningModal.quickHide();\n            } else {\n                this.logoutWarningModal.hide();\n            }\n\n            if (this.decrementLogoutWarningInterval) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the login modal.\n     */\n    showLoginModal: function() {\n        var quickShow;\n\n        if (this.showingLogoutWarningModal) {\n            this.hideLogoutWarningModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLoginModal = true;\n\n        if (!this.loginModal) {\n            var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$loginBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Login'),\n            }).appendTo($buttonContainer);\n            this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.loginModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark loginmodalshade',\n                onFadeIn: () => {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the password input\n                        setTimeout(() => {\n                            this.$passwordInput.trigger('focus');\n                        }, 100);\n                    }\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($form, 'submit', 'login');\n        }\n\n        if (quickShow) {\n            this.loginModal.quickShow();\n        } else {\n            this.loginModal.show();\n        }\n    },\n\n    /**\n     * Hides the login modal.\n     */\n    hideLoginModal: function(quick) {\n        this.showingLoginModal = false;\n\n        if (this.loginModal) {\n            if (quick) {\n                this.loginModal.quickHide();\n            } else {\n                this.loginModal.hide();\n            }\n        }\n    },\n\n    logout: function() {\n        $.get({\n            url: Craft.getActionUrl('users/logout'),\n            dataType: 'json',\n            success: () => {\n                Craft.redirectTo('');\n            },\n        });\n    },\n\n    renewSession: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        this.hideLogoutWarningModal();\n        this.checkRemainingSessionTime(true);\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$loginBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$loginBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    login: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.validatePassword()) {\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            if (typeof Craft.csrfTokenValue !== 'undefined') {\n                // Check the auth status one last time before sending this off,\n                // in case the user has already logged back in from another window/tab\n                this.submitLoginIfLoggedOut = true;\n                this.checkRemainingSessionTime();\n            } else {\n                this.submitLogin();\n            }\n        }\n    },\n\n    submitLogin: function() {\n        var data = {\n            loginName: Craft.username,\n            password: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/login', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.hideLoginModal();\n                    this.checkRemainingSessionTime();\n                } else {\n                    this.showLoginError(response.error);\n                    Garnish.shake(this.loginModal.$container);\n\n                    if (!Garnish.isMobileBrowser(true)) {\n                        this.$passwordInput.trigger('focus');\n                    }\n                }\n            } else {\n                this.showLoginError();\n            }\n        });\n    },\n\n    showLoginError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$loginErrorPara.text(error);\n        this.loginModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showLoginError('');\n    }\n}, {\n    checkInterval: 60,\n    minSafeSessionTime: 120\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend({\n    authManager: null,\n\n    $nav: null,\n    $mainContainer: null,\n    $alerts: null,\n    $crumbs: null,\n    $notificationContainer: null,\n    $main: null,\n    $primaryForm: null,\n    $headerContainer: null,\n    $header: null,\n    $mainContent: null,\n    $details: null,\n    $tabsContainer: null,\n    $tabsList: null,\n    $tabs: null,\n    $overflowTabBtn: null,\n    $overflowTabList: null,\n    $selectedTab: null,\n    selectedTabIndex: null,\n    $sidebarContainer: null,\n    $sidebar: null,\n    $contentContainer: null,\n    $edition: null,\n\n    $confirmUnloadForms: null,\n    $deltaForms: null,\n    $collapsibleTables: null,\n\n    fixedHeader: false,\n\n    enableQueue: true,\n    totalJobs: 0,\n    jobInfo: null,\n    displayedJobInfo: null,\n    displayedJobInfoUnchanged: 1,\n    trackJobProgressTimeout: null,\n    jobProgressIcon: null,\n\n    checkingForUpdates: false,\n    forcingRefreshOnUpdatesCheck: false,\n    includingDetailsOnUpdatesCheck: false,\n    checkForUpdatesCallbacks: null,\n\n    init: function() {\n        // Is this session going to expire?\n        if (Craft.remainingSessionTime !== 0) {\n            this.authManager = new Craft.AuthManager();\n        }\n\n        // Find all the key elements\n        this.$nav = $('#nav');\n        this.$mainContainer = $('#main-container');\n        this.$alerts = $('#alerts');\n        this.$crumbs = $('#crumbs');\n        this.$notificationContainer = $('#notifications');\n        this.$main = $('#main');\n        this.$primaryForm = $('#main-form');\n        this.$headerContainer = $('#header-container');\n        this.$header = $('#header');\n        this.$mainContent = $('#main-content');\n        this.$details = $('#details');\n        this.$sidebarContainer = $('#sidebar-container');\n        this.$sidebar = $('#sidebar');\n        this.$contentContainer = $('#content-container');\n        this.$collapsibleTables = $('table.collapsible');\n\n        this.updateSidebarMenuLabel();\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        if (this.$header.length) {\n            this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n            this.updateFixedHeader();\n        }\n\n        Garnish.$doc.ready(() => {\n            // Update responsive tables on window resize\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n            this.handleWindowResize();\n\n            // Fade the notification out two seconds after page load\n            var $errorNotifications = this.$notificationContainer.children('.error'),\n                $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n            $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n            $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n            // Wait a frame before initializing any confirm-unload forms,\n            // so other JS that runs on ready() has a chance to initialize\n            Garnish.requestAnimationFrame(this.initSpecialForms.bind(this));\n        });\n\n        // Alerts\n        if (this.$alerts.length) {\n            this.initAlerts();\n        }\n\n        // Toggles\n        this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n        this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n        // Does this page have a primary form?\n        if (!this.$primaryForm.length) {\n            this.$primaryForm = $('form[data-saveshortcut]:first');\n        }\n\n        // Does the primary form support the save shortcut?\n        if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n            let shortcuts = [];\n            let actions = this.$primaryForm.data('actions');\n            if (typeof actions === 'undefined') {\n                shortcuts.push([\n                    {\n                        keyCode: Garnish.S_KEY,\n                        ctrl: true,\n                    }, {\n                        redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                        retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                    }\n                ]);\n            } else {\n                for (let i = 0; i < actions.length; i++) {\n                    let action = actions[i];\n                    if (!action.shortcut) {\n                        continue;\n                    }\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                            shift: !!action.shift,\n                        }, {\n                            action: action.action,\n                            redirect: action.redirect,\n                            confirm: action.confirm,\n                            params: action.params,\n                            data: action.data,\n                            retainScroll: action.retainScroll,\n                        }\n                    ]);\n                }\n            }\n            for (let i = 0; i < shortcuts.length; i++) {\n                Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                    this.submitPrimaryForm(shortcuts[i][1]);\n                });\n            }\n        }\n\n        this.initTabs();\n\n        // Should we match the previous scroll position?\n        let scrollY = Craft.getLocalStorage('scrollY');\n        if (typeof scrollY !== 'undefined') {\n            Craft.removeLocalStorage('scrollY');\n            Garnish.$doc.ready(() => {\n                Garnish.requestAnimationFrame(() => {\n                    window.scrollTo(0, scrollY);\n                });\n            });\n        }\n\n        if ($.isTouchCapable()) {\n            this.$mainContainer.on('focus', 'input, textarea, .focusable-input', this._handleInputFocus.bind(this));\n            this.$mainContainer.on('blur', 'input, textarea, .focusable-input', this._handleInputBlur.bind(this));\n        }\n    },\n\n    initSpecialForms: function() {\n        // Look for forms that we should watch for changes on\n        this.$confirmUnloadForms = $('form[data-confirm-unload]');\n        this.$deltaForms = $('form[data-delta]');\n\n        if (!this.$confirmUnloadForms.length) {\n            return;\n        }\n\n        var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n        var $form, serialized;\n\n        for (var i = 0; i < $forms.length; i++) {\n            $form = $forms.eq(i);\n            if (!$form.data('initialSerializedValue')) {\n                if (typeof $form.data('serializer') === 'function') {\n                    serialized = $form.data('serializer')();\n                } else {\n                    serialized = $form.serialize();\n                }\n                $form.data('initialSerializedValue', serialized);\n            }\n            this.addListener($form, 'submit', function(ev) {\n                if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                    this.removeListener(Garnish.$win, 'beforeunload');\n                }\n                if (Garnish.hasAttr($form, 'data-delta')) {\n                    ev.preventDefault();\n                    var serialized;\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                    Craft.createForm(data)\n                        .appendTo(Garnish.$bod)\n                        .submit();\n                }\n            });\n        }\n\n        this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n            var confirmUnload = false;\n            var $form, serialized;\n            if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                confirmUnload = true;\n            } else {\n                for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                    $form = this.$confirmUnloadForms.eq(i);\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    if ($form.data('initialSerializedValue') !== serialized) {\n                        confirmUnload = true;\n                        break;\n                    }\n                }\n            }\n\n            if (confirmUnload) {\n                var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                if (ev) {\n                    ev.originalEvent.returnValue = message;\n                } else {\n                    window.event.returnValue = message;\n                }\n\n                return message;\n            }\n        });\n    },\n\n    _handleInputFocus: function() {\n        this.updateFixedHeader();\n    },\n\n    _handleInputBlur: function() {\n        this.updateFixedHeader();\n    },\n\n    /**\n     * Submits a form.\n     * @param {Object} [options]\n     * @param {string} [options.action] The `action` param value override\n     * @param {string} [options.redirect] The `redirect` param value override\n     * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n     * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n     * @param {Object} [options.data] Additional data to be passed to the submit event\n     * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n     */\n    submitPrimaryForm: function(options) {\n        // Give other stuff on the page a chance to prepare\n        this.trigger('beforeSaveShortcut');\n\n        if (typeof options !== 'object' || !$.isPlainObject(options)) {\n            options = {};\n        }\n\n        if (!options.redirect) {\n            options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n        }\n\n        if (!options.data) {\n            options.data = {};\n        }\n        options.data.saveShortcut = true;\n\n        Craft.submitForm(this.$primaryForm, options);\n    },\n\n    updateSidebarMenuLabel: function() {\n        var $item = this.$sidebar.find('a.sel:first');\n        var $label = $item.children('.label');\n        $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n        Garnish.$bod.removeClass('showing-sidebar');\n    },\n\n    toggleNav: function() {\n        Garnish.$bod.toggleClass('showing-nav');\n    },\n\n    toggleSidebar: function() {\n        Garnish.$bod.toggleClass('showing-sidebar');\n    },\n\n    initTabs: function() {\n        // Clear out all our old info in case the tabs were just replaced\n        this.$tabsList = this.$tabs = this.$overflowTabBtn = this.$overflowTabList = this.$selectedTab =\n            this.selectedTabIndex = null;\n\n        this.$tabsContainer = $('#tabs');\n        if (!this.$tabsContainer.length) {\n            this.$tabsContainer = null;\n            return;\n        }\n\n        this.$tabsList = this.$tabsContainer.find('> ul');\n        this.$tabs = this.$tabsList.find('> li');\n        this.$overflowTabBtn = $('#overflow-tab-btn');\n        if (!this.$overflowTabBtn.data('menubtn')) {\n            new Garnish.MenuBtn(this.$overflowTabBtn);\n        }\n        this.$overflowTabList = this.$overflowTabBtn.data('menubtn').menu.$container.find('> ul');\n        var i, $tab, $a, href;\n\n        for (i = 0; i < this.$tabs.length; i++) {\n            $tab = this.$tabs.eq(i);\n\n            // Does it link to an anchor?\n            $a = $tab.children('a');\n            href = $a.attr('href');\n            if (href && href.charAt(0) === '#') {\n                this.addListener($a, 'click', function(ev) {\n                    ev.preventDefault();\n                    this.selectTab(ev.currentTarget);\n                });\n\n                if (encodeURIComponent(href.substr(1)) === document.location.hash.substr(1)) {\n                    this.selectTab($a);\n                }\n            }\n\n            if (!this.$selectedTab && $a.hasClass('sel')) {\n                this._selectTab($a, i);\n            }\n        }\n    },\n\n    selectTab: function(tab) {\n        var $tab = $(tab);\n\n        if (this.$selectedTab) {\n            if (this.$selectedTab.get(0) === $tab.get(0)) {\n                return;\n            }\n            this.deselectTab();\n        }\n\n        $tab.addClass('sel');\n        var href = $tab.attr('href')\n        $(href).removeClass('hidden');\n        if (typeof history !== 'undefined') {\n            history.replaceState(undefined, undefined, href);\n        }\n        this._selectTab($tab, this.$tabs.index($tab.parent()));\n        this.updateTabs();\n        this.$overflowTabBtn.data('menubtn').menu.hide();\n    },\n\n    _selectTab: function($tab, index) {\n        if ($tab === this.$selectedTab) {\n            return;\n        }\n\n        this.$selectedTab = $tab;\n        this.selectedTabIndex = index;\n        if (index === 0) {\n            $('#content').addClass('square');\n        } else {\n            $('#content').removeClass('square');\n        }\n\n        Garnish.$win.trigger('resize');\n        // Fixes Redactor fixed toolbars on previously hidden panes\n        Garnish.$doc.trigger('scroll');\n\n        // If there is a revision menu, set its links to this tab ID\n        let href = $tab && $tab.attr('href');\n        if (href && href.charAt(0) === '#') {\n            let menubtn = $('#context-btn').menubtn().data('menubtn');\n            if (menubtn) {\n                for (let i = 0; i < menubtn.menu.$options.length; i++) {\n                    let a = menubtn.menu.$options[i];\n                    if (a.href) {\n                        a.href = a.href.match(/^[^#]*/)[0] + href;\n                    }\n                }\n            }\n        }\n    },\n\n    deselectTab: function() {\n        if (!this.$selectedTab) {\n            return;\n        }\n\n        this.$selectedTab.removeClass('sel');\n        if (this.$selectedTab.attr('href').charAt(0) === '#') {\n            $(this.$selectedTab.attr('href')).addClass('hidden');\n        }\n        this._selectTab(null, null);\n    },\n\n    handleWindowResize: function() {\n        this.updateTabs();\n        this.updateResponsiveTables();\n    },\n\n    updateTabs: function() {\n        if (!this.$tabsContainer) {\n            return;\n        }\n\n        var maxWidth = Math.floor(this.$tabsContainer.width()) - 40;\n        var totalWidth = 0;\n        var showOverflowMenu = false;\n        var tabMargin = Garnish.$bod.width() >= 768 ? -12 : -7;\n        var $tab;\n\n        // Start with the selected tab, because that needs to be visible\n        if (this.$selectedTab) {\n            this.$selectedTab.parent('li').appendTo(this.$tabsList);\n            totalWidth = Math.ceil(this.$selectedTab.parent('li').width());\n        }\n\n        for (var i = 0; i < this.$tabs.length; i++) {\n            $tab = this.$tabs.eq(i).appendTo(this.$tabsList);\n            if (i !== this.selectedTabIndex) {\n                totalWidth += Math.ceil($tab.width());\n                // account for the negative margin\n                if (i !== 0 || this.$selectedTab) {\n                    totalWidth += tabMargin;\n                }\n            }\n\n            if (i === this.selectedTabIndex || totalWidth <= maxWidth) {\n                $tab.find('> a').removeAttr('role');\n            } else {\n                $tab.appendTo(this.$overflowTabList).find('> a').attr('role', 'option');\n                showOverflowMenu = true;\n            }\n        }\n\n        if (showOverflowMenu) {\n            this.$overflowTabBtn.removeClass('hidden');\n        } else {\n            this.$overflowTabBtn.addClass('hidden');\n        }\n    },\n\n    updateResponsiveTables: function() {\n        for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n            this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n            this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n            this.updateResponsiveTables._check = false;\n\n            if (this.updateResponsiveTables._containerWidth > 0) {\n                // Is this the first time we've checked this table?\n                if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                    this.updateResponsiveTables._check = true;\n                } else {\n                    this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                    // Getting wider?\n                    if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                        if (this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._$table.removeClass('collapsed');\n                            this.updateResponsiveTables._check = true;\n                        }\n                    } else if (!this.updateResponsiveTables._isCollapsed) {\n                        this.updateResponsiveTables._check = true;\n                    }\n                }\n\n                // Are we checking the table width?\n                if (this.updateResponsiveTables._check) {\n                    if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                        this.updateResponsiveTables._$table.addClass('collapsed');\n                    }\n                }\n\n                // Remember the container width for next time\n                this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n            }\n        }\n    },\n\n    updateFixedHeader: function() {\n        // Have we scrolled passed the top of #main?\n        if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n            if (!this.fixedHeader) {\n                var headerHeight = this.$headerContainer.height();\n\n                // Hard-set the minimum content container height\n                this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                // Hard-set the header container height\n                this.$headerContainer.height(headerHeight);\n                Garnish.$bod.addClass('fixed-header');\n\n                // Fix the sidebar and details pane positions if they are taller than #content-container\n                var contentHeight = this.$contentContainer.outerHeight();\n                var $detailsHeight = this.$details.outerHeight();\n                var css = {\n                    top: headerHeight + 'px',\n                    'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                };\n                this.$sidebar.addClass('fixed').css(css);\n                this.$details.addClass('fixed').css(css);\n                this.fixedHeader = true;\n            }\n        } else if (this.fixedHeader) {\n            this.$headerContainer.height('auto');\n            Garnish.$bod.removeClass('fixed-header');\n            this.$contentContainer.css('min-height', '');\n            this.$sidebar.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.$details.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.fixedHeader = false;\n        }\n    },\n\n    /**\n     * Dispays a notification.\n     *\n     * @param {string} type\n     * @param {string} message\n     */\n    displayNotification: function(type, message) {\n        var notificationDuration = Craft.CP.notificationDuration;\n\n        if (type === 'error') {\n            notificationDuration *= 2;\n        }\n\n        var $notification = $('<div class=\"notification ' + type + '\">' + message + '</div>')\n            .appendTo(this.$notificationContainer);\n\n        var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n        $notification\n            .hide()\n            .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n            .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n            .delay(notificationDuration)\n            .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                complete: function() {\n                    $notification.remove();\n                }\n            });\n\n        this.trigger('displayNotification', {\n            notificationType: type,\n            message: message\n        });\n    },\n\n    /**\n     * Displays a notice.\n     *\n     * @param {string} message\n     */\n    displayNotice: function(message) {\n        this.displayNotification('notice', message);\n    },\n\n    /**\n     * Displays an error.\n     *\n     * @param {string} message\n     */\n    displayError: function(message) {\n        if (!message) {\n            message = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.displayNotification('error', message);\n    },\n\n    fetchAlerts: function() {\n        var data = {\n            path: Craft.path\n        };\n\n        Craft.queueActionRequest('app/get-cp-alerts', data, this.displayAlerts.bind(this));\n    },\n\n    displayAlerts: function(alerts) {\n        this.$alerts.remove();\n\n        if (Garnish.isArray(alerts) && alerts.length) {\n            this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n            for (var i = 0; i < alerts.length; i++) {\n                $('<li>' + alerts[i] + '</li>').appendTo(this.$alerts);\n            }\n\n            var height = this.$alerts.outerHeight();\n            this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n            this.initAlerts();\n        }\n    },\n\n    initAlerts: function() {\n        // Are there any shunnable alerts?\n        var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n        for (var i = 0; i < $shunnableAlerts.length; i++) {\n            this.addListener($shunnableAlerts[i], 'click', ev => {\n                ev.preventDefault();\n\n                var $link = $(ev.currentTarget);\n\n                var data = {\n                    message: $link.prop('className').substr(5)\n                };\n\n                Craft.queueActionRequest('app/shun-cp-alert', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            $link.parent().remove();\n                        } else {\n                            this.displayError(response.error);\n                        }\n                    }\n                });\n            });\n        }\n    },\n\n    checkForUpdates: function(forceRefresh, includeDetails, callback) {\n        // Make 'includeDetails' optional\n        if (typeof includeDetails === 'function') {\n            callback = includeDetails;\n            includeDetails = false;\n        }\n\n        // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n        // then just set a new callback that re-checks for updates when the current one is done.\n        if (this.checkingForUpdates && (\n            (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n            (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n        )) {\n            var realCallback = callback;\n            callback = () => {\n                this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n            };\n        }\n\n        // Callback function?\n        if (typeof callback === 'function') {\n            if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                this.checkForUpdatesCallbacks = [];\n            }\n\n            this.checkForUpdatesCallbacks.push(callback);\n        }\n\n        if (!this.checkingForUpdates) {\n            this.checkingForUpdates = true;\n            this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n            this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n            this._checkForUpdates(forceRefresh, includeDetails)\n                .then(info => {\n                    this.updateUtilitiesBadge();\n                    this.checkingForUpdates = false;\n\n                    if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                        var callbacks = this.checkForUpdatesCallbacks;\n                        this.checkForUpdatesCallbacks = null;\n\n                        for (var i = 0; i < callbacks.length; i++) {\n                            callbacks[i](info);\n                        }\n                    }\n\n                    this.trigger('checkForUpdates', {\n                        updateInfo: info\n                    });\n                });\n        }\n    },\n\n    _checkForUpdates: function(forceRefresh, includeDetails) {\n        return new Promise((resolve, reject) => {\n            if (!forceRefresh) {\n                this._checkForCachedUpdates(includeDetails)\n                    .then(info => {\n                        if (info.cached !== false) {\n                            resolve(info);\n                        }\n\n                        this._getUpdates(includeDetails)\n                            .then(info => {\n                                resolve(info);\n                            });\n                    });\n            } else {\n                this._getUpdates(includeDetails)\n                    .then(info => {\n                        resolve(info);\n                    });\n            }\n        });\n    },\n\n    _checkForCachedUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            var data = {\n                onlyIfCached: true,\n                includeDetails: includeDetails,\n            };\n            Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    resolve({cached: false});\n                }\n            });\n        });\n    },\n\n    _getUpdates: function(includeDetails) {\n        return new Promise((resolve, reject) => {\n            Craft.sendApiRequest('GET', 'updates')\n                .then(updates => {\n                    this._cacheUpdates(updates, includeDetails).then(resolve);\n                })\n                .catch(e => {\n                    this._cacheUpdates({}).then(resolve);\n                });\n        });\n    },\n\n    _cacheUpdates: function(updates, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.postActionRequest('app/cache-updates', {\n                updates: updates,\n                includeDetails: includeDetails,\n            }, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    reject();\n                }\n            }, {\n                contentType: 'json'\n            });\n        });\n    },\n\n    updateUtilitiesBadge: function() {\n        var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n        // Ignore if there is no (non-selected) Utilities nav item\n        if (!$utilitiesLink.length) {\n            return;\n        }\n\n        Craft.queueActionRequest('app/get-utilities-badge-count', response => {\n            // Get the existing utility nav badge, if any\n            var $badge = $utilitiesLink.children('.badge');\n\n            if (response.badgeCount) {\n                if (!$badge.length) {\n                    $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                }\n                $badge.text(response.badgeCount);\n            } else if ($badge.length) {\n                $badge.remove();\n            }\n        });\n    },\n\n    runQueue: function() {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        if (Craft.runQueueAutomatically) {\n            Craft.queueActionRequest('queue/run', (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this.trackJobProgress(false, true);\n                }\n            });\n        } else {\n            this.trackJobProgress(false, true);\n        }\n    },\n\n    trackJobProgress: function(delay, force) {\n        if (force && this.trackJobProgressTimeout) {\n            clearTimeout(this.trackJobProgressTimeout);\n            this.trackJobProgressTimeout = null;\n        }\n\n        // Ignore if we're already tracking jobs, or the queue is disabled\n        if (this.trackJobProgressTimeout || !this.enableQueue) {\n            return;\n        }\n\n        if (delay === true) {\n            // Determine the delay based on how long the displayed job info has remained unchanged\n            var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n            this.trackJobProgressTimeout = setTimeout(this._trackJobProgressInternal.bind(this), timeout);\n        } else {\n            this._trackJobProgressInternal();\n        }\n    },\n\n    _trackJobProgressInternal: function() {\n        Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.trackJobProgressTimeout = null;\n                this.totalJobs = response.total;\n                this.setJobInfo(response.jobs);\n\n                if (this.jobInfo.length) {\n                    // Check again after a delay\n                    this.trackJobProgress(true);\n                }\n            }\n        });\n    },\n\n    setJobInfo: function(jobInfo) {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        this.jobInfo = jobInfo;\n\n        // Update the displayed job info\n        var oldInfo = this.displayedJobInfo;\n        this.displayedJobInfo = this.getDisplayedJobInfo();\n\n        // Same old same old?\n        if (\n            oldInfo &&\n            this.displayedJobInfo &&\n            oldInfo.id === this.displayedJobInfo.id &&\n            oldInfo.progress === this.displayedJobInfo.progress &&\n            oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n            oldInfo.status === this.displayedJobInfo.status\n        ) {\n            this.displayedJobInfoUnchanged++;\n        } else {\n            // Reset the counter\n            this.displayedJobInfoUnchanged = 1;\n        }\n\n        this.updateJobIcon();\n\n        // Fire a setJobInfo event\n        this.trigger('setJobInfo');\n    },\n\n    /**\n     * Returns info for the job that should be displayed in the CP sidebar\n     */\n    getDisplayedJobInfo: function() {\n        if (!this.enableQueue) {\n            return null;\n        }\n\n        // Set the status preference order\n        var statuses = [\n            Craft.CP.JOB_STATUS_RESERVED,\n            Craft.CP.JOB_STATUS_FAILED,\n            Craft.CP.JOB_STATUS_WAITING\n        ];\n\n        for (var i = 0; i < statuses.length; i++) {\n            for (var j = 0; j < this.jobInfo.length; j++) {\n                if (this.jobInfo[j].status === statuses[i]) {\n                    return this.jobInfo[j];\n                }\n            }\n        }\n    },\n\n    updateJobIcon: function() {\n        if (!this.enableQueue || !this.$nav.length) {\n            return;\n        }\n\n        if (this.displayedJobInfo) {\n            if (!this.jobProgressIcon) {\n                this.jobProgressIcon = new JobProgressIcon();\n            }\n\n            if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n            } else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n            }\n        } else {\n            if (this.jobProgressIcon) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.complete();\n                delete this.jobProgressIcon;\n            }\n        }\n    },\n\n    /**\n     * Returns the active site for the control panel\n     *\n     * @return {number}\n     */\n    getSiteId: function() {\n        // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n        let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n        if (typeof siteId !== 'undefined') {\n            Craft.removeLocalStorage('BaseElementIndex.siteId');\n            this.setSiteId(siteId);\n            return siteId;\n        }\n        return Craft.getCookie('siteId');\n    },\n\n    /**\n     * Sets the active site for the control panel\n     * @param {number} siteId\n     */\n    setSiteId: function(siteId) {\n        Craft.setCookie('siteId', siteId, {\n            maxAge: 31536000 // 1 year\n        });\n    }\n}, {\n    //maxWidth: 1051, //1024,\n    notificationDuration: 2000,\n\n    JOB_STATUS_WAITING: 1,\n    JOB_STATUS_RESERVED: 2,\n    JOB_STATUS_DONE: 3,\n    JOB_STATUS_FAILED: 4\n});\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend({\n    $li: null,\n    $a: null,\n    $label: null,\n    $progressLabel: null,\n\n    progress: null,\n    failMode: false,\n\n    _$bgCanvas: null,\n    _$staticCanvas: null,\n    _$hoverCanvas: null,\n    _$failCanvas: null,\n\n    _staticCtx: null,\n    _hoverCtx: null,\n    _canvasSize: null,\n    _arcPos: null,\n    _arcRadius: null,\n    _lineWidth: null,\n\n    _arcStartPos: 0,\n    _arcEndPos: 0,\n    _arcStartStepSize: null,\n    _arcEndStepSize: null,\n    _arcStep: null,\n    _arcStepTimeout: null,\n    _arcAnimateCallback: null,\n\n    _progressBar: null,\n\n    init: function() {\n        this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n        this.$a = $('<a/>', {\n            id: 'job-icon',\n            href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n        }).appendTo(this.$li);\n        this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n        var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n        this.$label = $('<span/>').appendTo($labelContainer);\n        this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n        let m = (window.devicePixelRatio > 1 ? 2 : 1);\n        this._canvasSize = 18 * m;\n        this._arcPos = this._canvasSize / 2;\n        this._arcRadius = 7 * m;\n        this._lineWidth = 3 * m;\n\n        this._$bgCanvas = this._createCanvas('bg', '#61666b');\n        this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n        this._$hoverCanvas = this._createCanvas('hover', '#fff');\n        this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n        this._staticCtx = this._$staticCanvas[0].getContext('2d');\n        this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n        this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n        this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n    },\n\n    setDescription: function(description, progressLabel) {\n        this.$a.attr('title', description);\n        this.$label.text(description);\n        if (progressLabel) {\n            this.$progressLabel.text(progressLabel).show();\n        } else {\n            this.$progressLabel.hide();\n        }\n    },\n\n    setProgress: function(progress) {\n        if (progress == 0) {\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n        } else {\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            if (this.progress && progress > this.progress) {\n                this._animateArc(0, progress / 100);\n            } else {\n                this._setArc(0, progress / 100);\n            }\n        }\n\n        this.progress = progress;\n    },\n\n    complete: function() {\n        this._animateArc(0, 1, () => {\n            this._$bgCanvas.velocity('fadeOut');\n\n            this._animateArc(1, 1, () => {\n                this.$a.remove();\n                this.destroy();\n            });\n        });\n    },\n\n    showFailMode: function(message) {\n        if (this.failMode) {\n            return;\n        }\n\n        this.failMode = true;\n        this.progress = null;\n\n        this._$bgCanvas.hide();\n        this._$staticCanvas.hide();\n        this._$hoverCanvas.hide();\n        this._$failCanvas.show();\n\n        this.setDescription(message);\n    },\n\n    hideFailMode: function() {\n        if (!this.failMode) {\n            return;\n        }\n\n        this.failMode = false;\n\n        this._$bgCanvas.show();\n        this._$staticCanvas.show();\n        this._$hoverCanvas.show();\n        this._$failCanvas.hide();\n    },\n\n    _createCanvas: function(id, color) {\n        var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n            ctx = $canvas[0].getContext('2d');\n\n        ctx.strokeStyle = color;\n        ctx.lineWidth = this._lineWidth;\n        ctx.lineCap = 'round';\n        return $canvas;\n    },\n\n    _setArc: function(startPos, endPos) {\n        this._arcStartPos = startPos;\n        this._arcEndPos = endPos;\n\n        this._drawArc(this._staticCtx, startPos, endPos);\n        this._drawArc(this._hoverCtx, startPos, endPos);\n    },\n\n    _drawArc: function(ctx, startPos, endPos) {\n        ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n        ctx.beginPath();\n        ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n    },\n\n    _animateArc: function(targetStartPos, targetEndPos, callback) {\n        if (this._arcStepTimeout) {\n            clearTimeout(this._arcStepTimeout);\n        }\n\n        this._arcStep = 0;\n        this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n        this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n        this._arcAnimateCallback = callback;\n        this._takeNextArcStep();\n    },\n\n    _takeNextArcStep: function() {\n        this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n        this._arcStep++;\n\n        if (this._arcStep < 10) {\n            this._arcStepTimeout = setTimeout(this._takeNextArcStep.bind(this), 50);\n        } else if (this._arcAnimateCallback) {\n            this._arcAnimateCallback();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend({\n    editableGroups: null,\n    $newCategoryBtnGroup: null,\n    $newCategoryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible groups the user has permission to create new categories in\n        this.editableGroups = [];\n\n        for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n            var group = Craft.editableCategoryGroups[i];\n\n            if (this.getSourceByKey('group:' + group.uid)) {\n                this.editableGroups.push(group);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific category group in the URL?\n        if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n\n                if ($source.data('handle') === defaultGroupHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        // Get the handle of the selected source\n        var selectedSourceHandle = this.$source.data('handle');\n\n        var i, href, label;\n\n        // Update the New Category button\n        // ---------------------------------------------------------------------\n\n        if (this.editableGroups.length) {\n            // Remove the old button, if there is one\n            if (this.$newCategoryBtnGroup) {\n                this.$newCategoryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a group that they have permission to create categories in\n            var selectedGroup;\n\n            if (selectedSourceHandle) {\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    if (this.editableGroups[i].handle === selectedSourceHandle) {\n                        selectedGroup = this.editableGroups[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n            // Otherwise only show a menu button\n            if (selectedGroup) {\n                href = this._getGroupTriggerHref(selectedGroup);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                        this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.editableGroups.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n            } else {\n                this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New category'),\n                }).appendTo(this.$newCategoryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    var group = this.editableGroups[i];\n\n                    if (this.settings.context === 'index' || group !== selectedGroup) {\n                        href = this._getGroupTriggerHref(group);\n                        label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newCategoryBtnGroup);\n        }\n\n        // Update the URL if we're on the Categories index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'categories';\n\n            if (selectedSourceHandle) {\n                uri += '/' + selectedSourceHandle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getGroupTriggerHref: function(group) {\n        if (this.settings.context === 'index') {\n            var uri = 'categories/' + group.handle + '/new';\n            if (this.siteId && this.siteId != Craft.primarySiteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        uri += '/' + Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri) + '\"';\n        } else {\n            return 'data-id=\"' + group.id + '\"';\n        }\n    },\n\n    _openCreateCategoryModal: function(groupId) {\n        if (this.$newCategoryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the group\n        var group;\n\n        for (var i = 0; i < this.editableGroups.length; i++) {\n            if (this.editableGroups[i].id == groupId) {\n                group = this.editableGroups[i];\n                break;\n            }\n        }\n\n        if (!group) {\n            return;\n        }\n\n        this.$newCategoryBtn.addClass('inactive');\n        var newCategoryBtnText = this.$newCategoryBtn.text();\n        this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newCategoryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                groupId: groupId\n            },\n            onBeginLoading: () => {\n                this.$newCategoryBtn.addClass('loading');\n            },\n            onEndLoading: () => {\n                this.$newCategoryBtn.removeClass('loading');\n            },\n            onHideHud: () => {\n                this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right group is selected\n                var groupSourceKey = 'group:' + group.uid;\n\n                if (this.sourceKey !== groupSourceKey) {\n                    this.selectSourceByKey(groupSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend({\n    setSettings: function() {\n        this.base.apply(this, arguments);\n        this.settings.sortable = false;\n    },\n\n    getModalSettings: function() {\n        var settings = this.base();\n        settings.hideOnSelect = false;\n        return settings;\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.find('.element');\n    },\n\n    onModalSelect: function(elements) {\n        // Disable the modal\n        this.modal.disable();\n        this.modal.disableCancelBtn();\n        this.modal.disableSelectBtn();\n        this.modal.showFooterSpinner();\n\n        // Get the new category HTML\n        var selectedCategoryIds = this.getSelectedElementIds();\n\n        for (var i = 0; i < elements.length; i++) {\n            selectedCategoryIds.push(elements[i].id);\n        }\n\n        var data = {\n            categoryIds: selectedCategoryIds,\n            siteId: elements[0].siteId,\n            id: this.settings.id,\n            name: this.settings.name,\n            branchLimit: this.settings.branchLimit,\n            selectionLabel: this.settings.selectionLabel\n        };\n\n        Craft.postActionRequest('elements/get-categories-input-html', data, (response, textStatus) => {\n            this.modal.enable();\n            this.modal.enableCancelBtn();\n            this.modal.enableSelectBtn();\n            this.modal.hideFooterSpinner();\n\n            if (textStatus === 'success') {\n                var $newInput = $(response.html),\n                    $newElementsContainer = $newInput.children('.elements');\n\n                this.$elementsContainer.replaceWith($newElementsContainer);\n                this.$elementsContainer = $newElementsContainer;\n                this.resetElements();\n\n                var filteredElements = [];\n\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i],\n                        $element = this.getElementById(element.id);\n\n                    if ($element) {\n                        this.animateElementIntoPlace(element.$element, $element);\n                        filteredElements.push(element);\n                    }\n                }\n\n                this.updateDisabledElementsInModal();\n                this.modal.hide();\n                this.onSelectElements(filteredElements);\n            }\n        });\n    },\n\n    removeElement: function($element) {\n        // Find any descendants this category might have\n        var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n        // Remove our record of them all at once\n        this.removeElements($allCategories);\n\n        // Animate them away one at a time\n        for (var i = 0; i < $allCategories.length; i++) {\n            this._animateCategoryAway($allCategories, i);\n        }\n    },\n\n    _animateCategoryAway: function($allCategories, i) {\n        var callback;\n\n        // Is this the last one?\n        if (i === $allCategories.length - 1) {\n            callback = () => {\n                var $li = $allCategories.first().parent().parent(),\n                    $ul = $li.parent();\n\n                if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                    $li.remove();\n                } else {\n                    $ul.remove();\n                }\n            };\n        }\n\n        var func = () => {\n            this.animateElementAway($allCategories.eq(i), callback);\n        };\n\n        if (i === 0) {\n            func();\n        } else {\n            setTimeout(func, 100 * i);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend({\n    columns: null,\n    rows: null,\n\n    init: function(data) {\n        let columns = data.columns;\n        let rows = data.rows;\n\n        rows.forEach(d => {\n            $.each(d, function(cellIndex) {\n                var column = columns[cellIndex];\n\n                var parseTime;\n\n                switch (column.type) {\n                    case 'date':\n                        parseTime = d3.timeParse('%Y-%m-%d');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'datetime':\n                        parseTime = d3.timeParse('%Y-%m-%d %H:00:00');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'percent':\n                        d[cellIndex] = d[cellIndex] / 100;\n                        break;\n\n                    case 'number':\n                        d[cellIndex] = +d[cellIndex];\n                        break;\n\n                    default:\n                    // do nothing\n                }\n            });\n        });\n\n        this.columns = columns;\n        this.rows = rows;\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend({\n    $container: null,\n    $tip: null,\n\n    init: function($container) {\n        this.$container = $container;\n\n        this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n        this.hide();\n    },\n\n    setContent: function(html) {\n        this.$tip.html(html);\n    },\n\n    setPosition: function(position) {\n        this.$tip.css('left', `${position.left}px`);\n        this.$tip.css('top', `${position.top}px`);\n    },\n\n    show: function() {\n        this.$tip.css('display', 'block');\n    },\n\n    hide: function() {\n        this.$tip.css('display', 'none');\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend({\n    $container: null,\n    $chart: null,\n\n    chartBaseClass: 'cp-chart',\n    dataTable: null,\n\n    formatLocale: null,\n    timeFormatLocale: null,\n    orientation: null,\n\n    svg: null,\n    width: null,\n    height: null,\n\n    init: function(container, settings) {\n        this.$container = container;\n\n        this.setSettings(Craft.charts.BaseChart.defaults);\n        this.setSettings(settings);\n\n        var globalSettings = {\n            formats: window.d3Formats,\n            formatLocaleDefinition: window.d3FormatLocaleDefinition,\n            timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n        };\n\n        this.setSettings(globalSettings);\n\n        d3.select(window).on('resize', () => {\n            this.resize();\n        });\n    },\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n    },\n\n    draw: function(dataTable, settings) {\n        // Settings and chart attributes\n\n        this.setSettings(settings);\n\n        this.dataTable = dataTable;\n        this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n        this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n        this.orientation = this.settings.orientation;\n\n        // Set (or reset) the chart element\n\n        if (this.$chart) {\n            this.$chart.remove();\n        }\n\n        var className = this.chartBaseClass;\n\n        if (this.settings.chartClass) {\n            className += ' ' + this.settings.chartClass;\n        }\n\n        this.$chart = $(`<div class=\"${className}\" />`).appendTo(this.$container);\n    },\n\n    resize: function() {\n        this.draw(this.dataTable, this.settings);\n    },\n\n    onAfterDrawTicks: function() {\n        // White border for ticks' text\n        $('.tick', this.$chart).each(function(tickKey, tick) {\n            var $tickText = $('text', tick);\n\n            var $clone = $tickText.clone();\n            $clone.appendTo(tick);\n\n            $tickText.attr('stroke', '#ffffff');\n            $tickText.attr('stroke-width', 3);\n        });\n    }\n}, {\n    defaults: {\n        formatLocaleDefinition: null,\n        timeFormatLocaleDefinition: null,\n        formats: {\n            numberFormat: ',.2f',\n            percentFormat: ',.2%',\n            currencyFormat: '$,.2f',\n            shortDateFormats: {\n                day: '%-m/%-d',\n                month: '%-m/%y',\n                year: '%Y'\n            }\n        },\n        margin: {top: 0, right: 0, bottom: 0, left: 0},\n        chartClass: null,\n        colors: ['#0594D1', '#DE3800', '#FF9A00', '#009802', '#9B009B']\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend({\n    tip: null,\n    drawingArea: null,\n\n    init: function(container, settings) {\n        this.base(container, Craft.charts.Area.defaults);\n\n        this.setSettings(settings);\n    },\n\n    draw: function(dataTable, settings) {\n        this.base(dataTable, settings);\n\n        if (this.tip) {\n            this.tip = null;\n        }\n\n        var margin = this.getChartMargin();\n\n        this.width = this.$chart.width() - margin.left - margin.right;\n        this.height = this.$chart.height() - margin.top - margin.bottom;\n\n        // Append SVG to chart element\n\n        var svg = {\n            width: this.width + (margin.left + margin.right),\n            height: this.height + (margin.top + margin.bottom),\n            translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n            translateY: margin.top\n        };\n\n        this.svg = d3.select(this.$chart.get(0)).append('svg')\n            .attr('width', svg.width)\n            .attr('height', svg.height);\n\n        this.drawingArea = this.svg.append('g')\n            .attr('transform', `translate(${svg.translateX},${svg.translateY})`);\n\n        // Draw elements\n\n        this.drawTicks();\n        this.drawAxes();\n        this.drawChart();\n        this.drawTipTriggers();\n    },\n\n    drawTicks: function() {\n        // Draw X ticks\n\n        var x = this.getX(true);\n        var xTicks = 3;\n        var xAxis = d3.axisBottom(x)\n            .tickFormat(this.getXFormatter())\n            .ticks(xTicks);\n\n        this.drawingArea.append('g')\n            .attr('class', 'x ticks-axis')\n            .attr('transform', `translate(0, ${this.height})`)\n            .call(xAxis);\n\n        // Draw Y ticks\n\n        var y = this.getY();\n        var yTicks = 2;\n        var yAxis;\n\n        if (this.orientation !== 'rtl') {\n            yAxis = d3.axisLeft(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .call(yAxis);\n        } else {\n            yAxis = d3.axisRight(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .attr('transform', `translate(${this.width},0)`)\n                .call(yAxis);\n        }\n\n        // On after draw ticks\n\n        this.onAfterDrawTicks();\n    },\n\n    drawAxes: function() {\n        if (this.settings.xAxis.showAxis) {\n            var x = this.getX();\n            var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n            this.drawingArea.append('g')\n                .attr('class', 'x axis')\n                .attr('transform', `translate(0, ${this.height})`)\n                .call(xAxis);\n        }\n\n        if (this.settings.yAxis.showAxis) {\n            var y = this.getY();\n            var chartPadding = 0;\n            var yAxis;\n\n            if (this.orientation === 'rtl') {\n                yAxis = d3.axisLeft(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${this.width - chartPadding}, 0)`)\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${chartPadding}, 0)`)\n                    .call(yAxis);\n            }\n        }\n    },\n\n    drawChart: function() {\n        var x = this.getX(true);\n        var y = this.getY();\n\n        // X & Y grid lines\n\n        if (this.settings.xAxis.gridlines) {\n            var xLineAxis = d3.axisBottom(x);\n\n            this.drawingArea.append('g')\n                .attr('class', 'x grid-line')\n                .attr('transform', `translate(0,${this.height})`)\n                .call(xLineAxis\n                    .tickSize(-this.height, 0, 0)\n                    .tickFormat('')\n                );\n        }\n\n        var yTicks = 2;\n\n        if (this.settings.yAxis.gridlines) {\n            var yLineAxis = d3.axisLeft(y);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y grid-line')\n                .attr('transform', 'translate(0 , 0)')\n                .call(yLineAxis\n                    .tickSize(-(this.width), 0)\n                    .tickFormat('')\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks)\n                );\n        }\n\n        // Line\n\n        var line = d3.line()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-line')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', 'none')\n            .style('stroke', this.settings.colors[0])\n            .style('stroke-width', '3px')\n            .attr('d', line);\n\n        // Area\n\n        var area = d3.area()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y0(this.height)\n            .y1(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-area')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', this.settings.colors[0])\n            .style('fill-opacity', '0.3')\n            .attr('d', area);\n\n        // Plots\n\n        if (this.settings.plots) {\n            this.drawingArea.append('g')\n                .attr('class', 'plots')\n                .selectAll('circle')\n                .data(this.dataTable.rows)\n                .enter()\n                .append('circle')\n                .style('fill', this.settings.colors[0])\n                .attr('class', (d, index) => `plot plot-${index}`)\n                .attr('r', 4)\n                .attr('cx', d => x(d[0]))\n                .attr('cy', d => y(d[1]));\n        }\n    },\n\n    drawTipTriggers: function() {\n        if (this.settings.tips) {\n            if (!this.tip) {\n                this.tip = new Craft.charts.Tip(this.$chart);\n            }\n\n            // Define xAxisTickInterval\n\n            var chartMargin = this.getChartMargin();\n            var tickSizeOuter = 6;\n            var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n            var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n            // Tip trigger width\n\n            var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n            // Draw triggers\n\n            var x = this.getX(true);\n            var y = this.getY();\n\n            this.drawingArea.append('g')\n                .attr('class', 'tip-triggers')\n                .selectAll('rect')\n                .data(this.dataTable.rows)\n                .enter().append('rect')\n                .attr('class', 'tip-trigger')\n                .style('fill', 'transparent')\n                .style('fill-opacity', '1')\n                .attr('width', tipTriggerWidth)\n                .attr('height', this.height)\n                .attr('x', d => x(d[0]) - tipTriggerWidth / 2)\n                .on('mouseover', (d, index) => {\n                    // Expand plot\n\n                    this.drawingArea.select('.plot-' + index).attr('r', 5);\n\n                    // Set tip content\n\n                    var $content = $('<div />');\n                    var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                    var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                    $xValue.html(this.getXFormatter()(d[0]));\n                    $yValue.html(this.getYFormatter()(d[1]));\n\n                    var content = $content.get(0);\n\n                    this.tip.setContent(content);\n\n                    // Set tip position\n\n                    var margin = this.getChartMargin();\n\n                    var offset = 24;\n                    var top = (y(d[1]) + offset);\n                    var left;\n\n                    if (this.orientation !== 'rtl') {\n                        left = (x(d[0]) + margin.left + offset);\n\n                        var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                        var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                        if (calcLeft > maxLeft) {\n                            left = x(d[0]) - (this.tip.$tip.width() + offset);\n                        }\n                    } else {\n                        left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                    }\n\n                    if (left < 0) {\n                        left = (x(d[0]) + margin.left + offset);\n                    }\n\n                    var position = {\n                        top: top,\n                        left: left\n                    };\n\n                    this.tip.setPosition(position);\n\n                    // Show tip\n\n                    this.tip.show();\n                })\n                .on('mouseout', (d, index) => {\n                    // Unexpand Plot\n                    this.drawingArea.select('.plot-' + index).attr('r', 4);\n\n                    // Hide tip\n                    this.tip.hide();\n                });\n        }\n    },\n\n    getChartMargin: function() {\n        var margin = this.settings.margin;\n\n        // Estimate the max width of y ticks and set it as the left margin\n\n        var values = this.getYTickValues();\n        var yTicksMaxWidth = 0;\n\n        $.each(values, (key, value) => {\n            var characterWidth = 8;\n\n            var formatter = this.getYFormatter();\n\n            var formattedValue = formatter(value);\n            var computedTickWidth = formattedValue.length * characterWidth;\n\n            if (computedTickWidth > yTicksMaxWidth) {\n                yTicksMaxWidth = computedTickWidth;\n            }\n        });\n\n        yTicksMaxWidth += 10;\n\n        margin.left = yTicksMaxWidth;\n\n        return margin;\n    },\n\n    getX: function(padded) {\n        var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomain = [xDomainMin, xDomainMax];\n\n        if (this.orientation === 'rtl') {\n            xDomain = [xDomainMax, xDomainMin];\n        }\n\n        var left = 0;\n        var right = 0;\n\n        if (padded) {\n            left = 0;\n            right = 0;\n        }\n\n        var x = d3.scaleTime().range([left, (this.width - right)]);\n\n        x.domain(xDomain);\n\n        return x;\n    },\n\n    getY: function() {\n        var yDomain = [0, this.getYMaxValue()];\n\n        var y = d3.scaleLinear().range([this.height, 0]);\n\n        y.domain(yDomain);\n\n        return y;\n    },\n\n    getXFormatter: function() {\n        var formatter;\n\n        if (this.settings.xAxis.formatter !== $.noop) {\n            formatter = this.settings.xAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYFormatter: function() {\n        var formatter;\n\n        if (this.settings.yAxis.formatter !== $.noop) {\n            formatter = this.settings.yAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYMaxValue: function() {\n        return d3.max(this.dataTable.rows, function(d) {\n            return d[1];\n        });\n    },\n\n    getYTickValues: function() {\n        var maxValue = this.getYMaxValue();\n\n        if (maxValue > 1) {\n            return [(maxValue / 2), maxValue];\n        } else {\n            return [0, maxValue];\n        }\n    }\n}, {\n    defaults: {\n        chartClass: 'area',\n        margin: {top: 25, right: 5, bottom: 25, left: 0},\n        plots: true,\n        tips: true,\n        xAxis: {\n            gridlines: false,\n            showAxis: true,\n            formatter: $.noop\n        },\n        yAxis: {\n            gridlines: true,\n            showAxis: false,\n            formatter: $.noop\n        }\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = `0${duration.hours}`;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = `0${duration.minutes}`;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = `0${duration.seconds}`;\n        }\n\n        return `${duration.hours}:${duration.minutes}:${duration.seconds}`;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(`${chartSettings.formats.shortDateFormats.day} %H:00:00`);\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.children('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorInput, 'click', function (ev) {\n            ev.stopPropagation();\n        });\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'input', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        var val = this.$input.val();\n\n        // If empty, set the preview to transparent\n        if (!val.length || val === '#') {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Make sure the value starts with a #\n        if (val[0] !== '#') {\n            val = '#' + val;\n            this.$input.val(val);\n        }\n\n        this.$colorPreview.css('background-color', val);\n\n        if (this.$colorInput) {\n            this.$colorInput.val(val);\n        }\n    }\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function() {\n        if (Craft.ColorInput._browserSupportsColorInputs === null) {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend({\n    elementIndex: null,\n    $elementIndexSourcesContainer: null,\n\n    $sidebar: null,\n    $sourcesContainer: null,\n    $sourceSettingsContainer: null,\n    $newHeadingBtn: null,\n    $footer: null,\n    $footerBtnContainer: null,\n    $saveBtn: null,\n    $cancelBtn: null,\n    $saveSpinner: null,\n    $loadingSpinner: null,\n\n    sourceSort: null,\n    sources: null,\n    selectedSource: null,\n    updateSourcesOnSave: false,\n\n    availableTableAttributes: null,\n\n    init: function(elementIndex, settings) {\n        this.base();\n\n        this.setSettings(settings, {\n            resizable: true\n        });\n\n        this.elementIndex = elementIndex;\n        this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n        var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n        this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n        this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n        this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n        this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n        this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n        this.$newHeadingBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit add icon',\n            text: Craft.t('app', 'New heading'),\n        }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n        this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n        this.setContainer($container);\n        this.show();\n\n        var data = {\n            elementType: this.elementIndex.elementType\n        };\n\n        Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, (response, textStatus) => {\n            this.$loadingSpinner.remove();\n\n            if (textStatus === 'success') {\n                this.$saveBtn.removeClass('disabled');\n                this.buildModal(response);\n            }\n        });\n\n        this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n        this.addListener(this.$cancelBtn, 'click', 'hide');\n        this.addListener(this.$saveBtn, 'click', 'save');\n        this.addListener(this.$container, 'submit', 'save');\n    },\n\n    buildModal: function(response) {\n        // Store the available table attribute options\n        this.availableTableAttributes = response.availableTableAttributes;\n\n        // Create the source item sorter\n        this.sourceSort = new Garnish.DragSort({\n            handle: '.move',\n            axis: 'y',\n            onSortChange: () => {\n                this.updateSourcesOnSave = true;\n            },\n        });\n\n        // Create the sources\n        this.sources = [];\n\n        for (var i = 0; i < response.sources.length; i++) {\n            var source = this.addSource(response.sources[i]);\n            this.sources.push(source);\n        }\n\n        if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n            this.sources[0].select();\n        }\n    },\n\n    addSource: function(sourceData) {\n        var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n        var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n        var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n        $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n        var source;\n\n        // Is this a heading?\n        if (typeof sourceData.heading !== 'undefined') {\n            $item.addClass('heading');\n            $itemInput.attr('name', 'sourceOrder[][heading]');\n            source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.heading);\n        } else {\n            $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n            source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.label);\n\n            // Select this by default?\n            if ((this.elementIndex.sourceKey + '/').substr(0, sourceData.key.length + 1) === sourceData.key + '/') {\n                source.select();\n            }\n        }\n\n        this.sourceSort.addItems($item);\n\n        return source;\n    },\n\n    handleNewHeadingBtnClick: function() {\n        var source = this.addSource({\n            heading: ''\n        });\n\n        Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n        source.select();\n        this.updateSourcesOnSave = true;\n    },\n\n    save: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n            return;\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n        var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n        Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success' && response.success) {\n                // Have any changes been made to the source list?\n                if (this.updateSourcesOnSave) {\n                    if (this.$elementIndexSourcesContainer.length) {\n                        var $lastSource = null,\n                            $pendingHeading;\n\n                        for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                            var $item = this.sourceSort.$items.eq(i),\n                                source = $item.data('source'),\n                                $indexSource = source.getIndexSource();\n\n                            if (!$indexSource) {\n                                continue;\n                            }\n\n                            if (source.isHeading()) {\n                                $pendingHeading = $indexSource;\n                            } else {\n                                if ($pendingHeading) {\n                                    this.appendSource($pendingHeading, $lastSource);\n                                    $lastSource = $pendingHeading;\n                                    $pendingHeading = null;\n                                }\n\n                                this.appendSource($indexSource, $lastSource);\n                                $lastSource = $indexSource;\n                            }\n                        }\n\n                        // Remove any additional sources (most likely just old headings)\n                        if ($lastSource) {\n                            var $extraSources = $lastSource.nextAll();\n                            this.elementIndex.sourceSelect.removeItems($extraSources);\n                            $extraSources.remove();\n                        }\n                    }\n                }\n\n                // If a source is selected, have the element index select that one by default on the next request\n                if (this.selectedSource && this.selectedSource.sourceData.key) {\n                    this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                    this.elementIndex.updateElements();\n                }\n\n                Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                this.hide();\n            } else {\n                var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                Craft.cp.displayError(error);\n            }\n        });\n    },\n\n    appendSource: function($source, $lastSource) {\n        if (!$lastSource) {\n            $source.prependTo(this.$elementIndexSourcesContainer);\n        } else {\n            $source.insertAfter($lastSource);\n        }\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.sources.length; i++) {\n            this.sources[i].destroy();\n        }\n\n        delete this.sources;\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend({\n    modal: null,\n\n    $item: null,\n    $itemLabel: null,\n    $itemInput: null,\n    $settingsContainer: null,\n\n    sourceData: null,\n\n    init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n        this.modal = modal;\n        this.$item = $item;\n        this.$itemLabel = $itemLabel;\n        this.$itemInput = $itemInput;\n        this.sourceData = sourceData;\n\n        this.$item.data('source', this);\n\n        this.addListener(this.$item, 'click', 'select');\n    },\n\n    isHeading: function() {\n        return false;\n    },\n\n    isSelected: function() {\n        return (this.modal.selectedSource === this);\n    },\n\n    select: function() {\n        if (this.isSelected()) {\n            return;\n        }\n\n        if (this.modal.selectedSource) {\n            this.modal.selectedSource.deselect();\n        }\n\n        this.$item.addClass('sel');\n        this.modal.selectedSource = this;\n\n        if (!this.$settingsContainer) {\n            this.$settingsContainer = this.createSettings()\n                .appendTo(this.modal.$sourceSettingsContainer);\n        } else {\n            this.$settingsContainer.removeClass('hidden');\n        }\n\n        this.modal.$sourceSettingsContainer.scrollTop(0);\n    },\n\n    createSettings: function() {\n        return $('<div/>');\n    },\n\n    getIndexSource: function() {\n    },\n\n    deselect: function() {\n        this.$item.removeClass('sel');\n        this.modal.selectedSource = null;\n        this.$settingsContainer.addClass('hidden');\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.text(val);\n    },\n\n    destroy: function() {\n        this.$item.data('source', null);\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend({\n    createSettings: function() {\n        let $settings = $('<div/>').append(Craft.ui.createTextField({\n            label: Craft.t('app', 'Header Column Heading'),\n            id: 'defaultHeaderColHeading' + Math.floor(Math.random() * 100000),\n            name: `sources[${this.sourceData.key}][headerColHeading]`,\n            value: this.sourceData.headerColHeading,\n            placeholder: this.sourceData.defaultHeaderColHeading,\n        }));\n\n        if (this.sourceData.tableAttributes.length) {\n            $settings.append(this.createTableColumnsField());\n        }\n\n        return $settings;\n    },\n\n    createTableColumnsField: function() {\n        // Create the title column option\n        let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n        let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n        // Create the rest of the options\n        let $columnCheckboxes = $('<div/>');\n        let selectedAttributes = [firstKey];\n\n        $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n        // Add the selected columns, in the selected order\n        for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n            let [key, label] = this.sourceData.tableAttributes[i];\n            $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n            selectedAttributes.push(key);\n        }\n\n        // Add the rest\n        let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n        availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n        for (let i = 0; i < availableTableAttributes.length; i++) {\n            let [key, label] = availableTableAttributes[i];\n            if (!Craft.inArray(key, selectedAttributes)) {\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n            }\n        }\n\n        new Garnish.DragSort($columnCheckboxes.children(), {\n            handle: '.move',\n            axis: 'y'\n        });\n\n        return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n            label: Craft.t('app', 'Table Columns'),\n            instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n        });\n    },\n\n    createTableColumnOption: function(key, label, first, checked) {\n        var $option = $('<div class=\"customize-sources-table-column\"/>')\n            .append('<div class=\"icon move\"/>')\n            .append(\n                Craft.ui.createCheckbox({\n                    label: Craft.escapeHtml(label),\n                    name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                    value: key,\n                    checked: checked,\n                    disabled: first\n                })\n            );\n\n        if (first) {\n            $option.children('.move').addClass('disabled');\n        }\n\n        return $option;\n    },\n\n    getIndexSource: function() {\n        var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n        if ($source) {\n            return $source.closest('li');\n        }\n    }\n});\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend({\n    $labelField: null,\n    $labelInput: null,\n    $deleteBtn: null,\n\n    isHeading: function() {\n        return true;\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.trigger('focus');\n    },\n\n    createSettings: function() {\n        let $settings = $('<div/>');\n\n        this.$labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Heading'),\n            instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n            value: this.sourceData.heading\n        }).appendTo($settings);\n\n        this.$labelInput = this.$labelField.find('.text');\n\n        $settings.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n            .appendTo($settings);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n        return $settings;\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n        this.$itemInput.val(val);\n    },\n\n    deleteHeading: function() {\n        this.modal.sourceSort.removeItems(this.$item);\n        this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n        this.modal.updateSourcesOnSave = true;\n\n        if (this.isSelected()) {\n            this.deselect();\n\n            if (this.modal.sources.length) {\n                this.modal.sources[0].select();\n            }\n        }\n\n        this.$item.remove();\n        this.$settingsContainer.remove();\n        this.destroy();\n    },\n\n    getIndexSource: function() {\n        var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n        return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend({\n    $table: null,\n\n    init: function(table, settings) {\n        this.$table = $(table);\n        var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n        settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n        settings.container = this.$table.children('tbody');\n        settings.helper = this.getHelper.bind(this);\n        settings.caboose = '<tr/>';\n        settings.axis = Garnish.Y_AXIS;\n        settings.magnetStrength = 4;\n        settings.helperLagBase = 1.5;\n\n        this.base($rows, settings);\n    },\n\n    getHelper: function($helperRow) {\n        var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n            $table = $('<table/>').appendTo($helper),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the table width and classes\n        $table.width(this.$table.width());\n        $table.prop('className', this.$table.prop('className'));\n\n        // Copy the column widths\n        var $firstRow = this.$table.find('tr:first'),\n            $cells = $firstRow.children(),\n            $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            $($helperCells[i]).width($($cells[i]).width());\n        }\n\n        return $helper;\n    }\n}, {\n    defaults: {\n        handle: '.move',\n        helperClass: 'datatablesorthelper'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend({\n    id: null,\n    userId: null,\n\n    $deleteActionRadios: null,\n    $deleteSpinner: null,\n\n    userSelect: null,\n    _deleting: false,\n\n    init: function(userId, settings) {\n        this.id = Math.floor(Math.random() * 1000000000);\n        this.userId = userId;\n        settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n        let $form = $(\n            '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n            Craft.getCsrfInput() +\n            '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n            (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n            (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n            '</form>'\n        ).appendTo(Garnish.$bod);\n        let $body = $(\n            '<div class=\"body\">' +\n            '<div class=\"content-summary\">' +\n            '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n            '<ul class=\"bullets\"></ul>' +\n            '</div>' +\n            '<div class=\"options\">' +\n            '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n            '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n            '<div class=\"elements\"></div>' +\n            '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n            '</div>' +\n            '</div>' +\n            '<div>' +\n            '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n            '</div>' +\n            '</div>'\n        ).appendTo($form);\n        let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo($buttons);\n\n        if (settings.contentSummary.length) {\n            for (let i = 0; i < settings.contentSummary.length; i++) {\n                $body.find('ul').append($('<li/>', {text: settings.contentSummary[i]}));\n            }\n        } else {\n            $body.find('ul').remove();\n        }\n\n        this.$deleteActionRadios = $body.find('input[type=radio]');\n        this.$deleteSubmitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: this._submitBtnLabel(false),\n        }).appendTo($buttons);\n        this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n        var idParam;\n\n        if (Garnish.isArray(this.userId)) {\n            idParam = ['and'];\n\n            for (let i = 0; i < this.userId.length; i++) {\n                idParam.push('not ' + this.userId[i]);\n            }\n        } else {\n            idParam = 'not ' + this.userId;\n        }\n\n        this.userSelect = new Craft.BaseElementSelectInput({\n            id: 'transferselect' + this.id,\n            name: 'transferContentTo',\n            elementType: 'craft\\\\elements\\\\User',\n            criteria: {\n                id: idParam\n            },\n            limit: 1,\n            modalSettings: {\n                closeOtherModals: false\n            },\n            onSelectElements: () => {\n                this.updateSizeAndPosition();\n\n                if (!this.$deleteActionRadios.first().prop('checked')) {\n                    this.$deleteActionRadios.first().trigger('click');\n                } else {\n                    this.validateDeleteInputs();\n                }\n            },\n            onRemoveElements: this.validateDeleteInputs.bind(this),\n            selectable: false,\n            editable: false\n        });\n\n        this.addListener($cancelBtn, 'click', 'hide');\n\n        this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n        this.addListener($form, 'submit', 'handleSubmit');\n\n        this.base($form, settings);\n    },\n\n    _submitBtnLabel: function(withContent) {\n        let message = withContent\n            ? 'Delete {num, plural, =1{user} other{users}} and content'\n            : 'Delete {num, plural, =1{user} other{users}}';\n\n        return Craft.t('app', message, {\n            num: Garnish.isArray(this.userId) ? this.userId.length : 1,\n        });\n    },\n\n    validateDeleteInputs: function() {\n        var validates = false;\n\n        if (this.$deleteActionRadios.eq(1).prop('checked')) {\n            validates = true;\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(true));\n        } else {\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(false));\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n        }\n\n        this.updateSizeAndPosition();\n\n        if (validates) {\n            this.$deleteSubmitBtn.removeClass('disabled');\n        } else {\n            this.$deleteSubmitBtn.addClass('disabled');\n        }\n\n        return validates;\n    },\n\n    handleSubmit: function(ev) {\n        if (this._deleting || !this.validateDeleteInputs()) {\n            ev.preventDefault();\n            return;\n        }\n\n        this.$deleteSubmitBtn.addClass('active');\n        this.$deleteSpinner.removeClass('hidden');\n        this.disable();\n        this.userSelect.disable();\n        this._deleting = true;\n\n        // Let the onSubmit callback prevent the form from getting submitted\n        try {\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        } catch (e) {\n            ev.preventDefault();\n            this.$deleteSpinner.addClass('hidden');\n            throw e;\n        }\n    },\n\n    onFadeIn: function() {\n        // Auto-focus the first radio\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$deleteActionRadios.first().trigger('focus');\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        contentSummary: [],\n        onSubmit: $.noop,\n        redirect: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend({\n    $revisionBtn: null,\n    $revisionLabel: null,\n    $spinner: null,\n    $expandSiteStatusesBtn: null,\n    $statusIcon: null,\n\n    $editMetaBtn: null,\n    metaHud: null,\n    $nameTextInput: null,\n    $saveMetaBtn: null,\n\n    $siteStatusPane: null,\n    $globalLightswitch: null,\n    $siteLightswitches: null,\n    $addlSiteField: null,\n\n    siteIds: null,\n    newSiteIds: null,\n\n    lastSerializedValue: null,\n    listeningForChanges: false,\n    pauseLevel: 0,\n    timeout: null,\n    saving: false,\n    saveXhr: null,\n    queue: null,\n    submittingForm: false,\n\n    duplicatedElements: null,\n    errors: null,\n\n    openingPreview: false,\n    preview: null,\n    previewToken: null,\n    createdDraftInPreview: false,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.DraftEditor.defaults);\n\n        this.queue = [];\n        this.duplicatedElements = {};\n\n        this.siteIds = Object.keys(this.settings.siteStatuses).map(siteId => {\n            return parseInt(siteId)\n        });\n\n        this.$revisionBtn = $('#context-btn');\n        this.$revisionLabel = $('#revision-label');\n        this.$spinner = $('#revision-spinner');\n        this.$expandSiteStatusesBtn = $('#expand-status-btn');\n        this.$statusIcon = $('#revision-status');\n\n        if (this.settings.canEditMultipleSites) {\n            this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n        }\n\n        if (this.settings.previewTargets.length) {\n            if (this.settings.enablePreview) {\n                this.addListener($('#preview-btn'), 'click', 'openPreview');\n            }\n\n            const $shareBtn = $('#share-btn');\n\n            if (this.settings.previewTargets.length === 1) {\n                this.addListener($shareBtn, 'click', function() {\n                    this.openShareLink(this.settings.previewTargets[0].url);\n                });\n            } else {\n                this.createShareMenu($shareBtn);\n            }\n        }\n\n        // If this is a revision, we're done here\n        if (this.settings.revisionId) {\n            return;\n        }\n\n        // Override the serializer to use our own\n        Craft.cp.$primaryForm.data('serializer', () => this.serializeForm(true));\n\n        this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n        if (this.settings.draftId) {\n            this.initForDraft();\n        } else {\n            // If the \"Create a draft\" button is a secondary button, then add special handling for it\n            this.addListener($('#save-draft-btn'), 'click', ev => {\n                ev.preventDefault();\n                this.createDraft();\n                this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n            });\n\n            // If they're not allowed to update the source element, override the save shortcut to create a draft too\n            if (!this.settings.canUpdateSource) {\n                this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', ev => {\n                    if (ev.saveShortcut) {\n                        ev.preventDefault();\n                        this.createDraft();\n                        this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                    }\n                });\n            }\n        }\n    },\n\n    listenForChanges: function() {\n        if (this.listeningForChanges || this.pauseLevel > 0 || !Craft.autosaveDrafts) {\n            return;\n        }\n\n        this.listeningForChanges = true;\n\n        this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n            if ($(ev.target).is(this.statusIcons())) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            // If they are typing, wait half a second before checking the form\n            if (['keypress', 'keyup', 'change'].includes(ev.type)) {\n                this.timeout = setTimeout(this.checkForm.bind(this), 500);\n            } else {\n                this.checkForm();\n            }\n        });\n    },\n\n    stopListeningForChanges: function() {\n        if (!this.listeningForChanges) {\n            return;\n        }\n\n        this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n        clearTimeout(this.timeout);\n        this.listeningForChanges = false;\n    },\n\n    pause: function() {\n        this.pauseLevel++;\n        this.stopListeningForChanges();\n    },\n\n    resume: function() {\n        if (this.pauseLevel === 0) {\n            throw 'Craft.DraftEditor::resume() should only be called after pause().';\n        }\n\n        // Only actually resume operation if this has been called the same\n        // number of times that pause() was called\n        this.pauseLevel--;\n        if (this.pauseLevel === 0) {\n            if (Craft.autosaveDrafts) {\n                this.checkForm();\n            }\n            this.listenForChanges();\n        }\n    },\n\n    initForDraft: function() {\n        // Create the edit draft button\n        this.createEditMetaBtn();\n\n        this.addListener(this.$statusIcon, 'click', () => {\n            this.showStatusHud(this.$statusIcon);\n        });\n\n        if (Craft.autosaveDrafts) {\n            this.listenForChanges();\n        }\n\n        if (this.settings.canUpdateSource) {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n                alt: true\n            }, () => {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.publishDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }, 0);\n        }\n    },\n\n    expandSiteStatuses: function() {\n        this.removeListener(this.$expandSiteStatusesBtn, 'click');\n        this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', () => {\n            this.$expandSiteStatusesBtn.remove();\n        });\n\n        const $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n        this.$siteStatusPane = $enabledForSiteField.parent();\n\n        // If this is a revision, just show the site statuses statically and be done\n        if (this.settings.revisionId) {\n            this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n            return;\n        }\n\n        $enabledForSiteField.addClass('nested');\n        const $globalField = Craft.ui.createLightswitchField({\n            id: 'enabled',\n            label: Craft.t('app', 'Enabled'),\n            name: 'enabled',\n        }).insertBefore($enabledForSiteField);\n        $globalField.find('label').css('font-weight', 'bold');\n        this.$globalLightswitch = $globalField.find('.lightswitch');\n\n        if (!this.settings.revisionId) {\n            this._showField($globalField);\n        }\n\n        // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n        const originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n            ? '1'\n            : (this.settings.enabledForSite ? '-' : '');\n        const originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n            '=' + (this.settings.enabledForSite ? '1' : '');\n\n        this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n            .on('change', this._updateGlobalStatus.bind(this));\n\n        this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n\n        let serializedStatuses = `enabled=${originalEnabledValue}`;\n        for (let i = 0; i < this.$siteLightswitches.length; i++) {\n            const $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n            serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n        }\n\n        Craft.cp.$primaryForm.data('initialSerializedValue',\n            Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n        // Are there additional sites that can be added?\n        if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n            this._createAddlSiteField();\n        }\n\n        this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n        this._updateGlobalStatus();\n    },\n\n    /**\n     * @returns {Array}\n     */\n    _getOtherSupportedSites: function() {\n        return Craft.sites.filter(s => s.id != this.settings.siteId && this.siteIds.includes(s.id));\n    },\n\n    _showField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .height(0)\n            .velocity({height}, 'fast', () => {\n                $field.css({\n                    overflow: '',\n                    height: '',\n                });\n            });\n    },\n\n    _removeField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .velocity({height: 0}, 'fast', () => {\n                $field.remove();\n            });\n    },\n\n    _updateGlobalStatus: function() {\n        let allEnabled = true, allDisabled = true;\n        this.$siteLightswitches.each(function() {\n            const enabled = $(this).data('lightswitch').on;\n            if (enabled) {\n                allDisabled = false;\n            } else {\n                allEnabled = false;\n            }\n            if (!allEnabled && !allDisabled) {\n                return false;\n            }\n        });\n        if (allEnabled) {\n            this.$globalLightswitch.data('lightswitch').turnOn(true);\n        } else if (allDisabled) {\n            this.$globalLightswitch.data('lightswitch').turnOff(true);\n        } else {\n            this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n        }\n    },\n\n    _updateSiteStatuses: function() {\n        const enabled = this.$globalLightswitch.data('lightswitch').on;\n        this.$siteLightswitches.each(function() {\n            if (enabled) {\n                $(this).data('lightswitch').turnOn(true);\n            } else {\n                $(this).data('lightswitch').turnOff(true);\n            }\n        });\n    },\n\n    _createSiteStatusField: function(site) {\n        const $field = Craft.ui.createLightswitchField({\n            id: `enabledForSite-${site.id}`,\n            label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n            name: `enabledForSite[${site.id}]`,\n            on: this.settings.siteStatuses.hasOwnProperty(site.id)\n                ? this.settings.siteStatuses[site.id]\n                : true,\n            disabled: !!this.settings.revisionId,\n        });\n\n        if (this.$addlSiteField) {\n            $field.insertBefore(this.$addlSiteField);\n        } else {\n            $field.appendTo(this.$siteStatusPane);\n        }\n\n        if (!this.settings.revisionId) {\n            $field.addClass('nested');\n            const $lightswitch = $field.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n        }\n\n        this._showField($field);\n\n        return $field;\n    },\n\n    _createAddlSiteField: function() {\n        const addlSites = Craft.sites.filter(s => {\n            return !this.siteIds.includes(s.id) && this.settings.addlSiteIds.includes(s.id);\n        });\n\n        if (!addlSites.length) {\n            return;\n        }\n\n        const $addlSiteSelectContainer = Craft.ui.createSelect({\n            options: [\n                {label: Craft.t('app', 'Add a site…')},\n                ...addlSites.map(s => {\n                    return {label: s.name, value: s.id};\n                }),\n            ],\n        }).addClass('fullwidth');\n\n        this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n            .addClass('nested add')\n            .appendTo(this.$siteStatusPane);\n\n        const $addlSiteSelect = $addlSiteSelectContainer.find('select');\n\n        $addlSiteSelect.on('change', () => {\n            const siteId = parseInt($addlSiteSelect.val());\n            const site = Craft.sites.find(s => s.id === siteId);\n\n            if (!site) {\n                return;\n            }\n\n            this._createSiteStatusField(site);\n\n            $addlSiteSelect\n                .val('')\n                .find(`option[value=\"${siteId}\"]`).remove();\n\n            if (this.newSiteIds === null) {\n                this.newSiteIds = [];\n            }\n\n            this.siteIds.push(siteId);\n            this.newSiteIds.push(siteId);\n\n            // Was that the last site?\n            if ($addlSiteSelect.find('option').length === 1) {\n                this._removeField(this.$addlSiteField);\n            }\n        });\n\n        this._showField(this.$addlSiteField);\n    },\n\n    showStatusHud: function(target) {\n        let bodyHtml;\n\n        if (this.errors === null) {\n            bodyHtml = '<p>' + Craft.t('app', 'The draft has been saved.') + '</p>';\n        } else {\n            bodyHtml = '<p class=\"error\">' + Craft.t('app', 'The draft could not be saved.') + '</p>';\n\n            if (this.errors.length) {\n                bodyHtml += '<ul class=\"errors\">' +\n                    this.errors.map(e => `<li>${Craft.escapeHtml(e)}</li>`).join('') +\n                    '</ul>';\n            }\n        }\n\n        const hud = new Garnish.HUD(target, bodyHtml, {\n            onHide: function() {\n                hud.destroy();\n            }\n        });\n    },\n\n    spinners: function() {\n        return this.preview\n            ? this.$spinner.add(this.preview.$spinner)\n            : this.$spinner;\n    },\n\n    statusIcons: function() {\n        return this.preview\n            ? this.$statusIcon.add(this.preview.$statusIcon)\n            : this.$statusIcon;\n    },\n\n    createEditMetaBtn: function() {\n        this.$editMetaBtn = $('<button/>', {\n            type: 'button',\n            'class': 'btn edit icon',\n            title: Craft.t('app', 'Edit draft settings'),\n        }).appendTo($('#context-btngroup'));\n        this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n    },\n\n    createShareMenu: function($shareBtn) {\n        $shareBtn.addClass('menubtn');\n\n        const $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n        const $ul = $('<ul/>').appendTo($menu);\n\n        this.settings.previewTargets.forEach(target => {\n            const $li = $('<li/>').appendTo($ul);\n            const $a = $('<a/>', {\n                text: target.label,\n            }).appendTo($li);\n            this.addListener($a, 'click', () => {\n                this.openShareLink(target.url);\n            });\n        });\n    },\n\n    getPreviewToken: function() {\n        return new Promise((resolve, reject) => {\n            if (this.previewToken) {\n                resolve(this.previewToken);\n                return;\n            }\n\n            Craft.postActionRequest('preview/create-token', {\n                elementType: this.settings.elementType,\n                sourceId: this.settings.sourceId,\n                siteId: this.settings.siteId,\n                draftId: this.settings.draftId,\n                revisionId: this.settings.revisionId,\n            }, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this.previewToken = response.token;\n                    resolve(this.previewToken);\n                } else {\n                    reject();\n                }\n            });\n        });\n    },\n\n    getTokenizedPreviewUrl: function(url, randoParam) {\n        return new Promise((resolve, reject) => {\n            const params = {};\n\n            if (randoParam || !this.settings.isLive) {\n                // Randomize the URL so CDNs don't return cached pages\n                params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n            }\n\n            if (this.settings.siteToken) {\n                params[Craft.siteToken] = this.settings.siteToken;\n            }\n\n            // No need for a token if we're looking at a live element\n            if (this.settings.isLive) {\n                resolve(Craft.getUrl(url, params));\n                return;\n            }\n\n            this.getPreviewToken().then(function(token) {\n                params[Craft.tokenParam] = token;\n                resolve(Craft.getUrl(url, params));\n            }).catch(reject);\n        });\n    },\n\n    openShareLink: function(url) {\n        this.getTokenizedPreviewUrl(url).then(function(url) {\n            window.open(url);\n        });\n    },\n\n    getPreview: function() {\n        if (!this.preview) {\n            this.preview = new Craft.Preview(this);\n            this.preview.on('open', () => {\n                if (!this.settings.draftId) {\n                    this.listenForChanges();\n                }\n            });\n            this.preview.on('close', () => {\n                if (!this.settings.draftId) {\n                    this.stopListeningForChanges();\n                }\n\n                // did we just create a draft?\n                if (this.createdDraftInPreview) {\n                    setTimeout(() => {\n                        this.createDraftNoticeHud();\n                        this.createdDraftInPreview = false;\n                    }, 750);\n                }\n            });\n        }\n        return this.preview;\n    },\n\n    createDraftNoticeHud: function() {\n        const $closeBtn = $('<button/>', {\n            class: 'btn',\n            type: 'button',\n            text: Craft.t('app', 'Keep it'),\n        });\n        const $deleteBtn = $('<button/>', {\n            class: 'btn caution',\n            type: 'button',\n            text: Craft.t('app', 'Delete it'),\n        });\n\n        const hud = new Garnish.HUD(\n            $('#context-btngroup'),\n            $('<div/>', {class: 'readable centeralign'})\n                .append(\n                    $('<p/>', {\n                        text: Craft.t('app', 'You’re now editing a draft.'),\n                    })\n                )\n                .append(\n                    $('<div/>', {class: 'flex flex-nowrap'})\n                        .append($closeBtn)\n                        .append($deleteBtn)\n                ),\n            {\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n            }\n        );\n\n        $closeBtn.on('click', () => {\n            hud.hide();\n            hud.destroy();\n        });\n\n        $deleteBtn.on('click', () => {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this draft?'))) {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.deleteDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }\n        })\n    },\n\n    openPreview: function() {\n        return new Promise((resolve, reject) => {\n            this.openingPreview = true;\n            this.ensureIsDraftOrRevision(true)\n                .then(() => {\n                    this.getPreview().open();\n                    this.openingPreview = false;\n                    resolve();\n                })\n                .catch(reject);\n        })\n    },\n\n    ensureIsDraftOrRevision: function(onlyIfChanged) {\n        return new Promise((resolve, reject) => {\n            if (!this.settings.draftId && !this.settings.revisionId) {\n                if (\n                    onlyIfChanged &&\n                    this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                ) {\n                    resolve();\n                    return;\n                }\n\n                this.createDraft()\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                resolve();\n            }\n        });\n    },\n\n    serializeForm: function(removeActionParams) {\n        let data = Craft.cp.$primaryForm.serialize();\n\n        if (this.isPreviewActive()) {\n            // Replace the temp input with the preview form data\n            data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n        }\n\n        if (removeActionParams && !this.settings.isUnpublishedDraft) {\n            // Remove action and redirect params\n            data = data.replace(/&action=[^&]*/, '');\n            data = data.replace(/&redirect=[^&]*/, '');\n        }\n\n        return data;\n    },\n\n    checkForm: function(force) {\n        // If this isn't a draft and there's no active preview, then there's nothing to check\n        if (\n            this.settings.revisionId ||\n            (!this.settings.draftId && !this.isPreviewActive()) ||\n            this.pauseLevel > 0\n        ) {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.timeout = null;\n\n        // Has anything changed?\n        const data = this.serializeForm(true);\n        if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n            this.saveDraft(data);\n        }\n    },\n\n    isPreviewActive: function() {\n        return this.preview && this.preview.isActive;\n    },\n\n    createDraft: function() {\n        return new Promise((resolve, reject) => {\n            this.saveDraft(this.serializeForm(true))\n                .then(resolve)\n                .catch(reject);\n        });\n    },\n\n    saveDraft: function(data) {\n        return new Promise((resolve, reject) => {\n            // Ignore if we're already submitting the main form\n            if (this.submittingForm) {\n                reject();\n                return;\n            }\n\n            if (this.saving) {\n                this.queue.push(() => {\n                    this.checkForm()\n                });\n                return;\n            }\n\n            this.lastSerializedValue = data;\n            this.saving = true;\n            const $spinners = this.spinners().removeClass('hidden');\n            const $statusIcons = this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('invisible checkmark-icon alert-icon fade-out')\n                .addClass('hidden');\n            if (this.$saveMetaBtn) {\n                this.$saveMetaBtn.addClass('active');\n            }\n            this.errors = null;\n\n            const url = Craft.getActionUrl(this.settings.saveDraftAction);\n\n            this.saveXhr = Craft.postActionRequest(url, this.prepareData(data), (response, textStatus) => {\n                $spinners.addClass('hidden');\n                if (this.$saveMetaBtn) {\n                    this.$saveMetaBtn.removeClass('active');\n                }\n                this.saving = false;\n\n                if (textStatus === 'abort') {\n                    return;\n                }\n\n                if (textStatus !== 'success' || response.errors) {\n                    this.errors = (response ? response.errors : null) || [];\n                    $statusIcons\n                        .velocity('stop')\n                        .css('opacity', '')\n                        .removeClass('hidden checkmark-icon')\n                        .addClass('alert-icon')\n                        .attr('title', Craft.t('app', 'The draft could not be saved.'));\n                    reject();\n                    return;\n                }\n\n                if (response.title) {\n                    $('#header h1').text(response.title);\n                }\n\n                if (response.docTitle) {\n                    document.title = response.docTitle;\n                }\n\n                this.$revisionLabel.text(response.draftName);\n\n                this.settings.draftName = response.draftName;\n\n                let revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                // Did we just add a site?\n                if (this.newSiteIds) {\n                    // Do we need to create the revision menu?\n                    if (!revisionMenu) {\n                        this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                        new Garnish.MenuBtn(this.$revisionBtn);\n                        revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                        revisionMenu.$container.removeClass('hidden');\n                    }\n                    this.newSiteIds.forEach(siteId => {\n                        const $option = revisionMenu.$options.filter(`[data-site-id=${siteId}]`);\n                        $option.find('.status').removeClass('disabled').addClass('enabled');\n                        const $li = $option.parent().removeClass('hidden');\n                        $li.closest('.site-group').removeClass('hidden');\n                    });\n                    revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                    this.newSiteIds = null;\n                }\n\n                // Did we just create a draft?\n                const draftCreated = !this.settings.draftId;\n                if (draftCreated) {\n                    // Update the document location HREF\n                    let newHref;\n                    const anchorPos = document.location.href.search('#');\n                    if (anchorPos !== -1) {\n                        newHref = document.location.href.substr(0, anchorPos);\n                    } else {\n                        newHref = document.location.href;\n                    }\n                    newHref += (newHref.match(/\\?/) ? '&' : '?') + 'draftId=' + response.draftId;\n                    if (anchorPos !== -1) {\n                        newHref += document.location.href.substr(anchorPos);\n                    }\n                    history.replaceState({}, '', newHref);\n\n                    // Replace the action input\n                    $('#action').remove();\n                    $('<input/>', {\n                        id: 'action',\n                        type: 'hidden',\n                        name: 'action',\n                        value: this.settings.saveDraftAction,\n                    }).appendTo(Craft.cp.$primaryForm);\n\n                    // Remove the \"Create a draft\" and \"Save\" buttons\n                    $('#save-draft-btn-container').remove();\n                    $('#save-btn-container').remove();\n\n                    const $actionButtonContainer = $('#action-buttons');\n\n                    // If they're allowed to update the source, add a \"Publish draft\" button\n                    if (this.settings.canUpdateSource) {\n                        $('<button/>', {\n                            type: 'button',\n                            class: 'btn secondary formsubmit',\n                            text: Craft.t('app', 'Publish draft'),\n                            title: Craft.shortcutText('S', false, true),\n                            data: {\n                                action: this.settings.publishDraftAction,\n                                redirect: this.settings.hashedCpEditUrl,\n                            },\n                        }).appendTo($actionButtonContainer).formsubmit();\n                    }\n\n                    // Add a \"Save draft\" button\n                    const $saveBtnContainer = $('<div/>', {\n                        id: 'save-btn-container',\n                        class: 'btngroup submit',\n                    }).appendTo($actionButtonContainer);\n\n                    $('<button/>', {\n                        type: 'submit',\n                        class: 'btn submit',\n                        text: Craft.t('app', 'Save draft'),\n                    }).appendTo($saveBtnContainer);\n\n                    if (this.settings.saveDraftAction || this.settings.deleteDraftAction) {\n                        const $menuBtn = $('<button/>', {\n                            type: 'button',\n                            class: 'btn submit menubtn',\n                        }).appendTo($saveBtnContainer);\n                        const $menu = $('<div/>', {\n                            class: 'menu',\n                            attr: {\n                                'data-align': 'right',\n                            },\n                        }).appendTo($saveBtnContainer);\n\n                        if (this.settings.saveDraftAction) {\n                            const $ul = $('<ul/>')\n                                .appendTo($menu)\n                                .append(\n                                    $('<li/>')\n                                        .append(\n                                            $('<a/>', {\n                                                class: 'formsubmit',\n                                                data: {\n                                                    action: this.settings.saveDraftAction,\n                                                },\n                                                text: Craft.t('app', 'Save and continue editing'),\n                                            })\n                                                .prepend(\n                                                    $('<span/>', {\n                                                        class: 'shortcut',\n                                                        text: Craft.shortcutText('S'),\n                                                    })\n                                                )\n                                        )\n                                );\n                            if (this.settings.canUpdateSource && this.settings.hashedAddAnotherRedirectUrl) {\n                                $ul.append(\n                                    $('<li/>')\n                                        .append(\n                                            $('<a/>', {\n                                                class: 'formsubmit',\n                                                data: {\n                                                    action: this.settings.publishDraftAction,\n                                                    redirect: this.settings.hashedAddAnotherRedirectUrl,\n                                                },\n                                                text: Craft.t('app', 'Publish and add another'),\n                                            })\n                                        )\n                                );\n                            }\n                            if (this.settings.deleteDraftAction) {\n                                $('<hr/>').appendTo($menu);\n                            }\n                        }\n\n                        if (this.settings.deleteDraftAction) {\n                            $('<ul/>')\n                                .appendTo($menu)\n                                .append(\n                                    $('<li/>')\n                                        .append(\n                                            $('<a/>', {\n                                                class: 'formsubmit error',\n                                                data: {\n                                                    action: this.settings.deleteDraftAction,\n                                                    redirect: this.settings.hashedCpEditUrl,\n                                                    confirm: Craft.t('app', 'Are you sure you want to delete this draft?'),\n                                                },\n                                                text: Craft.t('app', 'Delete draft'),\n                                            })\n                                        )\n                                )\n                        }\n                    }\n\n                    Craft.initUiElements($saveBtnContainer);\n\n                    // Update the editor settings\n                    this.settings.draftId = response.draftId;\n                    this.settings.isLive = false;\n                    this.previewToken = null;\n                    this.initForDraft();\n\n                    // Add the draft to the revision menu\n                    if (revisionMenu) {\n                        revisionMenu.$options.filter(':not(.site-option)').removeClass('sel');\n                        let $draftsUl = revisionMenu.$container.find('.revision-group-drafts');\n                        if (!$draftsUl.length) {\n                            const $draftHeading = $('<h6/>', {\n                                text: Craft.t('app', 'Drafts'),\n                            }).insertAfter(revisionMenu.$container.find('.revision-group-current'));\n                            $draftsUl = $('<ul/>', {\n                                'class': 'padded revision-group-drafts',\n                            }).insertAfter($draftHeading);\n                        }\n                        const $draftLi = $('<li/>').prependTo($draftsUl);\n                        const $draftA = $('<a/>', {\n                            'class': 'sel',\n                            html: '<span class=\"draft-name\"></span> <span class=\"draft-meta light\"></span>',\n                        }).appendTo($draftLi);\n                        revisionMenu.addOptions($draftA);\n                        revisionMenu.selectOption($draftA);\n\n                        // Update the site URLs\n                        const $siteOptions = revisionMenu.$options.filter('.site-option[href]');\n                        for (let i = 0; i < $siteOptions.length; i++) {\n                            const $siteOption = $siteOptions.eq(i);\n                            $siteOption.attr('href', Craft.getUrl($siteOption.attr('href'), {draftId: response.draftId}));\n                        }\n                    }\n\n                    // is Live Preview currently active?\n                    if (this.openingPreview || (this.preview && this.preview.isActive)) {\n                        this.createdDraftInPreview = true;\n                    }\n                }\n\n                if (revisionMenu) {\n                    revisionMenu.$options.filter('.sel').find('.draft-name').text(response.draftName);\n                    revisionMenu.$options.filter('.sel').find('.draft-meta').text('– ' + (response.creator\n                            ? Craft.t('app', 'saved {timestamp} by {creator}', {\n                                timestamp: response.timestamp,\n                                creator: response.creator\n                            })\n                            : Craft.t('app', 'updated {timestamp}', {\n                                timestamp: response.timestamp,\n                            })\n                    ));\n                }\n\n                // Did the controller send us updated preview targets?\n                if (\n                    response.previewTargets &&\n                    JSON.stringify(response.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                ) {\n                    this.updatePreviewTargets(response.previewTargets);\n                }\n\n                this.afterUpdate(data);\n\n                if (draftCreated) {\n                    this.trigger('createDraft');\n                }\n\n                if (this.$nameTextInput) {\n                    this.checkMetaValues();\n                }\n\n                for (const oldId in response.duplicatedElements) {\n                    if (oldId != this.settings.sourceId && response.duplicatedElements.hasOwnProperty(oldId)) {\n                        this.duplicatedElements[oldId] = response.duplicatedElements[oldId];\n                    }\n                }\n\n                resolve();\n            });\n        });\n    },\n\n    prepareData: function(data) {\n        // Swap out element IDs with their duplicated ones\n        data = this.swapDuplicatedElementIds(data);\n\n        // Add the draft info\n        if (this.settings.draftId) {\n            data += `&draftId=${this.settings.draftId}`;\n        }\n\n        if (this.settings.draftName !== null) {\n            data += `&draftName=${this.settings.draftName}`;\n        }\n\n        // Filter out anything that hasn't changed\n        const initialData = this.swapDuplicatedElementIds(Craft.cp.$primaryForm.data('initialSerializedValue'));\n        return Craft.findDeltaData(initialData, data, this.getDeltaNames());\n    },\n\n    swapDuplicatedElementIds: function(data) {\n        const idsRE = Object.keys(this.duplicatedElements).join('|');\n        if (idsRE === '') {\n            return data;\n        }\n        const lb = encodeURIComponent('[');\n        const rb = encodeURIComponent(']');\n        // Keep replacing field IDs until data stops changing\n        while (true) {\n            if (data === (\n                data = data\n                    // &fields[...][X]\n                    .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                        return pre + this.duplicatedElements[id] + post;\n                    })\n                    // &fields[...=X\n                    .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                        return pre + this.duplicatedElements[id];\n                    })\n            )) {\n                break;\n            }\n        }\n        return data;\n    },\n\n    getDeltaNames: function() {\n        const deltaNames = Craft.deltaNames.slice(0);\n        for (let i = 0; i < deltaNames.length; i++) {\n            for (const oldId in this.duplicatedElements) {\n                if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                    deltaNames[i] = deltaNames[i].replace('][' + oldId + ']', '][' + this.duplicatedElements[oldId] + ']');\n                }\n            }\n        }\n        return deltaNames;\n    },\n\n    updatePreviewTargets: function(previewTargets) {\n        previewTargets.forEach(newTarget => {\n            const currentTarget = this.settings.previewTargets.find(t => t.label === newTarget.label);\n            if (currentTarget) {\n                currentTarget.url = newTarget.url;\n            }\n        });\n    },\n\n    afterUpdate: function(data) {\n        Craft.cp.$primaryForm.data('initialSerializedValue', data);\n        Craft.initialDeltaValues = {};\n        const $statusIcons = this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden')\n            .addClass('checkmark-icon')\n            .attr('title', Craft.t('app', 'The draft has been saved.'));\n\n        if (!Craft.autosaveDrafts) {\n            // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n            $statusIcons\n                .velocity('stop')\n                .velocity({\n                    opacity: 0,\n                }, {\n                    delay: 2000,\n                    complete: () => {\n                        $statusIcons.addClass('hidden');\n                    },\n                });\n        }\n\n        this.trigger('update');\n\n        this.nextInQueue();\n    },\n\n    nextInQueue: function() {\n        if (this.queue.length) {\n            this.queue.shift()();\n        }\n    },\n\n    showMetaHud: function() {\n        if (!this.metaHud) {\n            this.createMetaHud();\n            this.onMetaHudShow();\n        } else {\n            this.metaHud.show();\n        }\n\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$nameTextInput.trigger('focus');\n        }\n    },\n\n    createMetaHud: function() {\n        const $hudBody = $('<div/>');\n\n        // Add the Name field\n        const $nameField = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n        const $nameInputContainer = $('<div class=\"input\"/>').appendTo($nameField);\n        this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($nameInputContainer).val(this.settings.draftName);\n\n        // HUD footer\n        const $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n        $('<div class=\"flex-grow\"></div>').appendTo($footer);\n        this.$saveMetaBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo($footer);\n\n        this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n            onSubmit: this.saveMeta.bind(this)\n        });\n\n        this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n\n        this.metaHud.on('show', this.onMetaHudShow.bind(this));\n        this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n        this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n    },\n\n    onMetaHudShow: function() {\n        this.$editMetaBtn.addClass('active');\n    },\n\n    onMetaHudHide: function() {\n        this.$editMetaBtn.removeClass('active');\n    },\n\n    onMetaHudEscape: function() {\n        this.$nameTextInput.val(this.settings.draftName);\n    },\n\n    checkMetaValues: function() {\n        if (\n            this.$nameTextInput.val() &&\n            this.$nameTextInput.val() !== this.settings.draftName\n        ) {\n            this.$saveMetaBtn.removeClass('disabled');\n            return true;\n        }\n\n        this.$saveMetaBtn.addClass('disabled');\n        return false;\n    },\n\n    shakeMetaHud: function() {\n        Garnish.shake(this.metaHud.$hud);\n    },\n\n    saveMeta: function() {\n        if (!this.checkMetaValues()) {\n            this.shakeMetaHud();\n            return;\n        }\n\n        this.settings.draftName = this.$nameTextInput.val();\n\n        this.metaHud.hide();\n        this.checkForm(true);\n    },\n\n    handleFormSubmit: function(ev) {\n        ev.preventDefault();\n\n        // Prevent double form submits\n        if (this.submittingForm) {\n            return;\n        }\n\n        // If this a draft and was this a normal save (either via submit button or save shortcut),\n        // then trigger an autosave\n        if (\n            this.settings.draftId &&\n            (typeof ev.autosave === 'undefined' || ev.autosave) &&\n            (ev.saveShortcut || (ev.customTrigger && ev.customTrigger.data('action') === this.settings.saveDraftAction))\n        ) {\n            this.checkForm(true);\n            return;\n        }\n\n        // Prevent the normal unload confirmation dialog\n        Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n        // Abort the current save request if there is one\n        if (this.saving) {\n            this.saveXhr.abort();\n        }\n\n        // Duplicate the form with normalized data\n        const data = this.prepareData(this.serializeForm(false));\n        const $form = Craft.createForm(data);\n\n        $form.appendTo(Garnish.$bod);\n        $form.submit();\n        this.submittingForm = true;\n    },\n}, {\n    defaults: {\n        elementType: null,\n        sourceId: null,\n        siteId: null,\n        isUnpublishedDraft: false,\n        enabled: false,\n        enabledForSite: false,\n        isLive: false,\n        siteStatuses: null,\n        addlSiteIds: [],\n        cpEditUrl: null,\n        draftId: null,\n        revisionId: null,\n        draftName: null,\n        canEditMultipleSites: false,\n        canUpdateSource: false,\n        saveDraftAction: null,\n        deleteDraftAction: null,\n        publishDraftAction: null,\n        hashedCpEditUrl: null,\n        hashedAddAnotherRedirectUrl: null,\n        enablePreview: false,\n        previewTargets: [],\n        siteToken: null,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend({\n    callback: $.noop,\n\n    init: function(source, target, callback) {\n        this.callback = callback;\n        this.base(source, target);\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return this.callback(sourceVal);\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend({\n    initialized: false,\n\n    id: null,\n    baseName: null,\n    columns: null,\n    sorter: null,\n    biggestId: -1,\n\n    $table: null,\n    $tbody: null,\n    $addRowBtn: null,\n\n    rowCount: 0,\n    hasMaxRows: false,\n    hasMinRows: false,\n\n    radioCheckboxes: null,\n\n    init: function(id, baseName, columns, settings) {\n        this.id = id;\n        this.baseName = baseName;\n        this.columns = columns;\n        this.setSettings(settings, Craft.EditableTable.defaults);\n        this.radioCheckboxes = {};\n\n        this.$table = $('#' + id);\n        this.$tbody = this.$table.children('tbody');\n        this.rowCount = this.$tbody.find('tr').length;\n\n        // Is this already an editable table?\n        if (this.$table.data('editable-table')) {\n            Garnish.log('Double-instantiating an editable table on an element');\n            this.$table.data('editable-table').destroy();\n        }\n\n        this.$table.data('editable-table', this);\n\n        this.sorter = new Craft.DataTableSorter(this.$table, {\n            helperClass: 'editabletablesorthelper',\n            copyDraggeeInputValuesToHelper: true\n        });\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            // Give everything a chance to initialize\n            setTimeout(this.initializeIfVisible.bind(this), 500);\n        }\n\n        if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n            for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                this.addRow()\n            }\n        }\n    },\n\n    isVisible: function() {\n        return (this.$table.parent().height() > 0);\n    },\n\n    initialize: function() {\n        if (this.initialized) {\n            return false;\n        }\n\n        this.initialized = true;\n        this.removeListener(Garnish.$win, 'resize');\n\n        var $rows = this.$tbody.children();\n\n        for (var i = 0; i < $rows.length; i++) {\n            this.createRowObj($rows[i]);\n        }\n\n        this.$addRowBtn = this.$table.next('.add');\n        this.updateAddRowButton();\n        this.addListener(this.$addRowBtn, 'activate', 'addRow');\n        return true;\n    },\n    initializeIfVisible: function() {\n        this.removeListener(Garnish.$win, 'resize');\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n        }\n    },\n    updateAddRowButton: function() {\n        if (!this.canAddRow()) {\n            this.$addRowBtn.css('opacity', '0.2');\n            this.$addRowBtn.css('pointer-events', 'none');\n        } else {\n            this.$addRowBtn.css('opacity', '1');\n            this.$addRowBtn.css('pointer-events', 'auto');\n        }\n    },\n    canDeleteRow: function() {\n        return (this.rowCount > this.settings.minRows);\n    },\n    deleteRow: function(row) {\n        if (!this.canDeleteRow()) {\n            return;\n        }\n\n        this.sorter.removeItems(row.$tr);\n        row.$tr.remove();\n\n        this.rowCount--;\n\n        this.updateAddRowButton();\n        if (this.rowCount === 0) {\n            this.$table.addClass('hidden');\n        }\n\n        // onDeleteRow callback\n        this.settings.onDeleteRow(row.$tr);\n\n        row.destroy();\n    },\n    canAddRow: function() {\n        if (this.settings.staticRows) {\n            return false;\n        }\n\n        if (this.settings.maxRows) {\n            return (this.rowCount < this.settings.maxRows);\n        }\n\n        return true;\n    },\n    addRow: function(focus, prepend) {\n        if (!this.canAddRow()) {\n            return;\n        }\n\n        var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n            $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n        if (prepend) {\n            $tr.prependTo(this.$tbody);\n        } else {\n            $tr.appendTo(this.$tbody);\n        }\n\n        var row = this.createRowObj($tr);\n        this.sorter.addItems($tr);\n\n        // Focus the first input in the row\n        if (focus !== false) {\n            $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n        }\n\n        this.rowCount++;\n        this.updateAddRowButton();\n        this.$table.removeClass('hidden');\n\n        // onAddRow callback\n        this.settings.onAddRow($tr);\n\n        return row;\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n    },\n\n    createRowObj: function($tr) {\n        return new Craft.EditableTable.Row(this, $tr);\n    },\n\n    focusOnPrevRow: function($tr, tdIndex, blurTd) {\n        var $prevTr = $tr.prev('tr');\n        var prevRow;\n\n        if ($prevTr.length) {\n            prevRow = $prevTr.data('editable-table-row');\n        } else {\n            prevRow = this.addRow(false, true);\n        }\n\n        // Focus on the same cell in the previous row\n        if (!prevRow) {\n            return;\n        }\n\n        if (!prevRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($prevTr) {\n                this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    focusOnNextRow: function($tr, tdIndex, blurTd) {\n        var $nextTr = $tr.next('tr');\n        var nextRow;\n\n        if ($nextTr.length) {\n            nextRow = $nextTr.data('editable-table-row');\n        } else {\n            nextRow = this.addRow(false);\n        }\n\n        // Focus on the same cell in the next row\n        if (!nextRow) {\n            return;\n        }\n\n        if (!nextRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($nextTr) {\n                this.focusOnNextRow($nextTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    importData: function(data, row, tdIndex) {\n        let lines = data.split(/\\r?\\n|\\r/);\n        for (let i = 0; i < lines.length; i++) {\n            let values = lines[i].split(\"\\t\");\n            for (let j = 0; j < values.length; j++) {\n                let value = values[j];\n                row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                    .val(value)\n                    .trigger('input');\n            }\n\n            // move onto the next row\n            let $nextTr = row.$tr.next('tr');\n            if ($nextTr.length) {\n                row = $nextTr.data('editable-table-row');\n            } else {\n                row = this.addRow(false);\n            }\n        }\n    },\n}, {\n    textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n    defaults: {\n        rowIdPrefix: '',\n        defaultValues: {},\n        staticRows: false,\n        minRows: null,\n        maxRows: null,\n        onAddRow: $.noop,\n        onDeleteRow: $.noop\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        var $tr = $('<tr/>', {\n            'data-id': rowId\n        });\n\n        for (var colId in columns) {\n            if (!columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            var col = columns[colId],\n                value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                $cell;\n\n            if (col.type === 'heading') {\n                $cell = $('<th/>', {\n                    'scope': 'row',\n                    'class': col['class'],\n                    'html': value\n                });\n            } else {\n                var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                $cell = $('<td/>', {\n                    'class': `${col.class} ${col.type}-cell`,\n                    'width': col.width\n                });\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $cell.addClass('textual');\n                }\n\n                if (col.code) {\n                    $cell.addClass('code');\n                }\n\n                switch (col.type) {\n                    case 'checkbox':\n                        $('<div class=\"checkbox-wrapper\"/>')\n                            .append(Craft.ui.createCheckbox({\n                                    name: name,\n                                    value: col.value || '1',\n                                    checked: !!value\n                                })\n                            )\n                            .appendTo($cell);\n                        break;\n\n                    case 'color':\n                        Craft.ui.createColorInput({\n                            name: name,\n                            value: value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'date':\n                        Craft.ui.createDateInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'lightswitch':\n                        Craft.ui.createLightswitch({\n                            name: name,\n                            value: col.value || '1',\n                            on: !!value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'select':\n                        Craft.ui.createSelect({\n                            name: name,\n                            options: col.options,\n                            value: value || (function() {\n                                for (var key in col.options) {\n                                    if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                        return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                    }\n                                }\n                                return null;\n                            })(),\n                            'class': 'small'\n                        }).appendTo($cell);\n                        break;\n\n                    case 'time':\n                        Craft.ui.createTimeInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'email':\n                    case 'url':\n                        Craft.ui.createTextInput({\n                            name: name,\n                            value: value,\n                            type: col.type,\n                            placeholder: col.placeholder || null,\n                        }).appendTo($cell);\n                        break;\n\n                    default:\n                        $('<textarea/>', {\n                            'name': name,\n                            'rows': col.rows || 1,\n                            'val': value,\n                            'placeholder': col.placeholder\n                        }).appendTo($cell);\n                }\n            }\n\n            $cell.appendTo($tr);\n        }\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'move icon',\n                'title': Craft.t('app', 'Reorder')\n            })\n        ).appendTo($tr);\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Delete')\n            })\n        ).appendTo($tr);\n\n        return $tr;\n    }\n});\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend({\n    table: null,\n    id: null,\n    niceTexts: null,\n\n    $tr: null,\n    $tds: null,\n    tds: null,\n    $textareas: null,\n    $deleteBtn: null,\n\n    init: function(table, tr) {\n        this.table = table;\n        this.$tr = $(tr);\n        this.$tds = this.$tr.children();\n        this.tds = [];\n        this.id = this.$tr.attr('data-id');\n\n        this.$tr.data('editable-table-row', this);\n\n        // Get the row ID, sans prefix\n        var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n        if (id > this.table.biggestId) {\n            this.table.biggestId = id;\n        }\n\n        this.$textareas = $();\n        this.niceTexts = [];\n        var textareasByColId = {};\n\n        var i = 0;\n        var colId, col, td, $textarea, $checkbox;\n\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n            td = this.tds[colId] = this.$tds[i];\n\n            if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                $textarea = $('textarea', td);\n                this.$textareas = this.$textareas.add($textarea);\n\n                this.addListener($textarea, 'focus', 'onTextareaFocus');\n                this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                this.niceTexts.push(new Garnish.NiceText($textarea, {\n                    onHeightChange: this.onTextareaHeightChange.bind(this)\n                }));\n\n                this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                $textarea.trigger('input');\n\n                if (col.type !== 'multiline') {\n                    this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                }\n\n                textareasByColId[colId] = $textarea;\n            } else if (col.type === 'checkbox') {\n                $checkbox = $('input[type=\"checkbox\"]', td);\n\n                if (col.radioMode) {\n                    if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                        this.table.radioCheckboxes[colId] = [];\n                    }\n                    this.table.radioCheckboxes[colId].push($checkbox[0]);\n                    this.addListener($checkbox, 'change', {colId}, 'onRadioCheckboxChange');\n                }\n\n                if (col.toggle) {\n                    this.addListener($checkbox, 'change', {colId}, function(ev) {\n                        this.applyToggleCheckbox(ev.data.colId);\n                    });\n                }\n            }\n\n            if (!$(td).hasClass('disabled')) {\n                this.addListener(td, 'click', {td}, function(ev) {\n                    if (ev.target === ev.data.td) {\n                        $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                    }\n                });\n            }\n\n            i++;\n        }\n\n        // Now that all of the text cells have been nice-ified, let's normalize the heights\n        this.onTextareaHeightChange();\n\n        // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n            col = this.table.columns[colId];\n            if (col.type === 'checkbox' && col.toggle) {\n                this.applyToggleCheckbox(colId);\n            }\n        }\n\n        // Now look for any autopopulate columns\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n\n            if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                    allowNonAlphaStart: true\n                });\n            }\n        }\n\n        var $deleteBtn = this.$tr.children().last().find('.delete');\n        this.addListener($deleteBtn, 'click', 'deleteRow');\n\n        var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n        this.addListener($inputs, 'focus', function(ev) {\n            $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n        });\n        this.addListener($inputs, 'blur', function(ev) {\n            $(ev.currentTarget).closest('td').removeClass('focus');\n        });\n    },\n\n    onTextareaFocus: function(ev) {\n        this.onTextareaHeightChange();\n\n        var $textarea = $(ev.currentTarget);\n\n        if ($textarea.data('ignoreNextFocus')) {\n            $textarea.data('ignoreNextFocus', false);\n            return;\n        }\n\n        setTimeout(function() {\n            Craft.selectFullValue($textarea);\n        }, 0);\n    },\n\n    onRadioCheckboxChange: function(ev) {\n        if (ev.currentTarget.checked) {\n            for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                checkbox.checked = (checkbox === ev.currentTarget);\n            }\n        }\n    },\n\n    applyToggleCheckbox: function(checkboxColId) {\n        var checkboxCol = this.table.columns[checkboxColId];\n        var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n        var colId, colIndex, neg;\n        for (var i = 0; i < checkboxCol.toggle.length; i++) {\n            colId = checkboxCol.toggle[i];\n            colIndex = this.table.colum;\n            neg = colId[0] === '!';\n            if (neg) {\n                colId = colId.substr(1);\n            }\n            if ((checked && !neg) || (!checked && neg)) {\n                $(this.tds[colId])\n                    .removeClass('disabled')\n                    .find('textarea, input').prop('disabled', false);\n            } else {\n                $(this.tds[colId])\n                    .addClass('disabled')\n                    .find('textarea, input').prop('disabled', true);\n            }\n        }\n    },\n\n    ignoreNextTextareaFocus: function(ev) {\n        $.data(ev.currentTarget, 'ignoreNextFocus', true);\n    },\n\n    handleKeypress: function(ev) {\n        var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n        var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n        // Going to the next/previous row?\n        if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n            ev.preventDefault();\n            if (ev.shiftKey) {\n                this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            } else {\n                this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            }\n            return;\n        }\n\n        // Was this an invalid number character?\n        if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n            ev.preventDefault();\n        }\n    },\n\n    handlePaste: function(ev) {\n        let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n        if (!data.match(/[\\t\\r\\n]/)) {\n            return;\n        }\n        ev.preventDefault();\n        this.table.importData(data, this, ev.data.tdIndex);\n    },\n\n    validateValue: function(ev) {\n        if (ev.data.type === 'multiline') {\n            return;\n        }\n\n        var safeValue;\n\n        if (ev.data.type === 'number') {\n            // Only grab the number at the beginning of the value (if any)\n            var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n            if (match !== null) {\n                safeValue = match[1];\n            } else {\n                safeValue = '';\n            }\n        } else {\n            // Just strip any newlines\n            safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n        }\n\n        if (safeValue !== ev.currentTarget.value) {\n            ev.currentTarget.value = safeValue;\n        }\n    },\n\n    onTextareaHeightChange: function() {\n        // Keep all the textareas' heights in sync\n        var tallestTextareaHeight = -1;\n\n        for (var i = 0; i < this.niceTexts.length; i++) {\n            if (this.niceTexts[i].height > tallestTextareaHeight) {\n                tallestTextareaHeight = this.niceTexts[i].height;\n            }\n        }\n\n        this.$textareas.css('min-height', tallestTextareaHeight);\n\n        // If the <td> is still taller, go with that instead\n        var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n        if (tdHeight > tallestTextareaHeight) {\n            this.$textareas.css('min-height', tdHeight);\n        }\n    },\n\n    deleteRow: function() {\n        this.table.deleteRow(this);\n    }\n}, {\n    numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend({\n    maxLevels: null,\n    newChildUrl: null,\n    $trigger: null,\n    $selectedItems: null,\n    triggerEnabled: true,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n        this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n        // Do we have a custom handler?\n        if (this.settings.activate) {\n            // Prevent the element index's click handler\n            this.$trigger.data('custom-handler', true);\n\n            // Is this a custom trigger?\n            if (this.$trigger.prop('nodeName') === 'FORM') {\n                this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n            } else {\n                this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n            }\n        }\n\n        this.updateTrigger();\n        Craft.elementIndex.on('selectionChange', this.updateTrigger.bind(this));\n    },\n\n    updateTrigger: function() {\n        // Ignore if the last element was just unselected\n        if (Craft.elementIndex.getSelectedElements().length === 0) {\n            return;\n        }\n\n        if (this.validateSelection()) {\n            this.enableTrigger();\n        } else {\n            this.disableTrigger();\n        }\n    },\n\n    /**\n     * Determines if this action can be performed on the currently selected elements.\n     *\n     * @return boolean\n     */\n    validateSelection: function() {\n        var valid = true;\n        this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n        if (!this.settings.batch && this.$selectedItems.length > 1) {\n            valid = false;\n        } else if (typeof this.settings.validateSelection === 'function') {\n            valid = this.settings.validateSelection(this.$selectedItems);\n        }\n\n        return valid;\n    },\n\n    enableTrigger: function() {\n        if (this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.removeClass('disabled');\n        this.triggerEnabled = true;\n    },\n\n    disableTrigger: function() {\n        if (!this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.addClass('disabled');\n        this.triggerEnabled = false;\n    },\n\n    handleTriggerActivation: function(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (this.triggerEnabled) {\n            this.settings.activate(this.$selectedItems);\n        }\n    }\n}, {\n    defaults: {\n        type: null,\n        batch: true,\n        validateSelection: null,\n        activate: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend({\n    queue: null,\n    workers: [],\n\n    init: function() {\n        this.queue = [];\n\n        for (var i = 0; i < 3; i++) {\n            this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n        }\n    },\n\n    load: function($elements) {\n        // Only immediately load the visible images\n        let $thumbs = $elements.find('.elementthumb');\n        for (let i = 0; i < $thumbs.length; i++) {\n            let $thumb = $thumbs.eq(i);\n            let $scrollParent = $thumb.scrollParent();\n            if (this.isVisible($thumb, $scrollParent)) {\n                this.addToQueue($thumb[0]);\n            } else {\n                let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                $scrollParent.on(`scroll.${key}`, {\n                    $thumb: $thumb,\n                    $scrollParent: $scrollParent,\n                    key: key,\n                }, (ev) => {\n                    if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                        delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                        $scrollParent.off(`scroll.${ev.data.key}`);\n                        this.addToQueue(ev.data.$thumb[0]);\n                    }\n                });\n            }\n        }\n    },\n\n    addToQueue: function(thumb) {\n        this.queue.push(thumb);\n\n        // See if there are any inactive workers\n        for (var i = 0; i < this.workers.length; i++) {\n            if (!this.workers[i].active) {\n                this.workers[i].loadNext();\n            }\n        }\n    },\n\n    isVisible: function($thumb, $scrollParent) {\n        let thumbOffset = $thumb.offset().top;\n        let scrollParentOffset, scrollParentHeight;\n        if ($scrollParent[0] === document) {\n            scrollParentOffset = $scrollParent.scrollTop();\n            scrollParentHeight = Garnish.$win.height();\n        } else {\n            scrollParentOffset = $scrollParent.offset().top;\n            scrollParentHeight = $scrollParent.height();\n        }\n        return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.workers.length; i++) {\n            this.workers[i].destroy();\n        }\n\n        this.base();\n    }\n}, {\n    invisibleThumbs: {},\n    retryAll: function() {\n        for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n            let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n            delete Craft.ElementThumbLoader.invisibleThumbs[key];\n            $scrollParent.off(`scroll.${key}`);\n            queue.load($thumb.parent());\n        }\n    }\n});\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend({\n    loader: null,\n    active: false,\n\n    init: function(loader) {\n        this.loader = loader;\n    },\n\n    loadNext: function() {\n        var container = this.loader.queue.shift();\n        if (typeof container === 'undefined') {\n            this.active = false;\n            return;\n        }\n\n        this.active = true;\n        var $container = $(container);\n        if ($container.find('img').length) {\n            this.loadNext();\n            return;\n        }\n        var $img = $('<img/>', {\n            sizes: $container.attr('data-sizes'),\n            srcset: $container.attr('data-srcset'),\n            alt: ''\n        });\n        this.addListener($img, 'load,error', 'loadNext');\n        $img.appendTo($container);\n        picturefill({\n            elements: [$img[0]]\n        });\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend({\n    $form: null,\n    inputs: null,\n\n    init: function(form, inputs) {\n        this.$form = $(form);\n\n        // Only check specific inputs?\n        if (typeof inputs !== 'undefined') {\n            this.inputs = [];\n            inputs = $.makeArray(inputs);\n\n            for (var i = 0; i < inputs.length; i++) {\n                var $inputs = $(inputs[i]);\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $inputs.eq(j);\n\n                    this.inputs.push({\n                        input: $input,\n                        val: Garnish.getInputPostVal($input)\n                    });\n                }\n            }\n        }\n\n        this.addListener(this.$form, 'submit', 'handleFormSubmit');\n    },\n\n    handleFormSubmit: function(ev) {\n        // Ignore if we're in the middle of getting the elevated session timeout\n        if (Craft.elevatedSessionManager.fetchingTimeout) {\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            return;\n        }\n\n        // Are we only interested in certain inputs?\n        if (this.inputs) {\n            var inputsChanged = false;\n            var $input;\n\n            for (var i = 0; i < this.inputs.length; i++) {\n                $input = this.inputs[i].input;\n                // Is this a password input?\n                if ($input.data('passwordInput')) {\n                    $input = $input.data('passwordInput').$currentInput;\n                }\n\n                // Has this input's value changed?\n                if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                    inputsChanged = true;\n                    break;\n                }\n            }\n\n            if (!inputsChanged) {\n                // No need to interrupt the submit\n                return;\n            }\n        }\n\n        // Prevent the form from submitting until the user has an elevated session\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n        Craft.elevatedSessionManager.requireElevatedSession(this.submitForm.bind(this));\n    },\n\n    submitForm: function() {\n        // Don't let handleFormSubmit() interrupt this time\n        this.disable();\n        this.$form.trigger('submit');\n        this.enable();\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend({\n    fetchingTimeout: false,\n\n    passwordModal: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $submitBtn: null,\n    $errorPara: null,\n\n    callback: null,\n\n    /**\n     * Requires that the user has an elevated session.\n     *\n     * @param {function} callback The callback function that should be called once the user has an elevated session\n     */\n    requireElevatedSession: function(callback) {\n        this.callback = callback;\n\n        // Check the time remaining on the user's elevated session (if any)\n        this.fetchingTimeout = true;\n\n        Craft.postActionRequest('users/get-elevated-session-timeout', (response, textStatus) => {\n            this.fetchingTimeout = false;\n\n            if (textStatus === 'success') {\n                // Is there still enough time left or has it been disabled?\n                if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                    this.callback();\n                } else {\n                    // Show the password modal\n                    this.showPasswordModal();\n                }\n            }\n        });\n    },\n\n    showPasswordModal: function() {\n        if (!this.passwordModal) {\n            var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<td/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Submit'),\n            }).appendTo($buttonContainer);\n            this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.passwordModal = new Garnish.Modal($passwordModal, {\n                closeOtherModals: false,\n                onFadeIn: () => {\n                    setTimeout(this.focusPasswordInput.bind(this), 100);\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($passwordModal, 'submit', 'submitPassword');\n        } else {\n            this.passwordModal.show();\n        }\n    },\n\n    focusPasswordInput: function() {\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$passwordInput.trigger('focus');\n        }\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$submitBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$submitBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    submitPassword: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (!this.validatePassword()) {\n            return;\n        }\n\n        this.$passwordSpinner.removeClass('hidden');\n        this.clearLoginError();\n\n        var data = {\n            currentPassword: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/start-elevated-session', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.passwordModal.hide();\n                    this.callback();\n                } else {\n                    this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                    Garnish.shake(this.passwordModal.$container);\n                    this.focusPasswordInput();\n                }\n            } else {\n                this.showPasswordError();\n            }\n        });\n    },\n\n    showPasswordError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$errorPara.text(error);\n        this.passwordModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showPasswordError('');\n    }\n}, {\n    minSafeElevatedSessionTimeout: 5\n});\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend({\n    publishableSections: null,\n    $newEntryBtnGroup: null,\n    $newEntryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible sections the user has permission to create new entries in\n        this.publishableSections = [];\n\n        for (var i = 0; i < Craft.publishableSections.length; i++) {\n            var section = Craft.publishableSections[i];\n\n            if (this.getSourceByKey('section:' + section.uid)) {\n                this.publishableSections.push(section);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific section in the URL?\n        if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n            if (defaultSectionHandle === 'singles') {\n                return 'singles';\n            } else {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultSectionHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        var handle;\n\n        // Get the handle of the selected source\n        if (this.$source.data('key') === 'singles') {\n            handle = 'singles';\n        } else {\n            handle = this.$source.data('handle');\n        }\n\n        // Update the New Entry button\n        // ---------------------------------------------------------------------\n\n        var i, href, label;\n\n        if (this.publishableSections.length) {\n            // Remove the old button, if there is one\n            if (this.$newEntryBtnGroup) {\n                this.$newEntryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a section that they have permission to create entries in\n            var selectedSection;\n\n            if (handle) {\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    if (this.publishableSections[i].handle === handle) {\n                        selectedSection = this.publishableSections[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n            // Otherwise only show a menu button\n            if (selectedSection) {\n                href = this._getSectionTriggerHref(selectedSection);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                        this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.publishableSections.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n            } else {\n                this.$newEntryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New entry'),\n                }).appendTo(this.$newEntryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    var section = this.publishableSections[i];\n\n                    if (\n                        (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                        (this.settings.context !== 'index' && section !== selectedSection)\n                    ) {\n                        href = this._getSectionTriggerHref(section);\n                        label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newEntryBtnGroup);\n        }\n\n        // Update the URL if we're on the Entries index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'entries';\n\n            if (handle) {\n                uri += '/' + handle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getSectionTriggerHref: function(section) {\n        if (this.settings.context === 'index') {\n            var uri = 'entries/' + section.handle + '/new';\n            let params = {};\n            if (this.siteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        params.site = Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n        } else {\n            return 'data-id=\"' + section.id + '\"';\n        }\n    },\n\n    _openCreateEntryModal: function(sectionId) {\n        if (this.$newEntryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the section\n        var section;\n\n        for (var i = 0; i < this.publishableSections.length; i++) {\n            if (this.publishableSections[i].id == sectionId) {\n                section = this.publishableSections[i];\n                break;\n            }\n        }\n\n        if (!section) {\n            return;\n        }\n\n        this.$newEntryBtn.addClass('inactive');\n        var newEntryBtnText = this.$newEntryBtn.text();\n        this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newEntryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                sectionId: sectionId,\n                typeId: section.entryTypes[0].id,\n                enabled: section.canPublish ? 1 : 0,\n            },\n            onBeginLoading: () => {\n                this.$newEntryBtn.addClass('loading');\n            },\n            onEndLoading: () => {\n                this.$newEntryBtn.removeClass('loading');\n            },\n            onHideHud: () => {\n                this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right section is selected\n                var sectionSourceKey = 'section:' + section.uid;\n\n                if (this.sourceKey !== sectionSourceKey) {\n                    this.selectSourceByKey(sectionSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n","/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: this.onTabOptionSelect.bind(this)\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const $labelSpan = $tab.find('.tabs .tab span');\n        const oldName = $labelSpan.text();\n        const newName = this.promptForTabName(oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    promptForTabName: function(oldName) {\n        return prompt(Craft.t('app', 'Give your tab a name.'), oldName);\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const name = this.promptForTabName();\n        if (!name) {\n            return;\n        }\n\n        const $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>${name}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend({\n    $toggle: null,\n    targetPrefix: null,\n    targetSelector: null,\n    reverseTargetSelector: null,\n\n    _$target: null,\n    _$reverseTarget: null,\n    type: null,\n\n    init: function(toggle) {\n        this.$toggle = $(toggle);\n\n        // Is this already a field toggle?\n        if (this.$toggle.data('fieldtoggle')) {\n            Garnish.log('Double-instantiating a field toggle on an element');\n            this.$toggle.data('fieldtoggle').destroy();\n        }\n\n        this.$toggle.data('fieldtoggle', this);\n\n        this.type = this.getType();\n\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n        } else {\n            this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n            this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n        }\n\n        this.findTargets();\n\n        switch (this.type) {\n            case 'link':\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n                break;\n            case 'fieldset':\n                this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                break;\n            default:\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n                this.onToggleChange();\n        }\n    },\n\n    normalizeTargetSelector: function(selector) {\n        if (selector && !selector.match(/^[#\\.]/)) {\n            selector = '#' + selector;\n        }\n\n        return selector;\n    },\n\n    getType: function() {\n        let nodeName = this.$toggle.prop('nodeName');\n        if (\n            (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n            this.$toggle.attr('role') === 'checkbox' ||\n            this.$toggle.attr('role') === 'switch'\n        ) {\n            return 'checkbox';\n        }\n\n        switch (nodeName) {\n            case 'SELECT':\n                return 'select';\n            case 'A':\n                return 'link';\n            case 'FIELDSET':\n                return 'fieldset';\n        }\n\n        console.warn('Unexpected field toggle:', this.$toggle[0]);\n    },\n\n    findTargets: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            var toggleVal = this.getToggleVal();\n            this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n        } else {\n            if (this.targetSelector) {\n                this._$target = $(this.targetSelector);\n            }\n\n            if (this.reverseTargetSelector) {\n                this._$reverseTarget = $(this.reverseTargetSelector);\n            }\n        }\n    },\n\n    getToggleVal: function() {\n        if (this.type === 'checkbox') {\n            if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                return this.$toggle.prop('checked');\n            }\n            return this.$toggle.attr('aria-checked') === 'true';\n        }\n\n        let postVal;\n        if (this.type === 'fieldset') {\n            postVal = this.$toggle.find('input:checked:first').val();\n        } else {\n            postVal = Garnish.getInputPostVal(this.$toggle);\n        }\n\n        // Normalize the value\n        return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n    },\n\n    onToggleChange: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.hideTarget(this._$target);\n            this.findTargets();\n            this.showTarget(this._$target);\n        } else {\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n            } else {\n                this.onToggleChange._show = !!this.getToggleVal();\n            }\n\n            if (this.onToggleChange._show) {\n                this.showTarget(this._$target);\n                this.hideTarget(this._$reverseTarget);\n            } else {\n                this.hideTarget(this._$target);\n                this.showTarget(this._$reverseTarget);\n            }\n\n            delete this.onToggleChange._show;\n        }\n    },\n\n    showTarget: function($target) {\n        if ($target && $target.length) {\n            this.showTarget._currentHeight = $target.height();\n\n            $target.removeClass('hidden');\n\n            if (this.type !== 'select' && this.type !== 'fieldset') {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('collapsed');\n                    this.$toggle.addClass('expanded');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.prop('nodeName') !== 'SPAN') {\n                            $t.height('auto');\n                            this.showTarget._targetHeight = $t.height();\n                            $t.css({\n                                height: this.showTarget._currentHeight,\n                                overflow: 'hidden'\n                            });\n\n                            $t.velocity('stop');\n\n                            $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                $t.css({\n                                    height: '',\n                                    overflow: ''\n                                });\n                            });\n                        }\n                    })($target.eq(i));\n                }\n\n                delete this.showTarget._targetHeight;\n            }\n\n            delete this.showTarget._currentHeight;\n\n            // Trigger a resize event in case there are any grids in the target that need to initialize\n            Garnish.$win.trigger('resize');\n        }\n    },\n\n    hideTarget: function($target) {\n        if ($target && $target.length) {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                $target.addClass('hidden');\n            } else {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('expanded');\n                    this.$toggle.addClass('collapsed');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.hasClass('hidden')) {\n                            return;\n                        }\n                        if ($t.prop('nodeName') === 'SPAN') {\n                            $t.addClass('hidden');\n                        } else {\n                            $t.css('overflow', 'hidden');\n                            $t.velocity('stop');\n                            $t.velocity({height: 0}, 'fast', function() {\n                                $t.addClass('hidden');\n                            });\n                        }\n                    })($target.eq(i));\n                }\n            }\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend({\n    $container: null,\n\n    $items: null,\n    items: null,\n    totalCols: null,\n    colGutterDrop: null,\n    colPctWidth: null,\n\n    possibleItemColspans: null,\n    possibleItemPositionsByColspan: null,\n\n    itemPositions: null,\n    itemColspansByPosition: null,\n\n    layouts: null,\n    layout: null,\n    itemHeights: null,\n    leftPadding: null,\n\n    _refreshingCols: false,\n    _refreshColsAfterRefresh: false,\n    _forceRefreshColsAfterRefresh: false,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n\n        // Is this already a grid?\n        if (this.$container.data('grid')) {\n            Garnish.log('Double-instantiating a grid on an element');\n            this.$container.data('grid').destroy();\n        }\n\n        this.$container.data('grid', this);\n\n        this.setSettings(settings, Craft.Grid.defaults);\n\n        // Set the refreshCols() proxy that container resizes will trigger\n        this.handleContainerHeightProxy = () => {\n            this.refreshCols(false, true);\n        };\n\n        this.$items = this.$container.children(this.settings.itemSelector);\n        this.setItems();\n        this.refreshCols(true, false);\n\n        Garnish.$doc.ready(() => {\n            this.refreshCols(false, false);\n        });\n    },\n\n    addItems: function(items) {\n        this.$items = $().add(this.$items.add(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    removeItems: function(items) {\n        this.$items = $().add(this.$items.not(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    resetItemOrder: function() {\n        this.$items = $().add(this.$items);\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    setItems: function() {\n        this.setItems._ = {};\n\n        this.items = [];\n\n        for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n            this.items.push($(this.$items[this.setItems._.i]));\n        }\n\n        delete this.setItems._;\n    },\n\n    refreshCols: function(force) {\n        if (this._refreshingCols) {\n            this._refreshColsAfterRefresh = true;\n            if (force) {\n                this._forceRefreshColsAfterRefresh = true;\n            }\n            return;\n        }\n\n        this._refreshingCols = true;\n\n        if (!this.items.length) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.refreshCols._ = {};\n\n        // Check to see if the grid is actually visible\n        this.refreshCols._.oldHeight = this.$container[0].style.height;\n        this.$container[0].style.height = 1;\n        this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n        this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n        if (this.refreshCols._.scrollHeight === 0) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        if (this.settings.cols) {\n            this.refreshCols._.totalCols = this.settings.cols;\n        } else {\n            this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n            // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n            if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n            }\n\n            if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                this.refreshCols._.totalCols = this.settings.maxCols;\n            }\n        }\n\n        if (this.refreshCols._.totalCols === 0) {\n            this.refreshCols._.totalCols = 1;\n        }\n\n        // Same number of columns as before?\n        if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.totalCols = this.refreshCols._.totalCols;\n        this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n        // Temporarily stop listening to container resizes\n        this.removeListener(this.$container, 'resize');\n\n        if (this.settings.fillMode === 'grid') {\n            this.refreshCols._.itemIndex = 0;\n\n            while (this.refreshCols._.itemIndex < this.items.length) {\n                // Append the next X items and figure out which one is the tallest\n                this.refreshCols._.tallestItemHeight = -1;\n                this.refreshCols._.colIndex = 0;\n\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                    if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                        this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                    }\n\n                    this.refreshCols._.colIndex++;\n                }\n\n                if (this.settings.snapToGrid) {\n                    this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                    if (this.refreshCols._.remainder) {\n                        this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                    }\n                }\n\n                // Now set their heights to the tallest one\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                }\n\n                // set the this.refreshCols._.itemIndex pointer to the next one up\n                this.refreshCols._.itemIndex += this.totalCols;\n            }\n        } else {\n            this.removeListener(this.$items, 'resize');\n\n            // If there's only one column, sneak out early\n            if (this.totalCols === 1) {\n                this.$container.height('auto');\n                this.$items\n                    .show()\n                    .css({\n                        position: 'relative',\n                        width: 'auto',\n                        top: 0\n                    })\n                    .css(Craft.left, 0);\n            } else {\n                this.$items.css('position', 'absolute');\n                this.colPctWidth = (100 / this.totalCols);\n\n                // The setup\n\n                this.layouts = [];\n\n                this.itemPositions = [];\n                this.itemColspansByPosition = [];\n\n                // Figure out all of the possible colspans for each item,\n                // as well as all the possible positions for each item at each of its colspans\n\n                this.possibleItemColspans = [];\n                this.possibleItemPositionsByColspan = [];\n                this.itemHeightsByColspan = [];\n\n                for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                    this.possibleItemColspans[this.refreshCols._.item] = [];\n                    this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                    this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                    this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                    this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                    this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                    this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                    this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                    if (this.refreshCols._.minColspan > this.totalCols) {\n                        this.refreshCols._.minColspan = this.totalCols;\n                    }\n                    if (this.refreshCols._.maxColspan > this.totalCols) {\n                        this.refreshCols._.maxColspan = this.totalCols;\n                    }\n\n                    for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                        // Get the height for this colspan\n                        this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                        this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                        this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                        if (this.refreshCols._.positionLeft) {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = 0;\n                        } else if (this.refreshCols._.positionRight) {\n                            this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                            this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                        } else {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                        }\n\n                        for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                        }\n                    }\n                }\n\n                // Find all the possible layouts\n\n                this.refreshCols._.colHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                    this.refreshCols._.colHeights.push(0);\n                }\n\n                this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                // Now find the layout that looks the best.\n\n                // First find the layouts with the highest number of used columns\n                this.refreshCols._.layoutTotalCols = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                    for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                        if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                            this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                        }\n                    }\n                }\n\n                this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                // Filter out the ones that aren't using as many columns as they could be\n                for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                    if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                        this.layouts.splice(this.refreshCols._.i, 1);\n                    }\n                }\n\n                // Find the layout(s) with the least overall height\n                this.refreshCols._.layoutHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                }\n\n                this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                this.refreshCols._.shortestLayouts = [];\n                this.refreshCols._.emptySpaces = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                    if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                        this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                        // Now get its total empty space, including any trailing empty space\n                        this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                        }\n\n                        this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                    }\n                }\n\n                // And the layout with the least empty space is...\n                this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                // Set the item widths and left positions\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                    this.refreshCols._.css = {\n                        width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                    };\n                    this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                    this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                }\n\n                // If every item is at position 0, then let them lay out au naturel\n                if (this.isSimpleLayout()) {\n                    this.$container.height('auto');\n                    this.$items.css({\n                        position: 'relative',\n                        top: 0,\n                        'margin-bottom': this.settings.gutter + 'px'\n                    });\n                } else {\n                    this.$items.css('position', 'absolute');\n\n                    // Now position the items\n                    this.positionItems();\n\n                    // Update the positions as the items' heigthts change\n                    this.addListener(this.$items, 'resize', 'onItemResize');\n                }\n            }\n        }\n\n        this.completeRefreshCols();\n\n        // Resume container resize listening\n        this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n        this.onRefreshCols();\n    },\n\n    completeRefreshCols: function() {\n        // Delete the internal variable object\n        if (typeof this.refreshCols._ !== 'undefined') {\n            delete this.refreshCols._;\n        }\n\n        this._refreshingCols = false;\n\n        if (this._refreshColsAfterRefresh) {\n            var force = this._forceRefreshColsAfterRefresh;\n            this._refreshColsAfterRefresh = false;\n            this._forceRefreshColsAfterRefresh = false;\n\n            Garnish.requestAnimationFrame(() => {\n                this.refreshCols(force);\n            });\n        }\n    },\n\n    getItemWidth: function(colspan) {\n        return (this.colPctWidth * colspan);\n    },\n\n    getItemWidthCss: function(colspan) {\n        return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n    },\n\n    getItemWidthInPx: function(colspan) {\n        return this.getItemWidth(colspan) / 100 * this.$container.width() - this.colGutterDrop;\n    },\n\n    getItemLeftPosCss: function(position) {\n        return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n    },\n\n    getItemLeftPosInPx: function(position) {\n        return (this.getItemWidth(1) / 100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n    },\n\n    isSimpleLayout: function() {\n        this.isSimpleLayout._ = {};\n\n        for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n            if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                delete this.isSimpleLayout._;\n                return false;\n            }\n        }\n\n        delete this.isSimpleLayout._;\n        return true;\n    },\n\n    positionItems: function() {\n        this.positionItems._ = {};\n\n        this.positionItems._.colHeights = [];\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n            this.positionItems._.colHeights.push(0);\n        }\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n            this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n            this.positionItems._.affectedColHeights = [];\n\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n            }\n\n            this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n            if (this.positionItems._.top > 0) {\n                this.positionItems._.top += this.settings.gutter;\n            }\n\n            this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n            // Now add the new heights to those columns\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n            }\n        }\n\n        // Set the container height\n        this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n        delete this.positionItems._;\n    },\n\n    onItemResize: function(ev) {\n        this.onItemResize._ = {};\n\n        // Prevent this from bubbling up to the container, which has its own resize listener\n        ev.stopPropagation();\n\n        this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n        if (this.onItemResize._.item !== -1) {\n            // Update the height and reposition the items\n            this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n            if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                this.positionItems(false);\n            }\n        }\n\n        delete this.onItemResize._;\n    },\n\n    onRefreshCols: function() {\n        this.trigger('refreshCols');\n        this.settings.onRefreshCols();\n    }\n}, {\n    defaults: {\n        itemSelector: '.item',\n        cols: null,\n        maxCols: null,\n        minColWidth: 320,\n        gutter: 14,\n        fillMode: 'top',\n        colClass: 'col',\n        snapToGrid: null,\n\n        onRefreshCols: $.noop\n    }\n});\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend({\n    grid: null,\n    _: null,\n\n    init: function(grid) {\n        this.grid = grid;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        this._ = {};\n\n        // Loop through all possible colspans\n        for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n            this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n            // Loop through all the possible positions for this colspan,\n            // and find the one that is closest to the top\n\n            this._.tallestColHeightsByPosition = [];\n\n            for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                this._.colHeightsForPosition = [];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                }\n\n                this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n            }\n\n            // And the shortest position for this colspan is...\n            this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n            this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n            // Now log the colspan/position placement\n            this._.positions = prevPositions.slice(0);\n            this._.colspans = prevColspans.slice(0);\n            this._.colHeights = prevColHeights.slice(0);\n            this._.emptySpace = prevEmptySpace;\n\n            this._.positions.push(this._.position);\n            this._.colspans.push(this._.colspan);\n\n            // Add the new heights to those columns\n            this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n            this._.endingCol = this._.position + this._.colspan - 1;\n\n            for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n            }\n\n            // If this is the last item, create the layout\n            if (item === this.grid.items.length - 1) {\n                this.grid.layouts.push({\n                    positions: this._.positions,\n                    colspans: this._.colspans,\n                    colHeights: this._.colHeights,\n                    emptySpace: this._.emptySpace\n                });\n            } else {\n                // Dive deeper\n                this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n            }\n        }\n\n        delete this._;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Remove inner-word punctuation\n        handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        handle = handle.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        handle = Craft.asciiString(handle);\n\n        if (!this.settings.allowNonAlphaStart) {\n            // Handle must start with a letter\n            handle = handle.replace(/^[^a-z]+/, '');\n        }\n\n        // Get the \"words\"\n        var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n        handle = '';\n\n        if (Craft.handleCasing === 'snake') {\n            return words.join('_');\n        }\n\n        // Make it camelCase\n        for (let i = 0; i < words.length; i++) {\n            if (Craft.handleCasing !== 'pascal' && i === 0) {\n                handle += words[i];\n            } else {\n                handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n            }\n        }\n\n        return handle;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend({\n    $container: null,\n    progressBar: null,\n    uploader: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ImageUpload.defaults);\n        this.initImageUpload();\n    },\n\n    initImageUpload: function() {\n        this.$container = $(this.settings.containerSelector);\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl(this.settings.uploadAction),\n            formData: this.settings.postParameters,\n            fileInput: this.$container.find(this.settings.fileInputSelector),\n            paramName: this.settings.uploadParamName\n        };\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n        options.events.fileuploadfail = this._onUploadError.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        this.initButtons();\n    },\n\n    initButtons: function() {\n        this.$container.find(this.settings.uploadButtonSelector).on('click', ev => {\n            this.$container.find(this.settings.fileInputSelector).trigger('click');\n        });\n\n        this.$container.find(this.settings.deleteButtonSelector).on('click', ev => {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        this.refreshImage(response);\n                    }\n                });\n            }\n        });\n    },\n\n    refreshImage: function(response) {\n        $(this.settings.containerSelector).replaceWith(response.html);\n        this.settings.onAfterRefreshImage(response);\n        this.initImageUpload();\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function(event) {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var html = $(data.result.html);\n            this.refreshImage(data.result);\n        }\n\n        // Last file\n        if (this.uploader.isLastUpload()) {\n            this.progressBar.hideProgressBar();\n            this.$container.removeClass('uploading');\n        }\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadError: function(event, data) {\n        if (data.jqXHR.responseJSON.error) {\n            alert(data.jqXHR.responseJSON.error);\n            this.$container.removeClass('uploading');\n            this.progressBar.hideProgressBar();\n            this.progressBar.resetProgressBar();\n        }\n    }\n}, {\n    defaults: {\n        postParameters: {},\n        uploadAction: \"\",\n        deleteAction: \"\",\n        fileInputSelector: \"\",\n\n        onAfterRefreshImage: $.noop,\n        containerSelector: null,\n\n        uploadButtonSelector: null,\n        deleteButtonSelector: null,\n\n        uploadParamName: 'files'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend({\n    $icon: null,\n    content: null,\n    hud: null,\n\n    init: function(icon) {\n        this.$icon = $(icon);\n\n        if (this.$icon.data('infoicon')) {\n            Garnish.log('Double-instantiating an info icon on an element');\n            this.content = this.$icon.data('infoicon').content;\n            this.$icon.data('infoicon').destroy();\n        } else {\n            this.content = this.$icon.html();\n            this.$icon\n                .html('')\n                .attr({\n                    tabindex: 0,\n                    'role': 'button',\n                    'aria-label': Craft.t('app', 'Information'),\n                });\n        }\n\n        this.$icon.data('infoicon', this);\n\n        if (this.$icon[0].previousSibling && this.$icon[0].previousSibling.nodeType === Node.TEXT_NODE) {\n            // Make sure it's in a .nowrap container\n            const $parent = this.$icon.parent();\n            if (!$parent.hasClass('nowrap')) {\n                // Find the last word in the text\n                const m = this.$icon[0].previousSibling.nodeValue.match(/[^\\s\\-]+\\s*$/);\n                if (m) {\n                    this.$icon[0].previousSibling.nodeValue = this.$icon[0].previousSibling.nodeValue.substr(0, m.index);\n                    $('<span/>', {\n                        class: 'nowrap',\n                        html: m[0].replace(/\\s+$/, '') + ' ',\n                    })\n                        .insertAfter(this.$icon[0].previousSibling)\n                        .append(this.$icon);\n                }\n            }\n        }\n\n        this.addListener(this.$icon, 'click', ev => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.showHud();\n        });\n\n        this.addListener(this.$icon, 'keydown', ev => {\n            if (!(this.hud && this.hud.showing) && [Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.showHud();\n            }\n        });\n    },\n\n    showHud: function(ev) {\n        if (!this.hud) {\n            this.hud = new Garnish.HUD(this.$icon, this.content, {\n                hudClass: 'hud info-hud',\n                closeOtherHUDs: false,\n                onShow: () => {\n                    Garnish.shortcutManager.registerShortcut(Garnish.SPACE_KEY, () => {\n                        this.hud.hide();\n                    });\n                },\n            });\n            Craft.initUiElements(this.hud.$body);\n        } else {\n            this.hud.show();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend({\n    settings: null,\n    $outerContainer: null,\n    $innerContainer: null,\n    $input: null,\n    small: false,\n    on: false,\n    indeterminate: false,\n    dragger: null,\n\n    dragStartMargin: null,\n\n    init: function(outerContainer, settings) {\n        this.$outerContainer = $(outerContainer);\n\n        // Is this already a lightswitch?\n        if (this.$outerContainer.data('lightswitch')) {\n            Garnish.log('Double-instantiating a lightswitch on an element');\n            this.$outerContainer.data('lightswitch').destroy();\n        }\n\n        this.$outerContainer.data('lightswitch', this);\n\n        this.small = this.$outerContainer.hasClass('small');\n\n        this.setSettings(settings, Craft.LightSwitch.defaults);\n\n        this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n        this.$input = this.$outerContainer.find('input:first');\n\n        // If the input is disabled, go no further\n        if (this.$input.prop('disabled')) {\n            return;\n        }\n\n        this.on = this.$outerContainer.hasClass('on');\n        this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n        this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n        this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n        this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n            axis: Garnish.X_AXIS,\n            ignoreHandleSelector: null,\n            onDragStart: this._onDragStart.bind(this),\n            onDrag: this._onDrag.bind(this),\n            onDragStop: this._onDragStop.bind(this)\n        });\n\n        // Does the input have on/off labels?\n        let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n        if ($wrapper.length) {\n            this.addListener($wrapper.children('span[data-toggle=\"off\"]'), 'click', this.turnOff);\n            this.addListener($wrapper.children('span[data-toggle=\"on\"]'), 'click', this.turnOn);\n        }\n    },\n\n    turnOn: function(muteEvent) {\n        var changed = !this.on;\n\n        this.on = true;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.value);\n        this.$outerContainer.addClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'true');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnOff: function(muteEvent) {\n        var changed = this.on || this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin();\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val('');\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'false');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnIndeterminate: function(muteEvent) {\n        var changed = !this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = true;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.indeterminateValue);\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.addClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'mixed');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    toggle: function() {\n        if (this.indeterminate || !this.on) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    onChange: function() {\n        this.trigger('change');\n        this.settings.onChange(this.on);\n        this.$outerContainer.trigger('change');\n    },\n\n    _onMouseDown: function() {\n        this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n    },\n\n    _onMouseUp: function() {\n        this.removeListener(Garnish.$doc, 'mouseup');\n\n        // Was this a click?\n        if (!this.dragger.dragging) {\n            this.toggle();\n        }\n    },\n\n    _onKeyDown: function(event) {\n        switch (event.keyCode) {\n            case Garnish.SPACE_KEY: {\n                this.toggle();\n                event.preventDefault();\n                break;\n            }\n            case Garnish.RIGHT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOn();\n                } else {\n                    this.turnOff();\n                }\n\n                event.preventDefault();\n                break;\n            }\n            case Garnish.LEFT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOff();\n                } else {\n                    this.turnOn();\n                }\n\n                event.preventDefault();\n                break;\n            }\n        }\n    },\n\n    _getMargin: function() {\n        return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n    },\n\n    _onDragStart: function() {\n        this.$outerContainer.addClass('dragging');\n        this.dragStartMargin = this._getMargin();\n    },\n\n    _onDrag: function() {\n        var margin;\n\n        if (Craft.orientation === 'ltr') {\n            margin = this.dragStartMargin + this.dragger.mouseDistX;\n        } else {\n            margin = this.dragStartMargin - this.dragger.mouseDistX;\n        }\n\n        if (margin < this._getOffMargin()) {\n            margin = this._getOffMargin();\n        } else if (margin > 0) {\n            margin = 0;\n        }\n\n        this.$innerContainer.css('margin-' + Craft.left, margin);\n    },\n\n    _onDragStop: function() {\n        var margin = this._getMargin();\n        console.log(margin);\n\n        if (margin > (this._getOffMargin() / 2)) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    _onSettle: function() {\n        this.$outerContainer.removeClass('dragging');\n    },\n\n    destroy: function() {\n        this.base();\n        this.dragger.destroy();\n    },\n\n    _getOffMargin: function() {\n        return (this.small ? -10 : -12);\n    }\n}, {\n    animationDuration: 100,\n    defaults: {\n        value: '1',\n        indeterminateValue: '-',\n        onChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend({\n    $extraFields: null,\n    $trigger: null,\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $iframe: null,\n    $fieldPlaceholder: null,\n\n    previewUrl: null,\n    token: null,\n    basePostData: null,\n    inPreviewMode: false,\n    fields: null,\n    lastPostData: null,\n    updateIframeInterval: null,\n    loading: false,\n    checkAgain: false,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _slideInOnIframeLoad: false,\n    _forceUpdateIframeProxy: null,\n\n    _scrollX: null,\n    _scrollY: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.LivePreview.defaults);\n\n        // Should preview requests use a specific URL?\n        // This won't affect how the request gets routed (the action param will override it),\n        // but it will allow the templates to change behavior based on the request URI.\n        if (this.settings.previewUrl) {\n            this.previewUrl = this.settings.previewUrl;\n        } else {\n            this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n        }\n\n        // Load the preview over SSL if the current request is\n        if (document.location.protocol === 'https:') {\n            this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n        }\n\n        // Set the base post data\n        this.basePostData = $.extend({}, this.settings.previewParams);\n\n        this._forceUpdateIframeProxy = this.forceUpdateIframe.bind(this);\n\n        // Find the DOM elements\n        this.$extraFields = $(this.settings.extraFields);\n        this.$trigger = $(this.settings.trigger);\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n        // Event Listeners\n        this.addListener(this.$trigger, 'activate', 'toggle');\n\n        Craft.cp.on('beforeSaveShortcut', () => {\n            if (this.inPreviewMode) {\n                this.moveFieldsBack();\n            }\n        });\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n            inPx = Craft.LivePreview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    toggle: function() {\n        if (this.inPreviewMode) {\n            this.exit();\n        } else {\n            this.enter();\n        }\n    },\n\n    enter: function() {\n        if (this.inPreviewMode) {\n            return;\n        }\n\n        if (!this.token) {\n            this.createToken();\n            return;\n        }\n\n        this.trigger('beforeEnter');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            let $saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($editorHeader);\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this)\n            });\n\n            this.addListener($closeBtn, 'click', 'exit');\n            this.addListener($saveBtn, 'click', 'save');\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Move all the fields into the editor rather than copying them\n        // so any JS that's referencing the elements won't break.\n        this.fields = [];\n        var $fields = $(this.settings.fields);\n\n        for (var i = 0; i < $fields.length; i++) {\n            var $field = $($fields[i]),\n                $clone = this._getClone($field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter($field);\n            $field.detach();\n            this.$fieldPlaceholder.replaceWith($clone);\n            $field.appendTo(this.$editor);\n\n            this.fields.push({\n                $field: $field,\n                $clone: $clone\n            });\n        }\n\n        if (this.updateIframe()) {\n            this._slideInOnIframeLoad = true;\n        } else {\n            this.slideIn();\n        }\n\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = true;\n        this.trigger('enter');\n    },\n\n    createToken: function() {\n        Craft.postActionRequest('live-preview/create-token', {\n            previewAction: this.settings.previewAction\n        }, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.token = response.token;\n                this.enter();\n            }\n        });\n    },\n\n    save: function() {\n        Craft.cp.submitPrimaryForm();\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.updateIframeInterval = setInterval(this.updateIframe.bind(this), 1000);\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.exit();\n                }\n            });\n        });\n    },\n\n    exit: function() {\n        if (!this.inPreviewMode) {\n            return;\n        }\n\n        this.trigger('beforeExit');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        if (this.updateIframeInterval) {\n            clearInterval(this.updateIframeInterval);\n        }\n\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n        });\n\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = false;\n        this.trigger('exit');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n    },\n\n    updateIframe: function(force) {\n        if (force) {\n            this.lastPostData = null;\n        }\n\n        if (!this.inPreviewMode) {\n            return false;\n        }\n\n        if (this.loading) {\n            this.checkAgain = true;\n            return false;\n        }\n\n        // Has the post data changed?\n        var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n        if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n            this.lastPostData = postData;\n            this.loading = true;\n\n            var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n            this._scrollX = $doc ? $doc.scrollLeft() : 0;\n            this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n            $.ajax({\n                url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                method: 'POST',\n                data: $.extend({}, postData, this.basePostData),\n                headers: {\n                    'X-Craft-Token': this.token\n                },\n                xhrFields: {\n                    withCredentials: true\n                },\n                crossDomain: true,\n                success: this.handleSuccess.bind(this),\n                error: this.handleError.bind(this),\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    forceUpdateIframe: function() {\n        return this.updateIframe(true);\n    },\n\n    handleSuccess: function(data) {\n        var html = data +\n            '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n        // Create a new iframe\n        var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n        if (this.$iframe) {\n            $iframe.insertBefore(this.$iframe);\n        } else {\n            $iframe.appendTo(this.$iframeContainer);\n        }\n\n        this.addListener($iframe, 'load', function() {\n            if (this.$iframe) {\n                this.$iframe.remove();\n            }\n            this.$iframe = $iframe;\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n\n            this.removeListener($iframe, 'load');\n        });\n\n        Garnish.requestAnimationFrame(() => {\n            $iframe[0].contentWindow.document.open();\n            $iframe[0].contentWindow.document.write(html);\n            $iframe[0].contentWindow.document.close();\n            this.onResponse();\n        });\n    },\n\n    handleError: function() {\n        this.onResponse();\n    },\n\n    onResponse: function() {\n        this.loading = false;\n\n        if (this.checkAgain) {\n            this.checkAgain = false;\n            this.updateIframe();\n        }\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n\n    defaults: {\n        trigger: '.livepreviewbtn',\n        fields: null,\n        extraFields: null,\n        previewUrl: null,\n        previewAction: null,\n        previewParams: {}\n    }\n});\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend({\n    $passwordWrapper: null,\n    $passwordInput: null,\n    $textInput: null,\n    $currentInput: null,\n\n    $showPasswordToggle: null,\n    showingPassword: null,\n\n    init: function(passwordInput, settings) {\n        this.$passwordInput = $(passwordInput);\n        this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n        this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n        // Is this already a password input?\n        if (this.$passwordInput.data('passwordInput')) {\n            Garnish.log('Double-instantiating a password input on an element');\n            this.$passwordInput.data('passwordInput').destroy();\n        }\n\n        this.$passwordInput.data('passwordInput', this);\n\n        this.$showPasswordToggle = $('<button type=\"button\" class=\"invisible\" />');\n        this.$showPasswordToggle.addClass('password-toggle');\n        this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n        this.initInputFocusEvents(this.$passwordInput);\n        this.addListener(this.$showPasswordToggle, 'click', 'onClick');\n        this.hidePassword();\n    },\n\n    setCurrentInput: function($input) {\n        if (this.$currentInput) {\n            // Swap the inputs, while preventing the focus animation\n            $input.insertAfter(this.$currentInput);\n            this.$currentInput.detach();\n            $input.trigger('focus');\n\n            // Restore the input value\n            $input.val(this.$currentInput.val());\n        }\n\n        this.$currentInput = $input;\n\n        this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n    },\n\n    updateToggleLabel: function(label) {\n        this.$showPasswordToggle.text(label);\n    },\n\n    initInputFocusEvents: function($input) {\n        this.addListener($input, 'focus', function() {\n            this.$passwordWrapper.addClass('focus');\n        });\n        this.addListener($input, 'blur', function() {\n            this.$passwordWrapper.removeClass('focus');\n        });\n    },\n\n    showPassword: function() {\n        if (this.showingPassword) {\n            return;\n        }\n\n        if (!this.$textInput) {\n            this.$textInput = this.$passwordInput.clone(true);\n            this.$textInput.attr('type', 'text');\n            this.initInputFocusEvents(this.$textInput);\n        }\n\n        this.setCurrentInput(this.$textInput);\n        this.updateToggleLabel(Craft.t('app', 'Hide'));\n        this.showingPassword = true;\n    },\n\n    hidePassword: function() {\n        // showingPassword could be null, which is acceptable\n        if (this.showingPassword === false) {\n            return;\n        }\n\n        this.setCurrentInput(this.$passwordInput);\n        this.updateToggleLabel(Craft.t('app', 'Show'));\n        this.showingPassword = false;\n\n        // Alt key temporarily shows the password\n        this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n    },\n\n    togglePassword: function() {\n        if (this.showingPassword) {\n            this.hidePassword();\n        } else {\n            this.showPassword();\n        }\n\n        this.settings.onToggleInput(this.$currentInput);\n    },\n\n    onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n            this.showPassword();\n            this.$showPasswordToggle.addClass('invisible');\n            this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n        }\n    },\n\n    onKeyUp: function(ev) {\n        ev.preventDefault();\n\n        if (ev.keyCode === Garnish.ALT_KEY) {\n            this.hidePassword();\n            this.$showPasswordToggle.removeClass('invisible');\n        }\n    },\n\n    onInputChange: function() {\n        if (this.$currentInput.val()) {\n            this.$showPasswordToggle.removeClass('invisible');\n        } else {\n            this.$showPasswordToggle.addClass('invisible');\n        }\n    },\n\n    onClick: function(ev) {\n        if (this.$currentInput[0].setSelectionRange) {\n            var selectionStart = this.$currentInput[0].selectionStart,\n                selectionEnd = this.$currentInput[0].selectionEnd;\n\n            this.togglePassword();\n            this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n        } else {\n            this.togglePassword();\n        }\n    }\n}, {\n    defaults: {\n        onToggleInput: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend({\n    draftEditor: null,\n\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $spinner: null,\n    $statusIcon: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $previewHeader: null,\n    $targetBtn: null,\n    $targetMenu: null,\n    $deviceTypeContainer: null,\n    $orientationBtn: null,\n    $deviceMask: null,\n    $devicePreviewContainer: null,\n    $iframe: null,\n    iframeLoaded: false,\n    $tempInput: null,\n    $fieldPlaceholder: null,\n\n    isActive: false,\n    isVisible: false,\n    activeTarget: 0,\n\n    isDeviceUpdating: false,\n    deviceAnimationTimeout: null,\n    currentDeviceType: 'desktop',\n    deviceOrientation: null,\n    deviceWidth: '',\n    deviceHeight: '',\n    deviceMaskDimensions: {\n        phone: {\n            width: 375,\n            height: 753\n        },\n        tablet: {\n            width: 768,\n            height: 1110\n        }\n    },\n\n    draftId: null,\n    url: null,\n    fields: null,\n\n    iframeHeight: null,\n    scrollTop: null,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _updateIframeProxy: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(draftEditor) {\n        this.draftEditor = draftEditor;\n\n        this._updateIframeProxy = this.updateIframe.bind(this);\n\n        this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.Preview.minEditorWidthInPx) {\n            inPx = Craft.Preview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    open: function() {\n        if (this.isActive) {\n            return;\n        }\n\n        this.isActive = true;\n        this.trigger('beforeOpen');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n            this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n            if (Craft.Pro) {\n                this.$previewHeader = $('<header/>', {'class': 'lp-preview-header'}).appendTo(this.$previewContainer);\n\n                // Preview targets\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo(this.$previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    const $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    let $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n\n                    $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                }\n\n                // Device type buttons\n                this.$deviceTypeContainer = $('<div/>', {\n                    class: 'btngroup lp-device-type',\n                    role: 'listbox',\n                    'aria-label': Craft.t('app', 'Device type'),\n                    tabindex: '0',\n                }).appendTo(this.$previewHeader);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--desktop active',\n                    title: Craft.t('app', 'Desktop'),\n                    'aria-label': Craft.t('app', 'Desktop'),\n                    'aria-selected': 'true',\n                    tabindex: '-1',\n                    data: {\n                        width: '',\n                        height: '',\n                        deviceType: 'desktop'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--tablet',\n                    title: Craft.t('app', 'Tablet'),\n                    'aria-label': Craft.t('app', 'Tablet'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 768,\n                        height: 1024,\n                        deviceType: 'tablet'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--phone',\n                    title: Craft.t('app', 'Mobile'),\n                    'aria-label': Craft.t('app', 'Mobile'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 375,\n                        height: 667,\n                        deviceType: 'phone'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n\n                $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n\n                // Orientation toggle\n                this.$orientationBtn = $('<button/>', {\n                    type: 'button',\n                    'class': 'btn disabled',\n                    'data-icon': 'refresh',\n                    disabled: '',\n                    'aria-hidden': '',\n                    'text': Craft.t('app', 'Rotate')\n                }).appendTo(this.$previewHeader);\n                this.addListener(this.$orientationBtn, 'click', 'switchOrientation');\n\n                // Get the last stored orientation\n                this.deviceOrientation = Craft.getLocalStorage('LivePreview.orientation');\n\n                // Device type button click handler\n                this.addListener($('.btn', this.$deviceTypeContainer), 'click', 'switchDeviceType');\n\n                // Device mask\n                this.$deviceMask = $('<div/>', {\n                    'class': 'lp-device-mask'\n                });\n            }\n\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n            if (this.$deviceMask) {\n                this.$iframeContainer.append(this.$deviceMask);\n            }\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this),\n            });\n\n            this.addListener($closeBtn, 'click', 'close');\n            this.addListener(this.$statusIcon, 'click', () => {\n                this.draftEditor.showStatusHud(this.$statusIcon);\n            });\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Find the fields, excluding nested fields\n        this.fields = [];\n        var $fields = $('#content .field').not($('#content .field .field'));\n\n        if ($fields.length) {\n            // Insert our temporary input before the first field so we know where to swap in the serialized form values\n            this.$tempInput.insertBefore($fields.get(0));\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            for (let i = 0; i < $fields.length; i++) {\n                let $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n        }\n\n        this.updateIframe();\n\n        this.draftEditor.on('update', this._updateIframeProxy);\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.trigger('open');\n    },\n\n    switchTarget: function(i) {\n        this.activeTarget = i;\n        this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n        this.$targetMenu.find('a.sel').removeClass('sel');\n        this.$targetMenu.find('a').eq(i).addClass('sel');\n        this.updateIframe(true);\n        this.trigger('switchTarget', {\n            previewTarget: this.draftEditor.settings.previewTargets[i],\n        });\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        if (!this.isActive || this.isVisible) {\n            return;\n        }\n\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.close();\n                }\n            });\n        });\n\n        this.isVisible = true;\n    },\n\n    close: function() {\n        if (!this.isActive || !this.isVisible) {\n            return;\n        }\n\n        this.trigger('beforeClose');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        // Remove our temporary input and move the preview fields back into place\n        this.$tempInput.detach();\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n            this.resetDevicePreview();\n        });\n\n        this.draftEditor.off('update', this._updateIframeProxy);\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.isActive = false;\n        this.isVisible = false;\n        this.trigger('close');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n        if (this._devicePreviewIsActive()) {\n            this.updateDevicePreview();\n        }\n    },\n\n    _useIframeResizer: function() {\n        return Craft.previewIframeResizerOptions !== false;\n    },\n\n    updateIframe: function(resetScroll) {\n        if (!this.isActive) {\n            return false;\n        }\n\n        // Ignore non-boolean resetScroll values\n        resetScroll = resetScroll === true;\n\n        var target = this.draftEditor.settings.previewTargets[this.activeTarget];\n        var refresh = !!(\n            this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n            !this.$iframe ||\n            resetScroll ||\n            typeof target.refresh === 'undefined' ||\n            target.refresh\n        );\n\n        this.trigger('beforeUpdateIframe', {\n            previewTarget: target,\n            resetScroll: resetScroll,\n            refresh: refresh,\n        });\n\n        // If this is an existing preview target, make sure it wants to be refreshed automatically\n        if (!refresh) {\n            this.slideIn();\n            return;\n        }\n\n        this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n            // Maintain the current scroll position?\n            let sameHost;\n            if (resetScroll) {\n                this.scrollTop = null;\n            } else if (this.iframeLoaded && this.$iframe) {\n                if (this._useIframeResizer()) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                } else {\n                    sameHost = Craft.isSameHost(url);\n                    if (sameHost && this.$iframe[0].contentWindow) {\n                        this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                    }\n                }\n            }\n\n            this.iframeLoaded = false;\n\n            var $iframe = $('<iframe/>', {\n                'class': 'lp-preview',\n                frameborder: 0,\n                src: url,\n            });\n\n            if (this.$iframe) {\n                this.$iframe.replaceWith($iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            // If we’re on tablet/phone then wrap the iframe in our own container\n            // so we can keep all the iFrameResizer() stuff working\n            if (this._devicePreviewIsActive()) {\n                if (!this.$devicePreviewContainer) {\n                    this.$devicePreviewContainer = $('<div/>', {\n                        'class': 'lp-device-preview-container'\n                    });\n                    $iframe.wrap('<div class=\"lp-device-preview-container\"></div>');\n                    this.$devicePreviewContainer = this.$iframeContainer.find('.lp-device-preview-container');\n                }\n            }\n\n            // Keep the iframe height consistent with its content\n            if (this._useIframeResizer()) {\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                iFrameResize($.extend({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n            } else {\n                $iframe.on('load', () => {\n                    this.iframeLoaded = true;\n                    if (!resetScroll && sameHost && this.scrollTop !== null) {\n                        $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                    }\n                });\n            }\n\n            this.url = url;\n            this.$iframe = $iframe;\n\n            if (this._devicePreviewIsActive()) {\n                this.updateDevicePreview();\n            }\n\n            this.trigger('afterUpdateIframe', {\n                previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            this.slideIn();\n        });\n    },\n\n    _devicePreviewIsActive: function() {\n        return this.currentDeviceType !== 'desktop';\n    },\n\n    switchDeviceType: function(ev) {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n\n        const $btn = $(ev.target);\n        const newDeviceType = $btn.data('deviceType');\n\n        // Bail if we’re just smashing the same button\n        if (newDeviceType === this.currentDeviceType) {\n            return false;\n        }\n\n        // Store new device type data\n        this.currentDeviceType = newDeviceType;\n        this.deviceWidth = $btn.data('width');\n        this.deviceHeight = $btn.data('height');\n\n        // Set the active state on the button\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n\n        $btn\n            .addClass('active')\n            .attr('aria-selected', 'true');\n\n        // Update or reset\n        if (this.currentDeviceType === 'desktop') {\n            this.resetDevicePreview();\n        } else {\n            this.$iframeContainer.addClass('lp-iframe-container--updating');\n            this.updateIframe();\n            this.updateDevicePreview();\n        }\n    },\n\n    switchOrientation: function()\n    {\n        if (this.isDeviceUpdating || !this._devicePreviewIsActive()) {\n            return false;\n        }\n\n        // Switch to whichever orientation is currently not stored\n        if (!this.deviceOrientation || this.deviceOrientation === 'portrait') {\n            this.deviceOrientation = 'landscape';\n        } else {\n            this.deviceOrientation = 'portrait';\n        }\n\n        // Store the new one\n        Craft.setLocalStorage('LivePreview.orientation', this.deviceOrientation);\n\n        // Allow the animation to take place\n        this.$iframeContainer.addClass('lp-iframe-container--animating');\n\n        // Update the device preview\n        this.updateDevicePreview();\n    },\n\n    updateDevicePreview: function()\n    {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.isDeviceUpdating = true;\n\n        // Enable the orientation button\n        this.$orientationBtn\n            .removeClass('disabled')\n            .removeAttr('disabled')\n            .removeAttr('aria-hidden');\n\n        // Trigger the resized css mods\n        this.$iframeContainer.addClass('lp-iframe-container--has-device-preview');\n\n        // Add the tablet class if needed\n        if (this.currentDeviceType === 'tablet') {\n            this.$iframeContainer.addClass('lp-iframe-container--tablet');\n        } else {\n            this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n        }\n\n        // Figure out the best zoom\n        let hZoom = 1;\n        let wZoom = 1;\n        let zoom = 1;\n        let previewHeight = (this.$previewContainer.height() - 50) - 48; // 50px for the header bar and 24px clearance\n        let previewWidth = this.$previewContainer.width() - 48;\n        let maskHeight = this.deviceMaskDimensions[this.currentDeviceType].height;\n        let maskWidth = this.deviceMaskDimensions[this.currentDeviceType].width;\n\n        if (this.deviceOrientation === 'landscape') {\n            if (previewWidth < maskHeight) {\n                hZoom = previewWidth / maskHeight;\n            }\n            if (previewHeight < maskWidth) {\n                wZoom = previewHeight / maskWidth;\n            }\n        } else {\n            if (previewHeight < maskHeight) {\n                hZoom = previewHeight / maskHeight;\n            }\n            if (previewWidth < maskWidth) {\n                wZoom = previewWidth / maskWidth;\n            }\n        }\n\n        zoom = hZoom;\n        if (wZoom < hZoom) {\n            zoom = wZoom;\n        }\n\n        // Figure out the css values\n        const translate = -((100/zoom)/2);\n        const rotationDeg = this.deviceOrientation === 'landscape' ? '-90deg' : '0deg';\n\n        // Apply first to the device mask\n        this.$deviceMask.css({\n            width: this.deviceMaskDimensions[this.currentDeviceType].width + 'px',\n            height: this.deviceMaskDimensions[this.currentDeviceType].height + 'px',\n            transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%) rotate('+rotationDeg+')'\n        });\n\n        // After the animation duration we can update the iframe sizes and show it\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.deviceAnimationTimeout = setTimeout(() => {\n            // Then make the size change to the preview container\n            if (this.deviceOrientation === 'landscape') {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceHeight + 'px',\n                    height: this.deviceWidth + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: 0,\n                    marginLeft: '-' + (12*zoom) + 'px'\n                });\n            } else {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceWidth + 'px',\n                    height: this.deviceHeight + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: '-' + (12*zoom) + 'px',\n                    marginLeft: 0\n                });\n            }\n\n            // Remove the animating class and show the iframe\n            this.$iframeContainer.removeClass('lp-iframe-container--animating');\n            this.$iframeContainer.removeClass('lp-iframe-container--updating');\n            this.isDeviceUpdating = false;\n\n        }, 300);\n    },\n\n    resetDevicePreview: function()\n    {\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.currentDeviceType = 'desktop';\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n        this.$deviceTypeContainer.find('.lp-device-type-btn--desktop')\n            .addClass('active')\n            .attr('aria-selected', 'true');\n        this.$orientationBtn\n            .addClass('disabled')\n            .attr('disabled', '')\n            .attr('aria-hidden', '');\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n        this.$iframeContainer.removeClass('lp-iframe-container--has-device-preview');\n        this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n\n        // Flat out remove the iframe and let it get regenerated\n        if (this.$devicePreviewContainer) {\n            // If using iFrameResizer then remove the listeners first so we don’t get zombie instances\n            if (this._useIframeResizer()) {\n                this.$iframe[0].iFrameResizer.removeListeners();\n            }\n            this.$devicePreviewContainer.detach();\n            this.$devicePreviewContainer = null;\n            this.$iframe = null;\n            this.updateIframe();\n        }\n\n        this.isDeviceUpdating = false;\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        // Disable anything with a name attribute\n        $clone.find('[name]').prop('disabled', true);\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend({\n    assetId: null,\n    $spinner: null,\n    elementSelect: null,\n    type: null,\n    loaded: null,\n    requestId: 0,\n\n    /**\n     * Initialize the preview file modal.\n     * @returns {*|void}\n     */\n    init: function(assetId, elementSelect, settings) {\n        settings = $.extend(this.defaultSettings, settings);\n\n        settings.onHide = this._onHide.bind(this);\n\n        if (Craft.PreviewFileModal.openInstance) {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            if (instance.assetId !== assetId) {\n                instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                instance.elementSelect = elementSelect;\n            }\n\n            return this.destroy();\n        }\n\n        Craft.PreviewFileModal.openInstance = this;\n        this.elementSelect = elementSelect;\n\n        this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n        this.base(this.$container, $.extend({\n            resizable: true\n        }, settings));\n\n        // Cut the flicker, just show the nice person the preview.\n        if (this.$container) {\n            this.$container.velocity('stop');\n            this.$container.show().css('opacity', 1);\n\n            this.$shade.velocity('stop');\n            this.$shade.show().css('opacity', 1);\n        }\n\n        this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n    },\n\n    /**\n     * When hiding, remove all traces and focus last focused element.\n     * @private\n     */\n    _onHide: function() {\n        Craft.PreviewFileModal.openInstance = null;\n        if (this.elementSelect) {\n            this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n        }\n\n        this.$shade.remove();\n\n        return this.destroy();\n    },\n\n    /**\n     * Disappear immediately forever.\n     * @returns {boolean}\n     */\n    selfDestruct: function() {\n        var instance = Craft.PreviewFileModal.openInstance;\n\n        instance.hide();\n        instance.$shade.remove();\n        instance.destroy();\n\n        Craft.PreviewFileModal.openInstance = null;\n\n        return true;\n    },\n\n    /**\n     * Load an asset, using starting width and height, if applicable\n     * @param assetId\n     * @param startingWidth\n     * @param startingHeight\n     */\n    loadAsset: function(assetId, startingWidth, startingHeight) {\n        this.assetId = assetId;\n\n        this.$container.empty();\n        this.loaded = false;\n\n        this.desiredHeight = null;\n        this.desiredWidth = null;\n\n        var containerHeight = Garnish.$win.height() * 0.66;\n        var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n        containerHeight = containerWidth / 4 * 3;\n\n        if (startingWidth && startingHeight) {\n            var ratio = startingWidth / startingHeight;\n            containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n            containerWidth = containerHeight * ratio;\n\n            // This might actually have put width over the viewport limits, so doublecheck\n            if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = containerWidth / ratio;\n            }\n        }\n\n        this._resizeContainer(containerWidth, containerHeight);\n\n        this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n        var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n            left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n        this.$spinner.css({left: left, top: top, position: 'absolute'});\n        this.requestId++;\n\n        Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, (response, textStatus) => {\n            this.$container.removeClass('loading');\n            this.$spinner.remove();\n            this.loaded = true;\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (response.requestId != this.requestId) {\n                        return;\n                    }\n\n                    if (!response.previewHtml) {\n                        this.$container.addClass('zilch');\n                        this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                        return;\n                    }\n\n                    this.$container.removeClass('zilch');\n                    this.$container.append(response.previewHtml);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n                } else {\n                    alert(response.error);\n\n                    this.hide();\n                }\n            }\n        });\n    },\n\n    /**\n     * Resize the container to specified dimensions\n     * @param containerWidth\n     * @param containerHeight\n     * @private\n     */\n    _resizeContainer: function(containerWidth, containerHeight) {\n        this.$container.css({\n            'width': containerWidth,\n            'min-width': containerWidth,\n            'max-width': containerWidth,\n            'height': containerHeight,\n            'min-height': containerHeight,\n            'max-height': containerHeight,\n            'top': (Garnish.$win.height() - containerHeight) / 2,\n            'left': (Garnish.$win.width() - containerWidth) / 2\n        });\n    }\n}, {\n    defaultSettings: {\n        startingWidth: null,\n        startingHeight: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend({\n    $progressBar: null,\n    $innerProgressBar: null,\n    $progressBarStatus: null,\n\n    _itemCount: 0,\n    _processedItemCount: 0,\n    _displaySteps: false,\n\n    init: function($element, displaySteps) {\n        if (displaySteps) {\n            this._displaySteps = true;\n        }\n\n        this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n        this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n        this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n        this.resetProgressBar();\n    },\n\n    /**\n     * Reset the progress bar\n     */\n    resetProgressBar: function() {\n        // Since setting the progress percentage implies that there is progress to be shown\n        // It removes the pending class - we must add it back.\n        this.setProgressPercentage(100);\n        this.$progressBar.addClass('pending');\n\n        // Reset all the counters\n        this.setItemCount(1);\n        this.setProcessedItemCount(0);\n        this.$progressBarStatus.html('');\n\n        if (this._displaySteps) {\n            this.$progressBar.addClass('has-status');\n        }\n    },\n\n    /**\n     * Fade to invisible, hide it using a class and reset opacity to visible\n     */\n    hideProgressBar: function() {\n        this.$progressBar.fadeTo('fast', 0.01, () => {\n            this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n    },\n\n    showProgressBar: function() {\n        this.$progressBar.removeClass('hidden');\n        this.$progressBarStatus.removeClass('hidden');\n    },\n\n    setItemCount: function(count) {\n        this._itemCount = count;\n    },\n\n    incrementItemCount: function(count) {\n        this._itemCount += count;\n    },\n\n    setProcessedItemCount: function(count) {\n        this._processedItemCount = count;\n    },\n\n    incrementProcessedItemCount: function(count) {\n        this._processedItemCount += count;\n    },\n\n    updateProgressBar: function() {\n        // Only fools would allow accidental division by zero.\n        this._itemCount = Math.max(this._itemCount, 1);\n\n        var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n        this.setProgressPercentage(width);\n\n        if (this._displaySteps) {\n            this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n        }\n    },\n\n    setProgressPercentage: function(percentage, animate) {\n        if (percentage === 0) {\n            this.$progressBar.addClass('pending');\n        } else {\n            this.$progressBar.removeClass('pending');\n\n            if (animate) {\n                this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n            } else {\n                this.$innerProgressBar.velocity('stop').width(percentage + '%');\n            }\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, this._handleBatchPromptSelection.bind(this), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            } else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        } else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', () => {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        });\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n","/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', this._handleResize.bind(this));\n        this.addListener(this.$container, 'tapstart', this._handleTapStart.bind(this));\n        this.addListener(Garnish.$bod, 'tapmove', this._handleTapMove.bind(this));\n        this.addListener(Garnish.$bod, 'tapend', this._handleTapEnd.bind(this));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout(() => {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        } else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (((this.$graduations.width() / 2) + (position * -1)) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n        // Remove inner-word punctuation\n        sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        if (!Craft.allowUppercaseInSlug) {\n            sourceVal = sourceVal.toLowerCase();\n        }\n\n        if (Craft.limitAutoSlugsToAscii) {\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n        }\n\n        // Get the \"words\". Split on anything that is not alphanumeric.\n        // Reference: http://www.regular-expressions.info/unicode.html\n        var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n        if (words.length) {\n            return words.join(Craft.slugWordSeparator);\n        } else {\n            return '';\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend({\n    id: null,\n\n    $container: null,\n    state: null,\n    structureDrag: null,\n\n    /**\n     * Init\n     */\n    init: function(id, container, settings) {\n        this.id = id;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Structure.defaults);\n\n        // Is this already a structure?\n        if (this.$container.data('structure')) {\n            Garnish.log('Double-instantiating a structure on an element');\n            this.$container.data('structure').destroy();\n        }\n\n        this.$container.data('structure', this);\n\n        this.state = {};\n\n        if (this.settings.storageKey) {\n            $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n        }\n\n        if (typeof this.state.collapsedElementIds === 'undefined') {\n            this.state.collapsedElementIds = [];\n        }\n\n        var $parents = this.$container.find('ul').prev('.row');\n\n        for (var i = 0; i < $parents.length; i++) {\n            var $row = $($parents[i]),\n                $li = $row.parent(),\n                $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n            if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                $li.addClass('collapsed');\n            }\n\n            this.initToggle($toggle);\n        }\n\n        if (this.settings.sortable) {\n            this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n        }\n\n        if (this.settings.newChildUrl) {\n            this.initNewChildMenus(this.$container.find('.add'));\n        }\n    },\n\n    initToggle: function($toggle) {\n        $toggle.on('click', ev => {\n            var $li = $(ev.currentTarget).closest('li'),\n                elementId = $li.children('.row').find('.element:first').data('id'),\n                viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n            if ($li.hasClass('collapsed')) {\n                $li.removeClass('collapsed');\n\n                if (viewStateKey !== -1) {\n                    this.state.collapsedElementIds.splice(viewStateKey, 1);\n                }\n            } else {\n                $li.addClass('collapsed');\n\n                if (viewStateKey === -1) {\n                    this.state.collapsedElementIds.push(elementId);\n                }\n            }\n\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.state);\n            }\n        });\n    },\n\n    initNewChildMenus: function($addBtns) {\n        this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n    },\n\n    onNewChildMenuClick: function(ev) {\n        var $btn = $(ev.currentTarget);\n\n        if (!$btn.data('menubtn')) {\n            var elementId = $btn.parent().children('.element').data('id'),\n                newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n            $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n            var menuBtn = new Garnish.MenuBtn($btn);\n            menuBtn.showMenu();\n        }\n    },\n\n    getIndent: function(level) {\n        return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n    },\n\n    addElement: function($element) {\n        var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n            $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n        $row.append($element);\n\n        if (this.settings.sortable) {\n            $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n            this.structureDrag.addItems($li);\n        }\n\n        if (this.settings.newChildUrl) {\n            var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n            this.initNewChildMenus($addBtn);\n        }\n\n        $row.css('margin-bottom', -30);\n        $row.velocity({'margin-bottom': 0}, 'fast');\n    },\n\n    removeElement: function($element) {\n        var $li = $element.parent().parent();\n\n        if (this.settings.sortable) {\n            this.structureDrag.removeItems($li);\n        }\n\n        var $parentUl;\n\n        if (!$li.siblings().length) {\n            $parentUl = $li.parent();\n        }\n\n        $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', () => {\n            $li.remove();\n\n            if (typeof $parentUl !== 'undefined') {\n                this._removeUl($parentUl);\n            }\n        });\n    },\n\n    _removeUl: function($ul) {\n        $ul.siblings('.row').children('.toggle').remove();\n        $ul.remove();\n    }\n}, {\n    baseIndent: 8,\n    nestedIndent: 35,\n\n    defaults: {\n        storageKey: null,\n        sortable: false,\n        newChildUrl: null,\n        maxLevels: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend({\n    structure: null,\n    maxLevels: null,\n    draggeeLevel: null,\n\n    $helperLi: null,\n    $targets: null,\n    draggeeHeight: null,\n\n    init: function(structure, maxLevels) {\n        this.structure = structure;\n        this.maxLevels = maxLevels;\n\n        this.$insertion = $('<li class=\"draginsertion\"/>');\n\n        var $items = this.structure.$container.find('li');\n\n        this.base($items, {\n            handle: '.element:first, .move:first',\n            helper: this.getHelper.bind(this)\n        });\n    },\n\n    getHelper: function($helper) {\n        this.$helperLi = $helper;\n        var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n        $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n        $helper.find('.move').removeAttr('title');\n        return $ul;\n    },\n\n    onDragStart: function() {\n        this.$targets = $();\n\n        // Recursively find each of the targets, in the order they appear to be in\n        this.findTargets(this.structure.$container);\n\n        // How deep does the rabbit hole go?\n        this.draggeeLevel = 0;\n        var $level = this.$draggee;\n        do {\n            this.draggeeLevel++;\n            $level = $level.find('> ul > li');\n        } while ($level.length);\n\n        // Collapse the draggee\n        this.draggeeHeight = this.$draggee.height();\n        this.$draggee.velocity({\n            height: 0\n        }, 'fast', () => {\n            this.$draggee.addClass('hidden');\n        });\n        this.base();\n\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.cancelDrag();\n            }\n        });\n    },\n\n    findTargets: function($ul) {\n        var $lis = $ul.children().not(this.$draggee);\n\n        for (var i = 0; i < $lis.length; i++) {\n            var $li = $($lis[i]);\n            this.$targets = this.$targets.add($li.children('.row'));\n\n            if (!$li.hasClass('collapsed')) {\n                this.findTargets($li.children('ul'));\n            }\n        }\n    },\n\n    onDrag: function() {\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n            this.$insertion.remove();\n        }\n\n        // First let's find the closest target\n        this._.$closestTarget = null;\n        this._.closestTargetPos = null;\n        this._.closestTargetYDiff = null;\n        this._.closestTargetOffset = null;\n        this._.closestTargetHeight = null;\n\n        for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n            this._.$target = $(this.$targets[this._.i]);\n            this._.targetOffset = this._.$target.offset();\n            this._.targetHeight = this._.$target.outerHeight();\n            this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n            this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n            if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                this._.$closestTarget = this._.$target;\n                this._.closestTargetPos = this._.i;\n                this._.closestTargetYDiff = this._.targetYDiff;\n                this._.closestTargetOffset = this._.targetOffset;\n                this._.closestTargetHeight = this._.targetHeight;\n            } else {\n                // Getting colder\n                break;\n            }\n        }\n\n        if (!this._.$closestTarget) {\n            return;\n        }\n\n        // Are we hovering above the first row?\n        if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n            this.$insertion.prependTo(this.structure.$container);\n        } else {\n            this._.$closestTargetLi = this._.$closestTarget.parent();\n            this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n            // Is there a next row?\n            if (this._.closestTargetPos < this.$targets.length - 1) {\n                this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n            } else {\n                this._.$nextTargetLi = null;\n                this._.nextTargetLevel = null;\n            }\n\n            // Are we hovering between this row and the next one?\n            this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n            /**\n             * Scenario 1: Both rows have the same level.\n             *\n             *     * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                if (this._.hoveringBetweenRows) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                        // Position the insertion after the closest target\n                        this.$insertion.insertAfter(this._.$closestTargetLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n\n            /**\n             * Scenario 2: Next row is a child of this one.\n             *\n             *     * Row 1\n             *     ----------------------\n             *         * Row 2\n             */\n\n            else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                    if (this._.hoveringBetweenRows) {\n                        // Position the insertion as the first child of the closest target\n                        this.$insertion.insertBefore(this._.$nextTargetLi);\n                    } else {\n                        this._.$closestTarget.addClass('draghover');\n                        this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                    }\n                }\n            }\n\n            /**\n             * Scenario 3: Next row is a child of a parent node, or there is no next row.\n             *\n             *         * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            else {\n                if (this._.hoveringBetweenRows) {\n                    // Determine which <li> to position the insertion after\n                    this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                    if (Craft.orientation === 'rtl') {\n                        this._.draggeeX += this.$helperLi.width();\n                    }\n\n                    this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                    this._.$closestParentLi = null;\n                    this._.closestParentLiXDiff = null;\n                    this._.closestParentLevel = null;\n\n                    for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                        this._.$parentLi = $(this._.$parentLis[this._.i]);\n                        this._.parentLiX = this._.$parentLi.offset().left;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.parentLiX += this._.$parentLi.width();\n                        }\n\n                        this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                        this._.parentLevel = this._.$parentLi.data('level');\n\n                        if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                            !this._.$closestParentLi || (\n                                this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                            )\n                        )) {\n                            this._.$closestParentLi = this._.$parentLi;\n                            this._.closestParentLiXDiff = this._.parentLiXDiff;\n                            this._.closestParentLevel = this._.parentLevel;\n                        }\n                    }\n\n                    if (this._.$closestParentLi) {\n                        this.$insertion.insertAfter(this._.$closestParentLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n        }\n    },\n\n    cancelDrag: function() {\n        this.$insertion.remove();\n\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n        }\n\n        this.onMouseUp();\n    },\n\n    onDragStop: function() {\n        // Are we repositioning the draggee?\n        if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n            var $draggeeParent,\n                moved;\n\n            // Are we about to leave the draggee's original parent childless?\n            if (!this.$draggee.siblings().length) {\n                $draggeeParent = this.$draggee.parent();\n            }\n\n            if (this.$insertion.parent().length) {\n                // Make sure the insertion isn't right next to the draggee\n                var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                    this.$insertion.replaceWith(this.$draggee);\n                    moved = true;\n                } else {\n                    this.$insertion.remove();\n                    moved = false;\n                }\n            } else {\n                var $ul = this._.$closestTargetLi.children('ul');\n\n                // Make sure this is a different parent than the draggee's\n                if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                    if (!$ul.length) {\n                        var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                        this.structure.initToggle($toggle);\n\n                        $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                    } else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                        this._.$closestTarget.children('.toggle').trigger('click');\n                    }\n\n                    this.$draggee.appendTo($ul);\n                    moved = true;\n                } else {\n                    moved = false;\n                }\n            }\n\n            // Remove the class either way\n            this._.$closestTarget.removeClass('draghover');\n\n            if (moved) {\n                // Now deal with the now-childless parent\n                if ($draggeeParent) {\n                    this.structure._removeUl($draggeeParent);\n                }\n\n                // Has the level changed?\n                var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                var animateCss;\n\n                if (newLevel != this.$draggee.data('level')) {\n                    // Correct the helper's padding if moving to/from level 1\n                    if (this.$draggee.data('level') == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = 38;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    } else if (newLevel == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    }\n\n                    this.setLevel(this.$draggee, newLevel);\n                }\n\n                // Make it real\n                var $element = this.$draggee.children('.row').children('.element');\n\n                var data = {\n                    structureId: this.structure.id,\n                    elementId: $element.data('id'),\n                    siteId: $element.data('site-id'),\n                    prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                    parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                };\n\n                Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                    }\n                });\n            }\n        }\n\n        // Animate things back into place\n        this.$draggee.velocity('stop').removeClass('hidden').velocity({\n            height: this.draggeeHeight\n        }, 'fast', () => {\n            this.$draggee.css('height', 'auto');\n        });\n\n        this.returnHelpersToDraggees();\n\n        this.base();\n    },\n\n    setLevel: function($li, level) {\n        $li.data('level', level);\n\n        var indent = this.structure.getIndent(level);\n\n        var css = {};\n        css['margin-' + Craft.left] = '-' + indent + 'px';\n        css['padding-' + Craft.left] = indent + 'px';\n        this.$draggee.children('.row').css(css);\n\n        var $childLis = $li.children('ul').children();\n\n        for (var i = 0; i < $childLis.length; i++) {\n            this.setLevel($($childLis[i]), level + 1);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n    tableView: null,\n    structureId: null,\n    maxLevels: null,\n\n    _basePadding: null,\n    _helperMargin: null,\n\n    _$firstRowCells: null,\n    _$titleHelperCell: null,\n\n    _titleHelperCellOuterWidth: null,\n\n    _ancestors: null,\n    _updateAncestorsFrame: null,\n\n    _draggeeLevel: null,\n    _draggeeLevelDelta: null,\n    draggingLastElements: null,\n    _loadingDraggeeLevelDelta: false,\n\n    _targetLevel: null,\n    _targetLevelBounds: null,\n\n    _positionChanged: null,\n\n    /**\n     * Constructor\n     */\n    init: function(tableView, $elements, settings) {\n        this.tableView = tableView;\n        this.structureId = this.tableView.$table.data('structure-id');\n        this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n        this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n        this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n        settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n            handle: '.move',\n            collapseDraggees: true,\n            singleHelper: true,\n            helperSpacingY: 2,\n            magnetStrength: 4,\n            helper: this.getHelper.bind(this),\n            helperLagBase: 1.5,\n            axis: Garnish.Y_AXIS\n        });\n\n        this.base($elements, settings);\n    },\n\n    /**\n     * Returns the draggee rows (including any descendent rows).\n     */\n    findDraggee: function() {\n        this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n        this._draggeeLevelDelta = 0;\n\n        var $draggee = $(this.$targetItem),\n            $nextRow = this.$targetItem.next();\n\n        while ($nextRow.length) {\n            // See if this row is a descendant of the draggee\n            var nextRowLevel = $nextRow.data('level');\n\n            if (nextRowLevel <= this._draggeeLevel) {\n                break;\n            }\n\n            // Is this the deepest descendant we've seen so far?\n            var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n            if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                this._draggeeLevelDelta = nextRowLevelDelta;\n            }\n\n            // Add it and prep the next row\n            $draggee = $draggee.add($nextRow);\n            $nextRow = $nextRow.next();\n        }\n\n        // Are we dragging the last elements on the page?\n        this.draggingLastElements = !$nextRow.length;\n\n        // Do we have a maxLevels to enforce,\n        // and does it look like this draggee has descendants we don't know about yet?\n        if (\n            this.maxLevels &&\n            this.draggingLastElements &&\n            this.tableView.getMorePending()\n        ) {\n            // Only way to know the true descendant level delta is to ask PHP\n            this._loadingDraggeeLevelDelta = true;\n\n            var data = this._getAjaxBaseData(this.$targetItem);\n\n            Craft.postActionRequest('structures/get-element-level-delta', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this._loadingDraggeeLevelDelta = false;\n\n                    if (this.dragging) {\n                        this._draggeeLevelDelta = response.delta;\n                        this.drag(false);\n                    }\n                }\n            });\n        }\n\n        return $draggee;\n    },\n\n    /**\n     * Returns the drag helper.\n     */\n    getHelper: function($helperRow) {\n        var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n            $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n            $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the column widths\n        this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n        var $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            var $helperCell = $($helperCells[i]);\n\n            // Skip the checkbox cell\n            if ($helperCell.hasClass('checkbox-cell')) {\n                $helperCell.remove();\n                continue;\n            }\n\n            // Hard-set the cell widths\n            var $firstRowCell = $(this._$firstRowCells[i]);\n            var width = $firstRowCell[0].getBoundingClientRect().width;\n\n            $firstRowCell.css('width', width + 'px');\n            $helperCell.css('width', width + 'px');\n\n            // Is this the title cell?\n            if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                this._$titleHelperCell = $helperCell;\n\n                var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                this._titleHelperCellOuterWidth = width;\n\n                $helperCell.css('padding-' + Craft.left, this._basePadding);\n            }\n        }\n\n        return $outerContainer;\n    },\n\n    /**\n     * Returns whether the draggee can be inserted before a given item.\n     */\n    canInsertBefore: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item.prev(), $item) !== false);\n    },\n\n    /**\n     * Returns whether the draggee can be inserted after a given item.\n     */\n    canInsertAfter: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item, $item.next()) !== false);\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        // Get the initial set of ancestors, before the item gets moved\n        this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n        // Set the initial target level bounds\n        this._setTargetLevelBounds();\n\n        // Check to see if we should load more elements now\n        this.tableView.maybeLoadMore();\n\n        this.base();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.base();\n        this._updateIndent();\n    },\n\n    /**\n     * On Insertion Point Change\n     */\n    onInsertionPointChange: function() {\n        this._setTargetLevelBounds();\n        this._updateAncestorsBeforeRepaint();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this._positionChanged = false;\n        this.base();\n\n        // Update the draggee's padding if the position just changed\n        // ---------------------------------------------------------------------\n\n        if (this._targetLevel != this._draggeeLevel) {\n            var levelDiff = this._targetLevel - this._draggeeLevel;\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                var $draggee = $(this.$draggee[i]),\n                    oldLevel = $draggee.data('level'),\n                    newLevel = oldLevel + levelDiff,\n                    padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                $draggee.data('level', newLevel);\n                $draggee.find('.element').data('level', newLevel);\n                $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n            }\n\n            this._positionChanged = true;\n        }\n\n        // Keep in mind this could have also been set by onSortChange()\n        if (this._positionChanged) {\n            // Tell the server about the new position\n            // -----------------------------------------------------------------\n\n            var data = this._getAjaxBaseData(this.$draggee);\n\n            // Find the previous sibling/parent, if there is one\n            var $prevRow = this.$draggee.first().prev();\n\n            while ($prevRow.length) {\n                var prevRowLevel = $prevRow.data('level');\n\n                if (prevRowLevel == this._targetLevel) {\n                    data.prevId = $prevRow.data('id');\n                    break;\n                }\n\n                if (prevRowLevel < this._targetLevel) {\n                    data.parentId = $prevRow.data('id');\n\n                    // Is this row collapsed?\n                    var $toggle = $prevRow.find('> th > .toggle');\n\n                    if (!$toggle.hasClass('expanded')) {\n                        // Make it look expanded\n                        $toggle.addClass('expanded');\n\n                        // Add a temporary row\n                        var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                        // Remove the target item\n                        if (this.tableView.elementSelect) {\n                            this.tableView.elementSelect.removeItems(this.$targetItem);\n                        }\n\n                        this.removeItems(this.$targetItem);\n                        this.$targetItem.remove();\n                        this.tableView._totalVisible--;\n                    }\n\n                    break;\n                }\n\n                $prevRow = $prevRow.prev();\n            }\n\n            Craft.postActionRequest('structures/move-element', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    if (!response.success) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        this.tableView.elementIndex.updateElements();\n                        return;\n                    }\n                    Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                    this.onPositionChange();\n\n                    // Were we waiting on this to complete so we can expand the new parent?\n                    if ($spinnerRow && $spinnerRow.parent().length) {\n                        $spinnerRow.remove();\n                        this.tableView._expandElement($toggle, true);\n                    }\n\n                    // See if we should run any pending tasks\n                    Craft.cp.runQueue();\n                }\n            });\n        }\n    },\n\n    onSortChange: function() {\n        if (this.tableView.elementSelect) {\n            this.tableView.elementSelect.resetItemOrder();\n        }\n\n        this._positionChanged = true;\n        this.base();\n    },\n\n    onPositionChange: function() {\n        Garnish.requestAnimationFrame(() => {\n            this.trigger('positionChange');\n            this.settings.onPositionChange();\n        });\n    },\n\n    onReturnHelpersToDraggees: function() {\n        this._$firstRowCells.css('width', '');\n\n        // If we were dragging the last elements on the page and ended up loading any additional elements in,\n        // there could be a gap between the last draggee item and whatever now comes after it.\n        // So remove the post-draggee elements and possibly load up the next batch.\n        if (this.draggingLastElements && this.tableView.getMorePending()) {\n            // Update the element index's record of how many items are actually visible\n            this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n            var $postDraggeeItems = this.$draggee.last().nextAll();\n\n            if ($postDraggeeItems.length) {\n                this.removeItems($postDraggeeItems);\n                $postDraggeeItems.remove();\n                this.tableView.maybeLoadMore();\n            }\n        }\n\n        this.base();\n    },\n\n    /**\n     * Returns the min and max levels that the draggee could occupy between\n     * two given rows, or false if it’s not going to work out.\n     */\n    _getLevelBounds: function($prevRow, $nextRow) {\n        // Can't go any lower than the next row, if there is one\n        if ($nextRow && $nextRow.length) {\n            this._getLevelBounds._minLevel = $nextRow.data('level');\n        } else {\n            this._getLevelBounds._minLevel = 1;\n        }\n\n        // Can't go any higher than the previous row + 1\n        if ($prevRow && $prevRow.length) {\n            this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n        } else {\n            this._getLevelBounds._maxLevel = 1;\n        }\n\n        // Does this structure have a max level?\n        if (this.maxLevels) {\n            // Make sure it's going to fit at all here\n            if (\n                this._getLevelBounds._minLevel != 1 &&\n                this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n            ) {\n                return false;\n            }\n\n            // Limit the max level if we have to\n            if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                    this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                }\n            }\n        }\n\n        return {\n            min: this._getLevelBounds._minLevel,\n            max: this._getLevelBounds._maxLevel\n        };\n    },\n\n    /**\n     * Determines the min and max possible levels at the current draggee's position.\n     */\n    _setTargetLevelBounds: function() {\n        this._targetLevelBounds = this._getLevelBounds(\n            this.$draggee.first().prev(),\n            this.$draggee.last().next()\n        );\n    },\n\n    /**\n     * Determines the target level based on the current mouse position.\n     */\n    _updateIndent: function(forcePositionChange) {\n        // Figure out the target level\n        // ---------------------------------------------------------------------\n\n        // How far has the cursor moved?\n        this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n        // Flip that if this is RTL\n        if (Craft.orientation === 'rtl') {\n            this._updateIndent._mouseDist *= -1;\n        }\n\n        // What is that in indentation levels?\n        this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // Combine with the original level to get the new target level\n        this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n        // Contain it within our min/max levels\n        if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n            this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n            this._updateIndent._targetLevel = this._targetLevelBounds.min;\n        } else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n            this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n            this._updateIndent._targetLevel = this._targetLevelBounds.max;\n        }\n\n        // Has the target level changed?\n        if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n            // Target level is changing, so update the ancestors\n            this._updateAncestorsBeforeRepaint();\n        }\n\n        // Update the UI\n        // ---------------------------------------------------------------------\n\n        // How far away is the cursor from the exact target level distance?\n        this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // What's the magnet impact of that?\n        this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n        // Put it on a leash\n        if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n            this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n        }\n\n        // Apply the new margin/width\n        this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n        this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n        this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n    },\n\n    /**\n     * Returns the indent size for a given level\n     */\n    _getLevelIndent: function(level) {\n        return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n    },\n\n    /**\n     * Returns the base data that should be sent with StructureController Ajax requests.\n     */\n    _getAjaxBaseData: function($row) {\n        return {\n            structureId: this.structureId,\n            elementId: $row.data('id'),\n            siteId: $row.find('.element:first').data('site-id')\n        };\n    },\n\n    /**\n     * Returns a row's ancestor rows\n     */\n    _getAncestors: function($row, targetLevel) {\n        this._getAncestors._ancestors = [];\n\n        if (targetLevel != 0) {\n            this._getAncestors._level = targetLevel;\n            this._getAncestors._$prevRow = $row.prev();\n\n            while (this._getAncestors._$prevRow.length) {\n                if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                    this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                    this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                    // Did we just reach the top?\n                    if (this._getAncestors._level == 0) {\n                        break;\n                    }\n                }\n\n                this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n            }\n        }\n\n        return this._getAncestors._ancestors;\n    },\n\n    /**\n     * Prepares to have the ancestors updated before the screen is repainted.\n     */\n    _updateAncestorsBeforeRepaint: function() {\n        if (this._updateAncestorsFrame) {\n            Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n        }\n\n        this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestors.bind(this));\n    },\n\n    _updateAncestors: function() {\n        this._updateAncestorsFrame = null;\n\n        // Update the old ancestors\n        // -----------------------------------------------------------------\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n            // One less descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n            // Is it now childless?\n            if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                // Remove its toggle\n                this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n            }\n        }\n\n        // Update the new ancestors\n        // -----------------------------------------------------------------\n\n        this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n            // One more descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n            // Is this its first child?\n            if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                // Create its toggle\n                $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                    .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n            }\n        }\n\n        this._ancestors = this._updateAncestors._newAncestors;\n\n        delete this._updateAncestors._i;\n        delete this._updateAncestors._$ancestor;\n        delete this._updateAncestors._newAncestors;\n    }\n}, {\n    HELPER_MARGIN: 0,\n    LEVEL_INDENT: 44,\n    MAX_GIVE: 22,\n\n    defaults: {\n        onPositionChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend({\n    $table: null,\n    $selectedSortHeader: null,\n\n    structureTableSort: null,\n\n    _totalVisiblePostStructureTableDraggee: null,\n    _morePendingPostStructureTableDraggee: false,\n\n    getElementContainer: function() {\n        // Save a reference to the table\n        this.$table = this.$container.find('table:first');\n        return this.$table.children('tbody:first');\n    },\n\n    afterInit: function() {\n        // Set the sort header\n        this.initTableHeaders();\n\n        // Create the Structure Table Sorter\n        if (\n            this.elementIndex.settings.context === 'index' &&\n            this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n            Garnish.hasAttr(this.$table, 'data-structure-id')\n        ) {\n            this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements());\n        } else {\n            this.structureTableSort = null;\n        }\n\n        // Handle expand/collapse toggles for Structures\n        if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n            this.addListener(this.$elementContainer, 'click', function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.hasClass('toggle')) {\n                    if (this._collapseElement($target) === false) {\n                        this._expandElement($target);\n                    }\n                }\n            });\n        }\n    },\n\n    initTableHeaders: function() {\n        var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n            $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n        for (var i = 0; i < $tableHeaders.length; i++) {\n            var $header = $tableHeaders.eq(i),\n                attr = $header.attr('data-attribute');\n\n            // Is this the selected sort attribute?\n            if (attr === selectedSortAttr) {\n                this.$selectedSortHeader = $header;\n                var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                $header\n                    .addClass('ordered ' + selectedSortDir)\n                    .on('click', this._handleSelectedSortHeaderClick.bind(this));\n            } else {\n                // Is this attribute sortable?\n                var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                if ($sortAttribute.length) {\n                    $header\n                        .addClass('orderable')\n                        .on('click', this._handleUnselectedSortHeaderClick.bind(this));\n                }\n            }\n        }\n    },\n\n    isVerticalList: function() {\n        return true;\n    },\n\n    getTotalVisible: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._totalVisiblePostStructureTableDraggee;\n        } else {\n            return this._totalVisible;\n        }\n    },\n\n    setTotalVisible: function(totalVisible) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._totalVisiblePostStructureTableDraggee = totalVisible;\n        } else {\n            this._totalVisible = totalVisible;\n        }\n    },\n\n    getMorePending: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._morePendingPostStructureTableDraggee;\n        } else {\n            return this._morePending;\n        }\n    },\n\n    setMorePending: function(morePending) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._morePendingPostStructureTableDraggee = morePending;\n        } else {\n            this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n        }\n    },\n\n    getLoadMoreParams: function() {\n        var params = this.base();\n\n        // If we are dragging the last elements on the page,\n        // tell the controller to only load elements positioned after the draggee.\n        if (this._isStructureTableDraggingLastElements()) {\n            params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n        }\n\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        this.base($newElements);\n\n        if (this.structureTableSort) {\n            this.structureTableSort.addItems($newElements);\n        }\n\n        Craft.cp.updateResponsiveTables();\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            params: {\n                includeTableAttributesForSource: this.elementIndex.sourceKey\n            },\n            onSaveElement: response => {\n                if (response.tableAttributes) {\n                    this._updateTableAttributes($element, response.tableAttributes);\n                }\n            },\n            elementIndex: this.elementIndex\n        });\n    },\n\n    _collapseElement: function($toggle, force) {\n        if (!force && !$toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.removeClass('expanded');\n\n        // Find and remove the descendant rows\n        var $row = $toggle.parent().parent(),\n            id = $row.data('id'),\n            level = $row.data('level'),\n            $nextRow = $row.next();\n\n        while ($nextRow.length) {\n            if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                if ($nextRow.data('level') <= level) {\n                    break;\n                }\n\n                if (this.elementSelect) {\n                    this.elementSelect.removeItems($nextRow);\n                }\n\n                if (this.structureTableSort) {\n                    this.structureTableSort.removeItems($nextRow);\n                }\n\n                this._totalVisible--;\n            }\n\n            var $nextNextRow = $nextRow.next();\n            $nextRow.remove();\n            $nextRow = $nextNextRow;\n        }\n\n        // Remember that this row should be collapsed\n        if (!this.elementIndex.instanceState.collapsedElementIds) {\n            this.elementIndex.instanceState.collapsedElementIds = [];\n        }\n\n        this.elementIndex.instanceState.collapsedElementIds.push(id);\n        this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n        // Bottom of the index might be viewable now\n        this.maybeLoadMore();\n    },\n\n    _expandElement: function($toggle, force) {\n        if (!force && $toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.addClass('expanded');\n\n        // Remove this element from our list of collapsed elements\n        if (this.elementIndex.instanceState.collapsedElementIds) {\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n            if (index !== -1) {\n                this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                // Add a temporary row\n                var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                // Load the nested elements\n                var params = $.extend(true, {}, this.settings.params);\n                params.criteria.descendantOf = id;\n\n                Craft.postActionRequest('element-indexes/get-more-elements', params, (response, textStatus) => {\n                    // Do we even care about this anymore?\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n\n                    if (textStatus === 'success') {\n                        var $newElements = $(response.html);\n\n                        // Are there more descendants we didn't get in this batch?\n                        var totalVisible = (this._totalVisible + $newElements.length),\n                            morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                        if (morePending) {\n                            // Remove all the elements after it\n                            var $nextRows = $spinnerRow.nextAll();\n\n                            if (this.elementSelect) {\n                                this.elementSelect.removeItems($nextRows);\n                            }\n\n                            if (this.structureTableSort) {\n                                this.structureTableSort.removeItems($nextRows);\n                            }\n\n                            $nextRows.remove();\n                            totalVisible -= $nextRows.length;\n                        } else {\n                            // Maintain the current 'more' status\n                            morePending = this._morePending;\n                        }\n\n                        $spinnerRow.replaceWith($newElements);\n                        this.thumbLoader.load($newElements);\n\n                        if (this.elementIndex.actions || this.settings.selectable) {\n                            this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                            this.elementIndex.updateActionTriggers();\n                        }\n\n                        if (this.structureTableSort) {\n                            this.structureTableSort.addItems($newElements);\n                        }\n\n                        Craft.appendHeadHtml(response.headHtml);\n                        Craft.appendFootHtml(response.footHtml);\n                        Craft.cp.updateResponsiveTables();\n\n                        this.setTotalVisible(totalVisible);\n                        this.setMorePending(morePending);\n\n                        // Is there room to load more right now?\n                        this.maybeLoadMore();\n                    }\n                });\n            }\n        }\n    },\n\n    _createSpinnerRowAfter: function($row) {\n        return $(\n            '<tr data-spinnerrow>' +\n            '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n            '<div class=\"spinner\"/>' +\n            '</td>' +\n            '</tr>'\n        ).insertAfter($row);\n    },\n\n    _isStructureTableDraggingLastElements: function() {\n        return (\n            this.structureTableSort &&\n            this.structureTableSort.dragging &&\n            this.structureTableSort.draggingLastElements\n        );\n    },\n\n    _handleSelectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        // Reverse the sort direction\n        var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n            newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n        this.elementIndex.setSortDirection(newSortDir);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleUnselectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        var attr = $header.attr('data-attribute');\n\n        this.elementIndex.setSortAttribute(attr);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleSortHeaderClick: function(ev, $header) {\n        if (this.$selectedSortHeader) {\n            this.$selectedSortHeader.removeClass('ordered asc desc');\n        }\n\n        $header.removeClass('orderable').addClass('ordered loading');\n        this.elementIndex.storeSortAttributeAndDirection();\n        this.elementIndex.updateElements();\n\n        // No need for two spinners\n        this.elementIndex.setIndexAvailable();\n    },\n\n    _updateTableAttributes: function($element, tableAttributes) {\n        var $tr = $element.closest('tr');\n\n        for (var attr in tableAttributes) {\n            if (!tableAttributes.hasOwnProperty(attr)) {\n                continue;\n            }\n\n            $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend({\n    searchTimeout: null,\n    searchMenu: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addTagInput: null,\n    $spinner: null,\n\n    _ignoreBlur: false,\n\n    init: function(settings) {\n        // Normalize the settings\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n        this.$addTagInput = this.$container.children('.add').children('.text');\n        this.$spinner = this.$addTagInput.next();\n\n        this.addListener(this.$addTagInput, 'input', () => {\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.searchForTags.bind(this), 500);\n        });\n\n        this.addListener(this.$addTagInput, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n            }\n\n            let $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options.filter('.hover'));\n                    }\n                    return;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                            if ($nextOption.length) {\n                                this.focusOption($nextOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(0));\n                        }\n                    }\n                    return;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                            if ($prevOption.length) {\n                                this.focusOption($prevOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                        }\n                    }\n                    return;\n                }\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'focus', function() {\n            if (this.searchMenu) {\n                this.searchMenu.show();\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'blur', function() {\n            if (this._ignoreBlur) {\n                this._ignoreBlur = false;\n                return;\n            }\n\n            setTimeout(() => {\n                if (this.searchMenu) {\n                    this.searchMenu.hide();\n                }\n            }, 1);\n        });\n    },\n\n    focusOption: function($option) {\n        this.searchMenu.$options.removeClass('hover');\n        $option.addClass('hover');\n        this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n    },\n\n    // No \"add\" button\n    getAddElementsBtn: $.noop,\n\n    getElementSortAxis: function() {\n        return null;\n    },\n\n    searchForTags: function() {\n        if (this.searchMenu) {\n            this.killSearchMenu();\n        }\n\n        var val = this.$addTagInput.val();\n\n        if (val) {\n            this.$spinner.removeClass('hidden');\n\n            var excludeIds = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                var id = $(this.$elements[i]).data('id');\n\n                if (id) {\n                    excludeIds.push(id);\n                }\n            }\n\n            if (this.settings.sourceElementId) {\n                excludeIds.push(this.settings.sourceElementId);\n            }\n\n            var data = {\n                search: this.$addTagInput.val(),\n                tagGroupId: this.settings.tagGroupId,\n                excludeIds: excludeIds\n            };\n\n            Craft.postActionRequest('tags/search-for-tags', data, (response, textStatus) => {\n                // Just in case\n                if (this.searchMenu) {\n                    this.killSearchMenu();\n                }\n\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                        $ul = $('<ul/>').appendTo($menu);\n\n                    var $li;\n\n                    for (var i = 0; i < response.tags.length; i++) {\n                        $li = $('<li/>')\n                            .appendTo($ul);\n\n                        $('<a data-icon=\"tag\"/>')\n                            .appendTo($li)\n                            .text(response.tags[i].title)\n                            .data('id', response.tags[i].id)\n                            .addClass(response.tags[i].exclude ? 'disabled' : '');\n                    }\n\n                    if (!response.exactMatch) {\n                        $li = $('<li/>').appendTo($ul);\n                        $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                    }\n\n                    $ul.find('a:not(.disabled):first').addClass('hover');\n\n                    this.searchMenu = new Garnish.Menu($menu, {\n                        attachToElement: this.$addTagInput,\n                        onOptionSelect: this.selectTag.bind(this)\n                    });\n\n                    this.addListener($menu, 'mousedown', () => {\n                        this._ignoreBlur = true;\n                    });\n\n                    this.searchMenu.show();\n                }\n            });\n        } else {\n            this.$spinner.addClass('hidden');\n        }\n    },\n\n    selectTag: function(option) {\n        var $option = $(option);\n\n        if ($option.hasClass('disabled')) {\n            return;\n        }\n\n        var id = $option.data('id');\n        var title = $option.text();\n\n        var $element = $('<div/>', {\n            'class': 'element small removable',\n            'data-id': id,\n            'data-site-id': this.settings.targetSiteId,\n            'data-label': title,\n            'data-editable': '1'\n        }).appendTo(this.$elementsContainer);\n\n        var $input = $('<input/>', {\n            'type': 'hidden',\n            'name': this.settings.name + '[]',\n            'value': id\n        }).appendTo($element);\n\n        $('<a/>', {\n            'class': 'delete icon',\n            'title': Craft.t('app', 'Remove')\n        }).appendTo($element);\n\n        var $titleContainer = $('<div/>', {\n            'class': 'label'\n        }).appendTo($element);\n\n        $('<span/>', {\n            'class': 'title',\n            text: title\n        }).appendTo($titleContainer);\n\n        var margin = -($element.outerWidth() + 10);\n        this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addTagInput.velocity(animateCss, 'fast');\n\n        this.$elements = this.$elements.add($element);\n\n        this.addElements($element);\n\n        this.killSearchMenu();\n        this.$addTagInput.val('');\n        this.$addTagInput.trigger('focus');\n\n        if (!id) {\n            // We need to create the tag first\n            $element.addClass('loading disabled');\n\n            var data = {\n                groupId: this.settings.tagGroupId,\n                title: title\n            };\n\n            Craft.postActionRequest('tags/create-tag', data, (response, textStatus) => {\n                if (textStatus === 'success' && response.success) {\n                    $element.attr('data-id', response.id);\n                    $input.val(response.id);\n\n                    $element.removeClass('loading disabled');\n                } else {\n                    this.removeElement($element);\n\n                    if (textStatus === 'success') {\n                        // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                }\n            });\n        }\n    },\n\n    killSearchMenu: function() {\n        this.searchMenu.hide();\n        this.searchMenu.destroy();\n        this.searchMenu = null;\n    }\n}, {\n    defaults: {\n        tagGroupId: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend({\n    getElementContainer: function() {\n        return this.$container.children('ul');\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            config = $.extend({\n                autocomplete: false,\n            }, config);\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: typeof config.autocomplete === 'boolean' ? (config.autocomplete ? 'on' : 'off') : config.autocomplete,\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            } else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n                'aria-label': Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html': option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                html: config.label,\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            } else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: allChecked || (config.values || []).includes(option.value),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            config.fieldset = true;\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<button/>', {\n                'type': 'button',\n                'class': 'lightswitch',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'checkbox',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            var id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            var containerId = config.containerId || id + '-container';\n            var name = config.name || null;\n            var value = config.value || null;\n            var small = config.small || false;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                id: containerId,\n                'class': 'flex color-container'\n            });\n\n            var $colorPreviewContainer = $('<div/>', {\n                'class': 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            var $colorPreview = $('<div/>', {\n                'class': 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            var $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: value,\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000)) + '-date';\n            var name = config.name || null;\n            var inputName = name ? name + '[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate: null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000)) + '-time';\n            var name = config.name || null;\n            var inputName = name ? name + '[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours() * 3600 + value.getMinutes() * 60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $(config.fieldset ? '<fieldset/>' : '<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $(config.fieldset ? '<legend/>' : '<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-${config.fieldset ? 'legend' : 'label'}` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': !config.fieldset && config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend({\n    uploader: null,\n    allowedKinds: null,\n    $element: null,\n    settings: null,\n    _rejectedFiles: {},\n    _extensionList: null,\n    _totalFileCounter: 0,\n    _validFileCounter: 0,\n\n    init: function($element, settings) {\n        this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n        this.$element = $element;\n        this.allowedKinds = null;\n        this._extensionList = null;\n        this._totalFileCounter = 0;\n        this._validFileCounter = 0;\n\n        settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n        var events = settings.events;\n        delete settings.events;\n\n        if (settings.allowedKinds && settings.allowedKinds.length) {\n            if (typeof settings.allowedKinds === 'string') {\n                settings.allowedKinds = [settings.allowedKinds];\n            }\n\n            this.allowedKinds = settings.allowedKinds;\n            delete settings.allowedKinds;\n        }\n\n        settings.autoUpload = false;\n\n        this.uploader = this.$element.fileupload(settings);\n        for (var event in events) {\n            if (!events.hasOwnProperty(event)) {\n                continue;\n            }\n\n            this.uploader.on(event, events[event]);\n        }\n\n        this.settings = settings;\n\n        this.uploader.on('fileuploadadd', this.onFileAdd.bind(this));\n    },\n\n    /**\n     * Set uploader parameters.\n     */\n    setParams: function(paramObject) {\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        this.uploader.fileupload('option', {formData: paramObject});\n    },\n\n    /**\n     * Get the number of uploads in progress.\n     */\n    getInProgress: function() {\n        return this.uploader.fileupload('active');\n    },\n\n    /**\n     * Return true, if this is the last upload.\n     */\n    isLastUpload: function() {\n        // Processing the last file or not processing at all.\n        return this.getInProgress() < 2;\n    },\n\n    /**\n     * Called on file add.\n     */\n    onFileAdd: function(e, data) {\n        e.stopPropagation();\n\n        var validateExtension = false;\n\n        if (this.allowedKinds) {\n            if (!this._extensionList) {\n                this._createExtensionList();\n            }\n\n            validateExtension = true;\n        }\n\n        // Make sure that file API is there before relying on it\n        data.process().done(() => {\n            var file = data.files[0];\n            var pass = true;\n            if (validateExtension) {\n                var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                var fileExtension = matches[1];\n                if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                    pass = false;\n                    this._rejectedFiles.type.push('“' + file.name + '”');\n                }\n            }\n\n            if (file.size > this.settings.maxFileSize) {\n                this._rejectedFiles.size.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            // If the validation has passed for this file up to now, check if we're not hitting any limits\n            if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                this._rejectedFiles.limit.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            if (pass) {\n                this._validFileCounter++;\n                data.submit();\n            }\n\n            if (++this._totalFileCounter === data.originalFiles.length) {\n                this._totalFileCounter = 0;\n                this._validFileCounter = 0;\n                this.processErrorMessages();\n            }\n        });\n\n        return true;\n    },\n\n    /**\n     * Process error messages.\n     */\n    processErrorMessages: function() {\n        var str;\n\n        if (this._rejectedFiles.type.length) {\n            if (this._rejectedFiles.type.length === 1) {\n                str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            } else {\n                str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n            this._rejectedFiles.type = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.size.length) {\n            if (this._rejectedFiles.size.length === 1) {\n                str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n            this._rejectedFiles.size = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.limit.length) {\n            if (this._rejectedFiles.limit.length === 1) {\n                str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n            this._rejectedFiles.limit = [];\n            alert(str);\n        }\n    },\n\n    humanFileSize: function(bytes) {\n        var threshold = 1024;\n\n        if (bytes < threshold) {\n            return bytes + ' B';\n        }\n\n        var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        var u = -1;\n\n        do {\n            bytes = bytes / threshold;\n            ++u;\n        }\n        while (bytes >= threshold);\n\n        return bytes.toFixed(1) + ' ' + units[u];\n    },\n\n    _createExtensionList: function() {\n        this._extensionList = [];\n\n        for (var i = 0; i < this.allowedKinds.length; i++) {\n            var allowedKind = this.allowedKinds[i];\n\n            if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                    var ext = Craft.fileKinds[allowedKind].extensions[j];\n                    this._extensionList.push(ext);\n                }\n            }\n        }\n    },\n\n    destroy: function() {\n        this.$element.fileupload('destroy');\n        this.base();\n    }\n}, {\n    defaults: {\n        dropZone: null,\n        pasteZone: null,\n        fileInput: null,\n        sequentialUploads: true,\n        maxFileSize: Craft.maxUploadSize,\n        allowedKinds: null,\n        events: {},\n        canAddMoreFiles: null,\n        headers: {'Accept': 'application/json;q=0.9,*/*;q=0.8'},\n        paramName: 'assets-upload'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Make it lowercase\n        sourceVal = sourceVal.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        sourceVal = Craft.asciiString(sourceVal);\n\n        // Handle must start with a letter and end with a letter/number\n        sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n        sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n        // Get the \"words\"\n        var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n        var uriFormat = words.join(Craft.slugWordSeparator);\n\n        if (uriFormat && this.settings.suffix) {\n            uriFormat += this.settings.suffix;\n        }\n\n        return uriFormat;\n    }\n});\n"]}