{"version":3,"sources":["Craft.min.js","Craft.js","BaseElementEditor.js","BaseElementIndex.js","BaseElementIndexView.js","BaseElementSelectInput.js","BaseElementSelectorModal.js","BaseInputGenerator.js","AdminTable.js","AssetEditor.js","AssetImageEditor.js","AssetIndex.js","AssetSelectInput.js","AssetSelectorModal.js","AuthManager.js","CP.js","CategoryIndex.js","CategorySelectInput.js","Chart.js","ColorInput.js","CustomizeSourcesModal.js","DataTableSorter.js","DeleteUserModal.js","DraftEditor.js","DynamicGenerator.js","EditableTable.js","ElementActionTrigger.js","ElementThumbLoader.js","ElevatedSessionForm.js","ElevatedSessionManager.js","EntryIndex.js","FieldLayoutDesigner.js","FieldToggle.js","Grid.js","HandleGenerator.js","ImageUpload.js","InfoIcon.js","LightSwitch.js","Listbox.js","LivePreview.js","PasswordInput.js","Preview.js","PreviewFileModal.js","ProgressBar.js","PromptHandler.js","SlidePicker.js","SlideRuleInput.js","SlugGenerator.js","Structure.js","StructureDrag.js","StructureTableSorter.js","TableElementIndexView.js","TagSelectInput.js","ThumbsElementIndexView.js","UI.js","Uploader.js","UriFormatGenerator.js"],"names":["$","rxhtmlTag","jQuery","htmlPrefilter","html","replace","extend","Craft","navHeight","index","arr","key","isArray","reduce","obj","i","t","category","message","params","translations","this","formatMessage","pattern","args","tokens","_tokenizePattern","length","token","_parseToken","join","start","pos","depth","chars","indexOf","slice","open","close","push","split","param","trim","arg","type","format","number","formatNumber","substr","plural","c","offset","selector","selectorChars","substring","parseInt","map","p","formatDate","date","Date","datepicker","datepickerOptions","dateFormat","d3","formatLocale","d3FormatLocaleDefinition","formatter","shortcutText","shift","alt","clientOs","escapeHtml","str","text","escapeRegex","getText","encodeUriComponent","encodeURIComponent","differences","!","*","'","(",")","chr","re","RegExp","selectFullValue","input","$input","val","setSelectionRange","formatInputId","inputName","rtrim","getUrl","path","baseUrl","anchor","isPlainObject","aParams","name","hasOwnProperty","value","Garnish","apos","url","qpos","search","pathParam","pathMatch","match","omitScriptNameInUrls","usePathInfo","scriptName","basePath","endPath","getCpUrl","baseCpUrl","getSiteUrl","baseSiteUrl","getActionUrl","actionUrl","redirectTo","document","location","href","getCsrfInput","csrfTokenName","csrfTokenValue","postActionRequest","action","data","callback","options","contentType","JSON","stringify","jqXHR","ajax","dataType","headers","_actionHeaders","success","error","textStatus","errorThrown","readyState","cp","displayError","alert","send","_waitingOnAjax","_ajaxQueue","queueActionRequest","undefined","_postNextActionRequestInQueue","X-Registered-Asset-Bundles","Object","keys","registeredAssetBundles","X-Registered-Js-Files","registeredJsFiles","sendActionRequest","method","Promise","resolve","reject","X-Requested-With","v","getTime","axios","request","then","catch","sendApiRequest","uri","cancelToken","_getApiHeaders","apiHeaders","baseURL","baseApiUrl","apiParams","_apiHeaders","processCraftHeaders","apiResponse","_processApiHeaders","_loadingApiHeaders","_apiHeaderWaitlist","response","e","_rejectApiRequests","clearCachedApiHeaders","downloadFromUrl","body","XMLHttpRequest","setRequestHeader","responseType","onload","status","disposition","getResponseHeader","matches","exec","filename","blob","Blob","link","createElement","window","URL","createObjectURL","download","appendChild","click","removeChild","stringToArray","findDeltaData","oldData","newData","deltaNames","sort","a","b","groupedOldParams","_groupParamsByDeltaNames","groupedNewParams","__root__","n","inArray","modifiedDeltaNames","concat","withRoot","useInitialValues","paramName","grouped","paramLoop","decodeURIComponent","initialDeltaValues","expandPostArray","expanded","m","unshift","parentElem","createForm","$form","attr","accept-charset","chunks","values","appendTo","compare","obj1","obj2","sortObjectKeys","Array","getObjectKeys","escapeChars","escaped","ltrim","startsWith","filterArray","filtered","elem","includes","removeFromArray","splice","getLast","uppercaseFirst","charAt","toUpperCase","lowercaseFirst","toLowerCase","parseUrl","scheme","host","hostname","port","query","hash","isSameHost","requestUrlInfo","urlInfo","secondsToHumanTimeDuration","seconds","showSeconds","weeks","Math","floor","days","minutes","hours","round","timeComponents","asciiString","charMap","normalize","char","asciiStr","asciiCharMap","randomString","result","random","createErrorList","errors","$ul","addClass","$li","appendHeadHtml","$existingCss","existingCss","eq","regexp","append","appendFootHtml","$existingJs","src","existingJs","$bod","initUiElements","$container","grid","infoicon","checkboxselect","fieldtoggle","lightswitch","nicetext","formsubmit","menubtn","datetime","each","_elementIndexClasses","_elementSelectorModalClasses","_elementEditorClasses","registerElementIndexClass","elementType","func","registerElementSelectorModalClass","registerElementEditorClass","createElementIndex","settings","BaseElementIndex","createElementSelectorModal","BaseElementSelectorModal","createElementEditor","element","BaseElementEditor","getLocalStorage","defaultValue","systemUid","localStorage","parse","setLocalStorage","removeLocalStorage","removeItem","getCookie","cookie","setCookie","defaultCookieOptions","domain","maxAge","expires","toUTCString","secure","removeCookie","getElementInfo","$element","hasClass","find","id","siteId","label","hasThumb","setElementSize","size","otherSize","removeClass","$oldImg","$newImg","sizes","srcset","replaceWith","picturefill","elements","submitForm","confirm","redirect","retainScroll","scrollY","trigger","fn","animateLeft","duration","easing","complete","orientation","velocity","left","right","animateRight","disable","$elem","removeAttr","enable","itemSelector","cols","maxCols","minColWidth","mode","fillMode","colClass","snapToGrid","Grid","InfoIcon","CheckboxSelect","FieldToggle","settingName","settingValue","setSettings","thisSettings","hasAttr","indeterminateValue","LightSwitch","NiceText","on","ev","$btn","currentTarget","$anchor","closest","customTrigger","next","menuAnchor","MenuBtn","$wrapper","$inputs","checkValue","hasValue","children","class","title","aria-label","remove","first","focus","charsLeftHtml","charsLeft","$doc","ready","Base","elementId","initialData","$fieldsContainer","$cancelBtn","$saveBtn","$spinner","$siteSelect","$siteSpinner","hud","init","defaults","loadHud","setElementAttribute","attributes","getBaseData","prevalidate","onBeginLoading","includeSites","isMultiSite","showSiteSwitcher","showHud","bind","onEndLoading","$hudContents","sites","$header","$siteSelectContainer","siteInfo","addListener","add","updateForm","onCreateForm","$footer","$buttonsContainer","updateBody","updateSizeAndPosition","hudTrigger","HUD","bodyClass","closeOtherHUDs","hideOnEsc","hideOnShadeClick","onShow","onShowHud","onHide","onHideHud","onSubmit","saveElement","shortcutManager","registerShortcut","ESC_KEY","maybeCloseHud","$shade","$hud","$body","hide","switchSite","isDirty","newSiteId","reloadForm","refreshInitialData","$allInstructions","$instructions","$label","siblings","requestAnimationFrame","headHtml","footHtml","serialize","validators","isFunction","call","$title","$a","cpEditUrl","newTitle","elementTypeNames","displayNotice","closeHud","onSaveElement","shake","showing","keyCode","S_KEY","ctrl","runQueue","elementIndex","noop","initialized","instanceState","sourceStates","sourceStatesStorageKey","searchTimeout","sourceSelect","$main","isIndexBusy","$sidebar","showingSidebar","sourceKey","sourceViewModes","$source","sourcesByKey","$visibleSources","$customizeSourcesBtn","customizeSourcesModal","$toolbar","toolbarOffset","$search","searching","searchText","trashed","drafts","$clearSearchBtn","$statusMenuBtn","$statusMenuContainer","statusMenu","$siteMenuBtn","siteMenu","$sortMenuBtn","sortMenu","$sortAttributesList","$sortDirectionsList","$scoreSortAttribute","$structureSortAttribute","$elements","$viewModeBtnContainer","viewModeBtns","viewMode","view","_autoSelectElements","$countSpinner","$countContainer","page","resultSet","totalResults","$exportBtn","actions","actionsHeadHtml","actionsFootHtml","$selectAllContainer","$selectAllCheckbox","showingActionTriggers","exporters","exportersByType","_$detachedToolbarItems","_$triggers","_ignoreFailedRequest","_cancelToken","getDefaultInstanceState","storageKey","context","toolbarSelector","parent","hideSidebar","initSources","menu","_handleStatusChange","$option","$options","filter","_setSite","criteria","_handleSiteChange","defaultSiteId","getSiteId","$storedSiteOption","startSearching","stopSearching","clearTimeout","setTimeout","updateElementsIfSearchTextChanged","RETURN_KEY","preventDefault","isMobileBrowser","_handleSortChange","afterInit","selectDefaultSource","setPage","pageNum","updateElements","onAfterInit","_createCancelToken","CancelToken","source","_cancelRequests","cancel","getSourceContainer","$sources","$items","_getSourcesInList","Select","multi","allowEmpty","vertical","onSelectionChange","_handleSourceSelectionChange","_initSources","getDefaultSourceKey","getSourceByKey","selectSource","refreshSources","removeAllItems","setIndexBusy","refreshSourcesAction","setIndexAvailable","initSource","addItems","initSourceToggle","expandedSources","_expandSource","deinitSourceToggle","$toggle","_getSourceToggle","deinitSource","removeItems","removeListener","removeData","selectedSource","defaultSource","paths","getDefaultExpandedSources","addOptions","prependTo","_updateStructureSortOption","setSortAttribute","detach","setInstanceState","storeInstanceState","getSourceState","getSelectedSourceState","setSelecetedSourceState","viewState","storeSortAttributeAndDirection","getSelectedSortAttribute","order","getSelectedSortDirection","max","pageTrigger","history","replaceState","_resetCount","getViewParams","batchSize","limit","canHaveDrafts","savedDraftsOnly","draftOf","disabledElementIds","paginated","_isViewPaginated","collapsedElementIds","preservePagination","destroy","updateElementsAction","$scrollContainer","scrollTop","_updateView","showActionTriggers","css","height","_createTriggers","submitAction","actionParams","selectedElementIds","getSelectedElementIds","_findAction","viewParams","elementAction","elementIds","submitActionsAction","afterAction","actionClass","onAfterAction","hideActionTriggers","updateActionTriggers","totalSelected","getSelectedElements","getEnabledElements","setStatus","selectOption","getSortAttributeOption","attribute","setSortDirection","getSortDirectionOption","dir","getSelectedViewMode","selectItem","updateSidebarMenuLabel","sortOptions","data-extra","data-attr","setStoredSortOptionsForSource","$firstOption","getViewModesForSource","sourceViewMode","$viewModeBtn","className","data-view","data-icon","icon","selectViewMode","doesSourceHaveViewMode","onSelectSource","selectSourceByKey","sortAttr","sortDir","getDefaultSort","viewModes","force","createView","getViewClass","TableElementIndexView","ThumbsElementIndexView","rememberDisabledElementId","forgetDisabledElementId","enableElements","parents","onEnableElements","disableElements","onDisableElements","getElementById","enableElementsById","ids","makeArray","disableElementsById","selectElementAfterUpdate","addButton","$button","getButtonContainer","isShowingSidebar","buttonContainer","createCustomizeSourcesModal","modal","CustomizeSourcesModal","base","onSelectSite","onUpdateElements","$selectedItems","_handleActionTriggerSubmit","getPostData","_handleMenuActionTriggerSubmit","option","selectedOption","firstSite","$firstVisibleSource","selectNewSource","toString","get","$heading","$headings","nextUntil","setSiteId","is","_handleSelectionChange","_handleSourceDblClick","_toggleSource","stopPropagation","_handleSourceToggleClick","prev","$list","_getChildSources","_deinitSources","_collapseSource","aria-expanded","$childSources","_countResults","total","itemLabel","itemsLabel","min","last","countLabel","item","items","$paginationContainer","totalPages","ceil","$prevBtn","$nextBtn","role","tabindex","aria-checked","selectAllElements","deselectAllElements","SPACE_KEY","selectable","multiSelect","checkboxMode","selectElementById","countElementsAction","count","triggers","safeMenuActions","destructiveMenuActions","destructive","$menuTrigger","$menu","$safeList","_createMenuTriggerList","$destructiveList","$div","_showExportHud","typeOptions","$typeField","ui","createSelectField","$formatField","$typeSelect","formattable","$limitField","createTextField","placeholder","submitting","isNaN","BaseElementIndexView","$loadingMoreSpinner","$elementContainer","$scroller","thumbLoader","elementSelect","loadingMore","_totalVisible","_morePending","_handleEnableElements","_handleDisableElements","container","insertAfter","getElementContainer","setTotalVisible","setMorePending","ElementThumbLoader","load","isVerticalList","handle","_handleElementEditing","$target","target","prop","isTouchCapable","maybeLoadMore","getAllElements","$selectedElements","selectElement","selectAll","deselectAll","getTotalVisible","totalVisible","getMorePending","morePending","canLoadMore","loadMore","$win","innerHeight","top","outerHeight","getLoadMoreParams","loadMoreElementsAction","$newElements","appendElements","onAppendElements","newElements","off","BaseElementSelectInput","elementSort","elementEditor","$elementsContainer","$addElementBtn","$addElementBtnContainer","_initialized","normalizedSettings","arguments","modalStorageKey","sortable","getContainer","getElementsContainer","getAddElementsBtn","initElementSelect","initElementSort","resetElements","getElements","DragSort","$targetItem","getSelectedItems","ignoreHandleSelector","axis","getElementSortAxis","collapseDraggees","magnetStrength","helperLagBase","onSortChange","resetItemOrder","canAddMoreElements","updateAddElementsBtn","enableAddElementsBtn","disableAddElementsBtn","removeElements","addElements","editable","_handleShowElementEditor","removeElement","not","onRemoveElements","animateElementAway","animateCss","opacity","outerWidth","draftEditor","pause","REMOVE_FX_DURATION","resume","showModal","show","createModal","getModalSettings","closeOtherModals","sources","showSiteMenu","getDisabledElementIds","onSelect","onModalSelect","modalSettings","allowSelfRelations","sourceElementId","slotsLeft","selectElements","updateDisabledElementsInModal","elementInfo","createNewElement","appendElement","animateElementIntoPlace","onSelectElements","clone","prepend","$modalElement","$inputElement","origOffset","destOffset","$helper","position","zIndex","ADD_FX_DURATION","checkForm","fieldId","editorSettings","Modal","$selectBtn","$sourceToggles","$tbody","$primaryButtons","$secondaryButtons","$footerSpinner","onFadeIn","_createElementIndex","updateSelectBtnState","enableSelectBtn","disableSelectBtn","enableCancelBtn","disableCancelBtn","showFooterSpinner","hideFooterSpinner","clearMouseUpTimeout","disableElementsOnSelect","hideOnSelect","info","has","touchData","firstTap","secondTap","resizable","onCancel","BaseInputGenerator","listening","timeout","startListening","setNewSource","stopListening","removeAllListeners","onSourceTextChange","updateTarget","onTargetTextChange","activeElement","onFormSubmit","sourceVal","targetVal","generateTargetValue","dispatchEvent","InputEvent","inputType","Event","AdminTable","totalItems","sorter","$noItems","$table","$deleteBtns","allowDeleteAll","minItems","noItemsSelector","tableSelector","DataTableSorter","reorderItems","updateUI","addRow","row","maxItems","$row","$deleteBtn","idAttribute","reorderAction","onReorderItems","reorderSuccessMessage","reorderFailMessage","handleDeleteBtnClick","event","confirmDeleteItem","deleteItem","getItemName","confirmDeleteMessage","getItemId","deleteAction","handleDeleteItemResponse","onDeleteItem","deleteSuccessMessage","deleteFailMessage","nameAttribute","$moveButtons","newItemBtnSelector","AssetEditor","reloadIndex","$imageEditorTrigger","showImageEditor","AssetImageEditor","onSave","refreshThumbnail","$imageTools","$buttons","$replaceBtn","$editorContainer","$straighten","$croppingCanvas","$spinnerCanvas","canvas","image","viewport","focalPoint","croppingCanvas","clipper","croppingRectangle","cropperHandles","cropperGrid","croppingShade","croppingAreaText","imageStraightenAngle","viewportRotation","originalWidth","originalHeight","imageVerticeCoords","zoomRatio","animationInProgress","currentView","assetId","cacheBust","draggingCropper","scalingCropper","draggingFocal","previousMouseX","previousMouseY","shiftKeyHeld","editorHeight","editorWidth","cropperState","scaleFactor","flipData","focalPointState","spinnerInterval","maxImageSize","lastLoadedDimensions","imageIsLoading","mouseMoveEvent","croppingConstraint","constraintOrientation","showingCustomConstraint","renderImage","renderCropper","now","allowDegreeFractions","isImagick","x","y","allowSavingAsNew","saveImage","getMaxImageSize","loadEditor","browserViewportWidth","documentElement","clientWidth","browserViewportHeight","clientHeight","devicePixelRatio","$tabs","$viewsContainer","$views","innerWidth","_showSpinner","fabric","StaticCanvas","width","enableRetinaScaling","renderAll","imageUrl","Image","fromURL","imageObject","set","originX","originY","getHeight","getWidth","getScaledImageDimensions","_setFittedImageVerticeCoordinates","_repositionEditorElements","focalState","imageDimensions","offsetX","offsetY","focal","focalData","adjustedX","adjustedY","storeFocalPointState","_createFocalPoint","_createViewport","storeCropperState","_addControlListeners","_handleMouseMove","_handleMouseDown","_handleMouseUp","_handleMouseOut","_hideSpinner","_reloadImage","setSrc","min-width","min-height","previousEditorDimensions","setDimensions","currentScaledDimensions","getZoomToFitRatio","previouslyOccupiedArea","_getBoundingRectangle","_repositionCropper","getZoomToCoverRatio","_repositionImage","_repositionViewport","_repositionFocalPoint","_zoomImage","Rect","fill","globalCompositeOperation","sizeFactor","focalX","focalY","deltaX","deltaY","Group","Circle","radius","strokeWidth","stroke","toggleFocalPoint","dimensions","state","currentWidth","ratio","hasOrientationChanged","_","imageRatio","editorRatio","_handleTabClick","rotateImage","flipImage","straighteningInput","SlideRuleInput","onStart","_showGrid","onChange","slider","straighten","onEnd","_hideGrid","_cleanupFocalPointAfterStraighten","SHIFT_KEY","_handleConstraintClick","_handleOrientationClick","_applyCustomConstraint","constraint","_showCustomConstraint","_hideCustomConstraint","setCroppingConstraint","enforceCroppingConstraint","$constraints","$constraint","reverse","_getCustomConstraint","w","h","parseFloat","_setCustomConstraint","$tab","showView","enableSlider","disableSlider","disableCropMode","enableCropMode","zoomFactor","degrees","imageZoomRatio","newAngle","angle","scaledImageDimensions","viewportProperties","imageProperties","angleInRadians","PI","newDeltaX","cos","sin","newDeltaY","modifiedDeltaX","modifiedDeltaY","temp","animate","animationDuration","onComplete","cleanAngle","_adjustFocalPointByAngle","_resetFocalPointPosition","editorCenter","setValue","properties","scaleY","scaleX","previousAngle","_adjustEditorElementsOnStraighten","newCenterX","newCenterY","angleDelta","currentZoomRatio","adjustmentRatio","cropperCenterX","cropperCenterY","imageVertices","getImageVerticeCoords","rectangle","_getZoomRatioToFitRectangle","_isCenterInside","object","containingObject","newFocalX","newFocalY","adjustedFocalX","adjustedFocalY","containingVertices","vertex","rectangleVertices","_getRectangleVertices","verticeIndex","arePointsInsideRectangle","edge","_getEdgeCrossed","rectangleCenter","distanceFromVertexToEdge","abs","sqrt","pow","distanceFromCenterToEdge","postData","imageRotation","cropData","zoom","end","scaledWidth","scaledHeight","boundingBox","_getImageBoundingBox","scale","vertScale","horiScale","getCombinedZoomRatio","strokeOptions","gridWidth","gridHeight","xStep","yStep","Line","onFadeOut","_editorModeTransition","cropperData","_showCropper","_hideCropper","targetZoom","inverseZoomFactor","imageOffsetX","imageOffsetY","getContext","cW","cH","setInterval","rotation","save","clearRect","translate","rotate","beginPath","moveTo","lineTo","lineWidth","strokeStyle","restore","clearInterval","clipperData","_setupCropperLayer","_redrawCropperElements","backgroundColor","hoverCursor","selection","rectangleRatio","rectWidth","rectHeight","lineOptions","gridOptions","pathGroup","Path","cropTextTop","cropTextBackgroundColor","Textbox","fontSize","font","textAlign","previousImageArea","currentOffset","areaFactor","coordinateSet","d","_isMouseOver","move","_cropperHandleHitTest","pageX","pageY","_handleMouseMoveInternal","_handleFocalDrag","_handleCropperDrag","_handleCropperResize","_setMouseCursor","vertices","dxi","dyi","furthest","furthestDeltas","newX","newY","previousHeight","previousWidth","startingRectangle","_calculateNewCropperSizeByDeltas","cropperDirection","topDelta","leftDelta","change","cursor","parentOffset","mouseX","mouseY","lb","rb","tb","bb","topLeft","topRight","bottomRight","bottomLeft","zoomMode","topVerticalSegment","bottomVerticalSegment","rightHorizontalSegment","leftHorizontalSegment","verticalOffset","horizontalOffset","_debug","fabricObj","debugger","points","ab","_getVector","bc","scalarAbAb","_getScalarProduct","scalarBcBc","point","ap","bp","scalarAbAp","scalarBcBp","projectsOnAB","projectsOnBC","_getVectorMagnitude","vector","_getAngleBetweenVectors","acos","edgePoints","centerPoint","smallestDiff","edgeCrossed","edgeIndex","toCenter","edgeVector","toVertex","diff","box","proportion","AssetIndex","$includeSubfoldersContainer","$includeSubfoldersCheckbox","showingIncludeSubfoldersCheckbox","$uploadButton","$uploadInput","$progressBar","$folders","uploader","promptHandler","progressBar","_uploadTotalFiles","_uploadFileProgress","_uploadedAssetIds","_currentUploaderSettings","_assetDrag","_folderDrag","_expandDropTargetFolderTimeout","_tempExpandedFolders","_fileConflictTemplate","choices","_folderConflictTemplate","_initIndexPageMode","_positionProgressBar","_createFolderContextMenu","_getSourceLevel","updateDropTargets","contextMenu","parentsUntil","DragDrop","activeDropTargetClass","helperOpacity","helper","$file","_getFileDragHelper","dropTargets","$draggee","targets","onDragStart","_onDragStart","onDropTargetChange","_onDropTargetChange","onDragStop","_onFileDragStop","helperBaseZindex","$selected","draggees","_getFolderUidFromSourceKey","$draggeeHelper","$helperSidebar","$helperNav","$helperUl","padding-top","padding-right","padding-bottom","padding-left","draggedSourceIds","_onFolderDragStop","$activeDropTarget","originatingSource","targetFolderId","originalAssetIds","originalAssetId","resetProgressBar","setItemCount","showProgressBar","parameterArray","folderId","onMoveFinish","responseArray","resetPrompts","conflict","addPrompt","suggestedFilename","prompt","hideProgressBar","performAfterMoveActions","_collapseExtraExpandedFolders","getPromptCount","fadeOutHelpers","showBatchPrompts","returnData","newParameterArray","choice","apply","_performBatchRequests","returnHelpersToDraggees","folderIds","parentId","requestId","fileMoveList","newSourceKey","transferList","newFolderId","newFolderUid","merge","_performActualFolderMove","folderDeleteList","moveCallback","counter","_getRootSource","$parent","_getParentSource","_selectSourceByFolderId","$targetSource","_getSourceByKey","$parentSources","$parentSource","style","insertBefore","PromptHandler","ProgressBar","fileInput","dropZone","events","fileuploadstart","_onUploadStart","fileuploadprogressall","_onUploadProgress","fileuploaddone","_onUploadComplete","kind","allowedKinds","Uploader","defaultVolumeHandle","setParams","$rootSource","$subContainer","checked","marginBottom","includeSubfolders","progress","loaded","setProgressPercentage","files","doReload","file","isLastUpload","_uploadFollowup","_updateAfterUpload","doFollowup","parameterIndex","followupCallback","incrementProcessedItemCount","updateProgressBar","sourceAssetId","conflictingAssetId","targetFilename","_onUpdateElements","_onKeyDown","_onElementFocus","shiftKey","PreviewFileModal","openInstance","selfDestruct","$focusedItem","_loadPreview","startingWidth","startingHeight","$outerContainer","$innerContainer","_$firstRowCells","$helperCells","$helperCell","$firstRowCell","$dropTarget","dropTargetFolder","_hasSubfolders","_isExpanded","_expandFolder","dropTargetFolderId","$excludedSources","_collapseFolder","menuOptions","onClick","_createSubfolder","_renameFolder","_deleteFolder","ContextMenu","menuClass","$parentFolder","subfolderName","folderName","_prepareParentForChildren","$subfolder","folderUid","_appendSubfolder","$targetFolder","folder","_cleanUpTree","oldName","newName","$existingChildren","subfolderLabel","folderInserted","$existingChild","before","windowHeight","finalCallback","doRequest","parameters","AssetSelectInput","$uploadBtn","originalFilename","originalExtension","resetOriginalFilename","_renameHelper","validateElementForm","canUpload","_attachUploader","defaultFieldLayoutId","formData","multiple","canAddMoreFiles","$existing","selectUploadedFile","$newElement","margin","slotsTaken","_parseFilename","parts","extension","pop","baseFileName","endPos","selectionStart","selectionEnd","createRange","select","range","collapse","moveEnd","moveStart","$filenameField","ext","oldExt","newExt","AssetSelectorModal","$selectTransformBtn","_selectedTransform","transforms","createSelectTransformButton","$btnGroup","$menuList","MenuButton","onOptionSelect","onSelectTransform","allowTransforms","transform","selectImagesWithTransform","transformUrls","imageIdsWithMissingUrls","$item","fetchMissingTransformUrls","canSelectImageTransforms","AuthManager","remainingSessionTime","checkRemainingSessionTimer","showLoginModalTimer","decrementLogoutWarningInterval","showingLogoutWarningModal","showingLoginModal","logoutWarningModal","loginModal","$logoutWarningPara","$passwordInput","$passwordSpinner","$loginBtn","$loginErrorPara","submitLoginIfLoggedOut","updateRemainingSessionTime","setCheckRemainingSessionTimer","checkRemainingSessionTime","extendSession","responseJSON","minSafeSessionTime","showLogoutWarningModal","checkInterval","showLoginModal","submitLogin","hideLogoutWarningModal","hideLoginModal","quickShow","$logoutBtn","$renewSessionBtn","autoShow","shadeClass","updateLogoutWarningMessage","decrementLogoutWarning","time","quick","quickHide","$inputContainer","$inputsFlexContainer","$passwordContainer","$buttonContainer","$passwordWrapper","PasswordInput","onToggleInput","$newPasswordInput","logout","renewSession","validatePassword","login","clearLoginError","loginName","username","password","showLoginError","CP","authManager","$nav","$mainContainer","$alerts","$crumbs","$notificationContainer","$primaryForm","$headerContainer","$mainContent","$details","$tabsContainer","$tabsList","$overflowTabBtn","$overflowTabList","$selectedTab","selectedTabIndex","$focusableTab","$sidebarContainer","$contentContainer","$edition","$confirmUnloadForms","$deltaForms","$collapsibleTables","fixedHeader","enableQueue","totalJobs","jobInfo","displayedJobInfo","displayedJobInfoUnchanged","trackJobProgressTimeout","jobProgressIcon","checkingForUpdates","forcingRefreshOnUpdatesCheck","includingDetailsOnUpdatesCheck","checkForUpdatesCallbacks","updateFixedHeader","handleWindowResize","$errorNotifications","$otherNotifications","delay","notificationDuration","initSpecialForms","initAlerts","shortcuts","shortcut","submitPrimaryForm","initTabs","scrollTo","_handleInputFocus","_handleInputBlur","serialized","$forms","submit","confirmUnload","livePreview","inPreviewMode","originalEvent","returnValue","saveShortcut","toggleNav","toggleClass","toggleSidebar","$initialTab","selectTab","_focusTab","LOCATION_HASH","LEFT_KEY","RIGHT_KEY","contains","tab","deselectTab","setFocus","updateTabs","updateResponsiveTables","maxWidth","tabMargin","totalWidth","showOverflowMenu","_i","_$table","_containerWidth","_check","_isCollapsed","getBoundingClientRect","headerHeight","max-height","displayNotification","$notification","fadedMargin","margin-left","margin-right","display","notificationType","fetchAlerts","displayAlerts","alerts","margin-top","$shunnableAlerts","$link","checkForUpdates","forceRefresh","includeDetails","realCallback","_checkForUpdates","updateUtilitiesBadge","callbacks","updateInfo","_getUpdates","_checkForCachedUpdates","cached","onlyIfCached","updates","_cacheUpdates","$utilitiesLink","$badge","badgeCount","runQueueAutomatically","trackJobProgress","_trackJobProgressInternal","setJobInfo","jobs","oldInfo","getDisplayedJobInfo","progressLabel","updateJobIcon","statuses","JOB_STATUS_RESERVED","JOB_STATUS_FAILED","JOB_STATUS_WAITING","j","JobProgressIcon","hideFailMode","setDescription","description","setProgress","showFailMode","JOB_STATUS_DONE","$progressLabel","failMode","_$bgCanvas","_$staticCanvas","_$hoverCanvas","_$failCanvas","_staticCtx","_hoverCtx","_canvasSize","_arcPos","_arcRadius","_lineWidth","_arcStartPos","_arcEndPos","_arcStartStepSize","_arcEndStepSize","_arcStep","_arcStepTimeout","_arcAnimateCallback","_progressBar","canAccessQueueManager","$canvasContainer","$labelContainer","_createCanvas","_drawArc","_animateArc","_setArc","color","$canvas","ctx","lineCap","startPos","arc","closePath","targetStartPos","targetEndPos","_takeNextArcStep","CategoryIndex","editableGroups","$newCategoryBtnGroup","$newCategoryBtn","updateButton","editableCategoryGroups","group","uid","defaultGroupHandle","selectedSourceHandle","selectedGroup","$menuBtn","_getGroupTriggerHref","_openCreateCategoryModal","getAttribute","menuHtml","menuBtn","primarySiteId","groupId","newCategoryBtnText","groupSourceKey","CategorySelectInput","selectedCategoryIds","categoryIds","branchLimit","selectionLabel","$newElementsContainer","filteredElements","$allCategories","_animateCategoryAway","charts","DataTable","columns","rows","forEach","cellIndex","parseTime","timeParse","Tip","$tip","setContent","setPosition","BaseChart","$chart","chartBaseClass","dataTable","timeFormatLocale","svg","globalSettings","formats","d3Formats","formatLocaleDefinition","timeFormatLocaleDefinition","d3TimeFormatLocaleDefinition","resize","baseSettings","draw","chartClass","onAfterDrawTicks","tickKey","tick","$tickText","numberFormat","percentFormat","currencyFormat","shortDateFormats","day","month","year","bottom","colors","Area","tip","drawingArea","getChartMargin","translateX","translateY","drawTicks","drawAxes","drawChart","drawTipTriggers","getX","xAxis","axisBottom","tickFormat","getXFormatter","ticks","yAxis","getY","axisLeft","getYFormatter","tickValues","getYTickValues","axisRight","showAxis","tickSizeOuter","gridlines","xLineAxis","tickSize","yLineAxis","line","datum","area","y0","y1","plots","enter","tips","chartMargin","xAxisTickInterval","node","getTotalLength","tipTriggerWidth","$content","$xValue","$yValue","content","yTicksMaxWidth","computedTickWidth","padded","xDomainMin","xDomainMax","xDomain","scaleTime","yDomain","getYMaxValue","scaleLinear","utils","getTimeFormatter","getNumberFormatter","maxValue","getDuration","secondsNum","chartSettings","dataScale","ColorInput","$colorContainer","$colorPreview","$colorInput","createColorInput","handleTextChange","setAttribute","aria-controls","updateColor","repeat","_browserSupportsColorInputs","doesBrowserSupportColorInputs","$elementIndexSourcesContainer","$sourcesContainer","$sourceSettingsContainer","$newHeadingBtn","$footerBtnContainer","$saveSpinner","$loadingSpinner","sourceSort","updateSourcesOnSave","availableTableAttributes","setContainer","buildModal","addSource","sourceData","$itemLabel","$itemInput","heading","Heading","updateItemLabel","Source","handleNewHeadingBtnClick","scrollContainerToElement","$pendingHeading","$lastSource","$indexSource","getIndexSource","isHeading","appendSource","$extraSources","nextAll","BaseSource","$settingsContainer","isSelected","deselect","createSettings","$settings","headerColHeading","defaultHeaderColHeading","tableAttributes","createTableColumnsField","firstKey","firstLabel","$titleColumnCheckbox","createTableColumnOption","$columnCheckboxes","selectedAttributes","createField","instructions","createCheckbox","disabled","$labelField","$labelInput","handleLabelInputChange","deleteHeading","table","$rows","getHelper","caboose","Y_AXIS","$helperRow","helperClass","$cells","DeleteUserModal","userId","$deleteActionRadios","$deleteSpinner","userSelect","_deleting","contentSummary","idParam","$deleteSubmitBtn","_submitBtnLabel","validateDeleteInputs","withContent","num","validates","handleSubmit","DraftEditor","$revisionBtn","$revisionLabel","$expandSiteStatusesBtn","$statusIcon","$editMetaBtn","metaHud","$nameTextInput","$saveMetaBtn","$siteStatusPane","$globalLightswitch","$siteLightswitches","$addlSiteField","siteIds","newSiteIds","lastSerializedValue","listeningForChanges","pauseLevel","saving","saveXhr","queue","submittingForm","duplicatedElements","openingPreview","preview","previewToken","createdProvisionalDraft","siteStatuses","canEditMultipleSites","previewTargets","enablePreview","$shareBtn","openShareLink","createShareMenu","revisionId","serializeForm","isProvisionalDraft","initForProvisionalDraft","draftId","isUnpublishedDraft","initForDraft","canUpdateSource","createDraft","autosaveDrafts","listenForChanges","showStatusHud","statusIcons","stopListeningForChanges","deleteDraftAction","hashedCpEditUrl","provisional","createEditMetaBtn","publishDraftAction","expandSiteStatuses","$enabledForSiteField","_getOtherSupportedSites","s","_createSiteStatusField","$globalField","createLightswitchField","_showField","originalEnabledValue","enabled","enabledForSite","originalSerializedStatus","_updateGlobalStatus","serializedStatuses","addlSiteIds","_createAddlSiteField","_updateSiteStatuses","$field","overflow","_removeField","allEnabled","allDisabled","turnOn","turnOff","turnIndeterminate","site","$lightswitch","addlSites","$addlSiteSelectContainer","createSelect","$addlSiteSelect","bodyHtml","_saveSuccessMessage","_saveFailMessage","spinners","getPreviewToken","sourceId","getTokenizedPreviewUrl","randoParam","isLive","siteToken","tokenParam","getPreview","Preview","openPreview","ensureIsDraftOrRevision","onlyIfChanged","removeActionParams","isPreviewActive","$editor","saveDraft","isActive","$spinners","$statusIcons","saveDraftAction","preparedData","prepareData","docTitle","draftName","revisionMenu","creator","timestamp","updatePreviewTargets","afterUpdate","checkMetaValues","oldId","swapDuplicatedElementIds","getDeltaNames","idsRE","pre","post","newTarget","nextInQueue","showMetaHud","createMetaHud","onMetaHudShow","$hudBody","$nameField","$nameInputContainer","saveMeta","onMetaHudHide","onMetaHudEscape","shakeMetaHud","handleFormSubmit","autosave","abort","hashedAddAnotherRedirectUrl","DynamicGenerator","EditableTable","baseName","biggestId","$addRowBtn","rowCount","hasMaxRows","hasMinRows","radioCheckboxes","log","copyDraggeeInputValuesToHelper","isVisible","initialize","initializeIfVisible","minRows","createRowObj","updateAddRowButton","canAddRow","canDeleteRow","deleteRow","$tr","onDeleteRow","staticRows","maxRows","rowId","rowIdPrefix","createRow","defaultValues","onAddRow","Row","focusOnPrevRow","tdIndex","blurTd","prevRow","$prevTr","$tds","focusOnNextRow","nextRow","$nextTr","importData","lines","textualColTypes","data-id","colId","$cell","col","scope","code","small","createDateInput","createLightswitch","default","createTimeInput","createTextInput","niceTexts","tds","$textareas","tr","td","$textarea","$checkbox","textareasByColId","onHeightChange","onTextareaHeightChange","radioMode","toggle","applyToggleCheckbox","autopopulate","HandleGenerator","allowNonAlphaStart","onTextareaFocus","onRadioCheckboxChange","checkbox","checkboxColId","neg","checkboxCol","colum","ignoreNextTextareaFocus","handleKeypress","charCode","isCtrlKeyPressed","numericKeyCodes","handlePaste","clipboardData","getData","validateValue","safeValue","tallestTextareaHeight","tdHeight","ElementActionTrigger","maxLevels","newChildUrl","$trigger","triggerEnabled","activate","updateTrigger","validateSelection","enableTrigger","disableTrigger","valid","batch","handleTriggerActivation","workers","Worker","$thumbs","$thumb","$scrollParent","scrollParent","addToQueue","invisibleThumbs","thumb","active","loadNext","scrollParentOffset","scrollParentHeight","thumbOffset","retryAll","loader","$img","ElevatedSessionForm","inputs","form","getInputPostVal","elevatedSessionManager","fetchingTimeout","stopImmediatePropagation","inputsChanged","$currentInput","requireElevatedSession","ElevatedSessionManager","passwordModal","$submitBtn","$errorPara","minSafeElevatedSessionTimeout","showPasswordModal","$passwordModal","focusPasswordInput","submitPassword","currentPassword","showPasswordError","EntryIndex","publishableSections","$newEntryBtnGroup","$newEntryBtn","section","defaultSectionHandle","selectedSection","_getSectionTriggerHref","_openCreateEntryModal","sectionId","newEntryBtnText","typeId","entryTypes","canPublish","sectionSourceKey","FieldLayoutDesigner","$tabContainer","$newTabBtn","$libraryToggle","$selectedLibrary","$fieldLibrary","$uiLibrary","$uiLibraryElements","$fieldSearch","$clearFieldSearchBtn","$fieldGroups","$fields","tabGrid","elementDrag","$workspace","$fieldSearchContainer","initTab","elementPlacementInputName","ElementDrag","customizableTabs","tabDrag","TabDrag","customizableUi","$libraryPicker","Listbox","$selectedOption","$matches","$group","$editBtn","data-action","onTabOptionSelect","initElement","Element","renameTab","removeTab","$prev","$next","$labelSpan","promptForTabName","getElementPlacementInputName","removeFieldByHandle","removeField","refreshCols","addTab","tabName","elementConfigInputName","designer","$placementInput","$configInput","config","isField","requirable","hasCustomWidth","hasSettings","settingsHtml","isRequired","createSettingsHud","initUi","updatePlacementInput","updateConfigInput","SlidePicker","step","valueLabel","pct","applyHudSettings","serializeArray","updateRequiredClass","console","required","BaseDrag","Drag","$insertion","showingInsertion","$caboose","findItems","createInsertion","createCaboose","removeCaboose","swapDraggeeWithInsertion","swapInsertionWithDraggee","setMidpoints","getClosestItem","_closestItem","_closestItemMouseDiff","_$item","_midpoint","_mouseDiff","getDist","checkForNewClosestItem","draggeeDisplay","visibility","FX_DURATION","helpers","_showDraggee","onDrag","draggingLibraryElement","draggingField","isDraggeeMandatory","isHoveringOverTab","hitTest","$fieldContainers","$libraryElement","targetPrefix","targetSelector","reverseTargetSelector","_$target","_$reverseTarget","getType","normalizeTargetSelector","findTargets","onToggleChange","nodeName","warn","getToggleVal","postVal","hideTarget","showTarget","_show","_currentHeight","$t","_targetHeight","totalCols","colGutterDrop","colPctWidth","possibleItemColspans","possibleItemPositionsByColspan","itemPositions","itemColspansByPosition","layouts","layout","itemHeights","leftPadding","_refreshingCols","_refreshColsAfterRefresh","_forceRefreshColsAfterRefresh","handleContainerHeightProxy","setItems","oldHeight","scrollHeight","gutter","itemIndex","tallestItemHeight","colIndex","itemHeight","remainder","itemHeightsByColspan","positionRight","positionLeft","minColspan","maxColspan","colspan","getItemWidthCss","minPosition","maxPosition","colHeights","createLayouts","layoutTotalCols","highestTotalCols","layoutHeights","shortestHeight","shortestLayouts","emptySpaces","emptySpace","colspans","getItemLeftPosCss","positions","isSimpleLayout","margin-bottom","positionItems","completeRefreshCols","onRefreshCols","getItemWidth","getItemWidthInPx","getItemLeftPosInPx","prevPositions","prevColspans","prevColHeights","prevEmptySpace","LayoutGenerator","endingCol","affectedColHeights","onItemResize","newHeight","tallestColHeightsByPosition","colHeightsForPosition","tallestColHeight","words","handleCasing","ImageUpload","initImageUpload","containerSelector","uploadAction","postParameters","fileInputSelector","uploadParamName","fileuploadfail","_onUploadError","initButtons","uploadButtonSelector","deleteButtonSelector","refreshImage","onAfterRefreshImage","$icon","previousSibling","nodeType","Node","TEXT_NODE","nodeValue","hudClass","indeterminate","dragger","dragStartMargin","outerContainer","X_AXIS","_onDrag","_onDragStop","muteEvent","changed","_onSettle","_getOffMargin","_onMouseDown","_onMouseUp","dragging","_getMargin","mouseDistX","selectedOptionIndex","UP_KEY","selectPrev","DOWN_KEY","selectNext","selectedClass","focusClass","LivePreview","$extraFields","$dragHandle","$previewContainer","$iframeContainer","$iframe","$fieldPlaceholder","previewUrl","basePostData","fields","lastPostData","updateIframeInterval","loading","checkAgain","dragStartEditorWidth","_slideInOnIframeLoad","_forceUpdateIframeProxy","_scrollX","_scrollY","_editorWidth","_editorWidthInPx","protocol","previewParams","forceUpdateIframe","extraFields","defaultEditorWidth","moveFieldsBack","editorWidthInPx","inPx","minEditorWidthInPx","exit","$editorHeader","$closeBtn","getIframeWidth","$clone","_getClone","updateIframe","slideIn","createToken","previewAction","updateWidths","$newClone","field","contentWindow","scrollLeft","X-Craft-Token","xhrFields","withCredentials","crossDomain","handleSuccess","handleError","write","onResponse","copyInputValues","$textInput","$showPasswordToggle","showingPassword","passwordInput","initInputFocusEvents","hidePassword","setCurrentInput","updateToggleLabel","showPassword","togglePassword","onKeyDown","ALT_KEY","onKeyUp","onInputChange","$previewHeader","$targetBtn","$targetMenu","$deviceTypeContainer","$orientationBtn","$deviceMask","$devicePreviewContainer","iframeLoaded","$tempInput","activeTarget","isDeviceUpdating","deviceAnimationTimeout","currentDeviceType","deviceOrientation","deviceWidth","deviceHeight","deviceMaskDimensions","phone","tablet","iframeHeight","_updateIframeProxy","Pro","switchTarget","aria-selected","deviceType","aria-hidden","previewTarget","resetDevicePreview","_devicePreviewIsActive","updateDevicePreview","_useIframeResizer","previewIframeResizerOptions","resetScroll","refresh","sameHost","frameborder","wrap","iFrameResize","checkOrigin","scrolling","onInit","iframe","switchDeviceType","newDeviceType","switchOrientation","hZoom","wZoom","previewHeight","previewWidth","maskHeight","maskWidth","rotationDeg","marginTop","marginLeft","iFrameResizer","removeListeners","defaultSettings","_onHide","instance","loadAsset","focusItem","empty","desiredHeight","desiredWidth","containerHeight","containerWidth","minGutter","_resizeContainer","previewHtml","max-width","$innerProgressBar","$progressBarStatus","_itemCount","_processedItemCount","_displaySteps","displaySteps","setProcessedItemCount","fadeTo","incrementItemCount","percentage","$modalContainerDiv","$prompt","$promptApplyToRemainingContainer","$promptApplyToRemainingCheckbox","$promptApplyToRemainingLabel","$pomptChoices","_prompts","_promptBatchCallback","_promptBatchReturnData","_promptBatchNum","_showNextPromptInBatch","remainingInBatch","_showPrompt","_handleBatchPromptSelection","applyToRemaining","choiceData","itemsToGo","_promptCallback","$promptMessage","$promptChoices","$promptButtons","$radioButton","_selectPromptChoice","fadeOut","_cancelPrompt","totalSteps","_min","_max","Number","isInteger","prevAll","triggerEvent","aria-valuenow","aria-valuetext","$activeButton","startPositionX","graduationsMin","graduationsMax","slideMin","slideMax","$overlay","$cursor","$graduations","$graduationsUl","_handleResize","_handleTapStart","_handleTapMove","_handleTapEnd","graduationsCalculatedWidth","valueToPosition","touch","startLeft","curX","positionToValue","scaleMin","scaleMax","SlugGenerator","allowUppercaseInSlug","limitAutoSlugsToAscii","XRegExp","matchChain","slugWordSeparator","Structure","structureDrag","$parents","initToggle","StructureDrag","initNewChildMenus","viewStateKey","$addBtns","onNewChildMenuClick","showMenu","getIndent","level","baseIndent","nestedIndent","addElement","$addBtn","$parentUl","_removeUl","structure","draggeeLevel","$helperLi","$targets","draggeeHeight","$level","cancelDrag","$lis","$closestTarget","closestTargetPos","closestTargetYDiff","closestTargetOffset","closestTargetHeight","targetOffset","targetHeight","targetYMidpoint","targetYDiff","$closestTargetLi","closestTargetLevel","$nextTargetLi","nextTargetLevel","hoveringBetweenRows","draggeeX","targetItemMouseDiffX","$parentLis","$closestParentLi","closestParentLiXDiff","closestParentLevel","$parentLi","parentLiX","parentLiXDiff","parentLevel","onMouseUp","$draggeeParent","moved","$closestSiblings","newLevel","setLevel","structureId","prevId","indent","$childLis","StructureTableSorter","tableView","_basePadding","_helperMargin","_$titleHelperCell","_titleHelperCellOuterWidth","_ancestors","_updateAncestorsFrame","_draggeeLevel","_draggeeLevelDelta","draggingLastElements","_loadingDraggeeLevelDelta","_targetLevel","_targetLevelBounds","_positionChanged","singleHelper","helperSpacingY","findDraggee","$nextRow","nextRowLevel","nextRowLevelDelta","_getAjaxBaseData","delta","drag","canInsertBefore","_getLevelBounds","canInsertAfter","_getAncestors","_setTargetLevelBounds","_updateIndent","onInsertionPointChange","_updateAncestorsBeforeRepaint","levelDiff","padding","_getLevelIndent","$prevRow","prevRowLevel","$spinnerRow","_createSpinnerRowAfter","onPositionChange","_expandElement","onReturnHelpersToDraggees","newDraggeeIndexes","oldDraggeeIndexes","$postDraggeeItems","_minLevel","_maxLevel","forcePositionChange","_mouseDist","realMouseX","mousedownX","_indentationDist","LEVEL_INDENT","_targetLevelMouseDiff","_magnetImpact","MAX_GIVE","_closestLevelMagnetIndent","targetLevel","_level","_$prevRow","cancelAnimationFrame","_updateAncestors","_$ancestor","_newAncestors","HELPER_MARGIN","$selectedSortHeader","structureTableSort","_totalVisiblePostStructureTableDraggee","_morePendingPostStructureTableDraggee","initTableHeaders","_collapseElement","selectedSortAttr","$tableHeaders","selectedSortDir","_handleSelectedSortHeaderClick","_handleUnselectedSortHeaderClick","_isStructureTableDraggingLastElements","positionedAfter","includeTableAttributesForSource","_updateTableAttributes","$nextNextRow","descendantOf","$nextRows","newSortDir","_handleSortHeaderClick","TagSelectInput","searchMenu","$addTagInput","_ignoreBlur","searchForTags","selectTag","$hoverOption","$nextOption","focusOption","$prevOption","killSearchMenu","excludeIds","tagGroupId","tags","exclude","exactMatch","Menu","attachToElement","data-site-id","targetSiteId","data-label","data-editable","$titleContainer","autocomplete","inputmode","maxlength","autofocus","getAutofocusValue","getDisabledValue","readonly","showCharsLeft","createCopyTextInput","buttonId","execCommand","createCopyTextField","createCopyTextPrompt","createTextarea","createTextareaField","$select","data-target-prefix","optgroup","$optgroup","selected","data-target","data-reverse-target","reverseToggle","for","createCheckboxField","createCheckboxSelect","allValue","allChecked","showAllOption","allLabel","createCheckboxSelectField","fieldset","data-value","data-indeterminate-value","aria-labelledby","labelId","containerId","$colorPreviewContainer","createColorField","o","getMonth","formattedValue","timezone","defaultDate","createDateField","createDateRangePicker","today","getFullYear","getDate","startDate","endDate","$allOption","firstDayOffset","getDay","firstDay","$flex","$startDate","$endDate","$dateInputs","dpDiv","setPositionRelativeToAnchor","startTime","endTime","foundOption","btnClasses","timepicker","timepickerOptions","getHours","getMinutes","getSeconds","createTimeField","warning","addErrorsToField","addErrorsToList","$errors","clearErrorsFromField","_rejectedFiles","_extensionList","_totalFileCounter","_validFileCounter","autoUpload","fileupload","onFileAdd","paramObject","getInProgress","validateExtension","_createExtensionList","process","done","pass","fileExtension","maxFileSize","originalFiles","processErrorMessages","kinds","humanFileSize","maxUploadSize","bytes","u","toFixed","allowedKind","fileKinds","extensions","pasteZone","sequentialUploads","Accept","UriFormatGenerator","uriFormat","suffix"],"mappings":"CAAA,SAAUA,GCKV,IAAAC,EAAA,8FACAC,OAAAC,cAAA,SAAAC,GACA,OAAAA,EAAAC,QAAAJ,EAAA,cAIAD,EAAAM,OAAAC,MACA,CACAC,UAAA,GAcAC,MAAA,SAAAC,EAAAC,GACA,IAAAX,EAAAY,QAAAF,GACA,KAAA,+DAGA,OAAAA,EAAAG,OAAA,CAAAJ,EAAAK,EAAAC,KACAN,EAAA,iBAAAE,EAAAG,EAAAH,GAAAA,EAAAG,EAAAC,IAAAD,EACAL,GACA,KAWAO,EAAA,SAAAC,EAAAC,EAAAC,GAQA,YANA,IAAAZ,MAAAa,aAAAH,SACA,IAAAV,MAAAa,aAAAH,GAAAC,KAEAA,EAAAX,MAAAa,aAAAH,GAAAC,IAGAC,EACAE,KAAAC,cAAAJ,EAAAC,GAGAD,GAGAI,cAAA,SAAAC,EAAAC,GACA,IAAAC,EACA,IAAA,KAAAA,EAAAJ,KAAAK,iBAAAH,IACA,KAAA,8BAEA,IAAA,IAAAR,EAAA,EAAAA,EAAAU,EAAAE,OAAAZ,IAAA,CACA,IAAAa,EAAAH,EAAAV,GACA,GAAA,iBAAAa,IACA,KAAAH,EAAAV,GAAAM,KAAAQ,YAAAD,EAAAJ,IACA,KAAA,8BAIA,OAAAC,EAAAK,KAAA,KAGAJ,iBAAA,SAAAH,GACA,IAAAQ,EAAAC,EAAAC,EAAA,EAEA,MAAAC,EAAA,IAAAX,GACA,IAAA,KAAAQ,EAAAC,EAAAE,EAAAC,QAAA,MACA,MAAA,CAAAZ,GAEA,IAAAE,EAAA,CAAAS,EAAAE,MAAA,EAAAJ,GAAAF,KAAA,KACA,OAAA,CACA,IAAAO,EAAAH,EAAAC,QAAA,IAAAH,EAAA,GACAM,EAAAJ,EAAAC,QAAA,IAAAH,EAAA,GAOA,IANA,IAAAK,IACAA,GAAA,IAEA,IAAAC,IACAA,GAAA,IAEA,IAAAD,IAAA,IAAAC,EACA,MAmBA,IAjBA,IAAAD,IACAA,EAAAH,EAAAP,QAEAW,EAAAD,GACAJ,IACAD,EAAAK,IAEAJ,IACAD,EAAAM,GAEA,IAAAL,IACAR,EAAAc,KAAAL,EAAAE,MAAAL,EAAA,EAAAC,GAAAF,KAAA,IAAAU,MAAA,IAAA,IACAT,EAAAC,EAAA,EACAP,EAAAc,KAAAL,EAAAE,MAAAL,EAAAM,GAAAP,KAAA,KACAC,EAAAM,GAGA,IAAAJ,KAAA,IAAAI,IAAA,IAAAC,GACA,MAGA,OAAA,IAAAL,GAIAR,GAGAI,YAAA,SAAAD,EAAAJ,GAGA,MAAAiB,EAAAlC,MAAAmC,KAAAd,EAAA,IACA,QAAA,IAAAJ,EAAAiB,GACA,MAAA,IAAAb,EAAAE,KAAA,QAEA,MAAAa,EAAAnB,EAAAiB,GACAG,OAAA,IAAAhB,EAAA,GAAArB,MAAAmC,KAAAd,EAAA,IAAA,OACA,OAAAgB,GACA,IAAA,SACA,IAAAC,OAAA,IAAAjB,EAAA,GAAArB,MAAAmC,KAAAd,EAAA,IAAA,KACA,GAAA,OAAAiB,GAAA,YAAAA,EACA,KAAA,gEAEA,IACAb,EADAc,EAAAvC,MAAAwC,aAAAJ,GAMA,OAJA,OAAAE,IAAA,KAAAb,GAAA,GAAAW,GAAAR,QAAA,QACAW,GAAA,IAAAH,EAAAK,OAAAhB,EAAA,IAGAc,EACA,IAAA,OACA,OAAAH,EACA,IAAA,SASA,QAAA,IAAAf,EAAA,GACA,OAAA,EAEA,IAAAqB,EAAA5B,KAAAK,iBAAAE,EAAA,IACA,MAAAsB,EAAAD,EAAAtB,OACA,IAAAT,GAAA,EACAiC,EAAA,EACA,IAAA,IAAApC,EAAA,EAAAA,EAAA,EAAAmC,EAAAnC,IAAA,CACA,GAAA,iBAAAkC,EAAAlC,IAAA,iBAAAkC,EAAAlC,EAAA,GACA,OAAA,EAEA,IAAAqC,EAAA7C,MAAAmC,KAAAO,EAAAlC,MACAsC,EAAA,IAAAD,GAEA,GAAA,IAAArC,GAAA,YAAAqC,EAAAE,UAAA,EAAA,GAAA,CACA,IAAAtB,EAAA,IAAAoB,EAAA/C,QAAA,YAAA,MAAA8B,QAAA,IAAA,GACA,IAAA,IAAAH,EACA,KAAA,8BAEAuB,SAAAhD,MAAAmC,KAAAW,EAAAjB,MAAA,EAAAJ,GAAAF,KAAA,MACAsB,EAAA7C,MAAAmC,KAAAW,EAAAjB,MAAAJ,EAAA,EAAAA,EAAA,EAAAqB,EAAA1B,QAAAG,KAAA,OAGA,IAAAZ,GACA,UAAAkC,GACA,MAAAA,EAAA,IAAAG,SAAAF,EAAAjB,MAAA,EAAA,EAAAiB,EAAA1B,QAAAG,KAAA,OAAAa,GACA,QAAAS,GAAAT,EAAAQ,GAAA,KAEAjC,GAAA,iBAAA+B,EAAAlC,GAAA,CAAAkC,EAAAlC,IAAAkC,EAAAlC,IAAAyC,IAAAC,GACAA,EAAApD,QAAA,IAAAsC,EAAAQ,IACArB,KAAA,MAGA,IAAA,IAAAZ,EACA,OAAAG,KAAAC,cAAAJ,EAAAM,GAEA,MACA,QACA,KAAA,mBAAAoB,uBAGA,OAAA,GAGAc,WAAA,SAAAC,GAKA,MAJA,iBAAAA,IACAA,EAAA,IAAAC,KAAAD,IAGA3D,EAAA6D,WAAAH,WAAAnD,MAAAuD,kBAAAC,WAAAJ,IASAZ,aAAA,SAAAD,EAAAD,GAOA,YANA,IAAAA,IACAA,EAAA,QAGAmB,GAAAC,aAAAC,0BAAArB,OAAAA,EAEAsB,CAAArB,IAQAsB,aAAA,SAAAzD,EAAA0D,EAAAC,GACA,MAAA,QAAA/D,MAAAgE,UACAD,EAAA,IAAA,KAAAD,EAAA,IAAA,IAAA,IAAA1D,EAEA,SAAA2D,EAAA,OAAA,KAAAD,EAAA,SAAA,IAAA1D,GASA6D,WAAA,SAAAC,GACA,OAAAzE,EAAA,UAAA0E,KAAAD,GAAArE,QASAuE,YAAA,SAAAF,GAEA,OAAAA,EAAApE,QAAA,2BAAA,SASAuE,QAAA,SAAAH,GACA,OAAAzE,EAAA,UAAAI,KAAAqE,GAAAC,QAUAG,mBAAA,SAAAJ,GACAA,EAAAK,mBAAAL,GAEA,IAAAM,EAAA,CACAC,IAAA,MACAC,IAAA,MACAC,IAAA,MACAC,IAAA,MACAC,IAAA,OAGA,IAAA,IAAAC,KAAAN,EAAA,CACA,IAAAO,EAAA,IAAAC,OAAA,KAAAF,EAAA,KACAZ,EAAAA,EAAApE,QAAAiF,EAAAP,EAAAM,IAGA,OAAAZ,GAQAe,gBAAA,SAAAC,GACA,IAAAC,EAAA1F,EAAAyF,GACAE,EAAAD,EAAAC,MAGA,QAAA,IAAAD,EAAA,GAAAE,kBAAA,CAEA,IAAAjE,EAAA,EAAAgE,EAAAhE,OACA+D,EAAA,GAAAE,kBAAA,EAAAjE,QAGA+D,EAAAC,IAAAA,IAUAE,cAAA,SAAAC,GACA,OAAAzE,KAAA0E,MAAAD,EAAAzF,QAAA,aAAA,KAAA,MASA2F,OAAA,SAAAC,EAAA9E,EAAA+E,GACA,iBAAAD,IACAA,EAAA,IAIA,IAAAE,EAAA,GAEA,GAAAnG,EAAAoG,cAAAjF,GAAA,CACA,IAAAkF,EAAA,GAEA,IAAA,IAAAC,KAAAnF,EACA,GAAAA,EAAAoF,eAAAD,GAAA,CAIA,IAAAE,EAAArF,EAAAmF,GAEA,MAAAA,EACAH,EAAAK,EACA,OAAAA,GAAA,KAAAA,GACAH,EAAA9D,KAAA+D,EAAA,IAAAE,GAIArF,EAAAkF,EAIAlF,EADAsF,QAAA7F,QAAAO,GACAA,EAAAW,KAAA,KAEAvB,MAAAmC,KAAAvB,EAAA,MAIA,IAAAuF,EAAAT,EAAA9D,QAAA,MACA,IAAAuE,IAEAP,IACAA,EAAAF,EAAAjD,OAAA0D,EAAA,IAEAT,EAAAA,EAAAjD,OAAA,EAAA0D,IAIA,IAcAC,EAdAC,EAAAX,EAAA9D,QAAA,KAOA,IANA,IAAAyE,IACAzF,EAAA8E,EAAAjD,OAAA4D,EAAA,IAAAzF,EAAA,IAAAA,EAAA,IACA8E,EAAAA,EAAAjD,OAAA,EAAA4D,KAIA,IAAAX,EAAAY,OAAA,QAAA,MAAAZ,EAAA,GACA,OAAAA,GAAA9E,EAAA,IAAAA,EAAA,KAAAgF,EAAA,IAAAA,EAAA,IAQA,GALAF,EAAA1F,MAAAmC,KAAAuD,EAAA,KAKAC,GAGA,GAFAS,EAAAT,EAEAD,GAAA1F,MAAAuG,UAAA,CAEA,IAAAC,EAAAJ,EAAAK,MAAA,IAAAzB,OAAA,OAAAhF,MAAAoE,YAAApE,MAAAuG,WAAA,WACAC,IACAJ,EAAAA,EAAAtG,QAAA0G,EAAA,GAAAxG,MAAAwF,MAAAgB,EAAA,GAAA,KAAA,IAAAd,GACAA,EAAA,UAIAU,EAAApG,MAAA2F,QAUA,IALA,KADAU,EAAAD,EAAAxE,QAAA,QAEAhB,EAAAwF,EAAA3D,OAAA4D,EAAA,IAAAzF,EAAA,IAAAA,EAAA,IACAwF,EAAAA,EAAA3D,OAAA,EAAA4D,KAGArG,MAAA0G,sBAAAhB,EACA,GAAA1F,MAAA2G,cAAA3G,MAAAuG,WAEA,IAAAH,EAAAE,OAAAtG,MAAA4G,cACAR,EAAApG,MAAAwF,MAAAY,EAAA,KAAA,IAAApG,MAAA4G,gBAEA,CAIA,GAAAhG,GAAAA,EAAA6B,OAAA,EAAAzC,MAAAuG,UAAAnF,OAAA,KAAApB,MAAAuG,UAAA,IAAA,CACA,IAAAM,EACAC,EAAAlG,EAAAgB,QAAA,MAEA,IAAAkF,GACAD,EAAAjG,EAAAmC,UAAA,EAAA+D,GACAlG,EAAAA,EAAA6B,OAAAqE,EAAA,KAEAD,EAAAjG,EAAA6B,OAAA,GACA7B,EAAA,MAMA8E,GAFAmB,EAAA7G,MAAAwF,MAAAqB,KAEAnB,EAAA,IAAAA,EAAA,IAIA9E,EAAAZ,MAAAuG,UAAA,IAAAb,GAAA9E,EAAA,IAAAA,EAAA,IACA8E,EAAA,KAgBA,OAZAA,IACAU,EAAApG,MAAAwF,MAAAY,EAAA,KAAA,IAAAV,GAGA9E,IACAwF,GAAA,IAAAxF,GAGAgF,IACAQ,GAAA,IAAAR,GAGAQ,GAQAW,SAAA,SAAArB,EAAA9E,GACA,OAAAE,KAAA2E,OAAAC,EAAA9E,EAAAZ,MAAAgH,YAQAC,WAAA,SAAAvB,EAAA9E,GACA,OAAAE,KAAA2E,OAAAC,EAAA9E,EAAAZ,MAAAkH,cAUAC,aAAA,SAAAzB,EAAA9E,GACA,OAAAZ,MAAAyF,OAAAC,EAAA9E,EAAAZ,MAAAoH,YAQAC,WAAA,SAAAjB,GACAkB,SAAAC,SAAAC,KAAA1G,KAAA2E,OAAAW,IAQAqB,aAAA,WACA,OAAAzH,MAAA0H,cACA,8BAAA1H,MAAA0H,cAAA,YAAA1H,MAAA2H,eAAA,MAEA,IAcAC,kBAAA,SAAAC,EAAAC,EAAAC,EAAAC,GAEA,mBAAAF,IACAE,EAAAD,EACAA,EAAAD,EACAA,EAAA,KAGAE,EAAAA,GAAA,IAEAC,aAAAD,EAAAC,YAAAxB,MAAA,cACA,iBAAAqB,IACAA,EAAAI,KAAAC,UAAAL,IAEAE,EAAAC,YAAA,mCAGA,IAAAG,EAAA3I,EAAA4I,KAAA5I,EAAAM,OAAA,CACAqG,IAAApG,MAAAmH,aAAAU,GACAxF,KAAA,OACAiG,SAAA,OACAC,QAAAzH,KAAA0H,iBACAV,KAAAA,EACAW,QAAAV,EACAW,MAAA,SAAAN,EAAAO,EAAAC,GAGA,IAAAR,EAAAS,kBAIA,IAAA7I,MAAA8I,GACA9I,MAAA8I,GAAAC,eAEAC,MAAAhJ,MAAAS,EAAA,MAAA,6BAGAsH,GACAA,EAAA,KAAAY,EAAAP,MAGAJ,IAOA,MAJA,mBAAAA,EAAAiB,MACAjB,EAAAiB,KAAAb,GAGAA,GAGAc,gBAAA,EACAC,WAAA,GAKAC,mBAAA,SAAAvB,EAAAC,EAAAC,EAAAC,GAEA,mBAAAF,IACAE,EAAAD,EACAA,EAAAD,EACAA,OAAAuB,GAGArJ,MAAAmJ,WAAAnH,KAAA,CAAA6F,EAAAC,EAAAC,EAAAC,IAEAhI,MAAAkJ,gBACAlJ,MAAAsJ,iCAIAA,8BAAA,WACAtJ,MAAAkJ,gBAAA,EAEA,IAAAjI,EAAAjB,MAAAmJ,WAAArF,QAEA9D,MAAA4H,kBAAA3G,EAAA,GAAAA,EAAA,IAAA,SAAA6G,EAAAa,EAAAP,GACAnH,EAAA,IAAA,mBAAAA,EAAA,IACAA,EAAA,GAAA6G,EAAAa,EAAAP,GAGApI,MAAAmJ,WAAA/H,OACApB,MAAAsJ,gCAEAtJ,MAAAkJ,gBAAA,IAEAjI,EAAA,KAGAuH,eAAA,WACA,IAAAD,EAAA,CACAgB,6BAAAC,OAAAC,KAAAzJ,MAAA0J,wBAAAnI,KAAA,KACAoI,wBAAAH,OAAAC,KAAAzJ,MAAA4J,mBAAArI,KAAA,MAOA,OAJAvB,MAAA2H,iBACAY,EAAA,gBAAAvI,MAAA2H,gBAGAY,GAWAsB,kBAAA,SAAAC,EAAAjC,EAAAG,GACA,OAAA,IAAA+B,QAAA,CAAAC,EAAAC,MACAjC,EAAAA,EAAAvI,EAAAM,OAAA,GAAAiI,GAAA,IACA8B,OAAAA,EACA9B,EAAA5B,IAAApG,MAAAmH,aAAAU,GACAG,EAAAO,QAAA9I,EAAAM,OAAA,CACAmK,mBAAA,kBACAlC,EAAAO,SAAA,GAAAzH,KAAA0H,kBACAR,EAAApH,OAAAnB,EAAAM,OAAA,GAAAiI,EAAApH,QAAA,GAAA,CAEAuJ,GAAA,IAAA9G,MAAA+G,YAEAC,MAAAC,QAAAtC,GAAAuC,KAAAP,GAAAQ,MAAAP,MAYAQ,eAAA,SAAAX,EAAAY,EAAA1C,GACA,OAAA,IAAA+B,QAAA,CAAAC,EAAAC,KAEA,IAAAU,GADA3C,EAAAA,EAAAvI,EAAAM,OAAA,GAAAiI,GAAA,IACA2C,aAAA,KAGA7J,KAAA8J,eAAAD,GAAAJ,KAAAM,IAEA7C,EAAA8B,OAAAA,EACA9B,EAAA8C,QAAA9K,MAAA+K,WACA/C,EAAA5B,IAAAsE,EACA1C,EAAAO,QAAA9I,EAAAM,OAAA8K,EAAA7C,EAAAO,SAAA,IACAP,EAAApH,OAAAnB,EAAAM,OAAAC,MAAAgL,WAAA,GAAAhD,EAAApH,QAAA,GAAA,CAEAuJ,GAAA,IAAA9G,MAAA+G,YAIAtJ,KAAAmK,cACAjD,EAAApH,OAAAsK,oBAAA,GAGAb,MAAAC,QAAAtC,GAAAuC,KAAAY,IAEArK,KAAAsK,mBAAAD,EAAA5C,QAAAoC,GAAAJ,KAAA,KAEAP,EAAAmB,EAAArD,QACA0C,MAAAP,KACAO,MAAAP,KACAO,MAAAP,MAIAoB,oBAAA,EACAJ,YAAA,KACAK,mBAAA,GAQAV,eAAA,SAAAD,GACA,OAAA,IAAAZ,QAAA,CAAAC,EAAAC,KAEAnJ,KAAAuK,mBACAvK,KAAAwK,mBAAAtJ,KAAA,CAAAgI,EAAAC,IAKAnJ,KAAAmK,YACAjB,EAAAlJ,KAAAmK,cAIAnK,KAAAuK,oBAAA,EACAvK,KAAA+I,kBAAA,OAAA,kBAAA,CACAc,YAAAA,IACAJ,KAAAgB,IAEAzK,KAAAuK,mBAKArB,EAAAuB,EAAAzD,MAJAmC,EAAAuB,KAKAhB,MAAAgB,IACA1K,KAAA2K,mBAAAxB,EAAAuB,SAKAJ,mBAAA,SAAA7C,EAAAoC,GACA,OAAA,IAAAZ,QAAA,CAAAC,EAAAC,KAEAnJ,KAAAmK,YACAjB,IAIAlJ,KAAA+I,kBAAA,OAAA,mCAAA,CACA/B,KAAA,CACAS,QAAAA,GAEAoC,YAAAA,IACAJ,KAAAgB,IAEA,GAAAzK,KAAAuK,mBAWA,IANAvK,KAAAmK,YAAAM,EAAAzD,KACAhH,KAAAuK,oBAAA,EAEArB,IAGAlJ,KAAAwK,mBAAAlK,QACAN,KAAAwK,mBAAAxH,QAAA,GAAAhD,KAAAmK,kBAXAhB,EAAAuB,KAaAhB,MAAAgB,IACA1K,KAAA2K,mBAAAxB,EAAAuB,QAKAC,mBAAA,SAAAxB,EAAAuB,GAGA,IAFA1K,KAAAuK,oBAAA,EACApB,EAAAuB,GACA1K,KAAAwK,mBAAAlK,QACAN,KAAAwK,mBAAAxH,QAAA,GAAA0H,IAOAE,sBAAA,WAKA,IAJA5K,KAAAmK,YAAA,KACAnK,KAAAuK,oBAAA,EAGAvK,KAAAwK,mBAAAlK,QACAN,KAAAwK,mBAAAxH,QAAA,MAYA6H,gBAAA,SAAA7B,EAAA1D,EAAAwF,GACA,OAAA,IAAA7B,QAAA,CAAAC,EAAAC,KAEA,IAAAK,EAAA,IAAAuB,eACAvB,EAAAxI,KAAAgI,EAAA1D,GAAA,GACA,iBAAAwF,GACAtB,EAAAwB,iBAAA,eAAA,mCACAF,EAAA1D,KAAAC,UAAAyD,IAEAtB,EAAAwB,iBAAA,eAAA,oDAEAxB,EAAAyB,aAAA,OAEAzB,EAAA0B,OAAA,KAEA,GAAA,MAAA1B,EAAA2B,OAAA,CAEA,IAAAC,EAAA5B,EAAA6B,kBAAA,uBACAC,EAAA,YAAAC,KAAAH,GACAI,EAAA,MAAAF,GAAAA,EAAA,GAAAA,EAAA,GAAA,WAGAnE,EAAAqC,EAAA6B,kBAAA,gBACAI,EAAA,IAAAC,KAAA,CAAAlC,EAAAiB,UAAA,CAAAlJ,KAAA4F,IACAwE,EAAAnF,SAAAoF,cAAA,KACAD,EAAAjF,KAAAmF,OAAAC,IAAAC,gBAAAN,GACAE,EAAAK,SAAAR,EACAhF,SAAAsE,KAAAmB,YAAAN,GACAA,EAAAO,QACA1F,SAAAsE,KAAAqB,YAAAR,GAEAzC,SAEAC,KAIAK,EAAArB,KAAA2C,MAUAsB,cAAA,SAAAhJ,GACA,GAAA,iBAAAA,EACA,OAAAA,EAIA,IADA,IAAA/D,EAAA+D,EAAAjC,MAAA,KACAzB,EAAA,EAAAA,EAAAL,EAAAiB,OAAAZ,IACAL,EAAAK,GAAAf,EAAA0C,KAAAhC,EAAAK,IAEA,OAAAL,GAWAgN,cAAA,SAAAC,EAAAC,EAAAC,GAEAA,EAAAC,MAAA,SAAAC,EAAAC,GACA,OAAAD,EAAApM,SAAAqM,EAAArM,OACA,EAEAoM,EAAApM,OAAAqM,EAAArM,OAAA,GAAA,KAUA,IANA,IAAAsM,EAAA5M,KAAA6M,yBAAAP,EAAAnL,MAAA,KAAAqL,GAAA,GAAA,GACAM,EAAA9M,KAAA6M,yBAAAN,EAAApL,MAAA,KAAAqL,GAAA,GAAA,GAGA1M,EAAAgN,EAAAC,SAEAC,EAAA,EAAAA,EAAAR,EAAAlM,OAAA0M,KACA9N,MAAA+N,QAAAT,EAAAQ,GAAA9N,MAAAgO,qBACA,iBAAAJ,EAAAN,EAAAQ,MAEA,iBAAAJ,EAAAJ,EAAAQ,KACA5F,KAAAC,UAAAuF,EAAAJ,EAAAQ,OAAA5F,KAAAC,UAAAyF,EAAAN,EAAAQ,SAGAlN,EAAAA,EAAAqN,OAAAL,EAAAN,EAAAQ,MACA9L,KAAA,wBAAAsL,EAAAQ,IAIA,OAAAlN,EAAAW,KAAA,MAGAoM,yBAAA,SAAA/M,EAAA0M,EAAAY,EAAAC,GACA,IAMAL,EAAAM,EANAC,EAAA,GAEAH,IACAG,EAAAR,SAAA,IAKAS,EAAA,IAAA,IAAApL,EAAA,EAAAA,EAAAtC,EAAAQ,OAAA8B,IAAA,CAEA,IAAA4K,EAAAR,EAAAlM,OAAA,EAAA0M,GAAA,EAAAA,IAEA,IADAM,EAAAG,mBAAA3N,EAAAsC,IAAAT,OAAA,EAAA6K,EAAAQ,GAAA1M,OAAA,MAEAkM,EAAAQ,GAAA,KACAM,IAAAd,EAAAQ,GAAA,IACA,MACA,IAAAO,EAAAf,EAAAQ,MACAO,EAAAf,EAAAQ,IAAA,IAEAO,EAAAf,EAAAQ,IAAA9L,KAAApB,EAAAsC,IACA,SAAAoL,EAIAJ,GACAG,EAAAR,SAAA7L,KAAApB,EAAAsC,IAIA,GAAAiL,EACA,IAAA,IAAApI,KAAA/F,MAAAwO,mBACAxO,MAAAwO,mBAAAxI,eAAAD,KACAsI,EAAAtI,GAAA,CAAAxB,mBAAAwB,GAAA,IAAAtG,EAAAyC,MAAAlC,MAAAwO,mBAAAzI,MAKA,OAAAsI,GASAI,gBAAA,SAAAtO,GACA,IACAK,EADAkO,EAAA,GAGA,IAAA,IAAAtO,KAAAD,EACA,GAAAA,EAAA6F,eAAA5F,GAAA,CAIA,IAEAqJ,EAFAxD,EAAA9F,EAAAC,GACAuO,EAAAvO,EAAAqG,MAAA,iBAGA,GAAAkI,EAAA,GAKA,IAHAlF,EAAAkF,EAAA,GAAAlI,MAAA,iBAGAjG,EAAA,EAAAA,EAAAiJ,EAAArI,OAAAZ,IACAiJ,EAAAjJ,GAAAiJ,EAAAjJ,GAAAuC,UAAA,EAAA0G,EAAAjJ,GAAAY,OAAA,QAGAqI,EAAA,GAGAA,EAAAmF,QAAAD,EAAA,IAEA,IAAAE,EAAAH,EAEA,IAAAlO,EAAA,EAAAA,EAAAiJ,EAAArI,OAAAZ,IACAA,EAAAiJ,EAAArI,OAAA,GACA,iBAAAyN,EAAApF,EAAAjJ,MAEAiJ,EAAAjJ,EAAA,IAAAwC,SAAAyG,EAAAjJ,EAAA,KAAAiJ,EAAAjJ,EAAA,GAGAqO,EAAApF,EAAAjJ,IAAA,GAFAqO,EAAApF,EAAAjJ,IAAA,IAMAqO,EAAAA,EAAApF,EAAAjJ,MAGAiJ,EAAAjJ,KACAiJ,EAAAjJ,GAAAqO,EAAAzN,QAGAyN,EAAApF,EAAAjJ,IAAAyF,GAKA,OAAAyI,GASAI,WAAA,SAAAhH,GACA,IAAAiH,EAAAtP,EAAA,UAAA,CACAuP,KAAA,CACAlF,OAAA,OACAjC,OAAA,GACAoH,iBAAA,WAIA,GAAA,iBAAAnH,EAGA,IAFA,IACAoH,EADAC,EAAArH,EAAA7F,MAAA,KAEAzB,EAAA,EAAAA,EAAA2O,EAAA/N,OAAAZ,IACA0O,EAAAC,EAAA3O,GAAAyB,MAAA,IAAA,GACAxC,EAAA,WAAA,CACA4C,KAAA,SACA0D,KAAAwI,mBAAAW,EAAA,IACAjJ,MAAAsI,mBAAAW,EAAA,IAAA,MACAE,SAAAL,GAIA,OAAAA,GAYAM,QAAA,SAAAC,EAAAC,EAAAC,GAEA,UAAAF,UAAAC,EACA,OAAA,EAGA,GAAA,iBAAAD,EAAA,CAEA,GAAAA,EAAAlO,SAAAmO,EAAAnO,OACA,OAAA,EAIA,GAAAkO,aAAAG,OAAAF,aAAAE,MACA,OAAA,EAIA,KAAAH,aAAAG,OACA,QAAA,IAAAD,IAAA,IAAAA,GACA,IAAAxP,MAAAqP,QAAArP,MAAA0P,cAAAJ,GAAA/B,OAAAvN,MAAA0P,cAAAH,GAAAhC,QACA,OAAA,OAGA,IAAAvN,MAAAqP,QAAArP,MAAA0P,cAAAJ,GAAAtP,MAAA0P,cAAAH,IACA,OAAA,EAMA,IAAA,IAAA/O,KAAA8O,EACA,GAAAA,EAAAtJ,eAAAxF,KAIAR,MAAAqP,QAAAC,EAAA9O,GAAA+O,EAAA/O,IACA,OAAA,EAKA,OAAA,EAEA,OAAA8O,IAAAC,GAUAG,cAAA,SAAAnP,GACA,IAAAkJ,EAAA,GAEA,IAAA,IAAArJ,KAAAG,EACAA,EAAAyF,eAAA5F,IAIAqJ,EAAAzH,KAAA5B,GAGA,OAAAqJ,GAWAkG,YAAA,SAAAhO,GACAuE,QAAA7F,QAAAsB,KACAA,EAAAA,EAAAM,SAKA,IAFA,IAAA2N,EAAA,GAEApP,EAAA,EAAAA,EAAAmB,EAAAP,OAAAZ,IACAoP,GAAA,KAAAjO,EAAAnB,GAGA,OAAAoP,GAUAC,MAAA,SAAA3L,EAAAvC,GACA,IAAAuC,EACA,OAAAA,OAEA,IAAAvC,IACAA,EAAA,eAEA,IAAAoD,EAAA,IAAAC,OAAA,KAAAhF,MAAA2P,YAAAhO,GAAA,MACA,OAAAuC,EAAApE,QAAAiF,EAAA,KAUAS,MAAA,SAAAtB,EAAAvC,GACA,IAAAuC,EACA,OAAAA,OAEA,IAAAvC,IACAA,EAAA,eAEA,IAAAoD,EAAA,IAAAC,OAAA,IAAAhF,MAAA2P,YAAAhO,GAAA,OACA,OAAAuC,EAAApE,QAAAiF,EAAA,KAUA5C,KAAA,SAAA+B,EAAAvC,GAGA,OAFAuC,EAAAlE,MAAA6P,MAAA3L,EAAAvC,GACAuC,EAAAlE,MAAAwF,MAAAtB,EAAAvC,IAWAmO,WAAA,SAAA5L,EAAAzB,GACA,OAAAyB,EAAAzB,OAAA,EAAAA,EAAArB,UAAAqB,GAUAsN,YAAA,SAAA5P,EAAA4H,GAGA,IAFA,IAAAiI,EAAA,GAEAxP,EAAA,EAAAA,EAAAL,EAAAiB,OAAAZ,IAAA,EAGA,mBAAAuH,EACAA,EAAA5H,EAAAK,GAAAA,GAEAL,EAAAK,KAIAwP,EAAAhO,KAAA7B,EAAAK,IAIA,OAAAwP,GAUAjC,QAAA,SAAAkC,EAAA9P,GAIA,OAHAV,EAAAoG,cAAA1F,KACAA,EAAAqJ,OAAA2F,OAAAhP,IAEAA,EAAA+P,SAAAD,IAUAE,gBAAA,SAAAF,EAAA9P,GACA,IAAAD,EAAAT,EAAAsO,QAAAkC,EAAA9P,GACA,OAAA,IAAAD,IACAC,EAAAiQ,OAAAlQ,EAAA,IACA,IAYAmQ,QAAA,SAAAlQ,GACA,OAAAA,EAAAiB,OAGAjB,EAAAA,EAAAiB,OAAA,GAFA,MAYAkP,eAAA,SAAApM,GACA,OAAAA,EAAAqM,OAAA,GAAAC,cAAAtM,EAAArC,MAAA,IASA4O,eAAA,SAAAvM,GACA,OAAAA,EAAAqM,OAAA,GAAAG,cAAAxM,EAAArC,MAAA,IAGA8O,SAAA,SAAAvK,GACA,IAAAuI,EAAAvI,EAAAK,MAAA,gFACA,OAAAkI,EAGA,CACAiC,OAAAjC,EAAA,GACAkC,KAAAlC,EAAA,IAAAA,EAAA,GAAA,IAAAA,EAAA,GAAA,IACAmC,SAAAnC,EAAA,GACAoC,KAAApC,EAAA,IAAA,KACAjJ,KAAAiJ,EAAA,IAAA,IACAqC,MAAArC,EAAA,IAAA,KACAsC,KAAAtC,EAAA,IAAA,MATA,IAaAuC,WAAA,SAAA9K,GACA,IAAA+K,EAAArQ,KAAA6P,SAAArJ,SAAAC,SAAAC,MACA,IAAA2J,EACA,OAAA,EAEA,IAAAC,EAAAtQ,KAAA6P,SAAAvK,GACA,QAAAgL,GAGAD,EAAAN,OAAAO,EAAAP,MAMAQ,2BAAA,SAAAC,EAAAC,QACA,IAAAA,IACAA,GAAA,GAGA,IAKAC,EAAAC,KAAAC,MAAAJ,EALA,QAMAA,GANA,OAQA,IAAAK,EAAAF,KAAAC,MAAAJ,EAPA,OAQAA,GARA,MAUA,IAGAM,EAHAC,EAAAJ,KAAAC,MAAAJ,EATA,MAUAA,GAVA,KAcAC,GACAK,EAAAH,KAAAC,MAAAJ,EAdA,IAeAA,GAfA,KAiBAM,EAAAH,KAAAK,MAAAR,EAjBA,IAkBAA,EAAA,GAGA,IAAAS,EAAA,GAsBA,OApBAP,GACAO,EAAA/P,KAAAwP,EAAA,KAAA,IAAAA,EAAAxR,MAAAS,EAAA,MAAA,QAAAT,MAAAS,EAAA,MAAA,WAGAkR,GACAI,EAAA/P,KAAA2P,EAAA,KAAA,IAAAA,EAAA3R,MAAAS,EAAA,MAAA,OAAAT,MAAAS,EAAA,MAAA,UAGAoR,GACAE,EAAA/P,KAAA6P,EAAA,KAAA,IAAAA,EAAA7R,MAAAS,EAAA,MAAA,QAAAT,MAAAS,EAAA,MAAA,YAGAmR,IAAAL,GAAAC,GAAAG,GAAAE,IACAE,EAAA/P,KAAA4P,EAAA,KAAA,IAAAA,EAAA5R,MAAAS,EAAA,MAAA,UAAAT,MAAAS,EAAA,MAAA,cAGA6Q,KAAAC,GAAAC,GAAAG,GAAAE,GAAAD,IACAG,EAAA/P,KAAAsP,EAAA,KAAA,IAAAA,EAAAtR,MAAAS,EAAA,MAAA,UAAAT,MAAAS,EAAA,MAAA,aAGAsR,EAAAxQ,KAAA,OAUAyQ,YAAA,SAAA9N,EAAA+N,GAEA/N,EAAAA,EAAAgO,UAAA,OAKA,IAHA,IACAC,EADAC,EAAA,GAGA5R,EAAA,EAAAA,EAAA0D,EAAA9C,OAAAZ,IACA2R,EAAAjO,EAAAqM,OAAA/P,GACA4R,GAAA,iBAAAH,GAAAjS,MAAAqS,cAAAF,IAAAF,GAAAjS,MAAAqS,cAAAF,GAAAA,EAGA,OAAAC,GAGAE,aAAA,SAAAlR,GAIA,IAFA,IAAAmR,EAAA,GAEA/R,EAAA,EAAAA,EAAAY,EAAAZ,IACA+R,GAFA,iEAEAhC,OAAAkB,KAAAC,MAAA,GAAAD,KAAAe,WAEA,OAAAD,GASAE,gBAAA,SAAAC,GAGA,IAFA,IAAAC,EAAAlT,EAAA6H,SAAAoF,cAAA,OAAAkG,SAAA,UAEApS,EAAA,EAAAA,EAAAkS,EAAAtR,OAAAZ,IAAA,CACA,IAAAqS,EAAApT,EAAA6H,SAAAoF,cAAA,OACAmG,EAAAzD,SAAAuD,GACAE,EAAAhT,KAAA6S,EAAAlS,IAGA,OAAAmS,GAGAG,eAAA,SAAAjT,GACA,GAAAA,EAAA,CAKA,IAAAkT,EAAAtT,EAAA,cAEA,GAAAsT,EAAA3R,OAAA,CAIA,IAHA,IACAoG,EADAwL,EAAA,GAGAxS,EAAA,EAAAA,EAAAuS,EAAA3R,OAAAZ,IACAgH,EAAAuL,EAAAE,GAAAzS,GAAAwO,KAAA,QAAAlP,QAAA,KAAA,SACAkT,EAAAhR,KAAAhC,MAAAoE,YAAAoD,IAGA,IAAA0L,EAAA,IAAAlO,OAAA,yBAAAgO,EAAAzR,KAAA,KAAA,mBAAA,KAEA1B,EAAAA,EAAAC,QAAAoT,EAAA,IAGAzT,EAAA,QAAA0T,OAAAtT,KAGAuT,eAAA,SAAAvT,GACA,GAAAA,EAAA,CAKA,IAAAwT,EAAA5T,EAAA,eAEA,GAAA4T,EAAAjS,OAAA,CAIA,IAHA,IACAkS,EADAC,EAAA,GAGA/S,EAAA,EAAAA,EAAA6S,EAAAjS,OAAAZ,IACA8S,EAAAD,EAAAJ,GAAAzS,GAAAwO,KAAA,OAAAlP,QAAA,KAAA,SACAyT,EAAAvR,KAAAhC,MAAAoE,YAAAkP,IAGA,IAAAJ,EAAA,IAAAlO,OAAA,0BAAAuO,EAAAhS,KAAA,KAAA,mBAAA,KAEA1B,EAAAA,EAAAC,QAAAoT,EAAA,IAGAhN,QAAAsN,KAAAL,OAAAtT,KAQA4T,eAAA,SAAAC,GACAjU,EAAA,QAAAiU,GAAAC,OACAlU,EAAA,QAAAiU,GAAAE,WACAnU,EAAA,mBAAAiU,GAAAG,iBACApU,EAAA,eAAAiU,GAAAI,cACArU,EAAA,eAAAiU,GAAAK,cACAtU,EAAA,YAAAiU,GAAAM,WACAvU,EAAA,cAAAiU,GAAAO,aACAxU,EAAA,WAAAiU,GAAAQ,UACAzU,EAAA,mBAAAiU,GAAAS,WAIA1U,EAAA,IAAAiU,GAAAU,MAAA,WACAtT,KAAAgQ,SAAA1P,QAAAN,KAAAgQ,WAAAvJ,SAAAuJ,eAAA,IAAArR,EAAAqB,MAAAkO,KAAA,WACAvP,EAAAqB,MAAAkO,KAAA,MAAA,YAAAA,KAAA,SAAA,cAKAqF,qBAAA,GACAC,6BAAA,GACAC,sBAAA,GAQAC,0BAAA,SAAAC,EAAAC,GACA,QAAA,IAAA5T,KAAAuT,qBAAAI,GACA,KAAA,4EAAAA,EAAA,KAGA3T,KAAAuT,qBAAAI,GAAAC,GASAC,kCAAA,SAAAF,EAAAC,GACA,QAAA,IAAA5T,KAAAwT,6BAAAG,GACA,KAAA,qFAAAA,EAAA,KAGA3T,KAAAwT,6BAAAG,GAAAC,GASAE,2BAAA,SAAAH,EAAAC,GACA,QAAA,IAAA5T,KAAAyT,sBAAAE,GACA,KAAA,6EAAAA,EAAA,KAGA3T,KAAAyT,sBAAAE,GAAAC,GAWAG,mBAAA,SAAAJ,EAAAf,EAAAoB,GASA,OAAA,SANA,IAAAhU,KAAAuT,qBAAAI,GACA3T,KAAAuT,qBAAAI,GAEAzU,MAAA+U,kBAGAN,EAAAf,EAAAoB,IASAE,2BAAA,SAAAP,EAAAK,GASA,OAAA,SANA,IAAAhU,KAAAwT,6BAAAG,GACA3T,KAAAwT,6BAAAG,GAEAzU,MAAAiV,0BAGAR,EAAAK,IAUAI,oBAAA,SAAAT,EAAAU,EAAAL,GAqBA,YAnBA,IAAAA,GAAArV,EAAAoG,cAAAsP,IAEAL,EAAAK,EACAA,EAAA,MACA,iBAAAL,IACAA,EAAA,IAGAA,EAAAL,cACAK,EAAAL,YAAAA,GAUA,SANA,IAAA3T,KAAAyT,sBAAAE,GACA3T,KAAAyT,sBAAAE,GAEAzU,MAAAoV,mBAGAD,EAAAL,IASAO,gBAAA,SAAAjV,EAAAkV,GAGA,OAFAlV,EAAA,SAAAJ,MAAAuV,UAAA,IAAAnV,EAEA,oBAAAoV,mBAAA,IAAAA,aAAApV,GACA8H,KAAAuN,MAAAD,aAAApV,IAEAkV,GAUAI,gBAAA,SAAAtV,EAAA6F,GACA,GAAA,oBAAAuP,aAAA,CACApV,EAAA,SAAAJ,MAAAuV,UAAA,IAAAnV,EAKA,IACAoV,aAAApV,GAAA8H,KAAAC,UAAAlC,GACA,MAAAuF,OASAmK,mBAAA,SAAAvV,GACA,oBAAAoV,cACAA,aAAAI,WAAA,SAAA5V,MAAAuV,aAAAnV,MAQAyV,UAAA,SAAA9P,GAEA,OAAAuB,SAAAwO,OAAAhW,QAAA,IAAAkF,OAAA,yBAAAhF,MAAAuV,aAAAxP,gCAAA,OAiBAgQ,UAAA,SAAAhQ,EAAAE,EAAA+B,GACAA,EAAAvI,EAAAM,OAAA,GAAAe,KAAAkV,qBAAAhO,GACA,IAAA8N,EAAA,SAAA9V,MAAAuV,aAAAxP,KAAAxB,mBAAA0B,KACA+B,EAAAtC,OACAoQ,GAAA,SAAA9N,EAAAtC,MAEAsC,EAAAiO,SACAH,GAAA,WAAA9N,EAAAiO,QAEAjO,EAAAkO,OACAJ,GAAA,uBAAA9N,EAAAkO,OACAlO,EAAAmO,UACAL,GAAA,YAAA9N,EAAAmO,QAAAC,eAEApO,EAAAqO,SACAP,GAAA,WAEAxO,SAAAwO,OAAAA,GAOAQ,aAAA,SAAAvQ,GACAjF,KAAAiV,UAAAhQ,EAAA,GAAA,IAAA1C,KAAA,yBASAkT,eAAA,SAAApB,GACA,IAAAqB,EAAA/W,EAAA0V,GAMA,OAJAqB,EAAAC,SAAA,aACAD,EAAAA,EAAAE,KAAA,mBAGA,CACAC,GAAAH,EAAA1O,KAAA,MACA8O,OAAAJ,EAAA1O,KAAA,WACA+O,MAAAL,EAAA1O,KAAA,SACAmE,OAAAuK,EAAA1O,KAAA,UACA1B,IAAAoQ,EAAA1O,KAAA,OACAgP,SAAAN,EAAAC,SAAA,YACAD,SAAAA,IAUAO,eAAA,SAAA5B,EAAA6B,GACA,IAAAR,EAAA/W,EAAA0V,GAMA,GAJA,UAAA6B,GAAA,UAAAA,IACAA,EAAA,UAGAR,EAAAC,SAAAO,GAAA,CAIA,IAAAC,EAAA,UAAAD,EAAA,QAAA,QAMA,GAJAR,EACA5D,SAAAoE,GACAE,YAAAD,GAEAT,EAAAC,SAAA,YAAA,CACA,IAAAU,EAAAX,EAAAE,KAAA,yBAEAU,EAAA3X,EAAA,SAAA,CACA4X,OAFA,UAAAL,EAAA,KAAA,OAEA,KACAM,OAAAH,EAAAnI,KAAA,WAAAmI,EAAAnI,KAAA,mBAGAmI,EAAAI,YAAAH,GAEAI,YAAA,CACAC,SAAA,CAAAL,EAAA,SAgBAM,WAAA,SAAA3I,EAAA/G,GAKA,QAJA,IAAAA,IACAA,EAAA,KAGAA,EAAA2P,SAAAA,QAAA3P,EAAA2P,SAAA,CAsBA,GAlBA3P,EAAAH,QACApI,EAAA,WAAA,CACA4C,KAAA,SACA0D,KAAA,SACAX,IAAA4C,EAAAH,SAEAuH,SAAAL,GAGA/G,EAAA4P,UACAnY,EAAA,WAAA,CACA4C,KAAA,SACA0D,KAAA,WACAX,IAAA4C,EAAA4P,WAEAxI,SAAAL,GAGA/G,EAAApH,OACA,IAAA,IAAAmF,KAAAiC,EAAApH,OAAA,CACA,IAAAqF,EAAA+B,EAAApH,OAAAmF,GACAtG,EAAA,WAAA,CACA4C,KAAA,SACA0D,KAAAA,EACAX,IAAAa,IAEAmJ,SAAAL,GAIA/G,EAAA6P,cACA/W,KAAA4U,gBAAA,UAAA/I,OAAAmL,SAGA/I,EAAAgJ,QAAAtY,EAAAM,OAAA,CAAAsC,KAAA,UAAA2F,EAAAF,WAQArI,EAAAM,OAAAN,EAAAuY,GACA,CACAC,YAAA,SAAAxW,EAAAyW,EAAAC,EAAAC,GACA,MAAA,QAAApY,MAAAqY,YACAvX,KAAAwX,SAAA,CAAAC,KAAA9W,GAAAyW,EAAAC,EAAAC,GAEAtX,KAAAwX,SAAA,CAAAE,MAAA/W,GAAAyW,EAAAC,EAAAC,IAIAK,aAAA,SAAAhX,EAAAyW,EAAAC,EAAAC,GACA,MAAA,QAAApY,MAAAqY,YACAvX,KAAAwX,SAAA,CAAAE,MAAA/W,GAAAyW,EAAAC,EAAAC,GAEAtX,KAAAwX,SAAA,CAAAC,KAAA9W,GAAAyW,EAAAC,EAAAC,IAOAM,QAAA,WACA,OAAA5X,KAAAsT,MAAA,WACA,IAAAuE,EAAAlZ,EAAAqB,MACA6X,EAAA/F,SAAA,YAEA+F,EAAA7Q,KAAA,gBACA6Q,EAAAC,WAAA,gBAQAC,OAAA,WACA,OAAA/X,KAAAsT,MAAA,WACA,IAAAuE,EAAAlZ,EAAAqB,MACA6X,EAAAzB,YAAA,YAEAyB,EAAA7Q,KAAA,gBACA6Q,EAAA3J,KAAA,WAAA,SAQA2E,KAAA,WACA,OAAA7S,KAAAsT,MAAA,WACA,IAAAV,EAAAjU,EAAAqB,MACAgU,EAAA,GAEApB,EAAA5L,KAAA,mBACAgN,EAAAgE,aAAApF,EAAA5L,KAAA,kBAEA4L,EAAA5L,KAAA,UACAgN,EAAAiE,KAAA/V,SAAA0Q,EAAA5L,KAAA,UAEA4L,EAAA5L,KAAA,cACAgN,EAAAkE,QAAAhW,SAAA0Q,EAAA5L,KAAA,cAEA4L,EAAA5L,KAAA,mBACAgN,EAAAmE,YAAAjW,SAAA0Q,EAAA5L,KAAA,mBAEA4L,EAAA5L,KAAA,UACAgN,EAAAoE,KAAAxF,EAAA5L,KAAA,SAEA4L,EAAA5L,KAAA,eACAgN,EAAAqE,SAAAzF,EAAA5L,KAAA,cAEA4L,EAAA5L,KAAA,eACAgN,EAAAsE,SAAA1F,EAAA5L,KAAA,cAEA4L,EAAA5L,KAAA,kBACAgN,EAAAuE,aAAA3F,EAAA5L,KAAA,iBAGA,IAAA9H,MAAAsZ,KAAAxY,KAAAgU,OAIAlB,SAAA,WACA,OAAA9S,KAAAsT,MAAA,WACA,IAAApU,MAAAuZ,SAAAzY,UAOA+S,eAAA,WACA,OAAA/S,KAAAsT,MAAA,WACA3U,EAAAqI,KAAAhH,KAAA,mBACA,IAAAoF,QAAAsT,eAAA1Y,UAQAgT,YAAA,WACA,OAAAhT,KAAAsT,MAAA,WACA3U,EAAAqI,KAAAhH,KAAA,gBACA,IAAAd,MAAAyZ,YAAA3Y,UAKAiT,YAAA,SAAAe,EAAA4E,EAAAC,GAEA,MAAA,aAAA7E,GACA,iBAAA4E,GACA5E,EAAA,IACA4E,GAAAC,EAEA7E,EAAA4E,EAGA5Y,KAAAsT,MAAA,WACA,IAAA7T,EAAAd,EAAAqI,KAAAhH,KAAA,eACAP,GACAA,EAAAqZ,YAAA9E,QAIArV,EAAAoG,cAAAiP,KACAA,EAAA,IAGAhU,KAAAsT,MAAA,WACA,IAAAyF,EAAApa,EAAAM,OAAA,GAAA+U,GAEA5O,QAAA4T,QAAAhZ,KAAA,gBACA+Y,EAAA5T,MAAAxG,EAAAqB,MAAAkO,KAAA,eAGA9I,QAAA4T,QAAAhZ,KAAA,8BACA+Y,EAAAE,mBAAAta,EAAAqB,MAAAkO,KAAA,6BAGAvP,EAAAqI,KAAAhH,KAAA,gBACA,IAAAd,MAAAga,YAAAlZ,KAAA+Y,QAMA7F,SAAA,WACA,OAAAlT,KAAAsT,MAAA,WACA3U,EAAAqI,KAAAhH,KAAA,aACA,IAAAoF,QAAA+T,SAAAnZ,UAKAmT,WAAA,WAEA,OAAAnT,KAAAoZ,GAAA,SAAA,SAAAC,GACA,IAAAC,EAAA3a,EAAA0a,EAAAE,eACAzZ,EAAAwZ,EAAAtS,KAAA,WAAA,GACAsS,EAAAtS,KAAA,WACAlH,EAAAwZ,EAAAtS,KAAA,UAAAsS,EAAAtS,KAAA,UAGA,IAAAwS,EAAAF,EAAAtS,KAAA,QAAAsS,EAAAtS,KAAA,QAAAwS,QAAAF,EACArL,EAAAuL,EAAAtL,KAAA,aAAAvP,EAAA,IAAA6a,EAAAtL,KAAA,cAAAsL,EAAAC,QAAA,QAEAva,MAAA0X,WAAA3I,EAAA,CACA4I,QAAAyC,EAAAtS,KAAA,WACAD,OAAAuS,EAAAtS,KAAA,UACA8P,SAAAwC,EAAAtS,KAAA,YACAlH,OAAAA,EACAkH,KAAA,CACA0S,cAAAJ,SAMAlG,QAAA,WACA,OAAApT,KAAAsT,MAAA,WACA,IAAAgG,EAAA3a,EAAAqB,MAEA,IAAAsZ,EAAAtS,KAAA,YAAAsS,EAAAK,OAAAhE,SAAA,QAAA,CACA,IAAA3B,EAAA,GAEAsF,EAAAtS,KAAA,iBACAgN,EAAA4F,WAAAN,EAAAtS,KAAA,gBAGA,IAAA5B,QAAAyU,QAAAP,EAAAtF,QAKAX,SAAA,WACA,OAAArT,KAAAsT,MAAA,WACA,IAAAwG,EAAAnb,EAAAqB,MACA+Z,EAAAD,EAAAlE,KAAA,mCACAoE,EAAA,KACA,IAAAC,GAAA,EACA,IAAA,IAAAva,EAAA,EAAAA,EAAAqa,EAAAzZ,OAAAZ,IACA,GAAAqa,EAAA5H,GAAAzS,GAAA4E,MAAA,CACA2V,GAAA,EACA,MAGA,GAAAA,GACA,IAAAH,EAAAI,SAAA,cAAA5Z,OAAA,CACA,IAAAgZ,EAAA3a,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,YACAC,MAAAlb,MAAAS,EAAA,MAAA,SACA0a,aAAAnb,MAAAS,EAAA,MAAA,WAEA2O,SAAAwL,GACAV,GAAA,QAAA,KACA,IAAA,IAAA1Z,EAAA,EAAAA,EAAAqa,EAAAzZ,OAAAZ,IACAqa,EAAA5H,GAAAzS,GAAA4E,IAAA,IAEAgV,EAAAgB,SACAP,EAAAQ,QAAAC,gBAIAV,EAAAI,SAAA,cAAAI,UAGAP,EAAAX,GAAA,SAAAY,GACAA,UAMA5U,QAAA+T,SAAAsB,cAAAC,GACAxb,MAAAS,EAAA,MAAA,wEAAA,CACAkB,MAAA6Z,IAIAtV,QAAAuV,KAAAC,OAAA,WACA1b,MAAAyT,oBCnhEAzT,MAAAoV,kBAAAlP,QAAAyV,KAAA5b,OAAA,CACAyW,SAAA,KACAoF,UAAA,KACAhF,OAAA,KACAtJ,WAAA,KACAuO,YAAA,KAEA9M,MAAA,KACA+M,iBAAA,KACAC,WAAA,KACAC,SAAA,KACAC,SAAA,KAEAC,YAAA,KACAC,aAAA,KAEAC,IAAA,KAEAC,KAAA,SAAAlH,EAAAL,QAEA,IAAAA,GAAArV,EAAAoG,cAAAsP,KAEAL,EAAAK,EACAA,EAAA,MAGArU,KAAA0V,SAAA/W,EAAA0V,GACArU,KAAA8Y,YAAA9E,EAAA9U,MAAAoV,kBAAAkH,UAEAxb,KAAAyb,WAGAC,oBAAA,SAAAzW,EAAAE,GACAnF,KAAAgU,SAAA2H,aACA3b,KAAAgU,SAAA2H,WAAA,IAGA,OAAAxW,SACAnF,KAAAgU,SAAA2H,WAAA1W,GAEAjF,KAAAgU,SAAA2H,WAAA1W,GAAAE,GAIAyW,YAAA,WACA,IAAA5U,EAAArI,EAAAM,OAAA,GAAAe,KAAAgU,SAAAlU,QA0BA,OAxBAE,KAAAgU,SAAA8B,OACA9O,EAAA8O,OAAA9V,KAAAgU,SAAA8B,OACA9V,KAAA0V,UAAA1V,KAAA0V,SAAA1O,KAAA,aACAA,EAAA8O,OAAA9V,KAAA0V,SAAA1O,KAAA,YAGAhH,KAAAgU,SAAA8G,UACA9T,EAAA8T,UAAA9a,KAAAgU,SAAA8G,UACA9a,KAAA0V,UAAA1V,KAAA0V,SAAA1O,KAAA,QACAA,EAAA8T,UAAA9a,KAAA0V,SAAA1O,KAAA,OAGAhH,KAAAgU,SAAAL,cACA3M,EAAA2M,YAAA3T,KAAAgU,SAAAL,aAGA3T,KAAAgU,SAAA2H,aACA3U,EAAA2U,WAAA3b,KAAAgU,SAAA2H,YAGA3b,KAAAgU,SAAA6H,cACA7U,EAAA6U,YAAA,GAGA7U,GAGAyU,QAAA,WACAzb,KAAA8b,iBACA,IAAA9U,EAAAhH,KAAA4b,cACA5U,EAAA+U,aAAA7c,MAAA8c,aAAAhc,KAAAgU,SAAAiI,iBACA/c,MAAA4H,kBAAA,2BAAAE,EAAAhH,KAAAkc,QAAAC,KAAAnc,QAGAkc,QAAA,SAAAzR,EAAA5C,GAGA,GAFA7H,KAAAoc,eAEA,YAAAvU,EAAA,CACA,IAAAwU,EAAA1d,IAEA,GAAA8L,EAAA6R,MAAA,CACA,IAAAC,EAAA5d,EAAA,6BAEA,GAAA,IAAA8L,EAAA6R,MAAAhc,OACA3B,EAAA,QAAA,CAAA0E,KAAAoH,EAAA6R,MAAA,GAAArX,OAAAqJ,SAAAiO,OACA,CACA,IAAAC,EAAA7d,EAAA,yBAAA2P,SAAAiO,GAEAvc,KAAAob,YAAAzc,EAAA,aAAA2P,SAAAkO,GACAxc,KAAAqb,aAAA1c,EAAA,iCAAA2P,SAAAiO,GAEA,IAAA,IAAA7c,EAAA,EAAAA,EAAA+K,EAAA6R,MAAAhc,OAAAZ,IAAA,CACA,IAAA+c,EAAAhS,EAAA6R,MAAA5c,GACAf,EAAA,kBAAA8d,EAAA5G,GAAA,KAAA4G,EAAA5G,IAAApL,EAAAqL,OAAA,uBAAA,IAAA,IAAA2G,EAAAxX,KAAA,aAAAqJ,SAAAtO,KAAAob,aAGApb,KAAA0c,YAAA1c,KAAAob,YAAA,SAAA,cAGAiB,EAAAA,EAAAM,IAAAJ,GAGAvc,KAAAiO,MAAAtP,EAAA,UACAqB,KAAAgb,iBAAArc,EAAA,yBAAA2P,SAAAtO,KAAAiO,OAEAjO,KAAA4c,WAAAnS,GAAA,GAEAzK,KAAA6c,aAAA7c,KAAAiO,OAEA,IAAA6O,EAAAne,EAAA,6BAAA2P,SAAAtO,KAAAiO,OACA8O,EAAApe,EAAA,gCAAA2P,SAAAwO,GAeA,GAdA9c,KAAAib,WAAAtc,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,MACA9W,KAAAnE,MAAAS,EAAA,MAAA,YACA2O,SAAAyO,GACA/c,KAAAkb,SAAAvc,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,aACA9W,KAAAnE,MAAAS,EAAA,MAAA,UACA2O,SAAAyO,GACA/c,KAAAmb,SAAAxc,EAAA,iCAAA2P,SAAAyO,GAEAV,EAAAA,EAAAM,IAAA3c,KAAAiO,OAEAjO,KAAAsb,IAyBAtb,KAAAsb,IAAA0B,WAAAX,GACArc,KAAAsb,IAAA2B,4BA1BA,CACA,IAAAC,EAAAld,KAAAgU,SAAAkJ,YAAAld,KAAA0V,SAEA1V,KAAAsb,IAAA,IAAAlW,QAAA+X,IAAAD,EAAAb,EAAA,CACAe,UAAA,qBACAC,gBAAA,EACAC,WAAA,EACAC,kBAAA,EACAC,OAAAxd,KAAAyd,UAAAtB,KAAAnc,MACA0d,OAAA1d,KAAA2d,UAAAxB,KAAAnc,MACA4d,SAAA5d,KAAA6d,YAAA1B,KAAAnc,QAGAoF,QAAA0Y,gBAAAC,iBAAA3Y,QAAA4Y,QAAAhe,KAAAie,cAAA9B,KAAAnc,OACAA,KAAAsb,IAAAoB,YAAA1c,KAAAsb,IAAA4C,OAAA,QAAAle,KAAAie,cAAA9B,KAAAnc,OAEAA,KAAAsb,IAAA6C,KAAAnX,KAAA,gBAAAhH,MAGAA,KAAAsb,IAAA8C,MAAAlQ,KAAA,aAAA,IAEAlO,KAAAsb,IAAAlC,GAAA,OAAA,YACApZ,KAAAsb,MAQAe,EAAAzG,KAAA,eAAAqB,QAAA,SAEAjX,KAAA0c,YAAA1c,KAAAib,WAAA,SAAA,WACAjb,KAAAsb,IAAA+C,YAKAC,WAAA,WACA,IAAAte,KAAAue,WAAA1H,QAAA3X,MAAAS,EAAA,MAAA,sFAAA,CAKA,IAAA6e,EAAAxe,KAAAob,YAAA9W,MAEAka,GAAAxe,KAAA8V,SAIA9V,KAAAqb,aAAAjF,YAAA,UAEApW,KAAAye,WAAA,CAAA3I,OAAA0I,GAAA3W,IACA7H,KAAAqb,aAAAvJ,SAAA,UACA,YAAAjK,GAEA7H,KAAAob,YAAA9W,IAAAtE,KAAA8V,gBAhBA9V,KAAAob,YAAA9W,IAAAtE,KAAA8V,SAqBA2I,WAAA,SAAAzX,EAAAC,GACAD,EAAArI,EAAAM,OAAAe,KAAA4b,cAAA5U,GAEA9H,MAAA4H,kBAAA,2BAAAE,EAAA,CAAAyD,EAAA5C,KACA,YAAAA,GACA7H,KAAA4c,WAAAnS,GAAA,GAGAxD,GACAA,EAAAY,MAKA+U,WAAA,SAAAnS,EAAAiU,GACA1e,KAAA8V,OAAArL,EAAAqL,OACA9V,KAAAgb,iBAAAjc,KAAA0L,EAAA1L,OAEA,IAAA2f,IACA1e,KAAAwM,WAAA/B,EAAA+B,YAIA,IAAAmS,EAAA3e,KAAAgb,iBAAApF,KAAA,oCAEA,IAAA,IAAAlW,EAAA,EAAAA,EAAAif,EAAAre,OAAAZ,IAAA,CACA,IAAAkf,EAAAD,EAAAxM,GAAAzS,GACAmf,EAAAD,EAAAE,SAAA,YAAA5E,SAAA,SACAvb,EAAA,UAAA,CACAwb,MAAA,OACApb,KAAA6f,EAAA1E,WAAAnb,SACAuP,SAAAuQ,GACAD,EAAAtE,SAGAlV,QAAA2Z,sBAAA,KACA7f,MAAA8S,eAAAvH,EAAAuU,UACA9f,MAAAoT,eAAA7H,EAAAwU,UACA/f,MAAAyT,eAAA3S,KAAAgb,kBAEA0D,IACA1e,KAAA+a,YAAA/a,KAAAsb,IAAA8C,MAAAc,gBAKArB,YAAA,WACA,IAAAsB,EAAAnf,KAAAgU,SAAAmL,WAEA,GAAAxgB,EAAAY,QAAA4f,GACA,IAAA,IAAAzf,EAAA,EAAAA,EAAAyf,EAAA7e,OAAAZ,IACA,GAAAf,EAAAygB,WAAAD,EAAAzf,MAAAyf,EAAAzf,GAAA2f,OACA,OAAA,EAKArf,KAAAmb,SAAA/E,YAAA,UAEA,IAAApP,EAAArI,EAAAyC,MAAApB,KAAA4b,eAAA,IAAA5b,KAAAsb,IAAA8C,MAAAc,YACAlY,EAAA9H,MAAAmN,cAAArM,KAAA+a,YAAA/T,EAAAhH,KAAAwM,YAEAtN,MAAA4H,kBAAA,wBAAAE,EAAA,CAAAyD,EAAA5C,KAGA,GAFA7H,KAAAmb,SAAArJ,SAAA,UAEA,YAAAjK,EACA,GAAA4C,EAAA9C,QAAA,CACA,GAAA3H,KAAA0V,UAAA1V,KAAA8V,QAAA9V,KAAA0V,SAAA1O,KAAA,WAAA,CAEA,IAAAsY,EAAAtf,KAAA0V,SAAAE,KAAA,UACA2J,EAAAD,EAAA1J,KAAA,KAEA2J,EAAAjf,QAAAmK,EAAA+U,WACAD,EAAArR,KAAA,OAAAzD,EAAA+U,WACAD,EAAAlc,KAAAoH,EAAAgV,WAEAH,EAAAjc,KAAAoH,EAAAgV,UAIAzf,KAAAgU,SAAAL,aAAAzU,MAAAwgB,iBAAA1f,KAAAgU,SAAAL,cACAzU,MAAA8I,GAAA2X,cAAAzgB,MAAAS,EAAA,MAAA,gBAAA,CACA4B,KAAArC,MAAAwgB,iBAAA1f,KAAAgU,SAAAL,aAAA,MAIA3T,KAAA4f,WACA5f,KAAA6f,cAAApV,QAEAzK,KAAA4c,WAAAnS,GAAA,GACArF,QAAA0a,MAAA9f,KAAAsb,IAAA6C,SAMAI,QAAA,WACA,OAAAve,KAAAsb,IAAA8C,MAAAc,cAAAlf,KAAA+a,aAGAkD,cAAA,SAAA5E,GACArZ,KAAAsb,KAAAtb,KAAAsb,IAAAyE,UAIA/f,KAAAue,YAAA1H,QAAA,yEACA7W,KAAA4f,aAIAA,SAAA,WACA5f,KAAAsb,KAAAtb,KAAAsb,IAAAyE,UAIA/f,KAAAsb,IAAA+C,cACAre,KAAAsb,MAMAmC,UAAA,WACArY,QAAA0Y,gBAAAC,iBAAA,CACAiC,QAAA5a,QAAA6a,MACAC,MAAA,GACAlgB,KAAA6d,YAAA1B,KAAAnc,OACAA,KAAAgU,SAAAyJ,YACAzd,KAAAiX,QAAA,YAGA0G,UAAA,WACA3d,KAAAgU,SAAA2J,YACA3d,KAAAiX,QAAA,YAGA6E,eAAA,WACA9b,KAAA0V,UACA1V,KAAA0V,SAAA5D,SAAA,WAGA9R,KAAAgU,SAAA8H,iBACA9b,KAAAiX,QAAA,iBAGAmF,aAAA,WACApc,KAAA0V,UACA1V,KAAA0V,SAAAU,YAAA,WAGApW,KAAAgU,SAAAoI,eACApc,KAAAiX,QAAA,eAGA4I,cAAA,SAAApV,GACAzK,KAAAgU,SAAA6L,cAAApV,GACAzK,KAAAiX,QAAA,cAAA,CACAxM,SAAAA,IAIAvL,MAAA8I,GAAAmY,YAGAtD,aAAA,SAAA5O,GACAjO,KAAAgU,SAAA6I,aAAA5O,KAEA,CACAuN,SAAA,CACA0B,WAAA,KACAjB,kBAAA,EACAnB,UAAA,KACAnH,YAAA,KACAmC,OAAA,KACA6F,WAAA,KACA7b,OAAA,KACA+b,aAAA,EACAuE,aAAA,KAEA3C,UAAA9e,EAAA0hB,KACA1C,UAAAhf,EAAA0hB,KACAvE,eAAAnd,EAAA0hB,KACAjE,aAAAzd,EAAA0hB,KACAxD,aAAAle,EAAA0hB,KACAR,cAAAlhB,EAAA0hB,KAEAlB,WAAA,MC3XAjgB,MAAA+U,iBAAA7O,QAAAyV,KAAA5b,OAAA,CACAqhB,aAAA,EACA3M,YAAA,KAEA4M,cAAA,KACAC,aAAA,KACAC,uBAAA,KAEAC,cAAA,KACAC,aAAA,KAEA/N,WAAA,KACAgO,MAAA,KACAC,aAAA,EAEAC,SAAA,KACAC,eAAA,KACAC,UAAA,KACAC,gBAAA,KACAC,QAAA,KACAC,aAAA,KACAC,gBAAA,KAEAC,qBAAA,KACAC,sBAAA,KAEAC,SAAA,KACAC,cAAA,KAEAC,QAAA,KACAC,WAAA,EACAC,WAAA,KACAC,SAAA,EACAC,QAAA,EACAC,gBAAA,KAEAC,eAAA,KACAC,qBAAA,KACAC,WAAA,KACA9W,OAAA,KAEA+W,aAAA,KACAC,SAAA,KACArM,OAAA,KAEAsM,aAAA,KACAC,SAAA,KACAC,oBAAA,KACAC,oBAAA,KACAC,oBAAA,KACAC,wBAAA,KAEAC,UAAA,KACAC,sBAAA,KACAC,aAAA,KACAC,SAAA,KACAC,KAAA,KACAC,oBAAA,KACAC,cAAA,KACAC,gBAAA,KACAC,KAAA,EACAC,UAAA,KACAC,aAAA,KACAC,WAAA,KAEAC,QAAA,KACAC,gBAAA,KACAC,gBAAA,KACAC,oBAAA,KACAC,mBAAA,KACAC,uBAAA,EACAC,UAAA,KACAC,gBAAA,KACAC,uBAAA,KACAC,WAAA,KAEAC,sBAAA,EACAC,aAAA,KAKA1I,KAAA,SAAA5H,EAAAf,EAAAoB,GAgDA,GA/CAhU,KAAA2T,YAAAA,EACA3T,KAAA4S,WAAAA,EACA5S,KAAA8Y,YAAA9E,EAAA9U,MAAA+U,iBAAAuH,UAKAxb,KAAAugB,cAAAvgB,KAAAkkB,0BAEAlkB,KAAAwgB,aAAA,GAGAxgB,KAAAgU,SAAAmQ,YACAxlB,EAAAM,OAAAe,KAAAugB,cAAArhB,MAAAqV,gBAAAvU,KAAAgU,SAAAmQ,YAAA,IAIAnkB,KAAAygB,uBAAA,oBAAAzgB,KAAA2T,YAAA,IAAA3T,KAAAgU,SAAAoQ,QACAzlB,EAAAM,OAAAe,KAAAwgB,aAAAthB,MAAAqV,gBAAAvU,KAAAygB,uBAAA,KAKAzgB,KAAA4gB,MAAA5gB,KAAA4S,WAAAgD,KAAA,SACA5V,KAAAuhB,SAAAvhB,KAAA4S,WAAAgD,KAAA5V,KAAAgU,SAAAqQ,iBACArkB,KAAA+hB,eAAA/hB,KAAAuhB,SAAA3L,KAAA,wBACA5V,KAAAgiB,qBAAAhiB,KAAA+hB,eAAAuC,SACAtkB,KAAAkiB,aAAAliB,KAAA4S,WAAAgD,KAAA,sBACA5V,KAAAoiB,aAAApiB,KAAAuhB,SAAA3L,KAAA,sBACA5V,KAAAyhB,QAAAzhB,KAAAuhB,SAAA3L,KAAA,6BACA5V,KAAA8hB,gBAAA9hB,KAAAuhB,SAAA3L,KAAA,0BACA5V,KAAA8gB,SAAA9gB,KAAA4S,WAAAgD,KAAA,kBACA5V,KAAAqhB,qBAAArhB,KAAA8gB,SAAAlL,KAAA,sBACA5V,KAAA0iB,UAAA1iB,KAAA4S,WAAAgD,KAAA,mBACA5V,KAAAgjB,cAAAhjB,KAAA4S,WAAAgD,KAAA,kBACA5V,KAAAijB,gBAAAjjB,KAAA4S,WAAAgD,KAAA,oBACA5V,KAAAqjB,WAAArjB,KAAA4S,WAAAgD,KAAA,eAGA5V,KAAAgU,SAAAuQ,cACAvkB,KAAA8gB,SAAAzC,OACA1f,EAAA,kBAAAqB,KAAA4S,YAAAwD,YAAA,gBAMApW,KAAAwkB,cAAA,CAqBA,GAhBAxkB,KAAAqhB,qBAAA/gB,QACAN,KAAA0c,YAAA1c,KAAAqhB,qBAAA,QAAA,+BAMArhB,KAAA+hB,eAAAzhB,SACAN,KAAAiiB,WAAAjiB,KAAA+hB,eAAA3O,UAAApM,KAAA,WAAAyd,KACAzkB,KAAAiiB,WAAA7I,GAAA,eAAApZ,KAAA0kB,oBAAAvI,KAAAnc,QAOAA,KAAAkiB,aAAA5hB,OAAA,CACAN,KAAAmiB,SAAAniB,KAAAkiB,aAAA9O,UAAApM,KAAA,WAAAyd,KAGA,IAAAE,EAAA3kB,KAAAmiB,SAAAyC,SAAAC,OAAA,cAeA,GAbAF,EAAArkB,SACAqkB,EAAA3kB,KAAAmiB,SAAAyC,SAAArK,SAGAoK,EAAArkB,OACAN,KAAA8kB,SAAAH,EAAA3d,KAAA,YAGAhH,KAAAgU,SAAA+Q,SAAA,CAAAlP,GAAA,KAGA7V,KAAAmiB,SAAA/I,GAAA,eAAApZ,KAAAglB,kBAAA7I,KAAAnc,OAEAA,KAAA8V,OAAA,CAEA,IAAAmP,EAAAjlB,KAAAgU,SAAAiR,eAAA/lB,MAAA8I,GAAAkd,YAEA,GAAAD,GAAAA,GAAAjlB,KAAA8V,OAAA,CAEA,IAAAqP,EAAAnlB,KAAAmiB,SAAAyC,SAAAC,OAAA,kBAAAI,EAAA,YAEAE,EAAA7kB,QAEA6kB,EAAAlO,QAAA,gBAIAjX,KAAAgU,SAAA+Q,UAAA/kB,KAAAgU,SAAA+Q,SAAAjP,QAAA,MAAA9V,KAAAgU,SAAA+Q,SAAAjP,OACA9V,KAAA8kB,SAAA9kB,KAAAgU,SAAA+Q,SAAAjP,QAEA9V,KAAA8kB,SAAA5lB,MAAA4W,QAIA9V,KAAAgU,SAAA+Q,UAAA/kB,KAAAgU,SAAA+Q,SAAAjP,eACA9V,KAAAgU,SAAA+Q,SAAAjP,OAOA9V,KAAA0c,YAAA1c,KAAAyhB,QAAA,QAAA,MACAzhB,KAAA0hB,WAAA1hB,KAAAyhB,QAAAnd,MACAtE,KAAAolB,iBACAplB,KAAA0hB,YAAA1hB,KAAAyhB,QAAAnd,OACAtE,KAAAqlB,gBAGArlB,KAAA0gB,eACA4E,aAAAtlB,KAAA0gB,eAGA1gB,KAAA0gB,cAAA6E,WAAAvlB,KAAAwlB,kCAAArJ,KAAAnc,MAAA,OAIAA,KAAA0c,YAAA1c,KAAAyhB,QAAA,WAAApI,IACAA,EAAA2G,UAAA5a,QAAAqgB,aACApM,EAAAqM,iBAEA1lB,KAAA0gB,eACA4E,aAAAtlB,KAAA0gB,eAGA1gB,KAAAwlB,uCAKAxlB,KAAA0c,YAAA1c,KAAA8hB,gBAAA,QAAA,KACA9hB,KAAAyhB,QAAAnd,IAAA,IAEAtE,KAAA0gB,eACA4E,aAAAtlB,KAAA0gB,eAGAtb,QAAAugB,iBAAA,IACA3lB,KAAAyhB,QAAAxK,QAAA,SAGAjX,KAAAqlB,gBAEArlB,KAAAwlB,sCAIApgB,QAAAugB,iBAAA,IACA3lB,KAAAyhB,QAAAxK,QAAA,SAOAjX,KAAAoiB,aAAA9hB,SACAN,KAAAqiB,SAAAriB,KAAAoiB,aAAAhP,UAAApM,KAAA,WAAAyd,KACAzkB,KAAAsiB,oBAAAtiB,KAAAqiB,SAAAzP,WAAAsH,SAAA,oBACAla,KAAAuiB,oBAAAviB,KAAAqiB,SAAAzP,WAAAsH,SAAA,oBAEAla,KAAAqiB,SAAAjJ,GAAA,eAAApZ,KAAA4lB,kBAAAzJ,KAAAnc,QAMAA,KAAA0c,YAAA1c,KAAAqjB,WAAA,QAAA,kBAKArjB,KAAAsgB,aAAA,EACAtgB,KAAA6lB,YAKA7lB,KAAA8lB,sBAMA9lB,KAAA+lB,QAAA7mB,MAAA8mB,SAEAhmB,KAAAimB,gBAAA,KAGAJ,UAAA,WACA7lB,KAAAkmB,eAGAC,mBAAA,WAEA,OADAnmB,KAAAikB,aAAA1a,MAAA6c,YAAAC,SACArmB,KAAAikB,aAAA1jB,OAGA+lB,gBAAA,WACAtmB,KAAAikB,eACAjkB,KAAAgkB,sBAAA,EACAhkB,KAAAikB,aAAAsC,SACAnhB,QAAA2Z,sBAAA,KACA/e,KAAAgkB,sBAAA,MAKAwC,mBAAA,WACA,OAAAxmB,KAAA8gB,SAAAlL,KAAA,aAGA6Q,eACA,GAAAzmB,KAAA2gB,aAIA,OAAA3gB,KAAA2gB,aAAA+F,QAGAlC,YAAA,WACA,IAAAiC,EAAAzmB,KAAA2mB,kBAAA3mB,KAAAwmB,sBAGA,OAAA,IAAAC,EAAAnmB,SAKAN,KAAA2gB,eACA3gB,KAAA2gB,aAAA,IAAAvb,QAAAwhB,OAAA5mB,KAAA8gB,SAAAlL,KAAA,OAAA,CACAiR,OAAA,EACAC,YAAA,EACAC,UAAA,EACAC,kBAAAhnB,KAAAinB,6BAAA9K,KAAAnc,SAIAA,KAAAmhB,aAAA,GACAnhB,KAAAknB,aAAAT,IAEA,IAGAX,oBAAA,WACA,IACA5E,EADAF,EAAAhhB,KAAAmnB,sBAiBA,OAdAnG,IACAE,EAAAlhB,KAAAonB,eAAApG,IAGA,IAAAhhB,KAAAohB,gBAAAhiB,MAAA8hB,KACAA,EAAA,OAIAF,GAAAE,IAEAA,EAAAlhB,KAAAohB,gBAAA7G,SAGAva,KAAAqnB,aAAAnG,IAGAoG,eAAA,WACAtnB,KAAA2gB,aAAA4G,iBAEA,IAAAznB,EAAA,CACAskB,QAAApkB,KAAAgU,SAAAoQ,QACAzQ,YAAA3T,KAAA2T,aAGA3T,KAAAwnB,eAEAtoB,MAAA6J,kBAAA,OAAA/I,KAAAgU,SAAAyT,qBAAA,CACAzgB,KAAAlH,IACA2J,KAAAgB,IACAzK,KAAA0nB,oBACA1nB,KAAAwmB,qBAAA/P,YAAAhM,EAAAzD,KAAAjI,MACAiB,KAAAwkB,cACAxkB,KAAA8lB,wBACApc,MAAA,KACA1J,KAAA0nB,oBACA1nB,KAAAgkB,sBACA9kB,MAAA8I,GAAAC,aAAA/I,MAAAS,EAAA,MAAA,gCAKAgoB,WAAA,SAAAzG,GACAlhB,KAAA2gB,aAAAiH,SAAA1G,GACAlhB,KAAA6nB,iBAAA3G,GACAlhB,KAAAmhB,aAAAD,EAAAla,KAAA,QAAAka,EAEAA,EAAAla,KAAA,sBAAA,IAAAhH,KAAAugB,cAAAuH,gBAAAhnB,QAAAogB,EAAAla,KAAA,SACAhH,KAAA+nB,cAAA7G,IAIA2G,iBAAA,SAAA3G,GAEAlhB,KAAAgoB,mBAAA9G,GAEA,IAAA+G,EAAAjoB,KAAAkoB,iBAAAhH,GAEA+G,EAAA3nB,QACAN,KAAA0c,YAAAwE,EAAA,WAAA,yBACAlhB,KAAA0c,YAAAuL,EAAA,QAAA,4BACA/G,EAAAla,KAAA,oBAAA,IAEAka,EAAAla,KAAA,oBAAA,IAIAmhB,aAAA,SAAAjH,GACAlhB,KAAA2gB,aAAAyH,YAAAlH,GACAlhB,KAAAgoB,mBAAA9G,UACAlhB,KAAAmhB,aAAAD,EAAAla,KAAA,SAGAghB,mBAAA,SAAA9G,GACAA,EAAAla,KAAA,sBACAhH,KAAAqoB,eAAAnH,EAAA,YACAlhB,KAAAqoB,eAAAroB,KAAAkoB,iBAAAhH,GAAA,UAGAA,EAAAoH,WAAA,qBAGApE,wBAAA,WACA,MAAA,CACAqE,eAAA,KACAT,gBAAA,KAIAX,oBAAA,WACA,GAAAnnB,KAAAgU,SAAAwU,cAAA,CAKA,IAJA,IAAAC,EAAAzoB,KAAAgU,SAAAwU,cAAArnB,MAAA,KACAyD,EAAA,GAGAlF,EAAA,EAAAA,EAAA+oB,EAAAnoB,OAAAZ,IAAA,CACAkF,GAAA6jB,EAAA/oB,GACA,IAAAwhB,EAAAlhB,KAAAonB,eAAAxiB,GAGA,IAAAsc,EACA,OAAAlhB,KAAAugB,cAAAgI,eAGAvoB,KAAA+nB,cAAA7G,GACAtc,GAAA,IAMA,OAFA5E,KAAA8kB,SAAA9kB,KAAA8V,QAEA9V,KAAAgU,SAAAwU,cAGA,OAAAxoB,KAAAugB,cAAAgI,gBAGAG,0BAAA,WACA,OAAA1oB,KAAAugB,cAAAuH,iBAGA1C,eAAA,WAEAplB,KAAA8hB,gBAAA1L,YAAA,UAEApW,KAAAwiB,sBACAxiB,KAAAwiB,oBAAA7jB,EAAA,4BAAAO,MAAAS,EAAA,MAAA,SAAA,aACAK,KAAAqiB,SAAAsG,WAAA3oB,KAAAwiB,oBAAAtI,aAGAla,KAAAwiB,oBAAAoG,UAAA5oB,KAAAsiB,qBAEAtiB,KAAA0hB,WAAA,EAEA1hB,KAAA6oB,6BACA7oB,KAAA8oB,iBAAA,UAGAzD,cAAA,WAEArlB,KAAA8hB,gBAAAhQ,SAAA,UAEA9R,KAAAwiB,oBAAAuG,SAEA/oB,KAAA0hB,WAAA,EAEA1hB,KAAA6oB,8BAGAG,iBAAA,SAAA1pB,EAAA6F,GACA,iBAAA7F,EACAX,EAAAM,OAAAe,KAAAugB,cAAAjhB,GAEAU,KAAAugB,cAAAjhB,GAAA6F,EAGAnF,KAAAipB,sBAGAA,mBAAA,WACAjpB,KAAAgU,SAAAmQ,YACAjlB,MAAA0V,gBAAA5U,KAAAgU,SAAAmQ,WAAAnkB,KAAAugB,gBAIA2I,eAAA,SAAA7C,EAAA/mB,EAAAkV,GAMA,YALA,IAAAxU,KAAAwgB,aAAA6F,KAEArmB,KAAAwgB,aAAA6F,GAAA,SAGA,IAAA/mB,EACAU,KAAAwgB,aAAA6F,QACA,IAAArmB,KAAAwgB,aAAA6F,GAAA/mB,GACAU,KAAAwgB,aAAA6F,GAAA/mB,QAEA,IAAAkV,EAAAA,EAAA,MAIA2U,uBAAA,SAAA7pB,EAAAkV,GACA,OAAAxU,KAAAkpB,eAAAlpB,KAAAugB,cAAAgI,eAAAjpB,EAAAkV,IAGA4U,wBAAA,SAAA9pB,EAAA6F,GACA,IAAAkkB,EAAArpB,KAAAmpB,yBAEA,iBAAA7pB,EACAX,EAAAM,OAAAoqB,EAAA/pB,GAEA+pB,EAAA/pB,GAAA6F,EAGAnF,KAAAwgB,aAAAxgB,KAAAugB,cAAAgI,gBAAAc,EAGAnqB,MAAA0V,gBAAA5U,KAAAygB,uBAAAzgB,KAAAwgB,eAGA8I,+BAAA,WACA,IAAApb,EAAAlO,KAAAupB,2BAEA,UAAArb,GACAlO,KAAAopB,wBAAA,CACAI,MAAAtb,EACAzB,KAAAzM,KAAAypB,8BAQA1D,QAAA,SAAA7C,GACA,GAAA,UAAAljB,KAAAgU,SAAAoQ,QAAA,CAIAlB,EAAAvS,KAAA+Y,IAAAxG,EAAA,GACAljB,KAAAkjB,KAAAA,EAGA,IAAA5d,EAAAkB,SAAAC,SAAAC,KACA1H,QAAA,QAAA,IACAA,QAAA,IAAAkF,OAAA,IAAAhF,MAAAyqB,YAAA3qB,QAAA,sBAAA,QAAA,SAAA,IACAA,QAAA,OAAA,IAEA,IAAAgB,KAAAkjB,OACA,MAAAhkB,MAAAyqB,YAAA,KACArkB,GAAA,KAEAA,GAAApG,MAAAyqB,YAAA3pB,KAAAkjB,MAGA0G,QAAAC,aAAA,GAAA,GAAAvkB,KAGAwkB,YAAA,WACA9pB,KAAAmjB,UAAA,KACAnjB,KAAAojB,aAAA,MAOA2G,cAAA,WACA,IAAAhF,EAAA,CACAjP,OAAA9V,KAAA8V,OACAtQ,OAAAxF,KAAA2hB,WACA7f,OAAA9B,KAAAgU,SAAAgW,WAAAhqB,KAAAkjB,KAAA,GACA+G,MAAAjqB,KAAAgU,SAAAgW,WAKAhqB,KAAAgU,SAAAkW,gBACAlqB,KAAA6hB,QAAA,UAAA7hB,KAAAgU,SAAAoQ,UAAApkB,KAAAmL,UAEA4Z,EAAAlD,OAAA7hB,KAAA6hB,QAAA,KACAkD,EAAAoF,iBAAA,EACAnqB,KAAA6hB,SACAkD,EAAAqF,SAAA,IAGApqB,KAAA4hB,UACAmD,EAAAnD,SAAA,GAGAxc,QAAA4T,QAAAhZ,KAAAkhB,QAAA,0BACA6D,EAAA5Z,OAAAnL,KAAAmL,QAGAxM,EAAAM,OAAA8lB,EAAA/kB,KAAAgU,SAAA+Q,UAEA,IAAAjlB,EAAA,CACAskB,QAAApkB,KAAAgU,SAAAoQ,QACAzQ,YAAA3T,KAAA2T,YACA0S,OAAArmB,KAAAugB,cAAAgI,eACAxD,SAAAA,EACAsF,mBAAArqB,KAAAgU,SAAAqW,mBACAhB,UAAA1qB,EAAAM,OAAA,GAAAe,KAAAmpB,0BACAmB,UAAAtqB,KAAAuqB,mBAAA,EAAA,GAmBA,OAfAzqB,EAAAupB,UAAAG,MAAAxpB,KAAAupB,2BACAzpB,EAAAupB,UAAA5c,KAAAzM,KAAAypB,2BAEA,cAAAzpB,KAAAupB,kCACA,IAAAvpB,KAAAugB,cAAAiK,sBACAxqB,KAAAugB,cAAAiK,oBAAA,IAEA1qB,EAAA0qB,oBAAAxqB,KAAAugB,cAAAiK,qBAIAxqB,KAAAiX,QAAA,qBAAA,CACAnX,OAAAA,IAGAA,GAGAmmB,eAAA,SAAAwE,GAEA,GAAAzqB,KAAAsgB,YAAA,CAKAtgB,KAAAsmB,kBAEAtmB,KAAAwnB,eAGAxnB,KAAA8iB,OACA9iB,KAAA8iB,KAAA4H,iBACA1qB,KAAA8iB,OAGA,IAAA2H,IACAzqB,KAAA+lB,QAAA,GACA/lB,KAAA8pB,eAGA,IAAAhqB,EAAAE,KAAA+pB,gBAEA7qB,MAAA6J,kBAAA,OAAA/I,KAAAgU,SAAA2W,qBAAA,CACA3jB,KAAAlH,EACA+J,YAAA7J,KAAAmmB,uBACA1c,KAAAgB,IACAzK,KAAA0nB,qBACA,UAAA1nB,KAAAgU,SAAAoQ,QAAAhf,QAAAwlB,iBAAA5qB,KAAA4gB,OAAAiK,UAAA,GACA7qB,KAAA8qB,YAAAhrB,EAAA2K,EAAAzD,QACA0C,MAAAgB,IACA1K,KAAA0nB,oBACA1nB,KAAAgkB,sBACA9kB,MAAA8I,GAAAC,aAAA/I,MAAAS,EAAA,MAAA,iCAKA6lB,kCAAA,WACAxlB,KAAA2hB,cAAA3hB,KAAA2hB,WAAA3hB,KAAA0hB,UAAA1hB,KAAAyhB,QAAAnd,MAAA,OACAtE,KAAAimB,kBAIA8E,mBAAA,WAEA/qB,KAAA2jB,wBAMA3jB,KAAAuhB,SAAAyJ,IAAA,aAAAhrB,KAAAuhB,SAAA0J,UAGAjrB,KAAA8jB,uBAAA9jB,KAAAuhB,SAAArH,WACAla,KAAA8jB,uBAAAiF,SAEA/oB,KAAA+jB,WAGA/jB,KAAA+jB,WAAAzV,SAAAtO,KAAAuhB,UAFAvhB,KAAAkrB,kBAKAlrB,KAAA2jB,uBAAA,IAGAwH,aAAA,SAAApkB,EAAAqkB,GAEA,IAAAC,EAAArrB,KAAA8iB,KAAAwI,wBAGA,GAAA,IAFAD,EAAA/qB,SAMA,iBAAAyG,IACAA,EAAA/G,KAAAurB,YAAAxkB,KAGAA,EAAA8P,SAAAA,QAAA9P,EAAA8P,UAAA,CAKA7W,KAAAsmB,kBAGA,IAAAkF,EAAAxrB,KAAA+pB,gBAEAqB,EAAAA,EAAAlsB,MAAAyO,gBAAAyd,GAAA,GACA,IAAAtrB,EAAAnB,EAAAM,OAAAusB,EAAAzkB,EAAAiN,UAAA,GAAAoX,EAAA,CACAK,cAAA1kB,EAAAxF,KACAmqB,WAAAL,IAIArrB,KAAAwnB,eACAxnB,KAAA+iB,oBAAAsI,EAEAtkB,EAAAiF,UACA9M,MAAA0H,gBACA9G,EAAAZ,MAAA0H,eAAA1H,MAAA2H,gBAEA3H,MAAA2L,gBAAA,OAAA3L,MAAAmH,aAAArG,KAAAgU,SAAA2X,qBAAA7rB,GAAA2J,KAAAgB,IACAzK,KAAA0nB,sBACAhe,MAAAgB,IACA1K,KAAA0nB,uBAGAxoB,MAAA6J,kBAAA,OAAA/I,KAAAgU,SAAA2X,oBAAA,CACA3kB,KAAAlH,EACA+J,YAAA7J,KAAAmmB,uBACA1c,KAAAgB,IACAzK,KAAA0nB,oBACAjd,EAAAzD,KAAAW,SAEA3H,KAAA8pB,cACA9pB,KAAA8qB,YAAAU,EAAA/gB,EAAAzD,MAEAyD,EAAAzD,KAAAnH,SACAX,MAAA8I,GAAA2X,cAAAlV,EAAAzD,KAAAnH,SAGAG,KAAA4rB,YAAA7kB,EAAAjH,IAEAZ,MAAA8I,GAAAC,aAAAwC,EAAAzD,KAAAnH,WAEA6J,MAAA,KACA1J,KAAA0nB,wBAKA6D,YAAA,SAAAM,GACA,IAAA,IAAAnsB,EAAA,EAAAA,EAAAM,KAAAsjB,QAAAhjB,OAAAZ,IACA,GAAAM,KAAAsjB,QAAA5jB,GAAA6B,OAAAsqB,EACA,OAAA7rB,KAAAsjB,QAAA5jB,GAGA,KAAA,2BAAAmsB,GAGAD,YAAA,SAAA7kB,EAAAjH,GAEAZ,MAAA8I,GAAAmY,WAEAngB,KAAA8rB,cAAA/kB,EAAAjH,IAGAisB,mBAAA,WAEA/rB,KAAA2jB,wBAIA3jB,KAAA8jB,uBAAAxV,SAAAtO,KAAAuhB,UACAvhB,KAAA+jB,WAAAgF,SAIA/oB,KAAAuhB,SAAAyJ,IAAA,aAAA,IAEAhrB,KAAA2jB,uBAAA,IAGAqI,qBAAA,WAEA,GAAAhsB,KAAAsjB,QAAA,CACA,IAAA2I,EAAAjsB,KAAA8iB,KAAAoJ,sBAAA5rB,OAEA,IAAA2rB,GACAA,IAAAjsB,KAAA8iB,KAAAqJ,qBAAA7rB,QACAN,KAAA0jB,mBAAAtN,YAAA,iBACApW,KAAA0jB,mBAAA5R,SAAA,WACA9R,KAAAyjB,oBAAAvV,KAAA,eAAA,UAEAlO,KAAA0jB,mBAAA5R,SAAA,iBACA9R,KAAA0jB,mBAAAtN,YAAA,WACApW,KAAAyjB,oBAAAvV,KAAA,eAAA,UAGAlO,KAAA+qB,uBAEA/qB,KAAA0jB,mBAAAtN,YAAA,yBACApW,KAAAyjB,oBAAAvV,KAAA,eAAA,SACAlO,KAAA+rB,wBAKAG,oBAAA,WACA,OAAAlsB,KAAA8iB,KAAA9iB,KAAA8iB,KAAAoJ,sBAAAvtB,KAGA2sB,sBAAA,WACA,OAAAtrB,KAAA8iB,KAAA9iB,KAAA8iB,KAAAwI,wBAAA,IAGAc,UAAA,SAAAjhB,GAEA,IAAAwZ,EAAA3kB,KAAAiiB,WAAA2C,SAAAC,OAAA,kBAAA1Z,EAAA,YAEAwZ,EAAArkB,QACAN,KAAAiiB,WAAAoK,aAAA1H,EAAA,KAIA2H,uBAAA,SAAApe,GACA,OAAAlO,KAAAsiB,oBAAA1M,KAAA,gBAAA1H,EAAA,aAGAqb,yBAAA,WACA,OAAAvpB,KAAAsiB,oBAAA1M,KAAA,eAAA5O,KAAA,SAGA8hB,iBAAA,SAAA5a,GAEA,IAAAyW,EAAA3kB,KAAAssB,uBAAApe,GAEA,GAAAyW,EAAArkB,OAAA,CACAN,KAAAsiB,oBAAA1M,KAAA,SAAAQ,YAAA,OACAuO,EAAA7S,SAAA,OAEA,IAAAiE,EAAA4O,EAAAthB,OACArD,KAAAoiB,aAAAlU,KAAA,QAAAhP,MAAAS,EAAA,MAAA,sBAAA,CAAA4sB,UAAAxW,KACA/V,KAAAoiB,aAAA/e,KAAA0S,GAEA,UAAA7H,EACAlO,KAAAwsB,iBAAA,QAEAxsB,KAAAwsB,iBAAA7H,EAAA3d,KAAA,gBAAA,OAGA,cAAAkH,EACAlO,KAAAuiB,oBAAA3M,KAAA,KAAA9D,SAAA,YAEA9R,KAAAuiB,oBAAA3M,KAAA,KAAAQ,YAAA,cAKAqW,uBAAA,SAAAC,GACA,OAAA1sB,KAAAuiB,oBAAA3M,KAAA,cAAA8W,EAAA,YAGAjD,yBAAA,WACA,OAAAzpB,KAAAuiB,oBAAA3M,KAAA,eAAA5O,KAAA,QAGA2lB,oBAAA,WACA,OAAA3sB,KAAAmpB,uBAAA,SAAA,SAGAqD,iBAAA,SAAAE,GACA,SAAAA,IACAA,EAAA,OAGA1sB,KAAAoiB,aAAAlU,KAAA,YAAAwe,GACA1sB,KAAAuiB,oBAAA3M,KAAA,SAAAQ,YAAA,OACApW,KAAAysB,uBAAAC,GAAA5a,SAAA,QAGAsV,eAAA,SAAA9nB,GACA,YAAA,IAAAU,KAAAmhB,aAAA7hB,GACA,KAGAU,KAAAmhB,aAAA7hB,IAGA+nB,aAAA,SAAAnG,GACA,IAAAA,IAAAA,EAAA5gB,OACA,OAAA,EAGA,GAAAN,KAAAkhB,SAAAlhB,KAAAkhB,QAAA,IAAAlhB,KAAAkhB,QAAA,KAAAA,EAAA,IAAAA,EAAAla,KAAA,SAAAhH,KAAAghB,UACA,OAAA,EAIAhhB,KAAA+rB,qBAEA/rB,KAAAkhB,QAAAA,EACAlhB,KAAAghB,UAAAE,EAAAla,KAAA,OACAhH,KAAAgpB,iBAAA,iBAAAhpB,KAAAghB,WACAhhB,KAAA2gB,aAAAiM,WAAA1L,GAEAhiB,MAAA8I,GAAA6kB,yBAEA7sB,KAAA0hB,YAEA1hB,KAAA2hB,WAAA,KACA3hB,KAAAyhB,QAAAnd,IAAA,IACAtE,KAAAqlB,iBAOArlB,KAAAsiB,oBAAApI,SAAA,kBAAAI,SAGA,IAAAwS,EAAA9sB,KAAAkhB,QAAAla,KAAA,gBACA,GAAA8lB,EACA,IAAA,IAAAptB,EAAA,EAAAA,EAAAotB,EAAAxsB,OAAAZ,IAAA,CACA,IAAAilB,EAAAhmB,EAAA,QAAA,CACAouB,cAAA,IAEA1a,OACA1T,EAAA,OAAA,CACA0E,KAAAypB,EAAAptB,GAAA,GACAstB,YAAAF,EAAAptB,GAAA,MAGA4O,SAAAtO,KAAAsiB,qBACAtiB,KAAAqiB,SAAAsG,WAAAhE,EAAAzK,YAqBA,GAhBA9U,QAAA4T,QAAAhZ,KAAAkhB,QAAA,uBACAlhB,KAAAyiB,0BACAziB,KAAAyiB,wBAAA9jB,EAAA,gCAAAO,MAAAS,EAAA,MAAA,aAAA,aACAK,KAAAqiB,SAAAsG,WAAA3oB,KAAAyiB,wBAAAvI,aAGAla,KAAAyiB,wBAAAmG,UAAA5oB,KAAAsiB,sBACAtiB,KAAAyiB,yBACAziB,KAAAyiB,wBAAArM,YAAA,OAAA2S,SAGA/oB,KAAAitB,gCAKAjtB,KAAA+hB,eAAAzhB,SACA8E,QAAA4T,QAAAhZ,KAAAkhB,QAAA,wBACAlhB,KAAAgiB,qBAAAlQ,SAAA,UAEA9R,KAAAgiB,qBAAA5L,YAAA,UAGApW,KAAA4hB,SAAA,CAEA,IAAAsL,EAAAltB,KAAAiiB,WAAA2C,SAAArK,QACAva,KAAAosB,UAAAc,EAAAlmB,KAAA,WAmBA,GAXAhH,KAAA2iB,uBACA3iB,KAAA2iB,sBAAArI,SAGAta,KAAA4iB,aAAA,GACA5iB,KAAA6iB,SAAA,KAGA7iB,KAAAihB,gBAAAjhB,KAAAmtB,wBAGAntB,KAAAihB,gBAAA3gB,OAAA,EAAA,CACAN,KAAA2iB,sBAAAhkB,EAAA,2BAAA2P,SAAAtO,KAAAuhB,UAEA,IAAA,IAAA7hB,EAAA,EAAAA,EAAAM,KAAAihB,gBAAA3gB,OAAAZ,IAAA,CACA,IAAA0tB,EAAAptB,KAAAihB,gBAAAvhB,GAEA2tB,EAAA1uB,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,YAAA,IAAAiT,EAAAE,UAAA,IAAAF,EAAAE,UAAA,IACAC,YAAAH,EAAAhV,KACAoV,YAAAJ,EAAAK,KACApT,aAAA+S,EAAAhT,MACAA,MAAAgT,EAAAhT,QACA9L,SAAAtO,KAAA2iB,uBAEA3iB,KAAA4iB,aAAAwK,EAAAhV,MAAAiV,EAEArtB,KAAA0c,YAAA2Q,EAAA,QAAA,CAAAjV,KAAAgV,EAAAhV,OAAA,SAAAiB,GACArZ,KAAA0tB,eAAArU,EAAArS,KAAAoR,MACApY,KAAAimB,qBAMA,IAAApD,EAAA7iB,KAAA2sB,sBAiBA,OAfA9J,GAAA7iB,KAAA2tB,uBAAA9K,KAGAA,EADA7iB,KAAA6iB,UAAA7iB,KAAA2tB,uBAAA3tB,KAAA6iB,UACA7iB,KAAA6iB,SAIA7iB,KAAAihB,gBAAA,GAAA7I,MAIApY,KAAA0tB,eAAA7K,GAEA7iB,KAAA4tB,kBAEA,GAGAC,kBAAA,SAAAvuB,GACA,IAAA4hB,EAAAlhB,KAAAonB,eAAA9nB,GAEA,QAAA4hB,GACAlhB,KAAAqnB,aAAAnG,IAMA+L,8BAAA,WACA,IAAAa,EAAA9tB,KAAAmpB,uBAAA,SACA4E,EAAA/tB,KAAAmpB,uBAAA,QAEA2E,GAAAC,IAEAD,EAAA9tB,KAAAguB,iBAEA5oB,QAAA7F,QAAAuuB,KACAC,EAAAD,EAAA,GACAA,EAAAA,EAAA,KAIA,QAAAC,GAAA,SAAAA,IACAA,EAAA,OAGA/tB,KAAA8oB,iBAAAgF,GACA9tB,KAAAwsB,iBAAAuB,IAGAC,eAAA,WAEA,OAAAhuB,KAAAkhB,SAAA9b,QAAA4T,QAAAhZ,KAAAkhB,QAAA,qBACAlhB,KAAAkhB,QAAAhT,KAAA,qBAAA/M,MAAA,KAGA,CAAAnB,KAAAsiB,oBAAA1M,KAAA,WAAA5O,KAAA,QAAA,QAIAmmB,sBAAA,WACA,IAAAc,EAAA,CACA,CAAA7V,KAAA,QAAAgC,MAAAlb,MAAAS,EAAA,MAAA,sBAAA8tB,KAAA,SAOA,OAJAztB,KAAAkhB,SAAA9b,QAAA4T,QAAAhZ,KAAAkhB,QAAA,oBACA+M,EAAA/sB,KAAA,CAAAkX,KAAA,SAAAgC,MAAAlb,MAAAS,EAAA,MAAA,yBAAA8tB,KAAA,SAGAQ,GAGAN,uBAAA,SAAA9K,GACA,IAAA,IAAAnjB,EAAA,EAAAA,EAAAM,KAAAihB,gBAAA3gB,OAAAZ,IACA,GAAAM,KAAAihB,gBAAAvhB,GAAA0Y,OAAAyK,EACA,OAAA,EAIA,OAAA,GAGA6K,eAAA,SAAA7K,EAAAqL,GAEAA,GAAAluB,KAAA2tB,uBAAA9K,KACAA,EAAA7iB,KAAAihB,gBAAA,GAAA7I,MAIAyK,IAAA7iB,KAAA6iB,WAKA7iB,KAAA6iB,eAAA,IAAA7iB,KAAA4iB,aAAA5iB,KAAA6iB,WACA7iB,KAAA4iB,aAAA5iB,KAAA6iB,UAAAzM,YAAA,UAGApW,KAAA6iB,SAAAA,EACA7iB,KAAAopB,wBAAA,OAAAppB,KAAA6iB,eAEA,IAAA7iB,KAAA4iB,aAAA5iB,KAAA6iB,WACA7iB,KAAA4iB,aAAA5iB,KAAA6iB,UAAA/Q,SAAA,YAIAqc,WAAA,SAAA/V,EAAApE,GAEA,OAAA,IADAhU,KAAAouB,aAAAhW,GACA,CAAApY,KAAAA,KAAA0iB,UAAA1O,IAGAoa,aAAA,SAAAhW,GACA,OAAAA,GACA,IAAA,QACA,OAAAlZ,MAAAmvB,sBACA,IAAA,SACA,OAAAnvB,MAAAovB,uBACA,QACA,KAAA,cAAAlW,sBAIAmW,0BAAA,SAAA1Y,IAGA,IAFAlX,EAAAsO,QAAA4I,EAAA7V,KAAAgU,SAAAqW,qBAGArqB,KAAAgU,SAAAqW,mBAAAnpB,KAAA2U,IAIA2Y,wBAAA,SAAA3Y,GACA,IAAAzW,EAAAT,EAAAsO,QAAA4I,EAAA7V,KAAAgU,SAAAqW,qBAEA,IAAAjrB,GACAY,KAAAgU,SAAAqW,mBAAA/a,OAAAlQ,EAAA,IAIAqvB,eAAA,SAAA/L,GACAA,EAAAtM,YAAA,YAAAsY,QAAA,aAAAtY,YAAA,YAEA,IAAA,IAAA1W,EAAA,EAAAA,EAAAgjB,EAAApiB,OAAAZ,IAAA,CACA,IAAAmW,EAAAlX,EAAA+jB,EAAAhjB,IAAAsH,KAAA,MACAhH,KAAAwuB,wBAAA3Y,GAGA7V,KAAA2uB,iBAAAjM,IAGAkM,gBAAA,SAAAlM,GACAA,EAAAtM,YAAA,OAAAtE,SAAA,YAEA,IAAA,IAAApS,EAAA,EAAAA,EAAAgjB,EAAApiB,OAAAZ,IAAA,CACA,IAAAmW,EAAAlX,EAAA+jB,EAAAhjB,IAAAsH,KAAA,MACAhH,KAAAuuB,0BAAA1Y,GAGA7V,KAAA6uB,kBAAAnM,IAGAoM,eAAA,SAAAjZ,GACA,OAAA7V,KAAA8iB,KAAAgM,eAAAjZ,IAGAkZ,mBAAA,SAAAC,GACAA,EAAArwB,EAAAswB,UAAAD,GAEA,IAAA,IAAAtvB,EAAA,EAAAA,EAAAsvB,EAAA1uB,OAAAZ,IAAA,CACA,IAAAmW,EAAAmZ,EAAAtvB,GACAgW,EAAA1V,KAAA8uB,eAAAjZ,GAEAH,GAAAA,EAAApV,OACAN,KAAAyuB,eAAA/Y,GAEA1V,KAAAwuB,wBAAA3Y,KAKAqZ,oBAAA,SAAAF,GACAA,EAAArwB,EAAAswB,UAAAD,GAEA,IAAA,IAAAtvB,EAAA,EAAAA,EAAAsvB,EAAA1uB,OAAAZ,IAAA,CACA,IAAAmW,EAAAmZ,EAAAtvB,GACAgW,EAAA1V,KAAA8uB,eAAAjZ,GAEAH,GAAAA,EAAApV,OACAN,KAAA4uB,gBAAAlZ,GAEA1V,KAAAuuB,0BAAA1Y,KAKAsZ,yBAAA,SAAAtZ,GACA,OAAA7V,KAAA+iB,sBACA/iB,KAAA+iB,oBAAA,IAGA/iB,KAAA+iB,oBAAA7hB,KAAA2U,IAGAuZ,UAAA,SAAAC,GACArvB,KAAAsvB,qBAAAjd,OAAAgd,IAGAE,iBAAA,WAKA,OAJA,OAAAvvB,KAAA+gB,iBACA/gB,KAAA+gB,eAAA/gB,KAAA8gB,SAAAxgB,SAAAN,KAAA8gB,SAAAnL,SAAA,WAGA3V,KAAA+gB,gBAGAuO,mBAAA,WAEA,GAAAtvB,KAAAgU,SAAAwb,gBACA,OAAA7wB,EAAAqB,KAAAgU,SAAAwb,iBAEA,IAAA5c,EAAAjU,EAAA,kBAMA,OAJAiU,EAAAtS,SACAsS,EAAAjU,EAAA,6BAAA2P,SAAA3P,EAAA,aAGAiU,GAIA4U,aAAA,WACAxnB,KAAA0iB,UAAA5Q,SAAA,QACA9R,KAAA6gB,aAAA,GAGA6G,kBAAA,WACA1nB,KAAA0iB,UAAAtM,YAAA,QACApW,KAAA6gB,aAAA,GAGA4O,4BAAA,WAEA,IAAAC,EAAA,IAAAxwB,MAAAywB,sBAAA3vB,KAAA,CACA0d,OAAA,WACAgS,EAAAhF,aAIA,OAAAgF,GAGA9X,QAAA,WACA5X,KAAA2gB,cACA3gB,KAAA2gB,aAAA/I,UAGA5X,KAAA8iB,MACA9iB,KAAA8iB,KAAAlL,UAGA5X,KAAA4vB,QAGA7X,OAAA,WACA/X,KAAA2gB,cACA3gB,KAAA2gB,aAAA5I,SAGA/X,KAAA8iB,MACA9iB,KAAA8iB,KAAA/K,SAGA/X,KAAA4vB,QAGA1J,YAAA,WACAlmB,KAAAgU,SAAAkS,cACAlmB,KAAAiX,QAAA,cAGA2W,eAAA,WACA5tB,KAAAgU,SAAA4Z,eAAA5tB,KAAAghB,WACAhhB,KAAAiX,QAAA,eAAA,CAAA+J,UAAAhhB,KAAAghB,aAGA6O,aAAA,WACA7vB,KAAAgU,SAAA6b,aAAA7vB,KAAA8V,QACA9V,KAAAiX,QAAA,aAAA,CAAAnB,OAAA9V,KAAA8V,UAGAga,iBAAA,WACA9vB,KAAAgU,SAAA8b,mBACA9vB,KAAAiX,QAAA,mBAGA+P,kBAAA,WACAhnB,KAAAgU,SAAAgT,oBACAhnB,KAAAiX,QAAA,oBAGA0X,iBAAA,SAAAjM,GACA1iB,KAAAgU,SAAA2a,iBAAAjM,GACA1iB,KAAAiX,QAAA,iBAAA,CAAAN,SAAA+L,KAGAmM,kBAAA,SAAAnM,GACA1iB,KAAAgU,SAAA6a,kBAAAnM,GACA1iB,KAAAiX,QAAA,kBAAA,CAAAN,SAAA+L,KAGAoJ,cAAA,SAAA/kB,EAAAjH,GACAE,KAAAgU,SAAA8X,cAAA/kB,EAAAjH,GACAE,KAAAiX,QAAA,cAAA,CAAAlQ,OAAAA,EAAAjH,OAAAA,KAMAmnB,6BAAA,WAGAjnB,KAAA2gB,aAAAsL,cAKAjsB,KAAAqnB,aAAArnB,KAAA2gB,aAAAoP,iBACA/vB,KAAAimB,iBALAjmB,KAAA2gB,aAAAiM,WAAA5sB,KAAAohB,gBAAA7G,UASAyV,2BAAA,SAAA3W,GACAA,EAAAqM,iBAEA,IAAAzX,EAAAtP,EAAA0a,EAAAE,eAGAtL,EAAA0H,SAAA,aAAA1H,EAAAjH,KAAA,mBAIAhH,KAAAmrB,aAAAld,EAAAjH,KAAA,UAAA5B,QAAA6qB,YAAAhiB,KAGAiiB,+BAAA,SAAA7W,GACA,IAAAsL,EAAAhmB,EAAA0a,EAAA8W,QAGAxL,EAAAhP,SAAA,aAAAgP,EAAA3d,KAAA,mBAIAhH,KAAAmrB,aAAAxG,EAAA3d,KAAA,YAGA0d,oBAAA,SAAArL,GACArZ,KAAAiiB,WAAA2C,SAAAxO,YAAA,OACA,IAAAuO,EAAAhmB,EAAA0a,EAAA+W,gBAAAte,SAAA,OACA9R,KAAA+hB,eAAAhjB,KAAA4lB,EAAA5lB,QAEAiB,KAAA4hB,SAAA,EACA5hB,KAAA6hB,QAAA,EACA7hB,KAAAmL,OAAA,KAEA/F,QAAA4T,QAAA2L,EAAA,gBACA3kB,KAAA4hB,SAAA,EACAxc,QAAA4T,QAAA2L,EAAA,eACA3kB,KAAA6hB,QAAA,EAEA7hB,KAAAmL,OAAAwZ,EAAA3d,KAAA,UAGAhH,KAAA6oB,6BACA7oB,KAAAimB,kBAGAjB,kBAAA,SAAA3L,GACArZ,KAAAmiB,SAAAyC,SAAAxO,YAAA,OACA,IAAAuO,EAAAhmB,EAAA0a,EAAA+W,gBAAAte,SAAA,OACA9R,KAAAkiB,aAAAnjB,KAAA4lB,EAAA5lB,QACAiB,KAAA8kB,SAAAH,EAAA3d,KAAA,YACAhH,KAAA6vB,gBAGA/K,SAAA,SAAAhP,GACA,IAAAua,EAAA,OAAArwB,KAAA8V,OAKA,IAAAwa,EACApP,EALAlhB,KAAA8V,OAAAA,EACA9V,KAAAohB,gBAAAziB,IASA,IAFA,IAAA4xB,IAAAF,GAAArwB,KAAAkhB,SAAAlhB,KAAAkhB,QAAA5gB,QAEAZ,EAAA,EAAAA,EAAAM,KAAAymB,SAAAnmB,OAAAZ,SAEA,KADAwhB,EAAAlhB,KAAAymB,SAAAtU,GAAAzS,IACAsH,KAAA,WAAA,IAAAka,EAAAla,KAAA,SAAAwpB,WAAArvB,MAAA,KAAAL,QAAAgV,EAAA0a,aACAtP,EAAAoD,SAAAlO,YAAA,UACApW,KAAAohB,gBAAAphB,KAAAohB,gBAAAzE,IAAAuE,GACAoP,IACAA,EAAApP,KAGAA,EAAAoD,SAAAxS,SAAA,UAGA9R,KAAAkhB,SAAAlhB,KAAAkhB,QAAAuP,IAAA,IAAAvP,EAAAuP,IAAA,KACAF,GAAA,IAKAvwB,KAAAsgB,aAAAiQ,GACAvwB,KAAAqnB,aAAAiJ,GAIA,IACAI,EADAC,EAAA3wB,KAAAwmB,qBAAAtM,SAAA,YAGA,IAAAxa,EAAA,EAAAA,EAAAixB,EAAArwB,OAAAZ,IAEA,KADAgxB,EAAAC,EAAAxe,GAAAzS,IACAkxB,UAAA,WAAA,iBAAAtwB,OACAowB,EAAAta,YAAA,UAEAsa,EAAA5e,SAAA,UAIA9R,KAAAsgB,cACA,UAAAtgB,KAAAgU,SAAAoQ,SAEAllB,MAAA8I,GAAA6oB,UAAA/a,GAIA9V,KAAAimB,mBAIAL,kBAAA,SAAAvM,GACA,IAAAsL,EAAAhmB,EAAA0a,EAAA+W,gBAEAzL,EAAAhP,SAAA,aAAAgP,EAAAhP,SAAA,SAKAgP,EAAAL,SAAAA,SAAAwM,GAAA9wB,KAAAsiB,qBACAtiB,KAAA8oB,iBAAAnE,EAAA3d,KAAA,SAEAhH,KAAAwsB,iBAAA7H,EAAA3d,KAAA,QAGAhH,KAAAspB,iCACAtpB,KAAAimB,mBAGA8K,uBAAA,WACA/wB,KAAAgsB,uBACAhsB,KAAAgnB,qBAGAgK,sBAAA,SAAA3X,GACArZ,KAAAixB,cAAAtyB,EAAA0a,EAAAE,gBACAF,EAAA6X,mBAGAC,yBAAA,SAAA9X,GACArZ,KAAAixB,cAAAtyB,EAAA0a,EAAAE,eAAA6X,KAAA,MACA/X,EAAA6X,mBAGArI,2BAAA,WACA,IAAAlE,EAAA3kB,KAAAssB,uBAAA,aAEA,GAAA3H,EAAArkB,OAIA,GAAAN,KAAA4hB,SAAA5hB,KAAA6hB,QAAA7hB,KAAA0hB,WAEA,GADAiD,EAAA7S,SAAA,YACA,cAAA9R,KAAAupB,2BAAA,CAEA,IAAA2D,EAAAltB,KAAAsiB,oBAAA1M,KAAA,0BACA5V,KAAA8oB,iBAAAoE,EAAAlmB,KAAA,SACAhH,KAAAwsB,iBAAA,aAGA7H,EAAAvO,YAAA,YACApW,KAAAitB,iCAOAtG,kBAAA,SAAA0K,GACA,OAAAA,EAAAnX,SAAA,MAAAA,SAAA,MAGAoX,iBAAA,SAAApQ,GACA,IAAAmQ,EAAAnQ,EAAApC,SAAA,MACA,OAAA9e,KAAA2mB,kBAAA0K,IAGAnJ,iBAAA,SAAAhH,GACA,OAAAA,EAAApC,SAAA,YAGAoI,aAAA,SAAAT,GACA,IAAA,IAAA/mB,EAAA,EAAAA,EAAA+mB,EAAAnmB,OAAAZ,IACAM,KAAA2nB,WAAAhpB,EAAA8nB,EAAA/mB,MAIA6xB,eAAA,SAAA9K,GACA,IAAA,IAAA/mB,EAAA,EAAAA,EAAA+mB,EAAAnmB,OAAAZ,IACAM,KAAAmoB,aAAAxpB,EAAA8nB,EAAA/mB,MAIAuxB,cAAA,SAAA/P,GACAA,EAAAoD,OAAA,MAAA3O,SAAA,YACA3V,KAAAwxB,gBAAAtQ,GAEAlhB,KAAA+nB,cAAA7G,IAIA6G,cAAA,SAAA7G,GACAA,EAAAvH,KAAA,WAAAzL,KAAA,CACAujB,gBAAA,OACApX,aAAAnb,MAAAS,EAAA,MAAA,yBAEAuhB,EAAAoD,OAAA,MAAAxS,SAAA,YAEA,IAAA4f,EAAA1xB,KAAAsxB,iBAAApQ,GACAlhB,KAAAknB,aAAAwK,GAEA,IAAApyB,EAAA4hB,EAAAla,KAAA,QACA,IAAAhH,KAAAugB,cAAAuH,gBAAAhnB,QAAAxB,KACAU,KAAAugB,cAAAuH,gBAAA5mB,KAAA5B,GACAU,KAAAipB,uBAIAuI,gBAAA,SAAAtQ,GACAA,EAAAvH,KAAA,WAAAzL,KAAA,CACAujB,gBAAA,QACApX,aAAAnb,MAAAS,EAAA,MAAA,yBAEAuhB,EAAAoD,OAAA,MAAAlO,YAAA,YAEA,IAAAsb,EAAA1xB,KAAAsxB,iBAAApQ,GACAlhB,KAAAuxB,eAAAG,GAEA,IAAAhyB,EAAAM,KAAAugB,cAAAuH,gBAAAhnB,QAAAogB,EAAAla,KAAA,SACA,IAAAtH,IACAM,KAAAugB,cAAAuH,gBAAAxY,OAAA5P,EAAA,GACAM,KAAAipB,uBAOAsB,iBAAA,WACA,MAAA,UAAAvqB,KAAAgU,SAAAoQ,SAAA,cAAApkB,KAAAupB,4BAGAuB,YAAA,SAAAhrB,EAAA2K,GAKAzK,KAAAsjB,UACAtjB,KAAA+rB,qBACA/rB,KAAAsjB,QAAAtjB,KAAAujB,gBAAAvjB,KAAAwjB,gBAAAxjB,KAAA+jB,WAAA,MAMA/jB,KAAAijB,gBAAA3iB,SACAN,KAAAgjB,cAAA5M,YAAA,UACApW,KAAAijB,gBAAAlkB,KAAA,IAEAiB,KAAA2xB,gBACAloB,KAAAmoB,IACA5xB,KAAAgjB,cAAAlR,SAAA,UAEA,IAAA+f,EAAA3yB,MAAAwgB,iBAAA1f,KAAA2T,aAAAzU,MAAAwgB,iBAAA1f,KAAA2T,aAAA,GAAA,UACAme,EAAA5yB,MAAAwgB,iBAAA1f,KAAA2T,aAAAzU,MAAAwgB,iBAAA1f,KAAA2T,aAAA,GAAA,WAEA,GAAA3T,KAAAuqB,mBAOA,CACA,IAAAhQ,EAAA5J,KAAAohB,IAAA/xB,KAAAgU,SAAAgW,WAAAhqB,KAAAkjB,KAAA,GAAA,EAAA0O,GACAI,EAAArhB,KAAAohB,IAAAxX,GAAAva,KAAAgU,SAAAgW,UAAA,GAAA4H,GACAK,EAAA/yB,MAAAS,EAAA,MAAA,+FAAA,CACA4a,MAAAA,EACAyX,KAAAA,EACAJ,MAAAA,EACAM,KAAAL,EACAM,MAAAL,IAGAM,EAAAzzB,EAAA,kCAAA2P,SAAAtO,KAAAijB,iBACAoP,EAAA1hB,KAAA+Y,IAAA/Y,KAAA2hB,KAAAV,EAAA5xB,KAAAgU,SAAAgW,WAAA,GAEAuI,EAAA5zB,EAAA,SAAA,CACAwb,MAAA,uBAAAna,KAAAkjB,KAAA,EAAA,GAAA,aACA9I,MAAAlb,MAAAS,EAAA,MAAA,mBACA2O,SAAA8jB,GACAI,EAAA7zB,EAAA,SAAA,CACAwb,MAAA,uBAAAna,KAAAkjB,KAAAmP,EAAA,GAAA,aACAjY,MAAAlb,MAAAS,EAAA,MAAA,eACA2O,SAAA8jB,GAEAzzB,EAAA,SAAA,CACAwb,MAAA,YACA9W,KAAA4uB,IACA3jB,SAAA8jB,GAEApyB,KAAAkjB,KAAA,GACAljB,KAAA0c,YAAA6V,EAAA,SAAA,WACAvyB,KAAAqoB,eAAAkK,EAAA,SACAvyB,KAAAqoB,eAAAmK,EAAA,SACAxyB,KAAA+lB,QAAA/lB,KAAAkjB,KAAA,GACAljB,KAAAimB,gBAAA,MAIAjmB,KAAAkjB,KAAAmP,GACAryB,KAAA0c,YAAA8V,EAAA,SAAA,WACAxyB,KAAAqoB,eAAAkK,EAAA,SACAvyB,KAAAqoB,eAAAmK,EAAA,SACAxyB,KAAA+lB,QAAA/lB,KAAAkjB,KAAA,GACAljB,KAAAimB,gBAAA,UAjDA,CACA,IAAAgM,EAAA/yB,MAAAS,EAAA,MAAA,6DAAA,CACAiyB,MAAAA,EACAM,KAAAL,EACAM,MAAAL,IAEA9xB,KAAAijB,gBAAA5f,KAAA4uB,MAgDAvoB,MAAA,KACA1J,KAAAgjB,cAAAlR,SAAA,aAOA9R,KAAA0iB,UAAA3jB,KAAA0L,EAAA1L,MACAG,MAAA8S,eAAAvH,EAAAuU,UACA9f,MAAAoT,eAAA7H,EAAAwU,UAKAjf,KAAAyjB,oBAAAzjB,KAAA0iB,UAAA9M,KAAA,6BAEAnL,EAAA6Y,SAAA7Y,EAAA6Y,QAAAhjB,OACAN,KAAAyjB,oBAAAnjB,SACAN,KAAAsjB,QAAA7Y,EAAA6Y,QACAtjB,KAAAujB,gBAAA9Y,EAAA8Y,gBACAvjB,KAAAwjB,gBAAA/Y,EAAA+Y,gBAGAxjB,KAAA0jB,mBAAA/kB,EAAA,2BAAAiqB,UAAA5oB,KAAAyjB,qBAEAzjB,KAAAyjB,oBAAAvV,KAAA,CACAukB,KAAA,WACAC,SAAA,IACAC,eAAA,QACAtY,aAAAnb,MAAAS,EAAA,MAAA,gBAGAK,KAAA0c,YAAA1c,KAAAyjB,oBAAA,SAAA,WACA,IAAAzjB,KAAA8iB,KAAAoJ,sBAAA5rB,OACAN,KAAA8iB,KAAA8P,oBAEA5yB,KAAA8iB,KAAA+P,yBAIA7yB,KAAA0c,YAAA1c,KAAAyjB,oBAAA,WAAA,SAAApK,GACAA,EAAA2G,UAAA5a,QAAA0tB,YACAzZ,EAAAqM,iBAEA/mB,EAAA0a,EAAAE,eAAAtC,QAAA,eAKAjX,KAAAyjB,oBAAA3E,WAAAxe,QACAN,KAAAyjB,oBAAAa,OAAA,WAAAhK,SAEAta,KAAAyjB,oBAAAnJ,UAMAta,KAAA4jB,UAAAnZ,EAAAmZ,UACA5jB,KAAA6jB,gBAAA3kB,MAAAE,MAAAY,KAAA4jB,WAAA,GAAAlZ,GAAAA,EAAAnJ,MAEAvB,KAAA4jB,WAAA5jB,KAAA4jB,UAAAtjB,OACAN,KAAAqjB,WAAAjN,YAAA,UAEApW,KAAAqjB,WAAAvR,SAAA,UAOA,IAAAihB,EAAA/yB,KAAAsjB,SAAAtjB,KAAAgU,SAAA+e,WAeA,GAbA/yB,KAAA8iB,KAAA9iB,KAAAmuB,WAAAnuB,KAAA2sB,sBAAA,CACAvI,QAAApkB,KAAAgU,SAAAoQ,QACA4F,UAAA,UAAAhqB,KAAAgU,SAAAoQ,SAAA,cAAApkB,KAAAupB,2BAAAvpB,KAAAgU,SAAAgW,UAAA,KACAlqB,OAAAA,EACAizB,WAAAA,EACAC,YAAAhzB,KAAAsjB,SAAAtjB,KAAAgU,SAAAgf,YACAC,eAAAjzB,KAAAsjB,QACA0D,kBAAAhnB,KAAA+wB,uBAAA5U,KAAAnc,QAMAA,KAAA+iB,oBAAA,CACA,GAAAgQ,EACA,IAAA,IAAArzB,EAAA,EAAAA,EAAAM,KAAA+iB,oBAAAziB,OAAAZ,IACAM,KAAA8iB,KAAAoQ,kBAAAlzB,KAAA+iB,oBAAArjB,IAIAM,KAAA+iB,oBAAA,KAMA/iB,KAAA8vB,oBAGA6B,cAAA,WACA,OAAA,IAAA1oB,QAAA,CAAAC,EAAAC,KACA,GAAA,OAAAnJ,KAAAojB,aACAla,EAAAlJ,KAAAojB,kBACA,CACA,IAAAtjB,EAAAE,KAAA+pB,uBACAjqB,EAAAilB,SAAAjjB,cACAhC,EAAAilB,SAAAkF,MAGA,OAAAjqB,KAAAmjB,YACAnjB,KAAAmjB,UAAAxS,KAAAC,MAAA,IAAAD,KAAAe,WAEA5R,EAAAqjB,UAAAnjB,KAAAmjB,UAEAjkB,MAAA6J,kBAAA,OAAA/I,KAAAgU,SAAAmf,oBAAA,CACAnsB,KAAAlH,EACA+J,YAAA7J,KAAAmmB,uBACA1c,KAAAgB,IACAA,EAAAzD,KAAAmc,WAAAnjB,KAAAmjB,WACAnjB,KAAAojB,aAAA3Y,EAAAzD,KAAAosB,MACAlqB,EAAAuB,EAAAzD,KAAAosB,QAEAjqB,MAEAO,MAAAP,OAKA+hB,gBAAA,WACA,IAIAxrB,EAqBA4Z,EAzBA+Z,EAAA,GACAC,EAAA,GACAC,EAAA,GAIA,IAAA7zB,EAAA,EAAAA,EAAAM,KAAAsjB,QAAAhjB,OAAAZ,IAAA,CACA,IAAAqH,EAAA/G,KAAAsjB,QAAA5jB,GAEA,GAAAqH,EAAAkQ,QAAA,CACA,IAAAhJ,EAAAtP,EAAA,aAAAO,MAAAsF,cAAAuC,EAAAxF,MAAA,qBACAyF,KAAA,SAAAD,GACAsL,OAAAtL,EAAAkQ,SAEAjX,KAAA0c,YAAAzO,EAAA,SAAA,8BACAolB,EAAAnyB,KAAA+M,QAEAlH,EAAAysB,YAGAD,EAAAryB,KAAA6F,GAFAusB,EAAApyB,KAAA6F,GASA,GAAAusB,EAAAhzB,QAAAizB,EAAAjzB,OAAA,CACA,IAAAmzB,EAAA90B,EAAA,WAEA2a,EAAA3a,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,cACAqT,YAAA,WACApT,MAAAlb,MAAAS,EAAA,MAAA,aACA2O,SAAAmlB,GAEA,IAAAC,EAAA/0B,EAAA,sBAAA2P,SAAAmlB,GACAE,EAAA3zB,KAAA4zB,uBAAAN,GAAA,GACAO,EAAA7zB,KAAA4zB,uBAAAL,GAAA,GAEAI,GACAA,EAAArlB,SAAAolB,GAGAC,GAAAE,GACAl1B,EAAA,SAAA2P,SAAAolB,GAGAG,GACAA,EAAAvlB,SAAAolB,GAGAL,EAAAnyB,KAAAuyB,GAKA,IAFAzzB,KAAA+jB,WAAAplB,IAEAe,EAAA,EAAAA,EAAA2zB,EAAA/yB,OAAAZ,IAAA,CACA,IAAAo0B,EAAAn1B,EAAA,UAAA0T,OAAAghB,EAAA3zB,IACAM,KAAA+jB,WAAA/jB,KAAA+jB,WAAApH,IAAAmX,GAGA9zB,KAAA+jB,WAAAzV,SAAAtO,KAAAuhB,UACAriB,MAAA8S,eAAAhS,KAAAujB,iBACArkB,MAAAoT,eAAAtS,KAAAwjB,iBAEAtkB,MAAAyT,eAAA3S,KAAA+jB,YAEAzK,GACAA,EAAAtS,KAAA,WAAAoS,GAAA,eAAApZ,KAAAkwB,+BAAA/T,KAAAnc,QAIA+zB,eAAA,WACA/zB,KAAAqjB,WAAAvR,SAAA,UAOA,IALA,IAAA7D,EAAAtP,EAAA,UAAA,CACAwb,MAAA,gBAGA6Z,EAAA,GACAt0B,EAAA,EAAAA,EAAAM,KAAA4jB,UAAAtjB,OAAAZ,IACAs0B,EAAA9yB,KAAA,CAAA6U,MAAA/V,KAAA4jB,UAAAlkB,GAAAuF,KAAAE,MAAAnF,KAAA4jB,UAAAlkB,GAAA6B,OAEA,IAAA0yB,EAAA/0B,MAAAg1B,GAAAC,kBAAA,CACApe,MAAA7W,MAAAS,EAAA,MAAA,eACAuH,QAAA8sB,EACA7Z,MAAA,cACA7L,SAAAL,GAEAmmB,EAAAl1B,MAAAg1B,GAAAC,kBAAA,CACApe,MAAA7W,MAAAS,EAAA,MAAA,UACAuH,QAAA,CACA,CAAA6O,MAAA,MAAA5Q,MAAA,OAAA,CAAA4Q,MAAA,OAAA5Q,MAAA,QAAA,CAAA4Q,MAAA,MAAA5Q,MAAA,QAEAgV,MAAA,cACA7L,SAAAL,GAEA,IAAAomB,EAAAJ,EAAAre,KAAA,UACA5V,KAAA0c,YAAA2X,EAAA,SAAA,KACA,IAAA9yB,EAAA8yB,EAAA/vB,MACAtE,KAAA6jB,gBAAAtiB,GAAA+yB,YACAF,EAAAhe,YAAA,UAEAge,EAAAtiB,SAAA,YAGAuiB,EAAApd,QAAA,UAGA,IAAAoU,EAAArrB,KAAA8iB,KAAAwI,wBAEA,IAAAD,EAAA/qB,OACA,IAAAi0B,EAAAr1B,MAAAg1B,GAAAM,gBAAA,CACAze,MAAA7W,MAAAS,EAAA,MAAA,SACA80B,YAAAv1B,MAAAS,EAAA,MAAA,YACA4B,KAAA,SACAwwB,IAAA,IACAzjB,SAAAL,GAGAtP,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,uBACA9W,KAAAnE,MAAAS,EAAA,MAAA,YACA2O,SAAAL,GAEA,IAAAkN,EAAAxc,EAAA,SAAA,CACAwb,MAAA,mBACA7L,SAAAL,GAEA,IAAA7I,QAAA+X,IAAAnd,KAAAqjB,WAAApV,GAEAmL,GAAA,OAAA,KACApZ,KAAAqjB,WAAAjN,YAAA,YAGA,IAAAse,GAAA,EAEA10B,KAAA0c,YAAAzO,EAAA,UAAA,SAAAoL,GAEA,GADAA,EAAAqM,kBACAgP,EAAA,CAIAA,GAAA,EACAvZ,EAAA/E,YAAA,UAEA,IAAAtW,EAAAE,KAAA+pB,gBAOA,UANAjqB,EAAAilB,SAAAjjB,cACAhC,EAAAilB,SAAAkF,MAEAnqB,EAAAyB,KAAA0yB,EAAAre,KAAA,UAAAtR,MACAxE,EAAA0B,OAAA4yB,EAAAxe,KAAA,UAAAtR,MAEA+mB,EAAA/qB,OACAR,EAAAilB,SAAAlP,GAAAwV,MACA,CACA,IAAApB,EAAA/nB,SAAAqyB,EAAA3e,KAAA,SAAAtR,OACA2lB,IAAA0K,MAAA1K,KACAnqB,EAAAilB,SAAAkF,MAAAA,GAIA/qB,MAAA2H,iBACA/G,EAAAZ,MAAA0H,eAAA1H,MAAA2H,gBAGA3H,MAAA2L,gBAAA,OAAA3L,MAAAmH,aAAA,0BAAAvG,GACA2J,MAAA,WACAirB,GAAA,EACAvZ,EAAArJ,SAAA,aAEApI,OAAA,WACAgrB,GAAA,EACAvZ,EAAArJ,SAAA,UACA9R,KAAAgkB,sBACA9kB,MAAA8I,GAAAC,aAAA/I,MAAAS,EAAA,MAAA,qCAMAi0B,uBAAA,SAAAtQ,EAAAkQ,GACA,GAAAlQ,GAAAA,EAAAhjB,OAAA,CAGA,IAFA,IAAAuR,EAAAlT,EAAA,SAEAe,EAAA,EAAAA,EAAA4jB,EAAAhjB,OAAAZ,IACAf,EAAA,SAAA0T,OAAA1T,EAAA,OAAA,CACAkX,GAAA3W,MAAAsF,cAAA8e,EAAA5jB,GAAA6B,MAAA,iBACA4Y,MAAAqZ,EAAA,QAAA,KACAxsB,KAAA,CACAD,OAAAuc,EAAA5jB,IAEA2D,KAAAigB,EAAA5jB,GAAAuF,QACAqJ,SAAAuD,GAGA,OAAAA,KAGA,CACA2J,SAAA,CACA4I,QAAA,QACAsL,MAAA,KACAvL,WAAA,KACAY,SAAA,KACAiF,UAAA,IACAK,mBAAA,GACA0I,YAAA,EACAC,aAAA,EACAxD,gBAAA,KACAjL,aAAA,EACAF,gBAAA,iBACAoD,qBAAA,uCACAkD,qBAAA,+BACAwI,oBAAA,iCACAxH,oBAAA,iCACA1G,cAAA,KACAuD,cAAA,KACA0B,eAAA,EAEAhE,YAAAvnB,EAAA0hB,KACAuN,eAAAjvB,EAAA0hB,KACAwP,aAAAlxB,EAAA0hB,KACAyP,iBAAAnxB,EAAA0hB,KACA2G,kBAAAroB,EAAA0hB,KACAsO,iBAAAhwB,EAAA0hB,KACAwO,kBAAAlwB,EAAA0hB,KACAyL,cAAAntB,EAAA0hB,QC1gEAnhB,MAAA01B,qBAAAxvB,QAAAyV,KAAA5b,OAAA,CACA2T,WAAA,KACAiiB,oBAAA,KACAC,kBAAA,KACAC,UAAA,KAEA3U,aAAA,KACA4U,YAAA,KACAC,cAAA,KAEAC,aAAA,EAEAC,cAAA,KACAC,aAAA,KACAC,sBAAA,KACAC,uBAAA,KAEA/Z,KAAA,SAAA6E,EAAAmV,EAAAvhB,GACAhU,KAAAogB,aAAAA,EACApgB,KAAA4S,WAAAjU,EAAA42B,GACAv1B,KAAA8Y,YAAA9E,EAAA9U,MAAA01B,qBAAApZ,UAGAxb,KAAA60B,oBAAAl2B,EACA,iFAGA62B,YAAAx1B,KAAA4S,YAGA5S,KAAA80B,kBAAA90B,KAAAy1B,sBACA,IAAA/S,EAAA1iB,KAAA80B,kBAAA5a,WAEAla,KAAA01B,gBAAAhT,EAAApiB,QACAN,KAAA21B,eAAA31B,KAAAgU,SAAAgW,WAAAtH,EAAApiB,QAAAN,KAAAgU,SAAAgW,WAGAhqB,KAAAg1B,YAAA,IAAA91B,MAAA02B,mBACA51B,KAAAg1B,YAAAa,KAAAnT,GAEA1iB,KAAAgU,SAAA+e,aACA/yB,KAAAi1B,cAAA,IAAA7vB,QAAAwhB,OACA5mB,KAAA80B,kBACApS,EAAAmC,OAAA,mBACA,CACAgC,MAAA7mB,KAAAgU,SAAAgf,YACAjM,SAAA/mB,KAAA81B,iBACAC,OAAA,UAAA/1B,KAAAgU,SAAAoQ,QAAA,4BAAA,KACAS,OAAA,uBACAoO,aAAAjzB,KAAAgU,SAAAif,aACAjM,kBAAAhnB,KAAAgnB,kBAAA7K,KAAAnc,QAGAA,KAAAq1B,sBAAAhc,IACArZ,KAAAi1B,cAAArN,SAAAvO,EAAA1C,WAGA3W,KAAAs1B,uBAAAjc,IACArZ,KAAAi1B,cAAA7M,YAAA/O,EAAA1C,WAGA3W,KAAAogB,aAAAhH,GAAA,iBAAApZ,KAAAq1B,uBACAr1B,KAAAogB,aAAAhH,GAAA,kBAAApZ,KAAAs1B,yBAIA,UAAAt1B,KAAAgU,SAAAoQ,UACApkB,KAAAg2B,sBAAA3c,IACA,IAAA4c,EAAAt3B,EAAA0a,EAAA6c,QAEA,GAAA,MAAAD,EAAAE,KAAA,YAAA,CAKA,IAAAzgB,EAEA,GAAAugB,EAAAtgB,SAAA,WACAD,EAAAugB,OAIA,KAFAvgB,EAAAugB,EAAAxc,QAAA,aAEAnZ,OACA,OAIA8E,QAAA4T,QAAAtD,EAAA,kBACA1V,KAAAoU,oBAAAsB,KAIA1V,KAAAogB,aAAAwB,UACA5hB,KAAA0c,YAAA1c,KAAA80B,kBAAA,WAAA90B,KAAAg2B,uBACAr3B,EAAAy3B,kBACAp2B,KAAA0c,YAAA1c,KAAA80B,kBAAA,UAAA90B,KAAAg2B,yBAMAh2B,KAAA6lB,YAGA7lB,KAAAgU,SAAAgW,YACA,UAAAhqB,KAAAgU,SAAAoQ,QACApkB,KAAA+0B,UAAA3vB,QAAAwlB,iBAEA5qB,KAAA+0B,UAAA/0B,KAAAogB,aAAAQ,MAGA5gB,KAAA+0B,UAAAlK,UAAA,GACA7qB,KAAA0c,YAAA1c,KAAA+0B,UAAA,SAAA,iBACA/0B,KAAAq2B,kBAIAZ,oBAAA,WACA,KAAA,8FAGA5P,UAAA,aAGAyQ,eAAA,WACA,OAAAt2B,KAAA80B,kBAAA5a,YAGAiS,mBAAA,WACA,OAAAnsB,KAAA80B,kBAAA5a,SAAA,oBAGA4U,eAAA,SAAAjZ,GACA,IAAAH,EAAA1V,KAAA80B,kBAAA5a,SAAA,aAAArE,EAAA,YAEA,OAAAH,EAAApV,OACAoV,EAEA,MAIAwW,oBAAA,WACA,IAAAlsB,KAAAi1B,cACA,KAAA,+BAGA,OAAAj1B,KAAAi1B,cAAAlF,gBAGAzE,sBAAA,WACA,IAAAiL,EACA,IACAA,EAAAv2B,KAAAksB,sBACA,MAAAxhB,IAGA,IAAAskB,EAAA,GACA,GAAAuH,EACA,IAAA,IAAA72B,EAAA,EAAAA,EAAA62B,EAAAj2B,OAAAZ,IACAsvB,EAAA9tB,KAAAq1B,EAAApkB,GAAAzS,GAAAsH,KAAA,OAGA,OAAAgoB,GAGAwH,cAAA,SAAA9gB,GACA,IAAA1V,KAAAi1B,cACA,KAAA,+BAIA,OADAj1B,KAAAi1B,cAAArI,WAAAlX,GAAA,IACA,GAGAwd,kBAAA,SAAArd,GACA,IAAA7V,KAAAi1B,cACA,KAAA,+BAGA,IAAAvf,EAAA1V,KAAA8uB,eAAAjZ,GAEA,QAAAH,IACA1V,KAAAi1B,cAAArI,WAAAlX,GAAA,IACA,IAMAkd,kBAAA,WACA5yB,KAAAi1B,cAAAwB,aAGA5D,oBAAA,WACA7yB,KAAAi1B,cAAAyB,eAGAZ,eAAA,WACA,OAAA,GAGAa,gBAAA,WACA,OAAA32B,KAAAm1B,eAGAO,gBAAA,SAAAkB,GACA52B,KAAAm1B,cAAAyB,GAGAC,eAAA,WACA,OAAA72B,KAAAo1B,cAGAO,eAAA,SAAAmB,GACA92B,KAAAo1B,aAAA0B,GAMAT,cAAA,WACAr2B,KAAA+2B,eACA/2B,KAAAg3B,YAOAD,YAAA,WACA,SAAA/2B,KAAA62B,mBAAA72B,KAAAgU,SAAAgW,aAOAhqB,KAAA+0B,UAAA,KAAA3vB,QAAA6xB,KAAA,GACA7xB,QAAA6xB,KAAAC,cACA9xB,QAAA6xB,KAAApM,aACA7qB,KAAA4S,WAAA9Q,SAAAq1B,IACAn3B,KAAA4S,WAAAqY,SAIAjrB,KAAA+0B,UAAAoB,KAAA,gBACAn2B,KAAA+0B,UAAAlK,aACA7qB,KAAA+0B,UAAAqC,cAEA,KAOAJ,SAAA,WACA,GAAAh3B,KAAA62B,mBAAA72B,KAAAk1B,aAAAl1B,KAAAgU,SAAAgW,UAAA,CAIAhqB,KAAAk1B,aAAA,EACAl1B,KAAA60B,oBAAAze,YAAA,UACApW,KAAAqoB,eAAAroB,KAAA+0B,UAAA,UAEA,IAAA/tB,EAAAhH,KAAAq3B,oBAEAn4B,MAAA4H,kBAAA9G,KAAAgU,SAAAsjB,uBAAAtwB,EAAA,CAAAyD,EAAA5C,KAIA,GAHA7H,KAAAk1B,aAAA,EACAl1B,KAAA60B,oBAAA/iB,SAAA,UAEA,YAAAjK,EAAA,CACA,IAAA0vB,EAAA54B,EAAA8L,EAAA1L,MAEAiB,KAAAw3B,eAAAD,GACAr4B,MAAA8S,eAAAvH,EAAAuU,UACA9f,MAAAoT,eAAA7H,EAAAwU,UAEAjf,KAAAi1B,gBACAj1B,KAAAi1B,cAAArN,SAAA2P,EAAA1S,OAAA,oBACA7kB,KAAAogB,aAAA4L,wBAGAhsB,KAAA01B,gBAAA11B,KAAA22B,kBAAAY,EAAAj3B,QACAN,KAAA21B,eAAA4B,EAAAj3B,QAAAN,KAAAgU,SAAAgW,WAGAhqB,KAAA0c,YAAA1c,KAAA+0B,UAAA,SAAA,iBACA/0B,KAAAq2B,qBAKAgB,kBAAA,WAEA,IAAAv3B,EAAAnB,EAAAM,QAAA,EAAA,GAAAe,KAAAgU,SAAAlU,QAEA,OADAA,EAAAilB,SAAAjjB,OAAA9B,KAAA22B,kBACA72B,GAGA03B,eAAA,SAAAD,GACAA,EAAAjpB,SAAAtO,KAAA80B,mBACA90B,KAAAg1B,YAAAa,KAAA0B,GACAv3B,KAAAy3B,iBAAAF,IAGAE,iBAAA,SAAAF,GACAv3B,KAAAgU,SAAAyjB,iBAAAF,GACAv3B,KAAAiX,QAAA,iBAAA,CACAygB,YAAAH,KAIAvQ,kBAAA,WACAhnB,KAAAgU,SAAAgT,oBACAhnB,KAAAiX,QAAA,oBAGA7C,oBAAA,SAAAsB,GACAxW,MAAAkV,oBAAAsB,EAAA1O,KAAA,QAAA0O,EAAA,CACA0K,aAAApgB,KAAAogB,gBAIAxI,QAAA,WACA5X,KAAAi1B,eACAj1B,KAAAi1B,cAAArd,WAIAG,OAAA,WACA/X,KAAAi1B,eACAj1B,KAAAi1B,cAAAld,UAIA2S,QAAA,WAEA1qB,KAAA60B,oBAAAva,SAGAta,KAAAg1B,YAAAtK,iBACA1qB,KAAAg1B,YAGAh1B,KAAAi1B,gBACAj1B,KAAAogB,aAAAuX,IAAA,iBAAA33B,KAAAq1B,uBACAr1B,KAAAogB,aAAAuX,IAAA,kBAAA33B,KAAAs1B,wBAEAt1B,KAAAi1B,cAAAvK,iBACA1qB,KAAAi1B,eAGAj1B,KAAA4vB,SAEA,CACApU,SAAA,CACA4I,QAAA,QACA4F,UAAA,KACAlqB,OAAA,KACAizB,YAAA,EACAC,aAAA,EACAC,cAAA,EACAqE,uBAAA,oCACAG,iBAAA94B,EAAA0hB,KACA2G,kBAAAroB,EAAA0hB,QC9WAnhB,MAAA04B,uBAAAxyB,QAAAyV,KAAA5b,OAAA,CACA+1B,YAAA,KACAC,cAAA,KACA4C,YAAA,KACAnI,MAAA,KACAoI,cAAA,KAEAllB,WAAA,KACAmlB,mBAAA,KACArV,UAAA,KACAsV,eAAA,KACAC,wBAAA,KAEAC,cAAA,EAEA3c,KAAA,SAAAvH,GAKA,IAAArV,EAAAoG,cAAAiP,GAAA,CAKA,IAHA,IAAAmkB,EAAA,GACAh4B,EAAA,CAAA,KAAA,OAAA,cAAA,UAAA,WAAA,kBAAA,QAAA,kBAAA,WAEAT,EAAA,EAAAA,EAAAS,EAAAG,aACA,IAAA83B,UAAA14B,GADAA,IAEAy4B,EAAAh4B,EAAAT,IAAA04B,UAAA14B,GAMAsU,EAAAmkB,EAGAn4B,KAAA8Y,YAAA9E,EAAA9U,MAAA04B,uBAAApc,UAGAxb,KAAAgU,SAAAqkB,kBACAr4B,KAAAq4B,gBAAA,0BAAAr4B,KAAAgU,SAAAqkB,iBAIA,GAAAr4B,KAAAgU,SAAAiW,QACAjqB,KAAAgU,SAAAskB,UAAA,GAGAt4B,KAAA4S,WAAA5S,KAAAu4B,eAGAv4B,KAAA4S,WAAA5L,KAAA,gBAAAhH,MAEAA,KAAA+3B,mBAAA/3B,KAAAw4B,uBAEAx4B,KAAAg4B,eAAAh4B,KAAAy4B,oBACAz4B,KAAAg4B,iBACAh4B,KAAAi4B,wBAAAj4B,KAAAg4B,eAAA1T,OAAA,SACAtkB,KAAAi4B,wBAAA33B,SACAN,KAAAi4B,wBAAA,OAIAj4B,KAAAg1B,YAAA,IAAA91B,MAAA02B,mBAEA51B,KAAA04B,oBACA14B,KAAA24B,kBACA34B,KAAA44B,gBAEA54B,KAAAg4B,gBACAh4B,KAAA0c,YAAA1c,KAAAg4B,eAAA,WAAA,aAGA5yB,QAAA2Z,sBAAA,KACA/e,KAAAk4B,cAAA,KAIAjM,oBACA,OAAAjsB,KAAA0iB,UAAApiB,QAGAi4B,aAAA,WACA,OAAA55B,EAAA,IAAAqB,KAAAgU,SAAA6B,KAGA2iB,qBAAA,WACA,OAAAx4B,KAAA4S,WAAAsH,SAAA,cAGA2e,YAAA,WACA,OAAA74B,KAAA+3B,mBAAA7d,YAGAue,kBAAA,WACA,OAAAz4B,KAAA4S,WAAAgD,KAAA,mBAGA8iB,kBAAA,WACA14B,KAAAgU,SAAA+e,aACA/yB,KAAAi1B,cAAA,IAAA7vB,QAAAwhB,OAAA,CACAC,MAAA7mB,KAAAgU,SAAAskB,SACAzT,OAAA,oBAKA8T,gBAAA,WACA34B,KAAAgU,SAAAskB,WACAt4B,KAAA63B,YAAA,IAAAzyB,QAAA0zB,SAAA,CACAvD,UAAAv1B,KAAA+3B,mBACAlT,OAAA7kB,KAAAgU,SAAA+e,WAAA,IAEA/yB,KAAA63B,YAAAkB,YAAApjB,SAAA,OACA3V,KAAAi1B,cAAA+D,mBAEAh5B,KAAA63B,YAAAkB,YAEA,KACAE,qBAAA,UACAC,KAAAl5B,KAAAm5B,qBACAC,kBAAA,EACAC,eAAA,EACAC,cAAA,IACAC,aAAAv5B,KAAAgU,SAAA+e,WAAA,KACA/yB,KAAAi1B,cAAAuE,kBACA,SAKAL,mBAAA,WACA,MAAA,SAAAn5B,KAAAgU,SAAA6O,SAAA,IAAA,MAGA4W,mBAAA,WACA,OAAAz5B,KAAAgU,SAAAiW,OAAAjqB,KAAA0iB,UAAApiB,OAAAN,KAAAgU,SAAAiW,OAGAyP,qBAAA,WACA15B,KAAAy5B,qBACAz5B,KAAA25B,uBAEA35B,KAAA45B,yBAIAA,sBAAA,WACA,IAAAtgB,EAAAtZ,KAAAi4B,yBAAAj4B,KAAAg4B,eACA1e,GACAA,EAAAxH,SAAA,WAIA6nB,qBAAA,WACA,IAAArgB,EAAAtZ,KAAAi4B,yBAAAj4B,KAAAg4B,eACA1e,GACAA,EAAAlD,YAAA,WAIAwiB,cAAA,WACA,OAAA54B,KAAA0iB,UACA1iB,KAAA65B,eAAA75B,KAAA0iB,WAEA1iB,KAAA0iB,UAAA/jB,IAGAqB,KAAA85B,YAAA95B,KAAA64B,gBAGAiB,YAAA,SAAApX,GACA1iB,KAAAg1B,YAAAa,KAAAnT,GAEA1iB,KAAAgU,SAAA+e,YACA/yB,KAAAi1B,cAAArN,SAAAlF,GAGA1iB,KAAAgU,SAAAskB,UACAt4B,KAAA63B,YAAAjQ,SAAAlF,GAGA1iB,KAAAgU,SAAA+lB,WACA/5B,KAAAg6B,yBAAA3gB,IACA,IAAA3D,EAAA/W,EAAA0a,EAAAE,gBACAnU,QAAA4T,QAAAtD,EAAA,kBAAAA,EAAAC,SAAA,aAAAD,EAAAC,SAAA,aACA3V,KAAA83B,cAAA93B,KAAAoU,oBAAAsB,KAIA1V,KAAA0c,YAAAgG,EAAA,WAAA1iB,KAAAg6B,0BAEAr7B,EAAAy3B,kBACAp2B,KAAA0c,YAAAgG,EAAA,UAAA1iB,KAAAg6B,2BAIAtX,EAAA9M,KAAA,WAAAwD,GAAA,iBAAAC,IACArZ,KAAAi6B,cAAAt7B,EAAA0a,EAAAE,eAAAE,QAAA,aAEAJ,EAAA6X,oBAGAlxB,KAAA0iB,UAAA1iB,KAAA0iB,UAAA/F,IAAA+F,GACA1iB,KAAA05B,wBAGAtlB,oBAAA,SAAAsB,EAAA1B,GAKA,OAJAA,IACAA,EAAA,IAEAA,EAAA6H,YAAA7b,KAAAgU,SAAA6H,YACA3c,MAAAkV,oBAAApU,KAAAgU,SAAAL,YAAA+B,EAAA1B,IAGA6lB,eAAA,SAAAnX,GAKA,GAJA1iB,KAAAgU,SAAA+e,YACA/yB,KAAAi1B,cAAA7M,YAAA1F,GAGA1iB,KAAA0vB,MAAA,CAGA,IAFA,IAAAV,EAAA,GAEAtvB,EAAA,EAAAA,EAAAgjB,EAAApiB,OAAAZ,IAAA,CACA,IAAAmW,EAAA6M,EAAAvQ,GAAAzS,GAAAsH,KAAA,MAEA6O,GACAmZ,EAAA9tB,KAAA2U,GAIAmZ,EAAA1uB,QACAN,KAAA0vB,MAAAtP,aAAA2O,mBAAAC,GAKAtM,EAAAxI,SAAA,SAAAic,KAAA,YAAA,GAEAn2B,KAAA0iB,UAAA1iB,KAAA0iB,UAAAwX,IAAAxX,GACA1iB,KAAA05B,uBAEA15B,KAAAm6B,oBAGAF,cAAA,SAAAvkB,GACA1V,KAAA65B,eAAAnkB,GACA1V,KAAAo6B,mBAAA1kB,EAAA,KACAA,EAAA4E,YAIA8f,mBAAA,SAAA1kB,EAAAzO,GACAyO,EAAAsV,IAAA,UAAA,GAEA,IAAAqP,EAAA,CACAC,SAAA,GAEAD,EAAA,UAAAn7B,MAAAuY,QAAA/B,EAAA6kB,aAAAr4B,SAAAwT,EAAAsV,IAAA,UAAA9rB,MAAAwY,SAEA,SAAA1X,KAAAgU,SAAA6O,UAAA,IAAA7iB,KAAA0iB,UAAApiB,SACA+5B,EAAA,mBAAA3kB,EAAA0hB,cAAAl1B,SAAAwT,EAAAsV,IAAA,oBAIAnf,OAAA2uB,aACA3uB,OAAA2uB,YAAAC,QAGA/kB,EAAA8B,SAAA6iB,EAAAn7B,MAAA04B,uBAAA8C,mBAAA,KACAzzB,IAGA4E,OAAA2uB,aACA3uB,OAAA2uB,YAAAG,YAKAC,UAAA,WAEA56B,KAAAy5B,uBAIAz5B,KAAA0vB,MAGA1vB,KAAA0vB,MAAAmL,OAFA76B,KAAA0vB,MAAA1vB,KAAA86B,gBAMAA,YAAA,WACA,OAAA57B,MAAAgV,2BAAAlU,KAAAgU,SAAAL,YAAA3T,KAAA+6B,qBAGAA,iBAAA,WACA,OAAAp8B,EAAAM,OAAA,CACA+7B,kBAAA,EACA7W,WAAAnkB,KAAAq4B,gBACA4C,QAAAj7B,KAAAgU,SAAAinB,QACAlW,SAAA/kB,KAAAgU,SAAA+Q,SACAiO,YAAA,GAAAhzB,KAAAgU,SAAAiW,MACAiR,aAAAl7B,KAAAgU,SAAAknB,aACA7Q,mBAAArqB,KAAAm7B,wBACAC,SAAAp7B,KAAAq7B,cAAAlf,KAAAnc,OACAA,KAAAgU,SAAAsnB,gBAGAhQ,sBAAA,WAGA,IAFA,IAAA0D,EAAA,GAEAtvB,EAAA,EAAAA,EAAAM,KAAA0iB,UAAApiB,OAAAZ,IACAsvB,EAAA9tB,KAAAlB,KAAA0iB,UAAAvQ,GAAAzS,GAAAsH,KAAA,OAGA,OAAAgoB,GAGAmM,sBAAA,WACA,IAAAnM,EAAAhvB,KAAAsrB,wBAUA,OARAtrB,KAAAgU,SAAAunB,oBAAAv7B,KAAAgU,SAAAwnB,iBACAxM,EAAA9tB,KAAAlB,KAAAgU,SAAAwnB,iBAGAx7B,KAAAgU,SAAAqW,oBACA2E,EAAA9tB,QAAAlB,KAAAgU,SAAAqW,oBAGA2E,GAGAqM,cAAA,SAAA1kB,GACA,GAAA3W,KAAAgU,SAAAiW,MAAA,CAEA,IAAAwR,EAAAz7B,KAAAgU,SAAAiW,MAAAjqB,KAAA0iB,UAAApiB,OAEAqW,EAAArW,OAAAm7B,IACA9kB,EAAAA,EAAA5V,MAAA,EAAA06B,IAIAz7B,KAAA07B,eAAA/kB,GACA3W,KAAA27B,iCAGAD,eAAA,SAAA/kB,GACA,IAAA,IAAAjX,EAAA,EAAAA,EAAAiX,EAAArW,OAAAZ,IAAA,CACA,IAAAk8B,EAAAjlB,EAAAjX,GACAgW,EAAA1V,KAAA67B,iBAAAD,GAEA57B,KAAA87B,cAAApmB,GACA1V,KAAA85B,YAAApkB,GACA1V,KAAA+7B,wBAAAH,EAAAlmB,SAAAA,GAGAkmB,EAAAlmB,SAAAA,EAGA1V,KAAAg8B,iBAAArlB,IAGAklB,iBAAA,SAAAD,GACA,IAAAlmB,EAAAkmB,EAAAlmB,SAAAumB,QAQA,OALA/8B,MAAA+W,eAAAP,EAAA,UAAA1V,KAAAgU,SAAA6O,SAAA,QAAA,SACAnN,EAAA5D,SAAA,aACA4D,EAAAwmB,QAAA,8BAAAl8B,KAAAgU,SAAA/O,KAAA,cAAA22B,EAAA/lB,GAAA,mCACA3W,MAAAS,EAAA,MAAA,UAAA,UAEA+V,GAGAomB,cAAA,SAAApmB,GACAA,EAAApH,SAAAtO,KAAA+3B,qBAGAgE,wBAAA,SAAAI,EAAAC,GACA,IAAAC,EAAAF,EAAAr6B,SACAw6B,EAAAF,EAAAt6B,SACAy6B,EAAAH,EAAAH,QAAA3tB,SAAAlJ,QAAAsN,MAEA0pB,EAAApR,IAAA,aAAA,UAEAuR,EAAAvR,IAAA,CACAwR,SAAA,WACAC,OAAA,IACAtF,IAAAkF,EAAAlF,IACA1f,KAAA4kB,EAAA5kB,OAGA,IAAA4iB,EAAA,CACAlD,IAAAmF,EAAAnF,IACA1f,KAAA6kB,EAAA7kB,MAGA8kB,EAAA/kB,SAAA6iB,EAAAn7B,MAAA04B,uBAAA8E,iBAAA,WACAH,EAAAjiB,SACA8hB,EAAApR,IAAA,aAAA,eAIA2Q,8BAAA,WACA37B,KAAA0vB,MAAAtP,cACApgB,KAAA0vB,MAAAtP,aAAA8O,oBAAAlvB,KAAAm7B,0BAIArM,eAAA,SAAAjZ,GACA,IAAA,IAAAnW,EAAA,EAAAA,EAAAM,KAAA0iB,UAAApiB,OAAAZ,IAAA,CACA,IAAAgW,EAAA1V,KAAA0iB,UAAAvQ,GAAAzS,GAEA,GAAAgW,EAAA1O,KAAA,OAAA6O,EACA,OAAAH,IAKAsmB,iBAAA,SAAArlB,GACA3W,KAAAiX,QAAA,iBAAA,CAAAN,SAAAA,IACA3W,KAAAgU,SAAAgoB,iBAAArlB,GAEA9K,OAAA2uB,aACA3uB,OAAA2uB,YAAAmC,aAIAxC,iBAAA,WACAn6B,KAAAiX,QAAA,kBACAjX,KAAAgU,SAAAmmB,qBAEA,CACAuC,gBAAA,IACAhC,mBAAA,IAEAlf,SAAA,CACA3F,GAAA,KACA5Q,KAAA,KACA23B,QAAA,KACAjpB,YAAA,KACAsnB,QAAA,KACAlW,SAAA,GACAwW,oBAAA,EACAC,gBAAA,KACAnR,mBAAA,KACAxH,SAAA,OACAoH,MAAA,KACAiR,cAAA,EACA7C,gBAAA,KACAiD,cAAA,GACAU,iBAAAr9B,EAAA0hB,KACA8Z,iBAAAx7B,EAAA0hB,KACAiY,UAAA,EACAvF,YAAA,EACAgH,UAAA,EACAle,aAAA,EACAghB,eAAA,MC1cA39B,MAAAiV,yBAAA/O,QAAA03B,MAAA79B,OAAA,CACA0U,YAAA,KACAyM,aAAA,KAEAhC,MAAA,KACA2e,WAAA,KACAjc,SAAA,KACA2F,SAAA,KACAuW,eAAA,KACApc,MAAA,KACAa,QAAA,KACAiB,UAAA,KACAua,OAAA,KACAC,gBAAA,KACAC,kBAAA,KACAliB,WAAA,KACAmiB,eAAA,KAEA7hB,KAAA,SAAA5H,EAAAK,GACAhU,KAAA2T,YAAAA,EACA3T,KAAA8Y,YAAA9E,EAAA9U,MAAAiV,yBAAAqH,UAGA,IAAA5I,EAAAjU,EAAA,kDAAA2P,SAAAlJ,QAAAsN,MACA0L,EAAAzf,EAAA,2DAAA2P,SAAAsE,GACAkK,EAAAne,EAAA,yBAAA2P,SAAAsE,GAEA5S,KAAA4vB,KAAAhd,EAAA5S,KAAAgU,UAEAhU,KAAAo9B,eAAAz+B,EAAA,iCAAA2P,SAAAwO,GACA9c,KAAAk9B,gBAAAv+B,EAAA,gCAAA2P,SAAAwO,GACA9c,KAAAm9B,kBAAAx+B,EAAA,iDAAA2P,SAAAwO,GACA9c,KAAAib,WAAAtc,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,MACA9W,KAAAnE,MAAAS,EAAA,MAAA,YACA2O,SAAAtO,KAAAk9B,iBACAl9B,KAAA+8B,WAAAp+B,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,sBACA9W,KAAAnE,MAAAS,EAAA,MAAA,YACA2O,SAAAtO,KAAAk9B,iBAEAl9B,KAAAoe,MAAAA,EAEApe,KAAA0c,YAAA1c,KAAAib,WAAA,WAAA,UACAjb,KAAA0c,YAAA1c,KAAA+8B,WAAA,WAAA,mBAGAM,SAAA,WACAr9B,KAAAogB,aAIAhb,QAAAugB,iBAAA,IACA3lB,KAAAogB,aAAAqB,QAAAxK,QAAA,SAJAjX,KAAAs9B,sBAQAt9B,KAAA4vB,QAGA5I,kBAAA,WACAhnB,KAAAu9B,wBAGAA,qBAAA,WACAv9B,KAAA+8B,aACA/8B,KAAAogB,aAAA8L,sBAAA5rB,OACAN,KAAAw9B,kBAEAx9B,KAAAy9B,qBAKAD,gBAAA,WACAx9B,KAAA+8B,WAAA3mB,YAAA,aAGAqnB,iBAAA,WACAz9B,KAAA+8B,WAAAjrB,SAAA,aAGA4rB,gBAAA,WACA19B,KAAAib,WAAA7E,YAAA,aAGAunB,iBAAA,WACA39B,KAAAib,WAAAnJ,SAAA,aAGA8rB,kBAAA,WACA59B,KAAAo9B,eAAAhnB,YAAA,WAGAynB,kBAAA,WACA79B,KAAAo9B,eAAAtrB,SAAA,WAGAyU,OAAA,WACAvmB,KAAAib,WAAAtF,SAAA,aACA3V,KAAAqe,QAIAqd,eAAA,WACA,GAAA17B,KAAAogB,cAAApgB,KAAAogB,aAAA8L,sBAAA5rB,OAAA,CAEAN,KAAAogB,aAAA0C,KAAAmS,cAAA6I,sBAEA,IAAAvH,EAAAv2B,KAAAogB,aAAA8L,sBACA0P,EAAA57B,KAAAyV,eAAA8gB,GAEAv2B,KAAAo7B,SAAAQ,GAEA57B,KAAAgU,SAAA+pB,yBACA/9B,KAAAogB,aAAAwO,gBAAA5uB,KAAAogB,aAAA8L,uBAGAlsB,KAAAgU,SAAAgqB,cACAh+B,KAAAqe,SAKA5I,eAAA,SAAA8gB,GAGA,IAFA,IAAA0H,EAAA,GAEAv+B,EAAA,EAAAA,EAAA62B,EAAAj2B,OAAAZ,IAAA,CACA,IAAAgW,EAAA/W,EAAA43B,EAAA72B,IACAk8B,EAAA18B,MAAAuW,eAAAC,GAEAuoB,EAAA/8B,KAAA06B,GAGA,OAAAqC,GAGApD,KAAA,WACA76B,KAAAu9B,uBACAv9B,KAAA4vB,QAGAwL,SAAA,SAAAQ,GACA57B,KAAAgU,SAAAonB,SAAAQ,IAGAhkB,QAAA,WACA5X,KAAAogB,cACApgB,KAAAogB,aAAAxI,UAGA5X,KAAA4vB,QAGA7X,OAAA,WACA/X,KAAAogB,cACApgB,KAAAogB,aAAArI,SAGA/X,KAAA4vB,QAGA0N,oBAAA,WAEA,IAAAt2B,EAAA,CACAod,QAAA,QACAzQ,YAAA3T,KAAA2T,YACAsnB,QAAAj7B,KAAAgU,SAAAinB,SAGA,OAAAj7B,KAAAgU,SAAAknB,cAAA,SAAAl7B,KAAAgU,SAAAknB,eACAl0B,EAAAk0B,aAAAl7B,KAAAgU,SAAAknB,aAAA,IAAA,KAGAh8B,MAAA4H,kBAAA,0BAAAE,EAAA,CAAAyD,EAAA5C,KACA,YAAAA,IACA7H,KAAAoe,MAAArf,KAAA0L,EAAA1L,MAEAiB,KAAAoe,MAAA8f,IAAA,yBAAA59B,QACAN,KAAAoe,MAAAtM,SAAA,eAIA9R,KAAAogB,aAAAlhB,MAAA6U,mBAAA/T,KAAA2T,YAAA3T,KAAAoe,MAAA,CACAgG,QAAA,QACAsL,MAAA1vB,KACAmkB,WAAAnkB,KAAAgU,SAAAmQ,WACAY,SAAA/kB,KAAAgU,SAAA+Q,SACAsF,mBAAArqB,KAAAgU,SAAAqW,mBACA0I,YAAA,EACAC,YAAAhzB,KAAAgU,SAAAgf,YACAxD,gBAAAxvB,KAAAm9B,kBACAnW,kBAAAhnB,KAAAgnB,kBAAA7K,KAAAnc,MACAukB,YAAAvkB,KAAAgU,SAAAuQ,YACAU,cAAAjlB,KAAAgU,SAAAiR,cACAuD,cAAAxoB,KAAAgU,SAAAwU,gBAIAxoB,KAAA0c,YAAA1c,KAAAogB,aAAAsC,UAAA,aAAA,SAAArJ,EAAA8kB,GAGAA,EAAAC,SAAAlI,SAAAiI,EAAAE,UAAAnI,QACAl2B,KAAA07B,yBAMA,CACAlgB,SAAA,CACA8iB,WAAA,EACAna,WAAA,KACA8W,QAAA,KACAlW,SAAA,KACAiO,aAAA,EACAkI,aAAA,KACA7Q,mBAAA,GACA0T,yBAAA,EACAC,cAAA,EACAO,SAAA5/B,EAAA0hB,KACA+a,SAAAz8B,EAAA0hB,KACAkE,aAAA,EACAU,cAAA,KACAuD,cAAA,QClOAtpB,MAAAs/B,mBAAAp5B,QAAAyV,KAAA5b,OAAA,CACAiiB,QAAA,KACA+U,QAAA,KACAhoB,MAAA,KACA+F,SAAA,KAEAyqB,UAAA,KACAC,QAAA,KAEAnjB,KAAA,SAAA8K,EAAA6P,EAAAliB,GACAhU,KAAAkhB,QAAAviB,EAAA0nB,GACArmB,KAAAi2B,QAAAt3B,EAAAu3B,GACAl2B,KAAAiO,MAAAjO,KAAAkhB,QAAAzH,QAAA,QAEAzZ,KAAA8Y,YAAA9E,GAEAhU,KAAA2+B,kBAGAC,aAAA,SAAAvY,GACA,IAAAoY,EAAAz+B,KAAAy+B,UACAz+B,KAAA6+B,gBAEA7+B,KAAAkhB,QAAAviB,EAAA0nB,GAEAoY,GACAz+B,KAAA2+B,kBAIAA,eAAA,WACA3+B,KAAAy+B,YAIAz+B,KAAAy+B,WAAA,EAEAz+B,KAAA0c,YAAA1c,KAAAkhB,QAAA,QAAA,sBACAlhB,KAAA0c,YAAA1c,KAAAi2B,QAAA,QAAA,sBACAj2B,KAAA0c,YAAA1c,KAAAiO,MAAA,SAAA,kBAGA4wB,cAAA,WACA7+B,KAAAy+B,YAIAz+B,KAAAy+B,WAAA,EAEAz+B,KAAA0+B,SACApZ,aAAAtlB,KAAA0+B,SAGA1+B,KAAA8+B,mBAAA9+B,KAAAkhB,SACAlhB,KAAA8+B,mBAAA9+B,KAAAi2B,SACAj2B,KAAA8+B,mBAAA9+B,KAAAiO,SAGA8wB,mBAAA,WACA/+B,KAAA0+B,SACApZ,aAAAtlB,KAAA0+B,SAGA1+B,KAAA0+B,QAAAnZ,WAAAvlB,KAAAg/B,aAAA7iB,KAAAnc,MAAA,MAGAi/B,mBAAA,WACAj/B,KAAAi2B,QAAAxF,IAAA,KAAAjqB,SAAA04B,eACAl/B,KAAA6+B,iBAIAM,aAAA,WACAn/B,KAAA0+B,SACApZ,aAAAtlB,KAAA0+B,SAGA1+B,KAAAg/B,gBAGAA,aAAA,WACA,GAAAh/B,KAAAi2B,QAAAnF,GAAA,YAAA,CAIA,IAAAsO,EAAAp/B,KAAAkhB,QAAA5c,MAEA,QAAA,IAAA86B,EAAA,CAKA,IAAAC,EAAAr/B,KAAAs/B,oBAAAF,GAEAp/B,KAAAi2B,QAAA3xB,IAAA+6B,GAEA,IAAA,IAAA3/B,EAAA,EAAAA,EAAAM,KAAAi2B,QAAA31B,OAAAZ,IACAM,KAAAi2B,QAAAv2B,GAAA6/B,cAAA,IAAAC,WAAA,QAAA,CACAC,UAAA,gBAEAz/B,KAAAi2B,QAAAv2B,GAAA6/B,cAAA,IAAAG,MAAA,UAKA1/B,KAAAi2B,QAAAnF,GAAA,WACA5xB,MAAAiF,gBAAAnE,KAAAi2B,YAIAqJ,oBAAA,SAAAF,GACA,OAAAA,KC/GAlgC,MAAAygC,WAAAv6B,QAAAyV,KAAA5b,OAAA,CACA+U,SAAA,KACA4rB,WAAA,KACAC,OAAA,KAEAC,SAAA,KACAC,OAAA,KACA9C,OAAA,KACA+C,YAAA,KAEAzkB,KAAA,SAAAvH,GACAhU,KAAA8Y,YAAA9E,EAAA9U,MAAAygC,WAAAnkB,UAEAxb,KAAAgU,SAAAisB,iBACAjgC,KAAAgU,SAAAksB,SAAA,GAGAlgC,KAAA8/B,SAAAnhC,EAAAqB,KAAAgU,SAAAmsB,iBACAngC,KAAA+/B,OAAAphC,EAAAqB,KAAAgU,SAAAosB,eACApgC,KAAAi9B,OAAAj9B,KAAA+/B,OAAA7lB,SAAA,SACAla,KAAA4/B,WAAA5/B,KAAAi9B,OAAA/iB,WAAA5Z,OAEAN,KAAAgU,SAAAskB,WACAt4B,KAAA6/B,OAAA,IAAA3gC,MAAAmhC,gBAAArgC,KAAA+/B,OAAA,CACAxG,aAAAv5B,KAAAsgC,aAAAnkB,KAAAnc,SAIAA,KAAAggC,YAAAhgC,KAAA+/B,OAAAnqB,KAAA,0BACA5V,KAAA0c,YAAA1c,KAAAggC,YAAA,QAAA,wBAEAhgC,KAAAugC,YAGAC,OAAA,SAAAC,GACA,KAAAzgC,KAAAgU,SAAA0sB,UAAA1gC,KAAA4/B,YAAA5/B,KAAAgU,SAAA0sB,UAAA,CAKA,IAAAC,EAAAhiC,EAAA8hC,GAAAnyB,SAAAtO,KAAAi9B,QACA2D,EAAAD,EAAA/qB,KAAA,WAEA5V,KAAAgU,SAAAskB,UACAt4B,KAAA6/B,OAAAjY,SAAA+Y,GAGA3gC,KAAAggC,YAAAhgC,KAAAggC,YAAArjB,IAAAikB,GAEA5gC,KAAA0c,YAAAkkB,EAAA,QAAA,wBACA5gC,KAAA4/B,aAEA5/B,KAAAugC,aAGAD,aAAA,WACA,GAAAtgC,KAAAgU,SAAAskB,SAAA,CAOA,IAFA,IAAAtJ,EAAA,GAEAtvB,EAAA,EAAAA,EAAAM,KAAA6/B,OAAAnZ,OAAApmB,OAAAZ,IAAA,CACA,IAAAmW,EAAAlX,EAAAqB,KAAA6/B,OAAAnZ,OAAAhnB,IAAAwO,KAAAlO,KAAAgU,SAAA6sB,aACA7R,EAAA9tB,KAAA2U,GAIA,IAAA7O,EAAA,CACAgoB,IAAA5nB,KAAAC,UAAA2nB,IAGA9vB,MAAA4H,kBAAA9G,KAAAgU,SAAA8sB,cAAA95B,EAAA,CAAAyD,EAAA5C,KACA,YAAAA,IACA4C,EAAA9C,SACA3H,KAAA+gC,eAAA/R,GACA9vB,MAAA8I,GAAA2X,cAAAzgB,MAAAS,EAAA,MAAAK,KAAAgU,SAAAgtB,yBAEA9hC,MAAA8I,GAAAC,aAAA/I,MAAAS,EAAA,MAAAK,KAAAgU,SAAAitB,0BAMAC,qBAAA,SAAAC,GACA,KAAAnhC,KAAAgU,SAAAksB,UAAAlgC,KAAA4/B,YAAA5/B,KAAAgU,SAAAksB,UAAA,CAKA,IAAAS,EAAAhiC,EAAAwiC,EAAAjL,QAAAzc,QAAA,MAEAzZ,KAAAohC,kBAAAT,IACA3gC,KAAAqhC,WAAAV,KAIAS,kBAAA,SAAAT,GACA,IAAA17B,EAAAjF,KAAAshC,YAAAX,GACA,OAAA9pB,QAAA3X,MAAAS,EAAA,MAAAK,KAAAgU,SAAAutB,qBAAA,CAAAt8B,KAAAA,MAGAo8B,WAAA,SAAAV,GACA,IAAA35B,EAAA,CACA6O,GAAA7V,KAAAwhC,UAAAb,IAGAzhC,MAAA4H,kBAAA9G,KAAAgU,SAAAytB,aAAAz6B,EAAA,CAAAyD,EAAA5C,KACA,YAAAA,GACA7H,KAAA0hC,yBAAAj3B,EAAAk2B,MAKAe,yBAAA,SAAAj3B,EAAAk2B,GACA,IAAA9qB,EAAA7V,KAAAwhC,UAAAb,GACA17B,EAAAjF,KAAAshC,YAAAX,GAEAl2B,EAAA9C,SACA3H,KAAA6/B,QACA7/B,KAAA6/B,OAAAzX,YAAAuY,GAGAA,EAAArmB,SACAta,KAAA4/B,aACA5/B,KAAAugC,WACAvgC,KAAA2hC,aAAA9rB,GAEA3W,MAAA8I,GAAA2X,cAAAzgB,MAAAS,EAAA,MAAAK,KAAAgU,SAAA4tB,qBAAA,CAAA38B,KAAAA,MAEA/F,MAAA8I,GAAAC,aAAA/I,MAAAS,EAAA,MAAAK,KAAAgU,SAAA6tB,kBAAA,CAAA58B,KAAAA,MAIA87B,eAAA,SAAA/R,GACAhvB,KAAAgU,SAAA+sB,eAAA/R,IAGA2S,aAAA,SAAA9rB,GACA7V,KAAAgU,SAAA2tB,aAAA9rB,IAGA2rB,UAAA,SAAAb,GACA,OAAAA,EAAAzyB,KAAAlO,KAAAgU,SAAA6sB,cAGAS,YAAA,SAAAX,GACA,OAAAzhC,MAAAiE,WAAAw9B,EAAAzyB,KAAAlO,KAAAgU,SAAA8tB,iBAGAvB,SAAA,WAWA,GATA,IAAAvgC,KAAA4/B,YACA5/B,KAAA+/B,OAAA1hB,OACAre,KAAA8/B,SAAA1pB,YAAA,YAEApW,KAAA+/B,OAAAlF,OACA76B,KAAA8/B,SAAAhuB,SAAA,WAIA9R,KAAAgU,SAAAskB,SAAA,CACA,IAAAyJ,EAAA/hC,KAAA+/B,OAAAnqB,KAAA,SAEA,IAAA5V,KAAA4/B,WACAmC,EAAAjwB,SAAA,YAEAiwB,EAAA3rB,YAAA,YAKApW,KAAAgU,SAAAksB,UAAAlgC,KAAA4/B,YAAA5/B,KAAAgU,SAAAksB,SACAlgC,KAAAggC,YAAAluB,SAAA,YAEA9R,KAAAggC,YAAA5pB,YAAA,YAIApW,KAAAgU,SAAAguB,qBACAhiC,KAAAgU,SAAA0sB,UAAA1gC,KAAA4/B,YAAA5/B,KAAAgU,SAAA0sB,SACA/hC,EAAAqB,KAAAgU,SAAAguB,oBAAAlwB,SAAA,UAEAnT,EAAAqB,KAAAgU,SAAAguB,oBAAA5rB,YAAA,aAIA,CACAoF,SAAA,CACA4kB,cAAA,KACAD,gBAAA,KACA6B,mBAAA,KACAnB,YAAA,UACAiB,cAAA,YACAxJ,UAAA,EACA2H,gBAAA,EACAC,SAAA,EACAQ,SAAA,KACAI,cAAA,KACAW,aAAA,KACAT,sBAAA9hC,MAAAS,EAAA,MAAA,oBACAshC,mBAAA/hC,MAAAS,EAAA,MAAA,4BACA4hC,qBAAAriC,MAAAS,EAAA,MAAA,6CACAiiC,qBAAA1iC,MAAAS,EAAA,MAAA,qBACAkiC,kBAAA3iC,MAAAS,EAAA,MAAA,6BACAohC,eAAApiC,EAAA0hB,KACAshB,aAAAhjC,EAAA0hB,QC/MAnhB,MAAA+iC,YAAA/iC,MAAAoV,kBAAArV,OAAA,CACAijC,aAAA,EAEAtlB,WAAA,SAAAnS,EAAAiU,GAGA,GAFA1e,KAAA4vB,KAAAnlB,EAAAiU,GAEA1e,KAAA0V,SAAA1O,KAAA,MAAA,CACA,IAAAm7B,EAAAniC,KAAAgb,iBAAApF,KAAA,+CAEAusB,EAAA7hC,QACAN,KAAA0c,YAAAylB,EAAA,QAAA,qBAKAC,gBAAA,WACA,IAAAljC,MAAAmjC,iBAAAriC,KAAA0V,SAAA1O,KAAA,MAAA,CACAs7B,OAAA,KACAtiC,KAAAkiC,aAAA,EACAliC,KAAAye,iBAKAd,UAAA,WACA3d,KAAAkiC,aAAAliC,KAAAgU,SAAAoM,aACApgB,KAAAgU,SAAAoM,aAAA6F,iBACAjmB,KAAAkiC,aAAAliC,KAAAgU,SAAA5P,OACApE,KAAAgU,SAAA5P,MAAAm+B,iBAAAviC,KAAA0V,SAAA1O,KAAA,OAGAhH,KAAA4vB,UAKA1wB,MAAA4U,2BAAA,yBAAA5U,MAAA+iC,aClCA/iC,MAAAmjC,iBAAAj9B,QAAA03B,MAAA79B,OAAA,CAEAmf,MAAA,KACAtB,QAAA,KACA0lB,YAAA,KACAC,SAAA,KACAxnB,WAAA,KACAynB,YAAA,KACAxnB,SAAA,KACAynB,iBAAA,KACAC,YAAA,KACAC,gBAAA,KACAC,eAAA,KAGAC,OAAA,KACAC,MAAA,KACAC,SAAA,KACAC,WAAA,KACArwB,KAAA,KACAswB,eAAA,KACAC,QAAA,KACAC,kBAAA,KACAC,eAAA,KACAC,YAAA,KACAC,cAAA,KACAC,iBAAA,KAGAC,qBAAA,EACAC,iBAAA,EACAC,cAAA,EACAC,eAAA,EACAC,mBAAA,KACAC,UAAA,EAGAC,qBAAA,EACAC,YAAA,GACAC,QAAA,KACAC,UAAA,KACAC,iBAAA,EACAC,gBAAA,EACAC,eAAA,EACAC,eAAA,EACAC,eAAA,EACAC,cAAA,EACAC,aAAA,EACAC,YAAA,EACAC,cAAA,EACAC,YAAA,EACAC,SAAA,GACAC,iBAAA,EACAC,gBAAA,KACAC,aAAA,KACAC,qBAAA,KACAC,gBAAA,EACAC,eAAA,KACAC,oBAAA,EACAC,sBAAA,YACAC,yBAAA,EAGAC,YAAA,KACAC,cAAA,KAEAlqB,KAAA,SAAA2oB,EAAAlwB,GACAhU,KAAAmkC,UAAA5hC,KAAAmjC,MAEA1lC,KAAA8Y,YAAA9E,EAAA9U,MAAAmjC,iBAAA7mB,UAEA,OAAAxb,KAAAgU,SAAA2xB,uBACA3lC,KAAAgU,SAAA2xB,qBAAAzmC,MAAA0mC,WAGA5lC,KAAAkkC,QAAAA,EACAlkC,KAAA8kC,SAAA,CAAAe,EAAA,EAAAC,EAAA,GAGA9lC,KAAA4S,WAAAjU,EAAA,kDAAA2P,SAAAlJ,QAAAsN,MACA1S,KAAAoe,MAAAzf,EAAA,4BAAA2P,SAAAtO,KAAA4S,YACA5S,KAAA8c,QAAAne,EAAA,yBAAA2P,SAAAtO,KAAA4S,YAEA5S,KAAA4vB,KAAA5vB,KAAA4S,WAAA5S,KAAAgU,UAEAhU,KAAAyiC,SAAA9jC,EAAA,gCAAA2P,SAAAtO,KAAA8c,SACA9c,KAAAib,WAAAtc,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,aACA9W,KAAAnE,MAAAS,EAAA,MAAA,YACA2O,SAAAtO,KAAAyiC,UACAziC,KAAA0iC,YAAA/jC,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,0BACA9W,KAAAnE,MAAAS,EAAA,MAAA,UACA2O,SAAAtO,KAAAyiC,UAEAziC,KAAAgU,SAAA+xB,mBACA/lC,KAAAkb,SAAAvc,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,uBACA9W,KAAAnE,MAAAS,EAAA,MAAA,yBACA2O,SAAAtO,KAAAyiC,UACAziC,KAAA0c,YAAA1c,KAAAkb,SAAA,WAAAlb,KAAAgmC,YAGAhmC,KAAA0c,YAAA1c,KAAA0iC,YAAA,WAAA1iC,KAAAgmC,WACAhmC,KAAA0c,YAAA1c,KAAAib,WAAA,WAAAjb,KAAAqe,MACAre,KAAAqoB,eAAAroB,KAAAke,OAAA,SAEAle,KAAAilC,aAAAjlC,KAAAimC,kBAEA/mC,MAAA4H,kBAAA,sBAAA,CAAAo9B,QAAAA,GAAAlkC,KAAAkmC,WAAA/pB,KAAAnc,QAMAimC,gBAAA,WACA,IAAAE,EAAA/gC,QAAAuV,KAAA8V,IAAA,GAAA2V,gBAAAC,YACAC,EAAAlhC,QAAAuV,KAAA8V,IAAA,GAAA2V,gBAAAG,aAEA,OAAA51B,KAAA+Y,IAAA4c,EAAAH,IAAAt6B,OAAA26B,iBAAA,EAAA,EAAA,IAQAN,WAAA,SAAAl/B,GACAA,EAAAjI,MACAmJ,MAAAhJ,MAAAS,EAAA,MAAA,qCAGAK,KAAAoe,MAAArf,KAAAiI,EAAAjI,MACAiB,KAAAymC,MAAA9nC,EAAA,WAAAqB,KAAAoe,OACApe,KAAA0mC,gBAAA/nC,EAAA,SAAAqB,KAAAoe,OACApe,KAAA2mC,OAAAhoC,EAAA,QAAAqB,KAAA0mC,iBACA1mC,KAAAwiC,YAAA7jC,EAAA,gCAAAqB,KAAAoe,OACApe,KAAA2iC,iBAAAhkC,EAAA,0BAAAqB,KAAAoe,OACApe,KAAA0kC,aAAA1kC,KAAA2iC,iBAAAzL,cACAl3B,KAAA2kC,YAAA3kC,KAAA2iC,iBAAAiE,aAEA5mC,KAAA6mC,eAEA7mC,KAAAid,wBAGAjd,KAAA+iC,OAAA,IAAA+D,OAAAC,aAAA,gBAGA/mC,KAAA6iC,gBAAAlkC,EAAA,mBAAAqB,KAAA2iC,kBACA3iC,KAAA6iC,gBAAAmE,MAAAhnC,KAAA2kC,aACA3kC,KAAA6iC,gBAAA5X,OAAAjrB,KAAA0kC,cAEA1kC,KAAA+iC,OAAAkE,qBAAA,EACAjnC,KAAAwlC,YAAA,KACApgC,QAAA2Z,sBAAA/e,KAAA+iC,OAAAmE,UAAA/qB,KAAAnc,KAAA+iC,UAIA,IAAAoE,EAAAjoC,MAAAmH,aAAA,oBAAA,CACA69B,QAAAlkC,KAAAkkC,QACAhuB,KAAAlW,KAAAilC,aACAd,UAAAnkC,KAAAmkC,YAIA2C,OAAAM,MAAAC,QAAAF,EAAAG,IACAtnC,KAAAgjC,MAAAsE,EACAtnC,KAAAgjC,MAAAuE,IAAA,CACAC,QAAA,SACAC,QAAA,SACAhwB,KAAAzX,KAAA2kC,YAAA,EACAxN,IAAAn3B,KAAA0kC,aAAA,IAEA1kC,KAAA+iC,OAAApmB,IAAA3c,KAAAgjC,OAEAhjC,KAAA6jC,eAAA7jC,KAAAgjC,MAAA0E,YACA1nC,KAAA4jC,cAAA5jC,KAAAgjC,MAAA2E,WACA3nC,KAAA+jC,UAAA,EAEA/jC,KAAAklC,qBAAAllC,KAAA4nC,2BAGA5nC,KAAA6nC,oCACA7nC,KAAA8nC,4BAGA,IAAAC,EAAA,CACAC,gBAAAhoC,KAAA4nC,2BACAK,QAAA,EACAC,QAAA,GAGAC,GAAA,EACA,GAAAnhC,EAAAk8B,WAAA,CAEA,IAAAkF,EAAAphC,EAAAk8B,WAGAmF,EAAAN,EAAAC,gBAAAhB,MAAAoB,EAAAvC,EACAyC,EAAAP,EAAAC,gBAAA/c,OAAAmd,EAAAtC,EAEAiC,EAAAE,QAAAI,EAAAN,EAAAC,gBAAAhB,MAAA,EACAe,EAAAG,QAAAI,EAAAP,EAAAC,gBAAA/c,OAAA,EAEAkd,GAAA,EAGAnoC,KAAAuoC,qBAAAR,GAEAI,GACAnoC,KAAAwoC,oBAGAxoC,KAAAyoC,kBACAzoC,KAAA0oC,oBAGA1oC,KAAA2oC,uBAGA3oC,KAAA0c,YAAA1c,KAAA6iC,gBAAA,sBAAA7iC,KAAA4oC,kBACA5oC,KAAA0c,YAAA1c,KAAA6iC,gBAAA,uBAAA7iC,KAAA6oC,kBACA7oC,KAAA0c,YAAA1c,KAAA6iC,gBAAA,mBAAA7iC,KAAA8oC,gBACA9oC,KAAA0c,YAAA1c,KAAA6iC,gBAAA,uBAAA7iC,KAAA+oC,iBAEA/oC,KAAAgpC,eAGAhpC,KAAAwlC,cAGAxlC,KAAAymC,MAAAlsB,QAAAtD,QAAA,YAOAgyB,aAAA,WACA,IAAAjpC,KAAAmlC,eAAA,CAIAnlC,KAAAmlC,gBAAA,EACAnlC,KAAAilC,aAAAjlC,KAAAimC,kBAGA,IAAAkB,EAAAjoC,MAAAmH,aAAA,oBAAA,CACA69B,QAAAlkC,KAAAkkC,QACAhuB,KAAAlW,KAAAilC,aACAd,UAAAnkC,KAAAmkC,YAGAnkC,KAAAgjC,MAAAkG,OAAA/B,EAAAG,IACAtnC,KAAA6jC,eAAAyD,EAAAI,YACA1nC,KAAA4jC,cAAA0D,EAAAK,WACA3nC,KAAAklC,qBAAA,CAAA8B,MAAAhnC,KAAA6jC,eAAA5Y,OAAAjrB,KAAA4jC,eACA5jC,KAAAid,wBACAjd,KAAAwlC,cACAxlC,KAAAmlC,gBAAA,MAOAloB,sBAAA,WACA,GAAAjd,KAAA4S,WAAA,CAKA,IAAAg0B,EAAA/6B,OAAA+6B,WACA1P,EAAArrB,OAAAqrB,YAEAl3B,KAAA4S,WAAAoY,IAAA,CACAgc,MAAAJ,EACAuC,YAAAvC,EACAnvB,KAAA,EAEAwT,OAAAiM,EACAkS,aAAAlS,EACAC,IAAA,IAGAn3B,KAAAoe,MAAA4M,IAAA,CACAC,OAAAiM,EAAA,KAGA0P,EAAA1P,EACAl3B,KAAA4S,WAAAd,SAAA,YAEA9R,KAAA4S,WAAAwD,YAAA,YAGApW,KAAA8iC,gBACA9iC,KAAA8iC,eAAA9X,IAAA,CACAvT,KAAAzX,KAAA8iC,eAAAxe,SAAA0iB,QAAA,EAAAhnC,KAAA8iC,eAAAkE,QAAA,EAAA,KACA7P,IAAAn3B,KAAA8iC,eAAAxe,SAAA2G,SAAA,EAAAjrB,KAAA8iC,eAAA7X,SAAA,EAAA,OAKAjrB,KAAA2iC,kBAAA3iC,KAAAgjC,OACAhjC,KAAA8nC,8BAOAA,0BAAA,WAEA,IAAAuB,EAAA,CACArC,MAAAhnC,KAAA2kC,YACA1Z,OAAAjrB,KAAA0kC,cAGA1kC,KAAA0kC,aAAA1kC,KAAA2iC,iBAAAzL,cACAl3B,KAAA2kC,YAAA3kC,KAAA2iC,iBAAAiE,aAEA5mC,KAAA+iC,OAAAuG,cAAA,CACAtC,MAAAhnC,KAAA2kC,YACA1Z,OAAAjrB,KAAA0kC,eAGA,IAAA6E,EAAAvpC,KAAA4nC,2BAIA,GAAA,SAAA5nC,KAAAikC,YAAA,CACAjkC,KAAA+jC,UAAA/jC,KAAAwpC,kBAAAxpC,KAAA4nC,4BACA,IAAA6B,EAAAzpC,KAAA0pC,sBAAA1pC,KAAA8jC,oBACA9jC,KAAA6nC,oCACA7nC,KAAA2pC,mBAAAF,QAGAzpC,KAAA+jC,UAAA/jC,KAAA4pC,oBAAA5pC,KAAA4nC,4BAAA5nC,KAAA6kC,YAIA7kC,KAAA6pC,iBAAAR,GACArpC,KAAA8pC,sBACA9pC,KAAA+pC,sBAAAV,GACArpC,KAAAgqC,aAEAhqC,KAAAwlC,eAEA+D,EAAAvC,MAAAhnC,KAAAklC,qBAAA8B,MAAA,KAAAuC,EAAAte,OAAAjrB,KAAAklC,qBAAAja,OAAA,MACAjrB,KAAAipC,gBAUAY,iBAAA,SAAAR,GACArpC,KAAAgjC,MAAAuE,IAAA,CACA9vB,KAAAzX,KAAAgjC,MAAAvrB,MAAA4xB,EAAArC,MAAAhnC,KAAA2kC,aAAA,EACAxN,IAAAn3B,KAAAgjC,MAAA7L,KAAAkS,EAAApe,OAAAjrB,KAAA0kC,cAAA,KAOA+D,gBAAA,WACAzoC,KAAAijC,SAAA,IAAA6D,OAAAmD,KAAA,CACAjD,MAAAhnC,KAAAgjC,MAAAgE,MACA/b,OAAAjrB,KAAAgjC,MAAA/X,OACAif,KAAA,kBACA1C,QAAA,SACAC,QAAA,SACA0C,yBAAA,iBACA1yB,KAAAzX,KAAAgjC,MAAAvrB,KACA0f,IAAAn3B,KAAAgjC,MAAA7L,MAEAn3B,KAAA+iC,OAAApmB,IAAA3c,KAAAijC,UACAjjC,KAAAwlC,eAMAgD,kBAAA,WACA,IAAAzD,EAAA/kC,KAAA+kC,gBACAqF,EAAApqC,KAAA4nC,2BAAAZ,MAAAjC,EAAAiD,gBAAAhB,MAEAqD,EAAAtF,EAAAkD,QAAAmC,EAAApqC,KAAA+jC,UAAA/jC,KAAA6kC,YACAyF,EAAAvF,EAAAmD,QAAAkC,EAAApqC,KAAA+jC,UAAA/jC,KAAA6kC,YAGAwF,GAAArqC,KAAAgjC,MAAAvrB,KACA6yB,GAAAtqC,KAAAgjC,MAAA7L,IAEA,IAAAoT,EAAA,EACAC,EAAA,EAGAxqC,KAAAijC,UAAA,IAAA8B,EAAAkD,SAAA,IAAAlD,EAAAmD,UACA,SAAAloC,KAAAikC,aACAsG,EAAAvqC,KAAAijC,SAAAxrB,KAAAzX,KAAAgjC,MAAAvrB,KACA+yB,EAAAxqC,KAAAijC,SAAA9L,IAAAn3B,KAAAgjC,MAAA7L,MAGAoT,EAAAvqC,KAAAojC,QAAA3rB,KAAAzX,KAAAgjC,MAAAvrB,KACA+yB,EAAAxqC,KAAAojC,QAAAjM,IAAAn3B,KAAAgjC,MAAA7L,KAIAkT,GAAAE,EACAD,GAAAE,EAGAzF,EAAAkD,SAAAsC,GAAAH,EAAApqC,KAAA+jC,UAAA/jC,KAAA6kC,aACAE,EAAAmD,SAAAsC,GAAAJ,EAAApqC,KAAA+jC,UAAA/jC,KAAA6kC,cAGA7kC,KAAAkjC,WAAA,IAAA4D,OAAA2D,MAAA,CACA,IAAA3D,OAAA4D,OAAA,CAAAC,OAAA,EAAAT,KAAA,kBAAAU,YAAA,EAAAC,OAAA,wBAAApzB,KAAA,EAAA0f,IAAA,EAAAqQ,QAAA,SAAAC,QAAA,WACA,IAAAX,OAAA4D,OAAA,CAAAC,OAAA,EAAAT,KAAA,sBAAAU,YAAA,EAAAC,OAAA,wBAAApzB,KAAA,EAAA0f,IAAA,EAAAqQ,QAAA,SAAAC,QAAA,YACA,CACAD,QAAA,SACAC,QAAA,SACAhwB,KAAA4yB,EACAlT,IAAAmT,IAGAtqC,KAAAuoC,qBAAAxD,GACA/kC,KAAA+iC,OAAApmB,IAAA3c,KAAAkjC,aAMA4H,iBAAA,WACA9qC,KAAAkjC,YAGAljC,KAAA+iC,OAAAzoB,OAAAta,KAAAkjC,YACAljC,KAAAkjC,WAAA,MAHAljC,KAAAwoC,oBAMAxoC,KAAAwlC,eAMAsE,oBAAA,WACA,GAAA9pC,KAAAijC,SAAA,CACA,IAAA8H,EAAA,CACAtzB,KAAAzX,KAAA2kC,YAAA,EACAxN,IAAAn3B,KAAA0kC,aAAA,GAIA,GAAA,SAAA1kC,KAAAikC,YACA8G,EAAA/D,MAAAhnC,KAAA2kC,YACAoG,EAAA9f,OAAAjrB,KAAA0kC,kBAGA,GAAA1kC,KAAA4kC,aAAA,CAEA,IAAAoG,EAAAhrC,KAAA4kC,aAIAwF,EAFApqC,KAAA4nC,2BAEAZ,MAAAgE,EAAAhD,gBAAAhB,MAGA+D,EAAA/D,MAAAgE,EAAAhE,MAAAoD,EAAApqC,KAAA+jC,UACAgH,EAAA9f,OAAA+f,EAAA/f,OAAAmf,EAAApqC,KAAA+jC,UAGA/jC,KAAAgjC,MAAAuE,IAAA,CACA9vB,KAAAzX,KAAA2kC,YAAA,EAAAqG,EAAA/C,QAAAmC,EACAjT,IAAAn3B,KAAA0kC,aAAA,EAAAsG,EAAA9C,QAAAkC,SAGAzrC,EAAAM,OAAA8rC,EAAA/qC,KAAA4nC,4BAGA5nC,KAAAijC,SAAAsE,IAAAwD,KAIAhB,sBAAA,SAAAV,GACA,GAAArpC,KAAAkjC,WAAA,CACA,IAAA+E,EAAAjoC,KAAAkjC,WAAAzrB,KAAAzX,KAAA2kC,YAAA,EACAuD,EAAAloC,KAAAkjC,WAAA/L,IAAAn3B,KAAA0kC,aAAA,EAEAuG,EAAAjrC,KAAAgjC,MAAAgE,MAEAkE,EADAlrC,KAAA4nC,2BAAAZ,MAAAhnC,KAAA+jC,UACAkH,EAAAjrC,KAAA6kC,YAEAoD,IAAAoB,EAAArC,MAAAhnC,KAAA2kC,aAAA,EACAuD,IAAAmB,EAAApe,OAAAjrB,KAAA0kC,cAAA,EAEAuD,GAAAiD,EACAhD,GAAAgD,EAEAlrC,KAAAkjC,WAAAqE,IAAA,CACA9vB,KAAAzX,KAAA2kC,YAAA,EAAAsD,EACA9Q,IAAAn3B,KAAA0kC,aAAA,EAAAwD,MAQAiD,sBAAA,WACA,OAAAnrC,KAAA2jC,iBAAA,KAAA,GAMAiE,yBAAA,WAiBA,YAhBA,IAAA5nC,KAAA4nC,yBAAAwD,IACAprC,KAAA4nC,yBAAAwD,EAAA,IAGAprC,KAAA4nC,yBAAAwD,EAAAC,WAAArrC,KAAA6jC,eAAA7jC,KAAA4jC,cACA5jC,KAAA4nC,yBAAAwD,EAAAE,YAAAtrC,KAAA0kC,aAAA1kC,KAAA2kC,YAEA3kC,KAAA4nC,yBAAAwD,EAAAL,WAAA,GACA/qC,KAAA4nC,yBAAAwD,EAAAC,WAAArrC,KAAA4nC,yBAAAwD,EAAAE,aACAtrC,KAAA4nC,yBAAAwD,EAAAL,WAAA9f,OAAAta,KAAAohB,IAAA/xB,KAAA0kC,aAAA1kC,KAAA6jC,gBACA7jC,KAAA4nC,yBAAAwD,EAAAL,WAAA/D,MAAAr2B,KAAAK,MAAAhR,KAAA4jC,eAAA5jC,KAAA6jC,eAAA7jC,KAAA4nC,yBAAAwD,EAAAL,WAAA9f,WAEAjrB,KAAA4nC,yBAAAwD,EAAAL,WAAA/D,MAAAr2B,KAAAohB,IAAA/xB,KAAA2kC,YAAA3kC,KAAA4jC,eACA5jC,KAAA4nC,yBAAAwD,EAAAL,WAAA9f,OAAAta,KAAAK,MAAAhR,KAAA6jC,gBAAA7jC,KAAA4nC,yBAAAwD,EAAAL,WAAA/D,MAAAhnC,KAAA4jC,iBAGA5jC,KAAA4nC,yBAAAwD,EAAAL,YAMAf,WAAA,gBACA,IAAAhqC,KAAAgqC,WAAAoB,IACAprC,KAAAgqC,WAAAoB,EAAA,IAGAprC,KAAAgqC,WAAAoB,EAAApD,gBAAAhoC,KAAA4nC,2BACA5nC,KAAAgjC,MAAAuE,IAAA,CACAP,MAAAhnC,KAAAgqC,WAAAoB,EAAApD,gBAAAhB,MAAAhnC,KAAA+jC,UACA9Y,OAAAjrB,KAAAgqC,WAAAoB,EAAApD,gBAAA/c,OAAAjrB,KAAA+jC,aAOA4E,qBAAA,WAEA3oC,KAAA0c,YAAA1c,KAAAymC,MAAA,QAAAzmC,KAAAurC,iBAGAvrC,KAAA0c,YAAA/d,EAAA,gBAAA,QAAAqB,KAAA8qC,kBAGA9qC,KAAA0c,YAAA/d,EAAA,gBAAA,SAAA,WACAqB,KAAAwrC,aAAA,OAEAxrC,KAAA0c,YAAA/d,EAAA,iBAAA,SAAA,WACAqB,KAAAwrC,YAAA,OAEAxrC,KAAA0c,YAAA/d,EAAA,kBAAA,SAAA,WACAqB,KAAAyrC,UAAA,QAEAzrC,KAAA0c,YAAA/d,EAAA,oBAAA,SAAA,WACAqB,KAAAyrC,UAAA,QAIAzrC,KAAA0rC,mBAAA,IAAAxsC,MAAAysC,eAAA,aAAA,CACAC,QAAA,KACA5rC,KAAA6rC,aAEAC,SAAAC,IACA/rC,KAAAgsC,WAAAD,IAEAE,MAAA,KACAjsC,KAAAksC,YACAlsC,KAAAmsC,uCAKAnsC,KAAA0c,YAAAtX,QAAAuV,KAAA,WAAA,SAAAtB,GACAA,EAAA2G,UAAA5a,QAAAgnC,YACApsC,KAAAykC,cAAA,MAGAzkC,KAAA0c,YAAAtX,QAAAuV,KAAA,SAAA,SAAAtB,GACAA,EAAA2G,UAAA5a,QAAAgnC,YACApsC,KAAAykC,cAAA,MAIAzkC,KAAA0c,YAAA/d,EAAA,kCAAAqB,KAAA4S,YAAA,QAAA5S,KAAAqsC,wBACArsC,KAAA0c,YAAA/d,EAAA,qBAAAqB,KAAA4S,YAAA,QAAA5S,KAAAssC,yBACAtsC,KAAA0c,YAAA/d,EAAA,0CAAAqB,KAAA4S,YAAA,QAAA5S,KAAAusC,yBAQAF,uBAAA,SAAAhzB,GACA,IAAAmzB,EAAA7tC,EAAA0a,EAAAE,eAAAvS,KAAA,cACAivB,EAAAt3B,EAAA0a,EAAAE,eAIA,GAHA0c,EAAAnX,WAAA1I,YAAA,UACA6f,EAAAnkB,SAAA,UAEA,UAAA06B,EAGA,OAFAxsC,KAAAysC,6BACAzsC,KAAAusC,yBAIAvsC,KAAA0sC,wBAEA1sC,KAAA2sC,sBAAAH,GACAxsC,KAAA4sC,6BAQAN,wBAAA,SAAAjzB,GACA,GAAAA,EAAAE,cAAApU,QAAAnF,KAAAslC,sBAAA,CAGAtlC,KAAAslC,sBAAAjsB,EAAAE,cAAApU,MAIA,IAFA,IAAA0nC,EAAAluC,EAAA,mBAAAqB,KAAA4S,YAEAlT,EAAA,EAAAA,EAAAmtC,EAAAvsC,OAAAZ,IAAA,CACA,IAAAotC,EAAAnuC,EAAAkuC,EAAAntC,IACAotC,EAAA9lC,KAAA,aAAA,EAAA8lC,EAAA9lC,KAAA,eACA8lC,EAAA/tC,KAAA+tC,EAAA/tC,OAAAoC,MAAA,KAAA4rC,UAAAtsC,KAAA,MAGAosC,EAAAhoB,OAAA,WAAA3Y,UAMAqgC,uBAAA,WACA,IAAAC,EAAAxsC,KAAAgtC,uBAEAR,EAAAS,EAAA,GAAAT,EAAAU,EAAA,IACAltC,KAAA2sC,sBAAAH,EAAAS,EAAAT,EAAAU,GACAltC,KAAA4sC,8BASAI,qBAAA,WACA,IAAAC,EAAAE,WAAAxuC,EAAA,wBAAA2F,OACA4oC,EAAAC,WAAAxuC,EAAA,wBAAA2F,OACA,MAAA,CACA2oC,EAAAtY,MAAAsY,GAAA,EAAAA,EACAC,EAAAvY,MAAAuY,GAAA,EAAAA,IAUAE,qBAAA,SAAAH,EAAAC,GACAvuC,EAAA,wBAAA2F,IAAA6oC,WAAAF,IACAtuC,EAAA,wBAAA2F,IAAA6oC,WAAAD,KAMAR,sBAAA,WACA1sC,KAAAulC,yBAAA,EACA5mC,EAAA,mCAAAqB,KAAA4S,YAAAd,SAAA,UACAnT,EAAA,mCAAAqB,KAAA4S,YAAAwD,YAAA,UACAzX,EAAA,eAAAqB,KAAA4S,YAAAwD,YAAA,WAMAq2B,sBAAA,WACAzsC,KAAAulC,0BAIAvlC,KAAAulC,yBAAA,EACA5mC,EAAA,mCAAAqB,KAAA4S,YAAAwD,YAAA,UACAzX,EAAA,mCAAAqB,KAAA4S,YAAAd,SAAA,UACAnT,EAAA,eAAAqB,KAAA4S,YAAAd,SAAA,YAQAy5B,gBAAA,SAAAlyB,GACA,IAAArZ,KAAAgkC,oBAAA,CACA,IAAAqJ,EAAA1uC,EAAA0a,EAAAE,eACAuJ,EAAAuqB,EAAArmC,KAAA,QACAhH,KAAAymC,MAAArwB,YAAA,YACAi3B,EAAAv7B,SAAA,YACA9R,KAAAstC,SAAAxqB,KASAwqB,SAAA,SAAAxqB,GACA9iB,KAAAikC,cAAAnhB,IAIA9iB,KAAA2mC,OAAA70B,SAAA,UACA9R,KAAA2mC,OAAA9hB,OAAA,eAAA/B,EAAA,MACA1M,YAAA,UAEA,WAAA0M,EACA9iB,KAAAutC,eAEAvtC,KAAAwtC,gBAIAxtC,KAAAid,wBAGA,SAAAjd,KAAAikC,aAAA,SAAAnhB,EACA9iB,KAAAytC,kBACA,SAAAztC,KAAAikC,aAAA,SAAAnhB,GACA9iB,KAAA0tC,iBAIA1tC,KAAAikC,YAAAnhB,IAWA4lB,kBAAA,SAAAsC,QACA,IAAAhrC,KAAA0oC,kBAAA0C,IACAprC,KAAA0oC,kBAAA0C,EAAA,IAIAJ,EACAhrC,KAAA4kC,aAAAoG,EACAhrC,KAAAojC,SACApjC,KAAA0oC,kBAAA0C,EAAAuC,WAAA,EAAA3tC,KAAA+jC,UAEA/jC,KAAA4kC,aAAA,CACAqD,SAAAjoC,KAAAojC,QAAA3rB,KAAAzX,KAAAgjC,MAAAvrB,MAAAzX,KAAA0oC,kBAAA0C,EAAAuC,WACAzF,SAAAloC,KAAAojC,QAAAjM,IAAAn3B,KAAAgjC,MAAA7L,KAAAn3B,KAAA0oC,kBAAA0C,EAAAuC,WACA1iB,OAAAjrB,KAAAojC,QAAAnY,OAAAjrB,KAAA0oC,kBAAA0C,EAAAuC,WACA3G,MAAAhnC,KAAAojC,QAAA4D,MAAAhnC,KAAA0oC,kBAAA0C,EAAAuC,WACA3F,gBAAAhoC,KAAA4nC,8BAGA5nC,KAAA0oC,kBAAA0C,EAAAL,WAAA/qC,KAAA4nC,2BACA5nC,KAAA4kC,aAAA,CACAqD,QAAA,EACAC,QAAA,EACAjd,OAAAjrB,KAAA0oC,kBAAA0C,EAAAL,WAAA9f,OACA+b,MAAAhnC,KAAA0oC,kBAAA0C,EAAAL,WAAA/D,MACAgB,gBAAAhoC,KAAA0oC,kBAAA0C,EAAAL,cAQAxC,qBAAA,SAAAyC,QACA,IAAAhrC,KAAAuoC,qBAAA6C,IACAprC,KAAAuoC,qBAAA6C,EAAA,IAIAJ,EACAhrC,KAAA+kC,gBAAAiG,EACAhrC,KAAAkjC,aACAljC,KAAAuoC,qBAAA6C,EAAAuC,WAAA,EAAA3tC,KAAA+jC,UACA/jC,KAAA+kC,gBAAA,CACAkD,SAAAjoC,KAAAkjC,WAAAzrB,KAAAzX,KAAAgjC,MAAAvrB,MAAAzX,KAAAuoC,qBAAA6C,EAAAuC,WAAA3tC,KAAA6kC,YACAqD,SAAAloC,KAAAkjC,WAAA/L,IAAAn3B,KAAAgjC,MAAA7L,KAAAn3B,KAAAuoC,qBAAA6C,EAAAuC,WAAA3tC,KAAA6kC,YACAmD,gBAAAhoC,KAAA4nC,8BAUA4D,YAAA,SAAAoC,GACA,IAAA5tC,KAAAgkC,oBAAA,CAEA,GAAA,KAAA4J,IAAA,KAAAA,EACA,OAAA,EAGA5tC,KAAAgkC,qBAAA,EACAhkC,KAAA2jC,kBAAAiK,EAGA5tC,KAAA2jC,iBAAAzhC,UAAAlC,KAAA2jC,iBAAA,KAAA,IAAA,IAEA,IAEAkK,EAFAC,EAAA9tC,KAAAgjC,MAAA+K,MAAAH,EACAI,EAAAhuC,KAAA4nC,2BAIAiG,EADA7tC,KAAAmrC,wBACAnrC,KAAA4pC,oBAAA,CAAA3e,OAAA+iB,EAAAhH,MAAAA,MAAAgH,EAAA/iB,SAEAjrB,KAAA4pC,oBAAAoE,GAKAhuC,KAAA+jC,UAAA8J,IACAA,EAAA7tC,KAAA+jC,WAGA,IAAAkK,EAAA,CACAF,MAAA,KAAAH,EAAA,OAAA,QAGAM,EAAA,CACAH,MAAAD,EACA9G,MAAAgH,EAAAhH,MAAA6G,EACA5iB,OAAA+iB,EAAA/iB,OAAA4iB,GAGAhJ,EAAA,EACA7kC,KAAA6kC,YAAA,GACAA,EAAA,EAAA7kC,KAAA6kC,YACA7kC,KAAA6kC,YAAA,IAEA7kC,KAAAijC,SAAA+D,MAAAhnC,KAAA0kC,aACAG,EAAA7kC,KAAA0kC,aAAA1kC,KAAAijC,SAAA+D,MACAhnC,KAAAijC,SAAAhY,OAAAjrB,KAAA2kC,cACAE,EAAA7kC,KAAA2kC,YAAA3kC,KAAAijC,SAAAhY,QAEAjrB,KAAA6kC,YAAAA,GAGAA,EAAA,IACAqJ,EAAAlH,OAAAnC,EACAqJ,EAAAjjB,QAAA4Z,GAGA,IAAAmG,EAAAhrC,KAAA4kC,aAGA2F,EAAAS,EAAA/C,QACAuC,EAAAQ,EAAA9C,QACAiG,EAAAP,GAAAj9B,KAAAy9B,GAAA,KAIAC,EAAA9D,EAAA55B,KAAA29B,IAAAH,GAAA3D,EAAA75B,KAAA49B,IAAAJ,GACAK,EAAAjE,EAAA55B,KAAA49B,IAAAJ,GAAA3D,EAAA75B,KAAA29B,IAAAH,GAEA/D,EAAA4D,EAAAhH,MAAAgE,EAAAhD,gBAAAhB,MAEAyH,EAAAJ,EAAAjE,EAAApqC,KAAA+jC,UAAA/jC,KAAA6kC,YACA6J,EAAAF,EAAApE,EAAApqC,KAAA+jC,UAAA/jC,KAAA6kC,YAEAqJ,EAAAz2B,KAAAzX,KAAA2kC,YAAA,EAAA8J,EACAP,EAAA/W,IAAAn3B,KAAA0kC,aAAA,EAAAgK,EAEA1D,EAAA/C,QAAAoG,EACArD,EAAA9C,QAAAsG,EAEA,IAAAG,EAAA3D,EAAAhE,MACAgE,EAAAhE,MAAAgE,EAAA/f,OACA+f,EAAA/f,OAAA0jB,EAEA3uC,KAAA0oC,kBAAAsC,GAEAhrC,KAAAkjC,YACAljC,KAAA+iC,OAAAzoB,OAAAta,KAAAkjC,YAGAljC,KAAAijC,SAAA2L,QAAAX,EAAA,CACA72B,SAAApX,KAAAgU,SAAA66B,kBACAC,WAAA,KAEA,IAAAH,EAAA3uC,KAAAijC,SAAAhY,OAAA4Z,EACA7kC,KAAAijC,SAAAhY,OAAAjrB,KAAAijC,SAAA+D,MAAAnC,EACA7kC,KAAAijC,SAAA+D,MAAA2H,EACA3uC,KAAAijC,SAAAsE,IAAA,CAAAwG,MAAA,OAKA/tC,KAAAgjC,MAAA4L,QAAAV,EAAA,CACApC,SAAA9rC,KAAA+iC,OAAAmE,UAAA/qB,KAAAnc,KAAA+iC,QACA3rB,SAAApX,KAAAgU,SAAA66B,kBACAC,WAAA,KACA,IAAAC,EAAA5B,YAAAntC,KAAAgjC,MAAA+K,MAAA,KAAA,KACA/tC,KAAAgjC,MAAAuE,IAAA,CAAAwG,MAAAgB,IACA/uC,KAAAgkC,qBAAA,EACAhkC,KAAAkjC,YACAljC,KAAAgvC,yBAAApB,GACA5tC,KAAAgsC,WAAAhsC,KAAA0rC,oBACA1rC,KAAA+iC,OAAApmB,IAAA3c,KAAAkjC,aAEAljC,KAAAivC,gCAYAxD,UAAA,SAAAvS,GACA,IAAAl5B,KAAAgkC,oBAAA,CACAhkC,KAAAgkC,qBAAA,EAEAhkC,KAAAmrC,0BACAjS,EAAA,MAAAA,EAAA,IAAA,KAGAl5B,KAAAkjC,WACAljC,KAAA+iC,OAAAzoB,OAAAta,KAAAkjC,YAEAljC,KAAAivC,2BAGA,IAAAC,EAAA,CAAArJ,EAAA7lC,KAAA2kC,YAAA,EAAAmB,EAAA9lC,KAAA0kC,aAAA,GACA1kC,KAAA0rC,mBAAAyD,UAAAnvC,KAAA0jC,sBACA1jC,KAAA0jC,sBAAA1jC,KAAA0jC,qBACA,IAIA8G,EAAAD,EAJA6E,EAAA,CACArB,MAAA/tC,KAAA2jC,iBAAA3jC,KAAA0jC,sBAIAkB,EAAA5kC,KAAA4kC,aACAG,EAAA/kC,KAAA+kC,gBAGA,MAAA7L,GAAAl5B,KAAAmrC,yBAAA,MAAAjS,IAAAl5B,KAAAmrC,yBACAvG,EAAAqD,SAAArD,EAAAqD,QACAlD,EAAAkD,SAAAlD,EAAAkD,QACAsC,EAAAvqC,KAAAgjC,MAAAvrB,KAAAy3B,EAAArJ,EACAuJ,EAAA33B,KAAAy3B,EAAArJ,EAAA0E,IAEA3F,EAAAsD,SAAAtD,EAAAsD,QACAnD,EAAAmD,SAAAnD,EAAAmD,QACAsC,EAAAxqC,KAAAgjC,MAAA7L,IAAA+X,EAAApJ,EACAsJ,EAAAjY,IAAA+X,EAAApJ,EAAA0E,GAGA,MAAAtR,GACAkW,EAAAC,QAAA,EAAArvC,KAAAgjC,MAAAqM,OACArvC,KAAA8kC,SAAAgB,EAAA,EAAA9lC,KAAA8kC,SAAAgB,IAEAsJ,EAAAE,QAAA,EAAAtvC,KAAAgjC,MAAAsM,OACAtvC,KAAA8kC,SAAAe,EAAA,EAAA7lC,KAAA8kC,SAAAe,GAGA7lC,KAAA0oC,kBAAA9D,GACA5kC,KAAAuoC,qBAAAxD,GAEA/kC,KAAAgjC,MAAA4L,QAAAQ,EAAA,CACAtD,SAAA9rC,KAAA+iC,OAAAmE,UAAA/qB,KAAAnc,KAAA+iC,QACA3rB,SAAApX,KAAAgU,SAAA66B,kBACAC,WAAA,KACA9uC,KAAAgkC,qBAAA,EACAhkC,KAAAkjC,aAEAljC,KAAAgvC,yBAAA,GACAhvC,KAAA+iC,OAAApmB,IAAA3c,KAAAkjC,kBAYA8I,WAAA,SAAAD,GACA,IAAA/rC,KAAAgkC,oBAAA,CACAhkC,KAAAgkC,qBAAA,EAEA,IAAAuL,EAAAvvC,KAAAgjC,MAAA+K,MAEA/tC,KAAA0jC,sBAAA1jC,KAAAgU,SAAA2xB,qBAAAwH,WAAApB,EAAA5mC,OAAAwL,KAAAK,MAAAm8B,WAAApB,EAAA5mC,SAAA,IAGAnF,KAAAgjC,MAAAuE,IAAA,CACAwG,MAAA/tC,KAAA2jC,iBAAA3jC,KAAA0jC,uBAIA1jC,KAAA+jC,UAAA/jC,KAAA4pC,oBAAA5pC,KAAA4nC,4BAAA5nC,KAAA6kC,YACA7kC,KAAAgqC,aAEAhqC,KAAA4kC,cACA5kC,KAAAwvC,kCAAAD,GAGAvvC,KAAAwlC,cAEAxlC,KAAAgkC,qBAAA,IAWAwL,kCAAA,SAAAD,GACA,IAOAhF,EAAAC,EAAAiF,EAAAC,EAAAtF,EAPA4D,EAAAhuC,KAAA4nC,2BACA+H,EAAA3vC,KAAAgjC,MAAA+K,MAAAwB,EACAvE,EAAAhrC,KAAA4kC,aAEAgL,EAAA5vC,KAAA+jC,UACA8L,EAAA,EAIA,EAAA,CAEA,IAAAC,EAAA9E,EAAA/C,QACA8H,EAAA/E,EAAA9C,QACAiG,EAAAwB,GAAAh/B,KAAAy9B,GAAA,KAIAqB,EAAAK,EAAAn/B,KAAA29B,IAAAH,GAAA4B,EAAAp/B,KAAA49B,IAAAJ,GACAuB,EAAAI,EAAAn/B,KAAA49B,IAAAJ,GAAA4B,EAAAp/B,KAAA29B,IAAAH,GAKA5D,EAAAkF,EAAAG,GAHAxF,EAAA4D,EAAAhH,MAAAgE,EAAAhD,gBAAAhB,OAIAwD,EAAAkF,EAAAE,EAAAxF,EAGA,IAAA4F,EAAAhwC,KAAAiwC,sBAAAL,GACAM,EAAA,CACAlJ,MAAAhnC,KAAAijC,SAAA+D,MACA/b,OAAAjrB,KAAAijC,SAAAhY,OACAxT,KAAAzX,KAAA2kC,YAAA,EAAA3kC,KAAAijC,SAAA+D,MAAA,EAAAuD,EACApT,IAAAn3B,KAAA0kC,aAAA,EAAA1kC,KAAAijC,SAAAhY,OAAA,EAAAuf,GAGAoF,GADAC,EAAA7vC,KAAAmwC,4BAAAD,EAAAF,SAIA,IAAAH,GAGA7vC,KAAAgjC,MAAAuE,IAAA,CACA9vB,KAAAzX,KAAA2kC,YAAA,EAAA4F,EACApT,IAAAn3B,KAAA0kC,aAAA,EAAA8F,IAIAQ,EAAA/C,QAAAwH,EACAzE,EAAA9C,QAAAwH,EACA1E,EAAAhE,MAAAhnC,KAAAijC,SAAA+D,MAAA4I,EAAAxF,EACAY,EAAA/f,OAAAjrB,KAAAijC,SAAAhY,OAAA2kB,EAAAxF,EAEApqC,KAAA0oC,kBAAAsC,GAGAhrC,KAAA+jC,UAAA6L,EAEA5vC,KAAAkjC,YACAljC,KAAAgvC,yBAAAW,GAEA3vC,KAAAowC,gBAAApwC,KAAAkjC,WAAAljC,KAAAijC,UAGAjjC,KAAAkjC,WAAAqE,IAAA,CAAAjN,QAAA,IAFAt6B,KAAAkjC,WAAAqE,IAAA,CAAAjN,QAAA,KAIA,IAAAqV,GACA3vC,KAAAivC,2BAGAjvC,KAAAgqC,cAMAmC,kCAAA,WACA,GAAAnsC,KAAAkjC,aAAAljC,KAAAowC,gBAAApwC,KAAAkjC,WAAAljC,KAAAijC,UAAA,CACAjjC,KAAAkjC,WAAAqE,IAAA,CAAAjN,QAAA,IACA,IAAA0Q,EAAAhrC,KAAA+kC,gBACAiG,EAAA/C,QAAA,EACA+C,EAAA9C,QAAA,EACAloC,KAAAuoC,qBAAAyC,GACAhrC,KAAA8qC,qBAOAmE,yBAAA,WACA,IAAAjE,EAAAhrC,KAAA+kC,gBACAiG,EAAA/C,QAAA,EACA+C,EAAA9C,QAAA,EACAloC,KAAAuoC,qBAAAyC,IAWAoF,gBAAA,SAAAC,EAAAC,GACA,OAAAD,EAAA54B,KAAA64B,EAAA74B,KAAA64B,EAAAtJ,MAAA,GACAqJ,EAAAlZ,IAAAmZ,EAAAnZ,IAAAmZ,EAAArlB,OAAA,GACAolB,EAAA54B,KAAA64B,EAAA74B,KAAA64B,EAAAtJ,MAAA,GACAqJ,EAAAlZ,IAAAmZ,EAAAnZ,IAAAmZ,EAAArlB,OAAA,GAQA+jB,yBAAA,SAAAjB,GACA,IAAAI,EAAAJ,GAAAp9B,KAAAy9B,GAAA,KACApD,EAAAhrC,KAAA+kC,gBAEAsF,EAAAW,EAAA/C,QACAqC,EAAAU,EAAA9C,QAIAqI,EAAAlG,EAAA15B,KAAA29B,IAAAH,GAAA7D,EAAA35B,KAAA49B,IAAAJ,GACAqC,EAAAnG,EAAA15B,KAAA49B,IAAAJ,GAAA7D,EAAA35B,KAAA29B,IAAAH,GACA/D,EAAApqC,KAAA4nC,2BAAAZ,MAAAgE,EAAAhD,gBAAAhB,MAEAyJ,EAAAF,EAAAnG,EAAApqC,KAAA+jC,UACA2M,EAAAF,EAAApG,EAAApqC,KAAA+jC,UAEA/jC,KAAAkjC,WAAAzrB,KAAAzX,KAAAgjC,MAAAvrB,KAAAg5B,EACAzwC,KAAAkjC,WAAA/L,IAAAn3B,KAAAgjC,MAAA7L,IAAAuZ,EAEA1F,EAAA/C,QAAAsI,EACAvF,EAAA9C,QAAAsI,EACAxwC,KAAAuoC,qBAAAyC,IAUAmF,4BAAA,SAAAD,EAAAS,GAKA,IAJA,IACAC,EAcAf,EAfAgB,EAAA7wC,KAAA8wC,sBAAAZ,GAIAa,EAAA,EAAAA,EAAAF,EAAAvwC,SACAswC,EAAAC,EAAAE,GAEA/wC,KAAAgxC,yBAAA,CAAAJ,GAAAD,IAHAI,IAOAH,GAAA,EAMA,GAAAA,EAEA,CAEA,IAAAK,EAAAjxC,KAAAkxC,gBAAAP,EAAAC,GAEAO,EAAA,CACAtL,EAAAqK,EAAAz4B,KAAAy4B,EAAAlJ,MAAA,EACAlB,EAAAoK,EAAA/Y,IAAA+Y,EAAAjlB,OAAA,GAKAmmB,EAAAzgC,KAAA0gC,KAAAJ,EAAA,GAAAnL,EAAAmL,EAAA,GAAAnL,GAAA8K,EAAA/K,GAAAoL,EAAA,GAAApL,EAAAoL,EAAA,GAAApL,GAAA+K,EAAA9K,EAAAmL,EAAA,GAAApL,EAAAoL,EAAA,GAAAnL,EAAAmL,EAAA,GAAAnL,EAAAmL,EAAA,GAAApL,GAAAl1B,KAAA2gC,KAAA3gC,KAAA4gC,IAAAN,EAAA,GAAAnL,EAAAmL,EAAA,GAAAnL,EAAA,GAAAn1B,KAAA4gC,IAAAN,EAAA,GAAApL,EAAAoL,EAAA,GAAApL,EAAA,IACA2L,EAAA7gC,KAAA0gC,KAAAJ,EAAA,GAAAnL,EAAAmL,EAAA,GAAAnL,GAAAqL,EAAAtL,GAAAoL,EAAA,GAAApL,EAAAoL,EAAA,GAAApL,GAAAsL,EAAArL,EAAAmL,EAAA,GAAApL,EAAAoL,EAAA,GAAAnL,EAAAmL,EAAA,GAAAnL,EAAAmL,EAAA,GAAApL,GAAAl1B,KAAA2gC,KAAA3gC,KAAA4gC,IAAAN,EAAA,GAAAnL,EAAAmL,EAAA,GAAAnL,EAAA,GAAAn1B,KAAA4gC,IAAAN,EAAA,GAAApL,EAAAoL,EAAA,GAAApL,EAAA,IAGAgK,GAAAuB,EAAAI,GAAAA,OAhBA3B,EAAA,EAmBA,OAAAA,GAQA7J,UAAA,SAAA3sB,GACA,IAAAgW,EAAA1wB,EAAA0a,EAAAE,eACA,GAAA8V,EAAA1Z,SAAA,YACA,OAAA,EAGAhX,EAAA,OAAAqB,KAAAyiC,UAAA3wB,SAAA,YACA9R,KAAAyiC,SAAApwB,OAAA,+BAEA,IAAAo/B,EAAA,CACAvN,QAAAlkC,KAAAkkC,QACAP,iBAAA3jC,KAAA2jC,iBACA+N,cAAA1xC,KAAA0jC,qBACA1kC,QAAAqwB,EAAA1Z,SAAA,WAAA,EAAA,GAGA,GAAA3V,KAAA4kC,aAAA,CACA,IAAA+M,EAAA,GAEAA,EAAA1mB,OAAAjrB,KAAA4kC,aAAA3Z,OACA0mB,EAAA3K,MAAAhnC,KAAA4kC,aAAAoC,MACA2K,EAAA1J,QAAAjoC,KAAA4kC,aAAAqD,QACA0J,EAAAzJ,QAAAloC,KAAA4kC,aAAAsD,QAEAuJ,EAAAzJ,gBAAAhoC,KAAA4kC,aAAAoD,gBAEAyJ,EAAAE,SAAAA,OAEAF,EAAAzJ,gBAAAhoC,KAAA4nC,2BAGA5nC,KAAAkjC,aACAuO,EAAAvO,WAAAljC,KAAA+kC,iBAGA0M,EAAA3M,SAAA9kC,KAAA8kC,SACA2M,EAAAG,KAAA5xC,KAAA+jC,UAEA7kC,MAAA4H,kBAAA,oBAAA2qC,EAAAzqC,IACAhH,KAAAyiC,SAAA7sB,KAAA,QAAAQ,YAAA,YAAAy7B,MAAAj8B,KAAA,YAAA0E,SAEAtT,EAAAY,MACAM,MAAAlB,EAAAY,QAIA5H,KAAAsiC,SACAtiC,KAAAqe,OACAnf,MAAA8I,GAAAmY,eASAypB,oBAAA,SAAAmB,GAEA,IAAAoD,EAAAx9B,KAAA0gC,IAAArxC,KAAA0jC,uBAAA/yB,KAAAy9B,GAAA,KAGA0D,EAAAnhC,KAAA49B,IAAAJ,GAAApD,EAAA9f,OAAAta,KAAA29B,IAAAH,GAAApD,EAAA/D,MACA+K,EAAAphC,KAAA49B,IAAAJ,GAAApD,EAAA/D,MAAAr2B,KAAA29B,IAAAH,GAAApD,EAAA9f,OAGA,OAAAta,KAAA+Y,IAAAooB,EAAA/G,EAAA/D,MAAA+K,EAAAhH,EAAA9f,SAQAue,kBAAA,SAAAuB,GAEA,IAAAiH,EAAAhyC,KAAAiyC,qBAAAlH,GAGAmH,EAAA,EACA,GAAAF,EAAA/mB,OAAAjrB,KAAA0kC,cAAAsN,EAAAhL,MAAAhnC,KAAA2kC,YAAA,CACA,IAAAwN,EAAAnyC,KAAA0kC,aAAAsN,EAAA/mB,OACAmnB,EAAApyC,KAAA2kC,YAAAqN,EAAAhL,MACAkL,EAAAvhC,KAAAohB,IAAAqgB,EAAAD,GAGA,OAAAD,GAMAG,qBAAA,SAAAtH,GACA,OAAA/qC,KAAA4pC,oBAAAmB,GAAA/qC,KAAAwpC,kBAAAuB,IAQAc,UAAA,WACA,IAAA7rC,KAAA6S,KAAA,CACA,IAyBAnT,EAzBA4yC,EAAA,CACA1H,YAAA,EACAC,OAAA,yBAIA0H,EAAAvyC,KAAAijC,SAAA+D,MACAwL,EAAAxyC,KAAAijC,SAAAhY,OACAwnB,EAAAF,EAAA,EACAG,EAAAF,EAAA,EAEA3/B,EAAA,CACA,IAAAi0B,OAAAmD,KAAA,CACAW,YAAA,EACAC,OAAA,sBACArD,QAAA,SACAC,QAAA,SACAT,MAAAuL,EACAtnB,OAAAunB,EACA/6B,KAAA86B,EAAA,EACApb,IAAAqb,EAAA,EACAtI,KAAA,yBAKA,IAAAxqC,EAAA,EAAAA,GArBA,EAqBAA,IACAmT,EAAA3R,KAAA,IAAA4lC,OAAA6L,KAAA,CAAAjzC,EAAA+yC,EAAA,EAAA/yC,EAAA+yC,EAAAD,GAAAF,IAEA,IAAA5yC,EAAA,EAAAA,GAxBA,EAwBAA,IACAmT,EAAA3R,KAAA,IAAA4lC,OAAA6L,KAAA,CAAA,EAAAjzC,EAAAgzC,EAAAH,EAAA7yC,EAAAgzC,GAAAJ,IAGAtyC,KAAA6S,KAAA,IAAAi0B,OAAA2D,MAAA53B,EAAA,CACA4E,KAAAzX,KAAA2kC,YAAA,EACAxN,IAAAn3B,KAAA0kC,aAAA,EACA8C,QAAA,SACAC,QAAA,SACAsG,MAAA/tC,KAAAijC,SAAA8K,QAGA/tC,KAAA+iC,OAAApmB,IAAA3c,KAAA6S,MACA7S,KAAAwlC,gBAOA0G,UAAA,WACAlsC,KAAA+iC,OAAAzoB,OAAAta,KAAA6S,MACA7S,KAAA6S,KAAA,KACA7S,KAAAwlC,eAMAoN,UAAA,WACA5yC,KAAA0qB,WAMAmQ,KAAA,WACA76B,KAAA4vB,OAEAjxB,EAAA,QAAAmT,SAAA,aAMAuM,KAAA,WACAre,KAAA8+B,qBACA9+B,KAAA0rC,mBAAA5M,qBACAngC,EAAA,QAAAyX,YAAA,YACApW,KAAA4vB,QAMA0S,OAAA,WACAtiC,KAAAgU,SAAAsuB,SACAtiC,KAAAiX,QAAA,SAMAs2B,aAAA,WACAvtC,KAAAwiC,YAAApsB,YAAA,WAMAo3B,cAAA,WACAxtC,KAAAwiC,YAAA1wB,SAAA,WAMA47B,eAAA,WACA,IAAA1F,EAAAhoC,KAAA4nC,2BACA5nC,KAAA+jC,UAAA/jC,KAAAwpC,kBAAAxB,GAEA,IAAAiG,EAAA,CACAjH,MAAAhnC,KAAA2kC,YACA1Z,OAAAjrB,KAAA0kC,cAGAwJ,EAAA,CACAlH,MAAAgB,EAAAhB,MAAAhnC,KAAA+jC,UACA9Y,OAAA+c,EAAA/c,OAAAjrB,KAAA+jC,UACAtsB,KAAAzX,KAAA2kC,YAAA,EACAxN,IAAAn3B,KAAA0kC,aAAA,GA6BA1kC,KAAA6yC,sBA1BA,KACA7yC,KAAA6nC,oCAGA,IAAAmD,EAAAhrC,KAAA4kC,aACAoJ,EAAAhuC,KAAA4nC,2BACAwC,EAAA4D,EAAAhH,MAAAgE,EAAAhD,gBAAAhB,MAGA8L,EAAA,CACAr7B,KAAAzX,KAAAgjC,MAAAvrB,KAAAuzB,EAAA/C,QAAAmC,EAAApqC,KAAA+jC,UACA5M,IAAAn3B,KAAAgjC,MAAA7L,IAAA6T,EAAA9C,QAAAkC,EAAApqC,KAAA+jC,UACAiD,MAAAgE,EAAAhE,MAAAoD,EAAApqC,KAAA+jC,UACA9Y,OAAA+f,EAAA/f,OAAAmf,EAAApqC,KAAA+jC,WAGA/jC,KAAA+yC,aAAAD,GAEA9yC,KAAAkjC,aACAkH,EAAA4D,EAAAhH,MAAAhnC,KAAA+kC,gBAAAiD,gBAAAhB,MACAhnC,KAAAkjC,WAAAzrB,KAAAzX,KAAAgjC,MAAAvrB,KAAAzX,KAAA+kC,gBAAAkD,QAAAmC,EAAApqC,KAAA+jC,UACA/jC,KAAAkjC,WAAA/L,IAAAn3B,KAAAgjC,MAAA7L,IAAAn3B,KAAA+kC,gBAAAmD,QAAAkC,EAAApqC,KAAA+jC,UACA/jC,KAAA+iC,OAAApmB,IAAA3c,KAAAkjC,cAIAgL,EAAAD,IAMAR,gBAAA,WACA,IAAAQ,EAAA,GAEAjuC,KAAAgzC,eACA,IAAAhL,EAAAhoC,KAAA4nC,2BACAqL,EAAAjzC,KAAA4pC,oBAAA5B,GAAAhoC,KAAA6kC,YACAqO,EAAAD,EAAAjzC,KAAA+jC,UACA/jC,KAAA+jC,UAAAkP,EAEA,IAAA/E,EAAA,CACAlH,MAAAgB,EAAAhB,MAAAhnC,KAAA+jC,UACA9Y,OAAA+c,EAAA/c,OAAAjrB,KAAA+jC,UACAtsB,KAAAzX,KAAA2kC,YAAA,EACAxN,IAAAn3B,KAAA0kC,aAAA,GAMAyO,GAHAnzC,KAAAojC,QAAA3rB,KAAAzX,KAAAgjC,MAAAvrB,MAGAy7B,EACAE,GAHApzC,KAAAojC,QAAAjM,IAAAn3B,KAAAgjC,MAAA7L,KAGA+b,EACAhF,EAAAz2B,KAAAzX,KAAA2kC,YAAA,EAAAwO,EACAjF,EAAA/W,IAAAn3B,KAAA0kC,aAAA,EAAA0O,EAGAnF,EAAAhjB,OAAAjrB,KAAAojC,QAAAnY,OAAAioB,EACAjF,EAAAjH,MAAAhnC,KAAAojC,QAAA4D,MAAAkM,IAEAlzC,KAAAkjC,YAAAljC,KAAAkjC,aAAAljC,KAAAowC,gBAAApwC,KAAAkjC,WAAAljC,KAAAojC,YACApjC,KAAAkjC,YACAljC,KAAA8qC,mBAGA9qC,KAAAivC,4BAaAjvC,KAAA6yC,sBAVA,KAEA,GAAA7yC,KAAAkjC,WAAA,CACA,IAAAkH,EAAApqC,KAAA4nC,2BAAAZ,MAAAhnC,KAAA+kC,gBAAAiD,gBAAAhB,MACAhnC,KAAAkjC,WAAAzrB,KAAAzX,KAAAgjC,MAAAvrB,KAAAzX,KAAA+kC,gBAAAkD,QAAAmC,EAAApqC,KAAA+jC,UACA/jC,KAAAkjC,WAAA/L,IAAAn3B,KAAAgjC,MAAA7L,IAAAn3B,KAAA+kC,gBAAAmD,QAAAkC,EAAApqC,KAAA+jC,UACA/jC,KAAA+iC,OAAApmB,IAAA3c,KAAAkjC,cAIAgL,EAAAD,IAWA4E,sBAAA,SAAA5rC,EAAAinC,EAAAD,GACAjuC,KAAAgkC,sBACAhkC,KAAAgkC,qBAAA,EAGAhkC,KAAAkjC,aACAljC,KAAA+iC,OAAAzoB,OAAAta,KAAAkjC,YACAljC,KAAAwlC,eAGAxlC,KAAAgjC,MAAA4L,QAAAV,EAAA,CACApC,SAAA9rC,KAAA+iC,OAAAmE,UAAA/qB,KAAAnc,KAAA+iC,QACA3rB,SAAApX,KAAAgU,SAAA66B,kBACAC,WAAA,KACA7nC,IACAjH,KAAAgkC,qBAAA,EACAhkC,KAAAwlC,iBAIAxlC,KAAAijC,SAAA2L,QAAAX,EAAA,CACA72B,SAAApX,KAAAgU,SAAA66B,sBAKAhI,aAAA,WACA7mC,KAAA8iC,eAAAnkC,EAAA,yCAAA2P,SAAA3P,EAAA,SAAAqB,KAAA4S,aACA,IACAwR,EADA5d,SAAAsoB,eAAA,kBACAukB,WAAA,MACA3yC,EAAA,IAAA6B,KAEA+wC,EAAAlvB,EAAA2e,OAAAiE,MACAuM,EAAAnvB,EAAA2e,OAAA9X,OAmBAjrB,KAAAglC,gBAAAn5B,OAAA2nC,aAjBA,WACA,IAAAC,EAAAvxC,UAAA,IAAAK,KAAA7B,GAAA,IALA,IAAA,GAMA0jB,EAAAsvB,OACAtvB,EAAAuvB,UAAA,EAAA,EAAAL,EAAAC,GACAnvB,EAAAwvB,UAAAN,EAAA,EAAAC,EAAA,GACAnvB,EAAAyvB,OAAA,EAAAljC,KAAAy9B,GAAAqF,GACA,IAAA,IAAA/zC,EAAA,EAAAA,EAVA,GAUAA,IACA0kB,EAAA0vB,YACA1vB,EAAAyvB,OAAA,EAAAljC,KAAAy9B,GAZA,IAaAhqB,EAAA2vB,OAAAT,EAAA,GAAA,GACAlvB,EAAA4vB,OAAAV,EAAA,EAAA,GACAlvB,EAAA6vB,UAAAX,EAAA,GACAlvB,EAAA8vB,YAAA,oBAAAx0C,EAhBA,GAgBA,IACA0kB,EAAAymB,SAEAzmB,EAAA+vB,YAEA,IAAA,KAGAnL,aAAA,WACAn9B,OAAAuoC,cAAAp0C,KAAAglC,iBACAhlC,KAAA8iC,eAAAxoB,SACAta,KAAA8iC,eAAA,MAQAiQ,aAAA,SAAAsB,GACAr0C,KAAAs0C,mBAAAD,GACAr0C,KAAAu0C,yBACAv0C,KAAAylC,iBAMAuN,aAAA,WACAhzC,KAAAojC,UACApjC,KAAAmjC,eAAA7oB,OAAAta,KAAAojC,SACApjC,KAAAmjC,eAAA7oB,OAAAta,KAAAwjC,eACAxjC,KAAAmjC,eAAA7oB,OAAAta,KAAAsjC,gBACAtjC,KAAAmjC,eAAA7oB,OAAAta,KAAAujC,aACAvjC,KAAAmjC,eAAA7oB,OAAAta,KAAAqjC,mBACArjC,KAAAmjC,eAAA7oB,OAAAta,KAAAyjC,kBAEAzjC,KAAAmjC,eAAA,KACAnjC,KAAAylC,cAAA,OASA6O,mBAAA,SAAAD,GAEAr0C,KAAAmjC,eAAA,IAAA2D,OAAAC,aAAA,kBAAA,CACAyN,gBAAA,gBACAC,YAAA,UACAC,WAAA,IAGA10C,KAAAmjC,eAAAmG,cAAA,CACAtC,MAAAhnC,KAAA2kC,YACA1Z,OAAAjrB,KAAA0kC,eAGA1kC,KAAAylC,cAAA,IAAArgC,QAAA2Z,sBAAA/e,KAAAmjC,eAAA+D,UAAA/qB,KAAAnc,KAAAmjC,iBAEAxkC,EAAA,mBAAAqB,KAAA2iC,kBAAA3X,IAAA,CACAwR,SAAA,WACArF,IAAA,EACA1f,KAAA,IAGAzX,KAAAwjC,cAAA,IAAAsD,OAAAmD,KAAA,CACAxyB,KAAAzX,KAAA2kC,YAAA,EACAxN,IAAAn3B,KAAA0kC,aAAA,EACA8C,QAAA,SACAC,QAAA,SACAT,MAAAhnC,KAAA2kC,YACA1Z,OAAAjrB,KAAA0kC,aACAwF,KAAA,oBAIA,IAAAlC,EAAAhoC,KAAA4nC,2BACA+M,EAAA,IAAA30C,KAAA0jC,qBAAA,EAAA,IAAA1jC,KAAAqyC,qBAAArK,GACA4M,EAAA5M,EAAAhB,MAAA2N,EACAE,EAAA7M,EAAA/c,OAAA0pB,EAEA,GAAA30C,KAAAmrC,wBAAA,CACA,IAAAwD,EAAAkG,EACAA,EAAAD,EACAA,EAAAjG,EAIA3uC,KAAAojC,QAAA,IAAA0D,OAAAmD,KAAA,CACAxyB,KAAAzX,KAAA2kC,YAAA,EACAxN,IAAAn3B,KAAA0kC,aAAA,EACA8C,QAAA,SACAC,QAAA,SACAT,MAAA4N,EACA3pB,OAAA4pB,EACAhK,OAAA,QACAX,KAAA,kBACAU,YAAA,IAIAyJ,GACAr0C,KAAAojC,QAAAmE,IAAA8M,GAGAr0C,KAAAojC,QAAA+G,yBAAA,kBACAnqC,KAAAmjC,eAAAxmB,IAAA3c,KAAAwjC,eACAxjC,KAAAmjC,eAAAxmB,IAAA3c,KAAAojC,UAMAmR,uBAAA,gBACA,IAAAv0C,KAAAu0C,uBAAAnJ,IACAprC,KAAAu0C,uBAAAnJ,EAAA,IAGAprC,KAAAsjC,iBACAtjC,KAAAmjC,eAAA7oB,OAAAta,KAAAsjC,gBACAtjC,KAAAmjC,eAAA7oB,OAAAta,KAAAujC,aACAvjC,KAAAmjC,eAAA7oB,OAAAta,KAAAqjC,mBACArjC,KAAAmjC,eAAA7oB,OAAAta,KAAAyjC,mBAEAzjC,KAAAu0C,uBAAAnJ,EAAA0J,YAAA,CACAlK,YAAA,EACAC,OAAA,mBACAX,MAAA,GAGAlqC,KAAAu0C,uBAAAnJ,EAAA2J,YAAA,CACAnK,YAAA,EACAC,OAAA,yBAIA7qC,KAAAu0C,uBAAAnJ,EAAA4J,UAAA,CACA,IAAAlO,OAAAmO,KAAA,sBAAAj1C,KAAAu0C,uBAAAnJ,EAAA0J,aACA,IAAAhO,OAAAmO,KAAA,MAAAj1C,KAAAojC,QAAA4D,MAAA,GAAA,SAAAhnC,KAAAojC,QAAA4D,MAAA,GAAA,SAAAhnC,KAAAojC,QAAA4D,MAAA,GAAA,MAAAhnC,KAAAu0C,uBAAAnJ,EAAA0J,aACA,IAAAhO,OAAAmO,KAAA,MAAAj1C,KAAAojC,QAAA4D,MAAA,GAAA,KAAAhnC,KAAAojC,QAAAnY,OAAA,GAAA,MAAAjrB,KAAAojC,QAAA4D,MAAA,GAAA,KAAAhnC,KAAAojC,QAAAnY,OAAA,GAAA,OAAAjrB,KAAAojC,QAAA4D,MAAA,GAAA,KAAAhnC,KAAAojC,QAAAnY,OAAA,GAAAjrB,KAAAu0C,uBAAAnJ,EAAA0J,aACA,IAAAhO,OAAAmO,KAAA,SAAAj1C,KAAAojC,QAAAnY,OAAA,GAAA,SAAAjrB,KAAAojC,QAAAnY,OAAA,GAAA,SAAAjrB,KAAAojC,QAAAnY,OAAA,GAAAjrB,KAAAu0C,uBAAAnJ,EAAA0J,cAGA90C,KAAAsjC,eAAA,IAAAwD,OAAA2D,MAAAzqC,KAAAu0C,uBAAAnJ,EAAA4J,UAAA,CACAv9B,KAAAzX,KAAAojC,QAAA3rB,KACA0f,IAAAn3B,KAAAojC,QAAAjM,IACAqQ,QAAA,SACAC,QAAA,WAIAznC,KAAAqjC,kBAAA,IAAAyD,OAAAmD,KAAA,CACAxyB,KAAAzX,KAAAojC,QAAA3rB,KACA0f,IAAAn3B,KAAAojC,QAAAjM,IACA6P,MAAAhnC,KAAAojC,QAAA4D,MACA/b,OAAAjrB,KAAAojC,QAAAnY,OACAif,KAAA,gBACAW,OAAA,wBACAD,YAAA,EACApD,QAAA,SACAC,QAAA,WAGAznC,KAAAujC,YAAA,IAAAuD,OAAA2D,MACA,CACA,IAAA3D,OAAA6L,KAAA,CAAA,IAAA3yC,KAAAojC,QAAA4D,MAAA,EAAA,IAAAhnC,KAAAojC,QAAA4D,MAAAhnC,KAAAojC,QAAAnY,QAAAjrB,KAAAu0C,uBAAAnJ,EAAA2J,aACA,IAAAjO,OAAA6L,KAAA,CAAA,IAAA3yC,KAAAojC,QAAA4D,MAAA,EAAA,IAAAhnC,KAAAojC,QAAA4D,MAAAhnC,KAAAojC,QAAAnY,QAAAjrB,KAAAu0C,uBAAAnJ,EAAA2J,aACA,IAAAjO,OAAA6L,KAAA,CAAA,EAAA,IAAA3yC,KAAAojC,QAAAnY,OAAAjrB,KAAAojC,QAAA4D,MAAA,IAAAhnC,KAAAojC,QAAAnY,QAAAjrB,KAAAu0C,uBAAAnJ,EAAA2J,aACA,IAAAjO,OAAA6L,KAAA,CAAA,EAAA,IAAA3yC,KAAAojC,QAAAnY,OAAAjrB,KAAAojC,QAAA4D,MAAA,IAAAhnC,KAAAojC,QAAAnY,QAAAjrB,KAAAu0C,uBAAAnJ,EAAA2J,cACA,CACAt9B,KAAAzX,KAAAojC,QAAA3rB,KACA0f,IAAAn3B,KAAAojC,QAAAjM,IACAqQ,QAAA,SACAC,QAAA,WAGAznC,KAAAu0C,uBAAAnJ,EAAA8J,YAAAl1C,KAAAqjC,kBAAAlM,IAAAn3B,KAAAojC,QAAAnY,OAAA,EAAA,GACAjrB,KAAAu0C,uBAAAnJ,EAAA+J,wBAAA,gBAEAn1C,KAAAu0C,uBAAAnJ,EAAA8J,YAAA,GAAAl1C,KAAA0kC,aAAA,IACA1kC,KAAAu0C,uBAAAnJ,EAAA8J,aAAA,GACAl1C,KAAAu0C,uBAAAnJ,EAAA+J,wBAAA,mBAGAn1C,KAAAyjC,iBAAA,IAAAqD,OAAAsO,QAAAzkC,KAAAK,MAAAhR,KAAAojC,QAAA4D,OAAA,MAAAr2B,KAAAK,MAAAhR,KAAAojC,QAAAnY,QAAA,CACAxT,KAAAzX,KAAAqjC,kBAAA5rB,KACA0f,IAAAn3B,KAAAu0C,uBAAAnJ,EAAA8J,YACAG,SAAA,GACAnL,KAAA,mBACAsK,gBAAAx0C,KAAAu0C,uBAAAnJ,EAAA+J,wBACAG,KAAA,QACAtO,MAAA,GACA/b,OAAA,GACAuc,QAAA,SACAC,QAAA,SACA8N,UAAA,WAGAv1C,KAAAmjC,eAAAxmB,IAAA3c,KAAAsjC,gBACAtjC,KAAAmjC,eAAAxmB,IAAA3c,KAAAujC,aACAvjC,KAAAmjC,eAAAxmB,IAAA3c,KAAAqjC,mBACArjC,KAAAmjC,eAAAxmB,IAAA3c,KAAAyjC,mBAQAkG,mBAAA,SAAA6L,GACA,GAAAx1C,KAAAmjC,eAAA,CAKA,IAAAsS,EACAz1C,KAAAojC,QAAA3rB,KAAAzX,KAAAmjC,eAAA6D,MAAA,EADAyO,EAEAz1C,KAAAojC,QAAAjM,IAAAn3B,KAAAmjC,eAAAlY,OAAA,EAIAjrB,KAAAmjC,eAAAmG,cAAA,CACAtC,MAAAhnC,KAAA2kC,YACA1Z,OAAAjrB,KAAA0kC,eAIA,IACAgR,EADA11C,KAAA0pC,sBAAA1pC,KAAA8jC,oBACAkD,MAAAwO,EAAAxO,MAGAhnC,KAAAojC,QAAA4D,MAAAr2B,KAAAK,MAAAhR,KAAAojC,QAAA4D,MAAA0O,GACA11C,KAAAojC,QAAAnY,OAAAta,KAAAK,MAAAhR,KAAAojC,QAAAnY,OAAAyqB,GAIA11C,KAAAojC,QAAA3rB,KAAAzX,KAAA2kC,YAAA,EAAA8Q,EAAAC,EACA11C,KAAAojC,QAAAjM,IAAAn3B,KAAA0kC,aAAA,EAAA+Q,EAAAC,EAGA11C,KAAAwjC,cAAA+D,IAAA,CACAP,MAAAhnC,KAAA2kC,YACA1Z,OAAAjrB,KAAA0kC,aACAjtB,KAAAzX,KAAA2kC,YAAA,EACAxN,IAAAn3B,KAAA0kC,aAAA,IAGA1kC,KAAAu0C,yBACAv0C,KAAAylC,kBAQAiE,sBAAA,SAAAiM,GACA,MAAA,CACA3O,MAAAr2B,KAAA+Y,IAAAisB,EAAAjpC,EAAAm5B,EAAA8P,EAAAhpC,EAAAk5B,EAAA8P,EAAA9zC,EAAAgkC,EAAA8P,EAAAC,EAAA/P,GAAAl1B,KAAAohB,IAAA4jB,EAAAjpC,EAAAm5B,EAAA8P,EAAAhpC,EAAAk5B,EAAA8P,EAAA9zC,EAAAgkC,EAAA8P,EAAAC,EAAA/P,GACA5a,OAAAta,KAAA+Y,IAAAisB,EAAAjpC,EAAAo5B,EAAA6P,EAAAhpC,EAAAm5B,EAAA6P,EAAA9zC,EAAAikC,EAAA6P,EAAAC,EAAA9P,GAAAn1B,KAAAohB,IAAA4jB,EAAAjpC,EAAAo5B,EAAA6P,EAAAhpC,EAAAm5B,EAAA6P,EAAA9zC,EAAAikC,EAAA6P,EAAAC,EAAA9P,KASA+C,iBAAA,SAAAxvB,GAEA,IAAA8uB,EAAAnoC,KAAAkjC,YAAAljC,KAAA61C,aAAAx8B,EAAArZ,KAAAkjC,YACA4S,EAAA91C,KAAAmjC,gBAAAnjC,KAAA61C,aAAAx8B,EAAArZ,KAAAojC,SACArN,EAAA/1B,KAAAmjC,gBAAAnjC,KAAA+1C,sBAAA18B,IAEA0c,GAAA+f,GAAA3N,KACAnoC,KAAAukC,eAAAlrB,EAAA28B,MACAh2C,KAAAwkC,eAAAnrB,EAAA48B,MAEA9N,EACAnoC,KAAAskC,eAAA,EACAvO,EACA/1B,KAAAqkC,eAAAtO,EACA+f,IACA91C,KAAAokC,iBAAA,KAUAwE,iBAAA,SAAAvvB,GACA,OAAArZ,KAAAolC,gBACAhgC,QAAA2Z,sBAAA/e,KAAAk2C,yBAAA/5B,KAAAnc,OAEAA,KAAAolC,eAAA/rB,GAGA68B,yBAAA,WACA,OAAAl2C,KAAAolC,iBAIAplC,KAAAkjC,YAAAljC,KAAAskC,eACAtkC,KAAAm2C,iBAAAn2C,KAAAolC,gBACAplC,KAAAuoC,uBACAvoC,KAAAwlC,eACAxlC,KAAAokC,iBAAApkC,KAAAqkC,gBACArkC,KAAAokC,gBACApkC,KAAAo2C,mBAAAp2C,KAAAolC,gBAEAplC,KAAAq2C,qBAAAr2C,KAAAolC,gBAGAplC,KAAAu0C,yBAEAv0C,KAAA0oC,oBACA1oC,KAAAylC,iBAEAzlC,KAAAs2C,gBAAAt2C,KAAAolC,gBAGAplC,KAAAukC,eAAAvkC,KAAAolC,eAAA4Q,MACAh2C,KAAAwkC,eAAAxkC,KAAAolC,eAAA6Q,MAEAj2C,KAAAolC,eAAA,OAQA0D,eAAA,SAAAzvB,GACArZ,KAAAokC,iBAAA,EACApkC,KAAAqkC,gBAAA,EACArkC,KAAAskC,eAAA,GAQAyE,gBAAA,SAAA1vB,GACArZ,KAAA8oC,eAAAzvB,GACArZ,KAAAolC,eAAA/rB,EACArZ,KAAAk2C,4BAQAE,mBAAA,SAAA/8B,GAQA,QAPA,IAAArZ,KAAAo2C,mBAAAhL,IACAprC,KAAAo2C,mBAAAhL,EAAA,IAGAprC,KAAAo2C,mBAAAhL,EAAAb,OAAAlxB,EAAA28B,MAAAh2C,KAAAukC,eACAvkC,KAAAo2C,mBAAAhL,EAAAZ,OAAAnxB,EAAA48B,MAAAj2C,KAAAwkC,eAEA,IAAAxkC,KAAAo2C,mBAAAhL,EAAAb,QAAA,IAAAvqC,KAAAo2C,mBAAAhL,EAAAZ,OACA,OAAA,EAaA,GAVAxqC,KAAAo2C,mBAAAhL,EAAA8E,UAAA,CACAz4B,KAAAzX,KAAAojC,QAAA3rB,KAAAzX,KAAAojC,QAAA4D,MAAA,EACA7P,IAAAn3B,KAAAojC,QAAAjM,IAAAn3B,KAAAojC,QAAAnY,OAAA,EACA+b,MAAAhnC,KAAAojC,QAAA4D,MACA/b,OAAAjrB,KAAAojC,QAAAnY,QAGAjrB,KAAAo2C,mBAAAhL,EAAAmL,SAAAv2C,KAAA8wC,sBAAA9wC,KAAAo2C,mBAAAhL,EAAA8E,UAAAlwC,KAAAo2C,mBAAAhL,EAAAb,OAAAvqC,KAAAo2C,mBAAAhL,EAAAZ,SAGAxqC,KAAAgxC,yBAAAhxC,KAAAo2C,mBAAAhL,EAAAmL,SAAAv2C,KAAA8jC,oBAAA,CAcA,IAVA9jC,KAAAo2C,mBAAAhL,EAAAoL,IAAA,EACAx2C,KAAAo2C,mBAAAhL,EAAAqL,IAAA,EACAz2C,KAAAo2C,mBAAAhL,EAAAqH,MAAAzyC,KAAAo2C,mBAAAhL,EAAAb,OAAA,GAAA,EAAA,EACAvqC,KAAAo2C,mBAAAhL,EAAAsH,MAAA1yC,KAAAo2C,mBAAAhL,EAAAZ,OAAA,GAAA,EAAA,EAGAxqC,KAAAo2C,mBAAAhL,EAAAsL,SAAA,EACA12C,KAAAo2C,mBAAAhL,EAAAuL,eAAA,GAGA32C,KAAAo2C,mBAAAhL,EAAAoL,IAAA7lC,KAAAohB,IAAAphB,KAAA0gC,IAAArxC,KAAAo2C,mBAAAhL,EAAAb,QAAA,IAAAvqC,KAAAo2C,mBAAAhL,EAAAoL,KAAA,EAAAx2C,KAAAo2C,mBAAAhL,EAAAoL,MACA,IAAAx2C,KAAAo2C,mBAAAhL,EAAAqL,IAAA9lC,KAAAohB,IAAAphB,KAAA0gC,IAAArxC,KAAAo2C,mBAAAhL,EAAAZ,QAAA,IAAAxqC,KAAAo2C,mBAAAhL,EAAAqL,KAAA,EAAAz2C,KAAAo2C,mBAAAhL,EAAAqL,MACAz2C,KAAAo2C,mBAAAhL,EAAAmL,SAAAv2C,KAAA8wC,sBAAA9wC,KAAAo2C,mBAAAhL,EAAA8E,UAAAlwC,KAAAo2C,mBAAAhL,EAAAoL,KAAAx2C,KAAAo2C,mBAAAhL,EAAAb,OAAA,EAAA,GAAA,GAAAvqC,KAAAo2C,mBAAAhL,EAAAqL,KAAAz2C,KAAAo2C,mBAAAhL,EAAAZ,OAAA,EAAA,GAAA,IAEAxqC,KAAAgxC,yBAAAhxC,KAAAo2C,mBAAAhL,EAAAmL,SAAAv2C,KAAA8jC,qBACA9jC,KAAAo2C,mBAAAhL,EAAAoL,IAAAx2C,KAAAo2C,mBAAAhL,EAAAqL,IAAAz2C,KAAAo2C,mBAAAhL,EAAAsL,WACA12C,KAAAo2C,mBAAAhL,EAAAsL,SAAA12C,KAAAo2C,mBAAAhL,EAAAoL,IAAAx2C,KAAAo2C,mBAAAhL,EAAAqL,IACAz2C,KAAAo2C,mBAAAhL,EAAAuL,eAAA,CACA9Q,EAAA7lC,KAAAo2C,mBAAAhL,EAAAoL,KAAAx2C,KAAAo2C,mBAAAhL,EAAAb,OAAA,EAAA,GAAA,GACAzE,EAAA9lC,KAAAo2C,mBAAAhL,EAAAqL,KAAAz2C,KAAAo2C,mBAAAhL,EAAAZ,OAAA,EAAA,GAAA,KAQA,GAAA,GAAAxqC,KAAAo2C,mBAAAhL,EAAAsL,SACA,OAEA12C,KAAAo2C,mBAAAhL,EAAAb,OAAAvqC,KAAAo2C,mBAAAhL,EAAAuL,eAAA9Q,EACA7lC,KAAAo2C,mBAAAhL,EAAAZ,OAAAxqC,KAAAo2C,mBAAAhL,EAAAuL,eAAA7Q,EAIA9lC,KAAAojC,QAAAmE,IAAA,CACA9vB,KAAAzX,KAAAojC,QAAA3rB,KAAAzX,KAAAo2C,mBAAAhL,EAAAb,OACApT,IAAAn3B,KAAAojC,QAAAjM,IAAAn3B,KAAAo2C,mBAAAhL,EAAAZ,UASA2L,iBAAA,SAAA98B,GAKA,QAJA,IAAArZ,KAAAm2C,iBAAA/K,IACAprC,KAAAm2C,iBAAA/K,EAAA,IAGAprC,KAAAkjC,WAAA,CAIA,GAHAljC,KAAAm2C,iBAAA/K,EAAAb,OAAAlxB,EAAA28B,MAAAh2C,KAAAukC,eACAvkC,KAAAm2C,iBAAA/K,EAAAZ,OAAAnxB,EAAA48B,MAAAj2C,KAAAwkC,eAEA,IAAAxkC,KAAAm2C,iBAAA/K,EAAAb,QAAA,IAAAvqC,KAAAm2C,iBAAA/K,EAAAZ,OACA,OAOA,GAJAxqC,KAAAm2C,iBAAA/K,EAAAwL,KAAA52C,KAAAkjC,WAAAzrB,KAAAzX,KAAAm2C,iBAAA/K,EAAAb,OACAvqC,KAAAm2C,iBAAA/K,EAAAyL,KAAA72C,KAAAkjC,WAAA/L,IAAAn3B,KAAAm2C,iBAAA/K,EAAAZ,OAGA,SAAAxqC,KAAAikC,aACA,IAAAjkC,KAAAgxC,yBAAA,CAAA,CAAAnL,EAAA7lC,KAAAm2C,iBAAA/K,EAAAwL,KAAA9Q,EAAA9lC,KAAAm2C,iBAAA/K,EAAAyL,OAAA72C,KAAA8jC,oBACA,YAGA,KAAA9jC,KAAAijC,SAAAxrB,KAAAzX,KAAAijC,SAAA+D,MAAA,EAAAhnC,KAAAm2C,iBAAA/K,EAAAwL,KAAA,GAAA52C,KAAAijC,SAAAxrB,KAAAzX,KAAAijC,SAAA+D,MAAA,EAAAhnC,KAAAm2C,iBAAA/K,EAAAwL,KAAA,GACA52C,KAAAijC,SAAA9L,IAAAn3B,KAAAijC,SAAAhY,OAAA,EAAAjrB,KAAAm2C,iBAAA/K,EAAAyL,KAAA,GAAA72C,KAAAijC,SAAA9L,IAAAn3B,KAAAijC,SAAAhY,OAAA,EAAAjrB,KAAAm2C,iBAAA/K,EAAAyL,KAAA,GACA,OAIA72C,KAAAkjC,WAAAqE,IAAA,CACA9vB,KAAAzX,KAAAkjC,WAAAzrB,KAAAzX,KAAAm2C,iBAAA/K,EAAAb,OACApT,IAAAn3B,KAAAkjC,WAAA/L,IAAAn3B,KAAAm2C,iBAAA/K,EAAAZ,WASAmC,sBAAA,SAAAH,GAIA,OAFAxsC,KAAAid,wBAEAuvB,GACA,IAAA,OACAxsC,KAAAqlC,oBAAA,EACA,MAEA,IAAA,WACArlC,KAAAqlC,mBAAArlC,KAAA4jC,cAAA5jC,KAAA6jC,eACA,MAEA,IAAA,UACA7jC,KAAAqlC,mBAAArlC,KAAAojC,QAAA4D,MAAAhnC,KAAAojC,QAAAnY,OACA,MAEA,IAAA,SAEA,MACA,QACAjrB,KAAAqlC,mBAAA8H,WAAAX,KASAI,0BAAA,gBACA,IAAA5sC,KAAA4sC,0BAAAxB,IACAprC,KAAA4sC,0BAAAxB,EAAA,KAGAprC,KAAAgkC,qBAAAhkC,KAAAqlC,qBAIArlC,KAAAgkC,qBAAA,EAGAhkC,KAAA4sC,0BAAAxB,EAAA8E,UAAA,CACAz4B,KAAAzX,KAAAojC,QAAA3rB,KAAAzX,KAAAojC,QAAA4D,MAAA,EACA7P,IAAAn3B,KAAAojC,QAAAjM,IAAAn3B,KAAAojC,QAAAnY,OAAA,EACA+b,MAAAhnC,KAAAojC,QAAA4D,MACA/b,OAAAjrB,KAAAojC,QAAAnY,QAIAjrB,KAAAojC,QAAA4D,MAAAhnC,KAAAojC,QAAAnY,OAAAjrB,KAAAqlC,oBACArlC,KAAA4sC,0BAAAxB,EAAA0L,eAAA92C,KAAA4sC,0BAAAxB,EAAA8E,UAAAjlB,OAGAjrB,KAAA4sC,0BAAAxB,EAAA8E,UAAAjlB,OAAAjrB,KAAAojC,QAAA4D,MAAAhnC,KAAAqlC,mBAGArlC,KAAA4sC,0BAAAxB,EAAA8E,UAAA/Y,MAAAn3B,KAAA4sC,0BAAAxB,EAAA8E,UAAAjlB,OAAAjrB,KAAA4sC,0BAAAxB,EAAA0L,gBAAA,EAGA92C,KAAAgxC,yBAAAhxC,KAAA8wC,sBAAA9wC,KAAA4sC,0BAAAxB,EAAA8E,WAAAlwC,KAAA8jC,sBACA9jC,KAAA4sC,0BAAAxB,EAAA8E,UAAAlJ,MAAAhnC,KAAAojC,QAAAnY,OAAAjrB,KAAAqlC,mBACArlC,KAAA4sC,0BAAAxB,EAAA8E,UAAAjlB,OAAAjrB,KAAA4sC,0BAAAxB,EAAA8E,UAAAlJ,MAAAhnC,KAAAqlC,sBAIArlC,KAAA4sC,0BAAAxB,EAAA2L,cAAA/2C,KAAA4sC,0BAAAxB,EAAA8E,UAAAlJ,MACAhnC,KAAA4sC,0BAAAxB,EAAA8E,UAAAlJ,MAAAhnC,KAAAojC,QAAAnY,OAAAjrB,KAAAqlC,mBACArlC,KAAA4sC,0BAAAxB,EAAA8E,UAAAz4B,OAAAzX,KAAA4sC,0BAAAxB,EAAA8E,UAAAlJ,MAAAhnC,KAAA4sC,0BAAAxB,EAAA2L,eAAA,EAEA/2C,KAAAgxC,yBAAAhxC,KAAA8wC,sBAAA9wC,KAAA4sC,0BAAAxB,EAAA8E,WAAAlwC,KAAA8jC,sBACA9jC,KAAA4sC,0BAAAxB,EAAA8E,UAAAjlB,OAAAjrB,KAAAojC,QAAA4D,MAAAhnC,KAAAqlC,mBACArlC,KAAA4sC,0BAAAxB,EAAA8E,UAAAlJ,MAAAhnC,KAAA4sC,0BAAAxB,EAAA8E,UAAAjlB,OAAAjrB,KAAAqlC,qBAIArlC,KAAA4sC,0BAAAxB,EAAAgE,WAAA,CACAnkB,OAAAjrB,KAAA4sC,0BAAAxB,EAAA8E,UAAAjlB,OACA+b,MAAAhnC,KAAA4sC,0BAAAxB,EAAA8E,UAAAlJ,OAIAhnC,KAAAojC,QAAAwL,QAAA5uC,KAAA4sC,0BAAAxB,EAAAgE,WAAA,CACAtD,SAAA,KACA9rC,KAAAu0C,yBACAv0C,KAAAmjC,eAAA+D,aAEA9vB,SAAApX,KAAAgU,SAAA66B,kBACAC,WAAA,KACA9uC,KAAAu0C,yBACAv0C,KAAAgkC,qBAAA,EACAhkC,KAAAylC,gBACAzlC,KAAA0oC,yBAUA2N,qBAAA,SAAAh9B,QACA,IAAArZ,KAAAq2C,qBAAAjL,IACAprC,KAAAq2C,qBAAAjL,EAAA,IAIAprC,KAAAq2C,qBAAAjL,EAAAb,OAAAlxB,EAAA28B,MAAAh2C,KAAAukC,eACAvkC,KAAAq2C,qBAAAjL,EAAAZ,OAAAnxB,EAAA48B,MAAAj2C,KAAAwkC,eAEA,MAAAxkC,KAAAqkC,gBAAA,MAAArkC,KAAAqkC,iBACArkC,KAAAq2C,qBAAAjL,EAAAb,OAAA,GAGA,MAAAvqC,KAAAqkC,gBAAA,MAAArkC,KAAAqkC,iBACArkC,KAAAq2C,qBAAAjL,EAAAZ,OAAA,GAGA,IAAAxqC,KAAAq2C,qBAAAjL,EAAAb,QAAA,IAAAvqC,KAAAq2C,qBAAAjL,EAAAZ,SAKAxqC,KAAAq2C,qBAAAjL,EAAA4L,kBAAA,CACAv/B,KAAAzX,KAAAojC,QAAA3rB,KAAAzX,KAAAojC,QAAA4D,MAAA,EACA7P,IAAAn3B,KAAAojC,QAAAjM,IAAAn3B,KAAAojC,QAAAnY,OAAA,EACA+b,MAAAhnC,KAAAojC,QAAA4D,MACA/b,OAAAjrB,KAAAojC,QAAAnY,QAGAjrB,KAAAq2C,qBAAAjL,EAAA8E,UAAAlwC,KAAAi3C,iCAAAj3C,KAAAq2C,qBAAAjL,EAAA4L,kBAAAh3C,KAAAq2C,qBAAAjL,EAAAb,OAAAvqC,KAAAq2C,qBAAAjL,EAAAZ,OAAAxqC,KAAAqkC,gBAEArkC,KAAAq2C,qBAAAjL,EAAA8E,UAAAjlB,OAAA,IAAAjrB,KAAAq2C,qBAAAjL,EAAA8E,UAAAlJ,MAAA,IAIAhnC,KAAAgxC,yBAAAhxC,KAAA8wC,sBAAA9wC,KAAAq2C,qBAAAjL,EAAA8E,WAAAlwC,KAAA8jC,sBAKA9jC,KAAAojC,QAAAmE,IAAA,CACApQ,IAAAn3B,KAAAq2C,qBAAAjL,EAAA8E,UAAA/Y,IAAAn3B,KAAAq2C,qBAAAjL,EAAA8E,UAAAjlB,OAAA,EACAxT,KAAAzX,KAAAq2C,qBAAAjL,EAAA8E,UAAAz4B,KAAAzX,KAAAq2C,qBAAAjL,EAAA8E,UAAAlJ,MAAA,EACAA,MAAAhnC,KAAAq2C,qBAAAjL,EAAA8E,UAAAlJ,MACA/b,OAAAjrB,KAAAq2C,qBAAAjL,EAAA8E,UAAAjlB,SAGAjrB,KAAAu0C,4BAGA0C,iCAAA,SAAAD,EAAAzM,EAAAC,EAAA0M,GAcA,QAbA,IAAAl3C,KAAAi3C,iCAAA7L,IACAprC,KAAAi3C,iCAAA7L,EAAA,IAIAprC,KAAAi3C,iCAAA7L,EAAA+L,SAAA,EACAn3C,KAAAi3C,iCAAA7L,EAAAgM,UAAA,EAEAp3C,KAAAi3C,iCAAA7L,EAAA8E,UAAA8G,EACAh3C,KAAAi3C,iCAAA7L,EAAAb,OAAAA,EACAvqC,KAAAi3C,iCAAA7L,EAAAZ,OAAAA,EAGAxqC,KAAAqlC,mBAAA,CAIA,OAHArlC,KAAAi3C,iCAAA7L,EAAAiM,OAAA,EAGAH,GACA,IAAA,IACAl3C,KAAAi3C,iCAAA7L,EAAAiM,QAAAr3C,KAAAi3C,iCAAA7L,EAAAZ,OACA,MACA,IAAA,IACAxqC,KAAAi3C,iCAAA7L,EAAAiM,OAAAr3C,KAAAi3C,iCAAA7L,EAAAZ,OACA,MACA,IAAA,IACAxqC,KAAAi3C,iCAAA7L,EAAAiM,OAAAr3C,KAAAi3C,iCAAA7L,EAAAb,OACA,MACA,IAAA,IACAvqC,KAAAi3C,iCAAA7L,EAAAiM,QAAAr3C,KAAAi3C,iCAAA7L,EAAAb,OACA,MACA,IAAA,KACAvqC,KAAAi3C,iCAAA7L,EAAAiM,OAAA1mC,KAAA0gC,IAAArxC,KAAAi3C,iCAAA7L,EAAAZ,QAAA75B,KAAA0gC,IAAArxC,KAAAi3C,iCAAA7L,EAAAb,SAAAvqC,KAAAi3C,iCAAA7L,EAAAZ,OAAAxqC,KAAAi3C,iCAAA7L,EAAAb,OACA,MACA,IAAA,KACAvqC,KAAAi3C,iCAAA7L,EAAAiM,OAAA1mC,KAAA0gC,IAAArxC,KAAAi3C,iCAAA7L,EAAAZ,QAAA75B,KAAA0gC,IAAArxC,KAAAi3C,iCAAA7L,EAAAb,SAAAvqC,KAAAi3C,iCAAA7L,EAAAZ,QAAAxqC,KAAAi3C,iCAAA7L,EAAAb,OACA,MACA,IAAA,KACAvqC,KAAAi3C,iCAAA7L,EAAAiM,OAAA1mC,KAAA0gC,IAAArxC,KAAAi3C,iCAAA7L,EAAAZ,QAAA75B,KAAA0gC,IAAArxC,KAAAi3C,iCAAA7L,EAAAb,QAAAvqC,KAAAi3C,iCAAA7L,EAAAZ,OAAAxqC,KAAAi3C,iCAAA7L,EAAAb,OACA,MACA,IAAA,KACAvqC,KAAAi3C,iCAAA7L,EAAAiM,OAAA1mC,KAAA0gC,IAAArxC,KAAAi3C,iCAAA7L,EAAAZ,QAAA75B,KAAA0gC,IAAArxC,KAAAi3C,iCAAA7L,EAAAb,QAAAvqC,KAAAi3C,iCAAA7L,EAAAZ,QAAAxqC,KAAAi3C,iCAAA7L,EAAAb,OAgBA,OAZAvqC,KAAAqlC,mBAAA,GACArlC,KAAAi3C,iCAAA7L,EAAAb,OAAAvqC,KAAAi3C,iCAAA7L,EAAAiM,OACAr3C,KAAAi3C,iCAAA7L,EAAAZ,OAAAxqC,KAAAi3C,iCAAA7L,EAAAb,OAAAvqC,KAAAqlC,qBAEArlC,KAAAi3C,iCAAA7L,EAAAZ,OAAAxqC,KAAAi3C,iCAAA7L,EAAAiM,OACAr3C,KAAAi3C,iCAAA7L,EAAAb,OAAAvqC,KAAAi3C,iCAAA7L,EAAAZ,OAAAxqC,KAAAqlC,oBAGArlC,KAAAi3C,iCAAA7L,EAAA8E,UAAAjlB,QAAAjrB,KAAAi3C,iCAAA7L,EAAAZ,OACAxqC,KAAAi3C,iCAAA7L,EAAA8E,UAAAlJ,OAAAhnC,KAAAi3C,iCAAA7L,EAAAb,OAGA2M,GACA,IAAA,IACAl3C,KAAAi3C,iCAAA7L,EAAA8E,UAAA/Y,KAAAn3B,KAAAi3C,iCAAA7L,EAAAZ,OACAxqC,KAAAi3C,iCAAA7L,EAAA8E,UAAAz4B,MAAAzX,KAAAi3C,iCAAA7L,EAAAb,OAAA,EACA,MACA,IAAA,IACAvqC,KAAAi3C,iCAAA7L,EAAA8E,UAAAz4B,OAAAzX,KAAAi3C,iCAAA7L,EAAAb,OAAA,EACA,MACA,IAAA,IACAvqC,KAAAi3C,iCAAA7L,EAAA8E,UAAA/Y,MAAAn3B,KAAAi3C,iCAAA7L,EAAAZ,OAAA,EACA,MACA,IAAA,IACAxqC,KAAAi3C,iCAAA7L,EAAA8E,UAAA/Y,KAAAn3B,KAAAi3C,iCAAA7L,EAAAZ,OAAA,EACAxqC,KAAAi3C,iCAAA7L,EAAA8E,UAAAz4B,MAAAzX,KAAAi3C,iCAAA7L,EAAAb,OACA,MACA,IAAA,KACAvqC,KAAAi3C,iCAAA7L,EAAA8E,UAAA/Y,KAAAn3B,KAAAi3C,iCAAA7L,EAAAZ,OACA,MACA,IAAA,KACAxqC,KAAAi3C,iCAAA7L,EAAA8E,UAAA/Y,KAAAn3B,KAAAi3C,iCAAA7L,EAAAZ,OACAxqC,KAAAi3C,iCAAA7L,EAAA8E,UAAAz4B,MAAAzX,KAAAi3C,iCAAA7L,EAAAb,OACA,MACA,IAAA,KACAvqC,KAAAi3C,iCAAA7L,EAAA8E,UAAAz4B,MAAAzX,KAAAi3C,iCAAA7L,EAAAb,aAKAvqC,KAAAykC,cACA,OAAAyS,GAAA,OAAAA,GACA,OAAAA,GAAA,OAAAA,IAEAl3C,KAAAi3C,iCAAA7L,EAAAF,MACAv6B,KAAA0gC,IAAA9G,GAAA55B,KAAA0gC,IAAA7G,IACAxqC,KAAAi3C,iCAAA7L,EAAAF,MAAA8L,EAAAhQ,MAAAgQ,EAAA/rB,OACAjrB,KAAAi3C,iCAAA7L,EAAAZ,OAAAxqC,KAAAi3C,iCAAA7L,EAAAb,OAAAvqC,KAAAi3C,iCAAA7L,EAAAF,MACAlrC,KAAAi3C,iCAAA7L,EAAAZ,QAAA,OAAA0M,GAAA,OAAAA,GAAA,EAAA,IAEAl3C,KAAAi3C,iCAAA7L,EAAAF,MAAA8L,EAAAhQ,MAAAgQ,EAAA/rB,OACAjrB,KAAAi3C,iCAAA7L,EAAAb,OAAAvqC,KAAAi3C,iCAAA7L,EAAAZ,OAAAxqC,KAAAi3C,iCAAA7L,EAAAF,MACAlrC,KAAAi3C,iCAAA7L,EAAAb,QAAA,OAAA2M,GAAA,OAAAA,GAAA,EAAA,IAIAA,EAAAvxC,MAAA,OACA3F,KAAAi3C,iCAAA7L,EAAA8E,UAAA/Y,KAAAn3B,KAAAi3C,iCAAA7L,EAAAZ,OACAxqC,KAAAi3C,iCAAA7L,EAAA8E,UAAAjlB,QAAAjrB,KAAAi3C,iCAAA7L,EAAAZ,QAEA0M,EAAAvxC,MAAA,OACA3F,KAAAi3C,iCAAA7L,EAAA8E,UAAAjlB,QAAAjrB,KAAAi3C,iCAAA7L,EAAAZ,QAEA0M,EAAAvxC,MAAA,OACA3F,KAAAi3C,iCAAA7L,EAAA8E,UAAAlJ,OAAAhnC,KAAAi3C,iCAAA7L,EAAAb,QAEA2M,EAAAvxC,MAAA,OACA3F,KAAAi3C,iCAAA7L,EAAA8E,UAAAz4B,MAAAzX,KAAAi3C,iCAAA7L,EAAAb,OACAvqC,KAAAi3C,iCAAA7L,EAAA8E,UAAAlJ,OAAAhnC,KAAAi3C,iCAAA7L,EAAAb,QASA,OALAvqC,KAAAi3C,iCAAA7L,EAAA8E,UAAA/Y,IAAAn3B,KAAAi3C,iCAAA7L,EAAA8E,UAAA/Y,IACAn3B,KAAAi3C,iCAAA7L,EAAA8E,UAAAz4B,KAAAzX,KAAAi3C,iCAAA7L,EAAA8E,UAAAz4B,KACAzX,KAAAi3C,iCAAA7L,EAAA8E,UAAAlJ,MAAAhnC,KAAAi3C,iCAAA7L,EAAA8E,UAAAlJ,MACAhnC,KAAAi3C,iCAAA7L,EAAA8E,UAAAjlB,OAAAjrB,KAAAi3C,iCAAA7L,EAAA8E,UAAAjlB,OAEAjrB,KAAAi3C,iCAAA7L,EAAA8E,WAQAoG,gBAAA,SAAAj9B,QACA,IAAArZ,KAAAs2C,gBAAAlL,IACAprC,KAAAs2C,gBAAAlL,EAAA,IAGAhmC,QAAAugB,iBAAA,KAGA3lB,KAAAs2C,gBAAAlL,EAAAkM,OAAA,UACAt3C,KAAAs2C,gBAAAlL,EAAArV,OAAA/1B,KAAAmjC,gBAAAnjC,KAAA+1C,sBAAA18B,GACArZ,KAAAkjC,YAAAljC,KAAA61C,aAAAx8B,EAAArZ,KAAAkjC,YACAljC,KAAAs2C,gBAAAlL,EAAAkM,OAAA,UACAt3C,KAAAs2C,gBAAAlL,EAAArV,OACA,MAAA/1B,KAAAs2C,gBAAAlL,EAAArV,QAAA,MAAA/1B,KAAAs2C,gBAAAlL,EAAArV,OACA/1B,KAAAs2C,gBAAAlL,EAAAkM,OAAA,YACA,MAAAt3C,KAAAs2C,gBAAAlL,EAAArV,QAAA,MAAA/1B,KAAAs2C,gBAAAlL,EAAArV,OACA/1B,KAAAs2C,gBAAAlL,EAAAkM,OAAA,YACA,OAAAt3C,KAAAs2C,gBAAAlL,EAAArV,QAAA,OAAA/1B,KAAAs2C,gBAAAlL,EAAArV,OACA/1B,KAAAs2C,gBAAAlL,EAAAkM,OAAA,cACA,OAAAt3C,KAAAs2C,gBAAAlL,EAAArV,QAAA,OAAA/1B,KAAAs2C,gBAAAlL,EAAArV,SACA/1B,KAAAs2C,gBAAAlL,EAAAkM,OAAA,eAEAt3C,KAAAmjC,gBAAAnjC,KAAA61C,aAAAx8B,EAAArZ,KAAAojC,WACApjC,KAAAs2C,gBAAAlL,EAAAkM,OAAA,QAGA34C,EAAA,SAAAqsB,IAAA,SAAAhrB,KAAAs2C,gBAAAlL,EAAAkM,UAQAvB,sBAAA,SAAA18B,GAgBA,QAfA,IAAArZ,KAAA+1C,sBAAA3K,IACAprC,KAAA+1C,sBAAA3K,EAAA,IAGAprC,KAAA+1C,sBAAA3K,EAAAmM,aAAAv3C,KAAA6iC,gBAAA/gC,SACA9B,KAAA+1C,sBAAA3K,EAAAoM,OAAAn+B,EAAA28B,MAAAh2C,KAAA+1C,sBAAA3K,EAAAmM,aAAA9/B,KACAzX,KAAA+1C,sBAAA3K,EAAAqM,OAAAp+B,EAAA48B,MAAAj2C,KAAA+1C,sBAAA3K,EAAAmM,aAAApgB,IAGAn3B,KAAA+1C,sBAAA3K,EAAAsM,GAAA13C,KAAAojC,QAAA3rB,KAAAzX,KAAAojC,QAAA4D,MAAA,EACAhnC,KAAA+1C,sBAAA3K,EAAAuM,GAAA33C,KAAA+1C,sBAAA3K,EAAAsM,GAAA13C,KAAAojC,QAAA4D,MACAhnC,KAAA+1C,sBAAA3K,EAAAwM,GAAA53C,KAAAojC,QAAAjM,IAAAn3B,KAAAojC,QAAAnY,OAAA,EACAjrB,KAAA+1C,sBAAA3K,EAAAyM,GAAA73C,KAAA+1C,sBAAA3K,EAAAwM,GAAA53C,KAAAojC,QAAAnY,OAGAjrB,KAAA+1C,sBAAA3K,EAAAoM,OAAAx3C,KAAA+1C,sBAAA3K,EAAAsM,GAAA,IAAA13C,KAAA+1C,sBAAA3K,EAAAoM,OAAAx3C,KAAA+1C,sBAAA3K,EAAAsM,GAAA,EAAA,CACA,GAAA13C,KAAA+1C,sBAAA3K,EAAAqM,OAAAz3C,KAAA+1C,sBAAA3K,EAAAwM,GAAA,IAAA53C,KAAA+1C,sBAAA3K,EAAAqM,OAAAz3C,KAAA+1C,sBAAA3K,EAAAwM,GAAA,EACA,MAAA,KACA,GAAA53C,KAAA+1C,sBAAA3K,EAAAqM,OAAAz3C,KAAA+1C,sBAAA3K,EAAAyM,GAAA,GAAA73C,KAAA+1C,sBAAA3K,EAAAqM,OAAAz3C,KAAA+1C,sBAAA3K,EAAAyM,GAAA,GACA,MAAA,KAIA,GAAA73C,KAAA+1C,sBAAA3K,EAAAoM,OAAAx3C,KAAA+1C,sBAAA3K,EAAAuM,GAAA,IAAA33C,KAAA+1C,sBAAA3K,EAAAoM,OAAAx3C,KAAA+1C,sBAAA3K,EAAAuM,GAAA,EAAA,CACA,GAAA33C,KAAA+1C,sBAAA3K,EAAAqM,OAAAz3C,KAAA+1C,sBAAA3K,EAAAwM,GAAA,IAAA53C,KAAA+1C,sBAAA3K,EAAAqM,OAAAz3C,KAAA+1C,sBAAA3K,EAAAwM,GAAA,EACA,MAAA,KACA,GAAA53C,KAAA+1C,sBAAA3K,EAAAqM,OAAAz3C,KAAA+1C,sBAAA3K,EAAAyM,GAAA,GAAA73C,KAAA+1C,sBAAA3K,EAAAqM,OAAAz3C,KAAA+1C,sBAAA3K,EAAAyM,GAAA,GACA,MAAA,KAKA,OAAA73C,KAAA+1C,sBAAA3K,EAAAoM,OAAAx3C,KAAA+1C,sBAAA3K,EAAAsM,GAAA,GAAA13C,KAAA+1C,sBAAA3K,EAAAoM,OAAAx3C,KAAA+1C,sBAAA3K,EAAAsM,GAAA,GAAA13C,KAAA+1C,sBAAA3K,EAAAqM,OAAAz3C,KAAA+1C,sBAAA3K,EAAAyM,GAAA,IAAA73C,KAAA+1C,sBAAA3K,EAAAqM,OAAAz3C,KAAA+1C,sBAAA3K,EAAAwM,GAAA,GACA,IAEA53C,KAAA+1C,sBAAA3K,EAAAoM,OAAAx3C,KAAA+1C,sBAAA3K,EAAAuM,GAAA,GAAA33C,KAAA+1C,sBAAA3K,EAAAoM,OAAAx3C,KAAA+1C,sBAAA3K,EAAAuM,GAAA,GAAA33C,KAAA+1C,sBAAA3K,EAAAqM,OAAAz3C,KAAA+1C,sBAAA3K,EAAAyM,GAAA,IAAA73C,KAAA+1C,sBAAA3K,EAAAqM,OAAAz3C,KAAA+1C,sBAAA3K,EAAAwM,GAAA,GACA,IAIA53C,KAAA+1C,sBAAA3K,EAAAqM,OAAAz3C,KAAA+1C,sBAAA3K,EAAAwM,GAAA,GAAA53C,KAAA+1C,sBAAA3K,EAAAqM,OAAAz3C,KAAA+1C,sBAAA3K,EAAAwM,GAAA,GAAA53C,KAAA+1C,sBAAA3K,EAAAoM,OAAAx3C,KAAA+1C,sBAAA3K,EAAAsM,GAAA,IAAA13C,KAAA+1C,sBAAA3K,EAAAoM,OAAAx3C,KAAA+1C,sBAAA3K,EAAAuM,GAAA,GACA,IAEA33C,KAAA+1C,sBAAA3K,EAAAqM,OAAAz3C,KAAA+1C,sBAAA3K,EAAAyM,GAAA,GAAA73C,KAAA+1C,sBAAA3K,EAAAqM,OAAAz3C,KAAA+1C,sBAAA3K,EAAAyM,GAAA,GAAA73C,KAAA+1C,sBAAA3K,EAAAoM,OAAAx3C,KAAA+1C,sBAAA3K,EAAAsM,GAAA,IAAA13C,KAAA+1C,sBAAA3K,EAAAoM,OAAAx3C,KAAA+1C,sBAAA3K,EAAAuM,GAAA,IACA,KAeA9B,aAAA,SAAA1U,EAAAkP,GAeA,YAdA,IAAArwC,KAAA61C,aAAAzK,IACAprC,KAAA61C,aAAAzK,EAAA,IAGAprC,KAAA61C,aAAAzK,EAAAmM,aAAAv3C,KAAA6iC,gBAAA/gC,SACA9B,KAAA61C,aAAAzK,EAAAoM,OAAArW,EAAA6U,MAAAh2C,KAAA61C,aAAAzK,EAAAmM,aAAA9/B,KACAzX,KAAA61C,aAAAzK,EAAAqM,OAAAtW,EAAA8U,MAAAj2C,KAAA61C,aAAAzK,EAAAmM,aAAApgB,IAGAn3B,KAAA61C,aAAAzK,EAAAsM,GAAArH,EAAA54B,KAAA44B,EAAArJ,MAAA,EACAhnC,KAAA61C,aAAAzK,EAAAuM,GAAA33C,KAAA61C,aAAAzK,EAAAsM,GAAArH,EAAArJ,MACAhnC,KAAA61C,aAAAzK,EAAAwM,GAAAvH,EAAAlZ,IAAAkZ,EAAAplB,OAAA,EACAjrB,KAAA61C,aAAAzK,EAAAyM,GAAA73C,KAAA61C,aAAAzK,EAAAwM,GAAAvH,EAAAplB,OAGAjrB,KAAA61C,aAAAzK,EAAAoM,QAAAx3C,KAAA61C,aAAAzK,EAAAsM,IACA13C,KAAA61C,aAAAzK,EAAAoM,QAAAx3C,KAAA61C,aAAAzK,EAAAuM,IACA33C,KAAA61C,aAAAzK,EAAAqM,QAAAz3C,KAAA61C,aAAAzK,EAAAwM,IACA53C,KAAA61C,aAAAzK,EAAAqM,QAAAz3C,KAAA61C,aAAAzK,EAAAyM,IAaA/G,sBAAA,SAAAZ,EAAAjI,EAAAC,GAqBA,YApBA,IAAAloC,KAAA8wC,sBAAA1F,IACAprC,KAAA8wC,sBAAA1F,EAAA,SAGA,IAAAnD,IACAA,EAAA,QAEA,IAAAC,IACAA,EAAA,GAGAloC,KAAA8wC,sBAAA1F,EAAA0M,QAAA,CACAjS,EAAAqK,EAAAz4B,KAAAwwB,EACAnC,EAAAoK,EAAA/Y,IAAA+Q,GAGAloC,KAAA8wC,sBAAA1F,EAAA2M,SAAA,CAAAlS,EAAA7lC,KAAA8wC,sBAAA1F,EAAA0M,QAAAjS,EAAAqK,EAAAlJ,MAAAlB,EAAA9lC,KAAA8wC,sBAAA1F,EAAA0M,QAAAhS,GACA9lC,KAAA8wC,sBAAA1F,EAAA4M,YAAA,CAAAnS,EAAA7lC,KAAA8wC,sBAAA1F,EAAA2M,SAAAlS,EAAAC,EAAA9lC,KAAA8wC,sBAAA1F,EAAA2M,SAAAjS,EAAAoK,EAAAjlB,QACAjrB,KAAA8wC,sBAAA1F,EAAA6M,WAAA,CAAApS,EAAA7lC,KAAA8wC,sBAAA1F,EAAA0M,QAAAjS,EAAAC,EAAA9lC,KAAA8wC,sBAAA1F,EAAA4M,YAAAlS,GAEA,CAAA9lC,KAAA8wC,sBAAA1F,EAAA0M,QAAA93C,KAAA8wC,sBAAA1F,EAAA2M,SAAA/3C,KAAA8wC,sBAAA1F,EAAA4M,YAAAh4C,KAAA8wC,sBAAA1F,EAAA6M,aAMApQ,kCAAA,WACA7nC,KAAA8jC,mBAAA9jC,KAAAiwC,sBAAA,QASAA,sBAAA,SAAAiI,GACA,IAIAhN,EAJAiD,GAAA,IAAAnuC,KAAAmrC,wBAAA,GAAA,GAAAnrC,KAAA0jC,uBAAA/yB,KAAAy9B,GAAA,KAEApG,EAAAhoC,KAAA4nC,2BAKAsD,EADA,iBAAAgN,EACAA,EACA,UAAAA,EACAl4C,KAAA4pC,oBAAA5B,GAEAhoC,KAAAwpC,kBAAAxB,GAIA,IAAA+J,EAAA/J,EAAA/c,OAAAigB,EACA4G,EAAA9J,EAAAhB,MAAAkE,EAKAiN,EAAAxnC,KAAA29B,IAAAH,GAAA4D,EACAqG,EAAAznC,KAAA49B,IAAAJ,GAAA2D,EACAuG,EAAA1nC,KAAA29B,IAAAH,GAAA2D,EACAwG,EAAA3nC,KAAA49B,IAAAJ,GAAA4D,EAGAwG,GAAAv4C,KAAA0kC,cAAAyT,EAAAC,IAAA,EACAI,GAAAx4C,KAAA2kC,aAAA2T,EAAAD,IAAA,EAGA,MAAA,CACA3rC,EAAA,CACAm5B,EAAA2S,EAAAH,EACAvS,EAAAyS,GAEA5rC,EAAA,CACAk5B,EAAA7lC,KAAA2kC,YAAA6T,EACA1S,EAAAyS,EAAAJ,GAEAt2C,EAAA,CACAgkC,EAAA2S,EAAAF,EACAxS,EAAA9lC,KAAA0kC,aAAA6T,GAEA3C,EAAA,CACA/P,EAAA2S,EACA1S,EAAAyS,EAAAH,KAUAK,OAAA,SAAAC,GACA14C,KAAA+iC,OAAAzoB,OAAAta,KAAA24C,UACA34C,KAAA24C,SAAAD,EACA14C,KAAA+iC,OAAApmB,IAAA3c,KAAA24C,WAaA3H,yBAAA,SAAA4H,EAAA1I,GAWA,SAVA,IAAAlwC,KAAAgxC,yBAAA5F,IACAprC,KAAAgxC,yBAAA5F,EAAA,IAIAprC,KAAAgxC,yBAAA5F,EAAAyN,GAAA74C,KAAA84C,WAAA5I,EAAAxjC,EAAAwjC,EAAAvjC,GACA3M,KAAAgxC,yBAAA5F,EAAA2N,GAAA/4C,KAAA84C,WAAA5I,EAAAvjC,EAAAujC,EAAAruC,GACA7B,KAAAgxC,yBAAA5F,EAAA4N,WAAAh5C,KAAAi5C,kBAAAj5C,KAAAgxC,yBAAA5F,EAAAyN,GAAA74C,KAAAgxC,yBAAA5F,EAAAyN,IACA74C,KAAAgxC,yBAAA5F,EAAA8N,WAAAl5C,KAAAi5C,kBAAAj5C,KAAAgxC,yBAAA5F,EAAA2N,GAAA/4C,KAAAgxC,yBAAA5F,EAAA2N,IAEA/4C,KAAAgxC,yBAAA5F,EAAA1rC,EAAA,EAAAM,KAAAgxC,yBAAA5F,EAAA1rC,EAAAk5C,EAAAt4C,OAAAN,KAAAgxC,yBAAA5F,EAAA1rC,IAeA,GAdAM,KAAAgxC,yBAAA5F,EAAA+N,MAAAP,EAAA54C,KAAAgxC,yBAAA5F,EAAA1rC,GAIAM,KAAAgxC,yBAAA5F,EAAAgO,GAAAp5C,KAAA84C,WAAA5I,EAAAxjC,EAAA1M,KAAAgxC,yBAAA5F,EAAA+N,OACAn5C,KAAAgxC,yBAAA5F,EAAAiO,GAAAr5C,KAAA84C,WAAA5I,EAAAvjC,EAAA3M,KAAAgxC,yBAAA5F,EAAA+N,OAGAn5C,KAAAgxC,yBAAA5F,EAAAkO,WAAAt5C,KAAAi5C,kBAAAj5C,KAAAgxC,yBAAA5F,EAAAyN,GAAA74C,KAAAgxC,yBAAA5F,EAAAgO,IACAp5C,KAAAgxC,yBAAA5F,EAAAmO,WAAAv5C,KAAAi5C,kBAAAj5C,KAAAgxC,yBAAA5F,EAAA2N,GAAA/4C,KAAAgxC,yBAAA5F,EAAAiO,IAEAr5C,KAAAgxC,yBAAA5F,EAAAoO,aAAA,GAAAx5C,KAAAgxC,yBAAA5F,EAAAkO,YAAAt5C,KAAAgxC,yBAAA5F,EAAAkO,YAAAt5C,KAAAgxC,yBAAA5F,EAAA4N,WACAh5C,KAAAgxC,yBAAA5F,EAAAqO,aAAA,GAAAz5C,KAAAgxC,yBAAA5F,EAAAmO,YAAAv5C,KAAAgxC,yBAAA5F,EAAAmO,YAAAv5C,KAAAgxC,yBAAA5F,EAAA8N,YAEAl5C,KAAAgxC,yBAAA5F,EAAAoO,eAAAx5C,KAAAgxC,yBAAA5F,EAAAqO,aACA,OAAA,EAIA,OAAA,GASAX,WAAA,SAAApsC,EAAAC,GACA,MAAA,CAAAk5B,EAAAl5B,EAAAk5B,EAAAn5B,EAAAm5B,EAAAC,EAAAn5B,EAAAm5B,EAAAp5B,EAAAo5B,IASAmT,kBAAA,SAAAvsC,EAAAC,GACA,OAAAD,EAAAm5B,EAAAl5B,EAAAk5B,EAAAn5B,EAAAo5B,EAAAn5B,EAAAm5B,GASA4T,oBAAA,SAAAC,GACA,OAAAhpC,KAAA2gC,KAAAqI,EAAA9T,EAAA8T,EAAA9T,EAAA8T,EAAA7T,EAAA6T,EAAA7T,IASA8T,wBAAA,SAAAltC,EAAAC,GACA,OAAAgE,KAAAK,MAAA,IAAAL,KAAAkpC,KAAAlpC,KAAAohB,IAAA,EAAA/xB,KAAAi5C,kBAAAvsC,EAAAC,IAAA3M,KAAA05C,oBAAAhtC,GAAA1M,KAAA05C,oBAAA/sC,MAAAgE,KAAAy9B,GAAA,KAAA,KAWA8C,gBAAA,SAAAhB,EAAAU,GAcA,IAZA,IAAAkJ,EAAA,CACA,CAAA5J,EAAAxjC,EAAAwjC,EAAAvjC,GACA,CAAAujC,EAAAvjC,EAAAujC,EAAAruC,GACA,CAAAquC,EAAAruC,EAAAquC,EAAA0F,GACA,CAAA1F,EAAA0F,EAAA1F,EAAAxjC,IAGAqtC,EAAA,CAAAlU,EAAA7lC,KAAA2kC,YAAA,EAAAmB,EAAA9lC,KAAA0kC,aAAA,GACAsV,EAAA,IACAC,EAAA,KAGAC,EAAA,EAAAA,EAAAJ,EAAAx5C,OAAA45C,IAAA,CACA,IAAAjJ,EAAA6I,EAAAI,GACAC,EAAAn6C,KAAA84C,WAAA7H,EAAA,GAAA8I,GACAK,EAAAp6C,KAAA84C,WAAA7H,EAAA,GAAAA,EAAA,IACAoJ,EAAAr6C,KAAA84C,WAAA7H,EAAA,GAAAL,GAMA0J,EAAA3pC,KAAA0gC,IAAArxC,KAAA45C,wBAAAO,EAAAE,IAAAr6C,KAAA45C,wBAAAO,EAAAC,GAAAp6C,KAAA45C,wBAAAQ,EAAAC,KAEAC,EAAAN,IACAA,EAAAM,EACAL,EAAAhJ,GAIA,OAAAgJ,GAQAhI,qBAAA,SAAAlH,GACA,IAAAwP,EAAA,GAEApM,EAAAx9B,KAAA0gC,IAAArxC,KAAA0jC,uBAAA/yB,KAAAy9B,GAAA,KAEAoM,EAAAzP,EAAA9f,OAAA8f,EAAA/D,MAIA,GAHAuT,EAAAtvB,OAAA8f,EAAA/D,OAAAr2B,KAAA49B,IAAAJ,GAAAx9B,KAAA29B,IAAAH,GAAAqM,GACAD,EAAAvT,MAAA+D,EAAA/D,OAAAr2B,KAAA29B,IAAAH,GAAAx9B,KAAA49B,IAAAJ,GAAAqM,GAEAx6C,KAAAmrC,wBAAA,CACA,IAAAwD,EAAA4L,EAAAvT,MACAuT,EAAAvT,MAAAuT,EAAAtvB,OACAsvB,EAAAtvB,OAAA0jB,EAGA,OAAA4L,IAEA,CACA/+B,SAAA,CACAqzB,kBAAA,IACA9I,kBAAA,EACAzD,OAAA3jC,EAAA0hB,KACAslB,qBAAA,QClsFAzmC,MAAAu7C,WAAAv7C,MAAA+U,iBAAAhV,OAAA,CACAy7C,4BAAA,KACAC,2BAAA,KACAC,kCAAA,EAEAC,cAAA,KACAC,aAAA,KACAC,aAAA,KACAC,SAAA,KAEAC,SAAA,KACAC,cAAA,KACAC,YAAA,KAEAC,kBAAA,EACAC,oBAAA,GACAC,kBAAA,GACAC,yBAAA,GAEAC,WAAA,KACAC,YAAA,KACAC,+BAAA,KACAC,qBAAA,GAEAC,sBAAA,CACAC,QAAA,CACA,CAAA12C,MAAA,WAAAiV,MAAAlb,MAAAS,EAAA,MAAA,cAAA,CAAAwF,MAAA,UAAAiV,MAAAlb,MAAAS,EAAA,MAAA,iBAGAm8C,wBAAA,CACAD,QAAA,CACA,CAAA12C,MAAA,UAAAiV,MAAAlb,MAAAS,EAAA,MAAA,4DAAA,CAAAwF,MAAA,QAAAiV,MAAAlb,MAAAS,EAAA,MAAA,gEAIA4b,KAAA,SAAA5H,EAAAf,EAAAoB,GACAhU,KAAA4vB,KAAAjc,EAAAf,EAAAoB,GAEA,UAAAhU,KAAAgU,SAAAoQ,SACApkB,KAAAy7C,aACAz7C,KAAA+7C,qBAGA/7C,KAAA0c,YAAAtX,QAAA6xB,KAAA,gBAAA,0BAEAj3B,KAAA0c,YAAA1c,KAAA4gB,MAAA,SAAA,wBAEA5gB,KAAAgU,SAAA0b,OACA1vB,KAAAgU,SAAA0b,MAAAtW,GAAA,wBAAApZ,KAAAg8C,qBAAA7/B,KAAAnc,SAKAwkB,YAAA,WAKA,MAJA,UAAAxkB,KAAAgU,SAAAoQ,SAAApkB,KAAAy7C,aACAz7C,KAAA+7C,qBAGA/7C,KAAA4vB,QAGAjI,WAAA,SAAAzG,GACAlhB,KAAA4vB,KAAA1O,GAEAlhB,KAAAi8C,yBAAA/6B,GAEA,UAAAlhB,KAAAgU,SAAAoQ,UACApkB,KAAAy7C,aAAAz7C,KAAAk8C,gBAAAh7B,GAAA,GACAA,EAAAla,KAAA,cACAhH,KAAAy7C,YAAA7zB,SAAA1G,EAAAoD,UAIAtkB,KAAAw7C,YACAx7C,KAAAw7C,WAAAW,sBAKAh0B,aAAA,SAAAjH,GACAlhB,KAAA4vB,KAAA1O,GAGA,IAAAk7B,EAAAl7B,EAAAla,KAAA,eAEAo1C,GACAA,EAAA1xB,UAGA,UAAA1qB,KAAAgU,SAAAoQ,UACApkB,KAAAy7C,aAAAz7C,KAAAk8C,gBAAAh7B,GAAA,GACAlhB,KAAAy7C,YAAArzB,YAAAlH,EAAAoD,UAGAtkB,KAAAw7C,YACAx7C,KAAAw7C,WAAAW,sBAKAD,gBAAA,SAAAh7B,GACA,OAAAA,EAAAm7B,aAAA,MAAA,MAAA/7C,QAMAy7C,mBAAA,WACA/7C,KAAAy7C,cAKAz7C,KAAAgU,SAAA+e,YAAA,EACA/yB,KAAAgU,SAAAgf,aAAA,EAKAhzB,KAAAw7C,WAAA,IAAAp2C,QAAAk3C,SAAA,CACAC,sBAAA,MACAC,cAAA,IACA33B,OAAA,IAAA7kB,KAAA8iB,KAAAoJ,sBAAAgS,IAAA,6BACAue,OAAAC,GAAA18C,KAAA28C,mBAAAD,GACAE,YAAA,KAEA,IAAA1uC,EAEAA,EADAlO,KAAAw7C,WAAAqB,UAAA78C,KAAAw7C,WAAAqB,SAAA3e,IAAA,4BAAA59B,OACA,8BAEA,mBAKA,IAFA,IAAAw8C,EAAA,GAEAp9C,EAAA,EAAAA,EAAAM,KAAAymB,SAAAnmB,OAAAZ,IAAA,CAEA,IAAAwhB,EAAAlhB,KAAAymB,SAAAtU,GAAAzS,GACA0F,QAAA4T,QAAAkI,EAAAhT,IACA4uC,EAAA57C,KAAAggB,GAIA,OAAA47B,GAGAC,YAAA/8C,KAAAg9C,aAAA7gC,KAAAnc,MACAi9C,mBAAAj9C,KAAAk9C,oBAAA/gC,KAAAnc,MACAm9C,WAAAn9C,KAAAo9C,gBAAAjhC,KAAAnc,MACAq9C,iBAAA,MAMAr9C,KAAAy7C,YAAA,IAAAr2C,QAAAk3C,SAAA,CACAC,sBAAA,MACAC,cAAA,IAEA33B,OAAA,KAKA,IAHA,IAAAy4B,EAAAt9C,KAAA2gB,aAAAqY,mBACAukB,EAAA,GAEA79C,EAAA,EAAAA,EAAA49C,EAAAh9C,OAAAZ,IAAA,CACA,IAAAwhB,EAAAo8B,EAAAnrC,GAAAzS,GAEAM,KAAAw9C,2BAAAt8B,EAAAla,KAAA,UAIAka,EAAAvL,SAAA,QAAA3V,KAAAk8C,gBAAAh7B,GAAA,GACAq8B,EAAAr8C,KAAAggB,EAAAoD,SAAA,KAIA,OAAA3lB,EAAA4+C,IAGAd,OAAAgB,IACA,IAAAC,EAAA/+C,EAAA,qEACAg/C,EAAAh/C,EAAA,UAAA2P,SAAAovC,GACAE,EAAAj/C,EAAA,SAAA2P,SAAAqvC,GAaA,OAXAF,EAAAnvC,SAAAsvC,GAAAxnC,YAAA,YACAqnC,EAAAvjC,SAAA,KAAApI,SAAA,OAGA2rC,EAAAzyB,IAAA,CACA6yB,cAAA79C,KAAAy7C,YAAAoB,SAAA7xB,IAAA,eACA8yB,gBAAA99C,KAAAy7C,YAAAoB,SAAA7xB,IAAA,iBACA+yB,iBAAA/9C,KAAAy7C,YAAAoB,SAAA7xB,IAAA,kBACAgzB,eAAAh+C,KAAAy7C,YAAAoB,SAAA7xB,IAAA,kBAGA0yB,GAGAd,YAAA,KACA,IAAAE,EAAA,GAGAmB,EAAA,GACAj+C,KAAAy7C,YAAAoB,SAAAjnC,KAAA,eAAAtC,MAAA,WACA2qC,EAAA/8C,KAAAvC,EAAAqB,MAAAgH,KAAA,WAGA,IAAA,IAAAtH,EAAA,EAAAA,EAAAM,KAAAymB,SAAAnmB,OAAAZ,IAAA,CAEA,IAAAwhB,EAAAlhB,KAAAymB,SAAAtU,GAAAzS,GACAJ,EAAA4hB,EAAAla,KAAA,OAEAhH,KAAAw9C,2BAAAl+C,KAIAJ,MAAA+N,QAAA3N,EAAA2+C,IACAnB,EAAA57C,KAAAggB,IAIA,OAAA47B,GAGAC,YAAA/8C,KAAAg9C,aAAA7gC,KAAAnc,MACAi9C,mBAAAj9C,KAAAk9C,oBAAA/gC,KAAAnc,MACAm9C,WAAAn9C,KAAAk+C,kBAAA/hC,KAAAnc,UAOAo9C,gBAAA,WACA,GAAAp9C,KAAAw7C,WAAA2C,mBAAAn+C,KAAAw7C,WAAA2C,kBAAA,KAAAn+C,KAAAkhB,QAAA,GAAA,CAQA,IANA,IAAAk9B,EAAAp+C,KAAAkhB,QAEAm9B,EAAAr+C,KAAAw7C,WAAA2C,kBAAAn3C,KAAA,aACAs3C,EAAA,GAGA5+C,EAAA,EAAAA,EAAAM,KAAAw7C,WAAAqB,SAAAv8C,OAAAZ,IAAA,CACA,IAAA6+C,EAAAr/C,MAAAuW,eAAAzV,KAAAw7C,WAAAqB,SAAAn9C,IAAAmW,GAEAyoC,EAAAp9C,KAAAq9C,GAIA,GAAAD,EAAAh+C,OAAA,CACAN,KAAAwnB,eAEAxnB,KAAAg8C,uBACAh8C,KAAAm7C,YAAAqD,mBACAx+C,KAAAm7C,YAAAsD,aAAAH,EAAAh+C,QACAN,KAAAm7C,YAAAuD,kBAGA,IAAAC,EAAA,GACA,IAAAj/C,EAAA,EAAAA,EAAA4+C,EAAAh+C,OAAAZ,IACAi/C,EAAAz9C,KAAA,CACA6F,OAAA,oBACAjH,OAAA,CACAokC,QAAAoa,EAAA5+C,GACAk/C,SAAAP,KAMA,IAAAQ,EAAAC,IACA9+C,KAAAk7C,cAAA6D,eAGA,IAAA,IAAAr/C,EAAA,EAAAA,EAAAo/C,EAAAx+C,OAAAZ,IAAA,CACA,IAAA+K,EAAAq0C,EAAAp/C,GAGA+K,EAAAu0C,UACAh/C,KAAAk7C,cAAA+D,UAAA,CACA/a,QAAAz5B,EAAAy5B,QACAgb,kBAAAz0C,EAAAy0C,kBACAC,OAAA,CAAAt/C,QAAA4K,EAAAu0C,SAAAnD,QAAA77C,KAAA47C,sBAAAC,WAIApxC,EAAA7C,OACAM,MAAAuC,EAAA7C,OAIA5H,KAAA0nB,oBACA1nB,KAAAm7C,YAAAiE,kBACA,IAAAld,GAAA,EAEAmd,EAAA,WAEAr/C,KAAA2gB,aAAAiM,WAAAwxB,GAGAp+C,KAAAm1B,eAAAn1B,KAAAw7C,WAAAqB,SAAAv8C,OAGA,IAAA,IAAAZ,EAAA,EAAAA,EAAA4+C,EAAAh+C,OAAAZ,IACAf,EAAA,YAAA2/C,EAAA5+C,GAAA,KAAA4a,SAGAta,KAAA8iB,KAAA+P,sBACA7yB,KAAAs/C,8BAAAjB,GAEAnc,GACAliC,KAAAimB,kBAIA,GAAAjmB,KAAAk7C,cAAAqE,iBAAA,CAkDAv/C,KAAAw7C,WAAAgE,iBACAx/C,KAAAk7C,cAAAuE,iBAjDAC,IAIA,IAHA,IAAAC,EAAA,GAGAjgD,EAAA,EAAAA,EAAAggD,EAAAp/C,OAAAZ,IACA,WAAAggD,EAAAhgD,GAAAkgD,QAKA,aAAAF,EAAAhgD,GAAAkgD,QACAD,EAAAz+C,KAAA,CACA6F,OAAA,oBACAjH,OAAA,CACA8+C,SAAAP,EACAna,QAAAwb,EAAAhgD,GAAAwkC,QACA14B,SAAAk0C,EAAAhgD,GAAAw/C,qBAKA,YAAAQ,EAAAhgD,GAAAkgD,QACAD,EAAAz+C,KAAA,CACA6F,OAAA,oBACAjH,OAAA,CACA8+C,SAAAP,EACAna,QAAAwb,EAAAhgD,GAAAwkC,QACAhW,OAAA,MArBAgU,GAAA,EA4BA,IAAAyd,EAAAr/C,OACA++C,EAAAQ,MAAA7/C,OAGAA,KAAAwnB,eACAxnB,KAAAm7C,YAAAqD,mBACAx+C,KAAAm7C,YAAAsD,aAAAz+C,KAAAk7C,cAAAqE,kBACAv/C,KAAAm7C,YAAAuD,kBAGA1+C,KAAA8/C,sBAAAH,EAAAd,WAOAQ,EAAAQ,MAAA7/C,MACAA,KAAAw7C,WAAAgE,kBAQA,YAHAx/C,KAAA8/C,sBAAAnB,EAAAE,SAOA7+C,KAAAkhB,QAAApP,SAAA,OAEA9R,KAAAs/C,gCAGAt/C,KAAAw7C,WAAAuE,2BAMA7B,kBAAA,WAEA,GACAl+C,KAAAy7C,YAAA0C,mBACA,IAAAn+C,KAAAy7C,YAAA0C,kBAAAr/B,SAAA,MAAA5E,SAAA,MAAA2K,OAAA7kB,KAAAy7C,YAAAoB,UAAAv8C,OACA,CACA,IAAA+9C,EAAAr+C,KAAAy7C,YAAA0C,kBAAAn3C,KAAA,aAEAhH,KAAAs/C,8BAAAjB,GAKA,IAFA,IAAA2B,EAAA,GAEAtgD,EAAA,EAAAA,EAAAM,KAAAy7C,YAAAoB,SAAAv8C,OAAAZ,IAAA,CACA,IACAk/C,EADA5+C,KAAAy7C,YAAAoB,SAAA1qC,GAAAzS,GAAAwa,SAAA,KACAlT,KAAA,aAGA,GAAA43C,GAAAP,EAAA,CACA2B,EAAA9+C,KAAA09C,GACA,OAIA,GAAAoB,EAAA1/C,OAAA,CACA0/C,EAAAvzC,OACAuzC,EAAAjT,UAEA/sC,KAAAwnB,eACAxnB,KAAAg8C,uBACAh8C,KAAAm7C,YAAAqD,mBACAx+C,KAAAm7C,YAAAsD,aAAAuB,EAAA1/C,QACAN,KAAAm7C,YAAAuD,kBAEA,IAAAC,EAAA,GAEA,IAAAj/C,EAAA,EAAAA,EAAAsgD,EAAA1/C,OAAAZ,IACAi/C,EAAAz9C,KAAA,CACA6F,OAAA,qBACAjH,OAAA,CACA8+C,SAAAoB,EAAAtgD,GACAugD,SAAA5B,KAMAr+C,KAAAkgD,YAmBA,IAAAC,EAAA,GAEAC,EAAA,GAEAvB,EAAAC,IACA9+C,KAAAk7C,cAAA6D,eAGA,IAAA,IAAAr/C,EAAA,EAAAA,EAAAo/C,EAAAx+C,OAAAZ,IAAA,CACA,IAAAsH,EAAA83C,EAAAp/C,GAGAsH,EAAAW,UACAX,EAAAq5C,eACAF,EAAAn5C,EAAAq5C,cAGAr5C,EAAAs5C,cACAF,EAAApgD,KAAAy7C,YAAA0C,kBAAAn3C,KAAA,OAAA,WAAAA,EAAAu5C,eAKAv5C,EAAAg4C,WACAh4C,EAAAm4C,OAAA,CACAt/C,QAAAmH,EAAAg4C,SACAnD,QAAA77C,KAAA87C,wBAAAD,SAGA77C,KAAAk7C,cAAA+D,UAAAj4C,IAGAA,EAAAY,OACAM,MAAAlB,EAAAY,OAIA,GAAA5H,KAAAk7C,cAAAqE,iBAAA,CA6CAv/C,KAAAk7C,cAAAuE,iBA3CAC,IACA1/C,KAAAk7C,cAAA6D,eAMA,IAJA,IAAAY,EAAA,GAEA7/C,EAAA,GAEAJ,EAAA,EAAAA,EAAAggD,EAAAp/C,OAAAZ,IACA,WAAAggD,EAAAhgD,GAAAkgD,SAIA,YAAAF,EAAAhgD,GAAAkgD,SACA9/C,EAAAouB,OAAA,GAGA,UAAAwxB,EAAAhgD,GAAAkgD,SACA9/C,EAAA0gD,OAAA,GAGA1gD,EAAA8+C,SAAA53C,EAAA43C,SACA9+C,EAAAmgD,SAAAj5C,EAAAi5C,SAEAN,EAAAz+C,KAAA,CACA6F,OAAA,qBACAjH,OAAAA,KAKA,IAAA6/C,EAAAr/C,OACAN,KAAAygD,yBAAAN,EAAAH,EAAAI,IAGApgD,KAAAwnB,eACAxnB,KAAAm7C,YAAAqD,mBACAx+C,KAAAm7C,YAAAsD,aAAAz+C,KAAAk7C,cAAAqE,kBACAv/C,KAAAm7C,YAAAuD,kBAEA1+C,KAAA8/C,sBAAAH,EAAAd,MAMA7+C,KAAA0nB,oBACA1nB,KAAAm7C,YAAAiE,uBAEAp/C,KAAAygD,yBAAAN,EAAAH,EAAAI,IAQA,YAHApgD,KAAA8/C,sBAAAnB,EAAAE,SAOA7+C,KAAAkhB,QAAApP,SAAA,OAEA9R,KAAAs/C,gCAGAt/C,KAAAy7C,YAAAsE,2BAMAU,yBAAA,SAAAN,EAAAO,EAAAN,GACApgD,KAAAwnB,eACAxnB,KAAAm7C,YAAAqD,mBACAx+C,KAAAm7C,YAAAsD,aAAA,GACAz+C,KAAAm7C,YAAAuD,kBAEA,IAAAiC,EAAAD,IAIA,IAFA,IAAAE,EAAA,EACA32B,EAAAy2B,EAAApgD,OACAZ,EAAA,EAAAA,EAAAghD,EAAApgD,OAAAZ,IAEAR,MAAA4H,kBAAA,uBAAA,CAAA83C,SAAA8B,EAAAhhD,IAAA,OACAkhD,IAAA32B,IACAjqB,KAAA0nB,oBACA1nB,KAAAm7C,YAAAiE,kBACAp/C,KAAAy7C,YAAAsE,0BACA//C,KAAAgpB,iBAAA,iBAAAo3B,GACApgD,KAAAsnB,qBAMA,GAAA64B,EAAA7/C,OAAA,EAAA,CAGA,IAFA,IAAAq+C,EAAA,GAEAj/C,EAAA,EAAAA,EAAAygD,EAAA7/C,OAAAZ,IACAi/C,EAAAz9C,KAAA,CACA6F,OAAA,oBACAjH,OAAAqgD,EAAAzgD,KAGAM,KAAA8/C,sBAAAnB,GAAA,WACAgC,EAAAD,WAGAC,EAAAD,IAWAG,eAAA,SAAA3/B,GAEA,IADA,IAAA4/B,GACAA,EAAA9gD,KAAA+gD,iBAAA7/B,KAAA4/B,EAAAxgD,QACA4gB,EAAA4/B,EAEA,OAAA5/B,GAUA6/B,iBAAA,SAAA7/B,GACA,GAAAlhB,KAAAk8C,gBAAAh7B,GAAA,EACA,OAAAA,EAAAoD,SAAAA,SAAAxF,SAAA,MAIAkiC,wBAAA,SAAA3C,GAMA,IALA,IAAA4C,EAAAjhD,KAAAkhD,gBAAA7C,GAGA8C,EAAAF,EAAA38B,SAAAoK,QAAA,MAEAhvB,EAAA,EAAAA,EAAAyhD,EAAA7gD,OAAAZ,IAAA,CACA,IAAA0hD,EAAAziD,EAAAwiD,EAAAzhD,IAEA0hD,EAAAzrC,SAAA,aACAyrC,EAAAlnC,SAAA,WAAAjD,QAAA,SAIAjX,KAAAqnB,aAAA45B,GACAjhD,KAAAimB,kBAQAJ,UAAA,WACA7lB,KAAA66C,gBACA76C,KAAA66C,cAAAl8C,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,aACAqT,YAAA,SACA6zB,MAAA,wCACAh+C,KAAAnE,MAAAS,EAAA,MAAA,kBAEAK,KAAAovB,UAAApvB,KAAA66C,eAEA76C,KAAA86C,aAAAn8C,EAAA,kEAAA0f,OAAAijC,aAAAthD,KAAA66C,gBAGA76C,KAAAk7C,cAAA,IAAAh8C,MAAAqiD,cACAvhD,KAAAm7C,YAAA,IAAAj8C,MAAAsiD,YAAAxhD,KAAA4gB,OAAA,GAEA,IAAA1Z,EAAA,CACA5B,IAAApG,MAAAmH,aAAA,iBACAo7C,UAAAzhD,KAAA86C,aACA4G,SAAA1hD,KAAA4S,YAGA1L,EAAAy6C,OAAA,CACAC,gBAAA5hD,KAAA6hD,eAAA1lC,KAAAnc,MACA8hD,sBAAA9hD,KAAA+hD,kBAAA5lC,KAAAnc,MACAgiD,eAAAhiD,KAAAiiD,kBAAA9lC,KAAAnc,OAGAA,KAAAgU,SAAA+Q,eAAA,IAAA/kB,KAAAgU,SAAA+Q,SAAAm9B,OACAh7C,EAAAi7C,aAAAniD,KAAAgU,SAAA+Q,SAAAm9B,MAGAliD,KAAAu7C,yBAAAr0C,EAEAlH,KAAAi7C,SAAA,IAAA/7C,MAAAkjD,SAAApiD,KAAA66C,cAAA3zC,GAEAlH,KAAA66C,cAAAzhC,GAAA,QAAA,KACApZ,KAAA66C,cAAAllC,SAAA,aAGA3V,KAAA6gB,aACA7gB,KAAA66C,cAAAv2B,SAAA1O,KAAA,6BAAAqB,QAAA,WAIAjX,KAAA4vB,QAGAzI,oBAAA,WAEA,GAAA,UAAAnnB,KAAAgU,SAAAoQ,SAAA,oBAAAi+B,oBACA,IAAA,IAAA3iD,EAAA,EAAAA,EAAAM,KAAAymB,SAAAnmB,OAAAZ,IAAA,CACA,IAAAwhB,EAAAviB,EAAAqB,KAAAymB,SAAA/mB,IACA,GAAAwhB,EAAAla,KAAA,mBAAAq7C,oBACA,OAAAnhC,EAAAla,KAAA,OAKA,OAAAhH,KAAA4vB,QAGAhC,eAAA,WACA,IAAA1M,EAAAlhB,KAAAkhD,gBAAAlhD,KAAAghB,WAeA,GAdAE,EAAAla,KAAA,cAEA5B,QAAA4T,QAAAhZ,KAAAkhB,QAAA,oBACAlhB,KAAAi7C,SAAAqH,UAAA,CACA1D,SAAA5+C,KAAAkhB,QAAAhT,KAAA,oBAEAlO,KAAA66C,cAAAzkC,YAAA,aAEApW,KAAA66C,cAAA/oC,SAAA,YAMA,UAAA9R,KAAAgU,SAAAoQ,SAAA,oBAAAwF,QAAA,CACA,IAAAhgB,EAAA,SACA24C,EAAAviD,KAAA6gD,eAAA3/B,GACAqhC,GAAAA,EAAAv7C,KAAA,mBACA4C,GAAA,IAAA24C,EAAAv7C,KAAA,kBAEA4iB,QAAAC,aAAA,GAAA,GAAA3qB,MAAAyF,OAAAiF,IAGA5J,KAAA4vB,QAGA4tB,2BAAA,SAAAx8B,GACA,IAAAnT,EAAAmT,EAAArb,MAAA,2BAEA,OAAAkI,EAAAA,EAAA,GAAA,MAGAuX,eAAA,WAEA,IAAAplB,KAAAgU,SAAAuQ,aAAAvkB,KAAAkhB,QAAApC,SAAA,MAAAxe,OAAA,CACA,GAAA,OAAAN,KAAA06C,4BAAA,CACA,IAAA7kC,EAAA,qBAAAlF,KAAAC,MAAA,IAAAD,KAAAe,UAEA1R,KAAA06C,4BAAA/7C,EAAA,oDAAA62B,YAAAx1B,KAAAyhB,SACA,IAAA+gC,EAAA7jD,EAAA,oCAAA2P,SAAAtO,KAAA06C,6BACA16C,KAAA26C,2BAAAh8C,EAAA,8BAAAkX,EAAA,wBAAAvH,SAAAk0C,GACA7jD,EAAA,uCAAAkX,EAAA,OAAAxS,KAAA,IAAAnE,MAAAS,EAAA,MAAA,yBAAA2O,SAAAk0C,GAEAxiD,KAAA0c,YAAA1c,KAAA26C,2BAAA,UAAA,WACA36C,KAAAopB,wBAAA,oBAAAppB,KAAA26C,2BAAAxkB,KAAA,YACAn2B,KAAAimB,yBAGAjmB,KAAA06C,4BAAAljC,SAAA,QAGA,IAAAirC,EAAAziD,KAAAmpB,uBAAA,qBAAA,GACAnpB,KAAA26C,2BAAAxkB,KAAA,UAAAssB,GAEAziD,KAAA06C,4BAAAljC,SAAA,CACAkrC,aAAA,EACApoB,QAAA,GACA,QAEAt6B,KAAA46C,kCAAA,EAGA56C,KAAA4vB,QAGAvK,cAAA,WACArlB,KAAA46C,mCACA56C,KAAA06C,4BAAAljC,SAAA,QAEAxX,KAAA06C,4BAAAljC,SAAA,CACAkrC,cAAA,GACApoB,QAAA,GACA,QAEAt6B,KAAA46C,kCAAA,GAGA56C,KAAA4vB,QAGA7F,cAAA,WACA,IAAA/iB,EAAAhH,KAAA4vB,OAMA,OAJA5vB,KAAA46C,kCAAA56C,KAAA26C,2BAAAxkB,KAAA,aACAnvB,EAAA+d,SAAA49B,mBAAA,GAGA37C,GAQA66C,eAAA,WACA7hD,KAAAwnB,eAGAxnB,KAAAg8C,uBACAh8C,KAAAm7C,YAAAqD,mBACAx+C,KAAAm7C,YAAAuD,kBAEA1+C,KAAAk7C,cAAA6D,gBAMAgD,kBAAA,SAAA5gB,EAAAn6B,GACA,IAAA47C,EAAA1gD,SAAA8E,EAAA67C,OAAA77C,EAAA4qB,MAAA,IAAA,IACA5xB,KAAAm7C,YAAA2H,sBAAAF,IAMAX,kBAAA,SAAA9gB,EAAAn6B,GACA,IAAAyD,EAAAzD,EAAAyK,OACAjG,EAAAxE,EAAA+7C,MAAA,GAAA99C,KAEA+9C,GAAA,EAEAv4C,EAAA9C,SAAA8C,EAAAu0C,UAEAh/C,KAAAs7C,kBAAAp6C,KAAAuJ,EAAAy5B,SAGAz5B,EAAAu0C,WACAv0C,EAAA00C,OAAA,CACAt/C,QAAAX,MAAAS,EAAA,MAAA8K,EAAAu0C,SAAA,CAAAiE,KAAAx4C,EAAAe,WACAqwC,QAAA77C,KAAA47C,sBAAAC,SAGA77C,KAAAk7C,cAAA+D,UAAAx0C,IAGAvL,MAAA8I,GAAAmY,aAEA1V,EAAA7C,MACAM,MAAAhJ,MAAAS,EAAA,MAAA,kDAAA,CAAAiI,MAAA6C,EAAA7C,SAEAM,MAAAhJ,MAAAS,EAAA,MAAA,gCAAA,CAAA6L,SAAAA,KAGAw3C,GAAA,GAIAhjD,KAAAi7C,SAAAiI,iBACAljD,KAAA0nB,oBACA1nB,KAAAm7C,YAAAiE,kBAEAp/C,KAAAk7C,cAAAqE,iBACAv/C,KAAAk7C,cAAAuE,iBAAAz/C,KAAAmjD,gBAAAhnC,KAAAnc,OAEAgjD,GACAhjD,KAAAojD,uBAWAA,mBAAA,WACA,UAAApjD,KAAAgU,SAAAoQ,UACApkB,KAAA8oB,iBAAA,gBACA9oB,KAAAwsB,iBAAA,SAEAxsB,KAAAimB,kBASAk9B,gBAAA,SAAAzD,GACA1/C,KAAAwnB,eACAxnB,KAAAm7C,YAAAqD,mBAEAx+C,KAAAk7C,cAAA6D,eAQA/+C,KAAAm7C,YAAAsD,aAAAiB,EAAAp/C,QAEA,IAAA+iD,EAAA,CAAA1E,EAAA2E,EAAAr8C,KACA,IAAAwqC,EAAA,GACA1qC,EAAA,KAEAw8C,EAAA,CAAAv8C,EAAAa,KACA,YAAAA,GAAAb,EAAAk9B,QACAlkC,KAAAs7C,kBAAAp6C,KAAA8F,EAAAk9B,SACAl9B,EAAAY,OACAM,MAAAlB,EAAAY,OAEA07C,IACAtjD,KAAAm7C,YAAAqI,4BAAA,GACAxjD,KAAAm7C,YAAAsI,oBAEAH,IAAA3E,EAAAr+C,OACA2G,IAEAo8C,EAAA1E,EAAA2E,EAAAr8C,IAIA,YAAA03C,EAAA2E,GAAA1D,QACA74C,EAAA,sBACA0qC,EAAAiS,cAAA/E,EAAA2E,GAAApf,QAEAya,EAAA2E,GAAAK,mBACAlS,EAAAvN,QAAAya,EAAA2E,GAAAK,mBAEAlS,EAAAmS,eAAAjF,EAAA2E,GAAA93C,UAEA,WAAAmzC,EAAA2E,GAAA1D,SACA74C,EAAA,sBACA0qC,EAAAvN,QAAAya,EAAA2E,GAAApf,SAGAn9B,EAIA7H,MAAA4H,kBAAAC,EAAA0qC,EAAA8R,GAFAA,EAAA,CAAArf,QAAAya,EAAA2E,GAAApf,SAAA,YAMAlkC,KAAAm7C,YAAAuD,kBACA2E,EAAA3D,EAAA,EApDA,KACA1/C,KAAA0nB,oBACA1nB,KAAAm7C,YAAAiE,kBACAp/C,KAAAojD,wBAwDAtzB,iBAAA,WACA9vB,KAAA6jD,mBAAA,EAAA7jD,KAAA8iB,KAAAwT,kBACAt2B,KAAA8iB,KAAA1J,GAAA,iBAAAC,IACArZ,KAAA6jD,mBAAA,EAAAxqC,EAAAqe,eAGA13B,KAAA4vB,QAOAi0B,kBAAA,SAAAxxC,EAAAklB,GAUA,GATA,UAAAv3B,KAAAgU,SAAAoQ,UACA/R,GACArS,KAAAw7C,WAAAj0B,iBAGAvnB,KAAAw7C,WAAA5zB,SAAA2P,EAAA2G,IAAA,+BAIAl+B,KAAAs7C,kBAAAh7C,OAAA,CACA,GAAAN,KAAA8iB,KAAA9O,SAAA+e,WACA,IAAA,IAAArzB,EAAA,EAAAA,EAAAM,KAAAs7C,kBAAAh7C,OAAAZ,IACAM,KAAA8iB,KAAAoQ,kBAAAlzB,KAAAs7C,kBAAA57C,IAKAM,KAAAs7C,kBAAA,GAGAt7C,KAAA4vB,KAAAvd,EAAAklB,GAEAv3B,KAAAqoB,eAAAroB,KAAA0iB,UAAA,WACA1iB,KAAA0c,YAAA1c,KAAA0iB,UAAA,UAAA1iB,KAAA8jD,WAAA3nC,KAAAnc,OACAA,KAAA8iB,KAAAmS,cAAA7b,GAAA,YAAApZ,KAAA+jD,gBAAA5nC,KAAAnc,QAOA8jD,WAAA,SAAAzqC,GACA,GAAAA,EAAA2G,UAAA5a,QAAA0tB,WAAAzZ,EAAA2qC,SAAA,CACA,GAAA9kD,MAAA+kD,iBAAAC,aACAhlD,MAAA+kD,iBAAAC,aAAAC,mBACA,CACA,IAAAzuC,EAAA1V,KAAA8iB,KAAAmS,cAAAmvB,aAAAxuC,KAAA,YAEAF,EAAApV,QACAN,KAAAqkD,aAAA3uC,GAKA,OADA2D,EAAA6X,mBACA,IAQA6yB,gBAAA,SAAA1qC,GACA,IAAA3D,EAAA/W,EAAA0a,EAAA6Y,MAAAtc,KAAA,YAEA1W,MAAA+kD,iBAAAC,cAAAxuC,EAAApV,QACAN,KAAAqkD,aAAA3uC,IAQA2uC,aAAA,SAAA3uC,GACA,IAAA1B,EAAA,GAEA0B,EAAA1O,KAAA,iBACAgN,EAAAswC,cAAA5uC,EAAA1O,KAAA,eACAgN,EAAAuwC,eAAA7uC,EAAA1O,KAAA,iBAGA,IAAA9H,MAAA+kD,iBAAAvuC,EAAA1O,KAAA,MAAAhH,KAAA8iB,KAAAmS,cAAAjhB,IAMAgpC,aAAA,WACAh9C,KAAA27C,qBAAA,IAMAgB,mBAAA,SAAAjnC,GACA,IACA8uC,EACAC,EAEA,OAJAzkD,KAAAmpB,uBAAA,SAKA,IAAA,QACAq7B,EAAA7lD,EAAA,+CAAA2P,SAAAlJ,QAAAsN,MACA+xC,EAAA9lD,EAAA,4BAAA2P,SAAAk2C,GACA,IAAAzkB,EAAAphC,EAAA,yBAAA2P,SAAAm2C,GACAxnB,EAAAt+B,EAAA,YAAA2P,SAAAyxB,GAEArqB,EAAApH,SAAA2uB,GAGAj9B,KAAA0kD,gBAAA1kD,KAAA8iB,KAAAid,OAAA7lB,SAAA,SAAAA,SAAA,YAAAA,WAGA,IAFA,IAAAyqC,EAAAjvC,EAAAwE,WAEAxa,EAAA,EAAAA,EAAAilD,EAAArkD,OAAAZ,IAAA,CAEA,IAAAklD,EAAAjmD,EAAAgmD,EAAAjlD,IAGA,GAAAklD,EAAAjvC,SAAA,iBACAivC,EAAAtqC,SACAkqC,EAAAx5B,IAAA,UAAA9rB,MAAAuY,KAAA,QAFA,CAMA,IAAAotC,EAAAlmD,EAAAqB,KAAA0kD,gBAAAhlD,IACAsnC,EAAA6d,EAAA7d,QAEA6d,EAAA7d,MAAAA,GACA4d,EAAA5d,MAAAA,IAGA,OAAAwd,EAEA,IAAA,SAMA,OALAA,EAAA7lD,EAAA,2CAAA2P,SAAAlJ,QAAAsN,MACA+xC,EAAA9lD,EAAA,4BAAA2P,SAAAk2C,GAEA9uC,EAAApH,SAAAm2C,GAEAD,EAIA,OAAA7lD,KAMAu+C,oBAAA,SAAA4H,GAGA,GAFAx/B,aAAAtlB,KAAA07C,gCAEAoJ,EAAA,CACA,IAAAlG,EAAAkG,EAAA99C,KAAA,aAEA43C,GACA5+C,KAAA+kD,iBAAA/kD,KAAAkhD,gBAAAtC,GAEA5+C,KAAAglD,eAAAhlD,KAAA+kD,oBAAA/kD,KAAAilD,YAAAjlD,KAAA+kD,oBACA/kD,KAAA07C,+BAAAn2B,WAAAvlB,KAAAklD,cAAA/oC,KAAAnc,MAAA,OAGAA,KAAA+kD,iBAAA,KAIAD,GAAAA,EAAA,KAAA9kD,KAAAkhB,QAAA,GAEAlhB,KAAAkhB,QAAA9K,YAAA,OAEApW,KAAAkhB,QAAApP,SAAA,QAOAwtC,8BAAA,SAAA6F,GAIA,IAAAC,EAHA9/B,aAAAtlB,KAAA07C,gCAKAyJ,IACAC,EAAAplD,KAAAkhD,gBAAAiE,GAAAz2B,QAAA,MAAAxU,SAAA,MAGA,IAAA,IAAAxa,EAAAM,KAAA27C,qBAAAr7C,OAAA,EAAAZ,GAAA,EAAAA,IAAA,CACA,IAAAwhB,EAAAlhB,KAAA27C,qBAAAj8C,QAGA,IAAA0lD,GAAA,IAAAA,EAAAvgC,OAAA,cAAA3D,EAAAla,KAAA,OAAA,MAAA1G,SACAN,KAAAqlD,gBAAAnkC,GACAlhB,KAAA27C,qBAAArsC,OAAA5P,EAAA,MAKAwhD,gBAAA,SAAA5hD,GACA,OAAAU,KAAAymB,SAAA5B,OAAA,eAAAvlB,EAAA,OAGA0lD,eAAA,SAAA9jC,GACA,OAAAA,EAAApC,SAAA,MAAAlJ,KAAA,MAAAtV,QAGA2kD,YAAA,SAAA/jC,GACA,OAAAA,EAAAoD,OAAA,MAAA3O,SAAA,aAGAuvC,cAAA,WAEAllD,KAAAs/C,8BAAAt/C,KAAA+kD,iBAAA/9C,KAAA,cAEAhH,KAAA+kD,iBAAAjmC,SAAA,WAAA7H,QAAA,SAGAjX,KAAA27C,qBAAAz6C,KAAAlB,KAAA+kD,mBAGAM,gBAAA,SAAAnkC,GACAA,EAAAoD,SAAA3O,SAAA,aACAuL,EAAApC,SAAA,WAAA7H,QAAA,UAIAglC,yBAAA,SAAA/6B,GAEA,GAAAlhB,KAAAw9C,2BAAAt8B,EAAAla,KAAA,QAAA,CAIA,IAAAs+C,EAAA,CACA,CACAvvC,MAAA7W,MAAAS,EAAA,MAAA,iBACA4lD,QAAA,KACAvlD,KAAAwlD,iBAAAtkC,MAMA,UAAAlhB,KAAAgU,SAAAoQ,SAAApkB,KAAAk8C,gBAAAh7B,GAAA,IACAokC,EAAApkD,KAAA,CACA6U,MAAA7W,MAAAS,EAAA,MAAA,iBACA4lD,QAAA,KACAvlD,KAAAylD,cAAAvkC,MAGAokC,EAAApkD,KAAA,CACA6U,MAAA7W,MAAAS,EAAA,MAAA,iBACA4lD,QAAA,KACAvlD,KAAA0lD,cAAAxkC,OAKA,IAAA9b,QAAAugD,YAAAzkC,EAAAokC,EAAA,CAAAM,UAAA,WAGAJ,iBAAA,SAAAK,GACA,IAAAC,EAAA3G,OAAAjgD,MAAAS,EAAA,MAAA,iCAEA,GAAAmmD,EAAA,CACA,IAAAhmD,EAAA,CACAmgD,SAAA4F,EAAA7+C,KAAA,aACA++C,WAAAD,GAGA9lD,KAAAwnB,eAEAtoB,MAAA4H,kBAAA,uBAAAhH,EAAA,CAAAkH,EAAAa,KAGA,GAFA7H,KAAA0nB,oBAEA,YAAA7f,GAAAb,EAAAW,QAAA,CACA3H,KAAAgmD,0BAAAH,GAEA,IAAAI,EAAAtnD,EACA,oBACAknD,EAAA7+C,KAAA,OAAA,WAAAA,EAAAk/C,UAAA,KACA9gD,QAAA4T,QAAA6sC,EAAA,mBAAA,mBAAA,IACA,oBAAA7+C,EAAA43C,SAAA,KACAx5C,QAAA4T,QAAA6sC,EAAA,mBAAA,mBAAA,KACAzgD,QAAA4T,QAAA6sC,EAAA,oBAAA,oBAAA,KACAzgD,QAAA4T,QAAA6sC,EAAA,+BAAA,+BAAA,IACA,IACA7+C,EAAA++C,WARA,aAaAxmC,EAAA0mC,EAAA/rC,SAAA,WACAla,KAAAmmD,iBAAAN,EAAAI,GACAjmD,KAAA2nB,WAAApI,GAGA,YAAA1X,GAAAb,EAAAY,OACAM,MAAAlB,EAAAY,WAMA89C,cAAA,SAAAU,GACA,GAAAvvC,QAAA3X,MAAAS,EAAA,MAAA,mCAAA,CAAA0mD,OAAA1nD,EAAA0C,KAAA+kD,EAAA/iD,WAAA,CACA,IAAAvD,EAAA,CACA8+C,SAAAwH,EAAAp/C,KAAA,cAGAhH,KAAAwnB,eAEAtoB,MAAA4H,kBAAA,uBAAAhH,EAAA,CAAAkH,EAAAa,KAGA,GAFA7H,KAAA0nB,oBAEA,YAAA7f,GAAAb,EAAAW,QAAA,CACA,IAAAk+C,EAAA7lD,KAAA+gD,iBAAAqF,GAGApmD,KAAAmoB,aAAAi+B,GAEAA,EAAA9hC,SAAAhK,SACAta,KAAAsmD,aAAAT,GAGA,YAAAh+C,GAAAb,EAAAY,OACAM,MAAAlB,EAAAY,WASA69C,cAAA,SAAAW,GACA,IAAAG,EAAA5nD,EAAA0C,KAAA+kD,EAAA/iD,QACAmjD,EAAArH,OAAAjgD,MAAAS,EAAA,MAAA,iBAAA4mD,GAEA,GAAAC,GAAAA,IAAAD,EAAA,CACA,IAAAzmD,EAAA,CACA8+C,SAAAwH,EAAAp/C,KAAA,aACAw/C,QAAAA,GAGAxmD,KAAAwnB,eAEAtoB,MAAA4H,kBAAA,uBAAAhH,EAAA,CAAAkH,EAAAa,KACA7H,KAAA0nB,oBAEA,YAAA7f,GAAAb,EAAAW,UACAy+C,EAAA/iD,KAAA2D,EAAAw/C,SAGAxmD,KAAAw9C,2BAAAx9C,KAAA2gB,aAAAoP,eAAA/oB,KAAA,UAAAhH,KAAAw9C,2BAAA4I,EAAAp/C,KAAA,SACAhH,KAAAimB,kBAIA,YAAApe,GAAAb,EAAAY,OACAM,MAAAlB,EAAAY,QAEA,UAUAo+C,0BAAA,SAAAH,GACA7lD,KAAAglD,eAAAa,KACAA,EAAAvhC,SAAAxS,SAAA,YAAAO,OAAA,uCACArS,KAAA6nB,iBAAAg+B,KAWAM,iBAAA,SAAAN,EAAAI,GAMA,IALA,IACAQ,EADAZ,EAAA/mC,SAAA,MACA5E,SAAA,MACAwsC,EAAA/nD,EAAA0C,KAAA4kD,EAAA/rC,SAAA,WAAA7W,QACAsjD,GAAA,EAEAjnD,EAAA,EAAAA,EAAA+mD,EAAAnmD,OAAAZ,IAAA,CACA,IAAAknD,EAAAjoD,EAAA8nD,EAAA/mD,IAEA,GAAAf,EAAA0C,KAAAulD,EAAA1sC,SAAA,WAAA7W,QAAAqjD,EAAA,CACAE,EAAAC,OAAAZ,GACAU,GAAA,EACA,OAIAA,GACAd,EAAA/mC,SAAA,MAAAzM,OAAA4zC,IAIAK,aAAA,SAAAT,GACA,OAAAA,GAAA,IAAAA,EAAA/mC,SAAA,MAAA5E,SAAA,MAAA5Z,SACAN,KAAAgoB,mBAAA69B,GACAA,EAAA/mC,SAAA,MAAAxE,SACAurC,EAAA/mC,SAAA,WAAAxE,SACAurC,EAAAvhC,SAAAlO,YAAA,cAIA4lC,qBAAA,WACAh8C,KAAAm7C,cACAn7C,KAAAm7C,YAAA,IAAAj8C,MAAAsiD,YAAAxhD,KAAA4gB,OAAA,IAGA,IAAAhO,EAAAjU,IACAksB,EAAA,EACA/oB,EAAA,EAEA,UAAA9B,KAAAgU,SAAAoQ,SACAxR,EAAA5S,KAAAm7C,YAAAJ,aAAAthC,QAAA,YACAoR,EAAAzlB,QAAA6xB,KAAApM,cAEAjY,EAAA5S,KAAAm7C,YAAAJ,aAAAthC,QAAA,SACAoR,EAAA7qB,KAAA4gB,MAAAiK,aAGA,IACAyvB,EAAAzvB,EADAjY,EAAA9Q,SAAAq1B,IAEA2vB,EAAA1hD,QAAA6xB,KAAAhM,SAGAnpB,EADA8Q,EAAAqY,SAAA67B,EACAA,EAAA,EAAA,EAAAxM,EAEA1nC,EAAAqY,SAAA,EAAA,EAGA,UAAAjrB,KAAAgU,SAAAoQ,UACAtiB,EAAA+oB,GAAAjY,EAAAqY,SAAA,EAAA,IAGAjrB,KAAAm7C,YAAAJ,aAAA/vB,IAAA,CACAmM,IAAAr1B,KAIAg+C,sBAAA,SAAAnB,EAAAoI,GAqBA,IApBA,IAAAjI,EAAA,GAEAkI,EAAAC,IACA/nD,MAAA4H,kBAAAmgD,EAAAlgD,OAAAkgD,EAAAnnD,OAAA,CAAAkH,EAAAa,KACA7H,KAAAm7C,YAAAqI,4BAAA,GACAxjD,KAAAm7C,YAAAsI,oBAEA,YAAA57C,IACAi3C,EAAA59C,KAAA8F,GAGA9H,MAAA8I,GAAAmY,YAGA2+B,EAAAx+C,QAAAq+C,EAAAr+C,QACAymD,EAAAjI,MAKAp/C,EAAA,EAAAA,EAAAi/C,EAAAr+C,OAAAZ,IACAsnD,EAAArI,EAAAj/C,OAMAR,MAAAwU,0BAAA,yBAAAxU,MAAAu7C,YC/6CAv7C,MAAAgoD,iBAAAhoD,MAAA04B,uBAAA34B,OAAA,CACAihD,UAAA,EACA5kC,IAAA,KACA6rC,WAAA,KACAlM,SAAA,KACAE,YAAA,KAEAiM,iBAAA,GACAC,kBAAA,GAEA9rC,KAAA,WACA6c,UAAA93B,OAAA,GAAA,iBAAA83B,UAAA,KACAA,UAAA,GAAAyE,eAAA,CACApf,UAAAzd,KAAAsnD,sBAAAnrC,KAAAnc,MACA6c,aAAA7c,KAAAunD,cAAAprC,KAAAnc,MACAmf,WAAA,CACAnf,KAAAwnD,oBAAArrC,KAAAnc,SAKAA,KAAA4vB,KAAAiwB,MAAA7/C,KAAAo4B,WAEAp4B,KAAAgU,SAAAyzC,WACAznD,KAAA0nD,kBAGA1nD,KAAA0c,YAAA1c,KAAA+3B,mBAAA,UAAA/3B,KAAA8jD,WAAA3nC,KAAAnc,OACAA,KAAAi1B,cAAA7b,GAAA,YAAApZ,KAAA+jD,gBAAA5nC,KAAAnc,QAOA8jD,WAAA,SAAAzqC,GACA,GAAAA,EAAA2G,UAAA5a,QAAA0tB,WAAAzZ,EAAA2qC,SAAA,CACA,GAAA9kD,MAAA+kD,iBAAAC,aACAhlD,MAAA+kD,iBAAAC,aAAAC,mBACA,CACA,IAAAzuC,EAAA1V,KAAAi1B,cAAAmvB,aAEA1uC,EAAApV,QACAN,KAAAqkD,aAAA3uC,GAMA,OAFA2D,EAAA6X,mBAEA,IAQA6yB,gBAAA,SAAA1qC,GACA,IAAA3D,EAAA/W,EAAA0a,EAAA6Y,MAEAhzB,MAAA+kD,iBAAAC,cAAAxuC,EAAApV,QACAN,KAAAqkD,aAAA3uC,IAQA2uC,aAAA,SAAA3uC,GACA,IAAA1B,EAAA,GAEA0B,EAAA1O,KAAA,iBACAgN,EAAAswC,cAAA5uC,EAAA1O,KAAA,eACAgN,EAAAuwC,eAAA7uC,EAAA1O,KAAA,iBAGA,IAAA9H,MAAA+kD,iBAAAvuC,EAAA1O,KAAA,MAAAhH,KAAAi1B,cAAAjhB,IAMAI,oBAAA,SAAAsB,GACA,OAAA1V,KAAA4vB,KAAAla,EAAA,CACA5V,OAAA,CACA6nD,qBAAA3nD,KAAAgU,SAAA2zC,sBAEAvjD,MAAApE,QAOA0nD,gBAAA,WACA1nD,KAAAm7C,YAAA,IAAAj8C,MAAAsiD,YAAA7iD,EAAA,sCAAA2P,SAAAtO,KAAA4S,aAEA,IAAA1L,EAAA,CACA5B,IAAApG,MAAAmH,aAAA,iBACAq7C,SAAA1hD,KAAA4S,WACAg1C,SAAA,CACAhrB,QAAA58B,KAAAgU,SAAA4oB,UAIA58B,KAAAgU,SAAAwnB,kBACAt0B,EAAA0gD,SAAA9sC,UAAA9a,KAAAgU,SAAAwnB,iBAGAx7B,KAAAgU,SAAA+Q,SAAAjP,SACA5O,EAAA0gD,SAAA9xC,OAAA9V,KAAAgU,SAAA+Q,SAAAjP,QAGA9V,KAAAg4B,iBACAh4B,KAAAmnD,WAAAxoD,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,aACAqT,YAAA,SACAnqB,KAAA,GAAArD,KAAAgU,SAAAiW,MAAA/qB,MAAAS,EAAA,MAAA,iBAAAT,MAAAS,EAAA,MAAA,kBACA61B,YAAAx1B,KAAAg4B,gBACA9wB,EAAAu6C,UAAA9iD,EAAA,WAAA,CACA4C,KAAA,OACA4Y,MAAA,SACA0tC,SAAA,GAAA7nD,KAAAgU,SAAAiW,QACAuL,YAAAx1B,KAAAmnD,YAGA/hD,QAAA6xB,KAAAhgB,QAAA,gBAIA,IAAA/X,MAAA0H,oBAAA,IAAA1H,MAAA2H,iBAEAK,EAAA0gD,SAAA1oD,MAAA0H,eAAA1H,MAAA2H,qBAGA,IAAA7G,KAAAgU,SAAA+Q,SAAAm9B,OACAh7C,EAAAi7C,aAAAniD,KAAAgU,SAAA+Q,SAAAm9B,MAGAh7C,EAAA4gD,gBAAA9nD,KAAA8nD,gBAAA3rC,KAAAnc,MAEAkH,EAAAy6C,OAAA,GACAz6C,EAAAy6C,OAAAC,gBAAA5hD,KAAA6hD,eAAA1lC,KAAAnc,MACAkH,EAAAy6C,OAAAG,sBAAA9hD,KAAA+hD,kBAAA5lC,KAAAnc,MACAkH,EAAAy6C,OAAAK,eAAAhiD,KAAAiiD,kBAAA9lC,KAAAnc,MAEAA,KAAAi7C,SAAA,IAAA/7C,MAAAkjD,SAAApiD,KAAA4S,WAAA1L,GAEAlH,KAAAmnD,YACAnnD,KAAAmnD,WAAA/tC,GAAA,QAAAC,IAGArZ,KAAAmnD,WAAAxtC,KAAA,oBAAA1C,QAAA,YAKAsrB,iBAAA,SAAAznB,GACA,IAAAmsC,EAAA,CACAnsC,UAAAA,EACAhF,OAAA9V,KAAAgU,SAAA+Q,SAAAjP,OACAI,KAAAlW,KAAAgU,SAAA6O,UAGA3jB,MAAA4H,kBAAA,4BAAAmgD,EAAAjgD,IACA,GAAAA,EAAAY,MACAM,MAAAlB,EAAAY,WACA,CACA,IAAAmgD,EAAA/nD,KAAA0iB,UAAAmC,OAAA,aAAA/J,EAAA,MACAitC,EAAAnyC,KAAA,iBAAAa,YAAA9X,EAAAqI,EAAAjI,MAAA6W,KAAA,kBACA5V,KAAAg1B,YAAAa,KAAAkyB,OAQAC,mBAAA,SAAA3zC,GAEA,GAAArU,KAAAy5B,qBAAA,CAIA,IAAAwuB,EAAA5zC,EAAAqB,SAGAuyC,EAAAn2C,SAAA,aACAm2C,EAAA/rB,QAAA,8BAAAl8B,KAAAgU,SAAA/O,KAAA,cAAAoP,EAAAwB,GAAA,mCACA3W,MAAAS,EAAA,MAAA,UAAA,UAEAsoD,EAAA35C,SAAAtO,KAAA+3B,oBAEA,IAAAmwB,IAAAD,EAAA1tB,aAAA,IAEAv6B,KAAAg4B,eAAAhN,IAAA,UAAA9rB,MAAAuY,KAAAywC,EAAA,MAEA,IAAA7tB,EAAA,GACAA,EAAA,UAAAn7B,MAAAuY,MAAA,EACAzX,KAAAg4B,eAAAxgB,SAAA6iB,EAAA,QAEAr6B,KAAA85B,YAAAmuB,UAEAjoD,KAAA0vB,QAMAmyB,eAAA,WACA7hD,KAAAm7C,YAAAJ,aAAA/vB,IAAA,CACAmM,IAAAxmB,KAAAK,MAAAhR,KAAA4S,WAAAwkB,cAAA,GAAA,IAGAp3B,KAAA4S,WAAAd,SAAA,aACA9R,KAAAm7C,YAAAqD,mBACAx+C,KAAAm7C,YAAAuD,mBAMAqD,kBAAA,SAAA5gB,EAAAn6B,GACA,IAAA47C,EAAA1gD,SAAA8E,EAAA67C,OAAA77C,EAAA4qB,MAAA,IAAA,IACA5xB,KAAAm7C,YAAA2H,sBAAAF,IAMAX,kBAAA,SAAA9gB,EAAAn6B,GACA,GAAAA,EAAAyK,OAAA7J,MACAM,MAAAlB,EAAAyK,OAAA7J,WACA,CACA,IAAAq/C,EAAA,CACAnsC,UAAA9T,EAAAyK,OAAAyyB,QACApuB,OAAA9V,KAAAgU,SAAA+Q,SAAAjP,OACAI,KAAAlW,KAAAgU,SAAA6O,UAGA3jB,MAAA4H,kBAAA,4BAAAmgD,EAAAjgD,IACA,GAAAA,EAAAY,MACAM,MAAAlB,EAAAY,WACA,CACA,IAAA7I,EAAAJ,EAAAqI,EAAAjI,MACAG,MAAA8S,eAAAhL,EAAAgY,UACAhf,KAAAgoD,mBAAA9oD,MAAAuW,eAAA1W,IAIAiB,KAAAi7C,SAAAiI,iBACAljD,KAAAm7C,YAAAiE,kBACAp/C,KAAA4S,WAAAwD,YAAA,aAEAvK,OAAA2uB,aACA3uB,OAAA2uB,YAAAmC,eAKAz9B,MAAA8I,GAAAmY,aAOA2nC,gBAAA,SAAAK,GACA,OAAAnoD,KAAAgU,SAAAiW,OAAAjqB,KAAA0iB,UAAApiB,OAAA6nD,EAAAnoD,KAAAgU,SAAAiW,OASAm+B,eAAA,SAAA58C,GACA,IAAA68C,EAAA78C,EAAArK,MAAA,KACAmnD,EAAA,GAMA,OAJAD,EAAA/nD,OAAA,IACAgoD,EAAAD,EAAAE,OAGA,CAAAD,UAAAA,EAAAE,aADAH,EAAA5nD,KAAA,OAQA8mD,cAAA,SAAAt5C,GACAtP,EAAA,gBAAAsP,GAAAmL,GAAA,QAAA1O,IACA,IAAAtG,EAAAsG,EAAA6O,cACA/N,EAAAxL,KAAAooD,eAAAhkD,EAAAe,OAEA,KAAAnF,KAAAonD,kBAAA,KAAApnD,KAAAqnD,oBACArnD,KAAAonD,iBAAA57C,EAAAg9C,aACAxoD,KAAAqnD,kBAAA77C,EAAA88C,WAGA,IACAG,EAAAj9C,EAAAg9C,aAAAloD,OAEA,QAAA,IAAA8D,EAAAskD,eACAtkD,EAAAskD,eAJA,EAKAtkD,EAAAukD,aAAAF,OACA,GAAAjiD,SAAAkuC,WAAAluC,SAAAkuC,UAAAkU,YAAA,CAEAxkD,EAAAykD,SACA,IAAAC,EAAAtiD,SAAAkuC,UAAAkU,cACAE,EAAAC,UAAA,GACAD,EAAAE,QAAA,YAAAP,GACAK,EAAAG,UAAA,YAZA,GAaAH,EAAAD,aAKAvB,sBAAA,WACAtnD,KAAAonD,iBAAA,GACApnD,KAAAqnD,kBAAA,IAGAG,oBAAA,WACA,IAAA0B,EAAAvqD,EAAA,gBAAAqB,KAAA83B,cAAAxc,IAAA6C,KAAAnX,KAAA,iBAAAiH,OACAzC,EAAAxL,KAAAooD,eAAAc,EAAA5kD,OAEA,OAAAkH,EAAA88C,YAAAtoD,KAAAqnD,oBAEA,KAAA77C,EAAA88C,UAEAtoD,KAAAonD,mBAAA57C,EAAAg9C,cACAU,EAAA5kD,IAAAkH,EAAAg9C,aAAA,IAAAxoD,KAAAqnD,oBACA,GAGAxwC,QAAA3X,MAAAS,EAAA,MAAA,0DAAA,CAAAwpD,IAAAnpD,KAAAqnD,qBAIAxwC,QAAA3X,MAAAS,EAAA,MAAA,iFACA,CACAypD,OAAAppD,KAAAqnD,kBACAgC,OAAA79C,EAAA88C,iBC3VAppD,MAAAoqD,mBAAApqD,MAAAiV,yBAAAlV,OAAA,CACAsqD,oBAAA,KACAC,mBAAA,KAEAjuC,KAAA,SAAA5H,EAAAK,GACAA,EAAArV,EAAAM,OAAA,GAAAC,MAAAoqD,mBAAA9tC,SAAAxH,GAEAhU,KAAA4vB,KAAAjc,EAAAK,GAEAA,EAAAy1C,WAAAnpD,QACAN,KAAA0pD,4BAAA11C,EAAAy1C,aAIAC,4BAAA,SAAAD,GACA,GAAAA,GAAAA,EAAAnpD,OAAA,CAIA,IAAAqpD,EAAAhrD,EAAA,2BAAA2P,SAAAtO,KAAAk9B,iBACAl9B,KAAA+8B,WAAAzuB,SAAAq7C,GAEA3pD,KAAAupD,oBAAA5qD,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,uBACA9W,KAAAnE,MAAAS,EAAA,MAAA,sBACA2O,SAAAq7C,GAKA,IAHA,IAAAj2B,EAAA/0B,EAAA,+CAAA62B,YAAAx1B,KAAAupD,qBACAK,EAAAjrD,EAAA,aAAA2P,SAAAolB,GAEAh0B,EAAA,EAAAA,EAAA+pD,EAAAnpD,OAAAZ,IACAf,EAAA,0BAAA8qD,EAAA/pD,GAAAq2B,OAAA,KAAA0zB,EAAA/pD,GAAAuF,KAAA,aAAAqJ,SAAAs7C,GAGA,IAAAC,EAAA,IAAAzkD,QAAAyU,QAAA7Z,KAAAupD,oBAAA,CACAO,eAAA9pD,KAAA+pD,kBAAA5tC,KAAAnc,QAEA6pD,EAAAjyC,UAEA5X,KAAAupD,oBAAAviD,KAAA,aAAA6iD,KAGA7iC,kBAAA,SAAA3N,GACA,IAAAkd,EAAAv2B,KAAAogB,aAAA8L,sBACA89B,GAAA,EAEA,GAAAzzB,EAAAj2B,QAAAN,KAAAgU,SAAAy1C,WAAAnpD,OAAA,CACA0pD,GAAA,EAEA,IAAA,IAAAtqD,EAAA,EAAAA,EAAA62B,EAAAj2B,QACA3B,EAAA,0BAAA43B,EAAA72B,IAAAY,OADAZ,MAOA,IAAAma,EAAA,KAEA7Z,KAAAupD,sBACA1vC,EAAA7Z,KAAAupD,oBAAAviD,KAAA,eAGAgjD,GACAnwC,GACAA,EAAA9B,SAGA/X,KAAAupD,oBAAAnzC,YAAA,aACApW,KAAAupD,sBACA1vC,GACAA,EAAAjC,UAGA5X,KAAAupD,oBAAAz3C,SAAA,aAGA9R,KAAA4vB,QAGAm6B,kBAAA,SAAA55B,GACA,IAAA85B,EAAAtrD,EAAAwxB,GAAAnpB,KAAA,aACAhH,KAAAkqD,0BAAAD,IAGAC,0BAAA,SAAAD,QAEA,IAAA/qD,MAAAoqD,mBAAAa,cAAAF,KACA/qD,MAAAoqD,mBAAAa,cAAAF,GAAA,IAMA,IAHA,IAAA1zB,EAAAv2B,KAAAogB,aAAA8L,sBACAk+B,EAAA,GAEA1qD,EAAA,EAAAA,EAAA62B,EAAAj2B,OAAAZ,IAAA,CACA,IAAA2qD,EAAA1rD,EAAA43B,EAAA72B,IACAob,EAAA5b,MAAAuW,eAAA40C,GAAAx0C,QAEA,IAAA3W,MAAAoqD,mBAAAa,cAAAF,GAAAnvC,IACAsvC,EAAAlpD,KAAA4Z,GAIAsvC,EAAA9pD,QACAN,KAAA49B,oBAEA59B,KAAAsqD,0BAAAF,EAAAH,EAAA,KACAjqD,KAAA69B,oBACA79B,KAAAkqD,0BAAAD,OAGAjqD,KAAAwpD,mBAAAS,EACAjqD,KAAA07B,iBACA17B,KAAAwpD,mBAAA,OAIAc,0BAAA,SAAAF,EAAAH,EAAAhjD,GACA,IAAA6T,EAAAsvC,EAAA7B,MAEAvhD,EAAA,CACAk9B,QAAAppB,EACAib,OAAAk0B,GAGA/qD,MAAA4H,kBAAA,4BAAAE,EAAA,CAAAyD,EAAA5C,KACA3I,MAAAoqD,mBAAAa,cAAAF,GAAAnvC,IAAA,EAEA,YAAAjT,GACA4C,EAAAnF,MACApG,MAAAoqD,mBAAAa,cAAAF,GAAAnvC,GAAArQ,EAAAnF,KAKA8kD,EAAA9pD,OACAN,KAAAsqD,0BAAAF,EAAAH,EAAAhjD,GAEAA,OAKAwO,eAAA,SAAA8gB,GACA,IAAA0H,EAAAj+B,KAAA4vB,KAAA2G,GAEA,GAAAv2B,KAAAwpD,mBACA,IAAA,IAAA9pD,EAAA,EAAAA,EAAAu+B,EAAA39B,OAAAZ,IAAA,CACA,IAAAob,EAAAmjB,EAAAv+B,GAAAmW,QAGA,IAAA3W,MAAAoqD,mBAAAa,cAAAnqD,KAAAwpD,oBAAA1uC,KACA,IAAA5b,MAAAoqD,mBAAAa,cAAAnqD,KAAAwpD,oBAAA1uC,KAEAmjB,EAAAv+B,GAAA4F,IAAApG,MAAAoqD,mBAAAa,cAAAnqD,KAAAwpD,oBAAA1uC,IAKA,OAAAmjB,GAGA7C,SAAA,SAAAQ,GACA57B,KAAAgU,SAAAonB,SAAAQ,EAAA57B,KAAAwpD,sBAEA,CACAhuC,SAAA,CACA+uC,0BAAA,EACAd,WAAA,IAGAU,cAAA,KAIAjrD,MAAA2U,kCAAA,yBAAA3U,MAAAoqD,oBC/KApqD,MAAAsrD,YAAAplD,QAAAyV,KAAA5b,OAAA,CACAwrD,qBAAA,KACAC,2BAAA,KACAC,oBAAA,KACAC,+BAAA,KAEAC,2BAAA,EACAC,mBAAA,EAEAC,mBAAA,KACAC,WAAA,KAEAC,mBAAA,KACAC,eAAA,KACAC,iBAAA,KACAC,UAAA,KACAC,gBAAA,KAEAC,wBAAA,EAKA/vC,KAAA,WACAvb,KAAAurD,2BAAArsD,MAAAurD,uBAMAe,8BAAA,SAAAh7C,GACAxQ,KAAA0qD,4BACAplC,aAAAtlB,KAAA0qD,4BAGA1qD,KAAA0qD,2BAAAnlC,WAAAvlB,KAAAyrD,0BAAAtvC,KAAAnc,MAAA,IAAAwQ,IAMAi7C,0BAAA,SAAAC,GACA/sD,EAAA4I,KAAA,CACAjC,IAAApG,MAAAmH,aAAA,qBAAAqlD,EAAA,KAAA,uBACAnqD,KAAA,MACAiG,SAAA,OACA8P,SAAA,CAAAhQ,EAAAO,KACA,YAAAA,QACA,IAAAP,EAAAqkD,aAAA9kD,qBAAA,IAAA3H,MAAA2H,iBACA3H,MAAA2H,eAAAS,EAAAqkD,aAAA9kD,gBAGA7G,KAAAurD,2BAAAjkD,EAAAqkD,aAAAjtB,SACA1+B,KAAAsrD,wBAAA,GAEAtrD,KAAAurD,4BAAA,OASAA,2BAAA,SAAAd,GACAzqD,KAAAyqD,qBAAAvoD,SAAAuoD,IAGA,IAAAzqD,KAAAyqD,sBAAAzqD,KAAAyqD,qBAAAvrD,MAAAsrD,YAAAoB,oBAEA5rD,KAAAyqD,sBACAzqD,KAAA6qD,2BAEA7qD,KAAA6rD,yBAIA7rD,KAAAyqD,qBAAAvrD,MAAAsrD,YAAAsB,gBACA9rD,KAAA2qD,qBACArlC,aAAAtlB,KAAA2qD,qBAGA3qD,KAAA2qD,oBAAAplC,WAAAvlB,KAAA+rD,eAAA5vC,KAAAnc,MAAA,IAAAA,KAAAyqD,wBAGAzqD,KAAA8qD,kBACA9qD,KAAAsrD,wBACAtrD,KAAAgsD,cAIAhsD,KAAA+rD,iBAIA/rD,KAAAwrD,8BAAAtsD,MAAAsrD,YAAAsB,iBAGA9rD,KAAAisD,yBACAjsD,KAAAksD,kBAGA,IAAAlsD,KAAAyqD,sBAAAzqD,KAAAyqD,qBAAAvrD,MAAAsrD,YAAAoB,mBAAA1sD,MAAAsrD,YAAAsB,cACA9rD,KAAAwrD,8BAAAxrD,KAAAyqD,qBAAAvrD,MAAAsrD,YAAAoB,mBAAA,GAEA5rD,KAAAwrD,8BAAAtsD,MAAAsrD,YAAAsB,iBAQAD,uBAAA,WACA,IAAAM,EAWA,GATAnsD,KAAA8qD,mBACA9qD,KAAAksD,gBAAA,GACAC,GAAA,GAEAA,GAAA,EAGAnsD,KAAA6qD,2BAAA,GAEA7qD,KAAA+qD,mBAAA,CACA,IAAA98C,EAAAtP,EAAA,8DACAyf,EAAAzf,EAAA,uBAAA2P,SAAAL,GACAw0B,EAAA9jC,EAAA,gCAAA2P,SAAA8P,GACAguC,EAAAztD,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,MACA9W,KAAAnE,MAAAS,EAAA,MAAA,iBACA2O,SAAAm0B,GACA4pB,EAAA1tD,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,aACA9W,KAAAnE,MAAAS,EAAA,MAAA,uBACA2O,SAAAm0B,GAEAziC,KAAAirD,mBAAAtsD,EAAA,QAAAiqB,UAAAxK,GAEApe,KAAA+qD,mBAAA,IAAA3lD,QAAA03B,MAAA7uB,EAAA,CACAq+C,UAAA,EACAtxB,kBAAA,EACA1d,WAAA,EACAC,kBAAA,EACAgvC,WAAA,2CACAlvB,SAAA,WACAj4B,QAAAugB,iBAAA,IAEAJ,YAAA,WACA8mC,EAAAp1C,QAAA,WACA,QAKAjX,KAAA0c,YAAA0vC,EAAA,WAAA,UACApsD,KAAA0c,YAAAzO,EAAA,SAAA,gBAGAk+C,EACAnsD,KAAA+qD,mBAAAoB,YAEAnsD,KAAA+qD,mBAAAlwB,OAGA76B,KAAAwsD,6BAEAxsD,KAAA4qD,+BAAApX,YAAAxzC,KAAAysD,uBAAAtwC,KAAAnc,MAAA,MAMAwsD,2BAAA,WACAxsD,KAAAirD,mBAAA5nD,KAAAnE,MAAAS,EAAA,MAAA,sCAAA,CACA+sD,KAAAxtD,MAAAqR,2BAAAvQ,KAAAyqD,yBAGAzqD,KAAA+qD,mBAAA9tC,yBAGAwvC,uBAAA,WACAzsD,KAAAyqD,qBAAA,IACAzqD,KAAAyqD,uBACAzqD,KAAAwsD,8BAGA,IAAAxsD,KAAAyqD,sBACArW,cAAAp0C,KAAA4qD,iCAOAqB,uBAAA,SAAAU,GACA3sD,KAAA6qD,2BAAA,EAEA7qD,KAAA+qD,qBACA4B,EACA3sD,KAAA+qD,mBAAA6B,YAEA5sD,KAAA+qD,mBAAA1sC,OAGAre,KAAA4qD,gCACAxW,cAAAp0C,KAAA4qD,kCAQAmB,eAAA,WACA,IAAAI,EAWA,GATAnsD,KAAA6qD,2BACA7qD,KAAAisD,wBAAA,GACAE,GAAA,GAEAA,GAAA,EAGAnsD,KAAA8qD,mBAAA,GAEA9qD,KAAAgrD,WAAA,CACA,IAAA/8C,EAAAtP,EAAA,sDACAyf,EAAAzf,EAAA,yBAAAO,MAAAS,EAAA,MAAA,2BAAA,WAAAT,MAAAS,EAAA,MAAA,uCAAA,cAAA2O,SAAAL,GACA4+C,EAAAluD,EAAA,gCAAA2P,SAAA8P,GACA0uC,EAAAnuD,EAAA,uBAAA2P,SAAAu+C,GACAE,EAAApuD,EAAA,4BAAA2P,SAAAw+C,GACAE,EAAAruD,EAAA,UAAA2P,SAAAw+C,GACAG,EAAAtuD,EAAA,kCAAA2P,SAAAy+C,GAEA/sD,KAAAkrD,eAAAvsD,EAAA,uEAAAO,MAAAS,EAAA,MAAA,YAAA,OAAA2O,SAAA2+C,GACAjtD,KAAAmrD,iBAAAxsD,EAAA,iCAAA2P,SAAAu+C,GACA7sD,KAAAorD,UAAAzsD,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,sBACA9W,KAAAnE,MAAAS,EAAA,MAAA,WACA2O,SAAA0+C,GACAhtD,KAAAqrD,gBAAA1sD,EAAA,sBAAA2P,SAAA8P,GAEApe,KAAAgrD,WAAA,IAAA5lD,QAAA03B,MAAA7uB,EAAA,CACAq+C,UAAA,EACAtxB,kBAAA,EACA1d,WAAA,EACAC,kBAAA,EACAgvC,WAAA,mCACAlvB,SAAA,KACAj4B,QAAAugB,iBAAA,IAEAJ,WAAA,KACAvlB,KAAAkrD,eAAAj0C,QAAA,UACA,MAGA27B,UAAA,KACA5yC,KAAAkrD,eAAA5mD,IAAA,OAIA,IAAApF,MAAAguD,cAAAltD,KAAAkrD,eAAA,CACAiC,cAAAC,IACAptD,KAAAkrD,eAAAkC,KAIAptD,KAAA0c,YAAA1c,KAAAkrD,eAAA,QAAA,oBACAlrD,KAAA0c,YAAAzO,EAAA,SAAA,SAGAk+C,EACAnsD,KAAAgrD,WAAAmB,YAEAnsD,KAAAgrD,WAAAnwB,QAOAqxB,eAAA,SAAAS,GACA3sD,KAAA8qD,mBAAA,EAEA9qD,KAAAgrD,aACA2B,EACA3sD,KAAAgrD,WAAA4B,YAEA5sD,KAAAgrD,WAAA3sC,SAKAgvC,OAAA,WACA1uD,EAAA8xB,IAAA,CACAnrB,IAAApG,MAAAmH,aAAA,gBACAmB,SAAA,OACAG,QAAA,KACAzI,MAAAqH,WAAA,QAKA+mD,aAAA,SAAAj0C,GACAA,GACAA,EAAAqM,iBAGA1lB,KAAAisD,yBACAjsD,KAAAyrD,2BAAA,IAGA8B,iBAAA,WACA,OAAAvtD,KAAAkrD,eAAA5mD,MAAAhE,QAAA,GACAN,KAAAorD,UAAAh1C,YAAA,aACA,IAEApW,KAAAorD,UAAAt5C,SAAA,aACA,IAIA07C,MAAA,SAAAn0C,GACAA,GACAA,EAAAqM,iBAGA1lB,KAAAutD,qBACAvtD,KAAAmrD,iBAAA/0C,YAAA,UACApW,KAAAytD,uBAEA,IAAAvuD,MAAA2H,gBAGA7G,KAAAsrD,wBAAA,EACAtrD,KAAAyrD,6BAEAzrD,KAAAgsD,gBAKAA,YAAA,WACA,IAAAhlD,EAAA,CACA0mD,UAAAxuD,MAAAyuD,SACAC,SAAA5tD,KAAAkrD,eAAA5mD,OAGApF,MAAA4H,kBAAA,cAAAE,EAAA,CAAAyD,EAAA5C,KACA7H,KAAAmrD,iBAAAr5C,SAAA,UAEA,YAAAjK,EACA4C,EAAA9C,SACA3H,KAAAksD,iBACAlsD,KAAAyrD,8BAEAzrD,KAAA6tD,eAAApjD,EAAA7C,OACAxC,QAAA0a,MAAA9f,KAAAgrD,WAAAp4C,YAEAxN,QAAAugB,iBAAA,IACA3lB,KAAAkrD,eAAAj0C,QAAA,UAIAjX,KAAA6tD,oBAKAA,eAAA,SAAAjmD,GACAA,MAAAA,IACAA,EAAA1I,MAAAS,EAAA,MAAA,6BAGAK,KAAAqrD,gBAAAhoD,KAAAuE,GACA5H,KAAAgrD,WAAA/tC,yBAGAwwC,gBAAA,WACAztD,KAAA6tD,eAAA,MAEA,CACA/B,cAAA,GACAF,mBAAA,MCpYA1sD,MAAA4uD,GAAA1oD,QAAAyV,KAAA5b,OAAA,CACA8uD,YAAA,KAEAC,KAAA,KACAC,eAAA,KACAC,QAAA,KACAC,QAAA,KACAC,uBAAA,KACAxtC,MAAA,KACAytC,aAAA,KACAC,iBAAA,KACA/xC,QAAA,KACAgyC,aAAA,KACAC,SAAA,KACAC,eAAA,KACAC,UAAA,KACAjoB,MAAA,KACAkoB,gBAAA,KACAC,iBAAA,KACAC,aAAA,KACAC,iBAAA,KACAC,cAAA,KACAC,kBAAA,KACAluC,SAAA,KACAmuC,kBAAA,KACAC,SAAA,KAEAC,oBAAA,KACAC,YAAA,KACAC,mBAAA,KAEAC,aAAA,EAEAC,aAAA,EACAC,UAAA,EACAC,QAAA,KACAC,iBAAA,KACAC,0BAAA,EACAC,wBAAA,KACAC,gBAAA,KAEAC,oBAAA,EACAC,8BAAA,EACAC,gCAAA,EACAC,yBAAA,KAEA10C,KAAA,WAEA,IAAArc,MAAAurD,uBACAzqD,KAAA+tD,YAAA,IAAA7uD,MAAAsrD,aAIAxqD,KAAAguD,KAAArvD,EAAA,QACAqB,KAAAiuD,eAAAtvD,EAAA,mBACAqB,KAAAkuD,QAAAvvD,EAAA,WACAqB,KAAAmuD,QAAAxvD,EAAA,WACAqB,KAAAouD,uBAAAzvD,EAAA,kBACAqB,KAAA4gB,MAAAjiB,EAAA,SACAqB,KAAAquD,aAAA1vD,EAAA,cACAqB,KAAAsuD,iBAAA3vD,EAAA,qBACAqB,KAAAuc,QAAA5d,EAAA,WACAqB,KAAAuuD,aAAA5vD,EAAA,iBACAqB,KAAAwuD,SAAA7vD,EAAA,YACAqB,KAAAgvD,kBAAArwD,EAAA,sBACAqB,KAAA8gB,SAAAniB,EAAA,YACAqB,KAAAivD,kBAAAtwD,EAAA,sBACAqB,KAAAqvD,mBAAA1wD,EAAA,qBAEAqB,KAAA6sB,yBAGA,IAAAlO,EAAA3e,KAAAwuD,SAAA54C,KAAA,kCAEA,IAAA,IAAAlW,EAAA,EAAAA,EAAAif,EAAAre,OAAAZ,IAAA,CACA,IAAAkf,EAAAD,EAAAxM,GAAAzS,GACAmf,EAAAD,EAAAE,SAAA,YAAA5E,SAAA,SACAvb,EAAA,UAAA,CACAwb,MAAA,OACApb,KAAA6f,EAAA1E,WAAAnb,SACAuP,SAAAuQ,GACAD,EAAAtE,SAwCA,GArCAta,KAAAuc,QAAAjc,SACAN,KAAA0c,YAAAtX,QAAA6xB,KAAA,SAAA,qBACAj3B,KAAAkwD,qBAGA9qD,QAAAuV,KAAAC,MAAA,KAEA5a,KAAA0c,YAAAtX,QAAA6xB,KAAA,SAAA,sBACAj3B,KAAAmwD,qBAGA,IAAAC,EAAApwD,KAAAouD,uBAAAl0C,SAAA,UACAm2C,EAAArwD,KAAAouD,uBAAAl0C,SAAA,gBAEAk2C,EAAAE,MAAA,EAAApxD,MAAA4uD,GAAAyC,sBAAA/4C,SAAA,WACA64C,EAAAC,MAAApxD,MAAA4uD,GAAAyC,sBAAA/4C,SAAA,WAIApS,QAAA2Z,sBAAA/e,KAAAwwD,iBAAAr0C,KAAAnc,SAIAA,KAAAkuD,QAAA5tD,QACAN,KAAAywD,aAIAzwD,KAAA0c,YAAA/d,EAAA,eAAA,QAAA,aACAqB,KAAA0c,YAAA/d,EAAA,mBAAA,QAAA,iBAGAqB,KAAAquD,aAAA/tD,SACAN,KAAAquD,aAAA1vD,EAAA,kCAIAqB,KAAAquD,aAAA/tD,QAAA8E,QAAA4T,QAAAhZ,KAAAquD,aAAA,qBAAA,CACA,IAAAqC,EAAA,GACAptC,EAAAtjB,KAAAquD,aAAArnD,KAAA,WACA,QAAA,IAAAsc,EACAotC,EAAAxvD,KAAA,CACA,CACA8e,QAAA5a,QAAA6a,MACAC,MAAA,GACA,CACApJ,SAAA9W,KAAAquD,aAAArnD,KAAA,yBACA+P,aAAA3R,QAAA4T,QAAAhZ,KAAAquD,aAAA,+BAIA,IAAA,IAAA3uD,EAAA,EAAAA,EAAA4jB,EAAAhjB,OAAAZ,IAAA,CACA,IAAAqH,EAAAuc,EAAA5jB,GACAqH,EAAA4pD,UAGAD,EAAAxvD,KAAA,CACA,CACA8e,QAAA5a,QAAA6a,MACAC,MAAA,EACAld,QAAA+D,EAAA/D,OACA,CACA+D,OAAAA,EAAAA,OACA+P,SAAA/P,EAAA+P,SACAD,QAAA9P,EAAA8P,QACA/W,OAAAiH,EAAAjH,OACAkH,KAAAD,EAAAC,KACA+P,aAAAhQ,EAAAgQ,gBAKA,IAAA,IAAArX,EAAA,EAAAA,EAAAgxD,EAAApwD,OAAAZ,IACA0F,QAAA0Y,gBAAAC,iBAAA2yC,EAAAhxD,GAAA,GAAA,KACAM,KAAA4wD,kBAAAF,EAAAhxD,GAAA,MAKAM,KAAA6wD,WAGA,IAAA75C,EAAA9X,MAAAqV,gBAAA,gBACA,IAAAyC,IACA9X,MAAA2V,mBAAA,WACAzP,QAAAuV,KAAAC,MAAA,KACAxV,QAAA2Z,sBAAA,KACAlT,OAAAilD,SAAA,EAAA95C,QAKArY,EAAAy3B,mBACAp2B,KAAAiuD,eAAA70C,GAAA,QAAA,oCAAApZ,KAAA+wD,kBAAA50C,KAAAnc,OACAA,KAAAiuD,eAAA70C,GAAA,OAAA,oCAAApZ,KAAAgxD,iBAAA70C,KAAAnc,SAIAwwD,iBAAA,WAKA,GAHAxwD,KAAAmvD,oBAAAxwD,EAAA,6BACAqB,KAAAovD,YAAAzwD,EAAA,oBAEAqB,KAAAmvD,oBAAA7uD,OAAA,CAOA,IAHA,IACA2N,EAAAgjD,EADAC,EAAAlxD,KAAAmvD,oBAAAxyC,IAAA3c,KAAAovD,aAGA1vD,EAAA,EAAAA,EAAAwxD,EAAA5wD,OAAAZ,KACAuO,EAAAijD,EAAA/+C,GAAAzS,IACAsH,KAAA,4BAEAiqD,EADA,mBAAAhjD,EAAAjH,KAAA,cACAiH,EAAAjH,KAAA,aAAAiH,GAEAA,EAAAiR,YAEAjR,EAAAjH,KAAA,yBAAAiqD,IAEAjxD,KAAA0c,YAAAzO,EAAA,UAAA,SAAAoL,GAIA,GAHAjU,QAAA4T,QAAA/K,EAAA,wBACAjO,KAAAqoB,eAAAjjB,QAAA6xB,KAAA,gBAEA7xB,QAAA4T,QAAA/K,EAAA,cAAA,CAEA,IAAAgjD,EADA53C,EAAAqM,iBAGAurC,EADA,mBAAAhjD,EAAAjH,KAAA,cACAiH,EAAAjH,KAAA,aAAAiH,GAEAA,EAAAiR,YAEA,IAAAlY,EAAA9H,MAAAmN,cAAA4B,EAAAjH,KAAA,0BAAAiqD,EAAA/xD,MAAAsN,YACAtN,MAAA8O,WAAAhH,GACAsH,SAAAlJ,QAAAsN,MACAy+C,aAKAnxD,KAAA0c,YAAAtX,QAAA6xB,KAAA,gBAAA,SAAA5d,GACA,IACApL,EAAAgjD,EADAG,GAAA,EAEA,QAAA,IAAAlyD,MAAAmyD,aAAAnyD,MAAAmyD,YAAAC,cACAF,GAAA,OAEA,IAAA,IAAA1xD,EAAA,EAAAA,EAAAM,KAAAmvD,oBAAA7uD,OAAAZ,IAOA,GAJAuxD,EADA,mBADAhjD,EAAAjO,KAAAmvD,oBAAAh9C,GAAAzS,IACAsH,KAAA,cACAiH,EAAAjH,KAAA,aAAAiH,GAEAA,EAAAiR,YAEAjR,EAAAjH,KAAA,4BAAAiqD,EAAA,CACAG,GAAA,EACA,MAKA,GAAAA,EAAA,CACA,IAAAvxD,EAAAX,MAAAS,EAAA,MAAA,oDAQA,OANA0Z,EACAA,EAAAk4C,cAAAC,YAAA3xD,EAEAgM,OAAAs1B,MAAAqwB,YAAA3xD,EAGAA,QAKAkxD,kBAAA,WACA/wD,KAAAkwD,qBAGAc,iBAAA,WACAhxD,KAAAkwD,qBAaAU,kBAAA,SAAA1pD,GAEAlH,KAAAiX,QAAA,sBAEA,iBAAA/P,GAAAvI,EAAAoG,cAAAmC,KACAA,EAAA,IAGAA,EAAA4P,WACA5P,EAAA4P,SAAA9W,KAAAquD,aAAArnD,KAAA,0BAGAE,EAAAF,OACAE,EAAAF,KAAA,IAEAE,EAAAF,KAAAyqD,cAAA,EAEAvyD,MAAA0X,WAAA5W,KAAAquD,aAAAnnD,IAGA2lB,uBAAA,WACA,IAAAw9B,EAAArqD,KAAA8gB,SAAAlL,KAAA,eACAiJ,EAAAwrC,EAAAnwC,SAAA,UACAvb,EAAA,gCAAA0E,KAAAwb,EAAAve,OAAAue,EAAAxb,OAAAgnD,EAAAhnD,QACA+B,QAAAsN,KAAA0D,YAAA,oBAGAs7C,UAAA,WACAtsD,QAAAsN,KAAAi/C,YAAA,gBAGAC,cAAA,WACAxsD,QAAAsN,KAAAi/C,YAAA,oBAGAd,SAAA,WAMA,GAJA7wD,KAAA0uD,UAAA1uD,KAAAymC,MAAAzmC,KAAA2uD,gBAAA3uD,KAAA4uD,iBAAA5uD,KAAA6uD,aACA7uD,KAAA8uD,iBAAA9uD,KAAA+uD,cAAA,KAEA/uD,KAAAyuD,eAAA9vD,EAAA,UACAqB,KAAAyuD,eAAAnuD,OAEA,YADAN,KAAAyuD,eAAA,MAYA,IAAAoD,EARA7xD,KAAA0uD,UAAA1uD,KAAAyuD,eAAA74C,KAAA,QACA5V,KAAAymC,MAAAzmC,KAAA0uD,UAAA94C,KAAA,QACA5V,KAAA2uD,gBAAAhwD,EAAA,qBACAqB,KAAA2uD,gBAAA3nD,KAAA,YACA,IAAA5B,QAAAyU,QAAA7Z,KAAA2uD,iBAEA3uD,KAAA4uD,iBAAA5uD,KAAA2uD,gBAAA3nD,KAAA,WAAAyd,KAAA7R,WAAAgD,KAAA,QAIA,IAAA,IAAAlW,EAAA,EAAAA,EAAAM,KAAAymC,MAAAnmC,OAAAZ,IAAA,CACA,MAGA6f,EAHAvf,KAAAymC,MAAAt0B,GAAAzS,GAGAwa,SAAA,KACAxT,EAAA6Y,EAAArR,KAAA,QACAxH,GAAA,MAAAA,EAAA+I,OAAA,KACAzP,KAAA0c,YAAA6C,EAAA,UAAAlG,IACA,CAAAjU,QAAA0tB,UAAA1tB,QAAAqgB,YAAArW,SAAAiK,EAAA2G,WACA3G,EAAAqM,iBACA1lB,KAAA8xD,UAAAz4C,EAAAE,kBAGAvZ,KAAA0c,YAAA6C,EAAA,QAAAlG,IACAA,EAAAqM,iBACA,MAAAnG,EAAA5gB,EAAA0a,EAAAE,eACAvZ,KAAA8xD,UAAAvyC,GACAvf,KAAA+xD,UAAAxyC,KAGA7Y,EAAA/E,OAAA,KAAAkK,OAAAmmD,gBACAH,EAAAtyC,KAIAsyC,GAAAtyC,EAAA5J,SAAA,SACA3V,KAAA6uD,aAAAgD,EAAAtyC,GAGAvf,KAAA0c,YAAA6C,EAAA,UAAAlG,IACA,GACA,CAAAjU,QAAA6sD,SAAA7sD,QAAA8sD,WAAA9iD,SAAAiK,EAAA2G,UACArhB,EAAAwzD,SAAAnyD,KAAA0uD,UAAA,GAAAr1C,EAAAE,eACA,CACA,IAAA8zB,EAEAA,EADAh0B,EAAA2G,UAAA5a,QAAA6sD,SACAtzD,EAAA0a,EAAAE,eAAA+K,SAAA8M,KAAA,MAAAlX,SAAA,KAEAvb,EAAA0a,EAAAE,eAAA+K,SAAA3K,KAAA,MAAAO,SAAA,KAEAmzB,EAAA/sC,QACAN,KAAA+xD,UAAA1kB,MAMAwkB,IACA7xD,KAAA8xD,UAAAD,GAAA,GACA7xD,KAAA+xD,UAAAF,GAAA,KAQAC,UAAA,SAAAM,EAAAlkC,GACA,IAAAmf,EAAA1uC,EAAAyzD,GAEA,GAAApyD,KAAA6uD,aAAA,CACA,IAAA3gC,GAAAluB,KAAA6uD,aAAAp+B,IAAA,KAAA4c,EAAA5c,IAAA,GACA,OAEAzwB,KAAAqyD,cAGAhlB,EAAAv7B,SAAA,OAEA,MAAA1S,EAAAiuC,EAAArtC,KAAAymC,MAAArnC,MAAAiuC,EAAA/oB,UAAA,KACAtkB,KAAA6uD,aAAAxhB,EACArtC,KAAA8uD,iBAAA1vD,EAEA,IAAAA,EACAT,EAAA,YAAAmT,SAAA,UAEAnT,EAAA,YAAAyX,YAAA,UAIA,MAAAi3B,EAAAn/B,KAAA,QAAAuB,OAAA,IACA9Q,EAAAqB,KAAA6uD,aAAA3gD,KAAA,SAAAkI,YAAA,UAIAhR,QAAA6xB,KAAAhgB,QAAA,UAGA7R,QAAAuV,KAAA1D,QAAA,UAEAjX,KAAA2uD,gBAAA3nD,KAAA,WAAAyd,KAAApG,OAGA,IAAA3X,EAAA2mC,GAAAA,EAAAn/B,KAAA,QACA,GAAAxH,GAAA,MAAAA,EAAA+I,OAAA,GAAA,CACA,IAAA2D,EAAAzU,EAAA,gBAAAyU,UAAApM,KAAA,WACA,GAAAoM,EACA,IAAA,IAAA1T,EAAA,EAAAA,EAAA0T,EAAAqR,KAAAG,SAAAtkB,OAAAZ,IAAA,CACA,IAAAgN,EAAA0G,EAAAqR,KAAAG,SAAAllB,GACAgN,EAAAhG,OACAgG,EAAAhG,KAAAgG,EAAAhG,KAAAf,MAAA,UAAA,GAAAe,IAMA,oBAAAkjB,SAEAxkB,QAAA2Z,sBAAA,KACA6K,QAAAC,kBAAAthB,OAAAA,EAAA7B,MAUAqrD,UAAA,SAAA1kB,EAAAilB,GACAjlB,IAAArtC,KAAA+uD,gBAIA/uD,KAAA+uD,eACA/uD,KAAA+uD,cAAA7gD,KAAA,WAAA,MAGAlO,KAAA+uD,cAAA1hB,EAAAn/B,KAAA,WAAA,MAEA,IAAAokD,GACAtyD,KAAA+uD,cAAAv0C,UAIA63C,YAAA,WACAryD,KAAA6uD,eAIA7uD,KAAA6uD,aAAAz4C,YAAA,OAGA,MAAApW,KAAA6uD,aAAA3gD,KAAA,QAAAuB,OAAA,IACA9Q,EAAAqB,KAAA6uD,aAAA3gD,KAAA,SAAA4D,SAAA,YAIAq+C,mBAAA,WACAnwD,KAAAuyD,aACAvyD,KAAAwyD,0BAGAD,WAAA,WACA,IAAAvyD,KAAAyuD,eACA,OAIA,MAAAvvB,EAAA14B,SAAA04B,cAEAuzB,EAAA9hD,KAAAC,MAAA5Q,KAAAyuD,eAAAznB,SAAA,GACA0rB,EAAAttD,QAAAsN,KAAAs0B,SAAA,KAAA,IAAA,EACA,IAAA2rB,EAAA,EACAC,GAAA,EAGA5yD,KAAA6uD,eACA7uD,KAAA6uD,aAAAvqC,OAAA,MAAAhW,SAAAtO,KAAA0uD,WACAiE,EAAAhiD,KAAA2hB,KAAAtyB,KAAA6uD,aAAAvqC,OAAA,MAAA0iB,UAGA,IAAA,IAAAtnC,EAAA,EAAAA,EAAAM,KAAAymC,MAAAnmC,OAAAZ,IAAA,CACA,MAAA2tC,EAAArtC,KAAAymC,MAAAt0B,GAAAzS,GACA2tC,EAAA/+B,SAAAtO,KAAA0uD,WACAhvD,IAAAM,KAAA8uD,mBACA6D,GAAAhiD,KAAA2hB,KAAA+a,EAAArG,UAEA,IAAAtnC,GAAAM,KAAA6uD,gBACA8D,GAAAD,IAIA,MAAAnzC,EAAA8tB,EAAAz3B,KAAA,OACAlW,IAAAM,KAAA8uD,kBAAA6D,GAAAF,EACAlzC,EACAzH,WAAA,QACA5J,KAAA,WAAAlO,KAAA+uD,eAAAxvC,EAAA,KAAAvf,KAAA+uD,cAAA,GAAA,IAAA,OAEA1hB,EAAA/+B,SAAAtO,KAAA4uD,kBACA5uD,KAAA2uD,gBAAA3nD,KAAA,WAAAyd,KAAAkE,WAAApJ,GACAqzC,GAAA,GAGApsD,SAAA04B,gBAAAA,GACAvgC,EAAAugC,GAAA1kB,QAIAo4C,EACA5yD,KAAA2uD,gBAAAv4C,YAAA,UAEApW,KAAA2uD,gBAAA78C,SAAA,WAIA0gD,uBAAA,WACA,IAAAxyD,KAAAwyD,uBAAAK,GAAA,EAAA7yD,KAAAwyD,uBAAAK,GAAA7yD,KAAAqvD,mBAAA/uD,OAAAN,KAAAwyD,uBAAAK,KACA7yD,KAAAwyD,uBAAAM,QAAA9yD,KAAAqvD,mBAAAl9C,GAAAnS,KAAAwyD,uBAAAK,IACA7yD,KAAAwyD,uBAAAO,gBAAA/yD,KAAAwyD,uBAAAM,QAAAxuC,SAAA0iB,QACAhnC,KAAAwyD,uBAAAQ,QAAA,EAEAhzD,KAAAwyD,uBAAAO,gBAAA,SAEA,IAAA/yD,KAAAwyD,uBAAAM,QAAA9rD,KAAA,sBACAhH,KAAAwyD,uBAAAQ,QAAA,GAEAhzD,KAAAwyD,uBAAAS,aAAAjzD,KAAAwyD,uBAAAM,QAAAn9C,SAAA,aAGA3V,KAAAwyD,uBAAAO,gBAAA/yD,KAAAwyD,uBAAAM,QAAA9rD,KAAA,sBACAhH,KAAAwyD,uBAAAS,eACAjzD,KAAAwyD,uBAAAM,QAAA18C,YAAA,aACApW,KAAAwyD,uBAAAQ,QAAA,GAEAhzD,KAAAwyD,uBAAAS,eACAjzD,KAAAwyD,uBAAAQ,QAAA,IAKAhzD,KAAAwyD,uBAAAQ,QACAhzD,KAAAwyD,uBAAAM,QAAA9rB,QAAA,GAAAhnC,KAAAwyD,uBAAAO,iBACA/yD,KAAAwyD,uBAAAM,QAAAhhD,SAAA,aAKA9R,KAAAwyD,uBAAAM,QAAA9rD,KAAA,qBAAAhH,KAAAwyD,uBAAAO,mBAKA7C,kBAAA,WAEA,GAAAlwD,KAAA4gB,MAAAtgB,QAAAN,KAAAsuD,iBAAA,GAAA4E,wBAAA/7B,IAAA,GACA,IAAAn3B,KAAAsvD,YAAA,CACA,IAAA6D,EAAAnzD,KAAAsuD,iBAAArjC,SAGAjrB,KAAAivD,kBAAAjkC,IAAA,aAAA,iBAAAmoC,EAAA,GAAA,GAAA,GAAA,OAGAnzD,KAAAsuD,iBAAArjC,OAAAkoC,GACA/tD,QAAAsN,KAAAZ,SAAA,gBAGA9R,KAAAivD,kBAAA73B,cACAp3B,KAAAwuD,SAAAp3B,cADA,IAEApM,EAAA,CACAmM,IAAAg8B,EAAA,KACAC,aAAA,gBAAAD,EAAA,OAEAnzD,KAAA8gB,SAAAhP,SAAA,SAAAkZ,IAAAA,GACAhrB,KAAAwuD,SAAA18C,SAAA,SAAAkZ,IAAAA,GACAhrB,KAAAsvD,aAAA,QAEAtvD,KAAAsvD,cACAtvD,KAAAsuD,iBAAArjC,OAAA,QACA7lB,QAAAsN,KAAA0D,YAAA,gBACApW,KAAAivD,kBAAAjkC,IAAA,aAAA,IACAhrB,KAAA8gB,SAAA1K,YAAA,SAAA4U,IAAA,CACAmM,IAAA,GACAi8B,aAAA,KAEApzD,KAAAwuD,SAAAp4C,YAAA,SAAA4U,IAAA,CACAmM,IAAA,GACAi8B,aAAA,KAEApzD,KAAAsvD,aAAA,IAUA+D,oBAAA,SAAA9xD,EAAA1B,GACA,IAAA0wD,EAAArxD,MAAA4uD,GAAAyC,qBAEA,CAAA,WAAA,SAAAnhD,SAAA7N,IACAgvD,GAAA,EACA9iC,KAAA,QACA1X,MAAA7W,MAAAS,EAAA,MAAA,WAEA8tB,KAAA,OACA1X,MAAA7W,MAAAS,EAAA,MAAA,WAGA,IAAA2zD,EAAA30D,EAAA,0CACA4C,EAAAvC,QAAA,MAAA,2CACAyuB,qBAAA1X,mCACAlW,uCAGAyO,SAAAtO,KAAAouD,wBAEAmF,GAAAD,EAAA/4B,aAAA,EAAA,KAEA+4B,EACAj1C,OACA2M,IAAA,CAAAsP,QAAA,EAAAk5B,cAAAD,EAAAE,eAAAF,IACA/7C,SAAA,CAAA8iB,QAAA,EAAAk5B,cAAA,MAAAC,eAAA,OAAA,CAAAC,QAAA,eAAAt8C,SAAA,SACAk5C,MAAAC,GACA/4C,SAAA,CAAA8iB,QAAA,EAAAk5B,cAAAD,EAAAE,eAAAF,GAAA,CACAj8C,SAAA,WACAg8C,EAAAh5C,YAIAta,KAAAiX,QAAA,sBAAA,CACA08C,iBAAApyD,EACA1B,QAAAA,KASA8f,cAAA,SAAA9f,GACAG,KAAAqzD,oBAAA,SAAAxzD,IAQAoI,aAAA,SAAApI,GACAA,IACAA,EAAAX,MAAAS,EAAA,MAAA,6BAGAK,KAAAqzD,oBAAA,QAAAxzD,IAGA+zD,YAAA,WACA,IAAA5sD,EAAA,CACApC,KAAA1F,MAAA0F,MAGA1F,MAAAoJ,mBAAA,oBAAAtB,EAAAhH,KAAA6zD,cAAA13C,KAAAnc,QAGA6zD,cAAA,SAAAC,GAGA,GAFA9zD,KAAAkuD,QAAA5zC,SAEAlV,QAAA7F,QAAAu0D,IAAAA,EAAAxzD,OAAA,CACAN,KAAAkuD,QAAAvvD,EAAA,qBAAAiqB,UAAAjqB,EAAA,oBAEA,IAAA,IAAAe,EAAA,EAAAA,EAAAo0D,EAAAxzD,OAAAZ,IACAf,EAAA,2CAAAO,MAAAS,EAAA,MAAA,qBAAAm0D,EAAAp0D,WAAA4O,SAAAtO,KAAAkuD,SAGA,IAAAjjC,EAAAjrB,KAAAkuD,QAAA92B,cACAp3B,KAAAkuD,QAAAljC,IAAA,cAAAC,GAAAzT,SAAA,CAAAu8C,aAAA,GAAA,QAEA/zD,KAAAywD,eAIAA,WAAA,WAIA,IAFA,IAAAuD,EAAAh0D,KAAAkuD,QAAAt4C,KAAA,qBAEAlW,EAAA,EAAAA,EAAAs0D,EAAA1zD,OAAAZ,IACAM,KAAA0c,YAAAs3C,EAAAt0D,GAAA,QAAA2Z,IACAA,EAAAqM,iBAEA,IAAAuuC,EAAAt1D,EAAA0a,EAAAE,eAEAvS,EAAA,CACAnH,QAAAo0D,EAAA99B,KAAA,aAAAx0B,OAAA,IAGAzC,MAAAoJ,mBAAA,oBAAAtB,EAAA,CAAAyD,EAAA5C,KACA,YAAAA,IACA4C,EAAA9C,QACAssD,EAAA3vC,SAAAhK,SAEAta,KAAAiI,aAAAwC,EAAA7C,aAQAssD,gBAAA,SAAAC,EAAAC,EAAAntD,GASA,GAPA,mBAAAmtD,IACAntD,EAAAmtD,EACAA,GAAA,GAKAp0D,KAAA8vD,sBACA,IAAAqE,IAAAn0D,KAAA+vD,+BACA,IAAAqE,IAAAp0D,KAAAgwD,gCACA,CACA,IAAAqE,EAAAptD,EACAA,EAAA,KACAjH,KAAAk0D,gBAAAC,EAAAC,EAAAC,IAKA,mBAAAptD,IACA7B,QAAA7F,QAAAS,KAAAiwD,4BACAjwD,KAAAiwD,yBAAA,IAGAjwD,KAAAiwD,yBAAA/uD,KAAA+F,IAGAjH,KAAA8vD,qBACA9vD,KAAA8vD,oBAAA,EACA9vD,KAAA+vD,8BAAA,IAAAoE,EACAn0D,KAAAgwD,gCAAA,IAAAoE,EAEAp0D,KAAAs0D,iBAAAH,EAAAC,GACA3qD,KAAAw0B,IAIA,GAHAj+B,KAAAu0D,uBACAv0D,KAAA8vD,oBAAA,EAEA1qD,QAAA7F,QAAAS,KAAAiwD,0BAAA,CACA,IAAAuE,EAAAx0D,KAAAiwD,yBACAjwD,KAAAiwD,yBAAA,KAEA,IAAA,IAAAvwD,EAAA,EAAAA,EAAA80D,EAAAl0D,OAAAZ,IACA80D,EAAA90D,GAAAu+B,GAIAj+B,KAAAiX,QAAA,kBAAA,CACAw9C,WAAAx2B,QAMAq2B,iBAAA,SAAAH,EAAAC,GACA,OAAA,IAAAnrD,QAAA,CAAAC,EAAAC,KACAgrD,EAaAn0D,KAAA00D,YAAAN,GACA3qD,KAAAw0B,IACA/0B,EAAA+0B,KAdAj+B,KAAA20D,uBAAAP,GACA3qD,KAAAw0B,KACA,IAAAA,EAAA22B,QACA1rD,EAAA+0B,GAGAj+B,KAAA00D,YAAAN,GACA3qD,KAAAw0B,IACA/0B,EAAA+0B,UAYA02B,uBAAA,SAAAP,GACA,OAAA,IAAAnrD,SAAA,SAAAC,EAAAC,GACA,IAAAnC,EAAA,CACA6tD,cAAA,EACAT,eAAAA,GAEAl1D,MAAA4H,kBAAA,wBAAAE,GAAA,SAAAi3B,EAAAp2B,GAEAqB,EADA,YAAArB,EACAo2B,EAEA,CAAA22B,QAAA,WAMAF,YAAA,SAAAN,GACA,OAAA,IAAAnrD,QAAA,CAAAC,EAAAC,KACAjK,MAAAyK,eAAA,MAAA,WACAF,KAAAqrD,IACA90D,KAAA+0D,cAAAD,EAAAV,GAAA3qD,KAAAP,KAEAQ,MAAAgB,IACA1K,KAAA+0D,cAAA,IAAAtrD,KAAAP,QAKA6rD,cAAA,SAAAD,EAAAV,GACA,OAAA,IAAAnrD,SAAA,SAAAC,EAAAC,GACAjK,MAAA4H,kBAAA,oBAAA,CACAguD,QAAAA,EACAV,eAAAA,IACA,SAAAn2B,EAAAp2B,GACA,YAAAA,EACAqB,EAAA+0B,GAEA90B,MAEA,CACAhC,YAAA,aAKAotD,qBAAA,WACA,IAAAS,EAAAr2D,EAAA,kBAAAiX,KAAA,iBAGAo/C,EAAA10D,QAIApB,MAAAoJ,mBAAA,gCAAAmC,IAEA,IAAAwqD,EAAAD,EAAA96C,SAAA,UAEAzP,EAAAyqD,YACAD,EAAA30D,SACA20D,EAAAt2D,EAAA,yBAAA2P,SAAA0mD,IAEAC,EAAA5xD,KAAAoH,EAAAyqD,aACAD,EAAA30D,QACA20D,EAAA36C,YAKA6F,SAAA,WACAngB,KAAAuvD,cAIArwD,MAAAi2D,sBACAj2D,MAAAoJ,mBAAA,YAAA,CAAAmC,EAAA5C,KACA,YAAAA,GACA7H,KAAAo1D,kBAAA,GAAA,KAIAp1D,KAAAo1D,kBAAA,GAAA,KAIAA,iBAAA,SAAA9E,EAAApiC,GAOA,GANAA,GAAAluB,KAAA4vD,0BACAtqC,aAAAtlB,KAAA4vD,yBACA5vD,KAAA4vD,wBAAA,OAIA5vD,KAAA4vD,yBAAA5vD,KAAAuvD,YAIA,IAAA,IAAAe,EAAA,CAEA,IAAA5xB,EAAA/tB,KAAAohB,IAAA,IAAA,IAAA/xB,KAAA2vD,2BACA3vD,KAAA4vD,wBAAArqC,WAAAvlB,KAAAq1D,0BAAAl5C,KAAAnc,MAAA0+B,QAEA1+B,KAAAq1D,6BAIAA,0BAAA,WACAn2D,MAAAoJ,mBAAA,kDAAA,CAAAmC,EAAA5C,KACA,YAAAA,IACA7H,KAAA4vD,wBAAA,KACA5vD,KAAAwvD,UAAA/kD,EAAAmnB,MACA5xB,KAAAs1D,WAAA7qD,EAAA8qD,MAEAv1D,KAAAyvD,QAAAnvD,QAEAN,KAAAo1D,kBAAA,OAMAE,WAAA,SAAA7F,GACA,GAAAzvD,KAAAuvD,YAAA,CAIAvvD,KAAAyvD,QAAAA,EAGA,IAAA+F,EAAAx1D,KAAA0vD,iBACA1vD,KAAA0vD,iBAAA1vD,KAAAy1D,sBAIAD,GACAx1D,KAAA0vD,kBACA8F,EAAA3/C,KAAA7V,KAAA0vD,iBAAA75C,IACA2/C,EAAA5S,WAAA5iD,KAAA0vD,iBAAA9M,UACA4S,EAAAE,gBAAA11D,KAAA0vD,iBAAAgG,eACAF,EAAArqD,SAAAnL,KAAA0vD,iBAAAvkD,OAEAnL,KAAA2vD,4BAGA3vD,KAAA2vD,0BAAA,EAGA3vD,KAAA21D,gBAGA31D,KAAAiX,QAAA,gBAMAw+C,oBAAA,WACA,IAAAz1D,KAAAuvD,YACA,OAAA,KAUA,IANA,IAAAqG,EAAA,CACA12D,MAAA4uD,GAAA+H,oBACA32D,MAAA4uD,GAAAgI,kBACA52D,MAAA4uD,GAAAiI,oBAGAr2D,EAAA,EAAAA,EAAAk2D,EAAAt1D,OAAAZ,IACA,IAAA,IAAAs2D,EAAA,EAAAA,EAAAh2D,KAAAyvD,QAAAnvD,OAAA01D,IACA,GAAAh2D,KAAAyvD,QAAAuG,GAAA7qD,SAAAyqD,EAAAl2D,GACA,OAAAM,KAAAyvD,QAAAuG,IAMAL,cAAA,WACA31D,KAAAuvD,aAAAvvD,KAAAguD,KAAA1tD,SAIAN,KAAA0vD,kBACA1vD,KAAA6vD,kBACA7vD,KAAA6vD,gBAAA,IAAAoG,GAGAj2D,KAAA0vD,iBAAAvkD,SAAAjM,MAAA4uD,GAAA+H,qBAAA71D,KAAA0vD,iBAAAvkD,SAAAjM,MAAA4uD,GAAAiI,oBACA/1D,KAAA6vD,gBAAAqG,eACAl2D,KAAA6vD,gBAAAsG,eAAAn2D,KAAA0vD,iBAAA0G,YAAAp2D,KAAA0vD,iBAAAgG,eACA11D,KAAA6vD,gBAAAwG,YAAAr2D,KAAA0vD,iBAAA9M,WACA5iD,KAAA0vD,iBAAAvkD,SAAAjM,MAAA4uD,GAAAgI,mBACA91D,KAAA6vD,gBAAAyG,aAAAp3D,MAAAS,EAAA,MAAA,YAGAK,KAAA6vD,kBACA7vD,KAAA6vD,gBAAAqG,eACAl2D,KAAA6vD,gBAAAv4C,kBACAtX,KAAA6vD,mBAUA3qC,UAAA,WAEA,IAAApP,EAAA5W,MAAAqV,gBAAA,2BACA,YAAA,IAAAuB,GACA5W,MAAA2V,mBAAA,2BACA7U,KAAA6wB,UAAA/a,GACAA,GAEA5W,MAAA6V,UAAA,WAOA8b,UAAA,SAAA/a,GACA5W,MAAA+V,UAAA,SAAAa,EAAA,CACAV,OAAA,YAGA,CAEAm7C,qBAAA,IAEAwF,mBAAA,EACAF,oBAAA,EACAU,gBAAA,EACAT,kBAAA,IAGA1wD,QAAAwlB,iBAAAxlB,QAAA6xB,KACA/3B,MAAA8I,GAAA,IAAA9I,MAAA4uD,GAKA,IAAAmI,EAAA7wD,QAAAyV,KAAA5b,OAAA,CACA8S,IAAA,KACAwN,GAAA,KACAV,OAAA,KACA23C,eAAA,KAEA5T,SAAA,KACA6T,UAAA,EAEAC,WAAA,KACAC,eAAA,KACAC,cAAA,KACAC,aAAA,KAEAC,WAAA,KACAC,UAAA,KACAC,YAAA,KACAC,QAAA,KACAC,WAAA,KACAC,WAAA,KAEAC,aAAA,EACAC,WAAA,EACAC,kBAAA,KACAC,gBAAA,KACAC,SAAA,KACAC,gBAAA,KACAC,oBAAA,KAEAC,aAAA,KAEAp8C,KAAA,WACAvb,KAAA+R,IAAApT,EAAA,SAAA2P,SAAApP,MAAA8I,GAAAgmD,KAAA9zC,SAAA,OACAla,KAAAuf,GAAA5gB,EAAA,OAAA,CACAkX,GAAA,WACAnP,KAAAxH,MAAA04D,sBAAA14D,MAAAyF,OAAA,2BAAA,OACA2J,SAAAtO,KAAA+R,KACA/R,KAAA63D,iBAAAl5D,EAAA,wBAAA2P,SAAAtO,KAAAuf,IACA,IAAAu4C,EAAAn5D,EAAA,yBAAA2P,SAAAtO,KAAAuf,IACAvf,KAAA6e,OAAAlgB,EAAA,WAAA2P,SAAAwpD,GACA93D,KAAAw2D,eAAA73D,EAAA,kCAAA2P,SAAAwpD,GAAAz5C,OAEA,IAAAxQ,EAAAhC,OAAA26B,iBAAA,EAAA,EAAA,EACAxmC,KAAAg3D,YAAA,GAAAnpD,EACA7N,KAAAi3D,QAAAj3D,KAAAg3D,YAAA,EACAh3D,KAAAk3D,WAAA,EAAArpD,EACA7N,KAAAm3D,WAAA,EAAAtpD,EAEA7N,KAAA02D,WAAA12D,KAAA+3D,cAAA,KAAA,WACA/3D,KAAA22D,eAAA32D,KAAA+3D,cAAA,SAAA,WACA/3D,KAAA42D,cAAA52D,KAAA+3D,cAAA,QAAA,QACA/3D,KAAA62D,aAAA72D,KAAA+3D,cAAA,OAAA,WAAA15C,OAEAre,KAAA82D,WAAA92D,KAAA22D,eAAA,GAAAtjB,WAAA,MACArzC,KAAA+2D,UAAA/2D,KAAA42D,cAAA,GAAAvjB,WAAA,MAEArzC,KAAAg4D,SAAAh4D,KAAA02D,WAAA,GAAArjB,WAAA,MAAA,EAAA,GACArzC,KAAAg4D,SAAAh4D,KAAA62D,aAAA,GAAAxjB,WAAA,MAAA,EAAA,IAGA8iB,eAAA,SAAAC,EAAAV,GACA11D,KAAAuf,GAAArR,KAAA,QAAAkoD,GACAp2D,KAAA6e,OAAAxb,KAAA+yD,GACAV,EACA11D,KAAAw2D,eAAAnzD,KAAAqyD,GAAA76B,OAEA76B,KAAAw2D,eAAAn4C,QAIAg4C,YAAA,SAAAzT,GACA,GAAAA,GACA5iD,KAAA22D,eAAAt4C,OACAre,KAAA42D,cAAAv4C,SAEAre,KAAA22D,eAAA97B,OACA76B,KAAA42D,cAAA/7B,OACA76B,KAAA4iD,UAAAA,EAAA5iD,KAAA4iD,SACA5iD,KAAAi4D,YAAA,EAAArV,EAAA,KAEA5iD,KAAAk4D,QAAA,EAAAtV,EAAA,MAIA5iD,KAAA4iD,SAAAA,GAGAtrC,SAAA,WACAtX,KAAAi4D,YAAA,EAAA,EAAA,KACAj4D,KAAA02D,WAAAl/C,SAAA,WAEAxX,KAAAi4D,YAAA,EAAA,EAAA,KACAj4D,KAAAuf,GAAAjF,SACAta,KAAA0qB,eAKA4rC,aAAA,SAAAz2D,GACAG,KAAAy2D,WAIAz2D,KAAAy2D,UAAA,EACAz2D,KAAA4iD,SAAA,KAEA5iD,KAAA02D,WAAAr4C,OACAre,KAAA22D,eAAAt4C,OACAre,KAAA42D,cAAAv4C,OACAre,KAAA62D,aAAAh8B,OAEA76B,KAAAm2D,eAAAt2D,KAGAq2D,aAAA,WACAl2D,KAAAy2D,WAIAz2D,KAAAy2D,UAAA,EAEAz2D,KAAA02D,WAAA77B,OACA76B,KAAA22D,eAAA97B,OACA76B,KAAA42D,cAAA/7B,OACA76B,KAAA62D,aAAAx4C,SAGA05C,cAAA,SAAAliD,EAAAsiD,GACA,IAAAC,EAAAz5D,EAAA,wBAAAkX,EAAA,YAAA7V,KAAAg3D,YAAA,aAAAh3D,KAAAg3D,YAAA,OAAA1oD,SAAAtO,KAAA63D,kBACAQ,EAAAD,EAAA,GAAA/kB,WAAA,MAKA,OAHAglB,EAAAnkB,YAAAikB,EACAE,EAAApkB,UAAAj0C,KAAAm3D,WACAkB,EAAAC,QAAA,QACAF,GAGAF,QAAA,SAAAK,EAAA9P,GACAzoD,KAAAo3D,aAAAmB,EACAv4D,KAAAq3D,WAAA5O,EAEAzoD,KAAAg4D,SAAAh4D,KAAA82D,WAAAyB,EAAA9P,GACAzoD,KAAAg4D,SAAAh4D,KAAA+2D,UAAAwB,EAAA9P,IAGAuP,SAAA,SAAAK,EAAAE,EAAA9P,GACA4P,EAAA1kB,UAAA,EAAA,EAAA3zC,KAAAg3D,YAAAh3D,KAAAg3D,aACAqB,EAAAvkB,YACAukB,EAAAG,IAAAx4D,KAAAi3D,QAAAj3D,KAAAi3D,QAAAj3D,KAAAk3D,YAAA,IAAA,EAAAqB,GAAA5nD,KAAAy9B,IAAA,IAAA,EAAAqa,GAAA93C,KAAAy9B,IACAiqB,EAAAxtB,SACAwtB,EAAAI,aAGAR,YAAA,SAAAS,EAAAC,EAAA1xD,GACAjH,KAAAy3D,iBACAnyC,aAAAtlB,KAAAy3D,iBAGAz3D,KAAAw3D,SAAA,EACAx3D,KAAAs3D,mBAAAoB,EAAA14D,KAAAo3D,cAAA,GACAp3D,KAAAu3D,iBAAAoB,EAAA34D,KAAAq3D,YAAA,GACAr3D,KAAA03D,oBAAAzwD,EACAjH,KAAA44D,oBAGAA,iBAAA,WACA54D,KAAAk4D,QAAAl4D,KAAAo3D,aAAAp3D,KAAAs3D,kBAAAt3D,KAAAq3D,WAAAr3D,KAAAu3D,iBAEAv3D,KAAAw3D,WAEAx3D,KAAAw3D,SAAA,GACAx3D,KAAAy3D,gBAAAlyC,WAAAvlB,KAAA44D,iBAAAz8C,KAAAnc,MAAA,IACAA,KAAA03D,qBACA13D,KAAA03D,yBC1sCAx4D,MAAA25D,cAAA35D,MAAA+U,iBAAAhV,OAAA,CACA65D,eAAA,KACAC,qBAAA,KACAC,gBAAA,KAEAz9C,KAAA,SAAA5H,EAAAf,EAAAoB,GACAhU,KAAAoZ,GAAA,eAAApZ,KAAAi5D,aAAA98C,KAAAnc,OACAA,KAAAoZ,GAAA,aAAApZ,KAAAi5D,aAAA98C,KAAAnc,OACAA,KAAA4vB,KAAAjc,EAAAf,EAAAoB,IAGA6R,UAAA,WAEA7lB,KAAA84D,eAAA,GAEA,IAAA,IAAAp5D,EAAA,EAAAA,EAAAR,MAAAg6D,uBAAA54D,OAAAZ,IAAA,CACA,IAAAy5D,EAAAj6D,MAAAg6D,uBAAAx5D,GAEAM,KAAAonB,eAAA,SAAA+xC,EAAAC,MACAp5D,KAAA84D,eAAA53D,KAAAi4D,GAIAn5D,KAAA4vB,QAGAzI,oBAAA,WAEA,GAAA,UAAAnnB,KAAAgU,SAAAoQ,SAAA,oBAAAi1C,mBACA,IAAA,IAAA35D,EAAA,EAAAA,EAAAM,KAAAymB,SAAAnmB,OAAAZ,IAAA,CACA,IAAAwhB,EAAAviB,EAAAqB,KAAAymB,SAAA/mB,IAEA,GAAAwhB,EAAAla,KAAA,YAAAqyD,mBACA,OAAAn4C,EAAAla,KAAA,OAKA,OAAAhH,KAAA4vB,QAGAqpC,aAAA,WACA,GAAAj5D,KAAAkhB,QAAA,CAKA,IAEAxhB,EAAAgH,EAAAqP,EAFAujD,EAAAt5D,KAAAkhB,QAAAla,KAAA,UAOA,GAAAhH,KAAA84D,eAAAx4D,OAAA,CAOA,IAAAi5D,EAYAC,EAVA,GAPAx5D,KAAA+4D,sBACA/4D,KAAA+4D,qBAAAz+C,SAMAg/C,EACA,IAAA55D,EAAA,EAAAA,EAAAM,KAAA84D,eAAAx4D,OAAAZ,IACA,GAAAM,KAAA84D,eAAAp5D,GAAAq2B,SAAAujC,EAAA,CACAC,EAAAv5D,KAAA84D,eAAAp5D,GACA,MAmCA,GA9BAM,KAAA+4D,qBAAAp6D,EAAA,kCAKA46D,GACA7yD,EAAA1G,KAAAy5D,qBAAAF,GACAxjD,EAAA,UAAA/V,KAAAgU,SAAAoQ,QAAAllB,MAAAS,EAAA,MAAA,gBAAAT,MAAAS,EAAA,MAAA,uBAAA,CAAAw5D,MAAAI,EAAAt0D,OACAjF,KAAAg5D,gBAAAr6D,EAAA,kCAAA+H,EAAA,IAAAxH,MAAAiE,WAAA4S,GAAA,QAAAzH,SAAAtO,KAAA+4D,sBAEA,UAAA/4D,KAAAgU,SAAAoQ,SACApkB,KAAA0c,YAAA1c,KAAAg5D,gBAAA,SAAA,SAAA3/C,GACArZ,KAAA05D,yBAAArgD,EAAAE,cAAAogD,aAAA,eAIA35D,KAAA84D,eAAAx4D,OAAA,IACAk5D,EAAA76D,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,uBACA7L,SAAAtO,KAAA+4D,wBAGA/4D,KAAAg5D,gBAAAQ,EAAA76D,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,8BACA9W,KAAAnE,MAAAS,EAAA,MAAA,kBACA2O,SAAAtO,KAAA+4D,sBAGAS,EAAA,CACA,IAAAI,EAAA,yBAEA,IAAAl6D,EAAA,EAAAA,EAAAM,KAAA84D,eAAAx4D,OAAAZ,IAAA,CACA,IAAAy5D,EAAAn5D,KAAA84D,eAAAp5D,GAEA,UAAAM,KAAAgU,SAAAoQ,SAAA+0C,IAAAI,IACA7yD,EAAA1G,KAAAy5D,qBAAAN,GACApjD,EAAA,UAAA/V,KAAAgU,SAAAoQ,QAAA+0C,EAAAl0D,KAAA/F,MAAAS,EAAA,MAAA,uBAAA,CAAAw5D,MAAAA,EAAAl0D,OACA20D,GAAA,UAAAlzD,EAAA,IAAAxH,MAAAiE,WAAA4S,GAAA,aAMApX,EAFAi7D,GAAA,eAEAtrD,SAAAtO,KAAA+4D,sBACA,IAAAc,EAAA,IAAAz0D,QAAAyU,QAAA2/C,GAEA,UAAAx5D,KAAAgU,SAAAoQ,SACAy1C,EAAAzgD,GAAA,eAAAC,IACArZ,KAAA05D,yBAAArgD,EAAA8W,OAAAwpC,aAAA,cAKA35D,KAAAovB,UAAApvB,KAAA+4D,sBAMA,GAAA,UAAA/4D,KAAAgU,SAAAoQ,SAAA,oBAAAwF,QAAA,CACA,IAAAhgB,EAAA,aAEA0vD,IACA1vD,GAAA,IAAA0vD,GAGA1vC,QAAAC,aAAA,GAAA,GAAA3qB,MAAAyF,OAAAiF,OAIA6vD,qBAAA,SAAAN,GACA,GAAA,UAAAn5D,KAAAgU,SAAAoQ,QAAA,CACA,IAAAxa,EAAA,cAAAuvD,EAAApjC,OAAA,OACA,GAAA/1B,KAAA8V,QAAA9V,KAAA8V,QAAA5W,MAAA46D,cACA,IAAA,IAAAp6D,EAAA,EAAAA,EAAAR,MAAAod,MAAAhc,OAAAZ,IACAR,MAAAod,MAAA5c,GAAAmW,IAAA7V,KAAA8V,SACAlM,GAAA,IAAA1K,MAAAod,MAAA5c,GAAAq2B,QAIA,MAAA,SAAA72B,MAAAyF,OAAAiF,GAAA,IAEA,MAAA,YAAAuvD,EAAAtjD,GAAA,KAIA6jD,yBAAA,SAAAK,GACA,IAAA/5D,KAAAg5D,gBAAArjD,SAAA,WAAA,CAOA,IAFA,IAAAwjD,EAEAz5D,EAAA,EAAAA,EAAAM,KAAA84D,eAAAx4D,OAAAZ,IACA,GAAAM,KAAA84D,eAAAp5D,GAAAmW,IAAAkkD,EAAA,CACAZ,EAAAn5D,KAAA84D,eAAAp5D,GACA,MAIA,GAAAy5D,EAAA,CAIAn5D,KAAAg5D,gBAAAlnD,SAAA,YACA,IAAAkoD,EAAAh6D,KAAAg5D,gBAAA31D,OACArD,KAAAg5D,gBAAA31D,KAAAnE,MAAAS,EAAA,MAAA,uBAAA,CAAAw5D,MAAAA,EAAAl0D,QAEA/F,MAAAkV,oBAAApU,KAAA2T,YAAA,CACAuJ,WAAAld,KAAA+4D,qBACAjjD,OAAA9V,KAAA8V,OACA6F,WAAA,CACAo+C,QAAAA,GAEAj+C,eAAA,KACA9b,KAAAg5D,gBAAAlnD,SAAA,YAEAsK,aAAA,KACApc,KAAAg5D,gBAAA5iD,YAAA,YAEAuH,UAAA,KACA3d,KAAAg5D,gBAAA5iD,YAAA,YAAA/S,KAAA22D,IAEAn6C,cAAApV,IAEA,IAAAwvD,EAAA,SAAAd,EAAAC,IAEAp5D,KAAAghB,YAAAi5C,GACAj6D,KAAA6tB,kBAAAosC,GAGAj6D,KAAAmvB,yBAAA1kB,EAAAoL,IACA7V,KAAAimB,yBAOA/mB,MAAAwU,0BAAA,4BAAAxU,MAAA25D,eCtNA35D,MAAAg7D,oBAAAh7D,MAAA04B,uBAAA34B,OAAA,CACA6Z,YAAA,WACA9Y,KAAA4vB,KAAAiwB,MAAA7/C,KAAAo4B,WACAp4B,KAAAgU,SAAAskB,UAAA,GAGAyC,iBAAA,WACA,IAAA/mB,EAAAhU,KAAA4vB,OAEA,OADA5b,EAAAgqB,cAAA,EACAhqB,GAGA6kB,YAAA,WACA,OAAA74B,KAAA+3B,mBAAAniB,KAAA,aAGAylB,cAAA,SAAA1kB,GAEA3W,KAAA0vB,MAAA9X,UACA5X,KAAA0vB,MAAAiO,mBACA39B,KAAA0vB,MAAA+N,mBACAz9B,KAAA0vB,MAAAkO,oBAKA,IAFA,IAAAu8B,EAAAn6D,KAAAsrB,wBAEA5rB,EAAA,EAAAA,EAAAiX,EAAArW,OAAAZ,IACAy6D,EAAAj5D,KAAAyV,EAAAjX,GAAAmW,IAGA,IAAA7O,EAAA,CACAozD,YAAAD,EACArkD,OAAAa,EAAA,GAAAb,OACAD,GAAA7V,KAAAgU,SAAA6B,GACA5Q,KAAAjF,KAAAgU,SAAA/O,KACAo1D,YAAAr6D,KAAAgU,SAAAqmD,YACAC,eAAAt6D,KAAAgU,SAAAsmD,gBAGAp7D,MAAA4H,kBAAA,qCAAAE,EAAA,CAAAyD,EAAA5C,KAMA,GALA7H,KAAA0vB,MAAA3X,SACA/X,KAAA0vB,MAAAgO,kBACA19B,KAAA0vB,MAAA8N,kBACAx9B,KAAA0vB,MAAAmO,oBAEA,YAAAh2B,EAAA,CACA,IACA0yD,EADA57D,EAAA8L,EAAA1L,MACAmb,SAAA,aAEAla,KAAA+3B,mBAAAthB,YAAA8jD,GACAv6D,KAAA+3B,mBAAAwiC,EACAv6D,KAAA44B,gBAIA,IAFA,IAAA4hC,EAAA,GAEA96D,EAAA,EAAAA,EAAAiX,EAAArW,OAAAZ,IAAA,CACA,IAAA2U,EAAAsC,EAAAjX,GACAgW,EAAA1V,KAAA8uB,eAAAza,EAAAwB,IAEAH,IACA1V,KAAA+7B,wBAAA1nB,EAAAqB,SAAAA,GACA8kD,EAAAt5D,KAAAmT,IAIArU,KAAA27B,gCACA37B,KAAA0vB,MAAArR,OACAre,KAAAg8B,iBAAAw+B,OAKAvgC,cAAA,SAAAvkB,GAEA,IAAA+kD,EAAA/kD,EAAAiH,IAAAjH,EAAA4O,SAAAxF,SAAA,MAAAlJ,KAAA,aAGA5V,KAAA65B,eAAA4gC,GAGA,IAAA,IAAA/6D,EAAA,EAAAA,EAAA+6D,EAAAn6D,OAAAZ,IACAM,KAAA06D,qBAAAD,EAAA/6D,IAIAg7D,qBAAA,SAAAD,EAAA/6D,GACA,IAAAuH,EAGAvH,IAAA+6D,EAAAn6D,OAAA,IACA2G,EAAA,KACA,IAAA8K,EAAA0oD,EAAAlgD,QAAA+J,SAAAA,SACAzS,EAAAE,EAAAuS,SAEAzS,EAAA,KAAA7R,KAAA+3B,mBAAA,IAAAhmB,EAAA+M,WAAAxe,OACAyR,EAAAuI,SAEAzI,EAAAyI,WAKA,IAAA1G,EAAA,KACA5T,KAAAo6B,mBAAAqgC,EAAAtoD,GAAAzS,GAAAuH,IAGA,IAAAvH,EACAkU,IAEA2R,WAAA3R,EAAA,IAAAlU,MC5GAR,MAAAy7D,OAAA,GAOAz7D,MAAAy7D,OAAAC,UAAAx1D,QAAAyV,KAAA5b,OAAA,CACA47D,QAAA,KACAC,KAAA,KAEAv/C,KAAA,SAAAvU,GACA,IAAA6zD,EAAA7zD,EAAA6zD,QACAC,EAAA9zD,EAAA8zD,KAEAA,EAAAC,QAAAnlB,IACAj3C,EAAA2U,KAAAsiC,GAAA,SAAAolB,GACA,IAEAC,EAEA,OAJAJ,EAAAG,GAIAz5D,MACA,IAAA,OACA05D,EAAAt4D,GAAAu4D,UAAA,YACAtlB,EAAAolB,GAAAC,EAAArlB,EAAAolB,IACA,MAEA,IAAA,WACAC,EAAAt4D,GAAAu4D,UAAA,qBACAtlB,EAAAolB,GAAAC,EAAArlB,EAAAolB,IACA,MAEA,IAAA,UACAplB,EAAAolB,GAAAplB,EAAAolB,GAAA,IACA,MAEA,IAAA,SACAplB,EAAAolB,IAAAplB,EAAAolB,SASAh7D,KAAA66D,QAAAA,EACA76D,KAAA86D,KAAAA,KAUA57D,MAAAy7D,OAAAQ,IAAA/1D,QAAAyV,KAAA5b,OAAA,CACA2T,WAAA,KACAwoD,KAAA,KAEA7/C,KAAA,SAAA3I,GACA5S,KAAA4S,WAAAA,EAEA5S,KAAAo7D,KAAAz8D,EAAA,+BAAA2P,SAAAtO,KAAA4S,YAEA5S,KAAAqe,QAGAg9C,WAAA,SAAAt8D,GACAiB,KAAAo7D,KAAAr8D,KAAAA,IAGAu8D,YAAA,SAAA9+B,GACAx8B,KAAAo7D,KAAApwC,IAAA,OAAAwR,EAAA/kB,KAAA,MACAzX,KAAAo7D,KAAApwC,IAAA,MAAAwR,EAAArF,IAAA,OAGA0D,KAAA,WACA76B,KAAAo7D,KAAApwC,IAAA,UAAA,UAGA3M,KAAA,WACAre,KAAAo7D,KAAApwC,IAAA,UAAA,WASA9rB,MAAAy7D,OAAAY,UAAAn2D,QAAAyV,KAAA5b,OAAA,CACA2T,WAAA,KACA4oD,OAAA,KAEAC,eAAA,WACAC,UAAA,KAEA94D,aAAA,KACA+4D,iBAAA,KACApkD,YAAA,KAEAqkD,IAAA,KACA50B,MAAA,KACA/b,OAAA,KAEA1P,KAAA,SAAAga,EAAAvhB,GACAhU,KAAA4S,WAAA2iB,EAEAv1B,KAAA8Y,YAAA5Z,MAAAy7D,OAAAY,UAAA//C,UACAxb,KAAA8Y,YAAA9E,GAEA,IAAA6nD,EAAA,CACAC,QAAAjwD,OAAAkwD,UACAC,uBAAAnwD,OAAAhJ,yBACAo5D,2BAAApwD,OAAAqwD,8BAGAl8D,KAAA8Y,YAAA+iD,GAEAl5D,GAAAkmD,OAAAh9C,QAAAuN,GAAA,SAAA,KACApZ,KAAAm8D,YAIArjD,YAAA,SAAA9E,EAAAwH,GACA,IAAA4gD,OAAA,IAAAp8D,KAAAgU,SAAA,GAAAhU,KAAAgU,SACAhU,KAAAgU,SAAArV,EAAAM,QAAA,EAAA,GAAAm9D,EAAA5gD,EAAAxH,IAGAqoD,KAAA,SAAAX,EAAA1nD,GAGAhU,KAAA8Y,YAAA9E,GAEAhU,KAAA07D,UAAAA,EACA17D,KAAA4C,aAAAD,GAAAC,aAAA5C,KAAAgU,SAAAgoD,wBACAh8D,KAAA27D,iBAAAh5D,GAAAg5D,iBAAA37D,KAAAgU,SAAAioD,4BACAj8D,KAAAuX,YAAAvX,KAAAgU,SAAAuD,YAIAvX,KAAAw7D,QACAx7D,KAAAw7D,OAAAlhD,SAGA,IAAAgT,EAAAttB,KAAAy7D,eAEAz7D,KAAAgU,SAAAsoD,aACAhvC,GAAA,IAAAttB,KAAAgU,SAAAsoD,YAGAt8D,KAAAw7D,OAAA78D,EAAA,eAAA2uB,SAAAhf,SAAAtO,KAAA4S,aAGAupD,OAAA,WACAn8D,KAAAq8D,KAAAr8D,KAAA07D,UAAA17D,KAAAgU,WAGAuoD,iBAAA,WAEA59D,EAAA,QAAAqB,KAAAw7D,QAAAloD,MAAA,SAAAkpD,EAAAC,GACA,IAAAC,EAAA/9D,EAAA,OAAA89D,GAEAC,EAAAzgC,QACA3tB,SAAAmuD,GAEAC,EAAAxuD,KAAA,SAAA,WACAwuD,EAAAxuD,KAAA,eAAA,QAGA,CACAsN,SAAA,CACAwgD,uBAAA,KACAC,2BAAA,KACAH,QAAA,CACAa,aAAA,OACAC,cAAA,OACAC,eAAA,QACAC,iBAAA,CACAC,IAAA,UACAC,MAAA,SACAC,KAAA,OAGA/U,OAAA,CAAA/wB,IAAA,EAAAzf,MAAA,EAAAwlD,OAAA,EAAAzlD,KAAA,GACA6kD,WAAA,KACAa,OAAA,CAAA,UAAA,UAAA,UAAA,UAAA,cASAj+D,MAAAy7D,OAAAyC,KAAAl+D,MAAAy7D,OAAAY,UAAAt8D,OAAA,CACAo+D,IAAA,KACAC,YAAA,KAEA/hD,KAAA,SAAAga,EAAAvhB,GACAhU,KAAA4vB,KAAA2F,EAAAr2B,MAAAy7D,OAAAyC,KAAA5hD,UAEAxb,KAAA8Y,YAAA9E,IAGAqoD,KAAA,SAAAX,EAAA1nD,GACAhU,KAAA4vB,KAAA8rC,EAAA1nD,GAEAhU,KAAAq9D,MACAr9D,KAAAq9D,IAAA,MAGA,IAAAnV,EAAAloD,KAAAu9D,iBAEAv9D,KAAAgnC,MAAAhnC,KAAAw7D,OAAAx0B,QAAAkhB,EAAAzwC,KAAAywC,EAAAxwC,MACA1X,KAAAirB,OAAAjrB,KAAAw7D,OAAAvwC,SAAAi9B,EAAA/wB,IAAA+wB,EAAAgV,OAIA,IAAAtB,EAAA,CACA50B,MAAAhnC,KAAAgnC,OAAAkhB,EAAAzwC,KAAAywC,EAAAxwC,OACAuT,OAAAjrB,KAAAirB,QAAAi9B,EAAA/wB,IAAA+wB,EAAAgV,QACAM,WAAA,QAAAx9D,KAAAuX,YAAA2wC,EAAAzwC,KAAAywC,EAAAxwC,MACA+lD,WAAAvV,EAAA/wB,KAGAn3B,KAAA47D,IAAAj5D,GAAAkmD,OAAA7oD,KAAAw7D,OAAA/qC,IAAA,IAAApe,OAAA,OACAnE,KAAA,QAAA0tD,EAAA50B,OACA94B,KAAA,SAAA0tD,EAAA3wC,QAEAjrB,KAAAs9D,YAAAt9D,KAAA47D,IAAAvpD,OAAA,KACAnE,KAAA,YAAA,aAAA0tD,EAAA4B,cAAA5B,EAAA6B,eAIAz9D,KAAA09D,YACA19D,KAAA29D,WACA39D,KAAA49D,YACA59D,KAAA69D,mBAGAH,UAAA,WAGA,IAAA73B,EAAA7lC,KAAA89D,MAAA,GAEAC,EAAAp7D,GAAAq7D,WAAAn4B,GACAo4B,WAAAj+D,KAAAk+D,iBACAC,MAHA,GAKAn+D,KAAAs9D,YAAAjrD,OAAA,KACAnE,KAAA,QAAA,gBACAA,KAAA,YAAA,gBAAAlO,KAAAirB,WACA5L,KAAA0+C,GAIA,IAEAK,EAFAt4B,EAAA9lC,KAAAq+D,OAIA,QAAAr+D,KAAAuX,aACA6mD,EAAAz7D,GAAA27D,SAAAx4B,GACAm4B,WAAAj+D,KAAAu+D,iBACAC,WAAAx+D,KAAAy+D,kBACAN,MAPA,GASAn+D,KAAAs9D,YAAAjrD,OAAA,KACAnE,KAAA,QAAA,gBACAmR,KAAA++C,KAEAA,EAAAz7D,GAAA+7D,UAAA54B,GACAm4B,WAAAj+D,KAAAu+D,iBACAC,WAAAx+D,KAAAy+D,kBACAN,MAhBA,GAkBAn+D,KAAAs9D,YAAAjrD,OAAA,KACAnE,KAAA,QAAA,gBACAA,KAAA,YAAA,aAAAlO,KAAAgnC,YACA3nB,KAAA++C,IAKAp+D,KAAAu8D,oBAGAoB,SAAA,WACA,GAAA39D,KAAAgU,SAAA+pD,MAAAY,SAAA,CACA,IAAA94B,EAAA7lC,KAAA89D,OACAC,EAAAp7D,GAAAq7D,WAAAn4B,GAAAs4B,MAAA,GAAAS,cAAA,GACA5+D,KAAAs9D,YAAAjrD,OAAA,KACAnE,KAAA,QAAA,UACAA,KAAA,YAAA,gBAAAlO,KAAAirB,WACA5L,KAAA0+C,GAGA,GAAA/9D,KAAAgU,SAAAoqD,MAAAO,SAAA,CACA,IAEAP,EAFAt4B,EAAA9lC,KAAAq+D,OAIA,QAAAr+D,KAAAuX,aACA6mD,EAAAz7D,GAAA27D,SAAAx4B,GAAAq4B,MAAA,GACAn+D,KAAAs9D,YAAAjrD,OAAA,KACAnE,KAAA,QAAA,UACAA,KAAA,YAAA,aAAAlO,KAAAgnC,MAPA,SAQA3nB,KAAA++C,KAEAA,EAAAz7D,GAAA+7D,UAAA54B,GAAAq4B,MAAA,GACAn+D,KAAAs9D,YAAAjrD,OAAA,KACAnE,KAAA,QAAA,UACAA,KAAA,YAAA,mBACAmR,KAAA++C,MAKAR,UAAA,WACA,IAAA/3B,EAAA7lC,KAAA89D,MAAA,GACAh4B,EAAA9lC,KAAAq+D,OAIA,GAAAr+D,KAAAgU,SAAA+pD,MAAAc,UAAA,CACA,IAAAC,EAAAn8D,GAAAq7D,WAAAn4B,GAEA7lC,KAAAs9D,YAAAjrD,OAAA,KACAnE,KAAA,QAAA,eACAA,KAAA,YAAA,eAAAlO,KAAAirB,WACA5L,KAAAy/C,EACAC,UAAA/+D,KAAAirB,OAAA,EAAA,GACAgzC,WAAA,KAMA,GAAAj+D,KAAAgU,SAAAoqD,MAAAS,UAAA,CACA,IAAAG,EAAAr8D,GAAA27D,SAAAx4B,GAEA9lC,KAAAs9D,YAAAjrD,OAAA,KACAnE,KAAA,QAAA,eACAA,KAAA,YAAA,oBACAmR,KAAA2/C,EACAD,UAAA/+D,KAAAgnC,MAAA,GACAi3B,WAAA,IACAO,WAAAx+D,KAAAy+D,kBACAN,MAZA,IAkBA,IAAAc,EAAAt8D,GAAAs8D,OACAp5B,GAAA,SAAA+P,GACA,OAAA/P,EAAA+P,EAAA,OAEA9P,GAAA,SAAA8P,GACA,OAAA9P,EAAA8P,EAAA,OAGA51C,KAAAs9D,YACAjrD,OAAA,KACAnE,KAAA,QAAA,cACAmE,OAAA,QACA6sD,MAAAl/D,KAAA07D,UAAAZ,MACAzZ,MAAA,OAAA,QACAA,MAAA,SAAArhD,KAAAgU,SAAAmpD,OAAA,IACA9b,MAAA,eAAA,OACAnzC,KAAA,IAAA+wD,GAIA,IAAAE,EAAAx8D,GAAAw8D,OACAt5B,GAAA,SAAA+P,GACA,OAAA/P,EAAA+P,EAAA,OAEAwpB,GAAAp/D,KAAAirB,QACAo0C,IAAA,SAAAzpB,GACA,OAAA9P,EAAA8P,EAAA,OAGA51C,KAAAs9D,YACAjrD,OAAA,KACAnE,KAAA,QAAA,cACAmE,OAAA,QACA6sD,MAAAl/D,KAAA07D,UAAAZ,MACAzZ,MAAA,OAAArhD,KAAAgU,SAAAmpD,OAAA,IACA9b,MAAA,eAAA,OACAnzC,KAAA,IAAAixD,GAIAn/D,KAAAgU,SAAAsrD,OACAt/D,KAAAs9D,YAAAjrD,OAAA,KACAnE,KAAA,QAAA,SACAuoB,UAAA,UACAzvB,KAAAhH,KAAA07D,UAAAZ,MACAyE,QACAltD,OAAA,UACAgvC,MAAA,OAAArhD,KAAAgU,SAAAmpD,OAAA,IACAjvD,KAAA,QAAA,CAAA0nC,EAAAx2C,IAAA,aAAAA,GACA8O,KAAA,IAAA,GACAA,KAAA,KAAA0nC,GAAA/P,EAAA+P,EAAA,KACA1nC,KAAA,KAAA0nC,GAAA9P,EAAA8P,EAAA,MAIAioB,gBAAA,WACA,GAAA79D,KAAAgU,SAAAwrD,KAAA,CACAx/D,KAAAq9D,MACAr9D,KAAAq9D,IAAA,IAAAn+D,MAAAy7D,OAAAQ,IAAAn7D,KAAAw7D,SAKA,IAAAiE,EAAAz/D,KAAAu9D,iBAGAmC,GADA1/D,KAAAs9D,YAAAzU,OAAA,kBAAA8W,OAAAC,iBAAAH,EAAAhoD,KAAAgoD,EAAA/nD,MAAAknD,KACA5+D,KAAA07D,UAAAZ,KAAAx6D,OAAA,GAIAu/D,EAAAlvD,KAAA+Y,IAAA,EAAAg2C,GAIA75B,EAAA7lC,KAAA89D,MAAA,GACAh4B,EAAA9lC,KAAAq+D,OAEAr+D,KAAAs9D,YAAAjrD,OAAA,KACAnE,KAAA,QAAA,gBACAuoB,UAAA,QACAzvB,KAAAhH,KAAA07D,UAAAZ,MACAyE,QAAAltD,OAAA,QACAnE,KAAA,QAAA,eACAmzC,MAAA,OAAA,eACAA,MAAA,eAAA,KACAnzC,KAAA,QAAA2xD,GACA3xD,KAAA,SAAAlO,KAAAirB,QACA/c,KAAA,IAAA0nC,GAAA/P,EAAA+P,EAAA,IAAAiqB,EAAA,GACAzmD,GAAA,YAAA,CAAAw8B,EAAAx2C,KAGAY,KAAAs9D,YAAAzU,OAAA,SAAAzpD,GAAA8O,KAAA,IAAA,GAIA,IAAA4xD,EAAAnhE,EAAA,WACAohE,EAAAphE,EAAA,2BAAA2P,SAAAwxD,GACAE,EAAArhE,EAAA,2BAAA2P,SAAAwxD,GAEAC,EAAAhhE,KAAAiB,KAAAk+D,eAAAl+D,CAAA41C,EAAA,KACAoqB,EAAAjhE,KAAAiB,KAAAu+D,eAAAv+D,CAAA41C,EAAA,KAEA,IAAAqqB,EAAAH,EAAArvC,IAAA,GAEAzwB,KAAAq9D,IAAAhC,WAAA4E,GAIA,IAIAxoD,EAJAywC,EAAAloD,KAAAu9D,iBAGApmC,EAAA2O,EAAA8P,EAAA,IADA,GAIA,QAAA51C,KAAAuX,aACAE,EAAAouB,EAAA+P,EAAA,IAAAsS,EAAAzwC,KALA,GAOAzX,KAAAw7D,OAAA15D,SAAA2V,KAAAA,EAAAzX,KAAAq9D,IAAAjC,KAAAp0B,QACAhnC,KAAAw7D,OAAA15D,SAAA2V,KAAAzX,KAAAw7D,OAAAx0B,QARA,KAWAvvB,EAAAouB,EAAA+P,EAAA,KAAA51C,KAAAq9D,IAAAjC,KAAAp0B,QAXA,MAcAvvB,EAAAouB,EAAA+P,EAAA,KAAA51C,KAAAq9D,IAAAjC,KAAAp0B,QAAAkhB,EAAAzwC,KAdA,IAiBAA,EAAA,IACAA,EAAAouB,EAAA+P,EAAA,IAAAsS,EAAAzwC,KAlBA,IAqBA,IAAA+kB,EAAA,CACArF,IAAAA,EACA1f,KAAAA,GAGAzX,KAAAq9D,IAAA/B,YAAA9+B,GAIAx8B,KAAAq9D,IAAAxiC,SAEAzhB,GAAA,WAAA,CAAAw8B,EAAAx2C,KAEAY,KAAAs9D,YAAAzU,OAAA,SAAAzpD,GAAA8O,KAAA,IAAA,GAGAlO,KAAAq9D,IAAAh/C,WAKAk/C,eAAA,WACA,IAAArV,EAAAloD,KAAAgU,SAAAk0C,OAIA75C,EAAArO,KAAAy+D,iBACAyB,EAAA,EAmBA,OAjBAvhE,EAAA2U,KAAAjF,EAAA,CAAA/O,EAAA6F,KACA,IAKAg7D,EALA,EAEAngE,KAAAu+D,eAEAz7D,CAAAqC,GACA7E,OAEA6/D,EAAAD,IACAA,EAAAC,KAIAD,GAAA,GAEAhY,EAAAzwC,KAAAyoD,EAEAhY,GAGA4V,KAAA,SAAAsC,GACA,IAAAC,EAAA19D,GAAAovB,IAAA/xB,KAAA07D,UAAAZ,MAAA,SAAAllB,GACA,OAAAA,EAAA,MAGA0qB,EAAA39D,GAAA+mB,IAAA1pB,KAAA07D,UAAAZ,MAAA,SAAAllB,GACA,OAAAA,EAAA,MAGA2qB,EAAA,CAAAF,EAAAC,GAEA,QAAAtgE,KAAAuX,cACAgpD,EAAA,CAAAD,EAAAD,IAGA,IAAA5oD,EAAA,EACAC,EAAA,EAEA0oD,IACA3oD,EAAA,EACAC,EAAA,GAGA,IAAAmuB,EAAAljC,GAAA69D,YAAA1X,MAAA,CAAArxC,EAAAzX,KAAAgnC,MAAAtvB,IAIA,OAFAmuB,EAAA1wB,OAAAorD,GAEA16B,GAGAw4B,KAAA,WACA,IAAAoC,EAAA,CAAA,EAAAzgE,KAAA0gE,gBAEA56B,EAAAnjC,GAAAg+D,cAAA7X,MAAA,CAAA9oD,KAAAirB,OAAA,IAIA,OAFA6a,EAAA3wB,OAAAsrD,GAEA36B,GAGAo4B,cAAA,WASA,OANAl+D,KAAAgU,SAAA+pD,MAAAj7D,YAAAnE,EAAA0hB,KACArgB,KAAAgU,SAAA+pD,MAAAj7D,UAAA9C,MAEAd,MAAAy7D,OAAAiG,MAAAC,iBAAA7gE,KAAA27D,iBAAA37D,KAAAgU,WAMAuqD,cAAA,WASA,OANAv+D,KAAAgU,SAAAoqD,MAAAt7D,YAAAnE,EAAA0hB,KACArgB,KAAAgU,SAAAoqD,MAAAt7D,UAAA9C,MAEAd,MAAAy7D,OAAAiG,MAAAE,mBAAA9gE,KAAA4C,aAAA5C,KAAA07D,UAAAb,QAAA,GAAAt5D,KAAAvB,KAAAgU,WAMA0sD,aAAA,WACA,OAAA/9D,GAAA+mB,IAAA1pB,KAAA07D,UAAAZ,MAAA,SAAAllB,GACA,OAAAA,EAAA,OAIA6oB,eAAA,WACA,IAAAsC,EAAA/gE,KAAA0gE,eAEA,OAAAK,EAAA,EACA,CAAAA,EAAA,EAAAA,GAEA,CAAA,EAAAA,KAGA,CACAvlD,SAAA,CACA8gD,WAAA,OACApU,OAAA,CAAA/wB,IAAA,GAAAzf,MAAA,EAAAwlD,OAAA,GAAAzlD,KAAA,GACA6nD,OAAA,EACAE,MAAA,EACAzB,MAAA,CACAc,WAAA,EACAF,UAAA,EACA77D,UAAAnE,EAAA0hB,MAEA+9C,MAAA,CACAS,WAAA,EACAF,UAAA,EACA77D,UAAAnE,EAAA0hB,SAUAnhB,MAAAy7D,OAAAiG,MAAA,CACAI,YAAA,SAAAxwD,GACA,IAAAywD,EAAA/+D,SAAAsO,EAAA,IAEA4G,EAAA,CACArG,MAAAJ,KAAAC,MAAAqwD,EAAA,MACAnwD,QAAAH,KAAAC,OAAAqwD,EAAA,KAAA7pD,EAAArG,OAAA,IACAP,QAAAywD,EAAA,KAAA7pD,EAAArG,MAAA,GAAAqG,EAAAtG,SAeA,OAZAsG,EAAArG,MAAA,KACAqG,EAAArG,MAAA,IAAAqG,EAAArG,OAGAqG,EAAAtG,QAAA,KACAsG,EAAAtG,QAAA,IAAAsG,EAAAtG,SAGAsG,EAAA5G,QAAA,KACA4G,EAAA5G,QAAA,IAAA4G,EAAA5G,SAGA,GAAA4G,EAAArG,SAAAqG,EAAAtG,WAAAsG,EAAA5G,WAGAqwD,iBAAA,SAAAlF,EAAAuF,GACA,OAAAA,EAAAC,WACA,IAAA,OACA,OAAAxF,EAAAn6D,OAAA,MAEA,IAAA,QACA,OAAAm6D,EAAAn6D,OAAA0/D,EAAApF,QAAAgB,iBAAAE,OAEA,IAAA,OACA,OAAArB,EAAAn6D,OAAA0/D,EAAApF,QAAAgB,iBAAAC,IAAA,aAEA,QACA,OAAApB,EAAAn6D,OAAA0/D,EAAApF,QAAAgB,iBAAAC,OAIA+D,mBAAA,SAAAl+D,EAAArB,EAAA2/D,GACA,OAAA3/D,GACA,IAAA,WACA,OAAAqB,EAAApB,OAAA0/D,EAAApF,QAAAe,gBAEA,IAAA,UACA,OAAAj6D,EAAApB,OAAA0/D,EAAApF,QAAAc,eAEA,IAAA,OACA,OAAA19D,MAAAy7D,OAAAiG,MAAAI,YAEA,IAAA,SACA,OAAAp+D,EAAApB,OAAA0/D,EAAApF,QAAAa,iBCrrBAz9D,MAAAkiE,WAAAh8D,QAAAyV,KAAA5b,OAAA,CACA2T,WAAA,KACAvO,OAAA,KACAg9D,gBAAA,KACAC,cAAA,KACAC,YAAA,KAEAhmD,KAAA,SAAAga,GACAv1B,KAAA4S,WAAAjU,EAAA42B,GACAv1B,KAAAqE,OAAArE,KAAA4S,WAAAgD,KAAA,gBACA5V,KAAAqhE,gBAAArhE,KAAA4S,WAAAsH,SAAA,UACAla,KAAAshE,cAAAthE,KAAAqhE,gBAAAnnD,SAAA,kBAEAla,KAAAwhE,mBACAxhE,KAAAyhE,mBAEAzhE,KAAA0c,YAAA1c,KAAAqE,OAAA,QAAA,qBAGAm9D,iBAAA,WACA,IAAAp9D,EAAAoC,SAAAoF,cAAA,SACAxH,EAAAs9D,aAAA,OAAA,SAEA,UAAAt9D,EAAA7C,OAKAvB,KAAAqhE,gBAAAjrD,YAAA,UACApW,KAAAuhE,YAAA5iE,EAAAyF,GACA0N,SAAA,uBACA5D,KAAA,CACAyzD,gBAAA3hE,KAAAqE,OAAA6J,KAAA,MACAmM,aAAAnb,MAAAS,EAAA,MAAA,kBAEA2O,SAAAtO,KAAAshE,eAEAthE,KAAA0c,YAAA1c,KAAAuhE,YAAA,SAAA,SAAAloD,GACAA,EAAA6X,qBAGAlxB,KAAA0c,YAAA1c,KAAAqhE,gBAAA,SAAA,WACArhE,KAAAuhE,YAAAtqD,QAAA,YAGAjX,KAAA0c,YAAA1c,KAAAuhE,YAAA,QAAA,iBAGAK,YAAA,WACA5hE,KAAAqE,OAAAC,IAAAtE,KAAAuhE,YAAAj9D,OACAtE,KAAAyhE,oBAGAA,iBAAA,WACA,IAAAn9D,EAAAtE,KAAAqE,OAAAC,MAEAA,KAAAA,EAAApF,MAAAmC,KAAAiD,KACAtE,KAAAqE,OAAAC,IAAAA,GAIAA,EAAAhE,QAAA,MAAAgE,EAAA,KACAA,EAAAA,EAAA3C,OAAA,GACA3B,KAAAqE,OAAAC,IAAAA,IAIAA,EAAAhE,QAMA,IAAAgE,EAAAhE,SACAgE,EAAAA,EAAA,GAAAu9D,OAAA,GAAAv9D,EAAA,GAAAu9D,OAAA,GAAAv9D,EAAA,GAAAu9D,OAAA,IAGAv9D,EAAAqB,MAAA,mBACA3F,KAAAshE,cAAAt2C,IAAA,mBAAA,IAAA1mB,GACAtE,KAAAuhE,aACAvhE,KAAAuhE,YAAAj9D,IAAA,IAAAA,IAGAtE,KAAAshE,cAAAt2C,IAAA,mBAAA,KAfAhrB,KAAAshE,cAAAt2C,IAAA,mBAAA,MAkBA,CACA82C,4BAAA,KAEAC,8BAAA,WAIA,OAHA7iE,MAAAkiE,WAAAU,4BAGA5iE,MAAAkiE,WAAAU,+BC7FA5iE,MAAAywB,sBAAAvqB,QAAA03B,MAAA79B,OAAA,CACAmhB,aAAA,KACA4hD,8BAAA,KAEAlhD,SAAA,KACAmhD,kBAAA,KACAC,yBAAA,KACAC,eAAA,KACArlD,QAAA,KACAslD,oBAAA,KACAlnD,SAAA,KACAD,WAAA,KACAonD,aAAA,KACAC,gBAAA,KAEAC,WAAA,KACAtnC,QAAA,KACA1S,eAAA,KACAi6C,qBAAA,EAEAC,yBAAA,KAEAlnD,KAAA,SAAA6E,EAAApM,GACAhU,KAAA4vB,OAEA5vB,KAAA8Y,YAAA9E,EAAA,CACAsqB,WAAA,IAGAt+B,KAAAogB,aAAAA,EACApgB,KAAAgiE,8BAAAhiE,KAAAogB,aAAAU,SAAA5G,SAAA,OAAAA,SAAA,MAEA,IAAAtH,EAAAjU,EAAA,iDAAA2P,SAAAlJ,QAAAsN,MAEA1S,KAAA8gB,SAAAniB,EAAA,yCAAA2P,SAAAsE,GACA5S,KAAAiiE,kBAAAtjE,EAAA,yBAAA2P,SAAAtO,KAAA8gB,UACA9gB,KAAAkiE,yBAAAvjE,EAAA,iCAAA2P,SAAAsE,GAEA5S,KAAA8c,QAAAne,EAAA,yBAAA2P,SAAAsE,GACA5S,KAAAoiE,oBAAAzjE,EAAA,gCAAA2P,SAAAtO,KAAA8c,SACA9c,KAAAib,WAAAtc,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,MACA9W,KAAAnE,MAAAS,EAAA,MAAA,YACA2O,SAAAtO,KAAAoiE,qBACApiE,KAAAkb,SAAAvc,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,sBACA9W,KAAAnE,MAAAS,EAAA,MAAA,UACA2O,SAAAtO,KAAAoiE,qBACApiE,KAAAqiE,aAAA1jE,EAAA,iCAAA2P,SAAAtO,KAAAoiE,qBACApiE,KAAAmiE,eAAAxjE,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,sBACA9W,KAAAnE,MAAAS,EAAA,MAAA,iBACA2O,SAAA3P,EAAA,iDAAA2P,SAAAtO,KAAA8c,UAEA9c,KAAAsiE,gBAAA3jE,EAAA,0BAAA2P,SAAAsE,GAEA5S,KAAA0iE,aAAA9vD,GACA5S,KAAA66B,OAEA,IAAA7zB,EAAA,CACA2M,YAAA3T,KAAAogB,aAAAzM,aAGAzU,MAAA4H,kBAAA,0DAAAE,EAAA,CAAAyD,EAAA5C,KACA7H,KAAAsiE,gBAAAhoD,SAEA,YAAAzS,IACA7H,KAAAkb,SAAA9E,YAAA,YACApW,KAAA2iE,WAAAl4D,MAIAzK,KAAA0c,YAAA1c,KAAAmiE,eAAA,QAAA,4BACAniE,KAAA0c,YAAA1c,KAAAib,WAAA,QAAA,QACAjb,KAAA0c,YAAA1c,KAAAkb,SAAA,QAAA,QACAlb,KAAA0c,YAAA1c,KAAA4S,WAAA,SAAA,SAGA+vD,WAAA,SAAAl4D,GAEAzK,KAAAyiE,yBAAAh4D,EAAAg4D,yBAGAziE,KAAAuiE,WAAA,IAAAn9D,QAAA0zB,SAAA,CACA/C,OAAA,QACAmD,KAAA,IACAK,aAAA,KACAv5B,KAAAwiE,qBAAA,KAKAxiE,KAAAi7B,QAAA,GAEA,IAAA,IAAAv7B,EAAA,EAAAA,EAAA+K,EAAAwwB,QAAA36B,OAAAZ,IAAA,CACA,IAAA2mB,EAAArmB,KAAA4iE,UAAAn4D,EAAAwwB,QAAAv7B,IACAM,KAAAi7B,QAAA/5B,KAAAmlB,GAGArmB,KAAAuoB,qBAAA,IAAAvoB,KAAAi7B,QAAA,IACAj7B,KAAAi7B,QAAA,GAAA4tB,UAIA+Z,UAAA,SAAAC,GACA,IAKAx8C,EALAgkC,EAAA1rD,EAAA,yCAAA2P,SAAAtO,KAAAiiE,mBACAa,EAAAnkE,EAAA,wBAAA2P,SAAA+7C,GACA0Y,EAAApkE,EAAA,0BAAA2P,SAAA+7C,GAwBA,OAvBA1rD,EAAA,+BAAAO,MAAAS,EAAA,MAAA,WAAA,wBAAA2O,SAAA+7C,QAKA,IAAAwY,EAAAG,SACA3Y,EAAAv4C,SAAA,WACAixD,EAAA70D,KAAA,OAAA,2BACAmY,EAAA,IAAAnnB,MAAAywB,sBAAAszC,QAAAjjE,KAAAqqD,EAAAyY,EAAAC,EAAAF,IACAK,gBAAAL,EAAAG,WAEAD,EAAA70D,KAAA,OAAA,sBAAA5J,IAAAu+D,EAAAvjE,MACA+mB,EAAA,IAAAnnB,MAAAywB,sBAAAwzC,OAAAnjE,KAAAqqD,EAAAyY,EAAAC,EAAAF,IACAK,gBAAAL,EAAA9sD,QAGA/V,KAAAogB,aAAAY,UAAA,KAAArf,OAAA,EAAAkhE,EAAAvjE,IAAAgB,OAAA,KAAAuiE,EAAAvjE,IAAA,KACA+mB,EAAAwiC,UAIA7oD,KAAAuiE,WAAA36C,SAAAyiC,GAEAhkC,GAGA+8C,yBAAA,WACA,IAAA/8C,EAAArmB,KAAA4iE,UAAA,CACAI,QAAA,KAGA59D,QAAAi+D,yBAAArjE,KAAA8gB,SAAAuF,EAAAgkC,OAEAhkC,EAAAwiC,SACA7oD,KAAAwiE,qBAAA,GAGA9uB,KAAA,SAAAr6B,GAKA,GAJAA,GACAA,EAAAqM,kBAGA1lB,KAAAkb,SAAAvF,SAAA,aAAA3V,KAAAqiE,aAAA1sD,SAAA,UAAA,CAIA3V,KAAAqiE,aAAAjsD,YAAA,UACA,IAAApP,EAAAhH,KAAA4S,WAAAsM,YAAA,gBAAAlf,KAAAogB,aAAAzM,YAEAzU,MAAA4H,kBAAA,+DAAAE,EAAA,CAAAyD,EAAA5C,KAGA,GAFA7H,KAAAqiE,aAAAvwD,SAAA,UAEA,YAAAjK,GAAA4C,EAAA9C,QAAA,CAEA,GAAA3H,KAAAwiE,qBACAxiE,KAAAgiE,8BAAA1hE,OAAA,CAIA,IAHA,IACAgjE,EADAC,EAAA,KAGA7jE,EAAA,EAAAA,EAAAM,KAAAuiE,WAAA77C,OAAApmB,OAAAZ,IAAA,CACA,IACA2mB,EADArmB,KAAAuiE,WAAA77C,OAAAvU,GAAAzS,GACAsH,KAAA,UACAw8D,EAAAn9C,EAAAo9C,iBAEAD,IAIAn9C,EAAAq9C,YACAJ,EAAAE,GAEAF,IACAtjE,KAAA2jE,aAAAL,EAAAC,GACAA,EAAAD,EACAA,EAAA,MAGAtjE,KAAA2jE,aAAAH,EAAAD,GACAA,EAAAC,IAKA,GAAAD,EAAA,CACA,IAAAK,EAAAL,EAAAM,UACA7jE,KAAAogB,aAAAO,aAAAyH,YAAAw7C,GACAA,EAAAtpD,UAMAta,KAAAuoB,gBAAAvoB,KAAAuoB,eAAAs6C,WAAAvjE,MACAU,KAAAogB,aAAAyN,kBAAA7tB,KAAAuoB,eAAAs6C,WAAAvjE,KACAU,KAAAogB,aAAA6F,kBAGA/mB,MAAA8I,GAAA2X,cAAAzgB,MAAAS,EAAA,MAAA,0BACAK,KAAAqe,WACA,CACA,IAAAzW,EAAA,YAAAC,GAAA4C,EAAA7C,MAAA6C,EAAA7C,MAAA1I,MAAAS,EAAA,MAAA,4BACAT,MAAA8I,GAAAC,aAAAL,QAKA+7D,aAAA,SAAAziD,EAAAqiD,GACAA,EAGAriD,EAAAsU,YAAA+tC,GAFAriD,EAAA0H,UAAA5oB,KAAAgiE,gCAMAt3C,QAAA,WACA,IAAA,IAAAhrB,EAAA,EAAAA,EAAAM,KAAAi7B,QAAA36B,OAAAZ,IACAM,KAAAi7B,QAAAv7B,GAAAgrB,iBAGA1qB,KAAAi7B,QACAj7B,KAAA4vB,UAIA1wB,MAAAywB,sBAAAm0C,WAAA1+D,QAAAyV,KAAA5b,OAAA,CACAywB,MAAA,KAEA26B,MAAA,KACAyY,WAAA,KACAC,WAAA,KACAgB,mBAAA,KAEAlB,WAAA,KAEAtnD,KAAA,SAAAmU,EAAA26B,EAAAyY,EAAAC,EAAAF,GACA7iE,KAAA0vB,MAAAA,EACA1vB,KAAAqqD,MAAAA,EACArqD,KAAA8iE,WAAAA,EACA9iE,KAAA+iE,WAAAA,EACA/iE,KAAA6iE,WAAAA,EAEA7iE,KAAAqqD,MAAArjD,KAAA,SAAAhH,MAEAA,KAAA0c,YAAA1c,KAAAqqD,MAAA,QAAA,WAGAqZ,UAAA,WACA,OAAA,GAGAM,WAAA,WACA,OAAAhkE,KAAA0vB,MAAAnH,iBAAAvoB,MAGA6oD,OAAA,WACA7oD,KAAAgkE,eAIAhkE,KAAA0vB,MAAAnH,gBACAvoB,KAAA0vB,MAAAnH,eAAA07C,WAGAjkE,KAAAqqD,MAAAv4C,SAAA,OACA9R,KAAA0vB,MAAAnH,eAAAvoB,KAEAA,KAAA+jE,mBAIA/jE,KAAA+jE,mBAAA3tD,YAAA,UAHApW,KAAA+jE,mBAAA/jE,KAAAkkE,iBACA51D,SAAAtO,KAAA0vB,MAAAwyC,0BAKAliE,KAAA0vB,MAAAwyC,yBAAAr3C,UAAA,KAGAq5C,eAAA,WACA,OAAAvlE,EAAA,WAGA8kE,eAAA,aAGAQ,SAAA,WACAjkE,KAAAqqD,MAAAj0C,YAAA,OACApW,KAAA0vB,MAAAnH,eAAA,KACAvoB,KAAA+jE,mBAAAjyD,SAAA,WAGAoxD,gBAAA,SAAA5+D,GACAtE,KAAA8iE,WAAAz/D,KAAAiB,IAGAomB,QAAA,WACA1qB,KAAAqqD,MAAArjD,KAAA,SAAA,MACAhH,KAAA4vB,UAIA1wB,MAAAywB,sBAAAwzC,OAAAjkE,MAAAywB,sBAAAm0C,WAAA7kE,OAAA,CACAilE,eAAA,WACA,IAAAC,EAAAxlE,EAAA,UAAA0T,OAAAnT,MAAAg1B,GAAAM,gBAAA,CACAze,MAAA7W,MAAAS,EAAA,MAAA,yBACAkW,GAAA,0BAAAlF,KAAAC,MAAA,IAAAD,KAAAe,UACAzM,KAAA,WAAAjF,KAAA6iE,WAAAvjE,yBACA6F,MAAAnF,KAAA6iE,WAAAuB,iBACA3vC,YAAAz0B,KAAA6iE,WAAAwB,2BAOA,OAJArkE,KAAA6iE,WAAAyB,gBAAAhkE,QACA6jE,EAAA9xD,OAAArS,KAAAukE,2BAGAJ,GAGAI,wBAAA,WAEA,IAAAC,EAAAC,GAAAzkE,KAAA6iE,WAAAyB,gBAAA,GACAI,EAAA1kE,KAAA2kE,wBAAAH,EAAAC,GAAA,GAAA,GAGAG,EAAAjmE,EAAA,UACAkmE,EAAA,CAAAL,GAEA7lE,EAAA,sCAAAqB,KAAA6iE,WAAAvjE,IAAA,oCAAAgP,SAAAs2D,GAGA,IAAA,IAAAllE,EAAA,EAAAA,EAAAM,KAAA6iE,WAAAyB,gBAAAhkE,OAAAZ,IAAA,CACA,IAAAJ,EAAAyW,GAAA/V,KAAA6iE,WAAAyB,gBAAA5kE,GACAklE,EAAAvyD,OAAArS,KAAA2kE,wBAAArlE,EAAAyW,GAAA,GAAA,IACA8uD,EAAA3jE,KAAA5B,GAIA,IAAAmjE,EAAAziE,KAAA0vB,MAAA+yC,yBAAA1hE,MAAA,GACA0hE,EAAAvhE,QAAAlB,KAAA6iE,WAAAJ,0BAEA,IAAA,IAAA/iE,EAAA,EAAAA,EAAA+iE,EAAAniE,OAAAZ,IAAA,CACA,IAAAJ,EAAAyW,GAAA0sD,EAAA/iE,GACAR,MAAA+N,QAAA3N,EAAAulE,IACAD,EAAAvyD,OAAArS,KAAA2kE,wBAAArlE,EAAAyW,GAAA,GAAA,IASA,OALA,IAAA3Q,QAAA0zB,SAAA8rC,EAAA1qD,WAAA,CACA6b,OAAA,QACAmD,KAAA,MAGAh6B,MAAAg1B,GAAA4wC,YAAAnmE,EAAA,CAAA+lE,EAAA,GAAAE,EAAA,KAAA,CACA7uD,MAAA7W,MAAAS,EAAA,MAAA,iBACAolE,aAAA7lE,MAAAS,EAAA,MAAA,wFAIAglE,wBAAA,SAAArlE,EAAAyW,EAAAwE,EAAAkoC,GACA,IAAA99B,EAAAhmB,EAAA,iDACA0T,OAAA,4BACAA,OACAnT,MAAAg1B,GAAA8wC,eAAA,CACAjvD,MAAA7W,MAAAiE,WAAA4S,GACA9Q,KAAA,WAAAjF,KAAA6iE,WAAAvjE,IAAA,uBACA6F,MAAA7F,EACAmjD,QAAAA,EACAwiB,SAAA1qD,KAQA,OAJAA,GACAoK,EAAAzK,SAAA,SAAApI,SAAA,YAGA6S,GAGA8+C,eAAA,WACA,IAAAviD,EAAAlhB,KAAA0vB,MAAAtP,aAAAgH,eAAApnB,KAAA6iE,WAAAvjE,KAEA,GAAA4hB,EACA,OAAAA,EAAAzH,QAAA,SAKAva,MAAAywB,sBAAAszC,QAAA/jE,MAAAywB,sBAAAm0C,WAAA7kE,OAAA,CACAimE,YAAA,KACAC,YAAA,KACAvkC,WAAA,KAEA8iC,UAAA,WACA,OAAA,GAGA7a,OAAA,WACA7oD,KAAA4vB,OACA5vB,KAAAmlE,YAAAluD,QAAA,UAGAitD,eAAA,WACA,IAAAC,EAAAxlE,EAAA,UAkBA,OAhBAqB,KAAAklE,YAAAhmE,MAAAg1B,GAAAM,gBAAA,CACAze,MAAA7W,MAAAS,EAAA,MAAA,WACAolE,aAAA7lE,MAAAS,EAAA,MAAA,mEACAwF,MAAAnF,KAAA6iE,WAAAG,UACA10D,SAAA61D,GAEAnkE,KAAAmlE,YAAAnlE,KAAAklE,YAAAtvD,KAAA,SAEAuuD,EAAA9xD,OAAA,SAEArS,KAAA4gC,WAAAjiC,EAAA,6BAAA0E,KAAAnE,MAAAS,EAAA,MAAA,mBACA2O,SAAA61D,GAEAnkE,KAAA0c,YAAA1c,KAAAmlE,YAAA,QAAA,0BACAnlE,KAAA0c,YAAA1c,KAAA4gC,WAAA,QAAA,iBAEAujC,GAGAiB,uBAAA,WACAplE,KAAAkjE,gBAAAljE,KAAAmlE,YAAA7gE,OACAtE,KAAA0vB,MAAA8yC,qBAAA,GAGAU,gBAAA,SAAA5+D,GACAtE,KAAA8iE,WAAA/jE,MAAAuF,EAAApF,MAAAiE,WAAAmB,GAAA,qBAAApF,MAAAS,EAAA,MAAA,WAAA,SAAA,UACAK,KAAA+iE,WAAAz+D,IAAAA,IAGA+gE,cAAA,WACArlE,KAAA0vB,MAAA6yC,WAAAn6C,YAAApoB,KAAAqqD,OACArqD,KAAA0vB,MAAAuL,QAAA3rB,OAAA3Q,EAAAsO,QAAAjN,KAAAA,KAAA0vB,MAAAuL,SAAA,GACAj7B,KAAA0vB,MAAA8yC,qBAAA,EAEAxiE,KAAAgkE,eACAhkE,KAAAikE,WAEAjkE,KAAA0vB,MAAAuL,QAAA36B,QACAN,KAAA0vB,MAAAuL,QAAA,GAAA4tB,UAIA7oD,KAAAqqD,MAAA/vC,SACAta,KAAA+jE,mBAAAzpD,SACAta,KAAA0qB,WAGA+4C,eAAA,WACA,IAAA1tD,EAAA/V,KAAAmlE,YAAAnlE,KAAAmlE,YAAA7gE,MAAAtE,KAAA6iE,WAAAG,QACA,OAAArkE,EAAA,yBAAA0T,OAAA1T,EAAA,WAAA0E,KAAA0S,OC9cA7W,MAAAmhC,gBAAAj7B,QAAA0zB,SAAA75B,OAAA,CACA8gC,OAAA,KAEAxkB,KAAA,SAAA+pD,EAAAtxD,GACAhU,KAAA+/B,OAAAphC,EAAA2mE,GACA,IAAAC,EAAAvlE,KAAA+/B,OAAA7lB,SAAA,SAAAA,SAAA,kBAEAlG,EAAArV,EAAAM,OAAA,GAAAC,MAAAmhC,gBAAA7kB,SAAAxH,IAEAuhB,UAAAv1B,KAAA+/B,OAAA7lB,SAAA,SACAlG,EAAAyoC,OAAAz8C,KAAAwlE,UAAArpD,KAAAnc,MACAgU,EAAAyxD,QAAA,QACAzxD,EAAAklB,KAAA9zB,QAAAsgE,OACA1xD,EAAAqlB,eAAA,EACArlB,EAAAslB,cAAA,IAEAt5B,KAAA4vB,KAAA21C,EAAAvxD,IAGAwxD,UAAA,SAAAG,GACA,IAAAppC,EAAA59B,EAAA,eAAAqB,KAAAgU,SAAA4xD,YAAA,OAAAt3D,SAAAlJ,QAAAsN,MACAqtB,EAAAphC,EAAA,YAAA2P,SAAAiuB,GACAU,EAAAt+B,EAAA,YAAA2P,SAAAyxB,GAEA4lC,EAAAr3D,SAAA2uB,GAGA8C,EAAAiH,MAAAhnC,KAAA+/B,OAAAiH,SACAjH,EAAA5J,KAAA,YAAAn2B,KAAA+/B,OAAA5J,KAAA,cAOA,IAJA,IACA0vC,EADA7lE,KAAA+/B,OAAAnqB,KAAA,YACAsE,WACAyqC,EAAAghB,EAAAzrD,WAEAxa,EAAA,EAAAA,EAAAilD,EAAArkD,OAAAZ,IACAf,EAAAgmD,EAAAjlD,IAAAsnC,MAAAroC,EAAAknE,EAAAnmE,IAAAsnC,SAGA,OAAAzK,IAEA,CACA/gB,SAAA,CACAua,OAAA,QACA6vC,YAAA,yBC5CA1mE,MAAA4mE,gBAAA1gE,QAAA03B,MAAA79B,OAAA,CACA4W,GAAA,KACAkwD,OAAA,KAEAC,oBAAA,KACAC,eAAA,KAEAC,WAAA,KACAC,WAAA,EAEA5qD,KAAA,SAAAwqD,EAAA/xD,GACAhU,KAAA6V,GAAAlF,KAAAC,MAAA,IAAAD,KAAAe,UACA1R,KAAA+lE,OAAAA,EACA/xD,EAAArV,EAAAM,OAAAC,MAAA4mE,gBAAAtqD,SAAAxH,GAEA,IAAA/F,EAAAtP,EACA,mFACAO,MAAAyH,eACA,kEACAvB,QAAA7F,QAAAS,KAAA+lE,QAAA,GAAA,6CAAA/lE,KAAA+lE,OAAA,QACA/xD,EAAA8C,SAAA,+CAAA9C,EAAA8C,SAAA,MAAA,IACA,WACAxI,SAAAlJ,QAAAsN,MACA0L,EAAAzf,EACA,qDAEAO,MAAAS,EAAA,MAAA,8CAFA,8HAMAT,MAAAS,EAAA,MAAA,mBANA,kCAOAK,KAAA6V,GAPA,yGASA3W,MAAAS,EAAA,MAAA,iBATA,4GAaAT,MAAAS,EAAA,MAAA,wBAbA,wBAgBA2O,SAAAL,GACAw0B,EAAA9jC,EAAA,gCAAA2P,SAAA8P,GACAnD,EAAAtc,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,MACA9W,KAAAnE,MAAAS,EAAA,MAAA,YACA2O,SAAAm0B,GAEA,GAAAzuB,EAAAoyD,eAAA9lE,OACA,IAAA,IAAAZ,EAAA,EAAAA,EAAAsU,EAAAoyD,eAAA9lE,OAAAZ,IACA0e,EAAAxI,KAAA,MAAAvD,OAAA1T,EAAA,QAAA,CAAA0E,KAAA2Q,EAAAoyD,eAAA1mE,WAGA0e,EAAAxI,KAAA,MAAA0E,SAWA,IAAA+rD,EAEA,GAVArmE,KAAAgmE,oBAAA5nD,EAAAxI,KAAA,qBACA5V,KAAAsmE,iBAAA3nE,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,sBACA9W,KAAArD,KAAAumE,iBAAA,KACAj4D,SAAAm0B,GACAziC,KAAAimE,eAAAtnE,EAAA,iCAAA2P,SAAAm0B,GAIAr9B,QAAA7F,QAAAS,KAAA+lE,QAAA,CACAM,EAAA,CAAA,OAEA,IAAA,IAAA3mE,EAAA,EAAAA,EAAAM,KAAA+lE,OAAAzlE,OAAAZ,IACA2mE,EAAAnlE,KAAA,OAAAlB,KAAA+lE,OAAArmE,SAGA2mE,EAAA,OAAArmE,KAAA+lE,OAGA/lE,KAAAkmE,WAAA,IAAAhnE,MAAA04B,uBAAA,CACA/hB,GAAA,iBAAA7V,KAAA6V,GACA5Q,KAAA,oBACA0O,YAAA,wBACAoR,SAAA,CACAlP,GAAAwwD,GAEAp8C,MAAA,EACAqR,cAAA,CACAN,kBAAA,GAEAgB,iBAAA,KACAh8B,KAAAid,wBAEAjd,KAAAgmE,oBAAAzrD,QAAA4b,KAAA,WAGAn2B,KAAAwmE,uBAFAxmE,KAAAgmE,oBAAAzrD,QAAAtD,QAAA,UAKAkjB,iBAAAn6B,KAAAwmE,qBAAArqD,KAAAnc,MACA+yB,YAAA,EACAgH,UAAA,IAGA/5B,KAAA0c,YAAAzB,EAAA,QAAA,QAEAjb,KAAA0c,YAAA1c,KAAAgmE,oBAAA,SAAA,wBACAhmE,KAAA0c,YAAAzO,EAAA,SAAA,gBAEAjO,KAAA4vB,KAAA3hB,EAAA+F,IAGAuyD,gBAAA,SAAAE,GACA,IAAA5mE,EAAA4mE,EACA,0DACA,8CAEA,OAAAvnE,MAAAS,EAAA,MAAAE,EAAA,CACA6mE,IAAAthE,QAAA7F,QAAAS,KAAA+lE,QAAA/lE,KAAA+lE,OAAAzlE,OAAA,KAIAkmE,qBAAA,WACA,IAAAG,GAAA,EAoBA,OAlBA3mE,KAAAgmE,oBAAA7zD,GAAA,GAAAgkB,KAAA,YACAwwC,GAAA,EACA3mE,KAAAsmE,iBAAAjjE,KAAArD,KAAAumE,iBAAA,MAEAvmE,KAAAsmE,iBAAAjjE,KAAArD,KAAAumE,iBAAA,IACAvmE,KAAAgmE,oBAAA7zD,GAAA,GAAAgkB,KAAA,aACAwwC,IAAA3mE,KAAAkmE,WAAAj6C,gBAIAjsB,KAAAid,wBAEA0pD,EACA3mE,KAAAsmE,iBAAAlwD,YAAA,YAEApW,KAAAsmE,iBAAAx0D,SAAA,YAGA60D,GAGAC,aAAA,SAAAvtD,GACA,IAAArZ,KAAAmmE,WAAAnmE,KAAAwmE,uBAAA,CAKAxmE,KAAAsmE,iBAAAx0D,SAAA,UACA9R,KAAAimE,eAAA7vD,YAAA,UACApW,KAAA4X,UACA5X,KAAAkmE,WAAAtuD,UACA5X,KAAAmmE,WAAA,EAGA,KACA,IAAAnmE,KAAAgU,SAAA4J,YACAvE,EAAAqM,iBAEA,MAAAhb,GAGA,MAFA2O,EAAAqM,iBACA1lB,KAAAimE,eAAAn0D,SAAA,UACApH,QAlBA2O,EAAAqM,kBAsBA2X,SAAA,WAEAj4B,QAAAugB,iBAAA,IACA3lB,KAAAgmE,oBAAAzrD,QAAAtD,QAAA,SAGAjX,KAAA4vB,SAEA,CACApU,SAAA,CACA4qD,eAAA,GACAxoD,SAAAjf,EAAA0hB,KACAvJ,SAAA,QCnLA5X,MAAA2nE,YAAAzhE,QAAAyV,KAAA5b,OAAA,CACA6nE,aAAA,KACAC,eAAA,KACA5rD,SAAA,KACA6rD,uBAAA,KACAC,YAAA,KAEAC,aAAA,KACAC,QAAA,KACAC,eAAA,KACAC,aAAA,KAEAC,gBAAA,KACAC,mBAAA,KACAC,mBAAA,KACAC,eAAA,KAEAC,QAAA,KACAC,WAAA,KAEAC,oBAAA,KACAC,qBAAA,EACAC,WAAA,EACAppC,QAAA,KACAqpC,QAAA,EACAC,QAAA,KACAC,MAAA,KACAC,gBAAA,EAEAC,mBAAA,KACAv2D,OAAA,KAEAw2D,gBAAA,EACAC,QAAA,KACAC,aAAA,KACAC,yBAAA,EAEAhtD,KAAA,SAAAvH,GAoBA,GAnBAhU,KAAA8Y,YAAA9E,EAAA9U,MAAA2nE,YAAArrD,UAEAxb,KAAAioE,MAAA,GACAjoE,KAAAmoE,mBAAA,GAEAnoE,KAAA0nE,QAAAh/D,OAAAC,KAAA3I,KAAAgU,SAAAw0D,cAAArmE,IAAA2T,GACA5T,SAAA4T,IAGA9V,KAAA8mE,aAAAnoE,EAAA,gBACAqB,KAAA+mE,eAAApoE,EAAA,mBACAqB,KAAAmb,SAAAxc,EAAA,qBACAqB,KAAAgnE,uBAAAroE,EAAA,sBACAqB,KAAAinE,YAAAtoE,EAAA,oBAEAqB,KAAAgU,SAAAy0D,sBACAzoE,KAAA0c,YAAA1c,KAAAgnE,uBAAA,QAAA,sBAGAhnE,KAAAgU,SAAA00D,eAAApoE,OAAA,CACAN,KAAAgU,SAAA20D,eACA3oE,KAAA0c,YAAA/d,EAAA,gBAAA,QAAA,eAGA,MAAAiqE,EAAAjqE,EAAA,cAEA,IAAAqB,KAAAgU,SAAA00D,eAAApoE,OACAN,KAAA0c,YAAAksD,EAAA,SAAA,WACA5oE,KAAA6oE,cAAA7oE,KAAAgU,SAAA00D,eAAA,GAAApjE,QAGAtF,KAAA8oE,gBAAAF,GAKA5oE,KAAAgU,SAAA+0D,aAKA7pE,MAAA8I,GAAAqmD,aAAArnD,KAAA,aAAA,IAAAhH,KAAAgpE,eAAA,IAEAhpE,KAAA0c,YAAAxd,MAAA8I,GAAAqmD,aAAA,SAAA,oBAEAruD,KAAAgU,SAAAi1D,mBACAjpE,KAAAkpE,0BACAlpE,KAAAgU,SAAAm1D,UAAAnpE,KAAAgU,SAAAo1D,mBACAppE,KAAAqpE,eACArpE,KAAAgU,SAAAs1D,iBAEAtpE,KAAA0c,YAAAxd,MAAA8I,GAAAqmD,aAAA,sBAAAh1C,IACAA,EAAAo4C,eACAp4C,EAAAqM,iBACA1lB,KAAAupE,cACAvpE,KAAAqoB,eAAAnpB,MAAA8I,GAAAqmD,aAAA,0BAKAnvD,MAAAsqE,gBACAxpE,KAAAypE,mBAGAzpE,KAAA0c,YAAA1c,KAAAinE,YAAA,QAAA,KACAjnE,KAAA0pE,cAAA1pE,KAAAinE,iBAIAwC,iBAAA,WACAzpE,KAAA6nE,qBAAA7nE,KAAA8nE,WAAA,IAAA5oE,MAAAsqE,iBAIAxpE,KAAA6nE,qBAAA,EAEA7nE,KAAA0c,YAAAtX,QAAAsN,KAAA,4DAAA,SAAA2G,GACA1a,EAAA0a,EAAA6c,QAAApF,GAAA9wB,KAAA2pE,iBAGArkD,aAAAtlB,KAAA0+B,SAEA,CAAA,WAAA,QAAA,UAAAtvB,SAAAiK,EAAA9X,MACAvB,KAAA0+B,QAAAnZ,WAAAvlB,KAAA28B,UAAAxgB,KAAAnc,MAAA,KAEAA,KAAA28B,kBAKAitC,wBAAA,WACA5pE,KAAA6nE,sBAIA7nE,KAAAqoB,eAAAjjB,QAAAsN,KAAA,4DACA4S,aAAAtlB,KAAA0+B,SACA1+B,KAAA6nE,qBAAA,IAGAptC,MAAA,WACAz6B,KAAA8nE,aACA9nE,KAAA4pE,2BAGAjvC,OAAA,WACA,GAAA,IAAA36B,KAAA8nE,WACA,KAAA,mEAKA9nE,KAAA8nE,aACA,IAAA9nE,KAAA8nE,aACA5oE,MAAAsqE,gBACAxpE,KAAA28B,YAEA38B,KAAAypE,qBAIAP,wBAAA,WACA,IAAA75C,EAAA1wB,EAAA,oBACA0wB,EAAA/uB,SACA+uB,EAAArvB,KAAA8mE,aAAA9/D,KAAA,WAAAhH,KAAA8mE,aAAA9/D,KAAA,WAAAyd,KAAA7R,WAAAgD,KAAA,oBAAA,MAEAyZ,GAAAA,EAAA/uB,QACAN,KAAA0c,YAAA2S,EAAA,QAAA,KACAxY,QAAA3X,MAAAS,EAAA,MAAA,oDACAT,MAAA0X,WAAA1X,MAAA8I,GAAAqmD,aAAA,CACAtnD,OAAA/G,KAAAgU,SAAA61D,kBACA/yD,SAAA9W,KAAAgU,SAAA81D,gBACAhqE,OAAA,CACAqpE,QAAAnpE,KAAAgU,SAAAm1D,QACAY,YAAA/pE,KAAAgU,SAAAi1D,yBAQAI,aAAA,WAEArpE,KAAAgqE,oBAEAhqE,KAAAgU,SAAAs1D,iBACAlkE,QAAA0Y,gBAAAC,iBAAA,CACAiC,QAAA5a,QAAA6a,MACAC,MAAA,EACAjd,KAAA,GACA,KACA/D,MAAA0X,WAAA1X,MAAA8I,GAAAqmD,aAAA,CACAtnD,OAAA/G,KAAAgU,SAAAi2D,mBACAnzD,SAAA9W,KAAAgU,SAAA81D,mBAEA,IAIAI,mBAAA,WACAlqE,KAAAqoB,eAAAroB,KAAAgnE,uBAAA,SACAhnE,KAAAgnE,uBAAAxvD,SAAA,CAAA8iB,QAAA,GAAA,OAAA,KACAt6B,KAAAgnE,uBAAA1sD,WAGA,MAAA6vD,EAAAxrE,EAAA,mBAAAqB,KAAAgU,SAAA8B,gBAIA,GAHA9V,KAAAsnE,gBAAA6C,EAAA7lD,SAGAtkB,KAAAgU,SAAA+0D,WAEA,YADA/oE,KAAAoqE,0BAAArP,QAAAsP,GAAArqE,KAAAsqE,uBAAAD,IAIAF,EAAAr4D,SAAA,UACA,MAAAy4D,EAAArrE,MAAAg1B,GAAAs2C,uBAAA,CACA30D,GAAA,UACAE,MAAA7W,MAAAS,EAAA,MAAA,WACAsF,KAAA,YACAq8C,aAAA6oB,GACAI,EAAA30D,KAAA,SAAAoV,IAAA,cAAA,QACAhrB,KAAAunE,mBAAAgD,EAAA30D,KAAA,gBAEA5V,KAAAgU,SAAA+0D,YACA/oE,KAAAyqE,WAAAF,GAIA,MAAAG,EAAA1qE,KAAAgU,SAAA22D,UAAAzrE,MAAA+N,SAAA,EAAAjN,KAAAgU,SAAAw0D,cACA,IACAxoE,KAAAgU,SAAA42D,eAAA,IAAA,GACAC,EAAApnE,mBAAA,kBAAAzD,KAAAgU,SAAA8B,WACA,KAAA9V,KAAAgU,SAAA42D,eAAA,IAAA,IAEA5qE,KAAAwnE,mBAAA2C,EAAAv0D,KAAA,gBACAwD,GAAA,SAAApZ,KAAA8qE,oBAAA3uD,KAAAnc,OAEAA,KAAAoqE,0BAAArP,QAAAsP,GAAArqE,KAAAsqE,uBAAAD,IAEA,IAAAU,EAAA,WAAAL,EACA,IAAA,IAAAhrE,EAAA,EAAAA,EAAAM,KAAAwnE,mBAAAlnE,OAAAZ,IAAA,CACA,MAAA2E,EAAArE,KAAAwnE,mBAAAr1D,GAAAzS,GAAAsH,KAAA,eAAA3C,OACA0mE,GAAA,IAAAtnE,mBAAAY,EAAA6J,KAAA,SAAA,IAAA7J,EAAAC,MAGApF,MAAA8I,GAAAqmD,aAAArnD,KAAA,yBACA9H,MAAA8I,GAAAqmD,aAAArnD,KAAA,0BAAAhI,QAAA6rE,EAAAE,IAGA/qE,KAAAgU,SAAAg3D,aAAAhrE,KAAAgU,SAAAg3D,YAAA1qE,QACAN,KAAAirE,uBAGAjrE,KAAAunE,mBAAAnuD,GAAA,SAAApZ,KAAAkrE,oBAAA/uD,KAAAnc,OACAA,KAAA8qE,uBAMAV,wBAAA,WACA,OAAAlrE,MAAAod,MAAAuI,OAAAwlD,GAAAA,EAAAx0D,IAAA7V,KAAAgU,SAAA8B,QAAA9V,KAAA0nE,QAAAt4D,SAAAi7D,EAAAx0D,MAGA40D,WAAA,SAAAU,GACA,MAAAlgD,EAAAkgD,EAAAlgD,SACAkgD,EACAngD,IAAA,WAAA,UACAC,OAAA,GACAzT,SAAA,CAAAyT,OAAAA,GAAA,OAAA,KACAkgD,EAAAngD,IAAA,CACAogD,SAAA,GACAngD,OAAA,QAKAogD,aAAA,SAAAF,GACAA,EAAAlgD,SACAkgD,EACAngD,IAAA,WAAA,UACAxT,SAAA,CAAAyT,OAAA,GAAA,OAAA,KACAkgD,EAAA7wD,YAIAwwD,oBAAA,WACA,IAAAQ,GAAA,EAAAC,GAAA,EACAvrE,KAAAwnE,mBAAAl0D,MAAA,WAOA,GANA3U,EAAAqB,MAAAgH,KAAA,eAAAoS,GAEAmyD,GAAA,EAEAD,GAAA,GAEAA,IAAAC,EACA,OAAA,KAGAD,EACAtrE,KAAAunE,mBAAAvgE,KAAA,eAAAwkE,QAAA,GACAD,EACAvrE,KAAAunE,mBAAAvgE,KAAA,eAAAykE,SAAA,GAEAzrE,KAAAunE,mBAAAvgE,KAAA,eAAA0kE,mBAAA,IAIAR,oBAAA,WACA,MAAAP,EAAA3qE,KAAAunE,mBAAAvgE,KAAA,eAAAoS,GACApZ,KAAAwnE,mBAAAl0D,MAAA,WACAq3D,EACAhsE,EAAAqB,MAAAgH,KAAA,eAAAwkE,QAAA,GAEA7sE,EAAAqB,MAAAgH,KAAA,eAAAykE,SAAA,OAKAnB,uBAAA,SAAAqB,GACA,MAAAR,EAAAjsE,MAAAg1B,GAAAs2C,uBAAA,CACA30D,GAAA,kBAAA81D,EAAA91D,GACAE,MAAA7W,MAAAS,EAAA,MAAA,qBAAA,CAAAgsE,KAAAA,EAAA1mE,OACAA,KAAA,kBAAA0mE,EAAA91D,MACAuD,IAAApZ,KAAAgU,SAAAw0D,aAAAtjE,eAAAymE,EAAA91D,KACA7V,KAAAgU,SAAAw0D,aAAAmD,EAAA91D,IAEAovD,WAAAjlE,KAAAgU,SAAA+0D,aASA,GANA/oE,KAAAynE,eACA0D,EAAA7pB,aAAAthD,KAAAynE,gBAEA0D,EAAA78D,SAAAtO,KAAAsnE,kBAGAtnE,KAAAgU,SAAA+0D,WAAA,CACAoC,EAAAr5D,SAAA,UACA,MAAA85D,EAAAT,EAAAv1D,KAAA,gBACAwD,GAAA,SAAApZ,KAAA8qE,oBAAA3uD,KAAAnc,OACAA,KAAAwnE,mBAAAxnE,KAAAwnE,mBAAA7qD,IAAAivD,GAKA,OAFA5rE,KAAAyqE,WAAAU,GAEAA,GAGAF,qBAAA,WACA,MAAAY,EAAA3sE,MAAAod,MAAAuI,OAAAwlD,IACArqE,KAAA0nE,QAAAt4D,SAAAi7D,EAAAx0D,KAAA7V,KAAAgU,SAAAg3D,YAAA57D,SAAAi7D,EAAAx0D,KAGA,IAAAg2D,EAAAvrE,OACA,OAGA,MAAAwrE,EAAA5sE,MAAAg1B,GAAA63C,aAAA,CACA7kE,QAAA,CACA,CAAA6O,MAAA7W,MAAAS,EAAA,MAAA,mBACAksE,EAAA1pE,IAAAkoE,IACA,CAAAt0D,MAAAs0D,EAAAplE,KAAAE,MAAAklE,EAAAx0D,SAGA/D,SAAA,aAEA9R,KAAAynE,eAAAvoE,MAAAg1B,GAAA4wC,YAAAgH,EAAA,IACAh6D,SAAA,cACAxD,SAAAtO,KAAAsnE,iBAEA,MAAA0E,EAAAF,EAAAl2D,KAAA,UAEAo2D,EAAA5yD,GAAA,SAAA,KACA,MAAAtD,EAAA5T,SAAA8pE,EAAA1nE,OACAqnE,EAAAzsE,MAAAod,MAAA1G,KAAAy0D,GAAAA,EAAAx0D,KAAAC,GAEA61D,IAIA3rE,KAAAsqE,uBAAAqB,GAEAK,EACA1nE,IAAA,IACAsR,KAAA,iBAAAE,OAAAwE,SAEA,OAAAta,KAAA2nE,aACA3nE,KAAA2nE,WAAA,IAGA3nE,KAAA0nE,QAAAxmE,KAAA4U,GACA9V,KAAA2nE,WAAAzmE,KAAA4U,GAGA,IAAAk2D,EAAAp2D,KAAA,UAAAtV,QACAN,KAAAqrE,aAAArrE,KAAAynE,mBAIAznE,KAAAyqE,WAAAzqE,KAAAynE,iBAGAiC,cAAA,SAAAxzC,GACA,IAAA+1C,EAEA,OAAAjsE,KAAA4R,OACAq6D,EAAA,MAAAjsE,KAAAksE,6BAEAD,EAAA,oBAAAjsE,KAAAmsE,yBAEAnsE,KAAA4R,OAAAtR,SACA2rE,GAAA,sBACAjsE,KAAA4R,OAAAzP,IAAAuI,GAAA,OAAAxL,MAAAiE,WAAAuH,WAAAjK,KAAA,IACA,UAIA,MAAA6a,EAAA,IAAAlW,QAAA+X,IAAA+Y,EAAA+1C,EAAA,CACAvuD,OAAA,WACApC,EAAAoP,cAQAwhD,oBAAA,WACA,OAAAlsE,KAAAgU,SAAAi1D,oBAAAjpE,KAAAgU,SAAAo1D,mBACAlqE,MAAAS,EAAA,MAAA,kCACAT,MAAAS,EAAA,MAAA,8BAMAwsE,iBAAA,WACA,OAAAnsE,KAAAgU,SAAAi1D,oBAAAjpE,KAAAgU,SAAAo1D,mBACAlqE,MAAAS,EAAA,MAAA,qCACAT,MAAAS,EAAA,MAAA,kCAGAysE,SAAA,WACA,OAAApsE,KAAAqoE,QACAroE,KAAAmb,SAAAwB,IAAA3c,KAAAqoE,QAAAltD,UACAnb,KAAAmb,UAGAwuD,YAAA,WACA,OAAA3pE,KAAAqoE,QACAroE,KAAAinE,YAAAtqD,IAAA3c,KAAAqoE,QAAApB,aACAjnE,KAAAinE,aAGA+C,kBAAA,WACAhqE,KAAAknE,aAAAvoE,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,gBACAC,MAAAlb,MAAAS,EAAA,MAAA,yBACA2O,SAAA3P,EAAA,sBACAqB,KAAA0c,YAAA1c,KAAAknE,aAAA,QAAA,gBAGA4B,gBAAA,SAAAF,GACAA,EAAA92D,SAAA,WAEA,MAAA4hB,EAAA/0B,EAAA,SAAA,CAAAwb,MAAA,SAAAqb,YAAAozC,GACA/2D,EAAAlT,EAAA,SAAA2P,SAAAolB,GAEA1zB,KAAAgU,SAAA00D,eAAA3N,QAAA7kC,IACA,MAAAnkB,EAAApT,EAAA,SAAA2P,SAAAuD,GACA0N,EAAA5gB,EAAA,OAAA,CACA0E,KAAA6yB,EAAAngB,QACAzH,SAAAyD,GACA/R,KAAA0c,YAAA6C,EAAA,QAAA,KACAvf,KAAA6oE,cAAA3yC,EAAA5wB,UAKA+mE,gBAAA,WACA,OAAA,IAAApjE,QAAA,CAAAC,EAAAC,KACAnJ,KAAAsoE,aACAp/D,EAAAlJ,KAAAsoE,cAIAppE,MAAA6J,kBAAA,OAAA,uBAAA,CACA/B,KAAA,CACA2M,YAAA3T,KAAAgU,SAAAL,YACA24D,SAAAtsE,KAAAgU,SAAAs4D,SACAx2D,OAAA9V,KAAAgU,SAAA8B,OACAqzD,QAAAnpE,KAAAgU,SAAAm1D,QACAJ,WAAA/oE,KAAAgU,SAAA+0D,WACAgB,YAAA/pE,KAAAgU,SAAAi1D,sBAEAx/D,KAAAgB,IACAzK,KAAAsoE,aAAA79D,EAAAzD,KAAAzG,MACA2I,EAAAlJ,KAAAsoE,gBACA5+D,MAAAP,MAIAojE,uBAAA,SAAAjnE,EAAAknE,GACA,OAAA,IAAAvjE,QAAA,CAAAC,EAAAC,KACA,MAAArJ,EAAA,IAEA0sE,GAAAxsE,KAAAgU,SAAAy4D,SAEA3sE,EAAA0sE,GAAA,mBAAAttE,MAAAsS,aAAA,KAGAxR,KAAAgU,SAAA04D,YACA5sE,EAAAZ,MAAAwtE,WAAA1sE,KAAAgU,SAAA04D,WAIA1sE,KAAAgU,SAAAy4D,OACAvjE,EAAAhK,MAAAyF,OAAAW,EAAAxF,IAIAE,KAAAqsE,kBAAA5iE,MAAA,SAAAlJ,GACAT,EAAAZ,MAAAytE,YAAApsE,EACA2I,EAAAhK,MAAAyF,OAAAW,EAAAxF,OACA4J,MAAAP,MAIA0/D,cAAA,SAAAvjE,GACAtF,KAAAusE,uBAAAjnE,GAAAmE,MAAA,SAAAnE,GACAuG,OAAA7K,KAAAsE,OAIAsnE,WAAA,WAIA,OAHA5sE,KAAAqoE,UACAroE,KAAAqoE,QAAA,IAAAnpE,MAAA2tE,QAAA7sE,OAEAA,KAAAqoE,SAGAyE,YAAA,WACA,OAAA,IAAA7jE,QAAA,CAAAC,EAAAC,KACAnJ,KAAAooE,gBAAA,EACApoE,KAAA+sE,yBAAA,GACAtjE,KAAA,KACAzJ,KAAA4sE,aAAA5rE,OACAhB,KAAAooE,gBAAA,EACAl/D,MAEAQ,MAAAP,MAIA4jE,wBAAA,SAAAC,GACA,OAAA,IAAA/jE,QAAA,CAAAC,EAAAC,KACA,GAAAnJ,KAAAgU,SAAAm1D,SAAAnpE,KAAAgU,SAAA+0D,WAaA7/D,QAbA,CACA,GACA8jE,GACAhtE,KAAAgpE,eAAA,KAAA9pE,MAAA8I,GAAAqmD,aAAArnD,KAAA,0BAGA,YADAkC,IAIAlJ,KAAAupE,cACA9/D,KAAAP,GACAQ,MAAAP,OAOA6/D,cAAA,SAAAiE,GACA,IAAAjmE,EAAA9H,MAAA8I,GAAAqmD,aAAAnvC,YAaA,OAXAlf,KAAAktE,oBAEAlmE,EAAAA,EAAAhI,QAAA,uBAAAgB,KAAAqoE,QAAA8E,QAAAjuD,cAGA+tD,IAAAjtE,KAAAgU,SAAAo1D,qBAEApiE,EAAAA,EAAAhI,QAAA,gBAAA,IACAgI,EAAAA,EAAAhI,QAAA,kBAAA,KAGAgI,GAGA21B,UAAA,SAAAzO,GAEA,GAAAluB,KAAAgU,SAAA+0D,YAAA/oE,KAAA8nE,WAAA,EACA,OAEAxiD,aAAAtlB,KAAA0+B,SACA1+B,KAAA0+B,QAAA,KAGA,MAAA13B,EAAAhH,KAAAgpE,eAAA,GACA,GAAA96C,GAAAlnB,KAAAhH,KAAA4nE,qBAAA1oE,MAAA8I,GAAAqmD,aAAArnD,KAAA,2BAAA,CACA,MAAA+iE,IAAA/pE,KAAAgU,SAAAm1D,SAAAnpE,KAAAgU,SAAAi1D,sBAAAjpE,KAAAgU,SAAA+0D,WACA/oE,KAAAotE,UAAApmE,EAAA+iE,KAIAmD,gBAAA,WACA,OAAAltE,KAAAqoE,SAAAroE,KAAAqoE,QAAAgF,UAGA9D,YAAA,WACA,OAAA,IAAAtgE,QAAA,CAAAC,EAAAC,KACAnJ,KAAAotE,UAAAptE,KAAAgpE,eAAA,IACAv/D,KAAAP,GACAQ,MAAAP,MAQAikE,UAAA,SAAApmE,GACA,OAAA,IAAAiC,QAAA,CAAAC,EAAAC,KAEA,GAAAnJ,KAAAkoE,eAEA,YADA/+D,IAIA,GAAAnJ,KAAA+nE,OAIA,YAHA/nE,KAAAioE,MAAA/mE,KAAA,KACAlB,KAAA28B,cAKA38B,KAAA4nE,oBAAA5gE,EACAhH,KAAA+nE,QAAA,EACA,MAAAuF,EAAAttE,KAAAosE,WAAAh2D,YAAA,UACAm3D,EAAAvtE,KAAA2pE,cACAnyD,SAAA,QACAwT,IAAA,UAAA,IACA5U,YAAA,gDACAtE,SAAA,UACA9R,KAAAqnE,cACArnE,KAAAqnE,aAAAv1D,SAAA,UAEA9R,KAAA4R,OAAA,KAEA,MAAAtM,EAAApG,MAAAmH,aAAArG,KAAAgU,SAAAw5D,iBACA,IAAAC,EAAAztE,KAAA0tE,YAAA1mE,IAGAhH,KAAAgU,SAAAi1D,oBAAAjpE,KAAAgU,SAAAm1D,UACAsE,GAAA,kBAGAztE,KAAAgoE,QAAA9oE,MAAA4H,kBAAAxB,EAAAmoE,EAAA,CAAAhjE,EAAA5C,KAOA,GANAylE,EAAAx7D,SAAA,UACA9R,KAAAqnE,cACArnE,KAAAqnE,aAAAjxD,YAAA,UAEApW,KAAA+nE,QAAA,EAEA,UAAAlgE,EACA,OAGA,GAAA,YAAAA,GAAA4C,EAAAmH,OASA,OARA5R,KAAA4R,QAAAnH,EAAAA,EAAAmH,OAAA,OAAA,GACA27D,EACA/1D,SAAA,QACAwT,IAAA,UAAA,IACA5U,YAAA,yBACAtE,SAAA,cACA5D,KAAA,QAAAlO,KAAAmsE,yBACAhjE,IAIA,MAAAo/D,GAAAvoE,KAAAgU,SAAAm1D,QAEAZ,IACAvoE,KAAAgU,SAAAi1D,oBAAA,EACAjpE,KAAAuoE,yBAAA,GAGA99D,EAAA2P,OACAzb,EAAA,cAAA0E,KAAAoH,EAAA2P,OAGA3P,EAAAkjE,WACAnnE,SAAA4T,MAAA3P,EAAAkjE,UAGA3tE,KAAAgU,SAAAi1D,mBACAV,GACAvoE,KAAA+mE,eAAA10D,OACA1T,EAAA,UAAA,CACAwb,MAAA,aACA9W,KAAA,MAAAnE,MAAAS,EAAA,MAAA,cAKAK,KAAA+mE,eAAA1jE,KAAAoH,EAAAmjE,WACA5tE,KAAAgU,SAAA45D,UAAAnjE,EAAAmjE,WAGA,IAAAC,EAAA7tE,KAAA8mE,aAAA9/D,KAAA,WAAAhH,KAAA8mE,aAAA9/D,KAAA,WAAAyd,KAAA,KAqBA,GAlBAzkB,KAAA2nE,aAEAkG,IACA7tE,KAAA8mE,aAAA1wD,YAAA,YAAAtE,SAAA,WACA,IAAA1M,QAAAyU,QAAA7Z,KAAA8mE,cACA+G,EAAA7tE,KAAA8mE,aAAA9/D,KAAA,WAAAyd,KACAopD,EAAAj7D,WAAAwD,YAAA,WAEApW,KAAA2nE,WAAA5M,QAAAjlD,IACA,MAAA6O,EAAAkpD,EAAAjpD,SAAAC,OAAA,iBAAA/O,MACA6O,EAAA/O,KAAA,WAAAQ,YAAA,YAAAtE,SAAA,WACA6S,EAAAL,SAAAlO,YAAA,UACAqD,QAAA,eAAArD,YAAA,YAEAy3D,EAAAj7D,WAAAgD,KAAA,gBAAAQ,YAAA,UACApW,KAAA2nE,WAAA,MAGA3nE,KAAAgU,SAAAi1D,oBACA,GAAAV,EAAA,CAEA5pE,EAAA,WAAAuP,KAAA,QAAAlO,KAAAgU,SAAAi2D,oBAGAjqE,KAAAgU,SAAAm1D,QAAA1+D,EAAA0+D,QACAnpE,KAAAgU,SAAAy4D,QAAA,EACAzsE,KAAAsoE,aAAA,KAEAuF,GAEAA,EAAAj7D,WAAAgD,KAAA,qBAAAvD,OACA1T,EAAA,SAAA,CACAwb,MAAA,gBACA9H,OACA1T,EAAA,OAAA,CACA0E,KAAAnE,MAAAS,EAAA,MAAA,oCAEA0S,OACA1T,EAAA,YAAA,CACAkX,GAAA,kBACAsE,MAAA,MACA9W,KAAAnE,MAAAS,EAAA,MAAA,uBAMAK,KAAAkpE,gCAEA2E,IACAA,EAAAjpD,SAAAC,OAAA,QAAAjP,KAAA,eAAAvS,KAAAoH,EAAAmjE,WACAC,EAAAjpD,SAAAC,OAAA,QAAAjP,KAAA,eAAAvS,KAAAoH,EAAAqjE,QACA5uE,MAAAS,EAAA,MAAA,iCAAA,CACAouE,UAAAtjE,EAAAsjE,UACAD,QAAArjE,EAAAqjE,UAEA5uE,MAAAS,EAAA,MAAA,oBAAA,CACAouE,UAAAtjE,EAAAsjE,cAOAtjE,EAAAi+D,gBACAthE,KAAAC,UAAAoD,EAAAi+D,kBAAAthE,KAAAC,UAAArH,KAAAgU,SAAA00D,iBAEA1oE,KAAAguE,qBAAAvjE,EAAAi+D,gBAGA1oE,KAAAiuE,YAAAjnE,GAEAuhE,GACAvoE,KAAAiX,QAAA,0BAGAjX,KAAAonE,gBACApnE,KAAAkuE,kBAGA,IAAA,MAAAC,KAAA1jE,EAAA09D,mBACAgG,GAAAnuE,KAAAgU,SAAAs4D,UAAA7hE,EAAA09D,mBAAAjjE,eAAAipE,KACAnuE,KAAAmoE,mBAAAgG,GAAA1jE,EAAA09D,mBAAAgG,IAIAjlE,SASAwkE,YAAA,SAAA1mE,GAEAA,EAAAhH,KAAAouE,yBAAApnE,GAGAhH,KAAAgU,SAAAm1D,UACAniE,GAAA,YAAAhH,KAAAgU,SAAAm1D,QACAnpE,KAAAgU,SAAAi1D,qBACAjiE,GAAA,mBAIA,OAAAhH,KAAAgU,SAAA45D,YACA5mE,GAAA,cAAAhH,KAAAgU,SAAA45D,WAIA,MAAA7yD,EAAA/a,KAAAouE,yBAAAlvE,MAAA8I,GAAAqmD,aAAArnD,KAAA,2BACA,OAAA9H,MAAAmN,cAAA0O,EAAA/T,EAAAhH,KAAAquE,kBAOAD,yBAAA,SAAApnE,GACA,MAAAsnE,EAAA5lE,OAAAC,KAAA3I,KAAAmoE,oBAAA1nE,KAAA,KACA,GAAA,KAAA6tE,EACA,OAAAtnE,EAEA,MAAA0wC,EAAAj0C,mBAAA,KACAk0C,EAAAl0C,mBAAA,KAEA,KACAuD,KACAA,EAAAA,EAEAhI,QAAA,IAAAkF,OAAA,WAAAwzC,SAAAC,IAAAD,MAAA42B,MAAA32B,KAAA,KAAA,CAAA9pC,EAAA0gE,EAAA14D,EAAA24D,IACAD,EAAAvuE,KAAAmoE,mBAAAtyD,GAAA24D,GAGAxvE,QAAA,IAAAkF,OAAA,WAAAwzC,YAAA42B,QAAA,KAAA,CAAAzgE,EAAA0gE,EAAA14D,IACA04D,EAAAvuE,KAAAmoE,mBAAAtyD,OAMA,OAAA7O,GAGAqnE,cAAA,WACA,MAAA7hE,EAAAtN,MAAAsN,WAAAzL,MAAA,GACA,IAAA,IAAArB,EAAA,EAAAA,EAAA8M,EAAAlM,OAAAZ,IACA,IAAA,MAAAyuE,KAAAnuE,KAAAmoE,mBACAnoE,KAAAmoE,mBAAAjjE,eAAAipE,KACA3hE,EAAA9M,GAAA8M,EAAA9M,GAAAV,QAAA,KAAAmvE,EAAA,IAAA,KAAAnuE,KAAAmoE,mBAAAgG,GAAA,MAIA,OAAA3hE,GAGAwhE,qBAAA,SAAAtF,GACAA,EAAA3N,QAAA0T,IACA,MAAAl1D,EAAAvZ,KAAAgU,SAAA00D,eAAA9yD,KAAAjW,GAAAA,EAAAoW,QAAA04D,EAAA14D,OACAwD,IACAA,EAAAjU,IAAAmpE,EAAAnpE,QAKA2oE,YAAA,SAAAjnE,GACA9H,MAAA8I,GAAAqmD,aAAArnD,KAAA,yBAAAA,GACA9H,MAAAwO,mBAAA,GACA,MAAA6/D,EAAAvtE,KAAA2pE,cACAnyD,SAAA,QACAwT,IAAA,UAAA,IACA5U,YAAA,UACAtE,SAAA,kBACA5D,KAAA,QAAAlO,KAAAksE,uBAEAhtE,MAAAsqE,gBAEA+D,EACA/1D,SAAA,QACAA,SAAA,CACA8iB,QAAA,GACA,CACAg2B,MAAA,IACAh5C,SAAA,KACAi2D,EAAAz7D,SAAA,aAKA9R,KAAAiX,QAAA,UAEAjX,KAAA0uE,eAGAA,YAAA,WACA1uE,KAAAioE,MAAA3nE,QACAN,KAAAioE,MAAAjlE,OAAAhD,IAIA2uE,YAAA,WACA3uE,KAAAmnE,QAIAnnE,KAAAmnE,QAAAtsC,QAHA76B,KAAA4uE,gBACA5uE,KAAA6uE,iBAKAzpE,QAAAugB,iBAAA,IACA3lB,KAAAonE,eAAAnwD,QAAA,UAIA23D,cAAA,WACA,MAAAE,EAAAnwE,EAAA,UAGAowE,EAAApwE,EAAA,mEAAAO,MAAAS,EAAA,MAAA,cAAA,wBAAA2O,SAAAwgE,GACAE,EAAArwE,EAAA,wBAAA2P,SAAAygE,GACA/uE,KAAAonE,eAAAzoE,EAAA,+DAAA2P,SAAA0gE,GAAA1qE,IAAAtE,KAAAgU,SAAA45D,WAGA,MAAA9wD,EAAAne,EAAA,8CAAA2P,SAAAwgE,GAEAnwE,EAAA,iCAAA2P,SAAAwO,GACA9c,KAAAqnE,aAAA1oE,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,sBACA9W,KAAAnE,MAAAS,EAAA,MAAA,UACA2O,SAAAwO,GAEA9c,KAAAmnE,QAAA,IAAA/hE,QAAA+X,IAAAnd,KAAAknE,aAAA4H,EAAA,CACAlxD,SAAA5d,KAAAivE,SAAA9yD,KAAAnc,QAGAA,KAAA0c,YAAA1c,KAAAonE,eAAA,QAAA,mBAEApnE,KAAAmnE,QAAA/tD,GAAA,OAAApZ,KAAA6uE,cAAA1yD,KAAAnc,OACAA,KAAAmnE,QAAA/tD,GAAA,OAAApZ,KAAAkvE,cAAA/yD,KAAAnc,OACAA,KAAAmnE,QAAA/tD,GAAA,SAAApZ,KAAAmvE,gBAAAhzD,KAAAnc,QAGA6uE,cAAA,WACA7uE,KAAAknE,aAAAp1D,SAAA,WAGAo9D,cAAA,WACAlvE,KAAAknE,aAAA9wD,YAAA,WAGA+4D,gBAAA,WACAnvE,KAAAonE,eAAA9iE,IAAAtE,KAAAgU,SAAA45D,YAGAM,gBAAA,WACA,OACAluE,KAAAonE,eAAA9iE,OACAtE,KAAAonE,eAAA9iE,QAAAtE,KAAAgU,SAAA45D,WAEA5tE,KAAAqnE,aAAAjxD,YAAA,aACA,IAGApW,KAAAqnE,aAAAv1D,SAAA,aACA,IAGAs9D,aAAA,WACAhqE,QAAA0a,MAAA9f,KAAAmnE,QAAAhpD,OAGA8wD,SAAA,WACAjvE,KAAAkuE,mBAKAluE,KAAAgU,SAAA45D,UAAA5tE,KAAAonE,eAAA9iE,MAEAtE,KAAAmnE,QAAA9oD,OACAre,KAAA28B,WAAA,IAPA38B,KAAAovE,gBAUAC,iBAAA,SAAAh2D,GAIA,GAHAA,EAAAqM,iBAGA1lB,KAAAkoE,eACA,OAKA,GACAloE,KAAAgU,SAAAm1D,UACAnpE,KAAAgU,SAAAi1D,0BACA,IAAA5vD,EAAAi2D,UAAAj2D,EAAAi2D,YACAj2D,EAAAo4C,cAAAp4C,EAAAK,eAAAL,EAAAK,cAAA1S,KAAA,YAAAhH,KAAAgU,SAAAw5D,iBAGA,YADAxtE,KAAA28B,WAAA,GAKAz9B,MAAA8I,GAAAmnD,oBAAAjwD,MAAA8I,GAAAmnD,oBAAAj1B,IAAAh7B,MAAA8I,GAAAqmD,cAGAruD,KAAA+nE,QACA/nE,KAAAgoE,QAAAuH,QAIA,MAAAvoE,EAAAhH,KAAA0tE,YAAA1tE,KAAAgpE,eAAA,IACA/6D,EAAA/O,MAAA8O,WAAAhH,GAEAiH,EAAAK,SAAAlJ,QAAAsN,MACAzE,EAAAkjD,SACAnxD,KAAAkoE,gBAAA,IAEA,CACA1sD,SAAA,CACA7H,YAAA,KACA24D,SAAA,KACAx2D,OAAA,KACAszD,oBAAA,EACAuB,SAAA,EACAC,gBAAA,EACA6B,QAAA,EACAxD,oBAAA,EACAT,aAAA,KACAwC,YAAA,GACAxrD,UAAA,KACA2pD,QAAA,KACAJ,WAAA,KACA6E,UAAA,KACAnF,sBAAA,EACAa,iBAAA,EACAkE,gBAAA,KACA3D,kBAAA,KACAI,mBAAA,KACAH,gBAAA,KACA0F,4BAAA,KACA7G,eAAA,EACAD,eAAA,GACAgE,UAAA,QCpiCAxtE,MAAAuwE,iBAAAvwE,MAAAs/B,mBAAAv/B,OAAA,CACAgI,SAAAtI,EAAA0hB,KAEA9E,KAAA,SAAA8K,EAAA6P,EAAAjvB,GACAjH,KAAAiH,SAAAA,EACAjH,KAAA4vB,KAAAvJ,EAAA6P,IAGAoJ,oBAAA,SAAAF,GACA,OAAAp/B,KAAAiH,SAAAm4B,MCTAlgC,MAAAwwE,cAAAtqE,QAAAyV,KAAA5b,OAAA,CACAqhB,aAAA,EAEAzK,GAAA,KACA85D,SAAA,KACA9U,QAAA,KACAh7B,OAAA,KACA+vC,WAAA,EAEA7vC,OAAA,KACA9C,OAAA,KACA4yC,WAAA,KAEAC,SAAA,EACAC,YAAA,EACAC,YAAA,EAEAC,gBAAA,KAEA10D,KAAA,SAAA1F,EAAA85D,EAAA9U,EAAA7mD,GA+BA,GA9BAhU,KAAA6V,GAAAA,EACA7V,KAAA2vE,SAAAA,EACA3vE,KAAA66D,QAAAA,EACA76D,KAAA8Y,YAAA9E,EAAA9U,MAAAwwE,cAAAl0D,UACAxb,KAAAiwE,gBAAA,GAEAjwE,KAAA+/B,OAAAphC,EAAA,IAAAkX,GACA7V,KAAAi9B,OAAAj9B,KAAA+/B,OAAA7lB,SAAA,SACAla,KAAA8vE,SAAA9vE,KAAAi9B,OAAArnB,KAAA,MAAAtV,OAGAN,KAAA+/B,OAAA/4B,KAAA,oBACA5B,QAAA8qE,IAAA,wDACAlwE,KAAA+/B,OAAA/4B,KAAA,kBAAA0jB,WAGA1qB,KAAA+/B,OAAA/4B,KAAA,iBAAAhH,MAEAA,KAAA6/B,OAAA,IAAA3gC,MAAAmhC,gBAAArgC,KAAA+/B,OAAA,CACA6lC,YAAA,0BACAuK,gCAAA,IAGAnwE,KAAAowE,YACApwE,KAAAqwE,aAGA9qD,WAAAvlB,KAAAswE,oBAAAn0D,KAAAnc,MAAA,KAGAA,KAAAgU,SAAAu8D,SAAAvwE,KAAA8vE,SAAA9vE,KAAAgU,SAAAu8D,QACA,IAAA,IAAA7wE,EAAAM,KAAA8vE,SAAApwE,EAAAM,KAAAgU,SAAAu8D,QAAA7wE,IACAM,KAAAwgC,UAKA4vC,UAAA,WACA,OAAApwE,KAAA+/B,OAAAzb,SAAA2G,SAAA,GAGAolD,WAAA,WACA,GAAArwE,KAAAsgB,YACA,OAAA,EAGAtgB,KAAAsgB,aAAA,EACAtgB,KAAAqoB,eAAAjjB,QAAA6xB,KAAA,UAIA,IAFA,IAAAsuC,EAAAvlE,KAAAi9B,OAAA/iB,WAEAxa,EAAA,EAAAA,EAAA6lE,EAAAjlE,OAAAZ,IACAM,KAAAwwE,aAAAjL,EAAA7lE,IAMA,OAHAM,KAAA6vE,WAAA7vE,KAAA+/B,OAAApmB,KAAA,QACA3Z,KAAAywE,qBACAzwE,KAAA0c,YAAA1c,KAAA6vE,WAAA,WAAA,WACA,GAEAS,oBAAA,WACAtwE,KAAAqoB,eAAAjjB,QAAA6xB,KAAA,UAEAj3B,KAAAowE,YACApwE,KAAAqwE,aAEArwE,KAAA0c,YAAAtX,QAAA6xB,KAAA,SAAA,wBAGAw5C,mBAAA,WACAzwE,KAAA0wE,aAIA1wE,KAAA6vE,WAAA7kD,IAAA,UAAA,KACAhrB,KAAA6vE,WAAA7kD,IAAA,iBAAA,UAJAhrB,KAAA6vE,WAAA7kD,IAAA,UAAA,OACAhrB,KAAA6vE,WAAA7kD,IAAA,iBAAA,UAMA2lD,aAAA,WACA,OAAA3wE,KAAA8vE,SAAA9vE,KAAAgU,SAAAu8D,SAEAK,UAAA,SAAAnwC,GACAzgC,KAAA2wE,iBAIA3wE,KAAA6/B,OAAAzX,YAAAqY,EAAAowC,KACApwC,EAAAowC,IAAAv2D,SAEAta,KAAA8vE,WAEA9vE,KAAAywE,qBACA,IAAAzwE,KAAA8vE,UACA9vE,KAAA+/B,OAAAjuB,SAAA,UAIA9R,KAAAgU,SAAA88D,YAAArwC,EAAAowC,KAEApwC,EAAA/V,YAEAgmD,UAAA,WACA,OAAA1wE,KAAAgU,SAAA+8D,cAIA/wE,KAAAgU,SAAAg9D,SACAhxE,KAAA8vE,SAAA9vE,KAAAgU,SAAAg9D,UAKAxwC,OAAA,SAAAhmB,EAAA0hB,GACA,GAAAl8B,KAAA0wE,YAAA,CAIA,IAAAO,EAAAjxE,KAAAgU,SAAAk9D,aAAAlxE,KAAA4vE,UAAA,GACAiB,EAAA7wE,KAAAmxE,UAAAF,EAAAjxE,KAAA66D,QAAA76D,KAAA2vE,SAAAhxE,EAAAM,OAAA,GAAAe,KAAAgU,SAAAo9D,gBAEAl1C,EACA20C,EAAAjoD,UAAA5oB,KAAAi9B,QAEA4zC,EAAAviE,SAAAtO,KAAAi9B,QAGA,IAAAwD,EAAAzgC,KAAAwwE,aAAAK,GAeA,OAdA7wE,KAAA6/B,OAAAjY,SAAAipD,IAGA,IAAAr2D,GACAq2D,EAAAj7D,KAAA,iDAAA2E,QAAAtD,QAAA,SAGAjX,KAAA8vE,WACA9vE,KAAAywE,qBACAzwE,KAAA+/B,OAAA3pB,YAAA,UAGApW,KAAAgU,SAAAq9D,SAAAR,GAEApwC,IAGA0wC,UAAA,SAAAF,EAAApW,EAAA8U,EAAAthE,GACA,OAAAnP,MAAAwwE,cAAAyB,UAAAF,EAAApW,EAAA8U,EAAAthE,IAGAmiE,aAAA,SAAAK,GACA,OAAA,IAAA3xE,MAAAwwE,cAAA4B,IAAAtxE,KAAA6wE,IAGAU,eAAA,SAAAV,EAAAW,EAAAC,GACA,IACAC,EADAC,EAAAd,EAAAz/C,KAAA,MAUA,IANAsgD,EADAC,EAAArxE,OACAqxE,EAAA3qE,KAAA,sBAEAhH,KAAAwgC,QAAA,GAAA,KAQAkxC,EAAAE,KAAAJ,GAIA,GAAA7yE,EAAA+yE,EAAAE,KAAAJ,IAAA77D,SAAA,YACAg8D,GACA3xE,KAAAuxE,eAAAI,EAAAH,EAAAC,OAFA,CAOA,IAAAptE,EAAA1F,EAAA,sBAAA+yE,EAAAE,KAAAJ,IACAntE,EAAA/D,SACA3B,EAAA8yE,GAAAx6D,QAAA,QACA5S,EAAA4S,QAAA,YAIA46D,eAAA,SAAAhB,EAAAW,EAAAC,GACA,IACAK,EADAC,EAAAlB,EAAAl3D,KAAA,MAUA,IANAm4D,EADAC,EAAAzxE,OACAyxE,EAAA/qE,KAAA,sBAEAhH,KAAAwgC,QAAA,KAQAsxC,EAAAF,KAAAJ,GAIA,GAAA7yE,EAAAmzE,EAAAF,KAAAJ,IAAA77D,SAAA,YACAo8D,GACA/xE,KAAA6xE,eAAAE,EAAAP,EAAAC,OAFA,CAOA,IAAAptE,EAAA1F,EAAA,sBAAAmzE,EAAAF,KAAAJ,IACAntE,EAAA/D,SACA3B,EAAA8yE,GAAAx6D,QAAA,QACA5S,EAAA4S,QAAA,YAIA+6D,WAAA,SAAAhrE,EAAAy5B,EAAA+wC,GACA,IAAAS,EAAAjrE,EAAA7F,MAAA,YACA,IAAA,IAAAzB,EAAA,EAAAA,EAAAuyE,EAAA3xE,OAAAZ,IAAA,CACA,IAAA2O,EAAA4jE,EAAAvyE,GAAAyB,MAAA,MACA,IAAA,IAAA60D,EAAA,EAAAA,EAAA3nD,EAAA/N,OAAA01D,IAAA,CACA,IAAA7wD,EAAAkJ,EAAA2nD,GACAv1B,EAAAmxC,KAAAz/D,GAAAq/D,EAAAxb,GAAApgD,KAAA,gCACAtR,IAAAa,GACA8R,QAAA,SAIA,IAAA86D,EAAAtxC,EAAAowC,IAAAl3D,KAAA,MAEA8mB,EADAsxC,EAAAzxE,OACAyxE,EAAA/qE,KAAA,sBAEAhH,KAAAwgC,QAAA,MAIA,CACA0xC,gBAAA,CAAA,QAAA,OAAA,QAAA,YAAA,SAAA,aAAA,WAAA,OAAA,OACA12D,SAAA,CACA01D,YAAA,GACAE,cAAA,GACAL,YAAA,EACAR,QAAA,KACAS,QAAA,KACAK,SAAA1yE,EAAA0hB,KACAywD,YAAAnyE,EAAA0hB,MAGA8wD,UAAA,SAAAF,EAAApW,EAAA8U,EAAAthE,GACA,IAAAwiE,EAAAlyE,EAAA,QAAA,CACAwzE,UAAAlB,IAGA,IAAA,IAAAmB,KAAAvX,EACA,GAAAA,EAAA31D,eAAAktE,GAAA,CAIA,IAEAC,EAFAC,EAAAzX,EAAAuX,GACAjtE,OAAA,IAAAkJ,EAAA+jE,GAAA/jE,EAAA+jE,GAAA,GAGA,GAAA,YAAAE,EAAA/wE,KACA8wE,EAAA1zE,EAAA,QAAA,CACA4zE,MAAA,MACAp4D,MAAAm4D,EAAA,MACAvzE,KAAAoG,QAEA,CACA,IAAAF,EAAA0qE,EAAA,IAAAsB,EAAA,KAAAmB,EAAA,IAeA,OAbAC,EAAA1zE,EAAA,QAAA,CACAwb,MAAA,GAAAm4D,EAAAn4D,SAAAm4D,EAAA/wE,YACAylC,MAAAsrC,EAAAtrC,QAGA9nC,MAAA+N,QAAAqlE,EAAA/wE,KAAArC,MAAAwwE,cAAAwC,kBACAG,EAAAvgE,SAAA,WAGAwgE,EAAAE,MACAH,EAAAvgE,SAAA,QAGAwgE,EAAA/wE,MACA,IAAA,WACA5C,EAAA,mCACA0T,OAAAnT,MAAAg1B,GAAA8wC,eAAA,CACA//D,KAAAA,EACAE,MAAAmtE,EAAAntE,OAAA,IACAs9C,UAAAt9C,KAGAmJ,SAAA+jE,GACA,MAEA,IAAA,QACAnzE,MAAAg1B,GAAAstC,iBAAA,CACAv8D,KAAAA,EACAE,MAAAA,EACAstE,OAAA,IACAnkE,SAAA+jE,GACA,MAEA,IAAA,OACAnzE,MAAAg1B,GAAAw+C,gBAAA,CACAztE,KAAAA,EACAE,MAAAA,IACAmJ,SAAA+jE,GACA,MAEA,IAAA,cACAnzE,MAAAg1B,GAAAy+C,kBAAA,CACA1tE,KAAAA,EACAE,MAAAmtE,EAAAntE,OAAA,IACAiU,KAAAjU,EACAstE,OAAA,IACAnkE,SAAA+jE,GACA,MAEA,IAAA,SACAnzE,MAAAg1B,GAAA63C,aAAA,CACA9mE,KAAAA,EACAiC,QAAAorE,EAAAprE,QACA/B,MAAAA,GAAA,WACA,IAAA,IAAA7F,KAAAgzE,EAAAprE,QACA,GAAAorE,EAAAprE,QAAAhC,eAAA5F,IAAAgzE,EAAAprE,QAAA5H,GAAAszE,QACA,YAAA,IAAAN,EAAAprE,QAAA5H,GAAA6F,MAAAmtE,EAAAprE,QAAA5H,GAAA6F,MAAA7F,EAGA,OAAA,KANA,GAQA6a,MAAA,UACA7L,SAAA+jE,GACA,MAEA,IAAA,OACAnzE,MAAAg1B,GAAA2+C,gBAAA,CACA5tE,KAAAA,EACAE,MAAAA,IACAmJ,SAAA+jE,GACA,MAEA,IAAA,QACA,IAAA,MACAnzE,MAAAg1B,GAAA4+C,gBAAA,CACA7tE,KAAAA,EACAE,MAAAA,EACA5D,KAAA+wE,EAAA/wE,KACAkzB,YAAA69C,EAAA79C,aAAA,OACAnmB,SAAA+jE,GACA,MAEA,QACA1zE,EAAA,cAAA,CACAsG,KAAAA,EACA61D,KAAAwX,EAAAxX,MAAA,EACAx2D,IAAAa,EACAsvB,YAAA69C,EAAA79C,cACAnmB,SAAA+jE,IAIAA,EAAA/jE,SAAAuiE,GAqBA,OAlBAlyE,EAAA,QAAA,CACAwb,MAAA,gBACA9H,OACA1T,EAAA,OAAA,CACAwb,MAAA,YACAC,MAAAlb,MAAAS,EAAA,MAAA,cAEA2O,SAAAuiE,GAEAlyE,EAAA,QAAA,CACAwb,MAAA,gBACA9H,OACA1T,EAAA,OAAA,CACAwb,MAAA,cACAC,MAAAlb,MAAAS,EAAA,MAAA,aAEA2O,SAAAuiE,GAEAA,KAOA3xE,MAAAwwE,cAAA4B,IAAAlsE,QAAAyV,KAAA5b,OAAA,CACAqmE,MAAA,KACAzvD,GAAA,KACAk9D,UAAA,KAEAlC,IAAA,KACAe,KAAA,KACAoB,IAAA,KACAC,WAAA,KACAryC,WAAA,KAEArlB,KAAA,SAAA+pD,EAAA4N,GACAlzE,KAAAslE,MAAAA,EACAtlE,KAAA6wE,IAAAlyE,EAAAu0E,GACAlzE,KAAA4xE,KAAA5xE,KAAA6wE,IAAA32D,WACAla,KAAAgzE,IAAA,GACAhzE,KAAA6V,GAAA7V,KAAA6wE,IAAA3iE,KAAA,WAEAlO,KAAA6wE,IAAA7pE,KAAA,qBAAAhH,MAGA,IAAA6V,EAAA3T,SAAAlC,KAAA6V,GAAAlU,OAAA3B,KAAAslE,MAAAtxD,SAAAk9D,YAAA5wE,SAEAuV,EAAA7V,KAAAslE,MAAAsK,YACA5vE,KAAAslE,MAAAsK,UAAA/5D,GAGA7V,KAAAizE,WAAAt0E,IACAqB,KAAA+yE,UAAA,GACA,IAGAX,EAAAE,EAAAa,EAAAC,EAAAC,EAHAC,EAAA,GAEA5zE,EAAA,EAGA,IAAA0yE,KAAApyE,KAAAslE,MAAAzK,QACA76D,KAAAslE,MAAAzK,QAAA31D,eAAAktE,KAIAE,EAAAtyE,KAAAslE,MAAAzK,QAAAuX,GACAe,EAAAnzE,KAAAgzE,IAAAZ,GAAApyE,KAAA4xE,KAAAlyE,GAEAR,MAAA+N,QAAAqlE,EAAA/wE,KAAArC,MAAAwwE,cAAAwC,kBACAkB,EAAAz0E,EAAA,WAAAw0E,GACAnzE,KAAAizE,WAAAjzE,KAAAizE,WAAAt2D,IAAAy2D,GAEApzE,KAAA0c,YAAA02D,EAAA,QAAA,mBACApzE,KAAA0c,YAAA02D,EAAA,YAAA,2BAEApzE,KAAA+yE,UAAA7xE,KAAA,IAAAkE,QAAA+T,SAAAi6D,EAAA,CACAG,eAAAvzE,KAAAwzE,uBAAAr3D,KAAAnc,SAGAA,KAAA0c,YAAA02D,EAAA,WAAA,CAAA5B,QAAA9xE,EAAA6B,KAAA+wE,EAAA/wE,MAAA,kBACAvB,KAAA0c,YAAA02D,EAAA,QAAA,CAAA7xE,KAAA+wE,EAAA/wE,MAAA,iBACA6xE,EAAAn8D,QAAA,SAEA,cAAAq7D,EAAA/wE,MACAvB,KAAA0c,YAAA02D,EAAA,QAAA,CAAA5B,QAAA9xE,EAAA6B,KAAA+wE,EAAA/wE,MAAA,eAGA+xE,EAAAlB,GAAAgB,GACA,aAAAd,EAAA/wE,OACA8xE,EAAA10E,EAAA,yBAAAw0E,GAEAb,EAAAmB,iBACA,IAAAzzE,KAAAslE,MAAA2K,gBAAAmC,KACApyE,KAAAslE,MAAA2K,gBAAAmC,GAAA,IAEApyE,KAAAslE,MAAA2K,gBAAAmC,GAAAlxE,KAAAmyE,EAAA,IACArzE,KAAA0c,YAAA22D,EAAA,SAAA,CAAAjB,MAAAA,GAAA,0BAGAE,EAAAoB,QACA1zE,KAAA0c,YAAA22D,EAAA,SAAA,CAAAjB,MAAAA,IAAA,SAAA/4D,GACArZ,KAAA2zE,oBAAAt6D,EAAArS,KAAAorE,WAKAzzE,EAAAw0E,GAAAx9D,SAAA,aACA3V,KAAA0c,YAAAy2D,EAAA,QAAA,CAAAA,GAAAA,IAAA,SAAA95D,GACAA,EAAA6c,SAAA7c,EAAArS,KAAAmsE,IACAx0E,EAAA0a,EAAArS,KAAAmsE,IAAAv9D,KAAA,sCAAA4E,WAKA9a,KAOA,IAAA0yE,KAHApyE,KAAAwzE,yBAGAxzE,KAAAslE,MAAAzK,QACA76D,KAAAslE,MAAAzK,QAAA31D,eAAAktE,IAIA,cADAE,EAAAtyE,KAAAslE,MAAAzK,QAAAuX,IACA7wE,MAAA+wE,EAAAoB,QACA1zE,KAAA2zE,oBAAAvB,GAKA,IAAAA,KAAApyE,KAAAslE,MAAAzK,QACA76D,KAAAslE,MAAAzK,QAAA31D,eAAAktE,KAIAE,EAAAtyE,KAAAslE,MAAAzK,QAAAuX,IAEAwB,mBAAA,IAAAN,EAAAhB,EAAAsB,gBAAAN,EAAAlB,GAAA9tE,OACA,IAAApF,MAAA20E,gBAAAP,EAAAlB,GAAAkB,EAAAhB,EAAAsB,cAAA,CACAE,oBAAA,IAKA,IAAAlzC,EAAA5gC,KAAA6wE,IAAA32D,WAAA8X,OAAApc,KAAA,WACA5V,KAAA0c,YAAAkkB,EAAA,QAAA,aAEA,IAAA7mB,EAAA/Z,KAAA6wE,IAAAj7D,KAAA,sCACA5V,KAAA0c,YAAA3C,EAAA,SAAA,SAAAV,GACA1a,EAAA0a,EAAAE,eAAAE,QAAA,qBAAA3H,SAAA,YAEA9R,KAAA0c,YAAA3C,EAAA,QAAA,SAAAV,GACA1a,EAAA0a,EAAAE,eAAAE,QAAA,MAAArD,YAAA,aAIA29D,gBAAA,SAAA16D,GACArZ,KAAAwzE,yBAEA,IAAAJ,EAAAz0E,EAAA0a,EAAAE,eAEA65D,EAAApsE,KAAA,mBACAosE,EAAApsE,KAAA,mBAAA,GAIAue,YAAA,WACArmB,MAAAiF,gBAAAivE,KACA,IAGAY,sBAAA,SAAA36D,GACA,GAAAA,EAAAE,cAAAkpC,QACA,IAAA,IAAA/iD,EAAA,EAAAA,EAAAM,KAAAslE,MAAA2K,gBAAA52D,EAAArS,KAAAorE,OAAA9xE,OAAAZ,IAAA,CACA,IAAAu0E,EAAAj0E,KAAAslE,MAAA2K,gBAAA52D,EAAArS,KAAAorE,OAAA1yE,GACAu0E,EAAAxxB,QAAAwxB,IAAA56D,EAAAE,gBAKAo6D,oBAAA,SAAAO,GAIA,IAHA,IAEA9B,EAAA+B,EAFAC,EAAAp0E,KAAAslE,MAAAzK,QAAAqZ,GACAzxB,EAAA9jD,EAAA,yBAAAqB,KAAAgzE,IAAAkB,IAAA/9C,KAAA,WAEAz2B,EAAA,EAAAA,EAAA00E,EAAAV,OAAApzE,OAAAZ,IACA0yE,EAAAgC,EAAAV,OAAAh0E,GACAM,KAAAslE,MAAA+O,OACAF,EAAA,MAAA/B,EAAA,MAEAA,EAAAA,EAAAzwE,OAAA,IAEA8gD,IAAA0xB,IAAA1xB,GAAA0xB,EACAx1E,EAAAqB,KAAAgzE,IAAAZ,IACAh8D,YAAA,YACAR,KAAA,mBAAAugB,KAAA,YAAA,GAEAx3B,EAAAqB,KAAAgzE,IAAAZ,IACAtgE,SAAA,YACA8D,KAAA,mBAAAugB,KAAA,YAAA,IAKAm+C,wBAAA,SAAAj7D,GACA1a,EAAAqI,KAAAqS,EAAAE,cAAA,mBAAA,IAGAg7D,eAAA,SAAAl7D,GACA,IAAA2G,EAAA3G,EAAA2G,QAAA3G,EAAA2G,QAAA3G,EAAAm7D,SACAt0D,EAAA9a,QAAAqvE,iBAAAp7D,GAGA,GAAA2G,IAAA5a,QAAAqgB,aAAA,cAAApM,EAAArS,KAAAzF,MAAA2e,GAOA,OANA7G,EAAAqM,sBACArM,EAAA2qC,SACAhkD,KAAAslE,MAAAiM,eAAAvxE,KAAA6wE,IAAAx3D,EAAArS,KAAAwqE,QAAAn4D,EAAAE,eAEAvZ,KAAAslE,MAAAuM,eAAA7xE,KAAA6wE,IAAAx3D,EAAArS,KAAAwqE,QAAAn4D,EAAAE,gBAMA,WAAAF,EAAArS,KAAAzF,MAAA2e,GAAAhhB,MAAA+N,QAAA+S,EAAA9gB,MAAAwwE,cAAA4B,IAAAoD,kBACAr7D,EAAAqM,kBAIAivD,YAAA,SAAAt7D,GACA,IAAArS,EAAA9H,MAAAmC,KAAAgY,EAAAk4C,cAAAqjB,cAAAC,QAAA,QAAA,SACA7tE,EAAArB,MAAA,cAGA0T,EAAAqM,iBACA1lB,KAAAslE,MAAA0M,WAAAhrE,EAAAhH,KAAAqZ,EAAArS,KAAAwqE,WAGAsD,cAAA,SAAAz7D,GACA,GAAA,cAAAA,EAAArS,KAAAzF,KAAA,CAIA,IAAAwzE,EAEA,GAAA,WAAA17D,EAAArS,KAAAzF,KAAA,CAEA,IAAAoE,EAAA0T,EAAAE,cAAApU,MAAAQ,MAAA,oBAGAovE,EADA,OAAApvE,EACAA,EAAA,GAEA,QAIAovE,EAAA17D,EAAAE,cAAApU,MAAAnG,QAAA,UAAA,IAGA+1E,IAAA17D,EAAAE,cAAApU,QACAkU,EAAAE,cAAApU,MAAA4vE,KAIAvB,uBAAA,WAIA,IAFA,IAAAwB,GAAA,EAEAt1E,EAAA,EAAAA,EAAAM,KAAA+yE,UAAAzyE,OAAAZ,IACAM,KAAA+yE,UAAArzE,GAAAurB,OAAA+pD,IACAA,EAAAh1E,KAAA+yE,UAAArzE,GAAAurB,QAIAjrB,KAAAizE,WAAAjoD,IAAA,aAAAgqD,GAGA,IAAAC,EAAAj1E,KAAAizE,WAAApuD,OAAA,YAAAtK,QAAA+J,SAAA2G,SAEAgqD,EAAAD,GACAh1E,KAAAizE,WAAAjoD,IAAA,aAAAiqD,IAIArE,UAAA,WACA5wE,KAAAslE,MAAAsL,UAAA5wE,QAEA,CACA00E,gBAAA,CAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,MCpqBAx1E,MAAAg2E,qBAAA9vE,QAAAyV,KAAA5b,OAAA,CACAk2E,UAAA,KACAC,YAAA,KACAC,SAAA,KACAtlD,eAAA,KACAulD,gBAAA,EAEA/5D,KAAA,SAAAvH,GACAhU,KAAA8Y,YAAA9E,EAAA9U,MAAAg2E,qBAAA15D,UAEAxb,KAAAq1E,SAAA12E,EAAA,IAAAqV,EAAAzS,KAAAvC,QAAA,aAAA,KAAA,kBAGAgB,KAAAgU,SAAAuhE,WAEAv1E,KAAAq1E,SAAAruE,KAAA,kBAAA,GAGA,SAAAhH,KAAAq1E,SAAAl/C,KAAA,YACAn2B,KAAA0c,YAAA1c,KAAAq1E,SAAA,SAAA,2BAEAr1E,KAAA0c,YAAA1c,KAAAq1E,SAAA,QAAA,4BAIAr1E,KAAAw1E,gBACAt2E,MAAAkhB,aAAAhH,GAAA,kBAAApZ,KAAAw1E,cAAAr5D,KAAAnc,QAGAw1E,cAAA,WAEA,IAAAt2E,MAAAkhB,aAAA8L,sBAAA5rB,SAIAN,KAAAy1E,oBACAz1E,KAAA01E,gBAEA11E,KAAA21E,mBASAF,kBAAA,WACA,IAAAG,GAAA,EASA,OARA51E,KAAA+vB,eAAA7wB,MAAAkhB,aAAA8L,uBAEAlsB,KAAAgU,SAAA6hE,OAAA71E,KAAA+vB,eAAAzvB,OAAA,EACAs1E,GAAA,EACA,mBAAA51E,KAAAgU,SAAAyhE,oBACAG,EAAA51E,KAAAgU,SAAAyhE,kBAAAz1E,KAAA+vB,iBAGA6lD,GAGAF,cAAA,WACA11E,KAAAs1E,iBAIAt1E,KAAAq1E,SAAAj/D,YAAA,YACApW,KAAAs1E,gBAAA,IAGAK,eAAA,WACA31E,KAAAs1E,iBAIAt1E,KAAAq1E,SAAAvjE,SAAA,YACA9R,KAAAs1E,gBAAA,IAGAQ,wBAAA,SAAAz8D,GACAA,EAAAqM,iBACArM,EAAA6X,kBAEAlxB,KAAAs1E,gBACAt1E,KAAAgU,SAAAuhE,SAAAv1E,KAAA+vB,kBAGA,CACAvU,SAAA,CACAja,KAAA,KACAs0E,OAAA,EACAJ,kBAAA,KACAF,SAAA,QC3FAr2E,MAAA02B,mBAAAxwB,QAAAyV,KAAA5b,OAAA,CACAgpE,MAAA,KACA8N,QAAA,GAEAx6D,KAAA,WACAvb,KAAAioE,MAAA,GAEA,IAAA,IAAAvoE,EAAA,EAAAA,EAAA,EAAAA,IACAM,KAAA+1E,QAAA70E,KAAA,IAAAhC,MAAA02B,mBAAAogD,OAAAh2E,QAIA61B,KAAA,SAAAnT,GAEA,IAAAuzD,EAAAvzD,EAAA9M,KAAA,iBACA,IAAA,IAAAlW,EAAA,EAAAA,EAAAu2E,EAAA31E,OAAAZ,IAAA,CACA,IAAAw2E,EAAAD,EAAA9jE,GAAAzS,GACAy2E,EAAAD,EAAAE,eACA,GAAAp2E,KAAAowE,UAAA8F,EAAAC,GACAn2E,KAAAq2E,WAAAH,EAAA,QACA,CACA,IAAA52E,EAAA,QAAAqR,KAAAC,MAAA,IAAAD,KAAAe,UACAxS,MAAA02B,mBAAA0gD,gBAAAh3E,GAAA,CAAAU,KAAAk2E,EAAAC,GACAA,EAAA/8D,GAAA,UAAA9Z,EAAA,CACA42E,OAAAA,EACAC,cAAAA,EACA72E,IAAAA,GACA+Z,IACArZ,KAAAowE,UAAA/2D,EAAArS,KAAAkvE,OAAA78D,EAAArS,KAAAmvE,wBACAj3E,MAAA02B,mBAAA0gD,gBAAAj9D,EAAArS,KAAA1H,KACA62E,EAAAx+C,IAAA,UAAAte,EAAArS,KAAA1H,KACAU,KAAAq2E,WAAAh9D,EAAArS,KAAAkvE,OAAA,UAOAG,WAAA,SAAAE,GACAv2E,KAAAioE,MAAA/mE,KAAAq1E,GAGA,IAAA,IAAA72E,EAAA,EAAAA,EAAAM,KAAA+1E,QAAAz1E,OAAAZ,IACAM,KAAA+1E,QAAAr2E,GAAA82E,QACAx2E,KAAA+1E,QAAAr2E,GAAA+2E,YAKArG,UAAA,SAAA8F,EAAAC,GACA,IACAO,EAAAC,EADAC,EAAAV,EAAAp0E,SAAAq1B,IASA,OAPAg/C,EAAA,KAAA3vE,UACAkwE,EAAAP,EAAAtrD,YACA8rD,EAAAvxE,QAAA6xB,KAAAhM,WAEAyrD,EAAAP,EAAAr0E,SAAAq1B,IACAw/C,EAAAR,EAAAlrD,UAEA2rD,EAAAF,GAAAE,EAAAF,EAAAC,EAAA,KAGAjsD,QAAA,WACA,IAAA,IAAAhrB,EAAA,EAAAA,EAAAM,KAAA+1E,QAAAz1E,OAAAZ,IACAM,KAAA+1E,QAAAr2E,GAAAgrB,UAGA1qB,KAAA4vB,SAEA,CACA0mD,gBAAA,GACAO,SAAA,WACA,IAAA,IAAAv3E,KAAAJ,MAAA02B,mBAAA0gD,gBAAA,CACA,IAAArO,EAAAiO,EAAAC,GAAAj3E,MAAA02B,mBAAA0gD,gBAAAh3E,UACAJ,MAAA02B,mBAAA0gD,gBAAAh3E,GACA62E,EAAAx+C,IAAA,UAAAr4B,GACA2oE,EAAApyC,KAAAqgD,EAAA5xD,cAKAplB,MAAA02B,mBAAAogD,OAAA5wE,QAAAyV,KAAA5b,OAAA,CACA63E,OAAA,KACAN,QAAA,EAEAj7D,KAAA,SAAAu7D,GACA92E,KAAA82E,OAAAA,GAGAL,SAAA,WACA,IAAAlhD,EAAAv1B,KAAA82E,OAAA7O,MAAAjlE,QACA,QAAA,IAAAuyB,EAAA,CAKAv1B,KAAAw2E,QAAA,EACA,IAAA5jE,EAAAjU,EAAA42B,GACA,GAAA3iB,EAAAgD,KAAA,OAAAtV,OACAN,KAAAy2E,eADA,CAIA,IAAAM,EAAAp4E,EAAA,SAAA,CACA4X,MAAA3D,EAAA1E,KAAA,cACAsI,OAAA5D,EAAA1E,KAAA,eACAjL,IAAA,KAEAjD,KAAA0c,YAAAq6D,EAAA,aAAA,YACAA,EAAAzoE,SAAAsE,GACA8D,YAAA,CACAC,SAAA,CAAAogE,EAAA,YAlBA/2E,KAAAw2E,QAAA,KC5FAt3E,MAAA83E,oBAAA5xE,QAAAyV,KAAA5b,OAAA,CACAgP,MAAA,KACAgpE,OAAA,KAEA17D,KAAA,SAAA27D,EAAAD,GAIA,GAHAj3E,KAAAiO,MAAAtP,EAAAu4E,QAGA,IAAAD,EAAA,CACAj3E,KAAAi3E,OAAA,GACAA,EAAAt4E,EAAAswB,UAAAgoD,GAEA,IAAA,IAAAv3E,EAAA,EAAAA,EAAAu3E,EAAA32E,OAAAZ,IAGA,IAFA,IAAAqa,EAAApb,EAAAs4E,EAAAv3E,IAEAs2D,EAAA,EAAAA,EAAAj8C,EAAAzZ,OAAA01D,IAAA,CACA,IAAA3xD,EAAA0V,EAAA5H,GAAA6jD,GAEAh2D,KAAAi3E,OAAA/1E,KAAA,CACAkD,MAAAC,EACAC,IAAAc,QAAA+xE,gBAAA9yE,MAMArE,KAAA0c,YAAA1c,KAAAiO,MAAA,SAAA,qBAGAohE,iBAAA,SAAAh2D,GAEA,GAAAna,MAAAk4E,uBAAAC,gBAGA,OAFAh+D,EAAAqM,sBACArM,EAAAi+D,2BAKA,GAAAt3E,KAAAi3E,OAAA,CAIA,IAHA,IACA5yE,EADAkzE,GAAA,EAGA73E,EAAA,EAAAA,EAAAM,KAAAi3E,OAAA32E,OAAAZ,IAQA,IAPA2E,EAAArE,KAAAi3E,OAAAv3E,GAAA0E,OAEA4C,KAAA,mBACA3C,EAAAA,EAAA2C,KAAA,iBAAAwwE,eAIApyE,QAAA+xE,gBAAA9yE,KAAArE,KAAAi3E,OAAAv3E,GAAA4E,IAAA,CACAizE,GAAA,EACA,MAIA,IAAAA,EAEA,OAKAl+D,EAAAqM,iBACArM,EAAAi+D,2BACAp4E,MAAAk4E,uBAAAK,uBAAAz3E,KAAA4W,WAAAuF,KAAAnc,QAGA4W,WAAA,WAEA5W,KAAA4X,UACA5X,KAAAiO,MAAAgJ,QAAA,UACAjX,KAAA+X,YCxEA7Y,MAAAw4E,uBAAAtyE,QAAAyV,KAAA5b,OAAA,CACAo4E,iBAAA,EAEAM,cAAA,KACAzsB,eAAA,KACAC,iBAAA,KACAysB,WAAA,KACAC,WAAA,KAEA5wE,SAAA,KAOAwwE,uBAAA,SAAAxwE,GACAjH,KAAAiH,SAAAA,EAGAjH,KAAAq3E,iBAAA,EAEAn4E,MAAA4H,kBAAA,qCAAA,CAAA2D,EAAA5C,KACA7H,KAAAq3E,iBAAA,EAEA,YAAAxvE,KAEA,IAAA4C,EAAAi0B,SAAAj0B,EAAAi0B,SAAAx/B,MAAAw4E,uBAAAI,8BACA93E,KAAAiH,WAGAjH,KAAA+3E,wBAMAA,kBAAA,WACA,GAAA/3E,KAAA23E,cAqCA33E,KAAA23E,cAAA98C,WArCA,CACA,IAAAm9C,EAAAr5E,EAAA,iEACAyf,EAAAzf,EAAA,wBAAAO,MAAAS,EAAA,MAAA,oCAAA,cAAA2O,SAAA0pE,GACAnrB,EAAAluD,EAAA,gCAAA2P,SAAA8P,GACA0uC,EAAAnuD,EAAA,uBAAA2P,SAAAu+C,GACAE,EAAApuD,EAAA,4BAAA2P,SAAAw+C,GACAE,EAAAruD,EAAA,SAAA2P,SAAAw+C,GACAG,EAAAtuD,EAAA,kCAAA2P,SAAAy+C,GAEA/sD,KAAAkrD,eAAAvsD,EAAA,uEAAAO,MAAAS,EAAA,MAAA,YAAA,uCAAA2O,SAAA2+C,GACAjtD,KAAAmrD,iBAAAxsD,EAAA,iCAAA2P,SAAAu+C,GACA7sD,KAAA43E,WAAAj5E,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,sBACA9W,KAAAnE,MAAAS,EAAA,MAAA,YACA2O,SAAA0+C,GACAhtD,KAAA63E,WAAAl5E,EAAA,sBAAA2P,SAAA8P,GAEApe,KAAA23E,cAAA,IAAAvyE,QAAA03B,MAAAk7C,EAAA,CACAh9C,kBAAA,EACAqC,SAAA,KACA9X,WAAAvlB,KAAAi4E,mBAAA97D,KAAAnc,MAAA,MAEA4yC,UAAA,KACA5yC,KAAAkrD,eAAA5mD,IAAA,OAIA,IAAApF,MAAAguD,cAAAltD,KAAAkrD,eAAA,CACAiC,cAAAC,IACAptD,KAAAkrD,eAAAkC,KAIAptD,KAAA0c,YAAA1c,KAAAkrD,eAAA,QAAA,oBACAlrD,KAAA0c,YAAAs7D,EAAA,SAAA,oBAMAC,mBAAA,WACA7yE,QAAAugB,iBAAA,IACA3lB,KAAAkrD,eAAAj0C,QAAA,UAIAs2C,iBAAA,WACA,OAAAvtD,KAAAkrD,eAAA5mD,MAAAhE,QAAA,GACAN,KAAA43E,WAAAxhE,YAAA,aACA,IAEApW,KAAA43E,WAAA9lE,SAAA,aACA,IAIAomE,eAAA,SAAA7+D,GAKA,GAJAA,GACAA,EAAAqM,iBAGA1lB,KAAAutD,mBAAA,CAIAvtD,KAAAmrD,iBAAA/0C,YAAA,UACApW,KAAAytD,kBAEA,IAAAzmD,EAAA,CACAmxE,gBAAAn4E,KAAAkrD,eAAA5mD,OAGApF,MAAA4H,kBAAA,+BAAAE,EAAA,CAAAyD,EAAA5C,KACA7H,KAAAmrD,iBAAAr5C,SAAA,UAEA,YAAAjK,EACA4C,EAAA9C,SACA3H,KAAA23E,cAAAt5D,OACAre,KAAAiH,aAEAjH,KAAAo4E,kBAAA3tE,EAAA5K,SAAAX,MAAAS,EAAA,MAAA,wBACAyF,QAAA0a,MAAA9f,KAAA23E,cAAA/kE,YACA5S,KAAAi4E,sBAGAj4E,KAAAo4E,wBAKAA,kBAAA,SAAAxwE,GACAA,MAAAA,IACAA,EAAA1I,MAAAS,EAAA,MAAA,6BAGAK,KAAA63E,WAAAx0E,KAAAuE,GACA5H,KAAA23E,cAAA16D,yBAGAwwC,gBAAA,WACAztD,KAAAo4E,kBAAA,MAEA,CACAN,8BAAA,IAIA54E,MAAAk4E,uBAAA,IAAAl4E,MAAAw4E,uBClJAx4E,MAAAm5E,WAAAn5E,MAAA+U,iBAAAhV,OAAA,CACAq5E,oBAAA,KACAC,kBAAA,KACAC,aAAA,KAEAj9D,KAAA,SAAA5H,EAAAf,EAAAoB,GACAhU,KAAAoZ,GAAA,eAAApZ,KAAAi5D,aAAA98C,KAAAnc,OACAA,KAAAoZ,GAAA,aAAApZ,KAAAi5D,aAAA98C,KAAAnc,OACAA,KAAA4vB,KAAAjc,EAAAf,EAAAoB,IAGA6R,UAAA,WAEA7lB,KAAAs4E,oBAAA,GAEA,IAAA,IAAA54E,EAAA,EAAAA,EAAAR,MAAAo5E,oBAAAh4E,OAAAZ,IAAA,CACA,IAAA+4E,EAAAv5E,MAAAo5E,oBAAA54E,GAEAM,KAAAonB,eAAA,WAAAqxD,EAAArf,MACAp5D,KAAAs4E,oBAAAp3E,KAAAu3E,GAIAz4E,KAAA4vB,QAGAzI,oBAAA,WAEA,GAAA,UAAAnnB,KAAAgU,SAAAoQ,SAAA,oBAAAs0D,qBAAA,CACA,GAAA,YAAAA,qBACA,MAAA,UAEA,IAAA,IAAAh5E,EAAA,EAAAA,EAAAM,KAAAymB,SAAAnmB,OAAAZ,IAAA,CACA,IAAAwhB,EAAAviB,EAAAqB,KAAAymB,SAAA/mB,IAEA,GAAAwhB,EAAAla,KAAA,YAAA0xE,qBACA,OAAAx3D,EAAAla,KAAA,QAMA,OAAAhH,KAAA4vB,QAGAqpC,aAAA,WACA,GAAAj5D,KAAAkhB,QAAA,CAIA,IAAA6U,EAYAr2B,EAAAgH,EAAAqP,EAEA,GAVAggB,EADA,YAAA/1B,KAAAkhB,QAAAla,KAAA,OACA,UAEAhH,KAAAkhB,QAAAla,KAAA,UAQAhH,KAAAs4E,oBAAAh4E,OAAA,CAOA,IAAAq4E,EAYAnf,EAVA,GAPAx5D,KAAAu4E,mBACAv4E,KAAAu4E,kBAAAj+D,SAMAyb,EACA,IAAAr2B,EAAA,EAAAA,EAAAM,KAAAs4E,oBAAAh4E,OAAAZ,IACA,GAAAM,KAAAs4E,oBAAA54E,GAAAq2B,SAAAA,EAAA,CACA4iD,EAAA34E,KAAAs4E,oBAAA54E,GACA,MAmCA,GA9BAM,KAAAu4E,kBAAA55E,EAAA,kCAKAg6E,GACAjyE,EAAA1G,KAAA44E,uBAAAD,GACA5iE,EAAA,UAAA/V,KAAAgU,SAAAoQ,QAAAllB,MAAAS,EAAA,MAAA,aAAAT,MAAAS,EAAA,MAAA,sBAAA,CAAA84E,QAAAE,EAAA1zE,OACAjF,KAAAw4E,aAAA75E,EAAA,kCAAA+H,EAAA,+BAAAxH,MAAAiE,WAAA4S,GAAA,QAAAzH,SAAAtO,KAAAu4E,mBAEA,UAAAv4E,KAAAgU,SAAAoQ,SACApkB,KAAA0c,YAAA1c,KAAAw4E,aAAA,SAAA,SAAAn/D,GACArZ,KAAA64E,sBAAAx/D,EAAAE,cAAAogD,aAAA,eAIA35D,KAAAs4E,oBAAAh4E,OAAA,IACAk5D,EAAA76D,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,uBACA7L,SAAAtO,KAAAu4E,qBAGAv4E,KAAAw4E,aAAAhf,EAAA76D,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,8BACA9W,KAAAnE,MAAAS,EAAA,MAAA,eACA2O,SAAAtO,KAAAu4E,mBAGA/e,EAAA,CACA,IAAAI,EAAA,yBAEA,IAAAl6D,EAAA,EAAAA,EAAAM,KAAAs4E,oBAAAh4E,OAAAZ,IAAA,CACA,IAAA+4E,EAAAz4E,KAAAs4E,oBAAA54E,IAGA,UAAAM,KAAAgU,SAAAoQ,UAAA,IAAAzlB,EAAAsO,QAAAjN,KAAA8V,OAAA2iE,EAAAn8D,QACA,UAAAtc,KAAAgU,SAAAoQ,SAAAq0D,IAAAE,KAEAjyE,EAAA1G,KAAA44E,uBAAAH,GACA1iE,EAAA,UAAA/V,KAAAgU,SAAAoQ,QAAAq0D,EAAAxzE,KAAA/F,MAAAS,EAAA,MAAA,sBAAA,CAAA84E,QAAAA,EAAAxzE,OACA20D,GAAA,UAAAlzD,EAAA,IAAAxH,MAAAiE,WAAA4S,GAAA,aAMApX,EAFAi7D,GAAA,eAEAtrD,SAAAtO,KAAAu4E,mBACA,IAAA1e,EAAA,IAAAz0D,QAAAyU,QAAA2/C,GAEA,UAAAx5D,KAAAgU,SAAAoQ,SACAy1C,EAAAzgD,GAAA,eAAAC,IACArZ,KAAA64E,sBAAAx/D,EAAA8W,OAAAwpC,aAAA,cAKA35D,KAAAovB,UAAApvB,KAAAu4E,mBAMA,GAAA,UAAAv4E,KAAAgU,SAAAoQ,SAAA,oBAAAwF,QAAA,CACA,IAAAhgB,EAAA,UAEAmsB,IACAnsB,GAAA,IAAAmsB,GAGAnM,QAAAC,aAAA,GAAA,GAAA3qB,MAAAyF,OAAAiF,OAIAgvE,uBAAA,SAAAH,GACA,GAAA,UAAAz4E,KAAAgU,SAAAoQ,QAAA,CACA,IAAAxa,EAAA,WAAA6uE,EAAA1iD,OAAA,OACA,IAAAj2B,EAAA,GACA,GAAAE,KAAA8V,OACA,IAAA,IAAApW,EAAA,EAAAA,EAAAR,MAAAod,MAAAhc,OAAAZ,IACAR,MAAAod,MAAA5c,GAAAmW,IAAA7V,KAAA8V,SACAhW,EAAA6rE,KAAAzsE,MAAAod,MAAA5c,GAAAq2B,QAIA,MAAA,SAAA72B,MAAAyF,OAAAiF,EAAA9J,GAAA,IAEA,MAAA,YAAA24E,EAAA5iE,GAAA,KAIAgjE,sBAAA,SAAAC,GACA,IAAA94E,KAAAw4E,aAAA7iE,SAAA,WAAA,CAOA,IAFA,IAAA8iE,EAEA/4E,EAAA,EAAAA,EAAAM,KAAAs4E,oBAAAh4E,OAAAZ,IACA,GAAAM,KAAAs4E,oBAAA54E,GAAAmW,IAAAijE,EAAA,CACAL,EAAAz4E,KAAAs4E,oBAAA54E,GACA,MAIA,GAAA+4E,EAAA,CAIAz4E,KAAAw4E,aAAA1mE,SAAA,YACA,IAAAinE,EAAA/4E,KAAAw4E,aAAAn1E,OACArD,KAAAw4E,aAAAn1E,KAAAnE,MAAAS,EAAA,MAAA,sBAAA,CAAA84E,QAAAA,EAAAxzE,QAEA/F,MAAAkV,oBAAApU,KAAA2T,YAAA,CACAuJ,WAAAld,KAAAu4E,kBACAziE,OAAA9V,KAAA8V,OACA6F,WAAA,CACAm9D,UAAAA,EACAE,OAAAP,EAAAQ,WAAA,GAAApjE,GACA80D,QAAA8N,EAAAS,WAAA,EAAA,GAEAp9D,eAAA,KACA9b,KAAAw4E,aAAA1mE,SAAA,YAEAsK,aAAA,KACApc,KAAAw4E,aAAApiE,YAAA,YAEAuH,UAAA,KACA3d,KAAAw4E,aAAApiE,YAAA,YAAA/S,KAAA01E,IAEAl5D,cAAApV,IAEA,IAAA0uE,EAAA,WAAAV,EAAArf,IAEAp5D,KAAAghB,YAAAm4D,GACAn5E,KAAA6tB,kBAAAsrD,GAGAn5E,KAAAmvB,yBAAA1kB,EAAAoL,IACA7V,KAAAimB,yBAOA/mB,MAAAwU,0BAAA,yBAAAxU,MAAAm5E,YCzOAn5E,MAAAk6E,oBAAAh0E,QAAAyV,KAAA5b,OAAA,CACA2T,WAAA,KACAymE,cAAA,KACAC,WAAA,KACAx4D,SAAA,KACAy4D,eAAA,KACAC,iBAAA,KACAC,cAAA,KACAC,WAAA,KACAC,mBAAA,KACAC,aAAA,KACAC,qBAAA,KACAC,aAAA,KACAC,QAAA,KAEAC,QAAA,KACAC,YAAA,KAEA1+D,KAAA,SAAAga,EAAAvhB,GACAhU,KAAA4S,WAAAjU,EAAA42B,GACAv1B,KAAA8Y,YAAA9E,EAAA9U,MAAAk6E,oBAAA59D,UAEA,IAAA0+D,EAAAl6E,KAAA4S,WAAAsH,SAAA,kBACAla,KAAAq5E,cAAAa,EAAAhgE,SAAA,aACAla,KAAAs5E,WAAAY,EAAAhgE,SAAA,oBACAla,KAAA8gB,SAAA9gB,KAAA4S,WAAAsH,SAAA,gBAEAla,KAAAy5E,cAAAz5E,KAAAw5E,iBAAAx5E,KAAA8gB,SAAA5G,SAAA,sBACA,IAAAigE,EAAAn6E,KAAAy5E,cAAAv/D,SAAA,WACAla,KAAA45E,aAAAO,EAAAjgE,SAAA,SACAla,KAAA65E,qBAAAM,EAAAjgE,SAAA,UACAla,KAAA85E,aAAA95E,KAAA8gB,SAAAlL,KAAA,oBACA5V,KAAA+5E,QAAA/5E,KAAA85E,aAAA5/D,SAAA,gBACAla,KAAA05E,WAAA15E,KAAA8gB,SAAA5G,SAAA,mBACAla,KAAA25E,mBAAA35E,KAAA05E,WAAAx/D,WAGAla,KAAAg6E,QAAA,IAAA96E,MAAAsZ,KAAAxY,KAAAq5E,cAAA,CACArhE,aAAA,WACAG,YAAA,IACAE,SAAA,OACAE,WAAA,KAGA,IAAAkuB,EAAAzmC,KAAAq5E,cAAAn/D,WACA,IAAA,IAAAxa,EAAA,EAAAA,EAAA+mC,EAAAnmC,OAAAZ,IACAM,KAAAo6E,QAAAz7E,EAAA8nC,EAAA/mC,KAmBA,GAfAf,EAAA,WAAA,CACA4C,KAAA,SACA0D,KAAAjF,KAAAgU,SAAAqmE,0BAAAr7E,QAAA,mBAAA,IACAmG,MAAA,KACAm8C,aAAAthD,KAAA4S,YAEA5S,KAAAi6E,YAAA,IAAA/6E,MAAAk6E,oBAAAkB,YAAAt6E,MAEAA,KAAAgU,SAAAumE,mBACAv6E,KAAAw6E,QAAA,IAAAt7E,MAAAk6E,oBAAAqB,QAAAz6E,MAEAA,KAAA0c,YAAA1c,KAAAs5E,WAAA,WAAA,WAIAt5E,KAAAgU,SAAA0mE,eAAA,CACA,IAAAC,EAAA36E,KAAA8gB,SAAA5G,SAAA,aACA,IAAAhb,MAAA07E,QAAAD,EAAA,CACA7uC,SAAA+uC,IACA76E,KAAAw5E,iBAAA1nE,SAAA,UACA9R,KAAAw5E,iBAAAx5E,KAAA,IAAA66E,EAAA7zE,KAAA,qBACAoP,YAAA,aAKApW,KAAA0c,YAAA1c,KAAA45E,aAAA,QAAA,KACA,IAAAt1E,EAAAtE,KAAA45E,aAAAt1E,MAAAsL,cAAA5Q,QAAA,QAAA,IACA,IAAAsF,EAGA,OAFAtE,KAAAy5E,cAAA7jE,KAAA,aAAAQ,YAAA,iBACApW,KAAA65E,qBAAA/nE,SAAA,UAIA9R,KAAA65E,qBAAAzjE,YAAA,UACA,IAAA0kE,EAAA96E,KAAA+5E,QAAAl1D,OAAA,oBAAAvgB,OACAqY,IAAA3c,KAAA85E,aAAAj1D,OAAA,gBAAAvgB,OAAA4V,SAAA,iBACA9D,YAAA,YACApW,KAAA+5E,QAAA7/C,IAAA4gD,GAAAhpE,SAAA,YAGA,IAAA,IAAApS,EAAA,EAAAA,EAAAM,KAAA85E,aAAAx5E,OAAAZ,IAAA,CACA,IAAAq7E,EAAA/6E,KAAA85E,aAAA3nE,GAAAzS,GACAq7E,EAAAnlE,KAAA,4CAAAtV,OACAy6E,EAAA3kE,YAAA,YAEA2kE,EAAAjpE,SAAA,eAKA9R,KAAA0c,YAAA1c,KAAA45E,aAAA,UAAAvgE,IACAA,EAAA2G,UAAA5a,QAAA4Y,SACAhe,KAAA45E,aAAAt1E,IAAA,IAAA2S,QAAA,WAKAjX,KAAA0c,YAAA1c,KAAA65E,qBAAA,QAAA,KACA75E,KAAA45E,aAAAt1E,IAAA,IAAA2S,QAAA,YAIAmjE,QAAA,SAAA/sC,GACA,GAAArtC,KAAAgU,SAAAumE,iBAAA,CACA,IAAAS,EAAA3tC,EAAAz3B,KAAA,mBACAjX,EAAA,2CACA62B,YAAAwlD,GACA3oE,OACA1T,EAAA,SACA0T,OAAA1T,EAAA,SACA0T,OAAA1T,EAAA,OAAA,CACAs8E,cAAA,SACA53E,KAAAnE,MAAAS,EAAA,MAAA,cAEA0S,OAAA1T,EAAA,SACA0T,OAAA1T,EAAA,OAAA,CACAs8E,cAAA,SACA53E,KAAAnE,MAAAS,EAAA,MAAA,eAGA0S,OAAA1T,EAAA,UACA0T,OACA1T,EAAA,SACA0T,OAAA1T,EAAA,SACA0T,OAAA1T,EAAA,OAAA,CACAs8E,cAAA,WACA53E,KAAAnE,MAAAS,EAAA,MAAA,wBAEA0S,OAAA1T,EAAA,SACA0T,OAAA1T,EAAA,OAAA,CACAs8E,cAAA,YACA53E,KAAAnE,MAAAS,EAAA,MAAA,0BAIA,IAAAk6D,EAAA,IAAAz0D,QAAAyU,QAAAmhE,EAAA,CACAlxB,eAAA9pD,KAAAk7E,kBAAA/+D,KAAAnc,QAEA65D,EAAAp1C,KAAArL,GAAA,OAAA,KACAi0B,EAAAjc,KAAA,YAAA9wB,OACAu5D,EAAAp1C,KAAA7R,WAAAgD,KAAA,0BAAAQ,YAAA,YAEAyjD,EAAAp1C,KAAA7R,WAAAgD,KAAA,0BAAA9D,SAAA,YAGAu7B,EAAA1zB,KAAA,YAAArZ,OACAu5D,EAAAp1C,KAAA7R,WAAAgD,KAAA,2BAAAQ,YAAA,YAEAyjD,EAAAp1C,KAAA7R,WAAAgD,KAAA,2BAAA9D,SAAA,cAMA,IAAA4Q,EAAA2qB,EAAAnzB,SAAA,mBAAAA,WAEA,IAAA,IAAAxa,EAAA,EAAAA,EAAAgjB,EAAApiB,OAAAZ,IACAM,KAAAm7E,YAAAx8E,EAAA+jB,EAAAhjB,MAIAy7E,YAAA,SAAAzlE,GACA,IAAAxW,MAAAk6E,oBAAAgC,QAAAp7E,KAAA0V,IAGAwlE,kBAAA,SAAA/qD,GACA,IAAAnwB,KAAAgU,SAAAumE,iBACA,OAGA,IAAA51D,EAAAhmB,EAAAwxB,GACAkd,EAAA1oB,EAAA3d,KAAA,QAAAwS,QAAA8K,SAAAA,SAAAA,SAGA,OAFAK,EAAA3d,KAAA,WAGA,IAAA,SACAhH,KAAAq7E,UAAAhuC,GACA,MACA,IAAA,SACArtC,KAAAs7E,UAAAjuC,GACA,MACA,IAAA,WACA,IAAAkuC,EAAAluC,EAAAjc,KAAA,YACAmqD,EAAAj7E,QACA+sC,EAAAiU,aAAAi6B,GAEA,MACA,IAAA,YACA,IAAAC,EAAAnuC,EAAA1zB,KAAA,YACA6hE,EAAAl7E,QACA+sC,EAAA7X,YAAAgmD,KAMAH,UAAA,SAAAhuC,GACA,IAAArtC,KAAAgU,SAAAumE,iBACA,OAGA,MAAAkB,EAAApuC,EAAAz3B,KAAA,mBACA2wC,EAAAk1B,EAAAp4E,OACAmjD,EAAAxmD,KAAA07E,iBAAAn1B,GAEAC,GAAAA,IAAAD,IACAk1B,EAAAp4E,KAAAmjD,GACAnZ,EAAAz3B,KAAA,oBAAA1H,KAAA,OAAAlO,KAAA27E,6BAAAn1B,MAIAk1B,iBAAA,SAAAn1B,GACA,OAAArnD,MAAAiE,WAAAg8C,OAAAjgD,MAAAS,EAAA,MAAA,yBAAA4mD,KAGA+0B,UAAA,SAAAjuC,GACA,IAAArtC,KAAAgU,SAAAumE,iBACA,OAIA,IAAAR,EAAA1sC,EAAAz3B,KAAA,gBAEA,IAAA,IAAAlW,EAAA,EAAAA,EAAAq6E,EAAAz5E,OAAAZ,IAAA,CACA,IAAA6sB,EAAA5tB,EAAAo7E,EAAAr6E,IAAAwO,KAAA,kBACAlO,KAAA47E,oBAAArvD,GAGAvsB,KAAAg6E,QAAA5xD,YAAAilB,GACArtC,KAAAw6E,QAAApyD,YAAAilB,GAEAA,EAAA/yB,UAGAuhE,YAAA,SAAA1Q,GACA,IAAA5+C,EAAA4+C,EAAAj9D,KAAA,kBAEAi9D,EAAA7wD,SAEAta,KAAA47E,oBAAArvD,GACAvsB,KAAAg6E,QAAA8B,aAAA,IAGAF,oBAAA,SAAArvD,GACAvsB,KAAA+5E,QAAAl1D,OAAA,oBAAA0H,aACAnW,YAAA,UACAqD,QAAA,oBAAArD,YAAA,WAGA2lE,OAAA,WACA,IAAA/7E,KAAAgU,SAAAumE,iBACA,OAGA,MAAAt1E,EAAAjF,KAAA07E,mBACA,IAAAz2E,EACA,OAGA,MAAAooC,EAAA1uC,EAAA,mGAIAsG,mDACA/F,MAAAS,EAAA,MAAA,yFAMA2O,SAAAtO,KAAAq5E,eAEAr5E,KAAAg6E,QAAApyD,SAAAylB,GACArtC,KAAAw6E,QAAA5yD,SAAAylB,GAEArtC,KAAAo6E,QAAA/sC,IAGAsuC,6BAAA,SAAAK,GACA,OAAAh8E,KAAAgU,SAAAqmE,0BAAAr7E,QAAA,gBAAAE,MAAAsE,mBAAAw4E,MAEA,CACAxgE,SAAA,CACA++D,kBAAA,EACAG,gBAAA,EACAL,0BAAA,oCACA4B,uBAAA,qCAIA/8E,MAAAk6E,oBAAAgC,QAAAh2E,QAAAyV,KAAA5b,OAAA,CACAi9E,SAAA,KACAtpE,WAAA,KACAupE,gBAAA,KACAC,aAAA,KACArY,mBAAA,KACAiX,SAAA,KAEAqB,OAAA,KACAC,SAAA,EACA/vD,UAAA,KACAgwD,YAAA,EACAj9E,IAAA,KACAk9E,gBAAA,EACAC,aAAA,EACAnhE,IAAA,KAEAC,KAAA,SAAA2gE,EAAAtpE,GACA5S,KAAAk8E,SAAAA,EACAl8E,KAAA4S,WAAAA,EACA5S,KAAA4S,WAAA5L,KAAA,cAAAhH,MAEAA,KAAAq8E,OAAAr8E,KAAA4S,WAAA5L,KAAA,UACArI,EAAAoG,cAAA/E,KAAAq8E,UACAr8E,KAAAq8E,OAAA,IAEAr8E,KAAAq8E,OAAA96E,KAAAvB,KAAA4S,WAAA5L,KAAA,QAEAhH,KAAAs8E,QAAAt8E,KAAA4S,WAAA+C,SAAA,aACA3V,KAAAu8E,WAAAv8E,KAAAs8E,SAAAl3E,QAAA4T,QAAAhZ,KAAA4S,WAAA,mBACA5S,KAAAV,IAAAJ,MAAAsS,aAAA,IAEAxR,KAAAs8E,UACAt8E,KAAAusB,UAAAvsB,KAAA4S,WAAA5L,KAAA,cAGA,IAAA01E,EAAA18E,KAAA4S,WAAA5L,KAAA,iBACA21E,EAAA38E,KAAAu8E,YAAAv8E,KAAA4S,WAAA+C,SAAA,gBACA3V,KAAAw8E,eAAAx8E,KAAAk8E,SAAAloE,SAAA0mE,gBAAAt1E,QAAA4T,QAAAhZ,KAAA4S,WAAA,yBACA5S,KAAAy8E,YAAAC,GAAA18E,KAAAu8E,WAEAv8E,KAAAy8E,cAEAC,EAAAA,EAAAA,EAAA19E,QAAA,uBAAAgB,KAAAV,KAAA,GAGAU,KAAA+jE,mBAAAplE,EAAA,SAAA,CACAwb,MAAA,WAIAna,KAAAg7E,SAAAr8E,EAAA,OAAA,CACA8zB,KAAA,SACAC,SAAA,EACAvY,MAAA,gBACAC,MAAAlb,MAAAS,EAAA,MAAA,UAGAK,KAAAg7E,SAAA5hE,GAAA,QAAA,KACApZ,KAAAsb,KAGAtb,KAAAsb,IAAAuf,OACA76B,KAAAsb,IAAA2B,uBAAA,IAHAjd,KAAA48E,kBAAAF,EAAAC,MAQA38E,KAAA68E,SAGA78E,KAAA4S,WAAA1E,KAAA,cAAA,MACAlO,KAAA4S,WAAA1E,KAAA,gBAAA,MACAlO,KAAA4S,WAAA1E,KAAA,qBAAA,OAGA2uE,OAAA,WAeA,GAdA78E,KAAAm8E,gBAAAx9E,EAAA,WAAA,CACAwb,MAAA,kBACA5Y,KAAA,SACA0D,KAAA,GACAE,MAAAnF,KAAAV,MACAgP,SAAAtO,KAAA4S,YACA5S,KAAA88E,uBAEA98E,KAAAo8E,aAAAz9E,EAAA,WAAA,CACA4C,KAAA,SACA0D,KAAAjF,KAAAk8E,SAAAloE,SAAAioE,uBAAAj9E,QAAA,uBAAAgB,KAAAV,OACAgP,SAAAtO,KAAA4S,YACA5S,KAAA+8E,oBAEA/8E,KAAAw8E,eAAA,CACA,IAAAt9E,MAAA89E,YAAAh9E,KAAAq8E,OAAAr1C,OAAA,IAAA,CACAjV,IAAA,GACArI,IAAA,IACAuzD,KAAA,GACAC,WAAAl2C,GACA9nC,MAAAS,EAAA,MAAA,cAAA,CAAAw9E,IAAAn2C,EAAA,MAEA8E,SAAA9E,IACAhnC,KAAAq8E,OAAAr1C,MAAAA,EACAhnC,KAAA+8E,uBAGAnqE,WAAAtE,SAAAtO,KAAA4S,YAGA5S,KAAAy8E,aACAz8E,KAAAg7E,SAAA1sE,SAAAtO,KAAA4S,aAIAgqE,kBAAA,SAAAF,EAAAC,GACA,IAAA1Q,EAAA,2CAEAyQ,kHAGAx9E,MAAAS,EAAA,MAAA,8FAqBA,GAfAK,KAAAsb,IAAA,IAAAlW,QAAA+X,IAAAnd,KAAA4S,WAAAq5D,EAAA,CACAzuD,OAAA9S,IAEAtF,QAAA2Z,sBAAA,KAEA/e,KAAAsb,IAAAsF,MAAAhL,KAAA,eAAAqB,QAAA,YAGA2G,SAAA,KACA5d,KAAAo9E,sBAIAl+E,MAAAyT,eAAA3S,KAAAsb,IAAAsF,OAEA5gB,KAAAu8E,WAAA,CACAr9E,MAAAg1B,GAAAs2C,uBAAA,CACAz0D,MAAA7W,MAAAS,EAAA,MAAA,YACAkW,GAAA7V,KAAAV,IAAA,YACA2F,KAAA,WACAmU,GAAAujE,IACA/zD,UAAA5oB,KAAAsb,IAAAsF,OAGA5gB,KAAAiX,QAAA,sBAGAmmE,iBAAA,WACAp9E,KAAAsb,IAAA8C,MAAAi/D,iBAAAtiB,QAAA,EAAA91D,KAAAA,EAAAE,MAAAA,MACAnF,KAAAq8E,OAAAp3E,GAAAE,IAEAnF,KAAA+8E,oBAGA,IAAA5hE,EAAAnb,KAAAsb,IAAA8C,MAAAxI,KAAA,YAAAQ,YAAA,UAEAlX,MAAA6J,kBAAA,OAAA,wCAAA,CACA/B,KAAA,CACAq1E,OAAAr8E,KAAAq8E,UAEA5yE,KAAAgB,IACA0Q,EAAArJ,SAAA,UACA9R,KAAAg7E,SAAAjyD,SACA/oB,KAAA4S,WAAA7T,KAAAJ,EAAA8L,EAAAzD,KAAAjI,MAAAA,QACAiB,KAAA68E,SACA78E,KAAAs9E,sBACAt9E,KAAAsb,IAAA+C,SACA3U,MAAAgB,IAEA6yE,QAAA31E,MAAA8C,GACAyQ,EAAArJ,SAAA,UACA9R,KAAAs9E,sBACAt9E,KAAAsb,IAAA+C,UAIAy+D,qBAAA,WACA,IAAAzvC,EAAArtC,KAAA4S,WAAA6G,QAAA,YAAA7D,KAAA,aACA,IAAAy3B,EAAA/sC,OACA,OAEA,IAAAmE,EAAAzE,KAAAk8E,SAAAP,6BAAAtuC,EAAAhqC,QACArD,KAAAm8E,gBAAAjuE,KAAA,OAAAzJ,IAGAs4E,kBAAA,WACA/8E,KAAAo8E,aAAA93E,IAAA8C,KAAAC,UAAArH,KAAAq8E,UAGAiB,oBAAA,WACAt9E,KAAAu8E,aAIAv8E,KAAAq8E,OAAAmB,SACAx9E,KAAA4S,WAAAd,SAAA,gBAEA9R,KAAA4S,WAAAwD,YAAA,oBAKAlX,MAAAk6E,oBAAAqE,SAAAr4E,QAAAs4E,KAAAz+E,OAAA,CACAi9E,SAAA,KACAyB,WAAA,KACAC,kBAAA,EACAC,SAAA,KAKAtiE,KAAA,SAAA2gE,EAAAloE,GACAhU,KAAAk8E,SAAAA,EACAl8E,KAAA4vB,KAAA5vB,KAAA89E,YAAA9pE,IAMA+oC,YAAA,WACA/8C,KAAA4vB,OAGA5vB,KAAA29E,WAAA39E,KAAA+9E,kBAGA/9E,KAAA69E,SAAA79E,KAAAg+E,gBACAh+E,KAAA0mB,OAAA/nB,IAAAge,IAAA3c,KAAA0mB,OAAA/J,IAAA3c,KAAA69E,WAEAz4E,QAAAsN,KAAAZ,SAAA,aAGAmsE,cAAA,WACAj+E,KAAA0mB,OAAA1mB,KAAA0mB,OAAAwT,IAAAl6B,KAAA69E,UACA79E,KAAA69E,SAAAvjE,UAGA4jE,yBAAA,WACAl+E,KAAA29E,WAAAr8B,aAAAthD,KAAA68C,UACA78C,KAAA68C,SAAA9zB,SACA/oB,KAAA0mB,OAAA/nB,IAAAge,IAAA3c,KAAA0mB,OAAAwT,IAAAl6B,KAAA68C,UAAAlgC,IAAA3c,KAAA29E,aACA39E,KAAA49E,kBAAA,GAGAO,yBAAA,WACAn+E,KAAA29E,WAAAlnE,YAAAzW,KAAA68C,UACA78C,KAAA0mB,OAAA/nB,IAAAge,IAAA3c,KAAA0mB,OAAAwT,IAAAl6B,KAAA29E,YAAAhhE,IAAA3c,KAAA68C,WACA78C,KAAA49E,kBAAA,GAMAQ,aAAA,WACA,IAAA,IAAA1+E,EAAA,EAAAA,EAAAM,KAAA0mB,OAAApmB,OAAAZ,IAAA,CACA,IAAA2qD,EAAA1rD,EAAAqB,KAAA0mB,OAAAhnB,IACAoC,EAAAuoD,EAAAvoD,SAGAuoD,EAAA10C,SAAA,WAIA00C,EAAArjD,KAAA,WAAA,CACAyQ,KAAA3V,EAAA2V,KAAA4yC,EAAA9vB,aAAA,EACApD,IAAAr1B,EAAAq1B,IAAAkzB,EAAAjzB,cAAA,MAQAinD,eAAA,WAIA,IAHAr+E,KAAAq+E,eAAAC,aAAA,KACAt+E,KAAAq+E,eAAAE,sBAAA,KAEAv+E,KAAAq+E,eAAAxrB,GAAA,EAAA7yD,KAAAq+E,eAAAxrB,GAAA7yD,KAAA0mB,OAAApmB,OAAAN,KAAAq+E,eAAAxrB,KACA7yD,KAAAq+E,eAAAG,OAAA7/E,EAAAqB,KAAA0mB,OAAA1mB,KAAAq+E,eAAAxrB,KAEA7yD,KAAAq+E,eAAAI,UAAAz+E,KAAAq+E,eAAAG,OAAAx3E,KAAA,YACAhH,KAAAq+E,eAAAI,YAIAz+E,KAAAq+E,eAAAK,WAAAt5E,QAAAu5E,QAAA3+E,KAAAq+E,eAAAI,UAAAhnE,KAAAzX,KAAAq+E,eAAAI,UAAAtnD,IAAAn3B,KAAAw3C,OAAAx3C,KAAAy3C,SAEA,OAAAz3C,KAAAq+E,eAAAC,cAAAt+E,KAAAq+E,eAAAK,WAAA1+E,KAAAq+E,eAAAE,yBACAv+E,KAAAq+E,eAAAC,aAAAt+E,KAAAq+E,eAAAG,OAAA,GACAx+E,KAAAq+E,eAAAE,sBAAAv+E,KAAAq+E,eAAAK,aAIA,OAAA1+E,KAAAq+E,eAAAC,cAGAM,uBAAA,WAEA5+E,KAAA4+E,uBAAAN,aAAAt+E,KAAAq+E,iBAEAr+E,KAAA4+E,uBAAAN,eAAAt+E,KAAA29E,WAAA,KAIA39E,KAAA49E,kBACAj/E,EAAAsO,QAAAjN,KAAA29E,WAAA,GAAA39E,KAAA0mB,QAAA/nB,EAAAsO,QAAAjN,KAAA4+E,uBAAAN,aAAAt+E,KAAA0mB,UACA,IAAA/nB,EAAAsO,QAAAjN,KAAA4+E,uBAAAN,aAAAt+E,KAAA69E,UAEA79E,KAAA29E,WAAAnoD,YAAAx1B,KAAA4+E,uBAAAN,cAEAt+E,KAAA29E,WAAAr8B,aAAAthD,KAAA4+E,uBAAAN,cAGAt+E,KAAA0mB,OAAA/nB,IAAAge,IAAA3c,KAAA0mB,OAAA/J,IAAA3c,KAAA29E,aACA39E,KAAA49E,kBAAA,EACA59E,KAAAk8E,SAAAlC,QAAA8B,aAAA,GACA97E,KAAAo+E,iBAMAjhC,WAAA,WACAn9C,KAAA49E,kBACA59E,KAAAm+E,2BAGAn+E,KAAAi+E,gBAEAj+E,KAAAk8E,SAAAlC,QAAA8B,aAAA,GAGA,IAAAh6E,EAAA9B,KAAA68C,SAAA/6C,UACAA,GAAA,IAAAA,EAAAq1B,KAAA,IAAAr1B,EAAA2V,MACAzX,KAAA68C,SACA7xB,IAAA,CACA0oC,QAAA1zD,KAAA6+E,eACAC,WAAA,UACAxkD,QAAA,IAEA9iB,SAAA,CAAA8iB,QAAA,GAAAl1B,QAAA25E,aACA/+E,KAAAg/E,QAAA,GACAxnE,SAAA,CAAA8iB,QAAA,GAAAl1B,QAAA25E,YAAA,KACA/+E,KAAAi/E,kBAGAj/E,KAAA+/C,0BAGA//C,KAAA4vB,OAEAxqB,QAAAsN,KAAA0D,YAAA,eAIAlX,MAAAk6E,oBAAAqB,QAAAv7E,MAAAk6E,oBAAAqE,SAAAx+E,OAAA,CAIAsc,KAAA,SAAA2gE,GAKAl8E,KAAA4vB,KAAAssD,EAJA,CACAnmD,OAAA,UAMA+nD,UAAA,WACA,OAAA99E,KAAAk8E,SAAA7C,cAAAzjE,KAAA,kBAMAmnC,YAAA,WACA/8C,KAAA4vB,OACA5vB,KAAAk+E,2BACAl+E,KAAAo+E,gBAGAF,yBAAA,WACAl+E,KAAA4vB,OACA5vB,KAAAk8E,SAAAlC,QAAA5xD,YAAApoB,KAAA68C,UACA78C,KAAAk8E,SAAAlC,QAAApyD,SAAA5nB,KAAA29E,aAGAQ,yBAAA,WACAn+E,KAAA4vB,OACA5vB,KAAAk8E,SAAAlC,QAAA5xD,YAAApoB,KAAA29E,YACA39E,KAAAk8E,SAAAlC,QAAApyD,SAAA5nB,KAAA68C,WAMAqiC,OAAA,WACAl/E,KAAA4+E,yBACA5+E,KAAA4vB,QAMAutB,WAAA,WACAn9C,KAAA4vB,OAGA5vB,KAAA68C,SAAA7xB,IAAA,CACA0oC,QAAA1zD,KAAA6+E,eACAC,WAAA,YAOAd,cAAA,WACA,IAAAH,EAAAl/E,EAAA,0CAAA2P,SAAAtO,KAAAk8E,SAAA7C,eAEA,OADAr5E,KAAAk8E,SAAAlC,QAAApyD,SAAAi2D,GACAA,GAMAI,cAAA,WACAj+E,KAAA4vB,OACA5vB,KAAAk8E,SAAAlC,QAAA5xD,YAAApoB,KAAA69E,WAMAE,gBAAA,WACA,IAAA1wC,EAAArtC,KAAA68C,SAAAjnC,KAAA,QAEA,OAAAjX,EAAA,uDACAqB,KAAA68C,SAAA5xB,mFACAoiB,EAAArG,sBAAAqG,EAAApiB,2EACAjrB,KAAA68C,SAAAjnC,KAAA,mBAAAqV,oCAMA/rB,MAAAk6E,oBAAAkB,YAAAp7E,MAAAk6E,oBAAAqE,SAAAx+E,OAAA,CACAkgF,wBAAA,EACAC,eAAA,EAKAriC,YAAA,WACA/8C,KAAA4vB,OAGA5vB,KAAAm/E,uBAAAn/E,KAAA68C,SAAAlnC,SAAA,UAGA3V,KAAAo/E,cAAAp/E,KAAA68C,SAAAlnC,SAAA,aAGA3V,KAAAm/E,yBAAAn/E,KAAAo/E,eACAp/E,KAAA68C,SAAA7xB,IAAA,CACA0oC,QAAA1zD,KAAA6+E,eACAC,WAAA,YAKA9+E,KAAAm/E,wBACAn/E,KAAAk+E,2BAGAl+E,KAAAo+E,gBAMAc,OAAA,WACAl/E,KAAAq/E,sBAAAr/E,KAAAs/E,oBACAt/E,KAAA4+E,yBACA5+E,KAAA49E,mBACA59E,KAAA29E,WAAArjE,SACAta,KAAA0mB,OAAA/nB,IAAAge,IAAA3c,KAAA0mB,OAAAwT,IAAAl6B,KAAA29E,aACA39E,KAAA49E,kBAAA,EACA59E,KAAAk8E,SAAAlC,QAAA8B,aAAA,GACA97E,KAAAo+E,gBAGAp+E,KAAA4vB,QAGAyvD,mBAAA,WACA,OAAAj6E,QAAA4T,QAAAhZ,KAAA68C,SAAA,mBAGAyiC,kBAAA,WACA,IAAA,IAAA5/E,EAAA,EAAAA,EAAAM,KAAAk8E,SAAAlC,QAAAtzD,OAAApmB,OAAAZ,IACA,GAAA0F,QAAAm6E,QAAAv/E,KAAAw3C,OAAAx3C,KAAAy3C,OAAAz3C,KAAAk8E,SAAAlC,QAAAtzD,OAAAvU,GAAAzS,IACA,OAAA,EAIA,OAAA,GAGAo+E,UAAA,WAEA,OAAA99E,KAAAk8E,SAAA7C,cAAAzjE,KAAA,gBACA+G,IAAA3c,KAAAk8E,SAAAp7D,SAAAlL,KAAA,kBAMAooE,cAAA,WACA,IAAAH,EAAAl/E,IACA6gF,EAAAx/E,KAAAk8E,SAAA7C,cAAAzjE,KAAA,gCAEA,IAAA,IAAAlW,EAAA,EAAAA,EAAA8/E,EAAAl/E,OAAAZ,IACAm+E,EAAAA,EAAAlhE,IAAAhe,EAAA,UAAA2P,SAAAkxE,EAAA9/E,KAGA,OAAAm+E,GAMAE,gBAAA,WACA,OAAAp/E,EAAA,yDAAAqB,KAAA68C,SAAAzlB,wBAMA+lB,WAAA,WACA,IAAAygC,EAAA59E,KAAA49E,iBACA,GAAAA,GACA,GAAA59E,KAAAm/E,uBAAA,CAEA,IAAAzpE,EAAA1V,KAAA68C,SAAA5gB,QAAA7lB,YAAA,UACApW,KAAAk8E,SAAAf,YAAAzlE,GAEA1V,KAAAo/E,gBAEAp/E,KAAA68C,SAAA7xB,IAAA,CAAA8zD,WAAA,UAAAprB,QAAA,UAAA5hD,SAAA,UAGA,IAAA9R,KAAA68C,SAAA/9B,SAAA,2BAAAxe,QACAN,KAAA68C,SAAApjC,QAAA,oBAAA3H,SAAA,WAKA9R,KAAA68C,SAAAnnC,EAGA1V,KAAA4nB,SAAAlS,SAEA,IAAA1V,KAAAm/E,uBAAA,CACA,IAAAM,EAAAz/E,KAAAo/E,cACAp/E,KAAAk8E,SAAAnC,QAAAl1D,OAAA,oBAAA7kB,KAAA68C,SAAA71C,KAAA,wBACAhH,KAAAk8E,SAAAvC,mBAAA90D,OAAA,eAAA7kB,KAAA68C,SAAA71C,KAAA,QAAAhI,QAAA,MAAA,mBAEAgB,KAAAo/E,gBAEAK,EAAArpE,YAAA,UACAqpE,EAAAhmE,QAAA,oBAAArD,YAAA,WAIApW,KAAAooB,YAAApoB,KAAA68C,UAGA78C,KAAA68C,SAAA4iC,EAGAz/E,KAAA4vB,OAEA5vB,KAAA68C,SAAA7xB,IAAA,CACA0oC,QAAA1zD,KAAA6+E,eACAC,WAAA9+E,KAAAo/E,eAAAxB,EAAA,SAAA,YAGAA,GACA59E,KAAA68C,SAAA71C,KAAA,eAAA81E,0BC13BA59E,MAAAyZ,YAAAvT,QAAAyV,KAAA5b,OAAA,CACAgpB,QAAA,KACAy3D,aAAA,KACAC,eAAA,KACAC,sBAAA,KAEAC,SAAA,KACAC,gBAAA,KACAv+E,KAAA,KAEAga,KAAA,SAAAm4D,GAsBA,OArBA1zE,KAAAioB,QAAAtpB,EAAA+0E,GAGA1zE,KAAAioB,QAAAjhB,KAAA,iBACA5B,QAAA8qE,IAAA,qDACAlwE,KAAAioB,QAAAjhB,KAAA,eAAA0jB,WAGA1qB,KAAAioB,QAAAjhB,KAAA,cAAAhH,MAEAA,KAAAuB,KAAAvB,KAAA+/E,UAEA,WAAA//E,KAAAuB,MAAA,aAAAvB,KAAAuB,KACAvB,KAAA0/E,aAAA1/E,KAAAioB,QAAA/Z,KAAA,uBAAA,IAEAlO,KAAA2/E,eAAA3/E,KAAAggF,wBAAAhgF,KAAAioB,QAAAjhB,KAAA,WACAhH,KAAA4/E,sBAAA5/E,KAAAggF,wBAAAhgF,KAAAioB,QAAAjhB,KAAA,oBAGAhH,KAAAigF,cAEAjgF,KAAAuB,MACA,IAAA,OACAvB,KAAA0c,YAAA1c,KAAAioB,QAAA,QAAA,kBACA,MACA,IAAA,WACAjoB,KAAA0c,YAAA1c,KAAAioB,QAAArS,KAAA,SAAA,SAAA,kBACA,MACA,QACA5V,KAAA0c,YAAA1c,KAAAioB,QAAA,SAAA,kBACAjoB,KAAAkgF,mBAIAF,wBAAA,SAAAj+E,GAKA,OAJAA,IAAAA,EAAA4D,MAAA,YACA5D,EAAA,IAAAA,GAGAA,GAGAg+E,QAAA,WACA,IAAAI,EAAAngF,KAAAioB,QAAAkO,KAAA,YACA,GACA,UAAAgqD,GAAA,aAAAngF,KAAAioB,QAAA/Z,KAAA,SACA,aAAAlO,KAAAioB,QAAA/Z,KAAA,SACA,WAAAlO,KAAAioB,QAAA/Z,KAAA,QAEA,MAAA,WAGA,OAAAiyE,GACA,IAAA,SACA,MAAA,SACA,IAAA,IACA,MAAA,OACA,IAAA,WACA,MAAA,WAGA5C,QAAA6C,KAAA,2BAAApgF,KAAAioB,QAAA,KAGAg4D,YAAA,WACA,GAAA,WAAAjgF,KAAAuB,MAAA,aAAAvB,KAAAuB,KAAA,CACAvB,KAAAqgF,eACArgF,KAAA6/E,SAAAlhF,EAAAqB,KAAAggF,wBAAAhgF,KAAA0/E,aAAA1/E,KAAAqgF,sBAEArgF,KAAA2/E,iBACA3/E,KAAA6/E,SAAAlhF,EAAAqB,KAAA2/E,iBAGA3/E,KAAA4/E,wBACA5/E,KAAA8/E,gBAAAnhF,EAAAqB,KAAA4/E,yBAKAS,aAAA,WACA,GAAA,aAAArgF,KAAAuB,KACA,YAAA,IAAAvB,KAAAioB,QAAAkO,KAAA,WACAn2B,KAAAioB,QAAAkO,KAAA,WAEA,SAAAn2B,KAAAioB,QAAA/Z,KAAA,gBAGA,IAAAoyE,EAQA,OANAA,EADA,aAAAtgF,KAAAuB,KACAvB,KAAAioB,QAAArS,KAAA,uBAAAtR,MAEAc,QAAA+xE,gBAAAn3E,KAAAioB,SAIA,MAAAq4D,EAAA,KAAAA,EAAAthF,QAAA,UAAA,MAGAkhF,eAAA,WACA,WAAAlgF,KAAAuB,MAAA,aAAAvB,KAAAuB,MACAvB,KAAAugF,WAAAvgF,KAAA6/E,UACA7/E,KAAAigF,cACAjgF,KAAAwgF,WAAAxgF,KAAA6/E,YAEA7/E,KAAAigF,cAEA,SAAAjgF,KAAAuB,KACAvB,KAAAkgF,eAAAO,MAAAzgF,KAAAioB,QAAAtS,SAAA,eAAA3V,KAAAioB,QAAAtS,SAAA,YAEA3V,KAAAkgF,eAAAO,QAAAzgF,KAAAqgF,eAGArgF,KAAAkgF,eAAAO,OACAzgF,KAAAwgF,WAAAxgF,KAAA6/E,UACA7/E,KAAAugF,WAAAvgF,KAAA8/E,mBAEA9/E,KAAAugF,WAAAvgF,KAAA6/E,UACA7/E,KAAAwgF,WAAAxgF,KAAA8/E,yBAGA9/E,KAAAkgF,eAAAO,QAIAD,WAAA,SAAAvqD,GACA,GAAAA,GAAAA,EAAA31B,OAAA,CAKA,GAJAN,KAAAwgF,WAAAE,eAAAzqD,EAAAhL,SAEAgL,EAAA7f,YAAA,UAEA,WAAApW,KAAAuB,MAAA,aAAAvB,KAAAuB,KAAA,CACA,SAAAvB,KAAAuB,OACAvB,KAAAioB,QAAA7R,YAAA,aACApW,KAAAioB,QAAAnW,SAAA,aAGA,IAAA,IAAApS,EAAA,EAAAA,EAAAu2B,EAAA31B,OAAAZ,IACA,CAAAihF,IACA,SAAAA,EAAAxqD,KAAA,cACAwqD,EAAA11D,OAAA,QACAjrB,KAAAwgF,WAAAI,cAAAD,EAAA11D,SACA01D,EAAA31D,IAAA,CACAC,OAAAjrB,KAAAwgF,WAAAE,eACAtV,SAAA,WAGAuV,EAAAnpE,SAAA,QAEAmpE,EAAAnpE,SAAA,CAAAyT,OAAAjrB,KAAAwgF,WAAAI,eAAA,QAAA,WACAD,EAAA31D,IAAA,CACAC,OAAA,GACAmgD,SAAA,UAdA,CAkBAn1C,EAAA9jB,GAAAzS,WAGAM,KAAAwgF,WAAAI,qBAGA5gF,KAAAwgF,WAAAE,eAGAt7E,QAAA6xB,KAAAhgB,QAAA,YAIAspE,WAAA,SAAAtqD,GACA,GAAAA,GAAAA,EAAA31B,OACA,GAAA,WAAAN,KAAAuB,MAAA,aAAAvB,KAAAuB,KACA00B,EAAAnkB,SAAA,cACA,CACA,SAAA9R,KAAAuB,OACAvB,KAAAioB,QAAA7R,YAAA,YACApW,KAAAioB,QAAAnW,SAAA,cAGA,IAAA,IAAApS,EAAA,EAAAA,EAAAu2B,EAAA31B,OAAAZ,IACA,CAAAihF,IACAA,EAAAhrE,SAAA,YAGA,SAAAgrE,EAAAxqD,KAAA,YACAwqD,EAAA7uE,SAAA,WAEA6uE,EAAA31D,IAAA,WAAA,UACA21D,EAAAnpE,SAAA,QACAmpE,EAAAnpE,SAAA,CAAAyT,OAAA,GAAA,QAAA,WACA01D,EAAA7uE,SAAA,gBAVA,CAaAmkB,EAAA9jB,GAAAzS,QC9MAR,MAAAsZ,KAAApT,QAAAyV,KAAA5b,OAAA,CACA2T,WAAA,KAEA8T,OAAA,KACAyL,MAAA,KACA0uD,UAAA,KACAC,cAAA,KACAC,YAAA,KAEAC,qBAAA,KACAC,+BAAA,KAEAC,cAAA,KACAC,uBAAA,KAEAC,QAAA,KACAC,OAAA,KACAC,YAAA,KACAC,YAAA,KAEAC,iBAAA,EACAC,0BAAA,EACAC,+BAAA,EAEAnmE,KAAA,SAAAga,EAAAvhB,GACAhU,KAAA4S,WAAAjU,EAAA42B,GAGAv1B,KAAA4S,WAAA5L,KAAA,UACA5B,QAAA8qE,IAAA,6CACAlwE,KAAA4S,WAAA5L,KAAA,QAAA0jB,WAGA1qB,KAAA4S,WAAA5L,KAAA,OAAAhH,MAEAA,KAAA8Y,YAAA9E,EAAA9U,MAAAsZ,KAAAgD,UAGAxb,KAAA2hF,2BAAA,KACA3hF,KAAA87E,aAAA,GAAA,IAGA97E,KAAA0mB,OAAA1mB,KAAA4S,WAAAsH,SAAAla,KAAAgU,SAAAgE,cACAhY,KAAA4hF,WACA5hF,KAAA87E,aAAA,GAAA,GAEA12E,QAAAuV,KAAAC,MAAA,KACA5a,KAAA87E,aAAA,GAAA,MAIAl0D,SAAA,SAAAuK,GACAnyB,KAAA0mB,OAAA/nB,IAAAge,IAAA3c,KAAA0mB,OAAA/J,IAAAwV,IACAnyB,KAAA4hF,WACA5hF,KAAA87E,aAAA,GAAA,IAGA1zD,YAAA,SAAA+J,GACAnyB,KAAA0mB,OAAA/nB,IAAAge,IAAA3c,KAAA0mB,OAAAwT,IAAA/H,IACAnyB,KAAA4hF,WACA5hF,KAAA87E,aAAA,GAAA,IAGAtiD,eAAA,WACAx5B,KAAA0mB,OAAA/nB,IAAAge,IAAA3c,KAAA0mB,QACA1mB,KAAA4hF,WACA5hF,KAAA87E,aAAA,GAAA,IAGA8F,SAAA,WAKA,IAJA5hF,KAAA4hF,SAAAx2C,EAAA,GAEAprC,KAAAmyB,MAAA,GAEAnyB,KAAA4hF,SAAAx2C,EAAA1rC,EAAA,EAAAM,KAAA4hF,SAAAx2C,EAAA1rC,EAAAM,KAAA0mB,OAAApmB,OAAAN,KAAA4hF,SAAAx2C,EAAA1rC,IACAM,KAAAmyB,MAAAjxB,KAAAvC,EAAAqB,KAAA0mB,OAAA1mB,KAAA4hF,SAAAx2C,EAAA1rC,YAGAM,KAAA4hF,SAAAx2C,GAGA0wC,YAAA,SAAA5tD,GACA,GAAAluB,KAAAwhF,gBAKA,OAJAxhF,KAAAyhF,0BAAA,OACAvzD,IACAluB,KAAA0hF,+BAAA,IAOA,GAFA1hF,KAAAwhF,iBAAA,EAEAxhF,KAAAmyB,MAAA7xB,OAaA,GARAN,KAAA87E,YAAA1wC,EAAA,GAGAprC,KAAA87E,YAAA1wC,EAAAy2C,UAAA7hF,KAAA4S,WAAA,GAAAyuC,MAAAp2B,OACAjrB,KAAA4S,WAAA,GAAAyuC,MAAAp2B,OAAA,EACAjrB,KAAA87E,YAAA1wC,EAAA02C,aAAA9hF,KAAA4S,WAAA,GAAAkvE,aACA9hF,KAAA4S,WAAA,GAAAyuC,MAAAp2B,OAAAjrB,KAAA87E,YAAA1wC,EAAAy2C,UAEA,IAAA7hF,KAAA87E,YAAA1wC,EAAA02C,aAyBA,GApBA9hF,KAAAgU,SAAAiE,KACAjY,KAAA87E,YAAA1wC,EAAAy1C,UAAA7gF,KAAAgU,SAAAiE,MAEAjY,KAAA87E,YAAA1wC,EAAAy1C,UAAAlwE,KAAAC,MAAA5Q,KAAA4S,WAAAo0B,QAAAhnC,KAAAgU,SAAAmE,aAGA,OAAAnY,KAAA6gF,WAAA7gF,KAAA87E,YAAA1wC,EAAAy1C,UAAA7gF,KAAA6gF,YACA7gF,KAAA87E,YAAA1wC,EAAAy1C,UAAAlwE,KAAAC,OAAA5Q,KAAA4S,WAAAo0B,QAAA,IAAAhnC,KAAAgU,SAAAmE,cAGAnY,KAAAgU,SAAAkE,SAAAlY,KAAA87E,YAAA1wC,EAAAy1C,UAAA7gF,KAAAgU,SAAAkE,UACAlY,KAAA87E,YAAA1wC,EAAAy1C,UAAA7gF,KAAAgU,SAAAkE,UAIA,IAAAlY,KAAA87E,YAAA1wC,EAAAy1C,YACA7gF,KAAA87E,YAAA1wC,EAAAy1C,UAAA,IAIA,IAAA3yD,GAAAluB,KAAA6gF,YAAA7gF,KAAA87E,YAAA1wC,EAAAy1C,UAAA,CAWA,GANA7gF,KAAA6gF,UAAA7gF,KAAA87E,YAAA1wC,EAAAy1C,UACA7gF,KAAA8gF,cAAA9gF,KAAAgU,SAAA+tE,QAAA/hF,KAAA6gF,UAAA,GAAA7gF,KAAA6gF,UAGA7gF,KAAAqoB,eAAAroB,KAAA4S,WAAA,UAEA,SAAA5S,KAAAgU,SAAAqE,SAGA,IAFArY,KAAA87E,YAAA1wC,EAAA42C,UAAA,EAEAhiF,KAAA87E,YAAA1wC,EAAA42C,UAAAhiF,KAAAmyB,MAAA7xB,QAAA,CAKA,IAHAN,KAAA87E,YAAA1wC,EAAA62C,mBAAA,EACAjiF,KAAA87E,YAAA1wC,EAAA82C,SAAA,EAEAliF,KAAA87E,YAAA1wC,EAAA1rC,EAAAM,KAAA87E,YAAA1wC,EAAA42C,UAAAhiF,KAAA87E,YAAA1wC,EAAA1rC,EAAAM,KAAA87E,YAAA1wC,EAAA42C,UAAAhiF,KAAA6gF,WAAA7gF,KAAA87E,YAAA1wC,EAAA1rC,EAAAM,KAAAmyB,MAAA7xB,OAAAN,KAAA87E,YAAA1wC,EAAA1rC,IACAM,KAAA87E,YAAA1wC,EAAA+2C,WAAAniF,KAAAmyB,MAAAnyB,KAAA87E,YAAA1wC,EAAA1rC,GAAAurB,OAAA,QAAAA,SAEAjrB,KAAA87E,YAAA1wC,EAAA+2C,WAAAniF,KAAA87E,YAAA1wC,EAAA62C,oBACAjiF,KAAA87E,YAAA1wC,EAAA62C,kBAAAjiF,KAAA87E,YAAA1wC,EAAA+2C,YAGAniF,KAAA87E,YAAA1wC,EAAA82C,WAYA,IATAliF,KAAAgU,SAAAuE,aACAvY,KAAA87E,YAAA1wC,EAAAg3C,UAAApiF,KAAA87E,YAAA1wC,EAAA62C,kBAAAjiF,KAAAgU,SAAAuE,WAEAvY,KAAA87E,YAAA1wC,EAAAg3C,YACApiF,KAAA87E,YAAA1wC,EAAA62C,mBAAAjiF,KAAAgU,SAAAuE,WAAAvY,KAAA87E,YAAA1wC,EAAAg3C,YAKApiF,KAAA87E,YAAA1wC,EAAA1rC,EAAAM,KAAA87E,YAAA1wC,EAAA42C,UAAAhiF,KAAA87E,YAAA1wC,EAAA1rC,EAAAM,KAAA87E,YAAA1wC,EAAA42C,UAAAhiF,KAAA6gF,WAAA7gF,KAAA87E,YAAA1wC,EAAA1rC,EAAAM,KAAAmyB,MAAA7xB,OAAAN,KAAA87E,YAAA1wC,EAAA1rC,IACAM,KAAAmyB,MAAAnyB,KAAA87E,YAAA1wC,EAAA1rC,GAAAurB,OAAAjrB,KAAA87E,YAAA1wC,EAAA62C,mBAIAjiF,KAAA87E,YAAA1wC,EAAA42C,WAAAhiF,KAAA6gF,eAMA,GAHA7gF,KAAAqoB,eAAAroB,KAAA0mB,OAAA,UAGA,IAAA1mB,KAAA6gF,UACA7gF,KAAA4S,WAAAqY,OAAA,QACAjrB,KAAA0mB,OACAmU,OACA7P,IAAA,CACAwR,SAAA,WACAwK,MAAA,OACA7P,IAAA,IAEAnM,IAAA9rB,MAAAuY,KAAA,OACA,CAkBA,IAjBAzX,KAAA0mB,OAAAsE,IAAA,WAAA,YACAhrB,KAAA+gF,YAAA,IAAA/gF,KAAA6gF,UAIA7gF,KAAAohF,QAAA,GAEAphF,KAAAkhF,cAAA,GACAlhF,KAAAmhF,uBAAA,GAKAnhF,KAAAghF,qBAAA,GACAhhF,KAAAihF,+BAAA,GACAjhF,KAAAqiF,qBAAA,GAEAriF,KAAA87E,YAAA1wC,EAAAlZ,KAAA,EAAAlyB,KAAA87E,YAAA1wC,EAAAlZ,KAAAlyB,KAAAmyB,MAAA7xB,OAAAN,KAAA87E,YAAA1wC,EAAAlZ,OAkBA,IAjBAlyB,KAAAghF,qBAAAhhF,KAAA87E,YAAA1wC,EAAAlZ,MAAA,GACAlyB,KAAAihF,+BAAAjhF,KAAA87E,YAAA1wC,EAAAlZ,MAAA,GACAlyB,KAAAqiF,qBAAAriF,KAAA87E,YAAA1wC,EAAAlZ,MAAA,GAEAlyB,KAAA87E,YAAA1wC,EAAAif,MAAArqD,KAAAmyB,MAAAnyB,KAAA87E,YAAA1wC,EAAAlZ,MAAA2I,OACA76B,KAAA87E,YAAA1wC,EAAAk3C,cAAA,UAAAtiF,KAAA87E,YAAA1wC,EAAAif,MAAArjD,KAAA,YACAhH,KAAA87E,YAAA1wC,EAAAm3C,aAAA,SAAAviF,KAAA87E,YAAA1wC,EAAAif,MAAArjD,KAAA,YACAhH,KAAA87E,YAAA1wC,EAAAo3C,WAAAxiF,KAAA87E,YAAA1wC,EAAAif,MAAArjD,KAAA,WAAAhH,KAAA87E,YAAA1wC,EAAAif,MAAArjD,KAAA,WAAAhH,KAAA87E,YAAA1wC,EAAAif,MAAArjD,KAAA,eAAAhH,KAAA87E,YAAA1wC,EAAAif,MAAArjD,KAAA,eAAA,EACAhH,KAAA87E,YAAA1wC,EAAAq3C,WAAAziF,KAAA87E,YAAA1wC,EAAAif,MAAArjD,KAAA,WAAAhH,KAAA87E,YAAA1wC,EAAAif,MAAArjD,KAAA,WAAAhH,KAAA87E,YAAA1wC,EAAAif,MAAArjD,KAAA,eAAAhH,KAAA87E,YAAA1wC,EAAAif,MAAArjD,KAAA,eAAAhH,KAAA6gF,UAEA7gF,KAAA87E,YAAA1wC,EAAAo3C,WAAAxiF,KAAA6gF,YACA7gF,KAAA87E,YAAA1wC,EAAAo3C,WAAAxiF,KAAA6gF,WAEA7gF,KAAA87E,YAAA1wC,EAAAq3C,WAAAziF,KAAA6gF,YACA7gF,KAAA87E,YAAA1wC,EAAAq3C,WAAAziF,KAAA6gF,WAGA7gF,KAAA87E,YAAA1wC,EAAAs3C,QAAA1iF,KAAA87E,YAAA1wC,EAAAo3C,WAAAxiF,KAAA87E,YAAA1wC,EAAAs3C,SAAA1iF,KAAA87E,YAAA1wC,EAAAq3C,WAAAziF,KAAA87E,YAAA1wC,EAAAs3C,UAmBA,IAjBA1iF,KAAA87E,YAAA1wC,EAAAif,MAAAr/B,IAAA,QAAAhrB,KAAA2iF,gBAAA3iF,KAAA87E,YAAA1wC,EAAAs3C,UACA1iF,KAAAqiF,qBAAAriF,KAAA87E,YAAA1wC,EAAAlZ,MAAAlyB,KAAA87E,YAAA1wC,EAAAs3C,SAAA1iF,KAAA87E,YAAA1wC,EAAAif,MAAAjzB,cAEAp3B,KAAAghF,qBAAAhhF,KAAA87E,YAAA1wC,EAAAlZ,MAAAhxB,KAAAlB,KAAA87E,YAAA1wC,EAAAs3C,SACA1iF,KAAAihF,+BAAAjhF,KAAA87E,YAAA1wC,EAAAlZ,MAAAlyB,KAAA87E,YAAA1wC,EAAAs3C,SAAA,GAEA1iF,KAAA87E,YAAA1wC,EAAAm3C,cACAviF,KAAA87E,YAAA1wC,EAAAw3C,YAAA,EACA5iF,KAAA87E,YAAA1wC,EAAAy3C,YAAA,GACA7iF,KAAA87E,YAAA1wC,EAAAk3C,eACAtiF,KAAA87E,YAAA1wC,EAAAw3C,YAAA5iF,KAAA6gF,UAAA7gF,KAAA87E,YAAA1wC,EAAAs3C,QACA1iF,KAAA87E,YAAA1wC,EAAAy3C,YAAA7iF,KAAA87E,YAAA1wC,EAAAw3C,cAEA5iF,KAAA87E,YAAA1wC,EAAAw3C,YAAA,EACA5iF,KAAA87E,YAAA1wC,EAAAy3C,YAAA7iF,KAAA6gF,UAAA7gF,KAAA87E,YAAA1wC,EAAAs3C,SAGA1iF,KAAA87E,YAAA1wC,EAAA5O,SAAAx8B,KAAA87E,YAAA1wC,EAAAw3C,YAAA5iF,KAAA87E,YAAA1wC,EAAA5O,UAAAx8B,KAAA87E,YAAA1wC,EAAAy3C,YAAA7iF,KAAA87E,YAAA1wC,EAAA5O,WACAx8B,KAAAihF,+BAAAjhF,KAAA87E,YAAA1wC,EAAAlZ,MAAAlyB,KAAA87E,YAAA1wC,EAAAs3C,SAAAxhF,KAAAlB,KAAA87E,YAAA1wC,EAAA5O,UASA,IAFAx8B,KAAA87E,YAAA1wC,EAAA03C,WAAA,GAEA9iF,KAAA87E,YAAA1wC,EAAA1rC,EAAA,EAAAM,KAAA87E,YAAA1wC,EAAA1rC,EAAAM,KAAA6gF,UAAA7gF,KAAA87E,YAAA1wC,EAAA1rC,IACAM,KAAA87E,YAAA1wC,EAAA03C,WAAA5hF,KAAA,GAUA,IAPAlB,KAAA+iF,cAAA,EAAA,GAAA,GAAA/iF,KAAA87E,YAAA1wC,EAAA03C,WAAA,GAKA9iF,KAAA87E,YAAA1wC,EAAA43C,gBAAA,GAEAhjF,KAAA87E,YAAA1wC,EAAA1rC,EAAA,EAAAM,KAAA87E,YAAA1wC,EAAA1rC,EAAAM,KAAAohF,QAAA9gF,OAAAN,KAAA87E,YAAA1wC,EAAA1rC,IAGA,IAFAM,KAAA87E,YAAA1wC,EAAA43C,gBAAAhjF,KAAA87E,YAAA1wC,EAAA1rC,GAAA,EAEAM,KAAA87E,YAAA1wC,EAAA4qB,EAAA,EAAAh2D,KAAA87E,YAAA1wC,EAAA4qB,EAAAh2D,KAAA6gF,UAAA7gF,KAAA87E,YAAA1wC,EAAA4qB,IACAh2D,KAAAohF,QAAAphF,KAAA87E,YAAA1wC,EAAA1rC,GAAAojF,WAAA9iF,KAAA87E,YAAA1wC,EAAA4qB,IACAh2D,KAAA87E,YAAA1wC,EAAA43C,gBAAAhjF,KAAA87E,YAAA1wC,EAAA1rC,KAQA,IAHAM,KAAA87E,YAAA1wC,EAAA63C,iBAAAtyE,KAAA+Y,IAAAm2B,MAAA,KAAA7/C,KAAA87E,YAAA1wC,EAAA43C,iBAGAhjF,KAAA87E,YAAA1wC,EAAA1rC,EAAAM,KAAAohF,QAAA9gF,OAAA,EAAAN,KAAA87E,YAAA1wC,EAAA1rC,GAAA,EAAAM,KAAA87E,YAAA1wC,EAAA1rC,IACAM,KAAA87E,YAAA1wC,EAAA43C,gBAAAhjF,KAAA87E,YAAA1wC,EAAA1rC,KAAAM,KAAA87E,YAAA1wC,EAAA63C,kBACAjjF,KAAAohF,QAAA9xE,OAAAtP,KAAA87E,YAAA1wC,EAAA1rC,EAAA,GAOA,IAFAM,KAAA87E,YAAA1wC,EAAA83C,cAAA,GAEAljF,KAAA87E,YAAA1wC,EAAA1rC,EAAA,EAAAM,KAAA87E,YAAA1wC,EAAA1rC,EAAAM,KAAAohF,QAAA9gF,OAAAN,KAAA87E,YAAA1wC,EAAA1rC,IACAM,KAAA87E,YAAA1wC,EAAA83C,cAAAhiF,KAAAyP,KAAA+Y,IAAAm2B,MAAA,KAAA7/C,KAAAohF,QAAAphF,KAAA87E,YAAA1wC,EAAA1rC,GAAAojF,aAOA,IAJA9iF,KAAA87E,YAAA1wC,EAAA+3C,eAAAxyE,KAAAohB,IAAA8tB,MAAA,KAAA7/C,KAAA87E,YAAA1wC,EAAA83C,eACAljF,KAAA87E,YAAA1wC,EAAAg4C,gBAAA,GACApjF,KAAA87E,YAAA1wC,EAAAi4C,YAAA,GAEArjF,KAAA87E,YAAA1wC,EAAA1rC,EAAA,EAAAM,KAAA87E,YAAA1wC,EAAA1rC,EAAAM,KAAA87E,YAAA1wC,EAAA83C,cAAA5iF,OAAAN,KAAA87E,YAAA1wC,EAAA1rC,IACA,GAAAM,KAAA87E,YAAA1wC,EAAA83C,cAAAljF,KAAA87E,YAAA1wC,EAAA1rC,KAAAM,KAAA87E,YAAA1wC,EAAA+3C,eAAA,CAMA,IALAnjF,KAAA87E,YAAA1wC,EAAAg4C,gBAAAliF,KAAAlB,KAAAohF,QAAAphF,KAAA87E,YAAA1wC,EAAA1rC,IAGAM,KAAA87E,YAAA1wC,EAAAk4C,WAAAtjF,KAAAohF,QAAAphF,KAAA87E,YAAA1wC,EAAA1rC,GAAA4jF,WAEAtjF,KAAA87E,YAAA1wC,EAAA4qB,EAAA,EAAAh2D,KAAA87E,YAAA1wC,EAAA4qB,EAAAh2D,KAAA6gF,UAAA7gF,KAAA87E,YAAA1wC,EAAA4qB,IACAh2D,KAAA87E,YAAA1wC,EAAAk4C,YAAAtjF,KAAA87E,YAAA1wC,EAAA+3C,eAAAnjF,KAAAohF,QAAAphF,KAAA87E,YAAA1wC,EAAA1rC,GAAAojF,WAAA9iF,KAAA87E,YAAA1wC,EAAA4qB,GAGAh2D,KAAA87E,YAAA1wC,EAAAi4C,YAAAniF,KAAAlB,KAAA87E,YAAA1wC,EAAAk4C,YAQA,IAHAtjF,KAAAqhF,OAAArhF,KAAA87E,YAAA1wC,EAAAg4C,gBAAAzkF,EAAAsO,QAAA0D,KAAAohB,IAAA8tB,MAAA,KAAA7/C,KAAA87E,YAAA1wC,EAAAi4C,aAAArjF,KAAA87E,YAAA1wC,EAAAi4C,cAGArjF,KAAA87E,YAAA1wC,EAAA1rC,EAAA,EAAAM,KAAA87E,YAAA1wC,EAAA1rC,EAAAM,KAAAmyB,MAAA7xB,OAAAN,KAAA87E,YAAA1wC,EAAA1rC,IACAM,KAAA87E,YAAA1wC,EAAApgB,IAAA,CACAgc,MAAAhnC,KAAA2iF,gBAAA3iF,KAAAqhF,OAAAkC,SAAAvjF,KAAA87E,YAAA1wC,EAAA1rC,KAEAM,KAAA87E,YAAA1wC,EAAApgB,IAAA9rB,MAAAuY,MAAAzX,KAAAwjF,kBAAAxjF,KAAAqhF,OAAAoC,UAAAzjF,KAAA87E,YAAA1wC,EAAA1rC,IACAM,KAAAmyB,MAAAnyB,KAAA87E,YAAA1wC,EAAA1rC,GAAAsrB,IAAAhrB,KAAA87E,YAAA1wC,EAAApgB,KAIAhrB,KAAA0jF,kBACA1jF,KAAA4S,WAAAqY,OAAA,QACAjrB,KAAA0mB,OAAAsE,IAAA,CACAwR,SAAA,WACArF,IAAA,EACAwsD,gBAAA3jF,KAAAgU,SAAA+tE,OAAA,SAGA/hF,KAAA0mB,OAAAsE,IAAA,WAAA,YAGAhrB,KAAA4jF,gBAGA5jF,KAAA0c,YAAA1c,KAAA0mB,OAAA,SAAA,iBAKA1mB,KAAA6jF,sBAGA7jF,KAAA0c,YAAA1c,KAAA4S,WAAA,SAAA5S,KAAA2hF,4BAEA3hF,KAAA8jF,qBAxNA9jF,KAAA6jF,2BAzBA7jF,KAAA6jF,2BAbA7jF,KAAA6jF,uBAiQAA,oBAAA,WAQA,QANA,IAAA7jF,KAAA87E,YAAA1wC,UACAprC,KAAA87E,YAAA1wC,EAGAprC,KAAAwhF,iBAAA,EAEAxhF,KAAAyhF,yBAAA,CACA,IAAAvzD,EAAAluB,KAAA0hF,8BACA1hF,KAAAyhF,0BAAA,EACAzhF,KAAA0hF,+BAAA,EAEAt8E,QAAA2Z,sBAAA,KACA/e,KAAA87E,YAAA5tD,OAKA61D,aAAA,SAAArB,GACA,OAAA1iF,KAAA+gF,YAAA2B,GAGAC,gBAAA,SAAAD,GACA,MAAA,QAAA1iF,KAAA+jF,aAAArB,GAAA,OAAA1iF,KAAA8gF,cAAA,OAGAkD,iBAAA,SAAAtB,GACA,OAAA1iF,KAAA+jF,aAAArB,GAAA,IAAA1iF,KAAA4S,WAAAo0B,QAAAhnC,KAAA8gF,eAGA0C,kBAAA,SAAAhnD,GACA,MAAA,SAAAx8B,KAAA+jF,aAAA,GAAA,QAAA/jF,KAAAgU,SAAA+tE,OAAA/hF,KAAA8gF,eAAA,SAAAtkD,EAAA,KAGAynD,mBAAA,SAAAznD,GACA,OAAAx8B,KAAA+jF,aAAA,GAAA,IAAA/jF,KAAA4S,WAAAo0B,SAAAhnC,KAAAgU,SAAA+tE,OAAA/hF,KAAA8gF,gBAAAtkD,GAGAumD,cAAA,SAAA7wD,EAAAgyD,EAAAC,EAAAC,EAAAC,GACA,IAAAnlF,MAAAsZ,KAAA8rE,gBAAAtkF,MAAA+iF,cAAA7wD,EAAAgyD,EAAAC,EAAAC,EAAAC,IAGAX,eAAA,WAGA,IAFA1jF,KAAA0jF,eAAAt4C,EAAA,GAEAprC,KAAA0jF,eAAAt4C,EAAA1rC,EAAA,EAAAM,KAAA0jF,eAAAt4C,EAAA1rC,EAAAM,KAAAqhF,OAAAoC,UAAAnjF,OAAAN,KAAA0jF,eAAAt4C,EAAA1rC,IACA,GAAA,IAAAM,KAAAqhF,OAAAoC,UAAAzjF,KAAA0jF,eAAAt4C,EAAA1rC,GAEA,cADAM,KAAA0jF,eAAAt4C,GACA,EAKA,cADAprC,KAAA0jF,eAAAt4C,GACA,GAGAw4C,cAAA,WAKA,IAJA5jF,KAAA4jF,cAAAx4C,EAAA,GAEAprC,KAAA4jF,cAAAx4C,EAAA03C,WAAA,GAEA9iF,KAAA4jF,cAAAx4C,EAAA1rC,EAAA,EAAAM,KAAA4jF,cAAAx4C,EAAA1rC,EAAAM,KAAA6gF,UAAA7gF,KAAA4jF,cAAAx4C,EAAA1rC,IACAM,KAAA4jF,cAAAx4C,EAAA03C,WAAA5hF,KAAA,GAGA,IAAAlB,KAAA4jF,cAAAx4C,EAAA1rC,EAAA,EAAAM,KAAA4jF,cAAAx4C,EAAA1rC,EAAAM,KAAAmyB,MAAA7xB,OAAAN,KAAA4jF,cAAAx4C,EAAA1rC,IAAA,CAIA,IAHAM,KAAA4jF,cAAAx4C,EAAAm5C,UAAAvkF,KAAAqhF,OAAAoC,UAAAzjF,KAAA4jF,cAAAx4C,EAAA1rC,GAAAM,KAAAqhF,OAAAkC,SAAAvjF,KAAA4jF,cAAAx4C,EAAA1rC,GAAA,EACAM,KAAA4jF,cAAAx4C,EAAAo5C,mBAAA,GAEAxkF,KAAA4jF,cAAAx4C,EAAAknC,IAAAtyE,KAAAqhF,OAAAoC,UAAAzjF,KAAA4jF,cAAAx4C,EAAA1rC,GAAAM,KAAA4jF,cAAAx4C,EAAAknC,KAAAtyE,KAAA4jF,cAAAx4C,EAAAm5C,UAAAvkF,KAAA4jF,cAAAx4C,EAAAknC,MACAtyE,KAAA4jF,cAAAx4C,EAAAo5C,mBAAAtjF,KAAAlB,KAAA4jF,cAAAx4C,EAAA03C,WAAA9iF,KAAA4jF,cAAAx4C,EAAAknC,MAWA,IARAtyE,KAAA4jF,cAAAx4C,EAAAjU,IAAAxmB,KAAA+Y,IAAAm2B,MAAA,KAAA7/C,KAAA4jF,cAAAx4C,EAAAo5C,oBACAxkF,KAAA4jF,cAAAx4C,EAAAjU,IAAA,IACAn3B,KAAA4jF,cAAAx4C,EAAAjU,KAAAn3B,KAAAgU,SAAA+tE,QAGA/hF,KAAAmyB,MAAAnyB,KAAA4jF,cAAAx4C,EAAA1rC,GAAAsrB,IAAA,MAAAhrB,KAAA4jF,cAAAx4C,EAAAjU,KAGAn3B,KAAA4jF,cAAAx4C,EAAAknC,IAAAtyE,KAAAqhF,OAAAoC,UAAAzjF,KAAA4jF,cAAAx4C,EAAA1rC,GAAAM,KAAA4jF,cAAAx4C,EAAAknC,KAAAtyE,KAAA4jF,cAAAx4C,EAAAm5C,UAAAvkF,KAAA4jF,cAAAx4C,EAAAknC,MACAtyE,KAAA4jF,cAAAx4C,EAAA03C,WAAA9iF,KAAA4jF,cAAAx4C,EAAAknC,KAAAtyE,KAAA4jF,cAAAx4C,EAAAjU,IAAAn3B,KAAAqiF,qBAAAriF,KAAA4jF,cAAAx4C,EAAA1rC,GAAAM,KAAAqhF,OAAAkC,SAAAvjF,KAAA4jF,cAAAx4C,EAAA1rC,IAKAM,KAAA4S,WAAAqY,OAAAta,KAAA+Y,IAAAm2B,MAAA,KAAA7/C,KAAA4jF,cAAAx4C,EAAA03C,oBAEA9iF,KAAA4jF,cAAAx4C,GAGAq5C,aAAA,SAAAprE,GACArZ,KAAAykF,aAAAr5C,EAAA,GAGA/xB,EAAA6X,kBAEAlxB,KAAAykF,aAAAr5C,EAAAlZ,KAAAvzB,EAAAsO,QAAAoM,EAAAE,cAAAvZ,KAAA0mB,SAEA,IAAA1mB,KAAAykF,aAAAr5C,EAAAlZ,OAEAlyB,KAAAykF,aAAAr5C,EAAAs5C,UAAA1kF,KAAAmyB,MAAAnyB,KAAAykF,aAAAr5C,EAAAlZ,MAAAkF,cAEAp3B,KAAAykF,aAAAr5C,EAAAs5C,YAAA1kF,KAAAqiF,qBAAAriF,KAAAykF,aAAAr5C,EAAAlZ,MAAAlyB,KAAAqhF,OAAAkC,SAAAvjF,KAAAykF,aAAAr5C,EAAAlZ,SACAlyB,KAAAqiF,qBAAAriF,KAAAykF,aAAAr5C,EAAAlZ,MAAAlyB,KAAAqhF,OAAAkC,SAAAvjF,KAAAykF,aAAAr5C,EAAAlZ,OAAAlyB,KAAAykF,aAAAr5C,EAAAs5C,UACA1kF,KAAA4jF,eAAA,YAIA5jF,KAAAykF,aAAAr5C,GAGA04C,cAAA,WACA9jF,KAAAiX,QAAA,eACAjX,KAAAgU,SAAA8vE,kBAEA,CACAtoE,SAAA,CACAxD,aAAA,QACAC,KAAA,KACAC,QAAA,KACAC,YAAA,IACA4pE,OAAA,GACA1pE,SAAA,MACAC,SAAA,MACAC,WAAA,KAEAurE,cAAAnlF,EAAA0hB,QAIAnhB,MAAAsZ,KAAA8rE,gBAAAl/E,QAAAyV,KAAA5b,OAAA,CACA4T,KAAA,KACAu4B,EAAA,KAEA7vB,KAAA,SAAA1I,GACA7S,KAAA6S,KAAAA,GAGAkwE,cAAA,SAAA7wD,EAAAgyD,EAAAC,EAAAC,EAAAC,GAIA,IAHArkF,KAAAorC,EAAA,GAGAprC,KAAAorC,EAAAvpC,EAAA,EAAA7B,KAAAorC,EAAAvpC,EAAA7B,KAAA6S,KAAAmuE,qBAAA9uD,GAAA5xB,OAAAN,KAAAorC,EAAAvpC,IAAA,CAQA,IAPA7B,KAAAorC,EAAAs3C,QAAA1iF,KAAA6S,KAAAmuE,qBAAA9uD,GAAAlyB,KAAAorC,EAAAvpC,GAKA7B,KAAAorC,EAAAu5C,4BAAA,GAEA3kF,KAAAorC,EAAAhpC,EAAA,EAAApC,KAAAorC,EAAAhpC,EAAApC,KAAA6S,KAAAouE,+BAAA/uD,GAAAlyB,KAAAorC,EAAAs3C,SAAApiF,OAAAN,KAAAorC,EAAAhpC,IAAA,CAMA,IALApC,KAAAorC,EAAA5O,SAAAx8B,KAAA6S,KAAAouE,+BAAA/uD,GAAAlyB,KAAAorC,EAAAs3C,SAAA1iF,KAAAorC,EAAAhpC,GAEApC,KAAAorC,EAAAw5C,sBAAA,GACA5kF,KAAAorC,EAAAm5C,UAAAvkF,KAAAorC,EAAA5O,SAAAx8B,KAAAorC,EAAAs3C,QAAA,EAEA1iF,KAAAorC,EAAAknC,IAAAtyE,KAAAorC,EAAA5O,SAAAx8B,KAAAorC,EAAAknC,KAAAtyE,KAAAorC,EAAAm5C,UAAAvkF,KAAAorC,EAAAknC,MACAtyE,KAAAorC,EAAAw5C,sBAAA1jF,KAAAkjF,EAAApkF,KAAAorC,EAAAknC,MAGAtyE,KAAAorC,EAAAu5C,4BAAA3kF,KAAAorC,EAAAhpC,GAAAuO,KAAA+Y,IAAAm2B,MAAA,KAAA7/C,KAAAorC,EAAAw5C,uBAoBA,IAhBA5kF,KAAAorC,EAAAhpC,EAAAzD,EAAAsO,QAAA0D,KAAAohB,IAAA8tB,MAAA,KAAA7/C,KAAAorC,EAAAu5C,6BAAA3kF,KAAAorC,EAAAu5C,6BACA3kF,KAAAorC,EAAA5O,SAAAx8B,KAAA6S,KAAAouE,+BAAA/uD,GAAAlyB,KAAAorC,EAAAs3C,SAAA1iF,KAAAorC,EAAAhpC,GAGApC,KAAAorC,EAAAq4C,UAAAS,EAAAnjF,MAAA,GACAf,KAAAorC,EAAAm4C,SAAAY,EAAApjF,MAAA,GACAf,KAAAorC,EAAA03C,WAAAsB,EAAArjF,MAAA,GACAf,KAAAorC,EAAAk4C,WAAAe,EAEArkF,KAAAorC,EAAAq4C,UAAAviF,KAAAlB,KAAAorC,EAAA5O,UACAx8B,KAAAorC,EAAAm4C,SAAAriF,KAAAlB,KAAAorC,EAAAs3C,SAGA1iF,KAAAorC,EAAAy5C,iBAAA7kF,KAAAorC,EAAAu5C,4BAAA3kF,KAAAorC,EAAAhpC,GACApC,KAAAorC,EAAAm5C,UAAAvkF,KAAAorC,EAAA5O,SAAAx8B,KAAAorC,EAAAs3C,QAAA,EAEA1iF,KAAAorC,EAAAknC,IAAAtyE,KAAAorC,EAAA5O,SAAAx8B,KAAAorC,EAAAknC,KAAAtyE,KAAAorC,EAAAm5C,UAAAvkF,KAAAorC,EAAAknC,MACAtyE,KAAAorC,EAAAk4C,YAAAtjF,KAAAorC,EAAAy5C,iBAAA7kF,KAAAorC,EAAA03C,WAAA9iF,KAAAorC,EAAAknC,KACAtyE,KAAAorC,EAAA03C,WAAA9iF,KAAAorC,EAAAknC,KAAAtyE,KAAAorC,EAAAy5C,iBAAA7kF,KAAA6S,KAAAwvE,qBAAAnwD,GAAAlyB,KAAAorC,EAAAs3C,SAIAxwD,IAAAlyB,KAAA6S,KAAAsf,MAAA7xB,OAAA,EACAN,KAAA6S,KAAAuuE,QAAAlgF,KAAA,CACAuiF,UAAAzjF,KAAAorC,EAAAq4C,UACAF,SAAAvjF,KAAAorC,EAAAm4C,SACAT,WAAA9iF,KAAAorC,EAAA03C,WACAQ,WAAAtjF,KAAAorC,EAAAk4C,aAIAtjF,KAAA6S,KAAAkwE,cAAA7wD,EAAA,EAAAlyB,KAAAorC,EAAAq4C,UAAAzjF,KAAAorC,EAAAm4C,SAAAvjF,KAAAorC,EAAA03C,WAAA9iF,KAAAorC,EAAAk4C,mBAIAtjF,KAAAorC,KCriBAlsC,MAAA20E,gBAAA30E,MAAAs/B,mBAAAv/B,OAAA,CACAqgC,oBAAA,SAAAF,GAEA,IAAArJ,EAAAqJ,EAAApgC,QAAA,aAAA,IAMA+2B,GAHAA,EAAAA,EAAA/2B,QAAA,yBAAA,KAGA4Q,cAGAmmB,EAAA72B,MAAAgS,YAAA6kB,GAEA/1B,KAAAgU,SAAA8/D,qBAEA/9C,EAAAA,EAAA/2B,QAAA,WAAA,KAIA,IAAA8lF,EAAA5lF,MAAA+P,YAAA8mB,EAAA50B,MAAA,eAGA,GAFA40B,EAAA,GAEA,UAAA72B,MAAA6lF,aACA,OAAAD,EAAArkF,KAAA,KAIA,IAAA,IAAAf,EAAA,EAAAA,EAAAolF,EAAAxkF,OAAAZ,IACA,WAAAR,MAAA6lF,cAAA,IAAArlF,EACAq2B,GAAA+uD,EAAAplF,GAEAq2B,GAAA+uD,EAAAplF,GAAA+P,OAAA,GAAAC,cAAAo1E,EAAAplF,GAAAiC,OAAA,GAIA,OAAAo0B,KCnCA72B,MAAA8lF,YAAA5/E,QAAAyV,KAAA5b,OAAA,CACA2T,WAAA,KACAuoC,YAAA,KACAF,SAAA,KAEA1/B,KAAA,SAAAvH,GACAhU,KAAA8Y,YAAA9E,EAAA9U,MAAA8lF,YAAAxpE,UACAxb,KAAAilF,mBAGAA,gBAAA,WACAjlF,KAAA4S,WAAAjU,EAAAqB,KAAAgU,SAAAkxE,mBACAllF,KAAAm7C,YAAA,IAAAj8C,MAAAsiD,YAAA7iD,EAAA,sCAAA2P,SAAAtO,KAAA4S,aAEA,IAAA1L,EAAA,CACA5B,IAAApG,MAAAmH,aAAArG,KAAAgU,SAAAmxE,cACAv9B,SAAA5nD,KAAAgU,SAAAoxE,eACA3jC,UAAAzhD,KAAA4S,WAAAgD,KAAA5V,KAAAgU,SAAAqxE,mBACA/3E,UAAAtN,KAAAgU,SAAAsxE,sBAIA,IAAApmF,MAAA0H,oBAAA,IAAA1H,MAAA2H,iBAEAK,EAAA0gD,SAAA1oD,MAAA0H,eAAA1H,MAAA2H,gBAGAK,EAAAy6C,OAAA,GACAz6C,EAAAy6C,OAAAC,gBAAA5hD,KAAA6hD,eAAA1lC,KAAAnc,MACAkH,EAAAy6C,OAAAG,sBAAA9hD,KAAA+hD,kBAAA5lC,KAAAnc,MACAkH,EAAAy6C,OAAAK,eAAAhiD,KAAAiiD,kBAAA9lC,KAAAnc,MACAkH,EAAAy6C,OAAA4jC,eAAAvlF,KAAAwlF,eAAArpE,KAAAnc,MAEAA,KAAAi7C,SAAA,IAAA/7C,MAAAkjD,SAAApiD,KAAA4S,WAAA1L,GAEAlH,KAAAylF,eAGAA,YAAA,WACAzlF,KAAA4S,WAAAgD,KAAA5V,KAAAgU,SAAA0xE,sBAAAtsE,GAAA,QAAAC,IACArZ,KAAA4S,WAAAgD,KAAA5V,KAAAgU,SAAAqxE,mBAAApuE,QAAA,WAGAjX,KAAA4S,WAAAgD,KAAA5V,KAAAgU,SAAA2xE,sBAAAvsE,GAAA,QAAAC,IACAxC,QAAA3X,MAAAS,EAAA,MAAA,kDACAhB,EAAA0a,EAAAE,eAAA+K,SAAAjS,OAAA,sCACAnT,MAAA4H,kBAAA9G,KAAAgU,SAAAytB,aAAAzhC,KAAAgU,SAAAoxE,eAAA,CAAA36E,EAAA5C,KACA,YAAAA,GACA7H,KAAA4lF,aAAAn7E,SAOAm7E,aAAA,SAAAn7E,GACA9L,EAAAqB,KAAAgU,SAAAkxE,mBAAAzuE,YAAAhM,EAAA1L,MACAiB,KAAAgU,SAAA6xE,oBAAAp7E,GACAzK,KAAAilF,mBAMApjC,eAAA,SAAA1gB,GACAnhC,KAAAm7C,YAAAJ,aAAA/vB,IAAA,CACAmM,IAAAxmB,KAAAK,MAAAhR,KAAA4S,WAAAwkB,cAAA,GAAA,IAGAp3B,KAAA4S,WAAAd,SAAA,aACA9R,KAAAm7C,YAAAqD,mBACAx+C,KAAAm7C,YAAAuD,mBAMAqD,kBAAA,SAAA5gB,EAAAn6B,GACA,IAAA47C,EAAA1gD,SAAA8E,EAAA67C,OAAA77C,EAAA4qB,MAAA,IAAA,IACA5xB,KAAAm7C,YAAA2H,sBAAAF,IAMAX,kBAAA,SAAA9gB,EAAAn6B,GACA,GAAAA,EAAAyK,OAAA7J,MACAM,MAAAlB,EAAAyK,OAAA7J,WACA,CACAjJ,EAAAqI,EAAAyK,OAAA1S,MACAiB,KAAA4lF,aAAA5+E,EAAAyK,QAIAzR,KAAAi7C,SAAAiI,iBACAljD,KAAAm7C,YAAAiE,kBACAp/C,KAAA4S,WAAAwD,YAAA,eAOAovE,eAAA,SAAArkD,EAAAn6B,GACAA,EAAAM,MAAAqkD,aAAA/jD,QACAM,MAAAlB,EAAAM,MAAAqkD,aAAA/jD,OACA5H,KAAA4S,WAAAwD,YAAA,aACApW,KAAAm7C,YAAAiE,kBACAp/C,KAAAm7C,YAAAqD,sBAGA,CACAhjC,SAAA,CACA4pE,eAAA,GACAD,aAAA,GACA1jD,aAAA,GACA4jD,kBAAA,GAEAQ,oBAAAlnF,EAAA0hB,KACA6kE,kBAAA,KAEAQ,qBAAA,KACAC,qBAAA,KAEAL,gBAAA,WC7HApmF,MAAAuZ,SAAArT,QAAAyV,KAAA5b,OAAA,CACA6mF,MAAA,KACA7lB,QAAA,KACA3kD,IAAA,KAEAC,KAAA,SAAAkS,GAoBA,GAnBAztB,KAAA8lF,MAAAnnF,EAAA8uB,GAEAztB,KAAA8lF,MAAA9+E,KAAA,aACA5B,QAAA8qE,IAAA,mDACAlwE,KAAAigE,QAAAjgE,KAAA8lF,MAAA9+E,KAAA,YAAAi5D,QACAjgE,KAAA8lF,MAAA9+E,KAAA,YAAA0jB,YAEA1qB,KAAAigE,QAAAjgE,KAAA8lF,MAAA/mF,OACAiB,KAAA8lF,MACA/mF,KAAA,IACAmP,KAAA,CACAwkB,SAAA,EACAD,KAAA,SACApY,aAAAnb,MAAAS,EAAA,MAAA,kBAIAK,KAAA8lF,MAAA9+E,KAAA,WAAAhH,MAEAA,KAAA8lF,MAAA,GAAAC,iBAAA/lF,KAAA8lF,MAAA,GAAAC,gBAAAC,WAAAC,KAAAC,UAAA,CAGA,IADAlmF,KAAA8lF,MAAAxhE,SACA3O,SAAA,UAAA,CAEA,MAAA9H,EAAA7N,KAAA8lF,MAAA,GAAAC,gBAAAI,UAAAxgF,MAAA,gBACAkI,IACA7N,KAAA8lF,MAAA,GAAAC,gBAAAI,UAAAnmF,KAAA8lF,MAAA,GAAAC,gBAAAI,UAAAxkF,OAAA,EAAAkM,EAAAzO,OACAT,EAAA,UAAA,CACAwb,MAAA,SACApb,KAAA8O,EAAA,GAAA7O,QAAA,OAAA,IAAA,MAEAw2B,YAAAx1B,KAAA8lF,MAAA,GAAAC,iBACA1zE,OAAArS,KAAA8lF,SAKA9lF,KAAA0c,YAAA1c,KAAA8lF,MAAA,QAAAzsE,IACAA,EAAAqM,iBACArM,EAAA6X,kBACAlxB,KAAAkc,YAGAlc,KAAA0c,YAAA1c,KAAA8lF,MAAA,UAAAzsE,IACArZ,KAAAsb,KAAAtb,KAAAsb,IAAAyE,UAAA,CAAA3a,QAAA0tB,UAAA1tB,QAAAqgB,YAAArW,SAAAiK,EAAA2G,WACA3G,EAAAqM,iBACArM,EAAA6X,kBACAlxB,KAAAkc,cAKAA,QAAA,SAAA7C,GACArZ,KAAAsb,IAYAtb,KAAAsb,IAAAuf,QAXA76B,KAAAsb,IAAA,IAAAlW,QAAA+X,IAAAnd,KAAA8lF,MAAA9lF,KAAAigE,QAAA,CACAmmB,SAAA,eACA/oE,gBAAA,EACAG,OAAA,KACApY,QAAA0Y,gBAAAC,iBAAA3Y,QAAA0tB,UAAA,KACA9yB,KAAAsb,IAAA+C,YAIAnf,MAAAyT,eAAA3S,KAAAsb,IAAA8C,WCrEAlf,MAAAga,YAAA9T,QAAAyV,KAAA5b,OAAA,CACA+U,SAAA,KACAwwC,gBAAA,KACAC,gBAAA,KACApgD,OAAA,KACAouE,OAAA,EACAr5D,IAAA,EACAitE,eAAA,EACAC,QAAA,KAEAC,gBAAA,KAEAhrE,KAAA,SAAAirE,EAAAxyE,GAmBA,GAlBAhU,KAAAwkD,gBAAA7lD,EAAA6nF,GAGAxmF,KAAAwkD,gBAAAx9C,KAAA,iBACA5B,QAAA8qE,IAAA,oDACAlwE,KAAAwkD,gBAAAx9C,KAAA,eAAA0jB,WAGA1qB,KAAAwkD,gBAAAx9C,KAAA,cAAAhH,MAEAA,KAAAyyE,MAAAzyE,KAAAwkD,gBAAA7uC,SAAA,SAEA3V,KAAA8Y,YAAA9E,EAAA9U,MAAAga,YAAAsC,UAEAxb,KAAAykD,gBAAAzkD,KAAAwkD,gBAAA5uC,KAAA,gCACA5V,KAAAqE,OAAArE,KAAAwkD,gBAAA5uC,KAAA,eAGA5V,KAAAqE,OAAA8xB,KAAA,YACA,OAGAn2B,KAAAoZ,GAAApZ,KAAAwkD,gBAAA7uC,SAAA,MACA3V,KAAAqmF,cAAArmF,KAAAwkD,gBAAA7uC,SAAA,iBAEA3V,KAAA0c,YAAA1c,KAAAwkD,gBAAA,YAAA,gBACAxkD,KAAA0c,YAAA1c,KAAAwkD,gBAAA,UAAA,cAEAxkD,KAAAsmF,QAAA,IAAAlhF,QAAAq4E,SAAAz9E,KAAAwkD,gBAAA,CACAtrB,KAAA9zB,QAAAqhF,OACAxtD,qBAAA,KACA8jB,YAAA/8C,KAAAg9C,aAAA7gC,KAAAnc,MACAk/E,OAAAl/E,KAAA0mF,QAAAvqE,KAAAnc,MACAm9C,WAAAn9C,KAAA2mF,YAAAxqE,KAAAnc,QAIA,IAAA8Z,EAAA9Z,KAAAwkD,gBAAAlgC,OAAA,gCACAxK,EAAAxZ,SACAN,KAAA0c,YAAA5C,EAAAI,SAAA,2BAAA,QAAAla,KAAAyrE,SACAzrE,KAAA0c,YAAA5C,EAAAI,SAAA,0BAAA,QAAAla,KAAAwrE,UAIAA,OAAA,SAAAob,GACA,IAAAC,GAAA7mF,KAAAoZ,GAEApZ,KAAAoZ,IAAA,EACApZ,KAAAqmF,eAAA,EAEArmF,KAAAwkD,gBAAA1yC,SAAA,YACA,IAAAuoB,EAAA,GACAA,EAAA,UAAAn7B,MAAAuY,MAAA,EACAzX,KAAAykD,gBAAAjtC,SAAA,QAAAA,SAAA6iB,EAAAn7B,MAAAga,YAAA21B,kBAAA7uC,KAAA8mF,UAAA3qE,KAAAnc,OAEAA,KAAAqE,OAAAC,IAAAtE,KAAAgU,SAAA7O,OACAnF,KAAAwkD,gBAAA1yC,SAAA,MACA9R,KAAAwkD,gBAAApuC,YAAA,iBACApW,KAAAwkD,gBAAAt2C,KAAA,eAAA,QAEA24E,IAAA,IAAAD,GACA5mF,KAAA8rC,YAIA2/B,QAAA,SAAAmb,GACA,IAAAC,EAAA7mF,KAAAoZ,IAAApZ,KAAAqmF,cAEArmF,KAAAoZ,IAAA,EACApZ,KAAAqmF,eAAA,EAEArmF,KAAAwkD,gBAAA1yC,SAAA,YACA,IAAAuoB,EAAA,GACAA,EAAA,UAAAn7B,MAAAuY,MAAAzX,KAAA+mF,gBACA/mF,KAAAykD,gBAAAjtC,SAAA,QAAAA,SAAA6iB,EAAAn7B,MAAAga,YAAA21B,kBAAA7uC,KAAA8mF,UAAA3qE,KAAAnc,OAEAA,KAAAqE,OAAAC,IAAA,IACAtE,KAAAwkD,gBAAApuC,YAAA,MACApW,KAAAwkD,gBAAApuC,YAAA,iBACApW,KAAAwkD,gBAAAt2C,KAAA,eAAA,SAEA24E,IAAA,IAAAD,GACA5mF,KAAA8rC,YAIA4/B,kBAAA,SAAAkb,GACA,IAAAC,GAAA7mF,KAAAqmF,cAEArmF,KAAAoZ,IAAA,EACApZ,KAAAqmF,eAAA,EAEArmF,KAAAwkD,gBAAA1yC,SAAA,YACA,IAAAuoB,EAAA,GACAA,EAAA,UAAAn7B,MAAAuY,MAAAzX,KAAA+mF,gBAAA,EACA/mF,KAAAykD,gBAAAjtC,SAAA,QAAAA,SAAA6iB,EAAAn7B,MAAAga,YAAA21B,kBAAA7uC,KAAA8mF,UAAA3qE,KAAAnc,OAEAA,KAAAqE,OAAAC,IAAAtE,KAAAgU,SAAAiF,oBACAjZ,KAAAwkD,gBAAApuC,YAAA,MACApW,KAAAwkD,gBAAA1yC,SAAA,iBACA9R,KAAAwkD,gBAAAt2C,KAAA,eAAA,SAEA24E,IAAA,IAAAD,GACA5mF,KAAA8rC,YAIA4nC,OAAA,WACA1zE,KAAAqmF,gBAAArmF,KAAAoZ,GACApZ,KAAAwrE,SAEAxrE,KAAAyrE,WAIA3/B,SAAA,WACA9rC,KAAAiX,QAAA,UACAjX,KAAAgU,SAAA83B,SAAA9rC,KAAAoZ,IACApZ,KAAAwkD,gBAAAvtC,QAAA,WAGA+vE,aAAA,WACAhnF,KAAA0c,YAAAtX,QAAAuV,KAAA,UAAA,eAGAssE,WAAA,WACAjnF,KAAAqoB,eAAAjjB,QAAAuV,KAAA,WAGA3a,KAAAsmF,QAAAY,UACAlnF,KAAA0zE,UAIA5vB,WAAA,SAAA3iB,GACA,OAAAA,EAAAnhB,SACA,KAAA5a,QAAA0tB,UACA9yB,KAAA0zE,SACAvyC,EAAAzb,iBACA,MAEA,KAAAtgB,QAAA8sD,UACA,QAAAhzD,MAAAqY,YACAvX,KAAAwrE,SAEAxrE,KAAAyrE,UAGAtqC,EAAAzb,iBACA,MAEA,KAAAtgB,QAAA6sD,SACA,QAAA/yD,MAAAqY,YACAvX,KAAAyrE,UAEAzrE,KAAAwrE,SAGArqC,EAAAzb,mBAMAyhE,WAAA,WACA,OAAAjlF,SAAAlC,KAAAykD,gBAAAz5B,IAAA,UAAA9rB,MAAAuY,QAGAulC,aAAA,WACAh9C,KAAAwkD,gBAAA1yC,SAAA,YACA9R,KAAAumF,gBAAAvmF,KAAAmnF,cAGAT,QAAA,WACA,IAAAx+B,GAGAA,EADA,QAAAhpD,MAAAqY,YACAvX,KAAAumF,gBAAAvmF,KAAAsmF,QAAAc,WAEApnF,KAAAumF,gBAAAvmF,KAAAsmF,QAAAc,YAGApnF,KAAA+mF,gBACA7+B,EAAAloD,KAAA+mF,gBACA7+B,EAAA,IACAA,EAAA,GAGAloD,KAAAykD,gBAAAz5B,IAAA,UAAA9rB,MAAAuY,KAAAywC,IAGAy+B,YAAA,WACA,IAAAz+B,EAAAloD,KAAAmnF,aACA5J,QAAArN,IAAAhoB,GAEAA,EAAAloD,KAAA+mF,gBAAA,EACA/mF,KAAAwrE,SAEAxrE,KAAAyrE,WAIAqb,UAAA,WACA9mF,KAAAwkD,gBAAApuC,YAAA,aAGAsU,QAAA,WACA1qB,KAAA4vB,OACA5vB,KAAAsmF,QAAA57D,WAGAq8D,cAAA,WACA,OAAA/mF,KAAAyyE,OAAA,IAAA,KAEA,CACA5jC,kBAAA,IACArzB,SAAA,CACArW,MAAA,IACA8T,mBAAA,IACA6yB,SAAAntC,EAAA0hB,QCxOAnhB,MAAA07E,QAAAx1E,QAAAyV,KAAA5b,OAAA,CACA2T,WAAA,KACAgS,SAAA,KACAi2D,gBAAA,KACAwM,oBAAA,KAEA9rE,KAAA,SAAAga,EAAAvhB,GACAhU,KAAA4S,WAAAjU,EAAA42B,GACAv1B,KAAA8Y,YAAA9E,EAAA9U,MAAA07E,QAAAp/D,UAGAxb,KAAA4S,WAAA5L,KAAA,aACA5B,QAAA8qE,IAAA,gDACAlwE,KAAA4S,WAAA5L,KAAA,WAAA0jB,WAGA1qB,KAAA4S,WAAA5L,KAAA,UAAAhH,MACAA,KAAA4kB,SAAA5kB,KAAA4S,WAAAgD,KAAA,iBAGA5V,KAAA66E,gBAAA76E,KAAA4kB,SAAAC,OAAA,wBACA7kB,KAAA66E,gBAAAv6E,OACAN,KAAAqnF,oBAAArnF,KAAA4kB,SAAAxlB,MAAAY,KAAA66E,iBAEA76E,KAAA66E,gBAAA,KAGA76E,KAAA0c,YAAA1c,KAAA4S,WAAA,UAAAyG,IACA,OAAAA,EAAA2G,SACA,KAAA5a,QAAAkiF,OACAtnF,KAAAunF,aACAluE,EAAAqM,iBACA,MACA,KAAAtgB,QAAAoiF,SACAxnF,KAAAynF,aACApuE,EAAAqM,iBACA,MACA,KAAAtgB,QAAA6sD,SACA,QAAA/yD,MAAAqY,YACAvX,KAAAunF,aAEAvnF,KAAAynF,aAEApuE,EAAAqM,iBACA,MACA,KAAAtgB,QAAA8sD,UACA,QAAAhzD,MAAAqY,YACAvX,KAAAynF,aAEAznF,KAAAunF,aAEAluE,EAAAqM,oBAKA1lB,KAAA0c,YAAA1c,KAAA4kB,SAAA,QAAAvL,IACArZ,KAAA6oD,OAAA7oD,KAAA4kB,SAAAxlB,MAAAT,EAAA0a,EAAAE,iBACAF,EAAAqM,oBAIAmjC,OAAA,SAAAzpD,GACAA,EAAA,GAAAA,GAAAY,KAAA4kB,SAAAtkB,QAAAlB,IAAAY,KAAAqnF,sBAIArnF,KAAA66E,gBACAzkE,YAAApW,KAAAgU,SAAA0zE,eACAx5E,KAAA,gBAAA,SAEAlO,KAAA66E,gBAAA76E,KAAA4kB,SAAAzS,GAAA/S,GACA0S,SAAA9R,KAAAgU,SAAA0zE,eACAx5E,KAAA,gBAAA,QAEAlO,KAAAqnF,oBAAAjoF,EAEAY,KAAAgU,SAAA83B,SAAA9rC,KAAA66E,gBAAAz7E,GACAY,KAAAiX,QAAA,SAAA,CACA4jE,gBAAA76E,KAAA66E,gBACAwM,oBAAAjoF,MAIAmoF,WAAA,WACA,OAAAvnF,KAAAqnF,oBACArnF,KAAA6oD,OAAA,GAEA7oD,KAAA6oD,OAAA7oD,KAAAqnF,oBAAA,IAIAI,WAAA,WACA,OAAAznF,KAAAqnF,oBACArnF,KAAA6oD,OAAA,GAEA7oD,KAAA6oD,OAAA7oD,KAAAqnF,oBAAA,KAGA,CACA7rE,SAAA,CACAksE,cAAA,SACAC,WAAA,QACA77C,SAAAntC,EAAA0hB,QCvGAnhB,MAAA0oF,YAAAxiF,QAAAyV,KAAA5b,OAAA,CACA4oF,aAAA,KACAxS,SAAA,KACAn3D,OAAA,KACAykB,iBAAA,KACAwqC,QAAA,KACA2a,YAAA,KACAC,kBAAA,KACAC,iBAAA,KACAC,QAAA,KACAC,kBAAA,KAEAC,WAAA,KACA5nF,MAAA,KACA6nF,aAAA,KACA92B,eAAA,EACA+2B,OAAA,KACAC,aAAA,KACAC,qBAAA,KACAC,SAAA,EACAC,YAAA,EAEAnC,QAAA,KACAoC,qBAAA,KAEAC,sBAAA,EACAC,wBAAA,KAEAC,SAAA,KACAC,SAAA,KAEAC,aAAA,KACAC,iBAAA,KAEAztE,KAAA,SAAAvH,GACAhU,KAAA8Y,YAAA9E,EAAA9U,MAAA0oF,YAAApsE,UAKAxb,KAAAgU,SAAAm0E,WACAnoF,KAAAmoF,WAAAnoF,KAAAgU,SAAAm0E,WAEAnoF,KAAAmoF,WAAAjpF,MAAAkH,YAAApH,QAAA,OAAA,IAAA,IAIA,WAAAwH,SAAAC,SAAAwiF,WACAjpF,KAAAmoF,WAAAnoF,KAAAmoF,WAAAnpF,QAAA,SAAA,WAIAgB,KAAAooF,aAAAzpF,EAAAM,OAAA,GAAAe,KAAAgU,SAAAk1E,eAEAlpF,KAAA4oF,wBAAA5oF,KAAAmpF,kBAAAhtE,KAAAnc,MAGAA,KAAA6nF,aAAAlpF,EAAAqB,KAAAgU,SAAAo1E,aACAppF,KAAAq1E,SAAA12E,EAAAqB,KAAAgU,SAAAiD,SACAjX,KAAAkoF,kBAAAvpF,EAAA,UAGAqB,KAAA2kC,YAAAzlC,MAAAqV,gBAAA,0BAAArV,MAAA0oF,YAAAyB,oBAGArpF,KAAA0c,YAAA1c,KAAAq1E,SAAA,WAAA,UAEAn2E,MAAA8I,GAAAoR,GAAA,qBAAA,KACApZ,KAAAsxD,eACAtxD,KAAAspF,oBAKA3kD,kBACA,OAAA3kC,KAAA+oF,cAGAQ,sBACA,OAAAvpF,KAAAgpF,kBAGArkD,gBAAAqC,GACA,IAAAwiD,EAGAxiD,GAAA,GACAwiD,EAAAxiD,EACAA,GAAA5hC,QAAA6xB,KAAA+P,SAEAwiD,EAAA74E,KAAAK,MAAAg2B,EAAA5hC,QAAA6xB,KAAA+P,SAIAwiD,EAAAtqF,MAAA0oF,YAAA6B,qBAEAziD,GADAwiD,EAAAtqF,MAAA0oF,YAAA6B,oBACArkF,QAAA6xB,KAAA+P,SAGAhnC,KAAA+oF,aAAA/hD,EACAhnC,KAAAgpF,iBAAAQ,GAGA9V,OAAA,WACA1zE,KAAAsxD,cACAtxD,KAAA0pF,OAEA1pF,KAAAu/D,SAIAA,MAAA,WACA,IAAAv/D,KAAAsxD,cAIA,GAAAtxD,KAAAO,MAAA,CASA,GAJAP,KAAAiX,QAAA,eAEAtY,EAAA6H,SAAA04B,eAAAjoB,QAAA,SAEAjX,KAAAmtE,QAAA,CACAntE,KAAAke,OAAAvf,EAAA,SAAA,CAAAwb,MAAA,qBAAA7L,SAAAlJ,QAAAsN,MACA1S,KAAA+nF,kBAAAppF,EAAA,SAAA,CAAAwb,MAAA,yBAAA7L,SAAAlJ,QAAAsN,MACA1S,KAAAgoF,iBAAArpF,EAAA,SAAA,CAAAwb,MAAA,wBAAA7L,SAAAtO,KAAA+nF,mBACA/nF,KAAA2iC,iBAAAhkC,EAAA,SAAA,CAAAwb,MAAA,wBAAA7L,SAAAlJ,QAAAsN,MAEA,IAAAi3E,EAAAhrF,EAAA,YAAA,CAAAwb,MAAA,SAAA7L,SAAAtO,KAAA2iC,kBACA3iC,KAAAmtE,QAAAxuE,EAAA,UAAA,CAAAwb,MAAA,cAAA7L,SAAAtO,KAAA2iC,kBACA3iC,KAAA8nF,YAAAnpF,EAAA,SAAA,CAAAwb,MAAA,kBAAA7L,SAAAtO,KAAA2iC,kBACA,IAAAinD,EAAAjrF,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,MACA9W,KAAAnE,MAAAS,EAAA,MAAA,mBACA2O,SAAAq7E,GACAhrF,EAAA,SAAA,CAAAwb,MAAA,cAAA7L,SAAAq7E,GACA,IAAAzuE,EAAAvc,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,aACA9W,KAAAnE,MAAAS,EAAA,MAAA,UACA2O,SAAAq7E,GAEA3pF,KAAAsmF,QAAA,IAAAlhF,QAAAq4E,SAAAz9E,KAAA8nF,YAAA,CACA5uD,KAAA9zB,QAAAqhF,OACA1pC,YAAA/8C,KAAAg9C,aAAA7gC,KAAAnc,MACAk/E,OAAAl/E,KAAA0mF,QAAAvqE,KAAAnc,MACAm9C,WAAAn9C,KAAA2mF,YAAAxqE,KAAAnc,QAGAA,KAAA0c,YAAAktE,EAAA,QAAA,QACA5pF,KAAA0c,YAAAxB,EAAA,QAAA,QAIAlb,KAAAmwD,qBACAnwD,KAAA0c,YAAAtX,QAAA6xB,KAAA,SAAA,sBAEAj3B,KAAA2iC,iBAAA3X,IAAA9rB,MAAAuY,MAAAzX,KAAAupF,gBAAA,MACAvpF,KAAA+nF,kBAAA/8D,IAAA9rB,MAAAwY,OAAA1X,KAAA6pF,kBAIA7pF,KAAAqoF,OAAA,GAGA,IAFA,IAAAtO,EAAAp7E,EAAAqB,KAAAgU,SAAAq0E,QAEA3oF,EAAA,EAAAA,EAAAq6E,EAAAz5E,OAAAZ,IAAA,CACA,IAAAyrE,EAAAxsE,EAAAo7E,EAAAr6E,IACAoqF,EAAA9pF,KAAA+pF,UAAA5e,GAIAnrE,KAAAkoF,kBAAA1yD,YAAA21C,GACAA,EAAApiD,SACA/oB,KAAAkoF,kBAAAzxE,YAAAqzE,GACA3e,EAAA78D,SAAAtO,KAAAmtE,SAEAntE,KAAAqoF,OAAAnnF,KAAA,CACAiqE,OAAAA,EACA2e,OAAAA,IAIA9pF,KAAAgqF,eACAhqF,KAAA2oF,sBAAA,EAEA3oF,KAAAiqF,UAGA7kF,QAAAgU,GAAAla,MAAAoV,kBAAA,cAAAtU,KAAA4oF,yBACAxjF,QAAAgU,GAAAla,MAAAmjC,iBAAA,OAAAriC,KAAA4oF,yBAEA1pF,MAAA02B,mBAAAihD,WAEA72E,KAAAsxD,eAAA,EACAtxD,KAAAiX,QAAA,cAjFAjX,KAAAkqF,eAoFAA,YAAA,WACAhrF,MAAA4H,kBAAA,4BAAA,CACAqjF,cAAAnqF,KAAAgU,SAAAm2E,eACA,CAAA1/E,EAAA5C,KACA,YAAAA,IACA7H,KAAAO,MAAAkK,EAAAlK,MACAP,KAAAu/D,YAKA7rB,KAAA,WACAx0C,MAAA8I,GAAA4oD,qBAGAT,mBAAA,WAEAnwD,KAAA2kC,YAAA3kC,KAAA2kC,YAGA3kC,KAAAoqF,gBAGAH,QAAA,WACAtrF,EAAA,QAAAmT,SAAA,YACA9R,KAAAke,OAAA1G,SAAA,UAEAxX,KAAA2iC,iBAAA9H,OAAArjB,SAAA,QAAAL,YAAA,EAAA,OAAA,KACAnX,KAAAiX,QAAA,WACA7R,QAAA6xB,KAAAhgB,QAAA,YAGAjX,KAAA+nF,kBAAAltD,OAAArjB,SAAA,QAAAG,aAAA,EAAA,OAAA,KACA3X,KAAAuoF,qBAAA/0C,YAAAxzC,KAAAgqF,aAAA7tE,KAAAnc,MAAA,KAEAA,KAAA0c,YAAAtX,QAAAsN,KAAA,SAAA,SAAA2G,GACAA,EAAA2G,UAAA5a,QAAA4Y,SACAhe,KAAA0pF,aAMAA,KAAA,WACA1pF,KAAAsxD,gBAIAtxD,KAAAiX,QAAA,cAEAtY,EAAA,QAAAyX,YAAA,YAEApW,KAAAqoB,eAAAjjB,QAAA6xB,KAAA,UACAj3B,KAAAqoB,eAAAjjB,QAAAsN,KAAA,SAEA1S,KAAAuoF,sBACAn0C,cAAAp0C,KAAAuoF,sBAGAvoF,KAAAspF,iBAEAtpF,KAAAke,OAAAoyC,MAAA,KAAA94C,SAAA,WAEAxX,KAAA2iC,iBAAAnrB,SAAA,QAAAL,aAAAnX,KAAAupF,gBAAA,OAAA,KACA,IAAA,IAAA7pF,EAAA,EAAAA,EAAAM,KAAAqoF,OAAA/nF,OAAAZ,IACAM,KAAAqoF,OAAA3oF,GAAA2qF,UAAA/vE,SAEAta,KAAA2iC,iBAAAtkB,OACAre,KAAAiX,QAAA,cAGAjX,KAAA+nF,kBAAAvwE,SAAA,QAAAG,cAAA3X,KAAA6pF,iBAAA,OAAA,KACA7pF,KAAA+nF,kBAAA1pE,SAGAjZ,QAAAuyB,IAAAz4B,MAAAoV,kBAAA,cAAAtU,KAAA4oF,yBAEA1pF,MAAA02B,mBAAAihD,WAEA72E,KAAAsxD,eAAA,EACAtxD,KAAAiX,QAAA,UAGAqyE,eAAA,WACA,IAAA,IAAA5pF,EAAA,EAAAA,EAAAM,KAAAqoF,OAAA/nF,OAAAZ,IAAA,CACA,IAAA4qF,EAAAtqF,KAAAqoF,OAAA3oF,GACA4qF,EAAAD,UAAArqF,KAAA+pF,UAAAO,EAAAnf,QAIAnrE,KAAAkoF,kBAAA1yD,YAAA80D,EAAAnf,QACAmf,EAAAnf,OAAApiD,SACA/oB,KAAAkoF,kBAAAzxE,YAAA6zE,EAAAD,WACAC,EAAAR,OAAArzE,YAAA6zE,EAAAnf,QAGA/lE,QAAA6xB,KAAAhgB,QAAA,WAGA4yE,eAAA,WACA,OAAAzkF,QAAA6xB,KAAA+P,QAAAhnC,KAAAupF,iBAGAa,aAAA,WACApqF,KAAA2iC,iBAAA3X,IAAA,QAAAhrB,KAAAupF,gBAAA,MACAvpF,KAAA+nF,kBAAA/gD,MAAAhnC,KAAA6pF,mBAGAG,aAAA,SAAA97D,GAKA,GAJAA,IACAluB,KAAAsoF,aAAA,OAGAtoF,KAAAsxD,cACA,OAAA,EAGA,GAAAtxD,KAAAwoF,QAEA,OADAxoF,KAAAyoF,YAAA,GACA,EAIA,IAAAh3C,EAAA9yC,EAAAM,OAAAmG,QAAA6qB,YAAAjwB,KAAAmtE,SAAA/nE,QAAA6qB,YAAAjwB,KAAA6nF,eAEA,GAAA7nF,KAAAsoF,cAAAppF,MAAAqP,QAAAkjC,EAAAzxC,KAAAsoF,cAAA,GA0BA,OAAA,EAzBAtoF,KAAAsoF,aAAA72C,EACAzxC,KAAAwoF,SAAA,EAEA,IAAA7tE,EAAA3a,KAAAioF,QAAAtpF,EAAAqB,KAAAioF,QAAA,GAAAsC,cAAA/jF,UAAA,KAoBA,OAlBAxG,KAAA6oF,SAAAluE,EAAAA,EAAA6vE,aAAA,EACAxqF,KAAA8oF,SAAAnuE,EAAAA,EAAAkQ,YAAA,EAEAlsB,EAAA4I,KAAA,CACAjC,IAAAtF,KAAAmoF,aAAA,IAAAnoF,KAAAmoF,WAAArnF,QAAA,KAAA,IAAA,KAAA5B,MAAAytE,WAAA,IAAA3sE,KAAAO,MACAyI,OAAA,OACAhC,KAAArI,EAAAM,OAAA,GAAAwyC,EAAAzxC,KAAAooF,cACA3gF,QAAA,CACAgjF,gBAAAzqF,KAAAO,OAEAmqF,UAAA,CACAC,iBAAA,GAEAC,aAAA,EACAjjF,QAAA3H,KAAA6qF,cAAA1uE,KAAAnc,MACA4H,MAAA5H,KAAA8qF,YAAA3uE,KAAAnc,SAGA,GAMAmpF,kBAAA,WACA,OAAAnpF,KAAAgqF,cAAA,IAGAa,cAAA,SAAA7jF,GACA,IAAAjI,EAAAiI,EACA,kDAAAhH,KAAA6oF,SAAA,KAAA7oF,KAAA8oF,SAAA,eAGAb,EAAAtpF,EAAA,gDACAqB,KAAAioF,QACAA,EAAA3mC,aAAAthD,KAAAioF,SAEAA,EAAA35E,SAAAtO,KAAAgoF,kBAGAhoF,KAAA0c,YAAAurE,EAAA,QAAA,WACAjoF,KAAAioF,SACAjoF,KAAAioF,QAAA3tE,SAEAta,KAAAioF,QAAAA,EAEAjoF,KAAA2oF,uBACA3oF,KAAAiqF,UACAjqF,KAAA2oF,sBAAA,GAGA3oF,KAAAqoB,eAAA4/D,EAAA,WAGA7iF,QAAA2Z,sBAAA,KACAkpE,EAAA,GAAAsC,cAAA/jF,SAAAxF,OACAinF,EAAA,GAAAsC,cAAA/jF,SAAAukF,MAAAhsF,GACAkpF,EAAA,GAAAsC,cAAA/jF,SAAAvF,QACAjB,KAAAgrF,gBAIAF,YAAA,WACA9qF,KAAAgrF,cAGAA,WAAA,WACAhrF,KAAAwoF,SAAA,EAEAxoF,KAAAyoF,aACAzoF,KAAAyoF,YAAA,EACAzoF,KAAAgqF,iBAIAD,UAAA,SAAA5e,GACA,IAAA2e,EAAA3e,EAAAlvC,QASA,OANA72B,QAAA6lF,gBAAA9f,EAAA2e,GAGAA,EAAA57E,KAAA,KAAA,IACA47E,EAAAl0E,KAAA,QAAA1H,KAAA,KAAA,IAEA47E,GAGA9sC,aAAA,WACAh9C,KAAA0oF,qBAAA1oF,KAAAupF,gBACAvpF,KAAA+nF,kBAAAj2E,SAAA,aAGA40E,QAAA,WACA,QAAAxnF,MAAAqY,YACAvX,KAAA2kC,YAAA3kC,KAAA0oF,qBAAA1oF,KAAAsmF,QAAAc,WAEApnF,KAAA2kC,YAAA3kC,KAAA0oF,qBAAA1oF,KAAAsmF,QAAAc,WAGApnF,KAAAoqF,gBAGAzD,YAAA,WACA3mF,KAAA+nF,kBAAA3xE,YAAA,YACAlX,MAAA0V,gBAAA,0BAAA5U,KAAA2kC,eAEA,CACA0kD,mBAAA,IACAI,mBAAA,IAEAjuE,SAAA,CACAvE,QAAA,kBACAoxE,OAAA,KACAe,YAAA,KACAjB,WAAA,KACAgC,cAAA,KACAjB,cAAA,MAIAhqF,MAAA0oF,YAAArsE,KAAA,SAAAvH,GACA9U,MAAAmyD,YAAA,IAAAnyD,MAAA0oF,YAAA5zE,ICtcA9U,MAAAguD,cAAA9nD,QAAAyV,KAAA5b,OAAA,CACAguD,iBAAA,KACA/B,eAAA,KACAggC,WAAA,KACA1T,cAAA,KAEA2T,oBAAA,KACAC,gBAAA,KAEA7vE,KAAA,SAAA8vE,EAAAr3E,GACAhU,KAAAkrD,eAAAvsD,EAAA0sF,GACArrF,KAAAitD,iBAAAjtD,KAAAkrD,eAAA5mC,OAAA,oBACAtkB,KAAAgU,SAAArV,EAAAM,OAAA,GAAAC,MAAAguD,cAAA1xC,SAAAxH,GAGAhU,KAAAkrD,eAAAlkD,KAAA,mBACA5B,QAAA8qE,IAAA,uDACAlwE,KAAAkrD,eAAAlkD,KAAA,iBAAA0jB,WAGA1qB,KAAAkrD,eAAAlkD,KAAA,gBAAAhH,MAEAA,KAAAmrF,oBAAAxsF,EAAA,8CACAqB,KAAAmrF,oBAAAr5E,SAAA,mBACA9R,KAAAmrF,oBAAA31D,YAAAx1B,KAAAkrD,gBAEAlrD,KAAAsrF,qBAAAtrF,KAAAkrD,gBACAlrD,KAAA0c,YAAA1c,KAAAmrF,oBAAA,QAAA,WACAnrF,KAAAurF,gBAGAC,gBAAA,SAAAnnF,GACArE,KAAAw3E,gBAEAnzE,EAAAmxB,YAAAx1B,KAAAw3E,eACAx3E,KAAAw3E,cAAAzuD,SACA1kB,EAAA4S,QAAA,SAGA5S,EAAAC,IAAAtE,KAAAw3E,cAAAlzE,QAGAtE,KAAAw3E,cAAAnzE,EAEArE,KAAA0c,YAAA1c,KAAAw3E,cAAA,6BAAA,kBAGAiU,kBAAA,SAAA11E,GACA/V,KAAAmrF,oBAAA9nF,KAAA0S,IAGAu1E,qBAAA,SAAAjnF,GACArE,KAAA0c,YAAArY,EAAA,SAAA,WACArE,KAAAitD,iBAAAn7C,SAAA,YAEA9R,KAAA0c,YAAArY,EAAA,QAAA,WACArE,KAAAitD,iBAAA72C,YAAA,aAIAs1E,aAAA,WACA1rF,KAAAorF,kBAIAprF,KAAAkrF,aACAlrF,KAAAkrF,WAAAlrF,KAAAkrD,eAAAjvB,OAAA,GACAj8B,KAAAkrF,WAAAh9E,KAAA,OAAA,QACAlO,KAAAsrF,qBAAAtrF,KAAAkrF,aAGAlrF,KAAAwrF,gBAAAxrF,KAAAkrF,YACAlrF,KAAAyrF,kBAAAvsF,MAAAS,EAAA,MAAA,SACAK,KAAAorF,iBAAA,IAGAG,aAAA,YAEA,IAAAvrF,KAAAorF,kBAIAprF,KAAAwrF,gBAAAxrF,KAAAkrD,gBACAlrD,KAAAyrF,kBAAAvsF,MAAAS,EAAA,MAAA,SACAK,KAAAorF,iBAAA,EAGAprF,KAAA0c,YAAA1c,KAAAkrD,eAAA,UAAA,eAGAygC,eAAA,WACA3rF,KAAAorF,gBACAprF,KAAAurF,eAEAvrF,KAAA0rF,eAGA1rF,KAAAgU,SAAAm5C,cAAAntD,KAAAw3E,gBAGAoU,UAAA,SAAAvyE,GACAA,EAAA2G,UAAA5a,QAAAymF,SAAA7rF,KAAAw3E,cAAAlzE,QACAtE,KAAA0rF,eACA1rF,KAAAmrF,oBAAAr5E,SAAA,aACA9R,KAAA0c,YAAA1c,KAAAkrF,WAAA,QAAA,aAIAY,QAAA,SAAAzyE,GACAA,EAAAqM,iBAEArM,EAAA2G,UAAA5a,QAAAymF,UACA7rF,KAAAurF,eACAvrF,KAAAmrF,oBAAA/0E,YAAA,eAIA21E,cAAA,WACA/rF,KAAAw3E,cAAAlzE,MACAtE,KAAAmrF,oBAAA/0E,YAAA,aAEApW,KAAAmrF,oBAAAr5E,SAAA,cAIAyzC,QAAA,SAAAlsC,GACA,GAAArZ,KAAAw3E,cAAA,GAAAjzE,kBAAA,CACA,IAAAmkD,EAAA1oD,KAAAw3E,cAAA,GAAA9uB,eACAC,EAAA3oD,KAAAw3E,cAAA,GAAA7uB,aAEA3oD,KAAA2rF,iBACA3rF,KAAAw3E,cAAA,GAAAjzE,kBAAAmkD,EAAAC,QAEA3oD,KAAA2rF,mBAGA,CACAnwE,SAAA,CACA2xC,cAAAxuD,EAAA0hB,QC1IAnhB,MAAA2tE,QAAAznE,QAAAyV,KAAA5b,OAAA,CACAu7B,YAAA,KAEAtc,OAAA,KACAykB,iBAAA,KACAwqC,QAAA,KACAhyD,SAAA,KACA8rD,YAAA,KACA6gB,YAAA,KACAC,kBAAA,KACAC,iBAAA,KACAgE,eAAA,KACAC,WAAA,KACAC,YAAA,KACAC,qBAAA,KACAC,gBAAA,KACAC,YAAA,KACAC,wBAAA,KACArE,QAAA,KACAsE,cAAA,EACAC,WAAA,KACAtE,kBAAA,KAEA7a,UAAA,EACA+C,WAAA,EACAqc,aAAA,EAEAC,kBAAA,EACAC,uBAAA,KACAC,kBAAA,UACAC,kBAAA,KACAC,YAAA,GACAC,aAAA,GACAC,qBAAA,CACAC,MAAA,CACAjmD,MAAA,IACA/b,OAAA,KAEAiiE,OAAA,CACAlmD,MAAA,IACA/b,OAAA,OAIAk+C,QAAA,KACA7jE,IAAA,KACA+iF,OAAA,KAEA8E,aAAA,KACAtiE,UAAA,KAEAy7D,QAAA,KACAoC,qBAAA,KAEA0E,mBAAA,KAEArE,aAAA,KACAC,iBAAA,KAEAztE,KAAA,SAAAif,GACAx6B,KAAAw6B,YAAAA,EAEAx6B,KAAAotF,mBAAAptF,KAAAgqF,aAAA7tE,KAAAnc,MAEAA,KAAAwsF,WAAA7tF,EAAA,WAAA,CAAA4C,KAAA,SAAA0D,KAAA,qBAAAE,MAAA,MACAnF,KAAAkoF,kBAAAvpF,EAAA,UAGAqB,KAAA2kC,YAAAzlC,MAAAqV,gBAAA,0BAAArV,MAAA2tE,QAAAwc,qBAGA1kD,kBACA,OAAA3kC,KAAA+oF,cAGAQ,sBACA,OAAAvpF,KAAAgpF,kBAGArkD,gBAAAqC,GACA,IAAAwiD,EAGAxiD,GAAA,GACAwiD,EAAAxiD,EACAA,GAAA5hC,QAAA6xB,KAAA+P,SAEAwiD,EAAA74E,KAAAK,MAAAg2B,EAAA5hC,QAAA6xB,KAAA+P,SAIAwiD,EAAAtqF,MAAA2tE,QAAA4c,qBAEAziD,GADAwiD,EAAAtqF,MAAA2tE,QAAA4c,oBACArkF,QAAA6xB,KAAA+P,SAGAhnC,KAAA+oF,aAAA/hD,EACAhnC,KAAAgpF,iBAAAQ,GAGAxoF,KAAA,WACA,IAAAhB,KAAAqtE,SAAA,CASA,GALArtE,KAAAqtE,UAAA,EACArtE,KAAAiX,QAAA,cAEAtY,EAAA6H,SAAA04B,eAAAjoB,QAAA,SAEAjX,KAAAmtE,QAAA,CACAntE,KAAAke,OAAAvf,EAAA,SAAA,CAAAwb,MAAA,qBAAA7L,SAAAlJ,QAAAsN,MACA1S,KAAA+nF,kBAAAppF,EAAA,SAAA,CAAAwb,MAAA,yBAAA7L,SAAAlJ,QAAAsN,MACA1S,KAAA2iC,iBAAAhkC,EAAA,SAAA,CAAAwb,MAAA,wBAAA7L,SAAAlJ,QAAAsN,MAEA,IAAAi3E,EAAAhrF,EAAA,YAAA,CAAAwb,MAAA,SAAA7L,SAAAtO,KAAA2iC,kBACA3iC,KAAAmtE,QAAAxuE,EAAA,UAAA,CAAAwb,MAAA,cAAA7L,SAAAtO,KAAA2iC,kBACA3iC,KAAA8nF,YAAAnpF,EAAA,SAAA,CAAAwb,MAAA,kBAAA7L,SAAAtO,KAAA2iC,kBACA,IAAAinD,EAAAjrF,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,MACA9W,KAAAnE,MAAAS,EAAA,MAAA,mBACA2O,SAAAq7E,GAKA,GAJAhrF,EAAA,SAAA,CAAAwb,MAAA,cAAA7L,SAAAq7E,GACA3pF,KAAAmb,SAAAxc,EAAA,SAAA,CAAAwb,MAAA,iBAAAC,MAAAlb,MAAAS,EAAA,MAAA,YAAA2O,SAAAq7E,GACA3pF,KAAAinE,YAAAtoE,EAAA,SAAA,CAAAwb,MAAA,cAAA7L,SAAAq7E,GAEAzqF,MAAAmuF,IAAA,CAIA,GAHArtF,KAAAgsF,eAAArtF,EAAA,YAAA,CAAAwb,MAAA,sBAAA7L,SAAAtO,KAAA+nF,mBAGA/nF,KAAAw6B,YAAAxmB,SAAA00D,eAAApoE,OAAA,EAAA,CACAN,KAAAisF,WAAAttF,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,cACA9W,KAAArD,KAAAw6B,YAAAxmB,SAAA00D,eAAA,GAAA3yD,QACAzH,SAAAtO,KAAAgsF,gBACAhsF,KAAAksF,YAAAvtF,EAAA,SAAA,CAAAwb,MAAA,wBAAAqb,YAAAx1B,KAAAisF,YACA,MAAAp6E,EAAAlT,EAAA,QAAA,CAAAwb,MAAA,WAAA7L,SAAAtO,KAAAksF,aACA,IAAAn6E,EAAAwN,EACA,IAAA,IAAA7f,EAAA,EAAAA,EAAAM,KAAAw6B,YAAAxmB,SAAA00D,eAAApoE,OAAAZ,IACAqS,EAAApT,EAAA,SAAA2P,SAAAuD,GACA0N,EAAA5gB,EAAA,OAAA,CACAqI,KAAA,CAAAkvB,OAAAx2B,GACA2D,KAAArD,KAAAw6B,YAAAxmB,SAAA00D,eAAAhpE,GAAAqW,MACAoE,MAAA,IAAAza,EAAA,MAAA,OACA4O,SAAAyD,GAEA,IAAA3M,QAAAyU,QAAA7Z,KAAAisF,WAAA,CACAniC,eAAA35B,IACAnwB,KAAAstF,aAAA3uF,EAAAwxB,GAAAnpB,KAAA,cAIArI,EAAA,4BAAA2P,SAAAtO,KAAAgsF,gBAIAhsF,KAAAmsF,qBAAAxtF,EAAA,SAAA,CACAwb,MAAA,0BACAsY,KAAA,UACApY,aAAAnb,MAAAS,EAAA,MAAA,eACA+yB,SAAA,MACApkB,SAAAtO,KAAAgsF,gBACArtF,EAAA,YAAA,CACA4C,KAAA,SACAkxB,KAAA,SACAtY,MAAA,yCACAC,MAAAlb,MAAAS,EAAA,MAAA,WACA0a,aAAAnb,MAAAS,EAAA,MAAA,WACA4tF,gBAAA,OACA76D,SAAA,KACA1rB,KAAA,CACAggC,MAAA,GACA/b,OAAA,GACAuiE,WAAA,aAEAl/E,SAAAtO,KAAAmsF,sBACAxtF,EAAA,YAAA,CACA4C,KAAA,SACAkxB,KAAA,SACAtY,MAAA,iCACAC,MAAAlb,MAAAS,EAAA,MAAA,UACA0a,aAAAnb,MAAAS,EAAA,MAAA,UACA4tF,gBAAA,QACA76D,SAAA,KACA1rB,KAAA,CACAggC,MAAA,IACA/b,OAAA,KACAuiE,WAAA,YAEAl/E,SAAAtO,KAAAmsF,sBACAxtF,EAAA,YAAA,CACA4C,KAAA,SACAkxB,KAAA,SACAtY,MAAA,gCACAC,MAAAlb,MAAAS,EAAA,MAAA,UACA0a,aAAAnb,MAAAS,EAAA,MAAA,UACA4tF,gBAAA,QACA76D,SAAA,KACA1rB,KAAA,CACAggC,MAAA,IACA/b,OAAA,IACAuiE,WAAA,WAEAl/E,SAAAtO,KAAAmsF,sBAEAxtF,EAAA,4BAAA2P,SAAAtO,KAAAgsF,gBAGAhsF,KAAAosF,gBAAAztF,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,eACAqT,YAAA,UACAy3C,SAAA,GACAwoB,cAAA,GACApqF,KAAAnE,MAAAS,EAAA,MAAA,YACA2O,SAAAtO,KAAAgsF,gBACAhsF,KAAA0c,YAAA1c,KAAAosF,gBAAA,QAAA,qBAGApsF,KAAA6sF,kBAAA3tF,MAAAqV,gBAAA,2BAGAvU,KAAA0c,YAAA/d,EAAA,OAAAqB,KAAAmsF,sBAAA,QAAA,oBAGAnsF,KAAAqsF,YAAA1tF,EAAA,SAAA,CACAwb,MAAA,mBAIAna,KAAAgoF,iBAAArpF,EAAA,SAAA,CAAAwb,MAAA,wBAAA7L,SAAAtO,KAAA+nF,mBAEA/nF,KAAAqsF,aACArsF,KAAAgoF,iBAAA31E,OAAArS,KAAAqsF,aAGArsF,KAAAsmF,QAAA,IAAAlhF,QAAAq4E,SAAAz9E,KAAA8nF,YAAA,CACA5uD,KAAA9zB,QAAAqhF,OACA1pC,YAAA/8C,KAAAg9C,aAAA7gC,KAAAnc,MACAk/E,OAAAl/E,KAAA0mF,QAAAvqE,KAAAnc,MACAm9C,WAAAn9C,KAAA2mF,YAAAxqE,KAAAnc,QAGAA,KAAA0c,YAAAktE,EAAA,QAAA,SACA5pF,KAAA0c,YAAA1c,KAAAinE,YAAA,QAAA,KACAjnE,KAAAw6B,YAAAkvC,cAAA1pE,KAAAinE,eAKAjnE,KAAAmwD,qBACAnwD,KAAA0c,YAAAtX,QAAA6xB,KAAA,SAAA,sBAEAj3B,KAAA2iC,iBAAA3X,IAAA9rB,MAAAuY,MAAAzX,KAAAupF,gBAAA,MACAvpF,KAAA+nF,kBAAA/8D,IAAA9rB,MAAAwY,OAAA1X,KAAA6pF,kBAGA7pF,KAAAqoF,OAAA,GACA,IAAAtO,EAAAp7E,EAAA,mBAAAu7B,IAAAv7B,EAAA,2BAEA,GAAAo7E,EAAAz5E,OAAA,CAEAN,KAAAwsF,WAAAlrC,aAAAy4B,EAAAtpD,IAAA,IAIA,IAAA,IAAA/wB,EAAA,EAAAA,EAAAq6E,EAAAz5E,OAAAZ,IAAA,CACA,IAAAyrE,EAAAxsE,EAAAo7E,EAAAr6E,IACAoqF,EAAA9pF,KAAA+pF,UAAA5e,GAIAnrE,KAAAkoF,kBAAA1yD,YAAA21C,GACAA,EAAApiD,SACA/oB,KAAAkoF,kBAAAzxE,YAAAqzE,GACA3e,EAAA78D,SAAAtO,KAAAmtE,SAEAntE,KAAAqoF,OAAAnnF,KAAA,CACAiqE,OAAAA,EACA2e,OAAAA,KAKA9pF,KAAAgqF,eAEAhqF,KAAAw6B,YAAAphB,GAAA,SAAApZ,KAAAotF,oBACAhoF,QAAAgU,GAAAla,MAAAoV,kBAAA,cAAAtU,KAAAotF,oBACAhoF,QAAAgU,GAAAla,MAAAmjC,iBAAA,OAAAriC,KAAAotF,oBAEAluF,MAAA02B,mBAAAihD,WAEA72E,KAAAiX,QAAA,UAGAq2E,aAAA,SAAA5tF,GACAM,KAAAysF,aAAA/sF,EACAM,KAAAisF,WAAA5oF,KAAArD,KAAAw6B,YAAAxmB,SAAA00D,eAAAhpE,GAAAqW,OACA/V,KAAAksF,YAAAt2E,KAAA,SAAAQ,YAAA,OACApW,KAAAksF,YAAAt2E,KAAA,KAAAzD,GAAAzS,GAAAoS,SAAA,OACA9R,KAAAgqF,cAAA,GACAhqF,KAAAiX,QAAA,eAAA,CACAy2E,cAAA1tF,KAAAw6B,YAAAxmB,SAAA00D,eAAAhpE,MAIAywD,mBAAA,WAEAnwD,KAAA2kC,YAAA3kC,KAAA2kC,YAGA3kC,KAAAoqF,gBAGAH,QAAA,WACAjqF,KAAAqtE,WAAArtE,KAAAowE,YAIAzxE,EAAA,QAAAmT,SAAA,YACA9R,KAAAke,OAAA1G,SAAA,UAEAxX,KAAA2iC,iBAAA9H,OAAArjB,SAAA,QAAAL,YAAA,EAAA,OAAA,KACAnX,KAAAiX,QAAA,WACA7R,QAAA6xB,KAAAhgB,QAAA,YAGAjX,KAAA+nF,kBAAAltD,OAAArjB,SAAA,QAAAG,aAAA,EAAA,OAAA,KACA3X,KAAA0c,YAAAtX,QAAAsN,KAAA,SAAA,SAAA2G,GACAA,EAAA2G,UAAA5a,QAAA4Y,SACAhe,KAAAiB,aAKAjB,KAAAowE,WAAA,IAGAnvE,MAAA,WACAjB,KAAAqtE,UAAArtE,KAAAowE,YAIApwE,KAAAiX,QAAA,eAEAtY,EAAA,QAAAyX,YAAA,YAEApW,KAAAqoB,eAAAjjB,QAAA6xB,KAAA,UACAj3B,KAAAqoB,eAAAjjB,QAAAsN,KAAA,SAGA1S,KAAAwsF,WAAAzjE,SACA/oB,KAAAspF,iBAEAtpF,KAAAke,OAAAoyC,MAAA,KAAA94C,SAAA,WAEAxX,KAAA2iC,iBAAAnrB,SAAA,QAAAL,aAAAnX,KAAAupF,gBAAA,OAAA,KACA,IAAA,IAAA7pF,EAAA,EAAAA,EAAAM,KAAAqoF,OAAA/nF,OAAAZ,IACAM,KAAAqoF,OAAA3oF,GAAA2qF,UAAA/vE,SAEAta,KAAA2iC,iBAAAtkB,OACAre,KAAAiX,QAAA,cAGAjX,KAAA+nF,kBAAAvwE,SAAA,QAAAG,cAAA3X,KAAA6pF,iBAAA,OAAA,KACA7pF,KAAA+nF,kBAAA1pE,OACAre,KAAA2tF,uBAGA3tF,KAAAw6B,YAAA7C,IAAA,SAAA33B,KAAAotF,oBACAhoF,QAAAuyB,IAAAz4B,MAAAoV,kBAAA,cAAAtU,KAAAotF,oBACAhoF,QAAAuyB,IAAAz4B,MAAAmjC,iBAAA,OAAAriC,KAAAotF,oBAEAluF,MAAA02B,mBAAAihD,WAEA72E,KAAAqtE,UAAA,EACArtE,KAAAowE,WAAA,EACApwE,KAAAiX,QAAA,WAGAqyE,eAAA,WACA,IAAA,IAAA5pF,EAAA,EAAAA,EAAAM,KAAAqoF,OAAA/nF,OAAAZ,IAAA,CACA,IAAA4qF,EAAAtqF,KAAAqoF,OAAA3oF,GACA4qF,EAAAD,UAAArqF,KAAA+pF,UAAAO,EAAAnf,QAIAnrE,KAAAkoF,kBAAA1yD,YAAA80D,EAAAnf,QACAmf,EAAAnf,OAAApiD,SACA/oB,KAAAkoF,kBAAAzxE,YAAA6zE,EAAAD,WACAC,EAAAR,OAAArzE,YAAA6zE,EAAAnf,QAGA/lE,QAAA6xB,KAAAhgB,QAAA,WAGA4yE,eAAA,WACA,OAAAzkF,QAAA6xB,KAAA+P,QAAAhnC,KAAAupF,iBAGAa,aAAA,WACApqF,KAAA2iC,iBAAA3X,IAAA,QAAAhrB,KAAAupF,gBAAA,MACAvpF,KAAA+nF,kBAAA/gD,MAAAhnC,KAAA6pF,kBACA7pF,KAAA4tF,0BACA5tF,KAAA6tF,uBAIAC,kBAAA,WACA,OAAA,IAAA5uF,MAAA6uF,6BAGA/D,aAAA,SAAAgE,GACA,IAAAhuF,KAAAqtE,SACA,OAAA,EAIA2gB,GAAA,IAAAA,EAEA,IAAA93D,EAAAl2B,KAAAw6B,YAAAxmB,SAAA00D,eAAA1oE,KAAAysF,cACAwB,IACAjuF,KAAAmpE,WAAAnpE,KAAAmpE,QAAAnpE,KAAAw6B,YAAAxmB,SAAAm1D,UACAnpE,KAAAioF,UACA+F,QACA,IAAA93D,EAAA+3D,UACA/3D,EAAA+3D,SAGAjuF,KAAAiX,QAAA,qBAAA,CACAy2E,cAAAx3D,EACA83D,YAAAA,EACAC,QAAAA,IAIAA,EAKAjuF,KAAAw6B,YAAA+xC,uBAAAr2C,EAAA5wB,IAAA,wBAAAmE,KAAAnE,IAEA,IAAA4oF,EACAF,EACAhuF,KAAA6qB,UAAA,KACA7qB,KAAAusF,cAAAvsF,KAAAioF,UACAjoF,KAAA8tF,qBACA9tF,KAAAmtF,aAAAntF,KAAAioF,QAAAh9D,SACAjrB,KAAA6qB,UAAA7qB,KAAAgoF,iBAAAn9D,cAEAqjE,EAAAhvF,MAAAkR,WAAA9K,GACA4oF,GAAAluF,KAAAioF,QAAA,GAAAsC,gBACAvqF,KAAA6qB,UAAAlsB,EAAAqB,KAAAioF,QAAA,GAAAsC,cAAA/jF,UAAAqkB,eAKA7qB,KAAAusF,cAAA,EAEA,IAAAtE,EAAAtpF,EAAA,YAAA,CACAwb,MAAA,aACAg0E,YAAA,EACA37E,IAAAlN,IAGAtF,KAAAioF,QACAjoF,KAAAioF,QAAAxxE,YAAAwxE,GAEAA,EAAA35E,SAAAtO,KAAAgoF,kBAKAhoF,KAAA4tF,2BACA5tF,KAAAssF,0BACAtsF,KAAAssF,wBAAA3tF,EAAA,SAAA,CACAwb,MAAA,gCAEA8tE,EAAAmG,KAAA,mDACApuF,KAAAssF,wBAAAtsF,KAAAgoF,iBAAApyE,KAAA,kCAKA5V,KAAA8tF,qBACAE,GAAA,OAAAhuF,KAAAmtF,eACAlF,EAAAh9D,OAAAjrB,KAAAmtF,cACAntF,KAAAgoF,iBAAAn9D,UAAA7qB,KAAA6qB,YAGAwjE,aAAA1vF,EAAAM,OAAA,CACAqvF,aAAA,EAEAC,WAAA,EACAC,OAAAC,IACAzuF,KAAAusF,cAAA,EACAvsF,KAAAmtF,aAAA,KACAntF,KAAA6qB,UAAA,KACA4jE,EAAAF,UAAA,OAEArvF,MAAA6uF,6BAAA,IAAA9F,EAAA,KAEAA,EAAA7uE,GAAA,OAAA,KACApZ,KAAAusF,cAAA,GACAyB,GAAAE,GAAA,OAAAluF,KAAA6qB,WACAlsB,EAAAspF,EAAA,GAAAsC,cAAA/jF,UAAAqkB,UAAA7qB,KAAA6qB,aAKA7qB,KAAAsF,IAAAA,EACAtF,KAAAioF,QAAAA,EAEAjoF,KAAA4tF,0BACA5tF,KAAA6tF,sBAGA7tF,KAAAiX,QAAA,oBAAA,CACAy2E,cAAA1tF,KAAAw6B,YAAAxmB,SAAA00D,eAAA1oE,KAAAysF,cACAxE,QAAAjoF,KAAAioF,UAGAjoF,KAAAiqF,YAtFAjqF,KAAAiqF,WA0FA2D,uBAAA,WACA,MAAA,YAAA5tF,KAAA4sF,mBAGA8B,iBAAA,SAAAr1E,GACA,GAAArZ,KAAA0sF,iBACA,OAAA,EAGA1sF,KAAAgoF,iBAAA5xE,YAAA,kCAEA,MAAAkD,EAAA3a,EAAA0a,EAAA6c,QACAy4D,EAAAr1E,EAAAtS,KAAA,cAGA,GAAA2nF,IAAA3uF,KAAA4sF,kBACA,OAAA,EAIA5sF,KAAA4sF,kBAAA+B,EACA3uF,KAAA8sF,YAAAxzE,EAAAtS,KAAA,SACAhH,KAAA+sF,aAAAzzE,EAAAtS,KAAA,UAGAhH,KAAAmsF,qBAAAv2E,KAAA,QACAQ,YAAA,UACAlI,KAAA,gBAAA,SAEAoL,EACAxH,SAAA,UACA5D,KAAA,gBAAA,QAGA,YAAAlO,KAAA4sF,kBACA5sF,KAAA2tF,sBAEA3tF,KAAAgoF,iBAAAl2E,SAAA,iCACA9R,KAAAgqF,eACAhqF,KAAA6tF,wBAIAe,kBAAA,WAEA,GAAA5uF,KAAA0sF,mBAAA1sF,KAAA4tF,yBACA,OAAA,EAIA5tF,KAAA6sF,mBAAA,aAAA7sF,KAAA6sF,kBAGA7sF,KAAA6sF,kBAAA,WAFA7sF,KAAA6sF,kBAAA,YAMA3tF,MAAA0V,gBAAA,0BAAA5U,KAAA6sF,mBAGA7sF,KAAAgoF,iBAAAl2E,SAAA,kCAGA9R,KAAA6tF,uBAGAA,oBAAA,WAEA,GAAA7tF,KAAA0sF,iBACA,OAAA,EAGA1sF,KAAA0sF,kBAAA,EAGA1sF,KAAAosF,gBACAh2E,YAAA,YACA0B,WAAA,YACAA,WAAA,eAGA9X,KAAAgoF,iBAAAl2E,SAAA,2CAGA,WAAA9R,KAAA4sF,kBACA5sF,KAAAgoF,iBAAAl2E,SAAA,+BAEA9R,KAAAgoF,iBAAA5xE,YAAA,+BAIA,IAAAy4E,EAAA,EACAC,EAAA,EACAl9C,EAAA,EACAm9C,EAAA/uF,KAAA+nF,kBAAA98D,SAAA,GAAA,GACA+jE,EAAAhvF,KAAA+nF,kBAAA/gD,QAAA,GACAioD,EAAAjvF,KAAAgtF,qBAAAhtF,KAAA4sF,mBAAA3hE,OACAikE,EAAAlvF,KAAAgtF,qBAAAhtF,KAAA4sF,mBAAA5lD,MAEA,cAAAhnC,KAAA6sF,mBACAmC,EAAAC,IACAJ,EAAAG,EAAAC,GAEAF,EAAAG,IACAJ,EAAAC,EAAAG,KAGAH,EAAAE,IACAJ,EAAAE,EAAAE,GAEAD,EAAAE,IACAJ,EAAAE,EAAAE,IAIAt9C,EAAAi9C,EACAC,EAAAD,IACAj9C,EAAAk9C,GAIA,MAAAl7C,GAAA,IAAAhC,EAAA,EACAu9C,EAAA,cAAAnvF,KAAA6sF,kBAAA,SAAA,OAGA7sF,KAAAqsF,YAAArhE,IAAA,CACAgc,MAAAhnC,KAAAgtF,qBAAAhtF,KAAA4sF,mBAAA5lD,MAAA,KACA/b,OAAAjrB,KAAAgtF,qBAAAhtF,KAAA4sF,mBAAA3hE,OAAA,KACAg/B,UAAA,SAAArY,EAAA,eAAAgC,EAAA,MAAAA,EAAA,aAAAu7C,EAAA,MAIAnvF,KAAA2sF,wBACArnE,aAAAtlB,KAAA2sF,wBAEA3sF,KAAA2sF,uBAAApnE,WAAA,KAEA,cAAAvlB,KAAA6sF,kBACA7sF,KAAAssF,wBAAAthE,IAAA,CACAgc,MAAAhnC,KAAA+sF,aAAA,KACA9hE,OAAAjrB,KAAA8sF,YAAA,KACA7iC,UAAA,SAAArY,EAAA,eAAAgC,EAAA,MAAAA,EAAA,KACAw7C,UAAA,EACAC,WAAA,IAAA,GAAAz9C,EAAA,OAGA5xC,KAAAssF,wBAAAthE,IAAA,CACAgc,MAAAhnC,KAAA8sF,YAAA,KACA7hE,OAAAjrB,KAAA+sF,aAAA,KACA9iC,UAAA,SAAArY,EAAA,eAAAgC,EAAA,MAAAA,EAAA,KACAw7C,UAAA,IAAA,GAAAx9C,EAAA,KACAy9C,WAAA,IAKArvF,KAAAgoF,iBAAA5xE,YAAA,kCACApW,KAAAgoF,iBAAA5xE,YAAA,iCACApW,KAAA0sF,kBAAA,GAEA,MAGAiB,mBAAA,WAEA3tF,KAAA2sF,wBACArnE,aAAAtlB,KAAA2sF,wBAEA3sF,KAAA4sF,kBAAA,UACA5sF,KAAAmsF,qBAAAv2E,KAAA,QACAQ,YAAA,UACAlI,KAAA,gBAAA,SACAlO,KAAAmsF,qBAAAv2E,KAAA,gCACA9D,SAAA,UACA5D,KAAA,gBAAA,QACAlO,KAAAosF,gBACAt6E,SAAA,YACA5D,KAAA,WAAA,IACAA,KAAA,cAAA,IACAlO,KAAAgoF,iBAAA5xE,YAAA,kCACApW,KAAAgoF,iBAAA5xE,YAAA,2CACApW,KAAAgoF,iBAAA5xE,YAAA,+BAGApW,KAAAssF,0BAEAtsF,KAAA8tF,qBACA9tF,KAAAioF,QAAA,GAAAqH,cAAAC,kBAEAvvF,KAAAssF,wBAAAvjE,SACA/oB,KAAAssF,wBAAA,KACAtsF,KAAAioF,QAAA,KACAjoF,KAAAgqF,gBAGAhqF,KAAA0sF,kBAAA,GAGA3C,UAAA,SAAA5e,GACA,IAAA2e,EAAA3e,EAAAlvC,QAYA,OATA72B,QAAA6lF,gBAAA9f,EAAA2e,GAGAA,EAAA57E,KAAA,KAAA,IACA47E,EAAAl0E,KAAA,QAAA1H,KAAA,KAAA,IAGA47E,EAAAl0E,KAAA,UAAAugB,KAAA,YAAA,GAEA2zD,GAGA9sC,aAAA,WACAh9C,KAAA0oF,qBAAA1oF,KAAAupF,gBACAvpF,KAAA+nF,kBAAAj2E,SAAA,aAGA40E,QAAA,WACA,QAAAxnF,MAAAqY,YACAvX,KAAA2kC,YAAA3kC,KAAA0oF,qBAAA1oF,KAAAsmF,QAAAc,WAEApnF,KAAA2kC,YAAA3kC,KAAA0oF,qBAAA1oF,KAAAsmF,QAAAc,WAGApnF,KAAAoqF,gBAGAzD,YAAA,WACA3mF,KAAA+nF,kBAAA3xE,YAAA,YACAlX,MAAA0V,gBAAA,0BAAA5U,KAAA2kC,eAEA,CACA0kD,mBAAA,IACAI,mBAAA,MC5vBAvqF,MAAA+kD,iBAAA7+C,QAAA03B,MAAA79B,OAAA,CACAilC,QAAA,KACA/oB,SAAA,KACA8Z,cAAA,KACA1zB,KAAA,KACAshD,OAAA,KACA3C,UAAA,EAMA3kC,KAAA,SAAA2oB,EAAAjP,EAAAjhB,GAKA,IAJAA,EAAArV,EAAAM,OAAAe,KAAAwvF,gBAAAx7E,IAEA0J,OAAA1d,KAAAyvF,QAAAtzE,KAAAnc,MAEAd,MAAA+kD,iBAAAC,aAAA,CACA,IAAAwrC,EAAAxwF,MAAA+kD,iBAAAC,aAOA,OALAwrC,EAAAxrD,UAAAA,IACAwrD,EAAAC,UAAAzrD,EAAAlwB,EAAAswC,cAAAtwC,EAAAuwC,gBACAmrC,EAAAz6D,cAAAA,GAGAj1B,KAAA0qB,UAGAxrB,MAAA+kD,iBAAAC,aAAAlkD,KACAA,KAAAi1B,cAAAA,EAEAj1B,KAAA4S,WAAAjU,EAAA,6CAAA2P,SAAAlJ,QAAAsN,MAEA1S,KAAA4vB,KAAA5vB,KAAA4S,WAAAjU,EAAAM,OAAA,CACAq/B,WAAA,GACAtqB,IAGAhU,KAAA4S,aACA5S,KAAA4S,WAAA4E,SAAA,QACAxX,KAAA4S,WAAAioB,OAAA7P,IAAA,UAAA,GAEAhrB,KAAAke,OAAA1G,SAAA,QACAxX,KAAAke,OAAA2c,OAAA7P,IAAA,UAAA,IAGAhrB,KAAA2vF,UAAAzrD,EAAAlwB,EAAAswC,cAAAtwC,EAAAuwC,iBAOAkrC,QAAA,WAQA,OAPAvwF,MAAA+kD,iBAAAC,aAAA,KACAlkD,KAAAi1B,eACAj1B,KAAAi1B,cAAA26D,UAAA5vF,KAAAi1B,cAAAmvB,cAGApkD,KAAAke,OAAA5D,SAEAta,KAAA0qB,WAOAy5B,aAAA,WACA,IAAAurC,EAAAxwF,MAAA+kD,iBAAAC,aAQA,OANAwrC,EAAArxE,OACAqxE,EAAAxxE,OAAA5D,SACAo1E,EAAAhlE,UAEAxrB,MAAA+kD,iBAAAC,aAAA,MAEA,GASAyrC,UAAA,SAAAzrD,EAAAogB,EAAAC,GACAvkD,KAAAkkC,QAAAA,EAEAlkC,KAAA4S,WAAAi9E,QACA7vF,KAAA6iD,QAAA,EAEA7iD,KAAA8vF,cAAA,KACA9vF,KAAA+vF,aAAA,KAEA,IAAAC,EAAA,IAAA5qF,QAAA6xB,KAAAhM,SACAglE,EAAAt/E,KAAAohB,IAAAi+D,EAAA,EAAA,EAAA5qF,QAAA6xB,KAAA+P,QAAA,EAAAhnC,KAAAgU,SAAAk8E,WAGA,GAFAF,EAAAC,EAAA,EAAA,EAEA3rC,GAAAC,EAAA,CACA,IAAArZ,EAAAoZ,EAAAC,EACA0rC,EAAAt/E,KAAAohB,IAAAuyB,EAAAl/C,QAAA6xB,KAAA+P,QAAA,EAAAhnC,KAAAgU,SAAAk8E,YAEAD,GADAD,EAAAr/E,KAAAohB,IAAAk+D,EAAA/kD,EAAA9lC,QAAA6xB,KAAAhM,SAAA,EAAAjrB,KAAAgU,SAAAk8E,YACAhlD,GAGAv6B,KAAAohB,IAAAuyB,EAAAl/C,QAAA6xB,KAAA+P,QAAA,EAAAhnC,KAAAgU,SAAAk8E,aAEAF,GADAC,EAAAt/E,KAAAohB,IAAAuyB,EAAAl/C,QAAA6xB,KAAA+P,QAAA,EAAAhnC,KAAAgU,SAAAk8E,YACAhlD,GAIAlrC,KAAAmwF,iBAAAF,EAAAD,GAEAhwF,KAAAmb,SAAAxc,EAAA,2CAAA2P,SAAAtO,KAAA4S,YACA,IAAAukB,EAAAn3B,KAAA4S,WAAAqY,SAAA,EAAAjrB,KAAAmb,SAAA8P,SAAA,EAAA,KACAxT,EAAAzX,KAAA4S,WAAAo0B,QAAA,EAAAhnC,KAAAmb,SAAA6rB,QAAA,EAAA,KAEAhnC,KAAAmb,SAAA6P,IAAA,CAAAvT,KAAAA,EAAA0f,IAAAA,EAAAqF,SAAA,aACAx8B,KAAAkgD,YAEAhhD,MAAA4H,kBAAA,sBAAA,CAAAo9B,QAAAA,EAAAgc,UAAAlgD,KAAAkgD,WAAA,CAAAz1C,EAAA5C,KAKA,GAJA7H,KAAA4S,WAAAwD,YAAA,WACApW,KAAAmb,SAAAb,SACAta,KAAA6iD,QAAA,EAEA,YAAAh7C,EACA,GAAA4C,EAAA9C,QAAA,CACA,GAAA8C,EAAAy1C,WAAAlgD,KAAAkgD,UACA,OAGA,IAAAz1C,EAAA2lF,YAGA,OAFApwF,KAAA4S,WAAAd,SAAA,cACA9R,KAAA4S,WAAAP,OAAA1T,EAAA,OAAA,CAAA0E,KAAAnE,MAAAS,EAAA,MAAA,4BAIAK,KAAA4S,WAAAwD,YAAA,SACApW,KAAA4S,WAAAP,OAAA5H,EAAA2lF,aACAlxF,MAAA8S,eAAAvH,EAAAuU,UACA9f,MAAAoT,eAAA7H,EAAAwU,eAEA/W,MAAAuC,EAAA7C,OAEA5H,KAAAqe,UAYA8xE,iBAAA,SAAAF,EAAAD,GACAhwF,KAAA4S,WAAAoY,IAAA,CACAgc,MAAAipD,EACA9mD,YAAA8mD,EACAI,YAAAJ,EACAhlE,OAAA+kE,EACA5mD,aAAA4mD,EACA58B,aAAA48B,EACA74D,KAAA/xB,QAAA6xB,KAAAhM,SAAA+kE,GAAA,EACAv4E,MAAArS,QAAA6xB,KAAA+P,QAAAipD,GAAA,MAGA,CACAT,gBAAA,CACAlrC,cAAA,KACAC,eAAA,QC5KArlD,MAAAsiD,YAAAp8C,QAAAyV,KAAA5b,OAAA,CACA87C,aAAA,KACAu1C,kBAAA,KACAC,mBAAA,KAEAC,WAAA,EACAC,oBAAA,EACAC,eAAA,EAEAn1E,KAAA,SAAA7F,EAAAi7E,GACAA,IACA3wF,KAAA0wF,eAAA,GAGA1wF,KAAA+6C,aAAAp8C,EAAA,6CAAA2P,SAAAoH,GACA1V,KAAAswF,kBAAA3xF,EAAA,oCAAA2P,SAAAtO,KAAA+6C,cACA/6C,KAAAuwF,mBAAA5xF,EAAA,6CAAA62B,YAAAx1B,KAAA+6C,cAEA/6C,KAAAw+C,oBAMAA,iBAAA,WAGAx+C,KAAA8iD,sBAAA,KACA9iD,KAAA+6C,aAAAjpC,SAAA,WAGA9R,KAAAy+C,aAAA,GACAz+C,KAAA4wF,sBAAA,GACA5wF,KAAAuwF,mBAAAxxF,KAAA,IAEAiB,KAAA0wF,eACA1wF,KAAA+6C,aAAAjpC,SAAA,eAOAstC,gBAAA,WACAp/C,KAAA+6C,aAAA81C,OAAA,OAAA,IAAA,KACA7wF,KAAA+6C,aAAAjpC,SAAA,UAAA++E,OAAA,EAAA,EAAAlyF,EAAA0hB,SAIAq+B,gBAAA,WACA1+C,KAAA+6C,aAAA3kC,YAAA,UACApW,KAAAuwF,mBAAAn6E,YAAA,WAGAqoC,aAAA,SAAArrB,GACApzB,KAAAwwF,WAAAp9D,GAGA09D,mBAAA,SAAA19D,GACApzB,KAAAwwF,YAAAp9D,GAGAw9D,sBAAA,SAAAx9D,GACApzB,KAAAywF,oBAAAr9D,GAGAowB,4BAAA,SAAApwB,GACApzB,KAAAywF,qBAAAr9D,GAGAqwB,kBAAA,WAEAzjD,KAAAwwF,WAAA7/E,KAAA+Y,IAAA1pB,KAAAwwF,WAAA,GAEA,IAAAxpD,EAAAr2B,KAAAohB,IAAA,IAAAphB,KAAAK,MAAA,IAAAhR,KAAAywF,oBAAAzwF,KAAAwwF,aAEAxwF,KAAA8iD,sBAAA9b,GAEAhnC,KAAA0wF,eACA1wF,KAAAuwF,mBAAAxxF,KAAAiB,KAAAywF,oBAAA,MAAAzwF,KAAAwwF,aAIA1tC,sBAAA,SAAAiuC,EAAAniD,GACA,IAAAmiD,EACA/wF,KAAA+6C,aAAAjpC,SAAA,YAEA9R,KAAA+6C,aAAA3kC,YAAA,WAEAw4B,EACA5uC,KAAAswF,kBAAA94E,SAAA,QAAAA,SAAA,CAAAwvB,MAAA+pD,EAAA,KAAA,QAEA/wF,KAAAswF,kBAAA94E,SAAA,QAAAwvB,MAAA+pD,EAAA,SC5FA7xF,MAAAqiD,cAAAn8C,QAAAyV,KAAA5b,OAAA,CACAywB,MAAA,KACAshE,mBAAA,KACAC,QAAA,KACAC,iCAAA,KACAC,gCAAA,KACAC,6BAAA,KACAC,cAAA,KAEAC,SAAA,GACAC,qBAAA5yF,EAAA0hB,KACAmxE,uBAAA,GACAC,gBAAA,EAEA1yC,aAAA,WACA/+C,KAAAsxF,SAAA,GACAtxF,KAAAuxF,qBAAA5yF,EAAA0hB,KACArgB,KAAAwxF,uBAAA,GACAxxF,KAAAyxF,gBAAA,GAGAxyC,UAAA,SAAAE,GACAn/C,KAAAsxF,SAAApwF,KAAAi+C,IAGAI,eAAA,WACA,OAAAv/C,KAAAsxF,SAAAhxF,QAGAm/C,iBAAA,SAAAx4C,GACAjH,KAAAuxF,qBAAAtqF,EACAjH,KAAAwxF,uBAAA,GACAxxF,KAAAyxF,gBAAA,EAEAzxF,KAAA0xF,0BAGAA,uBAAA,WACA,IAAAvyC,EAAAn/C,KAAAsxF,SAAAtxF,KAAAyxF,iBAAAtyC,OACAwyC,EAAA3xF,KAAAsxF,SAAAhxF,QAAAN,KAAAyxF,gBAAA,GAEAzxF,KAAA4xF,YAAAzyC,EAAAt/C,QAAAs/C,EAAAtD,QAAA77C,KAAA6xF,4BAAA11E,KAAAnc,MAAA2xF,IAUAE,4BAAA,SAAAjyC,EAAAkyC,GACA,IAAA3yC,EAAAn/C,KAAAsxF,SAAAtxF,KAAAyxF,iBACAE,EAAA3xF,KAAAsxF,SAAAhxF,QAAAN,KAAAyxF,gBAAA,GAGAM,EAAApzF,EAAAM,OAAAkgD,EAAA,CAAAS,OAAAA,IACA5/C,KAAAwxF,uBAAAtwF,KAAA6wF,GAGAJ,GAEA3xF,KAAAyxF,kBAGAK,EACA9xF,KAAA6xF,4BAAAjyC,GAAA,GAGA5/C,KAAA0xF,0BAIA,mBAAA1xF,KAAAuxF,sBACAvxF,KAAAuxF,qBAAAvxF,KAAAwxF,yBAaAI,YAAA,SAAA/xF,EAAAg8C,EAAA50C,EAAA+qF,GACAhyF,KAAAiyF,gBAAAhrF,EAEA,OAAAjH,KAAA0vB,QACA1vB,KAAA0vB,MAAA,IAAAtqB,QAAA03B,MAAA,CAAA9B,kBAAA,KAGA,OAAAh7B,KAAAgxF,qBACAhxF,KAAAgxF,mBAAAryF,EAAA,iDAAAmT,WAAAxD,SAAAlJ,QAAAsN,OAGA1S,KAAAixF,QAAAtyF,EAAA,4BAAA2P,SAAAtO,KAAAgxF,mBAAAnB,SAEA7vF,KAAAkyF,eAAAvzF,EAAA,2BAAA2P,SAAAtO,KAAAixF,SAEAjxF,KAAAmyF,eAAAxzF,EAAA,+BAAA2P,SAAAtO,KAAAixF,SAEAjxF,KAAAkxF,iCAAAvyF,EAAA,4CAAA2P,SAAAtO,KAAAixF,SAAA5yE,OACAre,KAAAmxF,gCAAAxyF,EAAA,4BAAA2P,SAAAtO,KAAAkxF,kCACAlxF,KAAAoxF,6BAAAzyF,EAAA,WAAA2P,SAAAtO,KAAAkxF,kCAEAlxF,KAAAoyF,eAAAzzF,EAAA,gCAAA2P,SAAAtO,KAAAixF,SAEAjxF,KAAA0vB,MAAAgzC,aAAA1iE,KAAAgxF,oBAEAhxF,KAAAkyF,eAAAnzF,KAAAc,GAEA,IAAAob,EAAAtc,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,MACA9W,KAAAnE,MAAAS,EAAA,MAAA,YACA2O,SAAAtO,KAAAoyF,gBACAxa,EAAAj5E,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,sBACA9W,KAAAnE,MAAAS,EAAA,MAAA,QACA2O,SAAAtO,KAAAoyF,gBAEA,IAAA,IAAA1yF,EAAA,EAAAA,EAAAm8C,EAAAv7C,OAAAZ,IAAA,CACA,IACA2yF,EADA1zF,EAAA,8DAAAk9C,EAAAn8C,GAAAyF,MAAA,OAAA02C,EAAAn8C,GAAA0a,MAAA,kBAAA9L,SAAAtO,KAAAmyF,gBACAv8E,KAAA,SAEA5V,KAAA0c,YAAA21E,EAAA,SAAA,WACAza,EAAAxhE,YAAA,eAIApW,KAAA0c,YAAAk7D,EAAA,YAAA,SAAAv+D,GACA,IAAAumC,EAAAjhD,EAAA0a,EAAAE,eAAAmV,QAAA,UAAA9Y,KAAA,oCAAAtR,MACAwtF,EAAA9xF,KAAAmxF,gCAAAh7D,KAAA,WAEAn2B,KAAAsyF,oBAAA1yC,EAAAkyC,MAGA9xF,KAAA0c,YAAAzB,EAAA,YAAA,WACA,IACA62E,EAAA9xF,KAAAmxF,gCAAAh7D,KAAA,WAEAn2B,KAAAsyF,oBAHA,SAGAR,MAGAE,IACAhyF,KAAAkxF,iCAAAr2D,OACA76B,KAAAoxF,6BAAAryF,KAAA,IAAAG,MAAAS,EAAA,MAAA,kDAAA,CAAA8B,OAAAuwF,MAGAhyF,KAAA0vB,MAAAmL,OACA76B,KAAA0vB,MAAArH,eAAAjjB,QAAA03B,MAAA5e,OAAA,SACAle,KAAA0c,YAAAtX,QAAA03B,MAAA5e,OAAA,QAAA,kBAUAo0E,oBAAA,SAAA1yC,EAAAkyC,GACA9xF,KAAAixF,QAAAsB,QAAA,OAAA,KACAvyF,KAAA0vB,MAAArR,OACAre,KAAAiyF,gBAAAryC,EAAAkyC,MAOAU,cAAA,WACAxyF,KAAAsyF,oBAAA,UAAA,MCrLA,SAAA3zF,GAMAO,MAAA89E,YAAA53E,QAAAyV,KAAA5b,OAAA,CACA8yB,IAAA,KACArI,IAAA,KACA+oE,WAAA,KACAttF,MAAA,KAEAyN,WAAA,KACA6vB,SAAA,KAEAlnB,KAAA,SAAApW,EAAA6O,GACAhU,KAAA8Y,YAAA9E,EAAA9U,MAAA89E,YAAAxhE,UAEAxb,KAAA4S,WAAAjU,EAAA,SAAA,CACAwb,MAAA,eACAsY,KAAA,SACAC,SAAA,IAGA1yB,KAAAiuF,UACAjuF,KAAAmvC,SAAAhqC,GAAA,GAEAnF,KAAA0c,YAAA1c,KAAA4S,WAAA,UAAAyG,IACA,OAAAA,EAAA2G,SACA,KAAA5a,QAAAkiF,OACAtnF,KAAAmvC,SAAAnvC,KAAAmF,MAAAnF,KAAAgU,SAAAipE,MACA5jE,EAAAqM,iBACA,MACA,KAAAtgB,QAAAoiF,SACAxnF,KAAAmvC,SAAAnvC,KAAAmF,MAAAnF,KAAAgU,SAAAipE,MACA5jE,EAAAqM,iBACA,MACA,KAAAtgB,QAAA8sD,UACA,QAAAhzD,MAAAqY,YACAvX,KAAAmvC,SAAAnvC,KAAAmF,MAAAnF,KAAAgU,SAAAipE,MAEAj9E,KAAAmvC,SAAAnvC,KAAAmF,MAAAnF,KAAAgU,SAAAipE,MAEA5jE,EAAAqM,iBACA,MACA,KAAAtgB,QAAA6sD,SACA,QAAA/yD,MAAAqY,YACAvX,KAAAmvC,SAAAnvC,KAAAmF,MAAAnF,KAAAgU,SAAAipE,MAEAj9E,KAAAmvC,SAAAnvC,KAAAmF,MAAAnF,KAAAgU,SAAAipE,MAEA5jE,EAAAqM,qBAMAuoE,QAAA,WAMA,GAJAjuF,KAAA+xB,IAAA/xB,KAAA0yF,OACA1yF,KAAA0pB,IAAA1pB,KAAA2yF,OACA3yF,KAAAyyF,YAAAzyF,KAAA0pB,IAAA1pB,KAAA+xB,KAAA/xB,KAAAgU,SAAAipE,MAEA2V,OAAAC,UAAA7yF,KAAAyyF,YACA,KAAA,6BAGAzyF,KAAAyiC,UACAziC,KAAAyiC,SAAAnoB,SAGAta,KAAA4S,WAAA1E,KAAA,gBAAAlO,KAAA+xB,KACA/xB,KAAA4S,WAAA1E,KAAA,gBAAAlO,KAAA0pB,KACA1pB,KAAAyiC,SAAA9jC,IAGA,IAAA,IAAAwG,EAAAnF,KAAA+xB,IAAA5sB,GAAAnF,KAAA0pB,IAAAvkB,GAAAnF,KAAAgU,SAAAipE,KACAj9E,KAAAyiC,SAAAziC,KAAAyiC,SAAA9lB,IAAAhe,EAAA,OAAA,CACAyb,MAAApa,KAAAgU,SAAAkpE,WAAA/3E,GACA6B,KAAA,CAAA7B,MAAAA,MAMA,GAFAnF,KAAAyiC,SAAAn0B,SAAAtO,KAAA4S,YAEA,OAAA5S,KAAAmF,MAAA,CACA,IAAAA,EAAAnF,KAAAmF,MACAnF,KAAAmF,MAAA,KACAnF,KAAAmvC,SAAAhqC,GAAA,GAGAnF,KAAA0c,YAAA1c,KAAAyiC,SAAA,YAAAppB,IACArZ,KAAAyiC,SAAArsB,YAAA,kCACAzX,EAAA0a,EAAAE,eACAzH,SAAA,kCACAghF,UAAAhhF,SAAA,kBAGA9R,KAAA0c,YAAA1c,KAAAyiC,SAAA,WAAA,KACAziC,KAAAyiC,SAAArsB,YAAA,kBAGApW,KAAA0c,YAAA1c,KAAAyiC,SAAA,QAAAppB,IACArZ,KAAAmvC,SAAAxwC,EAAAqI,KAAAqS,EAAAE,cAAA,UACAF,EAAA6X,kBACAlxB,KAAA4S,WAAA4H,WAIA20B,SAAA,SAAAhqC,EAAA4tF,GAGA,GAFA5tF,EAAAwL,KAAA+Y,IAAA/Y,KAAAohB,IAAA5sB,EAAAnF,KAAA0pB,KAAA1pB,KAAA+xB,KAEA/xB,KAAAmF,SAAAnF,KAAAmF,MAAAA,GACA,OAGAnF,KAAA4S,WAAA1E,KAAA,CACA8kF,gBAAAhzF,KAAAmF,MACA8tF,iBAAAjzF,KAAAgU,SAAAkpE,WAAAl9E,KAAAmF,SAGAnF,KAAAyiC,SAAArsB,YAAA,sBACA,IAAA88E,EAAAlzF,KAAAyiC,SAAAtwB,IAAAnS,KAAAmF,MAAAnF,KAAA+xB,KAAA/xB,KAAAgU,SAAAipE,MACAiW,EAAAv2E,IAAAu2E,EAAAJ,WAAAhhF,SAAA,UACAohF,EAAAphF,SAAA,gBAEA,IAAAihF,GACA/yF,KAAAgU,SAAA83B,SAAA3mC,IAIAutF,KAAA,WACA,MAAA,mBAAA1yF,KAAAgU,SAAA+d,IACA/xB,KAAAgU,SAAA+d,MAEA/xB,KAAAgU,SAAA+d,KAGA4gE,KAAA,WACA,MAAA,mBAAA3yF,KAAAgU,SAAA0V,IACA1pB,KAAAgU,SAAA0V,MAEA1pB,KAAAgU,SAAA0V,MAEA,CACAlO,SAAA,CACAuW,IAAA,EACArI,IAAA,IACAuzD,KAAA,GACAC,WAAA,KACApxC,SAAAntC,EAAA0hB,QAtJA,CAyJAxhB,QCvJAK,MAAAysC,eAAAvmC,QAAAyV,KAAA5b,OAAA,CACA2T,WAAA,KACAgS,SAAA,KACAi2D,gBAAA,KACAx2E,OAAA,KACAc,MAAA,KAEAguF,eAAA,KAEA53E,KAAA,SAAA1F,EAAA7B,GACAhU,KAAA8Y,YAAA9E,EAAA9U,MAAAysC,eAAA6jD,iBAEAxvF,KAAAmF,MAAA,EACAnF,KAAAozF,gBAAA,GACApzF,KAAAqzF,eAAA,GACArzF,KAAAszF,UAAA,GACAtzF,KAAAuzF,SAAA,GAEAvzF,KAAA4S,WAAAjU,EAAA,IAAAkX,GACA7V,KAAAwzF,SAAA70F,EAAA,+BAAA2P,SAAAtO,KAAA4S,YACA5S,KAAAyzF,QAAA90F,EAAA,8BAAA2P,SAAAtO,KAAA4S,YACA5S,KAAA0zF,aAAA/0F,EAAA,mCAAA2P,SAAAtO,KAAA4S,YACA5S,KAAA2zF,eAAAh1F,EAAA,aAAA2P,SAAAtO,KAAA0zF,cAEA,IAAA,IAAAh0F,EAAAM,KAAAozF,eAAA1zF,GAAAM,KAAAqzF,eAAA3zF,IAAA,CACA,IAAAqS,EAAApT,EAAA,2CAAAe,EAAA,wBAAAA,EAAA,eAAA4O,SAAAtO,KAAA2zF,gBAEAj0F,EAAA,GAAA,GACAqS,EAAAD,SAAA,mBAGA,IAAApS,GACAqS,EAAAD,SAAA,YAIA9R,KAAA4kB,SAAA5kB,KAAA4S,WAAAgD,KAAA,eAEA5V,KAAA0c,YAAA1c,KAAA4S,WAAA,SAAA5S,KAAA4zF,cAAAz3E,KAAAnc,OACAA,KAAA0c,YAAA1c,KAAA4S,WAAA,WAAA5S,KAAA6zF,gBAAA13E,KAAAnc,OACAA,KAAA0c,YAAAtX,QAAAsN,KAAA,UAAA1S,KAAA8zF,eAAA33E,KAAAnc,OACAA,KAAA0c,YAAAtX,QAAAsN,KAAA,SAAA1S,KAAA+zF,cAAA53E,KAAAnc,OAMAulB,WAAA,KAEAvlB,KAAAg0F,2BAAA,IAAAh0F,KAAA4kB,SAAAtkB,OAAA,GACAN,KAAA2zF,eAAA3oE,IAAA,QAAAhrB,KAAAg0F,2BAAA,EAAAh0F,KAAA4S,WAAAo0B,QAAA,IACA,KAGA4sD,cAAA,WACA,IAAAn8E,EAAAzX,KAAAi0F,gBAAAj0F,KAAAmF,OACAnF,KAAA2zF,eAAA3oE,IAAA,OAAAvT,IAGAo8E,gBAAA,SAAAx6E,EAAA66E,GACA76E,EAAAqM,iBAEA1lB,KAAAmzF,eAAAe,EAAA13D,SAAAqJ,EACA7lC,KAAAm0F,UAAAn0F,KAAA2zF,eAAAn3D,WAAA/kB,KAEAzX,KAAAknF,UAAA,EACAlnF,KAAA4rC,WAGAkoD,eAAA,SAAAz6E,EAAA66E,GACA,GAAAl0F,KAAAknF,SAAA,CACA7tE,EAAAqM,iBAEA,IAAA0uE,EAAAp0F,KAAAmzF,eAAAe,EAAA13D,SAAAqJ,EACApuB,EAAAzX,KAAAm0F,UAAAC,EACAjvF,EAAAnF,KAAAq0F,gBAAA58E,GAEAzX,KAAAmvC,SAAAhqC,GAEAnF,KAAA8rC,aAIAqD,SAAA,SAAAhqC,GACA,IAAAsS,EAAAzX,KAAAi0F,gBAAA9uF,GACAA,EAAAnF,KAAAszF,UACAnuF,EAAAnF,KAAAszF,SACA77E,EAAAzX,KAAAi0F,gBAAA9uF,IACAA,EAAAnF,KAAAuzF,WACApuF,EAAAnF,KAAAuzF,SACA97E,EAAAzX,KAAAi0F,gBAAA9uF,IAGAnF,KAAA2zF,eAAA3oE,IAAA,OAAAvT,GAEAtS,GAAAnF,KAAAszF,UAAAnuF,GAAAnF,KAAAuzF,WACAvzF,KAAA4kB,SAAAxO,YAAA,YAEAzX,EAAA2U,KAAAtT,KAAA4kB,UAAA,SAAAtlB,EAAA6wB,GACAxxB,EAAAwxB,GAAAnpB,KAAA,cAAA,GACArI,EAAAwxB,GAAAnpB,KAAA,eAAA7B,GACAxG,EAAAwxB,GAAAre,SAAA,YAGAnT,EAAAwxB,GAAAnpB,KAAA,cAAA,GACArI,EAAAwxB,GAAAnpB,KAAA,eAAA7B,GACAxG,EAAAwxB,GAAAre,SAAA,YAIA,GAAAnT,EAAAwxB,GAAAnpB,KAAA,eACArI,EAAAwxB,GAAAre,SAAA,gBAKA9R,KAAAmF,MAAAA,GAGA4uF,cAAA,SAAA16E,GACArZ,KAAAknF,WACA7tE,EAAAqM,iBACA1lB,KAAAknF,UAAA,EACAlnF,KAAAisC,UAIAooD,gBAAA,SAAA73D,GACA,IAAA83D,GAAA,EAAAt0F,KAAAozF,eACAmB,GAAA,GAAAv0F,KAAAozF,eAAApzF,KAAAqzF,gBAEA,OAAArzF,KAAA0zF,aAAA1sD,QAAA,GAAA,EAAAxK,GAAAx8B,KAAAg0F,2BAAAO,EAAAD,GAGAL,gBAAA,SAAA9uF,GACA,IAAAmvF,GAAA,EAAAt0F,KAAAozF,eACAmB,GAAA,GAAAv0F,KAAAozF,eAAApzF,KAAAqzF,gBAEA,SAAAluF,EAAAmvF,GAAAt0F,KAAAg0F,2BAAAO,EAAAv0F,KAAA0zF,aAAA1sD,QAAA,IAGA4E,QAAA,WACA,mBAAA5rC,KAAAgU,SAAA83B,UACA9rC,KAAAgU,SAAA43B,QAAA5rC,OAIA8rC,SAAA,WACA,mBAAA9rC,KAAAgU,SAAA83B,UACA9rC,KAAAgU,SAAA83B,SAAA9rC,OAIAisC,MAAA,WACA,mBAAAjsC,KAAAgU,SAAA83B,UACA9rC,KAAAgU,SAAAi4B,MAAAjsC,OAIAwvF,gBAAA,CACA5jD,QAAAjtC,EAAA0hB,KACAyrB,SAAAntC,EAAA0hB,KACA4rB,MAAAttC,EAAA0hB,QC/JAnhB,MAAAs1F,cAAAt1F,MAAAs/B,mBAAAv/B,OAAA,CACAqgC,oBAAA,SAAAF,GAKAA,GAHAA,EAAAA,EAAApgC,QAAA,WAAA,KAGAA,QAAA,yBAAA,IAGAE,MAAAu1F,uBACAr1D,EAAAA,EAAAxvB,eAGA1Q,MAAAw1F,wBAEAt1D,EAAAlgC,MAAAgS,YAAAkuB,EAAAp/B,KAAAgU,SAAA7C,UAKA,IAAA2zE,EAAA5lF,MAAA+P,YAAA0lF,QAAAC,WAAAx1D,EAAA,CAAAu1D,QAAA,4BAEA,OAAA7P,EAAAxkF,OACAwkF,EAAArkF,KAAAvB,MAAA21F,mBAEA,MCzBA31F,MAAA41F,UAAA1vF,QAAAyV,KAAA5b,OAAA,CACA4W,GAAA,KAEAjD,WAAA,KACAo4B,MAAA,KACA+pD,cAAA,KAKAx5E,KAAA,SAAA1F,EAAA0f,EAAAvhB,GACAhU,KAAA6V,GAAAA,EACA7V,KAAA4S,WAAAjU,EAAA42B,GACAv1B,KAAA8Y,YAAA9E,EAAA9U,MAAA41F,UAAAt5E,UAGAxb,KAAA4S,WAAA5L,KAAA,eACA5B,QAAA8qE,IAAA,kDACAlwE,KAAA4S,WAAA5L,KAAA,aAAA0jB,WAGA1qB,KAAA4S,WAAA5L,KAAA,YAAAhH,MAEAA,KAAAgrC,MAAA,GAEAhrC,KAAAgU,SAAAmQ,YACAxlB,EAAAM,OAAAe,KAAAgrC,MAAA9rC,MAAAqV,gBAAAvU,KAAAgU,SAAAmQ,WAAA,UAGA,IAAAnkB,KAAAgrC,MAAAxgB,sBACAxqB,KAAAgrC,MAAAxgB,oBAAA,IAKA,IAFA,IAAAwqE,EAAAh1F,KAAA4S,WAAAgD,KAAA,MAAAwb,KAAA,QAEA1xB,EAAA,EAAAA,EAAAs1F,EAAA10F,OAAAZ,IAAA,CACA,IAAAihC,EAAAhiC,EAAAq2F,EAAAt1F,IACAqS,EAAA4uB,EAAArc,SACA2D,EAAAtpB,EAAA,8BAAAO,MAAAS,EAAA,MAAA,sBAAA,OAAAipB,UAAA+X,IAEA,IAAAhiC,EAAAsO,QAAA0zB,EAAAzmB,SAAA,YAAAlT,KAAA,MAAAhH,KAAAgrC,MAAAxgB,sBACAzY,EAAAD,SAAA,aAGA9R,KAAAi1F,WAAAhtE,GAGAjoB,KAAAgU,SAAAskB,WACAt4B,KAAA+0F,cAAA,IAAA71F,MAAAg2F,cAAAl1F,KAAAA,KAAAgU,SAAAmhE,YAGAn1E,KAAAgU,SAAAohE,aACAp1E,KAAAm1F,kBAAAn1F,KAAA4S,WAAAgD,KAAA,UAIAq/E,WAAA,SAAAhtE,GACAA,EAAA7O,GAAA,QAAAC,IACA,IAAAtH,EAAApT,EAAA0a,EAAAE,eAAAE,QAAA,MACAqB,EAAA/I,EAAAmI,SAAA,QAAAtE,KAAA,kBAAA5O,KAAA,MACAouF,EAAAz2F,EAAAsO,QAAA6N,EAAA9a,KAAAgrC,MAAAxgB,qBAEAzY,EAAA4D,SAAA,cACA5D,EAAAqE,YAAA,cAEA,IAAAg/E,GACAp1F,KAAAgrC,MAAAxgB,oBAAAlb,OAAA8lF,EAAA,KAGArjF,EAAAD,SAAA,cAEA,IAAAsjF,GACAp1F,KAAAgrC,MAAAxgB,oBAAAtpB,KAAA4Z,IAIA9a,KAAAgU,SAAAmQ,YACAjlB,MAAA0V,gBAAA5U,KAAAgU,SAAAmQ,WAAAnkB,KAAAgrC,UAKAmqD,kBAAA,SAAAE,GACAr1F,KAAA0c,YAAA24E,EAAA,QAAA,wBAGAC,oBAAA,SAAAj8E,GACA,IAAAC,EAAA3a,EAAA0a,EAAAE,eAEA,IAAAD,EAAAtS,KAAA,WAAA,CACA,IAAA8T,EAAAxB,EAAAgL,SAAApK,SAAA,YAAAlT,KAAA,MACAouE,EAAAl2E,MAAAyF,OAAA3E,KAAAgU,SAAAohE,YAAA,YAAAt6D,GAEAnc,EAAA,sCAAAy2E,EAAA,KAAAl2E,MAAAS,EAAA,MAAA,aAAA,wBAAA61B,YAAAlc,GAEA,IAAAlU,QAAAyU,QAAAP,GACAi8E,aAIAC,UAAA,SAAAC,GACA,OAAAv2F,MAAA41F,UAAAY,YAAAD,EAAA,GAAAv2F,MAAA41F,UAAAa,cAGAC,WAAA,SAAAlgF,GACA,IAAA3D,EAAApT,EAAA,wBAAA2P,SAAAtO,KAAA4S,YACA+tB,EAAAhiC,EAAA,kCAAAO,MAAAuY,KAAA,MAAAvY,MAAA41F,UAAAY,WAAA,eAAAx2F,MAAAuY,KAAA,KAAAvY,MAAA41F,UAAAY,WAAA,SAAApnF,SAAAyD,GASA,GAPA4uB,EAAAtuB,OAAAqD,GAEA1V,KAAAgU,SAAAskB,WACAqI,EAAAtuB,OAAA,+BAAAnT,MAAAS,EAAA,MAAA,QAAA,UACAK,KAAA+0F,cAAAntE,SAAA7V,IAGA/R,KAAAgU,SAAAohE,YAAA,CACA,IAAAygB,EAAAl3F,EAAA,8BAAAO,MAAAS,EAAA,MAAA,aAAA,UAAA2O,SAAAqyB,GACA3gC,KAAAm1F,kBAAAU,GAGAl1D,EAAA3V,IAAA,iBAAA,IACA2V,EAAAnpB,SAAA,CAAAmsE,gBAAA,GAAA,SAGA1pD,cAAA,SAAAvkB,GACA,IAMAogF,EANA/jF,EAAA2D,EAAA4O,SAAAA,SAEAtkB,KAAAgU,SAAAskB,UACAt4B,KAAA+0F,cAAA3sE,YAAArW,GAKAA,EAAA+M,WAAAxe,SACAw1F,EAAA/jF,EAAAuS,UAGAvS,EAAAiZ,IAAA,aAAA,UAAAxT,SAAA,CAAAkrC,cAAA3wC,EAAAkZ,UAAA,OAAA,KACAlZ,EAAAuI,cAEA,IAAAw7E,GACA91F,KAAA+1F,UAAAD,MAKAC,UAAA,SAAAlkF,GACAA,EAAAiN,SAAA,QAAA5E,SAAA,WAAAI,SACAzI,EAAAyI,WAEA,CACAo7E,WAAA,EACAC,aAAA,GAEAn6E,SAAA,CACA2I,WAAA,KACAmU,UAAA,EACA88C,YAAA,KACAD,UAAA,QC9JAj2E,MAAAg2F,cAAA9vF,QAAAs4E,KAAAz+E,OAAA,CACA+2F,UAAA,KACA7gB,UAAA,KACA8gB,aAAA,KAEAC,UAAA,KACAC,SAAA,KACAC,cAAA,KAEA76E,KAAA,SAAAy6E,EAAA7gB,GACAn1E,KAAAg2F,UAAAA,EACAh2F,KAAAm1E,UAAAA,EAEAn1E,KAAA29E,WAAAh/E,EAAA,+BAEA,IAAA+nB,EAAA1mB,KAAAg2F,UAAApjF,WAAAgD,KAAA,MAEA5V,KAAA4vB,KAAAlJ,EAAA,CACAqP,OAAA,8BACA0mB,OAAAz8C,KAAAwlE,UAAArpD,KAAAnc,SAIAwlE,UAAA,SAAAjpC,GACAv8B,KAAAk2F,UAAA35D,EACA,IAAA1qB,EAAAlT,EAAA,sCAAA0T,OAAAkqB,GAGA,OAFAA,EAAAvR,IAAA,WAAA9rB,MAAAuY,KAAAzX,KAAA68C,SAAA7xB,IAAA,WAAA9rB,MAAAuY,OACA8kB,EAAA3mB,KAAA,SAAAkC,WAAA,SACAjG,GAGAkrC,YAAA,WACA/8C,KAAAm2F,SAAAx3F,IAGAqB,KAAAigF,YAAAjgF,KAAAg2F,UAAApjF,YAGA5S,KAAAi2F,aAAA,EACA,IAAAI,EAAAr2F,KAAA68C,SACA,GACA78C,KAAAi2F,eACAI,EAAAA,EAAAzgF,KAAA,mBACAygF,EAAA/1F,QAGAN,KAAAo2F,cAAAp2F,KAAA68C,SAAA5xB,SACAjrB,KAAA68C,SAAArlC,SAAA,CACAyT,OAAA,GACA,OAAA,KACAjrB,KAAA68C,SAAA/qC,SAAA,YAEA9R,KAAA4vB,OAEA5vB,KAAA0c,YAAAtX,QAAAuV,KAAA,WAAA,SAAAtB,GACAA,EAAA2G,UAAA5a,QAAA4Y,SACAhe,KAAAs2F,iBAKArW,YAAA,SAAApuE,GAGA,IAFA,IAAA0kF,EAAA1kF,EAAAqI,WAAAggB,IAAAl6B,KAAA68C,UAEAn9C,EAAA,EAAAA,EAAA62F,EAAAj2F,OAAAZ,IAAA,CACA,IAAAqS,EAAApT,EAAA43F,EAAA72F,IACAM,KAAAm2F,SAAAn2F,KAAAm2F,SAAAx5E,IAAA5K,EAAAmI,SAAA,SAEAnI,EAAA4D,SAAA,cACA3V,KAAAigF,YAAAluE,EAAAmI,SAAA,SAKAglE,OAAA,WAaA,IAZAl/E,KAAAorC,EAAAorD,iBACAx2F,KAAAorC,EAAAorD,eAAApgF,YAAA,aACApW,KAAA29E,WAAArjE,UAIAta,KAAAorC,EAAAorD,eAAA,KACAx2F,KAAAorC,EAAAqrD,iBAAA,KACAz2F,KAAAorC,EAAAsrD,mBAAA,KACA12F,KAAAorC,EAAAurD,oBAAA,KACA32F,KAAAorC,EAAAwrD,oBAAA,KAEA52F,KAAAorC,EAAA1rC,EAAA,EAAAM,KAAAorC,EAAA1rC,EAAAM,KAAAm2F,SAAA71F,SACAN,KAAAorC,EAAAnV,QAAAt3B,EAAAqB,KAAAm2F,SAAAn2F,KAAAorC,EAAA1rC,IACAM,KAAAorC,EAAAyrD,aAAA72F,KAAAorC,EAAAnV,QAAAn0B,SACA9B,KAAAorC,EAAA0rD,aAAA92F,KAAAorC,EAAAnV,QAAAmB,cACAp3B,KAAAorC,EAAA2rD,gBAAA/2F,KAAAorC,EAAAyrD,aAAA1/D,IAAAn3B,KAAAorC,EAAA0rD,aAAA,EACA92F,KAAAorC,EAAA4rD,YAAArmF,KAAA0gC,IAAArxC,KAAAy3C,OAAAz3C,KAAAorC,EAAA2rD,iBAEA,IAAA/2F,KAAAorC,EAAA1rC,GAAAM,KAAAy3C,QAAAz3C,KAAAorC,EAAAyrD,aAAA1/D,IAAA,GAAAn3B,KAAAorC,EAAA4rD,YAAAh3F,KAAAorC,EAAAsrD,oBAPA12F,KAAAorC,EAAA1rC,IAQAM,KAAAorC,EAAAorD,eAAAx2F,KAAAorC,EAAAnV,QACAj2B,KAAAorC,EAAAqrD,iBAAAz2F,KAAAorC,EAAA1rC,EACAM,KAAAorC,EAAAsrD,mBAAA12F,KAAAorC,EAAA4rD,YACAh3F,KAAAorC,EAAAurD,oBAAA32F,KAAAorC,EAAAyrD,aACA72F,KAAAorC,EAAAwrD,oBAAA52F,KAAAorC,EAAA0rD,aAOA,GAAA92F,KAAAorC,EAAAorD,eAKA,GAAA,IAAAx2F,KAAAorC,EAAAqrD,kBAAAz2F,KAAAy3C,OAAAz3C,KAAAorC,EAAAurD,oBAAAx/D,IAAA,EACAn3B,KAAA29E,WAAA/0D,UAAA5oB,KAAAg2F,UAAApjF,iBAyBA,GAvBA5S,KAAAorC,EAAA6rD,iBAAAj3F,KAAAorC,EAAAorD,eAAAlyE,SACAtkB,KAAAorC,EAAA8rD,mBAAAl3F,KAAAorC,EAAA6rD,iBAAAjwF,KAAA,SAGAhH,KAAAorC,EAAAqrD,iBAAAz2F,KAAAm2F,SAAA71F,OAAA,GACAN,KAAAorC,EAAA+rD,cAAAx4F,EAAAqB,KAAAm2F,SAAAn2F,KAAAorC,EAAAqrD,iBAAA,IAAAnyE,SACAtkB,KAAAorC,EAAAgsD,gBAAAp3F,KAAAorC,EAAA+rD,cAAAnwF,KAAA,WAEAhH,KAAAorC,EAAA+rD,cAAA,KACAn3F,KAAAorC,EAAAgsD,gBAAA,MAIAp3F,KAAAorC,EAAAisD,oBAAAr3F,KAAAy3C,QAAAz3C,KAAAorC,EAAAurD,oBAAAx/D,IAAAn3B,KAAAorC,EAAAwrD,oBAAA,EAUA52F,KAAAorC,EAAA+rD,eAAAn3F,KAAAorC,EAAAgsD,iBAAAp3F,KAAAorC,EAAA8rD,mBACAl3F,KAAAorC,EAAAisD,sBACAr3F,KAAAm1E,WAAAn1E,KAAAm1E,WAAAn1E,KAAAorC,EAAA8rD,mBAAAl3F,KAAAi2F,aAAA,IAEAj2F,KAAA29E,WAAAnoD,YAAAx1B,KAAAorC,EAAA6rD,oBAGAj3F,KAAAm1E,WAAAn1E,KAAAm1E,WAAAn1E,KAAAorC,EAAA8rD,mBAAAl3F,KAAAi2F,eACAj2F,KAAAorC,EAAAorD,eAAA1kF,SAAA,kBAaA,GAAA9R,KAAAorC,EAAA+rD,eAAAn3F,KAAAorC,EAAAgsD,gBAAAp3F,KAAAorC,EAAA8rD,qBACAl3F,KAAAm1E,WAAAn1E,KAAAm1E,WAAAn1E,KAAAorC,EAAAgsD,gBAAAp3F,KAAAi2F,aAAA,KACAj2F,KAAAorC,EAAAisD,oBAEAr3F,KAAA29E,WAAAr8B,aAAAthD,KAAAorC,EAAA+rD,gBAEAn3F,KAAAorC,EAAAorD,eAAA1kF,SAAA,aACA9R,KAAA29E,WAAArvE,SAAAtO,KAAAorC,EAAA6rD,iBAAA/8E,SAAA,cAcA,GAAAla,KAAAorC,EAAAisD,oBAAA,CAaA,IAXAr3F,KAAAorC,EAAAksD,SAAAt3F,KAAAw3C,OAAAx3C,KAAAu3F,qBAEA,QAAAr4F,MAAAqY,cACAvX,KAAAorC,EAAAksD,UAAAt3F,KAAAk2F,UAAAlvD,SAGAhnC,KAAAorC,EAAAosD,WAAAx3F,KAAAorC,EAAAorD,eAAAn6C,aAAAr8C,KAAAg2F,UAAApjF,WAAA,MACA5S,KAAAorC,EAAAqsD,iBAAA,KACAz3F,KAAAorC,EAAAssD,qBAAA,KACA13F,KAAAorC,EAAAusD,mBAAA,KAEA33F,KAAAorC,EAAA1rC,EAAA,EAAAM,KAAAorC,EAAA1rC,EAAAM,KAAAorC,EAAAosD,WAAAl3F,OAAAN,KAAAorC,EAAA1rC,IACAM,KAAAorC,EAAAwsD,UAAAj5F,EAAAqB,KAAAorC,EAAAosD,WAAAx3F,KAAAorC,EAAA1rC,IACAM,KAAAorC,EAAAysD,UAAA73F,KAAAorC,EAAAwsD,UAAA91F,SAAA2V,KAEA,QAAAvY,MAAAqY,cACAvX,KAAAorC,EAAAysD,WAAA73F,KAAAorC,EAAAwsD,UAAA5wD,SAGAhnC,KAAAorC,EAAA0sD,cAAAnnF,KAAA0gC,IAAArxC,KAAAorC,EAAAysD,UAAA73F,KAAAorC,EAAAksD,UACAt3F,KAAAorC,EAAA2sD,YAAA/3F,KAAAorC,EAAAwsD,UAAA5wF,KAAA,WAEAhH,KAAAm1E,WAAAn1E,KAAAm1E,WAAAn1E,KAAAorC,EAAA2sD,YAAA/3F,KAAAi2F,aAAA,MACAj2F,KAAAorC,EAAAqsD,kBACAz3F,KAAAorC,EAAA0sD,cAAA93F,KAAAorC,EAAAssD,wBACA13F,KAAAorC,EAAA+rD,eAAAn3F,KAAAorC,EAAA2sD,aAAA/3F,KAAAorC,EAAAgsD,oBAGAp3F,KAAAorC,EAAAqsD,iBAAAz3F,KAAAorC,EAAAwsD,UACA53F,KAAAorC,EAAAssD,qBAAA13F,KAAAorC,EAAA0sD,cACA93F,KAAAorC,EAAAusD,mBAAA33F,KAAAorC,EAAA2sD,aAIA/3F,KAAAorC,EAAAqsD,kBACAz3F,KAAA29E,WAAAnoD,YAAAx1B,KAAAorC,EAAAqsD,wBAGAz3F,KAAAm1E,WAAAn1E,KAAAm1E,WAAAn1E,KAAAorC,EAAA8rD,mBAAAl3F,KAAAi2F,eACAj2F,KAAAorC,EAAAorD,eAAA1kF,SAAA,cAOAwkF,WAAA,WACAt2F,KAAA29E,WAAArjE,SAEAta,KAAAorC,EAAAorD,gBACAx2F,KAAAorC,EAAAorD,eAAApgF,YAAA,aAGApW,KAAAg4F,aAGA76C,WAAA,WAEA,GAAAn9C,KAAAorC,EAAAorD,iBAAAx2F,KAAA29E,WAAAr5D,SAAAhkB,QAAAN,KAAAorC,EAAAorD,eAAA7gF,SAAA,cAAA,CACA,IAAAsiF,EACAC,EAOA,GAJAl4F,KAAA68C,SAAA/9B,WAAAxe,SACA23F,EAAAj4F,KAAA68C,SAAAv4B,UAGAtkB,KAAA29E,WAAAr5D,SAAAhkB,OAAA,CAEA,IAAA63F,EAAAn4F,KAAA29E,WAAAhkE,OAAAgD,IAAA3c,KAAA29E,WAAAvsD,SAEA,IAAAzyB,EAAAsO,QAAAjN,KAAA68C,SAAA,GAAAs7C,IACAn4F,KAAA29E,WAAAlnE,YAAAzW,KAAA68C,UACAq7C,GAAA,IAEAl4F,KAAA29E,WAAArjE,SACA49E,GAAA,OAEA,CACA,IAAArmF,EAAA7R,KAAAorC,EAAA6rD,iBAAA/8E,SAAA,MAGA,GAAA+9E,GAAApmF,EAAAvR,QAAAuR,EAAA,KAAAomF,EAAA,GAaAC,GAAA,MAbA,CACA,GAAArmF,EAAAvR,OAKAN,KAAAorC,EAAA6rD,iBAAAthF,SAAA,cACA3V,KAAAorC,EAAAorD,eAAAt8E,SAAA,WAAAjD,QAAA,aANA,CACA,IAAAgR,EAAAtpB,EAAA,8BAAAO,MAAAS,EAAA,MAAA,sBAAA,OAAAipB,UAAA5oB,KAAAorC,EAAAorD,gBACAx2F,KAAAg2F,UAAAf,WAAAhtE,GAEApW,EAAAlT,EAAA,QAAA2P,SAAAtO,KAAAorC,EAAA6rD,kBAKAj3F,KAAA68C,SAAAvuC,SAAAuD,GACAqmF,GAAA,GASA,GAFAl4F,KAAAorC,EAAAorD,eAAApgF,YAAA,aAEA8hF,EAAA,CAEAD,GACAj4F,KAAAg2F,UAAAD,UAAAkC,GAIA,IAEA59D,EAFA+9D,EAAAp4F,KAAA68C,SAAAR,aAAAr8C,KAAAg2F,UAAApjF,WAAA,MAAAtS,OAAA,EAIA83F,GAAAp4F,KAAA68C,SAAA71C,KAAA,WAEA,GAAAhH,KAAA68C,SAAA71C,KAAA,WACAqzB,EAAA,IACA,WAAAn7B,MAAAuY,MAAA,GACAzX,KAAAk2F,UAAA1+E,SAAA6iB,EAAA,SACA,GAAA+9D,KACA/9D,EAAA,IACA,WAAAn7B,MAAAuY,MAAAvY,MAAA41F,UAAAY,WACA11F,KAAAk2F,UAAA1+E,SAAA6iB,EAAA,SAGAr6B,KAAAq4F,SAAAr4F,KAAA68C,SAAAu7C,IAIA,IAAA1iF,EAAA1V,KAAA68C,SAAA3iC,SAAA,QAAAA,SAAA,YAEAlT,EAAA,CACAsxF,YAAAt4F,KAAAg2F,UAAAngF,GACAiF,UAAApF,EAAA1O,KAAA,MACA8O,OAAAJ,EAAA1O,KAAA,WACAuxF,OAAAv4F,KAAA68C,SAAAzrB,OAAAlX,SAAA,QAAAA,SAAA,YAAAlT,KAAA,MACAi5C,SAAAjgD,KAAA68C,SAAAv4B,OAAA,MAAAA,OAAA,MAAApK,SAAA,QAAAA,SAAA,YAAAlT,KAAA,OAGA9H,MAAA4H,kBAAA,0BAAAE,GAAA,SAAAyD,EAAA5C,GACA,YAAAA,GACA3I,MAAA8I,GAAA2X,cAAAzgB,MAAAS,EAAA,MAAA,yBAOAK,KAAA68C,SAAArlC,SAAA,QAAApB,YAAA,UAAAoB,SAAA,CACAyT,OAAAjrB,KAAAo2F,eACA,OAAA,KACAp2F,KAAA68C,SAAA7xB,IAAA,SAAA,UAGAhrB,KAAA+/C,0BAEA//C,KAAA4vB,QAGAyoE,SAAA,SAAAtmF,EAAA0jF,GACA1jF,EAAA/K,KAAA,QAAAyuF,GAEA,IAAA+C,EAAAx4F,KAAAg2F,UAAAR,UAAAC,GAEAzqE,EAAA,GACAA,EAAA,UAAA9rB,MAAAuY,MAAA,IAAA+gF,EAAA,KACAxtE,EAAA,WAAA9rB,MAAAuY,MAAA+gF,EAAA,KACAx4F,KAAA68C,SAAA3iC,SAAA,QAAA8Q,IAAAA,GAIA,IAFA,IAAAytE,EAAA1mF,EAAAmI,SAAA,MAAAA,WAEAxa,EAAA,EAAAA,EAAA+4F,EAAAn4F,OAAAZ,IACAM,KAAAq4F,SAAA15F,EAAA85F,EAAA/4F,IAAA+1F,EAAA,MCpWAv2F,MAAAw5F,qBAAAtzF,QAAA0zB,SAAA75B,OAAA,CACA05F,UAAA,KACAL,YAAA,KACAnjB,UAAA,KAEAyjB,aAAA,KACAC,cAAA,KAEAn0C,gBAAA,KACAo0C,kBAAA,KAEAC,2BAAA,KAEAC,WAAA,KACAC,sBAAA,KAEAC,cAAA,KACAC,mBAAA,KACAC,qBAAA,KACAC,2BAAA,EAEAC,aAAA,KACAC,mBAAA,KAEAC,iBAAA,KAKAj+E,KAAA,SAAAo9E,EAAAj2E,EAAA1O,GACAhU,KAAA24F,UAAAA,EACA34F,KAAAs4F,YAAAt4F,KAAA24F,UAAA54D,OAAA/4B,KAAA,gBACAhH,KAAAm1E,UAAAjzE,SAAAlC,KAAA24F,UAAA54D,OAAA7xB,KAAA,oBAEAlO,KAAA44F,aAAA,IAAA54F,KAAA24F,UAAAv4E,aAAAkD,QAAA,GAAA,IACAtjB,KAAA64F,cAAA74F,KAAA24F,UAAAv4E,aAAAkD,QAAA,GAAA,EAEAtP,EAAArV,EAAAM,OAAA,GAAAC,MAAAw5F,qBAAAl9E,SAAAxH,EAAA,CACA+hB,OAAA,QACAqD,kBAAA,EACAqgE,cAAA,EACAC,eAAA,EACArgE,eAAA,EACAojB,OAAAz8C,KAAAwlE,UAAArpD,KAAAnc,MACAs5B,cAAA,IACAJ,KAAA9zB,QAAAsgE,SAGA1lE,KAAA4vB,KAAAlN,EAAA1O,IAMA2lF,YAAA,WACA35F,KAAAk5F,cAAAl5F,KAAAs5F,aAAAt5F,KAAA+4B,YAAA/xB,KAAA,SACAhH,KAAAm5F,mBAAA,EAKA,IAHA,IAAAt8C,EAAAl+C,EAAAqB,KAAA+4B,aACA6gE,EAAA55F,KAAA+4B,YAAApf,OAEAigF,EAAAt5F,QAAA,CAEA,IAAAu5F,EAAAD,EAAA5yF,KAAA,SAEA,GAAA6yF,GAAA75F,KAAAk5F,cACA,MAIA,IAAAY,EAAAD,EAAA75F,KAAAk5F,cAEAY,EAAA95F,KAAAm5F,qBACAn5F,KAAAm5F,mBAAAW,GAIAj9C,EAAAA,EAAAlgC,IAAAi9E,GACAA,EAAAA,EAAAjgF,OAQA,GAJA3Z,KAAAo5F,sBAAAQ,EAAAt5F,OAKAN,KAAAm1E,WACAn1E,KAAAo5F,sBACAp5F,KAAA24F,UAAA9hE,iBACA,CAEA72B,KAAAq5F,2BAAA,EAEA,IAAAryF,EAAAhH,KAAA+5F,iBAAA/5F,KAAA+4B,aAEA75B,MAAA4H,kBAAA,qCAAAE,EAAA,CAAAyD,EAAA5C,KACA,YAAAA,IACA7H,KAAAq5F,2BAAA,EAEAr5F,KAAAknF,WACAlnF,KAAAm5F,mBAAA1uF,EAAAuvF,MACAh6F,KAAAi6F,MAAA,OAMA,OAAAp9C,GAMA2oB,UAAA,SAAAG,GACA,IAAAnhB,EAAA7lD,EAAA,+CAAA2P,SAAAlJ,QAAAsN,MACA+xC,EAAA9lD,EAAA,4BAAA2P,SAAAk2C,GACAzkB,EAAAphC,EAAA,yBAAA2P,SAAAm2C,GACAxnB,EAAAt+B,EAAA,YAAA2P,SAAAyxB,GAEA4lC,EAAAr3D,SAAA2uB,GAGAj9B,KAAA0kD,gBAAA1kD,KAAA24F,UAAA7jE,kBAAA5a,SAAA,YAAAA,WAGA,IAFA,IAAAyqC,EAAAghB,EAAAzrD,WAEAxa,EAAA,EAAAA,EAAAilD,EAAArkD,OAAAZ,IAAA,CACA,IAAAklD,EAAAjmD,EAAAgmD,EAAAjlD,IAGA,GAAAklD,EAAAjvC,SAAA,iBACAivC,EAAAtqC,aADA,CAMA,IAAAuqC,EAAAlmD,EAAAqB,KAAA0kD,gBAAAhlD,IACAsnC,EAAA6d,EAAA,GAAAqO,wBAAAlsB,MAMA,GAJA6d,EAAA75B,IAAA,QAAAgc,EAAA,MACA4d,EAAA55B,IAAA,QAAAgc,EAAA,MAGA5hC,QAAA4T,QAAA6rC,EAAA,kBAAA,CACA7kD,KAAA84F,kBAAAl0C,EAEA1iD,SAAA2iD,EAAA75B,IAAA,WAAA9rB,MAAAuY,OACAzX,KAAA+4F,2BAAA/xD,EAEA4d,EAAA55B,IAAA,WAAA9rB,MAAAuY,KAAAzX,KAAA44F,gBAIA,OAAAp0C,GAMA01C,gBAAA,SAAA7vC,GACA,OAAArqD,KAAAq5F,4BAIA,IAAAr5F,KAAAm6F,gBAAA9vC,EAAAj5B,OAAAi5B,IAMA+vC,eAAA,SAAA/vC,GACA,OAAArqD,KAAAq5F,4BAIA,IAAAr5F,KAAAm6F,gBAAA9vC,EAAAA,EAAA1wC,SASAojC,YAAA,WAEA/8C,KAAAg5F,WAAAh5F,KAAAq6F,cAAAr6F,KAAA+4B,YAAA/4B,KAAA+4B,YAAA/xB,KAAA,UAGAhH,KAAAs6F,wBAGAt6F,KAAA24F,UAAAtiE,gBAEAr2B,KAAA4vB,QAMAsvD,OAAA,WACAl/E,KAAA4vB,OACA5vB,KAAAu6F,iBAMAC,uBAAA,WACAx6F,KAAAs6F,wBACAt6F,KAAAy6F,gCACAz6F,KAAA4vB,QAMAutB,WAAA,WAOA,GANAn9C,KAAAw5F,kBAAA,EACAx5F,KAAA4vB,OAKA5vB,KAAAs5F,cAAAt5F,KAAAk5F,cAAA,CAGA,IAFA,IAAAwB,EAAA16F,KAAAs5F,aAAAt5F,KAAAk5F,cAEAx5F,EAAA,EAAAA,EAAAM,KAAA68C,SAAAv8C,OAAAZ,IAAA,CACA,IAAAm9C,EAAAl+C,EAAAqB,KAAA68C,SAAAn9C,IAEA04F,EADAv7C,EAAA71C,KAAA,SACA0zF,EACAC,EAAA36F,KAAA44F,aAAA54F,KAAA46F,gBAAAxC,GAEAv7C,EAAA71C,KAAA,QAAAoxF,GACAv7C,EAAAjnC,KAAA,YAAA5O,KAAA,QAAAoxF,GACAv7C,EAAA3iC,SAAA,0BAAA8Q,IAAA,WAAA9rB,MAAAuY,KAAAkjF,GAGA36F,KAAAw5F,kBAAA,EAIA,GAAAx5F,KAAAw5F,iBAAA,CASA,IALA,IAAAxyF,EAAAhH,KAAA+5F,iBAAA/5F,KAAA68C,UAGAg+C,EAAA76F,KAAA68C,SAAAtiC,QAAA6W,OAEAypE,EAAAv6F,QAAA,CACA,IAAAw6F,EAAAD,EAAA7zF,KAAA,SAEA,GAAA8zF,GAAA96F,KAAAs5F,aAAA,CACAtyF,EAAAuxF,OAAAsC,EAAA7zF,KAAA,MACA,MAGA,GAAA8zF,EAAA96F,KAAAs5F,aAAA,CACAtyF,EAAAi5C,SAAA46C,EAAA7zF,KAAA,MAGA,IAAAihB,EAAA4yE,EAAAjlF,KAAA,kBAEA,IAAAqS,EAAAtS,SAAA,YAAA,CAEAsS,EAAAnW,SAAA,YAGA,IAAAipF,EAAA/6F,KAAA24F,UAAAqC,uBAAAH,GAGA76F,KAAA24F,UAAA1jE,eACAj1B,KAAA24F,UAAA1jE,cAAA7M,YAAApoB,KAAA+4B,aAGA/4B,KAAAooB,YAAApoB,KAAA+4B,aACA/4B,KAAA+4B,YAAAze,SACAta,KAAA24F,UAAAxjE,gBAGA,MAGA0lE,EAAAA,EAAAzpE,OAGAlyB,MAAA4H,kBAAA,0BAAAE,EAAA,CAAAyD,EAAA5C,KACA,GAAA,YAAAA,EAAA,CACA,IAAA4C,EAAA9C,QAGA,OAFAzI,MAAA8I,GAAAC,aAAA/I,MAAAS,EAAA,MAAA,kCACAK,KAAA24F,UAAAv4E,aAAA6F,iBAGA/mB,MAAA8I,GAAA2X,cAAAzgB,MAAAS,EAAA,MAAA,wBACAK,KAAAi7F,mBAGAF,GAAAA,EAAAz2E,SAAAhkB,SACAy6F,EAAAzgF,SACAta,KAAA24F,UAAAuC,eAAAjzE,GAAA,IAIA/oB,MAAA8I,GAAAmY,gBAMAoZ,aAAA,WACAv5B,KAAA24F,UAAA1jE,eACAj1B,KAAA24F,UAAA1jE,cAAAuE,iBAGAx5B,KAAAw5F,kBAAA,EACAx5F,KAAA4vB,QAGAqrE,iBAAA,WACA71F,QAAA2Z,sBAAA,KACA/e,KAAAiX,QAAA,kBACAjX,KAAAgU,SAAAinF,sBAIAE,0BAAA,WAMA,GALAn7F,KAAA0kD,gBAAA15B,IAAA,QAAA,IAKAhrB,KAAAo5F,sBAAAp5F,KAAA24F,UAAA9hE,iBAAA,CAEA72B,KAAA24F,UAAAxjE,eAAAn1B,KAAAo7F,kBAAA,GAAAp7F,KAAAq7F,kBAAA,GAEA,IAAAC,EAAAt7F,KAAA68C,SAAA7qB,OAAA6xC,UAEAy3B,EAAAh7F,SACAN,KAAAooB,YAAAkzE,GACAA,EAAAhhF,SACAta,KAAA24F,UAAAtiE,iBAIAr2B,KAAA4vB,QAOAuqE,gBAAA,SAAAU,EAAAjB,GAgBA,GAdAA,GAAAA,EAAAt5F,OACAN,KAAAm6F,gBAAAoB,UAAA3B,EAAA5yF,KAAA,SAEAhH,KAAAm6F,gBAAAoB,UAAA,EAIAV,GAAAA,EAAAv6F,OACAN,KAAAm6F,gBAAAqB,UAAAX,EAAA7zF,KAAA,SAAA,EAEAhH,KAAAm6F,gBAAAqB,UAAA,EAIAx7F,KAAAm1E,UAAA,CAEA,GACA,GAAAn1E,KAAAm6F,gBAAAoB,WACAv7F,KAAAm6F,gBAAAoB,UAAAv7F,KAAAm5F,mBAAAn5F,KAAAm1E,UAEA,OAAA,EAIAn1E,KAAAm6F,gBAAAqB,UAAAx7F,KAAAm5F,mBAAAn5F,KAAAm1E,YACAn1E,KAAAm6F,gBAAAqB,UAAAx7F,KAAAm1E,UAAAn1E,KAAAm5F,mBAEAn5F,KAAAm6F,gBAAAqB,UAAAx7F,KAAAm6F,gBAAAoB,YACAv7F,KAAAm6F,gBAAAqB,UAAAx7F,KAAAm6F,gBAAAoB,YAKA,MAAA,CACAxpE,IAAA/xB,KAAAm6F,gBAAAoB,UACA7xE,IAAA1pB,KAAAm6F,gBAAAqB,YAOAlB,sBAAA,WACAt6F,KAAAu5F,mBAAAv5F,KAAAm6F,gBACAn6F,KAAA68C,SAAAtiC,QAAA6W,OACApxB,KAAA68C,SAAA7qB,OAAArY,SAOA4gF,cAAA,SAAAkB,GAKAz7F,KAAAu6F,cAAAmB,WAAA17F,KAAA27F,WAAA37F,KAAA47F,WAGA,QAAA18F,MAAAqY,cACAvX,KAAAu6F,cAAAmB,aAAA,GAIA17F,KAAAu6F,cAAAsB,iBAAAlrF,KAAAK,MAAAhR,KAAAu6F,cAAAmB,WAAAx8F,MAAAw5F,qBAAAoD,cAGA97F,KAAAu6F,cAAAjB,aAAAt5F,KAAAk5F,cAAAl5F,KAAAu6F,cAAAsB,iBAGA77F,KAAAu6F,cAAAjB,aAAAt5F,KAAAu5F,mBAAAxnE,KACA/xB,KAAAu6F,cAAAsB,kBAAA77F,KAAAu5F,mBAAAxnE,IAAA/xB,KAAAu6F,cAAAjB,aACAt5F,KAAAu6F,cAAAjB,aAAAt5F,KAAAu5F,mBAAAxnE,KACA/xB,KAAAu6F,cAAAjB,aAAAt5F,KAAAu5F,mBAAA7vE,MACA1pB,KAAAu6F,cAAAsB,kBAAA77F,KAAAu6F,cAAAjB,aAAAt5F,KAAAu5F,mBAAA7vE,IACA1pB,KAAAu6F,cAAAjB,aAAAt5F,KAAAu5F,mBAAA7vE,KAIA1pB,KAAAs5F,gBAAAt5F,KAAAs5F,aAAAt5F,KAAAu6F,cAAAjB,eAEAt5F,KAAAy6F,gCAOAz6F,KAAAu6F,cAAAwB,sBAAA/7F,KAAAu6F,cAAAmB,WAAA17F,KAAAu6F,cAAAsB,iBAAA38F,MAAAw5F,qBAAAoD,aAGA97F,KAAAu6F,cAAAyB,cAAArrF,KAAAK,MAAAhR,KAAAu6F,cAAAwB,sBAAA,IAGAprF,KAAA0gC,IAAArxC,KAAAu6F,cAAAyB,eAAA98F,MAAAw5F,qBAAAuD,WACAj8F,KAAAu6F,cAAAyB,eAAAh8F,KAAAu6F,cAAAyB,cAAA,EAAA,GAAA,GAAA98F,MAAAw5F,qBAAAuD,UAIAj8F,KAAAu6F,cAAA2B,0BAAAl8F,KAAA46F,gBAAA56F,KAAAs5F,cAAAt5F,KAAAu6F,cAAAyB,cACAh8F,KAAAg/E,QAAA,GAAAh0D,IAAA,UAAA9rB,MAAAuY,KAAAzX,KAAAu6F,cAAA2B,0BAAAl8F,KAAA64F,eACA74F,KAAA84F,kBAAA9tE,IAAA,QAAAhrB,KAAA+4F,2BAAA/4F,KAAAu6F,cAAA2B,4BAMAtB,gBAAA,SAAAnF,GACA,OAAAA,EAAA,GAAAv2F,MAAAw5F,qBAAAoD,cAMA/B,iBAAA,SAAAp5D,GACA,MAAA,CACA23D,YAAAt4F,KAAAs4F,YACAx9E,UAAA6lB,EAAA35B,KAAA,MACA8O,OAAA6qB,EAAA/qB,KAAA,kBAAA5O,KAAA,aAOAqzF,cAAA,SAAA15D,EAAAw7D,GAGA,GAFAn8F,KAAAq6F,cAAArB,WAAA,GAEA,GAAAmD,EAIA,IAHAn8F,KAAAq6F,cAAA+B,OAAAD,EACAn8F,KAAAq6F,cAAAgC,UAAA17D,EAAAvP,OAEApxB,KAAAq6F,cAAAgC,UAAA/7F,UACAN,KAAAq6F,cAAAgC,UAAAr1F,KAAA,SAAAhH,KAAAq6F,cAAA+B,SACAp8F,KAAAq6F,cAAArB,WAAAlrF,QAAA9N,KAAAq6F,cAAAgC,WACAr8F,KAAAq6F,cAAA+B,OAAAp8F,KAAAq6F,cAAAgC,UAAAr1F,KAAA,SAGA,GAAAhH,KAAAq6F,cAAA+B,UAKAp8F,KAAAq6F,cAAAgC,UAAAr8F,KAAAq6F,cAAAgC,UAAAjrE,OAIA,OAAApxB,KAAAq6F,cAAArB,YAMAyB,8BAAA,WACAz6F,KAAAi5F,uBACA7zF,QAAAk3F,qBAAAt8F,KAAAi5F,uBAGAj5F,KAAAi5F,sBAAA7zF,QAAA2Z,sBAAA/e,KAAAu8F,iBAAApgF,KAAAnc,QAGAu8F,iBAAA,WAMA,IALAv8F,KAAAi5F,sBAAA,KAKAj5F,KAAAu8F,iBAAA1pC,GAAA,EAAA7yD,KAAAu8F,iBAAA1pC,GAAA7yD,KAAAg5F,WAAA14F,OAAAN,KAAAu8F,iBAAA1pC,KACA7yD,KAAAu8F,iBAAAC,WAAAx8F,KAAAg5F,WAAAh5F,KAAAu8F,iBAAA1pC,IAGA7yD,KAAAu8F,iBAAAC,WAAAx1F,KAAA,cAAAhH,KAAAu8F,iBAAAC,WAAAx1F,KAAA,eAAA,GAGA,GAAAhH,KAAAu8F,iBAAAC,WAAAx1F,KAAA,gBAEAhH,KAAAu8F,iBAAAC,WAAA5mF,KAAA,wBAAA0E,SASA,IAFAta,KAAAu8F,iBAAAE,cAAAz8F,KAAAq6F,cAAAr6F,KAAA+4B,YAAA/4B,KAAAs5F,cAEAt5F,KAAAu8F,iBAAA1pC,GAAA,EAAA7yD,KAAAu8F,iBAAA1pC,GAAA7yD,KAAAu8F,iBAAAE,cAAAn8F,OAAAN,KAAAu8F,iBAAA1pC,KACA7yD,KAAAu8F,iBAAAC,WAAAx8F,KAAAu8F,iBAAAE,cAAAz8F,KAAAu8F,iBAAA1pC,IAGA7yD,KAAAu8F,iBAAAC,WAAAx1F,KAAA,cAAAhH,KAAAu8F,iBAAAC,WAAAx1F,KAAA,eAAA,GAGA,GAAAhH,KAAAu8F,iBAAAC,WAAAx1F,KAAA,gBAEArI,EAAA,wCAAAO,MAAAS,EAAA,MAAA,sBAAA,aACA61B,YAAAx1B,KAAAu8F,iBAAAC,WAAA5mF,KAAA,qBAIA5V,KAAAg5F,WAAAh5F,KAAAu8F,iBAAAE,qBAEAz8F,KAAAu8F,iBAAA1pC,UACA7yD,KAAAu8F,iBAAAC,kBACAx8F,KAAAu8F,iBAAAE,gBAEA,CACAC,cAAA,EACAZ,aAAA,GACAG,SAAA,GAEAzgF,SAAA,CACAy/E,iBAAAt8F,EAAA0hB,QCpjBAnhB,MAAAmvB,sBAAAnvB,MAAA01B,qBAAA31B,OAAA,CACA8gC,OAAA,KACA48D,oBAAA,KAEAC,mBAAA,KAEAC,uCAAA,KACAC,uCAAA,EAEArnE,oBAAA,WAGA,OADAz1B,KAAA+/B,OAAA//B,KAAA4S,WAAAgD,KAAA,eACA5V,KAAA+/B,OAAA7lB,SAAA,gBAGA2L,UAAA,WAEA7lB,KAAA+8F,mBAIA,UAAA/8F,KAAAogB,aAAApM,SAAAoQ,SACA,cAAApkB,KAAAogB,aAAAmJ,4BACAnkB,QAAA4T,QAAAhZ,KAAA+/B,OAAA,qBAEA//B,KAAA48F,mBAAA,IAAA19F,MAAAw5F,qBAAA14F,KAAAA,KAAAs2B,kBAEAt2B,KAAA48F,mBAAA,KAIA,cAAA58F,KAAAogB,aAAAmJ,4BACAvpB,KAAA0c,YAAA1c,KAAA80B,kBAAA,SAAA,SAAAzb,GACA,IAAA4c,EAAAt3B,EAAA0a,EAAA6c,QAEAD,EAAAtgB,SAAA,YACA,IAAA3V,KAAAg9F,iBAAA/mE,IACAj2B,KAAAk7F,eAAAjlE,OAOA8mE,iBAAA,WAIA,IAHA,IAAAE,EAAAj9F,KAAAogB,aAAAmJ,2BACA2zE,EAAAl9F,KAAA+/B,OAAA7lB,SAAA,SAAAA,WAAAA,SAAA,oBAEAxa,EAAA,EAAAA,EAAAw9F,EAAA58F,OAAAZ,IAAA,CACA,IAAA6c,EAAA2gF,EAAA/qF,GAAAzS,GACAwO,EAAAqO,EAAArO,KAAA,kBAGA,GAAAA,IAAA+uF,EAAA,CACAj9F,KAAA28F,oBAAApgF,EACA,IAAA4gF,EAAAn9F,KAAAogB,aAAAqJ,2BAEAlN,EACAzK,SAAA,WAAAqrF,GACA/jF,GAAA,QAAApZ,KAAAo9F,+BAAAjhF,KAAAnc,WACA,CAEAA,KAAAogB,aAAAkM,uBAAApe,GAEA5N,QACAic,EACAzK,SAAA,aACAsH,GAAA,QAAApZ,KAAAq9F,iCAAAlhF,KAAAnc,UAMA81B,eAAA,WACA,OAAA,GAGAa,gBAAA,WACA,OAAA32B,KAAAs9F,wCACAt9F,KAAA68F,uCAEA78F,KAAAm1B,eAIAO,gBAAA,SAAAkB,GACA52B,KAAAs9F,wCACAt9F,KAAA68F,uCAAAjmE,EAEA52B,KAAAm1B,cAAAyB,GAIAC,eAAA,WACA,OAAA72B,KAAAs9F,wCACAt9F,KAAA88F,sCAEA98F,KAAAo1B,cAIAO,eAAA,SAAAmB,GACA92B,KAAAs9F,wCACAt9F,KAAA88F,sCAAAhmE,EAEA92B,KAAAo1B,aAAAp1B,KAAA88F,sCAAAhmE,GAIAO,kBAAA,WACA,IAAAv3B,EAAAE,KAAA4vB,OAQA,OAJA5vB,KAAAs9F,0CACAx9F,EAAAilB,SAAAw4E,gBAAAv9F,KAAA48F,mBAAA7jE,YAAA/xB,KAAA,OAGAlH,GAGA03B,eAAA,SAAAD,GACAv3B,KAAA4vB,KAAA2H,GAEAv3B,KAAA48F,oBACA58F,KAAA48F,mBAAAh1E,SAAA2P,GAGAr4B,MAAA8I,GAAAwqD,0BAGAp+C,oBAAA,SAAAsB,GACAxW,MAAAkV,oBAAAsB,EAAA1O,KAAA,QAAA0O,EAAA,CACA5V,OAAA,CACA09F,gCAAAx9F,KAAAogB,aAAAY,WAEAnB,cAAApV,IACAA,EAAA65D,iBACAtkE,KAAAy9F,uBAAA/nF,EAAAjL,EAAA65D,kBAGAlkD,aAAApgB,KAAAogB,gBAIA48E,iBAAA,SAAA/0E,EAAAiG,GACA,IAAAA,IAAAjG,EAAAtS,SAAA,YACA,OAAA,EAGAsS,EAAA7R,YAAA,YAQA,IALA,IAAAuqB,EAAA1Y,EAAA3D,SAAAA,SACAzO,EAAA8qB,EAAA35B,KAAA,MACAyuF,EAAA90D,EAAA35B,KAAA,SACA4yF,EAAAj5D,EAAAhnB,OAEAigF,EAAAt5F,QAAA,CACA,IAAA8E,QAAA4T,QAAA4gF,EAAA,mBAAA,CACA,GAAAA,EAAA5yF,KAAA,UAAAyuF,EACA,MAGAz1F,KAAAi1B,eACAj1B,KAAAi1B,cAAA7M,YAAAwxE,GAGA55F,KAAA48F,oBACA58F,KAAA48F,mBAAAx0E,YAAAwxE,GAGA55F,KAAAm1B,gBAGA,IAAAuoE,EAAA9D,EAAAjgF,OACAigF,EAAAt/E,SACAs/E,EAAA8D,EAIA19F,KAAAogB,aAAAG,cAAAiK,sBACAxqB,KAAAogB,aAAAG,cAAAiK,oBAAA,IAGAxqB,KAAAogB,aAAAG,cAAAiK,oBAAAtpB,KAAA2U,GACA7V,KAAAogB,aAAA4I,iBAAA,sBAAAhpB,KAAAogB,aAAAG,cAAAiK,qBAGAxqB,KAAAq2B,iBAGA6kE,eAAA,SAAAjzE,EAAAiG,GACA,IAAAA,GAAAjG,EAAAtS,SAAA,YACA,OAAA,EAMA,GAHAsS,EAAAnW,SAAA,YAGA9R,KAAAogB,aAAAG,cAAAiK,oBAAA,CACA,IAAAmW,EAAA1Y,EAAA3D,SAAAA,SACAzO,EAAA8qB,EAAA35B,KAAA,MACA5H,EAAAT,EAAAsO,QAAA4I,EAAA7V,KAAAogB,aAAAG,cAAAiK,qBAEA,IAAA,IAAAprB,EAAA,CACAY,KAAAogB,aAAAG,cAAAiK,oBAAAlb,OAAAlQ,EAAA,GACAY,KAAAogB,aAAA4I,iBAAA,sBAAAhpB,KAAAogB,aAAAG,cAAAiK,qBAGA,IAAAuwE,EAAA/6F,KAAAg7F,uBAAAr6D,GAGA7gC,EAAAnB,EAAAM,QAAA,EAAA,GAAAe,KAAAgU,SAAAlU,QACAA,EAAAilB,SAAA44E,aAAA9nF,EAEA3W,MAAA4H,kBAAA,oCAAAhH,EAAA,CAAA2K,EAAA5C,KAEA,GAAAkzF,EAAAz2E,SAAAhkB,QAIA,YAAAuH,EAAA,CACA,IAAA0vB,EAAA54B,EAAA8L,EAAA1L,MAGA63B,EAAA52B,KAAAm1B,cAAAoC,EAAAj3B,OACAw2B,EAAA92B,KAAAgU,SAAAgW,WAAAuN,EAAAj3B,SAAAN,KAAAgU,SAAAgW,UAEA,GAAA8M,EAAA,CAEA,IAAA8mE,EAAA7C,EAAAl3B,UAEA7jE,KAAAi1B,eACAj1B,KAAAi1B,cAAA7M,YAAAw1E,GAGA59F,KAAA48F,oBACA58F,KAAA48F,mBAAAx0E,YAAAw1E,GAGAA,EAAAtjF,SACAsc,GAAAgnE,EAAAt9F,YAGAw2B,EAAA92B,KAAAo1B,aAGA2lE,EAAAtkF,YAAA8gB,GACAv3B,KAAAg1B,YAAAa,KAAA0B,IAEAv3B,KAAAogB,aAAAkD,SAAAtjB,KAAAgU,SAAA+e,cACA/yB,KAAAi1B,cAAArN,SAAA2P,EAAA1S,OAAA,oBACA7kB,KAAAogB,aAAA4L,wBAGAhsB,KAAA48F,oBACA58F,KAAA48F,mBAAAh1E,SAAA2P,GAGAr4B,MAAA8S,eAAAvH,EAAAuU,UACA9f,MAAAoT,eAAA7H,EAAAwU,UACA/f,MAAA8I,GAAAwqD,yBAEAxyD,KAAA01B,gBAAAkB,GACA52B,KAAA21B,eAAAmB,GAGA92B,KAAAq2B,sBAOA2kE,uBAAA,SAAAr6D,GACA,OAAAhiC,EACA,wDACAgiC,EAAAzmB,WAAA5Z,OADA,sCAKAk1B,YAAAmL,IAGA28D,sCAAA,WACA,OACAt9F,KAAA48F,oBACA58F,KAAA48F,mBAAA1V,UACAlnF,KAAA48F,mBAAAxD,sBAIAgE,+BAAA,SAAA/jF,GACA,IAAAkD,EAAA5d,EAAA0a,EAAAE,eAEA,IAAAgD,EAAA5G,SAAA,WAAA,CAKA,IACAkoF,EAAA,QADA79F,KAAAogB,aAAAqJ,2BACA,OAAA,MAEAzpB,KAAAogB,aAAAoM,iBAAAqxE,GACA79F,KAAA89F,uBAAAzkF,EAAAkD,KAGA8gF,iCAAA,SAAAhkF,GACA,IAAAkD,EAAA5d,EAAA0a,EAAAE,eAEA,IAAAgD,EAAA5G,SAAA,WAAA,CAIA,IAAAzH,EAAAqO,EAAArO,KAAA,kBAEAlO,KAAAogB,aAAA0I,iBAAA5a,GACAlO,KAAA89F,uBAAAzkF,EAAAkD,KAGAuhF,uBAAA,SAAAzkF,EAAAkD,GACAvc,KAAA28F,qBACA38F,KAAA28F,oBAAAvmF,YAAA,oBAGAmG,EAAAnG,YAAA,aAAAtE,SAAA,mBACA9R,KAAAogB,aAAAkJ,iCACAtpB,KAAAogB,aAAA6F,iBAGAjmB,KAAAogB,aAAAsH,qBAGA+1E,uBAAA,SAAA/nF,EAAA4uD,GACA,IAAAuM,EAAAn7D,EAAA+D,QAAA,MAEA,IAAA,IAAAvL,KAAAo2D,EACAA,EAAAp/D,eAAAgJ,IAIA2iE,EAAA32D,SAAA,eAAAhM,EAAA,YAAAnP,KAAAulE,EAAAp2D,OCtVAhP,MAAA6+F,eAAA7+F,MAAA04B,uBAAA34B,OAAA,CACAyhB,cAAA,KACAs9E,WAAA,KAEAprF,WAAA,KACAmlB,mBAAA,KACArV,UAAA,KACAu7E,aAAA,KACA9iF,SAAA,KAEA+iF,aAAA,EAEA3iF,KAAA,SAAAvH,GAKA,IAAArV,EAAAoG,cAAAiP,GAAA,CAKA,IAHA,IAAAmkB,EAAA,GACAh4B,EAAA,CAAA,KAAA,OAAA,aAAA,mBAEAT,EAAA,EAAAA,EAAAS,EAAAG,aACA,IAAA83B,UAAA14B,GADAA,IAEAy4B,EAAAh4B,EAAAT,IAAA04B,UAAA14B,GAMAsU,EAAAmkB,EAGAn4B,KAAA4vB,KAAAjxB,EAAAM,OAAA,GAAAC,MAAA6+F,eAAAviF,SAAAxH,IAEAhU,KAAAi+F,aAAAj+F,KAAA4S,WAAAsH,SAAA,QAAAA,SAAA,SACAla,KAAAmb,SAAAnb,KAAAi+F,aAAAtkF,OAEA3Z,KAAA0c,YAAA1c,KAAAi+F,aAAA,QAAA,KACAj+F,KAAA0gB,eACA4E,aAAAtlB,KAAA0gB,eAGA1gB,KAAA0gB,cAAA6E,WAAAvlB,KAAAm+F,cAAAhiF,KAAAnc,MAAA,OAGAA,KAAA0c,YAAA1c,KAAAi+F,aAAA,WAAA,SAAA5kF,GAOA,OANAA,EAAA2G,UAAA5a,QAAAqgB,YACApM,EAAAqM,iBAKArM,EAAA2G,SACA,KAAA5a,QAAAqgB,WAKA,OAJApM,EAAAqM,sBACA1lB,KAAAg+F,YACAh+F,KAAAo+F,UAAAp+F,KAAAg+F,WAAAp5E,SAAAC,OAAA,YAKA,KAAAzf,QAAAoiF,SAEA,GADAnuE,EAAAqM,iBACA1lB,KAAAg+F,WAAA,CACA,IAAAK,EAAAr+F,KAAAg+F,WAAAp5E,SAAAC,OAAA,UACA,GAAAw5E,EAAA/9F,OAAA,CACA,IAAAg+F,EAAAD,EAAA/5E,SAAAu/C,UAAAjuD,KAAA,oBAAA2E,QACA+jF,EAAAh+F,QACAN,KAAAu+F,YAAAD,QAGAt+F,KAAAu+F,YAAAv+F,KAAAg+F,WAAAp5E,SAAAzS,GAAA,IAGA,OAGA,KAAA/M,QAAAkiF,OAEA,GADAjuE,EAAAqM,iBACA1lB,KAAAg+F,WAAA,CACA,IAAAK,EAAAr+F,KAAAg+F,WAAAp5E,SAAAC,OAAA,UACA,GAAAw5E,EAAA/9F,OAAA,CACA,IAAAk+F,EAAAH,EAAA/5E,SAAAwuE,UAAAl9E,KAAA,oBAAAoc,OACAwsE,EAAAl+F,QACAN,KAAAu+F,YAAAC,QAGAx+F,KAAAu+F,YAAAv+F,KAAAg+F,WAAAp5E,SAAAzS,GAAAnS,KAAAg+F,WAAAp5E,SAAAtkB,OAAA,IAGA,WAKAN,KAAA0c,YAAA1c,KAAAi+F,aAAA,SAAA,WACAj+F,KAAAg+F,YACAh+F,KAAAg+F,WAAAnjE,UAIA76B,KAAA0c,YAAA1c,KAAAi+F,aAAA,QAAA,WACAj+F,KAAAk+F,YACAl+F,KAAAk+F,aAAA,EAIA34E,WAAA,KACAvlB,KAAAg+F,YACAh+F,KAAAg+F,WAAA3/E,QAEA,OAIAkgF,YAAA,SAAA55E,GACA3kB,KAAAg+F,WAAAp5E,SAAAxO,YAAA,SACAuO,EAAA7S,SAAA,SACA9R,KAAAg+F,WAAAp0C,UAAA17C,KAAA,wBAAAyW,EAAAzW,KAAA,QAIAuqB,kBAAA95B,EAAA0hB,KAEA8Y,mBAAA,WACA,OAAA,MAGAglE,cAAA,WAOA,GANAn+F,KAAAg+F,YACAh+F,KAAAy+F,iBAGAz+F,KAAAi+F,aAAA35F,MAEA,CACAtE,KAAAmb,SAAA/E,YAAA,UAIA,IAFA,IAAAsoF,EAAA,GAEAh/F,EAAA,EAAAA,EAAAM,KAAA0iB,UAAApiB,OAAAZ,IAAA,CACA,IAAAmW,EAAAlX,EAAAqB,KAAA0iB,UAAAhjB,IAAAsH,KAAA,MAEA6O,GACA6oF,EAAAx9F,KAAA2U,GAIA7V,KAAAgU,SAAAwnB,iBACAkjE,EAAAx9F,KAAAlB,KAAAgU,SAAAwnB,iBAGA,IAAAx0B,EAAA,CACAxB,OAAAxF,KAAAi+F,aAAA35F,MACAq6F,WAAA3+F,KAAAgU,SAAA2qF,WACAD,WAAAA,GAGAx/F,MAAA4H,kBAAA,uBAAAE,EAAA,CAAAyD,EAAA5C,KAQA,GANA7H,KAAAg+F,YACAh+F,KAAAy+F,iBAGAz+F,KAAAmb,SAAArJ,SAAA,UAEA,YAAAjK,EAAA,CAMA,IALA,IAGAkK,EAHA2hB,EAAA/0B,EAAA,+BAAA2P,SAAAlJ,QAAAsN,MACAb,EAAAlT,EAAA,SAAA2P,SAAAolB,GAIAh0B,EAAA,EAAAA,EAAA+K,EAAAm0F,KAAAt+F,OAAAZ,IACAqS,EAAApT,EAAA,SACA2P,SAAAuD,GAEAlT,EAAA,wBACA2P,SAAAyD,GACA1O,KAAAoH,EAAAm0F,KAAAl/F,GAAA0a,OACApT,KAAA,KAAAyD,EAAAm0F,KAAAl/F,GAAAmW,IACA/D,SAAArH,EAAAm0F,KAAAl/F,GAAAm/F,QAAA,WAAA,IAGAp0F,EAAAq0F,aACA/sF,EAAApT,EAAA,SAAA2P,SAAAuD,GACAlT,EAAA,yBAAA2P,SAAAyD,GAAA1O,KAAA2D,EAAAxB,SAGAqM,EAAA+D,KAAA,0BAAA9D,SAAA,SAEA9R,KAAAg+F,WAAA,IAAA54F,QAAA25F,KAAArrE,EAAA,CACAsrE,gBAAAh/F,KAAAi+F,aACAn0C,eAAA9pD,KAAAo+F,UAAAjiF,KAAAnc,QAGAA,KAAA0c,YAAAgX,EAAA,YAAA,KACA1zB,KAAAk+F,aAAA,IAGAl+F,KAAAg+F,WAAAnjE,eAIA76B,KAAAmb,SAAArJ,SAAA,WAIAssF,UAAA,SAAAjuE,GACA,IAAAxL,EAAAhmB,EAAAwxB,GAEA,IAAAxL,EAAAhP,SAAA,YAAA,CAIA,IAAAE,EAAA8O,EAAA3d,KAAA,MACAoT,EAAAuK,EAAAthB,OAEAqS,EAAA/W,EAAA,SAAA,CACAwb,MAAA,0BACAg4D,UAAAt8D,EACAopF,eAAAj/F,KAAAgU,SAAAkrF,aACAC,aAAA/kF,EACAglF,gBAAA,MACA9wF,SAAAtO,KAAA+3B,oBAEA1zB,EAAA1F,EAAA,WAAA,CACA4C,KAAA,SACA0D,KAAAjF,KAAAgU,SAAA/O,KAAA,KACAE,MAAA0Q,IACAvH,SAAAoH,GAEA/W,EAAA,OAAA,CACAwb,MAAA,cACAC,MAAAlb,MAAAS,EAAA,MAAA,YACA2O,SAAAoH,GAEA,IAAA2pF,EAAA1gG,EAAA,SAAA,CACAwb,MAAA,UACA7L,SAAAoH,GAEA/W,EAAA,UAAA,CACAwb,MAAA,QACA9W,KAAA+W,IACA9L,SAAA+wF,GAEA,IAAAn3C,IAAAxyC,EAAA6kB,aAAA,IACAv6B,KAAAi+F,aAAAjzE,IAAA,UAAA9rB,MAAAuY,KAAAywC,EAAA,MAEA,IAAA7tB,EAAA,GAYA,GAXAA,EAAA,UAAAn7B,MAAAuY,MAAA,EACAzX,KAAAi+F,aAAAzmF,SAAA6iB,EAAA,QAEAr6B,KAAA0iB,UAAA1iB,KAAA0iB,UAAA/F,IAAAjH,GAEA1V,KAAA85B,YAAApkB,GAEA1V,KAAAy+F,iBACAz+F,KAAAi+F,aAAA35F,IAAA,IACAtE,KAAAi+F,aAAAhnF,QAAA,UAEApB,EAAA,CAEAH,EAAA5D,SAAA,oBAEA,IAAA9K,EAAA,CACA+yD,QAAA/5D,KAAAgU,SAAA2qF,WACAvkF,MAAAA,GAGAlb,MAAA4H,kBAAA,kBAAAE,EAAA,CAAAyD,EAAA5C,KACA,YAAAA,GAAA4C,EAAA9C,SACA+N,EAAAxH,KAAA,UAAAzD,EAAAoL,IACAxR,EAAAC,IAAAmG,EAAAoL,IAEAH,EAAAU,YAAA,sBAEApW,KAAAi6B,cAAAvkB,GAEA,YAAA7N,GAEA3I,MAAA8I,GAAAC,aAAA/I,MAAAS,EAAA,MAAA,mCAOA8+F,eAAA,WACAz+F,KAAAg+F,WAAA3/E,OACAre,KAAAg+F,WAAAtzE,UACA1qB,KAAAg+F,WAAA,OAEA,CACAxiF,SAAA,CACAmjF,WAAA,QCvSAz/F,MAAAovB,uBAAApvB,MAAA01B,qBAAA31B,OAAA,CACAw2B,oBAAA,WACA,OAAAz1B,KAAA4S,WAAAsH,SAAA,SCLAhb,MAAAg1B,GACA,CACA4+C,gBAAA,SAAAuJ,GACAA,EAAA19E,EAAAM,OAAA,CACAqgG,cAAA,GACAjjB,GACA,IAAAh4E,EAAA1F,EAAA,WAAA,CACAuP,KAAA,CACAiM,MAAA,OACA5Y,KAAA86E,EAAA96E,MAAA,OACAg+F,UAAAljB,EAAAkjB,UACA1pF,GAAAwmE,EAAAxmE,GACAK,KAAAmmE,EAAAnmE,KACAjR,KAAAo3E,EAAAp3E,KACAE,MAAAk3E,EAAAl3E,MACAq6F,UAAAnjB,EAAAmjB,UACAC,UAAAz/F,KAAA0/F,kBAAArjB,EAAAojB,WACAH,aAAA,kBAAAjjB,EAAAijB,aAAAjjB,EAAAijB,aAAA,KAAA,MAAAjjB,EAAAijB,aACAr6B,SAAAjlE,KAAA2/F,iBAAAtjB,EAAApX,UACA26B,SAAAvjB,EAAAujB,SACAxlF,MAAAiiE,EAAAjiE,MACAqa,YAAA4nD,EAAA5nD,YACAwoD,KAAAZ,EAAAY,KACAlrD,IAAAsqD,EAAAtqD,IACArI,IAAA2yD,EAAA3yD,OA8BA,OA1BA2yD,EAAAliE,OACA9V,EAAAyN,SAAAuqE,EAAAliE,OAEAkiE,EAAA5nD,aACApwB,EAAAyN,SAAA,YAEA,aAAAuqE,EAAA96E,MACA8C,EAAAyN,SAAA,YAEAuqE,EAAApX,UACA5gE,EAAAyN,SAAA,YAEAuqE,EAAAnmE,MACA7R,EAAAyN,SAAA,aAGAuqE,EAAAwjB,eAAAxjB,EAAAmjB,WACAn7F,EACA6J,KAAA,wBACA8c,IAAA,YAAA,QAAA9rB,MAAAqY,YAAA,QAAA,QAAA,IAAA8kE,EAAAmjB,UAAAhvE,WAAAlwB,OAAA,GAAA,OAGA+7E,EAAA5nD,aAAA4nD,EAAAwjB,gBACA,IAAAz6F,QAAA+T,SAAA9U,GAGA,aAAAg4E,EAAA96E,KACA5C,EAAA,kCAAA0T,OAAAhO,GAEAA,GAIAmwB,gBAAA,SAAA6nD,GAIA,OAHAA,EAAAxmE,KACAwmE,EAAAxmE,GAAA,OAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAEA1R,KAAA8kE,YAAA9kE,KAAA8yE,gBAAAuJ,GAAAA,IAGAyjB,oBAAA,SAAAzjB,GACA,IAAAxmE,EAAAwmE,EAAAxmE,IAAA,WAAAlF,KAAAC,MAAA,IAAAD,KAAAe,UACAquF,EAAA1jB,EAAA0jB,UAAAlqF,EAAA,OAEAjD,EAAAjU,EAAA,SAAA,CACAwb,MAAA,aAGA9V,EAAArE,KAAA8yE,gBAAAn0E,EAAAM,OAAA,GAAAo9E,EAAA,CACAujB,UAAA,KACAtxF,SAAAsE,GAmBA,OAjBAjU,EAAA,YAAA,CACA4C,KAAA,SACAsU,GAAAkqF,EACA5lF,MAAA,MACAqT,YAAA,YACApT,MAAAlb,MAAAS,EAAA,MAAA,qBACA0a,aAAAnb,MAAAS,EAAA,MAAA,uBACA2O,SAAAsE,GAEAwG,GAAA,QAAA,KACA/U,EAAA,GAAAwkD,SACAriD,SAAAw5F,YAAA,QACA9gG,MAAA8I,GAAA2X,cAAAzgB,MAAAS,EAAA,MAAA,yBACAiT,EAAAqE,QAAA,QACA5S,EAAA,GAAAE,kBAAA,EAAA,KAGAqO,GAGAqtF,oBAAA,SAAA5jB,GAIA,OAHAA,EAAAxmE,KACAwmE,EAAAxmE,GAAA,WAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAEA1R,KAAA8kE,YAAA9kE,KAAA8/F,oBAAAzjB,GAAAA,IAGA6jB,qBAAA,SAAA7jB,GACA,IAAAzpE,EAAAjU,EAAA,SAAA,CACAwb,MAAA,iBAEAiE,EAAAzf,EAAA,SAAA,CACAwb,MAAA,SACA7L,SAAAsE,GACA5S,KAAAigG,oBAAAthG,EAAAM,OAAA,CACAiX,KAAAvF,KAAA+Y,IAAA/Y,KAAAohB,IAAAsqD,EAAAl3E,MAAA7E,OAAA,IAAA,KACA+7E,IAAA/tE,SAAA8P,GACA,IAAAsR,EAAA,IAAAtqB,QAAA03B,MAAAlqB,EAAA,CACAooB,kBAAA,IAKA,OAHApoB,EAAAwG,GAAA,OAAA,KACAsW,EAAArR,SAEAzL,GAGAutF,eAAA,SAAA9jB,GACA,IAAAjJ,EAAAz0E,EAAA,cAAA,CACAwb,MAAA,OACA2gD,KAAAuhB,EAAAvhB,MAAA,EACA7iD,KAAAokE,EAAApkE,MAAA,GACApC,GAAAwmE,EAAAxmE,GACA5Q,KAAAo3E,EAAAp3E,KACAu6F,UAAAnjB,EAAAmjB,UACAC,UAAApjB,EAAAojB,YAAAr6F,QAAAugB,iBAAA,GACAs/C,WAAAoX,EAAApX,SACAxwC,YAAA4nD,EAAA5nD,YACA11B,KAAAs9E,EAAAl3E,QAeA,OAZAk3E,EAAAwjB,eACAzsB,EAAAllE,KAAA,uBAAA,IAGAmuE,EAAAliE,OACAi5D,EAAAthE,SAAAuqE,EAAAliE,OAGAkiE,EAAAnmE,MACAk9D,EAAAthE,SAAA,aAGAshE,GAGAgtB,oBAAA,SAAA/jB,GAIA,OAHAA,EAAAxmE,KACAwmE,EAAAxmE,GAAA,WAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAEA1R,KAAA8kE,YAAA9kE,KAAAmgG,eAAA9jB,GAAAA,IAGAtQ,aAAA,SAAAsQ,GACA,IAAAzpE,EAAAjU,EAAA,SAAA,CACAwb,MAAA,WAGAkiE,EAAAliE,OACAvH,EAAAd,SAAAuqE,EAAAliE,OAGA,IAAAkmF,EAAA1hG,EAAA,YAAA,CACAkX,GAAAwmE,EAAAxmE,GACA5Q,KAAAo3E,EAAAp3E,KACAw6F,UAAApjB,EAAAojB,WAAAr6F,QAAAugB,iBAAA,GACAs/C,SAAAoX,EAAApX,SACAq7B,qBAAAjkB,EAAAqD,eACApxE,SAAAsE,GAGA,GAAAjU,EAAAoG,cAAAs3E,EAAAn1E,SAAA,CACA,IAAAA,EAAA,GACA,IAAA,IAAA5H,KAAA+8E,EAAAn1E,QAAA,CACA,IAAAm1E,EAAAn1E,QAAAhC,eAAA5F,GACA,SAEA,IAAA6wB,EAAAksD,EAAAn1E,QAAA5H,GACAX,EAAAoG,cAAAorB,QACA,IAAAA,EAAAowE,SACAr5F,EAAAhG,KAAAivB,GAEAjpB,EAAAhG,KAAA,CACA6U,MAAAoa,EAAApa,MACA5Q,WAAA,IAAAgrB,EAAAhrB,MAAAgrB,EAAAhrB,MAAA7F,EACA2lE,cAAA,IAAA90C,EAAA80C,UAAA90C,EAAA80C,WAIA/9D,EAAAhG,KAAA,CACA6U,MAAAoa,EACAhrB,MAAA7F,IAIA+8E,EAAAn1E,QAAAA,EAGA,IAAAs5F,EAAA,KAEA,IAAA,IAAA9gG,EAAA,EAAAA,EAAA28E,EAAAn1E,QAAA5G,OAAAZ,IAAA,CACA,IAAAywB,EAAAksD,EAAAn1E,QAAAxH,QAGA,IAAAywB,EAAAowE,SACAC,EAAA7hG,EAAA,cAAA,CACAoX,MAAAoa,EAAApa,QACAzH,SAAA+xF,GAEA1hG,EAAA,YAAA,CACAwG,MAAAgrB,EAAAhrB,MACAs7F,SAAAtwE,EAAAhrB,OAAAk3E,EAAAl3E,MACA8/D,cAAA,IAAA90C,EAAA80C,UAAA90C,EAAA80C,SACAlmE,KAAAoxB,EAAApa,QACAzH,SAAAkyF,GAAAH,GASA,OALAhkB,EAAA3I,SACA2sB,EAAAvuF,SAAA,eACA,IAAA5S,MAAAyZ,YAAA0nF,IAGAztF,GAGAuhB,kBAAA,SAAAkoD,GAIA,OAHAA,EAAAxmE,KACAwmE,EAAAxmE,GAAA,SAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAEA1R,KAAA8kE,YAAA9kE,KAAA+rE,aAAAsQ,GAAAA,IAGArX,eAAA,SAAAqX,GACA,IAAAxmE,EAAAwmE,EAAAxmE,IAAA,WAAAlF,KAAAC,MAAA,IAAAD,KAAAe,UAEArN,EAAA1F,EAAA,WAAA,CACA4C,KAAA,WACA4D,WAAA,IAAAk3E,EAAAl3E,MAAAk3E,EAAAl3E,MAAA,IACA0Q,GAAAA,EACAsE,MAAA,WACAlV,KAAAo3E,EAAAp3E,KACAw9C,QAAA45B,EAAA55B,QAAA,UAAA,KACAg9C,UAAAz/F,KAAA0/F,kBAAArjB,EAAAojB,WACAx6B,SAAAjlE,KAAA2/F,iBAAAtjB,EAAApX,UACAy7B,cAAArkB,EAAA3I,OACAitB,sBAAAtkB,EAAAukB,gBAGAvkB,EAAAliE,OACA9V,EAAAyN,SAAAuqE,EAAAliE,QAGAkiE,EAAA3I,QAAA2I,EAAAukB,iBACAv8F,EAAAyN,SAAA,eACA,IAAA5S,MAAAyZ,YAAAtU,IAGA,IAAAwa,EAAAlgB,EAAA,WAAA,CACAkiG,IAAAhrF,EACA9W,KAAAs9E,EAAAtmE,QAIA,OAAAsmE,EAAAp3E,OAAAo3E,EAAAp3E,KAAA3E,OAAA,GAAA,OAAA+7E,EAAAp3E,KAAAtD,QAAA,IACAhD,EAAA,CACAA,EAAA,WAAA,CACA4C,KAAA,SACA0D,KAAAo3E,EAAAp3E,KACAE,MAAA,KACA,GACAd,EAAA,GACAwa,EAAA,KAGAlgB,EAAA,CACA0F,EAAA,GACAwa,EAAA,MAKAiiF,oBAAA,SAAAzkB,GACAA,EAAAxmE,KACAwmE,EAAAxmE,GAAA,WAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAGA,IAAAy5D,EAAAxsE,EAAA,qCAAA,CACAkX,GAAAwmE,EAAAxmE,GAAA,WAgBA,OAbAwmE,EAAA9hE,OACA4wD,EAAAr5D,SAAA,SAEAuqE,EAAAtX,cACAoG,EAAAr5D,SAAA,oBAGA9R,KAAAglE,eAAAqX,GAAA/tE,SAAA68D,GAEAkR,EAAAtX,cACApmE,EAAA,+BAAA0E,KAAAg5E,EAAAtX,cAAAz2D,SAAA68D,GAGAA,GAGA41B,qBAAA,SAAA1kB,GACA,IAMA2kB,EAAAC,EANAruF,EAAAjU,EAAA,uCAEA09E,EAAAliE,OACAvH,EAAAd,SAAAuqE,EAAAliE,OAKAkiE,EAAA6kB,eACAF,EAAA3kB,EAAA2kB,UAAA,IACAC,EAAA5kB,EAAAhuE,QAAA2yF,EAGAriG,EAAA,UAAA2P,SAAAsE,GAAAP,OACArS,KAAAglE,eAAA,CACAnvD,GAAAwmE,EAAAxmE,GACAsE,MAAA,MACApE,MAAA,OAAAsmE,EAAA8kB,UAAAjiG,MAAAS,EAAA,MAAA,QAAA,OACAsF,KAAAo3E,EAAAp3E,KACAE,MAAA67F,EACAv+C,QAAAw+C,EACAxB,UAAApjB,EAAAojB,cAIAwB,GAAA,EAIA,IAAA,IAAAvhG,EAAA,EAAAA,EAAA28E,EAAAn1E,QAAA5G,OAAAZ,IAAA,CACA,IAAAywB,EAAAksD,EAAAn1E,QAAAxH,GAEAywB,EAAAhrB,OAAA67F,GAIAriG,EAAA,UAAA2P,SAAAsE,GAAAP,OACArS,KAAAglE,eAAA,CACAjvD,MAAAoa,EAAApa,MACA9Q,KAAAo3E,EAAAp3E,KAAAo3E,EAAAp3E,KAAA,KAAA,KACAE,MAAAgrB,EAAAhrB,MACAs9C,QAAAw+C,IAAA5kB,EAAAhuE,QAAA,IAAAe,SAAA+gB,EAAAhrB,OACA8/D,SAAAg8B,KAOA,OAFA,IAAA77F,QAAAsT,eAAA9F,GAEAA,GAGAwuF,0BAAA,SAAA/kB,GAKA,OAJAA,EAAAglB,UAAA,EACAhlB,EAAAxmE,KACAwmE,EAAAxmE,GAAA,iBAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAEA1R,KAAA8kE,YAAA9kE,KAAA+gG,qBAAA1kB,GAAAA,IAGA1J,kBAAA,SAAA0J,GACA,IAAAl3E,EAAAk3E,EAAAl3E,OAAA,IACA8T,EAAAojE,EAAApjE,oBAAA,IAEArG,EAAAjU,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAA,cACAmnF,aAAAn8F,EACAo8F,2BAAAtoF,EACApD,GAAAwmE,EAAAxmE,GACA4c,KAAA,WACAE,eAAA0pD,EAAAjjE,GAAA,OAAAijE,EAAAgK,cAAA,QAAA,QACAmb,kBAAAnlB,EAAAolB,QACAf,cAAArkB,EAAA3I,OACAitB,sBAAAtkB,EAAAukB,gBAyCA,OAtCAvkB,EAAAjjE,GACAxG,EAAAd,SAAA,MACAuqE,EAAAgK,eACAzzE,EAAAd,SAAA,iBAGAuqE,EAAA5J,OACA7/D,EAAAd,SAAA,SAGAuqE,EAAApX,UACAryD,EAAAd,SAAA,YAGAnT,EACA,uEAGA2P,SAAAsE,GAEAypE,EAAAp3E,MACAtG,EAAA,WAAA,CACA4C,KAAA,SACA0D,KAAAo3E,EAAAp3E,KACAE,MAAAk3E,EAAAjjE,GAAAjU,EAAAk3E,EAAAgK,cAAAptE,EAAA,GACAgsD,SAAAoX,EAAApX,WACA32D,SAAAsE,IAGAypE,EAAA3I,QAAA2I,EAAAukB,iBACAhuF,EAAAd,SAAA,eACA,IAAA5S,MAAAyZ,YAAA/F,IAGA,IAAA1T,MAAAga,YAAAtG,EAAA,CACAk5B,SAAAuwC,EAAAvwC,UAAAntC,EAAA0hB,OAGAzN,GAGA43D,uBAAA,SAAA6R,GAIA,OAHAA,EAAAxmE,KACAwmE,EAAAxmE,GAAA,cAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAEA1R,KAAA8kE,YAAA9kE,KAAA2yE,kBAAA0J,GAAAA,GACAvqE,SAAA,sBAGA0vD,iBAAA,SAAA6a,GACA,MAAAxmE,EAAAwmE,EAAAxmE,IAAA,QAAAlF,KAAAC,MAAA,IAAAD,KAAAe,UACAgwF,EAAArlB,EAAAqlB,aAAA7rF,EAAA,aACA5Q,EAAAo3E,EAAAp3E,MAAA,KACAE,EAAAk3E,EAAAl3E,OAAA,KACAstE,EAAA4J,EAAA5J,QAAA,EACAgtB,EAAApjB,EAAAojB,WAAAr6F,QAAAugB,iBAAA,GACAs/C,EAAAoX,EAAApX,WAAA,EAEAryD,EAAAjU,EAAA,SAAA,CACAkX,GAAA6rF,EACAvnF,MAAA,yBAGAwnF,EAAAhjG,EAAA,SAAA,CACAwb,MAAA,gBAAAs4D,EAAA,SAAA,MACAnkE,SAAAsE,GAOAi6C,GALAluD,EAAA,SAAA,CACAwb,MAAA,gBACAknC,MAAAg7B,EAAAl3E,MAAA,CAAAqvC,gBAAA6nC,EAAAl3E,OAAA,OACAmJ,SAAAqzF,GAEAhjG,EAAA,SAAA,CACAwb,MAAA,0BAEA9H,OACA1T,EAAA,SAAA,CACAwb,MAAA,iCACAszE,cAAA,OACApqF,KAAA,OAGAiL,SAAAsE,IAEA5S,KAAA8yE,gBAAA,CACAj9D,GAAAA,EACA5Q,KAAAA,EACAE,MAAAjG,MAAA6P,MAAA5J,EAAA,KACA+Q,KAAA,GACAiE,MAAA,cACAslF,UAAAA,EACAx6B,SAAAA,EACA5qD,aAAAnb,MAAAS,EAAA,MAAA,qBACA2O,SAAAu+C,GAGA,OADA,IAAA3tD,MAAAkiE,WAAAxuD,GACAA,GAGAgvF,iBAAA,SAAAvlB,GAKA,OAJAA,EAAAglB,UAAA,EAAAQ,EACAxlB,EAAAxmE,KACAwmE,EAAAxmE,GAAA,QAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAEA1R,KAAA8kE,YAAA9kE,KAAAwhE,iBAAA6a,GAAAA,IAGA3J,gBAAA,SAAA2J,GACA,IAAAxmE,GAAAwmE,EAAAxmE,IAAA,OAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAAA,QACAzM,EAAAo3E,EAAAp3E,MAAA,KACAR,EAAAQ,EAAAA,EAAA,SAAA,KACAE,EAAAk3E,EAAAl3E,OAAA,mBAAAk3E,EAAAl3E,MAAA28F,SAAAzlB,EAAAl3E,MAAA,KACA48F,EAAA58F,EAAAjG,MAAAmD,WAAA8C,GAAA,KACAs6F,EAAApjB,EAAAojB,WAAAr6F,QAAAugB,iBAAA,GACAs/C,EAAAoX,EAAApX,WAAA,EAEAryD,EAAAjU,EAAA,SAAA,CACAwb,MAAA,gBAGA9V,EAAArE,KAAA8yE,gBAAA,CACAj9D,GAAAA,EACA5Q,KAAAR,EACAU,MAAA48F,EACAttE,YAAA,IACA6qE,cAAA,EACAG,UAAAA,EACAx6B,SAAAA,IACA32D,SAAAsE,GAgBA,OAdAjU,EAAA,gCAAA2P,SAAAsE,GAEA3N,GACAtG,EAAA,WAAA,CACA4C,KAAA,SACA0D,KAAAA,EAAA,aACAX,IAAApF,MAAA8iG,WACA1zF,SAAAsE,GAGAvO,EAAA7B,WAAA7D,EAAAM,OAAA,CACAgjG,YAAA98F,GAAA,IAAA5C,MACArD,MAAAuD,oBAEAmQ,GAGAsvF,gBAAA,SAAA7lB,GAIA,OAHAA,EAAAxmE,KACAwmE,EAAAxmE,GAAA,OAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAEA1R,KAAA8kE,YAAA9kE,KAAA0yE,gBAAA2J,GAAAA,IAGA8lB,sBAAA,SAAA9lB,GACA,IAAA32C,EAAA,IAAAnjC,KACA6/F,EAAA,IAAA7/F,KAAAmjC,EAAA28D,cAAA38D,EAAAo8D,WAAAp8D,EAAA48D,WACAjmB,EAAA19E,EAAAM,OAAA,CACAkb,MAAA,GACAjT,QAAA,CACA,QACA,WACA,YACA,WACA,YACA,aACA,aACA,YAEA4kC,SAAAntC,EAAA0hB,KACAogF,SAAA,KACA8B,UAAA,KACAC,QAAA,MACAnmB,GAEA,IAWAlsD,EACAC,EAZAsD,EAAA/0B,EAAA,SAAA,CAAAwb,MAAA,SACAtI,EAAAlT,EAAA,QAAA,CAAAwb,MAAA,WAAA7L,SAAAolB,GACA+uE,EAAA9jG,EAAA,QACAmT,SAAA,OACAzO,KAAAnE,MAAAS,EAAA,MAAA,QACAqH,KAAA,SAAA,OAEArI,EAAA,SACA0T,OAAAowF,GACAn0F,SAAAuD,GAIA,IAAA,IAAAnS,EAAA,EAAAA,EAAA28E,EAAAn1E,QAAA5G,OAAAZ,IAAA,CACA,IAAAq2B,EAAAsmD,EAAAn1E,QAAAxH,GACA,OAAAq2B,GACA,IAAA,QACA5F,EAAA,CACApa,MAAA7W,MAAAS,EAAA,MAAA,SACA4iG,UAAAH,EACAI,QAAAJ,GAEA,MACA,IAAA,WACA,IAAAM,EAAAh9D,EAAAi9D,SAAAzjG,MAAAuD,kBAAAmgG,SACAF,EAAA,IACAA,GAAA,GAEAvyE,EAAA,CACApa,MAAA7W,MAAAS,EAAA,MAAA,aACA4iG,UAAA,IAAAhgG,KAAAmjC,EAAA28D,cAAA38D,EAAAo8D,WAAAp8D,EAAA48D,UAAAI,GACAF,QAAAJ,GAEA,MACA,IAAA,YACAjyE,EAAA,CACApa,MAAA7W,MAAAS,EAAA,MAAA,cACA4iG,UAAA,IAAAhgG,KAAAmjC,EAAA28D,cAAA38D,EAAAo8D,YACAU,QAAAJ,GAEA,MACA,IAAA,WACAjyE,EAAA,CACApa,MAAA7W,MAAAS,EAAA,MAAA,aACA4iG,UAAA,IAAAhgG,KAAAmjC,EAAA28D,cAAA,GACAG,QAAAJ,GAEA,MACA,IAAA,YACAjyE,EAAA,CACApa,MAAA7W,MAAAS,EAAA,MAAA,kBAAA,CAAA+mE,IAAA,IACA67B,UAAA,IAAAhgG,KAAAmjC,EAAA28D,cAAA38D,EAAAo8D,WAAAp8D,EAAA48D,UAAA,GACAE,QAAAJ,GAEA,MACA,IAAA,aACAjyE,EAAA,CACApa,MAAA7W,MAAAS,EAAA,MAAA,kBAAA,CAAA+mE,IAAA,KACA67B,UAAA,IAAAhgG,KAAAmjC,EAAA28D,cAAA38D,EAAAo8D,WAAAp8D,EAAA48D,UAAA,IACAE,QAAAJ,GAEA,MACA,IAAA,aACAjyE,EAAA,CACApa,MAAA7W,MAAAS,EAAA,MAAA,kBAAA,CAAA+mE,IAAA,KACA67B,UAAA,IAAAhgG,KAAAmjC,EAAA28D,cAAA38D,EAAAo8D,WAAAp8D,EAAA48D,UAAA,IACAE,QAAAJ,GAEA,MACA,IAAA,WACAjyE,EAAA,CACApa,MAAA7W,MAAAS,EAAA,MAAA,aACA4iG,UAAA,IAAAhgG,KAAAmjC,EAAA28D,cAAA38D,EAAAo8D,WAAAp8D,EAAA48D,UAAA,KACAE,QAAAJ,GAKA,IAAArwF,EAAApT,EAAA,SACA4gB,EAAA5gB,EAAA,OAAA,CAAA0E,KAAA8sB,EAAApa,QACA/O,KAAA,SAAA+uB,GACA/uB,KAAA,YAAAmpB,EAAAoyE,WACAv7F,KAAA,UAAAmpB,EAAAqyE,SACAx7F,KAAA,YAAAmpB,EAAAoyE,UAAApyE,EAAAoyE,UAAAj5F,UAAA,MACAtC,KAAA,UAAAmpB,EAAAqyE,QAAAryE,EAAAqyE,QAAAl5F,UAAA,MAEA+yE,EAAAokB,UAAA1qE,GAAAsmD,EAAAokB,WACArwE,EAAA7Q,EAAA,IAGAxN,EAAAM,OAAAkN,GACAxN,EAAAzD,SAAAuD,GAGAlT,EAAA,SAAA2P,SAAAolB,GAEA,IAAAmvE,EAAAlkG,EAAA,SAAA,CAAAwb,MAAA,4BAAA7L,SAAAolB,GACAovE,EAAA9iG,KAAAkiG,gBAAA,CAAAnsF,MAAA7W,MAAAS,EAAA,MAAA,UAAA2O,SAAAu0F,GAAAjtF,KAAA,SACAmtF,EAAA/iG,KAAAkiG,gBAAA,CAAAnsF,MAAA7W,MAAAS,EAAA,MAAA,QAAA2O,SAAAu0F,GAAAjtF,KAAA,SAGAotF,EAAAF,EAAAnmF,IAAAomF,GACAC,EAAA5pF,GAAA,SAAA,SAAAC,GACAA,EAAA2G,UAAA5a,QAAA4Y,SAAArf,EAAAqB,MAAAgH,KAAA,cAAAi8F,MAAAnyE,GAAA,aACAzX,EAAA6X,qBAKA4xE,EAAA97F,KAAA,cAAAi8F,MAAA7pF,GAAA,aAAA,SAAAC,GACAA,EAAA6X,qBAEA6xE,EAAA/7F,KAAA,cAAAi8F,MAAA7pF,GAAA,aAAA,SAAAC,GACAA,EAAA6X,qBAGA,IAAAzM,EAAA,IAAArf,QAAA25F,KAAArrE,EAAA,CACAo2B,eAAA,SAAA35B,GACA,IAAAxL,EAAAhmB,EAAAwxB,GACA7W,EAAAjW,KAAAshB,EAAAthB,QACAohB,EAAAy+E,8BACAxvE,EAAA9d,KAAA,QAAAQ,YAAA,OACAuO,EAAA7S,SAAA,OAGAgxF,EAAAtgG,WAAA,UAAAmiB,EAAA3d,KAAA,cACA+7F,EAAAvgG,WAAA,UAAAmiB,EAAA3d,KAAA,YAEAq1E,EAAAvwC,SAAAnnB,EAAA3d,KAAA,cAAA,KAAA2d,EAAA3d,KAAA,YAAA,KAAA2d,EAAA3d,KAAA,cAIAg8F,EAAA5pF,GAAA,UAAA,WAEA,IAMAuL,EANA49E,EAAAO,EAAAtgG,WAAA,WACAggG,EAAAO,EAAAvgG,WAAA,WACA2gG,EAAAZ,EAAAA,EAAAj5F,UAAA,KACA85F,EAAAZ,EAAAA,EAAAl5F,UAAA,KAEAsb,EAAA/S,EAAA+D,KAAA,KAEAytF,GAAA,EAEA,IAAA,IAAA3jG,EAAA,EAAAA,EAAAklB,EAAAtkB,OAAAZ,IAEA,GADAilB,EAAAC,EAAAzS,GAAAzS,GAEAyjG,KAAAx+E,EAAA3d,KAAA,cAAA,OACAo8F,KAAAz+E,EAAA3d,KAAA,YAAA,MACA,CACAyd,EAAA4H,aAAA1H,EAAA,IACA0+E,GAAA,EACAhnB,EAAAvwC,SAAA,KAAA,KAAAnnB,EAAA3d,KAAA,WACA,MAIAq8F,IACA3vE,EAAA9d,KAAA,QAAAQ,YAAA,OACAysF,EAAA/wF,SAAA,OAEAqxF,GAAAC,EAEAD,GAAAC,EACA9pF,EAAAjW,KAAAy/F,EAAAx+F,MAAA,MAAAy+F,EAAAz+F,OACA6+F,EACA7pF,EAAAjW,KAAAnE,MAAAS,EAAA,MAAA,cAAA,CAAA2C,KAAAwgG,EAAAx+F,SAEAgV,EAAAjW,KAAAnE,MAAAS,EAAA,MAAA,YAAA,CAAA2C,KAAAygG,EAAAz+F,SANAgV,EAAAjW,KAAAnE,MAAAS,EAAA,MAAA,QAQA8kB,EAAAy+E,8BAEA7mB,EAAAvwC,SAAAy2D,EAAAC,EAAA,cAIA/9E,EAAArL,GAAA,QAAA,WACA0pF,EAAAtgG,WAAA,QACAugG,EAAAvgG,WAAA,WAGA,IAAA8gG,EAAA,cACAjnB,EAAAliE,QACAmpF,EAAAA,EAAA,IAAAjnB,EAAAliE,OAGA,IAAAb,EAAA3a,EAAA,YAAA,CACA4C,KAAA,SACA4Y,MAAAmpF,EACA91E,YAAA,OACAnqB,KAAAnE,MAAAS,EAAA,MAAA,SAqBA,OAlBA,IAAAyF,QAAAyU,QAAAP,EAAAmL,GAEA2L,GACA3L,EAAA4H,aAAA+D,GAGAisD,EAAAkmB,WACAO,EAAAtgG,WAAA,UAAA65E,EAAAkmB,WAGAlmB,EAAAmmB,SACAO,EAAAvgG,WAAA,UAAA65E,EAAAmmB,UAGAnmB,EAAAkmB,WAAAlmB,EAAAmmB,UACAQ,EAAA/rF,QAAA,UAGAqC,GAGAu5D,gBAAA,SAAAwJ,GACA,IAAAxmE,GAAAwmE,EAAAxmE,IAAA,OAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAAA,QACAzM,EAAAo3E,EAAAp3E,MAAA,KACAR,EAAAQ,EAAAA,EAAA,SAAA,KACAE,EAAAk3E,EAAAl3E,OAAA,mBAAAk3E,EAAAl3E,MAAA28F,SAAAzlB,EAAAl3E,MAAA,KACAs6F,EAAApjB,EAAAojB,WAAAr6F,QAAAugB,iBAAA,GACAs/C,EAAAoX,EAAApX,WAAA,EAEAryD,EAAAjU,EAAA,SAAA,CACAwb,MAAA,gBAGA9V,EAAArE,KAAA8yE,gBAAA,CACAj9D,GAAAA,EACA5Q,KAAAR,EACAgwB,YAAA,IACA6qE,cAAA,EACAG,UAAAA,EACAx6B,SAAAA,IACA32D,SAAAsE,GAiBA,OAfAjU,EAAA,gCAAA2P,SAAAsE,GAEA3N,GACAtG,EAAA,WAAA,CACA4C,KAAA,SACA0D,KAAAA,EAAA,aACAX,IAAApF,MAAA8iG,WACA1zF,SAAAsE,GAGAvO,EAAAk/F,WAAArkG,MAAAskG,mBACAr+F,GACAd,EAAAk/F,WAAA,UAAA,KAAAp+F,EAAAs+F,WAAA,GAAAt+F,EAAAu+F,aAAAv+F,EAAAw+F,cAGA/wF,GAGAgxF,gBAAA,SAAAvnB,GAIA,OAHAA,EAAAxmE,KACAwmE,EAAAxmE,GAAA,OAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAEA1R,KAAA8kE,YAAA9kE,KAAA6yE,gBAAAwJ,GAAAA,IAGAvX,YAAA,SAAA1gE,EAAAi4E,GACA,IAAAtmE,EAAAsmE,EAAAtmE,OAAA,cAAAsmE,EAAAtmE,MAAAsmE,EAAAtmE,MAAA,KAGAo1D,GAFAjsE,MAAA8c,aAAAqgE,EAAAvmE,QAAAumE,EAAAvmE,OAEAnX,EAAA09E,EAAAglB,SAAA,cAAA,SAAA,CACAlnF,MAAA,QACAtE,GAAAwmE,EAAAz/C,UAAAy/C,EAAAxmE,GAAAwmE,EAAAxmE,GAAA,SAAA,SAOA,GAJAwmE,EAAA9hE,OACA4wD,EAAAr5D,SAAA,SAGAiE,EACA,CAAA,IAAA2a,EAAA/xB,EAAA,0BAAA2P,SAAA68D,GAEAxsE,EAAA09E,EAAAglB,SAAA,YAAA,WAAA,CACAxrF,GAAAwmE,EAAAolB,UAAAplB,EAAAxmE,GAAA,GAAAwmE,EAAAxmE,MAAAwmE,EAAAglB,SAAA,SAAA,UAAA,MACAlnF,MAAAkiE,EAAAmB,SAAA,WAAA,KACAqjB,KAAAxkB,EAAAglB,UAAAhlB,EAAAxmE,GACAxS,KAAA0S,IACAzH,SAAAoiB,GAiBA,OAdA2rD,EAAAtX,cACApmE,EAAA,+BAAA0E,KAAAg5E,EAAAtX,cAAAz2D,SAAA68D,GAGAxsE,EAAA,wBAAA0T,OAAAjO,GAAAkK,SAAA68D,GAEAkR,EAAAwnB,SACAllG,EAAA,wBAAA0E,KAAAg5E,EAAAwnB,SAAAv1F,SAAA68D,GAGAkR,EAAAzqE,QACA5R,KAAA8jG,iBAAA34B,EAAAkR,EAAAzqE,QAGAu5D,GAGAx5D,gBAAA,SAAAC,GACA,IAAAyf,EAAA1yB,EAAA,wBAMA,OAJAiT,GACA5R,KAAA+jG,gBAAA1yE,EAAAzf,GAGAyf,GAGA0yE,gBAAA,SAAA1yE,EAAAzf,GACA,IAAA,IAAAlS,EAAA,EAAAA,EAAAkS,EAAAtR,OAAAZ,IACAf,EAAA,SAAA0E,KAAAuO,EAAAlS,IAAA4O,SAAA+iB,IAIAyyE,iBAAA,SAAA34B,EAAAv5D,GACA,GAAAA,EAAA,CAIAu5D,EAAAr5D,SAAA,cACAq5D,EAAAjxD,SAAA,UAAApI,SAAA,UAEA,IAAAkyF,EAAA74B,EAAAjxD,SAAA,aAEA8pF,EAAA1jG,SACA0jG,EAAAhkG,KAAA2R,kBAAArD,SAAA68D,IAGAnrE,KAAA+jG,gBAAAC,EAAApyF,KAGAqyF,qBAAA,SAAA94B,GACAA,EAAA/0D,YAAA,cACA+0D,EAAAjxD,SAAA,UAAA9D,YAAA,UACA+0D,EAAAjxD,SAAA,aAAAI,UAGAolF,kBAAA,SAAAD,GACA,OAAAA,IAAAr6F,QAAAugB,iBAAA,GAAA,YAAA,MAGAg6E,iBAAA,SAAA16B,GACA,OAAAA,EAAA,WAAA,OC94BA/lE,MAAAkjD,SAAAh9C,QAAAyV,KAAA5b,OAAA,CACAg8C,SAAA,KACAkH,aAAA,KACAzsC,SAAA,KACA1B,SAAA,KACAkwF,eAAA,GACAC,eAAA,KACAC,kBAAA,EACAC,kBAAA,EAEA9oF,KAAA,SAAA7F,EAAA1B,GACAhU,KAAAkkG,eAAA,CAAAhuF,KAAA,GAAA3U,KAAA,GAAA0oB,MAAA,IACAjqB,KAAA0V,SAAAA,EACA1V,KAAAmiD,aAAA,KACAniD,KAAAmkG,eAAA,KACAnkG,KAAAokG,kBAAA,EACApkG,KAAAqkG,kBAAA,EAIA,IAAA1iD,GAFA3tC,EAAArV,EAAAM,OAAA,GAAAC,MAAAkjD,SAAA5mC,SAAAxH,IAEA2tC,OAeA,IAAA,IAAAxgB,YAdAntB,EAAA2tC,OAEA3tC,EAAAmuC,cAAAnuC,EAAAmuC,aAAA7hD,SACA,iBAAA0T,EAAAmuC,eACAnuC,EAAAmuC,aAAA,CAAAnuC,EAAAmuC,eAGAniD,KAAAmiD,aAAAnuC,EAAAmuC,oBACAnuC,EAAAmuC,cAGAnuC,EAAAswF,YAAA,EAEAtkG,KAAAi7C,SAAAj7C,KAAA0V,SAAA6uF,WAAAvwF,GACA2tC,EACAA,EAAAz8C,eAAAi8B,IAIAnhC,KAAAi7C,SAAA7hC,GAAA+nB,EAAAwgB,EAAAxgB,IAGAnhC,KAAAgU,SAAAA,EAEAhU,KAAAi7C,SAAA7hC,GAAA,gBAAApZ,KAAAwkG,UAAAroF,KAAAnc,QAMAsiD,UAAA,SAAAmiD,QAEA,IAAAvlG,MAAA0H,oBAAA,IAAA1H,MAAA2H,iBAEA49F,EAAAvlG,MAAA0H,eAAA1H,MAAA2H,gBAGA7G,KAAAi7C,SAAAspD,WAAA,SAAA,CAAA38C,SAAA68C,KAMAC,cAAA,WACA,OAAA1kG,KAAAi7C,SAAAspD,WAAA,WAMArhD,aAAA,WAEA,OAAAljD,KAAA0kG,gBAAA,GAMAF,UAAA,SAAA95F,EAAA1D,GACA0D,EAAAwmB,kBAEA,IAAAyzE,GAAA,EA8CA,OA5CA3kG,KAAAmiD,eACAniD,KAAAmkG,gBACAnkG,KAAA4kG,uBAGAD,GAAA,GAIA39F,EAAA69F,UAAAC,KAAA,KACA,IAAA7hD,EAAAj8C,EAAA+7C,MAAA,GACAgiD,GAAA,EACA,GAAAJ,EAAA,CACA,IACAK,EADA/hD,EAAAh+C,KAAAU,MAAA,oBACA,IACA,IAAAhH,EAAAsO,QAAA+3F,EAAAp1F,cAAA5P,KAAAmkG,kBACAY,GAAA,EACA/kG,KAAAkkG,eAAA3iG,KAAAL,KAAA,IAAA+hD,EAAAh+C,KAAA,MAIAg+C,EAAA/sC,KAAAlW,KAAAgU,SAAAixF,cACAjlG,KAAAkkG,eAAAhuF,KAAAhV,KAAA,IAAA+hD,EAAAh+C,KAAA,KACA8/F,GAAA,GAIAA,GAAA,mBAAA/kG,KAAAgU,SAAA8zC,kBAAA9nD,KAAAgU,SAAA8zC,gBAAA9nD,KAAAqkG,qBACArkG,KAAAkkG,eAAAj6E,MAAA/oB,KAAA,IAAA+hD,EAAAh+C,KAAA,KACA8/F,GAAA,GAGAA,IACA/kG,KAAAqkG,oBACAr9F,EAAAmqD,YAGAnxD,KAAAokG,oBAAAp9F,EAAAk+F,cAAA5kG,SACAN,KAAAokG,kBAAA,EACApkG,KAAAqkG,kBAAA,EACArkG,KAAAmlG,2BAIA,GAMAA,qBAAA,WACA,IAAA/hG,EAEApD,KAAAkkG,eAAA3iG,KAAAjB,SAEA8C,EADA,IAAApD,KAAAkkG,eAAA3iG,KAAAjB,OACA,+EAEA,gFAGA8C,EAAAlE,MAAAS,EAAA,MAAAyD,EAAA,CAAA2/C,MAAA/iD,KAAAkkG,eAAA3iG,KAAAd,KAAA,MAAA2kG,MAAAplG,KAAAmiD,aAAA1hD,KAAA,QACAT,KAAAkkG,eAAA3iG,KAAA,GACA2G,MAAA9E,IAGApD,KAAAkkG,eAAAhuF,KAAA5V,SAEA8C,EADA,IAAApD,KAAAkkG,eAAAhuF,KAAA5V,OACA,gGAEA,oGAGA8C,EAAAlE,MAAAS,EAAA,MAAAyD,EAAA,CAAA2/C,MAAA/iD,KAAAkkG,eAAAhuF,KAAAzV,KAAA,MAAAyV,KAAAlW,KAAAqlG,cAAAnmG,MAAAomG,iBACAtlG,KAAAkkG,eAAAhuF,KAAA,GACAhO,MAAA9E,IAGApD,KAAAkkG,eAAAj6E,MAAA3pB,SAEA8C,EADA,IAAApD,KAAAkkG,eAAAj6E,MAAA3pB,OACA,oFAEA,qFAGA8C,EAAAlE,MAAAS,EAAA,MAAAyD,EAAA,CAAA2/C,MAAA/iD,KAAAkkG,eAAAj6E,MAAAxpB,KAAA,QACAT,KAAAkkG,eAAAj6E,MAAA,GACA/hB,MAAA9E,KAIAiiG,cAAA,SAAAE,GAGA,GAAAA,EAFA,KAGA,OAAAA,EAAA,KAGA,IAEAC,GAAA,EAEA,GACAD,GAXA,OAYAC,QAEAD,GAdA,MAgBA,OAAAA,EAAAE,QAAA,GAAA,IAVA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,MAUAD,IAGAZ,qBAAA,WACA5kG,KAAAmkG,eAAA,GAEA,IAAA,IAAAzkG,EAAA,EAAAA,EAAAM,KAAAmiD,aAAA7hD,OAAAZ,IAAA,CACA,IAAAgmG,EAAA1lG,KAAAmiD,aAAAziD,GAEA,QAAA,IAAAR,MAAAymG,UAAAD,GACA,IAAA,IAAA1vC,EAAA,EAAAA,EAAA92D,MAAAymG,UAAAD,GAAAE,WAAAtlG,OAAA01D,IAAA,CACA,IAAA7M,EAAAjqD,MAAAymG,UAAAD,GAAAE,WAAA5vC,GACAh2D,KAAAmkG,eAAAjjG,KAAAioD,MAMAz+B,QAAA,WACA1qB,KAAA0V,SAAA6uF,WAAA,WACAvkG,KAAA4vB,SAEA,CACApU,SAAA,CACAkmC,SAAA,KACAmkD,UAAA,KACApkD,UAAA,KACAqkD,mBAAA,EACAb,YAAA/lG,MAAAomG,cACAnjD,aAAA,KACAR,OAAA,GACAmG,gBAAA,KACArgD,QAAA,CAAAs+F,OAAA,oCACAz4F,UAAA,mBChOApO,MAAA8mG,mBAAA9mG,MAAAs/B,mBAAAv/B,OAAA,CACAqgC,oBAAA,SAAAF,GAKAA,GAHAA,EAAAA,EAAApgC,QAAA,aAAA,KAGA4Q,cAOAwvB,GADAA,GAHAA,EAAAlgC,MAAAgS,YAAAkuB,IAGApgC,QAAA,WAAA,KACAA,QAAA,cAAA,IAGA,IAEAinG,EAFA/mG,MAAA+P,YAAAmwB,EAAAj+B,MAAA,eAEAV,KAAAvB,MAAA21F,mBAMA,OAJAoR,GAAAjmG,KAAAgU,SAAAkyF,SACAD,GAAAjmG,KAAAgU,SAAAkyF,QAGAD,KxD7BA,CA2lvBGpnG","file":"Craft.min.js","sourcesContent":["(function($){\n\n/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function(html) {\n    return html.replace(rxhtmlTag, \"<$1></$2>\");\n};\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} shift\n         * @param {boolean} alt\n         */\n        shortcutText: function (key, shift, alt) {\n            if (Craft.clientOs === 'Mac') {\n                return (alt ? '⌥' : '') + (shift ? '⇧' : '') + '⌘' + key;\n            }\n            return 'Ctrl+' + (alt ? 'Alt+' : '') + (shift ? 'Shift+' : '') + key;\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n\n                // Get the latest headers\n                this._getApiHeaders(cancelToken).then(apiHeaders => {\n                    // Send the API request\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    // Force the API to process the Craft headers if this is the first API request\n                    if (!this._apiHeaders) {\n                        options.params.processCraftHeaders = 1;\n                    }\n\n                    axios.request(options).then((apiResponse) => {\n                        // Process the response headers\n                        this._processApiHeaders(apiResponse.headers, cancelToken).then(() => {\n                            // Finally return the API response data\n                            resolve(apiResponse.data);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        _getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    resolve(response.data);\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _processApiHeaders: function(headers, cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Have we already processed them?\n                if (this._apiHeaders) {\n                    resolve();\n                    return;\n                }\n\n                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                    data: {\n                        headers: headers,\n                    },\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    this._loadingApiHeaders = false;\n\n                    resolve();\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                    }\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _rejectApiRequests: function(reject, e) {\n            this._loadingApiHeaders = false;\n            reject(e);\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1](e);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = () => {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                };\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         */\n        findDeltaData: function(oldData, newData, deltaNames) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, true);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                }\n            }\n\n            return params.join('&');\n        },\n\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, useInitialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = decodeURIComponent(params[p]).substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(params[p]);\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(params[p]);\n                }\n            }\n\n            if (useInitialValues) {\n                for (let name in Craft.initialDeltaValues) {\n                    if (Craft.initialDeltaValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(Craft.initialDeltaValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return arr.includes(elem);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a', $container).each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n    });\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: {\n                        customTrigger: $btn,\n                    }\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                                'aria-label': Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                    $inputs.first().focus();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n// Override Garnish.NiceText.charsLeftHtml() to be more accessible\nGarnish.NiceText.charsLeftHtml = charsLeft => {\n    return Craft.t('app', '<span class=\"visually-hidden\">Characters left:</span> {chars, number}', {\n        chars: charsLeft,\n    });\n};\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend({\n    $element: null,\n    elementId: null,\n    siteId: null,\n    deltaNames: null,\n    initialData: null,\n\n    $form: null,\n    $fieldsContainer: null,\n    $cancelBtn: null,\n    $saveBtn: null,\n    $spinner: null,\n\n    $siteSelect: null,\n    $siteSpinner: null,\n\n    hud: null,\n\n    init: function(element, settings) {\n        // Param mapping\n        if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n            // (settings)\n            settings = element;\n            element = null;\n        }\n\n        this.$element = $(element);\n        this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n        this.loadHud();\n    },\n\n    setElementAttribute: function(name, value) {\n        if (!this.settings.attributes) {\n            this.settings.attributes = {};\n        }\n\n        if (value === null) {\n            delete this.settings.attributes[name];\n        } else {\n            this.settings.attributes[name] = value;\n        }\n    },\n\n    getBaseData: function() {\n        var data = $.extend({}, this.settings.params);\n\n        if (this.settings.siteId) {\n            data.siteId = this.settings.siteId;\n        } else if (this.$element && this.$element.data('site-id')) {\n            data.siteId = this.$element.data('site-id');\n        }\n\n        if (this.settings.elementId) {\n            data.elementId = this.settings.elementId;\n        } else if (this.$element && this.$element.data('id')) {\n            data.elementId = this.$element.data('id');\n        }\n\n        if (this.settings.elementType) {\n            data.elementType = this.settings.elementType;\n        }\n\n        if (this.settings.attributes) {\n            data.attributes = this.settings.attributes;\n        }\n\n        if (this.settings.prevalidate) {\n            data.prevalidate = 1;\n        }\n\n        return data;\n    },\n\n    loadHud: function() {\n        this.onBeginLoading();\n        var data = this.getBaseData();\n        data.includeSites = Craft.isMultiSite && this.settings.showSiteSwitcher;\n        Craft.postActionRequest('elements/get-editor-html', data, this.showHud.bind(this));\n    },\n\n    showHud: function(response, textStatus) {\n        this.onEndLoading();\n\n        if (textStatus === 'success') {\n            var $hudContents = $();\n\n            if (response.sites) {\n                var $header = $('<div class=\"hud-header\"/>');\n\n                if (response.sites.length === 1) {\n                    $('<h5/>', {text: response.sites[0].name}).appendTo($header);\n                } else {\n                    var $siteSelectContainer = $('<div class=\"select\"/>').appendTo($header);\n\n                    this.$siteSelect = $('<select/>').appendTo($siteSelectContainer);\n                    this.$siteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($header);\n\n                    for (var i = 0; i < response.sites.length; i++) {\n                        var siteInfo = response.sites[i];\n                        $('<option value=\"' + siteInfo.id + '\"' + (siteInfo.id == response.siteId ? ' selected=\"selected\"' : '') + '>' + siteInfo.name + '</option>').appendTo(this.$siteSelect);\n                    }\n\n                    this.addListener(this.$siteSelect, 'change', 'switchSite');\n                }\n\n                $hudContents = $hudContents.add($header);\n            }\n\n            this.$form = $('<div/>');\n            this.$fieldsContainer = $('<div class=\"fields\"/>').appendTo(this.$form);\n\n            this.updateForm(response, true);\n\n            this.onCreateForm(this.$form);\n\n            var $footer = $('<div class=\"hud-footer\"/>').appendTo(this.$form),\n                $buttonsContainer = $('<div class=\"buttons right\"/>').appendTo($footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo($buttonsContainer);\n            this.$saveBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($buttonsContainer);\n            this.$spinner = $('<div class=\"spinner hidden\"/>').appendTo($buttonsContainer);\n\n            $hudContents = $hudContents.add(this.$form);\n\n            if (!this.hud) {\n                var hudTrigger = (this.settings.hudTrigger || this.$element);\n\n                this.hud = new Garnish.HUD(hudTrigger, $hudContents, {\n                    bodyClass: 'body elementeditor',\n                    closeOtherHUDs: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    onShow: this.onShowHud.bind(this),\n                    onHide: this.onHideHud.bind(this),\n                    onSubmit: this.saveElement.bind(this),\n                });\n\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.maybeCloseHud.bind(this));\n                this.hud.addListener(this.hud.$shade, 'click', this.maybeCloseHud.bind(this));\n\n                this.hud.$hud.data('elementEditor', this);\n\n                // Disable browser input validation\n                this.hud.$body.attr('novalidate', '');\n\n                this.hud.on('hide', () => {\n                    delete this.hud;\n                });\n            } else {\n                this.hud.updateBody($hudContents);\n                this.hud.updateSizeAndPosition();\n            }\n\n            // Focus on the first text input\n            $hudContents.find('.text:first').trigger('focus');\n\n            this.addListener(this.$cancelBtn, 'click', function() {\n                this.hud.hide();\n            });\n        }\n    },\n\n    switchSite: function() {\n        if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n            this.$siteSelect.val(this.siteId);\n            return;\n        }\n\n        var newSiteId = this.$siteSelect.val();\n\n        if (newSiteId == this.siteId) {\n            return;\n        }\n\n        this.$siteSpinner.removeClass('hidden');\n\n        this.reloadForm({siteId: newSiteId}, textStatus => {\n            this.$siteSpinner.addClass('hidden');\n            if (textStatus !== 'success') {\n                // Reset the site select\n                this.$siteSelect.val(this.siteId);\n            }\n        });\n    },\n\n    reloadForm: function(data, callback) {\n        data = $.extend(this.getBaseData(), data);\n\n        Craft.postActionRequest('elements/get-editor-html', data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.updateForm(response, true);\n            }\n\n            if (callback) {\n                callback(textStatus);\n            }\n        });\n    },\n\n    updateForm: function(response, refreshInitialData) {\n        this.siteId = response.siteId;\n        this.$fieldsContainer.html(response.html);\n\n        if (refreshInitialData !== false) {\n            this.deltaNames = response.deltaNames;\n        }\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$fieldsContainer.find('> .meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            Craft.appendHeadHtml(response.headHtml);\n            Craft.appendFootHtml(response.footHtml);\n            Craft.initUiElements(this.$fieldsContainer);\n\n            if (refreshInitialData) {\n                this.initialData = this.hud.$body.serialize();\n            }\n        });\n    },\n\n    saveElement: function() {\n        var validators = this.settings.validators;\n\n        if ($.isArray(validators)) {\n            for (var i = 0; i < validators.length; i++) {\n                if ($.isFunction(validators[i]) && !validators[i].call()) {\n                    return false;\n                }\n            }\n        }\n\n        this.$spinner.removeClass('hidden');\n\n        var data = $.param(this.getBaseData()) + '&' + this.hud.$body.serialize();\n        data = Craft.findDeltaData(this.initialData, data, this.deltaNames);\n\n        Craft.postActionRequest('elements/save-element', data, (response, textStatus) => {\n            this.$spinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (this.$element && this.siteId == this.$element.data('site-id')) {\n                        // Update the label\n                        var $title = this.$element.find('.title'),\n                            $a = $title.find('a');\n\n                        if ($a.length && response.cpEditUrl) {\n                            $a.attr('href', response.cpEditUrl);\n                            $a.text(response.newTitle);\n                        } else {\n                            $title.text(response.newTitle);\n                        }\n                    }\n\n                    if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                        Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                            type: Craft.elementTypeNames[this.settings.elementType][0],\n                        }));\n                    }\n\n                    this.closeHud();\n                    this.onSaveElement(response);\n                } else {\n                    this.updateForm(response, false);\n                    Garnish.shake(this.hud.$hud);\n                }\n            }\n        });\n    },\n\n    isDirty: function() {\n        return this.hud.$body.serialize() !== this.initialData;\n    },\n\n    maybeCloseHud: function(ev) {\n        if (!this.hud || !this.hud.showing) {\n            return;\n        }\n\n        if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n            this.closeHud();\n        }\n    },\n\n    closeHud: function() {\n        if (!this.hud || !this.hud.showing) {\n            return;\n        }\n\n        this.hud.hide();\n        delete this.hud;\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    onShowHud: function() {\n        Garnish.shortcutManager.registerShortcut({\n            keyCode: Garnish.S_KEY,\n            ctrl: true,\n        }, this.saveElement.bind(this));\n        this.settings.onShowHud();\n        this.trigger('showHud');\n    },\n\n    onHideHud: function() {\n        this.settings.onHideHud();\n        this.trigger('hideHud');\n    },\n\n    onBeginLoading: function() {\n        if (this.$element) {\n            this.$element.addClass('loading');\n        }\n\n        this.settings.onBeginLoading();\n        this.trigger('beginLoading');\n    },\n\n    onEndLoading: function() {\n        if (this.$element) {\n            this.$element.removeClass('loading');\n        }\n\n        this.settings.onEndLoading();\n        this.trigger('endLoading');\n    },\n\n    onSaveElement: function(response) {\n        this.settings.onSaveElement(response);\n        this.trigger('saveElement', {\n            response: response\n        });\n\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n    },\n\n    onCreateForm: function($form) {\n        this.settings.onCreateForm($form);\n    }\n}, {\n    defaults: {\n        hudTrigger: null,\n        showSiteSwitcher: true,\n        elementId: null,\n        elementType: null,\n        siteId: null,\n        attributes: null,\n        params: null,\n        prevalidate: false,\n        elementIndex: null,\n\n        onShowHud: $.noop,\n        onHideHud: $.noop,\n        onBeginLoading: $.noop,\n        onEndLoading: $.noop,\n        onCreateForm: $.noop,\n        onSaveElement: $.noop,\n\n        validators: []\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend({\n    initialized: false,\n    elementType: null,\n\n    instanceState: null,\n    sourceStates: null,\n    sourceStatesStorageKey: null,\n\n    searchTimeout: null,\n    sourceSelect: null,\n\n    $container: null,\n    $main: null,\n    isIndexBusy: false,\n\n    $sidebar: null,\n    showingSidebar: null,\n    sourceKey: null,\n    sourceViewModes: null,\n    $source: null,\n    sourcesByKey: null,\n    $visibleSources: null,\n\n    $customizeSourcesBtn: null,\n    customizeSourcesModal: null,\n\n    $toolbar: null,\n    toolbarOffset: null,\n\n    $search: null,\n    searching: false,\n    searchText: null,\n    trashed: false,\n    drafts: false,\n    $clearSearchBtn: null,\n\n    $statusMenuBtn: null,\n    $statusMenuContainer: null,\n    statusMenu: null,\n    status: null,\n\n    $siteMenuBtn: null,\n    siteMenu: null,\n    siteId: null,\n\n    $sortMenuBtn: null,\n    sortMenu: null,\n    $sortAttributesList: null,\n    $sortDirectionsList: null,\n    $scoreSortAttribute: null,\n    $structureSortAttribute: null,\n\n    $elements: null,\n    $viewModeBtnContainer: null,\n    viewModeBtns: null,\n    viewMode: null,\n    view: null,\n    _autoSelectElements: null,\n    $countSpinner: null,\n    $countContainer: null,\n    page: 1,\n    resultSet: null,\n    totalResults: null,\n    $exportBtn: null,\n\n    actions: null,\n    actionsHeadHtml: null,\n    actionsFootHtml: null,\n    $selectAllContainer: null,\n    $selectAllCheckbox: null,\n    showingActionTriggers: false,\n    exporters: null,\n    exportersByType: null,\n    _$detachedToolbarItems: null,\n    _$triggers: null,\n\n    _ignoreFailedRequest: false,\n    _cancelToken: null,\n\n    /**\n     * Constructor\n     */\n    init: function(elementType, $container, settings) {\n        this.elementType = elementType;\n        this.$container = $container;\n        this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n        // Set the state objects\n        // ---------------------------------------------------------------------\n\n        this.instanceState = this.getDefaultInstanceState();\n\n        this.sourceStates = {};\n\n        // Instance states (selected source) are stored by a custom storage key defined in the settings\n        if (this.settings.storageKey) {\n            $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n        }\n\n        // Source states (view mode, etc.) are stored by the element type and context\n        this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n        $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n        // Find the DOM elements\n        // ---------------------------------------------------------------------\n\n        this.$main = this.$container.find('.main');\n        this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n        this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n        this.$statusMenuContainer = this.$statusMenuBtn.parent();\n        this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n        this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n        this.$search = this.$toolbar.find('.search:first input:first');\n        this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n        this.$sidebar = this.$container.find('.sidebar:first');\n        this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n        this.$elements = this.$container.find('.elements:first');\n        this.$countSpinner = this.$container.find('#count-spinner');\n        this.$countContainer = this.$container.find('#count-container');\n        this.$exportBtn = this.$container.find('#export-btn');\n\n        // Hide sidebar if needed\n        if (this.settings.hideSidebar) {\n            this.$sidebar.hide();\n            $('.body, .content', this.$container).removeClass('has-sidebar');\n        }\n\n        // Initialize the sources\n        // ---------------------------------------------------------------------\n\n        if (!this.initSources()) {\n            return;\n        }\n\n        // Customize button\n        if (this.$customizeSourcesBtn.length) {\n            this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n        }\n\n        // Initialize the status menu\n        // ---------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n            this.statusMenu.on('optionselect', this._handleStatusChange.bind(this));\n        }\n\n        // Initialize the site menu\n        // ---------------------------------------------------------------------\n\n        // Is there a site menu?\n        if (this.$siteMenuBtn.length) {\n            this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n            // Figure out the initial site\n            var $option = this.siteMenu.$options.filter('.sel:first');\n\n            if (!$option.length) {\n                $option = this.siteMenu.$options.first();\n            }\n\n            if ($option.length) {\n                this._setSite($option.data('site-id'));\n            } else {\n                // No site options -- they must not have any site permissions\n                this.settings.criteria = {id: '0'};\n            }\n\n            this.siteMenu.on('optionselect', this._handleSiteChange.bind(this));\n\n            if (this.siteId) {\n                // Should we be using a different default site?\n                var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                if (defaultSiteId && defaultSiteId != this.siteId) {\n                    // Is that one available here?\n                    var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                    if ($storedSiteOption.length) {\n                        // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                        $storedSiteOption.trigger('click');\n                    }\n                }\n            }\n        } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n            this._setSite(this.settings.criteria.siteId);\n        } else {\n            this._setSite(Craft.siteId);\n        }\n\n        // Don't let the criteria override the selected site\n        if (this.settings.criteria && this.settings.criteria.siteId) {\n            delete this.settings.criteria.siteId;\n        }\n\n        // Initialize the search input\n        // ---------------------------------------------------------------------\n\n        // Automatically update the elements after new search text has been sitting for a 1/2 second\n        this.addListener(this.$search, 'input', () => {\n            if (!this.searching && this.$search.val()) {\n                this.startSearching();\n            } else if (this.searching && !this.$search.val()) {\n                this.stopSearching();\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.updateElementsIfSearchTextChanged.bind(this), 500);\n        });\n\n        // Update the elements when the Return key is pressed\n        this.addListener(this.$search, 'keypress', ev => {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.updateElementsIfSearchTextChanged();\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearSearchBtn, 'click', () => {\n            this.$search.val('');\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            this.stopSearching();\n\n            this.updateElementsIfSearchTextChanged();\n        });\n\n        // Auto-focus the Search box\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$search.trigger('focus');\n        }\n\n        // Initialize the sort menu\n        // ---------------------------------------------------------------------\n\n        // Is there a sort menu?\n        if (this.$sortMenuBtn.length) {\n            this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n            this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n            this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n            this.sortMenu.on('optionselect', this._handleSortChange.bind(this));\n        }\n\n        // Initialize the Export button\n        // ---------------------------------------------------------------------\n\n        this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n        // Let everyone know that the UI is initialized\n        // ---------------------------------------------------------------------\n\n        this.initialized = true;\n        this.afterInit();\n\n        // Select the initial source\n        // ---------------------------------------------------------------------\n\n        this.selectDefaultSource();\n\n        // Load the first batch of elements!\n        // ---------------------------------------------------------------------\n\n        // Default to whatever page is in the URL\n        this.setPage(Craft.pageNum);\n\n        this.updateElements(true);\n    },\n\n    afterInit: function() {\n        this.onAfterInit();\n    },\n\n    _createCancelToken: function() {\n        this._cancelToken = axios.CancelToken.source();\n        return this._cancelToken.token;\n    },\n\n    _cancelRequests: function() {\n        if (this._cancelToken) {\n            this._ignoreFailedRequest = true;\n            this._cancelToken.cancel();\n            Garnish.requestAnimationFrame(() => {\n                this._ignoreFailedRequest = false;\n            });\n        }\n    },\n\n    getSourceContainer: function() {\n        return this.$sidebar.find('nav > ul');\n    },\n\n    get $sources() {\n        if (!this.sourceSelect) {\n            return undefined;\n        }\n\n        return this.sourceSelect.$items;\n    },\n\n    initSources: function() {\n        var $sources = this._getSourcesInList(this.getSourceContainer());\n\n        // No source, no party.\n        if ($sources.length === 0) {\n            return false;\n        }\n\n        // The source selector\n        if (!this.sourceSelect) {\n            this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                multi: false,\n                allowEmpty: false,\n                vertical: true,\n                onSelectionChange: this._handleSourceSelectionChange.bind(this)\n            });\n        }\n\n        this.sourcesByKey = {};\n        this._initSources($sources);\n\n        return true;\n    },\n\n    selectDefaultSource: function() {\n        var sourceKey = this.getDefaultSourceKey(),\n            $source;\n\n        if (sourceKey) {\n            $source = this.getSourceByKey(sourceKey);\n\n            // Make sure it's visible\n            if (this.$visibleSources.index($source) === -1) {\n                $source = null;\n            }\n        }\n\n        if (!sourceKey || !$source) {\n            // Select the first source by default\n            $source = this.$visibleSources.first();\n        }\n\n        return this.selectSource($source);\n    },\n\n    refreshSources: function() {\n        this.sourceSelect.removeAllItems();\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType\n        };\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n            data: params,\n        }).then((response) => {\n            this.setIndexAvailable();\n            this.getSourceContainer().replaceWith(response.data.html);\n            this.initSources();\n            this.selectDefaultSource();\n        }).catch(() => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    initSource: function($source) {\n        this.sourceSelect.addItems($source);\n        this.initSourceToggle($source);\n        this.sourcesByKey[$source.data('key')] = $source;\n\n        if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n            this._expandSource($source);\n        }\n    },\n\n    initSourceToggle: function($source) {\n        // Remove handlers for the same thing. Just in case.\n        this.deinitSourceToggle($source);\n\n        var $toggle = this._getSourceToggle($source);\n\n        if ($toggle.length) {\n            this.addListener($source, 'dblclick', '_handleSourceDblClick');\n            this.addListener($toggle, 'click', '_handleSourceToggleClick');\n            $source.data('hasNestedSources', true);\n        } else {\n            $source.data('hasNestedSources', false);\n        }\n    },\n\n    deinitSource: function($source) {\n        this.sourceSelect.removeItems($source);\n        this.deinitSourceToggle($source);\n        delete this.sourcesByKey[$source.data('key')];\n    },\n\n    deinitSourceToggle: function($source) {\n        if ($source.data('hasNestedSources')) {\n            this.removeListener($source, 'dblclick');\n            this.removeListener(this._getSourceToggle($source), 'click');\n        }\n\n        $source.removeData('hasNestedSources');\n    },\n\n    getDefaultInstanceState: function() {\n        return {\n            selectedSource: null,\n            expandedSources: []\n        };\n    },\n\n    getDefaultSourceKey: function() {\n        if (this.settings.defaultSource) {\n            var paths = this.settings.defaultSource.split('/'),\n                path = '';\n\n            // Expand the tree\n            for (var i = 0; i < paths.length; i++) {\n                path += paths[i];\n                var $source = this.getSourceByKey(path);\n\n                // If the folder can't be found, then just go to the stored instance source.\n                if (!$source) {\n                    return this.instanceState.selectedSource;\n                }\n\n                this._expandSource($source);\n                path += '/';\n            }\n\n            // Just make sure that the modal is aware of the newly expanded sources, too.\n            this._setSite(this.siteId);\n\n            return this.settings.defaultSource;\n        }\n\n        return this.instanceState.selectedSource;\n    },\n\n    getDefaultExpandedSources: function() {\n        return this.instanceState.expandedSources;\n    },\n\n    startSearching: function() {\n        // Show the clear button and add/select the Score sort option\n        this.$clearSearchBtn.removeClass('hidden');\n\n        if (!this.$scoreSortAttribute) {\n            this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n            this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n        }\n\n        this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n        this.searching = true;\n\n        this._updateStructureSortOption();\n        this.setSortAttribute('score');\n    },\n\n    stopSearching: function() {\n        // Hide the clear button and Score sort option\n        this.$clearSearchBtn.addClass('hidden');\n\n        this.$scoreSortAttribute.detach();\n\n        this.searching = false;\n\n        this._updateStructureSortOption();\n    },\n\n    setInstanceState: function(key, value) {\n        if (typeof key === 'object') {\n            $.extend(this.instanceState, key);\n        } else {\n            this.instanceState[key] = value;\n        }\n\n        this.storeInstanceState();\n    },\n\n    storeInstanceState: function() {\n        if (this.settings.storageKey) {\n            Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n        }\n    },\n\n    getSourceState: function(source, key, defaultValue) {\n        if (typeof this.sourceStates[source] === 'undefined') {\n            // Set it now so any modifications to it by whoever's calling this will be stored.\n            this.sourceStates[source] = {};\n        }\n\n        if (typeof key === 'undefined') {\n            return this.sourceStates[source];\n        } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n            return this.sourceStates[source][key];\n        } else {\n            return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n        }\n    },\n\n    getSelectedSourceState: function(key, defaultValue) {\n        return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n    },\n\n    setSelecetedSourceState: function(key, value) {\n        var viewState = this.getSelectedSourceState();\n\n        if (typeof key === 'object') {\n            $.extend(viewState, key);\n        } else {\n            viewState[key] = value;\n        }\n\n        this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n        // Store it in localStorage too\n        Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n    },\n\n    storeSortAttributeAndDirection: function() {\n        var attr = this.getSelectedSortAttribute();\n\n        if (attr !== 'score') {\n            this.setSelecetedSourceState({\n                order: attr,\n                sort: this.getSelectedSortDirection()\n            });\n        }\n    },\n\n    /**\n     * Sets the page number.\n     */\n    setPage: function(page) {\n        if (this.settings.context !== 'index') {\n            return;\n        }\n\n        page = Math.max(page, 1);\n        this.page = page;\n\n        // Update the URL\n        var url = document.location.href\n            .replace(/\\?.*$/, '')\n            .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n            .replace(/\\/+$/, '');\n\n        if (this.page !== 1) {\n            if (Craft.pageTrigger[0] !== '?') {\n                url += '/';\n            }\n            url += Craft.pageTrigger + this.page;\n        }\n\n        history.replaceState({}, '', url);\n    },\n\n    _resetCount: function() {\n        this.resultSet = null;\n        this.totalResults = null;\n    },\n\n    /**\n     * Returns the data that should be passed to the elementIndex/getElements controller action\n     * when loading elements.\n     */\n    getViewParams: function() {\n        var criteria = {\n            siteId: this.siteId,\n            search: this.searchText,\n            offset: this.settings.batchSize * (this.page - 1),\n            limit: this.settings.batchSize,\n        };\n\n        // Only set drafts/draftOf/trashed params when needed, so we don't potentially override a source's criteria\n        if (\n            this.settings.canHaveDrafts &&\n            (this.drafts || (this.settings.context === 'index' && !this.status))\n        ) {\n            criteria.drafts = this.drafts || null;\n            criteria.savedDraftsOnly = true;\n            if (!this.drafts) {\n                criteria.draftOf = false;\n            }\n        }\n        if (this.trashed) {\n            criteria.trashed = true;\n        }\n\n        if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n            criteria.status = this.status;\n        }\n\n        $.extend(criteria, this.settings.criteria);\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType,\n            source: this.instanceState.selectedSource,\n            criteria: criteria,\n            disabledElementIds: this.settings.disabledElementIds,\n            viewState: $.extend({}, this.getSelectedSourceState()),\n            paginated: this._isViewPaginated() ? 1 : 0,\n        };\n\n        // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n        params.viewState.order = this.getSelectedSortAttribute();\n        params.viewState.sort = this.getSelectedSortDirection();\n\n        if (this.getSelectedSortAttribute() === 'structure') {\n            if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                this.instanceState.collapsedElementIds = [];\n            }\n            params.collapsedElementIds = this.instanceState.collapsedElementIds;\n        }\n\n        // Give plugins a chance to hook in here\n        this.trigger('registerViewParams', {\n            params: params,\n        });\n\n        return params;\n    },\n\n    updateElements: function(preservePagination) {\n        // Ignore if we're not fully initialized yet\n        if (!this.initialized) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        this.setIndexBusy();\n\n        // Kill the old view class\n        if (this.view) {\n            this.view.destroy();\n            delete this.view;\n        }\n\n        if (preservePagination !== true) {\n            this.setPage(1);\n            this._resetCount();\n        }\n\n        var params = this.getViewParams();\n\n        Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n            data: params,\n            cancelToken: this._createCancelToken(),\n        }).then((response) => {\n            this.setIndexAvailable();\n            (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n            this._updateView(params, response.data);\n        }).catch(e => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    updateElementsIfSearchTextChanged: function() {\n        if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n            this.updateElements();\n        }\n    },\n\n    showActionTriggers: function() {\n        // Ignore if they're already shown\n        if (this.showingActionTriggers) {\n            return;\n        }\n\n        // Hard-code the min toolbar height in case it was taller than the actions toolbar\n        // (prevents the elements from jumping if this ends up being a double-click)\n        this.$toolbar.css('min-height', this.$toolbar.height());\n\n        // Hide any toolbar inputs\n        this._$detachedToolbarItems = this.$toolbar.children();\n        this._$detachedToolbarItems.detach();\n\n        if (!this._$triggers) {\n            this._createTriggers();\n        } else {\n            this._$triggers.appendTo(this.$toolbar);\n        }\n\n        this.showingActionTriggers = true;\n    },\n\n    submitAction: function(action, actionParams) {\n        // Make sure something's selected\n        var selectedElementIds = this.view.getSelectedElementIds(),\n            totalSelected = selectedElementIds.length;\n\n        if (totalSelected === 0) {\n            return;\n        }\n\n        if (typeof action === 'string') {\n            action = this._findAction(action);\n        }\n\n        if (action.confirm && !confirm(action.confirm)) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        // Get ready to submit\n        var viewParams = this.getViewParams();\n\n        actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n        var params = $.extend(viewParams, action.settings || {}, actionParams, {\n            elementAction: action.type,\n            elementIds: selectedElementIds\n        });\n\n        // Do it\n        this.setIndexBusy();\n        this._autoSelectElements = selectedElementIds;\n\n        if (action.download) {\n            if (Craft.csrfTokenName) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n            Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                this.setIndexAvailable();\n            }).catch(e => {\n                this.setIndexAvailable();\n            });\n        } else {\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        }\n    },\n\n    _findAction: function(actionClass) {\n        for (var i = 0; i < this.actions.length; i++) {\n            if (this.actions[i].type === actionClass) {\n                return this.actions[i];\n            }\n        }\n        throw `Invalid element action: ${actionClass}`;\n    },\n\n    afterAction: function(action, params) {\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n\n        this.onAfterAction(action, params);\n    },\n\n    hideActionTriggers: function() {\n        // Ignore if there aren't any\n        if (!this.showingActionTriggers) {\n            return;\n        }\n\n        this._$detachedToolbarItems.appendTo(this.$toolbar);\n        this._$triggers.detach();\n        // this._$detachedToolbarItems.removeClass('hidden');\n\n        // Unset the min toolbar height\n        this.$toolbar.css('min-height', '');\n\n        this.showingActionTriggers = false;\n    },\n\n    updateActionTriggers: function() {\n        // Do we have an action UI to update?\n        if (this.actions) {\n            var totalSelected = this.view.getSelectedElements().length;\n\n            if (totalSelected !== 0) {\n                if (totalSelected === this.view.getEnabledElements().length) {\n                    this.$selectAllCheckbox.removeClass('indeterminate');\n                    this.$selectAllCheckbox.addClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'true');\n                } else {\n                    this.$selectAllCheckbox.addClass('indeterminate');\n                    this.$selectAllCheckbox.removeClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'mixed');\n                }\n\n                this.showActionTriggers();\n            } else {\n                this.$selectAllCheckbox.removeClass('indeterminate checked');\n                this.$selectAllContainer.attr('aria-checked', 'false');\n                this.hideActionTriggers();\n            }\n        }\n    },\n\n    getSelectedElements: function() {\n        return this.view ? this.view.getSelectedElements() : $();\n    },\n\n    getSelectedElementIds: function() {\n        return this.view ? this.view.getSelectedElementIds() : [];\n    },\n\n    setStatus: function(status) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n        if ($option.length) {\n            this.statusMenu.selectOption($option[0]);\n        }\n    },\n\n    getSortAttributeOption: function(attr) {\n        return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n    },\n\n    getSelectedSortAttribute: function() {\n        return this.$sortAttributesList.find('a.sel:first').data('attr');\n    },\n\n    setSortAttribute: function(attr) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.getSortAttributeOption(attr);\n\n        if ($option.length) {\n            this.$sortAttributesList.find('a.sel').removeClass('sel');\n            $option.addClass('sel');\n\n            var label = $option.text();\n            this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n            this.$sortMenuBtn.text(label);\n\n            if (attr === 'score') {\n                this.setSortDirection('desc');\n            } else {\n                this.setSortDirection($option.data('default-dir') || 'asc');\n            }\n\n            if (attr === 'structure') {\n                this.$sortDirectionsList.find('a').addClass('disabled');\n            } else {\n                this.$sortDirectionsList.find('a').removeClass('disabled');\n            }\n        }\n    },\n\n    getSortDirectionOption: function(dir) {\n        return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n    },\n\n    getSelectedSortDirection: function() {\n        return this.$sortDirectionsList.find('a.sel:first').data('dir');\n    },\n\n    getSelectedViewMode: function() {\n        return this.getSelectedSourceState('mode') || 'table';\n    },\n\n    setSortDirection: function(dir) {\n        if (dir !== 'desc') {\n            dir = 'asc';\n        }\n\n        this.$sortMenuBtn.attr('data-icon', dir);\n        this.$sortDirectionsList.find('a.sel').removeClass('sel');\n        this.getSortDirectionOption(dir).addClass('sel');\n    },\n\n    getSourceByKey: function(key) {\n        if (typeof this.sourcesByKey[key] === 'undefined') {\n            return null;\n        }\n\n        return this.sourcesByKey[key];\n    },\n\n    selectSource: function($source) {\n        if (!$source || !$source.length) {\n            return false;\n        }\n\n        if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n            return false;\n        }\n\n        // Hide action triggers if they're currently being shown\n        this.hideActionTriggers();\n\n        this.$source = $source;\n        this.sourceKey = $source.data('key');\n        this.setInstanceState('selectedSource', this.sourceKey);\n        this.sourceSelect.selectItem($source);\n\n        Craft.cp.updateSidebarMenuLabel();\n\n        if (this.searching) {\n            // Clear the search value without causing it to update elements\n            this.searchText = null;\n            this.$search.val('');\n            this.stopSearching();\n        }\n\n        // Sort menu\n        // ----------------------------------------------------------------------\n\n        // Remove any existing custom sort options from the menu\n        this.$sortAttributesList.children('li[data-extra]').remove();\n\n        // Does this source have any custom sort options?\n        let sortOptions = this.$source.data('sort-options')\n        if (sortOptions) {\n            for (let i = 0; i < sortOptions.length; i++) {\n                let $option = $('<li/>', {\n                    'data-extra': true,\n                })\n                    .append(\n                        $('<a/>', {\n                            text: sortOptions[i][0],\n                            'data-attr': sortOptions[i][1],\n                        })\n                    )\n                    .appendTo(this.$sortAttributesList);\n                this.sortMenu.addOptions($option.children());\n            }\n        }\n\n        // Does this source have a structure?\n        if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n            if (!this.$structureSortAttribute) {\n                this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                this.sortMenu.addOptions(this.$structureSortAttribute.children());\n            }\n\n            this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n        } else if (this.$structureSortAttribute) {\n            this.$structureSortAttribute.removeClass('sel').detach();\n        }\n\n        this.setStoredSortOptionsForSource();\n\n        // Status menu\n        // ----------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                this.$statusMenuContainer.addClass('hidden');\n            } else {\n                this.$statusMenuContainer.removeClass('hidden');\n            }\n\n            if (this.trashed) {\n                // Swap to the initial status\n                var $firstOption = this.statusMenu.$options.first();\n                this.setStatus($firstOption.data('status'));\n            }\n        }\n\n        // View mode buttons\n        // ----------------------------------------------------------------------\n\n        // Clear out any previous view mode data\n        if (this.$viewModeBtnContainer) {\n            this.$viewModeBtnContainer.remove();\n        }\n\n        this.viewModeBtns = {};\n        this.viewMode = null;\n\n        // Get the new list of view modes\n        this.sourceViewModes = this.getViewModesForSource();\n\n        // Create the buttons if there's more than one mode available to this source\n        if (this.sourceViewModes.length > 1) {\n            this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                let sourceViewMode = this.sourceViewModes[i];\n\n                let $viewModeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                    'data-view': sourceViewMode.mode,\n                    'data-icon': sourceViewMode.icon,\n                    'aria-label': sourceViewMode.title,\n                    title: sourceViewMode.title,\n                }).appendTo(this.$viewModeBtnContainer);\n\n                this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                    this.selectViewMode(ev.data.mode);\n                    this.updateElements();\n                });\n            }\n        }\n\n        // Figure out which mode we should start with\n        var viewMode = this.getSelectedViewMode();\n\n        if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n            // Try to keep using the current view mode\n            if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                viewMode = this.viewMode;\n            }\n            // Just use the first one\n            else {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n        }\n\n        this.selectViewMode(viewMode);\n\n        this.onSelectSource();\n\n        return true;\n    },\n\n    selectSourceByKey: function(key) {\n        var $source = this.getSourceByKey(key);\n\n        if ($source) {\n            return this.selectSource($source);\n        } else {\n            return false;\n        }\n    },\n\n    setStoredSortOptionsForSource: function() {\n        var sortAttr = this.getSelectedSourceState('order'),\n            sortDir = this.getSelectedSourceState('sort');\n\n        if (!sortAttr || !sortDir) {\n            // Get the default\n            sortAttr = this.getDefaultSort();\n\n            if (Garnish.isArray(sortAttr)) {\n                sortDir = sortAttr[1];\n                sortAttr = sortAttr[0];\n            }\n        }\n\n        if (sortDir !== 'asc' && sortDir !== 'desc') {\n            sortDir = 'asc';\n        }\n\n        this.setSortAttribute(sortAttr);\n        this.setSortDirection(sortDir);\n    },\n\n    getDefaultSort: function() {\n        // Does the source specify what to do?\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n            return this.$source.attr('data-default-sort').split(':');\n        } else {\n            // Default to whatever's first\n            return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n        }\n    },\n\n    getViewModesForSource: function() {\n        var viewModes = [\n            {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n        ];\n\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n            viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n        }\n\n        return viewModes;\n    },\n\n    doesSourceHaveViewMode: function(viewMode) {\n        for (var i = 0; i < this.sourceViewModes.length; i++) {\n            if (this.sourceViewModes[i].mode === viewMode) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    selectViewMode: function(viewMode, force) {\n        // Make sure that the current source supports it\n        if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n            viewMode = this.sourceViewModes[0].mode;\n        }\n\n        // Has anything changed?\n        if (viewMode === this.viewMode) {\n            return;\n        }\n\n        // Deselect the previous view mode\n        if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].removeClass('active');\n        }\n\n        this.viewMode = viewMode;\n        this.setSelecetedSourceState('mode', this.viewMode);\n\n        if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].addClass('active');\n        }\n    },\n\n    createView: function(mode, settings) {\n        var viewClass = this.getViewClass(mode);\n        return new viewClass(this, this.$elements, settings);\n    },\n\n    getViewClass: function(mode) {\n        switch (mode) {\n            case 'table':\n                return Craft.TableElementIndexView;\n            case 'thumbs':\n                return Craft.ThumbsElementIndexView;\n            default:\n                throw `View mode \"${mode}\" not supported.`;\n        }\n    },\n\n    rememberDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index === -1) {\n            this.settings.disabledElementIds.push(id);\n        }\n    },\n\n    forgetDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index !== -1) {\n            this.settings.disabledElementIds.splice(index, 1);\n        }\n    },\n\n    enableElements: function($elements) {\n        $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.forgetDisabledElementId(id);\n        }\n\n        this.onEnableElements($elements);\n    },\n\n    disableElements: function($elements) {\n        $elements.removeClass('sel').addClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.rememberDisabledElementId(id);\n        }\n\n        this.onDisableElements($elements);\n    },\n\n    getElementById: function(id) {\n        return this.view.getElementById(id);\n    },\n\n    enableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.enableElements($element);\n            } else {\n                this.forgetDisabledElementId(id);\n            }\n        }\n    },\n\n    disableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.disableElements($element);\n            } else {\n                this.rememberDisabledElementId(id);\n            }\n        }\n    },\n\n    selectElementAfterUpdate: function(id) {\n        if (this._autoSelectElements === null) {\n            this._autoSelectElements = [];\n        }\n\n        this._autoSelectElements.push(id);\n    },\n\n    addButton: function($button) {\n        this.getButtonContainer().append($button);\n    },\n\n    isShowingSidebar: function() {\n        if (this.showingSidebar === null) {\n            this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n        }\n\n        return this.showingSidebar;\n    },\n\n    getButtonContainer: function() {\n        // Is there a predesignated place where buttons should go?\n        if (this.settings.buttonContainer) {\n            return $(this.settings.buttonContainer);\n        } else {\n            var $container = $('#action-button');\n\n            if (!$container.length) {\n                $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n            }\n\n            return $container;\n        }\n    },\n\n    setIndexBusy: function() {\n        this.$elements.addClass('busy');\n        this.isIndexBusy = true;\n    },\n\n    setIndexAvailable: function() {\n        this.$elements.removeClass('busy');\n        this.isIndexBusy = false;\n    },\n\n    createCustomizeSourcesModal: function() {\n        // Recreate it each time\n        var modal = new Craft.CustomizeSourcesModal(this, {\n            onHide: function() {\n                modal.destroy();\n            }\n        });\n\n        return modal;\n    },\n\n    disable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.disable();\n        }\n\n        if (this.view) {\n            this.view.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.enable();\n        }\n\n        if (this.view) {\n            this.view.enable();\n        }\n\n        this.base();\n    },\n\n    onAfterInit: function() {\n        this.settings.onAfterInit();\n        this.trigger('afterInit');\n    },\n\n    onSelectSource: function() {\n        this.settings.onSelectSource(this.sourceKey);\n        this.trigger('selectSource', {sourceKey: this.sourceKey});\n    },\n\n    onSelectSite: function() {\n        this.settings.onSelectSite(this.siteId);\n        this.trigger('selectSite', {siteId: this.siteId});\n    },\n\n    onUpdateElements: function() {\n        this.settings.onUpdateElements();\n        this.trigger('updateElements');\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    onEnableElements: function($elements) {\n        this.settings.onEnableElements($elements);\n        this.trigger('enableElements', {elements: $elements});\n    },\n\n    onDisableElements: function($elements) {\n        this.settings.onDisableElements($elements);\n        this.trigger('disableElements', {elements: $elements});\n    },\n\n    onAfterAction: function(action, params) {\n        this.settings.onAfterAction(action, params);\n        this.trigger('afterAction', {action: action, params: params});\n    },\n\n    // UI state handlers\n    // -------------------------------------------------------------------------\n\n    _handleSourceSelectionChange: function() {\n        // If the selected source was just removed (maybe because its parent was collapsed),\n        // there won't be a selected source\n        if (!this.sourceSelect.totalSelected) {\n            this.sourceSelect.selectItem(this.$visibleSources.first());\n            return;\n        }\n\n        if (this.selectSource(this.sourceSelect.$selectedItems)) {\n            this.updateElements();\n        }\n    },\n\n    _handleActionTriggerSubmit: function(ev) {\n        ev.preventDefault();\n\n        var $form = $(ev.currentTarget);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($form.data('action'), Garnish.getPostData($form));\n    },\n\n    _handleMenuActionTriggerSubmit: function(ev) {\n        var $option = $(ev.option);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($option.data('action'));\n    },\n\n    _handleStatusChange: function(ev) {\n        this.statusMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$statusMenuBtn.html($option.html());\n\n        this.trashed = false;\n        this.drafts = false;\n        this.status = null;\n\n        if (Garnish.hasAttr($option, 'data-trashed')) {\n            this.trashed = true;\n        } else if (Garnish.hasAttr($option, 'data-drafts')) {\n            this.drafts = true;\n        } else {\n            this.status = $option.data('status');\n        }\n\n        this._updateStructureSortOption();\n        this.updateElements();\n    },\n\n    _handleSiteChange: function(ev) {\n        this.siteMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$siteMenuBtn.html($option.html());\n        this._setSite($option.data('site-id'));\n        this.onSelectSite();\n    },\n\n    _setSite: function(siteId) {\n        let firstSite = this.siteId === null;\n        this.siteId = siteId;\n        this.$visibleSources = $();\n\n        // Hide any sources that aren't available for this site\n        var $firstVisibleSource;\n        var $source;\n        // Select a new source automatically if a site is already selected, but we don't have a selected source\n        // (or if the currently selected source ends up not supporting the new site)\n        var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n        for (var i = 0; i < this.$sources.length; i++) {\n            $source = this.$sources.eq(i);\n            if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                $source.parent().removeClass('hidden');\n                this.$visibleSources = this.$visibleSources.add($source);\n                if (!$firstVisibleSource) {\n                    $firstVisibleSource = $source;\n                }\n            } else {\n                $source.parent().addClass('hidden');\n\n                // Is this the currently selected source?\n                if (this.$source && this.$source.get(0) == $source.get(0)) {\n                    selectNewSource = true;\n                }\n            }\n        }\n\n        if (this.initialized && selectNewSource) {\n            this.selectSource($firstVisibleSource);\n        }\n\n        // Hide any empty-nester headings\n        var $headings = this.getSourceContainer().children('.heading');\n        var $heading;\n\n        for (i = 0; i < $headings.length; i++) {\n            $heading = $headings.eq(i);\n            if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                $heading.removeClass('hidden');\n            } else {\n                $heading.addClass('hidden');\n            }\n        }\n\n        if (this.initialized) {\n            if (this.settings.context === 'index') {\n                // Remember this site for later\n                Craft.cp.setSiteId(siteId);\n            }\n\n            // Update the elements\n            this.updateElements();\n        }\n    },\n\n    _handleSortChange: function(ev) {\n        var $option = $(ev.selectedOption);\n\n        if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n            return;\n        }\n\n        // Is this an attribute or a direction?\n        if ($option.parent().parent().is(this.$sortAttributesList)) {\n            this.setSortAttribute($option.data('attr'));\n        } else {\n            this.setSortDirection($option.data('dir'));\n        }\n\n        this.storeSortAttributeAndDirection();\n        this.updateElements();\n    },\n\n    _handleSelectionChange: function() {\n        this.updateActionTriggers();\n        this.onSelectionChange();\n    },\n\n    _handleSourceDblClick: function(ev) {\n        this._toggleSource($(ev.currentTarget));\n        ev.stopPropagation();\n    },\n\n    _handleSourceToggleClick: function(ev) {\n        this._toggleSource($(ev.currentTarget).prev('a'));\n        ev.stopPropagation();\n    },\n\n    _updateStructureSortOption: function() {\n        var $option = this.getSortAttributeOption('structure');\n\n        if (!$option.length) {\n            return;\n        }\n\n        if (this.trashed || this.drafts || this.searching) {\n            $option.addClass('disabled');\n            if (this.getSelectedSortAttribute() === 'structure') {\n                // Temporarily set the sort to the first option\n                var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                this.setSortAttribute($firstOption.data('attr'));\n                this.setSortDirection('asc');\n            }\n        } else {\n            $option.removeClass('disabled');\n            this.setStoredSortOptionsForSource();\n        }\n    },\n\n    // Source managemnet\n    // -------------------------------------------------------------------------\n\n    _getSourcesInList: function($list) {\n        return $list.children('li').children('a');\n    },\n\n    _getChildSources: function($source) {\n        var $list = $source.siblings('ul');\n        return this._getSourcesInList($list);\n    },\n\n    _getSourceToggle: function($source) {\n        return $source.siblings('.toggle');\n    },\n\n    _initSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.initSource($($sources[i]));\n        }\n    },\n\n    _deinitSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.deinitSource($($sources[i]));\n        }\n    },\n\n    _toggleSource: function($source) {\n        if ($source.parent('li').hasClass('expanded')) {\n            this._collapseSource($source);\n        } else {\n            this._expandSource($source);\n        }\n    },\n\n    _expandSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'true',\n            'aria-label': Craft.t('app', 'Hide nested sources'),\n        });\n        $source.parent('li').addClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._initSources($childSources);\n\n        var key = $source.data('key');\n        if (this.instanceState.expandedSources.indexOf(key) === -1) {\n            this.instanceState.expandedSources.push(key);\n            this.storeInstanceState();\n        }\n    },\n\n    _collapseSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'false',\n            'aria-label': Craft.t('app', 'Show nested sources'),\n        });\n        $source.parent('li').removeClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._deinitSources($childSources);\n\n        var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n        if (i !== -1) {\n            this.instanceState.expandedSources.splice(i, 1);\n            this.storeInstanceState();\n        }\n    },\n\n    // View\n    // -------------------------------------------------------------------------\n\n    _isViewPaginated: function() {\n        return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n    },\n\n    _updateView: function(params, response) {\n        // Cleanup\n        // -------------------------------------------------------------\n\n        // Get rid of the old action triggers regardless of whether the new batch has actions or not\n        if (this.actions) {\n            this.hideActionTriggers();\n            this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n        }\n\n        // Update the count text\n        // -------------------------------------------------------------\n\n        if (this.$countContainer.length) {\n            this.$countSpinner.removeClass('hidden');\n            this.$countContainer.html('');\n\n            this._countResults()\n                .then((total) => {\n                    this.$countSpinner.addClass('hidden');\n\n                    let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                    let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                    if (!this._isViewPaginated()) {\n                        let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n                        this.$countContainer.text(countLabel);\n                    } else {\n                        let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                        let last = Math.min(first + (this.settings.batchSize - 1), total);\n                        let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            first: first,\n                            last: last,\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n\n                        let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                        let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                        let $prevBtn = $('<div/>', {\n                            'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                            title: Craft.t('app', 'Previous Page')\n                        }).appendTo($paginationContainer);\n                        let $nextBtn = $('<div/>', {\n                            'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                            title: Craft.t('app', 'Next Page')\n                        }).appendTo($paginationContainer);\n\n                        $('<div/>', {\n                            'class': 'page-info',\n                            text: countLabel\n                        }).appendTo($paginationContainer);\n\n                        if (this.page > 1) {\n                            this.addListener($prevBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page - 1);\n                                this.updateElements(true);\n                            });\n                        }\n\n                        if (this.page < totalPages) {\n                            this.addListener($nextBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page + 1);\n                                this.updateElements(true);\n                            });\n                        }\n                    }\n                })\n                .catch(() => {\n                    this.$countSpinner.addClass('hidden');\n                });\n        }\n\n        // Update the view with the new container + elements HTML\n        // -------------------------------------------------------------\n\n        this.$elements.html(response.html);\n        Craft.appendHeadHtml(response.headHtml);\n        Craft.appendFootHtml(response.footHtml);\n\n        // Batch actions setup\n        // -------------------------------------------------------------\n\n        this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n        if (response.actions && response.actions.length) {\n            if (this.$selectAllContainer.length) {\n                this.actions = response.actions;\n                this.actionsHeadHtml = response.actionsHeadHtml;\n                this.actionsFootHtml = response.actionsFootHtml;\n\n                // Create the select all checkbox\n                this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                this.$selectAllContainer.attr({\n                    'role': 'checkbox',\n                    'tabindex': '0',\n                    'aria-checked': 'false',\n                    'aria-label': Craft.t('app', 'Select all'),\n                });\n\n                this.addListener(this.$selectAllContainer, 'click', function() {\n                    if (this.view.getSelectedElements().length === 0) {\n                        this.view.selectAllElements();\n                    } else {\n                        this.view.deselectAllElements();\n                    }\n                });\n\n                this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                    if (ev.keyCode === Garnish.SPACE_KEY) {\n                        ev.preventDefault();\n\n                        $(ev.currentTarget).trigger('click');\n                    }\n                });\n            }\n        } else {\n            if (!this.$selectAllContainer.siblings().length) {\n                this.$selectAllContainer.parent('.header').remove();\n            }\n            this.$selectAllContainer.remove();\n        }\n\n        // Exporters setup\n        // -------------------------------------------------------------\n\n        this.exporters = response.exporters;\n        this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n        if (this.exporters && this.exporters.length) {\n            this.$exportBtn.removeClass('hidden');\n        } else {\n            this.$exportBtn.addClass('hidden');\n        }\n\n        // Create the view\n        // -------------------------------------------------------------\n\n        // Should we make the view selectable?\n        var selectable = (this.actions || this.settings.selectable);\n\n        this.view = this.createView(this.getSelectedViewMode(), {\n            context: this.settings.context,\n            batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n            params: params,\n            selectable: selectable,\n            multiSelect: (this.actions || this.settings.multiSelect),\n            checkboxMode: !!this.actions,\n            onSelectionChange: this._handleSelectionChange.bind(this)\n        });\n\n        // Auto-select elements\n        // -------------------------------------------------------------\n\n        if (this._autoSelectElements) {\n            if (selectable) {\n                for (var i = 0; i < this._autoSelectElements.length; i++) {\n                    this.view.selectElementById(this._autoSelectElements[i]);\n                }\n            }\n\n            this._autoSelectElements = null;\n        }\n\n        // Trigger the event\n        // -------------------------------------------------------------\n\n        this.onUpdateElements();\n    },\n\n    _countResults: function() {\n        return new Promise((resolve, reject) => {\n            if (this.totalResults !== null) {\n                resolve(this.totalResults);\n            } else {\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                // Make sure we've got an active result set ID\n                if (this.resultSet === null) {\n                    this.resultSet = Math.floor(Math.random() * 100000000);\n                }\n                params.resultSet = this.resultSet;\n\n                Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    if (response.data.resultSet == this.resultSet) {\n                        this.totalResults = response.data.count;\n                        resolve(response.data.count);\n                    } else {\n                        reject();\n                    }\n                }).catch(reject);\n            }\n        });\n    },\n\n    _createTriggers: function() {\n        var triggers = [],\n            safeMenuActions = [],\n            destructiveMenuActions = [];\n\n        var i;\n\n        for (i = 0; i < this.actions.length; i++) {\n            var action = this.actions[i];\n\n            if (action.trigger) {\n                var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                    .data('action', action)\n                    .append(action.trigger);\n\n                this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                triggers.push($form);\n            } else {\n                if (!action.destructive) {\n                    safeMenuActions.push(action);\n                } else {\n                    destructiveMenuActions.push(action);\n                }\n            }\n        }\n\n        var $btn;\n\n        if (safeMenuActions.length || destructiveMenuActions.length) {\n            var $menuTrigger = $('<form/>');\n\n            $btn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn',\n                'data-icon': 'settings',\n                title: Craft.t('app', 'Actions'),\n            }).appendTo($menuTrigger);\n\n            var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n            if ($safeList) {\n                $safeList.appendTo($menu);\n            }\n\n            if ($safeList && $destructiveList) {\n                $('<hr/>').appendTo($menu);\n            }\n\n            if ($destructiveList) {\n                $destructiveList.appendTo($menu);\n            }\n\n            triggers.push($menuTrigger);\n        }\n\n        this._$triggers = $();\n\n        for (i = 0; i < triggers.length; i++) {\n            var $div = $('<div/>').append(triggers[i]);\n            this._$triggers = this._$triggers.add($div);\n        }\n\n        this._$triggers.appendTo(this.$toolbar);\n        Craft.appendHeadHtml(this.actionsHeadHtml);\n        Craft.appendFootHtml(this.actionsFootHtml);\n\n        Craft.initUiElements(this._$triggers);\n\n        if ($btn) {\n            $btn.data('menubtn').on('optionSelect', this._handleMenuActionTriggerSubmit.bind(this));\n        }\n    },\n\n    _showExportHud: function() {\n        this.$exportBtn.addClass('active');\n\n        var $form = $('<form/>', {\n            'class': 'export-form'\n        });\n\n        var typeOptions = [];\n        for (var i = 0; i < this.exporters.length; i++) {\n            typeOptions.push({label: this.exporters[i].name, value: this.exporters[i].type});\n        }\n        var $typeField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Export Type'),\n            options: typeOptions,\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        var $formatField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Format'),\n            options: [\n                {label: 'CSV', value: 'csv'}, {label: 'JSON', value: 'json'}, {label: 'XML', value: 'xml'},\n            ],\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        let $typeSelect = $typeField.find('select');\n        this.addListener($typeSelect, 'change', () => {\n            let type = $typeSelect.val();\n            if (this.exportersByType[type].formattable) {\n                $formatField.removeClass('hidden');\n            } else {\n                $formatField.addClass('hidden');\n            }\n        });\n        $typeSelect.trigger('change');\n\n        // Only show the Limit field if there aren't any selected elements\n        var selectedElementIds = this.view.getSelectedElementIds();\n\n        if (!selectedElementIds.length) {\n            var $limitField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Limit'),\n                placeholder: Craft.t('app', 'No limit'),\n                type: 'number',\n                min: 1\n            }).appendTo($form);\n        }\n\n        $('<button/>', {\n            type: 'submit',\n            'class': 'btn submit fullwidth',\n            text: Craft.t('app', 'Export')\n        }).appendTo($form)\n\n        var $spinner = $('<div/>', {\n            'class': 'spinner hidden'\n        }).appendTo($form);\n\n        var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n        hud.on('hide', () => {\n            this.$exportBtn.removeClass('active');\n        });\n\n        var submitting = false;\n\n        this.addListener($form, 'submit', function(ev) {\n            ev.preventDefault();\n            if (submitting) {\n                return;\n            }\n\n            submitting = true;\n            $spinner.removeClass('hidden');\n\n            var params = this.getViewParams();\n            delete params.criteria.offset;\n            delete params.criteria.limit;\n\n            params.type = $typeField.find('select').val();\n            params.format = $formatField.find('select').val();\n\n            if (selectedElementIds.length) {\n                params.criteria.id = selectedElementIds;\n            } else {\n                var limit = parseInt($limitField.find('input').val());\n                if (limit && !isNaN(limit)) {\n                    params.criteria.limit = limit;\n                }\n            }\n\n            if (Craft.csrfTokenValue) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                .then(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                })\n                .catch(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                });\n        });\n    },\n\n    _createMenuTriggerList: function(actions, destructive) {\n        if (actions && actions.length) {\n            var $ul = $('<ul/>');\n\n            for (var i = 0; i < actions.length; i++) {\n                $('<li/>').append($('<a/>', {\n                    id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                    'class': (destructive ? 'error' : null),\n                    data: {\n                        action: actions[i],\n                    },\n                    text: actions[i].name\n                })).appendTo($ul);\n            }\n\n            return $ul;\n        }\n    }\n}, {\n    defaults: {\n        context: 'index',\n        modal: null,\n        storageKey: null,\n        criteria: null,\n        batchSize: 100,\n        disabledElementIds: [],\n        selectable: false,\n        multiSelect: false,\n        buttonContainer: null,\n        hideSidebar: false,\n        toolbarSelector: '.toolbar:first',\n        refreshSourcesAction: 'element-indexes/get-source-tree-html',\n        updateElementsAction: 'element-indexes/get-elements',\n        countElementsAction: 'element-indexes/count-elements',\n        submitActionsAction: 'element-indexes/perform-action',\n        defaultSiteId: null,\n        defaultSource: null,\n        canHaveDrafts: false,\n\n        onAfterInit: $.noop,\n        onSelectSource: $.noop,\n        onSelectSite: $.noop,\n        onUpdateElements: $.noop,\n        onSelectionChange: $.noop,\n        onEnableElements: $.noop,\n        onDisableElements: $.noop,\n        onAfterAction: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend({\n    $container: null,\n    $loadingMoreSpinner: null,\n    $elementContainer: null,\n    $scroller: null,\n\n    elementIndex: null,\n    thumbLoader: null,\n    elementSelect: null,\n\n    loadingMore: false,\n\n    _totalVisible: null,\n    _morePending: null,\n    _handleEnableElements: null,\n    _handleDisableElements: null,\n\n    init: function(elementIndex, container, settings) {\n        this.elementIndex = elementIndex;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n        // Create a \"loading-more\" spinner\n        this.$loadingMoreSpinner = $(\n            '<div class=\"centeralign hidden\">' +\n            '<div class=\"spinner loadingmore\"></div>' +\n            '</div>'\n        ).insertAfter(this.$container);\n\n        // Get the actual elements container and its child elements\n        this.$elementContainer = this.getElementContainer();\n        var $elements = this.$elementContainer.children();\n\n        this.setTotalVisible($elements.length);\n        this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n        // Instantiate the thumb loader\n        this.thumbLoader = new Craft.ElementThumbLoader();\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select(\n                this.$elementContainer,\n                $elements.filter(':not(.disabled)'),\n                {\n                    multi: this.settings.multiSelect,\n                    vertical: this.isVerticalList(),\n                    handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                    filter: ':not(a):not(.toggle)',\n                    checkboxMode: this.settings.checkboxMode,\n                    onSelectionChange: this.onSelectionChange.bind(this)\n                });\n\n            this._handleEnableElements = ev => {\n                this.elementSelect.addItems(ev.elements);\n            };\n\n            this._handleDisableElements = ev => {\n                this.elementSelect.removeItems(ev.elements);\n            };\n\n            this.elementIndex.on('enableElements', this._handleEnableElements);\n            this.elementIndex.on('disableElements', this._handleDisableElements);\n        }\n\n        // Enable inline element editing if this is an index page\n        if (this.settings.context === 'index') {\n            this._handleElementEditing = ev => {\n                var $target = $(ev.target);\n\n                if ($target.prop('nodeName') === 'A') {\n                    // Let the link do its thing\n                    return;\n                }\n\n                var $element;\n\n                if ($target.hasClass('element')) {\n                    $element = $target;\n                } else {\n                    $element = $target.closest('.element');\n\n                    if (!$element.length) {\n                        return;\n                    }\n                }\n\n                if (Garnish.hasAttr($element, 'data-editable')) {\n                    this.createElementEditor($element);\n                }\n            };\n\n            if (!this.elementIndex.trashed) {\n                this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                if ($.isTouchCapable()) {\n                    this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                }\n            }\n        }\n\n        // Give sub-classes a chance to do post-initialization stuff here\n        this.afterInit();\n\n        // Set up lazy-loading\n        if (this.settings.batchSize) {\n            if (this.settings.context === 'index') {\n                this.$scroller = Garnish.$scrollContainer;\n            } else {\n                this.$scroller = this.elementIndex.$main;\n            }\n\n            this.$scroller.scrollTop(0);\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }\n    },\n\n    getElementContainer: function() {\n        throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n    },\n\n    afterInit: function() {\n    },\n\n    getAllElements: function() {\n        return this.$elementContainer.children();\n    },\n\n    getEnabledElements: function() {\n        return this.$elementContainer.children(':not(.disabled)');\n    },\n\n    getElementById: function(id) {\n        var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n        if ($element.length) {\n            return $element;\n        } else {\n            return null;\n        }\n    },\n\n    getSelectedElements: function() {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        return this.elementSelect.$selectedItems;\n    },\n\n    getSelectedElementIds: function() {\n        let $selectedElements;\n        try {\n            $selectedElements = this.getSelectedElements();\n        } catch (e) {\n        }\n\n        let ids = [];\n        if ($selectedElements) {\n            for (var i = 0; i < $selectedElements.length; i++) {\n                ids.push($selectedElements.eq(i).data('id'));\n            }\n        }\n        return ids;\n    },\n\n    selectElement: function($element) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        this.elementSelect.selectItem($element, true);\n        return true;\n    },\n\n    selectElementById: function(id) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        var $element = this.getElementById(id);\n\n        if ($element) {\n            this.elementSelect.selectItem($element, true);\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    selectAllElements: function() {\n        this.elementSelect.selectAll();\n    },\n\n    deselectAllElements: function() {\n        this.elementSelect.deselectAll();\n    },\n\n    isVerticalList: function() {\n        return false;\n    },\n\n    getTotalVisible: function() {\n        return this._totalVisible;\n    },\n\n    setTotalVisible: function(totalVisible) {\n        this._totalVisible = totalVisible;\n    },\n\n    getMorePending: function() {\n        return this._morePending;\n    },\n\n    setMorePending: function(morePending) {\n        this._morePending = morePending;\n    },\n\n    /**\n     * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n     */\n    maybeLoadMore: function() {\n        if (this.canLoadMore()) {\n            this.loadMore();\n        }\n    },\n\n    /**\n     * Returns whether the user has reached the bottom of the scroll area.\n     */\n    canLoadMore: function() {\n        if (!this.getMorePending() || !this.settings.batchSize) {\n            return false;\n        }\n\n        // Check if the user has reached the bottom of the scroll area\n        var containerHeight;\n\n        if (this.$scroller[0] === Garnish.$win[0]) {\n            var winHeight = Garnish.$win.innerHeight(),\n                winScrollTop = Garnish.$win.scrollTop(),\n                containerOffset = this.$container.offset().top;\n            containerHeight = this.$container.height();\n\n            return (winHeight + winScrollTop >= containerOffset + containerHeight);\n        } else {\n            var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                containerScrollTop = this.$scroller.scrollTop();\n            containerHeight = this.$scroller.outerHeight();\n\n            return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n        }\n    },\n\n    /**\n     * Loads the next batch of elements.\n     */\n    loadMore: function() {\n        if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n            return;\n        }\n\n        this.loadingMore = true;\n        this.$loadingMoreSpinner.removeClass('hidden');\n        this.removeListener(this.$scroller, 'scroll');\n\n        var data = this.getLoadMoreParams();\n\n        Craft.postActionRequest(this.settings.loadMoreElementsAction, data, (response, textStatus) => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                var $newElements = $(response.html);\n\n                this.appendElements($newElements);\n                Craft.appendHeadHtml(response.headHtml);\n                Craft.appendFootHtml(response.footHtml);\n\n                if (this.elementSelect) {\n                    this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                    this.elementIndex.updateActionTriggers();\n                }\n\n                this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n                this.setMorePending($newElements.length == this.settings.batchSize);\n\n                // Is there room to load more right now?\n                this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                this.maybeLoadMore();\n            }\n        });\n    },\n\n    getLoadMoreParams: function() {\n        // Use the same params that were passed when initializing this view\n        var params = $.extend(true, {}, this.settings.params);\n        params.criteria.offset = this.getTotalVisible();\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        $newElements.appendTo(this.$elementContainer);\n        this.thumbLoader.load($newElements);\n        this.onAppendElements($newElements);\n    },\n\n    onAppendElements: function($newElements) {\n        this.settings.onAppendElements($newElements);\n        this.trigger('appendElements', {\n            newElements: $newElements\n        });\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            elementIndex: this.elementIndex\n        });\n    },\n\n    disable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.disable();\n        }\n    },\n\n    enable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.enable();\n        }\n    },\n\n    destroy: function() {\n        // Remove the \"loading-more\" spinner, since we added that outside of the view container\n        this.$loadingMoreSpinner.remove();\n\n        // Kill the thumb loader\n        this.thumbLoader.destroy();\n        delete this.thumbLoader;\n\n        // Delete the element select\n        if (this.elementSelect) {\n            this.elementIndex.off('enableElements', this._handleEnableElements);\n            this.elementIndex.off('disableElements', this._handleDisableElements);\n\n            this.elementSelect.destroy();\n            delete this.elementSelect;\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        context: 'index',\n        batchSize: null,\n        params: null,\n        selectable: false,\n        multiSelect: false,\n        checkboxMode: false,\n        loadMoreElementsAction: 'element-indexes/get-more-elements',\n        onAppendElements: $.noop,\n        onSelectionChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend({\n    thumbLoader: null,\n    elementSelect: null,\n    elementSort: null,\n    modal: null,\n    elementEditor: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addElementBtn: null,\n    $addElementBtnContainer: null,\n\n    _initialized: false,\n\n    init: function(settings) {\n        // Normalize the settings and set them\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n        // Apply the storage key prefix\n        if (this.settings.modalStorageKey) {\n            this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n        }\n\n        // No reason for this to be sortable if we're only allowing 1 selection\n        if (this.settings.limit == 1) {\n            this.settings.sortable = false;\n        }\n\n        this.$container = this.getContainer();\n\n        // Store a reference to this class\n        this.$container.data('elementSelect', this);\n\n        this.$elementsContainer = this.getElementsContainer();\n\n        this.$addElementBtn = this.getAddElementsBtn();\n        if (this.$addElementBtn) {\n            this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n            if (!this.$addElementBtnContainer.length) {\n                this.$addElementBtnContainer = null;\n            }\n        }\n\n        this.thumbLoader = new Craft.ElementThumbLoader();\n\n        this.initElementSelect();\n        this.initElementSort();\n        this.resetElements();\n\n        if (this.$addElementBtn) {\n            this.addListener(this.$addElementBtn, 'activate', 'showModal');\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            this._initialized = true;\n        });\n    },\n\n    get totalSelected() {\n        return this.$elements.length;\n    },\n\n    getContainer: function() {\n        return $('#' + this.settings.id);\n    },\n\n    getElementsContainer: function() {\n        return this.$container.children('.elements');\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.children();\n    },\n\n    getAddElementsBtn: function() {\n        return this.$container.find('.btn.add:first');\n    },\n\n    initElementSelect: function() {\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select({\n                multi: this.settings.sortable,\n                filter: ':not(.delete)'\n            });\n        }\n    },\n\n    initElementSort: function() {\n        if (this.settings.sortable) {\n            this.elementSort = new Garnish.DragSort({\n                container: this.$elementsContainer,\n                filter: (this.settings.selectable ? () => {\n                    // Only return all the selected items if the target item is selected\n                    if (this.elementSort.$targetItem.hasClass('sel')) {\n                        return this.elementSelect.getSelectedItems();\n                    } else {\n                        return this.elementSort.$targetItem;\n                    }\n                } : null),\n                ignoreHandleSelector: '.delete',\n                axis: this.getElementSortAxis(),\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                onSortChange: (this.settings.selectable ? () => {\n                    this.elementSelect.resetItemOrder();\n                } : null)\n            });\n        }\n    },\n\n    getElementSortAxis: function() {\n        return (this.settings.viewMode === 'list' ? 'y' : null);\n    },\n\n    canAddMoreElements: function() {\n        return (!this.settings.limit || this.$elements.length < this.settings.limit);\n    },\n\n    updateAddElementsBtn: function() {\n        if (this.canAddMoreElements()) {\n            this.enableAddElementsBtn();\n        } else {\n            this.disableAddElementsBtn();\n        }\n    },\n\n    disableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.addClass('hidden');\n        }\n    },\n\n    enableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.removeClass('hidden');\n        }\n    },\n\n    resetElements: function() {\n        if (this.$elements !== null) {\n            this.removeElements(this.$elements);\n        } else {\n            this.$elements = $();\n        }\n\n        this.addElements(this.getElements());\n    },\n\n    addElements: function($elements) {\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect.addItems($elements);\n        }\n\n        if (this.settings.sortable) {\n            this.elementSort.addItems($elements);\n        }\n\n        if (this.settings.editable) {\n            this._handleShowElementEditor = ev => {\n                var $element = $(ev.currentTarget);\n                if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                    this.elementEditor = this.createElementEditor($element);\n                }\n            };\n\n            this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n            if ($.isTouchCapable()) {\n                this.addListener($elements, 'taphold', this._handleShowElementEditor);\n            }\n        }\n\n        $elements.find('.delete').on('click dblclick', ev => {\n            this.removeElement($(ev.currentTarget).closest('.element'));\n            // Prevent this from acting as one of a double-click\n            ev.stopPropagation();\n        });\n\n        this.$elements = this.$elements.add($elements);\n        this.updateAddElementsBtn();\n    },\n\n    createElementEditor: function($element, settings) {\n        if (!settings) {\n            settings = {};\n        }\n        settings.prevalidate = this.settings.prevalidate;\n        return Craft.createElementEditor(this.settings.elementType, $element, settings);\n    },\n\n    removeElements: function($elements) {\n        if (this.settings.selectable) {\n            this.elementSelect.removeItems($elements);\n        }\n\n        if (this.modal) {\n            var ids = [];\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $elements.eq(i).data('id');\n\n                if (id) {\n                    ids.push(id);\n                }\n            }\n\n            if (ids.length) {\n                this.modal.elementIndex.enableElementsById(ids);\n            }\n        }\n\n        // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n        $elements.children('input').prop('disabled', true);\n\n        this.$elements = this.$elements.not($elements);\n        this.updateAddElementsBtn();\n\n        this.onRemoveElements();\n    },\n\n    removeElement: function($element) {\n        this.removeElements($element);\n        this.animateElementAway($element, () => {\n            $element.remove();\n        });\n    },\n\n    animateElementAway: function($element, callback) {\n        $element.css('z-index', 0);\n\n        var animateCss = {\n            opacity: -1\n        };\n        animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n        if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n            animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n        }\n\n        // Pause the draft editor\n        if (window.draftEditor) {\n            window.draftEditor.pause();\n        }\n\n        $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n            callback();\n\n            // Resume the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.resume();\n            }\n        });\n    },\n\n    showModal: function() {\n        // Make sure we haven't reached the limit\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        if (!this.modal) {\n            this.modal = this.createModal();\n        } else {\n            this.modal.show();\n        }\n    },\n\n    createModal: function() {\n        return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n    },\n\n    getModalSettings: function() {\n        return $.extend({\n            closeOtherModals: false,\n            storageKey: this.modalStorageKey,\n            sources: this.settings.sources,\n            criteria: this.settings.criteria,\n            multiSelect: (this.settings.limit != 1),\n            showSiteMenu: this.settings.showSiteMenu,\n            disabledElementIds: this.getDisabledElementIds(),\n            onSelect: this.onModalSelect.bind(this)\n        }, this.settings.modalSettings);\n    },\n\n    getSelectedElementIds: function() {\n        var ids = [];\n\n        for (var i = 0; i < this.$elements.length; i++) {\n            ids.push(this.$elements.eq(i).data('id'));\n        }\n\n        return ids;\n    },\n\n    getDisabledElementIds: function() {\n        var ids = this.getSelectedElementIds();\n\n        if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n            ids.push(this.settings.sourceElementId);\n        }\n\n        if (this.settings.disabledElementIds) {\n            ids.push(...this.settings.disabledElementIds);\n        }\n\n        return ids;\n    },\n\n    onModalSelect: function(elements) {\n        if (this.settings.limit) {\n            // Cut off any excess elements\n            var slotsLeft = this.settings.limit - this.$elements.length;\n\n            if (elements.length > slotsLeft) {\n                elements = elements.slice(0, slotsLeft);\n            }\n        }\n\n        this.selectElements(elements);\n        this.updateDisabledElementsInModal();\n    },\n\n    selectElements: function(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            let elementInfo = elements[i],\n                $element = this.createNewElement(elementInfo);\n\n            this.appendElement($element);\n            this.addElements($element);\n            this.animateElementIntoPlace(elementInfo.$element, $element);\n\n            // Override the element reference with the new one\n            elementInfo.$element = $element;\n        }\n\n        this.onSelectElements(elements);\n    },\n\n    createNewElement: function(elementInfo) {\n        var $element = elementInfo.$element.clone();\n\n        // Make a couple tweaks\n        Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n        $element.addClass('removable');\n        $element.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + elementInfo.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        return $element;\n    },\n\n    appendElement: function($element) {\n        $element.appendTo(this.$elementsContainer);\n    },\n\n    animateElementIntoPlace: function($modalElement, $inputElement) {\n        var origOffset = $modalElement.offset(),\n            destOffset = $inputElement.offset(),\n            $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n        $inputElement.css('visibility', 'hidden');\n\n        $helper.css({\n            position: 'absolute',\n            zIndex: 10000,\n            top: origOffset.top,\n            left: origOffset.left\n        });\n\n        var animateCss = {\n            top: destOffset.top,\n            left: destOffset.left\n        };\n\n        $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n            $helper.remove();\n            $inputElement.css('visibility', 'visible');\n        });\n    },\n\n    updateDisabledElementsInModal: function() {\n        if (this.modal.elementIndex) {\n            this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n        }\n    },\n\n    getElementById: function(id) {\n        for (var i = 0; i < this.$elements.length; i++) {\n            var $element = this.$elements.eq(i);\n\n            if ($element.data('id') == id) {\n                return $element;\n            }\n        }\n    },\n\n    onSelectElements: function(elements) {\n        this.trigger('selectElements', {elements});\n        this.settings.onSelectElements(elements);\n\n        if (window.draftEditor) {\n            window.draftEditor.checkForm();\n        }\n    },\n\n    onRemoveElements: function() {\n        this.trigger('removeElements');\n        this.settings.onRemoveElements();\n    }\n}, {\n    ADD_FX_DURATION: 200,\n    REMOVE_FX_DURATION: 200,\n\n    defaults: {\n        id: null,\n        name: null,\n        fieldId: null,\n        elementType: null,\n        sources: null,\n        criteria: {},\n        allowSelfRelations: false,\n        sourceElementId: null,\n        disabledElementIds: null,\n        viewMode: 'list',\n        limit: null,\n        showSiteMenu: false,\n        modalStorageKey: null,\n        modalSettings: {},\n        onSelectElements: $.noop,\n        onRemoveElements: $.noop,\n        sortable: true,\n        selectable: true,\n        editable: true,\n        prevalidate: false,\n        editorSettings: {}\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend({\n    elementType: null,\n    elementIndex: null,\n\n    $body: null,\n    $selectBtn: null,\n    $sidebar: null,\n    $sources: null,\n    $sourceToggles: null,\n    $main: null,\n    $search: null,\n    $elements: null,\n    $tbody: null,\n    $primaryButtons: null,\n    $secondaryButtons: null,\n    $cancelBtn: null,\n    $footerSpinner: null,\n\n    init: function(elementType, settings) {\n        this.elementType = elementType;\n        this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n        // Build the modal\n        var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n            $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n            $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n        this.base($container, this.settings);\n\n        this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n        this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$primaryButtons);\n        this.$selectBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn disabled submit',\n            text: Craft.t('app', 'Select'),\n        }).appendTo(this.$primaryButtons);\n\n        this.$body = $body;\n\n        this.addListener(this.$cancelBtn, 'activate', 'cancel');\n        this.addListener(this.$selectBtn, 'activate', 'selectElements');\n    },\n\n    onFadeIn: function() {\n        if (!this.elementIndex) {\n            this._createElementIndex();\n        } else {\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.elementIndex.$search.trigger('focus');\n            }\n        }\n\n        this.base();\n    },\n\n    onSelectionChange: function() {\n        this.updateSelectBtnState();\n    },\n\n    updateSelectBtnState: function() {\n        if (this.$selectBtn) {\n            if (this.elementIndex.getSelectedElements().length) {\n                this.enableSelectBtn();\n            } else {\n                this.disableSelectBtn();\n            }\n        }\n    },\n\n    enableSelectBtn: function() {\n        this.$selectBtn.removeClass('disabled');\n    },\n\n    disableSelectBtn: function() {\n        this.$selectBtn.addClass('disabled');\n    },\n\n    enableCancelBtn: function() {\n        this.$cancelBtn.removeClass('disabled');\n    },\n\n    disableCancelBtn: function() {\n        this.$cancelBtn.addClass('disabled');\n    },\n\n    showFooterSpinner: function() {\n        this.$footerSpinner.removeClass('hidden');\n    },\n\n    hideFooterSpinner: function() {\n        this.$footerSpinner.addClass('hidden');\n    },\n\n    cancel: function() {\n        if (!this.$cancelBtn.hasClass('disabled')) {\n            this.hide();\n        }\n    },\n\n    selectElements: function() {\n        if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n            // TODO: This code shouldn't know about views' elementSelect objects\n            this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                elementInfo = this.getElementInfo($selectedElements);\n\n            this.onSelect(elementInfo);\n\n            if (this.settings.disableElementsOnSelect) {\n                this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n            }\n\n            if (this.settings.hideOnSelect) {\n                this.hide();\n            }\n        }\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $element = $($selectedElements[i]);\n            var elementInfo = Craft.getElementInfo($element);\n\n            info.push(elementInfo);\n        }\n\n        return info;\n    },\n\n    show: function() {\n        this.updateSelectBtnState();\n        this.base();\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo);\n    },\n\n    disable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.enable();\n        }\n\n        this.base();\n    },\n\n    _createElementIndex: function() {\n        // Get the modal body HTML based on the settings\n        var data = {\n            context: 'modal',\n            elementType: this.elementType,\n            sources: this.settings.sources\n        };\n\n        if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n            data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n        }\n\n        Craft.postActionRequest('elements/get-modal-body', data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.$body.html(response.html);\n\n                if (this.$body.has('.sidebar:not(.hidden)').length) {\n                    this.$body.addClass('has-sidebar');\n                }\n\n                // Initialize the element index\n                this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                    context: 'modal',\n                    modal: this,\n                    storageKey: this.settings.storageKey,\n                    criteria: this.settings.criteria,\n                    disabledElementIds: this.settings.disabledElementIds,\n                    selectable: true,\n                    multiSelect: this.settings.multiSelect,\n                    buttonContainer: this.$secondaryButtons,\n                    onSelectionChange: this.onSelectionChange.bind(this),\n                    hideSidebar: this.settings.hideSidebar,\n                    defaultSiteId: this.settings.defaultSiteId,\n                    defaultSource: this.settings.defaultSource\n                });\n\n                // Double-clicking or double-tapping should select the elements\n                this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                    // Make sure the touch targets are the same\n                    // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                    if (touchData.firstTap.target === touchData.secondTap.target) {\n                        this.selectElements();\n                    }\n                });\n            }\n        });\n    }\n}, {\n    defaults: {\n        resizable: true,\n        storageKey: null,\n        sources: null,\n        criteria: null,\n        multiSelect: false,\n        showSiteMenu: null,\n        disabledElementIds: [],\n        disableElementsOnSelect: false,\n        hideOnSelect: true,\n        onCancel: $.noop,\n        onSelect: $.noop,\n        hideSidebar: false,\n        defaultSiteId: null,\n        defaultSource: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend({\n    $source: null,\n    $target: null,\n    $form: null,\n    settings: null,\n\n    listening: null,\n    timeout: null,\n\n    init: function(source, target, settings) {\n        this.$source = $(source);\n        this.$target = $(target);\n        this.$form = this.$source.closest('form');\n\n        this.setSettings(settings);\n\n        this.startListening();\n    },\n\n    setNewSource: function(source) {\n        var listening = this.listening;\n        this.stopListening();\n\n        this.$source = $(source);\n\n        if (listening) {\n            this.startListening();\n        }\n    },\n\n    startListening: function() {\n        if (this.listening) {\n            return;\n        }\n\n        this.listening = true;\n\n        this.addListener(this.$source, 'input', 'onSourceTextChange');\n        this.addListener(this.$target, 'input', 'onTargetTextChange');\n        this.addListener(this.$form, 'submit', 'onFormSubmit');\n    },\n\n    stopListening: function() {\n        if (!this.listening) {\n            return;\n        }\n\n        this.listening = false;\n\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.removeAllListeners(this.$source);\n        this.removeAllListeners(this.$target);\n        this.removeAllListeners(this.$form);\n    },\n\n    onSourceTextChange: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout(this.updateTarget.bind(this), 250);\n    },\n\n    onTargetTextChange: function() {\n        if (this.$target.get(0) === document.activeElement) {\n            this.stopListening();\n        }\n    },\n\n    onFormSubmit: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.updateTarget();\n    },\n\n    updateTarget: function() {\n        if (!this.$target.is(':visible')) {\n            return;\n        }\n\n        var sourceVal = this.$source.val();\n\n        if (typeof sourceVal === 'undefined') {\n            // The source input may not exist anymore\n            return;\n        }\n\n        var targetVal = this.generateTargetValue(sourceVal);\n\n        this.$target.val(targetVal);\n\n        for (let i = 0; i < this.$target.length; i++) {\n            this.$target[i].dispatchEvent(new InputEvent('input', {\n                inputType: 'insertText',\n            }));\n            this.$target[i].dispatchEvent(new Event('input'));\n        }\n\n        // If the target already has focus, select its whole value to mimic\n        // the behavior if the value had already been generated and they just tabbed in\n        if (this.$target.is(':focus')) {\n            Craft.selectFullValue(this.$target);\n        }\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return sourceVal;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend({\n    settings: null,\n    totalItems: null,\n    sorter: null,\n\n    $noItems: null,\n    $table: null,\n    $tbody: null,\n    $deleteBtns: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.AdminTable.defaults);\n\n        if (!this.settings.allowDeleteAll) {\n            this.settings.minItems = 1;\n        }\n\n        this.$noItems = $(this.settings.noItemsSelector);\n        this.$table = $(this.settings.tableSelector);\n        this.$tbody = this.$table.children('tbody');\n        this.totalItems = this.$tbody.children().length;\n\n        if (this.settings.sortable) {\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                onSortChange: this.reorderItems.bind(this),\n            });\n        }\n\n        this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n        this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n        this.updateUI();\n    },\n\n    addRow: function(row) {\n        if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(row).appendTo(this.$tbody),\n            $deleteBtn = $row.find('.delete');\n\n        if (this.settings.sortable) {\n            this.sorter.addItems($row);\n        }\n\n        this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n        this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n        this.totalItems++;\n\n        this.updateUI();\n    },\n\n    reorderItems: function() {\n        if (!this.settings.sortable) {\n            return;\n        }\n\n        // Get the new field order\n        var ids = [];\n\n        for (var i = 0; i < this.sorter.$items.length; i++) {\n            var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n            ids.push(id);\n        }\n\n        // Send it to the server\n        var data = {\n            ids: JSON.stringify(ids)\n        };\n\n        Craft.postActionRequest(this.settings.reorderAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.onReorderItems(ids);\n                    Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                } else {\n                    Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                }\n            }\n        });\n    },\n\n    handleDeleteBtnClick: function(event) {\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(event.target).closest('tr');\n\n        if (this.confirmDeleteItem($row)) {\n            this.deleteItem($row);\n        }\n    },\n\n    confirmDeleteItem: function($row) {\n        var name = this.getItemName($row);\n        return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name}));\n    },\n\n    deleteItem: function($row) {\n        var data = {\n            id: this.getItemId($row)\n        };\n\n        Craft.postActionRequest(this.settings.deleteAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.handleDeleteItemResponse(response, $row);\n            }\n        });\n    },\n\n    handleDeleteItemResponse: function(response, $row) {\n        var id = this.getItemId($row),\n            name = this.getItemName($row);\n\n        if (response.success) {\n            if (this.sorter) {\n                this.sorter.removeItems($row);\n            }\n\n            $row.remove();\n            this.totalItems--;\n            this.updateUI();\n            this.onDeleteItem(id);\n\n            Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name}));\n        } else {\n            Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name}));\n        }\n    },\n\n    onReorderItems: function(ids) {\n        this.settings.onReorderItems(ids);\n    },\n\n    onDeleteItem: function(id) {\n        this.settings.onDeleteItem(id);\n    },\n\n    getItemId: function($row) {\n        return $row.attr(this.settings.idAttribute);\n    },\n\n    getItemName: function($row) {\n        return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n    },\n\n    updateUI: function() {\n        // Show the \"No Whatever Exists\" message if there aren't any\n        if (this.totalItems === 0) {\n            this.$table.hide();\n            this.$noItems.removeClass('hidden');\n        } else {\n            this.$table.show();\n            this.$noItems.addClass('hidden');\n        }\n\n        // Disable the sort buttons if there's only one row\n        if (this.settings.sortable) {\n            var $moveButtons = this.$table.find('.move');\n\n            if (this.totalItems === 1) {\n                $moveButtons.addClass('disabled');\n            } else {\n                $moveButtons.removeClass('disabled');\n            }\n        }\n\n        // Disable the delete buttons if we've reached the minimum items\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            this.$deleteBtns.addClass('disabled');\n        } else {\n            this.$deleteBtns.removeClass('disabled');\n        }\n\n        // Hide the New Whatever button if we've reached the maximum items\n        if (this.settings.newItemBtnSelector) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                $(this.settings.newItemBtnSelector).addClass('hidden');\n            } else {\n                $(this.settings.newItemBtnSelector).removeClass('hidden');\n            }\n        }\n    }\n}, {\n    defaults: {\n        tableSelector: null,\n        noItemsSelector: null,\n        newItemBtnSelector: null,\n        idAttribute: 'data-id',\n        nameAttribute: 'data-name',\n        sortable: false,\n        allowDeleteAll: true,\n        minItems: 0,\n        maxItems: null,\n        reorderAction: null,\n        deleteAction: null,\n        reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n        reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n        confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n        deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n        deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n        onReorderItems: $.noop,\n        onDeleteItem: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend({\n    reloadIndex: false,\n\n    updateForm: function(response, refreshInitialData) {\n        this.base(response, refreshInitialData);\n\n        if (this.$element.data('id')) {\n            var $imageEditorTrigger = this.$fieldsContainer.find('> .meta > .preview-thumb-container.editable');\n\n            if ($imageEditorTrigger.length) {\n                this.addListener($imageEditorTrigger, 'click', 'showImageEditor');\n            }\n        }\n    },\n\n    showImageEditor: function() {\n        new Craft.AssetImageEditor(this.$element.data('id'), {\n            onSave: () => {\n                this.reloadIndex = true;\n                this.reloadForm();\n            },\n        });\n    },\n\n    onHideHud: function() {\n        if (this.reloadIndex && this.settings.elementIndex) {\n            this.settings.elementIndex.updateElements();\n        } else if (this.reloadIndex && this.settings.input) {\n            this.settings.input.refreshThumbnail(this.$element.data('id'));\n        }\n\n        this.base();\n    }\n});\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend({\n    // jQuery objects\n    $body: null,\n    $footer: null,\n    $imageTools: null,\n    $buttons: null,\n    $cancelBtn: null,\n    $replaceBtn: null,\n    $saveBtn: null,\n    $editorContainer: null,\n    $straighten: null,\n    $croppingCanvas: null,\n    $spinnerCanvas: null,\n\n    // FabricJS objects\n    canvas: null,\n    image: null,\n    viewport: null,\n    focalPoint: null,\n    grid: null,\n    croppingCanvas: null,\n    clipper: null,\n    croppingRectangle: null,\n    cropperHandles: null,\n    cropperGrid: null,\n    croppingShade: null,\n    croppingAreaText: null,\n\n    // Image state attributes\n    imageStraightenAngle: 0,\n    viewportRotation: 0,\n    originalWidth: 0,\n    originalHeight: 0,\n    imageVerticeCoords: null,\n    zoomRatio: 1,\n\n    // Editor state attributes\n    animationInProgress: false,\n    currentView: '',\n    assetId: null,\n    cacheBust: null,\n    draggingCropper: false,\n    scalingCropper: false,\n    draggingFocal: false,\n    previousMouseX: 0,\n    previousMouseY: 0,\n    shiftKeyHeld: false,\n    editorHeight: 0,\n    editorWidth: 0,\n    cropperState: false,\n    scaleFactor: 1,\n    flipData: {},\n    focalPointState: false,\n    spinnerInterval: null,\n    maxImageSize: null,\n    lastLoadedDimensions: null,\n    imageIsLoading: false,\n    mouseMoveEvent: null,\n    croppingConstraint: false,\n    constraintOrientation: 'landscape',\n    showingCustomConstraint: false,\n\n    // Rendering proxy functions\n    renderImage: null,\n    renderCropper: null,\n\n    init: function(assetId, settings) {\n        this.cacheBust = Date.now();\n\n        this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n        if (this.settings.allowDegreeFractions === null) {\n            this.settings.allowDegreeFractions = Craft.isImagick;\n        }\n\n        this.assetId = assetId;\n        this.flipData = {x: 0, y: 0};\n\n        // Build the modal\n        this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n        this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n        this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n        this.base(this.$container, this.settings);\n\n        this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn cancel',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$buttons);\n        this.$replaceBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit save replace',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$buttons);\n\n        if (this.settings.allowSavingAsNew) {\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save copy',\n                text: Craft.t('app', 'Save as a new asset'),\n            }).appendTo(this.$buttons);\n            this.addListener(this.$saveBtn, 'activate', this.saveImage);\n        }\n\n        this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n        this.addListener(this.$cancelBtn, 'activate', this.hide);\n        this.removeListener(this.$shade, 'click');\n\n        this.maxImageSize = this.getMaxImageSize();\n\n        Craft.postActionRequest('assets/image-editor', {assetId}, this.loadEditor.bind(this));\n    },\n\n    /**\n     * Get the max image size that is viewable in the editor currently\n     */\n    getMaxImageSize: function() {\n        var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n        var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n        return Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n    },\n\n    /**\n     * Load the editor markup and start loading components and the image.\n     *\n     * @param data\n     */\n    loadEditor: function(data) {\n        if (!data.html) {\n            alert(Craft.t('app', 'Could not load the image editor.'));\n        }\n\n        this.$body.html(data.html);\n        this.$tabs = $('.tabs li', this.$body);\n        this.$viewsContainer = $('.views', this.$body);\n        this.$views = $('> div', this.$viewsContainer);\n        this.$imageTools = $('.image-container .image-tools', this.$body);\n        this.$editorContainer = $('.image-container .image', this.$body);\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this._showSpinner();\n\n        this.updateSizeAndPosition();\n\n        // Load the canvas on which we'll host our image and set up the proxy render function\n        this.canvas = new fabric.StaticCanvas('image-canvas');\n\n        // Set up the cropping canvas jquery element for tracking all the nice events\n        this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n        this.$croppingCanvas.width(this.editorWidth);\n        this.$croppingCanvas.height(this.editorHeight);\n\n        this.canvas.enableRetinaScaling = true;\n        this.renderImage = () => {\n            Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n        };\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        // Load image and set up the initial properties\n        fabric.Image.fromURL(imageUrl, imageObject => {\n            this.image = imageObject;\n            this.image.set({\n                originX: 'center',\n                originY: 'center',\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n            this.canvas.add(this.image);\n\n            this.originalHeight = this.image.getHeight();\n            this.originalWidth = this.image.getWidth();\n            this.zoomRatio = 1;\n\n            this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n            // Set up the image bounding box, viewport and position everything\n            this._setFittedImageVerticeCoordinates();\n            this._repositionEditorElements();\n\n            // Set up the focal point\n            var focalState = {\n                imageDimensions: this.getScaledImageDimensions(),\n                offsetX: 0,\n                offsetY: 0\n            };\n\n            var focal = false;\n            if (data.focalPoint) {\n                // Transform the focal point coordinates from relative to absolute\n                var focalData = data.focalPoint;\n\n                // Resolve for the current image dimensions.\n                var adjustedX = focalState.imageDimensions.width * focalData.x;\n                var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                focal = true;\n            }\n\n            this.storeFocalPointState(focalState);\n\n            if (focal) {\n                this._createFocalPoint();\n            }\n\n            this._createViewport();\n            this.storeCropperState();\n\n            // Add listeners to buttons\n            this._addControlListeners();\n\n            // Add mouse event listeners\n            this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n            this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n            this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n            this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n            this._hideSpinner();\n\n            // Render it, finally\n            this.renderImage();\n\n            // Make sure verything gets fired for the first tab\n            this.$tabs.first().trigger('click');\n        });\n    },\n\n    /**\n     * Reload the image to better fit the current available image editor viewport.\n     */\n    _reloadImage: function() {\n        if (this.imageIsLoading) {\n            return;\n        }\n\n        this.imageIsLoading = true;\n        this.maxImageSize = this.getMaxImageSize();\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        this.image.setSrc(imageUrl, imageObject => {\n            this.originalHeight = imageObject.getHeight();\n            this.originalWidth = imageObject.getWidth();\n            this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n            this.updateSizeAndPosition();\n            this.renderImage();\n            this.imageIsLoading = false;\n        });\n    },\n\n    /**\n     * Update the modal size and position on browser resize\n     */\n    updateSizeAndPosition: function() {\n        if (!this.$container) {\n            return;\n        }\n\n        // Fullscreen modal\n        var innerWidth = window.innerWidth;\n        var innerHeight = window.innerHeight;\n\n        this.$container.css({\n            'width': innerWidth,\n            'min-width': innerWidth,\n            'left': 0,\n\n            'height': innerHeight,\n            'min-height': innerHeight,\n            'top': 0\n        });\n\n        this.$body.css({\n            'height': innerHeight - 62\n        });\n\n        if (innerWidth < innerHeight) {\n            this.$container.addClass('vertical');\n        } else {\n            this.$container.removeClass('vertical');\n        }\n\n        if (this.$spinnerCanvas) {\n            this.$spinnerCanvas.css({\n                left: ((this.$spinnerCanvas.parent().width() / 2) - (this.$spinnerCanvas.width() / 2)) + 'px',\n                top: ((this.$spinnerCanvas.parent().height() / 2) - (this.$spinnerCanvas.height() / 2)) + 'px'\n            });\n        }\n\n        // If image is already loaded, make sure it looks pretty.\n        if (this.$editorContainer && this.image) {\n            this._repositionEditorElements();\n        }\n    },\n\n    /**\n     * Reposition the editor elements to accurately reflect the editor state with current dimensions\n     */\n    _repositionEditorElements: function() {\n        // Remember what the dimensions were before the resize took place\n        var previousEditorDimensions = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this.canvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        var currentScaledDimensions = this.getScaledImageDimensions();\n\n        // If we're cropping now, we have to reposition the cropper correctly in case\n        // the area for image changes, forcing the image size to change as well.\n        if (this.currentView === 'crop') {\n            this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n            var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            this._setFittedImageVerticeCoordinates();\n            this._repositionCropper(previouslyOccupiedArea);\n        } else {\n            // Otherwise just recalculate the image zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n        }\n\n        // Reposition the image relatively to the previous editor dimensions.\n        this._repositionImage(previousEditorDimensions);\n        this._repositionViewport();\n        this._repositionFocalPoint(previousEditorDimensions);\n        this._zoomImage();\n\n        this.renderImage();\n\n        if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n            this._reloadImage();\n        }\n    },\n\n    /**\n     * Reposition image based on how the editor dimensions have changed.\n     * This ensures keeping the image center offset, if there is any.\n     *\n     * @param previousEditorDimensions\n     */\n    _repositionImage: function(previousEditorDimensions) {\n        this.image.set({\n            left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n            top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n        });\n    },\n\n    /**\n     * Create the viewport for image editor.\n     */\n    _createViewport: function() {\n        this.viewport = new fabric.Rect({\n            width: this.image.width,\n            height: this.image.height,\n            fill: 'rgba(127,0,0,1)',\n            originX: 'center',\n            originY: 'center',\n            globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n            left: this.image.left,\n            top: this.image.top\n        });\n        this.canvas.add(this.viewport);\n        this.renderImage();\n    },\n\n    /**\n     * Create the focal point.\n     */\n    _createFocalPoint: function() {\n        var focalPointState = this.focalPointState;\n        var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n        var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n        var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n        // Adjust by image margins\n        focalX += this.image.left;\n        focalY += this.image.top;\n\n        var deltaX = 0;\n        var deltaY = 0;\n\n        // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n        if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n            if (this.currentView !== 'crop') {\n                deltaX = this.viewport.left - this.image.left;\n                deltaY = this.viewport.top - this.image.top;\n            } else {\n                // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                deltaX = this.clipper.left - this.image.left;\n                deltaY = this.clipper.top - this.image.top;\n            }\n\n            // Bump focal to middle of viewport\n            focalX += deltaX;\n            focalY += deltaY;\n\n            // Reflect changes in saved state\n            focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n        }\n\n        this.focalPoint = new fabric.Group([\n            new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n            new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n        ], {\n            originX: 'center',\n            originY: 'center',\n            left: focalX,\n            top: focalY\n        });\n\n        this.storeFocalPointState(focalPointState);\n        this.canvas.add(this.focalPoint);\n    },\n\n    /**\n     * Toggle focal point\n     */\n    toggleFocalPoint: function() {\n        if (!this.focalPoint) {\n            this._createFocalPoint();\n        } else {\n            this.canvas.remove(this.focalPoint);\n            this.focalPoint = null;\n        }\n\n        this.renderImage();\n    },\n\n    /**\n     * Reposition the viewport to handle editor resizing.\n     */\n    _repositionViewport: function() {\n        if (this.viewport) {\n            var dimensions = {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            // If we're cropping, nothing exciting happens for the viewport\n            if (this.currentView === 'crop') {\n                dimensions.width = this.editorWidth;\n                dimensions.height = this.editorHeight;\n            } else {\n                // If this is the first initial reposition, no cropper state yet\n                if (this.cropperState) {\n                    // Recall the state\n                    var state = this.cropperState;\n\n                    var scaledImageDimensions = this.getScaledImageDimensions();\n                    // Make sure we have the correct current image size\n                    var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                    // Set the viewport dimensions\n                    dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                    dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                    // Adjust the image position to show the correct part of the image in the viewport\n                    this.image.set({\n                        left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                        top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                    });\n                } else {\n                    $.extend(dimensions, this.getScaledImageDimensions());\n                }\n            }\n            this.viewport.set(dimensions);\n        }\n    },\n\n    _repositionFocalPoint: function(previousEditorDimensions) {\n        if (this.focalPoint) {\n            var offsetX = this.focalPoint.left - this.editorWidth / 2;\n            var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n            var currentWidth = this.image.width;\n            var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n            var ratio = newWidth / currentWidth / this.scaleFactor;\n\n            offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n            offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n            offsetX *= ratio;\n            offsetY *= ratio;\n\n            this.focalPoint.set({\n                left: this.editorWidth / 2 + offsetX,\n                top: this.editorHeight / 2 + offsetY\n            });\n        }\n    },\n\n    /**\n     * Return true if the image orientation has changed\n     */\n    hasOrientationChanged: function() {\n        return this.viewportRotation % 180 !== 0;\n    },\n\n    /**\n     * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n     */\n    getScaledImageDimensions: function() {\n        if (typeof this.getScaledImageDimensions._ === 'undefined') {\n            this.getScaledImageDimensions._ = {};\n        }\n\n        this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n        this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n        this.getScaledImageDimensions._.dimensions = {};\n        if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n            this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n            this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n        } else {\n            this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n            this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n        }\n\n        return this.getScaledImageDimensions._.dimensions;\n    },\n\n    /**\n     * Set the image dimensions to reflect the current zoom ratio.\n     */\n    _zoomImage: function() {\n        if (typeof this._zoomImage._ === 'undefined') {\n            this._zoomImage._ = {};\n        }\n\n        this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n        this.image.set({\n            width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n            height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n        });\n    },\n\n    /**\n     * Set up listeners for the controls.\n     */\n    _addControlListeners: function() {\n        // Tabs\n        this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n        // Focal point\n        this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n        // Rotate controls\n        this.addListener($('.rotate-left'), 'click', function() {\n            this.rotateImage(-90);\n        });\n        this.addListener($('.rotate-right'), 'click', function() {\n            this.rotateImage(90);\n        });\n        this.addListener($('.flip-vertical'), 'click', function() {\n            this.flipImage('y');\n        });\n        this.addListener($('.flip-horizontal'), 'click', function() {\n            this.flipImage('x');\n        });\n\n        // Straighten slider\n        this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n            onStart: () => {\n                this._showGrid();\n            },\n            onChange: slider => {\n                this.straighten(slider);\n            },\n            onEnd: () => {\n                this._hideGrid();\n                this._cleanupFocalPointAfterStraighten();\n            },\n        });\n\n        // Cropper scale modifier key\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = true;\n            }\n        });\n        this.addListener(Garnish.$doc, 'keyup', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = false;\n            }\n        });\n\n        this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n        this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n        this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n    },\n\n    /**\n     * Handle a constraint button click.\n     *\n     * @param ev\n     */\n    _handleConstraintClick: function(ev) {\n        var constraint = $(ev.currentTarget).data('constraint');\n        var $target = $(ev.currentTarget);\n        $target.siblings().removeClass('active');\n        $target.addClass('active');\n\n        if (constraint == 'custom') {\n            this._showCustomConstraint();\n            this._applyCustomConstraint();\n            return;\n        }\n\n        this._hideCustomConstraint();\n\n        this.setCroppingConstraint(constraint);\n        this.enforceCroppingConstraint();\n    },\n\n    /**\n     * Handle an orientation switch click.\n     *\n     * @param ev\n     */\n    _handleOrientationClick: function(ev) {\n        if (ev.currentTarget.value === this.constraintOrientation) {\n            return;\n        }\n        this.constraintOrientation = ev.currentTarget.value;\n\n        var $constraints = $('.constraint.flip', this.$container);\n\n        for (var i = 0; i < $constraints.length; i++) {\n            var $constraint = $($constraints[i]);\n            $constraint.data('constraint', 1 / $constraint.data('constraint'));\n            $constraint.html($constraint.html().split(':').reverse().join(':'));\n        }\n\n        $constraints.filter('.active').click();\n    },\n\n    /**\n     * Apply the custom ratio set in the inputs\n     */\n    _applyCustomConstraint: function() {\n        var constraint = this._getCustomConstraint();\n\n        if (constraint.w > 0 && constraint.h > 0) {\n            this.setCroppingConstraint(constraint.w / constraint.h);\n            this.enforceCroppingConstraint();\n        }\n    },\n\n    /**\n     * Get the custom constraint.\n     *\n     * @returns {{w: *, h: *}}\n     */\n    _getCustomConstraint: function() {\n        var w = parseFloat($('.custom-constraint-w').val());\n        var h = parseFloat($('.custom-constraint-h').val());\n        return {\n            w: isNaN(w) ? 0 : w,\n            h: isNaN(h) ? 0 : h,\n        }\n    },\n\n    /**\n     * Set the custom constraint.\n     *\n     * @param w\n     * @param h\n     */\n    _setCustomConstraint: function(w, h) {\n        $('.custom-constraint-w').val(parseFloat(w));\n        $('.custom-constraint-h').val(parseFloat(h));\n    },\n\n    /**\n     * Hide the custom constraint inputs.\n     */\n    _hideCustomConstraint: function() {\n        this.showingCustomConstraint = false;\n        $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n        $('.orientation', this.$container).removeClass('hidden');\n    },\n\n    /**\n     * Show the custom constraint inputs.\n     */\n    _showCustomConstraint: function() {\n        if (this.showingCustomConstraint) {\n            return;\n        }\n\n        this.showingCustomConstraint = true;\n        $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n        $('.orientation', this.$container).addClass('hidden');\n    },\n\n    /**\n     * Handle tab click.\n     *\n     * @param ev\n     */\n    _handleTabClick: function(ev) {\n        if (!this.animationInProgress) {\n            var $tab = $(ev.currentTarget);\n            var view = $tab.data('view');\n            this.$tabs.removeClass('selected');\n            $tab.addClass('selected');\n            this.showView(view);\n        }\n    },\n\n    /**\n     * Show a view.\n     *\n     * @param view\n     */\n    showView: function(view) {\n        if (this.currentView === view) {\n            return;\n        }\n\n        this.$views.addClass('hidden');\n        var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n        $view.removeClass('hidden');\n\n        if (view === 'rotate') {\n            this.enableSlider();\n        } else {\n            this.disableSlider();\n        }\n\n        // Now that most likely our editor dimensions have changed, time to reposition stuff\n        this.updateSizeAndPosition();\n\n        // See if we have to enable or disable crop mode as we transition between tabs\n        if (this.currentView === 'crop' && view !== 'crop') {\n            this.disableCropMode();\n        } else if (this.currentView !== 'crop' && view === 'crop') {\n            this.enableCropMode();\n        }\n\n        // Mark the current view\n        this.currentView = view;\n    },\n\n    /**\n     * Store the current cropper state.\n     *\n     * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n     * as the basis for recalculating the cropper position and dimensions.\n     *\n     * @param [state]\n     */\n    storeCropperState: function(state) {\n        if (typeof this.storeCropperState._ === 'undefined') {\n            this.storeCropperState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.cropperState = state;\n        } else if (this.clipper) {\n            this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n            this.cropperState = {\n                offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        } else {\n            this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n            this.cropperState = {\n                offsetX: 0,\n                offsetY: 0,\n                height: this.storeCropperState._.dimensions.height,\n                width: this.storeCropperState._.dimensions.width,\n                imageDimensions: this.storeCropperState._.dimensions\n            };\n        }\n    },\n\n    /**\n     * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n     */\n    storeFocalPointState: function(state) {\n        if (typeof this.storeFocalPointState._ === 'undefined') {\n            this.storeFocalPointState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.focalPointState = state;\n        } else if (this.focalPoint) {\n            this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n            this.focalPointState = {\n                offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        }\n    },\n\n    /**\n     * Rotate the image along with the viewport.\n     *\n     * @param degrees\n     */\n    rotateImage: function(degrees) {\n        if (!this.animationInProgress) {\n            // We're not that kind of an establishment, sir.\n            if (degrees !== 90 && degrees !== -90) {\n                return false;\n            }\n\n            this.animationInProgress = true;\n            this.viewportRotation += degrees;\n\n            // Normalize the viewport rotation angle so it's between 0 and 359\n            this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n            var newAngle = this.image.angle + degrees;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var imageZoomRatio;\n\n            if (this.hasOrientationChanged()) {\n                imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n            } else {\n                imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n            }\n\n            // In cases when for some reason we've already zoomed in on the image,\n            // use existing zoom.\n            if (this.zoomRatio > imageZoomRatio) {\n                imageZoomRatio = this.zoomRatio;\n            }\n\n            var viewportProperties = {\n                angle: degrees === 90 ? '+=90' : '-=90'\n            };\n\n            var imageProperties = {\n                angle: newAngle,\n                width: scaledImageDimensions.width * imageZoomRatio,\n                height: scaledImageDimensions.height * imageZoomRatio\n            };\n\n            var scaleFactor = 1;\n            if (this.scaleFactor < 1) {\n                scaleFactor = 1 / this.scaleFactor;\n                this.scaleFactor = 1;\n            } else {\n                if (this.viewport.width > this.editorHeight) {\n                    scaleFactor = this.editorHeight / this.viewport.width;\n                } else if (this.viewport.height > this.editorWidth) {\n                    scaleFactor = this.editorWidth / this.viewport.height;\n                }\n                this.scaleFactor = scaleFactor;\n            }\n\n            if (scaleFactor < 1) {\n                imageProperties.width *= scaleFactor;\n                imageProperties.height *= scaleFactor;\n            }\n\n            var state = this.cropperState;\n\n            // Make sure we reposition the image as well to focus on the same image area\n            var deltaX = state.offsetX;\n            var deltaY = state.offsetY;\n            var angleInRadians = degrees * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n            var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n            imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n            state.offsetX = newDeltaX;\n            state.offsetY = newDeltaY;\n\n            var temp = state.width;\n            state.width = state.height;\n            state.height = temp;\n\n            this.storeCropperState(state);\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            }\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    // If we're zooming the image in or out, better do the same to viewport\n                    var temp = this.viewport.height * scaleFactor;\n                    this.viewport.height = this.viewport.width * scaleFactor;\n                    this.viewport.width = temp;\n                    this.viewport.set({angle: 0});\n                },\n            });\n\n            // Animate the rotation and dimension change\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                    this.image.set({angle: cleanAngle});\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        this._adjustFocalPointByAngle(degrees);\n                        this.straighten(this.straighteningInput);\n                        this.canvas.add(this.focalPoint);\n                    } else {\n                        this._resetFocalPointPosition();\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Flip an image along an axis.\n     *\n     * @param axis\n     */\n    flipImage: function(axis) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            if (this.hasOrientationChanged()) {\n                axis = axis === 'y' ? 'x' : 'y';\n            }\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            } else {\n                this._resetFocalPointPosition();\n            }\n\n            var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            this.straighteningInput.setValue(-this.imageStraightenAngle);\n            this.imageStraightenAngle = -this.imageStraightenAngle;\n            var properties = {\n                angle: this.viewportRotation + this.imageStraightenAngle\n            };\n\n            var deltaY, deltaX;\n            var cropperState = this.cropperState;\n            var focalPointState = this.focalPointState;\n\n            // Reposition the image, viewport, and stored cropper and focal point states.\n            if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                cropperState.offsetX = -cropperState.offsetX;\n                focalPointState.offsetX = -focalPointState.offsetX;\n                deltaX = this.image.left - editorCenter.x;\n                properties.left = editorCenter.x - deltaX;\n            } else {\n                cropperState.offsetY = -cropperState.offsetY;\n                focalPointState.offsetY = -focalPointState.offsetY;\n                deltaY = this.image.top - editorCenter.y;\n                properties.top = editorCenter.y - deltaY;\n            }\n\n            if (axis === 'y') {\n                properties.scaleY = this.image.scaleY * -1;\n                this.flipData.y = 1 - this.flipData.y;\n            } else {\n                properties.scaleX = this.image.scaleX * -1;\n                this.flipData.x = 1 - this.flipData.x;\n            }\n\n            this.storeCropperState(cropperState);\n            this.storeFocalPointState(focalPointState);\n\n            this.image.animate(properties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        // Well this is handy\n                        this._adjustFocalPointByAngle(0);\n                        this.canvas.add(this.focalPoint);\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Perform the straightening with input slider.\n     *\n     * @param {Craft.SlideRuleInput} slider\n     */\n    straighten: function(slider) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            var previousAngle = this.image.angle;\n\n            this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n            // Straighten the image\n            this.image.set({\n                angle: this.viewportRotation + this.imageStraightenAngle\n            });\n\n            // Set the new zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            this._zoomImage();\n\n            if (this.cropperState) {\n                this._adjustEditorElementsOnStraighten(previousAngle);\n            }\n\n            this.renderImage();\n\n            this.animationInProgress = false;\n        }\n    },\n\n    /**\n     * Adjust the cropped viewport when straightening the image to correct for\n     * bumping into edges, keeping focus on the cropped area center and to\n     * maintain the illusion that the image is being straightened relative to the viewport center.\n     *\n     * @param {integer} previousAngle integer the previous image angle before straightening\n     */\n    _adjustEditorElementsOnStraighten: function(previousAngle) {\n        var scaledImageDimensions = this.getScaledImageDimensions();\n        var angleDelta = this.image.angle - previousAngle;\n        var state = this.cropperState;\n\n        var currentZoomRatio = this.zoomRatio;\n        var adjustmentRatio = 1;\n\n        var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n        do {\n            // Get the cropper center coordinates\n            var cropperCenterX = state.offsetX;\n            var cropperCenterY = state.offsetY;\n            var angleInRadians = angleDelta * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n            newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n            sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Figure out the final image offset to keep the viewport focused where we need it\n            deltaX = newCenterX * currentZoomRatio * sizeFactor;\n            deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n            // If the image would creep in the viewport, figure out how to math around it.\n            var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n            var rectangle = {\n                width: this.viewport.width,\n                height: this.viewport.height,\n                left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n            };\n            adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n            currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n            // If we had to make adjustments, do the calculations again\n        } while (adjustmentRatio !== 1);\n\n        // Reposition the image correctly\n        this.image.set({\n            left: this.editorWidth / 2 - deltaX,\n            top: this.editorHeight / 2 - deltaY\n        });\n\n        // Finally, store the new cropper state to reflect the rotation change.\n        state.offsetX = newCenterX;\n        state.offsetY = newCenterY;\n        state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n        state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n        this.storeCropperState(state);\n\n        // Zoom the image in and we're done.\n        this.zoomRatio = currentZoomRatio;\n\n        if (this.focalPoint) {\n            this._adjustFocalPointByAngle(angleDelta);\n\n            if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 0});\n            } else {\n                this.focalPoint.set({opacity: 1});\n            }\n        } else if (angleDelta !== 0) {\n            this._resetFocalPointPosition();\n        }\n\n        this._zoomImage();\n    },\n\n    /**\n     * If focal point is active and outside of viewport after straightening, reset it.\n     */\n    _cleanupFocalPointAfterStraighten: function() {\n        if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n            this.focalPoint.set({opacity: 1});\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n            this.toggleFocalPoint();\n        }\n    },\n\n    /**\n     * Reset focal point to the middle of image.\n     */\n    _resetFocalPointPosition: function() {\n        var state = this.focalPointState;\n        state.offsetX = 0;\n        state.offsetY = 0;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n     *\n     * @param object\n     * @param containingObject\n     *\n     * @returns {boolean}\n     */\n    _isCenterInside: function(object, containingObject) {\n        return (object.left > containingObject.left - containingObject.width / 2\n            && object.top > containingObject.top - containingObject.height / 2\n            && object.left < containingObject.left + containingObject.width / 2\n            && object.top < containingObject.top + containingObject.height / 2\n        );\n    },\n\n    /**\n     * Adjust the focal point by an angle in degrees.\n     * @param angle\n     */\n    _adjustFocalPointByAngle: function(angle) {\n        var angleInRadians = angle * (Math.PI / 180);\n        var state = this.focalPointState;\n\n        var focalX = state.offsetX;\n        var focalY = state.offsetY;\n\n        // Calculate how the focal point would need to move in a circle to keep on the same spot\n        // on the image if it was rotated with zoom intact.\n        var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n        var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n        var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n        var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n        var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n        this.focalPoint.left = this.image.left + adjustedFocalX;\n        this.focalPoint.top = this.image.top + adjustedFocalY;\n\n        state.offsetX = newFocalX;\n        state.offsetY = newFocalY;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n     * If the rectangle fits, 1 will be returned.\n     *\n     * @param rectangle\n     * @param containingVertices\n     */\n    _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n        var rectangleVertices = this._getRectangleVertices(rectangle);\n        var vertex;\n\n        // Check if any of the viewport vertices end up out of bounds\n        for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n            vertex = rectangleVertices[verticeIndex];\n\n            if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                break;\n            }\n\n            vertex = false;\n        }\n\n        // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n        var adjustmentRatio;\n\n        if (!vertex) {\n            adjustmentRatio = 1;\n        } else {\n            // Find out which edge got crossed by the vertex\n            var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n            var rectangleCenter = {\n                x: rectangle.left + rectangle.width / 2,\n                y: rectangle.top + rectangle.height / 2\n            };\n\n            // Calculate how much further that edge needs to be.\n            // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n            var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n            var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n            // Adjust the zoom ratio\n            adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n        }\n\n        return adjustmentRatio;\n    },\n\n    /**\n     * Save the image.\n     *\n     * @param ev\n     */\n    saveImage: function(ev) {\n        var $button = $(ev.currentTarget);\n        if ($button.hasClass('disabled')) {\n            return false;\n        }\n\n        $('.btn', this.$buttons).addClass('disabled');\n        this.$buttons.append('<div class=\"spinner\"></div>');\n\n        var postData = {\n            assetId: this.assetId,\n            viewportRotation: this.viewportRotation,\n            imageRotation: this.imageStraightenAngle,\n            replace: $button.hasClass('replace') ? 1 : 0\n        };\n\n        if (this.cropperState) {\n            var cropData = {};\n\n            cropData.height = this.cropperState.height;\n            cropData.width = this.cropperState.width;\n            cropData.offsetX = this.cropperState.offsetX;\n            cropData.offsetY = this.cropperState.offsetY;\n\n            postData.imageDimensions = this.cropperState.imageDimensions;\n\n            postData.cropData = cropData;\n        } else {\n            postData.imageDimensions = this.getScaledImageDimensions();\n        }\n\n        if (this.focalPoint) {\n            postData.focalPoint = this.focalPointState;\n        }\n\n        postData.flipData = this.flipData;\n        postData.zoom = this.zoomRatio;\n\n        Craft.postActionRequest('assets/save-image', postData, data => {\n            this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n            if (data.error) {\n                alert(data.error);\n                return;\n            }\n\n            this.onSave();\n            this.hide();\n            Craft.cp.runQueue();\n        });\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToCoverRatio: function(dimensions) {\n        // Convert the angle to radians\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        // Calculate the dimensions of the scaled image using the magic of math\n        var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n        var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n        // Calculate the ratio\n        return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToFitRatio: function(dimensions) {\n        // Get the bounding box for a rotated image\n        var boundingBox = this._getImageBoundingBox(dimensions);\n\n        // Scale the bounding box to fit\n        var scale = 1;\n        if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n            var vertScale = this.editorHeight / boundingBox.height;\n            var horiScale = this.editorWidth / boundingBox.width;\n            scale = Math.min(horiScale, vertScale);\n        }\n\n        return scale;\n    },\n\n    /**\n     * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n     */\n    getCombinedZoomRatio: function(dimensions) {\n        return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n    },\n\n    /**\n     * Draw the grid.\n     *\n     * @private\n     */\n    _showGrid: function() {\n        if (!this.grid) {\n            var strokeOptions = {\n                strokeWidth: 1,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            var lineCount = 8;\n            var gridWidth = this.viewport.width;\n            var gridHeight = this.viewport.height;\n            var xStep = gridWidth / (lineCount + 1);\n            var yStep = gridHeight / (lineCount + 1);\n\n            var grid = [\n                new fabric.Rect({\n                    strokeWidth: 2,\n                    stroke: 'rgba(255,255,255,1)',\n                    originX: 'center',\n                    originY: 'center',\n                    width: gridWidth,\n                    height: gridHeight,\n                    left: gridWidth / 2,\n                    top: gridHeight / 2,\n                    fill: 'rgba(255,255,255,0)'\n                })\n            ];\n\n            var i;\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n            }\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n            }\n\n            this.grid = new fabric.Group(grid, {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                angle: this.viewport.angle\n            });\n\n            this.canvas.add(this.grid);\n            this.renderImage();\n        }\n    },\n\n    /**\n     * Hide the grid\n     */\n    _hideGrid: function() {\n        this.canvas.remove(this.grid);\n        this.grid = null;\n        this.renderImage();\n    },\n\n    /**\n     * Remove all the events when hiding the editor.\n     */\n    onFadeOut: function() {\n        this.destroy();\n    },\n\n    /**\n     * Make sure underlying content is not scrolled by accident.\n     */\n    show: function() {\n        this.base();\n\n        $('html').addClass('noscroll');\n    },\n\n    /**\n     * Allow the content to scroll.\n     */\n    hide: function() {\n        this.removeAllListeners();\n        this.straighteningInput.removeAllListeners();\n        $('html').removeClass('noscroll');\n        this.base();\n    },\n\n    /**\n     * onSave callback.\n     */\n    onSave: function() {\n        this.settings.onSave();\n        this.trigger('save');\n    },\n\n    /**\n     * Enable the rotation slider.\n     */\n    enableSlider: function() {\n        this.$imageTools.removeClass('hidden');\n    },\n\n    /**\n     * Disable the rotation slider.\n     */\n    disableSlider: function() {\n        this.$imageTools.addClass('hidden');\n    },\n\n    /**\n     * Switch to crop mode.\n     */\n    enableCropMode: function() {\n        var imageDimensions = this.getScaledImageDimensions();\n        this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n        var viewportProperties = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var callback = () => {\n            this._setFittedImageVerticeCoordinates();\n\n            // Restore cropper\n            var state = this.cropperState;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Restore based on the stored information\n            var cropperData = {\n                left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                width: state.width * sizeFactor * this.zoomRatio,\n                height: state.height * sizeFactor * this.zoomRatio\n            };\n\n            this._showCropper(cropperData);\n\n            if (this.focalPoint) {\n                sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Switch out of crop mode.\n     */\n    disableCropMode: function() {\n        var viewportProperties = {};\n\n        this._hideCropper();\n        var imageDimensions = this.getScaledImageDimensions();\n        var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n        var inverseZoomFactor = targetZoom / this.zoomRatio;\n        this.zoomRatio = targetZoom;\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var offsetX = this.clipper.left - this.image.left;\n        var offsetY = this.clipper.top - this.image.top;\n\n        var imageOffsetX = offsetX * inverseZoomFactor;\n        var imageOffsetY = offsetY * inverseZoomFactor;\n        imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n        imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n        // Calculate the cropper dimensions after all the zooming\n        viewportProperties.height = this.clipper.height * inverseZoomFactor;\n        viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n        if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n            if (this.focalPoint) {\n                this.toggleFocalPoint();\n            }\n\n            this._resetFocalPointPosition();\n        }\n\n        var callback = () => {\n            // Reposition focal point correctly\n            if (this.focalPoint) {\n                var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Transition between cropping end editor modes\n     *\n     * @param callback\n     * @param imageProperties\n     * @param viewportProperties\n     * @private\n     */\n    _editorModeTransition: function(callback, imageProperties, viewportProperties) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            // Without this it looks semi-broken during animation\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n                this.renderImage();\n            }\n\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    callback();\n                    this.animationInProgress = false;\n                    this.renderImage();\n                },\n            });\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration\n            });\n        }\n    },\n\n    _showSpinner: function() {\n        this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n        var canvas = document.getElementById('spinner-canvas');\n        var context = canvas.getContext('2d');\n        var start = new Date();\n        var lines = 16,\n            cW = context.canvas.width,\n            cH = context.canvas.height;\n\n        var draw = function() {\n            var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n            context.save();\n            context.clearRect(0, 0, cW, cH);\n            context.translate(cW / 2, cH / 2);\n            context.rotate(Math.PI * 2 * rotation);\n            for (var i = 0; i < lines; i++) {\n                context.beginPath();\n                context.rotate(Math.PI * 2 / lines);\n                context.moveTo(cW / 10, 0);\n                context.lineTo(cW / 4, 0);\n                context.lineWidth = cW / 30;\n                context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                context.stroke();\n            }\n            context.restore();\n        };\n        this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n    },\n\n    _hideSpinner: function() {\n        window.clearInterval(this.spinnerInterval);\n        this.$spinnerCanvas.remove();\n        this.$spinnerCanvas = null;\n    },\n\n    /**\n     * Show the cropper.\n     *\n     * @param clipperData\n     */\n    _showCropper: function(clipperData) {\n        this._setupCropperLayer(clipperData);\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Hide the cropper.\n     */\n    _hideCropper: function() {\n        if (this.clipper) {\n            this.croppingCanvas.remove(this.clipper);\n            this.croppingCanvas.remove(this.croppingShade);\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n\n            this.croppingCanvas = null;\n            this.renderCropper = null;\n        }\n    },\n\n    /**\n     * Draw the cropper.\n     *\n     * @param clipperData\n     */\n    _setupCropperLayer: function(clipperData) {\n        // Set up the canvas for cropper\n        this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n            backgroundColor: 'rgba(0,0,0,0)',\n            hoverCursor: 'default',\n            selection: false\n        });\n\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        this.renderCropper = () => Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n\n        $('#cropping-canvas', this.$editorContainer).css({\n            position: 'absolute',\n            top: 0,\n            left: 0\n        });\n\n        this.croppingShade = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: this.editorWidth,\n            height: this.editorHeight,\n            fill: 'rgba(0,0,0,0.7)'\n        });\n\n        // Calculate the cropping rectangle size\n        var imageDimensions = this.getScaledImageDimensions();\n        var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n        var rectWidth = imageDimensions.width / rectangleRatio;\n        var rectHeight = imageDimensions.height / rectangleRatio;\n\n        if (this.hasOrientationChanged()) {\n            var temp = rectHeight;\n            rectHeight = rectWidth;\n            rectWidth = temp;\n        }\n\n        // Set up the cropping viewport rectangle\n        this.clipper = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: rectWidth,\n            height: rectHeight,\n            stroke: 'black',\n            fill: 'rgba(128,0,0,1)',\n            strokeWidth: 0\n        });\n\n        // Set from clipper data\n        if (clipperData) {\n            this.clipper.set(clipperData);\n        }\n\n        this.clipper.globalCompositeOperation = 'destination-out';\n        this.croppingCanvas.add(this.croppingShade);\n        this.croppingCanvas.add(this.clipper);\n    },\n\n    /**\n     * Redraw the cropper boundaries\n     */\n    _redrawCropperElements: function() {\n        if (typeof this._redrawCropperElements._ === 'undefined') {\n            this._redrawCropperElements._ = {};\n        }\n\n        if (this.cropperHandles) {\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n        }\n        this._redrawCropperElements._.lineOptions = {\n            strokeWidth: 4,\n            stroke: 'rgb(255,255,255)',\n            fill: false\n        };\n\n        this._redrawCropperElements._.gridOptions = {\n            strokeWidth: 2,\n            stroke: 'rgba(255,255,255,0.5)'\n        };\n\n        // Draw the handles\n        this._redrawCropperElements._.pathGroup = [\n            new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n        ];\n\n        this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n            left: this.clipper.left,\n            top: this.clipper.top,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        // Don't forget the rectangle\n        this.croppingRectangle = new fabric.Rect({\n            left: this.clipper.left,\n            top: this.clipper.top,\n            width: this.clipper.width,\n            height: this.clipper.height,\n            fill: 'rgba(0,0,0,0)',\n            stroke: 'rgba(255,255,255,0.8)',\n            strokeWidth: 2,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        this.cropperGrid = new fabric.Group(\n            [\n                new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n            ], {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n        this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n        this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n        if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n            this._redrawCropperElements._.cropTextTop -= 24;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n        }\n\n        this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n            left: this.croppingRectangle.left,\n            top: this._redrawCropperElements._.cropTextTop,\n            fontSize: 13,\n            fill: 'rgb(200,200,200)',\n            backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n            font: 'Craft',\n            width: 70,\n            height: 15,\n            originX: 'center',\n            originY: 'center',\n            textAlign: 'center'\n        });\n\n        this.croppingCanvas.add(this.cropperHandles);\n        this.croppingCanvas.add(this.cropperGrid);\n        this.croppingCanvas.add(this.croppingRectangle);\n        this.croppingCanvas.add(this.croppingAreaText);\n    },\n\n    /**\n     * Reposition the cropper when the image editor dimensions change.\n     *\n     * @param previousImageArea\n     */\n    _repositionCropper: function(previousImageArea) {\n        if (!this.croppingCanvas) {\n            return;\n        }\n\n        // Get the current clipper offset relative to center\n        var currentOffset = {\n            x: this.clipper.left - this.croppingCanvas.width / 2,\n            y: this.clipper.top - this.croppingCanvas.height / 2\n        };\n\n        // Resize the cropping canvas\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        // Check by what factor will the new final bounding box be different\n        var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n        var areaFactor = currentArea.width / previousImageArea.width;\n\n        // Adjust the cropper size to scale along with the bounding box\n        this.clipper.width = Math.round(this.clipper.width * areaFactor);\n        this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n        // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n        // for editor size changes and then multiply by the size factor to adjust for image size changes\n        this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n        this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n        // Resize the cropping shade\n        this.croppingShade.set({\n            width: this.editorWidth,\n            height: this.editorHeight,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        });\n\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Get the dimensions of a bounding rectangle by a set of four coordinates.\n     *\n     * @param coordinateSet\n     */\n    _getBoundingRectangle: function(coordinateSet) {\n        return {\n            width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n            height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n        };\n    },\n\n    /**\n     * Handle the mouse being clicked.\n     *\n     * @param ev\n     */\n    _handleMouseDown: function(ev) {\n        // Focal before resize before dragging\n        var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n        var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n        var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n        if (handle || move || focal) {\n            this.previousMouseX = ev.pageX;\n            this.previousMouseY = ev.pageY;\n\n            if (focal) {\n                this.draggingFocal = true;\n            } else if (handle) {\n                this.scalingCropper = handle;\n            } else if (move) {\n                this.draggingCropper = true;\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse being moved.\n     *\n     * @param ev\n     */\n    _handleMouseMove: function(ev) {\n        if (this.mouseMoveEvent !== null) {\n            Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n        }\n        this.mouseMoveEvent = ev;\n    },\n\n    _handleMouseMoveInternal: function() {\n        if (this.mouseMoveEvent === null) {\n            return;\n        }\n\n        if (this.focalPoint && this.draggingFocal) {\n            this._handleFocalDrag(this.mouseMoveEvent);\n            this.storeFocalPointState();\n            this.renderImage();\n        } else if (this.draggingCropper || this.scalingCropper) {\n            if (this.draggingCropper) {\n                this._handleCropperDrag(this.mouseMoveEvent);\n            } else {\n                this._handleCropperResize(this.mouseMoveEvent);\n            }\n\n            this._redrawCropperElements();\n\n            this.storeCropperState();\n            this.renderCropper();\n        } else {\n            this._setMouseCursor(this.mouseMoveEvent);\n        }\n\n        this.previousMouseX = this.mouseMoveEvent.pageX;\n        this.previousMouseY = this.mouseMoveEvent.pageY;\n\n        this.mouseMoveEvent = null;\n    },\n\n    /**\n     * Handle mouse being released.\n     *\n     * @param ev\n     */\n    _handleMouseUp: function(ev) {\n        this.draggingCropper = false;\n        this.scalingCropper = false;\n        this.draggingFocal = false;\n    },\n\n    /**\n     * Handle mouse out\n     *\n     * @param ev\n     */\n    _handleMouseOut: function(ev) {\n        this._handleMouseUp(ev);\n        this.mouseMoveEvent = ev;\n        this._handleMouseMoveInternal();\n    },\n\n    /**\n     * Handle cropper being dragged.\n     *\n     * @param ev\n     */\n    _handleCropperDrag: function(ev) {\n        if (typeof this._handleCropperDrag._ === 'undefined') {\n            this._handleCropperDrag._ = {};\n        }\n\n        this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n            return false;\n        }\n\n        this._handleCropperDrag._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n        // If this would drag it outside of the image\n        if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n            // Try to find the furthest point in the same general direction where we can drag it\n\n            // Delta iterator setup\n            this._handleCropperDrag._.dxi = 0;\n            this._handleCropperDrag._.dyi = 0;\n            this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n            this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n            // The furthest we can move\n            this._handleCropperDrag._.furthest = 0;\n            this._handleCropperDrag._.furthestDeltas = {};\n\n            // Loop through every combination of dragging it not so far\n            for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                    this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                    if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                        if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                            this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                            this._handleCropperDrag._.furthestDeltas = {\n                                x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                            }\n                        }\n                    }\n                }\n            }\n\n            // REALLY can't drag along the cursor movement\n            if (this._handleCropperDrag._.furthest == 0) {\n                return;\n            } else {\n                this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n            }\n        }\n\n        this.clipper.set({\n            left: this.clipper.left + this._handleCropperDrag._.deltaX,\n            top: this.clipper.top + this._handleCropperDrag._.deltaY\n        });\n    },\n\n    /**\n     * Handle focal point being dragged.\n     *\n     * @param ev\n     */\n    _handleFocalDrag: function(ev) {\n        if (typeof this._handleFocalDrag._ === 'undefined') {\n            this._handleFocalDrag._ = {};\n        }\n\n        if (this.focalPoint) {\n            this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                return;\n            }\n\n            this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n            this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n            // Just make sure that the focal point stays inside the image\n            if (this.currentView === 'crop') {\n                if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                    return;\n                }\n            } else {\n                if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                    && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                    return;\n                }\n            }\n\n            this.focalPoint.set({\n                left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n            });\n        }\n    },\n\n    /**\n     * Set the cropping constraint\n     * @param constraint\n     */\n    setCroppingConstraint: function(constraint) {\n        // In case this caused the sidebar width to change.\n        this.updateSizeAndPosition();\n\n        switch (constraint) {\n            case 'none':\n                this.croppingConstraint = false;\n                break;\n\n            case 'original':\n                this.croppingConstraint = this.originalWidth / this.originalHeight;\n                break;\n\n            case 'current':\n                this.croppingConstraint = this.clipper.width / this.clipper.height;\n                break;\n\n            case 'custom':\n\n                break;\n            default:\n                this.croppingConstraint = parseFloat(constraint);\n\n                break;\n        }\n    },\n\n    /**\n     * Enforce the cropping constraint\n     */\n    enforceCroppingConstraint: function() {\n        if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n            this.enforceCroppingConstraint._ = {};\n        }\n\n        if (this.animationInProgress || !this.croppingConstraint) {\n            return;\n        }\n\n        this.animationInProgress = true;\n\n        // Mock the clipping rectangle for collision tests\n        this.enforceCroppingConstraint._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        // If wider than it should be\n        if (this.clipper.width > this.clipper.height * this.croppingConstraint) {\n            this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n            // Make it taller!\n            this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n            // Getting really awkward having to convert between 0;0 being center or top-left corner.\n            this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n            // If the clipper would end up out of bounds, make it narrower instead.\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n            }\n        } else {\n            // Follow the same pattern, if taller than it should be.\n            this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n            this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n            this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n            }\n        }\n\n        this.enforceCroppingConstraint._.properties = {\n            height: this.enforceCroppingConstraint._.rectangle.height,\n            width: this.enforceCroppingConstraint._.rectangle.width\n        };\n\n        // Make sure to redraw cropper handles and gridlines when resizing\n        this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n            onChange: () => {\n                this._redrawCropperElements();\n                this.croppingCanvas.renderAll();\n            },\n            duration: this.settings.animationDuration,\n            onComplete: () => {\n                this._redrawCropperElements();\n                this.animationInProgress = false;\n                this.renderCropper();\n                this.storeCropperState();\n            },\n        });\n    },\n\n    /**\n     * Handle cropper being resized.\n     *\n     * @param ev\n     */\n    _handleCropperResize: function(ev) {\n        if (typeof this._handleCropperResize._ === 'undefined') {\n            this._handleCropperResize._ = {};\n        }\n\n        // Size deltas\n        this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n            this._handleCropperResize._.deltaX = 0;\n        }\n\n        if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n            this._handleCropperResize._.deltaY = 0;\n        }\n\n        if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n            return;\n        }\n\n        // Translate from center-center origin to absolute coords\n        this._handleCropperResize._.startingRectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        }\n\n        this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n        if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n            return;\n        }\n\n        if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n            return;\n        }\n\n        // Translate back to center-center origin.\n        this.clipper.set({\n            top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n            left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n            width: this._handleCropperResize._.rectangle.width,\n            height: this._handleCropperResize._.rectangle.height\n        });\n\n        this._redrawCropperElements();\n    },\n\n    _calculateNewCropperSizeByDeltas: function(startingRectangle, deltaX, deltaY, cropperDirection) {\n        if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n            this._calculateNewCropperSizeByDeltas._ = {};\n        }\n\n        // Center deltas\n        this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n        this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n        this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n        this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n        this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n        // Lock the aspect ratio if needed\n        if (this.croppingConstraint) {\n            this._calculateNewCropperSizeByDeltas._.change = 0;\n\n            // Take into account the mouse direction and figure out the \"real\" change in cropper size\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'br':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n\n            if (this.croppingConstraint > 1) {\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n            } else {\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n            // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n        } else {\n            // Lock the aspect ratio\n            if (this.shiftKeyHeld &&\n                (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                    cropperDirection === 'bl' || cropperDirection === 'br')\n            ) {\n                this._calculateNewCropperSizeByDeltas._.ratio;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                }\n            }\n\n            if (cropperDirection.match(/t/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/b/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/r/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n            if (cropperDirection.match(/l/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n        }\n\n        this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n        this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n        this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n        this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n        return this._calculateNewCropperSizeByDeltas._.rectangle;\n    },\n\n    /**\n     * Set mouse cursor by it's position over cropper.\n     *\n     * @param ev\n     */\n    _setMouseCursor: function(ev) {\n        if (typeof this._setMouseCursor._ === 'undefined') {\n            this._setMouseCursor._ = {};\n        }\n\n        if (Garnish.isMobileBrowser(true)) {\n            return;\n        }\n        this._setMouseCursor._.cursor = 'default';\n        this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n        if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n            this._setMouseCursor._.cursor = 'pointer';\n        } else if (this._setMouseCursor._.handle) {\n            if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                this._setMouseCursor._.cursor = 'ns-resize';\n            } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                this._setMouseCursor._.cursor = 'ew-resize';\n            } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                this._setMouseCursor._.cursor = 'nwse-resize';\n            } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                this._setMouseCursor._.cursor = 'nesw-resize';\n            }\n        } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n            this._setMouseCursor._.cursor = 'move';\n        }\n\n        $('.body').css('cursor', this._setMouseCursor._.cursor);\n    },\n\n    /**\n     * Test whether the mouse cursor is on any cropper handles.\n     *\n     * @param ev\n     */\n    _cropperHandleHitTest: function(ev) {\n        if (typeof this._cropperHandleHitTest._ === 'undefined') {\n            this._cropperHandleHitTest._ = {};\n        }\n\n        this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n        this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n        this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n        this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n        this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n        this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n        // Left side top/bottom\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tl';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'bl';\n            }\n        }\n        // Right side top/bottom\n        if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tr';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'br';\n            }\n        }\n\n        // Left or right\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'l';\n        }\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'r';\n        }\n\n        // Top or bottom\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 't';\n        }\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 'b';\n        }\n\n        return false;\n    },\n\n    /**\n     * Test whether the mouse cursor is on a fabricJS object.\n     *\n     * @param object\n     * @param event\n     *\n     * @return boolean\n     */\n\n    _isMouseOver: function(event, object) {\n        if (typeof this._isMouseOver._ === 'undefined') {\n            this._isMouseOver._ = {};\n        }\n\n        this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n        this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n        this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._isMouseOver._.lb = object.left - object.width / 2;\n        this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n        this._isMouseOver._.tb = object.top - object.height / 2;\n        this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n        return (\n            this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n            this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n            this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n            this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n        );\n    },\n\n    /**\n     * Get vertices of a rectangle defined by left,top,height and width properties.\n     * Optionally it's possible to provide offsetX and offsetY values.\n     * Left and top properties of rectangle reference the top-left corner.\n     *\n     * @param rectangle\n     * @param [offsetX]\n     * @param [offsetY]\n     */\n    _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n        if (typeof this._getRectangleVertices._ === 'undefined') {\n            this._getRectangleVertices._ = {};\n        }\n\n        if (typeof offsetX === 'undefined') {\n            offsetX = 0;\n        }\n        if (typeof offsetY === 'undefined') {\n            offsetY = 0;\n        }\n\n        this._getRectangleVertices._.topLeft = {\n            x: rectangle.left + offsetX,\n            y: rectangle.top + offsetY\n        };\n\n        this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n        this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n        this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n        return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n    },\n\n    /**\n     * Set image vertice coordinates for an image that's been zoomed to fit.\n     */\n    _setFittedImageVerticeCoordinates: function() {\n        this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n    },\n\n    /**\n     * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n     * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n     *\n     * @param zoomMode\n     */\n    getImageVerticeCoords: function(zoomMode) {\n        var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n        var imageDimensions = this.getScaledImageDimensions();\n\n        var ratio;\n\n        if (typeof zoomMode === \"number\") {\n            ratio = zoomMode;\n        } else if (zoomMode === \"cover\") {\n            ratio = this.getZoomToCoverRatio(imageDimensions);\n        } else {\n            ratio = this.getZoomToFitRatio(imageDimensions);\n        }\n\n        // Get the dimensions of the scaled image\n        var scaledHeight = imageDimensions.height * ratio;\n        var scaledWidth = imageDimensions.width * ratio;\n\n        // Calculate the segments of the containing box for the image.\n        // When referring to top/bottom or right/left segments, these are on the\n        // right-side and bottom projection of the containing box for the zoomed out image.\n        var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n        var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n        var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n        var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n        // Calculate the offsets from editor box for the image-containing box\n        var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n        var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n        // Finally, calculate the image vertice coordinates\n        return {\n            a: {\n                x: horizontalOffset + rightHorizontalSegment,\n                y: verticalOffset\n            },\n            b: {\n                x: this.editorWidth - horizontalOffset,\n                y: verticalOffset + topVerticalSegment\n            },\n            c: {\n                x: horizontalOffset + leftHorizontalSegment,\n                y: this.editorHeight - verticalOffset\n            },\n            d: {\n                x: horizontalOffset,\n                y: verticalOffset + bottomVerticalSegment\n            }\n        };\n    },\n\n    /**\n     * Debug stuff by continuously rendering a fabric object on canvas.\n     *\n     * @param fabricObj\n     */\n    _debug: function(fabricObj) {\n        this.canvas.remove(this.debugger);\n        this.debugger = fabricObj;\n        this.canvas.add(this.debugger);\n    },\n\n    /**\n     * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n     * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n     * return true if the point is in the rectangle.\n     *\n     * Adapted from: http://stackoverflow.com/a/2763387/2040791\n     *\n     * @param points\n     * @param rectangle\n     */\n    arePointsInsideRectangle: function(points, rectangle) {\n        if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n            this.arePointsInsideRectangle._ = {};\n        }\n\n        // Pre-calculate the vectors and scalar products for two rectangle edges\n        this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n        this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n        this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n        this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n        for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n            this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n            // Calculate the vectors for two rectangle sides and for\n            // the vector from vertices a and b to the point P\n            this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n            this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n            // Calculate scalar or dot products for some vector combinations\n            this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n            this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n            this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n            this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n            if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    /**\n     * Returns an object representing the vector between points a and b.\n     *\n     * @param a\n     * @param b\n     */\n    _getVector: function(a, b) {\n        return {x: b.x - a.x, y: b.y - a.y};\n    },\n\n    /**\n     * Returns the scalar product of two vectors\n     *\n     * @param a\n     * @param b\n     */\n    _getScalarProduct: function(a, b) {\n        return a.x * b.x + a.y * b.y;\n    },\n\n    /**\n     * Returns the magnitude of a vector_redrawCropperElements\n     * .\n     *\n     * @param vector\n     */\n    _getVectorMagnitude: function(vector) {\n        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    },\n\n    /**\n     * Returns the angle between two vectors in degrees with two decimal points\n     *\n     * @param a\n     * @param b\n     */\n    _getAngleBetweenVectors: function(a, b) {\n        return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n    },\n\n    /**\n     * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n     *\n     * @param rectangle\n     * @param vertex\n     *\n     * @returns {*}\n     */\n    _getEdgeCrossed: function(rectangle, vertex) {\n        // Determine over which edge the vertex is\n        var edgePoints = [\n            [rectangle.a, rectangle.b],\n            [rectangle.b, rectangle.c],\n            [rectangle.c, rectangle.d],\n            [rectangle.d, rectangle.a]\n        ];\n\n        var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n        var smallestDiff = 180;\n        var edgeCrossed = null;\n\n        // Test each edge\n        for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n            var edge = edgePoints[edgeIndex];\n            var toCenter = this._getVector(edge[0], centerPoint);\n            var edgeVector = this._getVector(edge[0], edge[1]);\n            var toVertex = this._getVector(edge[0], vertex);\n\n            // If the angle between toCenter/toVertex is the sum of\n            // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n            // the edgeVector is between the other two meaning that this is the offending vertex.\n            // To avoid the rounding errors, we'll take the closest match\n            var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n            if (diff < smallestDiff) {\n                smallestDiff = diff;\n                edgeCrossed = edge;\n            }\n        }\n\n        return edgeCrossed;\n    },\n\n    /**\n     * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n     *\n     * @param dimensions\n     */\n    _getImageBoundingBox: function(dimensions) {\n        var box = {};\n\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        var proportion = dimensions.height / dimensions.width;\n        box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n        box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n        if (this.hasOrientationChanged()) {\n            var temp = box.width;\n            box.width = box.height;\n            box.height = temp;\n        }\n\n        return box;\n    }\n}, {\n    defaults: {\n        animationDuration: 100,\n        allowSavingAsNew: true,\n        onSave: $.noop,\n        allowDegreeFractions: null,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend({\n    $includeSubfoldersContainer: null,\n    $includeSubfoldersCheckbox: null,\n    showingIncludeSubfoldersCheckbox: false,\n\n    $uploadButton: null,\n    $uploadInput: null,\n    $progressBar: null,\n    $folders: null,\n\n    uploader: null,\n    promptHandler: null,\n    progressBar: null,\n\n    _uploadTotalFiles: 0,\n    _uploadFileProgress: {},\n    _uploadedAssetIds: [],\n    _currentUploaderSettings: {},\n\n    _assetDrag: null,\n    _folderDrag: null,\n    _expandDropTargetFolderTimeout: null,\n    _tempExpandedFolders: [],\n\n    _fileConflictTemplate: {\n        choices: [\n            {value: 'keepBoth', title: Craft.t('app', 'Keep both')}, {value: 'replace', title: Craft.t('app', 'Replace it')}\n        ]\n    },\n    _folderConflictTemplate: {\n        choices: [\n            {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')}, {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n        ]\n    },\n\n    init: function(elementType, $container, settings) {\n        this.base(elementType, $container, settings);\n\n        if (this.settings.context === 'index') {\n            if (!this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n        } else {\n            this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n            if (this.settings.modal) {\n                this.settings.modal.on('updateSizeAndPosition', this._positionProgressBar.bind(this));\n            }\n        }\n    },\n\n    initSources: function() {\n        if (this.settings.context === 'index' && !this._folderDrag) {\n            this._initIndexPageMode();\n        }\n\n        return this.base();\n    },\n\n    initSource: function($source) {\n        this.base($source);\n\n        this._createFolderContextMenu($source);\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                if ($source.data('folder-id')) {\n                    this._folderDrag.addItems($source.parent());\n                }\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    deinitSource: function($source) {\n        this.base($source);\n\n        // Does this source have a context menu?\n        var contextMenu = $source.data('contextmenu');\n\n        if (contextMenu) {\n            contextMenu.destroy();\n        }\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                this._folderDrag.removeItems($source.parent());\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    _getSourceLevel: function($source) {\n        return $source.parentsUntil('nav', 'ul').length;\n    },\n\n    /**\n     * Initialize the index page-specific features\n     */\n    _initIndexPageMode: function() {\n        if (this._folderDrag) {\n            return;\n        }\n\n        // Make the elements selectable\n        this.settings.selectable = true;\n        this.settings.multiSelect = true;\n\n        // Asset dragging\n        // ---------------------------------------------------------------------\n\n        this._assetDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n            filter: () => this.view.getSelectedElements().has('div.element[data-movable]'),\n            helper: $file => this._getFileDragHelper($file),\n            dropTargets: () => {\n                // Which data attribute should we be checking?\n                var attr;\n                if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                    attr = 'data-can-move-peer-files-to';\n                } else {\n                    attr = 'data-can-move-to';\n                }\n\n                var targets = [];\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder\n                    var $source = this.$sources.eq(i);\n                    if (Garnish.hasAttr($source, attr)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFileDragStop.bind(this),\n            helperBaseZindex: 800\n        });\n\n        // Folder dragging\n        // ---------------------------------------------------------------------\n\n        this._folderDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: () => {\n                // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                var $selected = this.sourceSelect.getSelectedItems(),\n                    draggees = [];\n\n                for (var i = 0; i < $selected.length; i++) {\n                    var $source = $selected.eq(i);\n\n                    if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                        continue;\n                    }\n\n                    if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                        draggees.push($source.parent()[0]);\n                    }\n                }\n\n                return $(draggees);\n            },\n\n            helper: $draggeeHelper => {\n                var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                    $helperNav = $('<nav/>').appendTo($helperSidebar),\n                    $helperUl = $('<ul/>').appendTo($helperNav);\n\n                $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                $draggeeHelper.children('a').addClass('sel');\n\n                // Match the style\n                $draggeeHelper.css({\n                    'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                    'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                    'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                    'padding-left': this._folderDrag.$draggee.css('padding-left')\n                });\n\n                return $helperSidebar;\n            },\n\n            dropTargets: () => {\n                var targets = [];\n\n                // Tag the dragged folder and it's subfolders\n                var draggedSourceIds = [];\n                this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                    draggedSourceIds.push($(this).data('key'));\n                });\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder and not one of the dragged folders\n                    var $source = this.$sources.eq(i),\n                        key = $source.data('key');\n\n                    if (!this._getFolderUidFromSourceKey(key)) {\n                        continue;\n                    }\n\n                    if (!Craft.inArray(key, draggedSourceIds)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFolderDragStop.bind(this),\n        });\n    },\n\n    /**\n     * On file drag stop\n     */\n    _onFileDragStop: function() {\n        if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n            // Keep it selected\n            var originatingSource = this.$source;\n\n            var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                originalAssetIds = [];\n\n            // For each file, prepare array data.\n            for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                originalAssetIds.push(originalAssetId);\n            }\n\n            // Are any files actually getting moved?\n            if (originalAssetIds.length) {\n                this.setIndexBusy();\n\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(originalAssetIds.length);\n                this.progressBar.showProgressBar();\n\n                // For each file to move a separate request\n                var parameterArray = [];\n                for (i = 0; i < originalAssetIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: {\n                            assetId: originalAssetIds[i],\n                            folderId: targetFolderId\n                        }\n                    });\n                }\n\n                // Define the callback for when all file moves are complete\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var response = responseArray[i];\n\n                        // Push prompt into prompt array\n                        if (response.conflict) {\n                            this.promptHandler.addPrompt({\n                                assetId: response.assetId,\n                                suggestedFilename: response.suggestedFilename,\n                                prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                            });\n                        }\n\n                        if (response.error) {\n                            alert(response.error);\n                        }\n                    }\n\n                    this.setIndexAvailable();\n                    this.progressBar.hideProgressBar();\n                    var reloadIndex = false;\n\n                    var performAfterMoveActions = function() {\n                        // Select original source\n                        this.sourceSelect.selectItem(originatingSource);\n\n                        // Make sure we use the correct offset when fetching the next page\n                        this._totalVisible -= this._assetDrag.$draggee.length;\n\n                        // And remove the elements that have been moved away\n                        for (var i = 0; i < originalAssetIds.length; i++) {\n                            $('[data-id=' + originalAssetIds[i] + ']').remove();\n                        }\n\n                        this.view.deselectAllElements();\n                        this._collapseExtraExpandedFolders(targetFolderId);\n\n                        if (reloadIndex) {\n                            this.updateElements();\n                        }\n                    };\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            var newParameterArray = [];\n\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    reloadIndex = true;\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'keepBoth') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            filename: returnData[i].suggestedFilename\n                                        }\n                                    });\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            force: true\n                                        }\n                                    });\n                                }\n                            }\n\n                            // Nothing to do, carry on\n                            if (newParameterArray.length === 0) {\n                                performAfterMoveActions.apply(this);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                // Move conflicting files again with resolutions now\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this._assetDrag.fadeOutHelpers();\n                        this.promptHandler.showBatchPrompts(promptCallback);\n                    } else {\n                        performAfterMoveActions.apply(this);\n                        this._assetDrag.fadeOutHelpers();\n                    }\n                };\n\n                // Initiate the file move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._assetDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * On folder drag stop\n     */\n    _onFolderDragStop: function() {\n        // Only move if we have a valid target and we're not trying to move into our direct parent\n        if (\n            this._folderDrag.$activeDropTarget &&\n            this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n        ) {\n            var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n            this._collapseExtraExpandedFolders(targetFolderId);\n\n            // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n            var folderIds = [];\n\n            for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                    folderId = $a.data('folder-id');\n\n                // Make sure it's not already in the target folder and use this single folder Id.\n                if (folderId != targetFolderId) {\n                    folderIds.push(folderId);\n                    break;\n                }\n            }\n\n            if (folderIds.length) {\n                folderIds.sort();\n                folderIds.reverse();\n\n                this.setIndexBusy();\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(folderIds.length);\n                this.progressBar.showProgressBar();\n\n                var parameterArray = [];\n\n                for (i = 0; i < folderIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-folder',\n                        params: {\n                            folderId: folderIds[i],\n                            parentId: targetFolderId\n                        }\n                    });\n                }\n\n                // Increment, so to avoid displaying folder files that are being moved\n                this.requestId++;\n\n                /*\n                 Here's the rundown:\n                 1) Send all the folders being moved\n                 2) Get results:\n                 a) For all conflicting, receive prompts and resolve them to get:\n                 b) For all valid move operations: by now server has created the needed folders\n                 in target destination. Server returns an array of file move operations\n                 c) server also returns a list of all the folder id changes\n                 d) and the data-id of node to be removed, in case of conflict\n                 e) and a list of folders to delete after the move\n                 3) From data in 2) build a large file move operation array\n                 4) Create a request loop based on this, so we can display progress bar\n                 5) when done, delete all the folders and perform other maintenance\n                 6) Champagne\n                 */\n\n                // This will hold the final list of files to move\n                var fileMoveList = [];\n\n                var newSourceKey = '';\n\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var data = responseArray[i];\n\n                        // If successful and have data, then update\n                        if (data.success) {\n                            if (data.transferList) {\n                                fileMoveList = data.transferList;\n                            }\n\n                            if (data.newFolderId) {\n                                newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                            }\n                        }\n\n                        // Push prompt into prompt array\n                        if (data.conflict) {\n                            data.prompt = {\n                                message: data.conflict,\n                                choices: this._folderConflictTemplate.choices\n                            };\n\n                            this.promptHandler.addPrompt(data);\n                        }\n\n                        if (data.error) {\n                            alert(data.error);\n                        }\n                    }\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            this.promptHandler.resetPrompts();\n\n                            var newParameterArray = [];\n\n                            var params = {};\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    params.force = true;\n                                }\n\n                                if (returnData[i].choice === 'merge') {\n                                    params.merge = true;\n                                }\n\n                                params.folderId = data.folderId;\n                                params.parentId = data.parentId;\n\n                                newParameterArray.push({\n                                    action: 'assets/move-folder',\n                                    params: params\n                                });\n                            }\n\n                            // Start working on them lists, baby\n                            if (newParameterArray.length === 0) {\n                                this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this.promptHandler.showBatchPrompts(promptCallback);\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                    } else {\n                        this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                    }\n                };\n\n                // Initiate the folder move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees until we get the Ajax response\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._folderDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * Really move the folder. Like really. For real.\n     */\n    _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n        this.progressBar.setItemCount(1);\n        this.progressBar.showProgressBar();\n\n        var moveCallback = folderDeleteList => {\n            // Delete the old folders\n            var counter = 0;\n            var limit = folderDeleteList.length;\n            for (var i = 0; i < folderDeleteList.length; i++) {\n                // When all folders are deleted, reload the sources.\n                Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, () => {\n                    if (++counter === limit) {\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        this._folderDrag.returnHelpersToDraggees();\n                        this.setInstanceState('selectedSource', newSourceKey);\n                        this.refreshSources();\n                    }\n                });\n            }\n        };\n\n        if (fileMoveList.length > 0) {\n            var parameterArray = [];\n\n            for (var i = 0; i < fileMoveList.length; i++) {\n                parameterArray.push({\n                    action: 'assets/move-asset',\n                    params: fileMoveList[i]\n                });\n            }\n            this._performBatchRequests(parameterArray, function() {\n                moveCallback(folderDeleteList);\n            });\n        } else {\n            moveCallback(folderDeleteList);\n        }\n    },\n\n    /**\n     * Returns the root level source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getRootSource: function($source) {\n        var $parent;\n        while (($parent = this._getParentSource($source)) && $parent.length) {\n            $source = $parent;\n        }\n        return $source;\n    },\n\n    /**\n     * Get parent source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getParentSource: function($source) {\n        if (this._getSourceLevel($source) > 1) {\n            return $source.parent().parent().siblings('a');\n        }\n    },\n\n    _selectSourceByFolderId: function(targetFolderId) {\n        var $targetSource = this._getSourceByKey(targetFolderId);\n\n        // Make sure that all the parent sources are expanded and this source is visible.\n        var $parentSources = $targetSource.parent().parents('li');\n\n        for (var i = 0; i < $parentSources.length; i++) {\n            var $parentSource = $($parentSources[i]);\n\n            if (!$parentSource.hasClass('expanded')) {\n                $parentSource.children('.toggle').trigger('click');\n            }\n        }\n\n        this.selectSource($targetSource);\n        this.updateElements();\n    },\n\n    /**\n     * Initialize the uploader.\n     *\n     * @private\n     */\n    afterInit: function() {\n        if (!this.$uploadButton) {\n            this.$uploadButton = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                'data-icon': 'upload',\n                style: 'position: relative; overflow: hidden;',\n                text: Craft.t('app', 'Upload files'),\n            });\n            this.addButton(this.$uploadButton);\n\n            this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n        }\n\n        this.promptHandler = new Craft.PromptHandler();\n        this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            fileInput: this.$uploadInput,\n            dropZone: this.$container\n        };\n\n        options.events = {\n            fileuploadstart: this._onUploadStart.bind(this),\n            fileuploadprogressall: this._onUploadProgress.bind(this),\n            fileuploaddone: this._onUploadComplete.bind(this),\n        };\n\n        if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        this._currentUploaderSettings = options;\n\n        this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n        this.$uploadButton.on('click', () => {\n            if (this.$uploadButton.hasClass('disabled')) {\n                return;\n            }\n            if (!this.isIndexBusy) {\n                this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n            }\n        });\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific volume in the URL?\n        if (this.settings.context === 'index' && typeof defaultVolumeHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n                if ($source.data('volume-handle') === defaultVolumeHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    onSelectSource: function() {\n        var $source = this._getSourceByKey(this.sourceKey);\n        var folderId = $source.data('folder-id');\n\n        if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n            this.uploader.setParams({\n                folderId: this.$source.attr('data-folder-id')\n            });\n            this.$uploadButton.removeClass('disabled');\n        } else {\n            this.$uploadButton.addClass('disabled');\n        }\n\n        // Update the URL if we're on the Assets index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'assets';\n            var $rootSource = this._getRootSource($source);\n            if ($rootSource && $rootSource.data('volume-handle')) {\n                uri += '/' + $rootSource.data('volume-handle');\n            }\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n\n        this.base();\n    },\n\n    _getFolderUidFromSourceKey: function(sourceKey) {\n        var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n        return m ? m[1] : null;\n    },\n\n    startSearching: function() {\n        // Does this source have subfolders?\n        if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n            if (this.$includeSubfoldersContainer === null) {\n                var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                    this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                    this.updateElements();\n                });\n            } else {\n                this.$includeSubfoldersContainer.velocity('stop');\n            }\n\n            var checked = this.getSelectedSourceState('includeSubfolders', false);\n            this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: 0,\n                opacity: 1\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = true;\n        }\n\n        this.base();\n    },\n\n    stopSearching: function() {\n        if (this.showingIncludeSubfoldersCheckbox) {\n            this.$includeSubfoldersContainer.velocity('stop');\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: -25,\n                opacity: 0\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = false;\n        }\n\n        this.base();\n    },\n\n    getViewParams: function() {\n        var data = this.base();\n\n        if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n            data.criteria.includeSubfolders = true;\n        }\n\n        return data;\n    },\n\n    /**\n     * React on upload submit.\n     *\n     * @private\n     */\n    _onUploadStart: function() {\n        this.setIndexBusy();\n\n        // Initial values\n        this._positionProgressBar();\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n\n        this.promptHandler.resetPrompts();\n    },\n\n    /**\n     * Update uploaded byte count.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On Upload Complete.\n     */\n    _onUploadComplete: function(event, data) {\n        var response = data.result;\n        var filename = data.files[0].name;\n\n        var doReload = true;\n\n        if (response.success || response.conflict) {\n            // Add the uploaded file to the selected ones, if appropriate\n            this._uploadedAssetIds.push(response.assetId);\n\n            // If there is a prompt, add it to the queue\n            if (response.conflict) {\n                response.prompt = {\n                    message: Craft.t('app', response.conflict, {file: response.filename}),\n                    choices: this._fileConflictTemplate.choices\n                };\n\n                this.promptHandler.addPrompt(response);\n            }\n\n            Craft.cp.runQueue();\n        } else {\n            if (response.error) {\n                alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n            } else {\n                alert(Craft.t('app', 'Upload failed for {filename}.', {filename}));\n            }\n\n            doReload = false;\n        }\n\n        // For the last file, display prompts, if any. If not - just update the element view.\n        if (this.uploader.isLastUpload()) {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n\n            if (this.promptHandler.getPromptCount()) {\n                this.promptHandler.showBatchPrompts(this._uploadFollowup.bind(this));\n            } else {\n                if (doReload) {\n                    this._updateAfterUpload();\n                }\n            }\n        }\n    },\n\n    /**\n     * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n     *\n     * @private\n     */\n    _updateAfterUpload: function() {\n        if (this.settings.context !== 'index') {\n            this.setSortAttribute('dateModified');\n            this.setSortDirection('desc');\n        }\n        this.updateElements();\n    },\n\n    /**\n     * Follow up to an upload that triggered at least one conflict resolution prompt.\n     *\n     * @param returnData\n     * @private\n     */\n    _uploadFollowup: function(returnData) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n\n        this.promptHandler.resetPrompts();\n\n        var finalCallback = () => {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n            this._updateAfterUpload();\n        };\n\n        this.progressBar.setItemCount(returnData.length);\n\n        var doFollowup = (parameterArray, parameterIndex, callback) => {\n            var postData = {};\n            var action = null;\n\n            var followupCallback = (data, textStatus) => {\n                if (textStatus === 'success' && data.assetId) {\n                    this._uploadedAssetIds.push(data.assetId);\n                } else if (data.error) {\n                    alert(data.error);\n                }\n                parameterIndex++;\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (parameterIndex === parameterArray.length) {\n                    callback();\n                } else {\n                    doFollowup(parameterArray, parameterIndex, callback);\n                }\n            };\n\n            if (parameterArray[parameterIndex].choice === 'replace') {\n                action = 'assets/replace-file';\n                postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                if (parameterArray[parameterIndex].conflictingAssetId) {\n                    postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                } else {\n                    postData.targetFilename = parameterArray[parameterIndex].filename;\n                }\n            } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                action = 'assets/delete-asset';\n                postData.assetId = parameterArray[parameterIndex].assetId;\n            }\n\n            if (!action) {\n                // We don't really need to do another request, so let's pretend that already happened\n                followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n            } else {\n                Craft.postActionRequest(action, postData, followupCallback);\n            }\n        };\n\n        this.progressBar.showProgressBar();\n        doFollowup(returnData, 0, finalCallback);\n    },\n\n    /**\n     * Perform actions after updating elements\n     * @private\n     */\n    onUpdateElements: function() {\n        this._onUpdateElements(false, this.view.getAllElements());\n        this.view.on('appendElements', ev => {\n            this._onUpdateElements(true, ev.newElements);\n        });\n\n        this.base();\n    },\n\n    /**\n     * Do the after-update initializations\n     * @private\n     */\n    _onUpdateElements: function(append, $newElements) {\n        if (this.settings.context === 'index') {\n            if (!append) {\n                this._assetDrag.removeAllItems();\n            }\n\n            this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n        }\n\n        // See if we have freshly uploaded files to add to selection\n        if (this._uploadedAssetIds.length) {\n            if (this.view.settings.selectable) {\n                for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                    this.view.selectElementById(this._uploadedAssetIds[i]);\n                }\n            }\n\n            // Reset the list.\n            this._uploadedAssetIds = [];\n        }\n\n        this.base(append, $newElements);\n\n        this.removeListener(this.$elements, 'keydown');\n        this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n        this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item).find('.element');\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    _onDragStart: function() {\n        this._tempExpandedFolders = [];\n    },\n\n    /**\n     * Get File Drag Helper\n     */\n    _getFileDragHelper: function($element) {\n        var currentView = this.getSelectedSourceState('mode');\n        var $outerContainer;\n        var $innerContainer;\n\n        switch (currentView) {\n            case 'table': {\n                $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                var $tbody = $('<tbody/>').appendTo($table);\n\n                $element.appendTo($tbody);\n\n                // Copy the column widths\n                this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                var $helperCells = $element.children();\n\n                for (var i = 0; i < $helperCells.length; i++) {\n                    // Hard-set the cell widths\n                    var $helperCell = $($helperCells[i]);\n\n                    // Skip the checkbox cell\n                    if ($helperCell.hasClass('checkbox-cell')) {\n                        $helperCell.remove();\n                        $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                        continue;\n                    }\n\n                    var $firstRowCell = $(this._$firstRowCells[i]),\n                        width = $firstRowCell.width();\n\n                    $firstRowCell.width(width);\n                    $helperCell.width(width);\n                }\n\n                return $outerContainer;\n            }\n            case 'thumbs': {\n                $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                $element.appendTo($innerContainer);\n\n                return $outerContainer;\n            }\n        }\n\n        return $();\n    },\n\n    /**\n     * On Drop Target Change\n     */\n    _onDropTargetChange: function($dropTarget) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        if ($dropTarget) {\n            var folderId = $dropTarget.data('folder-id');\n\n            if (folderId) {\n                this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                    this._expandDropTargetFolderTimeout = setTimeout(this._expandFolder.bind(this), 500);\n                }\n            } else {\n                this.dropTargetFolder = null;\n            }\n        }\n\n        if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n            // Temporarily remove the .sel class on the active source\n            this.$source.removeClass('sel');\n        } else {\n            this.$source.addClass('sel');\n        }\n    },\n\n    /**\n     * Collapse Extra Expanded Folders\n     */\n    _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        // If a source ID is passed in, exclude its parents\n        var $excludedSources;\n\n        if (dropTargetFolderId) {\n            $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n        }\n\n        for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n            var $source = this._tempExpandedFolders[i];\n\n            // Check the parent list, if a source id is passed in\n            if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                this._collapseFolder($source);\n                this._tempExpandedFolders.splice(i, 1);\n            }\n        }\n    },\n\n    _getSourceByKey: function(key) {\n        return this.$sources.filter('[data-key$=\"' + key + '\"]');\n    },\n\n    _hasSubfolders: function($source) {\n        return $source.siblings('ul').find('li').length;\n    },\n\n    _isExpanded: function($source) {\n        return $source.parent('li').hasClass('expanded');\n    },\n\n    _expandFolder: function() {\n        // Collapse any temp-expanded drop targets that aren't parents of this one\n        this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n        this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n        // Keep a record of that\n        this._tempExpandedFolders.push(this.dropTargetFolder);\n    },\n\n    _collapseFolder: function($source) {\n        if ($source.parent().hasClass('expanded')) {\n            $source.siblings('.toggle').trigger('click');\n        }\n    },\n\n    _createFolderContextMenu: function($source) {\n        // Make sure it's a volume folder\n        if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n            return;\n        }\n\n        var menuOptions = [\n            {\n                label: Craft.t('app', 'New subfolder'),\n                onClick: () => {\n                    this._createSubfolder($source);\n                },\n            },\n        ];\n\n        // For all folders that are not top folders\n        if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n            menuOptions.push({\n                label: Craft.t('app', 'Rename folder'),\n                onClick: () => {\n                    this._renameFolder($source);\n                },\n            });\n            menuOptions.push({\n                label: Craft.t('app', 'Delete folder'),\n                onClick: () => {\n                    this._deleteFolder($source);\n                },\n            });\n        }\n\n        new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n    },\n\n    _createSubfolder: function($parentFolder) {\n        var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n        if (subfolderName) {\n            var params = {\n                parentId: $parentFolder.data('folder-id'),\n                folderName: subfolderName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/create-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    this._prepareParentForChildren($parentFolder);\n\n                    var $subfolder = $(\n                        '<li>' +\n                        '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                        ' data-folder-id=\"' + data.folderId + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                        '>' +\n                        data.folderName +\n                        '</a>' +\n                        '</li>'\n                    );\n\n                    var $a = $subfolder.children('a:first');\n                    this._appendSubfolder($parentFolder, $subfolder);\n                    this.initSource($a);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    _deleteFolder: function($targetFolder) {\n        if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n            var params = {\n                folderId: $targetFolder.data('folder-id')\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/delete-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    var $parentFolder = this._getParentSource($targetFolder);\n\n                    // Remove folder and any trace from its parent, if needed\n                    this.deinitSource($targetFolder);\n\n                    $targetFolder.parent().remove();\n                    this._cleanUpTree($parentFolder);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    /**\n     * Rename\n     */\n    _renameFolder: function($targetFolder) {\n        var oldName = $.trim($targetFolder.text()),\n            newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n        if (newName && newName !== oldName) {\n            var params = {\n                folderId: $targetFolder.data('folder-id'),\n                newName: newName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/rename-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    $targetFolder.text(data.newName);\n\n                    // If the current folder was renamed.\n                    if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                        this.updateElements();\n                    }\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, 'json');\n        }\n    },\n\n    /**\n     * Prepare a source folder for children folder.\n     *\n     * @param $parentFolder\n     * @private\n     */\n    _prepareParentForChildren: function($parentFolder) {\n        if (!this._hasSubfolders($parentFolder)) {\n            $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n            this.initSourceToggle($parentFolder);\n        }\n    },\n\n    /**\n     * Appends a subfolder to the parent folder at the correct spot.\n     *\n     * @param $parentFolder\n     * @param $subfolder\n     * @private\n     */\n    _appendSubfolder: function($parentFolder, $subfolder) {\n        var $subfolderList = $parentFolder.siblings('ul'),\n            $existingChildren = $subfolderList.children('li'),\n            subfolderLabel = $.trim($subfolder.children('a:first').text()),\n            folderInserted = false;\n\n        for (var i = 0; i < $existingChildren.length; i++) {\n            var $existingChild = $($existingChildren[i]);\n\n            if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                $existingChild.before($subfolder);\n                folderInserted = true;\n                break;\n            }\n        }\n\n        if (!folderInserted) {\n            $parentFolder.siblings('ul').append($subfolder);\n        }\n    },\n\n    _cleanUpTree: function($parentFolder) {\n        if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n            this.deinitSourceToggle($parentFolder);\n            $parentFolder.siblings('ul').remove();\n            $parentFolder.siblings('.toggle').remove();\n            $parentFolder.parent().removeClass('expanded');\n        }\n    },\n\n    _positionProgressBar: function() {\n        if (!this.progressBar) {\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n        }\n\n        var $container = $(),\n            scrollTop = 0,\n            offset = 0;\n\n        if (this.settings.context === 'index') {\n            $container = this.progressBar.$progressBar.closest('#content');\n            scrollTop = Garnish.$win.scrollTop();\n        } else {\n            $container = this.progressBar.$progressBar.closest('.main');\n            scrollTop = this.$main.scrollTop();\n        }\n\n        var containerTop = $container.offset().top;\n        var diff = scrollTop - containerTop;\n        var windowHeight = Garnish.$win.height();\n\n        if ($container.height() > windowHeight) {\n            offset = (windowHeight / 2) - 6 + diff;\n        } else {\n            offset = ($container.height() / 2) - 6;\n        }\n\n        if (this.settings.context !== 'index') {\n            offset = scrollTop + (($container.height() / 2) - 6);\n        }\n\n        this.progressBar.$progressBar.css({\n            top: offset\n        });\n    },\n\n    _performBatchRequests: function(parameterArray, finalCallback) {\n        var responseArray = [];\n\n        var doRequest = parameters => {\n            Craft.postActionRequest(parameters.action, parameters.params, (data, textStatus) => {\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (textStatus === 'success') {\n                    responseArray.push(data);\n\n                    // If assets were just merged we should get the reference tags updated right away\n                    Craft.cp.runQueue();\n                }\n\n                if (responseArray.length >= parameterArray.length) {\n                    finalCallback(responseArray);\n                }\n            });\n        };\n\n        for (var i = 0; i < parameterArray.length; i++) {\n            doRequest(parameterArray[i]);\n        }\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend({\n    requestId: 0,\n    hud: null,\n    $uploadBtn: null,\n    uploader: null,\n    progressBar: null,\n\n    originalFilename: '',\n    originalExtension: '',\n\n    init: function() {\n        if (arguments.length > 0 && typeof arguments[0] === 'object') {\n            arguments[0].editorSettings = {\n                onShowHud: this.resetOriginalFilename.bind(this),\n                onCreateForm: this._renameHelper.bind(this),\n                validators: [\n                    this.validateElementForm.bind(this),\n                ],\n            };\n        }\n\n        this.base.apply(this, arguments);\n\n        if (this.settings.canUpload) {\n            this._attachUploader();\n        }\n\n        this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n        this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.elementSelect.$focusedItem;\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item);\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n    },\n\n    /**\n     * Create the element editor\n     */\n    createElementEditor: function($element) {\n        return this.base($element, {\n            params: {\n                defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n            },\n            input: this\n        });\n    },\n\n    /**\n     * Attach the uploader with drag event handler\n     */\n    _attachUploader: function() {\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            dropZone: this.$container,\n            formData: {\n                fieldId: this.settings.fieldId,\n            }\n        };\n\n        if (this.settings.sourceElementId) {\n            options.formData.elementId = this.settings.sourceElementId;\n        }\n\n        if (this.settings.criteria.siteId) {\n            options.formData.siteId = this.settings.criteria.siteId;\n        }\n\n        if (this.$addElementBtn) {\n            this.$uploadBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn dashed',\n                'data-icon': 'upload',\n                text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n            }).insertAfter(this.$addElementBtn);\n            options.fileInput = $('<input/>', {\n                type: 'file',\n                class: 'hidden',\n                multiple: this.settings.limit != 1,\n            }).insertAfter(this.$uploadBtn);\n\n            // Trigger a window resize in case the field is inside an element editor HUD\n            Garnish.$win.trigger('resize');\n        }\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        if (typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        options.canAddMoreFiles = this.canAddMoreFiles.bind(this);\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        if (this.$uploadBtn) {\n            this.$uploadBtn.on('click', ev => {\n                // We can't store a reference to the file input, because it gets replaced with a new input\n                // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                this.$uploadBtn.next('input[type=file]').trigger('click');\n            });\n        }\n    },\n\n    refreshThumbnail: function(elementId) {\n        var parameters = {\n            elementId: elementId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, data => {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                this.thumbLoader.load($existing);\n            }\n        });\n    },\n\n    /**\n     * Add the freshly uploaded file to the input field.\n     */\n    selectUploadedFile: function(element) {\n        // Check if we're able to add new elements\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        var $newElement = element.$element;\n\n        // Make a couple tweaks\n        $newElement.addClass('removable');\n        $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        $newElement.appendTo(this.$elementsContainer);\n\n        var margin = -($newElement.outerWidth() + 10);\n\n        this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addElementBtn.velocity(animateCss, 'fast');\n\n        this.addElements($newElement);\n\n        delete this.modal;\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function() {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var parameters = {\n                elementId: data.result.assetId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, data => {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var html = $(data.html);\n                    Craft.appendHeadHtml(data.headHtml);\n                    this.selectUploadedFile(Craft.getElementInfo(html));\n                }\n\n                // Last file\n                if (this.uploader.isLastUpload()) {\n                    this.progressBar.hideProgressBar();\n                    this.$container.removeClass('uploading');\n\n                    if (window.draftEditor) {\n                        window.draftEditor.checkForm();\n                    }\n                }\n            });\n\n            Craft.cp.runQueue();\n        }\n    },\n\n    /**\n     * We have to take into account files about to be added as well\n     */\n    canAddMoreFiles: function(slotsTaken) {\n        return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n    },\n\n    /**\n     * Parse the passed filename into the base filename and extension.\n     *\n     * @param filename\n     * @returns {{extension: string, baseFileName: string}}\n     */\n    _parseFilename: function(filename) {\n        var parts = filename.split('.'),\n            extension = '';\n\n        if (parts.length > 1) {\n            extension = parts.pop();\n        }\n        var baseFileName = parts.join('.');\n        return {extension: extension, baseFileName: baseFileName};\n    },\n\n    /**\n     * A helper function or the filename field.\n     * @private\n     */\n    _renameHelper: function($form) {\n        $('.renameHelper', $form).on('focus', e => {\n            var input = e.currentTarget,\n                filename = this._parseFilename(input.value);\n\n            if (this.originalFilename === '' && this.originalExtension === '') {\n                this.originalFilename = filename.baseFileName;\n                this.originalExtension = filename.extension;\n            }\n\n            var startPos = 0,\n                endPos = filename.baseFileName.length;\n\n            if (typeof input.selectionStart !== 'undefined') {\n                input.selectionStart = startPos;\n                input.selectionEnd = endPos;\n            } else if (document.selection && document.selection.createRange) {\n                // IE branch\n                input.select();\n                var range = document.selection.createRange();\n                range.collapse(true);\n                range.moveEnd(\"character\", endPos);\n                range.moveStart(\"character\", startPos);\n                range.select();\n            }\n        });\n    },\n\n    resetOriginalFilename: function() {\n        this.originalFilename = \"\";\n        this.originalExtension = \"\";\n    },\n\n    validateElementForm: function() {\n        var $filenameField = $('.renameHelper', this.elementEditor.hud.$hud.data('elementEditor').$form);\n        var filename = this._parseFilename($filenameField.val());\n\n        if (filename.extension !== this.originalExtension) {\n            // Blank extension\n            if (filename.extension === '') {\n                // If filename changed as well, assume removal of extension a mistake\n                if (this.originalFilename !== filename.baseFileName) {\n                    $filenameField.val(filename.baseFileName + '.' + this.originalExtension);\n                    return true;\n                } else {\n                    // If filename hasn't changed, make sure they want to remove extension\n                    return confirm(Craft.t('app', \"Are you sure you want to remove the extension “.{ext}”?\", {ext: this.originalExtension}));\n                }\n            } else {\n                // If the extension has changed, make sure it s intentional\n                return confirm(Craft.t('app', \"Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?\",\n                    {\n                        oldExt: this.originalExtension,\n                        newExt: filename.extension\n                    }));\n            }\n        }\n        return true;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend({\n    $selectTransformBtn: null,\n    _selectedTransform: null,\n\n    init: function(elementType, settings) {\n        settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n        this.base(elementType, settings);\n\n        if (settings.transforms.length) {\n            this.createSelectTransformButton(settings.transforms);\n        }\n    },\n\n    createSelectTransformButton: function(transforms) {\n        if (!transforms || !transforms.length) {\n            return;\n        }\n\n        var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n        this.$selectBtn.appendTo($btnGroup);\n\n        this.$selectTransformBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn disabled',\n            text: Craft.t('app', 'Select transform'),\n        }).appendTo($btnGroup);\n\n        var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n            $menuList = $('<ul></ul>').appendTo($menu);\n\n        for (var i = 0; i < transforms.length; i++) {\n            $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n        }\n\n        var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n            onOptionSelect: this.onSelectTransform.bind(this),\n        });\n        MenuButton.disable();\n\n        this.$selectTransformBtn.data('menuButton', MenuButton);\n    },\n\n    onSelectionChange: function(ev) {\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            allowTransforms = false;\n\n        if ($selectedElements.length && this.settings.transforms.length) {\n            allowTransforms = true;\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                    break;\n                }\n            }\n        }\n\n        var MenuBtn = null;\n\n        if (this.$selectTransformBtn) {\n            MenuBtn = this.$selectTransformBtn.data('menuButton');\n        }\n\n        if (allowTransforms) {\n            if (MenuBtn) {\n                MenuBtn.enable();\n            }\n\n            this.$selectTransformBtn.removeClass('disabled');\n        } else if (this.$selectTransformBtn) {\n            if (MenuBtn) {\n                MenuBtn.disable();\n            }\n\n            this.$selectTransformBtn.addClass('disabled');\n        }\n\n        this.base();\n    },\n\n    onSelectTransform: function(option) {\n        var transform = $(option).data('transform');\n        this.selectImagesWithTransform(transform);\n    },\n\n    selectImagesWithTransform: function(transform) {\n        // First we must get any missing transform URLs\n        if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n            Craft.AssetSelectorModal.transformUrls[transform] = {};\n        }\n\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            imageIdsWithMissingUrls = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $item = $($selectedElements[i]),\n                elementId = Craft.getElementInfo($item).id;\n\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                imageIdsWithMissingUrls.push(elementId);\n            }\n        }\n\n        if (imageIdsWithMissingUrls.length) {\n            this.showFooterSpinner();\n\n            this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, () => {\n                this.hideFooterSpinner();\n                this.selectImagesWithTransform(transform);\n            });\n        } else {\n            this._selectedTransform = transform;\n            this.selectElements();\n            this._selectedTransform = null;\n        }\n    },\n\n    fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n        var elementId = imageIdsWithMissingUrls.pop();\n\n        var data = {\n            assetId: elementId,\n            handle: transform\n        };\n\n        Craft.postActionRequest('assets/generate-transform', data, (response, textStatus) => {\n            Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n            if (textStatus === 'success') {\n                if (response.url) {\n                    Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                }\n            }\n\n            // More to load?\n            if (imageIdsWithMissingUrls.length) {\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n            } else {\n                callback();\n            }\n        });\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = this.base($selectedElements);\n\n        if (this._selectedTransform) {\n            for (var i = 0; i < info.length; i++) {\n                var elementId = info[i].id;\n\n                if (\n                    typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                    Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                ) {\n                    info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                }\n            }\n        }\n\n        return info;\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo, this._selectedTransform);\n    }\n}, {\n    defaults: {\n        canSelectImageTransforms: false,\n        transforms: []\n    },\n\n    transformUrls: {}\n});\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend({\n    remainingSessionTime: null,\n    checkRemainingSessionTimer: null,\n    showLoginModalTimer: null,\n    decrementLogoutWarningInterval: null,\n\n    showingLogoutWarningModal: false,\n    showingLoginModal: false,\n\n    logoutWarningModal: null,\n    loginModal: null,\n\n    $logoutWarningPara: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $loginBtn: null,\n    $loginErrorPara: null,\n\n    submitLoginIfLoggedOut: false,\n\n    /**\n     * Init\n     */\n    init: function() {\n        this.updateRemainingSessionTime(Craft.remainingSessionTime);\n    },\n\n    /**\n     * Sets a timer for the next time to check the auth timeout.\n     */\n    setCheckRemainingSessionTimer: function(seconds) {\n        if (this.checkRemainingSessionTimer) {\n            clearTimeout(this.checkRemainingSessionTimer);\n        }\n\n        this.checkRemainingSessionTimer = setTimeout(this.checkRemainingSessionTime.bind(this), seconds * 1000);\n    },\n\n    /**\n     * Pings the server to see how many seconds are left on the current user session, and handles the response.\n     */\n    checkRemainingSessionTime: function(extendSession) {\n        $.ajax({\n            url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n            type: 'GET',\n            dataType: 'json',\n            complete: (jqXHR, textStatus) => {\n                if (textStatus === 'success') {\n                    if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                        Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                    }\n\n                    this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                    this.submitLoginIfLoggedOut = false;\n                } else {\n                    this.updateRemainingSessionTime(-1);\n                }\n            },\n        });\n    },\n\n    /**\n     * Updates our record of the auth timeout, and handles it.\n     */\n    updateRemainingSessionTime: function(remainingSessionTime) {\n        this.remainingSessionTime = parseInt(remainingSessionTime);\n\n        // Are we within the warning window?\n        if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n            // Is there still time to renew the session?\n            if (this.remainingSessionTime) {\n                if (!this.showingLogoutWarningModal) {\n                    // Show the warning modal\n                    this.showLogoutWarningModal();\n                }\n\n                // Will the session expire before the next checkup?\n                if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                    if (this.showLoginModalTimer) {\n                        clearTimeout(this.showLoginModalTimer);\n                    }\n\n                    this.showLoginModalTimer = setTimeout(this.showLoginModal.bind(this), this.remainingSessionTime * 1000);\n                }\n            } else {\n                if (this.showingLoginModal) {\n                    if (this.submitLoginIfLoggedOut) {\n                        this.submitLogin();\n                    }\n                } else {\n                    // Show the login modal\n                    this.showLoginModal();\n                }\n            }\n\n            this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n        } else {\n            // Everything's good!\n            this.hideLogoutWarningModal();\n            this.hideLoginModal();\n\n            // Will be be within the minSafeSessionTime before the next update?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n            } else {\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the logout warning modal.\n     */\n    showLogoutWarningModal: function() {\n        var quickShow;\n\n        if (this.showingLoginModal) {\n            this.hideLoginModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLogoutWarningModal = true;\n\n        if (!this.logoutWarningModal) {\n            let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n            let $body = $('<div class=\"body\"/>').appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $logoutBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Log out now'),\n            }).appendTo($buttons);\n            let $renewSessionBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Keep me logged in'),\n            }).appendTo($buttons);\n\n            this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n            this.logoutWarningModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                onFadeIn: function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the renew button\n                        setTimeout(function() {\n                            $renewSessionBtn.trigger('focus');\n                        }, 100);\n                    }\n                }\n            });\n\n            this.addListener($logoutBtn, 'activate', 'logout');\n            this.addListener($form, 'submit', 'renewSession');\n        }\n\n        if (quickShow) {\n            this.logoutWarningModal.quickShow();\n        } else {\n            this.logoutWarningModal.show();\n        }\n\n        this.updateLogoutWarningMessage();\n\n        this.decrementLogoutWarningInterval = setInterval(this.decrementLogoutWarning.bind(this), 1000);\n    },\n\n    /**\n     * Updates the logout warning message indicating that the session is about to expire.\n     */\n    updateLogoutWarningMessage: function() {\n        this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n            time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n        }));\n\n        this.logoutWarningModal.updateSizeAndPosition();\n    },\n\n    decrementLogoutWarning: function() {\n        if (this.remainingSessionTime > 0) {\n            this.remainingSessionTime--;\n            this.updateLogoutWarningMessage();\n        }\n\n        if (this.remainingSessionTime === 0) {\n            clearInterval(this.decrementLogoutWarningInterval);\n        }\n    },\n\n    /**\n     * Hides the logout warning modal.\n     */\n    hideLogoutWarningModal: function(quick) {\n        this.showingLogoutWarningModal = false;\n\n        if (this.logoutWarningModal) {\n            if (quick) {\n                this.logoutWarningModal.quickHide();\n            } else {\n                this.logoutWarningModal.hide();\n            }\n\n            if (this.decrementLogoutWarningInterval) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the login modal.\n     */\n    showLoginModal: function() {\n        var quickShow;\n\n        if (this.showingLogoutWarningModal) {\n            this.hideLogoutWarningModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLoginModal = true;\n\n        if (!this.loginModal) {\n            var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$loginBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Login'),\n            }).appendTo($buttonContainer);\n            this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.loginModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark loginmodalshade',\n                onFadeIn: () => {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the password input\n                        setTimeout(() => {\n                            this.$passwordInput.trigger('focus');\n                        }, 100);\n                    }\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($form, 'submit', 'login');\n        }\n\n        if (quickShow) {\n            this.loginModal.quickShow();\n        } else {\n            this.loginModal.show();\n        }\n    },\n\n    /**\n     * Hides the login modal.\n     */\n    hideLoginModal: function(quick) {\n        this.showingLoginModal = false;\n\n        if (this.loginModal) {\n            if (quick) {\n                this.loginModal.quickHide();\n            } else {\n                this.loginModal.hide();\n            }\n        }\n    },\n\n    logout: function() {\n        $.get({\n            url: Craft.getActionUrl('users/logout'),\n            dataType: 'json',\n            success: () => {\n                Craft.redirectTo('');\n            },\n        });\n    },\n\n    renewSession: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        this.hideLogoutWarningModal();\n        this.checkRemainingSessionTime(true);\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$loginBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$loginBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    login: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.validatePassword()) {\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            if (typeof Craft.csrfTokenValue !== 'undefined') {\n                // Check the auth status one last time before sending this off,\n                // in case the user has already logged back in from another window/tab\n                this.submitLoginIfLoggedOut = true;\n                this.checkRemainingSessionTime();\n            } else {\n                this.submitLogin();\n            }\n        }\n    },\n\n    submitLogin: function() {\n        var data = {\n            loginName: Craft.username,\n            password: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/login', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.hideLoginModal();\n                    this.checkRemainingSessionTime();\n                } else {\n                    this.showLoginError(response.error);\n                    Garnish.shake(this.loginModal.$container);\n\n                    if (!Garnish.isMobileBrowser(true)) {\n                        this.$passwordInput.trigger('focus');\n                    }\n                }\n            } else {\n                this.showLoginError();\n            }\n        });\n    },\n\n    showLoginError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$loginErrorPara.text(error);\n        this.loginModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showLoginError('');\n    }\n}, {\n    checkInterval: 60,\n    minSafeSessionTime: 120\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend({\n    authManager: null,\n\n    $nav: null,\n    $mainContainer: null,\n    $alerts: null,\n    $crumbs: null,\n    $notificationContainer: null,\n    $main: null,\n    $primaryForm: null,\n    $headerContainer: null,\n    $header: null,\n    $mainContent: null,\n    $details: null,\n    $tabsContainer: null,\n    $tabsList: null,\n    $tabs: null,\n    $overflowTabBtn: null,\n    $overflowTabList: null,\n    $selectedTab: null,\n    selectedTabIndex: null,\n    $focusableTab: null,\n    $sidebarContainer: null,\n    $sidebar: null,\n    $contentContainer: null,\n    $edition: null,\n\n    $confirmUnloadForms: null,\n    $deltaForms: null,\n    $collapsibleTables: null,\n\n    fixedHeader: false,\n\n    enableQueue: true,\n    totalJobs: 0,\n    jobInfo: null,\n    displayedJobInfo: null,\n    displayedJobInfoUnchanged: 1,\n    trackJobProgressTimeout: null,\n    jobProgressIcon: null,\n\n    checkingForUpdates: false,\n    forcingRefreshOnUpdatesCheck: false,\n    includingDetailsOnUpdatesCheck: false,\n    checkForUpdatesCallbacks: null,\n\n    init: function() {\n        // Is this session going to expire?\n        if (Craft.remainingSessionTime !== 0) {\n            this.authManager = new Craft.AuthManager();\n        }\n\n        // Find all the key elements\n        this.$nav = $('#nav');\n        this.$mainContainer = $('#main-container');\n        this.$alerts = $('#alerts');\n        this.$crumbs = $('#crumbs');\n        this.$notificationContainer = $('#notifications');\n        this.$main = $('#main');\n        this.$primaryForm = $('#main-form');\n        this.$headerContainer = $('#header-container');\n        this.$header = $('#header');\n        this.$mainContent = $('#main-content');\n        this.$details = $('#details');\n        this.$sidebarContainer = $('#sidebar-container');\n        this.$sidebar = $('#sidebar');\n        this.$contentContainer = $('#content-container');\n        this.$collapsibleTables = $('table.collapsible');\n\n        this.updateSidebarMenuLabel();\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        if (this.$header.length) {\n            this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n            this.updateFixedHeader();\n        }\n\n        Garnish.$doc.ready(() => {\n            // Update responsive tables on window resize\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n            this.handleWindowResize();\n\n            // Fade the notification out two seconds after page load\n            var $errorNotifications = this.$notificationContainer.children('.error'),\n                $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n            $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n            $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n            // Wait a frame before initializing any confirm-unload forms,\n            // so other JS that runs on ready() has a chance to initialize\n            Garnish.requestAnimationFrame(this.initSpecialForms.bind(this));\n        });\n\n        // Alerts\n        if (this.$alerts.length) {\n            this.initAlerts();\n        }\n\n        // Toggles\n        this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n        this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n        // Does this page have a primary form?\n        if (!this.$primaryForm.length) {\n            this.$primaryForm = $('form[data-saveshortcut]:first');\n        }\n\n        // Does the primary form support the save shortcut?\n        if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n            let shortcuts = [];\n            let actions = this.$primaryForm.data('actions');\n            if (typeof actions === 'undefined') {\n                shortcuts.push([\n                    {\n                        keyCode: Garnish.S_KEY,\n                        ctrl: true,\n                    }, {\n                        redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                        retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                    }\n                ]);\n            } else {\n                for (let i = 0; i < actions.length; i++) {\n                    let action = actions[i];\n                    if (!action.shortcut) {\n                        continue;\n                    }\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                            shift: !!action.shift,\n                        }, {\n                            action: action.action,\n                            redirect: action.redirect,\n                            confirm: action.confirm,\n                            params: action.params,\n                            data: action.data,\n                            retainScroll: action.retainScroll,\n                        }\n                    ]);\n                }\n            }\n            for (let i = 0; i < shortcuts.length; i++) {\n                Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                    this.submitPrimaryForm(shortcuts[i][1]);\n                });\n            }\n        }\n\n        this.initTabs();\n\n        // Should we match the previous scroll position?\n        let scrollY = Craft.getLocalStorage('scrollY');\n        if (typeof scrollY !== 'undefined') {\n            Craft.removeLocalStorage('scrollY');\n            Garnish.$doc.ready(() => {\n                Garnish.requestAnimationFrame(() => {\n                    window.scrollTo(0, scrollY);\n                });\n            });\n        }\n\n        if ($.isTouchCapable()) {\n            this.$mainContainer.on('focus', 'input, textarea, .focusable-input', this._handleInputFocus.bind(this));\n            this.$mainContainer.on('blur', 'input, textarea, .focusable-input', this._handleInputBlur.bind(this));\n        }\n    },\n\n    initSpecialForms: function() {\n        // Look for forms that we should watch for changes on\n        this.$confirmUnloadForms = $('form[data-confirm-unload]');\n        this.$deltaForms = $('form[data-delta]');\n\n        if (!this.$confirmUnloadForms.length) {\n            return;\n        }\n\n        var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n        var $form, serialized;\n\n        for (var i = 0; i < $forms.length; i++) {\n            $form = $forms.eq(i);\n            if (!$form.data('initialSerializedValue')) {\n                if (typeof $form.data('serializer') === 'function') {\n                    serialized = $form.data('serializer')();\n                } else {\n                    serialized = $form.serialize();\n                }\n                $form.data('initialSerializedValue', serialized);\n            }\n            this.addListener($form, 'submit', function(ev) {\n                if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                    this.removeListener(Garnish.$win, 'beforeunload');\n                }\n                if (Garnish.hasAttr($form, 'data-delta')) {\n                    ev.preventDefault();\n                    var serialized;\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                    Craft.createForm(data)\n                        .appendTo(Garnish.$bod)\n                        .submit();\n                }\n            });\n        }\n\n        this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n            var confirmUnload = false;\n            var $form, serialized;\n            if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                confirmUnload = true;\n            } else {\n                for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                    $form = this.$confirmUnloadForms.eq(i);\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    if ($form.data('initialSerializedValue') !== serialized) {\n                        confirmUnload = true;\n                        break;\n                    }\n                }\n            }\n\n            if (confirmUnload) {\n                var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                if (ev) {\n                    ev.originalEvent.returnValue = message;\n                } else {\n                    window.event.returnValue = message;\n                }\n\n                return message;\n            }\n        });\n    },\n\n    _handleInputFocus: function() {\n        this.updateFixedHeader();\n    },\n\n    _handleInputBlur: function() {\n        this.updateFixedHeader();\n    },\n\n    /**\n     * Submits a form.\n     * @param {Object} [options]\n     * @param {string} [options.action] The `action` param value override\n     * @param {string} [options.redirect] The `redirect` param value override\n     * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n     * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n     * @param {Object} [options.data] Additional data to be passed to the submit event\n     * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n     */\n    submitPrimaryForm: function(options) {\n        // Give other stuff on the page a chance to prepare\n        this.trigger('beforeSaveShortcut');\n\n        if (typeof options !== 'object' || !$.isPlainObject(options)) {\n            options = {};\n        }\n\n        if (!options.redirect) {\n            options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n        }\n\n        if (!options.data) {\n            options.data = {};\n        }\n        options.data.saveShortcut = true;\n\n        Craft.submitForm(this.$primaryForm, options);\n    },\n\n    updateSidebarMenuLabel: function() {\n        var $item = this.$sidebar.find('a.sel:first');\n        var $label = $item.children('.label');\n        $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n        Garnish.$bod.removeClass('showing-sidebar');\n    },\n\n    toggleNav: function() {\n        Garnish.$bod.toggleClass('showing-nav');\n    },\n\n    toggleSidebar: function() {\n        Garnish.$bod.toggleClass('showing-sidebar');\n    },\n\n    initTabs: function() {\n        // Clear out all our old info in case the tabs were just replaced\n        this.$tabsList = this.$tabs = this.$overflowTabBtn = this.$overflowTabList = this.$selectedTab =\n            this.selectedTabIndex = this.$focusableTab = null;\n\n        this.$tabsContainer = $('#tabs');\n        if (!this.$tabsContainer.length) {\n            this.$tabsContainer = null;\n            return;\n        }\n\n        this.$tabsList = this.$tabsContainer.find('> ul');\n        this.$tabs = this.$tabsList.find('> li');\n        this.$overflowTabBtn = $('#overflow-tab-btn');\n        if (!this.$overflowTabBtn.data('menubtn')) {\n            new Garnish.MenuBtn(this.$overflowTabBtn);\n        }\n        this.$overflowTabList = this.$overflowTabBtn.data('menubtn').menu.$container.find('> ul');\n\n        let $initialTab;\n\n        for (let i = 0; i < this.$tabs.length; i++) {\n            const $tab = this.$tabs.eq(i);\n\n            // Does it link to an anchor?\n            const $a = $tab.children('a');\n            const href = $a.attr('href');\n            if (href && href.charAt(0) === '#') {\n                this.addListener($a, 'keydown', ev => {\n                    if ([Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    }\n                });\n                this.addListener($a, 'click', ev => {\n                    ev.preventDefault();\n                    const $a = $(ev.currentTarget);\n                    this.selectTab($a);\n                    this._focusTab($a);\n                });\n\n                if (href.substr(1) === window.LOCATION_HASH) {\n                    $initialTab = $a;\n                }\n            }\n\n            if (!$initialTab && $a.hasClass('sel')) {\n                this.$selectedTab = $initialTab = $a;\n            }\n\n            this.addListener($a, 'keydown', ev => {\n                if (\n                    [Garnish.LEFT_KEY, Garnish.RIGHT_KEY].includes(ev.keyCode) &&\n                    $.contains(this.$tabsList[0], ev.currentTarget)\n                ) {\n                    let $tab;\n                    if (ev.keyCode === Garnish.LEFT_KEY) {\n                        $tab = $(ev.currentTarget).parent().prev('li').children('a');\n                    } else {\n                        $tab = $(ev.currentTarget).parent().next('li').children('a');\n                    }\n                    if ($tab.length) {\n                        this._focusTab($tab);\n                    }\n                }\n            });\n        }\n\n        if ($initialTab) {\n            this.selectTab($initialTab, true);\n            this._focusTab($initialTab, false);\n        }\n    },\n\n    /**\n     * @param {object} tab\n     * @param {bool} [force]\n     */\n    selectTab: function(tab, force) {\n        var $tab = $(tab);\n\n        if (this.$selectedTab) {\n            if (!force && this.$selectedTab.get(0) === $tab.get(0)) {\n                return;\n            }\n            this.deselectTab();\n        }\n\n        $tab.addClass('sel');\n\n        const index = $tab ? this.$tabs.index($tab.parent()) : null;\n        this.$selectedTab = $tab;\n        this.selectedTabIndex = index;\n\n        if (index === 0) {\n            $('#content').addClass('square');\n        } else {\n            $('#content').removeClass('square');\n        }\n\n        // Show its content area\n        if ($tab.attr('href').charAt(0) === '#') {\n            $(this.$selectedTab.attr('href')).removeClass('hidden');\n        }\n\n        // Trigger a resize event to update any UI components that are listening for it, including updateTabs()\n        Garnish.$win.trigger('resize');\n\n        // Fixes Redactor fixed toolbars on previously hidden panes\n        Garnish.$doc.trigger('scroll');\n\n        this.$overflowTabBtn.data('menubtn').menu.hide();\n\n        // If there is a revision menu, set its links to this tab ID\n        let href = $tab && $tab.attr('href');\n        if (href && href.charAt(0) === '#') {\n            let menubtn = $('#context-btn').menubtn().data('menubtn');\n            if (menubtn) {\n                for (let i = 0; i < menubtn.menu.$options.length; i++) {\n                    let a = menubtn.menu.$options[i];\n                    if (a.href) {\n                        a.href = a.href.match(/^[^#]*/)[0] + href;\n                    }\n                }\n            }\n        }\n\n        if (typeof history !== 'undefined') {\n            // Delay changing the hash so it doesn't cause the browser to jump on page load\n            Garnish.requestAnimationFrame(() => {\n                history.replaceState(undefined, undefined, href);\n            });\n        }\n    },\n\n    /**\n     * @param {object} $tab\n     * @param {boolean} [setFocus]\n     * @private\n     */\n    _focusTab: function($tab, setFocus) {\n        if ($tab === this.$focusableTab) {\n            return;\n        }\n\n        if (this.$focusableTab) {\n            this.$focusableTab.attr('tabindex', '-1');\n        }\n\n        this.$focusableTab = $tab.attr('tabindex', '0');\n\n        if (setFocus !== false) {\n            this.$focusableTab.focus();\n        }\n    },\n\n    deselectTab: function() {\n        if (!this.$selectedTab) {\n            return;\n        }\n\n        this.$selectedTab.removeClass('sel');\n\n        // Hide its content area\n        if (this.$selectedTab.attr('href').charAt(0) === '#') {\n            $(this.$selectedTab.attr('href')).addClass('hidden');\n        }\n    },\n\n    handleWindowResize: function() {\n        this.updateTabs();\n        this.updateResponsiveTables();\n    },\n\n    updateTabs: function() {\n        if (!this.$tabsContainer) {\n            return;\n        }\n\n        // Keep track of the focussed element in case it's one of the tabs\n        const activeElement = document.activeElement;\n\n        const maxWidth = Math.floor(this.$tabsContainer.width()) - 40;\n        const tabMargin = Garnish.$bod.width() >= 768 ? -12 : -7;\n        let totalWidth = 0;\n        let showOverflowMenu = false;\n\n        // Start with the selected tab, because that needs to be visible\n        if (this.$selectedTab) {\n            this.$selectedTab.parent('li').appendTo(this.$tabsList);\n            totalWidth = Math.ceil(this.$selectedTab.parent('li').width());\n        }\n\n        for (var i = 0; i < this.$tabs.length; i++) {\n            const $tab = this.$tabs.eq(i);\n            $tab.appendTo(this.$tabsList);\n            if (i !== this.selectedTabIndex) {\n                totalWidth += Math.ceil($tab.width());\n                // account for the negative margin\n                if (i !== 0 || this.$selectedTab) {\n                    totalWidth += tabMargin;\n                }\n            }\n\n            const $a = $tab.find('> a');\n            if (i === this.selectedTabIndex || totalWidth <= maxWidth) {\n                $a\n                    .removeAttr('role')\n                    .attr('tabindex', this.$focusableTab && $a[0] === this.$focusableTab[0] ? '0' : '-1');\n            } else {\n                $tab.appendTo(this.$overflowTabList);\n                this.$overflowTabBtn.data('menubtn').menu.addOptions($a);\n                showOverflowMenu = true;\n            }\n\n            if (document.activeElement !== activeElement) {\n                $(activeElement).focus();\n            }\n        }\n\n        if (showOverflowMenu) {\n            this.$overflowTabBtn.removeClass('hidden');\n        } else {\n            this.$overflowTabBtn.addClass('hidden');\n        }\n    },\n\n    updateResponsiveTables: function() {\n        for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n            this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n            this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n            this.updateResponsiveTables._check = false;\n\n            if (this.updateResponsiveTables._containerWidth > 0) {\n                // Is this the first time we've checked this table?\n                if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                    this.updateResponsiveTables._check = true;\n                } else {\n                    this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                    // Getting wider?\n                    if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                        if (this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._$table.removeClass('collapsed');\n                            this.updateResponsiveTables._check = true;\n                        }\n                    } else if (!this.updateResponsiveTables._isCollapsed) {\n                        this.updateResponsiveTables._check = true;\n                    }\n                }\n\n                // Are we checking the table width?\n                if (this.updateResponsiveTables._check) {\n                    if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                        this.updateResponsiveTables._$table.addClass('collapsed');\n                    }\n                }\n\n                // Remember the container width for next time\n                this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n            }\n        }\n    },\n\n    updateFixedHeader: function() {\n        // Have we scrolled passed the top of #main?\n        if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n            if (!this.fixedHeader) {\n                var headerHeight = this.$headerContainer.height();\n\n                // Hard-set the minimum content container height\n                this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                // Hard-set the header container height\n                this.$headerContainer.height(headerHeight);\n                Garnish.$bod.addClass('fixed-header');\n\n                // Fix the sidebar and details pane positions if they are taller than #content-container\n                var contentHeight = this.$contentContainer.outerHeight();\n                var $detailsHeight = this.$details.outerHeight();\n                var css = {\n                    top: headerHeight + 'px',\n                    'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                };\n                this.$sidebar.addClass('fixed').css(css);\n                this.$details.addClass('fixed').css(css);\n                this.fixedHeader = true;\n            }\n        } else if (this.fixedHeader) {\n            this.$headerContainer.height('auto');\n            Garnish.$bod.removeClass('fixed-header');\n            this.$contentContainer.css('min-height', '');\n            this.$sidebar.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.$details.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.fixedHeader = false;\n        }\n    },\n\n    /**\n     * Dispays a notification.\n     *\n     * @param {string} type\n     * @param {string} message\n     */\n    displayNotification: function(type, message) {\n        var notificationDuration = Craft.CP.notificationDuration;\n\n        if (['cp-error', 'error'].includes(type)) {\n            notificationDuration *= 2;\n            icon = 'alert';\n            label = Craft.t('app', 'Error');\n        } else {\n            icon = 'info';\n            label = Craft.t('app', 'Notice');\n        }\n\n        var $notification = $(`\n            <div class=\"notification ${ type.replace('cp-', '') }\">\n                <span data-icon=\"${ icon }\" aria-label=\"${ label }\"></span>\n                ${ message }\n            </div>\n            `)\n            .appendTo(this.$notificationContainer);\n\n        var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n        $notification\n            .hide()\n            .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n            .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n            .delay(notificationDuration)\n            .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                complete: function() {\n                    $notification.remove();\n                }\n            });\n\n        this.trigger('displayNotification', {\n            notificationType: type,\n            message: message\n        });\n    },\n\n    /**\n     * Displays a notice.\n     *\n     * @param {string} message\n     */\n    displayNotice: function(message) {\n        this.displayNotification('notice', message);\n    },\n\n    /**\n     * Displays an error.\n     *\n     * @param {string} message\n     */\n    displayError: function(message) {\n        if (!message) {\n            message = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.displayNotification('error', message);\n    },\n\n    fetchAlerts: function() {\n        var data = {\n            path: Craft.path\n        };\n\n        Craft.queueActionRequest('app/get-cp-alerts', data, this.displayAlerts.bind(this));\n    },\n\n    displayAlerts: function(alerts) {\n        this.$alerts.remove();\n\n        if (Garnish.isArray(alerts) && alerts.length) {\n            this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n            for (var i = 0; i < alerts.length; i++) {\n                $(`<li><span data-icon=\"alert\" aria-label=\"${ Craft.t('app', 'Error') }\"></span> ${ alerts[i] }</li>`).appendTo(this.$alerts);\n            }\n\n            var height = this.$alerts.outerHeight();\n            this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n            this.initAlerts();\n        }\n    },\n\n    initAlerts: function() {\n        // Are there any shunnable alerts?\n        var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n        for (var i = 0; i < $shunnableAlerts.length; i++) {\n            this.addListener($shunnableAlerts[i], 'click', ev => {\n                ev.preventDefault();\n\n                var $link = $(ev.currentTarget);\n\n                var data = {\n                    message: $link.prop('className').substr(5)\n                };\n\n                Craft.queueActionRequest('app/shun-cp-alert', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            $link.parent().remove();\n                        } else {\n                            this.displayError(response.error);\n                        }\n                    }\n                });\n            });\n        }\n    },\n\n    checkForUpdates: function(forceRefresh, includeDetails, callback) {\n        // Make 'includeDetails' optional\n        if (typeof includeDetails === 'function') {\n            callback = includeDetails;\n            includeDetails = false;\n        }\n\n        // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n        // then just set a new callback that re-checks for updates when the current one is done.\n        if (this.checkingForUpdates && (\n            (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n            (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n        )) {\n            var realCallback = callback;\n            callback = () => {\n                this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n            };\n        }\n\n        // Callback function?\n        if (typeof callback === 'function') {\n            if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                this.checkForUpdatesCallbacks = [];\n            }\n\n            this.checkForUpdatesCallbacks.push(callback);\n        }\n\n        if (!this.checkingForUpdates) {\n            this.checkingForUpdates = true;\n            this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n            this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n            this._checkForUpdates(forceRefresh, includeDetails)\n                .then(info => {\n                    this.updateUtilitiesBadge();\n                    this.checkingForUpdates = false;\n\n                    if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                        var callbacks = this.checkForUpdatesCallbacks;\n                        this.checkForUpdatesCallbacks = null;\n\n                        for (var i = 0; i < callbacks.length; i++) {\n                            callbacks[i](info);\n                        }\n                    }\n\n                    this.trigger('checkForUpdates', {\n                        updateInfo: info\n                    });\n                });\n        }\n    },\n\n    _checkForUpdates: function(forceRefresh, includeDetails) {\n        return new Promise((resolve, reject) => {\n            if (!forceRefresh) {\n                this._checkForCachedUpdates(includeDetails)\n                    .then(info => {\n                        if (info.cached !== false) {\n                            resolve(info);\n                        }\n\n                        this._getUpdates(includeDetails)\n                            .then(info => {\n                                resolve(info);\n                            });\n                    });\n            } else {\n                this._getUpdates(includeDetails)\n                    .then(info => {\n                        resolve(info);\n                    });\n            }\n        });\n    },\n\n    _checkForCachedUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            var data = {\n                onlyIfCached: true,\n                includeDetails: includeDetails,\n            };\n            Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    resolve({cached: false});\n                }\n            });\n        });\n    },\n\n    _getUpdates: function(includeDetails) {\n        return new Promise((resolve, reject) => {\n            Craft.sendApiRequest('GET', 'updates')\n                .then(updates => {\n                    this._cacheUpdates(updates, includeDetails).then(resolve);\n                })\n                .catch(e => {\n                    this._cacheUpdates({}).then(resolve);\n                });\n        });\n    },\n\n    _cacheUpdates: function(updates, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.postActionRequest('app/cache-updates', {\n                updates: updates,\n                includeDetails: includeDetails,\n            }, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    reject();\n                }\n            }, {\n                contentType: 'json'\n            });\n        });\n    },\n\n    updateUtilitiesBadge: function() {\n        var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n        // Ignore if there is no (non-selected) Utilities nav item\n        if (!$utilitiesLink.length) {\n            return;\n        }\n\n        Craft.queueActionRequest('app/get-utilities-badge-count', response => {\n            // Get the existing utility nav badge, if any\n            var $badge = $utilitiesLink.children('.badge');\n\n            if (response.badgeCount) {\n                if (!$badge.length) {\n                    $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                }\n                $badge.text(response.badgeCount);\n            } else if ($badge.length) {\n                $badge.remove();\n            }\n        });\n    },\n\n    runQueue: function() {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        if (Craft.runQueueAutomatically) {\n            Craft.queueActionRequest('queue/run', (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this.trackJobProgress(false, true);\n                }\n            });\n        } else {\n            this.trackJobProgress(false, true);\n        }\n    },\n\n    trackJobProgress: function(delay, force) {\n        if (force && this.trackJobProgressTimeout) {\n            clearTimeout(this.trackJobProgressTimeout);\n            this.trackJobProgressTimeout = null;\n        }\n\n        // Ignore if we're already tracking jobs, or the queue is disabled\n        if (this.trackJobProgressTimeout || !this.enableQueue) {\n            return;\n        }\n\n        if (delay === true) {\n            // Determine the delay based on how long the displayed job info has remained unchanged\n            var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n            this.trackJobProgressTimeout = setTimeout(this._trackJobProgressInternal.bind(this), timeout);\n        } else {\n            this._trackJobProgressInternal();\n        }\n    },\n\n    _trackJobProgressInternal: function() {\n        Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.trackJobProgressTimeout = null;\n                this.totalJobs = response.total;\n                this.setJobInfo(response.jobs);\n\n                if (this.jobInfo.length) {\n                    // Check again after a delay\n                    this.trackJobProgress(true);\n                }\n            }\n        });\n    },\n\n    setJobInfo: function(jobInfo) {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        this.jobInfo = jobInfo;\n\n        // Update the displayed job info\n        var oldInfo = this.displayedJobInfo;\n        this.displayedJobInfo = this.getDisplayedJobInfo();\n\n        // Same old same old?\n        if (\n            oldInfo &&\n            this.displayedJobInfo &&\n            oldInfo.id === this.displayedJobInfo.id &&\n            oldInfo.progress === this.displayedJobInfo.progress &&\n            oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n            oldInfo.status === this.displayedJobInfo.status\n        ) {\n            this.displayedJobInfoUnchanged++;\n        } else {\n            // Reset the counter\n            this.displayedJobInfoUnchanged = 1;\n        }\n\n        this.updateJobIcon();\n\n        // Fire a setJobInfo event\n        this.trigger('setJobInfo');\n    },\n\n    /**\n     * Returns info for the job that should be displayed in the CP sidebar\n     */\n    getDisplayedJobInfo: function() {\n        if (!this.enableQueue) {\n            return null;\n        }\n\n        // Set the status preference order\n        var statuses = [\n            Craft.CP.JOB_STATUS_RESERVED,\n            Craft.CP.JOB_STATUS_FAILED,\n            Craft.CP.JOB_STATUS_WAITING\n        ];\n\n        for (var i = 0; i < statuses.length; i++) {\n            for (var j = 0; j < this.jobInfo.length; j++) {\n                if (this.jobInfo[j].status === statuses[i]) {\n                    return this.jobInfo[j];\n                }\n            }\n        }\n    },\n\n    updateJobIcon: function() {\n        if (!this.enableQueue || !this.$nav.length) {\n            return;\n        }\n\n        if (this.displayedJobInfo) {\n            if (!this.jobProgressIcon) {\n                this.jobProgressIcon = new JobProgressIcon();\n            }\n\n            if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n            } else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n            }\n        } else {\n            if (this.jobProgressIcon) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.complete();\n                delete this.jobProgressIcon;\n            }\n        }\n    },\n\n    /**\n     * Returns the active site for the control panel\n     *\n     * @return {number}\n     */\n    getSiteId: function() {\n        // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n        let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n        if (typeof siteId !== 'undefined') {\n            Craft.removeLocalStorage('BaseElementIndex.siteId');\n            this.setSiteId(siteId);\n            return siteId;\n        }\n        return Craft.getCookie('siteId');\n    },\n\n    /**\n     * Sets the active site for the control panel\n     * @param {number} siteId\n     */\n    setSiteId: function(siteId) {\n        Craft.setCookie('siteId', siteId, {\n            maxAge: 31536000 // 1 year\n        });\n    }\n}, {\n    //maxWidth: 1051, //1024,\n    notificationDuration: 2000,\n\n    JOB_STATUS_WAITING: 1,\n    JOB_STATUS_RESERVED: 2,\n    JOB_STATUS_DONE: 3,\n    JOB_STATUS_FAILED: 4\n});\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend({\n    $li: null,\n    $a: null,\n    $label: null,\n    $progressLabel: null,\n\n    progress: null,\n    failMode: false,\n\n    _$bgCanvas: null,\n    _$staticCanvas: null,\n    _$hoverCanvas: null,\n    _$failCanvas: null,\n\n    _staticCtx: null,\n    _hoverCtx: null,\n    _canvasSize: null,\n    _arcPos: null,\n    _arcRadius: null,\n    _lineWidth: null,\n\n    _arcStartPos: 0,\n    _arcEndPos: 0,\n    _arcStartStepSize: null,\n    _arcEndStepSize: null,\n    _arcStep: null,\n    _arcStepTimeout: null,\n    _arcAnimateCallback: null,\n\n    _progressBar: null,\n\n    init: function() {\n        this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n        this.$a = $('<a/>', {\n            id: 'job-icon',\n            href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n        }).appendTo(this.$li);\n        this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n        var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n        this.$label = $('<span/>').appendTo($labelContainer);\n        this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n        let m = (window.devicePixelRatio > 1 ? 2 : 1);\n        this._canvasSize = 18 * m;\n        this._arcPos = this._canvasSize / 2;\n        this._arcRadius = 7 * m;\n        this._lineWidth = 3 * m;\n\n        this._$bgCanvas = this._createCanvas('bg', '#61666b');\n        this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n        this._$hoverCanvas = this._createCanvas('hover', '#fff');\n        this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n        this._staticCtx = this._$staticCanvas[0].getContext('2d');\n        this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n        this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n        this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n    },\n\n    setDescription: function(description, progressLabel) {\n        this.$a.attr('title', description);\n        this.$label.text(description);\n        if (progressLabel) {\n            this.$progressLabel.text(progressLabel).show();\n        } else {\n            this.$progressLabel.hide();\n        }\n    },\n\n    setProgress: function(progress) {\n        if (progress == 0) {\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n        } else {\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            if (this.progress && progress > this.progress) {\n                this._animateArc(0, progress / 100);\n            } else {\n                this._setArc(0, progress / 100);\n            }\n        }\n\n        this.progress = progress;\n    },\n\n    complete: function() {\n        this._animateArc(0, 1, () => {\n            this._$bgCanvas.velocity('fadeOut');\n\n            this._animateArc(1, 1, () => {\n                this.$a.remove();\n                this.destroy();\n            });\n        });\n    },\n\n    showFailMode: function(message) {\n        if (this.failMode) {\n            return;\n        }\n\n        this.failMode = true;\n        this.progress = null;\n\n        this._$bgCanvas.hide();\n        this._$staticCanvas.hide();\n        this._$hoverCanvas.hide();\n        this._$failCanvas.show();\n\n        this.setDescription(message);\n    },\n\n    hideFailMode: function() {\n        if (!this.failMode) {\n            return;\n        }\n\n        this.failMode = false;\n\n        this._$bgCanvas.show();\n        this._$staticCanvas.show();\n        this._$hoverCanvas.show();\n        this._$failCanvas.hide();\n    },\n\n    _createCanvas: function(id, color) {\n        var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n            ctx = $canvas[0].getContext('2d');\n\n        ctx.strokeStyle = color;\n        ctx.lineWidth = this._lineWidth;\n        ctx.lineCap = 'round';\n        return $canvas;\n    },\n\n    _setArc: function(startPos, endPos) {\n        this._arcStartPos = startPos;\n        this._arcEndPos = endPos;\n\n        this._drawArc(this._staticCtx, startPos, endPos);\n        this._drawArc(this._hoverCtx, startPos, endPos);\n    },\n\n    _drawArc: function(ctx, startPos, endPos) {\n        ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n        ctx.beginPath();\n        ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n    },\n\n    _animateArc: function(targetStartPos, targetEndPos, callback) {\n        if (this._arcStepTimeout) {\n            clearTimeout(this._arcStepTimeout);\n        }\n\n        this._arcStep = 0;\n        this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n        this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n        this._arcAnimateCallback = callback;\n        this._takeNextArcStep();\n    },\n\n    _takeNextArcStep: function() {\n        this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n        this._arcStep++;\n\n        if (this._arcStep < 10) {\n            this._arcStepTimeout = setTimeout(this._takeNextArcStep.bind(this), 50);\n        } else if (this._arcAnimateCallback) {\n            this._arcAnimateCallback();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend({\n    editableGroups: null,\n    $newCategoryBtnGroup: null,\n    $newCategoryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible groups the user has permission to create new categories in\n        this.editableGroups = [];\n\n        for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n            var group = Craft.editableCategoryGroups[i];\n\n            if (this.getSourceByKey('group:' + group.uid)) {\n                this.editableGroups.push(group);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific category group in the URL?\n        if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n\n                if ($source.data('handle') === defaultGroupHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        // Get the handle of the selected source\n        var selectedSourceHandle = this.$source.data('handle');\n\n        var i, href, label;\n\n        // Update the New Category button\n        // ---------------------------------------------------------------------\n\n        if (this.editableGroups.length) {\n            // Remove the old button, if there is one\n            if (this.$newCategoryBtnGroup) {\n                this.$newCategoryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a group that they have permission to create categories in\n            var selectedGroup;\n\n            if (selectedSourceHandle) {\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    if (this.editableGroups[i].handle === selectedSourceHandle) {\n                        selectedGroup = this.editableGroups[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n            // Otherwise only show a menu button\n            if (selectedGroup) {\n                href = this._getGroupTriggerHref(selectedGroup);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                        this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.editableGroups.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n            } else {\n                this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New category'),\n                }).appendTo(this.$newCategoryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    var group = this.editableGroups[i];\n\n                    if (this.settings.context === 'index' || group !== selectedGroup) {\n                        href = this._getGroupTriggerHref(group);\n                        label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newCategoryBtnGroup);\n        }\n\n        // Update the URL if we're on the Categories index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'categories';\n\n            if (selectedSourceHandle) {\n                uri += '/' + selectedSourceHandle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getGroupTriggerHref: function(group) {\n        if (this.settings.context === 'index') {\n            var uri = 'categories/' + group.handle + '/new';\n            if (this.siteId && this.siteId != Craft.primarySiteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        uri += '/' + Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri) + '\"';\n        } else {\n            return 'data-id=\"' + group.id + '\"';\n        }\n    },\n\n    _openCreateCategoryModal: function(groupId) {\n        if (this.$newCategoryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the group\n        var group;\n\n        for (var i = 0; i < this.editableGroups.length; i++) {\n            if (this.editableGroups[i].id == groupId) {\n                group = this.editableGroups[i];\n                break;\n            }\n        }\n\n        if (!group) {\n            return;\n        }\n\n        this.$newCategoryBtn.addClass('inactive');\n        var newCategoryBtnText = this.$newCategoryBtn.text();\n        this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newCategoryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                groupId: groupId\n            },\n            onBeginLoading: () => {\n                this.$newCategoryBtn.addClass('loading');\n            },\n            onEndLoading: () => {\n                this.$newCategoryBtn.removeClass('loading');\n            },\n            onHideHud: () => {\n                this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right group is selected\n                var groupSourceKey = 'group:' + group.uid;\n\n                if (this.sourceKey !== groupSourceKey) {\n                    this.selectSourceByKey(groupSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend({\n    setSettings: function() {\n        this.base.apply(this, arguments);\n        this.settings.sortable = false;\n    },\n\n    getModalSettings: function() {\n        var settings = this.base();\n        settings.hideOnSelect = false;\n        return settings;\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.find('.element');\n    },\n\n    onModalSelect: function(elements) {\n        // Disable the modal\n        this.modal.disable();\n        this.modal.disableCancelBtn();\n        this.modal.disableSelectBtn();\n        this.modal.showFooterSpinner();\n\n        // Get the new category HTML\n        var selectedCategoryIds = this.getSelectedElementIds();\n\n        for (var i = 0; i < elements.length; i++) {\n            selectedCategoryIds.push(elements[i].id);\n        }\n\n        var data = {\n            categoryIds: selectedCategoryIds,\n            siteId: elements[0].siteId,\n            id: this.settings.id,\n            name: this.settings.name,\n            branchLimit: this.settings.branchLimit,\n            selectionLabel: this.settings.selectionLabel\n        };\n\n        Craft.postActionRequest('elements/get-categories-input-html', data, (response, textStatus) => {\n            this.modal.enable();\n            this.modal.enableCancelBtn();\n            this.modal.enableSelectBtn();\n            this.modal.hideFooterSpinner();\n\n            if (textStatus === 'success') {\n                var $newInput = $(response.html),\n                    $newElementsContainer = $newInput.children('.elements');\n\n                this.$elementsContainer.replaceWith($newElementsContainer);\n                this.$elementsContainer = $newElementsContainer;\n                this.resetElements();\n\n                var filteredElements = [];\n\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i],\n                        $element = this.getElementById(element.id);\n\n                    if ($element) {\n                        this.animateElementIntoPlace(element.$element, $element);\n                        filteredElements.push(element);\n                    }\n                }\n\n                this.updateDisabledElementsInModal();\n                this.modal.hide();\n                this.onSelectElements(filteredElements);\n            }\n        });\n    },\n\n    removeElement: function($element) {\n        // Find any descendants this category might have\n        var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n        // Remove our record of them all at once\n        this.removeElements($allCategories);\n\n        // Animate them away one at a time\n        for (var i = 0; i < $allCategories.length; i++) {\n            this._animateCategoryAway($allCategories, i);\n        }\n    },\n\n    _animateCategoryAway: function($allCategories, i) {\n        var callback;\n\n        // Is this the last one?\n        if (i === $allCategories.length - 1) {\n            callback = () => {\n                var $li = $allCategories.first().parent().parent(),\n                    $ul = $li.parent();\n\n                if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                    $li.remove();\n                } else {\n                    $ul.remove();\n                }\n            };\n        }\n\n        var func = () => {\n            this.animateElementAway($allCategories.eq(i), callback);\n        };\n\n        if (i === 0) {\n            func();\n        } else {\n            setTimeout(func, 100 * i);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend({\n    columns: null,\n    rows: null,\n\n    init: function(data) {\n        let columns = data.columns;\n        let rows = data.rows;\n\n        rows.forEach(d => {\n            $.each(d, function(cellIndex) {\n                var column = columns[cellIndex];\n\n                var parseTime;\n\n                switch (column.type) {\n                    case 'date':\n                        parseTime = d3.timeParse('%Y-%m-%d');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'datetime':\n                        parseTime = d3.timeParse('%Y-%m-%d %H:00:00');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'percent':\n                        d[cellIndex] = d[cellIndex] / 100;\n                        break;\n\n                    case 'number':\n                        d[cellIndex] = +d[cellIndex];\n                        break;\n\n                    default:\n                    // do nothing\n                }\n            });\n        });\n\n        this.columns = columns;\n        this.rows = rows;\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend({\n    $container: null,\n    $tip: null,\n\n    init: function($container) {\n        this.$container = $container;\n\n        this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n        this.hide();\n    },\n\n    setContent: function(html) {\n        this.$tip.html(html);\n    },\n\n    setPosition: function(position) {\n        this.$tip.css('left', `${position.left}px`);\n        this.$tip.css('top', `${position.top}px`);\n    },\n\n    show: function() {\n        this.$tip.css('display', 'block');\n    },\n\n    hide: function() {\n        this.$tip.css('display', 'none');\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend({\n    $container: null,\n    $chart: null,\n\n    chartBaseClass: 'cp-chart',\n    dataTable: null,\n\n    formatLocale: null,\n    timeFormatLocale: null,\n    orientation: null,\n\n    svg: null,\n    width: null,\n    height: null,\n\n    init: function(container, settings) {\n        this.$container = container;\n\n        this.setSettings(Craft.charts.BaseChart.defaults);\n        this.setSettings(settings);\n\n        var globalSettings = {\n            formats: window.d3Formats,\n            formatLocaleDefinition: window.d3FormatLocaleDefinition,\n            timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n        };\n\n        this.setSettings(globalSettings);\n\n        d3.select(window).on('resize', () => {\n            this.resize();\n        });\n    },\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n    },\n\n    draw: function(dataTable, settings) {\n        // Settings and chart attributes\n\n        this.setSettings(settings);\n\n        this.dataTable = dataTable;\n        this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n        this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n        this.orientation = this.settings.orientation;\n\n        // Set (or reset) the chart element\n\n        if (this.$chart) {\n            this.$chart.remove();\n        }\n\n        var className = this.chartBaseClass;\n\n        if (this.settings.chartClass) {\n            className += ' ' + this.settings.chartClass;\n        }\n\n        this.$chart = $(`<div class=\"${className}\" />`).appendTo(this.$container);\n    },\n\n    resize: function() {\n        this.draw(this.dataTable, this.settings);\n    },\n\n    onAfterDrawTicks: function() {\n        // White border for ticks' text\n        $('.tick', this.$chart).each(function(tickKey, tick) {\n            var $tickText = $('text', tick);\n\n            var $clone = $tickText.clone();\n            $clone.appendTo(tick);\n\n            $tickText.attr('stroke', '#ffffff');\n            $tickText.attr('stroke-width', 3);\n        });\n    }\n}, {\n    defaults: {\n        formatLocaleDefinition: null,\n        timeFormatLocaleDefinition: null,\n        formats: {\n            numberFormat: ',.2f',\n            percentFormat: ',.2%',\n            currencyFormat: '$,.2f',\n            shortDateFormats: {\n                day: '%-m/%-d',\n                month: '%-m/%y',\n                year: '%Y'\n            }\n        },\n        margin: {top: 0, right: 0, bottom: 0, left: 0},\n        chartClass: null,\n        colors: ['#0594D1', '#DE3800', '#FF9A00', '#009802', '#9B009B']\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend({\n    tip: null,\n    drawingArea: null,\n\n    init: function(container, settings) {\n        this.base(container, Craft.charts.Area.defaults);\n\n        this.setSettings(settings);\n    },\n\n    draw: function(dataTable, settings) {\n        this.base(dataTable, settings);\n\n        if (this.tip) {\n            this.tip = null;\n        }\n\n        var margin = this.getChartMargin();\n\n        this.width = this.$chart.width() - margin.left - margin.right;\n        this.height = this.$chart.height() - margin.top - margin.bottom;\n\n        // Append SVG to chart element\n\n        var svg = {\n            width: this.width + (margin.left + margin.right),\n            height: this.height + (margin.top + margin.bottom),\n            translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n            translateY: margin.top\n        };\n\n        this.svg = d3.select(this.$chart.get(0)).append('svg')\n            .attr('width', svg.width)\n            .attr('height', svg.height);\n\n        this.drawingArea = this.svg.append('g')\n            .attr('transform', `translate(${svg.translateX},${svg.translateY})`);\n\n        // Draw elements\n\n        this.drawTicks();\n        this.drawAxes();\n        this.drawChart();\n        this.drawTipTriggers();\n    },\n\n    drawTicks: function() {\n        // Draw X ticks\n\n        var x = this.getX(true);\n        var xTicks = 3;\n        var xAxis = d3.axisBottom(x)\n            .tickFormat(this.getXFormatter())\n            .ticks(xTicks);\n\n        this.drawingArea.append('g')\n            .attr('class', 'x ticks-axis')\n            .attr('transform', `translate(0, ${this.height})`)\n            .call(xAxis);\n\n        // Draw Y ticks\n\n        var y = this.getY();\n        var yTicks = 2;\n        var yAxis;\n\n        if (this.orientation !== 'rtl') {\n            yAxis = d3.axisLeft(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .call(yAxis);\n        } else {\n            yAxis = d3.axisRight(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .attr('transform', `translate(${this.width},0)`)\n                .call(yAxis);\n        }\n\n        // On after draw ticks\n\n        this.onAfterDrawTicks();\n    },\n\n    drawAxes: function() {\n        if (this.settings.xAxis.showAxis) {\n            var x = this.getX();\n            var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n            this.drawingArea.append('g')\n                .attr('class', 'x axis')\n                .attr('transform', `translate(0, ${this.height})`)\n                .call(xAxis);\n        }\n\n        if (this.settings.yAxis.showAxis) {\n            var y = this.getY();\n            var chartPadding = 0;\n            var yAxis;\n\n            if (this.orientation === 'rtl') {\n                yAxis = d3.axisLeft(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${this.width - chartPadding}, 0)`)\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${chartPadding}, 0)`)\n                    .call(yAxis);\n            }\n        }\n    },\n\n    drawChart: function() {\n        var x = this.getX(true);\n        var y = this.getY();\n\n        // X & Y grid lines\n\n        if (this.settings.xAxis.gridlines) {\n            var xLineAxis = d3.axisBottom(x);\n\n            this.drawingArea.append('g')\n                .attr('class', 'x grid-line')\n                .attr('transform', `translate(0,${this.height})`)\n                .call(xLineAxis\n                    .tickSize(-this.height, 0, 0)\n                    .tickFormat('')\n                );\n        }\n\n        var yTicks = 2;\n\n        if (this.settings.yAxis.gridlines) {\n            var yLineAxis = d3.axisLeft(y);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y grid-line')\n                .attr('transform', 'translate(0 , 0)')\n                .call(yLineAxis\n                    .tickSize(-(this.width), 0)\n                    .tickFormat('')\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks)\n                );\n        }\n\n        // Line\n\n        var line = d3.line()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-line')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', 'none')\n            .style('stroke', this.settings.colors[0])\n            .style('stroke-width', '3px')\n            .attr('d', line);\n\n        // Area\n\n        var area = d3.area()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y0(this.height)\n            .y1(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-area')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', this.settings.colors[0])\n            .style('fill-opacity', '0.3')\n            .attr('d', area);\n\n        // Plots\n\n        if (this.settings.plots) {\n            this.drawingArea.append('g')\n                .attr('class', 'plots')\n                .selectAll('circle')\n                .data(this.dataTable.rows)\n                .enter()\n                .append('circle')\n                .style('fill', this.settings.colors[0])\n                .attr('class', (d, index) => `plot plot-${index}`)\n                .attr('r', 4)\n                .attr('cx', d => x(d[0]))\n                .attr('cy', d => y(d[1]));\n        }\n    },\n\n    drawTipTriggers: function() {\n        if (this.settings.tips) {\n            if (!this.tip) {\n                this.tip = new Craft.charts.Tip(this.$chart);\n            }\n\n            // Define xAxisTickInterval\n\n            var chartMargin = this.getChartMargin();\n            var tickSizeOuter = 6;\n            var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n            var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n            // Tip trigger width\n\n            var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n            // Draw triggers\n\n            var x = this.getX(true);\n            var y = this.getY();\n\n            this.drawingArea.append('g')\n                .attr('class', 'tip-triggers')\n                .selectAll('rect')\n                .data(this.dataTable.rows)\n                .enter().append('rect')\n                .attr('class', 'tip-trigger')\n                .style('fill', 'transparent')\n                .style('fill-opacity', '1')\n                .attr('width', tipTriggerWidth)\n                .attr('height', this.height)\n                .attr('x', d => x(d[0]) - tipTriggerWidth / 2)\n                .on('mouseover', (d, index) => {\n                    // Expand plot\n\n                    this.drawingArea.select('.plot-' + index).attr('r', 5);\n\n                    // Set tip content\n\n                    var $content = $('<div />');\n                    var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                    var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                    $xValue.html(this.getXFormatter()(d[0]));\n                    $yValue.html(this.getYFormatter()(d[1]));\n\n                    var content = $content.get(0);\n\n                    this.tip.setContent(content);\n\n                    // Set tip position\n\n                    var margin = this.getChartMargin();\n\n                    var offset = 24;\n                    var top = (y(d[1]) + offset);\n                    var left;\n\n                    if (this.orientation !== 'rtl') {\n                        left = (x(d[0]) + margin.left + offset);\n\n                        var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                        var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                        if (calcLeft > maxLeft) {\n                            left = x(d[0]) - (this.tip.$tip.width() + offset);\n                        }\n                    } else {\n                        left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                    }\n\n                    if (left < 0) {\n                        left = (x(d[0]) + margin.left + offset);\n                    }\n\n                    var position = {\n                        top: top,\n                        left: left\n                    };\n\n                    this.tip.setPosition(position);\n\n                    // Show tip\n\n                    this.tip.show();\n                })\n                .on('mouseout', (d, index) => {\n                    // Unexpand Plot\n                    this.drawingArea.select('.plot-' + index).attr('r', 4);\n\n                    // Hide tip\n                    this.tip.hide();\n                });\n        }\n    },\n\n    getChartMargin: function() {\n        var margin = this.settings.margin;\n\n        // Estimate the max width of y ticks and set it as the left margin\n\n        var values = this.getYTickValues();\n        var yTicksMaxWidth = 0;\n\n        $.each(values, (key, value) => {\n            var characterWidth = 8;\n\n            var formatter = this.getYFormatter();\n\n            var formattedValue = formatter(value);\n            var computedTickWidth = formattedValue.length * characterWidth;\n\n            if (computedTickWidth > yTicksMaxWidth) {\n                yTicksMaxWidth = computedTickWidth;\n            }\n        });\n\n        yTicksMaxWidth += 10;\n\n        margin.left = yTicksMaxWidth;\n\n        return margin;\n    },\n\n    getX: function(padded) {\n        var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomain = [xDomainMin, xDomainMax];\n\n        if (this.orientation === 'rtl') {\n            xDomain = [xDomainMax, xDomainMin];\n        }\n\n        var left = 0;\n        var right = 0;\n\n        if (padded) {\n            left = 0;\n            right = 0;\n        }\n\n        var x = d3.scaleTime().range([left, (this.width - right)]);\n\n        x.domain(xDomain);\n\n        return x;\n    },\n\n    getY: function() {\n        var yDomain = [0, this.getYMaxValue()];\n\n        var y = d3.scaleLinear().range([this.height, 0]);\n\n        y.domain(yDomain);\n\n        return y;\n    },\n\n    getXFormatter: function() {\n        var formatter;\n\n        if (this.settings.xAxis.formatter !== $.noop) {\n            formatter = this.settings.xAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYFormatter: function() {\n        var formatter;\n\n        if (this.settings.yAxis.formatter !== $.noop) {\n            formatter = this.settings.yAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYMaxValue: function() {\n        return d3.max(this.dataTable.rows, function(d) {\n            return d[1];\n        });\n    },\n\n    getYTickValues: function() {\n        var maxValue = this.getYMaxValue();\n\n        if (maxValue > 1) {\n            return [(maxValue / 2), maxValue];\n        } else {\n            return [0, maxValue];\n        }\n    }\n}, {\n    defaults: {\n        chartClass: 'area',\n        margin: {top: 25, right: 5, bottom: 25, left: 0},\n        plots: true,\n        tips: true,\n        xAxis: {\n            gridlines: false,\n            showAxis: true,\n            formatter: $.noop\n        },\n        yAxis: {\n            gridlines: true,\n            showAxis: false,\n            formatter: $.noop\n        }\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = `0${duration.hours}`;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = `0${duration.minutes}`;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = `0${duration.seconds}`;\n        }\n\n        return `${duration.hours}:${duration.minutes}:${duration.seconds}`;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(`${chartSettings.formats.shortDateFormats.day} %H:00:00`);\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.find('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .attr({\n                'aria-controls': this.$input.attr('id'),\n                'aria-label': Craft.t('app', 'Color picker'),\n            })\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorInput, 'click', function (ev) {\n            ev.stopPropagation();\n        });\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'input', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        let val = this.$input.val();\n\n        if (val !== (val = Craft.trim(val))) {\n            this.$input.val(val);\n        }\n\n        // Chop off the #\n        if (val.length && val[0] === '#') {\n            val = val.substr(1);\n            this.$input.val(val);\n        }\n\n        // If empty, set the preview to transparent\n        if (!val.length) {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Now normalize it for the UI stuff\n        if (val.length === 3) {\n            val = val[0].repeat(2) + val[1].repeat(2) + val[2].repeat(2);\n        }\n\n        if (val.match(/^[0-9a-f]{6}$/i)) {\n            this.$colorPreview.css('background-color', `#${val}`);\n            if (this.$colorInput) {\n                this.$colorInput.val(`#${val}`);\n            }\n        } else {\n            this.$colorPreview.css('background-color', '');\n        }\n    },\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function() {\n        if (Craft.ColorInput._browserSupportsColorInputs === null) {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend({\n    elementIndex: null,\n    $elementIndexSourcesContainer: null,\n\n    $sidebar: null,\n    $sourcesContainer: null,\n    $sourceSettingsContainer: null,\n    $newHeadingBtn: null,\n    $footer: null,\n    $footerBtnContainer: null,\n    $saveBtn: null,\n    $cancelBtn: null,\n    $saveSpinner: null,\n    $loadingSpinner: null,\n\n    sourceSort: null,\n    sources: null,\n    selectedSource: null,\n    updateSourcesOnSave: false,\n\n    availableTableAttributes: null,\n\n    init: function(elementIndex, settings) {\n        this.base();\n\n        this.setSettings(settings, {\n            resizable: true\n        });\n\n        this.elementIndex = elementIndex;\n        this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n        var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n        this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n        this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n        this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n        this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n        this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n        this.$newHeadingBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit add icon',\n            text: Craft.t('app', 'New heading'),\n        }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n        this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n        this.setContainer($container);\n        this.show();\n\n        var data = {\n            elementType: this.elementIndex.elementType\n        };\n\n        Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, (response, textStatus) => {\n            this.$loadingSpinner.remove();\n\n            if (textStatus === 'success') {\n                this.$saveBtn.removeClass('disabled');\n                this.buildModal(response);\n            }\n        });\n\n        this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n        this.addListener(this.$cancelBtn, 'click', 'hide');\n        this.addListener(this.$saveBtn, 'click', 'save');\n        this.addListener(this.$container, 'submit', 'save');\n    },\n\n    buildModal: function(response) {\n        // Store the available table attribute options\n        this.availableTableAttributes = response.availableTableAttributes;\n\n        // Create the source item sorter\n        this.sourceSort = new Garnish.DragSort({\n            handle: '.move',\n            axis: 'y',\n            onSortChange: () => {\n                this.updateSourcesOnSave = true;\n            },\n        });\n\n        // Create the sources\n        this.sources = [];\n\n        for (var i = 0; i < response.sources.length; i++) {\n            var source = this.addSource(response.sources[i]);\n            this.sources.push(source);\n        }\n\n        if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n            this.sources[0].select();\n        }\n    },\n\n    addSource: function(sourceData) {\n        var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n        var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n        var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n        $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n        var source;\n\n        // Is this a heading?\n        if (typeof sourceData.heading !== 'undefined') {\n            $item.addClass('heading');\n            $itemInput.attr('name', 'sourceOrder[][heading]');\n            source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.heading);\n        } else {\n            $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n            source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.label);\n\n            // Select this by default?\n            if ((this.elementIndex.sourceKey + '/').substr(0, sourceData.key.length + 1) === sourceData.key + '/') {\n                source.select();\n            }\n        }\n\n        this.sourceSort.addItems($item);\n\n        return source;\n    },\n\n    handleNewHeadingBtnClick: function() {\n        var source = this.addSource({\n            heading: ''\n        });\n\n        Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n        source.select();\n        this.updateSourcesOnSave = true;\n    },\n\n    save: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n            return;\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n        var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n        Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success' && response.success) {\n                // Have any changes been made to the source list?\n                if (this.updateSourcesOnSave) {\n                    if (this.$elementIndexSourcesContainer.length) {\n                        var $lastSource = null,\n                            $pendingHeading;\n\n                        for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                            var $item = this.sourceSort.$items.eq(i),\n                                source = $item.data('source'),\n                                $indexSource = source.getIndexSource();\n\n                            if (!$indexSource) {\n                                continue;\n                            }\n\n                            if (source.isHeading()) {\n                                $pendingHeading = $indexSource;\n                            } else {\n                                if ($pendingHeading) {\n                                    this.appendSource($pendingHeading, $lastSource);\n                                    $lastSource = $pendingHeading;\n                                    $pendingHeading = null;\n                                }\n\n                                this.appendSource($indexSource, $lastSource);\n                                $lastSource = $indexSource;\n                            }\n                        }\n\n                        // Remove any additional sources (most likely just old headings)\n                        if ($lastSource) {\n                            var $extraSources = $lastSource.nextAll();\n                            this.elementIndex.sourceSelect.removeItems($extraSources);\n                            $extraSources.remove();\n                        }\n                    }\n                }\n\n                // If a source is selected, have the element index select that one by default on the next request\n                if (this.selectedSource && this.selectedSource.sourceData.key) {\n                    this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                    this.elementIndex.updateElements();\n                }\n\n                Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                this.hide();\n            } else {\n                var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                Craft.cp.displayError(error);\n            }\n        });\n    },\n\n    appendSource: function($source, $lastSource) {\n        if (!$lastSource) {\n            $source.prependTo(this.$elementIndexSourcesContainer);\n        } else {\n            $source.insertAfter($lastSource);\n        }\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.sources.length; i++) {\n            this.sources[i].destroy();\n        }\n\n        delete this.sources;\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend({\n    modal: null,\n\n    $item: null,\n    $itemLabel: null,\n    $itemInput: null,\n    $settingsContainer: null,\n\n    sourceData: null,\n\n    init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n        this.modal = modal;\n        this.$item = $item;\n        this.$itemLabel = $itemLabel;\n        this.$itemInput = $itemInput;\n        this.sourceData = sourceData;\n\n        this.$item.data('source', this);\n\n        this.addListener(this.$item, 'click', 'select');\n    },\n\n    isHeading: function() {\n        return false;\n    },\n\n    isSelected: function() {\n        return (this.modal.selectedSource === this);\n    },\n\n    select: function() {\n        if (this.isSelected()) {\n            return;\n        }\n\n        if (this.modal.selectedSource) {\n            this.modal.selectedSource.deselect();\n        }\n\n        this.$item.addClass('sel');\n        this.modal.selectedSource = this;\n\n        if (!this.$settingsContainer) {\n            this.$settingsContainer = this.createSettings()\n                .appendTo(this.modal.$sourceSettingsContainer);\n        } else {\n            this.$settingsContainer.removeClass('hidden');\n        }\n\n        this.modal.$sourceSettingsContainer.scrollTop(0);\n    },\n\n    createSettings: function() {\n        return $('<div/>');\n    },\n\n    getIndexSource: function() {\n    },\n\n    deselect: function() {\n        this.$item.removeClass('sel');\n        this.modal.selectedSource = null;\n        this.$settingsContainer.addClass('hidden');\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.text(val);\n    },\n\n    destroy: function() {\n        this.$item.data('source', null);\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend({\n    createSettings: function() {\n        let $settings = $('<div/>').append(Craft.ui.createTextField({\n            label: Craft.t('app', 'Header Column Heading'),\n            id: 'defaultHeaderColHeading' + Math.floor(Math.random() * 100000),\n            name: `sources[${this.sourceData.key}][headerColHeading]`,\n            value: this.sourceData.headerColHeading,\n            placeholder: this.sourceData.defaultHeaderColHeading,\n        }));\n\n        if (this.sourceData.tableAttributes.length) {\n            $settings.append(this.createTableColumnsField());\n        }\n\n        return $settings;\n    },\n\n    createTableColumnsField: function() {\n        // Create the title column option\n        let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n        let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n        // Create the rest of the options\n        let $columnCheckboxes = $('<div/>');\n        let selectedAttributes = [firstKey];\n\n        $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n        // Add the selected columns, in the selected order\n        for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n            let [key, label] = this.sourceData.tableAttributes[i];\n            $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n            selectedAttributes.push(key);\n        }\n\n        // Add the rest\n        let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n        availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n        for (let i = 0; i < availableTableAttributes.length; i++) {\n            let [key, label] = availableTableAttributes[i];\n            if (!Craft.inArray(key, selectedAttributes)) {\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n            }\n        }\n\n        new Garnish.DragSort($columnCheckboxes.children(), {\n            handle: '.move',\n            axis: 'y'\n        });\n\n        return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n            label: Craft.t('app', 'Table Columns'),\n            instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n        });\n    },\n\n    createTableColumnOption: function(key, label, first, checked) {\n        var $option = $('<div class=\"customize-sources-table-column\"/>')\n            .append('<div class=\"icon move\"/>')\n            .append(\n                Craft.ui.createCheckbox({\n                    label: Craft.escapeHtml(label),\n                    name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                    value: key,\n                    checked: checked,\n                    disabled: first\n                })\n            );\n\n        if (first) {\n            $option.children('.move').addClass('disabled');\n        }\n\n        return $option;\n    },\n\n    getIndexSource: function() {\n        var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n        if ($source) {\n            return $source.closest('li');\n        }\n    }\n});\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend({\n    $labelField: null,\n    $labelInput: null,\n    $deleteBtn: null,\n\n    isHeading: function() {\n        return true;\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.trigger('focus');\n    },\n\n    createSettings: function() {\n        let $settings = $('<div/>');\n\n        this.$labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Heading'),\n            instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n            value: this.sourceData.heading\n        }).appendTo($settings);\n\n        this.$labelInput = this.$labelField.find('.text');\n\n        $settings.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n            .appendTo($settings);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n        return $settings;\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n        this.$itemInput.val(val);\n    },\n\n    deleteHeading: function() {\n        this.modal.sourceSort.removeItems(this.$item);\n        this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n        this.modal.updateSourcesOnSave = true;\n\n        if (this.isSelected()) {\n            this.deselect();\n\n            if (this.modal.sources.length) {\n                this.modal.sources[0].select();\n            }\n        }\n\n        this.$item.remove();\n        this.$settingsContainer.remove();\n        this.destroy();\n    },\n\n    getIndexSource: function() {\n        var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n        return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend({\n    $table: null,\n\n    init: function(table, settings) {\n        this.$table = $(table);\n        var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n        settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n        settings.container = this.$table.children('tbody');\n        settings.helper = this.getHelper.bind(this);\n        settings.caboose = '<tr/>';\n        settings.axis = Garnish.Y_AXIS;\n        settings.magnetStrength = 4;\n        settings.helperLagBase = 1.5;\n\n        this.base($rows, settings);\n    },\n\n    getHelper: function($helperRow) {\n        var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n            $table = $('<table/>').appendTo($helper),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the table width and classes\n        $table.width(this.$table.width());\n        $table.prop('className', this.$table.prop('className'));\n\n        // Copy the column widths\n        var $firstRow = this.$table.find('tr:first'),\n            $cells = $firstRow.children(),\n            $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            $($helperCells[i]).width($($cells[i]).width());\n        }\n\n        return $helper;\n    }\n}, {\n    defaults: {\n        handle: '.move',\n        helperClass: 'datatablesorthelper'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend({\n    id: null,\n    userId: null,\n\n    $deleteActionRadios: null,\n    $deleteSpinner: null,\n\n    userSelect: null,\n    _deleting: false,\n\n    init: function(userId, settings) {\n        this.id = Math.floor(Math.random() * 1000000000);\n        this.userId = userId;\n        settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n        let $form = $(\n            '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n            Craft.getCsrfInput() +\n            '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n            (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n            (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n            '</form>'\n        ).appendTo(Garnish.$bod);\n        let $body = $(\n            '<div class=\"body\">' +\n            '<div class=\"content-summary\">' +\n            '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n            '<ul class=\"bullets\"></ul>' +\n            '</div>' +\n            '<div class=\"options\">' +\n            '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n            '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n            '<div class=\"elements\"></div>' +\n            '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n            '</div>' +\n            '</div>' +\n            '<div>' +\n            '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n            '</div>' +\n            '</div>'\n        ).appendTo($form);\n        let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo($buttons);\n\n        if (settings.contentSummary.length) {\n            for (let i = 0; i < settings.contentSummary.length; i++) {\n                $body.find('ul').append($('<li/>', {text: settings.contentSummary[i]}));\n            }\n        } else {\n            $body.find('ul').remove();\n        }\n\n        this.$deleteActionRadios = $body.find('input[type=radio]');\n        this.$deleteSubmitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: this._submitBtnLabel(false),\n        }).appendTo($buttons);\n        this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n        var idParam;\n\n        if (Garnish.isArray(this.userId)) {\n            idParam = ['and'];\n\n            for (let i = 0; i < this.userId.length; i++) {\n                idParam.push('not ' + this.userId[i]);\n            }\n        } else {\n            idParam = 'not ' + this.userId;\n        }\n\n        this.userSelect = new Craft.BaseElementSelectInput({\n            id: 'transferselect' + this.id,\n            name: 'transferContentTo',\n            elementType: 'craft\\\\elements\\\\User',\n            criteria: {\n                id: idParam\n            },\n            limit: 1,\n            modalSettings: {\n                closeOtherModals: false\n            },\n            onSelectElements: () => {\n                this.updateSizeAndPosition();\n\n                if (!this.$deleteActionRadios.first().prop('checked')) {\n                    this.$deleteActionRadios.first().trigger('click');\n                } else {\n                    this.validateDeleteInputs();\n                }\n            },\n            onRemoveElements: this.validateDeleteInputs.bind(this),\n            selectable: false,\n            editable: false\n        });\n\n        this.addListener($cancelBtn, 'click', 'hide');\n\n        this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n        this.addListener($form, 'submit', 'handleSubmit');\n\n        this.base($form, settings);\n    },\n\n    _submitBtnLabel: function(withContent) {\n        let message = withContent\n            ? 'Delete {num, plural, =1{user} other{users}} and content'\n            : 'Delete {num, plural, =1{user} other{users}}';\n\n        return Craft.t('app', message, {\n            num: Garnish.isArray(this.userId) ? this.userId.length : 1,\n        });\n    },\n\n    validateDeleteInputs: function() {\n        var validates = false;\n\n        if (this.$deleteActionRadios.eq(1).prop('checked')) {\n            validates = true;\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(true));\n        } else {\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(false));\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n        }\n\n        this.updateSizeAndPosition();\n\n        if (validates) {\n            this.$deleteSubmitBtn.removeClass('disabled');\n        } else {\n            this.$deleteSubmitBtn.addClass('disabled');\n        }\n\n        return validates;\n    },\n\n    handleSubmit: function(ev) {\n        if (this._deleting || !this.validateDeleteInputs()) {\n            ev.preventDefault();\n            return;\n        }\n\n        this.$deleteSubmitBtn.addClass('active');\n        this.$deleteSpinner.removeClass('hidden');\n        this.disable();\n        this.userSelect.disable();\n        this._deleting = true;\n\n        // Let the onSubmit callback prevent the form from getting submitted\n        try {\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        } catch (e) {\n            ev.preventDefault();\n            this.$deleteSpinner.addClass('hidden');\n            throw e;\n        }\n    },\n\n    onFadeIn: function() {\n        // Auto-focus the first radio\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$deleteActionRadios.first().trigger('focus');\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        contentSummary: [],\n        onSubmit: $.noop,\n        redirect: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend({\n    $revisionBtn: null,\n    $revisionLabel: null,\n    $spinner: null,\n    $expandSiteStatusesBtn: null,\n    $statusIcon: null,\n\n    $editMetaBtn: null,\n    metaHud: null,\n    $nameTextInput: null,\n    $saveMetaBtn: null,\n\n    $siteStatusPane: null,\n    $globalLightswitch: null,\n    $siteLightswitches: null,\n    $addlSiteField: null,\n\n    siteIds: null,\n    newSiteIds: null,\n\n    lastSerializedValue: null,\n    listeningForChanges: false,\n    pauseLevel: 0,\n    timeout: null,\n    saving: false,\n    saveXhr: null,\n    queue: null,\n    submittingForm: false,\n\n    duplicatedElements: null,\n    errors: null,\n\n    openingPreview: false,\n    preview: null,\n    previewToken: null,\n    createdProvisionalDraft: false,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.DraftEditor.defaults);\n\n        this.queue = [];\n        this.duplicatedElements = {};\n\n        this.siteIds = Object.keys(this.settings.siteStatuses).map(siteId => {\n            return parseInt(siteId)\n        });\n\n        this.$revisionBtn = $('#context-btn');\n        this.$revisionLabel = $('#revision-label');\n        this.$spinner = $('#revision-spinner');\n        this.$expandSiteStatusesBtn = $('#expand-status-btn');\n        this.$statusIcon = $('#revision-status');\n\n        if (this.settings.canEditMultipleSites) {\n            this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n        }\n\n        if (this.settings.previewTargets.length) {\n            if (this.settings.enablePreview) {\n                this.addListener($('#preview-btn'), 'click', 'openPreview');\n            }\n\n            const $shareBtn = $('#share-btn');\n\n            if (this.settings.previewTargets.length === 1) {\n                this.addListener($shareBtn, 'click', function() {\n                    this.openShareLink(this.settings.previewTargets[0].url);\n                });\n            } else {\n                this.createShareMenu($shareBtn);\n            }\n        }\n\n        // If this is a revision, we're done here\n        if (this.settings.revisionId) {\n            return;\n        }\n\n        // Override the serializer to use our own\n        Craft.cp.$primaryForm.data('serializer', () => this.serializeForm(true));\n\n        this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n        if (this.settings.isProvisionalDraft) {\n            this.initForProvisionalDraft();\n        } else if (this.settings.draftId && !this.settings.isUnpublishedDraft) {\n            this.initForDraft();\n        } else if (!this.settings.canUpdateSource) {\n            // Override the save shortcut to create a draft too\n            this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', ev => {\n                if (ev.saveShortcut) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }\n            });\n        }\n\n        if (Craft.autosaveDrafts) {\n            this.listenForChanges();\n        }\n\n        this.addListener(this.$statusIcon, 'click', () => {\n            this.showStatusHud(this.$statusIcon);\n        });\n    },\n\n    listenForChanges: function() {\n        if (this.listeningForChanges || this.pauseLevel > 0 || !Craft.autosaveDrafts) {\n            return;\n        }\n\n        this.listeningForChanges = true;\n\n        this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n            if ($(ev.target).is(this.statusIcons())) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            // If they are typing, wait half a second before checking the form\n            if (['keypress', 'keyup', 'change'].includes(ev.type)) {\n                this.timeout = setTimeout(this.checkForm.bind(this), 500);\n            } else {\n                this.checkForm();\n            }\n        });\n    },\n\n    stopListeningForChanges: function() {\n        if (!this.listeningForChanges) {\n            return;\n        }\n\n        this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n        clearTimeout(this.timeout);\n        this.listeningForChanges = false;\n    },\n\n    pause: function() {\n        this.pauseLevel++;\n        this.stopListeningForChanges();\n    },\n\n    resume: function() {\n        if (this.pauseLevel === 0) {\n            throw 'Craft.DraftEditor::resume() should only be called after pause().';\n        }\n\n        // Only actually resume operation if this has been called the same\n        // number of times that pause() was called\n        this.pauseLevel--;\n        if (this.pauseLevel === 0) {\n            if (Craft.autosaveDrafts) {\n                this.checkForm();\n            }\n            this.listenForChanges();\n        }\n    },\n\n    initForProvisionalDraft: function() {\n        let $button = $('#discard-changes');\n        if (!$button.length) {\n            $button = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu.$container.find('#discard-changes') : null;\n        }\n        if ($button && $button.length) {\n            this.addListener($button, 'click', () => {\n                if (confirm(Craft.t('app', 'Are you sure you want to discard your changes?'))) {\n                    Craft.submitForm(Craft.cp.$primaryForm, {\n                        action: this.settings.deleteDraftAction,\n                        redirect: this.settings.hashedCpEditUrl,\n                        params: {\n                            draftId: this.settings.draftId,\n                            provisional: this.settings.isProvisionalDraft,\n                        },\n                    });\n                }\n            });\n        }\n    },\n\n    initForDraft: function() {\n        // Create the edit draft button\n        this.createEditMetaBtn();\n\n        if (this.settings.canUpdateSource) {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n                alt: true\n            }, () => {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.publishDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }, 0);\n        }\n    },\n\n    expandSiteStatuses: function() {\n        this.removeListener(this.$expandSiteStatusesBtn, 'click');\n        this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', () => {\n            this.$expandSiteStatusesBtn.remove();\n        });\n\n        const $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n        this.$siteStatusPane = $enabledForSiteField.parent();\n\n        // If this is a revision, just show the site statuses statically and be done\n        if (this.settings.revisionId) {\n            this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n            return;\n        }\n\n        $enabledForSiteField.addClass('nested');\n        const $globalField = Craft.ui.createLightswitchField({\n            id: 'enabled',\n            label: Craft.t('app', 'Enabled'),\n            name: 'enabled',\n        }).insertBefore($enabledForSiteField);\n        $globalField.find('label').css('font-weight', 'bold');\n        this.$globalLightswitch = $globalField.find('.lightswitch');\n\n        if (!this.settings.revisionId) {\n            this._showField($globalField);\n        }\n\n        // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n        const originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n            ? '1'\n            : (this.settings.enabledForSite ? '-' : '');\n        const originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n            '=' + (this.settings.enabledForSite ? '1' : '');\n\n        this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n            .on('change', this._updateGlobalStatus.bind(this));\n\n        this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n\n        let serializedStatuses = `enabled=${originalEnabledValue}`;\n        for (let i = 0; i < this.$siteLightswitches.length; i++) {\n            const $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n            serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n        }\n\n        Craft.cp.$primaryForm.data('initialSerializedValue',\n            Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n        // Are there additional sites that can be added?\n        if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n            this._createAddlSiteField();\n        }\n\n        this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n        this._updateGlobalStatus();\n    },\n\n    /**\n     * @returns {Array}\n     */\n    _getOtherSupportedSites: function() {\n        return Craft.sites.filter(s => s.id != this.settings.siteId && this.siteIds.includes(s.id));\n    },\n\n    _showField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .height(0)\n            .velocity({height}, 'fast', () => {\n                $field.css({\n                    overflow: '',\n                    height: '',\n                });\n            });\n    },\n\n    _removeField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .velocity({height: 0}, 'fast', () => {\n                $field.remove();\n            });\n    },\n\n    _updateGlobalStatus: function() {\n        let allEnabled = true, allDisabled = true;\n        this.$siteLightswitches.each(function() {\n            const enabled = $(this).data('lightswitch').on;\n            if (enabled) {\n                allDisabled = false;\n            } else {\n                allEnabled = false;\n            }\n            if (!allEnabled && !allDisabled) {\n                return false;\n            }\n        });\n        if (allEnabled) {\n            this.$globalLightswitch.data('lightswitch').turnOn(true);\n        } else if (allDisabled) {\n            this.$globalLightswitch.data('lightswitch').turnOff(true);\n        } else {\n            this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n        }\n    },\n\n    _updateSiteStatuses: function() {\n        const enabled = this.$globalLightswitch.data('lightswitch').on;\n        this.$siteLightswitches.each(function() {\n            if (enabled) {\n                $(this).data('lightswitch').turnOn(true);\n            } else {\n                $(this).data('lightswitch').turnOff(true);\n            }\n        });\n    },\n\n    _createSiteStatusField: function(site) {\n        const $field = Craft.ui.createLightswitchField({\n            id: `enabledForSite-${site.id}`,\n            label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n            name: `enabledForSite[${site.id}]`,\n            on: this.settings.siteStatuses.hasOwnProperty(site.id)\n                ? this.settings.siteStatuses[site.id]\n                : true,\n            disabled: !!this.settings.revisionId,\n        });\n\n        if (this.$addlSiteField) {\n            $field.insertBefore(this.$addlSiteField);\n        } else {\n            $field.appendTo(this.$siteStatusPane);\n        }\n\n        if (!this.settings.revisionId) {\n            $field.addClass('nested');\n            const $lightswitch = $field.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n        }\n\n        this._showField($field);\n\n        return $field;\n    },\n\n    _createAddlSiteField: function() {\n        const addlSites = Craft.sites.filter(s => {\n            return !this.siteIds.includes(s.id) && this.settings.addlSiteIds.includes(s.id);\n        });\n\n        if (!addlSites.length) {\n            return;\n        }\n\n        const $addlSiteSelectContainer = Craft.ui.createSelect({\n            options: [\n                {label: Craft.t('app', 'Add a site…')},\n                ...addlSites.map(s => {\n                    return {label: s.name, value: s.id};\n                }),\n            ],\n        }).addClass('fullwidth');\n\n        this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n            .addClass('nested add')\n            .appendTo(this.$siteStatusPane);\n\n        const $addlSiteSelect = $addlSiteSelectContainer.find('select');\n\n        $addlSiteSelect.on('change', () => {\n            const siteId = parseInt($addlSiteSelect.val());\n            const site = Craft.sites.find(s => s.id === siteId);\n\n            if (!site) {\n                return;\n            }\n\n            this._createSiteStatusField(site);\n\n            $addlSiteSelect\n                .val('')\n                .find(`option[value=\"${siteId}\"]`).remove();\n\n            if (this.newSiteIds === null) {\n                this.newSiteIds = [];\n            }\n\n            this.siteIds.push(siteId);\n            this.newSiteIds.push(siteId);\n\n            // Was that the last site?\n            if ($addlSiteSelect.find('option').length === 1) {\n                this._removeField(this.$addlSiteField);\n            }\n        });\n\n        this._showField(this.$addlSiteField);\n    },\n\n    showStatusHud: function(target) {\n        let bodyHtml;\n\n        if (this.errors === null) {\n            bodyHtml = `<p>${this._saveSuccessMessage()}</p>`;\n        } else {\n            bodyHtml = `<p class=\"error\">${this._saveFailMessage()}</p>`;\n\n            if (this.errors.length) {\n                bodyHtml += '<ul class=\"errors\">' +\n                    this.errors.map(e => `<li>${Craft.escapeHtml(e)}</li>`).join('') +\n                    '</ul>';\n            }\n        }\n\n        const hud = new Garnish.HUD(target, bodyHtml, {\n            onHide: function() {\n                hud.destroy();\n            }\n        });\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveSuccessMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes have been stored.')\n            : Craft.t('app', 'The draft has been saved.');\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveFailMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes could not be stored.')\n            : Craft.t('app', 'The draft could not be saved.');\n    },\n\n    spinners: function() {\n        return this.preview\n            ? this.$spinner.add(this.preview.$spinner)\n            : this.$spinner;\n    },\n\n    statusIcons: function() {\n        return this.preview\n            ? this.$statusIcon.add(this.preview.$statusIcon)\n            : this.$statusIcon;\n    },\n\n    createEditMetaBtn: function() {\n        this.$editMetaBtn = $('<button/>', {\n            type: 'button',\n            'class': 'btn edit icon',\n            title: Craft.t('app', 'Edit draft settings'),\n        }).appendTo($('#context-btngroup'));\n        this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n    },\n\n    createShareMenu: function($shareBtn) {\n        $shareBtn.addClass('menubtn');\n\n        const $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n        const $ul = $('<ul/>').appendTo($menu);\n\n        this.settings.previewTargets.forEach(target => {\n            const $li = $('<li/>').appendTo($ul);\n            const $a = $('<a/>', {\n                text: target.label,\n            }).appendTo($li);\n            this.addListener($a, 'click', () => {\n                this.openShareLink(target.url);\n            });\n        });\n    },\n\n    getPreviewToken: function() {\n        return new Promise((resolve, reject) => {\n            if (this.previewToken) {\n                resolve(this.previewToken);\n                return;\n            }\n\n            Craft.sendActionRequest('POST', 'preview/create-token', {\n                data: {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                    provisional: this.settings.isProvisionalDraft,\n                },\n            }).then(response => {\n                this.previewToken = response.data.token;\n                resolve(this.previewToken);\n            }).catch(reject);\n        });\n    },\n\n    getTokenizedPreviewUrl: function(url, randoParam) {\n        return new Promise((resolve, reject) => {\n            const params = {};\n\n            if (randoParam || !this.settings.isLive) {\n                // Randomize the URL so CDNs don't return cached pages\n                params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n            }\n\n            if (this.settings.siteToken) {\n                params[Craft.siteToken] = this.settings.siteToken;\n            }\n\n            // No need for a token if we're looking at a live element\n            if (this.settings.isLive) {\n                resolve(Craft.getUrl(url, params));\n                return;\n            }\n\n            this.getPreviewToken().then(function(token) {\n                params[Craft.tokenParam] = token;\n                resolve(Craft.getUrl(url, params));\n            }).catch(reject);\n        });\n    },\n\n    openShareLink: function(url) {\n        this.getTokenizedPreviewUrl(url).then(function(url) {\n            window.open(url);\n        });\n    },\n\n    getPreview: function() {\n        if (!this.preview) {\n            this.preview = new Craft.Preview(this);\n        }\n        return this.preview;\n    },\n\n    openPreview: function() {\n        return new Promise((resolve, reject) => {\n            this.openingPreview = true;\n            this.ensureIsDraftOrRevision(true)\n                .then(() => {\n                    this.getPreview().open();\n                    this.openingPreview = false;\n                    resolve();\n                })\n                .catch(reject);\n        })\n    },\n\n    ensureIsDraftOrRevision: function(onlyIfChanged) {\n        return new Promise((resolve, reject) => {\n            if (!this.settings.draftId && !this.settings.revisionId) {\n                if (\n                    onlyIfChanged &&\n                    this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                ) {\n                    resolve();\n                    return;\n                }\n\n                this.createDraft()\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                resolve();\n            }\n        });\n    },\n\n    serializeForm: function(removeActionParams) {\n        let data = Craft.cp.$primaryForm.serialize();\n\n        if (this.isPreviewActive()) {\n            // Replace the temp input with the preview form data\n            data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n        }\n\n        if (removeActionParams && !this.settings.isUnpublishedDraft) {\n            // Remove action and redirect params\n            data = data.replace(/&action=[^&]*/, '');\n            data = data.replace(/&redirect=[^&]*/, '');\n        }\n\n        return data;\n    },\n\n    checkForm: function(force) {\n        // If this isn't a draft and there's no active preview, then there's nothing to check\n        if (this.settings.revisionId || this.pauseLevel > 0) {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.timeout = null;\n\n        // Has anything changed?\n        const data = this.serializeForm(true);\n        if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n            const provisional = (!this.settings.draftId || this.settings.isProvisionalDraft) && !this.settings.revisionId;\n            this.saveDraft(data, provisional);\n        }\n    },\n\n    isPreviewActive: function() {\n        return this.preview && this.preview.isActive;\n    },\n\n    createDraft: function() {\n        return new Promise((resolve, reject) => {\n            this.saveDraft(this.serializeForm(true))\n                .then(resolve)\n                .catch(reject);\n        });\n    },\n\n    /**\n     * @param {object} data\n     * @returns {Promise<unknown>}\n     */\n    saveDraft: function(data) {\n        return new Promise((resolve, reject) => {\n            // Ignore if we're already submitting the main form\n            if (this.submittingForm) {\n                reject();\n                return;\n            }\n\n            if (this.saving) {\n                this.queue.push(() => {\n                    this.checkForm()\n                });\n                return;\n            }\n\n            this.lastSerializedValue = data;\n            this.saving = true;\n            const $spinners = this.spinners().removeClass('hidden');\n            const $statusIcons = this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('invisible checkmark-icon alert-icon fade-out')\n                .addClass('hidden');\n            if (this.$saveMetaBtn) {\n                this.$saveMetaBtn.addClass('active');\n            }\n            this.errors = null;\n\n            const url = Craft.getActionUrl(this.settings.saveDraftAction);\n            let preparedData = this.prepareData(data);\n\n            // Are we saving a provisional draft?\n            if (this.settings.isProvisionalDraft || !this.settings.draftId) {\n                preparedData += '&provisional=1';\n            }\n\n            this.saveXhr = Craft.postActionRequest(url, preparedData, (response, textStatus) => {\n                $spinners.addClass('hidden');\n                if (this.$saveMetaBtn) {\n                    this.$saveMetaBtn.removeClass('active');\n                }\n                this.saving = false;\n\n                if (textStatus === 'abort') {\n                    return;\n                }\n\n                if (textStatus !== 'success' || response.errors) {\n                    this.errors = (response ? response.errors : null) || [];\n                    $statusIcons\n                        .velocity('stop')\n                        .css('opacity', '')\n                        .removeClass('hidden checkmark-icon')\n                        .addClass('alert-icon')\n                        .attr('title', this._saveFailMessage());\n                    reject();\n                    return;\n                }\n\n                const createdProvisionalDraft = !this.settings.draftId;\n\n                if (createdProvisionalDraft) {\n                    this.settings.isProvisionalDraft = true;\n                    this.createdProvisionalDraft = true;\n                }\n\n                if (response.title) {\n                    $('#header h1').text(response.title);\n                }\n\n                if (response.docTitle) {\n                    document.title = response.docTitle;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        this.$revisionLabel.append(\n                            $('<span/>', {\n                                class: 'extralight',\n                                text: ` — ${Craft.t('app', 'Edited')}`,\n                            })\n                        );\n                    }\n                } else {\n                    this.$revisionLabel.text(response.draftName);\n                    this.settings.draftName = response.draftName;\n                }\n\n                let revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                // Did we just add a site?\n                if (this.newSiteIds) {\n                    // Do we need to create the revision menu?\n                    if (!revisionMenu) {\n                        this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                        new Garnish.MenuBtn(this.$revisionBtn);\n                        revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                        revisionMenu.$container.removeClass('hidden');\n                    }\n                    this.newSiteIds.forEach(siteId => {\n                        const $option = revisionMenu.$options.filter(`[data-site-id=${siteId}]`);\n                        $option.find('.status').removeClass('disabled').addClass('enabled');\n                        const $li = $option.parent().removeClass('hidden');\n                        $li.closest('.site-group').removeClass('hidden');\n                    });\n                    revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                    this.newSiteIds = null;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        // Replace the action\n                        const $actionInput = $('#action').attr('value', this.settings.publishDraftAction);\n\n                        // Update the editor settings\n                        this.settings.draftId = response.draftId;\n                        this.settings.isLive = false;\n                        this.previewToken = null;\n\n                        if (revisionMenu) {\n                            // Add edited description to the “Current” option\n                            revisionMenu.$container.find('#current-revision').append(\n                                $('<div/>', {\n                                    class: 'edited-desc',\n                                }).append(\n                                    $('<p/>', {\n                                        text: Craft.t('app', 'Showing your unsaved changes.'),\n                                    })\n                                ).append(\n                                    $('<button/>', {\n                                        id: 'discard-changes',\n                                        class: 'btn',\n                                        text: Craft.t('app', 'Discard changes'),\n                                    })\n                                )\n                            );\n                        }\n\n                        this.initForProvisionalDraft();\n                    }\n                } else if (revisionMenu) {\n                    revisionMenu.$options.filter('.sel').find('.draft-name').text(response.draftName);\n                    revisionMenu.$options.filter('.sel').find('.draft-meta').text(response.creator\n                        ? Craft.t('app', 'Saved {timestamp} by {creator}', {\n                            timestamp: response.timestamp,\n                            creator: response.creator\n                        })\n                        : Craft.t('app', 'Saved {timestamp}', {\n                            timestamp: response.timestamp,\n                        })\n                    );\n                }\n\n                // Did the controller send us updated preview targets?\n                if (\n                    response.previewTargets &&\n                    JSON.stringify(response.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                ) {\n                    this.updatePreviewTargets(response.previewTargets);\n                }\n\n                this.afterUpdate(data);\n\n                if (createdProvisionalDraft) {\n                    this.trigger('createProvisionalDraft');\n                }\n\n                if (this.$nameTextInput) {\n                    this.checkMetaValues();\n                }\n\n                for (const oldId in response.duplicatedElements) {\n                    if (oldId != this.settings.sourceId && response.duplicatedElements.hasOwnProperty(oldId)) {\n                        this.duplicatedElements[oldId] = response.duplicatedElements[oldId];\n                    }\n                }\n\n                resolve();\n            });\n        });\n    },\n\n    /**\n     * @param {string} data\n     * @returns {string}\n     */\n    prepareData: function(data) {\n        // Swap out element IDs with their duplicated ones\n        data = this.swapDuplicatedElementIds(data);\n\n        // Add the draft info\n        if (this.settings.draftId) {\n            data += `&draftId=${this.settings.draftId}`;\n            if (this.settings.isProvisionalDraft) {\n                data += '&provisional=1';\n            }\n        }\n\n        if (this.settings.draftName !== null) {\n            data += `&draftName=${this.settings.draftName}`;\n        }\n\n        // Filter out anything that hasn't changed\n        const initialData = this.swapDuplicatedElementIds(Craft.cp.$primaryForm.data('initialSerializedValue'));\n        return Craft.findDeltaData(initialData, data, this.getDeltaNames());\n    },\n\n    /**\n     * @param {string} data\n     * @returns {string}\n     */\n    swapDuplicatedElementIds: function(data) {\n        const idsRE = Object.keys(this.duplicatedElements).join('|');\n        if (idsRE === '') {\n            return data;\n        }\n        const lb = encodeURIComponent('[');\n        const rb = encodeURIComponent(']');\n        // Keep replacing field IDs until data stops changing\n        while (true) {\n            if (data === (\n                data = data\n                    // &fields[...][X]\n                    .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                        return pre + this.duplicatedElements[id] + post;\n                    })\n                    // &fields[...=X\n                    .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                        return pre + this.duplicatedElements[id];\n                    })\n            )) {\n                break;\n            }\n        }\n        return data;\n    },\n\n    getDeltaNames: function() {\n        const deltaNames = Craft.deltaNames.slice(0);\n        for (let i = 0; i < deltaNames.length; i++) {\n            for (const oldId in this.duplicatedElements) {\n                if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                    deltaNames[i] = deltaNames[i].replace('][' + oldId + ']', '][' + this.duplicatedElements[oldId] + ']');\n                }\n            }\n        }\n        return deltaNames;\n    },\n\n    updatePreviewTargets: function(previewTargets) {\n        previewTargets.forEach(newTarget => {\n            const currentTarget = this.settings.previewTargets.find(t => t.label === newTarget.label);\n            if (currentTarget) {\n                currentTarget.url = newTarget.url;\n            }\n        });\n    },\n\n    afterUpdate: function(data) {\n        Craft.cp.$primaryForm.data('initialSerializedValue', data);\n        Craft.initialDeltaValues = {};\n        const $statusIcons = this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden')\n            .addClass('checkmark-icon')\n            .attr('title', this._saveSuccessMessage());\n\n        if (!Craft.autosaveDrafts) {\n            // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n            $statusIcons\n                .velocity('stop')\n                .velocity({\n                    opacity: 0,\n                }, {\n                    delay: 2000,\n                    complete: () => {\n                        $statusIcons.addClass('hidden');\n                    },\n                });\n        }\n\n        this.trigger('update');\n\n        this.nextInQueue();\n    },\n\n    nextInQueue: function() {\n        if (this.queue.length) {\n            this.queue.shift()();\n        }\n    },\n\n    showMetaHud: function() {\n        if (!this.metaHud) {\n            this.createMetaHud();\n            this.onMetaHudShow();\n        } else {\n            this.metaHud.show();\n        }\n\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$nameTextInput.trigger('focus');\n        }\n    },\n\n    createMetaHud: function() {\n        const $hudBody = $('<div/>');\n\n        // Add the Name field\n        const $nameField = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n        const $nameInputContainer = $('<div class=\"input\"/>').appendTo($nameField);\n        this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($nameInputContainer).val(this.settings.draftName);\n\n        // HUD footer\n        const $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n        $('<div class=\"flex-grow\"></div>').appendTo($footer);\n        this.$saveMetaBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo($footer);\n\n        this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n            onSubmit: this.saveMeta.bind(this)\n        });\n\n        this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n\n        this.metaHud.on('show', this.onMetaHudShow.bind(this));\n        this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n        this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n    },\n\n    onMetaHudShow: function() {\n        this.$editMetaBtn.addClass('active');\n    },\n\n    onMetaHudHide: function() {\n        this.$editMetaBtn.removeClass('active');\n    },\n\n    onMetaHudEscape: function() {\n        this.$nameTextInput.val(this.settings.draftName);\n    },\n\n    checkMetaValues: function() {\n        if (\n            this.$nameTextInput.val() &&\n            this.$nameTextInput.val() !== this.settings.draftName\n        ) {\n            this.$saveMetaBtn.removeClass('disabled');\n            return true;\n        }\n\n        this.$saveMetaBtn.addClass('disabled');\n        return false;\n    },\n\n    shakeMetaHud: function() {\n        Garnish.shake(this.metaHud.$hud);\n    },\n\n    saveMeta: function() {\n        if (!this.checkMetaValues()) {\n            this.shakeMetaHud();\n            return;\n        }\n\n        this.settings.draftName = this.$nameTextInput.val();\n\n        this.metaHud.hide();\n        this.checkForm(true);\n    },\n\n    handleFormSubmit: function(ev) {\n        ev.preventDefault();\n\n        // Prevent double form submits\n        if (this.submittingForm) {\n            return;\n        }\n\n        // If this a draft and was this a normal save (either via submit button or save shortcut),\n        // then trigger an autosave\n        if (\n            this.settings.draftId &&\n            !this.settings.isProvisionalDraft &&\n            (typeof ev.autosave === 'undefined' || ev.autosave) &&\n            (ev.saveShortcut || (ev.customTrigger && ev.customTrigger.data('action') === this.settings.saveDraftAction))\n        ) {\n            this.checkForm(true);\n            return;\n        }\n\n        // Prevent the normal unload confirmation dialog\n        Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n        // Abort the current save request if there is one\n        if (this.saving) {\n            this.saveXhr.abort();\n        }\n\n        // Duplicate the form with normalized data\n        const data = this.prepareData(this.serializeForm(false));\n        const $form = Craft.createForm(data);\n\n        $form.appendTo(Garnish.$bod);\n        $form.submit();\n        this.submittingForm = true;\n    },\n}, {\n    defaults: {\n        elementType: null,\n        sourceId: null,\n        siteId: null,\n        isUnpublishedDraft: false,\n        enabled: false,\n        enabledForSite: false,\n        isLive: false,\n        isProvisionalDraft: false,\n        siteStatuses: null,\n        addlSiteIds: [],\n        cpEditUrl: null,\n        draftId: null,\n        revisionId: null,\n        draftName: null,\n        canEditMultipleSites: false,\n        canUpdateSource: false,\n        saveDraftAction: null,\n        deleteDraftAction: null,\n        publishDraftAction: null,\n        hashedCpEditUrl: null,\n        hashedAddAnotherRedirectUrl: null,\n        enablePreview: false,\n        previewTargets: [],\n        siteToken: null,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend({\n    callback: $.noop,\n\n    init: function(source, target, callback) {\n        this.callback = callback;\n        this.base(source, target);\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return this.callback(sourceVal);\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend({\n    initialized: false,\n\n    id: null,\n    baseName: null,\n    columns: null,\n    sorter: null,\n    biggestId: -1,\n\n    $table: null,\n    $tbody: null,\n    $addRowBtn: null,\n\n    rowCount: 0,\n    hasMaxRows: false,\n    hasMinRows: false,\n\n    radioCheckboxes: null,\n\n    init: function(id, baseName, columns, settings) {\n        this.id = id;\n        this.baseName = baseName;\n        this.columns = columns;\n        this.setSettings(settings, Craft.EditableTable.defaults);\n        this.radioCheckboxes = {};\n\n        this.$table = $('#' + id);\n        this.$tbody = this.$table.children('tbody');\n        this.rowCount = this.$tbody.find('tr').length;\n\n        // Is this already an editable table?\n        if (this.$table.data('editable-table')) {\n            Garnish.log('Double-instantiating an editable table on an element');\n            this.$table.data('editable-table').destroy();\n        }\n\n        this.$table.data('editable-table', this);\n\n        this.sorter = new Craft.DataTableSorter(this.$table, {\n            helperClass: 'editabletablesorthelper',\n            copyDraggeeInputValuesToHelper: true\n        });\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            // Give everything a chance to initialize\n            setTimeout(this.initializeIfVisible.bind(this), 500);\n        }\n\n        if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n            for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                this.addRow()\n            }\n        }\n    },\n\n    isVisible: function() {\n        return (this.$table.parent().height() > 0);\n    },\n\n    initialize: function() {\n        if (this.initialized) {\n            return false;\n        }\n\n        this.initialized = true;\n        this.removeListener(Garnish.$win, 'resize');\n\n        var $rows = this.$tbody.children();\n\n        for (var i = 0; i < $rows.length; i++) {\n            this.createRowObj($rows[i]);\n        }\n\n        this.$addRowBtn = this.$table.next('.add');\n        this.updateAddRowButton();\n        this.addListener(this.$addRowBtn, 'activate', 'addRow');\n        return true;\n    },\n    initializeIfVisible: function() {\n        this.removeListener(Garnish.$win, 'resize');\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n        }\n    },\n    updateAddRowButton: function() {\n        if (!this.canAddRow()) {\n            this.$addRowBtn.css('opacity', '0.2');\n            this.$addRowBtn.css('pointer-events', 'none');\n        } else {\n            this.$addRowBtn.css('opacity', '1');\n            this.$addRowBtn.css('pointer-events', 'auto');\n        }\n    },\n    canDeleteRow: function() {\n        return (this.rowCount > this.settings.minRows);\n    },\n    deleteRow: function(row) {\n        if (!this.canDeleteRow()) {\n            return;\n        }\n\n        this.sorter.removeItems(row.$tr);\n        row.$tr.remove();\n\n        this.rowCount--;\n\n        this.updateAddRowButton();\n        if (this.rowCount === 0) {\n            this.$table.addClass('hidden');\n        }\n\n        // onDeleteRow callback\n        this.settings.onDeleteRow(row.$tr);\n\n        row.destroy();\n    },\n    canAddRow: function() {\n        if (this.settings.staticRows) {\n            return false;\n        }\n\n        if (this.settings.maxRows) {\n            return (this.rowCount < this.settings.maxRows);\n        }\n\n        return true;\n    },\n    addRow: function(focus, prepend) {\n        if (!this.canAddRow()) {\n            return;\n        }\n\n        var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n            $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n        if (prepend) {\n            $tr.prependTo(this.$tbody);\n        } else {\n            $tr.appendTo(this.$tbody);\n        }\n\n        var row = this.createRowObj($tr);\n        this.sorter.addItems($tr);\n\n        // Focus the first input in the row\n        if (focus !== false) {\n            $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n        }\n\n        this.rowCount++;\n        this.updateAddRowButton();\n        this.$table.removeClass('hidden');\n\n        // onAddRow callback\n        this.settings.onAddRow($tr);\n\n        return row;\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n    },\n\n    createRowObj: function($tr) {\n        return new Craft.EditableTable.Row(this, $tr);\n    },\n\n    focusOnPrevRow: function($tr, tdIndex, blurTd) {\n        var $prevTr = $tr.prev('tr');\n        var prevRow;\n\n        if ($prevTr.length) {\n            prevRow = $prevTr.data('editable-table-row');\n        } else {\n            prevRow = this.addRow(false, true);\n        }\n\n        // Focus on the same cell in the previous row\n        if (!prevRow) {\n            return;\n        }\n\n        if (!prevRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($prevTr) {\n                this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    focusOnNextRow: function($tr, tdIndex, blurTd) {\n        var $nextTr = $tr.next('tr');\n        var nextRow;\n\n        if ($nextTr.length) {\n            nextRow = $nextTr.data('editable-table-row');\n        } else {\n            nextRow = this.addRow(false);\n        }\n\n        // Focus on the same cell in the next row\n        if (!nextRow) {\n            return;\n        }\n\n        if (!nextRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($nextTr) {\n                this.focusOnNextRow($nextTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    importData: function(data, row, tdIndex) {\n        let lines = data.split(/\\r?\\n|\\r/);\n        for (let i = 0; i < lines.length; i++) {\n            let values = lines[i].split(\"\\t\");\n            for (let j = 0; j < values.length; j++) {\n                let value = values[j];\n                row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                    .val(value)\n                    .trigger('input');\n            }\n\n            // move onto the next row\n            let $nextTr = row.$tr.next('tr');\n            if ($nextTr.length) {\n                row = $nextTr.data('editable-table-row');\n            } else {\n                row = this.addRow(false);\n            }\n        }\n    },\n}, {\n    textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n    defaults: {\n        rowIdPrefix: '',\n        defaultValues: {},\n        staticRows: false,\n        minRows: null,\n        maxRows: null,\n        onAddRow: $.noop,\n        onDeleteRow: $.noop\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        var $tr = $('<tr/>', {\n            'data-id': rowId\n        });\n\n        for (var colId in columns) {\n            if (!columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            var col = columns[colId],\n                value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                $cell;\n\n            if (col.type === 'heading') {\n                $cell = $('<th/>', {\n                    'scope': 'row',\n                    'class': col['class'],\n                    'html': value\n                });\n            } else {\n                var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                $cell = $('<td/>', {\n                    'class': `${col.class} ${col.type}-cell`,\n                    'width': col.width\n                });\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $cell.addClass('textual');\n                }\n\n                if (col.code) {\n                    $cell.addClass('code');\n                }\n\n                switch (col.type) {\n                    case 'checkbox':\n                        $('<div class=\"checkbox-wrapper\"/>')\n                            .append(Craft.ui.createCheckbox({\n                                    name: name,\n                                    value: col.value || '1',\n                                    checked: !!value\n                                })\n                            )\n                            .appendTo($cell);\n                        break;\n\n                    case 'color':\n                        Craft.ui.createColorInput({\n                            name: name,\n                            value: value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'date':\n                        Craft.ui.createDateInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'lightswitch':\n                        Craft.ui.createLightswitch({\n                            name: name,\n                            value: col.value || '1',\n                            on: !!value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'select':\n                        Craft.ui.createSelect({\n                            name: name,\n                            options: col.options,\n                            value: value || (function() {\n                                for (var key in col.options) {\n                                    if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                        return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                    }\n                                }\n                                return null;\n                            })(),\n                            'class': 'small'\n                        }).appendTo($cell);\n                        break;\n\n                    case 'time':\n                        Craft.ui.createTimeInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'email':\n                    case 'url':\n                        Craft.ui.createTextInput({\n                            name: name,\n                            value: value,\n                            type: col.type,\n                            placeholder: col.placeholder || null,\n                        }).appendTo($cell);\n                        break;\n\n                    default:\n                        $('<textarea/>', {\n                            'name': name,\n                            'rows': col.rows || 1,\n                            'val': value,\n                            'placeholder': col.placeholder\n                        }).appendTo($cell);\n                }\n            }\n\n            $cell.appendTo($tr);\n        }\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'move icon',\n                'title': Craft.t('app', 'Reorder')\n            })\n        ).appendTo($tr);\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Delete')\n            })\n        ).appendTo($tr);\n\n        return $tr;\n    }\n});\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend({\n    table: null,\n    id: null,\n    niceTexts: null,\n\n    $tr: null,\n    $tds: null,\n    tds: null,\n    $textareas: null,\n    $deleteBtn: null,\n\n    init: function(table, tr) {\n        this.table = table;\n        this.$tr = $(tr);\n        this.$tds = this.$tr.children();\n        this.tds = [];\n        this.id = this.$tr.attr('data-id');\n\n        this.$tr.data('editable-table-row', this);\n\n        // Get the row ID, sans prefix\n        var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n        if (id > this.table.biggestId) {\n            this.table.biggestId = id;\n        }\n\n        this.$textareas = $();\n        this.niceTexts = [];\n        var textareasByColId = {};\n\n        var i = 0;\n        var colId, col, td, $textarea, $checkbox;\n\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n            td = this.tds[colId] = this.$tds[i];\n\n            if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                $textarea = $('textarea', td);\n                this.$textareas = this.$textareas.add($textarea);\n\n                this.addListener($textarea, 'focus', 'onTextareaFocus');\n                this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                this.niceTexts.push(new Garnish.NiceText($textarea, {\n                    onHeightChange: this.onTextareaHeightChange.bind(this)\n                }));\n\n                this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                $textarea.trigger('input');\n\n                if (col.type !== 'multiline') {\n                    this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                }\n\n                textareasByColId[colId] = $textarea;\n            } else if (col.type === 'checkbox') {\n                $checkbox = $('input[type=\"checkbox\"]', td);\n\n                if (col.radioMode) {\n                    if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                        this.table.radioCheckboxes[colId] = [];\n                    }\n                    this.table.radioCheckboxes[colId].push($checkbox[0]);\n                    this.addListener($checkbox, 'change', {colId}, 'onRadioCheckboxChange');\n                }\n\n                if (col.toggle) {\n                    this.addListener($checkbox, 'change', {colId}, function(ev) {\n                        this.applyToggleCheckbox(ev.data.colId);\n                    });\n                }\n            }\n\n            if (!$(td).hasClass('disabled')) {\n                this.addListener(td, 'click', {td}, function(ev) {\n                    if (ev.target === ev.data.td) {\n                        $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                    }\n                });\n            }\n\n            i++;\n        }\n\n        // Now that all of the text cells have been nice-ified, let's normalize the heights\n        this.onTextareaHeightChange();\n\n        // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n            col = this.table.columns[colId];\n            if (col.type === 'checkbox' && col.toggle) {\n                this.applyToggleCheckbox(colId);\n            }\n        }\n\n        // Now look for any autopopulate columns\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n\n            if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                    allowNonAlphaStart: true\n                });\n            }\n        }\n\n        var $deleteBtn = this.$tr.children().last().find('.delete');\n        this.addListener($deleteBtn, 'click', 'deleteRow');\n\n        var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n        this.addListener($inputs, 'focus', function(ev) {\n            $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n        });\n        this.addListener($inputs, 'blur', function(ev) {\n            $(ev.currentTarget).closest('td').removeClass('focus');\n        });\n    },\n\n    onTextareaFocus: function(ev) {\n        this.onTextareaHeightChange();\n\n        var $textarea = $(ev.currentTarget);\n\n        if ($textarea.data('ignoreNextFocus')) {\n            $textarea.data('ignoreNextFocus', false);\n            return;\n        }\n\n        setTimeout(function() {\n            Craft.selectFullValue($textarea);\n        }, 0);\n    },\n\n    onRadioCheckboxChange: function(ev) {\n        if (ev.currentTarget.checked) {\n            for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                checkbox.checked = (checkbox === ev.currentTarget);\n            }\n        }\n    },\n\n    applyToggleCheckbox: function(checkboxColId) {\n        var checkboxCol = this.table.columns[checkboxColId];\n        var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n        var colId, colIndex, neg;\n        for (var i = 0; i < checkboxCol.toggle.length; i++) {\n            colId = checkboxCol.toggle[i];\n            colIndex = this.table.colum;\n            neg = colId[0] === '!';\n            if (neg) {\n                colId = colId.substr(1);\n            }\n            if ((checked && !neg) || (!checked && neg)) {\n                $(this.tds[colId])\n                    .removeClass('disabled')\n                    .find('textarea, input').prop('disabled', false);\n            } else {\n                $(this.tds[colId])\n                    .addClass('disabled')\n                    .find('textarea, input').prop('disabled', true);\n            }\n        }\n    },\n\n    ignoreNextTextareaFocus: function(ev) {\n        $.data(ev.currentTarget, 'ignoreNextFocus', true);\n    },\n\n    handleKeypress: function(ev) {\n        var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n        var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n        // Going to the next/previous row?\n        if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n            ev.preventDefault();\n            if (ev.shiftKey) {\n                this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            } else {\n                this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            }\n            return;\n        }\n\n        // Was this an invalid number character?\n        if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n            ev.preventDefault();\n        }\n    },\n\n    handlePaste: function(ev) {\n        let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n        if (!data.match(/[\\t\\r\\n]/)) {\n            return;\n        }\n        ev.preventDefault();\n        this.table.importData(data, this, ev.data.tdIndex);\n    },\n\n    validateValue: function(ev) {\n        if (ev.data.type === 'multiline') {\n            return;\n        }\n\n        var safeValue;\n\n        if (ev.data.type === 'number') {\n            // Only grab the number at the beginning of the value (if any)\n            var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n            if (match !== null) {\n                safeValue = match[1];\n            } else {\n                safeValue = '';\n            }\n        } else {\n            // Just strip any newlines\n            safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n        }\n\n        if (safeValue !== ev.currentTarget.value) {\n            ev.currentTarget.value = safeValue;\n        }\n    },\n\n    onTextareaHeightChange: function() {\n        // Keep all the textareas' heights in sync\n        var tallestTextareaHeight = -1;\n\n        for (var i = 0; i < this.niceTexts.length; i++) {\n            if (this.niceTexts[i].height > tallestTextareaHeight) {\n                tallestTextareaHeight = this.niceTexts[i].height;\n            }\n        }\n\n        this.$textareas.css('min-height', tallestTextareaHeight);\n\n        // If the <td> is still taller, go with that instead\n        var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n        if (tdHeight > tallestTextareaHeight) {\n            this.$textareas.css('min-height', tdHeight);\n        }\n    },\n\n    deleteRow: function() {\n        this.table.deleteRow(this);\n    }\n}, {\n    numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend({\n    maxLevels: null,\n    newChildUrl: null,\n    $trigger: null,\n    $selectedItems: null,\n    triggerEnabled: true,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n        this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n        // Do we have a custom handler?\n        if (this.settings.activate) {\n            // Prevent the element index's click handler\n            this.$trigger.data('custom-handler', true);\n\n            // Is this a custom trigger?\n            if (this.$trigger.prop('nodeName') === 'FORM') {\n                this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n            } else {\n                this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n            }\n        }\n\n        this.updateTrigger();\n        Craft.elementIndex.on('selectionChange', this.updateTrigger.bind(this));\n    },\n\n    updateTrigger: function() {\n        // Ignore if the last element was just unselected\n        if (Craft.elementIndex.getSelectedElements().length === 0) {\n            return;\n        }\n\n        if (this.validateSelection()) {\n            this.enableTrigger();\n        } else {\n            this.disableTrigger();\n        }\n    },\n\n    /**\n     * Determines if this action can be performed on the currently selected elements.\n     *\n     * @return boolean\n     */\n    validateSelection: function() {\n        var valid = true;\n        this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n        if (!this.settings.batch && this.$selectedItems.length > 1) {\n            valid = false;\n        } else if (typeof this.settings.validateSelection === 'function') {\n            valid = this.settings.validateSelection(this.$selectedItems);\n        }\n\n        return valid;\n    },\n\n    enableTrigger: function() {\n        if (this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.removeClass('disabled');\n        this.triggerEnabled = true;\n    },\n\n    disableTrigger: function() {\n        if (!this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.addClass('disabled');\n        this.triggerEnabled = false;\n    },\n\n    handleTriggerActivation: function(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (this.triggerEnabled) {\n            this.settings.activate(this.$selectedItems);\n        }\n    }\n}, {\n    defaults: {\n        type: null,\n        batch: true,\n        validateSelection: null,\n        activate: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend({\n    queue: null,\n    workers: [],\n\n    init: function() {\n        this.queue = [];\n\n        for (var i = 0; i < 3; i++) {\n            this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n        }\n    },\n\n    load: function($elements) {\n        // Only immediately load the visible images\n        let $thumbs = $elements.find('.elementthumb');\n        for (let i = 0; i < $thumbs.length; i++) {\n            let $thumb = $thumbs.eq(i);\n            let $scrollParent = $thumb.scrollParent();\n            if (this.isVisible($thumb, $scrollParent)) {\n                this.addToQueue($thumb[0]);\n            } else {\n                let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                $scrollParent.on(`scroll.${key}`, {\n                    $thumb: $thumb,\n                    $scrollParent: $scrollParent,\n                    key: key,\n                }, (ev) => {\n                    if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                        delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                        $scrollParent.off(`scroll.${ev.data.key}`);\n                        this.addToQueue(ev.data.$thumb[0]);\n                    }\n                });\n            }\n        }\n    },\n\n    addToQueue: function(thumb) {\n        this.queue.push(thumb);\n\n        // See if there are any inactive workers\n        for (var i = 0; i < this.workers.length; i++) {\n            if (!this.workers[i].active) {\n                this.workers[i].loadNext();\n            }\n        }\n    },\n\n    isVisible: function($thumb, $scrollParent) {\n        let thumbOffset = $thumb.offset().top;\n        let scrollParentOffset, scrollParentHeight;\n        if ($scrollParent[0] === document) {\n            scrollParentOffset = $scrollParent.scrollTop();\n            scrollParentHeight = Garnish.$win.height();\n        } else {\n            scrollParentOffset = $scrollParent.offset().top;\n            scrollParentHeight = $scrollParent.height();\n        }\n        return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.workers.length; i++) {\n            this.workers[i].destroy();\n        }\n\n        this.base();\n    }\n}, {\n    invisibleThumbs: {},\n    retryAll: function() {\n        for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n            let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n            delete Craft.ElementThumbLoader.invisibleThumbs[key];\n            $scrollParent.off(`scroll.${key}`);\n            queue.load($thumb.parent());\n        }\n    }\n});\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend({\n    loader: null,\n    active: false,\n\n    init: function(loader) {\n        this.loader = loader;\n    },\n\n    loadNext: function() {\n        var container = this.loader.queue.shift();\n        if (typeof container === 'undefined') {\n            this.active = false;\n            return;\n        }\n\n        this.active = true;\n        var $container = $(container);\n        if ($container.find('img').length) {\n            this.loadNext();\n            return;\n        }\n        var $img = $('<img/>', {\n            sizes: $container.attr('data-sizes'),\n            srcset: $container.attr('data-srcset'),\n            alt: ''\n        });\n        this.addListener($img, 'load,error', 'loadNext');\n        $img.appendTo($container);\n        picturefill({\n            elements: [$img[0]]\n        });\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend({\n    $form: null,\n    inputs: null,\n\n    init: function(form, inputs) {\n        this.$form = $(form);\n\n        // Only check specific inputs?\n        if (typeof inputs !== 'undefined') {\n            this.inputs = [];\n            inputs = $.makeArray(inputs);\n\n            for (var i = 0; i < inputs.length; i++) {\n                var $inputs = $(inputs[i]);\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $inputs.eq(j);\n\n                    this.inputs.push({\n                        input: $input,\n                        val: Garnish.getInputPostVal($input)\n                    });\n                }\n            }\n        }\n\n        this.addListener(this.$form, 'submit', 'handleFormSubmit');\n    },\n\n    handleFormSubmit: function(ev) {\n        // Ignore if we're in the middle of getting the elevated session timeout\n        if (Craft.elevatedSessionManager.fetchingTimeout) {\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            return;\n        }\n\n        // Are we only interested in certain inputs?\n        if (this.inputs) {\n            var inputsChanged = false;\n            var $input;\n\n            for (var i = 0; i < this.inputs.length; i++) {\n                $input = this.inputs[i].input;\n                // Is this a password input?\n                if ($input.data('passwordInput')) {\n                    $input = $input.data('passwordInput').$currentInput;\n                }\n\n                // Has this input's value changed?\n                if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                    inputsChanged = true;\n                    break;\n                }\n            }\n\n            if (!inputsChanged) {\n                // No need to interrupt the submit\n                return;\n            }\n        }\n\n        // Prevent the form from submitting until the user has an elevated session\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n        Craft.elevatedSessionManager.requireElevatedSession(this.submitForm.bind(this));\n    },\n\n    submitForm: function() {\n        // Don't let handleFormSubmit() interrupt this time\n        this.disable();\n        this.$form.trigger('submit');\n        this.enable();\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend({\n    fetchingTimeout: false,\n\n    passwordModal: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $submitBtn: null,\n    $errorPara: null,\n\n    callback: null,\n\n    /**\n     * Requires that the user has an elevated session.\n     *\n     * @param {function} callback The callback function that should be called once the user has an elevated session\n     */\n    requireElevatedSession: function(callback) {\n        this.callback = callback;\n\n        // Check the time remaining on the user's elevated session (if any)\n        this.fetchingTimeout = true;\n\n        Craft.postActionRequest('users/get-elevated-session-timeout', (response, textStatus) => {\n            this.fetchingTimeout = false;\n\n            if (textStatus === 'success') {\n                // Is there still enough time left or has it been disabled?\n                if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                    this.callback();\n                } else {\n                    // Show the password modal\n                    this.showPasswordModal();\n                }\n            }\n        });\n    },\n\n    showPasswordModal: function() {\n        if (!this.passwordModal) {\n            var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<td/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Submit'),\n            }).appendTo($buttonContainer);\n            this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.passwordModal = new Garnish.Modal($passwordModal, {\n                closeOtherModals: false,\n                onFadeIn: () => {\n                    setTimeout(this.focusPasswordInput.bind(this), 100);\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($passwordModal, 'submit', 'submitPassword');\n        } else {\n            this.passwordModal.show();\n        }\n    },\n\n    focusPasswordInput: function() {\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$passwordInput.trigger('focus');\n        }\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$submitBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$submitBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    submitPassword: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (!this.validatePassword()) {\n            return;\n        }\n\n        this.$passwordSpinner.removeClass('hidden');\n        this.clearLoginError();\n\n        var data = {\n            currentPassword: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/start-elevated-session', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.passwordModal.hide();\n                    this.callback();\n                } else {\n                    this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                    Garnish.shake(this.passwordModal.$container);\n                    this.focusPasswordInput();\n                }\n            } else {\n                this.showPasswordError();\n            }\n        });\n    },\n\n    showPasswordError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$errorPara.text(error);\n        this.passwordModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showPasswordError('');\n    }\n}, {\n    minSafeElevatedSessionTimeout: 5\n});\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend({\n    publishableSections: null,\n    $newEntryBtnGroup: null,\n    $newEntryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible sections the user has permission to create new entries in\n        this.publishableSections = [];\n\n        for (var i = 0; i < Craft.publishableSections.length; i++) {\n            var section = Craft.publishableSections[i];\n\n            if (this.getSourceByKey('section:' + section.uid)) {\n                this.publishableSections.push(section);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific section in the URL?\n        if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n            if (defaultSectionHandle === 'singles') {\n                return 'singles';\n            } else {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultSectionHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        var handle;\n\n        // Get the handle of the selected source\n        if (this.$source.data('key') === 'singles') {\n            handle = 'singles';\n        } else {\n            handle = this.$source.data('handle');\n        }\n\n        // Update the New Entry button\n        // ---------------------------------------------------------------------\n\n        var i, href, label;\n\n        if (this.publishableSections.length) {\n            // Remove the old button, if there is one\n            if (this.$newEntryBtnGroup) {\n                this.$newEntryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a section that they have permission to create entries in\n            var selectedSection;\n\n            if (handle) {\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    if (this.publishableSections[i].handle === handle) {\n                        selectedSection = this.publishableSections[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n            // Otherwise only show a menu button\n            if (selectedSection) {\n                href = this._getSectionTriggerHref(selectedSection);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                        this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.publishableSections.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n            } else {\n                this.$newEntryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New entry'),\n                }).appendTo(this.$newEntryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    var section = this.publishableSections[i];\n\n                    if (\n                        (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                        (this.settings.context !== 'index' && section !== selectedSection)\n                    ) {\n                        href = this._getSectionTriggerHref(section);\n                        label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newEntryBtnGroup);\n        }\n\n        // Update the URL if we're on the Entries index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'entries';\n\n            if (handle) {\n                uri += '/' + handle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getSectionTriggerHref: function(section) {\n        if (this.settings.context === 'index') {\n            var uri = 'entries/' + section.handle + '/new';\n            let params = {};\n            if (this.siteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        params.site = Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n        } else {\n            return 'data-id=\"' + section.id + '\"';\n        }\n    },\n\n    _openCreateEntryModal: function(sectionId) {\n        if (this.$newEntryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the section\n        var section;\n\n        for (var i = 0; i < this.publishableSections.length; i++) {\n            if (this.publishableSections[i].id == sectionId) {\n                section = this.publishableSections[i];\n                break;\n            }\n        }\n\n        if (!section) {\n            return;\n        }\n\n        this.$newEntryBtn.addClass('inactive');\n        var newEntryBtnText = this.$newEntryBtn.text();\n        this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newEntryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                sectionId: sectionId,\n                typeId: section.entryTypes[0].id,\n                enabled: section.canPublish ? 1 : 0,\n            },\n            onBeginLoading: () => {\n                this.$newEntryBtn.addClass('loading');\n            },\n            onEndLoading: () => {\n                this.$newEntryBtn.removeClass('loading');\n            },\n            onHideHud: () => {\n                this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right section is selected\n                var sectionSourceKey = 'section:' + section.uid;\n\n                if (this.sourceKey !== sectionSourceKey) {\n                    this.selectSourceByKey(sectionSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n\n/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: this.onTabOptionSelect.bind(this)\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const $labelSpan = $tab.find('.tabs .tab span');\n        const oldName = $labelSpan.text();\n        const newName = this.promptForTabName(oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    promptForTabName: function(oldName) {\n        return Craft.escapeHtml(prompt(Craft.t('app', 'Give your tab a name.'), oldName));\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const name = this.promptForTabName();\n        if (!name) {\n            return;\n        }\n\n        const $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>${name}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend({\n    $toggle: null,\n    targetPrefix: null,\n    targetSelector: null,\n    reverseTargetSelector: null,\n\n    _$target: null,\n    _$reverseTarget: null,\n    type: null,\n\n    init: function(toggle) {\n        this.$toggle = $(toggle);\n\n        // Is this already a field toggle?\n        if (this.$toggle.data('fieldtoggle')) {\n            Garnish.log('Double-instantiating a field toggle on an element');\n            this.$toggle.data('fieldtoggle').destroy();\n        }\n\n        this.$toggle.data('fieldtoggle', this);\n\n        this.type = this.getType();\n\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n        } else {\n            this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n            this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n        }\n\n        this.findTargets();\n\n        switch (this.type) {\n            case 'link':\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n                break;\n            case 'fieldset':\n                this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                break;\n            default:\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n                this.onToggleChange();\n        }\n    },\n\n    normalizeTargetSelector: function(selector) {\n        if (selector && !selector.match(/^[#\\.]/)) {\n            selector = '#' + selector;\n        }\n\n        return selector;\n    },\n\n    getType: function() {\n        let nodeName = this.$toggle.prop('nodeName');\n        if (\n            (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n            this.$toggle.attr('role') === 'checkbox' ||\n            this.$toggle.attr('role') === 'switch'\n        ) {\n            return 'checkbox';\n        }\n\n        switch (nodeName) {\n            case 'SELECT':\n                return 'select';\n            case 'A':\n                return 'link';\n            case 'FIELDSET':\n                return 'fieldset';\n        }\n\n        console.warn('Unexpected field toggle:', this.$toggle[0]);\n    },\n\n    findTargets: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            var toggleVal = this.getToggleVal();\n            this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n        } else {\n            if (this.targetSelector) {\n                this._$target = $(this.targetSelector);\n            }\n\n            if (this.reverseTargetSelector) {\n                this._$reverseTarget = $(this.reverseTargetSelector);\n            }\n        }\n    },\n\n    getToggleVal: function() {\n        if (this.type === 'checkbox') {\n            if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                return this.$toggle.prop('checked');\n            }\n            return this.$toggle.attr('aria-checked') === 'true';\n        }\n\n        let postVal;\n        if (this.type === 'fieldset') {\n            postVal = this.$toggle.find('input:checked:first').val();\n        } else {\n            postVal = Garnish.getInputPostVal(this.$toggle);\n        }\n\n        // Normalize the value\n        return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n    },\n\n    onToggleChange: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.hideTarget(this._$target);\n            this.findTargets();\n            this.showTarget(this._$target);\n        } else {\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n            } else {\n                this.onToggleChange._show = !!this.getToggleVal();\n            }\n\n            if (this.onToggleChange._show) {\n                this.showTarget(this._$target);\n                this.hideTarget(this._$reverseTarget);\n            } else {\n                this.hideTarget(this._$target);\n                this.showTarget(this._$reverseTarget);\n            }\n\n            delete this.onToggleChange._show;\n        }\n    },\n\n    showTarget: function($target) {\n        if ($target && $target.length) {\n            this.showTarget._currentHeight = $target.height();\n\n            $target.removeClass('hidden');\n\n            if (this.type !== 'select' && this.type !== 'fieldset') {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('collapsed');\n                    this.$toggle.addClass('expanded');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.prop('nodeName') !== 'SPAN') {\n                            $t.height('auto');\n                            this.showTarget._targetHeight = $t.height();\n                            $t.css({\n                                height: this.showTarget._currentHeight,\n                                overflow: 'hidden'\n                            });\n\n                            $t.velocity('stop');\n\n                            $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                $t.css({\n                                    height: '',\n                                    overflow: ''\n                                });\n                            });\n                        }\n                    })($target.eq(i));\n                }\n\n                delete this.showTarget._targetHeight;\n            }\n\n            delete this.showTarget._currentHeight;\n\n            // Trigger a resize event in case there are any grids in the target that need to initialize\n            Garnish.$win.trigger('resize');\n        }\n    },\n\n    hideTarget: function($target) {\n        if ($target && $target.length) {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                $target.addClass('hidden');\n            } else {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('expanded');\n                    this.$toggle.addClass('collapsed');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.hasClass('hidden')) {\n                            return;\n                        }\n                        if ($t.prop('nodeName') === 'SPAN') {\n                            $t.addClass('hidden');\n                        } else {\n                            $t.css('overflow', 'hidden');\n                            $t.velocity('stop');\n                            $t.velocity({height: 0}, 'fast', function() {\n                                $t.addClass('hidden');\n                            });\n                        }\n                    })($target.eq(i));\n                }\n            }\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend({\n    $container: null,\n\n    $items: null,\n    items: null,\n    totalCols: null,\n    colGutterDrop: null,\n    colPctWidth: null,\n\n    possibleItemColspans: null,\n    possibleItemPositionsByColspan: null,\n\n    itemPositions: null,\n    itemColspansByPosition: null,\n\n    layouts: null,\n    layout: null,\n    itemHeights: null,\n    leftPadding: null,\n\n    _refreshingCols: false,\n    _refreshColsAfterRefresh: false,\n    _forceRefreshColsAfterRefresh: false,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n\n        // Is this already a grid?\n        if (this.$container.data('grid')) {\n            Garnish.log('Double-instantiating a grid on an element');\n            this.$container.data('grid').destroy();\n        }\n\n        this.$container.data('grid', this);\n\n        this.setSettings(settings, Craft.Grid.defaults);\n\n        // Set the refreshCols() proxy that container resizes will trigger\n        this.handleContainerHeightProxy = () => {\n            this.refreshCols(false, true);\n        };\n\n        this.$items = this.$container.children(this.settings.itemSelector);\n        this.setItems();\n        this.refreshCols(true, false);\n\n        Garnish.$doc.ready(() => {\n            this.refreshCols(false, false);\n        });\n    },\n\n    addItems: function(items) {\n        this.$items = $().add(this.$items.add(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    removeItems: function(items) {\n        this.$items = $().add(this.$items.not(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    resetItemOrder: function() {\n        this.$items = $().add(this.$items);\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    setItems: function() {\n        this.setItems._ = {};\n\n        this.items = [];\n\n        for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n            this.items.push($(this.$items[this.setItems._.i]));\n        }\n\n        delete this.setItems._;\n    },\n\n    refreshCols: function(force) {\n        if (this._refreshingCols) {\n            this._refreshColsAfterRefresh = true;\n            if (force) {\n                this._forceRefreshColsAfterRefresh = true;\n            }\n            return;\n        }\n\n        this._refreshingCols = true;\n\n        if (!this.items.length) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.refreshCols._ = {};\n\n        // Check to see if the grid is actually visible\n        this.refreshCols._.oldHeight = this.$container[0].style.height;\n        this.$container[0].style.height = 1;\n        this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n        this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n        if (this.refreshCols._.scrollHeight === 0) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        if (this.settings.cols) {\n            this.refreshCols._.totalCols = this.settings.cols;\n        } else {\n            this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n            // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n            if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n            }\n\n            if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                this.refreshCols._.totalCols = this.settings.maxCols;\n            }\n        }\n\n        if (this.refreshCols._.totalCols === 0) {\n            this.refreshCols._.totalCols = 1;\n        }\n\n        // Same number of columns as before?\n        if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.totalCols = this.refreshCols._.totalCols;\n        this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n        // Temporarily stop listening to container resizes\n        this.removeListener(this.$container, 'resize');\n\n        if (this.settings.fillMode === 'grid') {\n            this.refreshCols._.itemIndex = 0;\n\n            while (this.refreshCols._.itemIndex < this.items.length) {\n                // Append the next X items and figure out which one is the tallest\n                this.refreshCols._.tallestItemHeight = -1;\n                this.refreshCols._.colIndex = 0;\n\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                    if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                        this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                    }\n\n                    this.refreshCols._.colIndex++;\n                }\n\n                if (this.settings.snapToGrid) {\n                    this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                    if (this.refreshCols._.remainder) {\n                        this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                    }\n                }\n\n                // Now set their heights to the tallest one\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                }\n\n                // set the this.refreshCols._.itemIndex pointer to the next one up\n                this.refreshCols._.itemIndex += this.totalCols;\n            }\n        } else {\n            this.removeListener(this.$items, 'resize');\n\n            // If there's only one column, sneak out early\n            if (this.totalCols === 1) {\n                this.$container.height('auto');\n                this.$items\n                    .show()\n                    .css({\n                        position: 'relative',\n                        width: 'auto',\n                        top: 0\n                    })\n                    .css(Craft.left, 0);\n            } else {\n                this.$items.css('position', 'absolute');\n                this.colPctWidth = (100 / this.totalCols);\n\n                // The setup\n\n                this.layouts = [];\n\n                this.itemPositions = [];\n                this.itemColspansByPosition = [];\n\n                // Figure out all of the possible colspans for each item,\n                // as well as all the possible positions for each item at each of its colspans\n\n                this.possibleItemColspans = [];\n                this.possibleItemPositionsByColspan = [];\n                this.itemHeightsByColspan = [];\n\n                for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                    this.possibleItemColspans[this.refreshCols._.item] = [];\n                    this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                    this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                    this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                    this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                    this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                    this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                    this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                    if (this.refreshCols._.minColspan > this.totalCols) {\n                        this.refreshCols._.minColspan = this.totalCols;\n                    }\n                    if (this.refreshCols._.maxColspan > this.totalCols) {\n                        this.refreshCols._.maxColspan = this.totalCols;\n                    }\n\n                    for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                        // Get the height for this colspan\n                        this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                        this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                        this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                        if (this.refreshCols._.positionLeft) {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = 0;\n                        } else if (this.refreshCols._.positionRight) {\n                            this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                            this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                        } else {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                        }\n\n                        for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                        }\n                    }\n                }\n\n                // Find all the possible layouts\n\n                this.refreshCols._.colHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                    this.refreshCols._.colHeights.push(0);\n                }\n\n                this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                // Now find the layout that looks the best.\n\n                // First find the layouts with the highest number of used columns\n                this.refreshCols._.layoutTotalCols = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                    for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                        if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                            this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                        }\n                    }\n                }\n\n                this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                // Filter out the ones that aren't using as many columns as they could be\n                for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                    if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                        this.layouts.splice(this.refreshCols._.i, 1);\n                    }\n                }\n\n                // Find the layout(s) with the least overall height\n                this.refreshCols._.layoutHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                }\n\n                this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                this.refreshCols._.shortestLayouts = [];\n                this.refreshCols._.emptySpaces = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                    if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                        this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                        // Now get its total empty space, including any trailing empty space\n                        this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                        }\n\n                        this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                    }\n                }\n\n                // And the layout with the least empty space is...\n                this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                // Set the item widths and left positions\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                    this.refreshCols._.css = {\n                        width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                    };\n                    this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                    this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                }\n\n                // If every item is at position 0, then let them lay out au naturel\n                if (this.isSimpleLayout()) {\n                    this.$container.height('auto');\n                    this.$items.css({\n                        position: 'relative',\n                        top: 0,\n                        'margin-bottom': this.settings.gutter + 'px'\n                    });\n                } else {\n                    this.$items.css('position', 'absolute');\n\n                    // Now position the items\n                    this.positionItems();\n\n                    // Update the positions as the items' heigthts change\n                    this.addListener(this.$items, 'resize', 'onItemResize');\n                }\n            }\n        }\n\n        this.completeRefreshCols();\n\n        // Resume container resize listening\n        this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n        this.onRefreshCols();\n    },\n\n    completeRefreshCols: function() {\n        // Delete the internal variable object\n        if (typeof this.refreshCols._ !== 'undefined') {\n            delete this.refreshCols._;\n        }\n\n        this._refreshingCols = false;\n\n        if (this._refreshColsAfterRefresh) {\n            var force = this._forceRefreshColsAfterRefresh;\n            this._refreshColsAfterRefresh = false;\n            this._forceRefreshColsAfterRefresh = false;\n\n            Garnish.requestAnimationFrame(() => {\n                this.refreshCols(force);\n            });\n        }\n    },\n\n    getItemWidth: function(colspan) {\n        return (this.colPctWidth * colspan);\n    },\n\n    getItemWidthCss: function(colspan) {\n        return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n    },\n\n    getItemWidthInPx: function(colspan) {\n        return this.getItemWidth(colspan) / 100 * this.$container.width() - this.colGutterDrop;\n    },\n\n    getItemLeftPosCss: function(position) {\n        return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n    },\n\n    getItemLeftPosInPx: function(position) {\n        return (this.getItemWidth(1) / 100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n    },\n\n    isSimpleLayout: function() {\n        this.isSimpleLayout._ = {};\n\n        for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n            if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                delete this.isSimpleLayout._;\n                return false;\n            }\n        }\n\n        delete this.isSimpleLayout._;\n        return true;\n    },\n\n    positionItems: function() {\n        this.positionItems._ = {};\n\n        this.positionItems._.colHeights = [];\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n            this.positionItems._.colHeights.push(0);\n        }\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n            this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n            this.positionItems._.affectedColHeights = [];\n\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n            }\n\n            this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n            if (this.positionItems._.top > 0) {\n                this.positionItems._.top += this.settings.gutter;\n            }\n\n            this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n            // Now add the new heights to those columns\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n            }\n        }\n\n        // Set the container height\n        this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n        delete this.positionItems._;\n    },\n\n    onItemResize: function(ev) {\n        this.onItemResize._ = {};\n\n        // Prevent this from bubbling up to the container, which has its own resize listener\n        ev.stopPropagation();\n\n        this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n        if (this.onItemResize._.item !== -1) {\n            // Update the height and reposition the items\n            this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n            if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                this.positionItems(false);\n            }\n        }\n\n        delete this.onItemResize._;\n    },\n\n    onRefreshCols: function() {\n        this.trigger('refreshCols');\n        this.settings.onRefreshCols();\n    }\n}, {\n    defaults: {\n        itemSelector: '.item',\n        cols: null,\n        maxCols: null,\n        minColWidth: 320,\n        gutter: 14,\n        fillMode: 'top',\n        colClass: 'col',\n        snapToGrid: null,\n\n        onRefreshCols: $.noop\n    }\n});\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend({\n    grid: null,\n    _: null,\n\n    init: function(grid) {\n        this.grid = grid;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        this._ = {};\n\n        // Loop through all possible colspans\n        for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n            this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n            // Loop through all the possible positions for this colspan,\n            // and find the one that is closest to the top\n\n            this._.tallestColHeightsByPosition = [];\n\n            for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                this._.colHeightsForPosition = [];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                }\n\n                this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n            }\n\n            // And the shortest position for this colspan is...\n            this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n            this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n            // Now log the colspan/position placement\n            this._.positions = prevPositions.slice(0);\n            this._.colspans = prevColspans.slice(0);\n            this._.colHeights = prevColHeights.slice(0);\n            this._.emptySpace = prevEmptySpace;\n\n            this._.positions.push(this._.position);\n            this._.colspans.push(this._.colspan);\n\n            // Add the new heights to those columns\n            this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n            this._.endingCol = this._.position + this._.colspan - 1;\n\n            for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n            }\n\n            // If this is the last item, create the layout\n            if (item === this.grid.items.length - 1) {\n                this.grid.layouts.push({\n                    positions: this._.positions,\n                    colspans: this._.colspans,\n                    colHeights: this._.colHeights,\n                    emptySpace: this._.emptySpace\n                });\n            } else {\n                // Dive deeper\n                this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n            }\n        }\n\n        delete this._;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Remove inner-word punctuation\n        handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        handle = handle.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        handle = Craft.asciiString(handle);\n\n        if (!this.settings.allowNonAlphaStart) {\n            // Handle must start with a letter\n            handle = handle.replace(/^[^a-z]+/, '');\n        }\n\n        // Get the \"words\"\n        var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n        handle = '';\n\n        if (Craft.handleCasing === 'snake') {\n            return words.join('_');\n        }\n\n        // Make it camelCase\n        for (let i = 0; i < words.length; i++) {\n            if (Craft.handleCasing !== 'pascal' && i === 0) {\n                handle += words[i];\n            } else {\n                handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n            }\n        }\n\n        return handle;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend({\n    $container: null,\n    progressBar: null,\n    uploader: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ImageUpload.defaults);\n        this.initImageUpload();\n    },\n\n    initImageUpload: function() {\n        this.$container = $(this.settings.containerSelector);\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl(this.settings.uploadAction),\n            formData: this.settings.postParameters,\n            fileInput: this.$container.find(this.settings.fileInputSelector),\n            paramName: this.settings.uploadParamName\n        };\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n        options.events.fileuploadfail = this._onUploadError.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        this.initButtons();\n    },\n\n    initButtons: function() {\n        this.$container.find(this.settings.uploadButtonSelector).on('click', ev => {\n            this.$container.find(this.settings.fileInputSelector).trigger('click');\n        });\n\n        this.$container.find(this.settings.deleteButtonSelector).on('click', ev => {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        this.refreshImage(response);\n                    }\n                });\n            }\n        });\n    },\n\n    refreshImage: function(response) {\n        $(this.settings.containerSelector).replaceWith(response.html);\n        this.settings.onAfterRefreshImage(response);\n        this.initImageUpload();\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function(event) {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var html = $(data.result.html);\n            this.refreshImage(data.result);\n        }\n\n        // Last file\n        if (this.uploader.isLastUpload()) {\n            this.progressBar.hideProgressBar();\n            this.$container.removeClass('uploading');\n        }\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadError: function(event, data) {\n        if (data.jqXHR.responseJSON.error) {\n            alert(data.jqXHR.responseJSON.error);\n            this.$container.removeClass('uploading');\n            this.progressBar.hideProgressBar();\n            this.progressBar.resetProgressBar();\n        }\n    }\n}, {\n    defaults: {\n        postParameters: {},\n        uploadAction: \"\",\n        deleteAction: \"\",\n        fileInputSelector: \"\",\n\n        onAfterRefreshImage: $.noop,\n        containerSelector: null,\n\n        uploadButtonSelector: null,\n        deleteButtonSelector: null,\n\n        uploadParamName: 'files'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend({\n    $icon: null,\n    content: null,\n    hud: null,\n\n    init: function(icon) {\n        this.$icon = $(icon);\n\n        if (this.$icon.data('infoicon')) {\n            Garnish.log('Double-instantiating an info icon on an element');\n            this.content = this.$icon.data('infoicon').content;\n            this.$icon.data('infoicon').destroy();\n        } else {\n            this.content = this.$icon.html();\n            this.$icon\n                .html('')\n                .attr({\n                    tabindex: 0,\n                    'role': 'button',\n                    'aria-label': Craft.t('app', 'Information'),\n                });\n        }\n\n        this.$icon.data('infoicon', this);\n\n        if (this.$icon[0].previousSibling && this.$icon[0].previousSibling.nodeType === Node.TEXT_NODE) {\n            // Make sure it's in a .nowrap container\n            const $parent = this.$icon.parent();\n            if (!$parent.hasClass('nowrap')) {\n                // Find the last word in the text\n                const m = this.$icon[0].previousSibling.nodeValue.match(/[^\\s\\-]+\\s*$/);\n                if (m) {\n                    this.$icon[0].previousSibling.nodeValue = this.$icon[0].previousSibling.nodeValue.substr(0, m.index);\n                    $('<span/>', {\n                        class: 'nowrap',\n                        html: m[0].replace(/\\s+$/, '') + ' ',\n                    })\n                        .insertAfter(this.$icon[0].previousSibling)\n                        .append(this.$icon);\n                }\n            }\n        }\n\n        this.addListener(this.$icon, 'click', ev => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.showHud();\n        });\n\n        this.addListener(this.$icon, 'keydown', ev => {\n            if (!(this.hud && this.hud.showing) && [Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.showHud();\n            }\n        });\n    },\n\n    showHud: function(ev) {\n        if (!this.hud) {\n            this.hud = new Garnish.HUD(this.$icon, this.content, {\n                hudClass: 'hud info-hud',\n                closeOtherHUDs: false,\n                onShow: () => {\n                    Garnish.shortcutManager.registerShortcut(Garnish.SPACE_KEY, () => {\n                        this.hud.hide();\n                    });\n                },\n            });\n            Craft.initUiElements(this.hud.$body);\n        } else {\n            this.hud.show();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend({\n    settings: null,\n    $outerContainer: null,\n    $innerContainer: null,\n    $input: null,\n    small: false,\n    on: false,\n    indeterminate: false,\n    dragger: null,\n\n    dragStartMargin: null,\n\n    init: function(outerContainer, settings) {\n        this.$outerContainer = $(outerContainer);\n\n        // Is this already a lightswitch?\n        if (this.$outerContainer.data('lightswitch')) {\n            Garnish.log('Double-instantiating a lightswitch on an element');\n            this.$outerContainer.data('lightswitch').destroy();\n        }\n\n        this.$outerContainer.data('lightswitch', this);\n\n        this.small = this.$outerContainer.hasClass('small');\n\n        this.setSettings(settings, Craft.LightSwitch.defaults);\n\n        this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n        this.$input = this.$outerContainer.find('input:first');\n\n        // If the input is disabled, go no further\n        if (this.$input.prop('disabled')) {\n            return;\n        }\n\n        this.on = this.$outerContainer.hasClass('on');\n        this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n        this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n        this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n        this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n            axis: Garnish.X_AXIS,\n            ignoreHandleSelector: null,\n            onDragStart: this._onDragStart.bind(this),\n            onDrag: this._onDrag.bind(this),\n            onDragStop: this._onDragStop.bind(this)\n        });\n\n        // Does the input have on/off labels?\n        let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n        if ($wrapper.length) {\n            this.addListener($wrapper.children('span[data-toggle=\"off\"]'), 'click', this.turnOff);\n            this.addListener($wrapper.children('span[data-toggle=\"on\"]'), 'click', this.turnOn);\n        }\n    },\n\n    turnOn: function(muteEvent) {\n        var changed = !this.on;\n\n        this.on = true;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.value);\n        this.$outerContainer.addClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'true');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnOff: function(muteEvent) {\n        var changed = this.on || this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin();\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val('');\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'false');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnIndeterminate: function(muteEvent) {\n        var changed = !this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = true;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.indeterminateValue);\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.addClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'mixed');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    toggle: function() {\n        if (this.indeterminate || !this.on) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    onChange: function() {\n        this.trigger('change');\n        this.settings.onChange(this.on);\n        this.$outerContainer.trigger('change');\n    },\n\n    _onMouseDown: function() {\n        this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n    },\n\n    _onMouseUp: function() {\n        this.removeListener(Garnish.$doc, 'mouseup');\n\n        // Was this a click?\n        if (!this.dragger.dragging) {\n            this.toggle();\n        }\n    },\n\n    _onKeyDown: function(event) {\n        switch (event.keyCode) {\n            case Garnish.SPACE_KEY: {\n                this.toggle();\n                event.preventDefault();\n                break;\n            }\n            case Garnish.RIGHT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOn();\n                } else {\n                    this.turnOff();\n                }\n\n                event.preventDefault();\n                break;\n            }\n            case Garnish.LEFT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOff();\n                } else {\n                    this.turnOn();\n                }\n\n                event.preventDefault();\n                break;\n            }\n        }\n    },\n\n    _getMargin: function() {\n        return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n    },\n\n    _onDragStart: function() {\n        this.$outerContainer.addClass('dragging');\n        this.dragStartMargin = this._getMargin();\n    },\n\n    _onDrag: function() {\n        var margin;\n\n        if (Craft.orientation === 'ltr') {\n            margin = this.dragStartMargin + this.dragger.mouseDistX;\n        } else {\n            margin = this.dragStartMargin - this.dragger.mouseDistX;\n        }\n\n        if (margin < this._getOffMargin()) {\n            margin = this._getOffMargin();\n        } else if (margin > 0) {\n            margin = 0;\n        }\n\n        this.$innerContainer.css('margin-' + Craft.left, margin);\n    },\n\n    _onDragStop: function() {\n        var margin = this._getMargin();\n        console.log(margin);\n\n        if (margin > (this._getOffMargin() / 2)) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    _onSettle: function() {\n        this.$outerContainer.removeClass('dragging');\n    },\n\n    destroy: function() {\n        this.base();\n        this.dragger.destroy();\n    },\n\n    _getOffMargin: function() {\n        return (this.small ? -10 : -12);\n    }\n}, {\n    animationDuration: 100,\n    defaults: {\n        value: '1',\n        indeterminateValue: '-',\n        onChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend({\n    $extraFields: null,\n    $trigger: null,\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $iframe: null,\n    $fieldPlaceholder: null,\n\n    previewUrl: null,\n    token: null,\n    basePostData: null,\n    inPreviewMode: false,\n    fields: null,\n    lastPostData: null,\n    updateIframeInterval: null,\n    loading: false,\n    checkAgain: false,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _slideInOnIframeLoad: false,\n    _forceUpdateIframeProxy: null,\n\n    _scrollX: null,\n    _scrollY: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.LivePreview.defaults);\n\n        // Should preview requests use a specific URL?\n        // This won't affect how the request gets routed (the action param will override it),\n        // but it will allow the templates to change behavior based on the request URI.\n        if (this.settings.previewUrl) {\n            this.previewUrl = this.settings.previewUrl;\n        } else {\n            this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n        }\n\n        // Load the preview over SSL if the current request is\n        if (document.location.protocol === 'https:') {\n            this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n        }\n\n        // Set the base post data\n        this.basePostData = $.extend({}, this.settings.previewParams);\n\n        this._forceUpdateIframeProxy = this.forceUpdateIframe.bind(this);\n\n        // Find the DOM elements\n        this.$extraFields = $(this.settings.extraFields);\n        this.$trigger = $(this.settings.trigger);\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n        // Event Listeners\n        this.addListener(this.$trigger, 'activate', 'toggle');\n\n        Craft.cp.on('beforeSaveShortcut', () => {\n            if (this.inPreviewMode) {\n                this.moveFieldsBack();\n            }\n        });\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n            inPx = Craft.LivePreview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    toggle: function() {\n        if (this.inPreviewMode) {\n            this.exit();\n        } else {\n            this.enter();\n        }\n    },\n\n    enter: function() {\n        if (this.inPreviewMode) {\n            return;\n        }\n\n        if (!this.token) {\n            this.createToken();\n            return;\n        }\n\n        this.trigger('beforeEnter');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            let $saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($editorHeader);\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this)\n            });\n\n            this.addListener($closeBtn, 'click', 'exit');\n            this.addListener($saveBtn, 'click', 'save');\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Move all the fields into the editor rather than copying them\n        // so any JS that's referencing the elements won't break.\n        this.fields = [];\n        var $fields = $(this.settings.fields);\n\n        for (var i = 0; i < $fields.length; i++) {\n            var $field = $($fields[i]),\n                $clone = this._getClone($field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter($field);\n            $field.detach();\n            this.$fieldPlaceholder.replaceWith($clone);\n            $field.appendTo(this.$editor);\n\n            this.fields.push({\n                $field: $field,\n                $clone: $clone\n            });\n        }\n\n        if (this.updateIframe()) {\n            this._slideInOnIframeLoad = true;\n        } else {\n            this.slideIn();\n        }\n\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = true;\n        this.trigger('enter');\n    },\n\n    createToken: function() {\n        Craft.postActionRequest('live-preview/create-token', {\n            previewAction: this.settings.previewAction\n        }, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.token = response.token;\n                this.enter();\n            }\n        });\n    },\n\n    save: function() {\n        Craft.cp.submitPrimaryForm();\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.updateIframeInterval = setInterval(this.updateIframe.bind(this), 1000);\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.exit();\n                }\n            });\n        });\n    },\n\n    exit: function() {\n        if (!this.inPreviewMode) {\n            return;\n        }\n\n        this.trigger('beforeExit');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        if (this.updateIframeInterval) {\n            clearInterval(this.updateIframeInterval);\n        }\n\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n        });\n\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = false;\n        this.trigger('exit');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n    },\n\n    updateIframe: function(force) {\n        if (force) {\n            this.lastPostData = null;\n        }\n\n        if (!this.inPreviewMode) {\n            return false;\n        }\n\n        if (this.loading) {\n            this.checkAgain = true;\n            return false;\n        }\n\n        // Has the post data changed?\n        var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n        if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n            this.lastPostData = postData;\n            this.loading = true;\n\n            var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n            this._scrollX = $doc ? $doc.scrollLeft() : 0;\n            this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n            $.ajax({\n                url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                method: 'POST',\n                data: $.extend({}, postData, this.basePostData),\n                headers: {\n                    'X-Craft-Token': this.token\n                },\n                xhrFields: {\n                    withCredentials: true\n                },\n                crossDomain: true,\n                success: this.handleSuccess.bind(this),\n                error: this.handleError.bind(this),\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    forceUpdateIframe: function() {\n        return this.updateIframe(true);\n    },\n\n    handleSuccess: function(data) {\n        var html = data +\n            '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n        // Create a new iframe\n        var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n        if (this.$iframe) {\n            $iframe.insertBefore(this.$iframe);\n        } else {\n            $iframe.appendTo(this.$iframeContainer);\n        }\n\n        this.addListener($iframe, 'load', function() {\n            if (this.$iframe) {\n                this.$iframe.remove();\n            }\n            this.$iframe = $iframe;\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n\n            this.removeListener($iframe, 'load');\n        });\n\n        Garnish.requestAnimationFrame(() => {\n            $iframe[0].contentWindow.document.open();\n            $iframe[0].contentWindow.document.write(html);\n            $iframe[0].contentWindow.document.close();\n            this.onResponse();\n        });\n    },\n\n    handleError: function() {\n        this.onResponse();\n    },\n\n    onResponse: function() {\n        this.loading = false;\n\n        if (this.checkAgain) {\n            this.checkAgain = false;\n            this.updateIframe();\n        }\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n\n    defaults: {\n        trigger: '.livepreviewbtn',\n        fields: null,\n        extraFields: null,\n        previewUrl: null,\n        previewAction: null,\n        previewParams: {}\n    }\n});\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend({\n    $passwordWrapper: null,\n    $passwordInput: null,\n    $textInput: null,\n    $currentInput: null,\n\n    $showPasswordToggle: null,\n    showingPassword: null,\n\n    init: function(passwordInput, settings) {\n        this.$passwordInput = $(passwordInput);\n        this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n        this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n        // Is this already a password input?\n        if (this.$passwordInput.data('passwordInput')) {\n            Garnish.log('Double-instantiating a password input on an element');\n            this.$passwordInput.data('passwordInput').destroy();\n        }\n\n        this.$passwordInput.data('passwordInput', this);\n\n        this.$showPasswordToggle = $('<button type=\"button\" class=\"invisible\" />');\n        this.$showPasswordToggle.addClass('password-toggle');\n        this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n        this.initInputFocusEvents(this.$passwordInput);\n        this.addListener(this.$showPasswordToggle, 'click', 'onClick');\n        this.hidePassword();\n    },\n\n    setCurrentInput: function($input) {\n        if (this.$currentInput) {\n            // Swap the inputs, while preventing the focus animation\n            $input.insertAfter(this.$currentInput);\n            this.$currentInput.detach();\n            $input.trigger('focus');\n\n            // Restore the input value\n            $input.val(this.$currentInput.val());\n        }\n\n        this.$currentInput = $input;\n\n        this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n    },\n\n    updateToggleLabel: function(label) {\n        this.$showPasswordToggle.text(label);\n    },\n\n    initInputFocusEvents: function($input) {\n        this.addListener($input, 'focus', function() {\n            this.$passwordWrapper.addClass('focus');\n        });\n        this.addListener($input, 'blur', function() {\n            this.$passwordWrapper.removeClass('focus');\n        });\n    },\n\n    showPassword: function() {\n        if (this.showingPassword) {\n            return;\n        }\n\n        if (!this.$textInput) {\n            this.$textInput = this.$passwordInput.clone(true);\n            this.$textInput.attr('type', 'text');\n            this.initInputFocusEvents(this.$textInput);\n        }\n\n        this.setCurrentInput(this.$textInput);\n        this.updateToggleLabel(Craft.t('app', 'Hide'));\n        this.showingPassword = true;\n    },\n\n    hidePassword: function() {\n        // showingPassword could be null, which is acceptable\n        if (this.showingPassword === false) {\n            return;\n        }\n\n        this.setCurrentInput(this.$passwordInput);\n        this.updateToggleLabel(Craft.t('app', 'Show'));\n        this.showingPassword = false;\n\n        // Alt key temporarily shows the password\n        this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n    },\n\n    togglePassword: function() {\n        if (this.showingPassword) {\n            this.hidePassword();\n        } else {\n            this.showPassword();\n        }\n\n        this.settings.onToggleInput(this.$currentInput);\n    },\n\n    onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n            this.showPassword();\n            this.$showPasswordToggle.addClass('invisible');\n            this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n        }\n    },\n\n    onKeyUp: function(ev) {\n        ev.preventDefault();\n\n        if (ev.keyCode === Garnish.ALT_KEY) {\n            this.hidePassword();\n            this.$showPasswordToggle.removeClass('invisible');\n        }\n    },\n\n    onInputChange: function() {\n        if (this.$currentInput.val()) {\n            this.$showPasswordToggle.removeClass('invisible');\n        } else {\n            this.$showPasswordToggle.addClass('invisible');\n        }\n    },\n\n    onClick: function(ev) {\n        if (this.$currentInput[0].setSelectionRange) {\n            var selectionStart = this.$currentInput[0].selectionStart,\n                selectionEnd = this.$currentInput[0].selectionEnd;\n\n            this.togglePassword();\n            this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n        } else {\n            this.togglePassword();\n        }\n    }\n}, {\n    defaults: {\n        onToggleInput: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend({\n    draftEditor: null,\n\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $spinner: null,\n    $statusIcon: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $previewHeader: null,\n    $targetBtn: null,\n    $targetMenu: null,\n    $deviceTypeContainer: null,\n    $orientationBtn: null,\n    $deviceMask: null,\n    $devicePreviewContainer: null,\n    $iframe: null,\n    iframeLoaded: false,\n    $tempInput: null,\n    $fieldPlaceholder: null,\n\n    isActive: false,\n    isVisible: false,\n    activeTarget: 0,\n\n    isDeviceUpdating: false,\n    deviceAnimationTimeout: null,\n    currentDeviceType: 'desktop',\n    deviceOrientation: null,\n    deviceWidth: '',\n    deviceHeight: '',\n    deviceMaskDimensions: {\n        phone: {\n            width: 375,\n            height: 753\n        },\n        tablet: {\n            width: 768,\n            height: 1110\n        }\n    },\n\n    draftId: null,\n    url: null,\n    fields: null,\n\n    iframeHeight: null,\n    scrollTop: null,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _updateIframeProxy: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(draftEditor) {\n        this.draftEditor = draftEditor;\n\n        this._updateIframeProxy = this.updateIframe.bind(this);\n\n        this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.Preview.minEditorWidthInPx) {\n            inPx = Craft.Preview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    open: function() {\n        if (this.isActive) {\n            return;\n        }\n\n        this.isActive = true;\n        this.trigger('beforeOpen');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n            this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n            if (Craft.Pro) {\n                this.$previewHeader = $('<header/>', {'class': 'lp-preview-header'}).appendTo(this.$previewContainer);\n\n                // Preview targets\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo(this.$previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    const $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    let $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n\n                    $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                }\n\n                // Device type buttons\n                this.$deviceTypeContainer = $('<div/>', {\n                    class: 'btngroup lp-device-type',\n                    role: 'listbox',\n                    'aria-label': Craft.t('app', 'Device type'),\n                    tabindex: '0',\n                }).appendTo(this.$previewHeader);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--desktop active',\n                    title: Craft.t('app', 'Desktop'),\n                    'aria-label': Craft.t('app', 'Desktop'),\n                    'aria-selected': 'true',\n                    tabindex: '-1',\n                    data: {\n                        width: '',\n                        height: '',\n                        deviceType: 'desktop'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--tablet',\n                    title: Craft.t('app', 'Tablet'),\n                    'aria-label': Craft.t('app', 'Tablet'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 768,\n                        height: 1024,\n                        deviceType: 'tablet'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--phone',\n                    title: Craft.t('app', 'Mobile'),\n                    'aria-label': Craft.t('app', 'Mobile'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 375,\n                        height: 667,\n                        deviceType: 'phone'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n\n                $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n\n                // Orientation toggle\n                this.$orientationBtn = $('<button/>', {\n                    type: 'button',\n                    'class': 'btn disabled',\n                    'data-icon': 'refresh',\n                    disabled: '',\n                    'aria-hidden': '',\n                    'text': Craft.t('app', 'Rotate')\n                }).appendTo(this.$previewHeader);\n                this.addListener(this.$orientationBtn, 'click', 'switchOrientation');\n\n                // Get the last stored orientation\n                this.deviceOrientation = Craft.getLocalStorage('LivePreview.orientation');\n\n                // Device type button click handler\n                this.addListener($('.btn', this.$deviceTypeContainer), 'click', 'switchDeviceType');\n\n                // Device mask\n                this.$deviceMask = $('<div/>', {\n                    'class': 'lp-device-mask'\n                });\n            }\n\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n            if (this.$deviceMask) {\n                this.$iframeContainer.append(this.$deviceMask);\n            }\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this),\n            });\n\n            this.addListener($closeBtn, 'click', 'close');\n            this.addListener(this.$statusIcon, 'click', () => {\n                this.draftEditor.showStatusHud(this.$statusIcon);\n            });\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Find the fields, excluding nested fields\n        this.fields = [];\n        var $fields = $('#content .field').not($('#content .field .field'));\n\n        if ($fields.length) {\n            // Insert our temporary input before the first field so we know where to swap in the serialized form values\n            this.$tempInput.insertBefore($fields.get(0));\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            for (let i = 0; i < $fields.length; i++) {\n                let $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n        }\n\n        this.updateIframe();\n\n        this.draftEditor.on('update', this._updateIframeProxy);\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.trigger('open');\n    },\n\n    switchTarget: function(i) {\n        this.activeTarget = i;\n        this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n        this.$targetMenu.find('a.sel').removeClass('sel');\n        this.$targetMenu.find('a').eq(i).addClass('sel');\n        this.updateIframe(true);\n        this.trigger('switchTarget', {\n            previewTarget: this.draftEditor.settings.previewTargets[i],\n        });\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        if (!this.isActive || this.isVisible) {\n            return;\n        }\n\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.close();\n                }\n            });\n        });\n\n        this.isVisible = true;\n    },\n\n    close: function() {\n        if (!this.isActive || !this.isVisible) {\n            return;\n        }\n\n        this.trigger('beforeClose');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        // Remove our temporary input and move the preview fields back into place\n        this.$tempInput.detach();\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n            this.resetDevicePreview();\n        });\n\n        this.draftEditor.off('update', this._updateIframeProxy);\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.isActive = false;\n        this.isVisible = false;\n        this.trigger('close');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n        if (this._devicePreviewIsActive()) {\n            this.updateDevicePreview();\n        }\n    },\n\n    _useIframeResizer: function() {\n        return Craft.previewIframeResizerOptions !== false;\n    },\n\n    updateIframe: function(resetScroll) {\n        if (!this.isActive) {\n            return false;\n        }\n\n        // Ignore non-boolean resetScroll values\n        resetScroll = resetScroll === true;\n\n        var target = this.draftEditor.settings.previewTargets[this.activeTarget];\n        var refresh = !!(\n            this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n            !this.$iframe ||\n            resetScroll ||\n            typeof target.refresh === 'undefined' ||\n            target.refresh\n        );\n\n        this.trigger('beforeUpdateIframe', {\n            previewTarget: target,\n            resetScroll: resetScroll,\n            refresh: refresh,\n        });\n\n        // If this is an existing preview target, make sure it wants to be refreshed automatically\n        if (!refresh) {\n            this.slideIn();\n            return;\n        }\n\n        this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n            // Maintain the current scroll position?\n            let sameHost;\n            if (resetScroll) {\n                this.scrollTop = null;\n            } else if (this.iframeLoaded && this.$iframe) {\n                if (this._useIframeResizer()) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                } else {\n                    sameHost = Craft.isSameHost(url);\n                    if (sameHost && this.$iframe[0].contentWindow) {\n                        this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                    }\n                }\n            }\n\n            this.iframeLoaded = false;\n\n            var $iframe = $('<iframe/>', {\n                'class': 'lp-preview',\n                frameborder: 0,\n                src: url,\n            });\n\n            if (this.$iframe) {\n                this.$iframe.replaceWith($iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            // If we’re on tablet/phone then wrap the iframe in our own container\n            // so we can keep all the iFrameResizer() stuff working\n            if (this._devicePreviewIsActive()) {\n                if (!this.$devicePreviewContainer) {\n                    this.$devicePreviewContainer = $('<div/>', {\n                        'class': 'lp-device-preview-container'\n                    });\n                    $iframe.wrap('<div class=\"lp-device-preview-container\"></div>');\n                    this.$devicePreviewContainer = this.$iframeContainer.find('.lp-device-preview-container');\n                }\n            }\n\n            // Keep the iframe height consistent with its content\n            if (this._useIframeResizer()) {\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                iFrameResize($.extend({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n            } else {\n                $iframe.on('load', () => {\n                    this.iframeLoaded = true;\n                    if (!resetScroll && sameHost && this.scrollTop !== null) {\n                        $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                    }\n                });\n            }\n\n            this.url = url;\n            this.$iframe = $iframe;\n\n            if (this._devicePreviewIsActive()) {\n                this.updateDevicePreview();\n            }\n\n            this.trigger('afterUpdateIframe', {\n                previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            this.slideIn();\n        });\n    },\n\n    _devicePreviewIsActive: function() {\n        return this.currentDeviceType !== 'desktop';\n    },\n\n    switchDeviceType: function(ev) {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n\n        const $btn = $(ev.target);\n        const newDeviceType = $btn.data('deviceType');\n\n        // Bail if we’re just smashing the same button\n        if (newDeviceType === this.currentDeviceType) {\n            return false;\n        }\n\n        // Store new device type data\n        this.currentDeviceType = newDeviceType;\n        this.deviceWidth = $btn.data('width');\n        this.deviceHeight = $btn.data('height');\n\n        // Set the active state on the button\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n\n        $btn\n            .addClass('active')\n            .attr('aria-selected', 'true');\n\n        // Update or reset\n        if (this.currentDeviceType === 'desktop') {\n            this.resetDevicePreview();\n        } else {\n            this.$iframeContainer.addClass('lp-iframe-container--updating');\n            this.updateIframe();\n            this.updateDevicePreview();\n        }\n    },\n\n    switchOrientation: function()\n    {\n        if (this.isDeviceUpdating || !this._devicePreviewIsActive()) {\n            return false;\n        }\n\n        // Switch to whichever orientation is currently not stored\n        if (!this.deviceOrientation || this.deviceOrientation === 'portrait') {\n            this.deviceOrientation = 'landscape';\n        } else {\n            this.deviceOrientation = 'portrait';\n        }\n\n        // Store the new one\n        Craft.setLocalStorage('LivePreview.orientation', this.deviceOrientation);\n\n        // Allow the animation to take place\n        this.$iframeContainer.addClass('lp-iframe-container--animating');\n\n        // Update the device preview\n        this.updateDevicePreview();\n    },\n\n    updateDevicePreview: function()\n    {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.isDeviceUpdating = true;\n\n        // Enable the orientation button\n        this.$orientationBtn\n            .removeClass('disabled')\n            .removeAttr('disabled')\n            .removeAttr('aria-hidden');\n\n        // Trigger the resized css mods\n        this.$iframeContainer.addClass('lp-iframe-container--has-device-preview');\n\n        // Add the tablet class if needed\n        if (this.currentDeviceType === 'tablet') {\n            this.$iframeContainer.addClass('lp-iframe-container--tablet');\n        } else {\n            this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n        }\n\n        // Figure out the best zoom\n        let hZoom = 1;\n        let wZoom = 1;\n        let zoom = 1;\n        let previewHeight = (this.$previewContainer.height() - 50) - 48; // 50px for the header bar and 24px clearance\n        let previewWidth = this.$previewContainer.width() - 48;\n        let maskHeight = this.deviceMaskDimensions[this.currentDeviceType].height;\n        let maskWidth = this.deviceMaskDimensions[this.currentDeviceType].width;\n\n        if (this.deviceOrientation === 'landscape') {\n            if (previewWidth < maskHeight) {\n                hZoom = previewWidth / maskHeight;\n            }\n            if (previewHeight < maskWidth) {\n                wZoom = previewHeight / maskWidth;\n            }\n        } else {\n            if (previewHeight < maskHeight) {\n                hZoom = previewHeight / maskHeight;\n            }\n            if (previewWidth < maskWidth) {\n                wZoom = previewWidth / maskWidth;\n            }\n        }\n\n        zoom = hZoom;\n        if (wZoom < hZoom) {\n            zoom = wZoom;\n        }\n\n        // Figure out the css values\n        const translate = -((100/zoom)/2);\n        const rotationDeg = this.deviceOrientation === 'landscape' ? '-90deg' : '0deg';\n\n        // Apply first to the device mask\n        this.$deviceMask.css({\n            width: this.deviceMaskDimensions[this.currentDeviceType].width + 'px',\n            height: this.deviceMaskDimensions[this.currentDeviceType].height + 'px',\n            transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%) rotate('+rotationDeg+')'\n        });\n\n        // After the animation duration we can update the iframe sizes and show it\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.deviceAnimationTimeout = setTimeout(() => {\n            // Then make the size change to the preview container\n            if (this.deviceOrientation === 'landscape') {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceHeight + 'px',\n                    height: this.deviceWidth + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: 0,\n                    marginLeft: '-' + (12*zoom) + 'px'\n                });\n            } else {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceWidth + 'px',\n                    height: this.deviceHeight + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: '-' + (12*zoom) + 'px',\n                    marginLeft: 0\n                });\n            }\n\n            // Remove the animating class and show the iframe\n            this.$iframeContainer.removeClass('lp-iframe-container--animating');\n            this.$iframeContainer.removeClass('lp-iframe-container--updating');\n            this.isDeviceUpdating = false;\n\n        }, 300);\n    },\n\n    resetDevicePreview: function()\n    {\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.currentDeviceType = 'desktop';\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n        this.$deviceTypeContainer.find('.lp-device-type-btn--desktop')\n            .addClass('active')\n            .attr('aria-selected', 'true');\n        this.$orientationBtn\n            .addClass('disabled')\n            .attr('disabled', '')\n            .attr('aria-hidden', '');\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n        this.$iframeContainer.removeClass('lp-iframe-container--has-device-preview');\n        this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n\n        // Flat out remove the iframe and let it get regenerated\n        if (this.$devicePreviewContainer) {\n            // If using iFrameResizer then remove the listeners first so we don’t get zombie instances\n            if (this._useIframeResizer()) {\n                this.$iframe[0].iFrameResizer.removeListeners();\n            }\n            this.$devicePreviewContainer.detach();\n            this.$devicePreviewContainer = null;\n            this.$iframe = null;\n            this.updateIframe();\n        }\n\n        this.isDeviceUpdating = false;\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        // Disable anything with a name attribute\n        $clone.find('[name]').prop('disabled', true);\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend({\n    assetId: null,\n    $spinner: null,\n    elementSelect: null,\n    type: null,\n    loaded: null,\n    requestId: 0,\n\n    /**\n     * Initialize the preview file modal.\n     * @returns {*|void}\n     */\n    init: function(assetId, elementSelect, settings) {\n        settings = $.extend(this.defaultSettings, settings);\n\n        settings.onHide = this._onHide.bind(this);\n\n        if (Craft.PreviewFileModal.openInstance) {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            if (instance.assetId !== assetId) {\n                instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                instance.elementSelect = elementSelect;\n            }\n\n            return this.destroy();\n        }\n\n        Craft.PreviewFileModal.openInstance = this;\n        this.elementSelect = elementSelect;\n\n        this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n        this.base(this.$container, $.extend({\n            resizable: true\n        }, settings));\n\n        // Cut the flicker, just show the nice person the preview.\n        if (this.$container) {\n            this.$container.velocity('stop');\n            this.$container.show().css('opacity', 1);\n\n            this.$shade.velocity('stop');\n            this.$shade.show().css('opacity', 1);\n        }\n\n        this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n    },\n\n    /**\n     * When hiding, remove all traces and focus last focused element.\n     * @private\n     */\n    _onHide: function() {\n        Craft.PreviewFileModal.openInstance = null;\n        if (this.elementSelect) {\n            this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n        }\n\n        this.$shade.remove();\n\n        return this.destroy();\n    },\n\n    /**\n     * Disappear immediately forever.\n     * @returns {boolean}\n     */\n    selfDestruct: function() {\n        var instance = Craft.PreviewFileModal.openInstance;\n\n        instance.hide();\n        instance.$shade.remove();\n        instance.destroy();\n\n        Craft.PreviewFileModal.openInstance = null;\n\n        return true;\n    },\n\n    /**\n     * Load an asset, using starting width and height, if applicable\n     * @param assetId\n     * @param startingWidth\n     * @param startingHeight\n     */\n    loadAsset: function(assetId, startingWidth, startingHeight) {\n        this.assetId = assetId;\n\n        this.$container.empty();\n        this.loaded = false;\n\n        this.desiredHeight = null;\n        this.desiredWidth = null;\n\n        var containerHeight = Garnish.$win.height() * 0.66;\n        var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n        containerHeight = containerWidth / 4 * 3;\n\n        if (startingWidth && startingHeight) {\n            var ratio = startingWidth / startingHeight;\n            containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n            containerWidth = containerHeight * ratio;\n\n            // This might actually have put width over the viewport limits, so doublecheck\n            if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = containerWidth / ratio;\n            }\n        }\n\n        this._resizeContainer(containerWidth, containerHeight);\n\n        this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n        var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n            left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n        this.$spinner.css({left: left, top: top, position: 'absolute'});\n        this.requestId++;\n\n        Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, (response, textStatus) => {\n            this.$container.removeClass('loading');\n            this.$spinner.remove();\n            this.loaded = true;\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (response.requestId != this.requestId) {\n                        return;\n                    }\n\n                    if (!response.previewHtml) {\n                        this.$container.addClass('zilch');\n                        this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                        return;\n                    }\n\n                    this.$container.removeClass('zilch');\n                    this.$container.append(response.previewHtml);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n                } else {\n                    alert(response.error);\n\n                    this.hide();\n                }\n            }\n        });\n    },\n\n    /**\n     * Resize the container to specified dimensions\n     * @param containerWidth\n     * @param containerHeight\n     * @private\n     */\n    _resizeContainer: function(containerWidth, containerHeight) {\n        this.$container.css({\n            'width': containerWidth,\n            'min-width': containerWidth,\n            'max-width': containerWidth,\n            'height': containerHeight,\n            'min-height': containerHeight,\n            'max-height': containerHeight,\n            'top': (Garnish.$win.height() - containerHeight) / 2,\n            'left': (Garnish.$win.width() - containerWidth) / 2\n        });\n    }\n}, {\n    defaultSettings: {\n        startingWidth: null,\n        startingHeight: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend({\n    $progressBar: null,\n    $innerProgressBar: null,\n    $progressBarStatus: null,\n\n    _itemCount: 0,\n    _processedItemCount: 0,\n    _displaySteps: false,\n\n    init: function($element, displaySteps) {\n        if (displaySteps) {\n            this._displaySteps = true;\n        }\n\n        this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n        this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n        this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n        this.resetProgressBar();\n    },\n\n    /**\n     * Reset the progress bar\n     */\n    resetProgressBar: function() {\n        // Since setting the progress percentage implies that there is progress to be shown\n        // It removes the pending class - we must add it back.\n        this.setProgressPercentage(100);\n        this.$progressBar.addClass('pending');\n\n        // Reset all the counters\n        this.setItemCount(1);\n        this.setProcessedItemCount(0);\n        this.$progressBarStatus.html('');\n\n        if (this._displaySteps) {\n            this.$progressBar.addClass('has-status');\n        }\n    },\n\n    /**\n     * Fade to invisible, hide it using a class and reset opacity to visible\n     */\n    hideProgressBar: function() {\n        this.$progressBar.fadeTo('fast', 0.01, () => {\n            this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n    },\n\n    showProgressBar: function() {\n        this.$progressBar.removeClass('hidden');\n        this.$progressBarStatus.removeClass('hidden');\n    },\n\n    setItemCount: function(count) {\n        this._itemCount = count;\n    },\n\n    incrementItemCount: function(count) {\n        this._itemCount += count;\n    },\n\n    setProcessedItemCount: function(count) {\n        this._processedItemCount = count;\n    },\n\n    incrementProcessedItemCount: function(count) {\n        this._processedItemCount += count;\n    },\n\n    updateProgressBar: function() {\n        // Only fools would allow accidental division by zero.\n        this._itemCount = Math.max(this._itemCount, 1);\n\n        var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n        this.setProgressPercentage(width);\n\n        if (this._displaySteps) {\n            this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n        }\n    },\n\n    setProgressPercentage: function(percentage, animate) {\n        if (percentage === 0) {\n            this.$progressBar.addClass('pending');\n        } else {\n            this.$progressBar.removeClass('pending');\n\n            if (animate) {\n                this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n            } else {\n                this.$innerProgressBar.velocity('stop').width(percentage + '%');\n            }\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, this._handleBatchPromptSelection.bind(this), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            } else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        } else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', () => {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        });\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n\n(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n\n/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', this._handleResize.bind(this));\n        this.addListener(this.$container, 'tapstart', this._handleTapStart.bind(this));\n        this.addListener(Garnish.$bod, 'tapmove', this._handleTapMove.bind(this));\n        this.addListener(Garnish.$bod, 'tapend', this._handleTapEnd.bind(this));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout(() => {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        } else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (((this.$graduations.width() / 2) + (position * -1)) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n        // Remove inner-word punctuation\n        sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        if (!Craft.allowUppercaseInSlug) {\n            sourceVal = sourceVal.toLowerCase();\n        }\n\n        if (Craft.limitAutoSlugsToAscii) {\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n        }\n\n        // Get the \"words\". Split on anything that is not alphanumeric.\n        // Reference: http://www.regular-expressions.info/unicode.html\n        var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n        if (words.length) {\n            return words.join(Craft.slugWordSeparator);\n        } else {\n            return '';\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend({\n    id: null,\n\n    $container: null,\n    state: null,\n    structureDrag: null,\n\n    /**\n     * Init\n     */\n    init: function(id, container, settings) {\n        this.id = id;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Structure.defaults);\n\n        // Is this already a structure?\n        if (this.$container.data('structure')) {\n            Garnish.log('Double-instantiating a structure on an element');\n            this.$container.data('structure').destroy();\n        }\n\n        this.$container.data('structure', this);\n\n        this.state = {};\n\n        if (this.settings.storageKey) {\n            $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n        }\n\n        if (typeof this.state.collapsedElementIds === 'undefined') {\n            this.state.collapsedElementIds = [];\n        }\n\n        var $parents = this.$container.find('ul').prev('.row');\n\n        for (var i = 0; i < $parents.length; i++) {\n            var $row = $($parents[i]),\n                $li = $row.parent(),\n                $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n            if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                $li.addClass('collapsed');\n            }\n\n            this.initToggle($toggle);\n        }\n\n        if (this.settings.sortable) {\n            this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n        }\n\n        if (this.settings.newChildUrl) {\n            this.initNewChildMenus(this.$container.find('.add'));\n        }\n    },\n\n    initToggle: function($toggle) {\n        $toggle.on('click', ev => {\n            var $li = $(ev.currentTarget).closest('li'),\n                elementId = $li.children('.row').find('.element:first').data('id'),\n                viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n            if ($li.hasClass('collapsed')) {\n                $li.removeClass('collapsed');\n\n                if (viewStateKey !== -1) {\n                    this.state.collapsedElementIds.splice(viewStateKey, 1);\n                }\n            } else {\n                $li.addClass('collapsed');\n\n                if (viewStateKey === -1) {\n                    this.state.collapsedElementIds.push(elementId);\n                }\n            }\n\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.state);\n            }\n        });\n    },\n\n    initNewChildMenus: function($addBtns) {\n        this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n    },\n\n    onNewChildMenuClick: function(ev) {\n        var $btn = $(ev.currentTarget);\n\n        if (!$btn.data('menubtn')) {\n            var elementId = $btn.parent().children('.element').data('id'),\n                newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n            $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n            var menuBtn = new Garnish.MenuBtn($btn);\n            menuBtn.showMenu();\n        }\n    },\n\n    getIndent: function(level) {\n        return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n    },\n\n    addElement: function($element) {\n        var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n            $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n        $row.append($element);\n\n        if (this.settings.sortable) {\n            $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n            this.structureDrag.addItems($li);\n        }\n\n        if (this.settings.newChildUrl) {\n            var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n            this.initNewChildMenus($addBtn);\n        }\n\n        $row.css('margin-bottom', -30);\n        $row.velocity({'margin-bottom': 0}, 'fast');\n    },\n\n    removeElement: function($element) {\n        var $li = $element.parent().parent();\n\n        if (this.settings.sortable) {\n            this.structureDrag.removeItems($li);\n        }\n\n        var $parentUl;\n\n        if (!$li.siblings().length) {\n            $parentUl = $li.parent();\n        }\n\n        $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', () => {\n            $li.remove();\n\n            if (typeof $parentUl !== 'undefined') {\n                this._removeUl($parentUl);\n            }\n        });\n    },\n\n    _removeUl: function($ul) {\n        $ul.siblings('.row').children('.toggle').remove();\n        $ul.remove();\n    }\n}, {\n    baseIndent: 8,\n    nestedIndent: 35,\n\n    defaults: {\n        storageKey: null,\n        sortable: false,\n        newChildUrl: null,\n        maxLevels: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend({\n    structure: null,\n    maxLevels: null,\n    draggeeLevel: null,\n\n    $helperLi: null,\n    $targets: null,\n    draggeeHeight: null,\n\n    init: function(structure, maxLevels) {\n        this.structure = structure;\n        this.maxLevels = maxLevels;\n\n        this.$insertion = $('<li class=\"draginsertion\"/>');\n\n        var $items = this.structure.$container.find('li');\n\n        this.base($items, {\n            handle: '.element:first, .move:first',\n            helper: this.getHelper.bind(this)\n        });\n    },\n\n    getHelper: function($helper) {\n        this.$helperLi = $helper;\n        var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n        $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n        $helper.find('.move').removeAttr('title');\n        return $ul;\n    },\n\n    onDragStart: function() {\n        this.$targets = $();\n\n        // Recursively find each of the targets, in the order they appear to be in\n        this.findTargets(this.structure.$container);\n\n        // How deep does the rabbit hole go?\n        this.draggeeLevel = 0;\n        var $level = this.$draggee;\n        do {\n            this.draggeeLevel++;\n            $level = $level.find('> ul > li');\n        } while ($level.length);\n\n        // Collapse the draggee\n        this.draggeeHeight = this.$draggee.height();\n        this.$draggee.velocity({\n            height: 0\n        }, 'fast', () => {\n            this.$draggee.addClass('hidden');\n        });\n        this.base();\n\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.cancelDrag();\n            }\n        });\n    },\n\n    findTargets: function($ul) {\n        var $lis = $ul.children().not(this.$draggee);\n\n        for (var i = 0; i < $lis.length; i++) {\n            var $li = $($lis[i]);\n            this.$targets = this.$targets.add($li.children('.row'));\n\n            if (!$li.hasClass('collapsed')) {\n                this.findTargets($li.children('ul'));\n            }\n        }\n    },\n\n    onDrag: function() {\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n            this.$insertion.remove();\n        }\n\n        // First let's find the closest target\n        this._.$closestTarget = null;\n        this._.closestTargetPos = null;\n        this._.closestTargetYDiff = null;\n        this._.closestTargetOffset = null;\n        this._.closestTargetHeight = null;\n\n        for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n            this._.$target = $(this.$targets[this._.i]);\n            this._.targetOffset = this._.$target.offset();\n            this._.targetHeight = this._.$target.outerHeight();\n            this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n            this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n            if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                this._.$closestTarget = this._.$target;\n                this._.closestTargetPos = this._.i;\n                this._.closestTargetYDiff = this._.targetYDiff;\n                this._.closestTargetOffset = this._.targetOffset;\n                this._.closestTargetHeight = this._.targetHeight;\n            } else {\n                // Getting colder\n                break;\n            }\n        }\n\n        if (!this._.$closestTarget) {\n            return;\n        }\n\n        // Are we hovering above the first row?\n        if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n            this.$insertion.prependTo(this.structure.$container);\n        } else {\n            this._.$closestTargetLi = this._.$closestTarget.parent();\n            this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n            // Is there a next row?\n            if (this._.closestTargetPos < this.$targets.length - 1) {\n                this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n            } else {\n                this._.$nextTargetLi = null;\n                this._.nextTargetLevel = null;\n            }\n\n            // Are we hovering between this row and the next one?\n            this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n            /**\n             * Scenario 1: Both rows have the same level.\n             *\n             *     * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                if (this._.hoveringBetweenRows) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                        // Position the insertion after the closest target\n                        this.$insertion.insertAfter(this._.$closestTargetLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n\n            /**\n             * Scenario 2: Next row is a child of this one.\n             *\n             *     * Row 1\n             *     ----------------------\n             *         * Row 2\n             */\n\n            else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                    if (this._.hoveringBetweenRows) {\n                        // Position the insertion as the first child of the closest target\n                        this.$insertion.insertBefore(this._.$nextTargetLi);\n                    } else {\n                        this._.$closestTarget.addClass('draghover');\n                        this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                    }\n                }\n            }\n\n            /**\n             * Scenario 3: Next row is a child of a parent node, or there is no next row.\n             *\n             *         * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            else {\n                if (this._.hoveringBetweenRows) {\n                    // Determine which <li> to position the insertion after\n                    this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                    if (Craft.orientation === 'rtl') {\n                        this._.draggeeX += this.$helperLi.width();\n                    }\n\n                    this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                    this._.$closestParentLi = null;\n                    this._.closestParentLiXDiff = null;\n                    this._.closestParentLevel = null;\n\n                    for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                        this._.$parentLi = $(this._.$parentLis[this._.i]);\n                        this._.parentLiX = this._.$parentLi.offset().left;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.parentLiX += this._.$parentLi.width();\n                        }\n\n                        this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                        this._.parentLevel = this._.$parentLi.data('level');\n\n                        if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                            !this._.$closestParentLi || (\n                                this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                            )\n                        )) {\n                            this._.$closestParentLi = this._.$parentLi;\n                            this._.closestParentLiXDiff = this._.parentLiXDiff;\n                            this._.closestParentLevel = this._.parentLevel;\n                        }\n                    }\n\n                    if (this._.$closestParentLi) {\n                        this.$insertion.insertAfter(this._.$closestParentLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n        }\n    },\n\n    cancelDrag: function() {\n        this.$insertion.remove();\n\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n        }\n\n        this.onMouseUp();\n    },\n\n    onDragStop: function() {\n        // Are we repositioning the draggee?\n        if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n            var $draggeeParent,\n                moved;\n\n            // Are we about to leave the draggee's original parent childless?\n            if (!this.$draggee.siblings().length) {\n                $draggeeParent = this.$draggee.parent();\n            }\n\n            if (this.$insertion.parent().length) {\n                // Make sure the insertion isn't right next to the draggee\n                var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                    this.$insertion.replaceWith(this.$draggee);\n                    moved = true;\n                } else {\n                    this.$insertion.remove();\n                    moved = false;\n                }\n            } else {\n                var $ul = this._.$closestTargetLi.children('ul');\n\n                // Make sure this is a different parent than the draggee's\n                if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                    if (!$ul.length) {\n                        var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                        this.structure.initToggle($toggle);\n\n                        $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                    } else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                        this._.$closestTarget.children('.toggle').trigger('click');\n                    }\n\n                    this.$draggee.appendTo($ul);\n                    moved = true;\n                } else {\n                    moved = false;\n                }\n            }\n\n            // Remove the class either way\n            this._.$closestTarget.removeClass('draghover');\n\n            if (moved) {\n                // Now deal with the now-childless parent\n                if ($draggeeParent) {\n                    this.structure._removeUl($draggeeParent);\n                }\n\n                // Has the level changed?\n                var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                var animateCss;\n\n                if (newLevel != this.$draggee.data('level')) {\n                    // Correct the helper's padding if moving to/from level 1\n                    if (this.$draggee.data('level') == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = 38;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    } else if (newLevel == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    }\n\n                    this.setLevel(this.$draggee, newLevel);\n                }\n\n                // Make it real\n                var $element = this.$draggee.children('.row').children('.element');\n\n                var data = {\n                    structureId: this.structure.id,\n                    elementId: $element.data('id'),\n                    siteId: $element.data('site-id'),\n                    prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                    parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                };\n\n                Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                    }\n                });\n            }\n        }\n\n        // Animate things back into place\n        this.$draggee.velocity('stop').removeClass('hidden').velocity({\n            height: this.draggeeHeight\n        }, 'fast', () => {\n            this.$draggee.css('height', 'auto');\n        });\n\n        this.returnHelpersToDraggees();\n\n        this.base();\n    },\n\n    setLevel: function($li, level) {\n        $li.data('level', level);\n\n        var indent = this.structure.getIndent(level);\n\n        var css = {};\n        css['margin-' + Craft.left] = '-' + indent + 'px';\n        css['padding-' + Craft.left] = indent + 'px';\n        this.$draggee.children('.row').css(css);\n\n        var $childLis = $li.children('ul').children();\n\n        for (var i = 0; i < $childLis.length; i++) {\n            this.setLevel($($childLis[i]), level + 1);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n    tableView: null,\n    structureId: null,\n    maxLevels: null,\n\n    _basePadding: null,\n    _helperMargin: null,\n\n    _$firstRowCells: null,\n    _$titleHelperCell: null,\n\n    _titleHelperCellOuterWidth: null,\n\n    _ancestors: null,\n    _updateAncestorsFrame: null,\n\n    _draggeeLevel: null,\n    _draggeeLevelDelta: null,\n    draggingLastElements: null,\n    _loadingDraggeeLevelDelta: false,\n\n    _targetLevel: null,\n    _targetLevelBounds: null,\n\n    _positionChanged: null,\n\n    /**\n     * Constructor\n     */\n    init: function(tableView, $elements, settings) {\n        this.tableView = tableView;\n        this.structureId = this.tableView.$table.data('structure-id');\n        this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n        this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n        this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n        settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n            handle: '.move',\n            collapseDraggees: true,\n            singleHelper: true,\n            helperSpacingY: 2,\n            magnetStrength: 4,\n            helper: this.getHelper.bind(this),\n            helperLagBase: 1.5,\n            axis: Garnish.Y_AXIS\n        });\n\n        this.base($elements, settings);\n    },\n\n    /**\n     * Returns the draggee rows (including any descendent rows).\n     */\n    findDraggee: function() {\n        this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n        this._draggeeLevelDelta = 0;\n\n        var $draggee = $(this.$targetItem),\n            $nextRow = this.$targetItem.next();\n\n        while ($nextRow.length) {\n            // See if this row is a descendant of the draggee\n            var nextRowLevel = $nextRow.data('level');\n\n            if (nextRowLevel <= this._draggeeLevel) {\n                break;\n            }\n\n            // Is this the deepest descendant we've seen so far?\n            var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n            if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                this._draggeeLevelDelta = nextRowLevelDelta;\n            }\n\n            // Add it and prep the next row\n            $draggee = $draggee.add($nextRow);\n            $nextRow = $nextRow.next();\n        }\n\n        // Are we dragging the last elements on the page?\n        this.draggingLastElements = !$nextRow.length;\n\n        // Do we have a maxLevels to enforce,\n        // and does it look like this draggee has descendants we don't know about yet?\n        if (\n            this.maxLevels &&\n            this.draggingLastElements &&\n            this.tableView.getMorePending()\n        ) {\n            // Only way to know the true descendant level delta is to ask PHP\n            this._loadingDraggeeLevelDelta = true;\n\n            var data = this._getAjaxBaseData(this.$targetItem);\n\n            Craft.postActionRequest('structures/get-element-level-delta', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this._loadingDraggeeLevelDelta = false;\n\n                    if (this.dragging) {\n                        this._draggeeLevelDelta = response.delta;\n                        this.drag(false);\n                    }\n                }\n            });\n        }\n\n        return $draggee;\n    },\n\n    /**\n     * Returns the drag helper.\n     */\n    getHelper: function($helperRow) {\n        var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n            $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n            $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the column widths\n        this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n        var $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            var $helperCell = $($helperCells[i]);\n\n            // Skip the checkbox cell\n            if ($helperCell.hasClass('checkbox-cell')) {\n                $helperCell.remove();\n                continue;\n            }\n\n            // Hard-set the cell widths\n            var $firstRowCell = $(this._$firstRowCells[i]);\n            var width = $firstRowCell[0].getBoundingClientRect().width;\n\n            $firstRowCell.css('width', width + 'px');\n            $helperCell.css('width', width + 'px');\n\n            // Is this the title cell?\n            if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                this._$titleHelperCell = $helperCell;\n\n                var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                this._titleHelperCellOuterWidth = width;\n\n                $helperCell.css('padding-' + Craft.left, this._basePadding);\n            }\n        }\n\n        return $outerContainer;\n    },\n\n    /**\n     * Returns whether the draggee can be inserted before a given item.\n     */\n    canInsertBefore: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item.prev(), $item) !== false);\n    },\n\n    /**\n     * Returns whether the draggee can be inserted after a given item.\n     */\n    canInsertAfter: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item, $item.next()) !== false);\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        // Get the initial set of ancestors, before the item gets moved\n        this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n        // Set the initial target level bounds\n        this._setTargetLevelBounds();\n\n        // Check to see if we should load more elements now\n        this.tableView.maybeLoadMore();\n\n        this.base();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.base();\n        this._updateIndent();\n    },\n\n    /**\n     * On Insertion Point Change\n     */\n    onInsertionPointChange: function() {\n        this._setTargetLevelBounds();\n        this._updateAncestorsBeforeRepaint();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this._positionChanged = false;\n        this.base();\n\n        // Update the draggee's padding if the position just changed\n        // ---------------------------------------------------------------------\n\n        if (this._targetLevel != this._draggeeLevel) {\n            var levelDiff = this._targetLevel - this._draggeeLevel;\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                var $draggee = $(this.$draggee[i]),\n                    oldLevel = $draggee.data('level'),\n                    newLevel = oldLevel + levelDiff,\n                    padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                $draggee.data('level', newLevel);\n                $draggee.find('.element').data('level', newLevel);\n                $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n            }\n\n            this._positionChanged = true;\n        }\n\n        // Keep in mind this could have also been set by onSortChange()\n        if (this._positionChanged) {\n            // Tell the server about the new position\n            // -----------------------------------------------------------------\n\n            var data = this._getAjaxBaseData(this.$draggee);\n\n            // Find the previous sibling/parent, if there is one\n            var $prevRow = this.$draggee.first().prev();\n\n            while ($prevRow.length) {\n                var prevRowLevel = $prevRow.data('level');\n\n                if (prevRowLevel == this._targetLevel) {\n                    data.prevId = $prevRow.data('id');\n                    break;\n                }\n\n                if (prevRowLevel < this._targetLevel) {\n                    data.parentId = $prevRow.data('id');\n\n                    // Is this row collapsed?\n                    var $toggle = $prevRow.find('> th > .toggle');\n\n                    if (!$toggle.hasClass('expanded')) {\n                        // Make it look expanded\n                        $toggle.addClass('expanded');\n\n                        // Add a temporary row\n                        var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                        // Remove the target item\n                        if (this.tableView.elementSelect) {\n                            this.tableView.elementSelect.removeItems(this.$targetItem);\n                        }\n\n                        this.removeItems(this.$targetItem);\n                        this.$targetItem.remove();\n                        this.tableView._totalVisible--;\n                    }\n\n                    break;\n                }\n\n                $prevRow = $prevRow.prev();\n            }\n\n            Craft.postActionRequest('structures/move-element', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    if (!response.success) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        this.tableView.elementIndex.updateElements();\n                        return;\n                    }\n                    Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                    this.onPositionChange();\n\n                    // Were we waiting on this to complete so we can expand the new parent?\n                    if ($spinnerRow && $spinnerRow.parent().length) {\n                        $spinnerRow.remove();\n                        this.tableView._expandElement($toggle, true);\n                    }\n\n                    // See if we should run any pending tasks\n                    Craft.cp.runQueue();\n                }\n            });\n        }\n    },\n\n    onSortChange: function() {\n        if (this.tableView.elementSelect) {\n            this.tableView.elementSelect.resetItemOrder();\n        }\n\n        this._positionChanged = true;\n        this.base();\n    },\n\n    onPositionChange: function() {\n        Garnish.requestAnimationFrame(() => {\n            this.trigger('positionChange');\n            this.settings.onPositionChange();\n        });\n    },\n\n    onReturnHelpersToDraggees: function() {\n        this._$firstRowCells.css('width', '');\n\n        // If we were dragging the last elements on the page and ended up loading any additional elements in,\n        // there could be a gap between the last draggee item and whatever now comes after it.\n        // So remove the post-draggee elements and possibly load up the next batch.\n        if (this.draggingLastElements && this.tableView.getMorePending()) {\n            // Update the element index's record of how many items are actually visible\n            this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n            var $postDraggeeItems = this.$draggee.last().nextAll();\n\n            if ($postDraggeeItems.length) {\n                this.removeItems($postDraggeeItems);\n                $postDraggeeItems.remove();\n                this.tableView.maybeLoadMore();\n            }\n        }\n\n        this.base();\n    },\n\n    /**\n     * Returns the min and max levels that the draggee could occupy between\n     * two given rows, or false if it’s not going to work out.\n     */\n    _getLevelBounds: function($prevRow, $nextRow) {\n        // Can't go any lower than the next row, if there is one\n        if ($nextRow && $nextRow.length) {\n            this._getLevelBounds._minLevel = $nextRow.data('level');\n        } else {\n            this._getLevelBounds._minLevel = 1;\n        }\n\n        // Can't go any higher than the previous row + 1\n        if ($prevRow && $prevRow.length) {\n            this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n        } else {\n            this._getLevelBounds._maxLevel = 1;\n        }\n\n        // Does this structure have a max level?\n        if (this.maxLevels) {\n            // Make sure it's going to fit at all here\n            if (\n                this._getLevelBounds._minLevel != 1 &&\n                this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n            ) {\n                return false;\n            }\n\n            // Limit the max level if we have to\n            if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                    this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                }\n            }\n        }\n\n        return {\n            min: this._getLevelBounds._minLevel,\n            max: this._getLevelBounds._maxLevel\n        };\n    },\n\n    /**\n     * Determines the min and max possible levels at the current draggee's position.\n     */\n    _setTargetLevelBounds: function() {\n        this._targetLevelBounds = this._getLevelBounds(\n            this.$draggee.first().prev(),\n            this.$draggee.last().next()\n        );\n    },\n\n    /**\n     * Determines the target level based on the current mouse position.\n     */\n    _updateIndent: function(forcePositionChange) {\n        // Figure out the target level\n        // ---------------------------------------------------------------------\n\n        // How far has the cursor moved?\n        this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n        // Flip that if this is RTL\n        if (Craft.orientation === 'rtl') {\n            this._updateIndent._mouseDist *= -1;\n        }\n\n        // What is that in indentation levels?\n        this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // Combine with the original level to get the new target level\n        this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n        // Contain it within our min/max levels\n        if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n            this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n            this._updateIndent._targetLevel = this._targetLevelBounds.min;\n        } else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n            this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n            this._updateIndent._targetLevel = this._targetLevelBounds.max;\n        }\n\n        // Has the target level changed?\n        if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n            // Target level is changing, so update the ancestors\n            this._updateAncestorsBeforeRepaint();\n        }\n\n        // Update the UI\n        // ---------------------------------------------------------------------\n\n        // How far away is the cursor from the exact target level distance?\n        this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // What's the magnet impact of that?\n        this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n        // Put it on a leash\n        if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n            this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n        }\n\n        // Apply the new margin/width\n        this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n        this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n        this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n    },\n\n    /**\n     * Returns the indent size for a given level\n     */\n    _getLevelIndent: function(level) {\n        return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n    },\n\n    /**\n     * Returns the base data that should be sent with StructureController Ajax requests.\n     */\n    _getAjaxBaseData: function($row) {\n        return {\n            structureId: this.structureId,\n            elementId: $row.data('id'),\n            siteId: $row.find('.element:first').data('site-id')\n        };\n    },\n\n    /**\n     * Returns a row's ancestor rows\n     */\n    _getAncestors: function($row, targetLevel) {\n        this._getAncestors._ancestors = [];\n\n        if (targetLevel != 0) {\n            this._getAncestors._level = targetLevel;\n            this._getAncestors._$prevRow = $row.prev();\n\n            while (this._getAncestors._$prevRow.length) {\n                if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                    this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                    this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                    // Did we just reach the top?\n                    if (this._getAncestors._level == 0) {\n                        break;\n                    }\n                }\n\n                this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n            }\n        }\n\n        return this._getAncestors._ancestors;\n    },\n\n    /**\n     * Prepares to have the ancestors updated before the screen is repainted.\n     */\n    _updateAncestorsBeforeRepaint: function() {\n        if (this._updateAncestorsFrame) {\n            Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n        }\n\n        this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestors.bind(this));\n    },\n\n    _updateAncestors: function() {\n        this._updateAncestorsFrame = null;\n\n        // Update the old ancestors\n        // -----------------------------------------------------------------\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n            // One less descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n            // Is it now childless?\n            if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                // Remove its toggle\n                this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n            }\n        }\n\n        // Update the new ancestors\n        // -----------------------------------------------------------------\n\n        this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n            // One more descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n            // Is this its first child?\n            if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                // Create its toggle\n                $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                    .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n            }\n        }\n\n        this._ancestors = this._updateAncestors._newAncestors;\n\n        delete this._updateAncestors._i;\n        delete this._updateAncestors._$ancestor;\n        delete this._updateAncestors._newAncestors;\n    }\n}, {\n    HELPER_MARGIN: 0,\n    LEVEL_INDENT: 44,\n    MAX_GIVE: 22,\n\n    defaults: {\n        onPositionChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend({\n    $table: null,\n    $selectedSortHeader: null,\n\n    structureTableSort: null,\n\n    _totalVisiblePostStructureTableDraggee: null,\n    _morePendingPostStructureTableDraggee: false,\n\n    getElementContainer: function() {\n        // Save a reference to the table\n        this.$table = this.$container.find('table:first');\n        return this.$table.children('tbody:first');\n    },\n\n    afterInit: function() {\n        // Set the sort header\n        this.initTableHeaders();\n\n        // Create the Structure Table Sorter\n        if (\n            this.elementIndex.settings.context === 'index' &&\n            this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n            Garnish.hasAttr(this.$table, 'data-structure-id')\n        ) {\n            this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements());\n        } else {\n            this.structureTableSort = null;\n        }\n\n        // Handle expand/collapse toggles for Structures\n        if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n            this.addListener(this.$elementContainer, 'click', function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.hasClass('toggle')) {\n                    if (this._collapseElement($target) === false) {\n                        this._expandElement($target);\n                    }\n                }\n            });\n        }\n    },\n\n    initTableHeaders: function() {\n        var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n            $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n        for (var i = 0; i < $tableHeaders.length; i++) {\n            var $header = $tableHeaders.eq(i),\n                attr = $header.attr('data-attribute');\n\n            // Is this the selected sort attribute?\n            if (attr === selectedSortAttr) {\n                this.$selectedSortHeader = $header;\n                var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                $header\n                    .addClass('ordered ' + selectedSortDir)\n                    .on('click', this._handleSelectedSortHeaderClick.bind(this));\n            } else {\n                // Is this attribute sortable?\n                var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                if ($sortAttribute.length) {\n                    $header\n                        .addClass('orderable')\n                        .on('click', this._handleUnselectedSortHeaderClick.bind(this));\n                }\n            }\n        }\n    },\n\n    isVerticalList: function() {\n        return true;\n    },\n\n    getTotalVisible: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._totalVisiblePostStructureTableDraggee;\n        } else {\n            return this._totalVisible;\n        }\n    },\n\n    setTotalVisible: function(totalVisible) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._totalVisiblePostStructureTableDraggee = totalVisible;\n        } else {\n            this._totalVisible = totalVisible;\n        }\n    },\n\n    getMorePending: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._morePendingPostStructureTableDraggee;\n        } else {\n            return this._morePending;\n        }\n    },\n\n    setMorePending: function(morePending) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._morePendingPostStructureTableDraggee = morePending;\n        } else {\n            this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n        }\n    },\n\n    getLoadMoreParams: function() {\n        var params = this.base();\n\n        // If we are dragging the last elements on the page,\n        // tell the controller to only load elements positioned after the draggee.\n        if (this._isStructureTableDraggingLastElements()) {\n            params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n        }\n\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        this.base($newElements);\n\n        if (this.structureTableSort) {\n            this.structureTableSort.addItems($newElements);\n        }\n\n        Craft.cp.updateResponsiveTables();\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            params: {\n                includeTableAttributesForSource: this.elementIndex.sourceKey\n            },\n            onSaveElement: response => {\n                if (response.tableAttributes) {\n                    this._updateTableAttributes($element, response.tableAttributes);\n                }\n            },\n            elementIndex: this.elementIndex\n        });\n    },\n\n    _collapseElement: function($toggle, force) {\n        if (!force && !$toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.removeClass('expanded');\n\n        // Find and remove the descendant rows\n        var $row = $toggle.parent().parent(),\n            id = $row.data('id'),\n            level = $row.data('level'),\n            $nextRow = $row.next();\n\n        while ($nextRow.length) {\n            if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                if ($nextRow.data('level') <= level) {\n                    break;\n                }\n\n                if (this.elementSelect) {\n                    this.elementSelect.removeItems($nextRow);\n                }\n\n                if (this.structureTableSort) {\n                    this.structureTableSort.removeItems($nextRow);\n                }\n\n                this._totalVisible--;\n            }\n\n            var $nextNextRow = $nextRow.next();\n            $nextRow.remove();\n            $nextRow = $nextNextRow;\n        }\n\n        // Remember that this row should be collapsed\n        if (!this.elementIndex.instanceState.collapsedElementIds) {\n            this.elementIndex.instanceState.collapsedElementIds = [];\n        }\n\n        this.elementIndex.instanceState.collapsedElementIds.push(id);\n        this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n        // Bottom of the index might be viewable now\n        this.maybeLoadMore();\n    },\n\n    _expandElement: function($toggle, force) {\n        if (!force && $toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.addClass('expanded');\n\n        // Remove this element from our list of collapsed elements\n        if (this.elementIndex.instanceState.collapsedElementIds) {\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n            if (index !== -1) {\n                this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                // Add a temporary row\n                var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                // Load the nested elements\n                var params = $.extend(true, {}, this.settings.params);\n                params.criteria.descendantOf = id;\n\n                Craft.postActionRequest('element-indexes/get-more-elements', params, (response, textStatus) => {\n                    // Do we even care about this anymore?\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n\n                    if (textStatus === 'success') {\n                        var $newElements = $(response.html);\n\n                        // Are there more descendants we didn't get in this batch?\n                        var totalVisible = (this._totalVisible + $newElements.length),\n                            morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                        if (morePending) {\n                            // Remove all the elements after it\n                            var $nextRows = $spinnerRow.nextAll();\n\n                            if (this.elementSelect) {\n                                this.elementSelect.removeItems($nextRows);\n                            }\n\n                            if (this.structureTableSort) {\n                                this.structureTableSort.removeItems($nextRows);\n                            }\n\n                            $nextRows.remove();\n                            totalVisible -= $nextRows.length;\n                        } else {\n                            // Maintain the current 'more' status\n                            morePending = this._morePending;\n                        }\n\n                        $spinnerRow.replaceWith($newElements);\n                        this.thumbLoader.load($newElements);\n\n                        if (this.elementIndex.actions || this.settings.selectable) {\n                            this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                            this.elementIndex.updateActionTriggers();\n                        }\n\n                        if (this.structureTableSort) {\n                            this.structureTableSort.addItems($newElements);\n                        }\n\n                        Craft.appendHeadHtml(response.headHtml);\n                        Craft.appendFootHtml(response.footHtml);\n                        Craft.cp.updateResponsiveTables();\n\n                        this.setTotalVisible(totalVisible);\n                        this.setMorePending(morePending);\n\n                        // Is there room to load more right now?\n                        this.maybeLoadMore();\n                    }\n                });\n            }\n        }\n    },\n\n    _createSpinnerRowAfter: function($row) {\n        return $(\n            '<tr data-spinnerrow>' +\n            '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n            '<div class=\"spinner\"/>' +\n            '</td>' +\n            '</tr>'\n        ).insertAfter($row);\n    },\n\n    _isStructureTableDraggingLastElements: function() {\n        return (\n            this.structureTableSort &&\n            this.structureTableSort.dragging &&\n            this.structureTableSort.draggingLastElements\n        );\n    },\n\n    _handleSelectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        // Reverse the sort direction\n        var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n            newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n        this.elementIndex.setSortDirection(newSortDir);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleUnselectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        var attr = $header.attr('data-attribute');\n\n        this.elementIndex.setSortAttribute(attr);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleSortHeaderClick: function(ev, $header) {\n        if (this.$selectedSortHeader) {\n            this.$selectedSortHeader.removeClass('ordered asc desc');\n        }\n\n        $header.removeClass('orderable').addClass('ordered loading');\n        this.elementIndex.storeSortAttributeAndDirection();\n        this.elementIndex.updateElements();\n\n        // No need for two spinners\n        this.elementIndex.setIndexAvailable();\n    },\n\n    _updateTableAttributes: function($element, tableAttributes) {\n        var $tr = $element.closest('tr');\n\n        for (var attr in tableAttributes) {\n            if (!tableAttributes.hasOwnProperty(attr)) {\n                continue;\n            }\n\n            $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend({\n    searchTimeout: null,\n    searchMenu: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addTagInput: null,\n    $spinner: null,\n\n    _ignoreBlur: false,\n\n    init: function(settings) {\n        // Normalize the settings\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n        this.$addTagInput = this.$container.children('.add').children('.text');\n        this.$spinner = this.$addTagInput.next();\n\n        this.addListener(this.$addTagInput, 'input', () => {\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.searchForTags.bind(this), 500);\n        });\n\n        this.addListener(this.$addTagInput, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n            }\n\n            let $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options.filter('.hover'));\n                    }\n                    return;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                            if ($nextOption.length) {\n                                this.focusOption($nextOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(0));\n                        }\n                    }\n                    return;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                            if ($prevOption.length) {\n                                this.focusOption($prevOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                        }\n                    }\n                    return;\n                }\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'focus', function() {\n            if (this.searchMenu) {\n                this.searchMenu.show();\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'blur', function() {\n            if (this._ignoreBlur) {\n                this._ignoreBlur = false;\n                return;\n            }\n\n            setTimeout(() => {\n                if (this.searchMenu) {\n                    this.searchMenu.hide();\n                }\n            }, 1);\n        });\n    },\n\n    focusOption: function($option) {\n        this.searchMenu.$options.removeClass('hover');\n        $option.addClass('hover');\n        this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n    },\n\n    // No \"add\" button\n    getAddElementsBtn: $.noop,\n\n    getElementSortAxis: function() {\n        return null;\n    },\n\n    searchForTags: function() {\n        if (this.searchMenu) {\n            this.killSearchMenu();\n        }\n\n        var val = this.$addTagInput.val();\n\n        if (val) {\n            this.$spinner.removeClass('hidden');\n\n            var excludeIds = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                var id = $(this.$elements[i]).data('id');\n\n                if (id) {\n                    excludeIds.push(id);\n                }\n            }\n\n            if (this.settings.sourceElementId) {\n                excludeIds.push(this.settings.sourceElementId);\n            }\n\n            var data = {\n                search: this.$addTagInput.val(),\n                tagGroupId: this.settings.tagGroupId,\n                excludeIds: excludeIds\n            };\n\n            Craft.postActionRequest('tags/search-for-tags', data, (response, textStatus) => {\n                // Just in case\n                if (this.searchMenu) {\n                    this.killSearchMenu();\n                }\n\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                        $ul = $('<ul/>').appendTo($menu);\n\n                    var $li;\n\n                    for (var i = 0; i < response.tags.length; i++) {\n                        $li = $('<li/>')\n                            .appendTo($ul);\n\n                        $('<a data-icon=\"tag\"/>')\n                            .appendTo($li)\n                            .text(response.tags[i].title)\n                            .data('id', response.tags[i].id)\n                            .addClass(response.tags[i].exclude ? 'disabled' : '');\n                    }\n\n                    if (!response.exactMatch) {\n                        $li = $('<li/>').appendTo($ul);\n                        $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                    }\n\n                    $ul.find('a:not(.disabled):first').addClass('hover');\n\n                    this.searchMenu = new Garnish.Menu($menu, {\n                        attachToElement: this.$addTagInput,\n                        onOptionSelect: this.selectTag.bind(this)\n                    });\n\n                    this.addListener($menu, 'mousedown', () => {\n                        this._ignoreBlur = true;\n                    });\n\n                    this.searchMenu.show();\n                }\n            });\n        } else {\n            this.$spinner.addClass('hidden');\n        }\n    },\n\n    selectTag: function(option) {\n        var $option = $(option);\n\n        if ($option.hasClass('disabled')) {\n            return;\n        }\n\n        var id = $option.data('id');\n        var title = $option.text();\n\n        var $element = $('<div/>', {\n            'class': 'element small removable',\n            'data-id': id,\n            'data-site-id': this.settings.targetSiteId,\n            'data-label': title,\n            'data-editable': '1'\n        }).appendTo(this.$elementsContainer);\n\n        var $input = $('<input/>', {\n            'type': 'hidden',\n            'name': this.settings.name + '[]',\n            'value': id\n        }).appendTo($element);\n\n        $('<a/>', {\n            'class': 'delete icon',\n            'title': Craft.t('app', 'Remove')\n        }).appendTo($element);\n\n        var $titleContainer = $('<div/>', {\n            'class': 'label'\n        }).appendTo($element);\n\n        $('<span/>', {\n            'class': 'title',\n            text: title\n        }).appendTo($titleContainer);\n\n        var margin = -($element.outerWidth() + 10);\n        this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addTagInput.velocity(animateCss, 'fast');\n\n        this.$elements = this.$elements.add($element);\n\n        this.addElements($element);\n\n        this.killSearchMenu();\n        this.$addTagInput.val('');\n        this.$addTagInput.trigger('focus');\n\n        if (!id) {\n            // We need to create the tag first\n            $element.addClass('loading disabled');\n\n            var data = {\n                groupId: this.settings.tagGroupId,\n                title: title\n            };\n\n            Craft.postActionRequest('tags/create-tag', data, (response, textStatus) => {\n                if (textStatus === 'success' && response.success) {\n                    $element.attr('data-id', response.id);\n                    $input.val(response.id);\n\n                    $element.removeClass('loading disabled');\n                } else {\n                    this.removeElement($element);\n\n                    if (textStatus === 'success') {\n                        // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                }\n            });\n        }\n    },\n\n    killSearchMenu: function() {\n        this.searchMenu.hide();\n        this.searchMenu.destroy();\n        this.searchMenu = null;\n    }\n}, {\n    defaults: {\n        tagGroupId: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend({\n    getElementContainer: function() {\n        return this.$container.children('ul');\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            config = $.extend({\n                autocomplete: false,\n            }, config);\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: typeof config.autocomplete === 'boolean' ? (config.autocomplete ? 'on' : 'off') : config.autocomplete,\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            } else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n                'aria-label': Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html': option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                html: config.label,\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            } else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: allChecked || (config.values || []).includes(option.value),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            config.fieldset = true;\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<button/>', {\n                'type': 'button',\n                'class': 'lightswitch',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'checkbox',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            const id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            const containerId = config.containerId || id + '-container';\n            const name = config.name || null;\n            const value = config.value || null;\n            const small = config.small || false;\n            const autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            const disabled = config.disabled || false;\n\n            const $container = $('<div/>', {\n                id: containerId,\n                class: 'flex color-container'\n            });\n\n            const $colorPreviewContainer = $('<div/>', {\n                class: 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            const $colorPreview = $('<div/>', {\n                class: 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            const $inputContainer = $('<div/>', {\n                class: 'color-input-container',\n            })\n                .append(\n                    $('<div/>', {\n                        class: 'color-hex-indicator light code',\n                        'aria-hidden': 'true',\n                        text: '#',\n                    })\n                )\n                .appendTo($container);\n\n            const $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: Craft.ltrim(value, '#'),\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled,\n                'aria-label': Craft.t('app', 'Color hex value'),\n            }).appendTo($inputContainer);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            config.fieldset = true;o\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000)) + '-date';\n            var name = config.name || null;\n            var inputName = name ? name + '[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate: null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000)) + '-time';\n            var name = config.name || null;\n            var inputName = name ? name + '[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours() * 3600 + value.getMinutes() * 60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $(config.fieldset ? '<fieldset/>' : '<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $(config.fieldset ? '<legend/>' : '<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-${config.fieldset ? 'legend' : 'label'}` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': !config.fieldset && config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend({\n    uploader: null,\n    allowedKinds: null,\n    $element: null,\n    settings: null,\n    _rejectedFiles: {},\n    _extensionList: null,\n    _totalFileCounter: 0,\n    _validFileCounter: 0,\n\n    init: function($element, settings) {\n        this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n        this.$element = $element;\n        this.allowedKinds = null;\n        this._extensionList = null;\n        this._totalFileCounter = 0;\n        this._validFileCounter = 0;\n\n        settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n        var events = settings.events;\n        delete settings.events;\n\n        if (settings.allowedKinds && settings.allowedKinds.length) {\n            if (typeof settings.allowedKinds === 'string') {\n                settings.allowedKinds = [settings.allowedKinds];\n            }\n\n            this.allowedKinds = settings.allowedKinds;\n            delete settings.allowedKinds;\n        }\n\n        settings.autoUpload = false;\n\n        this.uploader = this.$element.fileupload(settings);\n        for (var event in events) {\n            if (!events.hasOwnProperty(event)) {\n                continue;\n            }\n\n            this.uploader.on(event, events[event]);\n        }\n\n        this.settings = settings;\n\n        this.uploader.on('fileuploadadd', this.onFileAdd.bind(this));\n    },\n\n    /**\n     * Set uploader parameters.\n     */\n    setParams: function(paramObject) {\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        this.uploader.fileupload('option', {formData: paramObject});\n    },\n\n    /**\n     * Get the number of uploads in progress.\n     */\n    getInProgress: function() {\n        return this.uploader.fileupload('active');\n    },\n\n    /**\n     * Return true, if this is the last upload.\n     */\n    isLastUpload: function() {\n        // Processing the last file or not processing at all.\n        return this.getInProgress() < 2;\n    },\n\n    /**\n     * Called on file add.\n     */\n    onFileAdd: function(e, data) {\n        e.stopPropagation();\n\n        var validateExtension = false;\n\n        if (this.allowedKinds) {\n            if (!this._extensionList) {\n                this._createExtensionList();\n            }\n\n            validateExtension = true;\n        }\n\n        // Make sure that file API is there before relying on it\n        data.process().done(() => {\n            var file = data.files[0];\n            var pass = true;\n            if (validateExtension) {\n                var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                var fileExtension = matches[1];\n                if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                    pass = false;\n                    this._rejectedFiles.type.push('“' + file.name + '”');\n                }\n            }\n\n            if (file.size > this.settings.maxFileSize) {\n                this._rejectedFiles.size.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            // If the validation has passed for this file up to now, check if we're not hitting any limits\n            if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                this._rejectedFiles.limit.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            if (pass) {\n                this._validFileCounter++;\n                data.submit();\n            }\n\n            if (++this._totalFileCounter === data.originalFiles.length) {\n                this._totalFileCounter = 0;\n                this._validFileCounter = 0;\n                this.processErrorMessages();\n            }\n        });\n\n        return true;\n    },\n\n    /**\n     * Process error messages.\n     */\n    processErrorMessages: function() {\n        var str;\n\n        if (this._rejectedFiles.type.length) {\n            if (this._rejectedFiles.type.length === 1) {\n                str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            } else {\n                str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n            this._rejectedFiles.type = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.size.length) {\n            if (this._rejectedFiles.size.length === 1) {\n                str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n            this._rejectedFiles.size = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.limit.length) {\n            if (this._rejectedFiles.limit.length === 1) {\n                str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n            this._rejectedFiles.limit = [];\n            alert(str);\n        }\n    },\n\n    humanFileSize: function(bytes) {\n        var threshold = 1024;\n\n        if (bytes < threshold) {\n            return bytes + ' B';\n        }\n\n        var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        var u = -1;\n\n        do {\n            bytes = bytes / threshold;\n            ++u;\n        }\n        while (bytes >= threshold);\n\n        return bytes.toFixed(1) + ' ' + units[u];\n    },\n\n    _createExtensionList: function() {\n        this._extensionList = [];\n\n        for (var i = 0; i < this.allowedKinds.length; i++) {\n            var allowedKind = this.allowedKinds[i];\n\n            if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                    var ext = Craft.fileKinds[allowedKind].extensions[j];\n                    this._extensionList.push(ext);\n                }\n            }\n        }\n    },\n\n    destroy: function() {\n        this.$element.fileupload('destroy');\n        this.base();\n    }\n}, {\n    defaults: {\n        dropZone: null,\n        pasteZone: null,\n        fileInput: null,\n        sequentialUploads: true,\n        maxFileSize: Craft.maxUploadSize,\n        allowedKinds: null,\n        events: {},\n        canAddMoreFiles: null,\n        headers: {'Accept': 'application/json;q=0.9,*/*;q=0.8'},\n        paramName: 'assets-upload'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Make it lowercase\n        sourceVal = sourceVal.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        sourceVal = Craft.asciiString(sourceVal);\n\n        // Handle must start with a letter and end with a letter/number\n        sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n        sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n        // Get the \"words\"\n        var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n        var uriFormat = words.join(Craft.slugWordSeparator);\n\n        if (uriFormat && this.settings.suffix) {\n            uriFormat += this.settings.suffix;\n        }\n\n        return uriFormat;\n    }\n});\n\n})(jQuery);\n","/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function(html) {\n    return html.replace(rxhtmlTag, \"<$1></$2>\");\n};\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} shift\n         * @param {boolean} alt\n         */\n        shortcutText: function (key, shift, alt) {\n            if (Craft.clientOs === 'Mac') {\n                return (alt ? '⌥' : '') + (shift ? '⇧' : '') + '⌘' + key;\n            }\n            return 'Ctrl+' + (alt ? 'Alt+' : '') + (shift ? 'Shift+' : '') + key;\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n\n                // Get the latest headers\n                this._getApiHeaders(cancelToken).then(apiHeaders => {\n                    // Send the API request\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    // Force the API to process the Craft headers if this is the first API request\n                    if (!this._apiHeaders) {\n                        options.params.processCraftHeaders = 1;\n                    }\n\n                    axios.request(options).then((apiResponse) => {\n                        // Process the response headers\n                        this._processApiHeaders(apiResponse.headers, cancelToken).then(() => {\n                            // Finally return the API response data\n                            resolve(apiResponse.data);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        _getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    resolve(response.data);\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _processApiHeaders: function(headers, cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Have we already processed them?\n                if (this._apiHeaders) {\n                    resolve();\n                    return;\n                }\n\n                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                    data: {\n                        headers: headers,\n                    },\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    this._loadingApiHeaders = false;\n\n                    resolve();\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                    }\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _rejectApiRequests: function(reject, e) {\n            this._loadingApiHeaders = false;\n            reject(e);\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1](e);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = () => {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                };\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         */\n        findDeltaData: function(oldData, newData, deltaNames) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, true);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                }\n            }\n\n            return params.join('&');\n        },\n\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, useInitialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = decodeURIComponent(params[p]).substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(params[p]);\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(params[p]);\n                }\n            }\n\n            if (useInitialValues) {\n                for (let name in Craft.initialDeltaValues) {\n                    if (Craft.initialDeltaValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(Craft.initialDeltaValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return arr.includes(elem);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a', $container).each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n    });\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: {\n                        customTrigger: $btn,\n                    }\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                                'aria-label': Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                    $inputs.first().focus();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n// Override Garnish.NiceText.charsLeftHtml() to be more accessible\nGarnish.NiceText.charsLeftHtml = charsLeft => {\n    return Craft.t('app', '<span class=\"visually-hidden\">Characters left:</span> {chars, number}', {\n        chars: charsLeft,\n    });\n};\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend({\n    $element: null,\n    elementId: null,\n    siteId: null,\n    deltaNames: null,\n    initialData: null,\n\n    $form: null,\n    $fieldsContainer: null,\n    $cancelBtn: null,\n    $saveBtn: null,\n    $spinner: null,\n\n    $siteSelect: null,\n    $siteSpinner: null,\n\n    hud: null,\n\n    init: function(element, settings) {\n        // Param mapping\n        if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n            // (settings)\n            settings = element;\n            element = null;\n        }\n\n        this.$element = $(element);\n        this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n        this.loadHud();\n    },\n\n    setElementAttribute: function(name, value) {\n        if (!this.settings.attributes) {\n            this.settings.attributes = {};\n        }\n\n        if (value === null) {\n            delete this.settings.attributes[name];\n        } else {\n            this.settings.attributes[name] = value;\n        }\n    },\n\n    getBaseData: function() {\n        var data = $.extend({}, this.settings.params);\n\n        if (this.settings.siteId) {\n            data.siteId = this.settings.siteId;\n        } else if (this.$element && this.$element.data('site-id')) {\n            data.siteId = this.$element.data('site-id');\n        }\n\n        if (this.settings.elementId) {\n            data.elementId = this.settings.elementId;\n        } else if (this.$element && this.$element.data('id')) {\n            data.elementId = this.$element.data('id');\n        }\n\n        if (this.settings.elementType) {\n            data.elementType = this.settings.elementType;\n        }\n\n        if (this.settings.attributes) {\n            data.attributes = this.settings.attributes;\n        }\n\n        if (this.settings.prevalidate) {\n            data.prevalidate = 1;\n        }\n\n        return data;\n    },\n\n    loadHud: function() {\n        this.onBeginLoading();\n        var data = this.getBaseData();\n        data.includeSites = Craft.isMultiSite && this.settings.showSiteSwitcher;\n        Craft.postActionRequest('elements/get-editor-html', data, this.showHud.bind(this));\n    },\n\n    showHud: function(response, textStatus) {\n        this.onEndLoading();\n\n        if (textStatus === 'success') {\n            var $hudContents = $();\n\n            if (response.sites) {\n                var $header = $('<div class=\"hud-header\"/>');\n\n                if (response.sites.length === 1) {\n                    $('<h5/>', {text: response.sites[0].name}).appendTo($header);\n                } else {\n                    var $siteSelectContainer = $('<div class=\"select\"/>').appendTo($header);\n\n                    this.$siteSelect = $('<select/>').appendTo($siteSelectContainer);\n                    this.$siteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($header);\n\n                    for (var i = 0; i < response.sites.length; i++) {\n                        var siteInfo = response.sites[i];\n                        $('<option value=\"' + siteInfo.id + '\"' + (siteInfo.id == response.siteId ? ' selected=\"selected\"' : '') + '>' + siteInfo.name + '</option>').appendTo(this.$siteSelect);\n                    }\n\n                    this.addListener(this.$siteSelect, 'change', 'switchSite');\n                }\n\n                $hudContents = $hudContents.add($header);\n            }\n\n            this.$form = $('<div/>');\n            this.$fieldsContainer = $('<div class=\"fields\"/>').appendTo(this.$form);\n\n            this.updateForm(response, true);\n\n            this.onCreateForm(this.$form);\n\n            var $footer = $('<div class=\"hud-footer\"/>').appendTo(this.$form),\n                $buttonsContainer = $('<div class=\"buttons right\"/>').appendTo($footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo($buttonsContainer);\n            this.$saveBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($buttonsContainer);\n            this.$spinner = $('<div class=\"spinner hidden\"/>').appendTo($buttonsContainer);\n\n            $hudContents = $hudContents.add(this.$form);\n\n            if (!this.hud) {\n                var hudTrigger = (this.settings.hudTrigger || this.$element);\n\n                this.hud = new Garnish.HUD(hudTrigger, $hudContents, {\n                    bodyClass: 'body elementeditor',\n                    closeOtherHUDs: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    onShow: this.onShowHud.bind(this),\n                    onHide: this.onHideHud.bind(this),\n                    onSubmit: this.saveElement.bind(this),\n                });\n\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.maybeCloseHud.bind(this));\n                this.hud.addListener(this.hud.$shade, 'click', this.maybeCloseHud.bind(this));\n\n                this.hud.$hud.data('elementEditor', this);\n\n                // Disable browser input validation\n                this.hud.$body.attr('novalidate', '');\n\n                this.hud.on('hide', () => {\n                    delete this.hud;\n                });\n            } else {\n                this.hud.updateBody($hudContents);\n                this.hud.updateSizeAndPosition();\n            }\n\n            // Focus on the first text input\n            $hudContents.find('.text:first').trigger('focus');\n\n            this.addListener(this.$cancelBtn, 'click', function() {\n                this.hud.hide();\n            });\n        }\n    },\n\n    switchSite: function() {\n        if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n            this.$siteSelect.val(this.siteId);\n            return;\n        }\n\n        var newSiteId = this.$siteSelect.val();\n\n        if (newSiteId == this.siteId) {\n            return;\n        }\n\n        this.$siteSpinner.removeClass('hidden');\n\n        this.reloadForm({siteId: newSiteId}, textStatus => {\n            this.$siteSpinner.addClass('hidden');\n            if (textStatus !== 'success') {\n                // Reset the site select\n                this.$siteSelect.val(this.siteId);\n            }\n        });\n    },\n\n    reloadForm: function(data, callback) {\n        data = $.extend(this.getBaseData(), data);\n\n        Craft.postActionRequest('elements/get-editor-html', data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.updateForm(response, true);\n            }\n\n            if (callback) {\n                callback(textStatus);\n            }\n        });\n    },\n\n    updateForm: function(response, refreshInitialData) {\n        this.siteId = response.siteId;\n        this.$fieldsContainer.html(response.html);\n\n        if (refreshInitialData !== false) {\n            this.deltaNames = response.deltaNames;\n        }\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$fieldsContainer.find('> .meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            Craft.appendHeadHtml(response.headHtml);\n            Craft.appendFootHtml(response.footHtml);\n            Craft.initUiElements(this.$fieldsContainer);\n\n            if (refreshInitialData) {\n                this.initialData = this.hud.$body.serialize();\n            }\n        });\n    },\n\n    saveElement: function() {\n        var validators = this.settings.validators;\n\n        if ($.isArray(validators)) {\n            for (var i = 0; i < validators.length; i++) {\n                if ($.isFunction(validators[i]) && !validators[i].call()) {\n                    return false;\n                }\n            }\n        }\n\n        this.$spinner.removeClass('hidden');\n\n        var data = $.param(this.getBaseData()) + '&' + this.hud.$body.serialize();\n        data = Craft.findDeltaData(this.initialData, data, this.deltaNames);\n\n        Craft.postActionRequest('elements/save-element', data, (response, textStatus) => {\n            this.$spinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (this.$element && this.siteId == this.$element.data('site-id')) {\n                        // Update the label\n                        var $title = this.$element.find('.title'),\n                            $a = $title.find('a');\n\n                        if ($a.length && response.cpEditUrl) {\n                            $a.attr('href', response.cpEditUrl);\n                            $a.text(response.newTitle);\n                        } else {\n                            $title.text(response.newTitle);\n                        }\n                    }\n\n                    if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                        Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                            type: Craft.elementTypeNames[this.settings.elementType][0],\n                        }));\n                    }\n\n                    this.closeHud();\n                    this.onSaveElement(response);\n                } else {\n                    this.updateForm(response, false);\n                    Garnish.shake(this.hud.$hud);\n                }\n            }\n        });\n    },\n\n    isDirty: function() {\n        return this.hud.$body.serialize() !== this.initialData;\n    },\n\n    maybeCloseHud: function(ev) {\n        if (!this.hud || !this.hud.showing) {\n            return;\n        }\n\n        if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n            this.closeHud();\n        }\n    },\n\n    closeHud: function() {\n        if (!this.hud || !this.hud.showing) {\n            return;\n        }\n\n        this.hud.hide();\n        delete this.hud;\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    onShowHud: function() {\n        Garnish.shortcutManager.registerShortcut({\n            keyCode: Garnish.S_KEY,\n            ctrl: true,\n        }, this.saveElement.bind(this));\n        this.settings.onShowHud();\n        this.trigger('showHud');\n    },\n\n    onHideHud: function() {\n        this.settings.onHideHud();\n        this.trigger('hideHud');\n    },\n\n    onBeginLoading: function() {\n        if (this.$element) {\n            this.$element.addClass('loading');\n        }\n\n        this.settings.onBeginLoading();\n        this.trigger('beginLoading');\n    },\n\n    onEndLoading: function() {\n        if (this.$element) {\n            this.$element.removeClass('loading');\n        }\n\n        this.settings.onEndLoading();\n        this.trigger('endLoading');\n    },\n\n    onSaveElement: function(response) {\n        this.settings.onSaveElement(response);\n        this.trigger('saveElement', {\n            response: response\n        });\n\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n    },\n\n    onCreateForm: function($form) {\n        this.settings.onCreateForm($form);\n    }\n}, {\n    defaults: {\n        hudTrigger: null,\n        showSiteSwitcher: true,\n        elementId: null,\n        elementType: null,\n        siteId: null,\n        attributes: null,\n        params: null,\n        prevalidate: false,\n        elementIndex: null,\n\n        onShowHud: $.noop,\n        onHideHud: $.noop,\n        onBeginLoading: $.noop,\n        onEndLoading: $.noop,\n        onCreateForm: $.noop,\n        onSaveElement: $.noop,\n\n        validators: []\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend({\n    initialized: false,\n    elementType: null,\n\n    instanceState: null,\n    sourceStates: null,\n    sourceStatesStorageKey: null,\n\n    searchTimeout: null,\n    sourceSelect: null,\n\n    $container: null,\n    $main: null,\n    isIndexBusy: false,\n\n    $sidebar: null,\n    showingSidebar: null,\n    sourceKey: null,\n    sourceViewModes: null,\n    $source: null,\n    sourcesByKey: null,\n    $visibleSources: null,\n\n    $customizeSourcesBtn: null,\n    customizeSourcesModal: null,\n\n    $toolbar: null,\n    toolbarOffset: null,\n\n    $search: null,\n    searching: false,\n    searchText: null,\n    trashed: false,\n    drafts: false,\n    $clearSearchBtn: null,\n\n    $statusMenuBtn: null,\n    $statusMenuContainer: null,\n    statusMenu: null,\n    status: null,\n\n    $siteMenuBtn: null,\n    siteMenu: null,\n    siteId: null,\n\n    $sortMenuBtn: null,\n    sortMenu: null,\n    $sortAttributesList: null,\n    $sortDirectionsList: null,\n    $scoreSortAttribute: null,\n    $structureSortAttribute: null,\n\n    $elements: null,\n    $viewModeBtnContainer: null,\n    viewModeBtns: null,\n    viewMode: null,\n    view: null,\n    _autoSelectElements: null,\n    $countSpinner: null,\n    $countContainer: null,\n    page: 1,\n    resultSet: null,\n    totalResults: null,\n    $exportBtn: null,\n\n    actions: null,\n    actionsHeadHtml: null,\n    actionsFootHtml: null,\n    $selectAllContainer: null,\n    $selectAllCheckbox: null,\n    showingActionTriggers: false,\n    exporters: null,\n    exportersByType: null,\n    _$detachedToolbarItems: null,\n    _$triggers: null,\n\n    _ignoreFailedRequest: false,\n    _cancelToken: null,\n\n    /**\n     * Constructor\n     */\n    init: function(elementType, $container, settings) {\n        this.elementType = elementType;\n        this.$container = $container;\n        this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n        // Set the state objects\n        // ---------------------------------------------------------------------\n\n        this.instanceState = this.getDefaultInstanceState();\n\n        this.sourceStates = {};\n\n        // Instance states (selected source) are stored by a custom storage key defined in the settings\n        if (this.settings.storageKey) {\n            $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n        }\n\n        // Source states (view mode, etc.) are stored by the element type and context\n        this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n        $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n        // Find the DOM elements\n        // ---------------------------------------------------------------------\n\n        this.$main = this.$container.find('.main');\n        this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n        this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n        this.$statusMenuContainer = this.$statusMenuBtn.parent();\n        this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n        this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n        this.$search = this.$toolbar.find('.search:first input:first');\n        this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n        this.$sidebar = this.$container.find('.sidebar:first');\n        this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n        this.$elements = this.$container.find('.elements:first');\n        this.$countSpinner = this.$container.find('#count-spinner');\n        this.$countContainer = this.$container.find('#count-container');\n        this.$exportBtn = this.$container.find('#export-btn');\n\n        // Hide sidebar if needed\n        if (this.settings.hideSidebar) {\n            this.$sidebar.hide();\n            $('.body, .content', this.$container).removeClass('has-sidebar');\n        }\n\n        // Initialize the sources\n        // ---------------------------------------------------------------------\n\n        if (!this.initSources()) {\n            return;\n        }\n\n        // Customize button\n        if (this.$customizeSourcesBtn.length) {\n            this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n        }\n\n        // Initialize the status menu\n        // ---------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n            this.statusMenu.on('optionselect', this._handleStatusChange.bind(this));\n        }\n\n        // Initialize the site menu\n        // ---------------------------------------------------------------------\n\n        // Is there a site menu?\n        if (this.$siteMenuBtn.length) {\n            this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n            // Figure out the initial site\n            var $option = this.siteMenu.$options.filter('.sel:first');\n\n            if (!$option.length) {\n                $option = this.siteMenu.$options.first();\n            }\n\n            if ($option.length) {\n                this._setSite($option.data('site-id'));\n            } else {\n                // No site options -- they must not have any site permissions\n                this.settings.criteria = {id: '0'};\n            }\n\n            this.siteMenu.on('optionselect', this._handleSiteChange.bind(this));\n\n            if (this.siteId) {\n                // Should we be using a different default site?\n                var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                if (defaultSiteId && defaultSiteId != this.siteId) {\n                    // Is that one available here?\n                    var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                    if ($storedSiteOption.length) {\n                        // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                        $storedSiteOption.trigger('click');\n                    }\n                }\n            }\n        } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n            this._setSite(this.settings.criteria.siteId);\n        } else {\n            this._setSite(Craft.siteId);\n        }\n\n        // Don't let the criteria override the selected site\n        if (this.settings.criteria && this.settings.criteria.siteId) {\n            delete this.settings.criteria.siteId;\n        }\n\n        // Initialize the search input\n        // ---------------------------------------------------------------------\n\n        // Automatically update the elements after new search text has been sitting for a 1/2 second\n        this.addListener(this.$search, 'input', () => {\n            if (!this.searching && this.$search.val()) {\n                this.startSearching();\n            } else if (this.searching && !this.$search.val()) {\n                this.stopSearching();\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.updateElementsIfSearchTextChanged.bind(this), 500);\n        });\n\n        // Update the elements when the Return key is pressed\n        this.addListener(this.$search, 'keypress', ev => {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.updateElementsIfSearchTextChanged();\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearSearchBtn, 'click', () => {\n            this.$search.val('');\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            this.stopSearching();\n\n            this.updateElementsIfSearchTextChanged();\n        });\n\n        // Auto-focus the Search box\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$search.trigger('focus');\n        }\n\n        // Initialize the sort menu\n        // ---------------------------------------------------------------------\n\n        // Is there a sort menu?\n        if (this.$sortMenuBtn.length) {\n            this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n            this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n            this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n            this.sortMenu.on('optionselect', this._handleSortChange.bind(this));\n        }\n\n        // Initialize the Export button\n        // ---------------------------------------------------------------------\n\n        this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n        // Let everyone know that the UI is initialized\n        // ---------------------------------------------------------------------\n\n        this.initialized = true;\n        this.afterInit();\n\n        // Select the initial source\n        // ---------------------------------------------------------------------\n\n        this.selectDefaultSource();\n\n        // Load the first batch of elements!\n        // ---------------------------------------------------------------------\n\n        // Default to whatever page is in the URL\n        this.setPage(Craft.pageNum);\n\n        this.updateElements(true);\n    },\n\n    afterInit: function() {\n        this.onAfterInit();\n    },\n\n    _createCancelToken: function() {\n        this._cancelToken = axios.CancelToken.source();\n        return this._cancelToken.token;\n    },\n\n    _cancelRequests: function() {\n        if (this._cancelToken) {\n            this._ignoreFailedRequest = true;\n            this._cancelToken.cancel();\n            Garnish.requestAnimationFrame(() => {\n                this._ignoreFailedRequest = false;\n            });\n        }\n    },\n\n    getSourceContainer: function() {\n        return this.$sidebar.find('nav > ul');\n    },\n\n    get $sources() {\n        if (!this.sourceSelect) {\n            return undefined;\n        }\n\n        return this.sourceSelect.$items;\n    },\n\n    initSources: function() {\n        var $sources = this._getSourcesInList(this.getSourceContainer());\n\n        // No source, no party.\n        if ($sources.length === 0) {\n            return false;\n        }\n\n        // The source selector\n        if (!this.sourceSelect) {\n            this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                multi: false,\n                allowEmpty: false,\n                vertical: true,\n                onSelectionChange: this._handleSourceSelectionChange.bind(this)\n            });\n        }\n\n        this.sourcesByKey = {};\n        this._initSources($sources);\n\n        return true;\n    },\n\n    selectDefaultSource: function() {\n        var sourceKey = this.getDefaultSourceKey(),\n            $source;\n\n        if (sourceKey) {\n            $source = this.getSourceByKey(sourceKey);\n\n            // Make sure it's visible\n            if (this.$visibleSources.index($source) === -1) {\n                $source = null;\n            }\n        }\n\n        if (!sourceKey || !$source) {\n            // Select the first source by default\n            $source = this.$visibleSources.first();\n        }\n\n        return this.selectSource($source);\n    },\n\n    refreshSources: function() {\n        this.sourceSelect.removeAllItems();\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType\n        };\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n            data: params,\n        }).then((response) => {\n            this.setIndexAvailable();\n            this.getSourceContainer().replaceWith(response.data.html);\n            this.initSources();\n            this.selectDefaultSource();\n        }).catch(() => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    initSource: function($source) {\n        this.sourceSelect.addItems($source);\n        this.initSourceToggle($source);\n        this.sourcesByKey[$source.data('key')] = $source;\n\n        if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n            this._expandSource($source);\n        }\n    },\n\n    initSourceToggle: function($source) {\n        // Remove handlers for the same thing. Just in case.\n        this.deinitSourceToggle($source);\n\n        var $toggle = this._getSourceToggle($source);\n\n        if ($toggle.length) {\n            this.addListener($source, 'dblclick', '_handleSourceDblClick');\n            this.addListener($toggle, 'click', '_handleSourceToggleClick');\n            $source.data('hasNestedSources', true);\n        } else {\n            $source.data('hasNestedSources', false);\n        }\n    },\n\n    deinitSource: function($source) {\n        this.sourceSelect.removeItems($source);\n        this.deinitSourceToggle($source);\n        delete this.sourcesByKey[$source.data('key')];\n    },\n\n    deinitSourceToggle: function($source) {\n        if ($source.data('hasNestedSources')) {\n            this.removeListener($source, 'dblclick');\n            this.removeListener(this._getSourceToggle($source), 'click');\n        }\n\n        $source.removeData('hasNestedSources');\n    },\n\n    getDefaultInstanceState: function() {\n        return {\n            selectedSource: null,\n            expandedSources: []\n        };\n    },\n\n    getDefaultSourceKey: function() {\n        if (this.settings.defaultSource) {\n            var paths = this.settings.defaultSource.split('/'),\n                path = '';\n\n            // Expand the tree\n            for (var i = 0; i < paths.length; i++) {\n                path += paths[i];\n                var $source = this.getSourceByKey(path);\n\n                // If the folder can't be found, then just go to the stored instance source.\n                if (!$source) {\n                    return this.instanceState.selectedSource;\n                }\n\n                this._expandSource($source);\n                path += '/';\n            }\n\n            // Just make sure that the modal is aware of the newly expanded sources, too.\n            this._setSite(this.siteId);\n\n            return this.settings.defaultSource;\n        }\n\n        return this.instanceState.selectedSource;\n    },\n\n    getDefaultExpandedSources: function() {\n        return this.instanceState.expandedSources;\n    },\n\n    startSearching: function() {\n        // Show the clear button and add/select the Score sort option\n        this.$clearSearchBtn.removeClass('hidden');\n\n        if (!this.$scoreSortAttribute) {\n            this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n            this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n        }\n\n        this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n        this.searching = true;\n\n        this._updateStructureSortOption();\n        this.setSortAttribute('score');\n    },\n\n    stopSearching: function() {\n        // Hide the clear button and Score sort option\n        this.$clearSearchBtn.addClass('hidden');\n\n        this.$scoreSortAttribute.detach();\n\n        this.searching = false;\n\n        this._updateStructureSortOption();\n    },\n\n    setInstanceState: function(key, value) {\n        if (typeof key === 'object') {\n            $.extend(this.instanceState, key);\n        } else {\n            this.instanceState[key] = value;\n        }\n\n        this.storeInstanceState();\n    },\n\n    storeInstanceState: function() {\n        if (this.settings.storageKey) {\n            Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n        }\n    },\n\n    getSourceState: function(source, key, defaultValue) {\n        if (typeof this.sourceStates[source] === 'undefined') {\n            // Set it now so any modifications to it by whoever's calling this will be stored.\n            this.sourceStates[source] = {};\n        }\n\n        if (typeof key === 'undefined') {\n            return this.sourceStates[source];\n        } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n            return this.sourceStates[source][key];\n        } else {\n            return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n        }\n    },\n\n    getSelectedSourceState: function(key, defaultValue) {\n        return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n    },\n\n    setSelecetedSourceState: function(key, value) {\n        var viewState = this.getSelectedSourceState();\n\n        if (typeof key === 'object') {\n            $.extend(viewState, key);\n        } else {\n            viewState[key] = value;\n        }\n\n        this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n        // Store it in localStorage too\n        Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n    },\n\n    storeSortAttributeAndDirection: function() {\n        var attr = this.getSelectedSortAttribute();\n\n        if (attr !== 'score') {\n            this.setSelecetedSourceState({\n                order: attr,\n                sort: this.getSelectedSortDirection()\n            });\n        }\n    },\n\n    /**\n     * Sets the page number.\n     */\n    setPage: function(page) {\n        if (this.settings.context !== 'index') {\n            return;\n        }\n\n        page = Math.max(page, 1);\n        this.page = page;\n\n        // Update the URL\n        var url = document.location.href\n            .replace(/\\?.*$/, '')\n            .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n            .replace(/\\/+$/, '');\n\n        if (this.page !== 1) {\n            if (Craft.pageTrigger[0] !== '?') {\n                url += '/';\n            }\n            url += Craft.pageTrigger + this.page;\n        }\n\n        history.replaceState({}, '', url);\n    },\n\n    _resetCount: function() {\n        this.resultSet = null;\n        this.totalResults = null;\n    },\n\n    /**\n     * Returns the data that should be passed to the elementIndex/getElements controller action\n     * when loading elements.\n     */\n    getViewParams: function() {\n        var criteria = {\n            siteId: this.siteId,\n            search: this.searchText,\n            offset: this.settings.batchSize * (this.page - 1),\n            limit: this.settings.batchSize,\n        };\n\n        // Only set drafts/draftOf/trashed params when needed, so we don't potentially override a source's criteria\n        if (\n            this.settings.canHaveDrafts &&\n            (this.drafts || (this.settings.context === 'index' && !this.status))\n        ) {\n            criteria.drafts = this.drafts || null;\n            criteria.savedDraftsOnly = true;\n            if (!this.drafts) {\n                criteria.draftOf = false;\n            }\n        }\n        if (this.trashed) {\n            criteria.trashed = true;\n        }\n\n        if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n            criteria.status = this.status;\n        }\n\n        $.extend(criteria, this.settings.criteria);\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType,\n            source: this.instanceState.selectedSource,\n            criteria: criteria,\n            disabledElementIds: this.settings.disabledElementIds,\n            viewState: $.extend({}, this.getSelectedSourceState()),\n            paginated: this._isViewPaginated() ? 1 : 0,\n        };\n\n        // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n        params.viewState.order = this.getSelectedSortAttribute();\n        params.viewState.sort = this.getSelectedSortDirection();\n\n        if (this.getSelectedSortAttribute() === 'structure') {\n            if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                this.instanceState.collapsedElementIds = [];\n            }\n            params.collapsedElementIds = this.instanceState.collapsedElementIds;\n        }\n\n        // Give plugins a chance to hook in here\n        this.trigger('registerViewParams', {\n            params: params,\n        });\n\n        return params;\n    },\n\n    updateElements: function(preservePagination) {\n        // Ignore if we're not fully initialized yet\n        if (!this.initialized) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        this.setIndexBusy();\n\n        // Kill the old view class\n        if (this.view) {\n            this.view.destroy();\n            delete this.view;\n        }\n\n        if (preservePagination !== true) {\n            this.setPage(1);\n            this._resetCount();\n        }\n\n        var params = this.getViewParams();\n\n        Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n            data: params,\n            cancelToken: this._createCancelToken(),\n        }).then((response) => {\n            this.setIndexAvailable();\n            (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n            this._updateView(params, response.data);\n        }).catch(e => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    updateElementsIfSearchTextChanged: function() {\n        if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n            this.updateElements();\n        }\n    },\n\n    showActionTriggers: function() {\n        // Ignore if they're already shown\n        if (this.showingActionTriggers) {\n            return;\n        }\n\n        // Hard-code the min toolbar height in case it was taller than the actions toolbar\n        // (prevents the elements from jumping if this ends up being a double-click)\n        this.$toolbar.css('min-height', this.$toolbar.height());\n\n        // Hide any toolbar inputs\n        this._$detachedToolbarItems = this.$toolbar.children();\n        this._$detachedToolbarItems.detach();\n\n        if (!this._$triggers) {\n            this._createTriggers();\n        } else {\n            this._$triggers.appendTo(this.$toolbar);\n        }\n\n        this.showingActionTriggers = true;\n    },\n\n    submitAction: function(action, actionParams) {\n        // Make sure something's selected\n        var selectedElementIds = this.view.getSelectedElementIds(),\n            totalSelected = selectedElementIds.length;\n\n        if (totalSelected === 0) {\n            return;\n        }\n\n        if (typeof action === 'string') {\n            action = this._findAction(action);\n        }\n\n        if (action.confirm && !confirm(action.confirm)) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        // Get ready to submit\n        var viewParams = this.getViewParams();\n\n        actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n        var params = $.extend(viewParams, action.settings || {}, actionParams, {\n            elementAction: action.type,\n            elementIds: selectedElementIds\n        });\n\n        // Do it\n        this.setIndexBusy();\n        this._autoSelectElements = selectedElementIds;\n\n        if (action.download) {\n            if (Craft.csrfTokenName) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n            Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                this.setIndexAvailable();\n            }).catch(e => {\n                this.setIndexAvailable();\n            });\n        } else {\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        }\n    },\n\n    _findAction: function(actionClass) {\n        for (var i = 0; i < this.actions.length; i++) {\n            if (this.actions[i].type === actionClass) {\n                return this.actions[i];\n            }\n        }\n        throw `Invalid element action: ${actionClass}`;\n    },\n\n    afterAction: function(action, params) {\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n\n        this.onAfterAction(action, params);\n    },\n\n    hideActionTriggers: function() {\n        // Ignore if there aren't any\n        if (!this.showingActionTriggers) {\n            return;\n        }\n\n        this._$detachedToolbarItems.appendTo(this.$toolbar);\n        this._$triggers.detach();\n        // this._$detachedToolbarItems.removeClass('hidden');\n\n        // Unset the min toolbar height\n        this.$toolbar.css('min-height', '');\n\n        this.showingActionTriggers = false;\n    },\n\n    updateActionTriggers: function() {\n        // Do we have an action UI to update?\n        if (this.actions) {\n            var totalSelected = this.view.getSelectedElements().length;\n\n            if (totalSelected !== 0) {\n                if (totalSelected === this.view.getEnabledElements().length) {\n                    this.$selectAllCheckbox.removeClass('indeterminate');\n                    this.$selectAllCheckbox.addClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'true');\n                } else {\n                    this.$selectAllCheckbox.addClass('indeterminate');\n                    this.$selectAllCheckbox.removeClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'mixed');\n                }\n\n                this.showActionTriggers();\n            } else {\n                this.$selectAllCheckbox.removeClass('indeterminate checked');\n                this.$selectAllContainer.attr('aria-checked', 'false');\n                this.hideActionTriggers();\n            }\n        }\n    },\n\n    getSelectedElements: function() {\n        return this.view ? this.view.getSelectedElements() : $();\n    },\n\n    getSelectedElementIds: function() {\n        return this.view ? this.view.getSelectedElementIds() : [];\n    },\n\n    setStatus: function(status) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n        if ($option.length) {\n            this.statusMenu.selectOption($option[0]);\n        }\n    },\n\n    getSortAttributeOption: function(attr) {\n        return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n    },\n\n    getSelectedSortAttribute: function() {\n        return this.$sortAttributesList.find('a.sel:first').data('attr');\n    },\n\n    setSortAttribute: function(attr) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.getSortAttributeOption(attr);\n\n        if ($option.length) {\n            this.$sortAttributesList.find('a.sel').removeClass('sel');\n            $option.addClass('sel');\n\n            var label = $option.text();\n            this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n            this.$sortMenuBtn.text(label);\n\n            if (attr === 'score') {\n                this.setSortDirection('desc');\n            } else {\n                this.setSortDirection($option.data('default-dir') || 'asc');\n            }\n\n            if (attr === 'structure') {\n                this.$sortDirectionsList.find('a').addClass('disabled');\n            } else {\n                this.$sortDirectionsList.find('a').removeClass('disabled');\n            }\n        }\n    },\n\n    getSortDirectionOption: function(dir) {\n        return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n    },\n\n    getSelectedSortDirection: function() {\n        return this.$sortDirectionsList.find('a.sel:first').data('dir');\n    },\n\n    getSelectedViewMode: function() {\n        return this.getSelectedSourceState('mode') || 'table';\n    },\n\n    setSortDirection: function(dir) {\n        if (dir !== 'desc') {\n            dir = 'asc';\n        }\n\n        this.$sortMenuBtn.attr('data-icon', dir);\n        this.$sortDirectionsList.find('a.sel').removeClass('sel');\n        this.getSortDirectionOption(dir).addClass('sel');\n    },\n\n    getSourceByKey: function(key) {\n        if (typeof this.sourcesByKey[key] === 'undefined') {\n            return null;\n        }\n\n        return this.sourcesByKey[key];\n    },\n\n    selectSource: function($source) {\n        if (!$source || !$source.length) {\n            return false;\n        }\n\n        if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n            return false;\n        }\n\n        // Hide action triggers if they're currently being shown\n        this.hideActionTriggers();\n\n        this.$source = $source;\n        this.sourceKey = $source.data('key');\n        this.setInstanceState('selectedSource', this.sourceKey);\n        this.sourceSelect.selectItem($source);\n\n        Craft.cp.updateSidebarMenuLabel();\n\n        if (this.searching) {\n            // Clear the search value without causing it to update elements\n            this.searchText = null;\n            this.$search.val('');\n            this.stopSearching();\n        }\n\n        // Sort menu\n        // ----------------------------------------------------------------------\n\n        // Remove any existing custom sort options from the menu\n        this.$sortAttributesList.children('li[data-extra]').remove();\n\n        // Does this source have any custom sort options?\n        let sortOptions = this.$source.data('sort-options')\n        if (sortOptions) {\n            for (let i = 0; i < sortOptions.length; i++) {\n                let $option = $('<li/>', {\n                    'data-extra': true,\n                })\n                    .append(\n                        $('<a/>', {\n                            text: sortOptions[i][0],\n                            'data-attr': sortOptions[i][1],\n                        })\n                    )\n                    .appendTo(this.$sortAttributesList);\n                this.sortMenu.addOptions($option.children());\n            }\n        }\n\n        // Does this source have a structure?\n        if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n            if (!this.$structureSortAttribute) {\n                this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                this.sortMenu.addOptions(this.$structureSortAttribute.children());\n            }\n\n            this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n        } else if (this.$structureSortAttribute) {\n            this.$structureSortAttribute.removeClass('sel').detach();\n        }\n\n        this.setStoredSortOptionsForSource();\n\n        // Status menu\n        // ----------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                this.$statusMenuContainer.addClass('hidden');\n            } else {\n                this.$statusMenuContainer.removeClass('hidden');\n            }\n\n            if (this.trashed) {\n                // Swap to the initial status\n                var $firstOption = this.statusMenu.$options.first();\n                this.setStatus($firstOption.data('status'));\n            }\n        }\n\n        // View mode buttons\n        // ----------------------------------------------------------------------\n\n        // Clear out any previous view mode data\n        if (this.$viewModeBtnContainer) {\n            this.$viewModeBtnContainer.remove();\n        }\n\n        this.viewModeBtns = {};\n        this.viewMode = null;\n\n        // Get the new list of view modes\n        this.sourceViewModes = this.getViewModesForSource();\n\n        // Create the buttons if there's more than one mode available to this source\n        if (this.sourceViewModes.length > 1) {\n            this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                let sourceViewMode = this.sourceViewModes[i];\n\n                let $viewModeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                    'data-view': sourceViewMode.mode,\n                    'data-icon': sourceViewMode.icon,\n                    'aria-label': sourceViewMode.title,\n                    title: sourceViewMode.title,\n                }).appendTo(this.$viewModeBtnContainer);\n\n                this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                    this.selectViewMode(ev.data.mode);\n                    this.updateElements();\n                });\n            }\n        }\n\n        // Figure out which mode we should start with\n        var viewMode = this.getSelectedViewMode();\n\n        if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n            // Try to keep using the current view mode\n            if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                viewMode = this.viewMode;\n            }\n            // Just use the first one\n            else {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n        }\n\n        this.selectViewMode(viewMode);\n\n        this.onSelectSource();\n\n        return true;\n    },\n\n    selectSourceByKey: function(key) {\n        var $source = this.getSourceByKey(key);\n\n        if ($source) {\n            return this.selectSource($source);\n        } else {\n            return false;\n        }\n    },\n\n    setStoredSortOptionsForSource: function() {\n        var sortAttr = this.getSelectedSourceState('order'),\n            sortDir = this.getSelectedSourceState('sort');\n\n        if (!sortAttr || !sortDir) {\n            // Get the default\n            sortAttr = this.getDefaultSort();\n\n            if (Garnish.isArray(sortAttr)) {\n                sortDir = sortAttr[1];\n                sortAttr = sortAttr[0];\n            }\n        }\n\n        if (sortDir !== 'asc' && sortDir !== 'desc') {\n            sortDir = 'asc';\n        }\n\n        this.setSortAttribute(sortAttr);\n        this.setSortDirection(sortDir);\n    },\n\n    getDefaultSort: function() {\n        // Does the source specify what to do?\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n            return this.$source.attr('data-default-sort').split(':');\n        } else {\n            // Default to whatever's first\n            return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n        }\n    },\n\n    getViewModesForSource: function() {\n        var viewModes = [\n            {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n        ];\n\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n            viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n        }\n\n        return viewModes;\n    },\n\n    doesSourceHaveViewMode: function(viewMode) {\n        for (var i = 0; i < this.sourceViewModes.length; i++) {\n            if (this.sourceViewModes[i].mode === viewMode) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    selectViewMode: function(viewMode, force) {\n        // Make sure that the current source supports it\n        if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n            viewMode = this.sourceViewModes[0].mode;\n        }\n\n        // Has anything changed?\n        if (viewMode === this.viewMode) {\n            return;\n        }\n\n        // Deselect the previous view mode\n        if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].removeClass('active');\n        }\n\n        this.viewMode = viewMode;\n        this.setSelecetedSourceState('mode', this.viewMode);\n\n        if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].addClass('active');\n        }\n    },\n\n    createView: function(mode, settings) {\n        var viewClass = this.getViewClass(mode);\n        return new viewClass(this, this.$elements, settings);\n    },\n\n    getViewClass: function(mode) {\n        switch (mode) {\n            case 'table':\n                return Craft.TableElementIndexView;\n            case 'thumbs':\n                return Craft.ThumbsElementIndexView;\n            default:\n                throw `View mode \"${mode}\" not supported.`;\n        }\n    },\n\n    rememberDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index === -1) {\n            this.settings.disabledElementIds.push(id);\n        }\n    },\n\n    forgetDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index !== -1) {\n            this.settings.disabledElementIds.splice(index, 1);\n        }\n    },\n\n    enableElements: function($elements) {\n        $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.forgetDisabledElementId(id);\n        }\n\n        this.onEnableElements($elements);\n    },\n\n    disableElements: function($elements) {\n        $elements.removeClass('sel').addClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.rememberDisabledElementId(id);\n        }\n\n        this.onDisableElements($elements);\n    },\n\n    getElementById: function(id) {\n        return this.view.getElementById(id);\n    },\n\n    enableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.enableElements($element);\n            } else {\n                this.forgetDisabledElementId(id);\n            }\n        }\n    },\n\n    disableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.disableElements($element);\n            } else {\n                this.rememberDisabledElementId(id);\n            }\n        }\n    },\n\n    selectElementAfterUpdate: function(id) {\n        if (this._autoSelectElements === null) {\n            this._autoSelectElements = [];\n        }\n\n        this._autoSelectElements.push(id);\n    },\n\n    addButton: function($button) {\n        this.getButtonContainer().append($button);\n    },\n\n    isShowingSidebar: function() {\n        if (this.showingSidebar === null) {\n            this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n        }\n\n        return this.showingSidebar;\n    },\n\n    getButtonContainer: function() {\n        // Is there a predesignated place where buttons should go?\n        if (this.settings.buttonContainer) {\n            return $(this.settings.buttonContainer);\n        } else {\n            var $container = $('#action-button');\n\n            if (!$container.length) {\n                $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n            }\n\n            return $container;\n        }\n    },\n\n    setIndexBusy: function() {\n        this.$elements.addClass('busy');\n        this.isIndexBusy = true;\n    },\n\n    setIndexAvailable: function() {\n        this.$elements.removeClass('busy');\n        this.isIndexBusy = false;\n    },\n\n    createCustomizeSourcesModal: function() {\n        // Recreate it each time\n        var modal = new Craft.CustomizeSourcesModal(this, {\n            onHide: function() {\n                modal.destroy();\n            }\n        });\n\n        return modal;\n    },\n\n    disable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.disable();\n        }\n\n        if (this.view) {\n            this.view.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.enable();\n        }\n\n        if (this.view) {\n            this.view.enable();\n        }\n\n        this.base();\n    },\n\n    onAfterInit: function() {\n        this.settings.onAfterInit();\n        this.trigger('afterInit');\n    },\n\n    onSelectSource: function() {\n        this.settings.onSelectSource(this.sourceKey);\n        this.trigger('selectSource', {sourceKey: this.sourceKey});\n    },\n\n    onSelectSite: function() {\n        this.settings.onSelectSite(this.siteId);\n        this.trigger('selectSite', {siteId: this.siteId});\n    },\n\n    onUpdateElements: function() {\n        this.settings.onUpdateElements();\n        this.trigger('updateElements');\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    onEnableElements: function($elements) {\n        this.settings.onEnableElements($elements);\n        this.trigger('enableElements', {elements: $elements});\n    },\n\n    onDisableElements: function($elements) {\n        this.settings.onDisableElements($elements);\n        this.trigger('disableElements', {elements: $elements});\n    },\n\n    onAfterAction: function(action, params) {\n        this.settings.onAfterAction(action, params);\n        this.trigger('afterAction', {action: action, params: params});\n    },\n\n    // UI state handlers\n    // -------------------------------------------------------------------------\n\n    _handleSourceSelectionChange: function() {\n        // If the selected source was just removed (maybe because its parent was collapsed),\n        // there won't be a selected source\n        if (!this.sourceSelect.totalSelected) {\n            this.sourceSelect.selectItem(this.$visibleSources.first());\n            return;\n        }\n\n        if (this.selectSource(this.sourceSelect.$selectedItems)) {\n            this.updateElements();\n        }\n    },\n\n    _handleActionTriggerSubmit: function(ev) {\n        ev.preventDefault();\n\n        var $form = $(ev.currentTarget);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($form.data('action'), Garnish.getPostData($form));\n    },\n\n    _handleMenuActionTriggerSubmit: function(ev) {\n        var $option = $(ev.option);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($option.data('action'));\n    },\n\n    _handleStatusChange: function(ev) {\n        this.statusMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$statusMenuBtn.html($option.html());\n\n        this.trashed = false;\n        this.drafts = false;\n        this.status = null;\n\n        if (Garnish.hasAttr($option, 'data-trashed')) {\n            this.trashed = true;\n        } else if (Garnish.hasAttr($option, 'data-drafts')) {\n            this.drafts = true;\n        } else {\n            this.status = $option.data('status');\n        }\n\n        this._updateStructureSortOption();\n        this.updateElements();\n    },\n\n    _handleSiteChange: function(ev) {\n        this.siteMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$siteMenuBtn.html($option.html());\n        this._setSite($option.data('site-id'));\n        this.onSelectSite();\n    },\n\n    _setSite: function(siteId) {\n        let firstSite = this.siteId === null;\n        this.siteId = siteId;\n        this.$visibleSources = $();\n\n        // Hide any sources that aren't available for this site\n        var $firstVisibleSource;\n        var $source;\n        // Select a new source automatically if a site is already selected, but we don't have a selected source\n        // (or if the currently selected source ends up not supporting the new site)\n        var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n        for (var i = 0; i < this.$sources.length; i++) {\n            $source = this.$sources.eq(i);\n            if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                $source.parent().removeClass('hidden');\n                this.$visibleSources = this.$visibleSources.add($source);\n                if (!$firstVisibleSource) {\n                    $firstVisibleSource = $source;\n                }\n            } else {\n                $source.parent().addClass('hidden');\n\n                // Is this the currently selected source?\n                if (this.$source && this.$source.get(0) == $source.get(0)) {\n                    selectNewSource = true;\n                }\n            }\n        }\n\n        if (this.initialized && selectNewSource) {\n            this.selectSource($firstVisibleSource);\n        }\n\n        // Hide any empty-nester headings\n        var $headings = this.getSourceContainer().children('.heading');\n        var $heading;\n\n        for (i = 0; i < $headings.length; i++) {\n            $heading = $headings.eq(i);\n            if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                $heading.removeClass('hidden');\n            } else {\n                $heading.addClass('hidden');\n            }\n        }\n\n        if (this.initialized) {\n            if (this.settings.context === 'index') {\n                // Remember this site for later\n                Craft.cp.setSiteId(siteId);\n            }\n\n            // Update the elements\n            this.updateElements();\n        }\n    },\n\n    _handleSortChange: function(ev) {\n        var $option = $(ev.selectedOption);\n\n        if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n            return;\n        }\n\n        // Is this an attribute or a direction?\n        if ($option.parent().parent().is(this.$sortAttributesList)) {\n            this.setSortAttribute($option.data('attr'));\n        } else {\n            this.setSortDirection($option.data('dir'));\n        }\n\n        this.storeSortAttributeAndDirection();\n        this.updateElements();\n    },\n\n    _handleSelectionChange: function() {\n        this.updateActionTriggers();\n        this.onSelectionChange();\n    },\n\n    _handleSourceDblClick: function(ev) {\n        this._toggleSource($(ev.currentTarget));\n        ev.stopPropagation();\n    },\n\n    _handleSourceToggleClick: function(ev) {\n        this._toggleSource($(ev.currentTarget).prev('a'));\n        ev.stopPropagation();\n    },\n\n    _updateStructureSortOption: function() {\n        var $option = this.getSortAttributeOption('structure');\n\n        if (!$option.length) {\n            return;\n        }\n\n        if (this.trashed || this.drafts || this.searching) {\n            $option.addClass('disabled');\n            if (this.getSelectedSortAttribute() === 'structure') {\n                // Temporarily set the sort to the first option\n                var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                this.setSortAttribute($firstOption.data('attr'));\n                this.setSortDirection('asc');\n            }\n        } else {\n            $option.removeClass('disabled');\n            this.setStoredSortOptionsForSource();\n        }\n    },\n\n    // Source managemnet\n    // -------------------------------------------------------------------------\n\n    _getSourcesInList: function($list) {\n        return $list.children('li').children('a');\n    },\n\n    _getChildSources: function($source) {\n        var $list = $source.siblings('ul');\n        return this._getSourcesInList($list);\n    },\n\n    _getSourceToggle: function($source) {\n        return $source.siblings('.toggle');\n    },\n\n    _initSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.initSource($($sources[i]));\n        }\n    },\n\n    _deinitSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.deinitSource($($sources[i]));\n        }\n    },\n\n    _toggleSource: function($source) {\n        if ($source.parent('li').hasClass('expanded')) {\n            this._collapseSource($source);\n        } else {\n            this._expandSource($source);\n        }\n    },\n\n    _expandSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'true',\n            'aria-label': Craft.t('app', 'Hide nested sources'),\n        });\n        $source.parent('li').addClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._initSources($childSources);\n\n        var key = $source.data('key');\n        if (this.instanceState.expandedSources.indexOf(key) === -1) {\n            this.instanceState.expandedSources.push(key);\n            this.storeInstanceState();\n        }\n    },\n\n    _collapseSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'false',\n            'aria-label': Craft.t('app', 'Show nested sources'),\n        });\n        $source.parent('li').removeClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._deinitSources($childSources);\n\n        var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n        if (i !== -1) {\n            this.instanceState.expandedSources.splice(i, 1);\n            this.storeInstanceState();\n        }\n    },\n\n    // View\n    // -------------------------------------------------------------------------\n\n    _isViewPaginated: function() {\n        return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n    },\n\n    _updateView: function(params, response) {\n        // Cleanup\n        // -------------------------------------------------------------\n\n        // Get rid of the old action triggers regardless of whether the new batch has actions or not\n        if (this.actions) {\n            this.hideActionTriggers();\n            this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n        }\n\n        // Update the count text\n        // -------------------------------------------------------------\n\n        if (this.$countContainer.length) {\n            this.$countSpinner.removeClass('hidden');\n            this.$countContainer.html('');\n\n            this._countResults()\n                .then((total) => {\n                    this.$countSpinner.addClass('hidden');\n\n                    let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                    let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                    if (!this._isViewPaginated()) {\n                        let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n                        this.$countContainer.text(countLabel);\n                    } else {\n                        let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                        let last = Math.min(first + (this.settings.batchSize - 1), total);\n                        let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            first: first,\n                            last: last,\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n\n                        let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                        let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                        let $prevBtn = $('<div/>', {\n                            'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                            title: Craft.t('app', 'Previous Page')\n                        }).appendTo($paginationContainer);\n                        let $nextBtn = $('<div/>', {\n                            'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                            title: Craft.t('app', 'Next Page')\n                        }).appendTo($paginationContainer);\n\n                        $('<div/>', {\n                            'class': 'page-info',\n                            text: countLabel\n                        }).appendTo($paginationContainer);\n\n                        if (this.page > 1) {\n                            this.addListener($prevBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page - 1);\n                                this.updateElements(true);\n                            });\n                        }\n\n                        if (this.page < totalPages) {\n                            this.addListener($nextBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page + 1);\n                                this.updateElements(true);\n                            });\n                        }\n                    }\n                })\n                .catch(() => {\n                    this.$countSpinner.addClass('hidden');\n                });\n        }\n\n        // Update the view with the new container + elements HTML\n        // -------------------------------------------------------------\n\n        this.$elements.html(response.html);\n        Craft.appendHeadHtml(response.headHtml);\n        Craft.appendFootHtml(response.footHtml);\n\n        // Batch actions setup\n        // -------------------------------------------------------------\n\n        this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n        if (response.actions && response.actions.length) {\n            if (this.$selectAllContainer.length) {\n                this.actions = response.actions;\n                this.actionsHeadHtml = response.actionsHeadHtml;\n                this.actionsFootHtml = response.actionsFootHtml;\n\n                // Create the select all checkbox\n                this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                this.$selectAllContainer.attr({\n                    'role': 'checkbox',\n                    'tabindex': '0',\n                    'aria-checked': 'false',\n                    'aria-label': Craft.t('app', 'Select all'),\n                });\n\n                this.addListener(this.$selectAllContainer, 'click', function() {\n                    if (this.view.getSelectedElements().length === 0) {\n                        this.view.selectAllElements();\n                    } else {\n                        this.view.deselectAllElements();\n                    }\n                });\n\n                this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                    if (ev.keyCode === Garnish.SPACE_KEY) {\n                        ev.preventDefault();\n\n                        $(ev.currentTarget).trigger('click');\n                    }\n                });\n            }\n        } else {\n            if (!this.$selectAllContainer.siblings().length) {\n                this.$selectAllContainer.parent('.header').remove();\n            }\n            this.$selectAllContainer.remove();\n        }\n\n        // Exporters setup\n        // -------------------------------------------------------------\n\n        this.exporters = response.exporters;\n        this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n        if (this.exporters && this.exporters.length) {\n            this.$exportBtn.removeClass('hidden');\n        } else {\n            this.$exportBtn.addClass('hidden');\n        }\n\n        // Create the view\n        // -------------------------------------------------------------\n\n        // Should we make the view selectable?\n        var selectable = (this.actions || this.settings.selectable);\n\n        this.view = this.createView(this.getSelectedViewMode(), {\n            context: this.settings.context,\n            batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n            params: params,\n            selectable: selectable,\n            multiSelect: (this.actions || this.settings.multiSelect),\n            checkboxMode: !!this.actions,\n            onSelectionChange: this._handleSelectionChange.bind(this)\n        });\n\n        // Auto-select elements\n        // -------------------------------------------------------------\n\n        if (this._autoSelectElements) {\n            if (selectable) {\n                for (var i = 0; i < this._autoSelectElements.length; i++) {\n                    this.view.selectElementById(this._autoSelectElements[i]);\n                }\n            }\n\n            this._autoSelectElements = null;\n        }\n\n        // Trigger the event\n        // -------------------------------------------------------------\n\n        this.onUpdateElements();\n    },\n\n    _countResults: function() {\n        return new Promise((resolve, reject) => {\n            if (this.totalResults !== null) {\n                resolve(this.totalResults);\n            } else {\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                // Make sure we've got an active result set ID\n                if (this.resultSet === null) {\n                    this.resultSet = Math.floor(Math.random() * 100000000);\n                }\n                params.resultSet = this.resultSet;\n\n                Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    if (response.data.resultSet == this.resultSet) {\n                        this.totalResults = response.data.count;\n                        resolve(response.data.count);\n                    } else {\n                        reject();\n                    }\n                }).catch(reject);\n            }\n        });\n    },\n\n    _createTriggers: function() {\n        var triggers = [],\n            safeMenuActions = [],\n            destructiveMenuActions = [];\n\n        var i;\n\n        for (i = 0; i < this.actions.length; i++) {\n            var action = this.actions[i];\n\n            if (action.trigger) {\n                var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                    .data('action', action)\n                    .append(action.trigger);\n\n                this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                triggers.push($form);\n            } else {\n                if (!action.destructive) {\n                    safeMenuActions.push(action);\n                } else {\n                    destructiveMenuActions.push(action);\n                }\n            }\n        }\n\n        var $btn;\n\n        if (safeMenuActions.length || destructiveMenuActions.length) {\n            var $menuTrigger = $('<form/>');\n\n            $btn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn',\n                'data-icon': 'settings',\n                title: Craft.t('app', 'Actions'),\n            }).appendTo($menuTrigger);\n\n            var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n            if ($safeList) {\n                $safeList.appendTo($menu);\n            }\n\n            if ($safeList && $destructiveList) {\n                $('<hr/>').appendTo($menu);\n            }\n\n            if ($destructiveList) {\n                $destructiveList.appendTo($menu);\n            }\n\n            triggers.push($menuTrigger);\n        }\n\n        this._$triggers = $();\n\n        for (i = 0; i < triggers.length; i++) {\n            var $div = $('<div/>').append(triggers[i]);\n            this._$triggers = this._$triggers.add($div);\n        }\n\n        this._$triggers.appendTo(this.$toolbar);\n        Craft.appendHeadHtml(this.actionsHeadHtml);\n        Craft.appendFootHtml(this.actionsFootHtml);\n\n        Craft.initUiElements(this._$triggers);\n\n        if ($btn) {\n            $btn.data('menubtn').on('optionSelect', this._handleMenuActionTriggerSubmit.bind(this));\n        }\n    },\n\n    _showExportHud: function() {\n        this.$exportBtn.addClass('active');\n\n        var $form = $('<form/>', {\n            'class': 'export-form'\n        });\n\n        var typeOptions = [];\n        for (var i = 0; i < this.exporters.length; i++) {\n            typeOptions.push({label: this.exporters[i].name, value: this.exporters[i].type});\n        }\n        var $typeField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Export Type'),\n            options: typeOptions,\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        var $formatField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Format'),\n            options: [\n                {label: 'CSV', value: 'csv'}, {label: 'JSON', value: 'json'}, {label: 'XML', value: 'xml'},\n            ],\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        let $typeSelect = $typeField.find('select');\n        this.addListener($typeSelect, 'change', () => {\n            let type = $typeSelect.val();\n            if (this.exportersByType[type].formattable) {\n                $formatField.removeClass('hidden');\n            } else {\n                $formatField.addClass('hidden');\n            }\n        });\n        $typeSelect.trigger('change');\n\n        // Only show the Limit field if there aren't any selected elements\n        var selectedElementIds = this.view.getSelectedElementIds();\n\n        if (!selectedElementIds.length) {\n            var $limitField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Limit'),\n                placeholder: Craft.t('app', 'No limit'),\n                type: 'number',\n                min: 1\n            }).appendTo($form);\n        }\n\n        $('<button/>', {\n            type: 'submit',\n            'class': 'btn submit fullwidth',\n            text: Craft.t('app', 'Export')\n        }).appendTo($form)\n\n        var $spinner = $('<div/>', {\n            'class': 'spinner hidden'\n        }).appendTo($form);\n\n        var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n        hud.on('hide', () => {\n            this.$exportBtn.removeClass('active');\n        });\n\n        var submitting = false;\n\n        this.addListener($form, 'submit', function(ev) {\n            ev.preventDefault();\n            if (submitting) {\n                return;\n            }\n\n            submitting = true;\n            $spinner.removeClass('hidden');\n\n            var params = this.getViewParams();\n            delete params.criteria.offset;\n            delete params.criteria.limit;\n\n            params.type = $typeField.find('select').val();\n            params.format = $formatField.find('select').val();\n\n            if (selectedElementIds.length) {\n                params.criteria.id = selectedElementIds;\n            } else {\n                var limit = parseInt($limitField.find('input').val());\n                if (limit && !isNaN(limit)) {\n                    params.criteria.limit = limit;\n                }\n            }\n\n            if (Craft.csrfTokenValue) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                .then(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                })\n                .catch(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                });\n        });\n    },\n\n    _createMenuTriggerList: function(actions, destructive) {\n        if (actions && actions.length) {\n            var $ul = $('<ul/>');\n\n            for (var i = 0; i < actions.length; i++) {\n                $('<li/>').append($('<a/>', {\n                    id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                    'class': (destructive ? 'error' : null),\n                    data: {\n                        action: actions[i],\n                    },\n                    text: actions[i].name\n                })).appendTo($ul);\n            }\n\n            return $ul;\n        }\n    }\n}, {\n    defaults: {\n        context: 'index',\n        modal: null,\n        storageKey: null,\n        criteria: null,\n        batchSize: 100,\n        disabledElementIds: [],\n        selectable: false,\n        multiSelect: false,\n        buttonContainer: null,\n        hideSidebar: false,\n        toolbarSelector: '.toolbar:first',\n        refreshSourcesAction: 'element-indexes/get-source-tree-html',\n        updateElementsAction: 'element-indexes/get-elements',\n        countElementsAction: 'element-indexes/count-elements',\n        submitActionsAction: 'element-indexes/perform-action',\n        defaultSiteId: null,\n        defaultSource: null,\n        canHaveDrafts: false,\n\n        onAfterInit: $.noop,\n        onSelectSource: $.noop,\n        onSelectSite: $.noop,\n        onUpdateElements: $.noop,\n        onSelectionChange: $.noop,\n        onEnableElements: $.noop,\n        onDisableElements: $.noop,\n        onAfterAction: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend({\n    $container: null,\n    $loadingMoreSpinner: null,\n    $elementContainer: null,\n    $scroller: null,\n\n    elementIndex: null,\n    thumbLoader: null,\n    elementSelect: null,\n\n    loadingMore: false,\n\n    _totalVisible: null,\n    _morePending: null,\n    _handleEnableElements: null,\n    _handleDisableElements: null,\n\n    init: function(elementIndex, container, settings) {\n        this.elementIndex = elementIndex;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n        // Create a \"loading-more\" spinner\n        this.$loadingMoreSpinner = $(\n            '<div class=\"centeralign hidden\">' +\n            '<div class=\"spinner loadingmore\"></div>' +\n            '</div>'\n        ).insertAfter(this.$container);\n\n        // Get the actual elements container and its child elements\n        this.$elementContainer = this.getElementContainer();\n        var $elements = this.$elementContainer.children();\n\n        this.setTotalVisible($elements.length);\n        this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n        // Instantiate the thumb loader\n        this.thumbLoader = new Craft.ElementThumbLoader();\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select(\n                this.$elementContainer,\n                $elements.filter(':not(.disabled)'),\n                {\n                    multi: this.settings.multiSelect,\n                    vertical: this.isVerticalList(),\n                    handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                    filter: ':not(a):not(.toggle)',\n                    checkboxMode: this.settings.checkboxMode,\n                    onSelectionChange: this.onSelectionChange.bind(this)\n                });\n\n            this._handleEnableElements = ev => {\n                this.elementSelect.addItems(ev.elements);\n            };\n\n            this._handleDisableElements = ev => {\n                this.elementSelect.removeItems(ev.elements);\n            };\n\n            this.elementIndex.on('enableElements', this._handleEnableElements);\n            this.elementIndex.on('disableElements', this._handleDisableElements);\n        }\n\n        // Enable inline element editing if this is an index page\n        if (this.settings.context === 'index') {\n            this._handleElementEditing = ev => {\n                var $target = $(ev.target);\n\n                if ($target.prop('nodeName') === 'A') {\n                    // Let the link do its thing\n                    return;\n                }\n\n                var $element;\n\n                if ($target.hasClass('element')) {\n                    $element = $target;\n                } else {\n                    $element = $target.closest('.element');\n\n                    if (!$element.length) {\n                        return;\n                    }\n                }\n\n                if (Garnish.hasAttr($element, 'data-editable')) {\n                    this.createElementEditor($element);\n                }\n            };\n\n            if (!this.elementIndex.trashed) {\n                this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                if ($.isTouchCapable()) {\n                    this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                }\n            }\n        }\n\n        // Give sub-classes a chance to do post-initialization stuff here\n        this.afterInit();\n\n        // Set up lazy-loading\n        if (this.settings.batchSize) {\n            if (this.settings.context === 'index') {\n                this.$scroller = Garnish.$scrollContainer;\n            } else {\n                this.$scroller = this.elementIndex.$main;\n            }\n\n            this.$scroller.scrollTop(0);\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }\n    },\n\n    getElementContainer: function() {\n        throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n    },\n\n    afterInit: function() {\n    },\n\n    getAllElements: function() {\n        return this.$elementContainer.children();\n    },\n\n    getEnabledElements: function() {\n        return this.$elementContainer.children(':not(.disabled)');\n    },\n\n    getElementById: function(id) {\n        var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n        if ($element.length) {\n            return $element;\n        } else {\n            return null;\n        }\n    },\n\n    getSelectedElements: function() {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        return this.elementSelect.$selectedItems;\n    },\n\n    getSelectedElementIds: function() {\n        let $selectedElements;\n        try {\n            $selectedElements = this.getSelectedElements();\n        } catch (e) {\n        }\n\n        let ids = [];\n        if ($selectedElements) {\n            for (var i = 0; i < $selectedElements.length; i++) {\n                ids.push($selectedElements.eq(i).data('id'));\n            }\n        }\n        return ids;\n    },\n\n    selectElement: function($element) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        this.elementSelect.selectItem($element, true);\n        return true;\n    },\n\n    selectElementById: function(id) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        var $element = this.getElementById(id);\n\n        if ($element) {\n            this.elementSelect.selectItem($element, true);\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    selectAllElements: function() {\n        this.elementSelect.selectAll();\n    },\n\n    deselectAllElements: function() {\n        this.elementSelect.deselectAll();\n    },\n\n    isVerticalList: function() {\n        return false;\n    },\n\n    getTotalVisible: function() {\n        return this._totalVisible;\n    },\n\n    setTotalVisible: function(totalVisible) {\n        this._totalVisible = totalVisible;\n    },\n\n    getMorePending: function() {\n        return this._morePending;\n    },\n\n    setMorePending: function(morePending) {\n        this._morePending = morePending;\n    },\n\n    /**\n     * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n     */\n    maybeLoadMore: function() {\n        if (this.canLoadMore()) {\n            this.loadMore();\n        }\n    },\n\n    /**\n     * Returns whether the user has reached the bottom of the scroll area.\n     */\n    canLoadMore: function() {\n        if (!this.getMorePending() || !this.settings.batchSize) {\n            return false;\n        }\n\n        // Check if the user has reached the bottom of the scroll area\n        var containerHeight;\n\n        if (this.$scroller[0] === Garnish.$win[0]) {\n            var winHeight = Garnish.$win.innerHeight(),\n                winScrollTop = Garnish.$win.scrollTop(),\n                containerOffset = this.$container.offset().top;\n            containerHeight = this.$container.height();\n\n            return (winHeight + winScrollTop >= containerOffset + containerHeight);\n        } else {\n            var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                containerScrollTop = this.$scroller.scrollTop();\n            containerHeight = this.$scroller.outerHeight();\n\n            return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n        }\n    },\n\n    /**\n     * Loads the next batch of elements.\n     */\n    loadMore: function() {\n        if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n            return;\n        }\n\n        this.loadingMore = true;\n        this.$loadingMoreSpinner.removeClass('hidden');\n        this.removeListener(this.$scroller, 'scroll');\n\n        var data = this.getLoadMoreParams();\n\n        Craft.postActionRequest(this.settings.loadMoreElementsAction, data, (response, textStatus) => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                var $newElements = $(response.html);\n\n                this.appendElements($newElements);\n                Craft.appendHeadHtml(response.headHtml);\n                Craft.appendFootHtml(response.footHtml);\n\n                if (this.elementSelect) {\n                    this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                    this.elementIndex.updateActionTriggers();\n                }\n\n                this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n                this.setMorePending($newElements.length == this.settings.batchSize);\n\n                // Is there room to load more right now?\n                this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                this.maybeLoadMore();\n            }\n        });\n    },\n\n    getLoadMoreParams: function() {\n        // Use the same params that were passed when initializing this view\n        var params = $.extend(true, {}, this.settings.params);\n        params.criteria.offset = this.getTotalVisible();\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        $newElements.appendTo(this.$elementContainer);\n        this.thumbLoader.load($newElements);\n        this.onAppendElements($newElements);\n    },\n\n    onAppendElements: function($newElements) {\n        this.settings.onAppendElements($newElements);\n        this.trigger('appendElements', {\n            newElements: $newElements\n        });\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            elementIndex: this.elementIndex\n        });\n    },\n\n    disable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.disable();\n        }\n    },\n\n    enable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.enable();\n        }\n    },\n\n    destroy: function() {\n        // Remove the \"loading-more\" spinner, since we added that outside of the view container\n        this.$loadingMoreSpinner.remove();\n\n        // Kill the thumb loader\n        this.thumbLoader.destroy();\n        delete this.thumbLoader;\n\n        // Delete the element select\n        if (this.elementSelect) {\n            this.elementIndex.off('enableElements', this._handleEnableElements);\n            this.elementIndex.off('disableElements', this._handleDisableElements);\n\n            this.elementSelect.destroy();\n            delete this.elementSelect;\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        context: 'index',\n        batchSize: null,\n        params: null,\n        selectable: false,\n        multiSelect: false,\n        checkboxMode: false,\n        loadMoreElementsAction: 'element-indexes/get-more-elements',\n        onAppendElements: $.noop,\n        onSelectionChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend({\n    thumbLoader: null,\n    elementSelect: null,\n    elementSort: null,\n    modal: null,\n    elementEditor: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addElementBtn: null,\n    $addElementBtnContainer: null,\n\n    _initialized: false,\n\n    init: function(settings) {\n        // Normalize the settings and set them\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n        // Apply the storage key prefix\n        if (this.settings.modalStorageKey) {\n            this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n        }\n\n        // No reason for this to be sortable if we're only allowing 1 selection\n        if (this.settings.limit == 1) {\n            this.settings.sortable = false;\n        }\n\n        this.$container = this.getContainer();\n\n        // Store a reference to this class\n        this.$container.data('elementSelect', this);\n\n        this.$elementsContainer = this.getElementsContainer();\n\n        this.$addElementBtn = this.getAddElementsBtn();\n        if (this.$addElementBtn) {\n            this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n            if (!this.$addElementBtnContainer.length) {\n                this.$addElementBtnContainer = null;\n            }\n        }\n\n        this.thumbLoader = new Craft.ElementThumbLoader();\n\n        this.initElementSelect();\n        this.initElementSort();\n        this.resetElements();\n\n        if (this.$addElementBtn) {\n            this.addListener(this.$addElementBtn, 'activate', 'showModal');\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            this._initialized = true;\n        });\n    },\n\n    get totalSelected() {\n        return this.$elements.length;\n    },\n\n    getContainer: function() {\n        return $('#' + this.settings.id);\n    },\n\n    getElementsContainer: function() {\n        return this.$container.children('.elements');\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.children();\n    },\n\n    getAddElementsBtn: function() {\n        return this.$container.find('.btn.add:first');\n    },\n\n    initElementSelect: function() {\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select({\n                multi: this.settings.sortable,\n                filter: ':not(.delete)'\n            });\n        }\n    },\n\n    initElementSort: function() {\n        if (this.settings.sortable) {\n            this.elementSort = new Garnish.DragSort({\n                container: this.$elementsContainer,\n                filter: (this.settings.selectable ? () => {\n                    // Only return all the selected items if the target item is selected\n                    if (this.elementSort.$targetItem.hasClass('sel')) {\n                        return this.elementSelect.getSelectedItems();\n                    } else {\n                        return this.elementSort.$targetItem;\n                    }\n                } : null),\n                ignoreHandleSelector: '.delete',\n                axis: this.getElementSortAxis(),\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                onSortChange: (this.settings.selectable ? () => {\n                    this.elementSelect.resetItemOrder();\n                } : null)\n            });\n        }\n    },\n\n    getElementSortAxis: function() {\n        return (this.settings.viewMode === 'list' ? 'y' : null);\n    },\n\n    canAddMoreElements: function() {\n        return (!this.settings.limit || this.$elements.length < this.settings.limit);\n    },\n\n    updateAddElementsBtn: function() {\n        if (this.canAddMoreElements()) {\n            this.enableAddElementsBtn();\n        } else {\n            this.disableAddElementsBtn();\n        }\n    },\n\n    disableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.addClass('hidden');\n        }\n    },\n\n    enableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.removeClass('hidden');\n        }\n    },\n\n    resetElements: function() {\n        if (this.$elements !== null) {\n            this.removeElements(this.$elements);\n        } else {\n            this.$elements = $();\n        }\n\n        this.addElements(this.getElements());\n    },\n\n    addElements: function($elements) {\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect.addItems($elements);\n        }\n\n        if (this.settings.sortable) {\n            this.elementSort.addItems($elements);\n        }\n\n        if (this.settings.editable) {\n            this._handleShowElementEditor = ev => {\n                var $element = $(ev.currentTarget);\n                if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                    this.elementEditor = this.createElementEditor($element);\n                }\n            };\n\n            this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n            if ($.isTouchCapable()) {\n                this.addListener($elements, 'taphold', this._handleShowElementEditor);\n            }\n        }\n\n        $elements.find('.delete').on('click dblclick', ev => {\n            this.removeElement($(ev.currentTarget).closest('.element'));\n            // Prevent this from acting as one of a double-click\n            ev.stopPropagation();\n        });\n\n        this.$elements = this.$elements.add($elements);\n        this.updateAddElementsBtn();\n    },\n\n    createElementEditor: function($element, settings) {\n        if (!settings) {\n            settings = {};\n        }\n        settings.prevalidate = this.settings.prevalidate;\n        return Craft.createElementEditor(this.settings.elementType, $element, settings);\n    },\n\n    removeElements: function($elements) {\n        if (this.settings.selectable) {\n            this.elementSelect.removeItems($elements);\n        }\n\n        if (this.modal) {\n            var ids = [];\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $elements.eq(i).data('id');\n\n                if (id) {\n                    ids.push(id);\n                }\n            }\n\n            if (ids.length) {\n                this.modal.elementIndex.enableElementsById(ids);\n            }\n        }\n\n        // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n        $elements.children('input').prop('disabled', true);\n\n        this.$elements = this.$elements.not($elements);\n        this.updateAddElementsBtn();\n\n        this.onRemoveElements();\n    },\n\n    removeElement: function($element) {\n        this.removeElements($element);\n        this.animateElementAway($element, () => {\n            $element.remove();\n        });\n    },\n\n    animateElementAway: function($element, callback) {\n        $element.css('z-index', 0);\n\n        var animateCss = {\n            opacity: -1\n        };\n        animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n        if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n            animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n        }\n\n        // Pause the draft editor\n        if (window.draftEditor) {\n            window.draftEditor.pause();\n        }\n\n        $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n            callback();\n\n            // Resume the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.resume();\n            }\n        });\n    },\n\n    showModal: function() {\n        // Make sure we haven't reached the limit\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        if (!this.modal) {\n            this.modal = this.createModal();\n        } else {\n            this.modal.show();\n        }\n    },\n\n    createModal: function() {\n        return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n    },\n\n    getModalSettings: function() {\n        return $.extend({\n            closeOtherModals: false,\n            storageKey: this.modalStorageKey,\n            sources: this.settings.sources,\n            criteria: this.settings.criteria,\n            multiSelect: (this.settings.limit != 1),\n            showSiteMenu: this.settings.showSiteMenu,\n            disabledElementIds: this.getDisabledElementIds(),\n            onSelect: this.onModalSelect.bind(this)\n        }, this.settings.modalSettings);\n    },\n\n    getSelectedElementIds: function() {\n        var ids = [];\n\n        for (var i = 0; i < this.$elements.length; i++) {\n            ids.push(this.$elements.eq(i).data('id'));\n        }\n\n        return ids;\n    },\n\n    getDisabledElementIds: function() {\n        var ids = this.getSelectedElementIds();\n\n        if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n            ids.push(this.settings.sourceElementId);\n        }\n\n        if (this.settings.disabledElementIds) {\n            ids.push(...this.settings.disabledElementIds);\n        }\n\n        return ids;\n    },\n\n    onModalSelect: function(elements) {\n        if (this.settings.limit) {\n            // Cut off any excess elements\n            var slotsLeft = this.settings.limit - this.$elements.length;\n\n            if (elements.length > slotsLeft) {\n                elements = elements.slice(0, slotsLeft);\n            }\n        }\n\n        this.selectElements(elements);\n        this.updateDisabledElementsInModal();\n    },\n\n    selectElements: function(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            let elementInfo = elements[i],\n                $element = this.createNewElement(elementInfo);\n\n            this.appendElement($element);\n            this.addElements($element);\n            this.animateElementIntoPlace(elementInfo.$element, $element);\n\n            // Override the element reference with the new one\n            elementInfo.$element = $element;\n        }\n\n        this.onSelectElements(elements);\n    },\n\n    createNewElement: function(elementInfo) {\n        var $element = elementInfo.$element.clone();\n\n        // Make a couple tweaks\n        Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n        $element.addClass('removable');\n        $element.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + elementInfo.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        return $element;\n    },\n\n    appendElement: function($element) {\n        $element.appendTo(this.$elementsContainer);\n    },\n\n    animateElementIntoPlace: function($modalElement, $inputElement) {\n        var origOffset = $modalElement.offset(),\n            destOffset = $inputElement.offset(),\n            $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n        $inputElement.css('visibility', 'hidden');\n\n        $helper.css({\n            position: 'absolute',\n            zIndex: 10000,\n            top: origOffset.top,\n            left: origOffset.left\n        });\n\n        var animateCss = {\n            top: destOffset.top,\n            left: destOffset.left\n        };\n\n        $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n            $helper.remove();\n            $inputElement.css('visibility', 'visible');\n        });\n    },\n\n    updateDisabledElementsInModal: function() {\n        if (this.modal.elementIndex) {\n            this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n        }\n    },\n\n    getElementById: function(id) {\n        for (var i = 0; i < this.$elements.length; i++) {\n            var $element = this.$elements.eq(i);\n\n            if ($element.data('id') == id) {\n                return $element;\n            }\n        }\n    },\n\n    onSelectElements: function(elements) {\n        this.trigger('selectElements', {elements});\n        this.settings.onSelectElements(elements);\n\n        if (window.draftEditor) {\n            window.draftEditor.checkForm();\n        }\n    },\n\n    onRemoveElements: function() {\n        this.trigger('removeElements');\n        this.settings.onRemoveElements();\n    }\n}, {\n    ADD_FX_DURATION: 200,\n    REMOVE_FX_DURATION: 200,\n\n    defaults: {\n        id: null,\n        name: null,\n        fieldId: null,\n        elementType: null,\n        sources: null,\n        criteria: {},\n        allowSelfRelations: false,\n        sourceElementId: null,\n        disabledElementIds: null,\n        viewMode: 'list',\n        limit: null,\n        showSiteMenu: false,\n        modalStorageKey: null,\n        modalSettings: {},\n        onSelectElements: $.noop,\n        onRemoveElements: $.noop,\n        sortable: true,\n        selectable: true,\n        editable: true,\n        prevalidate: false,\n        editorSettings: {}\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend({\n    elementType: null,\n    elementIndex: null,\n\n    $body: null,\n    $selectBtn: null,\n    $sidebar: null,\n    $sources: null,\n    $sourceToggles: null,\n    $main: null,\n    $search: null,\n    $elements: null,\n    $tbody: null,\n    $primaryButtons: null,\n    $secondaryButtons: null,\n    $cancelBtn: null,\n    $footerSpinner: null,\n\n    init: function(elementType, settings) {\n        this.elementType = elementType;\n        this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n        // Build the modal\n        var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n            $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n            $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n        this.base($container, this.settings);\n\n        this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n        this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$primaryButtons);\n        this.$selectBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn disabled submit',\n            text: Craft.t('app', 'Select'),\n        }).appendTo(this.$primaryButtons);\n\n        this.$body = $body;\n\n        this.addListener(this.$cancelBtn, 'activate', 'cancel');\n        this.addListener(this.$selectBtn, 'activate', 'selectElements');\n    },\n\n    onFadeIn: function() {\n        if (!this.elementIndex) {\n            this._createElementIndex();\n        } else {\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.elementIndex.$search.trigger('focus');\n            }\n        }\n\n        this.base();\n    },\n\n    onSelectionChange: function() {\n        this.updateSelectBtnState();\n    },\n\n    updateSelectBtnState: function() {\n        if (this.$selectBtn) {\n            if (this.elementIndex.getSelectedElements().length) {\n                this.enableSelectBtn();\n            } else {\n                this.disableSelectBtn();\n            }\n        }\n    },\n\n    enableSelectBtn: function() {\n        this.$selectBtn.removeClass('disabled');\n    },\n\n    disableSelectBtn: function() {\n        this.$selectBtn.addClass('disabled');\n    },\n\n    enableCancelBtn: function() {\n        this.$cancelBtn.removeClass('disabled');\n    },\n\n    disableCancelBtn: function() {\n        this.$cancelBtn.addClass('disabled');\n    },\n\n    showFooterSpinner: function() {\n        this.$footerSpinner.removeClass('hidden');\n    },\n\n    hideFooterSpinner: function() {\n        this.$footerSpinner.addClass('hidden');\n    },\n\n    cancel: function() {\n        if (!this.$cancelBtn.hasClass('disabled')) {\n            this.hide();\n        }\n    },\n\n    selectElements: function() {\n        if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n            // TODO: This code shouldn't know about views' elementSelect objects\n            this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                elementInfo = this.getElementInfo($selectedElements);\n\n            this.onSelect(elementInfo);\n\n            if (this.settings.disableElementsOnSelect) {\n                this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n            }\n\n            if (this.settings.hideOnSelect) {\n                this.hide();\n            }\n        }\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $element = $($selectedElements[i]);\n            var elementInfo = Craft.getElementInfo($element);\n\n            info.push(elementInfo);\n        }\n\n        return info;\n    },\n\n    show: function() {\n        this.updateSelectBtnState();\n        this.base();\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo);\n    },\n\n    disable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.enable();\n        }\n\n        this.base();\n    },\n\n    _createElementIndex: function() {\n        // Get the modal body HTML based on the settings\n        var data = {\n            context: 'modal',\n            elementType: this.elementType,\n            sources: this.settings.sources\n        };\n\n        if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n            data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n        }\n\n        Craft.postActionRequest('elements/get-modal-body', data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.$body.html(response.html);\n\n                if (this.$body.has('.sidebar:not(.hidden)').length) {\n                    this.$body.addClass('has-sidebar');\n                }\n\n                // Initialize the element index\n                this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                    context: 'modal',\n                    modal: this,\n                    storageKey: this.settings.storageKey,\n                    criteria: this.settings.criteria,\n                    disabledElementIds: this.settings.disabledElementIds,\n                    selectable: true,\n                    multiSelect: this.settings.multiSelect,\n                    buttonContainer: this.$secondaryButtons,\n                    onSelectionChange: this.onSelectionChange.bind(this),\n                    hideSidebar: this.settings.hideSidebar,\n                    defaultSiteId: this.settings.defaultSiteId,\n                    defaultSource: this.settings.defaultSource\n                });\n\n                // Double-clicking or double-tapping should select the elements\n                this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                    // Make sure the touch targets are the same\n                    // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                    if (touchData.firstTap.target === touchData.secondTap.target) {\n                        this.selectElements();\n                    }\n                });\n            }\n        });\n    }\n}, {\n    defaults: {\n        resizable: true,\n        storageKey: null,\n        sources: null,\n        criteria: null,\n        multiSelect: false,\n        showSiteMenu: null,\n        disabledElementIds: [],\n        disableElementsOnSelect: false,\n        hideOnSelect: true,\n        onCancel: $.noop,\n        onSelect: $.noop,\n        hideSidebar: false,\n        defaultSiteId: null,\n        defaultSource: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend({\n    $source: null,\n    $target: null,\n    $form: null,\n    settings: null,\n\n    listening: null,\n    timeout: null,\n\n    init: function(source, target, settings) {\n        this.$source = $(source);\n        this.$target = $(target);\n        this.$form = this.$source.closest('form');\n\n        this.setSettings(settings);\n\n        this.startListening();\n    },\n\n    setNewSource: function(source) {\n        var listening = this.listening;\n        this.stopListening();\n\n        this.$source = $(source);\n\n        if (listening) {\n            this.startListening();\n        }\n    },\n\n    startListening: function() {\n        if (this.listening) {\n            return;\n        }\n\n        this.listening = true;\n\n        this.addListener(this.$source, 'input', 'onSourceTextChange');\n        this.addListener(this.$target, 'input', 'onTargetTextChange');\n        this.addListener(this.$form, 'submit', 'onFormSubmit');\n    },\n\n    stopListening: function() {\n        if (!this.listening) {\n            return;\n        }\n\n        this.listening = false;\n\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.removeAllListeners(this.$source);\n        this.removeAllListeners(this.$target);\n        this.removeAllListeners(this.$form);\n    },\n\n    onSourceTextChange: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout(this.updateTarget.bind(this), 250);\n    },\n\n    onTargetTextChange: function() {\n        if (this.$target.get(0) === document.activeElement) {\n            this.stopListening();\n        }\n    },\n\n    onFormSubmit: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.updateTarget();\n    },\n\n    updateTarget: function() {\n        if (!this.$target.is(':visible')) {\n            return;\n        }\n\n        var sourceVal = this.$source.val();\n\n        if (typeof sourceVal === 'undefined') {\n            // The source input may not exist anymore\n            return;\n        }\n\n        var targetVal = this.generateTargetValue(sourceVal);\n\n        this.$target.val(targetVal);\n\n        for (let i = 0; i < this.$target.length; i++) {\n            this.$target[i].dispatchEvent(new InputEvent('input', {\n                inputType: 'insertText',\n            }));\n            this.$target[i].dispatchEvent(new Event('input'));\n        }\n\n        // If the target already has focus, select its whole value to mimic\n        // the behavior if the value had already been generated and they just tabbed in\n        if (this.$target.is(':focus')) {\n            Craft.selectFullValue(this.$target);\n        }\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return sourceVal;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend({\n    settings: null,\n    totalItems: null,\n    sorter: null,\n\n    $noItems: null,\n    $table: null,\n    $tbody: null,\n    $deleteBtns: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.AdminTable.defaults);\n\n        if (!this.settings.allowDeleteAll) {\n            this.settings.minItems = 1;\n        }\n\n        this.$noItems = $(this.settings.noItemsSelector);\n        this.$table = $(this.settings.tableSelector);\n        this.$tbody = this.$table.children('tbody');\n        this.totalItems = this.$tbody.children().length;\n\n        if (this.settings.sortable) {\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                onSortChange: this.reorderItems.bind(this),\n            });\n        }\n\n        this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n        this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n        this.updateUI();\n    },\n\n    addRow: function(row) {\n        if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(row).appendTo(this.$tbody),\n            $deleteBtn = $row.find('.delete');\n\n        if (this.settings.sortable) {\n            this.sorter.addItems($row);\n        }\n\n        this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n        this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n        this.totalItems++;\n\n        this.updateUI();\n    },\n\n    reorderItems: function() {\n        if (!this.settings.sortable) {\n            return;\n        }\n\n        // Get the new field order\n        var ids = [];\n\n        for (var i = 0; i < this.sorter.$items.length; i++) {\n            var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n            ids.push(id);\n        }\n\n        // Send it to the server\n        var data = {\n            ids: JSON.stringify(ids)\n        };\n\n        Craft.postActionRequest(this.settings.reorderAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.onReorderItems(ids);\n                    Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                } else {\n                    Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                }\n            }\n        });\n    },\n\n    handleDeleteBtnClick: function(event) {\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(event.target).closest('tr');\n\n        if (this.confirmDeleteItem($row)) {\n            this.deleteItem($row);\n        }\n    },\n\n    confirmDeleteItem: function($row) {\n        var name = this.getItemName($row);\n        return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name}));\n    },\n\n    deleteItem: function($row) {\n        var data = {\n            id: this.getItemId($row)\n        };\n\n        Craft.postActionRequest(this.settings.deleteAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.handleDeleteItemResponse(response, $row);\n            }\n        });\n    },\n\n    handleDeleteItemResponse: function(response, $row) {\n        var id = this.getItemId($row),\n            name = this.getItemName($row);\n\n        if (response.success) {\n            if (this.sorter) {\n                this.sorter.removeItems($row);\n            }\n\n            $row.remove();\n            this.totalItems--;\n            this.updateUI();\n            this.onDeleteItem(id);\n\n            Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name}));\n        } else {\n            Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name}));\n        }\n    },\n\n    onReorderItems: function(ids) {\n        this.settings.onReorderItems(ids);\n    },\n\n    onDeleteItem: function(id) {\n        this.settings.onDeleteItem(id);\n    },\n\n    getItemId: function($row) {\n        return $row.attr(this.settings.idAttribute);\n    },\n\n    getItemName: function($row) {\n        return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n    },\n\n    updateUI: function() {\n        // Show the \"No Whatever Exists\" message if there aren't any\n        if (this.totalItems === 0) {\n            this.$table.hide();\n            this.$noItems.removeClass('hidden');\n        } else {\n            this.$table.show();\n            this.$noItems.addClass('hidden');\n        }\n\n        // Disable the sort buttons if there's only one row\n        if (this.settings.sortable) {\n            var $moveButtons = this.$table.find('.move');\n\n            if (this.totalItems === 1) {\n                $moveButtons.addClass('disabled');\n            } else {\n                $moveButtons.removeClass('disabled');\n            }\n        }\n\n        // Disable the delete buttons if we've reached the minimum items\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            this.$deleteBtns.addClass('disabled');\n        } else {\n            this.$deleteBtns.removeClass('disabled');\n        }\n\n        // Hide the New Whatever button if we've reached the maximum items\n        if (this.settings.newItemBtnSelector) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                $(this.settings.newItemBtnSelector).addClass('hidden');\n            } else {\n                $(this.settings.newItemBtnSelector).removeClass('hidden');\n            }\n        }\n    }\n}, {\n    defaults: {\n        tableSelector: null,\n        noItemsSelector: null,\n        newItemBtnSelector: null,\n        idAttribute: 'data-id',\n        nameAttribute: 'data-name',\n        sortable: false,\n        allowDeleteAll: true,\n        minItems: 0,\n        maxItems: null,\n        reorderAction: null,\n        deleteAction: null,\n        reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n        reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n        confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n        deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n        deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n        onReorderItems: $.noop,\n        onDeleteItem: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend({\n    reloadIndex: false,\n\n    updateForm: function(response, refreshInitialData) {\n        this.base(response, refreshInitialData);\n\n        if (this.$element.data('id')) {\n            var $imageEditorTrigger = this.$fieldsContainer.find('> .meta > .preview-thumb-container.editable');\n\n            if ($imageEditorTrigger.length) {\n                this.addListener($imageEditorTrigger, 'click', 'showImageEditor');\n            }\n        }\n    },\n\n    showImageEditor: function() {\n        new Craft.AssetImageEditor(this.$element.data('id'), {\n            onSave: () => {\n                this.reloadIndex = true;\n                this.reloadForm();\n            },\n        });\n    },\n\n    onHideHud: function() {\n        if (this.reloadIndex && this.settings.elementIndex) {\n            this.settings.elementIndex.updateElements();\n        } else if (this.reloadIndex && this.settings.input) {\n            this.settings.input.refreshThumbnail(this.$element.data('id'));\n        }\n\n        this.base();\n    }\n});\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend({\n    // jQuery objects\n    $body: null,\n    $footer: null,\n    $imageTools: null,\n    $buttons: null,\n    $cancelBtn: null,\n    $replaceBtn: null,\n    $saveBtn: null,\n    $editorContainer: null,\n    $straighten: null,\n    $croppingCanvas: null,\n    $spinnerCanvas: null,\n\n    // FabricJS objects\n    canvas: null,\n    image: null,\n    viewport: null,\n    focalPoint: null,\n    grid: null,\n    croppingCanvas: null,\n    clipper: null,\n    croppingRectangle: null,\n    cropperHandles: null,\n    cropperGrid: null,\n    croppingShade: null,\n    croppingAreaText: null,\n\n    // Image state attributes\n    imageStraightenAngle: 0,\n    viewportRotation: 0,\n    originalWidth: 0,\n    originalHeight: 0,\n    imageVerticeCoords: null,\n    zoomRatio: 1,\n\n    // Editor state attributes\n    animationInProgress: false,\n    currentView: '',\n    assetId: null,\n    cacheBust: null,\n    draggingCropper: false,\n    scalingCropper: false,\n    draggingFocal: false,\n    previousMouseX: 0,\n    previousMouseY: 0,\n    shiftKeyHeld: false,\n    editorHeight: 0,\n    editorWidth: 0,\n    cropperState: false,\n    scaleFactor: 1,\n    flipData: {},\n    focalPointState: false,\n    spinnerInterval: null,\n    maxImageSize: null,\n    lastLoadedDimensions: null,\n    imageIsLoading: false,\n    mouseMoveEvent: null,\n    croppingConstraint: false,\n    constraintOrientation: 'landscape',\n    showingCustomConstraint: false,\n\n    // Rendering proxy functions\n    renderImage: null,\n    renderCropper: null,\n\n    init: function(assetId, settings) {\n        this.cacheBust = Date.now();\n\n        this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n        if (this.settings.allowDegreeFractions === null) {\n            this.settings.allowDegreeFractions = Craft.isImagick;\n        }\n\n        this.assetId = assetId;\n        this.flipData = {x: 0, y: 0};\n\n        // Build the modal\n        this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n        this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n        this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n        this.base(this.$container, this.settings);\n\n        this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn cancel',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$buttons);\n        this.$replaceBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit save replace',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$buttons);\n\n        if (this.settings.allowSavingAsNew) {\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save copy',\n                text: Craft.t('app', 'Save as a new asset'),\n            }).appendTo(this.$buttons);\n            this.addListener(this.$saveBtn, 'activate', this.saveImage);\n        }\n\n        this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n        this.addListener(this.$cancelBtn, 'activate', this.hide);\n        this.removeListener(this.$shade, 'click');\n\n        this.maxImageSize = this.getMaxImageSize();\n\n        Craft.postActionRequest('assets/image-editor', {assetId}, this.loadEditor.bind(this));\n    },\n\n    /**\n     * Get the max image size that is viewable in the editor currently\n     */\n    getMaxImageSize: function() {\n        var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n        var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n        return Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n    },\n\n    /**\n     * Load the editor markup and start loading components and the image.\n     *\n     * @param data\n     */\n    loadEditor: function(data) {\n        if (!data.html) {\n            alert(Craft.t('app', 'Could not load the image editor.'));\n        }\n\n        this.$body.html(data.html);\n        this.$tabs = $('.tabs li', this.$body);\n        this.$viewsContainer = $('.views', this.$body);\n        this.$views = $('> div', this.$viewsContainer);\n        this.$imageTools = $('.image-container .image-tools', this.$body);\n        this.$editorContainer = $('.image-container .image', this.$body);\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this._showSpinner();\n\n        this.updateSizeAndPosition();\n\n        // Load the canvas on which we'll host our image and set up the proxy render function\n        this.canvas = new fabric.StaticCanvas('image-canvas');\n\n        // Set up the cropping canvas jquery element for tracking all the nice events\n        this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n        this.$croppingCanvas.width(this.editorWidth);\n        this.$croppingCanvas.height(this.editorHeight);\n\n        this.canvas.enableRetinaScaling = true;\n        this.renderImage = () => {\n            Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n        };\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        // Load image and set up the initial properties\n        fabric.Image.fromURL(imageUrl, imageObject => {\n            this.image = imageObject;\n            this.image.set({\n                originX: 'center',\n                originY: 'center',\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n            this.canvas.add(this.image);\n\n            this.originalHeight = this.image.getHeight();\n            this.originalWidth = this.image.getWidth();\n            this.zoomRatio = 1;\n\n            this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n            // Set up the image bounding box, viewport and position everything\n            this._setFittedImageVerticeCoordinates();\n            this._repositionEditorElements();\n\n            // Set up the focal point\n            var focalState = {\n                imageDimensions: this.getScaledImageDimensions(),\n                offsetX: 0,\n                offsetY: 0\n            };\n\n            var focal = false;\n            if (data.focalPoint) {\n                // Transform the focal point coordinates from relative to absolute\n                var focalData = data.focalPoint;\n\n                // Resolve for the current image dimensions.\n                var adjustedX = focalState.imageDimensions.width * focalData.x;\n                var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                focal = true;\n            }\n\n            this.storeFocalPointState(focalState);\n\n            if (focal) {\n                this._createFocalPoint();\n            }\n\n            this._createViewport();\n            this.storeCropperState();\n\n            // Add listeners to buttons\n            this._addControlListeners();\n\n            // Add mouse event listeners\n            this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n            this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n            this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n            this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n            this._hideSpinner();\n\n            // Render it, finally\n            this.renderImage();\n\n            // Make sure verything gets fired for the first tab\n            this.$tabs.first().trigger('click');\n        });\n    },\n\n    /**\n     * Reload the image to better fit the current available image editor viewport.\n     */\n    _reloadImage: function() {\n        if (this.imageIsLoading) {\n            return;\n        }\n\n        this.imageIsLoading = true;\n        this.maxImageSize = this.getMaxImageSize();\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        this.image.setSrc(imageUrl, imageObject => {\n            this.originalHeight = imageObject.getHeight();\n            this.originalWidth = imageObject.getWidth();\n            this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n            this.updateSizeAndPosition();\n            this.renderImage();\n            this.imageIsLoading = false;\n        });\n    },\n\n    /**\n     * Update the modal size and position on browser resize\n     */\n    updateSizeAndPosition: function() {\n        if (!this.$container) {\n            return;\n        }\n\n        // Fullscreen modal\n        var innerWidth = window.innerWidth;\n        var innerHeight = window.innerHeight;\n\n        this.$container.css({\n            'width': innerWidth,\n            'min-width': innerWidth,\n            'left': 0,\n\n            'height': innerHeight,\n            'min-height': innerHeight,\n            'top': 0\n        });\n\n        this.$body.css({\n            'height': innerHeight - 62\n        });\n\n        if (innerWidth < innerHeight) {\n            this.$container.addClass('vertical');\n        } else {\n            this.$container.removeClass('vertical');\n        }\n\n        if (this.$spinnerCanvas) {\n            this.$spinnerCanvas.css({\n                left: ((this.$spinnerCanvas.parent().width() / 2) - (this.$spinnerCanvas.width() / 2)) + 'px',\n                top: ((this.$spinnerCanvas.parent().height() / 2) - (this.$spinnerCanvas.height() / 2)) + 'px'\n            });\n        }\n\n        // If image is already loaded, make sure it looks pretty.\n        if (this.$editorContainer && this.image) {\n            this._repositionEditorElements();\n        }\n    },\n\n    /**\n     * Reposition the editor elements to accurately reflect the editor state with current dimensions\n     */\n    _repositionEditorElements: function() {\n        // Remember what the dimensions were before the resize took place\n        var previousEditorDimensions = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this.canvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        var currentScaledDimensions = this.getScaledImageDimensions();\n\n        // If we're cropping now, we have to reposition the cropper correctly in case\n        // the area for image changes, forcing the image size to change as well.\n        if (this.currentView === 'crop') {\n            this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n            var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            this._setFittedImageVerticeCoordinates();\n            this._repositionCropper(previouslyOccupiedArea);\n        } else {\n            // Otherwise just recalculate the image zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n        }\n\n        // Reposition the image relatively to the previous editor dimensions.\n        this._repositionImage(previousEditorDimensions);\n        this._repositionViewport();\n        this._repositionFocalPoint(previousEditorDimensions);\n        this._zoomImage();\n\n        this.renderImage();\n\n        if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n            this._reloadImage();\n        }\n    },\n\n    /**\n     * Reposition image based on how the editor dimensions have changed.\n     * This ensures keeping the image center offset, if there is any.\n     *\n     * @param previousEditorDimensions\n     */\n    _repositionImage: function(previousEditorDimensions) {\n        this.image.set({\n            left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n            top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n        });\n    },\n\n    /**\n     * Create the viewport for image editor.\n     */\n    _createViewport: function() {\n        this.viewport = new fabric.Rect({\n            width: this.image.width,\n            height: this.image.height,\n            fill: 'rgba(127,0,0,1)',\n            originX: 'center',\n            originY: 'center',\n            globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n            left: this.image.left,\n            top: this.image.top\n        });\n        this.canvas.add(this.viewport);\n        this.renderImage();\n    },\n\n    /**\n     * Create the focal point.\n     */\n    _createFocalPoint: function() {\n        var focalPointState = this.focalPointState;\n        var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n        var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n        var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n        // Adjust by image margins\n        focalX += this.image.left;\n        focalY += this.image.top;\n\n        var deltaX = 0;\n        var deltaY = 0;\n\n        // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n        if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n            if (this.currentView !== 'crop') {\n                deltaX = this.viewport.left - this.image.left;\n                deltaY = this.viewport.top - this.image.top;\n            } else {\n                // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                deltaX = this.clipper.left - this.image.left;\n                deltaY = this.clipper.top - this.image.top;\n            }\n\n            // Bump focal to middle of viewport\n            focalX += deltaX;\n            focalY += deltaY;\n\n            // Reflect changes in saved state\n            focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n        }\n\n        this.focalPoint = new fabric.Group([\n            new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n            new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n        ], {\n            originX: 'center',\n            originY: 'center',\n            left: focalX,\n            top: focalY\n        });\n\n        this.storeFocalPointState(focalPointState);\n        this.canvas.add(this.focalPoint);\n    },\n\n    /**\n     * Toggle focal point\n     */\n    toggleFocalPoint: function() {\n        if (!this.focalPoint) {\n            this._createFocalPoint();\n        } else {\n            this.canvas.remove(this.focalPoint);\n            this.focalPoint = null;\n        }\n\n        this.renderImage();\n    },\n\n    /**\n     * Reposition the viewport to handle editor resizing.\n     */\n    _repositionViewport: function() {\n        if (this.viewport) {\n            var dimensions = {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            // If we're cropping, nothing exciting happens for the viewport\n            if (this.currentView === 'crop') {\n                dimensions.width = this.editorWidth;\n                dimensions.height = this.editorHeight;\n            } else {\n                // If this is the first initial reposition, no cropper state yet\n                if (this.cropperState) {\n                    // Recall the state\n                    var state = this.cropperState;\n\n                    var scaledImageDimensions = this.getScaledImageDimensions();\n                    // Make sure we have the correct current image size\n                    var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                    // Set the viewport dimensions\n                    dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                    dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                    // Adjust the image position to show the correct part of the image in the viewport\n                    this.image.set({\n                        left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                        top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                    });\n                } else {\n                    $.extend(dimensions, this.getScaledImageDimensions());\n                }\n            }\n            this.viewport.set(dimensions);\n        }\n    },\n\n    _repositionFocalPoint: function(previousEditorDimensions) {\n        if (this.focalPoint) {\n            var offsetX = this.focalPoint.left - this.editorWidth / 2;\n            var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n            var currentWidth = this.image.width;\n            var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n            var ratio = newWidth / currentWidth / this.scaleFactor;\n\n            offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n            offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n            offsetX *= ratio;\n            offsetY *= ratio;\n\n            this.focalPoint.set({\n                left: this.editorWidth / 2 + offsetX,\n                top: this.editorHeight / 2 + offsetY\n            });\n        }\n    },\n\n    /**\n     * Return true if the image orientation has changed\n     */\n    hasOrientationChanged: function() {\n        return this.viewportRotation % 180 !== 0;\n    },\n\n    /**\n     * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n     */\n    getScaledImageDimensions: function() {\n        if (typeof this.getScaledImageDimensions._ === 'undefined') {\n            this.getScaledImageDimensions._ = {};\n        }\n\n        this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n        this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n        this.getScaledImageDimensions._.dimensions = {};\n        if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n            this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n            this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n        } else {\n            this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n            this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n        }\n\n        return this.getScaledImageDimensions._.dimensions;\n    },\n\n    /**\n     * Set the image dimensions to reflect the current zoom ratio.\n     */\n    _zoomImage: function() {\n        if (typeof this._zoomImage._ === 'undefined') {\n            this._zoomImage._ = {};\n        }\n\n        this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n        this.image.set({\n            width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n            height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n        });\n    },\n\n    /**\n     * Set up listeners for the controls.\n     */\n    _addControlListeners: function() {\n        // Tabs\n        this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n        // Focal point\n        this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n        // Rotate controls\n        this.addListener($('.rotate-left'), 'click', function() {\n            this.rotateImage(-90);\n        });\n        this.addListener($('.rotate-right'), 'click', function() {\n            this.rotateImage(90);\n        });\n        this.addListener($('.flip-vertical'), 'click', function() {\n            this.flipImage('y');\n        });\n        this.addListener($('.flip-horizontal'), 'click', function() {\n            this.flipImage('x');\n        });\n\n        // Straighten slider\n        this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n            onStart: () => {\n                this._showGrid();\n            },\n            onChange: slider => {\n                this.straighten(slider);\n            },\n            onEnd: () => {\n                this._hideGrid();\n                this._cleanupFocalPointAfterStraighten();\n            },\n        });\n\n        // Cropper scale modifier key\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = true;\n            }\n        });\n        this.addListener(Garnish.$doc, 'keyup', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = false;\n            }\n        });\n\n        this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n        this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n        this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n    },\n\n    /**\n     * Handle a constraint button click.\n     *\n     * @param ev\n     */\n    _handleConstraintClick: function(ev) {\n        var constraint = $(ev.currentTarget).data('constraint');\n        var $target = $(ev.currentTarget);\n        $target.siblings().removeClass('active');\n        $target.addClass('active');\n\n        if (constraint == 'custom') {\n            this._showCustomConstraint();\n            this._applyCustomConstraint();\n            return;\n        }\n\n        this._hideCustomConstraint();\n\n        this.setCroppingConstraint(constraint);\n        this.enforceCroppingConstraint();\n    },\n\n    /**\n     * Handle an orientation switch click.\n     *\n     * @param ev\n     */\n    _handleOrientationClick: function(ev) {\n        if (ev.currentTarget.value === this.constraintOrientation) {\n            return;\n        }\n        this.constraintOrientation = ev.currentTarget.value;\n\n        var $constraints = $('.constraint.flip', this.$container);\n\n        for (var i = 0; i < $constraints.length; i++) {\n            var $constraint = $($constraints[i]);\n            $constraint.data('constraint', 1 / $constraint.data('constraint'));\n            $constraint.html($constraint.html().split(':').reverse().join(':'));\n        }\n\n        $constraints.filter('.active').click();\n    },\n\n    /**\n     * Apply the custom ratio set in the inputs\n     */\n    _applyCustomConstraint: function() {\n        var constraint = this._getCustomConstraint();\n\n        if (constraint.w > 0 && constraint.h > 0) {\n            this.setCroppingConstraint(constraint.w / constraint.h);\n            this.enforceCroppingConstraint();\n        }\n    },\n\n    /**\n     * Get the custom constraint.\n     *\n     * @returns {{w: *, h: *}}\n     */\n    _getCustomConstraint: function() {\n        var w = parseFloat($('.custom-constraint-w').val());\n        var h = parseFloat($('.custom-constraint-h').val());\n        return {\n            w: isNaN(w) ? 0 : w,\n            h: isNaN(h) ? 0 : h,\n        }\n    },\n\n    /**\n     * Set the custom constraint.\n     *\n     * @param w\n     * @param h\n     */\n    _setCustomConstraint: function(w, h) {\n        $('.custom-constraint-w').val(parseFloat(w));\n        $('.custom-constraint-h').val(parseFloat(h));\n    },\n\n    /**\n     * Hide the custom constraint inputs.\n     */\n    _hideCustomConstraint: function() {\n        this.showingCustomConstraint = false;\n        $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n        $('.orientation', this.$container).removeClass('hidden');\n    },\n\n    /**\n     * Show the custom constraint inputs.\n     */\n    _showCustomConstraint: function() {\n        if (this.showingCustomConstraint) {\n            return;\n        }\n\n        this.showingCustomConstraint = true;\n        $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n        $('.orientation', this.$container).addClass('hidden');\n    },\n\n    /**\n     * Handle tab click.\n     *\n     * @param ev\n     */\n    _handleTabClick: function(ev) {\n        if (!this.animationInProgress) {\n            var $tab = $(ev.currentTarget);\n            var view = $tab.data('view');\n            this.$tabs.removeClass('selected');\n            $tab.addClass('selected');\n            this.showView(view);\n        }\n    },\n\n    /**\n     * Show a view.\n     *\n     * @param view\n     */\n    showView: function(view) {\n        if (this.currentView === view) {\n            return;\n        }\n\n        this.$views.addClass('hidden');\n        var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n        $view.removeClass('hidden');\n\n        if (view === 'rotate') {\n            this.enableSlider();\n        } else {\n            this.disableSlider();\n        }\n\n        // Now that most likely our editor dimensions have changed, time to reposition stuff\n        this.updateSizeAndPosition();\n\n        // See if we have to enable or disable crop mode as we transition between tabs\n        if (this.currentView === 'crop' && view !== 'crop') {\n            this.disableCropMode();\n        } else if (this.currentView !== 'crop' && view === 'crop') {\n            this.enableCropMode();\n        }\n\n        // Mark the current view\n        this.currentView = view;\n    },\n\n    /**\n     * Store the current cropper state.\n     *\n     * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n     * as the basis for recalculating the cropper position and dimensions.\n     *\n     * @param [state]\n     */\n    storeCropperState: function(state) {\n        if (typeof this.storeCropperState._ === 'undefined') {\n            this.storeCropperState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.cropperState = state;\n        } else if (this.clipper) {\n            this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n            this.cropperState = {\n                offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        } else {\n            this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n            this.cropperState = {\n                offsetX: 0,\n                offsetY: 0,\n                height: this.storeCropperState._.dimensions.height,\n                width: this.storeCropperState._.dimensions.width,\n                imageDimensions: this.storeCropperState._.dimensions\n            };\n        }\n    },\n\n    /**\n     * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n     */\n    storeFocalPointState: function(state) {\n        if (typeof this.storeFocalPointState._ === 'undefined') {\n            this.storeFocalPointState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.focalPointState = state;\n        } else if (this.focalPoint) {\n            this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n            this.focalPointState = {\n                offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        }\n    },\n\n    /**\n     * Rotate the image along with the viewport.\n     *\n     * @param degrees\n     */\n    rotateImage: function(degrees) {\n        if (!this.animationInProgress) {\n            // We're not that kind of an establishment, sir.\n            if (degrees !== 90 && degrees !== -90) {\n                return false;\n            }\n\n            this.animationInProgress = true;\n            this.viewportRotation += degrees;\n\n            // Normalize the viewport rotation angle so it's between 0 and 359\n            this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n            var newAngle = this.image.angle + degrees;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var imageZoomRatio;\n\n            if (this.hasOrientationChanged()) {\n                imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n            } else {\n                imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n            }\n\n            // In cases when for some reason we've already zoomed in on the image,\n            // use existing zoom.\n            if (this.zoomRatio > imageZoomRatio) {\n                imageZoomRatio = this.zoomRatio;\n            }\n\n            var viewportProperties = {\n                angle: degrees === 90 ? '+=90' : '-=90'\n            };\n\n            var imageProperties = {\n                angle: newAngle,\n                width: scaledImageDimensions.width * imageZoomRatio,\n                height: scaledImageDimensions.height * imageZoomRatio\n            };\n\n            var scaleFactor = 1;\n            if (this.scaleFactor < 1) {\n                scaleFactor = 1 / this.scaleFactor;\n                this.scaleFactor = 1;\n            } else {\n                if (this.viewport.width > this.editorHeight) {\n                    scaleFactor = this.editorHeight / this.viewport.width;\n                } else if (this.viewport.height > this.editorWidth) {\n                    scaleFactor = this.editorWidth / this.viewport.height;\n                }\n                this.scaleFactor = scaleFactor;\n            }\n\n            if (scaleFactor < 1) {\n                imageProperties.width *= scaleFactor;\n                imageProperties.height *= scaleFactor;\n            }\n\n            var state = this.cropperState;\n\n            // Make sure we reposition the image as well to focus on the same image area\n            var deltaX = state.offsetX;\n            var deltaY = state.offsetY;\n            var angleInRadians = degrees * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n            var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n            imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n            state.offsetX = newDeltaX;\n            state.offsetY = newDeltaY;\n\n            var temp = state.width;\n            state.width = state.height;\n            state.height = temp;\n\n            this.storeCropperState(state);\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            }\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    // If we're zooming the image in or out, better do the same to viewport\n                    var temp = this.viewport.height * scaleFactor;\n                    this.viewport.height = this.viewport.width * scaleFactor;\n                    this.viewport.width = temp;\n                    this.viewport.set({angle: 0});\n                },\n            });\n\n            // Animate the rotation and dimension change\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                    this.image.set({angle: cleanAngle});\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        this._adjustFocalPointByAngle(degrees);\n                        this.straighten(this.straighteningInput);\n                        this.canvas.add(this.focalPoint);\n                    } else {\n                        this._resetFocalPointPosition();\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Flip an image along an axis.\n     *\n     * @param axis\n     */\n    flipImage: function(axis) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            if (this.hasOrientationChanged()) {\n                axis = axis === 'y' ? 'x' : 'y';\n            }\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            } else {\n                this._resetFocalPointPosition();\n            }\n\n            var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            this.straighteningInput.setValue(-this.imageStraightenAngle);\n            this.imageStraightenAngle = -this.imageStraightenAngle;\n            var properties = {\n                angle: this.viewportRotation + this.imageStraightenAngle\n            };\n\n            var deltaY, deltaX;\n            var cropperState = this.cropperState;\n            var focalPointState = this.focalPointState;\n\n            // Reposition the image, viewport, and stored cropper and focal point states.\n            if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                cropperState.offsetX = -cropperState.offsetX;\n                focalPointState.offsetX = -focalPointState.offsetX;\n                deltaX = this.image.left - editorCenter.x;\n                properties.left = editorCenter.x - deltaX;\n            } else {\n                cropperState.offsetY = -cropperState.offsetY;\n                focalPointState.offsetY = -focalPointState.offsetY;\n                deltaY = this.image.top - editorCenter.y;\n                properties.top = editorCenter.y - deltaY;\n            }\n\n            if (axis === 'y') {\n                properties.scaleY = this.image.scaleY * -1;\n                this.flipData.y = 1 - this.flipData.y;\n            } else {\n                properties.scaleX = this.image.scaleX * -1;\n                this.flipData.x = 1 - this.flipData.x;\n            }\n\n            this.storeCropperState(cropperState);\n            this.storeFocalPointState(focalPointState);\n\n            this.image.animate(properties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        // Well this is handy\n                        this._adjustFocalPointByAngle(0);\n                        this.canvas.add(this.focalPoint);\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Perform the straightening with input slider.\n     *\n     * @param {Craft.SlideRuleInput} slider\n     */\n    straighten: function(slider) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            var previousAngle = this.image.angle;\n\n            this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n            // Straighten the image\n            this.image.set({\n                angle: this.viewportRotation + this.imageStraightenAngle\n            });\n\n            // Set the new zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            this._zoomImage();\n\n            if (this.cropperState) {\n                this._adjustEditorElementsOnStraighten(previousAngle);\n            }\n\n            this.renderImage();\n\n            this.animationInProgress = false;\n        }\n    },\n\n    /**\n     * Adjust the cropped viewport when straightening the image to correct for\n     * bumping into edges, keeping focus on the cropped area center and to\n     * maintain the illusion that the image is being straightened relative to the viewport center.\n     *\n     * @param {integer} previousAngle integer the previous image angle before straightening\n     */\n    _adjustEditorElementsOnStraighten: function(previousAngle) {\n        var scaledImageDimensions = this.getScaledImageDimensions();\n        var angleDelta = this.image.angle - previousAngle;\n        var state = this.cropperState;\n\n        var currentZoomRatio = this.zoomRatio;\n        var adjustmentRatio = 1;\n\n        var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n        do {\n            // Get the cropper center coordinates\n            var cropperCenterX = state.offsetX;\n            var cropperCenterY = state.offsetY;\n            var angleInRadians = angleDelta * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n            newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n            sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Figure out the final image offset to keep the viewport focused where we need it\n            deltaX = newCenterX * currentZoomRatio * sizeFactor;\n            deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n            // If the image would creep in the viewport, figure out how to math around it.\n            var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n            var rectangle = {\n                width: this.viewport.width,\n                height: this.viewport.height,\n                left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n            };\n            adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n            currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n            // If we had to make adjustments, do the calculations again\n        } while (adjustmentRatio !== 1);\n\n        // Reposition the image correctly\n        this.image.set({\n            left: this.editorWidth / 2 - deltaX,\n            top: this.editorHeight / 2 - deltaY\n        });\n\n        // Finally, store the new cropper state to reflect the rotation change.\n        state.offsetX = newCenterX;\n        state.offsetY = newCenterY;\n        state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n        state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n        this.storeCropperState(state);\n\n        // Zoom the image in and we're done.\n        this.zoomRatio = currentZoomRatio;\n\n        if (this.focalPoint) {\n            this._adjustFocalPointByAngle(angleDelta);\n\n            if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 0});\n            } else {\n                this.focalPoint.set({opacity: 1});\n            }\n        } else if (angleDelta !== 0) {\n            this._resetFocalPointPosition();\n        }\n\n        this._zoomImage();\n    },\n\n    /**\n     * If focal point is active and outside of viewport after straightening, reset it.\n     */\n    _cleanupFocalPointAfterStraighten: function() {\n        if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n            this.focalPoint.set({opacity: 1});\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n            this.toggleFocalPoint();\n        }\n    },\n\n    /**\n     * Reset focal point to the middle of image.\n     */\n    _resetFocalPointPosition: function() {\n        var state = this.focalPointState;\n        state.offsetX = 0;\n        state.offsetY = 0;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n     *\n     * @param object\n     * @param containingObject\n     *\n     * @returns {boolean}\n     */\n    _isCenterInside: function(object, containingObject) {\n        return (object.left > containingObject.left - containingObject.width / 2\n            && object.top > containingObject.top - containingObject.height / 2\n            && object.left < containingObject.left + containingObject.width / 2\n            && object.top < containingObject.top + containingObject.height / 2\n        );\n    },\n\n    /**\n     * Adjust the focal point by an angle in degrees.\n     * @param angle\n     */\n    _adjustFocalPointByAngle: function(angle) {\n        var angleInRadians = angle * (Math.PI / 180);\n        var state = this.focalPointState;\n\n        var focalX = state.offsetX;\n        var focalY = state.offsetY;\n\n        // Calculate how the focal point would need to move in a circle to keep on the same spot\n        // on the image if it was rotated with zoom intact.\n        var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n        var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n        var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n        var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n        var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n        this.focalPoint.left = this.image.left + adjustedFocalX;\n        this.focalPoint.top = this.image.top + adjustedFocalY;\n\n        state.offsetX = newFocalX;\n        state.offsetY = newFocalY;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n     * If the rectangle fits, 1 will be returned.\n     *\n     * @param rectangle\n     * @param containingVertices\n     */\n    _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n        var rectangleVertices = this._getRectangleVertices(rectangle);\n        var vertex;\n\n        // Check if any of the viewport vertices end up out of bounds\n        for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n            vertex = rectangleVertices[verticeIndex];\n\n            if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                break;\n            }\n\n            vertex = false;\n        }\n\n        // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n        var adjustmentRatio;\n\n        if (!vertex) {\n            adjustmentRatio = 1;\n        } else {\n            // Find out which edge got crossed by the vertex\n            var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n            var rectangleCenter = {\n                x: rectangle.left + rectangle.width / 2,\n                y: rectangle.top + rectangle.height / 2\n            };\n\n            // Calculate how much further that edge needs to be.\n            // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n            var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n            var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n            // Adjust the zoom ratio\n            adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n        }\n\n        return adjustmentRatio;\n    },\n\n    /**\n     * Save the image.\n     *\n     * @param ev\n     */\n    saveImage: function(ev) {\n        var $button = $(ev.currentTarget);\n        if ($button.hasClass('disabled')) {\n            return false;\n        }\n\n        $('.btn', this.$buttons).addClass('disabled');\n        this.$buttons.append('<div class=\"spinner\"></div>');\n\n        var postData = {\n            assetId: this.assetId,\n            viewportRotation: this.viewportRotation,\n            imageRotation: this.imageStraightenAngle,\n            replace: $button.hasClass('replace') ? 1 : 0\n        };\n\n        if (this.cropperState) {\n            var cropData = {};\n\n            cropData.height = this.cropperState.height;\n            cropData.width = this.cropperState.width;\n            cropData.offsetX = this.cropperState.offsetX;\n            cropData.offsetY = this.cropperState.offsetY;\n\n            postData.imageDimensions = this.cropperState.imageDimensions;\n\n            postData.cropData = cropData;\n        } else {\n            postData.imageDimensions = this.getScaledImageDimensions();\n        }\n\n        if (this.focalPoint) {\n            postData.focalPoint = this.focalPointState;\n        }\n\n        postData.flipData = this.flipData;\n        postData.zoom = this.zoomRatio;\n\n        Craft.postActionRequest('assets/save-image', postData, data => {\n            this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n            if (data.error) {\n                alert(data.error);\n                return;\n            }\n\n            this.onSave();\n            this.hide();\n            Craft.cp.runQueue();\n        });\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToCoverRatio: function(dimensions) {\n        // Convert the angle to radians\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        // Calculate the dimensions of the scaled image using the magic of math\n        var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n        var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n        // Calculate the ratio\n        return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToFitRatio: function(dimensions) {\n        // Get the bounding box for a rotated image\n        var boundingBox = this._getImageBoundingBox(dimensions);\n\n        // Scale the bounding box to fit\n        var scale = 1;\n        if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n            var vertScale = this.editorHeight / boundingBox.height;\n            var horiScale = this.editorWidth / boundingBox.width;\n            scale = Math.min(horiScale, vertScale);\n        }\n\n        return scale;\n    },\n\n    /**\n     * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n     */\n    getCombinedZoomRatio: function(dimensions) {\n        return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n    },\n\n    /**\n     * Draw the grid.\n     *\n     * @private\n     */\n    _showGrid: function() {\n        if (!this.grid) {\n            var strokeOptions = {\n                strokeWidth: 1,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            var lineCount = 8;\n            var gridWidth = this.viewport.width;\n            var gridHeight = this.viewport.height;\n            var xStep = gridWidth / (lineCount + 1);\n            var yStep = gridHeight / (lineCount + 1);\n\n            var grid = [\n                new fabric.Rect({\n                    strokeWidth: 2,\n                    stroke: 'rgba(255,255,255,1)',\n                    originX: 'center',\n                    originY: 'center',\n                    width: gridWidth,\n                    height: gridHeight,\n                    left: gridWidth / 2,\n                    top: gridHeight / 2,\n                    fill: 'rgba(255,255,255,0)'\n                })\n            ];\n\n            var i;\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n            }\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n            }\n\n            this.grid = new fabric.Group(grid, {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                angle: this.viewport.angle\n            });\n\n            this.canvas.add(this.grid);\n            this.renderImage();\n        }\n    },\n\n    /**\n     * Hide the grid\n     */\n    _hideGrid: function() {\n        this.canvas.remove(this.grid);\n        this.grid = null;\n        this.renderImage();\n    },\n\n    /**\n     * Remove all the events when hiding the editor.\n     */\n    onFadeOut: function() {\n        this.destroy();\n    },\n\n    /**\n     * Make sure underlying content is not scrolled by accident.\n     */\n    show: function() {\n        this.base();\n\n        $('html').addClass('noscroll');\n    },\n\n    /**\n     * Allow the content to scroll.\n     */\n    hide: function() {\n        this.removeAllListeners();\n        this.straighteningInput.removeAllListeners();\n        $('html').removeClass('noscroll');\n        this.base();\n    },\n\n    /**\n     * onSave callback.\n     */\n    onSave: function() {\n        this.settings.onSave();\n        this.trigger('save');\n    },\n\n    /**\n     * Enable the rotation slider.\n     */\n    enableSlider: function() {\n        this.$imageTools.removeClass('hidden');\n    },\n\n    /**\n     * Disable the rotation slider.\n     */\n    disableSlider: function() {\n        this.$imageTools.addClass('hidden');\n    },\n\n    /**\n     * Switch to crop mode.\n     */\n    enableCropMode: function() {\n        var imageDimensions = this.getScaledImageDimensions();\n        this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n        var viewportProperties = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var callback = () => {\n            this._setFittedImageVerticeCoordinates();\n\n            // Restore cropper\n            var state = this.cropperState;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Restore based on the stored information\n            var cropperData = {\n                left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                width: state.width * sizeFactor * this.zoomRatio,\n                height: state.height * sizeFactor * this.zoomRatio\n            };\n\n            this._showCropper(cropperData);\n\n            if (this.focalPoint) {\n                sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Switch out of crop mode.\n     */\n    disableCropMode: function() {\n        var viewportProperties = {};\n\n        this._hideCropper();\n        var imageDimensions = this.getScaledImageDimensions();\n        var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n        var inverseZoomFactor = targetZoom / this.zoomRatio;\n        this.zoomRatio = targetZoom;\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var offsetX = this.clipper.left - this.image.left;\n        var offsetY = this.clipper.top - this.image.top;\n\n        var imageOffsetX = offsetX * inverseZoomFactor;\n        var imageOffsetY = offsetY * inverseZoomFactor;\n        imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n        imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n        // Calculate the cropper dimensions after all the zooming\n        viewportProperties.height = this.clipper.height * inverseZoomFactor;\n        viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n        if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n            if (this.focalPoint) {\n                this.toggleFocalPoint();\n            }\n\n            this._resetFocalPointPosition();\n        }\n\n        var callback = () => {\n            // Reposition focal point correctly\n            if (this.focalPoint) {\n                var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Transition between cropping end editor modes\n     *\n     * @param callback\n     * @param imageProperties\n     * @param viewportProperties\n     * @private\n     */\n    _editorModeTransition: function(callback, imageProperties, viewportProperties) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            // Without this it looks semi-broken during animation\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n                this.renderImage();\n            }\n\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    callback();\n                    this.animationInProgress = false;\n                    this.renderImage();\n                },\n            });\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration\n            });\n        }\n    },\n\n    _showSpinner: function() {\n        this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n        var canvas = document.getElementById('spinner-canvas');\n        var context = canvas.getContext('2d');\n        var start = new Date();\n        var lines = 16,\n            cW = context.canvas.width,\n            cH = context.canvas.height;\n\n        var draw = function() {\n            var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n            context.save();\n            context.clearRect(0, 0, cW, cH);\n            context.translate(cW / 2, cH / 2);\n            context.rotate(Math.PI * 2 * rotation);\n            for (var i = 0; i < lines; i++) {\n                context.beginPath();\n                context.rotate(Math.PI * 2 / lines);\n                context.moveTo(cW / 10, 0);\n                context.lineTo(cW / 4, 0);\n                context.lineWidth = cW / 30;\n                context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                context.stroke();\n            }\n            context.restore();\n        };\n        this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n    },\n\n    _hideSpinner: function() {\n        window.clearInterval(this.spinnerInterval);\n        this.$spinnerCanvas.remove();\n        this.$spinnerCanvas = null;\n    },\n\n    /**\n     * Show the cropper.\n     *\n     * @param clipperData\n     */\n    _showCropper: function(clipperData) {\n        this._setupCropperLayer(clipperData);\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Hide the cropper.\n     */\n    _hideCropper: function() {\n        if (this.clipper) {\n            this.croppingCanvas.remove(this.clipper);\n            this.croppingCanvas.remove(this.croppingShade);\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n\n            this.croppingCanvas = null;\n            this.renderCropper = null;\n        }\n    },\n\n    /**\n     * Draw the cropper.\n     *\n     * @param clipperData\n     */\n    _setupCropperLayer: function(clipperData) {\n        // Set up the canvas for cropper\n        this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n            backgroundColor: 'rgba(0,0,0,0)',\n            hoverCursor: 'default',\n            selection: false\n        });\n\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        this.renderCropper = () => Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n\n        $('#cropping-canvas', this.$editorContainer).css({\n            position: 'absolute',\n            top: 0,\n            left: 0\n        });\n\n        this.croppingShade = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: this.editorWidth,\n            height: this.editorHeight,\n            fill: 'rgba(0,0,0,0.7)'\n        });\n\n        // Calculate the cropping rectangle size\n        var imageDimensions = this.getScaledImageDimensions();\n        var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n        var rectWidth = imageDimensions.width / rectangleRatio;\n        var rectHeight = imageDimensions.height / rectangleRatio;\n\n        if (this.hasOrientationChanged()) {\n            var temp = rectHeight;\n            rectHeight = rectWidth;\n            rectWidth = temp;\n        }\n\n        // Set up the cropping viewport rectangle\n        this.clipper = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: rectWidth,\n            height: rectHeight,\n            stroke: 'black',\n            fill: 'rgba(128,0,0,1)',\n            strokeWidth: 0\n        });\n\n        // Set from clipper data\n        if (clipperData) {\n            this.clipper.set(clipperData);\n        }\n\n        this.clipper.globalCompositeOperation = 'destination-out';\n        this.croppingCanvas.add(this.croppingShade);\n        this.croppingCanvas.add(this.clipper);\n    },\n\n    /**\n     * Redraw the cropper boundaries\n     */\n    _redrawCropperElements: function() {\n        if (typeof this._redrawCropperElements._ === 'undefined') {\n            this._redrawCropperElements._ = {};\n        }\n\n        if (this.cropperHandles) {\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n        }\n        this._redrawCropperElements._.lineOptions = {\n            strokeWidth: 4,\n            stroke: 'rgb(255,255,255)',\n            fill: false\n        };\n\n        this._redrawCropperElements._.gridOptions = {\n            strokeWidth: 2,\n            stroke: 'rgba(255,255,255,0.5)'\n        };\n\n        // Draw the handles\n        this._redrawCropperElements._.pathGroup = [\n            new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n        ];\n\n        this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n            left: this.clipper.left,\n            top: this.clipper.top,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        // Don't forget the rectangle\n        this.croppingRectangle = new fabric.Rect({\n            left: this.clipper.left,\n            top: this.clipper.top,\n            width: this.clipper.width,\n            height: this.clipper.height,\n            fill: 'rgba(0,0,0,0)',\n            stroke: 'rgba(255,255,255,0.8)',\n            strokeWidth: 2,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        this.cropperGrid = new fabric.Group(\n            [\n                new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n            ], {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n        this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n        this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n        if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n            this._redrawCropperElements._.cropTextTop -= 24;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n        }\n\n        this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n            left: this.croppingRectangle.left,\n            top: this._redrawCropperElements._.cropTextTop,\n            fontSize: 13,\n            fill: 'rgb(200,200,200)',\n            backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n            font: 'Craft',\n            width: 70,\n            height: 15,\n            originX: 'center',\n            originY: 'center',\n            textAlign: 'center'\n        });\n\n        this.croppingCanvas.add(this.cropperHandles);\n        this.croppingCanvas.add(this.cropperGrid);\n        this.croppingCanvas.add(this.croppingRectangle);\n        this.croppingCanvas.add(this.croppingAreaText);\n    },\n\n    /**\n     * Reposition the cropper when the image editor dimensions change.\n     *\n     * @param previousImageArea\n     */\n    _repositionCropper: function(previousImageArea) {\n        if (!this.croppingCanvas) {\n            return;\n        }\n\n        // Get the current clipper offset relative to center\n        var currentOffset = {\n            x: this.clipper.left - this.croppingCanvas.width / 2,\n            y: this.clipper.top - this.croppingCanvas.height / 2\n        };\n\n        // Resize the cropping canvas\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        // Check by what factor will the new final bounding box be different\n        var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n        var areaFactor = currentArea.width / previousImageArea.width;\n\n        // Adjust the cropper size to scale along with the bounding box\n        this.clipper.width = Math.round(this.clipper.width * areaFactor);\n        this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n        // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n        // for editor size changes and then multiply by the size factor to adjust for image size changes\n        this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n        this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n        // Resize the cropping shade\n        this.croppingShade.set({\n            width: this.editorWidth,\n            height: this.editorHeight,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        });\n\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Get the dimensions of a bounding rectangle by a set of four coordinates.\n     *\n     * @param coordinateSet\n     */\n    _getBoundingRectangle: function(coordinateSet) {\n        return {\n            width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n            height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n        };\n    },\n\n    /**\n     * Handle the mouse being clicked.\n     *\n     * @param ev\n     */\n    _handleMouseDown: function(ev) {\n        // Focal before resize before dragging\n        var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n        var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n        var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n        if (handle || move || focal) {\n            this.previousMouseX = ev.pageX;\n            this.previousMouseY = ev.pageY;\n\n            if (focal) {\n                this.draggingFocal = true;\n            } else if (handle) {\n                this.scalingCropper = handle;\n            } else if (move) {\n                this.draggingCropper = true;\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse being moved.\n     *\n     * @param ev\n     */\n    _handleMouseMove: function(ev) {\n        if (this.mouseMoveEvent !== null) {\n            Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n        }\n        this.mouseMoveEvent = ev;\n    },\n\n    _handleMouseMoveInternal: function() {\n        if (this.mouseMoveEvent === null) {\n            return;\n        }\n\n        if (this.focalPoint && this.draggingFocal) {\n            this._handleFocalDrag(this.mouseMoveEvent);\n            this.storeFocalPointState();\n            this.renderImage();\n        } else if (this.draggingCropper || this.scalingCropper) {\n            if (this.draggingCropper) {\n                this._handleCropperDrag(this.mouseMoveEvent);\n            } else {\n                this._handleCropperResize(this.mouseMoveEvent);\n            }\n\n            this._redrawCropperElements();\n\n            this.storeCropperState();\n            this.renderCropper();\n        } else {\n            this._setMouseCursor(this.mouseMoveEvent);\n        }\n\n        this.previousMouseX = this.mouseMoveEvent.pageX;\n        this.previousMouseY = this.mouseMoveEvent.pageY;\n\n        this.mouseMoveEvent = null;\n    },\n\n    /**\n     * Handle mouse being released.\n     *\n     * @param ev\n     */\n    _handleMouseUp: function(ev) {\n        this.draggingCropper = false;\n        this.scalingCropper = false;\n        this.draggingFocal = false;\n    },\n\n    /**\n     * Handle mouse out\n     *\n     * @param ev\n     */\n    _handleMouseOut: function(ev) {\n        this._handleMouseUp(ev);\n        this.mouseMoveEvent = ev;\n        this._handleMouseMoveInternal();\n    },\n\n    /**\n     * Handle cropper being dragged.\n     *\n     * @param ev\n     */\n    _handleCropperDrag: function(ev) {\n        if (typeof this._handleCropperDrag._ === 'undefined') {\n            this._handleCropperDrag._ = {};\n        }\n\n        this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n            return false;\n        }\n\n        this._handleCropperDrag._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n        // If this would drag it outside of the image\n        if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n            // Try to find the furthest point in the same general direction where we can drag it\n\n            // Delta iterator setup\n            this._handleCropperDrag._.dxi = 0;\n            this._handleCropperDrag._.dyi = 0;\n            this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n            this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n            // The furthest we can move\n            this._handleCropperDrag._.furthest = 0;\n            this._handleCropperDrag._.furthestDeltas = {};\n\n            // Loop through every combination of dragging it not so far\n            for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                    this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                    if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                        if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                            this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                            this._handleCropperDrag._.furthestDeltas = {\n                                x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                            }\n                        }\n                    }\n                }\n            }\n\n            // REALLY can't drag along the cursor movement\n            if (this._handleCropperDrag._.furthest == 0) {\n                return;\n            } else {\n                this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n            }\n        }\n\n        this.clipper.set({\n            left: this.clipper.left + this._handleCropperDrag._.deltaX,\n            top: this.clipper.top + this._handleCropperDrag._.deltaY\n        });\n    },\n\n    /**\n     * Handle focal point being dragged.\n     *\n     * @param ev\n     */\n    _handleFocalDrag: function(ev) {\n        if (typeof this._handleFocalDrag._ === 'undefined') {\n            this._handleFocalDrag._ = {};\n        }\n\n        if (this.focalPoint) {\n            this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                return;\n            }\n\n            this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n            this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n            // Just make sure that the focal point stays inside the image\n            if (this.currentView === 'crop') {\n                if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                    return;\n                }\n            } else {\n                if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                    && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                    return;\n                }\n            }\n\n            this.focalPoint.set({\n                left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n            });\n        }\n    },\n\n    /**\n     * Set the cropping constraint\n     * @param constraint\n     */\n    setCroppingConstraint: function(constraint) {\n        // In case this caused the sidebar width to change.\n        this.updateSizeAndPosition();\n\n        switch (constraint) {\n            case 'none':\n                this.croppingConstraint = false;\n                break;\n\n            case 'original':\n                this.croppingConstraint = this.originalWidth / this.originalHeight;\n                break;\n\n            case 'current':\n                this.croppingConstraint = this.clipper.width / this.clipper.height;\n                break;\n\n            case 'custom':\n\n                break;\n            default:\n                this.croppingConstraint = parseFloat(constraint);\n\n                break;\n        }\n    },\n\n    /**\n     * Enforce the cropping constraint\n     */\n    enforceCroppingConstraint: function() {\n        if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n            this.enforceCroppingConstraint._ = {};\n        }\n\n        if (this.animationInProgress || !this.croppingConstraint) {\n            return;\n        }\n\n        this.animationInProgress = true;\n\n        // Mock the clipping rectangle for collision tests\n        this.enforceCroppingConstraint._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        // If wider than it should be\n        if (this.clipper.width > this.clipper.height * this.croppingConstraint) {\n            this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n            // Make it taller!\n            this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n            // Getting really awkward having to convert between 0;0 being center or top-left corner.\n            this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n            // If the clipper would end up out of bounds, make it narrower instead.\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n            }\n        } else {\n            // Follow the same pattern, if taller than it should be.\n            this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n            this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n            this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n            }\n        }\n\n        this.enforceCroppingConstraint._.properties = {\n            height: this.enforceCroppingConstraint._.rectangle.height,\n            width: this.enforceCroppingConstraint._.rectangle.width\n        };\n\n        // Make sure to redraw cropper handles and gridlines when resizing\n        this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n            onChange: () => {\n                this._redrawCropperElements();\n                this.croppingCanvas.renderAll();\n            },\n            duration: this.settings.animationDuration,\n            onComplete: () => {\n                this._redrawCropperElements();\n                this.animationInProgress = false;\n                this.renderCropper();\n                this.storeCropperState();\n            },\n        });\n    },\n\n    /**\n     * Handle cropper being resized.\n     *\n     * @param ev\n     */\n    _handleCropperResize: function(ev) {\n        if (typeof this._handleCropperResize._ === 'undefined') {\n            this._handleCropperResize._ = {};\n        }\n\n        // Size deltas\n        this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n            this._handleCropperResize._.deltaX = 0;\n        }\n\n        if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n            this._handleCropperResize._.deltaY = 0;\n        }\n\n        if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n            return;\n        }\n\n        // Translate from center-center origin to absolute coords\n        this._handleCropperResize._.startingRectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        }\n\n        this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n        if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n            return;\n        }\n\n        if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n            return;\n        }\n\n        // Translate back to center-center origin.\n        this.clipper.set({\n            top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n            left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n            width: this._handleCropperResize._.rectangle.width,\n            height: this._handleCropperResize._.rectangle.height\n        });\n\n        this._redrawCropperElements();\n    },\n\n    _calculateNewCropperSizeByDeltas: function(startingRectangle, deltaX, deltaY, cropperDirection) {\n        if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n            this._calculateNewCropperSizeByDeltas._ = {};\n        }\n\n        // Center deltas\n        this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n        this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n        this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n        this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n        this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n        // Lock the aspect ratio if needed\n        if (this.croppingConstraint) {\n            this._calculateNewCropperSizeByDeltas._.change = 0;\n\n            // Take into account the mouse direction and figure out the \"real\" change in cropper size\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'br':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n\n            if (this.croppingConstraint > 1) {\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n            } else {\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n            // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n        } else {\n            // Lock the aspect ratio\n            if (this.shiftKeyHeld &&\n                (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                    cropperDirection === 'bl' || cropperDirection === 'br')\n            ) {\n                this._calculateNewCropperSizeByDeltas._.ratio;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                }\n            }\n\n            if (cropperDirection.match(/t/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/b/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/r/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n            if (cropperDirection.match(/l/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n        }\n\n        this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n        this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n        this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n        this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n        return this._calculateNewCropperSizeByDeltas._.rectangle;\n    },\n\n    /**\n     * Set mouse cursor by it's position over cropper.\n     *\n     * @param ev\n     */\n    _setMouseCursor: function(ev) {\n        if (typeof this._setMouseCursor._ === 'undefined') {\n            this._setMouseCursor._ = {};\n        }\n\n        if (Garnish.isMobileBrowser(true)) {\n            return;\n        }\n        this._setMouseCursor._.cursor = 'default';\n        this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n        if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n            this._setMouseCursor._.cursor = 'pointer';\n        } else if (this._setMouseCursor._.handle) {\n            if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                this._setMouseCursor._.cursor = 'ns-resize';\n            } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                this._setMouseCursor._.cursor = 'ew-resize';\n            } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                this._setMouseCursor._.cursor = 'nwse-resize';\n            } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                this._setMouseCursor._.cursor = 'nesw-resize';\n            }\n        } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n            this._setMouseCursor._.cursor = 'move';\n        }\n\n        $('.body').css('cursor', this._setMouseCursor._.cursor);\n    },\n\n    /**\n     * Test whether the mouse cursor is on any cropper handles.\n     *\n     * @param ev\n     */\n    _cropperHandleHitTest: function(ev) {\n        if (typeof this._cropperHandleHitTest._ === 'undefined') {\n            this._cropperHandleHitTest._ = {};\n        }\n\n        this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n        this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n        this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n        this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n        this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n        this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n        // Left side top/bottom\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tl';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'bl';\n            }\n        }\n        // Right side top/bottom\n        if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tr';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'br';\n            }\n        }\n\n        // Left or right\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'l';\n        }\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'r';\n        }\n\n        // Top or bottom\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 't';\n        }\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 'b';\n        }\n\n        return false;\n    },\n\n    /**\n     * Test whether the mouse cursor is on a fabricJS object.\n     *\n     * @param object\n     * @param event\n     *\n     * @return boolean\n     */\n\n    _isMouseOver: function(event, object) {\n        if (typeof this._isMouseOver._ === 'undefined') {\n            this._isMouseOver._ = {};\n        }\n\n        this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n        this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n        this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._isMouseOver._.lb = object.left - object.width / 2;\n        this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n        this._isMouseOver._.tb = object.top - object.height / 2;\n        this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n        return (\n            this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n            this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n            this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n            this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n        );\n    },\n\n    /**\n     * Get vertices of a rectangle defined by left,top,height and width properties.\n     * Optionally it's possible to provide offsetX and offsetY values.\n     * Left and top properties of rectangle reference the top-left corner.\n     *\n     * @param rectangle\n     * @param [offsetX]\n     * @param [offsetY]\n     */\n    _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n        if (typeof this._getRectangleVertices._ === 'undefined') {\n            this._getRectangleVertices._ = {};\n        }\n\n        if (typeof offsetX === 'undefined') {\n            offsetX = 0;\n        }\n        if (typeof offsetY === 'undefined') {\n            offsetY = 0;\n        }\n\n        this._getRectangleVertices._.topLeft = {\n            x: rectangle.left + offsetX,\n            y: rectangle.top + offsetY\n        };\n\n        this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n        this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n        this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n        return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n    },\n\n    /**\n     * Set image vertice coordinates for an image that's been zoomed to fit.\n     */\n    _setFittedImageVerticeCoordinates: function() {\n        this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n    },\n\n    /**\n     * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n     * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n     *\n     * @param zoomMode\n     */\n    getImageVerticeCoords: function(zoomMode) {\n        var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n        var imageDimensions = this.getScaledImageDimensions();\n\n        var ratio;\n\n        if (typeof zoomMode === \"number\") {\n            ratio = zoomMode;\n        } else if (zoomMode === \"cover\") {\n            ratio = this.getZoomToCoverRatio(imageDimensions);\n        } else {\n            ratio = this.getZoomToFitRatio(imageDimensions);\n        }\n\n        // Get the dimensions of the scaled image\n        var scaledHeight = imageDimensions.height * ratio;\n        var scaledWidth = imageDimensions.width * ratio;\n\n        // Calculate the segments of the containing box for the image.\n        // When referring to top/bottom or right/left segments, these are on the\n        // right-side and bottom projection of the containing box for the zoomed out image.\n        var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n        var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n        var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n        var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n        // Calculate the offsets from editor box for the image-containing box\n        var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n        var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n        // Finally, calculate the image vertice coordinates\n        return {\n            a: {\n                x: horizontalOffset + rightHorizontalSegment,\n                y: verticalOffset\n            },\n            b: {\n                x: this.editorWidth - horizontalOffset,\n                y: verticalOffset + topVerticalSegment\n            },\n            c: {\n                x: horizontalOffset + leftHorizontalSegment,\n                y: this.editorHeight - verticalOffset\n            },\n            d: {\n                x: horizontalOffset,\n                y: verticalOffset + bottomVerticalSegment\n            }\n        };\n    },\n\n    /**\n     * Debug stuff by continuously rendering a fabric object on canvas.\n     *\n     * @param fabricObj\n     */\n    _debug: function(fabricObj) {\n        this.canvas.remove(this.debugger);\n        this.debugger = fabricObj;\n        this.canvas.add(this.debugger);\n    },\n\n    /**\n     * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n     * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n     * return true if the point is in the rectangle.\n     *\n     * Adapted from: http://stackoverflow.com/a/2763387/2040791\n     *\n     * @param points\n     * @param rectangle\n     */\n    arePointsInsideRectangle: function(points, rectangle) {\n        if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n            this.arePointsInsideRectangle._ = {};\n        }\n\n        // Pre-calculate the vectors and scalar products for two rectangle edges\n        this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n        this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n        this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n        this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n        for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n            this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n            // Calculate the vectors for two rectangle sides and for\n            // the vector from vertices a and b to the point P\n            this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n            this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n            // Calculate scalar or dot products for some vector combinations\n            this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n            this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n            this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n            this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n            if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    /**\n     * Returns an object representing the vector between points a and b.\n     *\n     * @param a\n     * @param b\n     */\n    _getVector: function(a, b) {\n        return {x: b.x - a.x, y: b.y - a.y};\n    },\n\n    /**\n     * Returns the scalar product of two vectors\n     *\n     * @param a\n     * @param b\n     */\n    _getScalarProduct: function(a, b) {\n        return a.x * b.x + a.y * b.y;\n    },\n\n    /**\n     * Returns the magnitude of a vector_redrawCropperElements\n     * .\n     *\n     * @param vector\n     */\n    _getVectorMagnitude: function(vector) {\n        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    },\n\n    /**\n     * Returns the angle between two vectors in degrees with two decimal points\n     *\n     * @param a\n     * @param b\n     */\n    _getAngleBetweenVectors: function(a, b) {\n        return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n    },\n\n    /**\n     * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n     *\n     * @param rectangle\n     * @param vertex\n     *\n     * @returns {*}\n     */\n    _getEdgeCrossed: function(rectangle, vertex) {\n        // Determine over which edge the vertex is\n        var edgePoints = [\n            [rectangle.a, rectangle.b],\n            [rectangle.b, rectangle.c],\n            [rectangle.c, rectangle.d],\n            [rectangle.d, rectangle.a]\n        ];\n\n        var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n        var smallestDiff = 180;\n        var edgeCrossed = null;\n\n        // Test each edge\n        for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n            var edge = edgePoints[edgeIndex];\n            var toCenter = this._getVector(edge[0], centerPoint);\n            var edgeVector = this._getVector(edge[0], edge[1]);\n            var toVertex = this._getVector(edge[0], vertex);\n\n            // If the angle between toCenter/toVertex is the sum of\n            // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n            // the edgeVector is between the other two meaning that this is the offending vertex.\n            // To avoid the rounding errors, we'll take the closest match\n            var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n            if (diff < smallestDiff) {\n                smallestDiff = diff;\n                edgeCrossed = edge;\n            }\n        }\n\n        return edgeCrossed;\n    },\n\n    /**\n     * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n     *\n     * @param dimensions\n     */\n    _getImageBoundingBox: function(dimensions) {\n        var box = {};\n\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        var proportion = dimensions.height / dimensions.width;\n        box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n        box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n        if (this.hasOrientationChanged()) {\n            var temp = box.width;\n            box.width = box.height;\n            box.height = temp;\n        }\n\n        return box;\n    }\n}, {\n    defaults: {\n        animationDuration: 100,\n        allowSavingAsNew: true,\n        onSave: $.noop,\n        allowDegreeFractions: null,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend({\n    $includeSubfoldersContainer: null,\n    $includeSubfoldersCheckbox: null,\n    showingIncludeSubfoldersCheckbox: false,\n\n    $uploadButton: null,\n    $uploadInput: null,\n    $progressBar: null,\n    $folders: null,\n\n    uploader: null,\n    promptHandler: null,\n    progressBar: null,\n\n    _uploadTotalFiles: 0,\n    _uploadFileProgress: {},\n    _uploadedAssetIds: [],\n    _currentUploaderSettings: {},\n\n    _assetDrag: null,\n    _folderDrag: null,\n    _expandDropTargetFolderTimeout: null,\n    _tempExpandedFolders: [],\n\n    _fileConflictTemplate: {\n        choices: [\n            {value: 'keepBoth', title: Craft.t('app', 'Keep both')}, {value: 'replace', title: Craft.t('app', 'Replace it')}\n        ]\n    },\n    _folderConflictTemplate: {\n        choices: [\n            {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')}, {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n        ]\n    },\n\n    init: function(elementType, $container, settings) {\n        this.base(elementType, $container, settings);\n\n        if (this.settings.context === 'index') {\n            if (!this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n        } else {\n            this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n            if (this.settings.modal) {\n                this.settings.modal.on('updateSizeAndPosition', this._positionProgressBar.bind(this));\n            }\n        }\n    },\n\n    initSources: function() {\n        if (this.settings.context === 'index' && !this._folderDrag) {\n            this._initIndexPageMode();\n        }\n\n        return this.base();\n    },\n\n    initSource: function($source) {\n        this.base($source);\n\n        this._createFolderContextMenu($source);\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                if ($source.data('folder-id')) {\n                    this._folderDrag.addItems($source.parent());\n                }\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    deinitSource: function($source) {\n        this.base($source);\n\n        // Does this source have a context menu?\n        var contextMenu = $source.data('contextmenu');\n\n        if (contextMenu) {\n            contextMenu.destroy();\n        }\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                this._folderDrag.removeItems($source.parent());\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    _getSourceLevel: function($source) {\n        return $source.parentsUntil('nav', 'ul').length;\n    },\n\n    /**\n     * Initialize the index page-specific features\n     */\n    _initIndexPageMode: function() {\n        if (this._folderDrag) {\n            return;\n        }\n\n        // Make the elements selectable\n        this.settings.selectable = true;\n        this.settings.multiSelect = true;\n\n        // Asset dragging\n        // ---------------------------------------------------------------------\n\n        this._assetDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n            filter: () => this.view.getSelectedElements().has('div.element[data-movable]'),\n            helper: $file => this._getFileDragHelper($file),\n            dropTargets: () => {\n                // Which data attribute should we be checking?\n                var attr;\n                if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                    attr = 'data-can-move-peer-files-to';\n                } else {\n                    attr = 'data-can-move-to';\n                }\n\n                var targets = [];\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder\n                    var $source = this.$sources.eq(i);\n                    if (Garnish.hasAttr($source, attr)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFileDragStop.bind(this),\n            helperBaseZindex: 800\n        });\n\n        // Folder dragging\n        // ---------------------------------------------------------------------\n\n        this._folderDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: () => {\n                // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                var $selected = this.sourceSelect.getSelectedItems(),\n                    draggees = [];\n\n                for (var i = 0; i < $selected.length; i++) {\n                    var $source = $selected.eq(i);\n\n                    if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                        continue;\n                    }\n\n                    if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                        draggees.push($source.parent()[0]);\n                    }\n                }\n\n                return $(draggees);\n            },\n\n            helper: $draggeeHelper => {\n                var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                    $helperNav = $('<nav/>').appendTo($helperSidebar),\n                    $helperUl = $('<ul/>').appendTo($helperNav);\n\n                $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                $draggeeHelper.children('a').addClass('sel');\n\n                // Match the style\n                $draggeeHelper.css({\n                    'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                    'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                    'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                    'padding-left': this._folderDrag.$draggee.css('padding-left')\n                });\n\n                return $helperSidebar;\n            },\n\n            dropTargets: () => {\n                var targets = [];\n\n                // Tag the dragged folder and it's subfolders\n                var draggedSourceIds = [];\n                this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                    draggedSourceIds.push($(this).data('key'));\n                });\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder and not one of the dragged folders\n                    var $source = this.$sources.eq(i),\n                        key = $source.data('key');\n\n                    if (!this._getFolderUidFromSourceKey(key)) {\n                        continue;\n                    }\n\n                    if (!Craft.inArray(key, draggedSourceIds)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFolderDragStop.bind(this),\n        });\n    },\n\n    /**\n     * On file drag stop\n     */\n    _onFileDragStop: function() {\n        if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n            // Keep it selected\n            var originatingSource = this.$source;\n\n            var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                originalAssetIds = [];\n\n            // For each file, prepare array data.\n            for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                originalAssetIds.push(originalAssetId);\n            }\n\n            // Are any files actually getting moved?\n            if (originalAssetIds.length) {\n                this.setIndexBusy();\n\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(originalAssetIds.length);\n                this.progressBar.showProgressBar();\n\n                // For each file to move a separate request\n                var parameterArray = [];\n                for (i = 0; i < originalAssetIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: {\n                            assetId: originalAssetIds[i],\n                            folderId: targetFolderId\n                        }\n                    });\n                }\n\n                // Define the callback for when all file moves are complete\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var response = responseArray[i];\n\n                        // Push prompt into prompt array\n                        if (response.conflict) {\n                            this.promptHandler.addPrompt({\n                                assetId: response.assetId,\n                                suggestedFilename: response.suggestedFilename,\n                                prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                            });\n                        }\n\n                        if (response.error) {\n                            alert(response.error);\n                        }\n                    }\n\n                    this.setIndexAvailable();\n                    this.progressBar.hideProgressBar();\n                    var reloadIndex = false;\n\n                    var performAfterMoveActions = function() {\n                        // Select original source\n                        this.sourceSelect.selectItem(originatingSource);\n\n                        // Make sure we use the correct offset when fetching the next page\n                        this._totalVisible -= this._assetDrag.$draggee.length;\n\n                        // And remove the elements that have been moved away\n                        for (var i = 0; i < originalAssetIds.length; i++) {\n                            $('[data-id=' + originalAssetIds[i] + ']').remove();\n                        }\n\n                        this.view.deselectAllElements();\n                        this._collapseExtraExpandedFolders(targetFolderId);\n\n                        if (reloadIndex) {\n                            this.updateElements();\n                        }\n                    };\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            var newParameterArray = [];\n\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    reloadIndex = true;\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'keepBoth') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            filename: returnData[i].suggestedFilename\n                                        }\n                                    });\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            force: true\n                                        }\n                                    });\n                                }\n                            }\n\n                            // Nothing to do, carry on\n                            if (newParameterArray.length === 0) {\n                                performAfterMoveActions.apply(this);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                // Move conflicting files again with resolutions now\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this._assetDrag.fadeOutHelpers();\n                        this.promptHandler.showBatchPrompts(promptCallback);\n                    } else {\n                        performAfterMoveActions.apply(this);\n                        this._assetDrag.fadeOutHelpers();\n                    }\n                };\n\n                // Initiate the file move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._assetDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * On folder drag stop\n     */\n    _onFolderDragStop: function() {\n        // Only move if we have a valid target and we're not trying to move into our direct parent\n        if (\n            this._folderDrag.$activeDropTarget &&\n            this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n        ) {\n            var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n            this._collapseExtraExpandedFolders(targetFolderId);\n\n            // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n            var folderIds = [];\n\n            for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                    folderId = $a.data('folder-id');\n\n                // Make sure it's not already in the target folder and use this single folder Id.\n                if (folderId != targetFolderId) {\n                    folderIds.push(folderId);\n                    break;\n                }\n            }\n\n            if (folderIds.length) {\n                folderIds.sort();\n                folderIds.reverse();\n\n                this.setIndexBusy();\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(folderIds.length);\n                this.progressBar.showProgressBar();\n\n                var parameterArray = [];\n\n                for (i = 0; i < folderIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-folder',\n                        params: {\n                            folderId: folderIds[i],\n                            parentId: targetFolderId\n                        }\n                    });\n                }\n\n                // Increment, so to avoid displaying folder files that are being moved\n                this.requestId++;\n\n                /*\n                 Here's the rundown:\n                 1) Send all the folders being moved\n                 2) Get results:\n                 a) For all conflicting, receive prompts and resolve them to get:\n                 b) For all valid move operations: by now server has created the needed folders\n                 in target destination. Server returns an array of file move operations\n                 c) server also returns a list of all the folder id changes\n                 d) and the data-id of node to be removed, in case of conflict\n                 e) and a list of folders to delete after the move\n                 3) From data in 2) build a large file move operation array\n                 4) Create a request loop based on this, so we can display progress bar\n                 5) when done, delete all the folders and perform other maintenance\n                 6) Champagne\n                 */\n\n                // This will hold the final list of files to move\n                var fileMoveList = [];\n\n                var newSourceKey = '';\n\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var data = responseArray[i];\n\n                        // If successful and have data, then update\n                        if (data.success) {\n                            if (data.transferList) {\n                                fileMoveList = data.transferList;\n                            }\n\n                            if (data.newFolderId) {\n                                newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                            }\n                        }\n\n                        // Push prompt into prompt array\n                        if (data.conflict) {\n                            data.prompt = {\n                                message: data.conflict,\n                                choices: this._folderConflictTemplate.choices\n                            };\n\n                            this.promptHandler.addPrompt(data);\n                        }\n\n                        if (data.error) {\n                            alert(data.error);\n                        }\n                    }\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            this.promptHandler.resetPrompts();\n\n                            var newParameterArray = [];\n\n                            var params = {};\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    params.force = true;\n                                }\n\n                                if (returnData[i].choice === 'merge') {\n                                    params.merge = true;\n                                }\n\n                                params.folderId = data.folderId;\n                                params.parentId = data.parentId;\n\n                                newParameterArray.push({\n                                    action: 'assets/move-folder',\n                                    params: params\n                                });\n                            }\n\n                            // Start working on them lists, baby\n                            if (newParameterArray.length === 0) {\n                                this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this.promptHandler.showBatchPrompts(promptCallback);\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                    } else {\n                        this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                    }\n                };\n\n                // Initiate the folder move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees until we get the Ajax response\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._folderDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * Really move the folder. Like really. For real.\n     */\n    _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n        this.progressBar.setItemCount(1);\n        this.progressBar.showProgressBar();\n\n        var moveCallback = folderDeleteList => {\n            // Delete the old folders\n            var counter = 0;\n            var limit = folderDeleteList.length;\n            for (var i = 0; i < folderDeleteList.length; i++) {\n                // When all folders are deleted, reload the sources.\n                Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, () => {\n                    if (++counter === limit) {\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        this._folderDrag.returnHelpersToDraggees();\n                        this.setInstanceState('selectedSource', newSourceKey);\n                        this.refreshSources();\n                    }\n                });\n            }\n        };\n\n        if (fileMoveList.length > 0) {\n            var parameterArray = [];\n\n            for (var i = 0; i < fileMoveList.length; i++) {\n                parameterArray.push({\n                    action: 'assets/move-asset',\n                    params: fileMoveList[i]\n                });\n            }\n            this._performBatchRequests(parameterArray, function() {\n                moveCallback(folderDeleteList);\n            });\n        } else {\n            moveCallback(folderDeleteList);\n        }\n    },\n\n    /**\n     * Returns the root level source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getRootSource: function($source) {\n        var $parent;\n        while (($parent = this._getParentSource($source)) && $parent.length) {\n            $source = $parent;\n        }\n        return $source;\n    },\n\n    /**\n     * Get parent source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getParentSource: function($source) {\n        if (this._getSourceLevel($source) > 1) {\n            return $source.parent().parent().siblings('a');\n        }\n    },\n\n    _selectSourceByFolderId: function(targetFolderId) {\n        var $targetSource = this._getSourceByKey(targetFolderId);\n\n        // Make sure that all the parent sources are expanded and this source is visible.\n        var $parentSources = $targetSource.parent().parents('li');\n\n        for (var i = 0; i < $parentSources.length; i++) {\n            var $parentSource = $($parentSources[i]);\n\n            if (!$parentSource.hasClass('expanded')) {\n                $parentSource.children('.toggle').trigger('click');\n            }\n        }\n\n        this.selectSource($targetSource);\n        this.updateElements();\n    },\n\n    /**\n     * Initialize the uploader.\n     *\n     * @private\n     */\n    afterInit: function() {\n        if (!this.$uploadButton) {\n            this.$uploadButton = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                'data-icon': 'upload',\n                style: 'position: relative; overflow: hidden;',\n                text: Craft.t('app', 'Upload files'),\n            });\n            this.addButton(this.$uploadButton);\n\n            this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n        }\n\n        this.promptHandler = new Craft.PromptHandler();\n        this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            fileInput: this.$uploadInput,\n            dropZone: this.$container\n        };\n\n        options.events = {\n            fileuploadstart: this._onUploadStart.bind(this),\n            fileuploadprogressall: this._onUploadProgress.bind(this),\n            fileuploaddone: this._onUploadComplete.bind(this),\n        };\n\n        if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        this._currentUploaderSettings = options;\n\n        this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n        this.$uploadButton.on('click', () => {\n            if (this.$uploadButton.hasClass('disabled')) {\n                return;\n            }\n            if (!this.isIndexBusy) {\n                this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n            }\n        });\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific volume in the URL?\n        if (this.settings.context === 'index' && typeof defaultVolumeHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n                if ($source.data('volume-handle') === defaultVolumeHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    onSelectSource: function() {\n        var $source = this._getSourceByKey(this.sourceKey);\n        var folderId = $source.data('folder-id');\n\n        if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n            this.uploader.setParams({\n                folderId: this.$source.attr('data-folder-id')\n            });\n            this.$uploadButton.removeClass('disabled');\n        } else {\n            this.$uploadButton.addClass('disabled');\n        }\n\n        // Update the URL if we're on the Assets index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'assets';\n            var $rootSource = this._getRootSource($source);\n            if ($rootSource && $rootSource.data('volume-handle')) {\n                uri += '/' + $rootSource.data('volume-handle');\n            }\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n\n        this.base();\n    },\n\n    _getFolderUidFromSourceKey: function(sourceKey) {\n        var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n        return m ? m[1] : null;\n    },\n\n    startSearching: function() {\n        // Does this source have subfolders?\n        if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n            if (this.$includeSubfoldersContainer === null) {\n                var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                    this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                    this.updateElements();\n                });\n            } else {\n                this.$includeSubfoldersContainer.velocity('stop');\n            }\n\n            var checked = this.getSelectedSourceState('includeSubfolders', false);\n            this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: 0,\n                opacity: 1\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = true;\n        }\n\n        this.base();\n    },\n\n    stopSearching: function() {\n        if (this.showingIncludeSubfoldersCheckbox) {\n            this.$includeSubfoldersContainer.velocity('stop');\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: -25,\n                opacity: 0\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = false;\n        }\n\n        this.base();\n    },\n\n    getViewParams: function() {\n        var data = this.base();\n\n        if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n            data.criteria.includeSubfolders = true;\n        }\n\n        return data;\n    },\n\n    /**\n     * React on upload submit.\n     *\n     * @private\n     */\n    _onUploadStart: function() {\n        this.setIndexBusy();\n\n        // Initial values\n        this._positionProgressBar();\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n\n        this.promptHandler.resetPrompts();\n    },\n\n    /**\n     * Update uploaded byte count.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On Upload Complete.\n     */\n    _onUploadComplete: function(event, data) {\n        var response = data.result;\n        var filename = data.files[0].name;\n\n        var doReload = true;\n\n        if (response.success || response.conflict) {\n            // Add the uploaded file to the selected ones, if appropriate\n            this._uploadedAssetIds.push(response.assetId);\n\n            // If there is a prompt, add it to the queue\n            if (response.conflict) {\n                response.prompt = {\n                    message: Craft.t('app', response.conflict, {file: response.filename}),\n                    choices: this._fileConflictTemplate.choices\n                };\n\n                this.promptHandler.addPrompt(response);\n            }\n\n            Craft.cp.runQueue();\n        } else {\n            if (response.error) {\n                alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n            } else {\n                alert(Craft.t('app', 'Upload failed for {filename}.', {filename}));\n            }\n\n            doReload = false;\n        }\n\n        // For the last file, display prompts, if any. If not - just update the element view.\n        if (this.uploader.isLastUpload()) {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n\n            if (this.promptHandler.getPromptCount()) {\n                this.promptHandler.showBatchPrompts(this._uploadFollowup.bind(this));\n            } else {\n                if (doReload) {\n                    this._updateAfterUpload();\n                }\n            }\n        }\n    },\n\n    /**\n     * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n     *\n     * @private\n     */\n    _updateAfterUpload: function() {\n        if (this.settings.context !== 'index') {\n            this.setSortAttribute('dateModified');\n            this.setSortDirection('desc');\n        }\n        this.updateElements();\n    },\n\n    /**\n     * Follow up to an upload that triggered at least one conflict resolution prompt.\n     *\n     * @param returnData\n     * @private\n     */\n    _uploadFollowup: function(returnData) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n\n        this.promptHandler.resetPrompts();\n\n        var finalCallback = () => {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n            this._updateAfterUpload();\n        };\n\n        this.progressBar.setItemCount(returnData.length);\n\n        var doFollowup = (parameterArray, parameterIndex, callback) => {\n            var postData = {};\n            var action = null;\n\n            var followupCallback = (data, textStatus) => {\n                if (textStatus === 'success' && data.assetId) {\n                    this._uploadedAssetIds.push(data.assetId);\n                } else if (data.error) {\n                    alert(data.error);\n                }\n                parameterIndex++;\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (parameterIndex === parameterArray.length) {\n                    callback();\n                } else {\n                    doFollowup(parameterArray, parameterIndex, callback);\n                }\n            };\n\n            if (parameterArray[parameterIndex].choice === 'replace') {\n                action = 'assets/replace-file';\n                postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                if (parameterArray[parameterIndex].conflictingAssetId) {\n                    postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                } else {\n                    postData.targetFilename = parameterArray[parameterIndex].filename;\n                }\n            } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                action = 'assets/delete-asset';\n                postData.assetId = parameterArray[parameterIndex].assetId;\n            }\n\n            if (!action) {\n                // We don't really need to do another request, so let's pretend that already happened\n                followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n            } else {\n                Craft.postActionRequest(action, postData, followupCallback);\n            }\n        };\n\n        this.progressBar.showProgressBar();\n        doFollowup(returnData, 0, finalCallback);\n    },\n\n    /**\n     * Perform actions after updating elements\n     * @private\n     */\n    onUpdateElements: function() {\n        this._onUpdateElements(false, this.view.getAllElements());\n        this.view.on('appendElements', ev => {\n            this._onUpdateElements(true, ev.newElements);\n        });\n\n        this.base();\n    },\n\n    /**\n     * Do the after-update initializations\n     * @private\n     */\n    _onUpdateElements: function(append, $newElements) {\n        if (this.settings.context === 'index') {\n            if (!append) {\n                this._assetDrag.removeAllItems();\n            }\n\n            this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n        }\n\n        // See if we have freshly uploaded files to add to selection\n        if (this._uploadedAssetIds.length) {\n            if (this.view.settings.selectable) {\n                for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                    this.view.selectElementById(this._uploadedAssetIds[i]);\n                }\n            }\n\n            // Reset the list.\n            this._uploadedAssetIds = [];\n        }\n\n        this.base(append, $newElements);\n\n        this.removeListener(this.$elements, 'keydown');\n        this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n        this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item).find('.element');\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    _onDragStart: function() {\n        this._tempExpandedFolders = [];\n    },\n\n    /**\n     * Get File Drag Helper\n     */\n    _getFileDragHelper: function($element) {\n        var currentView = this.getSelectedSourceState('mode');\n        var $outerContainer;\n        var $innerContainer;\n\n        switch (currentView) {\n            case 'table': {\n                $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                var $tbody = $('<tbody/>').appendTo($table);\n\n                $element.appendTo($tbody);\n\n                // Copy the column widths\n                this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                var $helperCells = $element.children();\n\n                for (var i = 0; i < $helperCells.length; i++) {\n                    // Hard-set the cell widths\n                    var $helperCell = $($helperCells[i]);\n\n                    // Skip the checkbox cell\n                    if ($helperCell.hasClass('checkbox-cell')) {\n                        $helperCell.remove();\n                        $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                        continue;\n                    }\n\n                    var $firstRowCell = $(this._$firstRowCells[i]),\n                        width = $firstRowCell.width();\n\n                    $firstRowCell.width(width);\n                    $helperCell.width(width);\n                }\n\n                return $outerContainer;\n            }\n            case 'thumbs': {\n                $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                $element.appendTo($innerContainer);\n\n                return $outerContainer;\n            }\n        }\n\n        return $();\n    },\n\n    /**\n     * On Drop Target Change\n     */\n    _onDropTargetChange: function($dropTarget) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        if ($dropTarget) {\n            var folderId = $dropTarget.data('folder-id');\n\n            if (folderId) {\n                this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                    this._expandDropTargetFolderTimeout = setTimeout(this._expandFolder.bind(this), 500);\n                }\n            } else {\n                this.dropTargetFolder = null;\n            }\n        }\n\n        if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n            // Temporarily remove the .sel class on the active source\n            this.$source.removeClass('sel');\n        } else {\n            this.$source.addClass('sel');\n        }\n    },\n\n    /**\n     * Collapse Extra Expanded Folders\n     */\n    _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        // If a source ID is passed in, exclude its parents\n        var $excludedSources;\n\n        if (dropTargetFolderId) {\n            $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n        }\n\n        for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n            var $source = this._tempExpandedFolders[i];\n\n            // Check the parent list, if a source id is passed in\n            if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                this._collapseFolder($source);\n                this._tempExpandedFolders.splice(i, 1);\n            }\n        }\n    },\n\n    _getSourceByKey: function(key) {\n        return this.$sources.filter('[data-key$=\"' + key + '\"]');\n    },\n\n    _hasSubfolders: function($source) {\n        return $source.siblings('ul').find('li').length;\n    },\n\n    _isExpanded: function($source) {\n        return $source.parent('li').hasClass('expanded');\n    },\n\n    _expandFolder: function() {\n        // Collapse any temp-expanded drop targets that aren't parents of this one\n        this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n        this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n        // Keep a record of that\n        this._tempExpandedFolders.push(this.dropTargetFolder);\n    },\n\n    _collapseFolder: function($source) {\n        if ($source.parent().hasClass('expanded')) {\n            $source.siblings('.toggle').trigger('click');\n        }\n    },\n\n    _createFolderContextMenu: function($source) {\n        // Make sure it's a volume folder\n        if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n            return;\n        }\n\n        var menuOptions = [\n            {\n                label: Craft.t('app', 'New subfolder'),\n                onClick: () => {\n                    this._createSubfolder($source);\n                },\n            },\n        ];\n\n        // For all folders that are not top folders\n        if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n            menuOptions.push({\n                label: Craft.t('app', 'Rename folder'),\n                onClick: () => {\n                    this._renameFolder($source);\n                },\n            });\n            menuOptions.push({\n                label: Craft.t('app', 'Delete folder'),\n                onClick: () => {\n                    this._deleteFolder($source);\n                },\n            });\n        }\n\n        new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n    },\n\n    _createSubfolder: function($parentFolder) {\n        var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n        if (subfolderName) {\n            var params = {\n                parentId: $parentFolder.data('folder-id'),\n                folderName: subfolderName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/create-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    this._prepareParentForChildren($parentFolder);\n\n                    var $subfolder = $(\n                        '<li>' +\n                        '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                        ' data-folder-id=\"' + data.folderId + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                        '>' +\n                        data.folderName +\n                        '</a>' +\n                        '</li>'\n                    );\n\n                    var $a = $subfolder.children('a:first');\n                    this._appendSubfolder($parentFolder, $subfolder);\n                    this.initSource($a);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    _deleteFolder: function($targetFolder) {\n        if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n            var params = {\n                folderId: $targetFolder.data('folder-id')\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/delete-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    var $parentFolder = this._getParentSource($targetFolder);\n\n                    // Remove folder and any trace from its parent, if needed\n                    this.deinitSource($targetFolder);\n\n                    $targetFolder.parent().remove();\n                    this._cleanUpTree($parentFolder);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    /**\n     * Rename\n     */\n    _renameFolder: function($targetFolder) {\n        var oldName = $.trim($targetFolder.text()),\n            newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n        if (newName && newName !== oldName) {\n            var params = {\n                folderId: $targetFolder.data('folder-id'),\n                newName: newName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/rename-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    $targetFolder.text(data.newName);\n\n                    // If the current folder was renamed.\n                    if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                        this.updateElements();\n                    }\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, 'json');\n        }\n    },\n\n    /**\n     * Prepare a source folder for children folder.\n     *\n     * @param $parentFolder\n     * @private\n     */\n    _prepareParentForChildren: function($parentFolder) {\n        if (!this._hasSubfolders($parentFolder)) {\n            $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n            this.initSourceToggle($parentFolder);\n        }\n    },\n\n    /**\n     * Appends a subfolder to the parent folder at the correct spot.\n     *\n     * @param $parentFolder\n     * @param $subfolder\n     * @private\n     */\n    _appendSubfolder: function($parentFolder, $subfolder) {\n        var $subfolderList = $parentFolder.siblings('ul'),\n            $existingChildren = $subfolderList.children('li'),\n            subfolderLabel = $.trim($subfolder.children('a:first').text()),\n            folderInserted = false;\n\n        for (var i = 0; i < $existingChildren.length; i++) {\n            var $existingChild = $($existingChildren[i]);\n\n            if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                $existingChild.before($subfolder);\n                folderInserted = true;\n                break;\n            }\n        }\n\n        if (!folderInserted) {\n            $parentFolder.siblings('ul').append($subfolder);\n        }\n    },\n\n    _cleanUpTree: function($parentFolder) {\n        if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n            this.deinitSourceToggle($parentFolder);\n            $parentFolder.siblings('ul').remove();\n            $parentFolder.siblings('.toggle').remove();\n            $parentFolder.parent().removeClass('expanded');\n        }\n    },\n\n    _positionProgressBar: function() {\n        if (!this.progressBar) {\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n        }\n\n        var $container = $(),\n            scrollTop = 0,\n            offset = 0;\n\n        if (this.settings.context === 'index') {\n            $container = this.progressBar.$progressBar.closest('#content');\n            scrollTop = Garnish.$win.scrollTop();\n        } else {\n            $container = this.progressBar.$progressBar.closest('.main');\n            scrollTop = this.$main.scrollTop();\n        }\n\n        var containerTop = $container.offset().top;\n        var diff = scrollTop - containerTop;\n        var windowHeight = Garnish.$win.height();\n\n        if ($container.height() > windowHeight) {\n            offset = (windowHeight / 2) - 6 + diff;\n        } else {\n            offset = ($container.height() / 2) - 6;\n        }\n\n        if (this.settings.context !== 'index') {\n            offset = scrollTop + (($container.height() / 2) - 6);\n        }\n\n        this.progressBar.$progressBar.css({\n            top: offset\n        });\n    },\n\n    _performBatchRequests: function(parameterArray, finalCallback) {\n        var responseArray = [];\n\n        var doRequest = parameters => {\n            Craft.postActionRequest(parameters.action, parameters.params, (data, textStatus) => {\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (textStatus === 'success') {\n                    responseArray.push(data);\n\n                    // If assets were just merged we should get the reference tags updated right away\n                    Craft.cp.runQueue();\n                }\n\n                if (responseArray.length >= parameterArray.length) {\n                    finalCallback(responseArray);\n                }\n            });\n        };\n\n        for (var i = 0; i < parameterArray.length; i++) {\n            doRequest(parameterArray[i]);\n        }\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend({\n    requestId: 0,\n    hud: null,\n    $uploadBtn: null,\n    uploader: null,\n    progressBar: null,\n\n    originalFilename: '',\n    originalExtension: '',\n\n    init: function() {\n        if (arguments.length > 0 && typeof arguments[0] === 'object') {\n            arguments[0].editorSettings = {\n                onShowHud: this.resetOriginalFilename.bind(this),\n                onCreateForm: this._renameHelper.bind(this),\n                validators: [\n                    this.validateElementForm.bind(this),\n                ],\n            };\n        }\n\n        this.base.apply(this, arguments);\n\n        if (this.settings.canUpload) {\n            this._attachUploader();\n        }\n\n        this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n        this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.elementSelect.$focusedItem;\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item);\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n    },\n\n    /**\n     * Create the element editor\n     */\n    createElementEditor: function($element) {\n        return this.base($element, {\n            params: {\n                defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n            },\n            input: this\n        });\n    },\n\n    /**\n     * Attach the uploader with drag event handler\n     */\n    _attachUploader: function() {\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            dropZone: this.$container,\n            formData: {\n                fieldId: this.settings.fieldId,\n            }\n        };\n\n        if (this.settings.sourceElementId) {\n            options.formData.elementId = this.settings.sourceElementId;\n        }\n\n        if (this.settings.criteria.siteId) {\n            options.formData.siteId = this.settings.criteria.siteId;\n        }\n\n        if (this.$addElementBtn) {\n            this.$uploadBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn dashed',\n                'data-icon': 'upload',\n                text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n            }).insertAfter(this.$addElementBtn);\n            options.fileInput = $('<input/>', {\n                type: 'file',\n                class: 'hidden',\n                multiple: this.settings.limit != 1,\n            }).insertAfter(this.$uploadBtn);\n\n            // Trigger a window resize in case the field is inside an element editor HUD\n            Garnish.$win.trigger('resize');\n        }\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        if (typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        options.canAddMoreFiles = this.canAddMoreFiles.bind(this);\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        if (this.$uploadBtn) {\n            this.$uploadBtn.on('click', ev => {\n                // We can't store a reference to the file input, because it gets replaced with a new input\n                // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                this.$uploadBtn.next('input[type=file]').trigger('click');\n            });\n        }\n    },\n\n    refreshThumbnail: function(elementId) {\n        var parameters = {\n            elementId: elementId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, data => {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                this.thumbLoader.load($existing);\n            }\n        });\n    },\n\n    /**\n     * Add the freshly uploaded file to the input field.\n     */\n    selectUploadedFile: function(element) {\n        // Check if we're able to add new elements\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        var $newElement = element.$element;\n\n        // Make a couple tweaks\n        $newElement.addClass('removable');\n        $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        $newElement.appendTo(this.$elementsContainer);\n\n        var margin = -($newElement.outerWidth() + 10);\n\n        this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addElementBtn.velocity(animateCss, 'fast');\n\n        this.addElements($newElement);\n\n        delete this.modal;\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function() {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var parameters = {\n                elementId: data.result.assetId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, data => {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var html = $(data.html);\n                    Craft.appendHeadHtml(data.headHtml);\n                    this.selectUploadedFile(Craft.getElementInfo(html));\n                }\n\n                // Last file\n                if (this.uploader.isLastUpload()) {\n                    this.progressBar.hideProgressBar();\n                    this.$container.removeClass('uploading');\n\n                    if (window.draftEditor) {\n                        window.draftEditor.checkForm();\n                    }\n                }\n            });\n\n            Craft.cp.runQueue();\n        }\n    },\n\n    /**\n     * We have to take into account files about to be added as well\n     */\n    canAddMoreFiles: function(slotsTaken) {\n        return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n    },\n\n    /**\n     * Parse the passed filename into the base filename and extension.\n     *\n     * @param filename\n     * @returns {{extension: string, baseFileName: string}}\n     */\n    _parseFilename: function(filename) {\n        var parts = filename.split('.'),\n            extension = '';\n\n        if (parts.length > 1) {\n            extension = parts.pop();\n        }\n        var baseFileName = parts.join('.');\n        return {extension: extension, baseFileName: baseFileName};\n    },\n\n    /**\n     * A helper function or the filename field.\n     * @private\n     */\n    _renameHelper: function($form) {\n        $('.renameHelper', $form).on('focus', e => {\n            var input = e.currentTarget,\n                filename = this._parseFilename(input.value);\n\n            if (this.originalFilename === '' && this.originalExtension === '') {\n                this.originalFilename = filename.baseFileName;\n                this.originalExtension = filename.extension;\n            }\n\n            var startPos = 0,\n                endPos = filename.baseFileName.length;\n\n            if (typeof input.selectionStart !== 'undefined') {\n                input.selectionStart = startPos;\n                input.selectionEnd = endPos;\n            } else if (document.selection && document.selection.createRange) {\n                // IE branch\n                input.select();\n                var range = document.selection.createRange();\n                range.collapse(true);\n                range.moveEnd(\"character\", endPos);\n                range.moveStart(\"character\", startPos);\n                range.select();\n            }\n        });\n    },\n\n    resetOriginalFilename: function() {\n        this.originalFilename = \"\";\n        this.originalExtension = \"\";\n    },\n\n    validateElementForm: function() {\n        var $filenameField = $('.renameHelper', this.elementEditor.hud.$hud.data('elementEditor').$form);\n        var filename = this._parseFilename($filenameField.val());\n\n        if (filename.extension !== this.originalExtension) {\n            // Blank extension\n            if (filename.extension === '') {\n                // If filename changed as well, assume removal of extension a mistake\n                if (this.originalFilename !== filename.baseFileName) {\n                    $filenameField.val(filename.baseFileName + '.' + this.originalExtension);\n                    return true;\n                } else {\n                    // If filename hasn't changed, make sure they want to remove extension\n                    return confirm(Craft.t('app', \"Are you sure you want to remove the extension “.{ext}”?\", {ext: this.originalExtension}));\n                }\n            } else {\n                // If the extension has changed, make sure it s intentional\n                return confirm(Craft.t('app', \"Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?\",\n                    {\n                        oldExt: this.originalExtension,\n                        newExt: filename.extension\n                    }));\n            }\n        }\n        return true;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend({\n    $selectTransformBtn: null,\n    _selectedTransform: null,\n\n    init: function(elementType, settings) {\n        settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n        this.base(elementType, settings);\n\n        if (settings.transforms.length) {\n            this.createSelectTransformButton(settings.transforms);\n        }\n    },\n\n    createSelectTransformButton: function(transforms) {\n        if (!transforms || !transforms.length) {\n            return;\n        }\n\n        var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n        this.$selectBtn.appendTo($btnGroup);\n\n        this.$selectTransformBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn disabled',\n            text: Craft.t('app', 'Select transform'),\n        }).appendTo($btnGroup);\n\n        var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n            $menuList = $('<ul></ul>').appendTo($menu);\n\n        for (var i = 0; i < transforms.length; i++) {\n            $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n        }\n\n        var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n            onOptionSelect: this.onSelectTransform.bind(this),\n        });\n        MenuButton.disable();\n\n        this.$selectTransformBtn.data('menuButton', MenuButton);\n    },\n\n    onSelectionChange: function(ev) {\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            allowTransforms = false;\n\n        if ($selectedElements.length && this.settings.transforms.length) {\n            allowTransforms = true;\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                    break;\n                }\n            }\n        }\n\n        var MenuBtn = null;\n\n        if (this.$selectTransformBtn) {\n            MenuBtn = this.$selectTransformBtn.data('menuButton');\n        }\n\n        if (allowTransforms) {\n            if (MenuBtn) {\n                MenuBtn.enable();\n            }\n\n            this.$selectTransformBtn.removeClass('disabled');\n        } else if (this.$selectTransformBtn) {\n            if (MenuBtn) {\n                MenuBtn.disable();\n            }\n\n            this.$selectTransformBtn.addClass('disabled');\n        }\n\n        this.base();\n    },\n\n    onSelectTransform: function(option) {\n        var transform = $(option).data('transform');\n        this.selectImagesWithTransform(transform);\n    },\n\n    selectImagesWithTransform: function(transform) {\n        // First we must get any missing transform URLs\n        if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n            Craft.AssetSelectorModal.transformUrls[transform] = {};\n        }\n\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            imageIdsWithMissingUrls = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $item = $($selectedElements[i]),\n                elementId = Craft.getElementInfo($item).id;\n\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                imageIdsWithMissingUrls.push(elementId);\n            }\n        }\n\n        if (imageIdsWithMissingUrls.length) {\n            this.showFooterSpinner();\n\n            this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, () => {\n                this.hideFooterSpinner();\n                this.selectImagesWithTransform(transform);\n            });\n        } else {\n            this._selectedTransform = transform;\n            this.selectElements();\n            this._selectedTransform = null;\n        }\n    },\n\n    fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n        var elementId = imageIdsWithMissingUrls.pop();\n\n        var data = {\n            assetId: elementId,\n            handle: transform\n        };\n\n        Craft.postActionRequest('assets/generate-transform', data, (response, textStatus) => {\n            Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n            if (textStatus === 'success') {\n                if (response.url) {\n                    Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                }\n            }\n\n            // More to load?\n            if (imageIdsWithMissingUrls.length) {\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n            } else {\n                callback();\n            }\n        });\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = this.base($selectedElements);\n\n        if (this._selectedTransform) {\n            for (var i = 0; i < info.length; i++) {\n                var elementId = info[i].id;\n\n                if (\n                    typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                    Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                ) {\n                    info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                }\n            }\n        }\n\n        return info;\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo, this._selectedTransform);\n    }\n}, {\n    defaults: {\n        canSelectImageTransforms: false,\n        transforms: []\n    },\n\n    transformUrls: {}\n});\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend({\n    remainingSessionTime: null,\n    checkRemainingSessionTimer: null,\n    showLoginModalTimer: null,\n    decrementLogoutWarningInterval: null,\n\n    showingLogoutWarningModal: false,\n    showingLoginModal: false,\n\n    logoutWarningModal: null,\n    loginModal: null,\n\n    $logoutWarningPara: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $loginBtn: null,\n    $loginErrorPara: null,\n\n    submitLoginIfLoggedOut: false,\n\n    /**\n     * Init\n     */\n    init: function() {\n        this.updateRemainingSessionTime(Craft.remainingSessionTime);\n    },\n\n    /**\n     * Sets a timer for the next time to check the auth timeout.\n     */\n    setCheckRemainingSessionTimer: function(seconds) {\n        if (this.checkRemainingSessionTimer) {\n            clearTimeout(this.checkRemainingSessionTimer);\n        }\n\n        this.checkRemainingSessionTimer = setTimeout(this.checkRemainingSessionTime.bind(this), seconds * 1000);\n    },\n\n    /**\n     * Pings the server to see how many seconds are left on the current user session, and handles the response.\n     */\n    checkRemainingSessionTime: function(extendSession) {\n        $.ajax({\n            url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n            type: 'GET',\n            dataType: 'json',\n            complete: (jqXHR, textStatus) => {\n                if (textStatus === 'success') {\n                    if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                        Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                    }\n\n                    this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                    this.submitLoginIfLoggedOut = false;\n                } else {\n                    this.updateRemainingSessionTime(-1);\n                }\n            },\n        });\n    },\n\n    /**\n     * Updates our record of the auth timeout, and handles it.\n     */\n    updateRemainingSessionTime: function(remainingSessionTime) {\n        this.remainingSessionTime = parseInt(remainingSessionTime);\n\n        // Are we within the warning window?\n        if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n            // Is there still time to renew the session?\n            if (this.remainingSessionTime) {\n                if (!this.showingLogoutWarningModal) {\n                    // Show the warning modal\n                    this.showLogoutWarningModal();\n                }\n\n                // Will the session expire before the next checkup?\n                if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                    if (this.showLoginModalTimer) {\n                        clearTimeout(this.showLoginModalTimer);\n                    }\n\n                    this.showLoginModalTimer = setTimeout(this.showLoginModal.bind(this), this.remainingSessionTime * 1000);\n                }\n            } else {\n                if (this.showingLoginModal) {\n                    if (this.submitLoginIfLoggedOut) {\n                        this.submitLogin();\n                    }\n                } else {\n                    // Show the login modal\n                    this.showLoginModal();\n                }\n            }\n\n            this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n        } else {\n            // Everything's good!\n            this.hideLogoutWarningModal();\n            this.hideLoginModal();\n\n            // Will be be within the minSafeSessionTime before the next update?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n            } else {\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the logout warning modal.\n     */\n    showLogoutWarningModal: function() {\n        var quickShow;\n\n        if (this.showingLoginModal) {\n            this.hideLoginModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLogoutWarningModal = true;\n\n        if (!this.logoutWarningModal) {\n            let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n            let $body = $('<div class=\"body\"/>').appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $logoutBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Log out now'),\n            }).appendTo($buttons);\n            let $renewSessionBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Keep me logged in'),\n            }).appendTo($buttons);\n\n            this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n            this.logoutWarningModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                onFadeIn: function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the renew button\n                        setTimeout(function() {\n                            $renewSessionBtn.trigger('focus');\n                        }, 100);\n                    }\n                }\n            });\n\n            this.addListener($logoutBtn, 'activate', 'logout');\n            this.addListener($form, 'submit', 'renewSession');\n        }\n\n        if (quickShow) {\n            this.logoutWarningModal.quickShow();\n        } else {\n            this.logoutWarningModal.show();\n        }\n\n        this.updateLogoutWarningMessage();\n\n        this.decrementLogoutWarningInterval = setInterval(this.decrementLogoutWarning.bind(this), 1000);\n    },\n\n    /**\n     * Updates the logout warning message indicating that the session is about to expire.\n     */\n    updateLogoutWarningMessage: function() {\n        this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n            time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n        }));\n\n        this.logoutWarningModal.updateSizeAndPosition();\n    },\n\n    decrementLogoutWarning: function() {\n        if (this.remainingSessionTime > 0) {\n            this.remainingSessionTime--;\n            this.updateLogoutWarningMessage();\n        }\n\n        if (this.remainingSessionTime === 0) {\n            clearInterval(this.decrementLogoutWarningInterval);\n        }\n    },\n\n    /**\n     * Hides the logout warning modal.\n     */\n    hideLogoutWarningModal: function(quick) {\n        this.showingLogoutWarningModal = false;\n\n        if (this.logoutWarningModal) {\n            if (quick) {\n                this.logoutWarningModal.quickHide();\n            } else {\n                this.logoutWarningModal.hide();\n            }\n\n            if (this.decrementLogoutWarningInterval) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the login modal.\n     */\n    showLoginModal: function() {\n        var quickShow;\n\n        if (this.showingLogoutWarningModal) {\n            this.hideLogoutWarningModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLoginModal = true;\n\n        if (!this.loginModal) {\n            var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$loginBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Login'),\n            }).appendTo($buttonContainer);\n            this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.loginModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark loginmodalshade',\n                onFadeIn: () => {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the password input\n                        setTimeout(() => {\n                            this.$passwordInput.trigger('focus');\n                        }, 100);\n                    }\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($form, 'submit', 'login');\n        }\n\n        if (quickShow) {\n            this.loginModal.quickShow();\n        } else {\n            this.loginModal.show();\n        }\n    },\n\n    /**\n     * Hides the login modal.\n     */\n    hideLoginModal: function(quick) {\n        this.showingLoginModal = false;\n\n        if (this.loginModal) {\n            if (quick) {\n                this.loginModal.quickHide();\n            } else {\n                this.loginModal.hide();\n            }\n        }\n    },\n\n    logout: function() {\n        $.get({\n            url: Craft.getActionUrl('users/logout'),\n            dataType: 'json',\n            success: () => {\n                Craft.redirectTo('');\n            },\n        });\n    },\n\n    renewSession: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        this.hideLogoutWarningModal();\n        this.checkRemainingSessionTime(true);\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$loginBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$loginBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    login: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.validatePassword()) {\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            if (typeof Craft.csrfTokenValue !== 'undefined') {\n                // Check the auth status one last time before sending this off,\n                // in case the user has already logged back in from another window/tab\n                this.submitLoginIfLoggedOut = true;\n                this.checkRemainingSessionTime();\n            } else {\n                this.submitLogin();\n            }\n        }\n    },\n\n    submitLogin: function() {\n        var data = {\n            loginName: Craft.username,\n            password: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/login', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.hideLoginModal();\n                    this.checkRemainingSessionTime();\n                } else {\n                    this.showLoginError(response.error);\n                    Garnish.shake(this.loginModal.$container);\n\n                    if (!Garnish.isMobileBrowser(true)) {\n                        this.$passwordInput.trigger('focus');\n                    }\n                }\n            } else {\n                this.showLoginError();\n            }\n        });\n    },\n\n    showLoginError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$loginErrorPara.text(error);\n        this.loginModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showLoginError('');\n    }\n}, {\n    checkInterval: 60,\n    minSafeSessionTime: 120\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend({\n    authManager: null,\n\n    $nav: null,\n    $mainContainer: null,\n    $alerts: null,\n    $crumbs: null,\n    $notificationContainer: null,\n    $main: null,\n    $primaryForm: null,\n    $headerContainer: null,\n    $header: null,\n    $mainContent: null,\n    $details: null,\n    $tabsContainer: null,\n    $tabsList: null,\n    $tabs: null,\n    $overflowTabBtn: null,\n    $overflowTabList: null,\n    $selectedTab: null,\n    selectedTabIndex: null,\n    $focusableTab: null,\n    $sidebarContainer: null,\n    $sidebar: null,\n    $contentContainer: null,\n    $edition: null,\n\n    $confirmUnloadForms: null,\n    $deltaForms: null,\n    $collapsibleTables: null,\n\n    fixedHeader: false,\n\n    enableQueue: true,\n    totalJobs: 0,\n    jobInfo: null,\n    displayedJobInfo: null,\n    displayedJobInfoUnchanged: 1,\n    trackJobProgressTimeout: null,\n    jobProgressIcon: null,\n\n    checkingForUpdates: false,\n    forcingRefreshOnUpdatesCheck: false,\n    includingDetailsOnUpdatesCheck: false,\n    checkForUpdatesCallbacks: null,\n\n    init: function() {\n        // Is this session going to expire?\n        if (Craft.remainingSessionTime !== 0) {\n            this.authManager = new Craft.AuthManager();\n        }\n\n        // Find all the key elements\n        this.$nav = $('#nav');\n        this.$mainContainer = $('#main-container');\n        this.$alerts = $('#alerts');\n        this.$crumbs = $('#crumbs');\n        this.$notificationContainer = $('#notifications');\n        this.$main = $('#main');\n        this.$primaryForm = $('#main-form');\n        this.$headerContainer = $('#header-container');\n        this.$header = $('#header');\n        this.$mainContent = $('#main-content');\n        this.$details = $('#details');\n        this.$sidebarContainer = $('#sidebar-container');\n        this.$sidebar = $('#sidebar');\n        this.$contentContainer = $('#content-container');\n        this.$collapsibleTables = $('table.collapsible');\n\n        this.updateSidebarMenuLabel();\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        if (this.$header.length) {\n            this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n            this.updateFixedHeader();\n        }\n\n        Garnish.$doc.ready(() => {\n            // Update responsive tables on window resize\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n            this.handleWindowResize();\n\n            // Fade the notification out two seconds after page load\n            var $errorNotifications = this.$notificationContainer.children('.error'),\n                $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n            $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n            $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n            // Wait a frame before initializing any confirm-unload forms,\n            // so other JS that runs on ready() has a chance to initialize\n            Garnish.requestAnimationFrame(this.initSpecialForms.bind(this));\n        });\n\n        // Alerts\n        if (this.$alerts.length) {\n            this.initAlerts();\n        }\n\n        // Toggles\n        this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n        this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n        // Does this page have a primary form?\n        if (!this.$primaryForm.length) {\n            this.$primaryForm = $('form[data-saveshortcut]:first');\n        }\n\n        // Does the primary form support the save shortcut?\n        if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n            let shortcuts = [];\n            let actions = this.$primaryForm.data('actions');\n            if (typeof actions === 'undefined') {\n                shortcuts.push([\n                    {\n                        keyCode: Garnish.S_KEY,\n                        ctrl: true,\n                    }, {\n                        redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                        retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                    }\n                ]);\n            } else {\n                for (let i = 0; i < actions.length; i++) {\n                    let action = actions[i];\n                    if (!action.shortcut) {\n                        continue;\n                    }\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                            shift: !!action.shift,\n                        }, {\n                            action: action.action,\n                            redirect: action.redirect,\n                            confirm: action.confirm,\n                            params: action.params,\n                            data: action.data,\n                            retainScroll: action.retainScroll,\n                        }\n                    ]);\n                }\n            }\n            for (let i = 0; i < shortcuts.length; i++) {\n                Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                    this.submitPrimaryForm(shortcuts[i][1]);\n                });\n            }\n        }\n\n        this.initTabs();\n\n        // Should we match the previous scroll position?\n        let scrollY = Craft.getLocalStorage('scrollY');\n        if (typeof scrollY !== 'undefined') {\n            Craft.removeLocalStorage('scrollY');\n            Garnish.$doc.ready(() => {\n                Garnish.requestAnimationFrame(() => {\n                    window.scrollTo(0, scrollY);\n                });\n            });\n        }\n\n        if ($.isTouchCapable()) {\n            this.$mainContainer.on('focus', 'input, textarea, .focusable-input', this._handleInputFocus.bind(this));\n            this.$mainContainer.on('blur', 'input, textarea, .focusable-input', this._handleInputBlur.bind(this));\n        }\n    },\n\n    initSpecialForms: function() {\n        // Look for forms that we should watch for changes on\n        this.$confirmUnloadForms = $('form[data-confirm-unload]');\n        this.$deltaForms = $('form[data-delta]');\n\n        if (!this.$confirmUnloadForms.length) {\n            return;\n        }\n\n        var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n        var $form, serialized;\n\n        for (var i = 0; i < $forms.length; i++) {\n            $form = $forms.eq(i);\n            if (!$form.data('initialSerializedValue')) {\n                if (typeof $form.data('serializer') === 'function') {\n                    serialized = $form.data('serializer')();\n                } else {\n                    serialized = $form.serialize();\n                }\n                $form.data('initialSerializedValue', serialized);\n            }\n            this.addListener($form, 'submit', function(ev) {\n                if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                    this.removeListener(Garnish.$win, 'beforeunload');\n                }\n                if (Garnish.hasAttr($form, 'data-delta')) {\n                    ev.preventDefault();\n                    var serialized;\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                    Craft.createForm(data)\n                        .appendTo(Garnish.$bod)\n                        .submit();\n                }\n            });\n        }\n\n        this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n            var confirmUnload = false;\n            var $form, serialized;\n            if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                confirmUnload = true;\n            } else {\n                for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                    $form = this.$confirmUnloadForms.eq(i);\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    if ($form.data('initialSerializedValue') !== serialized) {\n                        confirmUnload = true;\n                        break;\n                    }\n                }\n            }\n\n            if (confirmUnload) {\n                var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                if (ev) {\n                    ev.originalEvent.returnValue = message;\n                } else {\n                    window.event.returnValue = message;\n                }\n\n                return message;\n            }\n        });\n    },\n\n    _handleInputFocus: function() {\n        this.updateFixedHeader();\n    },\n\n    _handleInputBlur: function() {\n        this.updateFixedHeader();\n    },\n\n    /**\n     * Submits a form.\n     * @param {Object} [options]\n     * @param {string} [options.action] The `action` param value override\n     * @param {string} [options.redirect] The `redirect` param value override\n     * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n     * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n     * @param {Object} [options.data] Additional data to be passed to the submit event\n     * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n     */\n    submitPrimaryForm: function(options) {\n        // Give other stuff on the page a chance to prepare\n        this.trigger('beforeSaveShortcut');\n\n        if (typeof options !== 'object' || !$.isPlainObject(options)) {\n            options = {};\n        }\n\n        if (!options.redirect) {\n            options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n        }\n\n        if (!options.data) {\n            options.data = {};\n        }\n        options.data.saveShortcut = true;\n\n        Craft.submitForm(this.$primaryForm, options);\n    },\n\n    updateSidebarMenuLabel: function() {\n        var $item = this.$sidebar.find('a.sel:first');\n        var $label = $item.children('.label');\n        $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n        Garnish.$bod.removeClass('showing-sidebar');\n    },\n\n    toggleNav: function() {\n        Garnish.$bod.toggleClass('showing-nav');\n    },\n\n    toggleSidebar: function() {\n        Garnish.$bod.toggleClass('showing-sidebar');\n    },\n\n    initTabs: function() {\n        // Clear out all our old info in case the tabs were just replaced\n        this.$tabsList = this.$tabs = this.$overflowTabBtn = this.$overflowTabList = this.$selectedTab =\n            this.selectedTabIndex = this.$focusableTab = null;\n\n        this.$tabsContainer = $('#tabs');\n        if (!this.$tabsContainer.length) {\n            this.$tabsContainer = null;\n            return;\n        }\n\n        this.$tabsList = this.$tabsContainer.find('> ul');\n        this.$tabs = this.$tabsList.find('> li');\n        this.$overflowTabBtn = $('#overflow-tab-btn');\n        if (!this.$overflowTabBtn.data('menubtn')) {\n            new Garnish.MenuBtn(this.$overflowTabBtn);\n        }\n        this.$overflowTabList = this.$overflowTabBtn.data('menubtn').menu.$container.find('> ul');\n\n        let $initialTab;\n\n        for (let i = 0; i < this.$tabs.length; i++) {\n            const $tab = this.$tabs.eq(i);\n\n            // Does it link to an anchor?\n            const $a = $tab.children('a');\n            const href = $a.attr('href');\n            if (href && href.charAt(0) === '#') {\n                this.addListener($a, 'keydown', ev => {\n                    if ([Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    }\n                });\n                this.addListener($a, 'click', ev => {\n                    ev.preventDefault();\n                    const $a = $(ev.currentTarget);\n                    this.selectTab($a);\n                    this._focusTab($a);\n                });\n\n                if (href.substr(1) === window.LOCATION_HASH) {\n                    $initialTab = $a;\n                }\n            }\n\n            if (!$initialTab && $a.hasClass('sel')) {\n                this.$selectedTab = $initialTab = $a;\n            }\n\n            this.addListener($a, 'keydown', ev => {\n                if (\n                    [Garnish.LEFT_KEY, Garnish.RIGHT_KEY].includes(ev.keyCode) &&\n                    $.contains(this.$tabsList[0], ev.currentTarget)\n                ) {\n                    let $tab;\n                    if (ev.keyCode === Garnish.LEFT_KEY) {\n                        $tab = $(ev.currentTarget).parent().prev('li').children('a');\n                    } else {\n                        $tab = $(ev.currentTarget).parent().next('li').children('a');\n                    }\n                    if ($tab.length) {\n                        this._focusTab($tab);\n                    }\n                }\n            });\n        }\n\n        if ($initialTab) {\n            this.selectTab($initialTab, true);\n            this._focusTab($initialTab, false);\n        }\n    },\n\n    /**\n     * @param {object} tab\n     * @param {bool} [force]\n     */\n    selectTab: function(tab, force) {\n        var $tab = $(tab);\n\n        if (this.$selectedTab) {\n            if (!force && this.$selectedTab.get(0) === $tab.get(0)) {\n                return;\n            }\n            this.deselectTab();\n        }\n\n        $tab.addClass('sel');\n\n        const index = $tab ? this.$tabs.index($tab.parent()) : null;\n        this.$selectedTab = $tab;\n        this.selectedTabIndex = index;\n\n        if (index === 0) {\n            $('#content').addClass('square');\n        } else {\n            $('#content').removeClass('square');\n        }\n\n        // Show its content area\n        if ($tab.attr('href').charAt(0) === '#') {\n            $(this.$selectedTab.attr('href')).removeClass('hidden');\n        }\n\n        // Trigger a resize event to update any UI components that are listening for it, including updateTabs()\n        Garnish.$win.trigger('resize');\n\n        // Fixes Redactor fixed toolbars on previously hidden panes\n        Garnish.$doc.trigger('scroll');\n\n        this.$overflowTabBtn.data('menubtn').menu.hide();\n\n        // If there is a revision menu, set its links to this tab ID\n        let href = $tab && $tab.attr('href');\n        if (href && href.charAt(0) === '#') {\n            let menubtn = $('#context-btn').menubtn().data('menubtn');\n            if (menubtn) {\n                for (let i = 0; i < menubtn.menu.$options.length; i++) {\n                    let a = menubtn.menu.$options[i];\n                    if (a.href) {\n                        a.href = a.href.match(/^[^#]*/)[0] + href;\n                    }\n                }\n            }\n        }\n\n        if (typeof history !== 'undefined') {\n            // Delay changing the hash so it doesn't cause the browser to jump on page load\n            Garnish.requestAnimationFrame(() => {\n                history.replaceState(undefined, undefined, href);\n            });\n        }\n    },\n\n    /**\n     * @param {object} $tab\n     * @param {boolean} [setFocus]\n     * @private\n     */\n    _focusTab: function($tab, setFocus) {\n        if ($tab === this.$focusableTab) {\n            return;\n        }\n\n        if (this.$focusableTab) {\n            this.$focusableTab.attr('tabindex', '-1');\n        }\n\n        this.$focusableTab = $tab.attr('tabindex', '0');\n\n        if (setFocus !== false) {\n            this.$focusableTab.focus();\n        }\n    },\n\n    deselectTab: function() {\n        if (!this.$selectedTab) {\n            return;\n        }\n\n        this.$selectedTab.removeClass('sel');\n\n        // Hide its content area\n        if (this.$selectedTab.attr('href').charAt(0) === '#') {\n            $(this.$selectedTab.attr('href')).addClass('hidden');\n        }\n    },\n\n    handleWindowResize: function() {\n        this.updateTabs();\n        this.updateResponsiveTables();\n    },\n\n    updateTabs: function() {\n        if (!this.$tabsContainer) {\n            return;\n        }\n\n        // Keep track of the focussed element in case it's one of the tabs\n        const activeElement = document.activeElement;\n\n        const maxWidth = Math.floor(this.$tabsContainer.width()) - 40;\n        const tabMargin = Garnish.$bod.width() >= 768 ? -12 : -7;\n        let totalWidth = 0;\n        let showOverflowMenu = false;\n\n        // Start with the selected tab, because that needs to be visible\n        if (this.$selectedTab) {\n            this.$selectedTab.parent('li').appendTo(this.$tabsList);\n            totalWidth = Math.ceil(this.$selectedTab.parent('li').width());\n        }\n\n        for (var i = 0; i < this.$tabs.length; i++) {\n            const $tab = this.$tabs.eq(i);\n            $tab.appendTo(this.$tabsList);\n            if (i !== this.selectedTabIndex) {\n                totalWidth += Math.ceil($tab.width());\n                // account for the negative margin\n                if (i !== 0 || this.$selectedTab) {\n                    totalWidth += tabMargin;\n                }\n            }\n\n            const $a = $tab.find('> a');\n            if (i === this.selectedTabIndex || totalWidth <= maxWidth) {\n                $a\n                    .removeAttr('role')\n                    .attr('tabindex', this.$focusableTab && $a[0] === this.$focusableTab[0] ? '0' : '-1');\n            } else {\n                $tab.appendTo(this.$overflowTabList);\n                this.$overflowTabBtn.data('menubtn').menu.addOptions($a);\n                showOverflowMenu = true;\n            }\n\n            if (document.activeElement !== activeElement) {\n                $(activeElement).focus();\n            }\n        }\n\n        if (showOverflowMenu) {\n            this.$overflowTabBtn.removeClass('hidden');\n        } else {\n            this.$overflowTabBtn.addClass('hidden');\n        }\n    },\n\n    updateResponsiveTables: function() {\n        for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n            this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n            this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n            this.updateResponsiveTables._check = false;\n\n            if (this.updateResponsiveTables._containerWidth > 0) {\n                // Is this the first time we've checked this table?\n                if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                    this.updateResponsiveTables._check = true;\n                } else {\n                    this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                    // Getting wider?\n                    if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                        if (this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._$table.removeClass('collapsed');\n                            this.updateResponsiveTables._check = true;\n                        }\n                    } else if (!this.updateResponsiveTables._isCollapsed) {\n                        this.updateResponsiveTables._check = true;\n                    }\n                }\n\n                // Are we checking the table width?\n                if (this.updateResponsiveTables._check) {\n                    if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                        this.updateResponsiveTables._$table.addClass('collapsed');\n                    }\n                }\n\n                // Remember the container width for next time\n                this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n            }\n        }\n    },\n\n    updateFixedHeader: function() {\n        // Have we scrolled passed the top of #main?\n        if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n            if (!this.fixedHeader) {\n                var headerHeight = this.$headerContainer.height();\n\n                // Hard-set the minimum content container height\n                this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                // Hard-set the header container height\n                this.$headerContainer.height(headerHeight);\n                Garnish.$bod.addClass('fixed-header');\n\n                // Fix the sidebar and details pane positions if they are taller than #content-container\n                var contentHeight = this.$contentContainer.outerHeight();\n                var $detailsHeight = this.$details.outerHeight();\n                var css = {\n                    top: headerHeight + 'px',\n                    'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                };\n                this.$sidebar.addClass('fixed').css(css);\n                this.$details.addClass('fixed').css(css);\n                this.fixedHeader = true;\n            }\n        } else if (this.fixedHeader) {\n            this.$headerContainer.height('auto');\n            Garnish.$bod.removeClass('fixed-header');\n            this.$contentContainer.css('min-height', '');\n            this.$sidebar.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.$details.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.fixedHeader = false;\n        }\n    },\n\n    /**\n     * Dispays a notification.\n     *\n     * @param {string} type\n     * @param {string} message\n     */\n    displayNotification: function(type, message) {\n        var notificationDuration = Craft.CP.notificationDuration;\n\n        if (['cp-error', 'error'].includes(type)) {\n            notificationDuration *= 2;\n            icon = 'alert';\n            label = Craft.t('app', 'Error');\n        } else {\n            icon = 'info';\n            label = Craft.t('app', 'Notice');\n        }\n\n        var $notification = $(`\n            <div class=\"notification ${ type.replace('cp-', '') }\">\n                <span data-icon=\"${ icon }\" aria-label=\"${ label }\"></span>\n                ${ message }\n            </div>\n            `)\n            .appendTo(this.$notificationContainer);\n\n        var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n        $notification\n            .hide()\n            .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n            .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n            .delay(notificationDuration)\n            .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                complete: function() {\n                    $notification.remove();\n                }\n            });\n\n        this.trigger('displayNotification', {\n            notificationType: type,\n            message: message\n        });\n    },\n\n    /**\n     * Displays a notice.\n     *\n     * @param {string} message\n     */\n    displayNotice: function(message) {\n        this.displayNotification('notice', message);\n    },\n\n    /**\n     * Displays an error.\n     *\n     * @param {string} message\n     */\n    displayError: function(message) {\n        if (!message) {\n            message = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.displayNotification('error', message);\n    },\n\n    fetchAlerts: function() {\n        var data = {\n            path: Craft.path\n        };\n\n        Craft.queueActionRequest('app/get-cp-alerts', data, this.displayAlerts.bind(this));\n    },\n\n    displayAlerts: function(alerts) {\n        this.$alerts.remove();\n\n        if (Garnish.isArray(alerts) && alerts.length) {\n            this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n            for (var i = 0; i < alerts.length; i++) {\n                $(`<li><span data-icon=\"alert\" aria-label=\"${ Craft.t('app', 'Error') }\"></span> ${ alerts[i] }</li>`).appendTo(this.$alerts);\n            }\n\n            var height = this.$alerts.outerHeight();\n            this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n            this.initAlerts();\n        }\n    },\n\n    initAlerts: function() {\n        // Are there any shunnable alerts?\n        var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n        for (var i = 0; i < $shunnableAlerts.length; i++) {\n            this.addListener($shunnableAlerts[i], 'click', ev => {\n                ev.preventDefault();\n\n                var $link = $(ev.currentTarget);\n\n                var data = {\n                    message: $link.prop('className').substr(5)\n                };\n\n                Craft.queueActionRequest('app/shun-cp-alert', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            $link.parent().remove();\n                        } else {\n                            this.displayError(response.error);\n                        }\n                    }\n                });\n            });\n        }\n    },\n\n    checkForUpdates: function(forceRefresh, includeDetails, callback) {\n        // Make 'includeDetails' optional\n        if (typeof includeDetails === 'function') {\n            callback = includeDetails;\n            includeDetails = false;\n        }\n\n        // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n        // then just set a new callback that re-checks for updates when the current one is done.\n        if (this.checkingForUpdates && (\n            (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n            (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n        )) {\n            var realCallback = callback;\n            callback = () => {\n                this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n            };\n        }\n\n        // Callback function?\n        if (typeof callback === 'function') {\n            if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                this.checkForUpdatesCallbacks = [];\n            }\n\n            this.checkForUpdatesCallbacks.push(callback);\n        }\n\n        if (!this.checkingForUpdates) {\n            this.checkingForUpdates = true;\n            this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n            this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n            this._checkForUpdates(forceRefresh, includeDetails)\n                .then(info => {\n                    this.updateUtilitiesBadge();\n                    this.checkingForUpdates = false;\n\n                    if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                        var callbacks = this.checkForUpdatesCallbacks;\n                        this.checkForUpdatesCallbacks = null;\n\n                        for (var i = 0; i < callbacks.length; i++) {\n                            callbacks[i](info);\n                        }\n                    }\n\n                    this.trigger('checkForUpdates', {\n                        updateInfo: info\n                    });\n                });\n        }\n    },\n\n    _checkForUpdates: function(forceRefresh, includeDetails) {\n        return new Promise((resolve, reject) => {\n            if (!forceRefresh) {\n                this._checkForCachedUpdates(includeDetails)\n                    .then(info => {\n                        if (info.cached !== false) {\n                            resolve(info);\n                        }\n\n                        this._getUpdates(includeDetails)\n                            .then(info => {\n                                resolve(info);\n                            });\n                    });\n            } else {\n                this._getUpdates(includeDetails)\n                    .then(info => {\n                        resolve(info);\n                    });\n            }\n        });\n    },\n\n    _checkForCachedUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            var data = {\n                onlyIfCached: true,\n                includeDetails: includeDetails,\n            };\n            Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    resolve({cached: false});\n                }\n            });\n        });\n    },\n\n    _getUpdates: function(includeDetails) {\n        return new Promise((resolve, reject) => {\n            Craft.sendApiRequest('GET', 'updates')\n                .then(updates => {\n                    this._cacheUpdates(updates, includeDetails).then(resolve);\n                })\n                .catch(e => {\n                    this._cacheUpdates({}).then(resolve);\n                });\n        });\n    },\n\n    _cacheUpdates: function(updates, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.postActionRequest('app/cache-updates', {\n                updates: updates,\n                includeDetails: includeDetails,\n            }, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    reject();\n                }\n            }, {\n                contentType: 'json'\n            });\n        });\n    },\n\n    updateUtilitiesBadge: function() {\n        var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n        // Ignore if there is no (non-selected) Utilities nav item\n        if (!$utilitiesLink.length) {\n            return;\n        }\n\n        Craft.queueActionRequest('app/get-utilities-badge-count', response => {\n            // Get the existing utility nav badge, if any\n            var $badge = $utilitiesLink.children('.badge');\n\n            if (response.badgeCount) {\n                if (!$badge.length) {\n                    $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                }\n                $badge.text(response.badgeCount);\n            } else if ($badge.length) {\n                $badge.remove();\n            }\n        });\n    },\n\n    runQueue: function() {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        if (Craft.runQueueAutomatically) {\n            Craft.queueActionRequest('queue/run', (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this.trackJobProgress(false, true);\n                }\n            });\n        } else {\n            this.trackJobProgress(false, true);\n        }\n    },\n\n    trackJobProgress: function(delay, force) {\n        if (force && this.trackJobProgressTimeout) {\n            clearTimeout(this.trackJobProgressTimeout);\n            this.trackJobProgressTimeout = null;\n        }\n\n        // Ignore if we're already tracking jobs, or the queue is disabled\n        if (this.trackJobProgressTimeout || !this.enableQueue) {\n            return;\n        }\n\n        if (delay === true) {\n            // Determine the delay based on how long the displayed job info has remained unchanged\n            var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n            this.trackJobProgressTimeout = setTimeout(this._trackJobProgressInternal.bind(this), timeout);\n        } else {\n            this._trackJobProgressInternal();\n        }\n    },\n\n    _trackJobProgressInternal: function() {\n        Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.trackJobProgressTimeout = null;\n                this.totalJobs = response.total;\n                this.setJobInfo(response.jobs);\n\n                if (this.jobInfo.length) {\n                    // Check again after a delay\n                    this.trackJobProgress(true);\n                }\n            }\n        });\n    },\n\n    setJobInfo: function(jobInfo) {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        this.jobInfo = jobInfo;\n\n        // Update the displayed job info\n        var oldInfo = this.displayedJobInfo;\n        this.displayedJobInfo = this.getDisplayedJobInfo();\n\n        // Same old same old?\n        if (\n            oldInfo &&\n            this.displayedJobInfo &&\n            oldInfo.id === this.displayedJobInfo.id &&\n            oldInfo.progress === this.displayedJobInfo.progress &&\n            oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n            oldInfo.status === this.displayedJobInfo.status\n        ) {\n            this.displayedJobInfoUnchanged++;\n        } else {\n            // Reset the counter\n            this.displayedJobInfoUnchanged = 1;\n        }\n\n        this.updateJobIcon();\n\n        // Fire a setJobInfo event\n        this.trigger('setJobInfo');\n    },\n\n    /**\n     * Returns info for the job that should be displayed in the CP sidebar\n     */\n    getDisplayedJobInfo: function() {\n        if (!this.enableQueue) {\n            return null;\n        }\n\n        // Set the status preference order\n        var statuses = [\n            Craft.CP.JOB_STATUS_RESERVED,\n            Craft.CP.JOB_STATUS_FAILED,\n            Craft.CP.JOB_STATUS_WAITING\n        ];\n\n        for (var i = 0; i < statuses.length; i++) {\n            for (var j = 0; j < this.jobInfo.length; j++) {\n                if (this.jobInfo[j].status === statuses[i]) {\n                    return this.jobInfo[j];\n                }\n            }\n        }\n    },\n\n    updateJobIcon: function() {\n        if (!this.enableQueue || !this.$nav.length) {\n            return;\n        }\n\n        if (this.displayedJobInfo) {\n            if (!this.jobProgressIcon) {\n                this.jobProgressIcon = new JobProgressIcon();\n            }\n\n            if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n            } else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n            }\n        } else {\n            if (this.jobProgressIcon) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.complete();\n                delete this.jobProgressIcon;\n            }\n        }\n    },\n\n    /**\n     * Returns the active site for the control panel\n     *\n     * @return {number}\n     */\n    getSiteId: function() {\n        // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n        let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n        if (typeof siteId !== 'undefined') {\n            Craft.removeLocalStorage('BaseElementIndex.siteId');\n            this.setSiteId(siteId);\n            return siteId;\n        }\n        return Craft.getCookie('siteId');\n    },\n\n    /**\n     * Sets the active site for the control panel\n     * @param {number} siteId\n     */\n    setSiteId: function(siteId) {\n        Craft.setCookie('siteId', siteId, {\n            maxAge: 31536000 // 1 year\n        });\n    }\n}, {\n    //maxWidth: 1051, //1024,\n    notificationDuration: 2000,\n\n    JOB_STATUS_WAITING: 1,\n    JOB_STATUS_RESERVED: 2,\n    JOB_STATUS_DONE: 3,\n    JOB_STATUS_FAILED: 4\n});\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend({\n    $li: null,\n    $a: null,\n    $label: null,\n    $progressLabel: null,\n\n    progress: null,\n    failMode: false,\n\n    _$bgCanvas: null,\n    _$staticCanvas: null,\n    _$hoverCanvas: null,\n    _$failCanvas: null,\n\n    _staticCtx: null,\n    _hoverCtx: null,\n    _canvasSize: null,\n    _arcPos: null,\n    _arcRadius: null,\n    _lineWidth: null,\n\n    _arcStartPos: 0,\n    _arcEndPos: 0,\n    _arcStartStepSize: null,\n    _arcEndStepSize: null,\n    _arcStep: null,\n    _arcStepTimeout: null,\n    _arcAnimateCallback: null,\n\n    _progressBar: null,\n\n    init: function() {\n        this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n        this.$a = $('<a/>', {\n            id: 'job-icon',\n            href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n        }).appendTo(this.$li);\n        this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n        var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n        this.$label = $('<span/>').appendTo($labelContainer);\n        this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n        let m = (window.devicePixelRatio > 1 ? 2 : 1);\n        this._canvasSize = 18 * m;\n        this._arcPos = this._canvasSize / 2;\n        this._arcRadius = 7 * m;\n        this._lineWidth = 3 * m;\n\n        this._$bgCanvas = this._createCanvas('bg', '#61666b');\n        this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n        this._$hoverCanvas = this._createCanvas('hover', '#fff');\n        this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n        this._staticCtx = this._$staticCanvas[0].getContext('2d');\n        this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n        this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n        this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n    },\n\n    setDescription: function(description, progressLabel) {\n        this.$a.attr('title', description);\n        this.$label.text(description);\n        if (progressLabel) {\n            this.$progressLabel.text(progressLabel).show();\n        } else {\n            this.$progressLabel.hide();\n        }\n    },\n\n    setProgress: function(progress) {\n        if (progress == 0) {\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n        } else {\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            if (this.progress && progress > this.progress) {\n                this._animateArc(0, progress / 100);\n            } else {\n                this._setArc(0, progress / 100);\n            }\n        }\n\n        this.progress = progress;\n    },\n\n    complete: function() {\n        this._animateArc(0, 1, () => {\n            this._$bgCanvas.velocity('fadeOut');\n\n            this._animateArc(1, 1, () => {\n                this.$a.remove();\n                this.destroy();\n            });\n        });\n    },\n\n    showFailMode: function(message) {\n        if (this.failMode) {\n            return;\n        }\n\n        this.failMode = true;\n        this.progress = null;\n\n        this._$bgCanvas.hide();\n        this._$staticCanvas.hide();\n        this._$hoverCanvas.hide();\n        this._$failCanvas.show();\n\n        this.setDescription(message);\n    },\n\n    hideFailMode: function() {\n        if (!this.failMode) {\n            return;\n        }\n\n        this.failMode = false;\n\n        this._$bgCanvas.show();\n        this._$staticCanvas.show();\n        this._$hoverCanvas.show();\n        this._$failCanvas.hide();\n    },\n\n    _createCanvas: function(id, color) {\n        var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n            ctx = $canvas[0].getContext('2d');\n\n        ctx.strokeStyle = color;\n        ctx.lineWidth = this._lineWidth;\n        ctx.lineCap = 'round';\n        return $canvas;\n    },\n\n    _setArc: function(startPos, endPos) {\n        this._arcStartPos = startPos;\n        this._arcEndPos = endPos;\n\n        this._drawArc(this._staticCtx, startPos, endPos);\n        this._drawArc(this._hoverCtx, startPos, endPos);\n    },\n\n    _drawArc: function(ctx, startPos, endPos) {\n        ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n        ctx.beginPath();\n        ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n    },\n\n    _animateArc: function(targetStartPos, targetEndPos, callback) {\n        if (this._arcStepTimeout) {\n            clearTimeout(this._arcStepTimeout);\n        }\n\n        this._arcStep = 0;\n        this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n        this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n        this._arcAnimateCallback = callback;\n        this._takeNextArcStep();\n    },\n\n    _takeNextArcStep: function() {\n        this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n        this._arcStep++;\n\n        if (this._arcStep < 10) {\n            this._arcStepTimeout = setTimeout(this._takeNextArcStep.bind(this), 50);\n        } else if (this._arcAnimateCallback) {\n            this._arcAnimateCallback();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend({\n    editableGroups: null,\n    $newCategoryBtnGroup: null,\n    $newCategoryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible groups the user has permission to create new categories in\n        this.editableGroups = [];\n\n        for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n            var group = Craft.editableCategoryGroups[i];\n\n            if (this.getSourceByKey('group:' + group.uid)) {\n                this.editableGroups.push(group);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific category group in the URL?\n        if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n\n                if ($source.data('handle') === defaultGroupHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        // Get the handle of the selected source\n        var selectedSourceHandle = this.$source.data('handle');\n\n        var i, href, label;\n\n        // Update the New Category button\n        // ---------------------------------------------------------------------\n\n        if (this.editableGroups.length) {\n            // Remove the old button, if there is one\n            if (this.$newCategoryBtnGroup) {\n                this.$newCategoryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a group that they have permission to create categories in\n            var selectedGroup;\n\n            if (selectedSourceHandle) {\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    if (this.editableGroups[i].handle === selectedSourceHandle) {\n                        selectedGroup = this.editableGroups[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n            // Otherwise only show a menu button\n            if (selectedGroup) {\n                href = this._getGroupTriggerHref(selectedGroup);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                        this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.editableGroups.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n            } else {\n                this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New category'),\n                }).appendTo(this.$newCategoryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    var group = this.editableGroups[i];\n\n                    if (this.settings.context === 'index' || group !== selectedGroup) {\n                        href = this._getGroupTriggerHref(group);\n                        label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newCategoryBtnGroup);\n        }\n\n        // Update the URL if we're on the Categories index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'categories';\n\n            if (selectedSourceHandle) {\n                uri += '/' + selectedSourceHandle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getGroupTriggerHref: function(group) {\n        if (this.settings.context === 'index') {\n            var uri = 'categories/' + group.handle + '/new';\n            if (this.siteId && this.siteId != Craft.primarySiteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        uri += '/' + Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri) + '\"';\n        } else {\n            return 'data-id=\"' + group.id + '\"';\n        }\n    },\n\n    _openCreateCategoryModal: function(groupId) {\n        if (this.$newCategoryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the group\n        var group;\n\n        for (var i = 0; i < this.editableGroups.length; i++) {\n            if (this.editableGroups[i].id == groupId) {\n                group = this.editableGroups[i];\n                break;\n            }\n        }\n\n        if (!group) {\n            return;\n        }\n\n        this.$newCategoryBtn.addClass('inactive');\n        var newCategoryBtnText = this.$newCategoryBtn.text();\n        this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newCategoryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                groupId: groupId\n            },\n            onBeginLoading: () => {\n                this.$newCategoryBtn.addClass('loading');\n            },\n            onEndLoading: () => {\n                this.$newCategoryBtn.removeClass('loading');\n            },\n            onHideHud: () => {\n                this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right group is selected\n                var groupSourceKey = 'group:' + group.uid;\n\n                if (this.sourceKey !== groupSourceKey) {\n                    this.selectSourceByKey(groupSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend({\n    setSettings: function() {\n        this.base.apply(this, arguments);\n        this.settings.sortable = false;\n    },\n\n    getModalSettings: function() {\n        var settings = this.base();\n        settings.hideOnSelect = false;\n        return settings;\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.find('.element');\n    },\n\n    onModalSelect: function(elements) {\n        // Disable the modal\n        this.modal.disable();\n        this.modal.disableCancelBtn();\n        this.modal.disableSelectBtn();\n        this.modal.showFooterSpinner();\n\n        // Get the new category HTML\n        var selectedCategoryIds = this.getSelectedElementIds();\n\n        for (var i = 0; i < elements.length; i++) {\n            selectedCategoryIds.push(elements[i].id);\n        }\n\n        var data = {\n            categoryIds: selectedCategoryIds,\n            siteId: elements[0].siteId,\n            id: this.settings.id,\n            name: this.settings.name,\n            branchLimit: this.settings.branchLimit,\n            selectionLabel: this.settings.selectionLabel\n        };\n\n        Craft.postActionRequest('elements/get-categories-input-html', data, (response, textStatus) => {\n            this.modal.enable();\n            this.modal.enableCancelBtn();\n            this.modal.enableSelectBtn();\n            this.modal.hideFooterSpinner();\n\n            if (textStatus === 'success') {\n                var $newInput = $(response.html),\n                    $newElementsContainer = $newInput.children('.elements');\n\n                this.$elementsContainer.replaceWith($newElementsContainer);\n                this.$elementsContainer = $newElementsContainer;\n                this.resetElements();\n\n                var filteredElements = [];\n\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i],\n                        $element = this.getElementById(element.id);\n\n                    if ($element) {\n                        this.animateElementIntoPlace(element.$element, $element);\n                        filteredElements.push(element);\n                    }\n                }\n\n                this.updateDisabledElementsInModal();\n                this.modal.hide();\n                this.onSelectElements(filteredElements);\n            }\n        });\n    },\n\n    removeElement: function($element) {\n        // Find any descendants this category might have\n        var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n        // Remove our record of them all at once\n        this.removeElements($allCategories);\n\n        // Animate them away one at a time\n        for (var i = 0; i < $allCategories.length; i++) {\n            this._animateCategoryAway($allCategories, i);\n        }\n    },\n\n    _animateCategoryAway: function($allCategories, i) {\n        var callback;\n\n        // Is this the last one?\n        if (i === $allCategories.length - 1) {\n            callback = () => {\n                var $li = $allCategories.first().parent().parent(),\n                    $ul = $li.parent();\n\n                if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                    $li.remove();\n                } else {\n                    $ul.remove();\n                }\n            };\n        }\n\n        var func = () => {\n            this.animateElementAway($allCategories.eq(i), callback);\n        };\n\n        if (i === 0) {\n            func();\n        } else {\n            setTimeout(func, 100 * i);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend({\n    columns: null,\n    rows: null,\n\n    init: function(data) {\n        let columns = data.columns;\n        let rows = data.rows;\n\n        rows.forEach(d => {\n            $.each(d, function(cellIndex) {\n                var column = columns[cellIndex];\n\n                var parseTime;\n\n                switch (column.type) {\n                    case 'date':\n                        parseTime = d3.timeParse('%Y-%m-%d');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'datetime':\n                        parseTime = d3.timeParse('%Y-%m-%d %H:00:00');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'percent':\n                        d[cellIndex] = d[cellIndex] / 100;\n                        break;\n\n                    case 'number':\n                        d[cellIndex] = +d[cellIndex];\n                        break;\n\n                    default:\n                    // do nothing\n                }\n            });\n        });\n\n        this.columns = columns;\n        this.rows = rows;\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend({\n    $container: null,\n    $tip: null,\n\n    init: function($container) {\n        this.$container = $container;\n\n        this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n        this.hide();\n    },\n\n    setContent: function(html) {\n        this.$tip.html(html);\n    },\n\n    setPosition: function(position) {\n        this.$tip.css('left', `${position.left}px`);\n        this.$tip.css('top', `${position.top}px`);\n    },\n\n    show: function() {\n        this.$tip.css('display', 'block');\n    },\n\n    hide: function() {\n        this.$tip.css('display', 'none');\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend({\n    $container: null,\n    $chart: null,\n\n    chartBaseClass: 'cp-chart',\n    dataTable: null,\n\n    formatLocale: null,\n    timeFormatLocale: null,\n    orientation: null,\n\n    svg: null,\n    width: null,\n    height: null,\n\n    init: function(container, settings) {\n        this.$container = container;\n\n        this.setSettings(Craft.charts.BaseChart.defaults);\n        this.setSettings(settings);\n\n        var globalSettings = {\n            formats: window.d3Formats,\n            formatLocaleDefinition: window.d3FormatLocaleDefinition,\n            timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n        };\n\n        this.setSettings(globalSettings);\n\n        d3.select(window).on('resize', () => {\n            this.resize();\n        });\n    },\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n    },\n\n    draw: function(dataTable, settings) {\n        // Settings and chart attributes\n\n        this.setSettings(settings);\n\n        this.dataTable = dataTable;\n        this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n        this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n        this.orientation = this.settings.orientation;\n\n        // Set (or reset) the chart element\n\n        if (this.$chart) {\n            this.$chart.remove();\n        }\n\n        var className = this.chartBaseClass;\n\n        if (this.settings.chartClass) {\n            className += ' ' + this.settings.chartClass;\n        }\n\n        this.$chart = $(`<div class=\"${className}\" />`).appendTo(this.$container);\n    },\n\n    resize: function() {\n        this.draw(this.dataTable, this.settings);\n    },\n\n    onAfterDrawTicks: function() {\n        // White border for ticks' text\n        $('.tick', this.$chart).each(function(tickKey, tick) {\n            var $tickText = $('text', tick);\n\n            var $clone = $tickText.clone();\n            $clone.appendTo(tick);\n\n            $tickText.attr('stroke', '#ffffff');\n            $tickText.attr('stroke-width', 3);\n        });\n    }\n}, {\n    defaults: {\n        formatLocaleDefinition: null,\n        timeFormatLocaleDefinition: null,\n        formats: {\n            numberFormat: ',.2f',\n            percentFormat: ',.2%',\n            currencyFormat: '$,.2f',\n            shortDateFormats: {\n                day: '%-m/%-d',\n                month: '%-m/%y',\n                year: '%Y'\n            }\n        },\n        margin: {top: 0, right: 0, bottom: 0, left: 0},\n        chartClass: null,\n        colors: ['#0594D1', '#DE3800', '#FF9A00', '#009802', '#9B009B']\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend({\n    tip: null,\n    drawingArea: null,\n\n    init: function(container, settings) {\n        this.base(container, Craft.charts.Area.defaults);\n\n        this.setSettings(settings);\n    },\n\n    draw: function(dataTable, settings) {\n        this.base(dataTable, settings);\n\n        if (this.tip) {\n            this.tip = null;\n        }\n\n        var margin = this.getChartMargin();\n\n        this.width = this.$chart.width() - margin.left - margin.right;\n        this.height = this.$chart.height() - margin.top - margin.bottom;\n\n        // Append SVG to chart element\n\n        var svg = {\n            width: this.width + (margin.left + margin.right),\n            height: this.height + (margin.top + margin.bottom),\n            translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n            translateY: margin.top\n        };\n\n        this.svg = d3.select(this.$chart.get(0)).append('svg')\n            .attr('width', svg.width)\n            .attr('height', svg.height);\n\n        this.drawingArea = this.svg.append('g')\n            .attr('transform', `translate(${svg.translateX},${svg.translateY})`);\n\n        // Draw elements\n\n        this.drawTicks();\n        this.drawAxes();\n        this.drawChart();\n        this.drawTipTriggers();\n    },\n\n    drawTicks: function() {\n        // Draw X ticks\n\n        var x = this.getX(true);\n        var xTicks = 3;\n        var xAxis = d3.axisBottom(x)\n            .tickFormat(this.getXFormatter())\n            .ticks(xTicks);\n\n        this.drawingArea.append('g')\n            .attr('class', 'x ticks-axis')\n            .attr('transform', `translate(0, ${this.height})`)\n            .call(xAxis);\n\n        // Draw Y ticks\n\n        var y = this.getY();\n        var yTicks = 2;\n        var yAxis;\n\n        if (this.orientation !== 'rtl') {\n            yAxis = d3.axisLeft(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .call(yAxis);\n        } else {\n            yAxis = d3.axisRight(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .attr('transform', `translate(${this.width},0)`)\n                .call(yAxis);\n        }\n\n        // On after draw ticks\n\n        this.onAfterDrawTicks();\n    },\n\n    drawAxes: function() {\n        if (this.settings.xAxis.showAxis) {\n            var x = this.getX();\n            var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n            this.drawingArea.append('g')\n                .attr('class', 'x axis')\n                .attr('transform', `translate(0, ${this.height})`)\n                .call(xAxis);\n        }\n\n        if (this.settings.yAxis.showAxis) {\n            var y = this.getY();\n            var chartPadding = 0;\n            var yAxis;\n\n            if (this.orientation === 'rtl') {\n                yAxis = d3.axisLeft(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${this.width - chartPadding}, 0)`)\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${chartPadding}, 0)`)\n                    .call(yAxis);\n            }\n        }\n    },\n\n    drawChart: function() {\n        var x = this.getX(true);\n        var y = this.getY();\n\n        // X & Y grid lines\n\n        if (this.settings.xAxis.gridlines) {\n            var xLineAxis = d3.axisBottom(x);\n\n            this.drawingArea.append('g')\n                .attr('class', 'x grid-line')\n                .attr('transform', `translate(0,${this.height})`)\n                .call(xLineAxis\n                    .tickSize(-this.height, 0, 0)\n                    .tickFormat('')\n                );\n        }\n\n        var yTicks = 2;\n\n        if (this.settings.yAxis.gridlines) {\n            var yLineAxis = d3.axisLeft(y);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y grid-line')\n                .attr('transform', 'translate(0 , 0)')\n                .call(yLineAxis\n                    .tickSize(-(this.width), 0)\n                    .tickFormat('')\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks)\n                );\n        }\n\n        // Line\n\n        var line = d3.line()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-line')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', 'none')\n            .style('stroke', this.settings.colors[0])\n            .style('stroke-width', '3px')\n            .attr('d', line);\n\n        // Area\n\n        var area = d3.area()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y0(this.height)\n            .y1(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-area')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', this.settings.colors[0])\n            .style('fill-opacity', '0.3')\n            .attr('d', area);\n\n        // Plots\n\n        if (this.settings.plots) {\n            this.drawingArea.append('g')\n                .attr('class', 'plots')\n                .selectAll('circle')\n                .data(this.dataTable.rows)\n                .enter()\n                .append('circle')\n                .style('fill', this.settings.colors[0])\n                .attr('class', (d, index) => `plot plot-${index}`)\n                .attr('r', 4)\n                .attr('cx', d => x(d[0]))\n                .attr('cy', d => y(d[1]));\n        }\n    },\n\n    drawTipTriggers: function() {\n        if (this.settings.tips) {\n            if (!this.tip) {\n                this.tip = new Craft.charts.Tip(this.$chart);\n            }\n\n            // Define xAxisTickInterval\n\n            var chartMargin = this.getChartMargin();\n            var tickSizeOuter = 6;\n            var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n            var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n            // Tip trigger width\n\n            var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n            // Draw triggers\n\n            var x = this.getX(true);\n            var y = this.getY();\n\n            this.drawingArea.append('g')\n                .attr('class', 'tip-triggers')\n                .selectAll('rect')\n                .data(this.dataTable.rows)\n                .enter().append('rect')\n                .attr('class', 'tip-trigger')\n                .style('fill', 'transparent')\n                .style('fill-opacity', '1')\n                .attr('width', tipTriggerWidth)\n                .attr('height', this.height)\n                .attr('x', d => x(d[0]) - tipTriggerWidth / 2)\n                .on('mouseover', (d, index) => {\n                    // Expand plot\n\n                    this.drawingArea.select('.plot-' + index).attr('r', 5);\n\n                    // Set tip content\n\n                    var $content = $('<div />');\n                    var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                    var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                    $xValue.html(this.getXFormatter()(d[0]));\n                    $yValue.html(this.getYFormatter()(d[1]));\n\n                    var content = $content.get(0);\n\n                    this.tip.setContent(content);\n\n                    // Set tip position\n\n                    var margin = this.getChartMargin();\n\n                    var offset = 24;\n                    var top = (y(d[1]) + offset);\n                    var left;\n\n                    if (this.orientation !== 'rtl') {\n                        left = (x(d[0]) + margin.left + offset);\n\n                        var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                        var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                        if (calcLeft > maxLeft) {\n                            left = x(d[0]) - (this.tip.$tip.width() + offset);\n                        }\n                    } else {\n                        left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                    }\n\n                    if (left < 0) {\n                        left = (x(d[0]) + margin.left + offset);\n                    }\n\n                    var position = {\n                        top: top,\n                        left: left\n                    };\n\n                    this.tip.setPosition(position);\n\n                    // Show tip\n\n                    this.tip.show();\n                })\n                .on('mouseout', (d, index) => {\n                    // Unexpand Plot\n                    this.drawingArea.select('.plot-' + index).attr('r', 4);\n\n                    // Hide tip\n                    this.tip.hide();\n                });\n        }\n    },\n\n    getChartMargin: function() {\n        var margin = this.settings.margin;\n\n        // Estimate the max width of y ticks and set it as the left margin\n\n        var values = this.getYTickValues();\n        var yTicksMaxWidth = 0;\n\n        $.each(values, (key, value) => {\n            var characterWidth = 8;\n\n            var formatter = this.getYFormatter();\n\n            var formattedValue = formatter(value);\n            var computedTickWidth = formattedValue.length * characterWidth;\n\n            if (computedTickWidth > yTicksMaxWidth) {\n                yTicksMaxWidth = computedTickWidth;\n            }\n        });\n\n        yTicksMaxWidth += 10;\n\n        margin.left = yTicksMaxWidth;\n\n        return margin;\n    },\n\n    getX: function(padded) {\n        var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomain = [xDomainMin, xDomainMax];\n\n        if (this.orientation === 'rtl') {\n            xDomain = [xDomainMax, xDomainMin];\n        }\n\n        var left = 0;\n        var right = 0;\n\n        if (padded) {\n            left = 0;\n            right = 0;\n        }\n\n        var x = d3.scaleTime().range([left, (this.width - right)]);\n\n        x.domain(xDomain);\n\n        return x;\n    },\n\n    getY: function() {\n        var yDomain = [0, this.getYMaxValue()];\n\n        var y = d3.scaleLinear().range([this.height, 0]);\n\n        y.domain(yDomain);\n\n        return y;\n    },\n\n    getXFormatter: function() {\n        var formatter;\n\n        if (this.settings.xAxis.formatter !== $.noop) {\n            formatter = this.settings.xAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYFormatter: function() {\n        var formatter;\n\n        if (this.settings.yAxis.formatter !== $.noop) {\n            formatter = this.settings.yAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYMaxValue: function() {\n        return d3.max(this.dataTable.rows, function(d) {\n            return d[1];\n        });\n    },\n\n    getYTickValues: function() {\n        var maxValue = this.getYMaxValue();\n\n        if (maxValue > 1) {\n            return [(maxValue / 2), maxValue];\n        } else {\n            return [0, maxValue];\n        }\n    }\n}, {\n    defaults: {\n        chartClass: 'area',\n        margin: {top: 25, right: 5, bottom: 25, left: 0},\n        plots: true,\n        tips: true,\n        xAxis: {\n            gridlines: false,\n            showAxis: true,\n            formatter: $.noop\n        },\n        yAxis: {\n            gridlines: true,\n            showAxis: false,\n            formatter: $.noop\n        }\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = `0${duration.hours}`;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = `0${duration.minutes}`;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = `0${duration.seconds}`;\n        }\n\n        return `${duration.hours}:${duration.minutes}:${duration.seconds}`;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(`${chartSettings.formats.shortDateFormats.day} %H:00:00`);\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.find('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .attr({\n                'aria-controls': this.$input.attr('id'),\n                'aria-label': Craft.t('app', 'Color picker'),\n            })\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorInput, 'click', function (ev) {\n            ev.stopPropagation();\n        });\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'input', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        let val = this.$input.val();\n\n        if (val !== (val = Craft.trim(val))) {\n            this.$input.val(val);\n        }\n\n        // Chop off the #\n        if (val.length && val[0] === '#') {\n            val = val.substr(1);\n            this.$input.val(val);\n        }\n\n        // If empty, set the preview to transparent\n        if (!val.length) {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Now normalize it for the UI stuff\n        if (val.length === 3) {\n            val = val[0].repeat(2) + val[1].repeat(2) + val[2].repeat(2);\n        }\n\n        if (val.match(/^[0-9a-f]{6}$/i)) {\n            this.$colorPreview.css('background-color', `#${val}`);\n            if (this.$colorInput) {\n                this.$colorInput.val(`#${val}`);\n            }\n        } else {\n            this.$colorPreview.css('background-color', '');\n        }\n    },\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function() {\n        if (Craft.ColorInput._browserSupportsColorInputs === null) {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend({\n    elementIndex: null,\n    $elementIndexSourcesContainer: null,\n\n    $sidebar: null,\n    $sourcesContainer: null,\n    $sourceSettingsContainer: null,\n    $newHeadingBtn: null,\n    $footer: null,\n    $footerBtnContainer: null,\n    $saveBtn: null,\n    $cancelBtn: null,\n    $saveSpinner: null,\n    $loadingSpinner: null,\n\n    sourceSort: null,\n    sources: null,\n    selectedSource: null,\n    updateSourcesOnSave: false,\n\n    availableTableAttributes: null,\n\n    init: function(elementIndex, settings) {\n        this.base();\n\n        this.setSettings(settings, {\n            resizable: true\n        });\n\n        this.elementIndex = elementIndex;\n        this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n        var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n        this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n        this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n        this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n        this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n        this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n        this.$newHeadingBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit add icon',\n            text: Craft.t('app', 'New heading'),\n        }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n        this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n        this.setContainer($container);\n        this.show();\n\n        var data = {\n            elementType: this.elementIndex.elementType\n        };\n\n        Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, (response, textStatus) => {\n            this.$loadingSpinner.remove();\n\n            if (textStatus === 'success') {\n                this.$saveBtn.removeClass('disabled');\n                this.buildModal(response);\n            }\n        });\n\n        this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n        this.addListener(this.$cancelBtn, 'click', 'hide');\n        this.addListener(this.$saveBtn, 'click', 'save');\n        this.addListener(this.$container, 'submit', 'save');\n    },\n\n    buildModal: function(response) {\n        // Store the available table attribute options\n        this.availableTableAttributes = response.availableTableAttributes;\n\n        // Create the source item sorter\n        this.sourceSort = new Garnish.DragSort({\n            handle: '.move',\n            axis: 'y',\n            onSortChange: () => {\n                this.updateSourcesOnSave = true;\n            },\n        });\n\n        // Create the sources\n        this.sources = [];\n\n        for (var i = 0; i < response.sources.length; i++) {\n            var source = this.addSource(response.sources[i]);\n            this.sources.push(source);\n        }\n\n        if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n            this.sources[0].select();\n        }\n    },\n\n    addSource: function(sourceData) {\n        var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n        var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n        var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n        $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n        var source;\n\n        // Is this a heading?\n        if (typeof sourceData.heading !== 'undefined') {\n            $item.addClass('heading');\n            $itemInput.attr('name', 'sourceOrder[][heading]');\n            source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.heading);\n        } else {\n            $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n            source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.label);\n\n            // Select this by default?\n            if ((this.elementIndex.sourceKey + '/').substr(0, sourceData.key.length + 1) === sourceData.key + '/') {\n                source.select();\n            }\n        }\n\n        this.sourceSort.addItems($item);\n\n        return source;\n    },\n\n    handleNewHeadingBtnClick: function() {\n        var source = this.addSource({\n            heading: ''\n        });\n\n        Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n        source.select();\n        this.updateSourcesOnSave = true;\n    },\n\n    save: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n            return;\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n        var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n        Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success' && response.success) {\n                // Have any changes been made to the source list?\n                if (this.updateSourcesOnSave) {\n                    if (this.$elementIndexSourcesContainer.length) {\n                        var $lastSource = null,\n                            $pendingHeading;\n\n                        for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                            var $item = this.sourceSort.$items.eq(i),\n                                source = $item.data('source'),\n                                $indexSource = source.getIndexSource();\n\n                            if (!$indexSource) {\n                                continue;\n                            }\n\n                            if (source.isHeading()) {\n                                $pendingHeading = $indexSource;\n                            } else {\n                                if ($pendingHeading) {\n                                    this.appendSource($pendingHeading, $lastSource);\n                                    $lastSource = $pendingHeading;\n                                    $pendingHeading = null;\n                                }\n\n                                this.appendSource($indexSource, $lastSource);\n                                $lastSource = $indexSource;\n                            }\n                        }\n\n                        // Remove any additional sources (most likely just old headings)\n                        if ($lastSource) {\n                            var $extraSources = $lastSource.nextAll();\n                            this.elementIndex.sourceSelect.removeItems($extraSources);\n                            $extraSources.remove();\n                        }\n                    }\n                }\n\n                // If a source is selected, have the element index select that one by default on the next request\n                if (this.selectedSource && this.selectedSource.sourceData.key) {\n                    this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                    this.elementIndex.updateElements();\n                }\n\n                Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                this.hide();\n            } else {\n                var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                Craft.cp.displayError(error);\n            }\n        });\n    },\n\n    appendSource: function($source, $lastSource) {\n        if (!$lastSource) {\n            $source.prependTo(this.$elementIndexSourcesContainer);\n        } else {\n            $source.insertAfter($lastSource);\n        }\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.sources.length; i++) {\n            this.sources[i].destroy();\n        }\n\n        delete this.sources;\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend({\n    modal: null,\n\n    $item: null,\n    $itemLabel: null,\n    $itemInput: null,\n    $settingsContainer: null,\n\n    sourceData: null,\n\n    init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n        this.modal = modal;\n        this.$item = $item;\n        this.$itemLabel = $itemLabel;\n        this.$itemInput = $itemInput;\n        this.sourceData = sourceData;\n\n        this.$item.data('source', this);\n\n        this.addListener(this.$item, 'click', 'select');\n    },\n\n    isHeading: function() {\n        return false;\n    },\n\n    isSelected: function() {\n        return (this.modal.selectedSource === this);\n    },\n\n    select: function() {\n        if (this.isSelected()) {\n            return;\n        }\n\n        if (this.modal.selectedSource) {\n            this.modal.selectedSource.deselect();\n        }\n\n        this.$item.addClass('sel');\n        this.modal.selectedSource = this;\n\n        if (!this.$settingsContainer) {\n            this.$settingsContainer = this.createSettings()\n                .appendTo(this.modal.$sourceSettingsContainer);\n        } else {\n            this.$settingsContainer.removeClass('hidden');\n        }\n\n        this.modal.$sourceSettingsContainer.scrollTop(0);\n    },\n\n    createSettings: function() {\n        return $('<div/>');\n    },\n\n    getIndexSource: function() {\n    },\n\n    deselect: function() {\n        this.$item.removeClass('sel');\n        this.modal.selectedSource = null;\n        this.$settingsContainer.addClass('hidden');\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.text(val);\n    },\n\n    destroy: function() {\n        this.$item.data('source', null);\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend({\n    createSettings: function() {\n        let $settings = $('<div/>').append(Craft.ui.createTextField({\n            label: Craft.t('app', 'Header Column Heading'),\n            id: 'defaultHeaderColHeading' + Math.floor(Math.random() * 100000),\n            name: `sources[${this.sourceData.key}][headerColHeading]`,\n            value: this.sourceData.headerColHeading,\n            placeholder: this.sourceData.defaultHeaderColHeading,\n        }));\n\n        if (this.sourceData.tableAttributes.length) {\n            $settings.append(this.createTableColumnsField());\n        }\n\n        return $settings;\n    },\n\n    createTableColumnsField: function() {\n        // Create the title column option\n        let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n        let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n        // Create the rest of the options\n        let $columnCheckboxes = $('<div/>');\n        let selectedAttributes = [firstKey];\n\n        $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n        // Add the selected columns, in the selected order\n        for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n            let [key, label] = this.sourceData.tableAttributes[i];\n            $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n            selectedAttributes.push(key);\n        }\n\n        // Add the rest\n        let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n        availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n        for (let i = 0; i < availableTableAttributes.length; i++) {\n            let [key, label] = availableTableAttributes[i];\n            if (!Craft.inArray(key, selectedAttributes)) {\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n            }\n        }\n\n        new Garnish.DragSort($columnCheckboxes.children(), {\n            handle: '.move',\n            axis: 'y'\n        });\n\n        return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n            label: Craft.t('app', 'Table Columns'),\n            instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n        });\n    },\n\n    createTableColumnOption: function(key, label, first, checked) {\n        var $option = $('<div class=\"customize-sources-table-column\"/>')\n            .append('<div class=\"icon move\"/>')\n            .append(\n                Craft.ui.createCheckbox({\n                    label: Craft.escapeHtml(label),\n                    name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                    value: key,\n                    checked: checked,\n                    disabled: first\n                })\n            );\n\n        if (first) {\n            $option.children('.move').addClass('disabled');\n        }\n\n        return $option;\n    },\n\n    getIndexSource: function() {\n        var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n        if ($source) {\n            return $source.closest('li');\n        }\n    }\n});\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend({\n    $labelField: null,\n    $labelInput: null,\n    $deleteBtn: null,\n\n    isHeading: function() {\n        return true;\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.trigger('focus');\n    },\n\n    createSettings: function() {\n        let $settings = $('<div/>');\n\n        this.$labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Heading'),\n            instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n            value: this.sourceData.heading\n        }).appendTo($settings);\n\n        this.$labelInput = this.$labelField.find('.text');\n\n        $settings.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n            .appendTo($settings);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n        return $settings;\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n        this.$itemInput.val(val);\n    },\n\n    deleteHeading: function() {\n        this.modal.sourceSort.removeItems(this.$item);\n        this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n        this.modal.updateSourcesOnSave = true;\n\n        if (this.isSelected()) {\n            this.deselect();\n\n            if (this.modal.sources.length) {\n                this.modal.sources[0].select();\n            }\n        }\n\n        this.$item.remove();\n        this.$settingsContainer.remove();\n        this.destroy();\n    },\n\n    getIndexSource: function() {\n        var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n        return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend({\n    $table: null,\n\n    init: function(table, settings) {\n        this.$table = $(table);\n        var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n        settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n        settings.container = this.$table.children('tbody');\n        settings.helper = this.getHelper.bind(this);\n        settings.caboose = '<tr/>';\n        settings.axis = Garnish.Y_AXIS;\n        settings.magnetStrength = 4;\n        settings.helperLagBase = 1.5;\n\n        this.base($rows, settings);\n    },\n\n    getHelper: function($helperRow) {\n        var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n            $table = $('<table/>').appendTo($helper),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the table width and classes\n        $table.width(this.$table.width());\n        $table.prop('className', this.$table.prop('className'));\n\n        // Copy the column widths\n        var $firstRow = this.$table.find('tr:first'),\n            $cells = $firstRow.children(),\n            $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            $($helperCells[i]).width($($cells[i]).width());\n        }\n\n        return $helper;\n    }\n}, {\n    defaults: {\n        handle: '.move',\n        helperClass: 'datatablesorthelper'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend({\n    id: null,\n    userId: null,\n\n    $deleteActionRadios: null,\n    $deleteSpinner: null,\n\n    userSelect: null,\n    _deleting: false,\n\n    init: function(userId, settings) {\n        this.id = Math.floor(Math.random() * 1000000000);\n        this.userId = userId;\n        settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n        let $form = $(\n            '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n            Craft.getCsrfInput() +\n            '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n            (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n            (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n            '</form>'\n        ).appendTo(Garnish.$bod);\n        let $body = $(\n            '<div class=\"body\">' +\n            '<div class=\"content-summary\">' +\n            '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n            '<ul class=\"bullets\"></ul>' +\n            '</div>' +\n            '<div class=\"options\">' +\n            '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n            '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n            '<div class=\"elements\"></div>' +\n            '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n            '</div>' +\n            '</div>' +\n            '<div>' +\n            '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n            '</div>' +\n            '</div>'\n        ).appendTo($form);\n        let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo($buttons);\n\n        if (settings.contentSummary.length) {\n            for (let i = 0; i < settings.contentSummary.length; i++) {\n                $body.find('ul').append($('<li/>', {text: settings.contentSummary[i]}));\n            }\n        } else {\n            $body.find('ul').remove();\n        }\n\n        this.$deleteActionRadios = $body.find('input[type=radio]');\n        this.$deleteSubmitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: this._submitBtnLabel(false),\n        }).appendTo($buttons);\n        this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n        var idParam;\n\n        if (Garnish.isArray(this.userId)) {\n            idParam = ['and'];\n\n            for (let i = 0; i < this.userId.length; i++) {\n                idParam.push('not ' + this.userId[i]);\n            }\n        } else {\n            idParam = 'not ' + this.userId;\n        }\n\n        this.userSelect = new Craft.BaseElementSelectInput({\n            id: 'transferselect' + this.id,\n            name: 'transferContentTo',\n            elementType: 'craft\\\\elements\\\\User',\n            criteria: {\n                id: idParam\n            },\n            limit: 1,\n            modalSettings: {\n                closeOtherModals: false\n            },\n            onSelectElements: () => {\n                this.updateSizeAndPosition();\n\n                if (!this.$deleteActionRadios.first().prop('checked')) {\n                    this.$deleteActionRadios.first().trigger('click');\n                } else {\n                    this.validateDeleteInputs();\n                }\n            },\n            onRemoveElements: this.validateDeleteInputs.bind(this),\n            selectable: false,\n            editable: false\n        });\n\n        this.addListener($cancelBtn, 'click', 'hide');\n\n        this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n        this.addListener($form, 'submit', 'handleSubmit');\n\n        this.base($form, settings);\n    },\n\n    _submitBtnLabel: function(withContent) {\n        let message = withContent\n            ? 'Delete {num, plural, =1{user} other{users}} and content'\n            : 'Delete {num, plural, =1{user} other{users}}';\n\n        return Craft.t('app', message, {\n            num: Garnish.isArray(this.userId) ? this.userId.length : 1,\n        });\n    },\n\n    validateDeleteInputs: function() {\n        var validates = false;\n\n        if (this.$deleteActionRadios.eq(1).prop('checked')) {\n            validates = true;\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(true));\n        } else {\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(false));\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n        }\n\n        this.updateSizeAndPosition();\n\n        if (validates) {\n            this.$deleteSubmitBtn.removeClass('disabled');\n        } else {\n            this.$deleteSubmitBtn.addClass('disabled');\n        }\n\n        return validates;\n    },\n\n    handleSubmit: function(ev) {\n        if (this._deleting || !this.validateDeleteInputs()) {\n            ev.preventDefault();\n            return;\n        }\n\n        this.$deleteSubmitBtn.addClass('active');\n        this.$deleteSpinner.removeClass('hidden');\n        this.disable();\n        this.userSelect.disable();\n        this._deleting = true;\n\n        // Let the onSubmit callback prevent the form from getting submitted\n        try {\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        } catch (e) {\n            ev.preventDefault();\n            this.$deleteSpinner.addClass('hidden');\n            throw e;\n        }\n    },\n\n    onFadeIn: function() {\n        // Auto-focus the first radio\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$deleteActionRadios.first().trigger('focus');\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        contentSummary: [],\n        onSubmit: $.noop,\n        redirect: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend({\n    $revisionBtn: null,\n    $revisionLabel: null,\n    $spinner: null,\n    $expandSiteStatusesBtn: null,\n    $statusIcon: null,\n\n    $editMetaBtn: null,\n    metaHud: null,\n    $nameTextInput: null,\n    $saveMetaBtn: null,\n\n    $siteStatusPane: null,\n    $globalLightswitch: null,\n    $siteLightswitches: null,\n    $addlSiteField: null,\n\n    siteIds: null,\n    newSiteIds: null,\n\n    lastSerializedValue: null,\n    listeningForChanges: false,\n    pauseLevel: 0,\n    timeout: null,\n    saving: false,\n    saveXhr: null,\n    queue: null,\n    submittingForm: false,\n\n    duplicatedElements: null,\n    errors: null,\n\n    openingPreview: false,\n    preview: null,\n    previewToken: null,\n    createdProvisionalDraft: false,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.DraftEditor.defaults);\n\n        this.queue = [];\n        this.duplicatedElements = {};\n\n        this.siteIds = Object.keys(this.settings.siteStatuses).map(siteId => {\n            return parseInt(siteId)\n        });\n\n        this.$revisionBtn = $('#context-btn');\n        this.$revisionLabel = $('#revision-label');\n        this.$spinner = $('#revision-spinner');\n        this.$expandSiteStatusesBtn = $('#expand-status-btn');\n        this.$statusIcon = $('#revision-status');\n\n        if (this.settings.canEditMultipleSites) {\n            this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n        }\n\n        if (this.settings.previewTargets.length) {\n            if (this.settings.enablePreview) {\n                this.addListener($('#preview-btn'), 'click', 'openPreview');\n            }\n\n            const $shareBtn = $('#share-btn');\n\n            if (this.settings.previewTargets.length === 1) {\n                this.addListener($shareBtn, 'click', function() {\n                    this.openShareLink(this.settings.previewTargets[0].url);\n                });\n            } else {\n                this.createShareMenu($shareBtn);\n            }\n        }\n\n        // If this is a revision, we're done here\n        if (this.settings.revisionId) {\n            return;\n        }\n\n        // Override the serializer to use our own\n        Craft.cp.$primaryForm.data('serializer', () => this.serializeForm(true));\n\n        this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n        if (this.settings.isProvisionalDraft) {\n            this.initForProvisionalDraft();\n        } else if (this.settings.draftId && !this.settings.isUnpublishedDraft) {\n            this.initForDraft();\n        } else if (!this.settings.canUpdateSource) {\n            // Override the save shortcut to create a draft too\n            this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', ev => {\n                if (ev.saveShortcut) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }\n            });\n        }\n\n        if (Craft.autosaveDrafts) {\n            this.listenForChanges();\n        }\n\n        this.addListener(this.$statusIcon, 'click', () => {\n            this.showStatusHud(this.$statusIcon);\n        });\n    },\n\n    listenForChanges: function() {\n        if (this.listeningForChanges || this.pauseLevel > 0 || !Craft.autosaveDrafts) {\n            return;\n        }\n\n        this.listeningForChanges = true;\n\n        this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n            if ($(ev.target).is(this.statusIcons())) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            // If they are typing, wait half a second before checking the form\n            if (['keypress', 'keyup', 'change'].includes(ev.type)) {\n                this.timeout = setTimeout(this.checkForm.bind(this), 500);\n            } else {\n                this.checkForm();\n            }\n        });\n    },\n\n    stopListeningForChanges: function() {\n        if (!this.listeningForChanges) {\n            return;\n        }\n\n        this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n        clearTimeout(this.timeout);\n        this.listeningForChanges = false;\n    },\n\n    pause: function() {\n        this.pauseLevel++;\n        this.stopListeningForChanges();\n    },\n\n    resume: function() {\n        if (this.pauseLevel === 0) {\n            throw 'Craft.DraftEditor::resume() should only be called after pause().';\n        }\n\n        // Only actually resume operation if this has been called the same\n        // number of times that pause() was called\n        this.pauseLevel--;\n        if (this.pauseLevel === 0) {\n            if (Craft.autosaveDrafts) {\n                this.checkForm();\n            }\n            this.listenForChanges();\n        }\n    },\n\n    initForProvisionalDraft: function() {\n        let $button = $('#discard-changes');\n        if (!$button.length) {\n            $button = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu.$container.find('#discard-changes') : null;\n        }\n        if ($button && $button.length) {\n            this.addListener($button, 'click', () => {\n                if (confirm(Craft.t('app', 'Are you sure you want to discard your changes?'))) {\n                    Craft.submitForm(Craft.cp.$primaryForm, {\n                        action: this.settings.deleteDraftAction,\n                        redirect: this.settings.hashedCpEditUrl,\n                        params: {\n                            draftId: this.settings.draftId,\n                            provisional: this.settings.isProvisionalDraft,\n                        },\n                    });\n                }\n            });\n        }\n    },\n\n    initForDraft: function() {\n        // Create the edit draft button\n        this.createEditMetaBtn();\n\n        if (this.settings.canUpdateSource) {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n                alt: true\n            }, () => {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.publishDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }, 0);\n        }\n    },\n\n    expandSiteStatuses: function() {\n        this.removeListener(this.$expandSiteStatusesBtn, 'click');\n        this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', () => {\n            this.$expandSiteStatusesBtn.remove();\n        });\n\n        const $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n        this.$siteStatusPane = $enabledForSiteField.parent();\n\n        // If this is a revision, just show the site statuses statically and be done\n        if (this.settings.revisionId) {\n            this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n            return;\n        }\n\n        $enabledForSiteField.addClass('nested');\n        const $globalField = Craft.ui.createLightswitchField({\n            id: 'enabled',\n            label: Craft.t('app', 'Enabled'),\n            name: 'enabled',\n        }).insertBefore($enabledForSiteField);\n        $globalField.find('label').css('font-weight', 'bold');\n        this.$globalLightswitch = $globalField.find('.lightswitch');\n\n        if (!this.settings.revisionId) {\n            this._showField($globalField);\n        }\n\n        // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n        const originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n            ? '1'\n            : (this.settings.enabledForSite ? '-' : '');\n        const originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n            '=' + (this.settings.enabledForSite ? '1' : '');\n\n        this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n            .on('change', this._updateGlobalStatus.bind(this));\n\n        this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n\n        let serializedStatuses = `enabled=${originalEnabledValue}`;\n        for (let i = 0; i < this.$siteLightswitches.length; i++) {\n            const $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n            serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n        }\n\n        Craft.cp.$primaryForm.data('initialSerializedValue',\n            Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n        // Are there additional sites that can be added?\n        if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n            this._createAddlSiteField();\n        }\n\n        this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n        this._updateGlobalStatus();\n    },\n\n    /**\n     * @returns {Array}\n     */\n    _getOtherSupportedSites: function() {\n        return Craft.sites.filter(s => s.id != this.settings.siteId && this.siteIds.includes(s.id));\n    },\n\n    _showField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .height(0)\n            .velocity({height}, 'fast', () => {\n                $field.css({\n                    overflow: '',\n                    height: '',\n                });\n            });\n    },\n\n    _removeField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .velocity({height: 0}, 'fast', () => {\n                $field.remove();\n            });\n    },\n\n    _updateGlobalStatus: function() {\n        let allEnabled = true, allDisabled = true;\n        this.$siteLightswitches.each(function() {\n            const enabled = $(this).data('lightswitch').on;\n            if (enabled) {\n                allDisabled = false;\n            } else {\n                allEnabled = false;\n            }\n            if (!allEnabled && !allDisabled) {\n                return false;\n            }\n        });\n        if (allEnabled) {\n            this.$globalLightswitch.data('lightswitch').turnOn(true);\n        } else if (allDisabled) {\n            this.$globalLightswitch.data('lightswitch').turnOff(true);\n        } else {\n            this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n        }\n    },\n\n    _updateSiteStatuses: function() {\n        const enabled = this.$globalLightswitch.data('lightswitch').on;\n        this.$siteLightswitches.each(function() {\n            if (enabled) {\n                $(this).data('lightswitch').turnOn(true);\n            } else {\n                $(this).data('lightswitch').turnOff(true);\n            }\n        });\n    },\n\n    _createSiteStatusField: function(site) {\n        const $field = Craft.ui.createLightswitchField({\n            id: `enabledForSite-${site.id}`,\n            label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n            name: `enabledForSite[${site.id}]`,\n            on: this.settings.siteStatuses.hasOwnProperty(site.id)\n                ? this.settings.siteStatuses[site.id]\n                : true,\n            disabled: !!this.settings.revisionId,\n        });\n\n        if (this.$addlSiteField) {\n            $field.insertBefore(this.$addlSiteField);\n        } else {\n            $field.appendTo(this.$siteStatusPane);\n        }\n\n        if (!this.settings.revisionId) {\n            $field.addClass('nested');\n            const $lightswitch = $field.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n        }\n\n        this._showField($field);\n\n        return $field;\n    },\n\n    _createAddlSiteField: function() {\n        const addlSites = Craft.sites.filter(s => {\n            return !this.siteIds.includes(s.id) && this.settings.addlSiteIds.includes(s.id);\n        });\n\n        if (!addlSites.length) {\n            return;\n        }\n\n        const $addlSiteSelectContainer = Craft.ui.createSelect({\n            options: [\n                {label: Craft.t('app', 'Add a site…')},\n                ...addlSites.map(s => {\n                    return {label: s.name, value: s.id};\n                }),\n            ],\n        }).addClass('fullwidth');\n\n        this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n            .addClass('nested add')\n            .appendTo(this.$siteStatusPane);\n\n        const $addlSiteSelect = $addlSiteSelectContainer.find('select');\n\n        $addlSiteSelect.on('change', () => {\n            const siteId = parseInt($addlSiteSelect.val());\n            const site = Craft.sites.find(s => s.id === siteId);\n\n            if (!site) {\n                return;\n            }\n\n            this._createSiteStatusField(site);\n\n            $addlSiteSelect\n                .val('')\n                .find(`option[value=\"${siteId}\"]`).remove();\n\n            if (this.newSiteIds === null) {\n                this.newSiteIds = [];\n            }\n\n            this.siteIds.push(siteId);\n            this.newSiteIds.push(siteId);\n\n            // Was that the last site?\n            if ($addlSiteSelect.find('option').length === 1) {\n                this._removeField(this.$addlSiteField);\n            }\n        });\n\n        this._showField(this.$addlSiteField);\n    },\n\n    showStatusHud: function(target) {\n        let bodyHtml;\n\n        if (this.errors === null) {\n            bodyHtml = `<p>${this._saveSuccessMessage()}</p>`;\n        } else {\n            bodyHtml = `<p class=\"error\">${this._saveFailMessage()}</p>`;\n\n            if (this.errors.length) {\n                bodyHtml += '<ul class=\"errors\">' +\n                    this.errors.map(e => `<li>${Craft.escapeHtml(e)}</li>`).join('') +\n                    '</ul>';\n            }\n        }\n\n        const hud = new Garnish.HUD(target, bodyHtml, {\n            onHide: function() {\n                hud.destroy();\n            }\n        });\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveSuccessMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes have been stored.')\n            : Craft.t('app', 'The draft has been saved.');\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveFailMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes could not be stored.')\n            : Craft.t('app', 'The draft could not be saved.');\n    },\n\n    spinners: function() {\n        return this.preview\n            ? this.$spinner.add(this.preview.$spinner)\n            : this.$spinner;\n    },\n\n    statusIcons: function() {\n        return this.preview\n            ? this.$statusIcon.add(this.preview.$statusIcon)\n            : this.$statusIcon;\n    },\n\n    createEditMetaBtn: function() {\n        this.$editMetaBtn = $('<button/>', {\n            type: 'button',\n            'class': 'btn edit icon',\n            title: Craft.t('app', 'Edit draft settings'),\n        }).appendTo($('#context-btngroup'));\n        this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n    },\n\n    createShareMenu: function($shareBtn) {\n        $shareBtn.addClass('menubtn');\n\n        const $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n        const $ul = $('<ul/>').appendTo($menu);\n\n        this.settings.previewTargets.forEach(target => {\n            const $li = $('<li/>').appendTo($ul);\n            const $a = $('<a/>', {\n                text: target.label,\n            }).appendTo($li);\n            this.addListener($a, 'click', () => {\n                this.openShareLink(target.url);\n            });\n        });\n    },\n\n    getPreviewToken: function() {\n        return new Promise((resolve, reject) => {\n            if (this.previewToken) {\n                resolve(this.previewToken);\n                return;\n            }\n\n            Craft.sendActionRequest('POST', 'preview/create-token', {\n                data: {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                    provisional: this.settings.isProvisionalDraft,\n                },\n            }).then(response => {\n                this.previewToken = response.data.token;\n                resolve(this.previewToken);\n            }).catch(reject);\n        });\n    },\n\n    getTokenizedPreviewUrl: function(url, randoParam) {\n        return new Promise((resolve, reject) => {\n            const params = {};\n\n            if (randoParam || !this.settings.isLive) {\n                // Randomize the URL so CDNs don't return cached pages\n                params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n            }\n\n            if (this.settings.siteToken) {\n                params[Craft.siteToken] = this.settings.siteToken;\n            }\n\n            // No need for a token if we're looking at a live element\n            if (this.settings.isLive) {\n                resolve(Craft.getUrl(url, params));\n                return;\n            }\n\n            this.getPreviewToken().then(function(token) {\n                params[Craft.tokenParam] = token;\n                resolve(Craft.getUrl(url, params));\n            }).catch(reject);\n        });\n    },\n\n    openShareLink: function(url) {\n        this.getTokenizedPreviewUrl(url).then(function(url) {\n            window.open(url);\n        });\n    },\n\n    getPreview: function() {\n        if (!this.preview) {\n            this.preview = new Craft.Preview(this);\n        }\n        return this.preview;\n    },\n\n    openPreview: function() {\n        return new Promise((resolve, reject) => {\n            this.openingPreview = true;\n            this.ensureIsDraftOrRevision(true)\n                .then(() => {\n                    this.getPreview().open();\n                    this.openingPreview = false;\n                    resolve();\n                })\n                .catch(reject);\n        })\n    },\n\n    ensureIsDraftOrRevision: function(onlyIfChanged) {\n        return new Promise((resolve, reject) => {\n            if (!this.settings.draftId && !this.settings.revisionId) {\n                if (\n                    onlyIfChanged &&\n                    this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                ) {\n                    resolve();\n                    return;\n                }\n\n                this.createDraft()\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                resolve();\n            }\n        });\n    },\n\n    serializeForm: function(removeActionParams) {\n        let data = Craft.cp.$primaryForm.serialize();\n\n        if (this.isPreviewActive()) {\n            // Replace the temp input with the preview form data\n            data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n        }\n\n        if (removeActionParams && !this.settings.isUnpublishedDraft) {\n            // Remove action and redirect params\n            data = data.replace(/&action=[^&]*/, '');\n            data = data.replace(/&redirect=[^&]*/, '');\n        }\n\n        return data;\n    },\n\n    checkForm: function(force) {\n        // If this isn't a draft and there's no active preview, then there's nothing to check\n        if (this.settings.revisionId || this.pauseLevel > 0) {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.timeout = null;\n\n        // Has anything changed?\n        const data = this.serializeForm(true);\n        if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n            const provisional = (!this.settings.draftId || this.settings.isProvisionalDraft) && !this.settings.revisionId;\n            this.saveDraft(data, provisional);\n        }\n    },\n\n    isPreviewActive: function() {\n        return this.preview && this.preview.isActive;\n    },\n\n    createDraft: function() {\n        return new Promise((resolve, reject) => {\n            this.saveDraft(this.serializeForm(true))\n                .then(resolve)\n                .catch(reject);\n        });\n    },\n\n    /**\n     * @param {object} data\n     * @returns {Promise<unknown>}\n     */\n    saveDraft: function(data) {\n        return new Promise((resolve, reject) => {\n            // Ignore if we're already submitting the main form\n            if (this.submittingForm) {\n                reject();\n                return;\n            }\n\n            if (this.saving) {\n                this.queue.push(() => {\n                    this.checkForm()\n                });\n                return;\n            }\n\n            this.lastSerializedValue = data;\n            this.saving = true;\n            const $spinners = this.spinners().removeClass('hidden');\n            const $statusIcons = this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('invisible checkmark-icon alert-icon fade-out')\n                .addClass('hidden');\n            if (this.$saveMetaBtn) {\n                this.$saveMetaBtn.addClass('active');\n            }\n            this.errors = null;\n\n            const url = Craft.getActionUrl(this.settings.saveDraftAction);\n            let preparedData = this.prepareData(data);\n\n            // Are we saving a provisional draft?\n            if (this.settings.isProvisionalDraft || !this.settings.draftId) {\n                preparedData += '&provisional=1';\n            }\n\n            this.saveXhr = Craft.postActionRequest(url, preparedData, (response, textStatus) => {\n                $spinners.addClass('hidden');\n                if (this.$saveMetaBtn) {\n                    this.$saveMetaBtn.removeClass('active');\n                }\n                this.saving = false;\n\n                if (textStatus === 'abort') {\n                    return;\n                }\n\n                if (textStatus !== 'success' || response.errors) {\n                    this.errors = (response ? response.errors : null) || [];\n                    $statusIcons\n                        .velocity('stop')\n                        .css('opacity', '')\n                        .removeClass('hidden checkmark-icon')\n                        .addClass('alert-icon')\n                        .attr('title', this._saveFailMessage());\n                    reject();\n                    return;\n                }\n\n                const createdProvisionalDraft = !this.settings.draftId;\n\n                if (createdProvisionalDraft) {\n                    this.settings.isProvisionalDraft = true;\n                    this.createdProvisionalDraft = true;\n                }\n\n                if (response.title) {\n                    $('#header h1').text(response.title);\n                }\n\n                if (response.docTitle) {\n                    document.title = response.docTitle;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        this.$revisionLabel.append(\n                            $('<span/>', {\n                                class: 'extralight',\n                                text: ` — ${Craft.t('app', 'Edited')}`,\n                            })\n                        );\n                    }\n                } else {\n                    this.$revisionLabel.text(response.draftName);\n                    this.settings.draftName = response.draftName;\n                }\n\n                let revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                // Did we just add a site?\n                if (this.newSiteIds) {\n                    // Do we need to create the revision menu?\n                    if (!revisionMenu) {\n                        this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                        new Garnish.MenuBtn(this.$revisionBtn);\n                        revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                        revisionMenu.$container.removeClass('hidden');\n                    }\n                    this.newSiteIds.forEach(siteId => {\n                        const $option = revisionMenu.$options.filter(`[data-site-id=${siteId}]`);\n                        $option.find('.status').removeClass('disabled').addClass('enabled');\n                        const $li = $option.parent().removeClass('hidden');\n                        $li.closest('.site-group').removeClass('hidden');\n                    });\n                    revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                    this.newSiteIds = null;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        // Replace the action\n                        const $actionInput = $('#action').attr('value', this.settings.publishDraftAction);\n\n                        // Update the editor settings\n                        this.settings.draftId = response.draftId;\n                        this.settings.isLive = false;\n                        this.previewToken = null;\n\n                        if (revisionMenu) {\n                            // Add edited description to the “Current” option\n                            revisionMenu.$container.find('#current-revision').append(\n                                $('<div/>', {\n                                    class: 'edited-desc',\n                                }).append(\n                                    $('<p/>', {\n                                        text: Craft.t('app', 'Showing your unsaved changes.'),\n                                    })\n                                ).append(\n                                    $('<button/>', {\n                                        id: 'discard-changes',\n                                        class: 'btn',\n                                        text: Craft.t('app', 'Discard changes'),\n                                    })\n                                )\n                            );\n                        }\n\n                        this.initForProvisionalDraft();\n                    }\n                } else if (revisionMenu) {\n                    revisionMenu.$options.filter('.sel').find('.draft-name').text(response.draftName);\n                    revisionMenu.$options.filter('.sel').find('.draft-meta').text(response.creator\n                        ? Craft.t('app', 'Saved {timestamp} by {creator}', {\n                            timestamp: response.timestamp,\n                            creator: response.creator\n                        })\n                        : Craft.t('app', 'Saved {timestamp}', {\n                            timestamp: response.timestamp,\n                        })\n                    );\n                }\n\n                // Did the controller send us updated preview targets?\n                if (\n                    response.previewTargets &&\n                    JSON.stringify(response.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                ) {\n                    this.updatePreviewTargets(response.previewTargets);\n                }\n\n                this.afterUpdate(data);\n\n                if (createdProvisionalDraft) {\n                    this.trigger('createProvisionalDraft');\n                }\n\n                if (this.$nameTextInput) {\n                    this.checkMetaValues();\n                }\n\n                for (const oldId in response.duplicatedElements) {\n                    if (oldId != this.settings.sourceId && response.duplicatedElements.hasOwnProperty(oldId)) {\n                        this.duplicatedElements[oldId] = response.duplicatedElements[oldId];\n                    }\n                }\n\n                resolve();\n            });\n        });\n    },\n\n    /**\n     * @param {string} data\n     * @returns {string}\n     */\n    prepareData: function(data) {\n        // Swap out element IDs with their duplicated ones\n        data = this.swapDuplicatedElementIds(data);\n\n        // Add the draft info\n        if (this.settings.draftId) {\n            data += `&draftId=${this.settings.draftId}`;\n            if (this.settings.isProvisionalDraft) {\n                data += '&provisional=1';\n            }\n        }\n\n        if (this.settings.draftName !== null) {\n            data += `&draftName=${this.settings.draftName}`;\n        }\n\n        // Filter out anything that hasn't changed\n        const initialData = this.swapDuplicatedElementIds(Craft.cp.$primaryForm.data('initialSerializedValue'));\n        return Craft.findDeltaData(initialData, data, this.getDeltaNames());\n    },\n\n    /**\n     * @param {string} data\n     * @returns {string}\n     */\n    swapDuplicatedElementIds: function(data) {\n        const idsRE = Object.keys(this.duplicatedElements).join('|');\n        if (idsRE === '') {\n            return data;\n        }\n        const lb = encodeURIComponent('[');\n        const rb = encodeURIComponent(']');\n        // Keep replacing field IDs until data stops changing\n        while (true) {\n            if (data === (\n                data = data\n                    // &fields[...][X]\n                    .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                        return pre + this.duplicatedElements[id] + post;\n                    })\n                    // &fields[...=X\n                    .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                        return pre + this.duplicatedElements[id];\n                    })\n            )) {\n                break;\n            }\n        }\n        return data;\n    },\n\n    getDeltaNames: function() {\n        const deltaNames = Craft.deltaNames.slice(0);\n        for (let i = 0; i < deltaNames.length; i++) {\n            for (const oldId in this.duplicatedElements) {\n                if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                    deltaNames[i] = deltaNames[i].replace('][' + oldId + ']', '][' + this.duplicatedElements[oldId] + ']');\n                }\n            }\n        }\n        return deltaNames;\n    },\n\n    updatePreviewTargets: function(previewTargets) {\n        previewTargets.forEach(newTarget => {\n            const currentTarget = this.settings.previewTargets.find(t => t.label === newTarget.label);\n            if (currentTarget) {\n                currentTarget.url = newTarget.url;\n            }\n        });\n    },\n\n    afterUpdate: function(data) {\n        Craft.cp.$primaryForm.data('initialSerializedValue', data);\n        Craft.initialDeltaValues = {};\n        const $statusIcons = this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden')\n            .addClass('checkmark-icon')\n            .attr('title', this._saveSuccessMessage());\n\n        if (!Craft.autosaveDrafts) {\n            // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n            $statusIcons\n                .velocity('stop')\n                .velocity({\n                    opacity: 0,\n                }, {\n                    delay: 2000,\n                    complete: () => {\n                        $statusIcons.addClass('hidden');\n                    },\n                });\n        }\n\n        this.trigger('update');\n\n        this.nextInQueue();\n    },\n\n    nextInQueue: function() {\n        if (this.queue.length) {\n            this.queue.shift()();\n        }\n    },\n\n    showMetaHud: function() {\n        if (!this.metaHud) {\n            this.createMetaHud();\n            this.onMetaHudShow();\n        } else {\n            this.metaHud.show();\n        }\n\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$nameTextInput.trigger('focus');\n        }\n    },\n\n    createMetaHud: function() {\n        const $hudBody = $('<div/>');\n\n        // Add the Name field\n        const $nameField = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n        const $nameInputContainer = $('<div class=\"input\"/>').appendTo($nameField);\n        this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($nameInputContainer).val(this.settings.draftName);\n\n        // HUD footer\n        const $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n        $('<div class=\"flex-grow\"></div>').appendTo($footer);\n        this.$saveMetaBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo($footer);\n\n        this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n            onSubmit: this.saveMeta.bind(this)\n        });\n\n        this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n\n        this.metaHud.on('show', this.onMetaHudShow.bind(this));\n        this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n        this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n    },\n\n    onMetaHudShow: function() {\n        this.$editMetaBtn.addClass('active');\n    },\n\n    onMetaHudHide: function() {\n        this.$editMetaBtn.removeClass('active');\n    },\n\n    onMetaHudEscape: function() {\n        this.$nameTextInput.val(this.settings.draftName);\n    },\n\n    checkMetaValues: function() {\n        if (\n            this.$nameTextInput.val() &&\n            this.$nameTextInput.val() !== this.settings.draftName\n        ) {\n            this.$saveMetaBtn.removeClass('disabled');\n            return true;\n        }\n\n        this.$saveMetaBtn.addClass('disabled');\n        return false;\n    },\n\n    shakeMetaHud: function() {\n        Garnish.shake(this.metaHud.$hud);\n    },\n\n    saveMeta: function() {\n        if (!this.checkMetaValues()) {\n            this.shakeMetaHud();\n            return;\n        }\n\n        this.settings.draftName = this.$nameTextInput.val();\n\n        this.metaHud.hide();\n        this.checkForm(true);\n    },\n\n    handleFormSubmit: function(ev) {\n        ev.preventDefault();\n\n        // Prevent double form submits\n        if (this.submittingForm) {\n            return;\n        }\n\n        // If this a draft and was this a normal save (either via submit button or save shortcut),\n        // then trigger an autosave\n        if (\n            this.settings.draftId &&\n            !this.settings.isProvisionalDraft &&\n            (typeof ev.autosave === 'undefined' || ev.autosave) &&\n            (ev.saveShortcut || (ev.customTrigger && ev.customTrigger.data('action') === this.settings.saveDraftAction))\n        ) {\n            this.checkForm(true);\n            return;\n        }\n\n        // Prevent the normal unload confirmation dialog\n        Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n        // Abort the current save request if there is one\n        if (this.saving) {\n            this.saveXhr.abort();\n        }\n\n        // Duplicate the form with normalized data\n        const data = this.prepareData(this.serializeForm(false));\n        const $form = Craft.createForm(data);\n\n        $form.appendTo(Garnish.$bod);\n        $form.submit();\n        this.submittingForm = true;\n    },\n}, {\n    defaults: {\n        elementType: null,\n        sourceId: null,\n        siteId: null,\n        isUnpublishedDraft: false,\n        enabled: false,\n        enabledForSite: false,\n        isLive: false,\n        isProvisionalDraft: false,\n        siteStatuses: null,\n        addlSiteIds: [],\n        cpEditUrl: null,\n        draftId: null,\n        revisionId: null,\n        draftName: null,\n        canEditMultipleSites: false,\n        canUpdateSource: false,\n        saveDraftAction: null,\n        deleteDraftAction: null,\n        publishDraftAction: null,\n        hashedCpEditUrl: null,\n        hashedAddAnotherRedirectUrl: null,\n        enablePreview: false,\n        previewTargets: [],\n        siteToken: null,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend({\n    callback: $.noop,\n\n    init: function(source, target, callback) {\n        this.callback = callback;\n        this.base(source, target);\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return this.callback(sourceVal);\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend({\n    initialized: false,\n\n    id: null,\n    baseName: null,\n    columns: null,\n    sorter: null,\n    biggestId: -1,\n\n    $table: null,\n    $tbody: null,\n    $addRowBtn: null,\n\n    rowCount: 0,\n    hasMaxRows: false,\n    hasMinRows: false,\n\n    radioCheckboxes: null,\n\n    init: function(id, baseName, columns, settings) {\n        this.id = id;\n        this.baseName = baseName;\n        this.columns = columns;\n        this.setSettings(settings, Craft.EditableTable.defaults);\n        this.radioCheckboxes = {};\n\n        this.$table = $('#' + id);\n        this.$tbody = this.$table.children('tbody');\n        this.rowCount = this.$tbody.find('tr').length;\n\n        // Is this already an editable table?\n        if (this.$table.data('editable-table')) {\n            Garnish.log('Double-instantiating an editable table on an element');\n            this.$table.data('editable-table').destroy();\n        }\n\n        this.$table.data('editable-table', this);\n\n        this.sorter = new Craft.DataTableSorter(this.$table, {\n            helperClass: 'editabletablesorthelper',\n            copyDraggeeInputValuesToHelper: true\n        });\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            // Give everything a chance to initialize\n            setTimeout(this.initializeIfVisible.bind(this), 500);\n        }\n\n        if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n            for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                this.addRow()\n            }\n        }\n    },\n\n    isVisible: function() {\n        return (this.$table.parent().height() > 0);\n    },\n\n    initialize: function() {\n        if (this.initialized) {\n            return false;\n        }\n\n        this.initialized = true;\n        this.removeListener(Garnish.$win, 'resize');\n\n        var $rows = this.$tbody.children();\n\n        for (var i = 0; i < $rows.length; i++) {\n            this.createRowObj($rows[i]);\n        }\n\n        this.$addRowBtn = this.$table.next('.add');\n        this.updateAddRowButton();\n        this.addListener(this.$addRowBtn, 'activate', 'addRow');\n        return true;\n    },\n    initializeIfVisible: function() {\n        this.removeListener(Garnish.$win, 'resize');\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n        }\n    },\n    updateAddRowButton: function() {\n        if (!this.canAddRow()) {\n            this.$addRowBtn.css('opacity', '0.2');\n            this.$addRowBtn.css('pointer-events', 'none');\n        } else {\n            this.$addRowBtn.css('opacity', '1');\n            this.$addRowBtn.css('pointer-events', 'auto');\n        }\n    },\n    canDeleteRow: function() {\n        return (this.rowCount > this.settings.minRows);\n    },\n    deleteRow: function(row) {\n        if (!this.canDeleteRow()) {\n            return;\n        }\n\n        this.sorter.removeItems(row.$tr);\n        row.$tr.remove();\n\n        this.rowCount--;\n\n        this.updateAddRowButton();\n        if (this.rowCount === 0) {\n            this.$table.addClass('hidden');\n        }\n\n        // onDeleteRow callback\n        this.settings.onDeleteRow(row.$tr);\n\n        row.destroy();\n    },\n    canAddRow: function() {\n        if (this.settings.staticRows) {\n            return false;\n        }\n\n        if (this.settings.maxRows) {\n            return (this.rowCount < this.settings.maxRows);\n        }\n\n        return true;\n    },\n    addRow: function(focus, prepend) {\n        if (!this.canAddRow()) {\n            return;\n        }\n\n        var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n            $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n        if (prepend) {\n            $tr.prependTo(this.$tbody);\n        } else {\n            $tr.appendTo(this.$tbody);\n        }\n\n        var row = this.createRowObj($tr);\n        this.sorter.addItems($tr);\n\n        // Focus the first input in the row\n        if (focus !== false) {\n            $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n        }\n\n        this.rowCount++;\n        this.updateAddRowButton();\n        this.$table.removeClass('hidden');\n\n        // onAddRow callback\n        this.settings.onAddRow($tr);\n\n        return row;\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n    },\n\n    createRowObj: function($tr) {\n        return new Craft.EditableTable.Row(this, $tr);\n    },\n\n    focusOnPrevRow: function($tr, tdIndex, blurTd) {\n        var $prevTr = $tr.prev('tr');\n        var prevRow;\n\n        if ($prevTr.length) {\n            prevRow = $prevTr.data('editable-table-row');\n        } else {\n            prevRow = this.addRow(false, true);\n        }\n\n        // Focus on the same cell in the previous row\n        if (!prevRow) {\n            return;\n        }\n\n        if (!prevRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($prevTr) {\n                this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    focusOnNextRow: function($tr, tdIndex, blurTd) {\n        var $nextTr = $tr.next('tr');\n        var nextRow;\n\n        if ($nextTr.length) {\n            nextRow = $nextTr.data('editable-table-row');\n        } else {\n            nextRow = this.addRow(false);\n        }\n\n        // Focus on the same cell in the next row\n        if (!nextRow) {\n            return;\n        }\n\n        if (!nextRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($nextTr) {\n                this.focusOnNextRow($nextTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    importData: function(data, row, tdIndex) {\n        let lines = data.split(/\\r?\\n|\\r/);\n        for (let i = 0; i < lines.length; i++) {\n            let values = lines[i].split(\"\\t\");\n            for (let j = 0; j < values.length; j++) {\n                let value = values[j];\n                row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                    .val(value)\n                    .trigger('input');\n            }\n\n            // move onto the next row\n            let $nextTr = row.$tr.next('tr');\n            if ($nextTr.length) {\n                row = $nextTr.data('editable-table-row');\n            } else {\n                row = this.addRow(false);\n            }\n        }\n    },\n}, {\n    textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n    defaults: {\n        rowIdPrefix: '',\n        defaultValues: {},\n        staticRows: false,\n        minRows: null,\n        maxRows: null,\n        onAddRow: $.noop,\n        onDeleteRow: $.noop\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        var $tr = $('<tr/>', {\n            'data-id': rowId\n        });\n\n        for (var colId in columns) {\n            if (!columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            var col = columns[colId],\n                value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                $cell;\n\n            if (col.type === 'heading') {\n                $cell = $('<th/>', {\n                    'scope': 'row',\n                    'class': col['class'],\n                    'html': value\n                });\n            } else {\n                var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                $cell = $('<td/>', {\n                    'class': `${col.class} ${col.type}-cell`,\n                    'width': col.width\n                });\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $cell.addClass('textual');\n                }\n\n                if (col.code) {\n                    $cell.addClass('code');\n                }\n\n                switch (col.type) {\n                    case 'checkbox':\n                        $('<div class=\"checkbox-wrapper\"/>')\n                            .append(Craft.ui.createCheckbox({\n                                    name: name,\n                                    value: col.value || '1',\n                                    checked: !!value\n                                })\n                            )\n                            .appendTo($cell);\n                        break;\n\n                    case 'color':\n                        Craft.ui.createColorInput({\n                            name: name,\n                            value: value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'date':\n                        Craft.ui.createDateInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'lightswitch':\n                        Craft.ui.createLightswitch({\n                            name: name,\n                            value: col.value || '1',\n                            on: !!value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'select':\n                        Craft.ui.createSelect({\n                            name: name,\n                            options: col.options,\n                            value: value || (function() {\n                                for (var key in col.options) {\n                                    if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                        return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                    }\n                                }\n                                return null;\n                            })(),\n                            'class': 'small'\n                        }).appendTo($cell);\n                        break;\n\n                    case 'time':\n                        Craft.ui.createTimeInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'email':\n                    case 'url':\n                        Craft.ui.createTextInput({\n                            name: name,\n                            value: value,\n                            type: col.type,\n                            placeholder: col.placeholder || null,\n                        }).appendTo($cell);\n                        break;\n\n                    default:\n                        $('<textarea/>', {\n                            'name': name,\n                            'rows': col.rows || 1,\n                            'val': value,\n                            'placeholder': col.placeholder\n                        }).appendTo($cell);\n                }\n            }\n\n            $cell.appendTo($tr);\n        }\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'move icon',\n                'title': Craft.t('app', 'Reorder')\n            })\n        ).appendTo($tr);\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Delete')\n            })\n        ).appendTo($tr);\n\n        return $tr;\n    }\n});\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend({\n    table: null,\n    id: null,\n    niceTexts: null,\n\n    $tr: null,\n    $tds: null,\n    tds: null,\n    $textareas: null,\n    $deleteBtn: null,\n\n    init: function(table, tr) {\n        this.table = table;\n        this.$tr = $(tr);\n        this.$tds = this.$tr.children();\n        this.tds = [];\n        this.id = this.$tr.attr('data-id');\n\n        this.$tr.data('editable-table-row', this);\n\n        // Get the row ID, sans prefix\n        var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n        if (id > this.table.biggestId) {\n            this.table.biggestId = id;\n        }\n\n        this.$textareas = $();\n        this.niceTexts = [];\n        var textareasByColId = {};\n\n        var i = 0;\n        var colId, col, td, $textarea, $checkbox;\n\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n            td = this.tds[colId] = this.$tds[i];\n\n            if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                $textarea = $('textarea', td);\n                this.$textareas = this.$textareas.add($textarea);\n\n                this.addListener($textarea, 'focus', 'onTextareaFocus');\n                this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                this.niceTexts.push(new Garnish.NiceText($textarea, {\n                    onHeightChange: this.onTextareaHeightChange.bind(this)\n                }));\n\n                this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                $textarea.trigger('input');\n\n                if (col.type !== 'multiline') {\n                    this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                }\n\n                textareasByColId[colId] = $textarea;\n            } else if (col.type === 'checkbox') {\n                $checkbox = $('input[type=\"checkbox\"]', td);\n\n                if (col.radioMode) {\n                    if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                        this.table.radioCheckboxes[colId] = [];\n                    }\n                    this.table.radioCheckboxes[colId].push($checkbox[0]);\n                    this.addListener($checkbox, 'change', {colId}, 'onRadioCheckboxChange');\n                }\n\n                if (col.toggle) {\n                    this.addListener($checkbox, 'change', {colId}, function(ev) {\n                        this.applyToggleCheckbox(ev.data.colId);\n                    });\n                }\n            }\n\n            if (!$(td).hasClass('disabled')) {\n                this.addListener(td, 'click', {td}, function(ev) {\n                    if (ev.target === ev.data.td) {\n                        $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                    }\n                });\n            }\n\n            i++;\n        }\n\n        // Now that all of the text cells have been nice-ified, let's normalize the heights\n        this.onTextareaHeightChange();\n\n        // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n            col = this.table.columns[colId];\n            if (col.type === 'checkbox' && col.toggle) {\n                this.applyToggleCheckbox(colId);\n            }\n        }\n\n        // Now look for any autopopulate columns\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n\n            if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                    allowNonAlphaStart: true\n                });\n            }\n        }\n\n        var $deleteBtn = this.$tr.children().last().find('.delete');\n        this.addListener($deleteBtn, 'click', 'deleteRow');\n\n        var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n        this.addListener($inputs, 'focus', function(ev) {\n            $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n        });\n        this.addListener($inputs, 'blur', function(ev) {\n            $(ev.currentTarget).closest('td').removeClass('focus');\n        });\n    },\n\n    onTextareaFocus: function(ev) {\n        this.onTextareaHeightChange();\n\n        var $textarea = $(ev.currentTarget);\n\n        if ($textarea.data('ignoreNextFocus')) {\n            $textarea.data('ignoreNextFocus', false);\n            return;\n        }\n\n        setTimeout(function() {\n            Craft.selectFullValue($textarea);\n        }, 0);\n    },\n\n    onRadioCheckboxChange: function(ev) {\n        if (ev.currentTarget.checked) {\n            for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                checkbox.checked = (checkbox === ev.currentTarget);\n            }\n        }\n    },\n\n    applyToggleCheckbox: function(checkboxColId) {\n        var checkboxCol = this.table.columns[checkboxColId];\n        var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n        var colId, colIndex, neg;\n        for (var i = 0; i < checkboxCol.toggle.length; i++) {\n            colId = checkboxCol.toggle[i];\n            colIndex = this.table.colum;\n            neg = colId[0] === '!';\n            if (neg) {\n                colId = colId.substr(1);\n            }\n            if ((checked && !neg) || (!checked && neg)) {\n                $(this.tds[colId])\n                    .removeClass('disabled')\n                    .find('textarea, input').prop('disabled', false);\n            } else {\n                $(this.tds[colId])\n                    .addClass('disabled')\n                    .find('textarea, input').prop('disabled', true);\n            }\n        }\n    },\n\n    ignoreNextTextareaFocus: function(ev) {\n        $.data(ev.currentTarget, 'ignoreNextFocus', true);\n    },\n\n    handleKeypress: function(ev) {\n        var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n        var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n        // Going to the next/previous row?\n        if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n            ev.preventDefault();\n            if (ev.shiftKey) {\n                this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            } else {\n                this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            }\n            return;\n        }\n\n        // Was this an invalid number character?\n        if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n            ev.preventDefault();\n        }\n    },\n\n    handlePaste: function(ev) {\n        let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n        if (!data.match(/[\\t\\r\\n]/)) {\n            return;\n        }\n        ev.preventDefault();\n        this.table.importData(data, this, ev.data.tdIndex);\n    },\n\n    validateValue: function(ev) {\n        if (ev.data.type === 'multiline') {\n            return;\n        }\n\n        var safeValue;\n\n        if (ev.data.type === 'number') {\n            // Only grab the number at the beginning of the value (if any)\n            var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n            if (match !== null) {\n                safeValue = match[1];\n            } else {\n                safeValue = '';\n            }\n        } else {\n            // Just strip any newlines\n            safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n        }\n\n        if (safeValue !== ev.currentTarget.value) {\n            ev.currentTarget.value = safeValue;\n        }\n    },\n\n    onTextareaHeightChange: function() {\n        // Keep all the textareas' heights in sync\n        var tallestTextareaHeight = -1;\n\n        for (var i = 0; i < this.niceTexts.length; i++) {\n            if (this.niceTexts[i].height > tallestTextareaHeight) {\n                tallestTextareaHeight = this.niceTexts[i].height;\n            }\n        }\n\n        this.$textareas.css('min-height', tallestTextareaHeight);\n\n        // If the <td> is still taller, go with that instead\n        var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n        if (tdHeight > tallestTextareaHeight) {\n            this.$textareas.css('min-height', tdHeight);\n        }\n    },\n\n    deleteRow: function() {\n        this.table.deleteRow(this);\n    }\n}, {\n    numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend({\n    maxLevels: null,\n    newChildUrl: null,\n    $trigger: null,\n    $selectedItems: null,\n    triggerEnabled: true,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n        this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n        // Do we have a custom handler?\n        if (this.settings.activate) {\n            // Prevent the element index's click handler\n            this.$trigger.data('custom-handler', true);\n\n            // Is this a custom trigger?\n            if (this.$trigger.prop('nodeName') === 'FORM') {\n                this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n            } else {\n                this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n            }\n        }\n\n        this.updateTrigger();\n        Craft.elementIndex.on('selectionChange', this.updateTrigger.bind(this));\n    },\n\n    updateTrigger: function() {\n        // Ignore if the last element was just unselected\n        if (Craft.elementIndex.getSelectedElements().length === 0) {\n            return;\n        }\n\n        if (this.validateSelection()) {\n            this.enableTrigger();\n        } else {\n            this.disableTrigger();\n        }\n    },\n\n    /**\n     * Determines if this action can be performed on the currently selected elements.\n     *\n     * @return boolean\n     */\n    validateSelection: function() {\n        var valid = true;\n        this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n        if (!this.settings.batch && this.$selectedItems.length > 1) {\n            valid = false;\n        } else if (typeof this.settings.validateSelection === 'function') {\n            valid = this.settings.validateSelection(this.$selectedItems);\n        }\n\n        return valid;\n    },\n\n    enableTrigger: function() {\n        if (this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.removeClass('disabled');\n        this.triggerEnabled = true;\n    },\n\n    disableTrigger: function() {\n        if (!this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.addClass('disabled');\n        this.triggerEnabled = false;\n    },\n\n    handleTriggerActivation: function(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (this.triggerEnabled) {\n            this.settings.activate(this.$selectedItems);\n        }\n    }\n}, {\n    defaults: {\n        type: null,\n        batch: true,\n        validateSelection: null,\n        activate: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend({\n    queue: null,\n    workers: [],\n\n    init: function() {\n        this.queue = [];\n\n        for (var i = 0; i < 3; i++) {\n            this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n        }\n    },\n\n    load: function($elements) {\n        // Only immediately load the visible images\n        let $thumbs = $elements.find('.elementthumb');\n        for (let i = 0; i < $thumbs.length; i++) {\n            let $thumb = $thumbs.eq(i);\n            let $scrollParent = $thumb.scrollParent();\n            if (this.isVisible($thumb, $scrollParent)) {\n                this.addToQueue($thumb[0]);\n            } else {\n                let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                $scrollParent.on(`scroll.${key}`, {\n                    $thumb: $thumb,\n                    $scrollParent: $scrollParent,\n                    key: key,\n                }, (ev) => {\n                    if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                        delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                        $scrollParent.off(`scroll.${ev.data.key}`);\n                        this.addToQueue(ev.data.$thumb[0]);\n                    }\n                });\n            }\n        }\n    },\n\n    addToQueue: function(thumb) {\n        this.queue.push(thumb);\n\n        // See if there are any inactive workers\n        for (var i = 0; i < this.workers.length; i++) {\n            if (!this.workers[i].active) {\n                this.workers[i].loadNext();\n            }\n        }\n    },\n\n    isVisible: function($thumb, $scrollParent) {\n        let thumbOffset = $thumb.offset().top;\n        let scrollParentOffset, scrollParentHeight;\n        if ($scrollParent[0] === document) {\n            scrollParentOffset = $scrollParent.scrollTop();\n            scrollParentHeight = Garnish.$win.height();\n        } else {\n            scrollParentOffset = $scrollParent.offset().top;\n            scrollParentHeight = $scrollParent.height();\n        }\n        return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.workers.length; i++) {\n            this.workers[i].destroy();\n        }\n\n        this.base();\n    }\n}, {\n    invisibleThumbs: {},\n    retryAll: function() {\n        for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n            let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n            delete Craft.ElementThumbLoader.invisibleThumbs[key];\n            $scrollParent.off(`scroll.${key}`);\n            queue.load($thumb.parent());\n        }\n    }\n});\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend({\n    loader: null,\n    active: false,\n\n    init: function(loader) {\n        this.loader = loader;\n    },\n\n    loadNext: function() {\n        var container = this.loader.queue.shift();\n        if (typeof container === 'undefined') {\n            this.active = false;\n            return;\n        }\n\n        this.active = true;\n        var $container = $(container);\n        if ($container.find('img').length) {\n            this.loadNext();\n            return;\n        }\n        var $img = $('<img/>', {\n            sizes: $container.attr('data-sizes'),\n            srcset: $container.attr('data-srcset'),\n            alt: ''\n        });\n        this.addListener($img, 'load,error', 'loadNext');\n        $img.appendTo($container);\n        picturefill({\n            elements: [$img[0]]\n        });\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend({\n    $form: null,\n    inputs: null,\n\n    init: function(form, inputs) {\n        this.$form = $(form);\n\n        // Only check specific inputs?\n        if (typeof inputs !== 'undefined') {\n            this.inputs = [];\n            inputs = $.makeArray(inputs);\n\n            for (var i = 0; i < inputs.length; i++) {\n                var $inputs = $(inputs[i]);\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $inputs.eq(j);\n\n                    this.inputs.push({\n                        input: $input,\n                        val: Garnish.getInputPostVal($input)\n                    });\n                }\n            }\n        }\n\n        this.addListener(this.$form, 'submit', 'handleFormSubmit');\n    },\n\n    handleFormSubmit: function(ev) {\n        // Ignore if we're in the middle of getting the elevated session timeout\n        if (Craft.elevatedSessionManager.fetchingTimeout) {\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            return;\n        }\n\n        // Are we only interested in certain inputs?\n        if (this.inputs) {\n            var inputsChanged = false;\n            var $input;\n\n            for (var i = 0; i < this.inputs.length; i++) {\n                $input = this.inputs[i].input;\n                // Is this a password input?\n                if ($input.data('passwordInput')) {\n                    $input = $input.data('passwordInput').$currentInput;\n                }\n\n                // Has this input's value changed?\n                if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                    inputsChanged = true;\n                    break;\n                }\n            }\n\n            if (!inputsChanged) {\n                // No need to interrupt the submit\n                return;\n            }\n        }\n\n        // Prevent the form from submitting until the user has an elevated session\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n        Craft.elevatedSessionManager.requireElevatedSession(this.submitForm.bind(this));\n    },\n\n    submitForm: function() {\n        // Don't let handleFormSubmit() interrupt this time\n        this.disable();\n        this.$form.trigger('submit');\n        this.enable();\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend({\n    fetchingTimeout: false,\n\n    passwordModal: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $submitBtn: null,\n    $errorPara: null,\n\n    callback: null,\n\n    /**\n     * Requires that the user has an elevated session.\n     *\n     * @param {function} callback The callback function that should be called once the user has an elevated session\n     */\n    requireElevatedSession: function(callback) {\n        this.callback = callback;\n\n        // Check the time remaining on the user's elevated session (if any)\n        this.fetchingTimeout = true;\n\n        Craft.postActionRequest('users/get-elevated-session-timeout', (response, textStatus) => {\n            this.fetchingTimeout = false;\n\n            if (textStatus === 'success') {\n                // Is there still enough time left or has it been disabled?\n                if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                    this.callback();\n                } else {\n                    // Show the password modal\n                    this.showPasswordModal();\n                }\n            }\n        });\n    },\n\n    showPasswordModal: function() {\n        if (!this.passwordModal) {\n            var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<td/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Submit'),\n            }).appendTo($buttonContainer);\n            this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.passwordModal = new Garnish.Modal($passwordModal, {\n                closeOtherModals: false,\n                onFadeIn: () => {\n                    setTimeout(this.focusPasswordInput.bind(this), 100);\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($passwordModal, 'submit', 'submitPassword');\n        } else {\n            this.passwordModal.show();\n        }\n    },\n\n    focusPasswordInput: function() {\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$passwordInput.trigger('focus');\n        }\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$submitBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$submitBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    submitPassword: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (!this.validatePassword()) {\n            return;\n        }\n\n        this.$passwordSpinner.removeClass('hidden');\n        this.clearLoginError();\n\n        var data = {\n            currentPassword: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/start-elevated-session', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.passwordModal.hide();\n                    this.callback();\n                } else {\n                    this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                    Garnish.shake(this.passwordModal.$container);\n                    this.focusPasswordInput();\n                }\n            } else {\n                this.showPasswordError();\n            }\n        });\n    },\n\n    showPasswordError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$errorPara.text(error);\n        this.passwordModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showPasswordError('');\n    }\n}, {\n    minSafeElevatedSessionTimeout: 5\n});\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend({\n    publishableSections: null,\n    $newEntryBtnGroup: null,\n    $newEntryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible sections the user has permission to create new entries in\n        this.publishableSections = [];\n\n        for (var i = 0; i < Craft.publishableSections.length; i++) {\n            var section = Craft.publishableSections[i];\n\n            if (this.getSourceByKey('section:' + section.uid)) {\n                this.publishableSections.push(section);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific section in the URL?\n        if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n            if (defaultSectionHandle === 'singles') {\n                return 'singles';\n            } else {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultSectionHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        var handle;\n\n        // Get the handle of the selected source\n        if (this.$source.data('key') === 'singles') {\n            handle = 'singles';\n        } else {\n            handle = this.$source.data('handle');\n        }\n\n        // Update the New Entry button\n        // ---------------------------------------------------------------------\n\n        var i, href, label;\n\n        if (this.publishableSections.length) {\n            // Remove the old button, if there is one\n            if (this.$newEntryBtnGroup) {\n                this.$newEntryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a section that they have permission to create entries in\n            var selectedSection;\n\n            if (handle) {\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    if (this.publishableSections[i].handle === handle) {\n                        selectedSection = this.publishableSections[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n            // Otherwise only show a menu button\n            if (selectedSection) {\n                href = this._getSectionTriggerHref(selectedSection);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                        this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.publishableSections.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n            } else {\n                this.$newEntryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New entry'),\n                }).appendTo(this.$newEntryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    var section = this.publishableSections[i];\n\n                    if (\n                        (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                        (this.settings.context !== 'index' && section !== selectedSection)\n                    ) {\n                        href = this._getSectionTriggerHref(section);\n                        label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newEntryBtnGroup);\n        }\n\n        // Update the URL if we're on the Entries index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'entries';\n\n            if (handle) {\n                uri += '/' + handle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getSectionTriggerHref: function(section) {\n        if (this.settings.context === 'index') {\n            var uri = 'entries/' + section.handle + '/new';\n            let params = {};\n            if (this.siteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        params.site = Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n        } else {\n            return 'data-id=\"' + section.id + '\"';\n        }\n    },\n\n    _openCreateEntryModal: function(sectionId) {\n        if (this.$newEntryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the section\n        var section;\n\n        for (var i = 0; i < this.publishableSections.length; i++) {\n            if (this.publishableSections[i].id == sectionId) {\n                section = this.publishableSections[i];\n                break;\n            }\n        }\n\n        if (!section) {\n            return;\n        }\n\n        this.$newEntryBtn.addClass('inactive');\n        var newEntryBtnText = this.$newEntryBtn.text();\n        this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newEntryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                sectionId: sectionId,\n                typeId: section.entryTypes[0].id,\n                enabled: section.canPublish ? 1 : 0,\n            },\n            onBeginLoading: () => {\n                this.$newEntryBtn.addClass('loading');\n            },\n            onEndLoading: () => {\n                this.$newEntryBtn.removeClass('loading');\n            },\n            onHideHud: () => {\n                this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right section is selected\n                var sectionSourceKey = 'section:' + section.uid;\n\n                if (this.sourceKey !== sectionSourceKey) {\n                    this.selectSourceByKey(sectionSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n","/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: this.onTabOptionSelect.bind(this)\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const $labelSpan = $tab.find('.tabs .tab span');\n        const oldName = $labelSpan.text();\n        const newName = this.promptForTabName(oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    promptForTabName: function(oldName) {\n        return Craft.escapeHtml(prompt(Craft.t('app', 'Give your tab a name.'), oldName));\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const name = this.promptForTabName();\n        if (!name) {\n            return;\n        }\n\n        const $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>${name}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend({\n    $toggle: null,\n    targetPrefix: null,\n    targetSelector: null,\n    reverseTargetSelector: null,\n\n    _$target: null,\n    _$reverseTarget: null,\n    type: null,\n\n    init: function(toggle) {\n        this.$toggle = $(toggle);\n\n        // Is this already a field toggle?\n        if (this.$toggle.data('fieldtoggle')) {\n            Garnish.log('Double-instantiating a field toggle on an element');\n            this.$toggle.data('fieldtoggle').destroy();\n        }\n\n        this.$toggle.data('fieldtoggle', this);\n\n        this.type = this.getType();\n\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n        } else {\n            this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n            this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n        }\n\n        this.findTargets();\n\n        switch (this.type) {\n            case 'link':\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n                break;\n            case 'fieldset':\n                this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                break;\n            default:\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n                this.onToggleChange();\n        }\n    },\n\n    normalizeTargetSelector: function(selector) {\n        if (selector && !selector.match(/^[#\\.]/)) {\n            selector = '#' + selector;\n        }\n\n        return selector;\n    },\n\n    getType: function() {\n        let nodeName = this.$toggle.prop('nodeName');\n        if (\n            (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n            this.$toggle.attr('role') === 'checkbox' ||\n            this.$toggle.attr('role') === 'switch'\n        ) {\n            return 'checkbox';\n        }\n\n        switch (nodeName) {\n            case 'SELECT':\n                return 'select';\n            case 'A':\n                return 'link';\n            case 'FIELDSET':\n                return 'fieldset';\n        }\n\n        console.warn('Unexpected field toggle:', this.$toggle[0]);\n    },\n\n    findTargets: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            var toggleVal = this.getToggleVal();\n            this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n        } else {\n            if (this.targetSelector) {\n                this._$target = $(this.targetSelector);\n            }\n\n            if (this.reverseTargetSelector) {\n                this._$reverseTarget = $(this.reverseTargetSelector);\n            }\n        }\n    },\n\n    getToggleVal: function() {\n        if (this.type === 'checkbox') {\n            if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                return this.$toggle.prop('checked');\n            }\n            return this.$toggle.attr('aria-checked') === 'true';\n        }\n\n        let postVal;\n        if (this.type === 'fieldset') {\n            postVal = this.$toggle.find('input:checked:first').val();\n        } else {\n            postVal = Garnish.getInputPostVal(this.$toggle);\n        }\n\n        // Normalize the value\n        return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n    },\n\n    onToggleChange: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.hideTarget(this._$target);\n            this.findTargets();\n            this.showTarget(this._$target);\n        } else {\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n            } else {\n                this.onToggleChange._show = !!this.getToggleVal();\n            }\n\n            if (this.onToggleChange._show) {\n                this.showTarget(this._$target);\n                this.hideTarget(this._$reverseTarget);\n            } else {\n                this.hideTarget(this._$target);\n                this.showTarget(this._$reverseTarget);\n            }\n\n            delete this.onToggleChange._show;\n        }\n    },\n\n    showTarget: function($target) {\n        if ($target && $target.length) {\n            this.showTarget._currentHeight = $target.height();\n\n            $target.removeClass('hidden');\n\n            if (this.type !== 'select' && this.type !== 'fieldset') {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('collapsed');\n                    this.$toggle.addClass('expanded');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.prop('nodeName') !== 'SPAN') {\n                            $t.height('auto');\n                            this.showTarget._targetHeight = $t.height();\n                            $t.css({\n                                height: this.showTarget._currentHeight,\n                                overflow: 'hidden'\n                            });\n\n                            $t.velocity('stop');\n\n                            $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                $t.css({\n                                    height: '',\n                                    overflow: ''\n                                });\n                            });\n                        }\n                    })($target.eq(i));\n                }\n\n                delete this.showTarget._targetHeight;\n            }\n\n            delete this.showTarget._currentHeight;\n\n            // Trigger a resize event in case there are any grids in the target that need to initialize\n            Garnish.$win.trigger('resize');\n        }\n    },\n\n    hideTarget: function($target) {\n        if ($target && $target.length) {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                $target.addClass('hidden');\n            } else {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('expanded');\n                    this.$toggle.addClass('collapsed');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.hasClass('hidden')) {\n                            return;\n                        }\n                        if ($t.prop('nodeName') === 'SPAN') {\n                            $t.addClass('hidden');\n                        } else {\n                            $t.css('overflow', 'hidden');\n                            $t.velocity('stop');\n                            $t.velocity({height: 0}, 'fast', function() {\n                                $t.addClass('hidden');\n                            });\n                        }\n                    })($target.eq(i));\n                }\n            }\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend({\n    $container: null,\n\n    $items: null,\n    items: null,\n    totalCols: null,\n    colGutterDrop: null,\n    colPctWidth: null,\n\n    possibleItemColspans: null,\n    possibleItemPositionsByColspan: null,\n\n    itemPositions: null,\n    itemColspansByPosition: null,\n\n    layouts: null,\n    layout: null,\n    itemHeights: null,\n    leftPadding: null,\n\n    _refreshingCols: false,\n    _refreshColsAfterRefresh: false,\n    _forceRefreshColsAfterRefresh: false,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n\n        // Is this already a grid?\n        if (this.$container.data('grid')) {\n            Garnish.log('Double-instantiating a grid on an element');\n            this.$container.data('grid').destroy();\n        }\n\n        this.$container.data('grid', this);\n\n        this.setSettings(settings, Craft.Grid.defaults);\n\n        // Set the refreshCols() proxy that container resizes will trigger\n        this.handleContainerHeightProxy = () => {\n            this.refreshCols(false, true);\n        };\n\n        this.$items = this.$container.children(this.settings.itemSelector);\n        this.setItems();\n        this.refreshCols(true, false);\n\n        Garnish.$doc.ready(() => {\n            this.refreshCols(false, false);\n        });\n    },\n\n    addItems: function(items) {\n        this.$items = $().add(this.$items.add(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    removeItems: function(items) {\n        this.$items = $().add(this.$items.not(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    resetItemOrder: function() {\n        this.$items = $().add(this.$items);\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    setItems: function() {\n        this.setItems._ = {};\n\n        this.items = [];\n\n        for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n            this.items.push($(this.$items[this.setItems._.i]));\n        }\n\n        delete this.setItems._;\n    },\n\n    refreshCols: function(force) {\n        if (this._refreshingCols) {\n            this._refreshColsAfterRefresh = true;\n            if (force) {\n                this._forceRefreshColsAfterRefresh = true;\n            }\n            return;\n        }\n\n        this._refreshingCols = true;\n\n        if (!this.items.length) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.refreshCols._ = {};\n\n        // Check to see if the grid is actually visible\n        this.refreshCols._.oldHeight = this.$container[0].style.height;\n        this.$container[0].style.height = 1;\n        this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n        this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n        if (this.refreshCols._.scrollHeight === 0) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        if (this.settings.cols) {\n            this.refreshCols._.totalCols = this.settings.cols;\n        } else {\n            this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n            // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n            if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n            }\n\n            if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                this.refreshCols._.totalCols = this.settings.maxCols;\n            }\n        }\n\n        if (this.refreshCols._.totalCols === 0) {\n            this.refreshCols._.totalCols = 1;\n        }\n\n        // Same number of columns as before?\n        if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.totalCols = this.refreshCols._.totalCols;\n        this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n        // Temporarily stop listening to container resizes\n        this.removeListener(this.$container, 'resize');\n\n        if (this.settings.fillMode === 'grid') {\n            this.refreshCols._.itemIndex = 0;\n\n            while (this.refreshCols._.itemIndex < this.items.length) {\n                // Append the next X items and figure out which one is the tallest\n                this.refreshCols._.tallestItemHeight = -1;\n                this.refreshCols._.colIndex = 0;\n\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                    if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                        this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                    }\n\n                    this.refreshCols._.colIndex++;\n                }\n\n                if (this.settings.snapToGrid) {\n                    this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                    if (this.refreshCols._.remainder) {\n                        this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                    }\n                }\n\n                // Now set their heights to the tallest one\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                }\n\n                // set the this.refreshCols._.itemIndex pointer to the next one up\n                this.refreshCols._.itemIndex += this.totalCols;\n            }\n        } else {\n            this.removeListener(this.$items, 'resize');\n\n            // If there's only one column, sneak out early\n            if (this.totalCols === 1) {\n                this.$container.height('auto');\n                this.$items\n                    .show()\n                    .css({\n                        position: 'relative',\n                        width: 'auto',\n                        top: 0\n                    })\n                    .css(Craft.left, 0);\n            } else {\n                this.$items.css('position', 'absolute');\n                this.colPctWidth = (100 / this.totalCols);\n\n                // The setup\n\n                this.layouts = [];\n\n                this.itemPositions = [];\n                this.itemColspansByPosition = [];\n\n                // Figure out all of the possible colspans for each item,\n                // as well as all the possible positions for each item at each of its colspans\n\n                this.possibleItemColspans = [];\n                this.possibleItemPositionsByColspan = [];\n                this.itemHeightsByColspan = [];\n\n                for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                    this.possibleItemColspans[this.refreshCols._.item] = [];\n                    this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                    this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                    this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                    this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                    this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                    this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                    this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                    if (this.refreshCols._.minColspan > this.totalCols) {\n                        this.refreshCols._.minColspan = this.totalCols;\n                    }\n                    if (this.refreshCols._.maxColspan > this.totalCols) {\n                        this.refreshCols._.maxColspan = this.totalCols;\n                    }\n\n                    for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                        // Get the height for this colspan\n                        this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                        this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                        this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                        if (this.refreshCols._.positionLeft) {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = 0;\n                        } else if (this.refreshCols._.positionRight) {\n                            this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                            this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                        } else {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                        }\n\n                        for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                        }\n                    }\n                }\n\n                // Find all the possible layouts\n\n                this.refreshCols._.colHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                    this.refreshCols._.colHeights.push(0);\n                }\n\n                this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                // Now find the layout that looks the best.\n\n                // First find the layouts with the highest number of used columns\n                this.refreshCols._.layoutTotalCols = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                    for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                        if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                            this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                        }\n                    }\n                }\n\n                this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                // Filter out the ones that aren't using as many columns as they could be\n                for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                    if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                        this.layouts.splice(this.refreshCols._.i, 1);\n                    }\n                }\n\n                // Find the layout(s) with the least overall height\n                this.refreshCols._.layoutHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                }\n\n                this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                this.refreshCols._.shortestLayouts = [];\n                this.refreshCols._.emptySpaces = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                    if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                        this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                        // Now get its total empty space, including any trailing empty space\n                        this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                        }\n\n                        this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                    }\n                }\n\n                // And the layout with the least empty space is...\n                this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                // Set the item widths and left positions\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                    this.refreshCols._.css = {\n                        width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                    };\n                    this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                    this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                }\n\n                // If every item is at position 0, then let them lay out au naturel\n                if (this.isSimpleLayout()) {\n                    this.$container.height('auto');\n                    this.$items.css({\n                        position: 'relative',\n                        top: 0,\n                        'margin-bottom': this.settings.gutter + 'px'\n                    });\n                } else {\n                    this.$items.css('position', 'absolute');\n\n                    // Now position the items\n                    this.positionItems();\n\n                    // Update the positions as the items' heigthts change\n                    this.addListener(this.$items, 'resize', 'onItemResize');\n                }\n            }\n        }\n\n        this.completeRefreshCols();\n\n        // Resume container resize listening\n        this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n        this.onRefreshCols();\n    },\n\n    completeRefreshCols: function() {\n        // Delete the internal variable object\n        if (typeof this.refreshCols._ !== 'undefined') {\n            delete this.refreshCols._;\n        }\n\n        this._refreshingCols = false;\n\n        if (this._refreshColsAfterRefresh) {\n            var force = this._forceRefreshColsAfterRefresh;\n            this._refreshColsAfterRefresh = false;\n            this._forceRefreshColsAfterRefresh = false;\n\n            Garnish.requestAnimationFrame(() => {\n                this.refreshCols(force);\n            });\n        }\n    },\n\n    getItemWidth: function(colspan) {\n        return (this.colPctWidth * colspan);\n    },\n\n    getItemWidthCss: function(colspan) {\n        return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n    },\n\n    getItemWidthInPx: function(colspan) {\n        return this.getItemWidth(colspan) / 100 * this.$container.width() - this.colGutterDrop;\n    },\n\n    getItemLeftPosCss: function(position) {\n        return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n    },\n\n    getItemLeftPosInPx: function(position) {\n        return (this.getItemWidth(1) / 100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n    },\n\n    isSimpleLayout: function() {\n        this.isSimpleLayout._ = {};\n\n        for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n            if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                delete this.isSimpleLayout._;\n                return false;\n            }\n        }\n\n        delete this.isSimpleLayout._;\n        return true;\n    },\n\n    positionItems: function() {\n        this.positionItems._ = {};\n\n        this.positionItems._.colHeights = [];\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n            this.positionItems._.colHeights.push(0);\n        }\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n            this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n            this.positionItems._.affectedColHeights = [];\n\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n            }\n\n            this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n            if (this.positionItems._.top > 0) {\n                this.positionItems._.top += this.settings.gutter;\n            }\n\n            this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n            // Now add the new heights to those columns\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n            }\n        }\n\n        // Set the container height\n        this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n        delete this.positionItems._;\n    },\n\n    onItemResize: function(ev) {\n        this.onItemResize._ = {};\n\n        // Prevent this from bubbling up to the container, which has its own resize listener\n        ev.stopPropagation();\n\n        this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n        if (this.onItemResize._.item !== -1) {\n            // Update the height and reposition the items\n            this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n            if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                this.positionItems(false);\n            }\n        }\n\n        delete this.onItemResize._;\n    },\n\n    onRefreshCols: function() {\n        this.trigger('refreshCols');\n        this.settings.onRefreshCols();\n    }\n}, {\n    defaults: {\n        itemSelector: '.item',\n        cols: null,\n        maxCols: null,\n        minColWidth: 320,\n        gutter: 14,\n        fillMode: 'top',\n        colClass: 'col',\n        snapToGrid: null,\n\n        onRefreshCols: $.noop\n    }\n});\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend({\n    grid: null,\n    _: null,\n\n    init: function(grid) {\n        this.grid = grid;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        this._ = {};\n\n        // Loop through all possible colspans\n        for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n            this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n            // Loop through all the possible positions for this colspan,\n            // and find the one that is closest to the top\n\n            this._.tallestColHeightsByPosition = [];\n\n            for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                this._.colHeightsForPosition = [];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                }\n\n                this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n            }\n\n            // And the shortest position for this colspan is...\n            this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n            this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n            // Now log the colspan/position placement\n            this._.positions = prevPositions.slice(0);\n            this._.colspans = prevColspans.slice(0);\n            this._.colHeights = prevColHeights.slice(0);\n            this._.emptySpace = prevEmptySpace;\n\n            this._.positions.push(this._.position);\n            this._.colspans.push(this._.colspan);\n\n            // Add the new heights to those columns\n            this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n            this._.endingCol = this._.position + this._.colspan - 1;\n\n            for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n            }\n\n            // If this is the last item, create the layout\n            if (item === this.grid.items.length - 1) {\n                this.grid.layouts.push({\n                    positions: this._.positions,\n                    colspans: this._.colspans,\n                    colHeights: this._.colHeights,\n                    emptySpace: this._.emptySpace\n                });\n            } else {\n                // Dive deeper\n                this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n            }\n        }\n\n        delete this._;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Remove inner-word punctuation\n        handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        handle = handle.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        handle = Craft.asciiString(handle);\n\n        if (!this.settings.allowNonAlphaStart) {\n            // Handle must start with a letter\n            handle = handle.replace(/^[^a-z]+/, '');\n        }\n\n        // Get the \"words\"\n        var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n        handle = '';\n\n        if (Craft.handleCasing === 'snake') {\n            return words.join('_');\n        }\n\n        // Make it camelCase\n        for (let i = 0; i < words.length; i++) {\n            if (Craft.handleCasing !== 'pascal' && i === 0) {\n                handle += words[i];\n            } else {\n                handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n            }\n        }\n\n        return handle;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend({\n    $container: null,\n    progressBar: null,\n    uploader: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ImageUpload.defaults);\n        this.initImageUpload();\n    },\n\n    initImageUpload: function() {\n        this.$container = $(this.settings.containerSelector);\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl(this.settings.uploadAction),\n            formData: this.settings.postParameters,\n            fileInput: this.$container.find(this.settings.fileInputSelector),\n            paramName: this.settings.uploadParamName\n        };\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n        options.events.fileuploadfail = this._onUploadError.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        this.initButtons();\n    },\n\n    initButtons: function() {\n        this.$container.find(this.settings.uploadButtonSelector).on('click', ev => {\n            this.$container.find(this.settings.fileInputSelector).trigger('click');\n        });\n\n        this.$container.find(this.settings.deleteButtonSelector).on('click', ev => {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        this.refreshImage(response);\n                    }\n                });\n            }\n        });\n    },\n\n    refreshImage: function(response) {\n        $(this.settings.containerSelector).replaceWith(response.html);\n        this.settings.onAfterRefreshImage(response);\n        this.initImageUpload();\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function(event) {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var html = $(data.result.html);\n            this.refreshImage(data.result);\n        }\n\n        // Last file\n        if (this.uploader.isLastUpload()) {\n            this.progressBar.hideProgressBar();\n            this.$container.removeClass('uploading');\n        }\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadError: function(event, data) {\n        if (data.jqXHR.responseJSON.error) {\n            alert(data.jqXHR.responseJSON.error);\n            this.$container.removeClass('uploading');\n            this.progressBar.hideProgressBar();\n            this.progressBar.resetProgressBar();\n        }\n    }\n}, {\n    defaults: {\n        postParameters: {},\n        uploadAction: \"\",\n        deleteAction: \"\",\n        fileInputSelector: \"\",\n\n        onAfterRefreshImage: $.noop,\n        containerSelector: null,\n\n        uploadButtonSelector: null,\n        deleteButtonSelector: null,\n\n        uploadParamName: 'files'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend({\n    $icon: null,\n    content: null,\n    hud: null,\n\n    init: function(icon) {\n        this.$icon = $(icon);\n\n        if (this.$icon.data('infoicon')) {\n            Garnish.log('Double-instantiating an info icon on an element');\n            this.content = this.$icon.data('infoicon').content;\n            this.$icon.data('infoicon').destroy();\n        } else {\n            this.content = this.$icon.html();\n            this.$icon\n                .html('')\n                .attr({\n                    tabindex: 0,\n                    'role': 'button',\n                    'aria-label': Craft.t('app', 'Information'),\n                });\n        }\n\n        this.$icon.data('infoicon', this);\n\n        if (this.$icon[0].previousSibling && this.$icon[0].previousSibling.nodeType === Node.TEXT_NODE) {\n            // Make sure it's in a .nowrap container\n            const $parent = this.$icon.parent();\n            if (!$parent.hasClass('nowrap')) {\n                // Find the last word in the text\n                const m = this.$icon[0].previousSibling.nodeValue.match(/[^\\s\\-]+\\s*$/);\n                if (m) {\n                    this.$icon[0].previousSibling.nodeValue = this.$icon[0].previousSibling.nodeValue.substr(0, m.index);\n                    $('<span/>', {\n                        class: 'nowrap',\n                        html: m[0].replace(/\\s+$/, '') + ' ',\n                    })\n                        .insertAfter(this.$icon[0].previousSibling)\n                        .append(this.$icon);\n                }\n            }\n        }\n\n        this.addListener(this.$icon, 'click', ev => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.showHud();\n        });\n\n        this.addListener(this.$icon, 'keydown', ev => {\n            if (!(this.hud && this.hud.showing) && [Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.showHud();\n            }\n        });\n    },\n\n    showHud: function(ev) {\n        if (!this.hud) {\n            this.hud = new Garnish.HUD(this.$icon, this.content, {\n                hudClass: 'hud info-hud',\n                closeOtherHUDs: false,\n                onShow: () => {\n                    Garnish.shortcutManager.registerShortcut(Garnish.SPACE_KEY, () => {\n                        this.hud.hide();\n                    });\n                },\n            });\n            Craft.initUiElements(this.hud.$body);\n        } else {\n            this.hud.show();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend({\n    settings: null,\n    $outerContainer: null,\n    $innerContainer: null,\n    $input: null,\n    small: false,\n    on: false,\n    indeterminate: false,\n    dragger: null,\n\n    dragStartMargin: null,\n\n    init: function(outerContainer, settings) {\n        this.$outerContainer = $(outerContainer);\n\n        // Is this already a lightswitch?\n        if (this.$outerContainer.data('lightswitch')) {\n            Garnish.log('Double-instantiating a lightswitch on an element');\n            this.$outerContainer.data('lightswitch').destroy();\n        }\n\n        this.$outerContainer.data('lightswitch', this);\n\n        this.small = this.$outerContainer.hasClass('small');\n\n        this.setSettings(settings, Craft.LightSwitch.defaults);\n\n        this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n        this.$input = this.$outerContainer.find('input:first');\n\n        // If the input is disabled, go no further\n        if (this.$input.prop('disabled')) {\n            return;\n        }\n\n        this.on = this.$outerContainer.hasClass('on');\n        this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n        this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n        this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n        this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n            axis: Garnish.X_AXIS,\n            ignoreHandleSelector: null,\n            onDragStart: this._onDragStart.bind(this),\n            onDrag: this._onDrag.bind(this),\n            onDragStop: this._onDragStop.bind(this)\n        });\n\n        // Does the input have on/off labels?\n        let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n        if ($wrapper.length) {\n            this.addListener($wrapper.children('span[data-toggle=\"off\"]'), 'click', this.turnOff);\n            this.addListener($wrapper.children('span[data-toggle=\"on\"]'), 'click', this.turnOn);\n        }\n    },\n\n    turnOn: function(muteEvent) {\n        var changed = !this.on;\n\n        this.on = true;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.value);\n        this.$outerContainer.addClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'true');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnOff: function(muteEvent) {\n        var changed = this.on || this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin();\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val('');\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'false');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnIndeterminate: function(muteEvent) {\n        var changed = !this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = true;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.indeterminateValue);\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.addClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'mixed');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    toggle: function() {\n        if (this.indeterminate || !this.on) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    onChange: function() {\n        this.trigger('change');\n        this.settings.onChange(this.on);\n        this.$outerContainer.trigger('change');\n    },\n\n    _onMouseDown: function() {\n        this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n    },\n\n    _onMouseUp: function() {\n        this.removeListener(Garnish.$doc, 'mouseup');\n\n        // Was this a click?\n        if (!this.dragger.dragging) {\n            this.toggle();\n        }\n    },\n\n    _onKeyDown: function(event) {\n        switch (event.keyCode) {\n            case Garnish.SPACE_KEY: {\n                this.toggle();\n                event.preventDefault();\n                break;\n            }\n            case Garnish.RIGHT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOn();\n                } else {\n                    this.turnOff();\n                }\n\n                event.preventDefault();\n                break;\n            }\n            case Garnish.LEFT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOff();\n                } else {\n                    this.turnOn();\n                }\n\n                event.preventDefault();\n                break;\n            }\n        }\n    },\n\n    _getMargin: function() {\n        return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n    },\n\n    _onDragStart: function() {\n        this.$outerContainer.addClass('dragging');\n        this.dragStartMargin = this._getMargin();\n    },\n\n    _onDrag: function() {\n        var margin;\n\n        if (Craft.orientation === 'ltr') {\n            margin = this.dragStartMargin + this.dragger.mouseDistX;\n        } else {\n            margin = this.dragStartMargin - this.dragger.mouseDistX;\n        }\n\n        if (margin < this._getOffMargin()) {\n            margin = this._getOffMargin();\n        } else if (margin > 0) {\n            margin = 0;\n        }\n\n        this.$innerContainer.css('margin-' + Craft.left, margin);\n    },\n\n    _onDragStop: function() {\n        var margin = this._getMargin();\n        console.log(margin);\n\n        if (margin > (this._getOffMargin() / 2)) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    _onSettle: function() {\n        this.$outerContainer.removeClass('dragging');\n    },\n\n    destroy: function() {\n        this.base();\n        this.dragger.destroy();\n    },\n\n    _getOffMargin: function() {\n        return (this.small ? -10 : -12);\n    }\n}, {\n    animationDuration: 100,\n    defaults: {\n        value: '1',\n        indeterminateValue: '-',\n        onChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend({\n    $extraFields: null,\n    $trigger: null,\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $iframe: null,\n    $fieldPlaceholder: null,\n\n    previewUrl: null,\n    token: null,\n    basePostData: null,\n    inPreviewMode: false,\n    fields: null,\n    lastPostData: null,\n    updateIframeInterval: null,\n    loading: false,\n    checkAgain: false,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _slideInOnIframeLoad: false,\n    _forceUpdateIframeProxy: null,\n\n    _scrollX: null,\n    _scrollY: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.LivePreview.defaults);\n\n        // Should preview requests use a specific URL?\n        // This won't affect how the request gets routed (the action param will override it),\n        // but it will allow the templates to change behavior based on the request URI.\n        if (this.settings.previewUrl) {\n            this.previewUrl = this.settings.previewUrl;\n        } else {\n            this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n        }\n\n        // Load the preview over SSL if the current request is\n        if (document.location.protocol === 'https:') {\n            this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n        }\n\n        // Set the base post data\n        this.basePostData = $.extend({}, this.settings.previewParams);\n\n        this._forceUpdateIframeProxy = this.forceUpdateIframe.bind(this);\n\n        // Find the DOM elements\n        this.$extraFields = $(this.settings.extraFields);\n        this.$trigger = $(this.settings.trigger);\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n        // Event Listeners\n        this.addListener(this.$trigger, 'activate', 'toggle');\n\n        Craft.cp.on('beforeSaveShortcut', () => {\n            if (this.inPreviewMode) {\n                this.moveFieldsBack();\n            }\n        });\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n            inPx = Craft.LivePreview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    toggle: function() {\n        if (this.inPreviewMode) {\n            this.exit();\n        } else {\n            this.enter();\n        }\n    },\n\n    enter: function() {\n        if (this.inPreviewMode) {\n            return;\n        }\n\n        if (!this.token) {\n            this.createToken();\n            return;\n        }\n\n        this.trigger('beforeEnter');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            let $saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($editorHeader);\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this)\n            });\n\n            this.addListener($closeBtn, 'click', 'exit');\n            this.addListener($saveBtn, 'click', 'save');\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Move all the fields into the editor rather than copying them\n        // so any JS that's referencing the elements won't break.\n        this.fields = [];\n        var $fields = $(this.settings.fields);\n\n        for (var i = 0; i < $fields.length; i++) {\n            var $field = $($fields[i]),\n                $clone = this._getClone($field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter($field);\n            $field.detach();\n            this.$fieldPlaceholder.replaceWith($clone);\n            $field.appendTo(this.$editor);\n\n            this.fields.push({\n                $field: $field,\n                $clone: $clone\n            });\n        }\n\n        if (this.updateIframe()) {\n            this._slideInOnIframeLoad = true;\n        } else {\n            this.slideIn();\n        }\n\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = true;\n        this.trigger('enter');\n    },\n\n    createToken: function() {\n        Craft.postActionRequest('live-preview/create-token', {\n            previewAction: this.settings.previewAction\n        }, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.token = response.token;\n                this.enter();\n            }\n        });\n    },\n\n    save: function() {\n        Craft.cp.submitPrimaryForm();\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.updateIframeInterval = setInterval(this.updateIframe.bind(this), 1000);\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.exit();\n                }\n            });\n        });\n    },\n\n    exit: function() {\n        if (!this.inPreviewMode) {\n            return;\n        }\n\n        this.trigger('beforeExit');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        if (this.updateIframeInterval) {\n            clearInterval(this.updateIframeInterval);\n        }\n\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n        });\n\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = false;\n        this.trigger('exit');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n    },\n\n    updateIframe: function(force) {\n        if (force) {\n            this.lastPostData = null;\n        }\n\n        if (!this.inPreviewMode) {\n            return false;\n        }\n\n        if (this.loading) {\n            this.checkAgain = true;\n            return false;\n        }\n\n        // Has the post data changed?\n        var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n        if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n            this.lastPostData = postData;\n            this.loading = true;\n\n            var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n            this._scrollX = $doc ? $doc.scrollLeft() : 0;\n            this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n            $.ajax({\n                url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                method: 'POST',\n                data: $.extend({}, postData, this.basePostData),\n                headers: {\n                    'X-Craft-Token': this.token\n                },\n                xhrFields: {\n                    withCredentials: true\n                },\n                crossDomain: true,\n                success: this.handleSuccess.bind(this),\n                error: this.handleError.bind(this),\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    forceUpdateIframe: function() {\n        return this.updateIframe(true);\n    },\n\n    handleSuccess: function(data) {\n        var html = data +\n            '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n        // Create a new iframe\n        var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n        if (this.$iframe) {\n            $iframe.insertBefore(this.$iframe);\n        } else {\n            $iframe.appendTo(this.$iframeContainer);\n        }\n\n        this.addListener($iframe, 'load', function() {\n            if (this.$iframe) {\n                this.$iframe.remove();\n            }\n            this.$iframe = $iframe;\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n\n            this.removeListener($iframe, 'load');\n        });\n\n        Garnish.requestAnimationFrame(() => {\n            $iframe[0].contentWindow.document.open();\n            $iframe[0].contentWindow.document.write(html);\n            $iframe[0].contentWindow.document.close();\n            this.onResponse();\n        });\n    },\n\n    handleError: function() {\n        this.onResponse();\n    },\n\n    onResponse: function() {\n        this.loading = false;\n\n        if (this.checkAgain) {\n            this.checkAgain = false;\n            this.updateIframe();\n        }\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n\n    defaults: {\n        trigger: '.livepreviewbtn',\n        fields: null,\n        extraFields: null,\n        previewUrl: null,\n        previewAction: null,\n        previewParams: {}\n    }\n});\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend({\n    $passwordWrapper: null,\n    $passwordInput: null,\n    $textInput: null,\n    $currentInput: null,\n\n    $showPasswordToggle: null,\n    showingPassword: null,\n\n    init: function(passwordInput, settings) {\n        this.$passwordInput = $(passwordInput);\n        this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n        this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n        // Is this already a password input?\n        if (this.$passwordInput.data('passwordInput')) {\n            Garnish.log('Double-instantiating a password input on an element');\n            this.$passwordInput.data('passwordInput').destroy();\n        }\n\n        this.$passwordInput.data('passwordInput', this);\n\n        this.$showPasswordToggle = $('<button type=\"button\" class=\"invisible\" />');\n        this.$showPasswordToggle.addClass('password-toggle');\n        this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n        this.initInputFocusEvents(this.$passwordInput);\n        this.addListener(this.$showPasswordToggle, 'click', 'onClick');\n        this.hidePassword();\n    },\n\n    setCurrentInput: function($input) {\n        if (this.$currentInput) {\n            // Swap the inputs, while preventing the focus animation\n            $input.insertAfter(this.$currentInput);\n            this.$currentInput.detach();\n            $input.trigger('focus');\n\n            // Restore the input value\n            $input.val(this.$currentInput.val());\n        }\n\n        this.$currentInput = $input;\n\n        this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n    },\n\n    updateToggleLabel: function(label) {\n        this.$showPasswordToggle.text(label);\n    },\n\n    initInputFocusEvents: function($input) {\n        this.addListener($input, 'focus', function() {\n            this.$passwordWrapper.addClass('focus');\n        });\n        this.addListener($input, 'blur', function() {\n            this.$passwordWrapper.removeClass('focus');\n        });\n    },\n\n    showPassword: function() {\n        if (this.showingPassword) {\n            return;\n        }\n\n        if (!this.$textInput) {\n            this.$textInput = this.$passwordInput.clone(true);\n            this.$textInput.attr('type', 'text');\n            this.initInputFocusEvents(this.$textInput);\n        }\n\n        this.setCurrentInput(this.$textInput);\n        this.updateToggleLabel(Craft.t('app', 'Hide'));\n        this.showingPassword = true;\n    },\n\n    hidePassword: function() {\n        // showingPassword could be null, which is acceptable\n        if (this.showingPassword === false) {\n            return;\n        }\n\n        this.setCurrentInput(this.$passwordInput);\n        this.updateToggleLabel(Craft.t('app', 'Show'));\n        this.showingPassword = false;\n\n        // Alt key temporarily shows the password\n        this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n    },\n\n    togglePassword: function() {\n        if (this.showingPassword) {\n            this.hidePassword();\n        } else {\n            this.showPassword();\n        }\n\n        this.settings.onToggleInput(this.$currentInput);\n    },\n\n    onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n            this.showPassword();\n            this.$showPasswordToggle.addClass('invisible');\n            this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n        }\n    },\n\n    onKeyUp: function(ev) {\n        ev.preventDefault();\n\n        if (ev.keyCode === Garnish.ALT_KEY) {\n            this.hidePassword();\n            this.$showPasswordToggle.removeClass('invisible');\n        }\n    },\n\n    onInputChange: function() {\n        if (this.$currentInput.val()) {\n            this.$showPasswordToggle.removeClass('invisible');\n        } else {\n            this.$showPasswordToggle.addClass('invisible');\n        }\n    },\n\n    onClick: function(ev) {\n        if (this.$currentInput[0].setSelectionRange) {\n            var selectionStart = this.$currentInput[0].selectionStart,\n                selectionEnd = this.$currentInput[0].selectionEnd;\n\n            this.togglePassword();\n            this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n        } else {\n            this.togglePassword();\n        }\n    }\n}, {\n    defaults: {\n        onToggleInput: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend({\n    draftEditor: null,\n\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $spinner: null,\n    $statusIcon: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $previewHeader: null,\n    $targetBtn: null,\n    $targetMenu: null,\n    $deviceTypeContainer: null,\n    $orientationBtn: null,\n    $deviceMask: null,\n    $devicePreviewContainer: null,\n    $iframe: null,\n    iframeLoaded: false,\n    $tempInput: null,\n    $fieldPlaceholder: null,\n\n    isActive: false,\n    isVisible: false,\n    activeTarget: 0,\n\n    isDeviceUpdating: false,\n    deviceAnimationTimeout: null,\n    currentDeviceType: 'desktop',\n    deviceOrientation: null,\n    deviceWidth: '',\n    deviceHeight: '',\n    deviceMaskDimensions: {\n        phone: {\n            width: 375,\n            height: 753\n        },\n        tablet: {\n            width: 768,\n            height: 1110\n        }\n    },\n\n    draftId: null,\n    url: null,\n    fields: null,\n\n    iframeHeight: null,\n    scrollTop: null,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _updateIframeProxy: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(draftEditor) {\n        this.draftEditor = draftEditor;\n\n        this._updateIframeProxy = this.updateIframe.bind(this);\n\n        this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.Preview.minEditorWidthInPx) {\n            inPx = Craft.Preview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    open: function() {\n        if (this.isActive) {\n            return;\n        }\n\n        this.isActive = true;\n        this.trigger('beforeOpen');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n            this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n            if (Craft.Pro) {\n                this.$previewHeader = $('<header/>', {'class': 'lp-preview-header'}).appendTo(this.$previewContainer);\n\n                // Preview targets\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo(this.$previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    const $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    let $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n\n                    $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                }\n\n                // Device type buttons\n                this.$deviceTypeContainer = $('<div/>', {\n                    class: 'btngroup lp-device-type',\n                    role: 'listbox',\n                    'aria-label': Craft.t('app', 'Device type'),\n                    tabindex: '0',\n                }).appendTo(this.$previewHeader);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--desktop active',\n                    title: Craft.t('app', 'Desktop'),\n                    'aria-label': Craft.t('app', 'Desktop'),\n                    'aria-selected': 'true',\n                    tabindex: '-1',\n                    data: {\n                        width: '',\n                        height: '',\n                        deviceType: 'desktop'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--tablet',\n                    title: Craft.t('app', 'Tablet'),\n                    'aria-label': Craft.t('app', 'Tablet'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 768,\n                        height: 1024,\n                        deviceType: 'tablet'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--phone',\n                    title: Craft.t('app', 'Mobile'),\n                    'aria-label': Craft.t('app', 'Mobile'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 375,\n                        height: 667,\n                        deviceType: 'phone'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n\n                $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n\n                // Orientation toggle\n                this.$orientationBtn = $('<button/>', {\n                    type: 'button',\n                    'class': 'btn disabled',\n                    'data-icon': 'refresh',\n                    disabled: '',\n                    'aria-hidden': '',\n                    'text': Craft.t('app', 'Rotate')\n                }).appendTo(this.$previewHeader);\n                this.addListener(this.$orientationBtn, 'click', 'switchOrientation');\n\n                // Get the last stored orientation\n                this.deviceOrientation = Craft.getLocalStorage('LivePreview.orientation');\n\n                // Device type button click handler\n                this.addListener($('.btn', this.$deviceTypeContainer), 'click', 'switchDeviceType');\n\n                // Device mask\n                this.$deviceMask = $('<div/>', {\n                    'class': 'lp-device-mask'\n                });\n            }\n\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n            if (this.$deviceMask) {\n                this.$iframeContainer.append(this.$deviceMask);\n            }\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this),\n            });\n\n            this.addListener($closeBtn, 'click', 'close');\n            this.addListener(this.$statusIcon, 'click', () => {\n                this.draftEditor.showStatusHud(this.$statusIcon);\n            });\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Find the fields, excluding nested fields\n        this.fields = [];\n        var $fields = $('#content .field').not($('#content .field .field'));\n\n        if ($fields.length) {\n            // Insert our temporary input before the first field so we know where to swap in the serialized form values\n            this.$tempInput.insertBefore($fields.get(0));\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            for (let i = 0; i < $fields.length; i++) {\n                let $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n        }\n\n        this.updateIframe();\n\n        this.draftEditor.on('update', this._updateIframeProxy);\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.trigger('open');\n    },\n\n    switchTarget: function(i) {\n        this.activeTarget = i;\n        this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n        this.$targetMenu.find('a.sel').removeClass('sel');\n        this.$targetMenu.find('a').eq(i).addClass('sel');\n        this.updateIframe(true);\n        this.trigger('switchTarget', {\n            previewTarget: this.draftEditor.settings.previewTargets[i],\n        });\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        if (!this.isActive || this.isVisible) {\n            return;\n        }\n\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.close();\n                }\n            });\n        });\n\n        this.isVisible = true;\n    },\n\n    close: function() {\n        if (!this.isActive || !this.isVisible) {\n            return;\n        }\n\n        this.trigger('beforeClose');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        // Remove our temporary input and move the preview fields back into place\n        this.$tempInput.detach();\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n            this.resetDevicePreview();\n        });\n\n        this.draftEditor.off('update', this._updateIframeProxy);\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.isActive = false;\n        this.isVisible = false;\n        this.trigger('close');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n        if (this._devicePreviewIsActive()) {\n            this.updateDevicePreview();\n        }\n    },\n\n    _useIframeResizer: function() {\n        return Craft.previewIframeResizerOptions !== false;\n    },\n\n    updateIframe: function(resetScroll) {\n        if (!this.isActive) {\n            return false;\n        }\n\n        // Ignore non-boolean resetScroll values\n        resetScroll = resetScroll === true;\n\n        var target = this.draftEditor.settings.previewTargets[this.activeTarget];\n        var refresh = !!(\n            this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n            !this.$iframe ||\n            resetScroll ||\n            typeof target.refresh === 'undefined' ||\n            target.refresh\n        );\n\n        this.trigger('beforeUpdateIframe', {\n            previewTarget: target,\n            resetScroll: resetScroll,\n            refresh: refresh,\n        });\n\n        // If this is an existing preview target, make sure it wants to be refreshed automatically\n        if (!refresh) {\n            this.slideIn();\n            return;\n        }\n\n        this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n            // Maintain the current scroll position?\n            let sameHost;\n            if (resetScroll) {\n                this.scrollTop = null;\n            } else if (this.iframeLoaded && this.$iframe) {\n                if (this._useIframeResizer()) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                } else {\n                    sameHost = Craft.isSameHost(url);\n                    if (sameHost && this.$iframe[0].contentWindow) {\n                        this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                    }\n                }\n            }\n\n            this.iframeLoaded = false;\n\n            var $iframe = $('<iframe/>', {\n                'class': 'lp-preview',\n                frameborder: 0,\n                src: url,\n            });\n\n            if (this.$iframe) {\n                this.$iframe.replaceWith($iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            // If we’re on tablet/phone then wrap the iframe in our own container\n            // so we can keep all the iFrameResizer() stuff working\n            if (this._devicePreviewIsActive()) {\n                if (!this.$devicePreviewContainer) {\n                    this.$devicePreviewContainer = $('<div/>', {\n                        'class': 'lp-device-preview-container'\n                    });\n                    $iframe.wrap('<div class=\"lp-device-preview-container\"></div>');\n                    this.$devicePreviewContainer = this.$iframeContainer.find('.lp-device-preview-container');\n                }\n            }\n\n            // Keep the iframe height consistent with its content\n            if (this._useIframeResizer()) {\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                iFrameResize($.extend({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n            } else {\n                $iframe.on('load', () => {\n                    this.iframeLoaded = true;\n                    if (!resetScroll && sameHost && this.scrollTop !== null) {\n                        $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                    }\n                });\n            }\n\n            this.url = url;\n            this.$iframe = $iframe;\n\n            if (this._devicePreviewIsActive()) {\n                this.updateDevicePreview();\n            }\n\n            this.trigger('afterUpdateIframe', {\n                previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            this.slideIn();\n        });\n    },\n\n    _devicePreviewIsActive: function() {\n        return this.currentDeviceType !== 'desktop';\n    },\n\n    switchDeviceType: function(ev) {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n\n        const $btn = $(ev.target);\n        const newDeviceType = $btn.data('deviceType');\n\n        // Bail if we’re just smashing the same button\n        if (newDeviceType === this.currentDeviceType) {\n            return false;\n        }\n\n        // Store new device type data\n        this.currentDeviceType = newDeviceType;\n        this.deviceWidth = $btn.data('width');\n        this.deviceHeight = $btn.data('height');\n\n        // Set the active state on the button\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n\n        $btn\n            .addClass('active')\n            .attr('aria-selected', 'true');\n\n        // Update or reset\n        if (this.currentDeviceType === 'desktop') {\n            this.resetDevicePreview();\n        } else {\n            this.$iframeContainer.addClass('lp-iframe-container--updating');\n            this.updateIframe();\n            this.updateDevicePreview();\n        }\n    },\n\n    switchOrientation: function()\n    {\n        if (this.isDeviceUpdating || !this._devicePreviewIsActive()) {\n            return false;\n        }\n\n        // Switch to whichever orientation is currently not stored\n        if (!this.deviceOrientation || this.deviceOrientation === 'portrait') {\n            this.deviceOrientation = 'landscape';\n        } else {\n            this.deviceOrientation = 'portrait';\n        }\n\n        // Store the new one\n        Craft.setLocalStorage('LivePreview.orientation', this.deviceOrientation);\n\n        // Allow the animation to take place\n        this.$iframeContainer.addClass('lp-iframe-container--animating');\n\n        // Update the device preview\n        this.updateDevicePreview();\n    },\n\n    updateDevicePreview: function()\n    {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.isDeviceUpdating = true;\n\n        // Enable the orientation button\n        this.$orientationBtn\n            .removeClass('disabled')\n            .removeAttr('disabled')\n            .removeAttr('aria-hidden');\n\n        // Trigger the resized css mods\n        this.$iframeContainer.addClass('lp-iframe-container--has-device-preview');\n\n        // Add the tablet class if needed\n        if (this.currentDeviceType === 'tablet') {\n            this.$iframeContainer.addClass('lp-iframe-container--tablet');\n        } else {\n            this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n        }\n\n        // Figure out the best zoom\n        let hZoom = 1;\n        let wZoom = 1;\n        let zoom = 1;\n        let previewHeight = (this.$previewContainer.height() - 50) - 48; // 50px for the header bar and 24px clearance\n        let previewWidth = this.$previewContainer.width() - 48;\n        let maskHeight = this.deviceMaskDimensions[this.currentDeviceType].height;\n        let maskWidth = this.deviceMaskDimensions[this.currentDeviceType].width;\n\n        if (this.deviceOrientation === 'landscape') {\n            if (previewWidth < maskHeight) {\n                hZoom = previewWidth / maskHeight;\n            }\n            if (previewHeight < maskWidth) {\n                wZoom = previewHeight / maskWidth;\n            }\n        } else {\n            if (previewHeight < maskHeight) {\n                hZoom = previewHeight / maskHeight;\n            }\n            if (previewWidth < maskWidth) {\n                wZoom = previewWidth / maskWidth;\n            }\n        }\n\n        zoom = hZoom;\n        if (wZoom < hZoom) {\n            zoom = wZoom;\n        }\n\n        // Figure out the css values\n        const translate = -((100/zoom)/2);\n        const rotationDeg = this.deviceOrientation === 'landscape' ? '-90deg' : '0deg';\n\n        // Apply first to the device mask\n        this.$deviceMask.css({\n            width: this.deviceMaskDimensions[this.currentDeviceType].width + 'px',\n            height: this.deviceMaskDimensions[this.currentDeviceType].height + 'px',\n            transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%) rotate('+rotationDeg+')'\n        });\n\n        // After the animation duration we can update the iframe sizes and show it\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.deviceAnimationTimeout = setTimeout(() => {\n            // Then make the size change to the preview container\n            if (this.deviceOrientation === 'landscape') {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceHeight + 'px',\n                    height: this.deviceWidth + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: 0,\n                    marginLeft: '-' + (12*zoom) + 'px'\n                });\n            } else {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceWidth + 'px',\n                    height: this.deviceHeight + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: '-' + (12*zoom) + 'px',\n                    marginLeft: 0\n                });\n            }\n\n            // Remove the animating class and show the iframe\n            this.$iframeContainer.removeClass('lp-iframe-container--animating');\n            this.$iframeContainer.removeClass('lp-iframe-container--updating');\n            this.isDeviceUpdating = false;\n\n        }, 300);\n    },\n\n    resetDevicePreview: function()\n    {\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.currentDeviceType = 'desktop';\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n        this.$deviceTypeContainer.find('.lp-device-type-btn--desktop')\n            .addClass('active')\n            .attr('aria-selected', 'true');\n        this.$orientationBtn\n            .addClass('disabled')\n            .attr('disabled', '')\n            .attr('aria-hidden', '');\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n        this.$iframeContainer.removeClass('lp-iframe-container--has-device-preview');\n        this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n\n        // Flat out remove the iframe and let it get regenerated\n        if (this.$devicePreviewContainer) {\n            // If using iFrameResizer then remove the listeners first so we don’t get zombie instances\n            if (this._useIframeResizer()) {\n                this.$iframe[0].iFrameResizer.removeListeners();\n            }\n            this.$devicePreviewContainer.detach();\n            this.$devicePreviewContainer = null;\n            this.$iframe = null;\n            this.updateIframe();\n        }\n\n        this.isDeviceUpdating = false;\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        // Disable anything with a name attribute\n        $clone.find('[name]').prop('disabled', true);\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend({\n    assetId: null,\n    $spinner: null,\n    elementSelect: null,\n    type: null,\n    loaded: null,\n    requestId: 0,\n\n    /**\n     * Initialize the preview file modal.\n     * @returns {*|void}\n     */\n    init: function(assetId, elementSelect, settings) {\n        settings = $.extend(this.defaultSettings, settings);\n\n        settings.onHide = this._onHide.bind(this);\n\n        if (Craft.PreviewFileModal.openInstance) {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            if (instance.assetId !== assetId) {\n                instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                instance.elementSelect = elementSelect;\n            }\n\n            return this.destroy();\n        }\n\n        Craft.PreviewFileModal.openInstance = this;\n        this.elementSelect = elementSelect;\n\n        this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n        this.base(this.$container, $.extend({\n            resizable: true\n        }, settings));\n\n        // Cut the flicker, just show the nice person the preview.\n        if (this.$container) {\n            this.$container.velocity('stop');\n            this.$container.show().css('opacity', 1);\n\n            this.$shade.velocity('stop');\n            this.$shade.show().css('opacity', 1);\n        }\n\n        this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n    },\n\n    /**\n     * When hiding, remove all traces and focus last focused element.\n     * @private\n     */\n    _onHide: function() {\n        Craft.PreviewFileModal.openInstance = null;\n        if (this.elementSelect) {\n            this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n        }\n\n        this.$shade.remove();\n\n        return this.destroy();\n    },\n\n    /**\n     * Disappear immediately forever.\n     * @returns {boolean}\n     */\n    selfDestruct: function() {\n        var instance = Craft.PreviewFileModal.openInstance;\n\n        instance.hide();\n        instance.$shade.remove();\n        instance.destroy();\n\n        Craft.PreviewFileModal.openInstance = null;\n\n        return true;\n    },\n\n    /**\n     * Load an asset, using starting width and height, if applicable\n     * @param assetId\n     * @param startingWidth\n     * @param startingHeight\n     */\n    loadAsset: function(assetId, startingWidth, startingHeight) {\n        this.assetId = assetId;\n\n        this.$container.empty();\n        this.loaded = false;\n\n        this.desiredHeight = null;\n        this.desiredWidth = null;\n\n        var containerHeight = Garnish.$win.height() * 0.66;\n        var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n        containerHeight = containerWidth / 4 * 3;\n\n        if (startingWidth && startingHeight) {\n            var ratio = startingWidth / startingHeight;\n            containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n            containerWidth = containerHeight * ratio;\n\n            // This might actually have put width over the viewport limits, so doublecheck\n            if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = containerWidth / ratio;\n            }\n        }\n\n        this._resizeContainer(containerWidth, containerHeight);\n\n        this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n        var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n            left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n        this.$spinner.css({left: left, top: top, position: 'absolute'});\n        this.requestId++;\n\n        Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, (response, textStatus) => {\n            this.$container.removeClass('loading');\n            this.$spinner.remove();\n            this.loaded = true;\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (response.requestId != this.requestId) {\n                        return;\n                    }\n\n                    if (!response.previewHtml) {\n                        this.$container.addClass('zilch');\n                        this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                        return;\n                    }\n\n                    this.$container.removeClass('zilch');\n                    this.$container.append(response.previewHtml);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n                } else {\n                    alert(response.error);\n\n                    this.hide();\n                }\n            }\n        });\n    },\n\n    /**\n     * Resize the container to specified dimensions\n     * @param containerWidth\n     * @param containerHeight\n     * @private\n     */\n    _resizeContainer: function(containerWidth, containerHeight) {\n        this.$container.css({\n            'width': containerWidth,\n            'min-width': containerWidth,\n            'max-width': containerWidth,\n            'height': containerHeight,\n            'min-height': containerHeight,\n            'max-height': containerHeight,\n            'top': (Garnish.$win.height() - containerHeight) / 2,\n            'left': (Garnish.$win.width() - containerWidth) / 2\n        });\n    }\n}, {\n    defaultSettings: {\n        startingWidth: null,\n        startingHeight: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend({\n    $progressBar: null,\n    $innerProgressBar: null,\n    $progressBarStatus: null,\n\n    _itemCount: 0,\n    _processedItemCount: 0,\n    _displaySteps: false,\n\n    init: function($element, displaySteps) {\n        if (displaySteps) {\n            this._displaySteps = true;\n        }\n\n        this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n        this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n        this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n        this.resetProgressBar();\n    },\n\n    /**\n     * Reset the progress bar\n     */\n    resetProgressBar: function() {\n        // Since setting the progress percentage implies that there is progress to be shown\n        // It removes the pending class - we must add it back.\n        this.setProgressPercentage(100);\n        this.$progressBar.addClass('pending');\n\n        // Reset all the counters\n        this.setItemCount(1);\n        this.setProcessedItemCount(0);\n        this.$progressBarStatus.html('');\n\n        if (this._displaySteps) {\n            this.$progressBar.addClass('has-status');\n        }\n    },\n\n    /**\n     * Fade to invisible, hide it using a class and reset opacity to visible\n     */\n    hideProgressBar: function() {\n        this.$progressBar.fadeTo('fast', 0.01, () => {\n            this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n    },\n\n    showProgressBar: function() {\n        this.$progressBar.removeClass('hidden');\n        this.$progressBarStatus.removeClass('hidden');\n    },\n\n    setItemCount: function(count) {\n        this._itemCount = count;\n    },\n\n    incrementItemCount: function(count) {\n        this._itemCount += count;\n    },\n\n    setProcessedItemCount: function(count) {\n        this._processedItemCount = count;\n    },\n\n    incrementProcessedItemCount: function(count) {\n        this._processedItemCount += count;\n    },\n\n    updateProgressBar: function() {\n        // Only fools would allow accidental division by zero.\n        this._itemCount = Math.max(this._itemCount, 1);\n\n        var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n        this.setProgressPercentage(width);\n\n        if (this._displaySteps) {\n            this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n        }\n    },\n\n    setProgressPercentage: function(percentage, animate) {\n        if (percentage === 0) {\n            this.$progressBar.addClass('pending');\n        } else {\n            this.$progressBar.removeClass('pending');\n\n            if (animate) {\n                this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n            } else {\n                this.$innerProgressBar.velocity('stop').width(percentage + '%');\n            }\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, this._handleBatchPromptSelection.bind(this), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            } else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        } else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', () => {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        });\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n","/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', this._handleResize.bind(this));\n        this.addListener(this.$container, 'tapstart', this._handleTapStart.bind(this));\n        this.addListener(Garnish.$bod, 'tapmove', this._handleTapMove.bind(this));\n        this.addListener(Garnish.$bod, 'tapend', this._handleTapEnd.bind(this));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout(() => {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        } else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (((this.$graduations.width() / 2) + (position * -1)) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n        // Remove inner-word punctuation\n        sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        if (!Craft.allowUppercaseInSlug) {\n            sourceVal = sourceVal.toLowerCase();\n        }\n\n        if (Craft.limitAutoSlugsToAscii) {\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n        }\n\n        // Get the \"words\". Split on anything that is not alphanumeric.\n        // Reference: http://www.regular-expressions.info/unicode.html\n        var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n        if (words.length) {\n            return words.join(Craft.slugWordSeparator);\n        } else {\n            return '';\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend({\n    id: null,\n\n    $container: null,\n    state: null,\n    structureDrag: null,\n\n    /**\n     * Init\n     */\n    init: function(id, container, settings) {\n        this.id = id;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Structure.defaults);\n\n        // Is this already a structure?\n        if (this.$container.data('structure')) {\n            Garnish.log('Double-instantiating a structure on an element');\n            this.$container.data('structure').destroy();\n        }\n\n        this.$container.data('structure', this);\n\n        this.state = {};\n\n        if (this.settings.storageKey) {\n            $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n        }\n\n        if (typeof this.state.collapsedElementIds === 'undefined') {\n            this.state.collapsedElementIds = [];\n        }\n\n        var $parents = this.$container.find('ul').prev('.row');\n\n        for (var i = 0; i < $parents.length; i++) {\n            var $row = $($parents[i]),\n                $li = $row.parent(),\n                $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n            if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                $li.addClass('collapsed');\n            }\n\n            this.initToggle($toggle);\n        }\n\n        if (this.settings.sortable) {\n            this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n        }\n\n        if (this.settings.newChildUrl) {\n            this.initNewChildMenus(this.$container.find('.add'));\n        }\n    },\n\n    initToggle: function($toggle) {\n        $toggle.on('click', ev => {\n            var $li = $(ev.currentTarget).closest('li'),\n                elementId = $li.children('.row').find('.element:first').data('id'),\n                viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n            if ($li.hasClass('collapsed')) {\n                $li.removeClass('collapsed');\n\n                if (viewStateKey !== -1) {\n                    this.state.collapsedElementIds.splice(viewStateKey, 1);\n                }\n            } else {\n                $li.addClass('collapsed');\n\n                if (viewStateKey === -1) {\n                    this.state.collapsedElementIds.push(elementId);\n                }\n            }\n\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.state);\n            }\n        });\n    },\n\n    initNewChildMenus: function($addBtns) {\n        this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n    },\n\n    onNewChildMenuClick: function(ev) {\n        var $btn = $(ev.currentTarget);\n\n        if (!$btn.data('menubtn')) {\n            var elementId = $btn.parent().children('.element').data('id'),\n                newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n            $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n            var menuBtn = new Garnish.MenuBtn($btn);\n            menuBtn.showMenu();\n        }\n    },\n\n    getIndent: function(level) {\n        return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n    },\n\n    addElement: function($element) {\n        var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n            $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n        $row.append($element);\n\n        if (this.settings.sortable) {\n            $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n            this.structureDrag.addItems($li);\n        }\n\n        if (this.settings.newChildUrl) {\n            var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n            this.initNewChildMenus($addBtn);\n        }\n\n        $row.css('margin-bottom', -30);\n        $row.velocity({'margin-bottom': 0}, 'fast');\n    },\n\n    removeElement: function($element) {\n        var $li = $element.parent().parent();\n\n        if (this.settings.sortable) {\n            this.structureDrag.removeItems($li);\n        }\n\n        var $parentUl;\n\n        if (!$li.siblings().length) {\n            $parentUl = $li.parent();\n        }\n\n        $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', () => {\n            $li.remove();\n\n            if (typeof $parentUl !== 'undefined') {\n                this._removeUl($parentUl);\n            }\n        });\n    },\n\n    _removeUl: function($ul) {\n        $ul.siblings('.row').children('.toggle').remove();\n        $ul.remove();\n    }\n}, {\n    baseIndent: 8,\n    nestedIndent: 35,\n\n    defaults: {\n        storageKey: null,\n        sortable: false,\n        newChildUrl: null,\n        maxLevels: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend({\n    structure: null,\n    maxLevels: null,\n    draggeeLevel: null,\n\n    $helperLi: null,\n    $targets: null,\n    draggeeHeight: null,\n\n    init: function(structure, maxLevels) {\n        this.structure = structure;\n        this.maxLevels = maxLevels;\n\n        this.$insertion = $('<li class=\"draginsertion\"/>');\n\n        var $items = this.structure.$container.find('li');\n\n        this.base($items, {\n            handle: '.element:first, .move:first',\n            helper: this.getHelper.bind(this)\n        });\n    },\n\n    getHelper: function($helper) {\n        this.$helperLi = $helper;\n        var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n        $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n        $helper.find('.move').removeAttr('title');\n        return $ul;\n    },\n\n    onDragStart: function() {\n        this.$targets = $();\n\n        // Recursively find each of the targets, in the order they appear to be in\n        this.findTargets(this.structure.$container);\n\n        // How deep does the rabbit hole go?\n        this.draggeeLevel = 0;\n        var $level = this.$draggee;\n        do {\n            this.draggeeLevel++;\n            $level = $level.find('> ul > li');\n        } while ($level.length);\n\n        // Collapse the draggee\n        this.draggeeHeight = this.$draggee.height();\n        this.$draggee.velocity({\n            height: 0\n        }, 'fast', () => {\n            this.$draggee.addClass('hidden');\n        });\n        this.base();\n\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.cancelDrag();\n            }\n        });\n    },\n\n    findTargets: function($ul) {\n        var $lis = $ul.children().not(this.$draggee);\n\n        for (var i = 0; i < $lis.length; i++) {\n            var $li = $($lis[i]);\n            this.$targets = this.$targets.add($li.children('.row'));\n\n            if (!$li.hasClass('collapsed')) {\n                this.findTargets($li.children('ul'));\n            }\n        }\n    },\n\n    onDrag: function() {\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n            this.$insertion.remove();\n        }\n\n        // First let's find the closest target\n        this._.$closestTarget = null;\n        this._.closestTargetPos = null;\n        this._.closestTargetYDiff = null;\n        this._.closestTargetOffset = null;\n        this._.closestTargetHeight = null;\n\n        for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n            this._.$target = $(this.$targets[this._.i]);\n            this._.targetOffset = this._.$target.offset();\n            this._.targetHeight = this._.$target.outerHeight();\n            this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n            this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n            if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                this._.$closestTarget = this._.$target;\n                this._.closestTargetPos = this._.i;\n                this._.closestTargetYDiff = this._.targetYDiff;\n                this._.closestTargetOffset = this._.targetOffset;\n                this._.closestTargetHeight = this._.targetHeight;\n            } else {\n                // Getting colder\n                break;\n            }\n        }\n\n        if (!this._.$closestTarget) {\n            return;\n        }\n\n        // Are we hovering above the first row?\n        if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n            this.$insertion.prependTo(this.structure.$container);\n        } else {\n            this._.$closestTargetLi = this._.$closestTarget.parent();\n            this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n            // Is there a next row?\n            if (this._.closestTargetPos < this.$targets.length - 1) {\n                this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n            } else {\n                this._.$nextTargetLi = null;\n                this._.nextTargetLevel = null;\n            }\n\n            // Are we hovering between this row and the next one?\n            this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n            /**\n             * Scenario 1: Both rows have the same level.\n             *\n             *     * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                if (this._.hoveringBetweenRows) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                        // Position the insertion after the closest target\n                        this.$insertion.insertAfter(this._.$closestTargetLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n\n            /**\n             * Scenario 2: Next row is a child of this one.\n             *\n             *     * Row 1\n             *     ----------------------\n             *         * Row 2\n             */\n\n            else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                    if (this._.hoveringBetweenRows) {\n                        // Position the insertion as the first child of the closest target\n                        this.$insertion.insertBefore(this._.$nextTargetLi);\n                    } else {\n                        this._.$closestTarget.addClass('draghover');\n                        this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                    }\n                }\n            }\n\n            /**\n             * Scenario 3: Next row is a child of a parent node, or there is no next row.\n             *\n             *         * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            else {\n                if (this._.hoveringBetweenRows) {\n                    // Determine which <li> to position the insertion after\n                    this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                    if (Craft.orientation === 'rtl') {\n                        this._.draggeeX += this.$helperLi.width();\n                    }\n\n                    this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                    this._.$closestParentLi = null;\n                    this._.closestParentLiXDiff = null;\n                    this._.closestParentLevel = null;\n\n                    for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                        this._.$parentLi = $(this._.$parentLis[this._.i]);\n                        this._.parentLiX = this._.$parentLi.offset().left;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.parentLiX += this._.$parentLi.width();\n                        }\n\n                        this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                        this._.parentLevel = this._.$parentLi.data('level');\n\n                        if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                            !this._.$closestParentLi || (\n                                this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                            )\n                        )) {\n                            this._.$closestParentLi = this._.$parentLi;\n                            this._.closestParentLiXDiff = this._.parentLiXDiff;\n                            this._.closestParentLevel = this._.parentLevel;\n                        }\n                    }\n\n                    if (this._.$closestParentLi) {\n                        this.$insertion.insertAfter(this._.$closestParentLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n        }\n    },\n\n    cancelDrag: function() {\n        this.$insertion.remove();\n\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n        }\n\n        this.onMouseUp();\n    },\n\n    onDragStop: function() {\n        // Are we repositioning the draggee?\n        if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n            var $draggeeParent,\n                moved;\n\n            // Are we about to leave the draggee's original parent childless?\n            if (!this.$draggee.siblings().length) {\n                $draggeeParent = this.$draggee.parent();\n            }\n\n            if (this.$insertion.parent().length) {\n                // Make sure the insertion isn't right next to the draggee\n                var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                    this.$insertion.replaceWith(this.$draggee);\n                    moved = true;\n                } else {\n                    this.$insertion.remove();\n                    moved = false;\n                }\n            } else {\n                var $ul = this._.$closestTargetLi.children('ul');\n\n                // Make sure this is a different parent than the draggee's\n                if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                    if (!$ul.length) {\n                        var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                        this.structure.initToggle($toggle);\n\n                        $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                    } else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                        this._.$closestTarget.children('.toggle').trigger('click');\n                    }\n\n                    this.$draggee.appendTo($ul);\n                    moved = true;\n                } else {\n                    moved = false;\n                }\n            }\n\n            // Remove the class either way\n            this._.$closestTarget.removeClass('draghover');\n\n            if (moved) {\n                // Now deal with the now-childless parent\n                if ($draggeeParent) {\n                    this.structure._removeUl($draggeeParent);\n                }\n\n                // Has the level changed?\n                var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                var animateCss;\n\n                if (newLevel != this.$draggee.data('level')) {\n                    // Correct the helper's padding if moving to/from level 1\n                    if (this.$draggee.data('level') == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = 38;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    } else if (newLevel == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    }\n\n                    this.setLevel(this.$draggee, newLevel);\n                }\n\n                // Make it real\n                var $element = this.$draggee.children('.row').children('.element');\n\n                var data = {\n                    structureId: this.structure.id,\n                    elementId: $element.data('id'),\n                    siteId: $element.data('site-id'),\n                    prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                    parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                };\n\n                Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                    }\n                });\n            }\n        }\n\n        // Animate things back into place\n        this.$draggee.velocity('stop').removeClass('hidden').velocity({\n            height: this.draggeeHeight\n        }, 'fast', () => {\n            this.$draggee.css('height', 'auto');\n        });\n\n        this.returnHelpersToDraggees();\n\n        this.base();\n    },\n\n    setLevel: function($li, level) {\n        $li.data('level', level);\n\n        var indent = this.structure.getIndent(level);\n\n        var css = {};\n        css['margin-' + Craft.left] = '-' + indent + 'px';\n        css['padding-' + Craft.left] = indent + 'px';\n        this.$draggee.children('.row').css(css);\n\n        var $childLis = $li.children('ul').children();\n\n        for (var i = 0; i < $childLis.length; i++) {\n            this.setLevel($($childLis[i]), level + 1);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n    tableView: null,\n    structureId: null,\n    maxLevels: null,\n\n    _basePadding: null,\n    _helperMargin: null,\n\n    _$firstRowCells: null,\n    _$titleHelperCell: null,\n\n    _titleHelperCellOuterWidth: null,\n\n    _ancestors: null,\n    _updateAncestorsFrame: null,\n\n    _draggeeLevel: null,\n    _draggeeLevelDelta: null,\n    draggingLastElements: null,\n    _loadingDraggeeLevelDelta: false,\n\n    _targetLevel: null,\n    _targetLevelBounds: null,\n\n    _positionChanged: null,\n\n    /**\n     * Constructor\n     */\n    init: function(tableView, $elements, settings) {\n        this.tableView = tableView;\n        this.structureId = this.tableView.$table.data('structure-id');\n        this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n        this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n        this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n        settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n            handle: '.move',\n            collapseDraggees: true,\n            singleHelper: true,\n            helperSpacingY: 2,\n            magnetStrength: 4,\n            helper: this.getHelper.bind(this),\n            helperLagBase: 1.5,\n            axis: Garnish.Y_AXIS\n        });\n\n        this.base($elements, settings);\n    },\n\n    /**\n     * Returns the draggee rows (including any descendent rows).\n     */\n    findDraggee: function() {\n        this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n        this._draggeeLevelDelta = 0;\n\n        var $draggee = $(this.$targetItem),\n            $nextRow = this.$targetItem.next();\n\n        while ($nextRow.length) {\n            // See if this row is a descendant of the draggee\n            var nextRowLevel = $nextRow.data('level');\n\n            if (nextRowLevel <= this._draggeeLevel) {\n                break;\n            }\n\n            // Is this the deepest descendant we've seen so far?\n            var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n            if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                this._draggeeLevelDelta = nextRowLevelDelta;\n            }\n\n            // Add it and prep the next row\n            $draggee = $draggee.add($nextRow);\n            $nextRow = $nextRow.next();\n        }\n\n        // Are we dragging the last elements on the page?\n        this.draggingLastElements = !$nextRow.length;\n\n        // Do we have a maxLevels to enforce,\n        // and does it look like this draggee has descendants we don't know about yet?\n        if (\n            this.maxLevels &&\n            this.draggingLastElements &&\n            this.tableView.getMorePending()\n        ) {\n            // Only way to know the true descendant level delta is to ask PHP\n            this._loadingDraggeeLevelDelta = true;\n\n            var data = this._getAjaxBaseData(this.$targetItem);\n\n            Craft.postActionRequest('structures/get-element-level-delta', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this._loadingDraggeeLevelDelta = false;\n\n                    if (this.dragging) {\n                        this._draggeeLevelDelta = response.delta;\n                        this.drag(false);\n                    }\n                }\n            });\n        }\n\n        return $draggee;\n    },\n\n    /**\n     * Returns the drag helper.\n     */\n    getHelper: function($helperRow) {\n        var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n            $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n            $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the column widths\n        this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n        var $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            var $helperCell = $($helperCells[i]);\n\n            // Skip the checkbox cell\n            if ($helperCell.hasClass('checkbox-cell')) {\n                $helperCell.remove();\n                continue;\n            }\n\n            // Hard-set the cell widths\n            var $firstRowCell = $(this._$firstRowCells[i]);\n            var width = $firstRowCell[0].getBoundingClientRect().width;\n\n            $firstRowCell.css('width', width + 'px');\n            $helperCell.css('width', width + 'px');\n\n            // Is this the title cell?\n            if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                this._$titleHelperCell = $helperCell;\n\n                var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                this._titleHelperCellOuterWidth = width;\n\n                $helperCell.css('padding-' + Craft.left, this._basePadding);\n            }\n        }\n\n        return $outerContainer;\n    },\n\n    /**\n     * Returns whether the draggee can be inserted before a given item.\n     */\n    canInsertBefore: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item.prev(), $item) !== false);\n    },\n\n    /**\n     * Returns whether the draggee can be inserted after a given item.\n     */\n    canInsertAfter: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item, $item.next()) !== false);\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        // Get the initial set of ancestors, before the item gets moved\n        this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n        // Set the initial target level bounds\n        this._setTargetLevelBounds();\n\n        // Check to see if we should load more elements now\n        this.tableView.maybeLoadMore();\n\n        this.base();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.base();\n        this._updateIndent();\n    },\n\n    /**\n     * On Insertion Point Change\n     */\n    onInsertionPointChange: function() {\n        this._setTargetLevelBounds();\n        this._updateAncestorsBeforeRepaint();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this._positionChanged = false;\n        this.base();\n\n        // Update the draggee's padding if the position just changed\n        // ---------------------------------------------------------------------\n\n        if (this._targetLevel != this._draggeeLevel) {\n            var levelDiff = this._targetLevel - this._draggeeLevel;\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                var $draggee = $(this.$draggee[i]),\n                    oldLevel = $draggee.data('level'),\n                    newLevel = oldLevel + levelDiff,\n                    padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                $draggee.data('level', newLevel);\n                $draggee.find('.element').data('level', newLevel);\n                $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n            }\n\n            this._positionChanged = true;\n        }\n\n        // Keep in mind this could have also been set by onSortChange()\n        if (this._positionChanged) {\n            // Tell the server about the new position\n            // -----------------------------------------------------------------\n\n            var data = this._getAjaxBaseData(this.$draggee);\n\n            // Find the previous sibling/parent, if there is one\n            var $prevRow = this.$draggee.first().prev();\n\n            while ($prevRow.length) {\n                var prevRowLevel = $prevRow.data('level');\n\n                if (prevRowLevel == this._targetLevel) {\n                    data.prevId = $prevRow.data('id');\n                    break;\n                }\n\n                if (prevRowLevel < this._targetLevel) {\n                    data.parentId = $prevRow.data('id');\n\n                    // Is this row collapsed?\n                    var $toggle = $prevRow.find('> th > .toggle');\n\n                    if (!$toggle.hasClass('expanded')) {\n                        // Make it look expanded\n                        $toggle.addClass('expanded');\n\n                        // Add a temporary row\n                        var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                        // Remove the target item\n                        if (this.tableView.elementSelect) {\n                            this.tableView.elementSelect.removeItems(this.$targetItem);\n                        }\n\n                        this.removeItems(this.$targetItem);\n                        this.$targetItem.remove();\n                        this.tableView._totalVisible--;\n                    }\n\n                    break;\n                }\n\n                $prevRow = $prevRow.prev();\n            }\n\n            Craft.postActionRequest('structures/move-element', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    if (!response.success) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        this.tableView.elementIndex.updateElements();\n                        return;\n                    }\n                    Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                    this.onPositionChange();\n\n                    // Were we waiting on this to complete so we can expand the new parent?\n                    if ($spinnerRow && $spinnerRow.parent().length) {\n                        $spinnerRow.remove();\n                        this.tableView._expandElement($toggle, true);\n                    }\n\n                    // See if we should run any pending tasks\n                    Craft.cp.runQueue();\n                }\n            });\n        }\n    },\n\n    onSortChange: function() {\n        if (this.tableView.elementSelect) {\n            this.tableView.elementSelect.resetItemOrder();\n        }\n\n        this._positionChanged = true;\n        this.base();\n    },\n\n    onPositionChange: function() {\n        Garnish.requestAnimationFrame(() => {\n            this.trigger('positionChange');\n            this.settings.onPositionChange();\n        });\n    },\n\n    onReturnHelpersToDraggees: function() {\n        this._$firstRowCells.css('width', '');\n\n        // If we were dragging the last elements on the page and ended up loading any additional elements in,\n        // there could be a gap between the last draggee item and whatever now comes after it.\n        // So remove the post-draggee elements and possibly load up the next batch.\n        if (this.draggingLastElements && this.tableView.getMorePending()) {\n            // Update the element index's record of how many items are actually visible\n            this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n            var $postDraggeeItems = this.$draggee.last().nextAll();\n\n            if ($postDraggeeItems.length) {\n                this.removeItems($postDraggeeItems);\n                $postDraggeeItems.remove();\n                this.tableView.maybeLoadMore();\n            }\n        }\n\n        this.base();\n    },\n\n    /**\n     * Returns the min and max levels that the draggee could occupy between\n     * two given rows, or false if it’s not going to work out.\n     */\n    _getLevelBounds: function($prevRow, $nextRow) {\n        // Can't go any lower than the next row, if there is one\n        if ($nextRow && $nextRow.length) {\n            this._getLevelBounds._minLevel = $nextRow.data('level');\n        } else {\n            this._getLevelBounds._minLevel = 1;\n        }\n\n        // Can't go any higher than the previous row + 1\n        if ($prevRow && $prevRow.length) {\n            this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n        } else {\n            this._getLevelBounds._maxLevel = 1;\n        }\n\n        // Does this structure have a max level?\n        if (this.maxLevels) {\n            // Make sure it's going to fit at all here\n            if (\n                this._getLevelBounds._minLevel != 1 &&\n                this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n            ) {\n                return false;\n            }\n\n            // Limit the max level if we have to\n            if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                    this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                }\n            }\n        }\n\n        return {\n            min: this._getLevelBounds._minLevel,\n            max: this._getLevelBounds._maxLevel\n        };\n    },\n\n    /**\n     * Determines the min and max possible levels at the current draggee's position.\n     */\n    _setTargetLevelBounds: function() {\n        this._targetLevelBounds = this._getLevelBounds(\n            this.$draggee.first().prev(),\n            this.$draggee.last().next()\n        );\n    },\n\n    /**\n     * Determines the target level based on the current mouse position.\n     */\n    _updateIndent: function(forcePositionChange) {\n        // Figure out the target level\n        // ---------------------------------------------------------------------\n\n        // How far has the cursor moved?\n        this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n        // Flip that if this is RTL\n        if (Craft.orientation === 'rtl') {\n            this._updateIndent._mouseDist *= -1;\n        }\n\n        // What is that in indentation levels?\n        this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // Combine with the original level to get the new target level\n        this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n        // Contain it within our min/max levels\n        if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n            this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n            this._updateIndent._targetLevel = this._targetLevelBounds.min;\n        } else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n            this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n            this._updateIndent._targetLevel = this._targetLevelBounds.max;\n        }\n\n        // Has the target level changed?\n        if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n            // Target level is changing, so update the ancestors\n            this._updateAncestorsBeforeRepaint();\n        }\n\n        // Update the UI\n        // ---------------------------------------------------------------------\n\n        // How far away is the cursor from the exact target level distance?\n        this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // What's the magnet impact of that?\n        this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n        // Put it on a leash\n        if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n            this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n        }\n\n        // Apply the new margin/width\n        this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n        this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n        this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n    },\n\n    /**\n     * Returns the indent size for a given level\n     */\n    _getLevelIndent: function(level) {\n        return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n    },\n\n    /**\n     * Returns the base data that should be sent with StructureController Ajax requests.\n     */\n    _getAjaxBaseData: function($row) {\n        return {\n            structureId: this.structureId,\n            elementId: $row.data('id'),\n            siteId: $row.find('.element:first').data('site-id')\n        };\n    },\n\n    /**\n     * Returns a row's ancestor rows\n     */\n    _getAncestors: function($row, targetLevel) {\n        this._getAncestors._ancestors = [];\n\n        if (targetLevel != 0) {\n            this._getAncestors._level = targetLevel;\n            this._getAncestors._$prevRow = $row.prev();\n\n            while (this._getAncestors._$prevRow.length) {\n                if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                    this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                    this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                    // Did we just reach the top?\n                    if (this._getAncestors._level == 0) {\n                        break;\n                    }\n                }\n\n                this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n            }\n        }\n\n        return this._getAncestors._ancestors;\n    },\n\n    /**\n     * Prepares to have the ancestors updated before the screen is repainted.\n     */\n    _updateAncestorsBeforeRepaint: function() {\n        if (this._updateAncestorsFrame) {\n            Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n        }\n\n        this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestors.bind(this));\n    },\n\n    _updateAncestors: function() {\n        this._updateAncestorsFrame = null;\n\n        // Update the old ancestors\n        // -----------------------------------------------------------------\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n            // One less descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n            // Is it now childless?\n            if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                // Remove its toggle\n                this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n            }\n        }\n\n        // Update the new ancestors\n        // -----------------------------------------------------------------\n\n        this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n            // One more descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n            // Is this its first child?\n            if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                // Create its toggle\n                $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                    .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n            }\n        }\n\n        this._ancestors = this._updateAncestors._newAncestors;\n\n        delete this._updateAncestors._i;\n        delete this._updateAncestors._$ancestor;\n        delete this._updateAncestors._newAncestors;\n    }\n}, {\n    HELPER_MARGIN: 0,\n    LEVEL_INDENT: 44,\n    MAX_GIVE: 22,\n\n    defaults: {\n        onPositionChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend({\n    $table: null,\n    $selectedSortHeader: null,\n\n    structureTableSort: null,\n\n    _totalVisiblePostStructureTableDraggee: null,\n    _morePendingPostStructureTableDraggee: false,\n\n    getElementContainer: function() {\n        // Save a reference to the table\n        this.$table = this.$container.find('table:first');\n        return this.$table.children('tbody:first');\n    },\n\n    afterInit: function() {\n        // Set the sort header\n        this.initTableHeaders();\n\n        // Create the Structure Table Sorter\n        if (\n            this.elementIndex.settings.context === 'index' &&\n            this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n            Garnish.hasAttr(this.$table, 'data-structure-id')\n        ) {\n            this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements());\n        } else {\n            this.structureTableSort = null;\n        }\n\n        // Handle expand/collapse toggles for Structures\n        if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n            this.addListener(this.$elementContainer, 'click', function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.hasClass('toggle')) {\n                    if (this._collapseElement($target) === false) {\n                        this._expandElement($target);\n                    }\n                }\n            });\n        }\n    },\n\n    initTableHeaders: function() {\n        var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n            $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n        for (var i = 0; i < $tableHeaders.length; i++) {\n            var $header = $tableHeaders.eq(i),\n                attr = $header.attr('data-attribute');\n\n            // Is this the selected sort attribute?\n            if (attr === selectedSortAttr) {\n                this.$selectedSortHeader = $header;\n                var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                $header\n                    .addClass('ordered ' + selectedSortDir)\n                    .on('click', this._handleSelectedSortHeaderClick.bind(this));\n            } else {\n                // Is this attribute sortable?\n                var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                if ($sortAttribute.length) {\n                    $header\n                        .addClass('orderable')\n                        .on('click', this._handleUnselectedSortHeaderClick.bind(this));\n                }\n            }\n        }\n    },\n\n    isVerticalList: function() {\n        return true;\n    },\n\n    getTotalVisible: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._totalVisiblePostStructureTableDraggee;\n        } else {\n            return this._totalVisible;\n        }\n    },\n\n    setTotalVisible: function(totalVisible) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._totalVisiblePostStructureTableDraggee = totalVisible;\n        } else {\n            this._totalVisible = totalVisible;\n        }\n    },\n\n    getMorePending: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._morePendingPostStructureTableDraggee;\n        } else {\n            return this._morePending;\n        }\n    },\n\n    setMorePending: function(morePending) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._morePendingPostStructureTableDraggee = morePending;\n        } else {\n            this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n        }\n    },\n\n    getLoadMoreParams: function() {\n        var params = this.base();\n\n        // If we are dragging the last elements on the page,\n        // tell the controller to only load elements positioned after the draggee.\n        if (this._isStructureTableDraggingLastElements()) {\n            params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n        }\n\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        this.base($newElements);\n\n        if (this.structureTableSort) {\n            this.structureTableSort.addItems($newElements);\n        }\n\n        Craft.cp.updateResponsiveTables();\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            params: {\n                includeTableAttributesForSource: this.elementIndex.sourceKey\n            },\n            onSaveElement: response => {\n                if (response.tableAttributes) {\n                    this._updateTableAttributes($element, response.tableAttributes);\n                }\n            },\n            elementIndex: this.elementIndex\n        });\n    },\n\n    _collapseElement: function($toggle, force) {\n        if (!force && !$toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.removeClass('expanded');\n\n        // Find and remove the descendant rows\n        var $row = $toggle.parent().parent(),\n            id = $row.data('id'),\n            level = $row.data('level'),\n            $nextRow = $row.next();\n\n        while ($nextRow.length) {\n            if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                if ($nextRow.data('level') <= level) {\n                    break;\n                }\n\n                if (this.elementSelect) {\n                    this.elementSelect.removeItems($nextRow);\n                }\n\n                if (this.structureTableSort) {\n                    this.structureTableSort.removeItems($nextRow);\n                }\n\n                this._totalVisible--;\n            }\n\n            var $nextNextRow = $nextRow.next();\n            $nextRow.remove();\n            $nextRow = $nextNextRow;\n        }\n\n        // Remember that this row should be collapsed\n        if (!this.elementIndex.instanceState.collapsedElementIds) {\n            this.elementIndex.instanceState.collapsedElementIds = [];\n        }\n\n        this.elementIndex.instanceState.collapsedElementIds.push(id);\n        this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n        // Bottom of the index might be viewable now\n        this.maybeLoadMore();\n    },\n\n    _expandElement: function($toggle, force) {\n        if (!force && $toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.addClass('expanded');\n\n        // Remove this element from our list of collapsed elements\n        if (this.elementIndex.instanceState.collapsedElementIds) {\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n            if (index !== -1) {\n                this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                // Add a temporary row\n                var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                // Load the nested elements\n                var params = $.extend(true, {}, this.settings.params);\n                params.criteria.descendantOf = id;\n\n                Craft.postActionRequest('element-indexes/get-more-elements', params, (response, textStatus) => {\n                    // Do we even care about this anymore?\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n\n                    if (textStatus === 'success') {\n                        var $newElements = $(response.html);\n\n                        // Are there more descendants we didn't get in this batch?\n                        var totalVisible = (this._totalVisible + $newElements.length),\n                            morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                        if (morePending) {\n                            // Remove all the elements after it\n                            var $nextRows = $spinnerRow.nextAll();\n\n                            if (this.elementSelect) {\n                                this.elementSelect.removeItems($nextRows);\n                            }\n\n                            if (this.structureTableSort) {\n                                this.structureTableSort.removeItems($nextRows);\n                            }\n\n                            $nextRows.remove();\n                            totalVisible -= $nextRows.length;\n                        } else {\n                            // Maintain the current 'more' status\n                            morePending = this._morePending;\n                        }\n\n                        $spinnerRow.replaceWith($newElements);\n                        this.thumbLoader.load($newElements);\n\n                        if (this.elementIndex.actions || this.settings.selectable) {\n                            this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                            this.elementIndex.updateActionTriggers();\n                        }\n\n                        if (this.structureTableSort) {\n                            this.structureTableSort.addItems($newElements);\n                        }\n\n                        Craft.appendHeadHtml(response.headHtml);\n                        Craft.appendFootHtml(response.footHtml);\n                        Craft.cp.updateResponsiveTables();\n\n                        this.setTotalVisible(totalVisible);\n                        this.setMorePending(morePending);\n\n                        // Is there room to load more right now?\n                        this.maybeLoadMore();\n                    }\n                });\n            }\n        }\n    },\n\n    _createSpinnerRowAfter: function($row) {\n        return $(\n            '<tr data-spinnerrow>' +\n            '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n            '<div class=\"spinner\"/>' +\n            '</td>' +\n            '</tr>'\n        ).insertAfter($row);\n    },\n\n    _isStructureTableDraggingLastElements: function() {\n        return (\n            this.structureTableSort &&\n            this.structureTableSort.dragging &&\n            this.structureTableSort.draggingLastElements\n        );\n    },\n\n    _handleSelectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        // Reverse the sort direction\n        var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n            newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n        this.elementIndex.setSortDirection(newSortDir);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleUnselectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        var attr = $header.attr('data-attribute');\n\n        this.elementIndex.setSortAttribute(attr);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleSortHeaderClick: function(ev, $header) {\n        if (this.$selectedSortHeader) {\n            this.$selectedSortHeader.removeClass('ordered asc desc');\n        }\n\n        $header.removeClass('orderable').addClass('ordered loading');\n        this.elementIndex.storeSortAttributeAndDirection();\n        this.elementIndex.updateElements();\n\n        // No need for two spinners\n        this.elementIndex.setIndexAvailable();\n    },\n\n    _updateTableAttributes: function($element, tableAttributes) {\n        var $tr = $element.closest('tr');\n\n        for (var attr in tableAttributes) {\n            if (!tableAttributes.hasOwnProperty(attr)) {\n                continue;\n            }\n\n            $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend({\n    searchTimeout: null,\n    searchMenu: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addTagInput: null,\n    $spinner: null,\n\n    _ignoreBlur: false,\n\n    init: function(settings) {\n        // Normalize the settings\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n        this.$addTagInput = this.$container.children('.add').children('.text');\n        this.$spinner = this.$addTagInput.next();\n\n        this.addListener(this.$addTagInput, 'input', () => {\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.searchForTags.bind(this), 500);\n        });\n\n        this.addListener(this.$addTagInput, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n            }\n\n            let $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options.filter('.hover'));\n                    }\n                    return;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                            if ($nextOption.length) {\n                                this.focusOption($nextOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(0));\n                        }\n                    }\n                    return;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                            if ($prevOption.length) {\n                                this.focusOption($prevOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                        }\n                    }\n                    return;\n                }\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'focus', function() {\n            if (this.searchMenu) {\n                this.searchMenu.show();\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'blur', function() {\n            if (this._ignoreBlur) {\n                this._ignoreBlur = false;\n                return;\n            }\n\n            setTimeout(() => {\n                if (this.searchMenu) {\n                    this.searchMenu.hide();\n                }\n            }, 1);\n        });\n    },\n\n    focusOption: function($option) {\n        this.searchMenu.$options.removeClass('hover');\n        $option.addClass('hover');\n        this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n    },\n\n    // No \"add\" button\n    getAddElementsBtn: $.noop,\n\n    getElementSortAxis: function() {\n        return null;\n    },\n\n    searchForTags: function() {\n        if (this.searchMenu) {\n            this.killSearchMenu();\n        }\n\n        var val = this.$addTagInput.val();\n\n        if (val) {\n            this.$spinner.removeClass('hidden');\n\n            var excludeIds = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                var id = $(this.$elements[i]).data('id');\n\n                if (id) {\n                    excludeIds.push(id);\n                }\n            }\n\n            if (this.settings.sourceElementId) {\n                excludeIds.push(this.settings.sourceElementId);\n            }\n\n            var data = {\n                search: this.$addTagInput.val(),\n                tagGroupId: this.settings.tagGroupId,\n                excludeIds: excludeIds\n            };\n\n            Craft.postActionRequest('tags/search-for-tags', data, (response, textStatus) => {\n                // Just in case\n                if (this.searchMenu) {\n                    this.killSearchMenu();\n                }\n\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                        $ul = $('<ul/>').appendTo($menu);\n\n                    var $li;\n\n                    for (var i = 0; i < response.tags.length; i++) {\n                        $li = $('<li/>')\n                            .appendTo($ul);\n\n                        $('<a data-icon=\"tag\"/>')\n                            .appendTo($li)\n                            .text(response.tags[i].title)\n                            .data('id', response.tags[i].id)\n                            .addClass(response.tags[i].exclude ? 'disabled' : '');\n                    }\n\n                    if (!response.exactMatch) {\n                        $li = $('<li/>').appendTo($ul);\n                        $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                    }\n\n                    $ul.find('a:not(.disabled):first').addClass('hover');\n\n                    this.searchMenu = new Garnish.Menu($menu, {\n                        attachToElement: this.$addTagInput,\n                        onOptionSelect: this.selectTag.bind(this)\n                    });\n\n                    this.addListener($menu, 'mousedown', () => {\n                        this._ignoreBlur = true;\n                    });\n\n                    this.searchMenu.show();\n                }\n            });\n        } else {\n            this.$spinner.addClass('hidden');\n        }\n    },\n\n    selectTag: function(option) {\n        var $option = $(option);\n\n        if ($option.hasClass('disabled')) {\n            return;\n        }\n\n        var id = $option.data('id');\n        var title = $option.text();\n\n        var $element = $('<div/>', {\n            'class': 'element small removable',\n            'data-id': id,\n            'data-site-id': this.settings.targetSiteId,\n            'data-label': title,\n            'data-editable': '1'\n        }).appendTo(this.$elementsContainer);\n\n        var $input = $('<input/>', {\n            'type': 'hidden',\n            'name': this.settings.name + '[]',\n            'value': id\n        }).appendTo($element);\n\n        $('<a/>', {\n            'class': 'delete icon',\n            'title': Craft.t('app', 'Remove')\n        }).appendTo($element);\n\n        var $titleContainer = $('<div/>', {\n            'class': 'label'\n        }).appendTo($element);\n\n        $('<span/>', {\n            'class': 'title',\n            text: title\n        }).appendTo($titleContainer);\n\n        var margin = -($element.outerWidth() + 10);\n        this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addTagInput.velocity(animateCss, 'fast');\n\n        this.$elements = this.$elements.add($element);\n\n        this.addElements($element);\n\n        this.killSearchMenu();\n        this.$addTagInput.val('');\n        this.$addTagInput.trigger('focus');\n\n        if (!id) {\n            // We need to create the tag first\n            $element.addClass('loading disabled');\n\n            var data = {\n                groupId: this.settings.tagGroupId,\n                title: title\n            };\n\n            Craft.postActionRequest('tags/create-tag', data, (response, textStatus) => {\n                if (textStatus === 'success' && response.success) {\n                    $element.attr('data-id', response.id);\n                    $input.val(response.id);\n\n                    $element.removeClass('loading disabled');\n                } else {\n                    this.removeElement($element);\n\n                    if (textStatus === 'success') {\n                        // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                }\n            });\n        }\n    },\n\n    killSearchMenu: function() {\n        this.searchMenu.hide();\n        this.searchMenu.destroy();\n        this.searchMenu = null;\n    }\n}, {\n    defaults: {\n        tagGroupId: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend({\n    getElementContainer: function() {\n        return this.$container.children('ul');\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            config = $.extend({\n                autocomplete: false,\n            }, config);\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: typeof config.autocomplete === 'boolean' ? (config.autocomplete ? 'on' : 'off') : config.autocomplete,\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            } else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n                'aria-label': Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html': option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                html: config.label,\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            } else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: allChecked || (config.values || []).includes(option.value),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            config.fieldset = true;\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<button/>', {\n                'type': 'button',\n                'class': 'lightswitch',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'checkbox',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            const id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            const containerId = config.containerId || id + '-container';\n            const name = config.name || null;\n            const value = config.value || null;\n            const small = config.small || false;\n            const autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            const disabled = config.disabled || false;\n\n            const $container = $('<div/>', {\n                id: containerId,\n                class: 'flex color-container'\n            });\n\n            const $colorPreviewContainer = $('<div/>', {\n                class: 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            const $colorPreview = $('<div/>', {\n                class: 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            const $inputContainer = $('<div/>', {\n                class: 'color-input-container',\n            })\n                .append(\n                    $('<div/>', {\n                        class: 'color-hex-indicator light code',\n                        'aria-hidden': 'true',\n                        text: '#',\n                    })\n                )\n                .appendTo($container);\n\n            const $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: Craft.ltrim(value, '#'),\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled,\n                'aria-label': Craft.t('app', 'Color hex value'),\n            }).appendTo($inputContainer);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            config.fieldset = true;o\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000)) + '-date';\n            var name = config.name || null;\n            var inputName = name ? name + '[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate: null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000)) + '-time';\n            var name = config.name || null;\n            var inputName = name ? name + '[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours() * 3600 + value.getMinutes() * 60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $(config.fieldset ? '<fieldset/>' : '<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $(config.fieldset ? '<legend/>' : '<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-${config.fieldset ? 'legend' : 'label'}` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': !config.fieldset && config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend({\n    uploader: null,\n    allowedKinds: null,\n    $element: null,\n    settings: null,\n    _rejectedFiles: {},\n    _extensionList: null,\n    _totalFileCounter: 0,\n    _validFileCounter: 0,\n\n    init: function($element, settings) {\n        this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n        this.$element = $element;\n        this.allowedKinds = null;\n        this._extensionList = null;\n        this._totalFileCounter = 0;\n        this._validFileCounter = 0;\n\n        settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n        var events = settings.events;\n        delete settings.events;\n\n        if (settings.allowedKinds && settings.allowedKinds.length) {\n            if (typeof settings.allowedKinds === 'string') {\n                settings.allowedKinds = [settings.allowedKinds];\n            }\n\n            this.allowedKinds = settings.allowedKinds;\n            delete settings.allowedKinds;\n        }\n\n        settings.autoUpload = false;\n\n        this.uploader = this.$element.fileupload(settings);\n        for (var event in events) {\n            if (!events.hasOwnProperty(event)) {\n                continue;\n            }\n\n            this.uploader.on(event, events[event]);\n        }\n\n        this.settings = settings;\n\n        this.uploader.on('fileuploadadd', this.onFileAdd.bind(this));\n    },\n\n    /**\n     * Set uploader parameters.\n     */\n    setParams: function(paramObject) {\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        this.uploader.fileupload('option', {formData: paramObject});\n    },\n\n    /**\n     * Get the number of uploads in progress.\n     */\n    getInProgress: function() {\n        return this.uploader.fileupload('active');\n    },\n\n    /**\n     * Return true, if this is the last upload.\n     */\n    isLastUpload: function() {\n        // Processing the last file or not processing at all.\n        return this.getInProgress() < 2;\n    },\n\n    /**\n     * Called on file add.\n     */\n    onFileAdd: function(e, data) {\n        e.stopPropagation();\n\n        var validateExtension = false;\n\n        if (this.allowedKinds) {\n            if (!this._extensionList) {\n                this._createExtensionList();\n            }\n\n            validateExtension = true;\n        }\n\n        // Make sure that file API is there before relying on it\n        data.process().done(() => {\n            var file = data.files[0];\n            var pass = true;\n            if (validateExtension) {\n                var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                var fileExtension = matches[1];\n                if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                    pass = false;\n                    this._rejectedFiles.type.push('“' + file.name + '”');\n                }\n            }\n\n            if (file.size > this.settings.maxFileSize) {\n                this._rejectedFiles.size.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            // If the validation has passed for this file up to now, check if we're not hitting any limits\n            if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                this._rejectedFiles.limit.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            if (pass) {\n                this._validFileCounter++;\n                data.submit();\n            }\n\n            if (++this._totalFileCounter === data.originalFiles.length) {\n                this._totalFileCounter = 0;\n                this._validFileCounter = 0;\n                this.processErrorMessages();\n            }\n        });\n\n        return true;\n    },\n\n    /**\n     * Process error messages.\n     */\n    processErrorMessages: function() {\n        var str;\n\n        if (this._rejectedFiles.type.length) {\n            if (this._rejectedFiles.type.length === 1) {\n                str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            } else {\n                str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n            this._rejectedFiles.type = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.size.length) {\n            if (this._rejectedFiles.size.length === 1) {\n                str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n            this._rejectedFiles.size = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.limit.length) {\n            if (this._rejectedFiles.limit.length === 1) {\n                str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n            this._rejectedFiles.limit = [];\n            alert(str);\n        }\n    },\n\n    humanFileSize: function(bytes) {\n        var threshold = 1024;\n\n        if (bytes < threshold) {\n            return bytes + ' B';\n        }\n\n        var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        var u = -1;\n\n        do {\n            bytes = bytes / threshold;\n            ++u;\n        }\n        while (bytes >= threshold);\n\n        return bytes.toFixed(1) + ' ' + units[u];\n    },\n\n    _createExtensionList: function() {\n        this._extensionList = [];\n\n        for (var i = 0; i < this.allowedKinds.length; i++) {\n            var allowedKind = this.allowedKinds[i];\n\n            if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                    var ext = Craft.fileKinds[allowedKind].extensions[j];\n                    this._extensionList.push(ext);\n                }\n            }\n        }\n    },\n\n    destroy: function() {\n        this.$element.fileupload('destroy');\n        this.base();\n    }\n}, {\n    defaults: {\n        dropZone: null,\n        pasteZone: null,\n        fileInput: null,\n        sequentialUploads: true,\n        maxFileSize: Craft.maxUploadSize,\n        allowedKinds: null,\n        events: {},\n        canAddMoreFiles: null,\n        headers: {'Accept': 'application/json;q=0.9,*/*;q=0.8'},\n        paramName: 'assets-upload'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Make it lowercase\n        sourceVal = sourceVal.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        sourceVal = Craft.asciiString(sourceVal);\n\n        // Handle must start with a letter and end with a letter/number\n        sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n        sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n        // Get the \"words\"\n        var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n        var uriFormat = words.join(Craft.slugWordSeparator);\n\n        if (uriFormat && this.settings.suffix) {\n            uriFormat += this.settings.suffix;\n        }\n\n        return uriFormat;\n    }\n});\n"]}